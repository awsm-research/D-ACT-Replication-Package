@java.lang.Override protected com.google.gerrit.server.group.InternalGroup fromDoc(com.google.gson.JsonObject json, java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } com.google.gson.JsonElement source = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(source.getAsJsonObject().get(GroupField.UUID.UUID.get()).getAsString()); return groupCache.get(uuid).orElseNull(); }
@java.lang.Override protected com.google.gerrit.server.group.InternalGroup fromDoc(com.google.gson.JsonObject json, java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } com.google.gson.JsonElement source = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(source.getAsJsonObject().getName()).getAsString()); return groupCache.get(uuid).orElseNull(); }
@java.lang.Override protected com.google.gerrit.server.group.InternalGroup fromDoc(com.google.gson.JsonObject json, java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } com.google.gson.JsonElement uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(source.getAsJsonObject().get(GroupField.UUID.UUID.get()).getAsString()); return groupCache.get(uuid).orElseNull(); }
@java.lang.Override protected com.google.gerrit.server.group.InternalGroup fromDoc(com.google.gson.JsonObject json, java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } com.google.gson.JsonElement uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(source.getAsJsonObject().get(GroupField.UUID.get()).getAsString()); return groupCache.get(uuid).orElseNull(); }
@java.lang.Override protected com.google.gerrit.server.group.InternalGroup fromDoc(com.google.gson.JsonObject json, java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } com.google.gson.JsonElement source = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(source.getAsJsonObject().get(GroupField.UUID.UUID.get()).getAsString()); return groupCache.get(uuid).orElseMap(null); }
@java.lang.Override protected com.google.gerrit.server.project.ProjectData fromDoc(com.google.gson.JsonObject json, java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } com.google.gson.JsonElement sourceKey = new com.google.gerrit.reviewdb.client.Project.NameKey(source.getAsJsonObject().getName()); return projectCache.get(nameKey).toProjectData(); }
@java.lang.Override protected com.google.gerrit.server.project.ProjectData fromDoc(com.google.gson.JsonObject json, java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } com.google.gson.JsonElement sourceKey = new com.google.gerrit.reviewdb.client.Project.NameKey(source.getAsJsonObject().get(ProjectField.NAME.getName()).getAsString()); return projectCache.get(nameKey).toProjectData(); }
@java.lang.Override protected com.google.gerrit.server.project.ProjectData fromDoc(com.google.gson.JsonObject json, java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } com.google.gson.JsonElement source = new com.google.gerrit.reviewdb.client.Project.NameKey(source.getAsJsonObject().get(ProjectField.NAME.getName()).getAsString()); return projectCache.get(nameKey).toProjectData(); }
@java.lang.Override protected com.google.gerrit.server.project.ProjectData fromDoc(com.google.gson.JsonObject json, java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(source.getAsJsonObject().get(ProjectField.NAME.getName()).getAsString()); return projectCache.get(name).toProjectData(); }
@java.lang.Override protected com.google.gerrit.server.project.ProjectData fromDoc(com.google.gson.JsonObject json, java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(source.getAsJsonObject().get(ProjectField.NAME.getName()).getAsString()); return projectCache.get(nameKey).toProject(); }
protected abstract com.google.gson.JsonObject doc(com.google.gson.JsonDocument doc, java.util.Set<java.lang.String> fields);
protected abstract com.google.gson.JsonObject doc(com.google.gson.JsonDocument doc, java.lang.String field);
protected abstract com.google.gson.JsonObject getDocObject(com.google.gson.JsonDocument doc, java.util.Set<java.lang.String> fields);
protected abstract com.google.gson.JsonObject doc(com.google.gson.JsonObject doc, java.lang.String field);
protected abstract com.google.gson.JsonObject doc(com.google.gson.JsonDocument doc, java.util.Set<java.lang.String>fields);
@java.lang.Override protected com.google.gerrit.server.account.AccountState fromDoc(com.google.gson.JsonObject json, java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } return accountCache.get(source.getAsJsonObject().getAsString()); }
@java.lang.Override protected com.google.gerrit.server.account.AccountState fromDoc(com.google.gson.JsonObject json, java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } return accountCache.get(source.getAsJsonObject().get(id).getAsInt()); }
@java.lang.Override protected com.google.gerrit.server.account.AccountState fromDoc(com.google.gson.JsonObject json, java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(source.getAsJsonObject().get(com.google.gerrit.reviewdb.client.ID.getName()).getAsInt()); return accountCache.get().get(id); }
@java.lang.Override protected com.google.gerrit.server.account.AccountState fromDoc(com.google.gson.JsonObject json, java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(source.getAsJsonObject().get(com.google.gerrit.reviewdb.client.ID.getName()).getAccountId()); return accountCache.get().get(id); }
@java.lang.Override protected com.google.gerrit.server.account.AccountState fromDoc(com.google.gson.JsonObject json, java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(source.getAsJsonObject().get(com.google.gerrit.reviewdb.client.Account.Id.getName()).getAsInt()); return accountCache.get().get(id); }
@java.lang.Override public com.google.gwtorm.server.ResultSet<V> read() throws com.google.gwtorm.server.OrmException { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.PatchSet> doc = readDocs(doc, doc); return this; }
@java.lang.Override public com.google.gwtorm.server.ResultSet<V> read() throws com.google.gwtorm.server.OrmException { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.PatchSet> doc = readDocs(doc); return this; }
@java.lang.Override public com.google.gwtorm.server.ResultSet<Void> read() throws com.google.gwtorm.server.OrmException { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.PatchSet> doc = readDocs(doc, doc); return this; }
@java.lang.Override public com.google.gwtorm.server.ResultSet<java.lang.V> read() throws com.google.gwtorm.server.OrmException { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.PatchSet> doc = readDocs(doc); return this; }
@java.lang.Override public com.google.gwtorm.server.ResultSet<java.lang.V> read() throws com.google.gwtorm.server.OrmException { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.PatchSet> doc = readDocs(doc, doc); return this; }
@java.lang.Override public com.google.gerrit.reviewdb.server.ReviewDb open() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = delegate.open(); if (migration.readChanges()) { if (migration.disableChangeReviewDb()) { db = new com.google.gerrit.server.schema.NoChangesReviewDbWrapper(db); } db = new com.google.gerrit.reviewdb.server.ReviewDbWrapper(db); } if (groupsMigration.disableChangeReviewDb()) { if (groupsMigration.disableGroupReviewDb()) { db = new com.google.gerrit.server.schema.NoGroups(db); } } return db; }
@java.lang.Override public com.google.gerrit.reviewdb.server.ReviewDb open() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = delegate.open(); if (migration.readChanges()) { db = new com.google.gerrit.server.schema.NoChangesReviewDbWrapper(db); } if (migration.disableChangeReviewDb()) { db = new com.google.gerrit.reviewdb.server.ReviewDbWrapper(db); } if (groupsMigration.disableChangeReviewDb()) { if (groupsMigration.disableGroupReviewDb()) { db = new com.google.gerrit.server.schema.NoGroups(db); } } return db; }
@java.lang.Override public com.google.gerrit.reviewdb.server.ReviewDb open() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = delegate.open(); if (migration.readChanges()) { if (migration.disableChangeReviewDb()) { db = new com.google.gerrit.server.schema.NoChangesReviewDbWrapper(db); } db = new com.google.gerrit.reviewdb.server.ReviewDbWrapper(db); } if (groupsMigration.disableChangeReviewDb()) { if (groupsMigration.disableGroupReviewDb()) { db = new com.google.gerrit.server.schema.NoGroups(db); } return db; }
@java.lang.Override public com.google.gerrit.reviewdb.server.ReviewDb open() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = delegate.open(); if (migration.readChanges()) { if (migration.disableChangeReviewDb()) { db = new com.google.gerrit.server.schema.NoChangesReviewDbWrapper(db); } db = new com.google.gerrit.reviewdb.server.ReviewDbWrapper(db); } if (groupsMigration.disableChangeReviewDb()) { if (groupsMigration.disableGroup()) { db = new com.google.gerrit.server.schema.NoGroups(db); } } return db; }
@java.lang.Override public com.google.gerrit.reviewdb.server.ReviewDb open() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = delegate.open(); if (migration.readChanges()) { if (migration.disableChangeReviewDb()) { db = new com.google.gerrit.server.schema.NoChangesReviewDbWrapper(db); } db = new com.google.gerrit.reviewdb.server.ReviewDbWrapper(db); } if (groupsMigration.disableChangeReviewDb()) { if (groupsMigration.disableGroupReviewDb()) { db = new com.google.gerrit.reviewdb.server.ReviewDbWrapper(db); } return db; }
static java.lang.String getGroupName(com.google.gerrit.server.account.GroupCache groupCache, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) { java.lang.String uuid = groupUUID.get(); java.lang.String name = groupCache.get(groupUUID).map(InternalGroup::getName).orElse(uuid); return com.google.gerrit.server.group.GroupsUpdate.format(name, uuid, uuid); }
static java.lang.String getGroupName(com.google.gerrit.server.account.GroupCache groupCache, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) { java.lang.String uuid = groupUUID.get(); java.lang.String name = groupCache.get(groupUUID).map(InternalGroup::getName).orElse(uuid); return com.google.gerrit.server.group.GroupsUpdate.format(name, uuid, uuid); }
static java.lang.String getGroupName(com.google.gerrit.server.account.GroupCache groupCache, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) { java.lang.String uuid = groupUuid.get(); java.lang.String name = groupCache.get(groupUUID).map(InternalGroup::getName).orElse(uuid); return com.google.gerrit.server.group.GroupsUpdate.format(name, uuid, uuid); }
static java.lang.String getGroupName(com.google.gerrit.server.account.GroupCache groupCache, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) { java.lang.String uuid = groupUuid.get(); java.lang.String name = groupCache.get(groupUUID).map(InternalGroup::getName).orElse(uuid); return com.google.gerrit.server.group.GroupsUpdate.format(name, uuid, uuid); }
static java.lang.String getGroupName(com.google.gerrit.server.account.GroupCache groupCache, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) { java.lang.String uuid = groupUUID.get(); java.lang.String name = groupCache.get(groupUUID).map(uuid).orElse(uuid); return com.google.gerrit.server.group.GroupsUpdate.format(name, uuid, uuid); }
@org.junit.Test public void includeExternalGroup() throws java.lang.Exception { java.lang.String g = createGroup("group"); gApi.groups().id(g).addGroups(g).addGroups(groupUUID); java.util.List<com.google.gerrit.extensions.common.GroupInfo> subgroups = gApi.groups().id(g).includedGroups(); assertThat(subgroups).hasSize(1); assertThat(subgroups.get(0).id).isEqualTo(submoduleUuid.replace(", submoduleUuid.get().id); if (subgroupsMigration.writeToNoteDb()) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().id(g).get().id); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = com.google.gerrit.server.group.GroupTest.log.warn(java.lang.String.format("Generating group UUID: %s", %s", %s", %d", "%3A")); assertThat(log).hasSize(2); assertThat(log.get(1).message).isEqualTo("Update group\n\n"); assertThat(log).hasSize(1); java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAudit> audit = groups.getSubsections(db, uuid); assertThat(audit).hasSize(1); assertThat(audit.get(0).isEqualTo(SystemGroupBackend.REGISTERED_USERS); } } }
@org.junit.Test public void includeExternalGroup() throws java.lang.Exception { java.lang.String g = createGroup("group"); gApi.groups().id(g).addGroups(g).addGroups(groupUUID); java.util.List<com.google.gerrit.extensions.common.GroupInfo> subgroups = gApi.groups().id(g).includedGroups(); assertThat(subgroups).hasSize(1); assertThat(subgroups.get(0).id).isEqualTo(submoduleUuid.replace(", submoduleUuid.get().id); if (subgroupsMigration.writeToNoteDb()) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().id(g).get().id); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = com.google.gerrit.server.group.GroupTest.log.warn(java.lang.String.format("Generating group UUID: %s", %s", %s", %d", "%3A")); assertThat(log).hasSize(2); assertThat(log.get(1).message).isEqualTo("Update group\n\n"); assertThat(log).hasSize(1); java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAudit> audit = groups.getSubsections(db, uuid); assertThat(audit).hasSize(1); assertThat(audit.get(0).isEqualTo(SystemGroupBackend.REGISTERED_USERS); } }
@org.junit.Test public void includeExternalGroup() throws java.lang.Exception { java.lang.String g = createGroup("group"); gApi.groups().id(g).addGroups(g).addGroups(groupUUID); java.util.List<com.google.gerrit.extensions.common.GroupInfo> subgroups = gApi.groups().id(g).includedGroups(); assertThat(subgroups).hasSize(1); assertThat(subgroups.get(0).id).isEqualTo(submoduleUuid.replace(", submoduleUuid.get().id); if (subgroupsMigration.writeToNoteDb()) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().id(g).get().id); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = com.google.gerrit.server.group.GroupTest.log.warn(java.lang.String.format("Generating group UUID: %s", %s", %s", %d", "%3A")); assertThat(log).hasSize(2); assertThat(log.get(1).message).isEqualTo("Update group\n\n"); assertThat(log).hasSize(1); java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAudit> audit = groups.getSubsections(db, uuid); assertThat(audit).hasSize(1); assertThat(audit.get(0).isEqualTo(SystemGroupBackend.REGISTERED_USERS); assertThat(audit.get(0).getIncludeUUID()).isEqualTo(System.REGISTERED); } } }
@org.junit.Test public void includeExternalGroup() throws java.lang.Exception { java.lang.String g = createGroup("group"); gApi.groups().id(g).addGroups(g).addGroups(groupUUID); java.util.List<com.google.gerrit.extensions.common.GroupInfo> subgroups = gApi.groups().id(g).includedGroups(); assertThat(subgroups).hasSize(1); assertThat(subgroups.get(0).id).isEqualTo(submoduleUuid.replace(", submoduleUuid.get().id); if (subgroupsMigration.writeToNoteDb()) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().id(g).get().id); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = com.google.gerrit.server.group.GroupTest.log.warn(java.lang.String.format("Generating group UUID: %s", %s", %s", %d", "%3A")); assertThat(log).hasSize(2); assertThat(log.get(1).message).isEqualTo("Update group\n\n"); assertThat(log).hasSize(1); java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAudit> audit = groups.getSubsections(db, uuid); assertThat(audit).hasSize(1); assertThat(audit.get(0).isEqualTo(SystemGroupBackend.REGISTERED_USERS); assertThat(audit).hasSize(1); } } }
@org.junit.Test public void includeExternalGroup() throws java.lang.Exception { java.lang.String g = createGroup("group"); gApi.groups().id(g).addGroups(g).addGroups(groupUUID); java.util.List<com.google.gerrit.extensions.common.GroupInfo> subgroups = gApi.groups().id(g).includedGroups(); assertThat(subgroups).hasSize(1); assertThat(subgroups.get(0).id).isEqualTo(submoduleUuid.replace(", submoduleUuid.get().id); if (subgroupsMigration.writeToNoteDb()) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().id(g).get().id); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = com.google.gerrit.server.group.GroupTest.log.warn(java.lang.String.format("Generating group UUID: %s", %s", %s", %d", "%3A")); assertThat(log).hasSize(2); assertThat(log.get(1).message).isEqualTo("Update group\n\n"); assertThat(log).hasSize(1); java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAudit> audit = groups.getSubsections(db, uuid); assertThat(audit).hasSize(1); assertThat(audit.get(0).isEqualTo(SystemGroupBackend.REGISTERED_USERS); assertThat(audit.get(0).getIncludeUUID()).isEqualTo(System.REGISTERED_USERS); } }
@java.lang.Override protected void configure() { bind(com.google.gerrit.extensions.config.CapabilityDefinition.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(Monitor.ID)).to(com.googlesource.gerrit.plugins.xdocs.Monitor.class); if (cfg.getBoolean("allowTopMenu", true)) { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.TopMenu.class).toBoolean("allowTopMenu", true); } else if ((java.nio.file.Files.exists()) && (java.nio.file.Files.exists(directoryName))) { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.TopMenu.class).toInstance(pluginName); } else { storageDir = tmpDir.resolve(pluginName); } if ((java.lang.System.exists(pluginName)!= null) && (!(java.lang.System.isDirectory()))) { java.lang.System.setProperty(((pluginName) + ".storage-directory", cfg.getString())); if (java.lang.System.getProperty("storage-directory", storageName)) == null) { java.lang.System.setProperty(((pluginName) + ".storage")); } } }
@java.lang.Override protected void configure() { bind(com.google.gerrit.extensions.config.CapabilityDefinition.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(Monitor.ID)).to(com.googlesource.gerrit.plugins.xdocs.Monitor.class); if (cfg.getBoolean("allowTopMenu", true)) { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.TopMenu.class).toBoolean("allowTopMenu", true); } else if ((java.nio.file.Files.exists()) && (java.nio.file.Files.exists(directoryName))) { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.TopMenu.class).toInstance(pluginName); } else { storageDir = tmpDir.resolve(pluginName); } if ((java.lang.System.exists(pluginName)!= null) && (!(java.lang.System.isDirectory()))) { java.lang.System.setProperty(((pluginName) + ".storage-directory", cfg.getString())); if ((java.lang.System.getProperty((storageDir) + ".storage") == null) { java.lang.System.setProperty(((pluginName) + ".storage")); } } }
@java.lang.Override protected void configure() { bind(com.google.gerrit.extensions.config.CapabilityDefinition.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(Monitor.ID)).to(com.googlesource.gerrit.plugins.xdocs.Monitor.class); if (cfg.getBoolean("allowTopMenu", true)) { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.TopMenu.class).toBoolean("allowTopMenu", true); } else if ((java.nio.file.Files.exists()) && (java.nio.file.Files.exists(directoryName))) { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.TopMenu.class).toInstance(pluginName); } else { storageDir = tmpDir.resolve(pluginName); } if ((java.lang.System.exists(pluginName)!= null) && (!(java.lang.System.isDirectory()))) { java.lang.System.setProperty(((pluginName) + ".storage-directory", cfg.getString())); if (java.lang.System.getProperty("storage-directory", cfg.getString())) == null) { java.lang.System.setProperty(((pluginName) + ".storage")); } } }
@java.lang.Override protected void configure() { bind(com.google.gerrit.extensions.config.CapabilityDefinition.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(Monitor.ID)).to(com.googlesource.gerrit.plugins.xdocs.Monitor.class); if (cfg.getBoolean("allowTopMenu", true)) { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.TopMenu.class).toBoolean("allowTopMenu", true); } else if ((java.nio.file.Files.exists()) && (java.nio.file.Files.exists(directoryName))) { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.TopMenu.class).toInstance(pluginName); } else { storageDir = tmpDir.resolve(pluginName); } if ((java.lang.System.exists(pluginName)!= null) && (!(java.lang.System.isDirectory()))) { java.lang.System.setProperty(((pluginName) + ".storage-directory", cfg.getString())); if (java.lang.System.getProperty("storage-directory", cfg.getString())) == null) { java.lang.System.setProperty(((pluginName) + ".storage", storage_directory")); } } }
@java.lang.Override protected void configure() { bind(com.google.gerrit.extensions.config.CapabilityDefinition.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(Monitor.ID)).to(com.googlesource.gerrit.plugins.xdocs.Monitor.class); if (cfg.getBoolean("allowTopMenu", true)) { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.TopMenu.class).toBoolean("allowTopMenu", true); } else if ((java.nio.file.Files.exists()) && (java.nio.file.Files.exists(directoryName))) { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.TopMenu.class).toInstance(pluginName); } else { storageDir = tmpDir.resolve(pluginName); } if ((java.lang.System.exists(pluginName)!= null) && (!(java.lang.System.isDirectory()))) { java.lang.System.setProperty(((pluginName) + ".storage-directory", cfg.getString())); if (java.lang.System.getProperty("storage-directory", cfg.getString())) == null) { java.lang.System.setProperty(((pluginName) + ".storage-directory", storagePath.toString())); } } }
private java.lang.String getStorageDir() { final java.nio.file.Path tmp = com.googlesource.gerrit.plugins.javax.servlet.httpd.GerritJavax.Javax.servlet.Javax.servlet.Filter.Javax.servlet.Javax.servlet.http.HttpServletRequestFilter.JARNOT_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { return tmp.toString(); } if (!(java.nio.file.Files.isDirectory())) { try { java.nio.file.Files.createDirectories(defaultDataDir); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.javax.servlet.Filter.Javax.servlet.Filter.JsonFilter.log.error(e); throw new java.lang.RuntimeException(e); } } return defaultDataDir.toString(); }
private java.lang.String getStorageDir() { final java.nio.file.Path tmp = com.googlesource.gerrit.plugins.javax.servlet.httpd.GerritJavax.Javax.servlet.Javax.servlet.Filter.Javax.servlet.Javax.servlet.http.HttpServletRequestFilter.JARNOT_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { return tmp.toString(); } if (!(java.nio.file.Files.isDirectory())) { try { java.nio.file.Files.createDirectories(defaultDataDir); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.javax.servlet.Filter.JsonFilter.JsonFilter.log.error("Creation of javax.nio.IOException e); throw new java.lang.RuntimeException(e); } } return defaultDataDir.toString(); }
private java.lang.String getStorageDir() { final java.nio.file.Path tmp = com.googlesource.gerrit.plugins.javax.servlet.httpd.GerritJavax.Javax.servlet.Javax.servlet.Filter.Javax.servlet.Javax.servlet.http.HttpServletRequestFilter.JARNOT_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { return tmp.toString(); } if (!(java.nio.file.Files.isDirectory())) { try { java.nio.file.Files.createDirectories(defaultDataDir); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.javax.servlet.Filter.Javax.servlet.Filter.JsonFilter.log.error(e); throw new java.lang.RuntimeException(e); } return defaultDataDir.toString(); } }
private java.lang.String getStorageDir() { final java.nio.file.Path tmp = com.googlesource.gerrit.plugins.javax.servlet.httpd.GerritJavax.Javax.servlet.Javax.servlet.Filter.Javax.servlet.Javax.servlet.http.HttpServletRequestFilter.JARNOT_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { return tmp.toString(); } if (!(java.nio.file.Files.isDirectory())) { try { java.nio.file.Files.createDirectories(defaultDataDir); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.javax.servlet.Filter.Javax.servlet.Filter.JsonFilter.log.error(e); throw new java.lang.RuntimeException(e); } } return defaultDataDir; }
private java.lang.String getStorageDir() { final java.nio.file.Path tmp = com.googlesource.gerrit.plugins.javax.servlet.httpd.GerritJavax.Javax.servlet.Javax.servlet.Filter.Javax.servlet.Javax.servlet.http.HttpServletRequestFilter.JARNOT_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { return tmp.toString(); } if (!(java.nio.file.Files.isDirectory())) { try { java.nio.file.Files.createDirectories(defaultDataDir); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.javax.servlet.Filter.JsonFilter.JsonFilter.log.error("Creation of javax.nio.IOException e); throw new java.lang.RuntimeException(e); } } return defaultDataDir; }
private org.eclipse.jgit.lib.ObjectId createCommit(org.eclipse.jgit.lib.Repository repo, java.lang.String commitMessage) throws java.io.IOException { return createCommit(repo, commitMessage, null); }
private org.eclipse.jgit.lib.ObjectId createCommit(org.eclipse.jgit.lib.Repository repo, java.lang.String commitMessage) throws java.io.IOException { return createCommit(repo, commitMessage); }
private org.eclipse.jgit.lib.ObjectId createCommit(org.eclipse.jgit.lib.Repository repo, java.lang.String commitMessage) throws java.io.IOException { org.eclipse.jgit.lib.Commit commit = createCommit(repo, commitMessage); return createCommit(repo, commitMessage, null); }
private org.eclipse.jgit.lib.ObjectId createCommit(org.eclipse.jgit.lib.Repository repo, java.lang.String commitMessage) throws java.io.IOException { org.eclipse.jgit.lib.Commit commit = createCommit(repo, commitMessage, null); return createCommit(repo, commitMessage, null); }
private org.eclipse.jgit.lib.ObjectId createCommit(org.eclipse.jgit.lib.Repository repo, java.lang.String commitMessage) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openCommit(repo, commitMessage)) { return createCommit(repo, commitMessage, null); } }
private org.eclipse.jgit.lib.ObjectId createCommit(org.eclipse.jgit.lib.Repository repo, java.lang.String commitMessage, @com.google.gerrit.common.Nullable org.eclipse.jgit.lib.ObjectId treeId) throws java.io.IOException { try (org.eclipse.jgit.lib.ObjectInserter oi = repo.newObjectInserter()) { if (treeId == null) { treeId = oi.insert(Constants.OBJ_TREE, new byte[]{ }); } org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), com.google.gerrit.common.TimeUtil.nowTs()); org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(treeId); cb.setCommitter(ident); cb.setAuthor(ident); cb.setMessage(commitMessage); return commit; }
private org.eclipse.jgit.lib.ObjectId createCommit(org.eclipse.jgit.lib.Repository repo, java.lang.String commitMessage, @com.google.gerrit.common.Nullable org.eclipse.jgit.lib.ObjectId treeId) throws java.io.IOException { try (org.eclipse.jgit.lib.ObjectInserter oi = repo.newObjectInserter()) { if (treeId == null) { treeId = oi.insert(Constants.OBJ_TREE, new byte[]{ }); } org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), com.google.gerrit.common.TimeUtil.nowTs()); org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(treeId); cb.setCommitter(ident); cb.setCommitter(ident); cb.setMessage(commitMessage); return commit; }
private org.eclipse.jgit.lib.ObjectId createCommit(org.eclipse.jgit.lib.Repository repo, java.lang.String commitMessage, @com.google.gerrit.common.Nullable org.eclipse.jgit.lib.ObjectId treeId) throws java.io.IOException { try (org.eclipse.jgit.lib.ObjectInserter oi = repo.newObjectInserter()) { if (treeId == null) { treeId = oi.insert(Constants.OBJ_TREE, new byte[]{ }); } org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), com.google.gerrit.common.TimeUtil.nowTs()); org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(treeId); cb.setCommitter(ident); cb.setCommitter(ident); cb.setMessage(commitMessage); cb.setMessage(commitMessage); return commit; } }
private org.eclipse.jgit.lib.ObjectId createCommit(org.eclipse.jgit.lib.Repository repo, java.lang.String commitMessage, @com.google.gerrit.common.Nullable org.eclipse.jgit.lib.ObjectId treeId) throws java.io.IOException { try (org.eclipse.jgit.lib.ObjectInserter oi = repo.newObjectInserter()) { if (treeId == null) { treeId = oi.insert(Constants.OBJ_TREE, new byte[]{ }); } org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), com.google.gerrit.common.TimeUtil.nowTs()); org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(treeId); cb.setCommitter(ident); cb.setAuthor(ident); cb.setCommitter(ident); cb.setMessage(commitMessage); return commit; } }
private org.eclipse.jgit.lib.ObjectId createCommit(org.eclipse.jgit.lib.Repository repo, java.lang.String commitMessage, @com.google.gerrit.common.Nullable org.eclipse.jgit.lib.ObjectId treeId) throws java.io.IOException { try (org.eclipse.jgit.lib.ObjectInserter oi = repo.newObjectInserter()) { if (treeId == null) { treeId = oi.insert(Constants.OBJ_TREE, new byte[]{ }); } org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), com.google.gerrit.common.TimeUtil.nowTs()); org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(treeId); cb.setCommitter(ident); cb.setAuthor(ident); cb.setCommitter(ident); cb.setMessage(commitMessage); return commit; }
@org.junit.Test public void pushToDeletedGroupBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("foobar")).get().id)); assertPushToGroup(allUsers, groupRef, true, "group update not allowed"); }
@org.junit.Test public void pushToDeletedGroupBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { java.lang.String groupRef = com.google.gerrit.reviewdb.client.AccountGroup.UUID.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("fo")).get().id)); assertPushToReviewers(allUsers, groupRef, true, "group update not allowed"); }
@org.junit.Test public void pushToDeletedGroupBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { java.lang.String groupRef = com.google.gerrit.reviewdb.client.AccountGroup.UUID.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("fo")).get().id)); assertPushToReviewers(allUsers, groupRef, true, "group not allowed"); }
@org.junit.Test public void pushToDeletedGroupBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { java.lang.String groupRef = com.google.gerrit.reviewdb.client.AccountGroup.UUID.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("fo")).get().id)); assertPushToReviewers(allUsers, groupRef, true, "group update not permitted"); }
@org.junit.Test public void pushToDeletedGroupBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { java.lang.String groupRef = com.google.gerrit.reviewdb.client.AccountGroup.UUID.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("fo")).get().id)); assertPushTo(allUsers, groupRef, true, "group not allowed"); }
@org.junit.Test public void cannotDeleteGroupBranch() throws java.lang.Exception { assume().that(groupsInNoteDbTable.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("Administrators")).isTrue(); com.google.gerrit.server.group.InternalGroup adminGroup = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("Administrators")).orNull(); assertThat(adminGroup).isNotNull(); testCannotDeleteGroupBranch.refsGroups(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroup.getGroupUUID())); }
@org.junit.Test public void cannotDeleteGroupBranch() throws java.lang.Exception { assume().that(groupsInNoteDbTable.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("Administrators")).isTrue(); com.google.gerrit.server.group.InternalGroup adminGroup = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("Administrators")).orNull(null); assertThat(adminGroup).isNotNull(); testCannot deleteGroupBranch(adminGroup.getGroupUUID()).toDelete(); }
@org.junit.Test public void cannotDeleteGroupBranch() throws java.lang.Exception { assume().that(groupsInNoteDbTable.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("Administrators")).isTrue(); com.google.gerrit.server.group.InternalGroup adminGroup = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("Administrators")).orNull(null); assertThat(adminGroup).isNotNull(); testCannotDeleteGroup.refsGroups(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), adminGroup.getGroupUUID())); }
@org.junit.Test public void cannotDeleteGroupBranch() throws java.lang.Exception { assume().that(groupsInNoteDbTable.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("Administrators")).isTrue(); com.google.gerrit.server.group.InternalGroup adminGroup = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("Administrators")).orNull(null); assertThat(adminGroup).isNotNull(); testCannotDeleteGroupBranch.refsGroups(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), adminGroup.getGroupUUID())); }
@org.junit.Test public void cannotDeleteGroupBranch() throws java.lang.Exception { assume().that(groupsInNoteDbTable.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("Administrators")).isTrue(); com.google.gerrit.server.group.InternalGroup adminGroup = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("Administrators")).orNull(); assertThat(adminGroup).isNotNull(); testCannotDeleteGroupBranch.refsGroups(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), adminGroup.getGroupUUID())); }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { return java.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch)) { return java.util.Collections.emptyList(); } if ((receiveEvent.command.getRefName().startsWith(RefNames.REFS_CHANGES)) || (receiveEvent.command.getRefName().startsWith(RefNames.REFS_DELETE))) { throw new com.google.gerrit.server.git.validators.CommitValidationException("not allowed to update not allowed"); } return java.util.Collections.emptyList(); }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { return java.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch)) { return java.util.Collections.emptyList(); } if ((receiveEvent.command.getRefName().startsWith(RefNames.REFS_CHANGES)) || (receiveEvent.command.getRefName().startsWith(RefNames.REFS_USERS))) { throw new com.google.gerrit.server.git.validators.CommitValidationException("not allowed to update not allowed"); } return java.util.Collections.emptyList(); }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { return java.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch)) { return java.util.Collections.emptyList(); } if ((receiveEvent.command.getRefName().startsWith(RefNames.REFS_CHANGES)) || (receiveEvent.command.getRefName().startsWith(RefNames.REFS_GROUPS))) { throw new com.google.gerrit.server.git.validators.CommitValidationException("not allowed to update not allowed"); } return java.util.Collections.emptyList(); }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { return java.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch)) { return java.util.Collections.emptyList(); } if ((receiveEvent.command.getRefName().startsWith(RefNames.REFS_CHANGES)) || (receiveEvent.command.getRefName().startsWith(RefNames.REFS_DELETE))) { throw new com.google.gerrit.server.git.validators.CommitValidationException("not allowed to update not allowed to update not allowed"); } return java.util.Collections.emptyList(); }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { return java.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch)) { return java.util.Collections.emptyList(); } if ((receiveEvent.command.getRefName().startsWith(RefNames.REFS_CHANGES)) || (receiveEvent.command.getRefName().startsWith(RefNames.REFS_DELETE))) { throw new com.google.gerrit.server.git.validators.CommitValidationException("not allowed to update not allowed"); } return java.util.Collections.<java.lang.String>(); }
private void createBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref, java.lang.String commitMessage) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository rw = repoManager.openRepository(project);org.eclipse.jgit.lib.ObjectInserter oi = repoManager.newObjectInserter();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(r)) { org.eclipse.jgit.lib.ObjectId emptyCommit = createCommit(r, commitMessage); org.eclipse.jgit.lib.ObjectId emptyCommit = rw.parseCommit(ref); updateRef.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); updateRef.setNewObjectId(emptyCommit); assertThat(updateRefUpdate.Result.NEW); } }
private void createBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref, java.lang.String commitMessage) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository rw = repoManager.openRepository(project);org.eclipse.jgit.lib.ObjectInserter oi = repoManager.newObjectInserter();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(r)) { org.eclipse.jgit.lib.ObjectId emptyCommit = createCommit(r, commitMessage); org.eclipse.jgit.lib.ObjectId emptyCommit = rw.parseCommit(ref); updateRefUpdate.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); updateRef.setNewObjectId(emptyCommit); assertThat(updateRefUpdate.Result.NEW); } }
private void createBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref, java.lang.String commitMessage) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository r = repoManager.openRepository(project);org.eclipse.jgit.lib.ObjectInserter oi = repoManager.newObjectInserter();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(r)) { org.eclipse.jgit.lib.ObjectId emptyCommit = createCommit(r, commitMessage); org.eclipse.jgit.lib.ObjectId emptyCommit = rw.parseCommit(ref); updateRef.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); updateRef.setNewObjectId(emptyCommit); assertThat(updateRefUpdate.Result.NEW); } }
private void createBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref, java.lang.String commitMessage) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository rw = repoManager.openRepository(project);org.eclipse.jgit.lib.ObjectInserter oi = repoManager.newObjectInserter();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(r)) { org.eclipse.jgit.lib.ObjectId emptyCommit = createCommit(r, commitMessage); org.eclipse.jgit.lib.ObjectId emptyCommit = rw.parseCommit(ref); updateRef.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); updateRefUpdate.setNewObjectId(emptyCommit); assertThat(updateRefUpdate.Result.NEW); } }
private void createBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref, java.lang.String commitMessage) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository rw = repoManager.openRepository(project);org.eclipse.jgit.lib.ObjectInserter oi = repoManager.newObjectInserter();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.ObjectId emptyCommit = createCommit(r, commitMessage); org.eclipse.jgit.lib.ObjectId emptyCommit = rw.parseCommit(ref); updateRefUpdate.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); updateRef.setNewObjectId(emptyCommit); assertThat(updateRefUpdate.Result.NEW); } }
@java.lang.Override public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.server.IdentifiedUser caller) throws com.google.gerrit.server.git.validators.MergeValidationException { if ((!(allUsersName.equals(destProject.getNameKey()))) || (!(destBranch.get().equals(RefNames.REFS_DEFS))) { return; } throw new com.google.gerrit.server.git.validators.MergeValidationException("Not allowed to update not allowed to update not allowed"); }
@java.lang.Override public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.server.IdentifiedUser caller) throws com.google.gerrit.server.git.validators.MergeValidationException { if ((!(allUsersName.equals(destProject.getNameKey()))) || (!(destBranch.get().startsWith(RefNames.REFS_DEFS))) { return; } throw new com.google.gerrit.server.git.validators.MergeValidationException("Not allowed to update not allowed to delete project"); }
@java.lang.Override public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.server.IdentifiedUser caller) throws com.google.gerrit.server.git.validators.MergeValidationException { if ((!(allUsersName.equals(destProject.getNameKey()))) || (!(destBranch.get().startsWith(RefNames.REFS_DEFS))) { return; } throw new com.google.gerrit.server.git.validators.MergeValidationException("Not allowed to update not allowed to update not allowed"); }
@java.lang.Override public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.server.IdentifiedUser caller) throws com.google.gerrit.server.git.validators.MergeValidationException { if ((!(allUsersName.equals(destProject.getNameKey()))) || (!(destBranch.get().startsWith(RefNames.REFS_DELETE))) { return; } throw new com.google.gerrit.server.git.validators.MergeValidationException("Not allowed to update not allowed to update not allowed"); }
@java.lang.Override public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.server.IdentifiedUser caller) throws com.google.gerrit.server.git.validators.MergeValidationException { if ((!(allUsersName.equals(destProject.getNameKey()))) || (!(destBranch.get().equals(RefNames.REFS_DEFS))) { return; } throw new com.google.gerrit.server.git.validators.MergeValidationException("Not allowed to update not allowed to update not allowed"); }
@org.junit.Test public void pushToDeletedGitBranchForNonAllUsersRepo() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project = null; java.lang.String groupRef = com.google.gerrit.reviewdb.client.AccountGroup.UUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("fo")).get().id)); assertPushToReviewers(groupRef, groupRef, true, null); }
@org.junit.Test public void pushToDeletedGroupsBranchForNonAllUsersRepo() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project = null; java.lang.String groupRef = com.google.gerrit.reviewdb.client.AccountGroup.UUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("fo")).get().id)); assertPushToReviewers(groupRef, groupRef, true, null); }
@org.junit.Test public void pushToDeletedGitBranchForNonAllUsersRepo() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project = null; java.lang.String groupRef = com.google.gerrit.reviewdb.client.AccountGroup.UUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("fo")).get().id)); assertPushToReviewers(groupRef, groupRef, null, null); }
@org.junit.Test public void pushToDeletedGitBranchForNonAllUsersRepo() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project = null; java.lang.String groupRef = com.google.gerrit.reviewdb.client.AccountGroup.UUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("fo")).get().id)); assertPushToGroup(groupRef, groupRef, null, null); }
@org.junit.Test public void pushToDeletedGitBranchForNonAllUsersRepo() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project = null; java.lang.String groupRef = com.google.gerrit.reviewdb.client.AccountGroup.UUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("fo")).get().id)); assertPushToReviewers(groupRef, groupRef, null); }
@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = rw.commit("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers))).add("groups", ((("" + "\"]\n") + "\n") + "\n") + "\n")).create(rev); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationError()).hasSize(1); assertThat(cfg.getValidationError()).hasSize(1); }
@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupFile() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = rw.commit("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers))).add("groups", ((("" + "\"]\n") + "\n") + "\n") + "\n")).create(rev); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationError()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationError()).hasSize(1); }
@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = rw.commit("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers))).add("groups", ((("" + "\"]\n") + "\n") + "\n") + "\n") + "\n")).create(rev); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationError()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationError()).containsExactly((("Group " + (staff.getName())) + " is not in ") + (GroupList.FILE_NAME))); }
@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = rw.commit("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers))).add("groups", ((("" + "\"]\n") + "\n") + "\n") + "\n") + "\n")).create(rev); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationError()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationError()).containsExactly((("Group " + (staff.getName())) + "\" not in ") + (GroupList.FILE_NAME))); }
@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = rw.commit("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers))).add("groups", ((("" + "\"]\n") + "\n") + "\n") + "\n") + "\n")).create(rev); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationError()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationError()).containsExactly(((("\n" + (staff.getName())) + "\" not in ") + (GroupList.FILE_NAME))); }
@org.junit.Test public void readConfigLabelScores() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = commit.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers))).add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developer); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); java.util.Map<java.lang.String, com.google.gerrit.common.data.LabelType> labels = cfg.getLabelSections(); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); java.util.Map<java.lang.String, com.google.gerrit.common.data.LabelType> labels = cfg.getLabelSections(); assertThat(type.isCopyMinScore()).isNotEqualTo(LabelType.DELETE_SC_MAX_CONFIG); assertThat(type.isCopyMaxScore()).isNotEqualTo(LabelType.DEFAULT_MAX_CED); assertThat(type.isCopyMaxScore()).isNotEqualTo(LabelType.DEFAULT); assertThat(type.isCopyAllScoresOnMerge()).isNotNull(); assertThat(type.isCopyAllScoresOnChange()).isNotNull(); assertThat(type.isCopyAllScoresIfNoCode()).isNotEqualTo(LabelType.DEFAULT); }
@org.junit.Test public void readConfigLabelScores() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = commit.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers))).add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developer); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); java.util.Map<java.lang.String, com.google.gerrit.common.data.LabelType> labels = cfg.getLabelSections(); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); java.util.Map<java.lang.String, com.google.gerrit.common.data.LabelType> labels = cfg.getLabelSections(); assertThat(type.isCopyMinScore()).isNotEqualTo(LabelType.DELETE_SC_MAX_CONFIG); assertThat(type.isCopyMaxScore()).isNotEqualTo(LabelType.DEFAULT_MAX_CED); assertThat(type.isCopyMaxScore()).isNotEqualTo(LabelType.DEFAULT); assertThat(type.isCopyAllScoresOnMerge()).isNotNull(); assertThat(type.isCopyAllScoresOnChange()).isNotNull(); assertThat(type.isCopyAllScoresIfNoCode()).isNotEqualTo(labelType); assertThat(type.isCopyAllScoresIfNoChange()).isNotNull(); }
@org.junit.Test public void readConfigLabelScores() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = commit.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers))).add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developer); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); java.util.Map<java.lang.String, com.google.gerrit.common.data.LabelType> labels = cfg.getLabelSections(); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); java.util.Map<java.lang.String, com.google.gerrit.common.data.LabelType> labels = cfg.getLabelSections(); assertThat(type.isCopyMinScore()).isNotEqualTo(LabelType.DELETE_SC_MAX_CONFIG); assertThat(type.isCopyMaxScore()).isNotEqualTo(LabelType.DEFAULT_MAX_CED); assertThat(type.isCopyMaxScore()).isNotEqualTo(LabelType.DEFAULT); assertThat(type.isCopyAllScoresOnMerge()).isNotNull(); assertThat(type.isCopyAllScoresOnChange()).isNotNull(); assertThat(type.isCopyAllScoresIfNoCode()).isNotEqualTo(labelType.DEFAULT); }
@org.junit.Test public void readConfigLabelScores() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = commit.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers))).add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developer); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); java.util.Map<java.lang.String, com.google.gerrit.common.data.LabelType> labels = cfg.getLabelSections(); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); java.util.Map<java.lang.String, com.google.gerrit.common.data.LabelType> labels = cfg.getLabelSections(); assertThat(type.isCopyMinScore()).isNotEqualTo(LabelType.DELETE_SC_MAX_CONFIG); assertThat(type.isCopyMaxScore()).isNotEqualTo(LabelType.DEFAULT_MAX_CED); assertThat(type.isCopyMaxScore()).isNotEqualTo(LabelType.DEFAULT); assertThat(type.isCopyAllScoresOnMerge()).isNotNull(); assertThat(type.isCopyAllScoresOnChange()).isNotNull(); assertThat(type.isCopyAllScoresIfNoCode()).isNotEqualTo(labelType); assertThat(type.isCopyAllScoresIfNoCodeChange()).isNotNull(); }
@org.junit.Test public void readConfigLabelScores() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = commit.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers))).add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developer); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); java.util.Map<java.lang.String, com.google.gerrit.common.data.LabelType> labels = cfg.getLabelSections(); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); java.util.Map<java.lang.String, com.google.gerrit.common.data.LabelType> labels = cfg.getLabelSections(); assertThat(type.isCopyMinScore()).isNotEqualTo(LabelType.DELETE_SC_MAX_CONFIG); assertThat(type.isCopyMaxScore()).isNotEqualTo(LabelType.DEFAULT_MAX_CED); assertThat(type.isCopyMaxScore()).isNotEqualTo(LabelType.DEFAULT); assertThat(type.isCopyAllScoresOnMerge()).isNotNull(); assertThat(type.isCopyAllScoresOnChange()).isNotNull(); assertThat(type.isCopyAllScoresIfNoCode()).isNotEqualTo(LabelType.DEFAULT); assertThat(type.isCopyAllScoresIfNoCodeChange()).isNotEqualTo(labelType.DEFAULT); }
@org.junit.Test public void editPluginConfigGroupReference() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = commit.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers))).add("groups", ((("Project\n" + "Project.toConfigValue())) + "\n") + "\n") + "\n")).create(rev); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig cfg = cfg.getPluginConfig("somePlugin"); assertThat(pluginCfg.getNames().size()).isEqualTo(1); assertThat(pluginCfg.getGroupReference("key1")).isEqualTo(user1); pluginCfg = commit(cfg); assertThat(text(rev, "project.config")).isEqualTo((((" " + (staff.toConfigValue())) + "\n") + "\n")); assertThat(text(rev, "groups/config")).isEqualTo(((((("\n" + "\n") + ": ") + (staff.getName())) + "\n") + "\n")); }
@org.junit.Test public void editPluginConfigGroupReference() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = commit.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers))).add("groups", ((("Project\n" + "Project.toConfigValue())) + "\n") + "\n") + "\n")).create(rev); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig cfg = cfg.getPluginConfig("somePlugin"); assertThat(pluginCfg.getNames().size()).isEqualTo(1); assertThat(pluginCfg.getGroupReference("key1")).isEqualTo(user1); pluginCfg = commit(cfg); assertThat(text(rev, "project.config")).isEqualTo(((("" + " + (staff.toConfigValue())) + "\n") + "\n")); assertThat(text(rev, "groups")).isEqualTo(((((("\n" + "\n") + ": ") + (staff.getName())) + "\n") + "\n")); }
@org.junit.Test public void editPluginConfigGroupReference() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = commit.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers))).add("groups", ((("Project\n" + "Project.toConfigValue())) + "\n") + "\n") + "\n")).create(rev); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig cfg = cfg.getPluginConfig("somePlugin"); assertThat(pluginCfg.getNames().size()).isEqualTo(1); assertThat(pluginCfg.getGroupReference("key1")).isEqualTo(user1); pluginCfg = commit(cfg); assertThat(text(rev, "project.config")).isEqualTo((((" " + (staff.toConfigValue())) + "\n") + "\n")); assertThat(text(rev, "groups")).isEqualTo(((((("\n" + "\n") + "Change-Id: ") + (staff.getName())) + "\n") + "\n")); }
@org.junit.Test public void editPluginConfigGroupReference() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = commit.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers))).add("groups", ((("Project\n" + "Project.toConfigValue())) + "\n") + "\n") + "\n")).create(rev); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig cfg = cfg.getPluginConfig("somePlugin"); assertThat(pluginCfg.getNames().size()).isEqualTo(1); assertThat(pluginCfg.getGroupReference("key1")).isEqualTo(user1); pluginCfg = commit(cfg); assertThat(text(rev, "project.config")).isEqualTo(((("" + " + (staff.toConfigValue())) + "\n") + "\n")); assertThat(text(rev, "groups")).isEqualTo(((((("\n" + "\n") + ": ") + (staff.getName())) + "\n") + "\n") + "\n")); }
@org.junit.Test public void editPluginConfigGroupReference() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = commit.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers))).add("groups", ((("Project\n" + "Project.toConfigValue())) + "\n") + "\n") + "\n")).create(rev); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig cfg = cfg.getPluginConfig("somePlugin"); assertThat(pluginCfg.getNames().size()).isEqualTo(1); assertThat(pluginCfg.getGroupReference("key1")).isEqualTo(user1); pluginCfg = commit(cfg); assertThat(text(rev, "project.config")).isEqualTo((((" " + (staff.toConfigValue())) + "\n") + "\n")); assertThat(text(rev, "groups")).isEqualTo(((((("\n" + "\n") + "Change-Id: ") + (staff.getName())) + "\n") + "\n") + "\n")); }
@org.junit.Test public void readPluginConfigGroupReference() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = commit.commit(com.google.gerrit.server.git.ProjectConfigTest.group(developers))).add("groups", ((("" + "Project.name())) + "\n") + "\n") + "\n") + "\n")).create(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(pluginConfig.getNames().size()).isEqualTo(1); assertThat(pluginCfg.getGroupReference("key1")).isEqualTo(user1); }
@org.junit.Test public void readPluginConfigGroupReference() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = commit.commit(com.google.gerrit.server.git.ProjectConfigTest.group(developers))).add("groups", ((("" + "Project.name())) + "\n") + "\n") + "\n")).create(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(pluginConfig.getNames().size()).isEqualTo(1); assertThat(pluginCfg.getGroupReference("key1")).isEqualTo(user1); }
@org.junit.Test public void readPluginConfigGroupReference() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = commit.commit(com.google.gerrit.server.git.ProjectConfigTest.group(developers))).add("groups", ((("" + "Project.name())) + "\n") + "\n") + "\n") + "\n")).create(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig cfg = read(rev); assertThat(pluginCfg.getNames().size()).isEqualTo(1); assertThat(pluginCfg.getGroupReference("key1")).isEqualTo(user1); }
@org.junit.Test public void readPluginConfigGroupReference() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = commit.commit("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers))).add("groups", ((("Project\n" + "Project.name())) + "\n") + "\n") + "\n")).create(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig cfg = read(rev); assertThat(pluginCfg.getNames().size()).isEqualTo(1); assertThat(pluginCfg.getGroupReference("key1")).isEqualTo(user1); }
@org.junit.Test public void readPluginConfigGroupReference() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = commit.commit(com.google.gerrit.server.git.ProjectConfigTest.group(developers))).add("groups", ((("" + "Project.name())) + "\n") + "\n") + "\n") + "\n")).create(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig cfg = new com.google.gerrit.server.config.PluginConfig(); cfg.getPluginConfig("somePlugin"); assertThat(pluginCfg.getNames().size()).isEqualTo(1); assertThat(pluginCfg.getGroupReference("key1")).isEqualTo(developers); }
private java.lang.String getStorageDir() { final java.nio.file.Path tmp = java.nio.file.Paths.get(java.lang.System.getProperty("javax.servlet.http.System.getProperty("temp"))).resolve(com.googlesource.gerrit.plugins.javax.servlet.httpd.GerritJavax.Javax.servlet.Javax.servlet.Filter.JAVAUTH_DIR); if (java.nio.file.Files.isDirectory(tmp)) { return tmp.toString(); } return java.nio.file.Paths.get(path); }
private java.lang.String getStorageDir() { final java.nio.file.Path tmp = java.lang.System.getProperty("javax.servlet.System.getProperty("javax.servlet.http.System.getProperty("temp"))).resolve(com.googlesource.gerrit.plugins.javax.servlet.http.GerritJavax.Javax.servlet.Javax.servlet.Filter.JAVAUTH_DIR); if (java.nio.file.Files.isDirectory(tmp)) { return tmp.toString(); } return java.nio.file.Paths.get(path); }
private java.lang.String getStorageDir() { final java.nio.file.Path tmp = java.lang.System.getProperty("javax.servlet.System.getProperty("javax.servlet.http.System.getProperty("temp"))).resolve(com.googlesource.gerrit.plugins.javax.servlet.http.GerritJavax.Javax.servlet.Javax.servlet.Filter.JAVAUTH_WINDOW_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { return java.nio.file.Paths.toString(); } return java.nio.file.Paths.get(path); }
private java.lang.String getStorageDir() { final java.nio.file.Path tmp = java.lang.System.getProperty("javax.servlet.System.getProperty("javax.servlet.http.System.getProperty("temp"))).resolve(com.googlesource.gerrit.plugins.javax.servlet.http.GerritJavax.Javax.servlet.Javax.servlet.Filter.JAVAUTH_WINDOW_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { return java.nio.file.Paths.toString(); } return java.nio.file.Paths.get(com.googlesource.gerrit.plugins.javax.naming.directory.GerritMonitor.JsonData.JAR_DIR).map((path) -> path) -> { if (!(java.nio.file.Files.isDirectory(storageDir))) { try { java.nio.file.Files.createDirectories(storageDir); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.javax.servlet.HttpServlet.JsonFilter.log.error(e); throw new java.lang.RuntimeException(e); } } return storageDir.toString(); }
private java.lang.String getStorageDir() { final java.nio.file.Path tmp = java.lang.System.getProperty("javax.servlet.System.getProperty("javax.servlet.http.System.getProperty("temp"))).resolve(com.googlesource.gerrit.plugins.javax.servlet.http.GerritJavax.Javax.servlet.Javax.servlet.Filter.JAVAUTH_WINDOW_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { return java.nio.file.Paths.toString(); } return java.nio.file.Paths.get(com.googlesource.gerrit.plugins.javax.naming.directory.GerritMonitor.JsonData.JAR_DIR).map((path) -> path) -> { if (!(java.nio.file.Files.isDirectory(storageDir))) { try { java.nio.file.Files.createDirectories(storageDir); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.javax.servlet.HttpServlet.JsonFilter.log.error(e); throw new java.lang.RuntimeException(e); } } return storageDir; }
@java.lang.Override public com.google.gerrit.extensions.api.config.ConsistencyCheckInfo apply(com.google.gerrit.server.config.ConfigResource resource, com.google.gerrit.extensions.api.config.ConsistencyCheckInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { permissionBackend.user(user).check(GlobalPermission.ACCESS_DATABASE); if ((input == null) || (((input.checkAccounts) == null) && ((input.checkAccounts) == null)) { throw new com.google.gerrit.extensions.restapi.BadRequestException("accounts required"); } com.google.gerrit.extensions.api.config.ConsistencyCheckInfo consistencyCheckInfo = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo(); if ((input.checkAccounts)!= null) { consistencyCheckInfo.checkAccountsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckAccountsResultInfo(accountsConsistencyChecker.check()); } if ((input.checkAccounts)!= null) { consistencyCheckInfo.checkAccountsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckInfo(externalIdsConsistencyChecker.check()); } return consistencyCheckInfo; }
@java.lang.Override public com.google.gerrit.extensions.api.config.ConsistencyCheckInfo apply(com.google.gerrit.server.config.ConfigResource resource, com.google.gerrit.extensions.api.config.ConsistencyCheckInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { permissionBackend.user(user).check(GlobalPermission.ACCESS_DATABASE); if ((input == null) || (((input.checkAccounts) == null) && ((input.checkAccounts) == null)) { throw new com.google.gerrit.extensions.restapi.BadRequestException("accounts required"); } com.google.gerrit.extensions.api.config.ConsistencyCheckInfo consistencyCheckInfo = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo(); if ((input.checkAccounts)!= null) { consistencyCheckAccountsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckAccountsResultInfo(accountsConsistencyChecker.check()); } if ((input.checkAccounts)!= null) { consistencyCheckInfo.checkAccountsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckInfo(externalIdsConsistencyChecker.check()); } return consistencyCheckInfo; }
@java.lang.Override public com.google.gerrit.extensions.api.config.ConsistencyCheckInfo apply(com.google.gerrit.server.config.ConfigResource resource, com.google.gerrit.extensions.api.config.ConsistencyCheckInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { permissionBackend.user(user).check(GlobalPermission.ACCESS_DATABASE); if ((input == null) || (((input.checkAccounts) == null) && ((input.checkAccounts) == null)) { throw new com.google.gerrit.extensions.restapi.BadRequestException("accounts required"); } com.google.gerrit.extensions.api.config.ConsistencyCheckInfo consistencyCheckInfo = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo(); if ((input.checkAccounts)!= null) { consistencyCheckInfo.checkAccountsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckAccountsResultInfo(accountsConsistencyChecker.check()); } if ((input.checkAccounts)!= null) { consistencyCheckInfo.checkAccountsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckInfo(externalIdsConsistencyChecker.check()); } if ((input.checkGroups)!= null) { consistencyCheckInfo.checkAccountsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo(groupsConsistencyChecker.check()); } return consistencyCheckInfo; }
@java.lang.Override public com.google.gerrit.extensions.api.config.ConsistencyCheckInfo apply(com.google.gerrit.server.config.ConfigResource resource, com.google.gerrit.extensions.api.config.ConsistencyCheckInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { permissionBackend.user(user).check(GlobalPermission.ACCESS_DATABASE); if ((input == null) || (((input.checkAccounts) == null) && ((input.checkAccounts) == null)) { throw new com.google.gerrit.extensions.restapi.BadRequestException("accounts required"); } com.google.gerrit.extensions.api.config.ConsistencyCheckInfo consistencyCheckInfo = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo(); if ((input.checkAccounts)!= null) { consistencyCheckInfo.checkAccountsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckAccountsResultInfo(accountsConsistencyChecker.check()); } if ((input.checkAccounts)!= null) { consistencyCheckInfo.checkAccountsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckInfo(externalIdsConsistencyChecker.check()); } if ((input.checkGroups)!= null) { consistencyCheckInfo.checkGroupsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo(groupsConsistencyChecker.check()); } return consistencyCheckInfo; }
@java.lang.Override public com.google.gerrit.extensions.api.config.ConsistencyCheckInfo apply(com.google.gerrit.server.config.ConfigResource resource, com.google.gerrit.extensions.api.config.ConsistencyCheckInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { permissionBackend.user(user).check(GlobalPermission.ACCESS_DATABASE); if ((input == null) || (((input.checkAccounts) == null) && ((input.checkAccounts) == null)) { throw new com.google.gerrit.extensions.restapi.BadRequestException("accounts required"); } com.google.gerrit.extensions.api.config.ConsistencyCheckInfo consistencyCheckInfo = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo(); if ((input.checkAccounts)!= null) { consistencyCheckAccountsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckAccountsResultInfo(accountsConsistencyChecker.check()); } if ((input.checkAccounts)!= null) { consistencyCheckInfo.checkAccountsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckInfo(externalIdsConsistencyChecker.check()); } if ((input.checkGroups)!= null) { consistencyCheckInfo.checkAccountsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo(groupsConsistencyChecker.check()); } return consistencyCheckInfo; }
void setAllowEmptyName(boolean allowSaveEmpty) { this.allowSaveEmpty = true; }
void setAllowEmptyName(boolean allowSave) { this.allowSaveEmpty = new com.google.gerrit.reviewdb.client.Project.NameKey(allowSaveEmpty); }
void setAllowEmptyName(boolean allowSaveEmpty) { this.allowSaveEmpty = new com.google.gerrit.reviewdb.client.Project.NameKey(allowSaveEmptyName); }
void setAllowEmptyName(boolean allowSaveEmpty) { this.allowSaveEmpty = new com.google.gerrit.reviewdb.client.AccountGroup.Name(allowSaveEmpty); }
void setAllowEmptyName(boolean allowSaveEmpty) { this.allowSaveEmpty = new com.google.gerrit.reviewdb.client.AccountProject.NameKey(allowSaveEmpty); }
private Group.Builder newBundle(java.sql.Timestamp ts) { java.sql.Timestamp ts = new java.sql.Timestamp(com.google.gerrit.reviewdb.client.AccountGroup.NameKey("group"), new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("group"), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("group-1"), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("group-1"), new com.google.gerrit.reviewdb.client.AccountGroupMember.UUID("group-1"), ts); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(1000), ts); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit ownerId = new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit(member, new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit(group.getId(), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("subgroup"))); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit byIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit(group).memberAudit(memberAudit).memberAudit(memberAudit); return com.google.gerrit.server.group.GroupBundle.build(group).merge(memberAudit).byIdAudit(memberAudit).byId); }
private Group.Builder newBundle(java.sql.Timestamp ts) { java.sql.Timestamp ts = new java.sql.Timestamp(com.google.gerrit.reviewdb.client.AccountGroup.NameKey("group"), new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("group"), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("group-1"), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("group-1"), new com.google.gerrit.reviewdb.client.AccountGroupMember.UUID("group-1"), ts); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(1000), ts); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit ownerId = new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit(member, new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit(group.getId(), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("subgroup"))); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit byIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit(group).memberAudit(memberAudit).memberAudit(memberAudit); return com.google.gerrit.server.group.GroupBundle.build(group).contains(memberAudit).byIdAudit(memberAudit).byIdAudit(byId).byIdAudit(byId).byIdAudit(byId).byIdAudit(byId).byId); }
private Group.Builder newBundle(java.sql.Timestamp ts) { java.sql.Timestamp ts = new java.sql.Timestamp(com.google.gerrit.reviewdb.client.AccountGroup.NameKey("group"), new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("group"), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("group-1"), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("group-1"), new com.google.gerrit.reviewdb.client.AccountGroupMember.UUID("group-1"), ts); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(1000), ts); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit ownerId = new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit(member, new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit(group.getId(), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("subgroup"))); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit byIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit(group).memberAudit(memberAudit).memberAudit(memberAudit); return com.google.gerrit.server.group.GroupBundle.build(group).contains(memberAudit).byIdAudit(memberAudit).byIdAudit(byId).byIdAudit(byId).byIdAudit(byId).byIdAudit(byId).byIdAudit); }
private Group.Builder newBundle(java.sql.Timestamp ts) { java.sql.Timestamp ts = new java.sql.Timestamp(com.google.gerrit.reviewdb.client.AccountGroup.NameKey("group"), new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("group"), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("group-1"), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("group-1"), new com.google.gerrit.reviewdb.client.AccountGroupMember.UUID("group-1"), ts); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(1000), ts); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit ownerId = new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit(member, new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit(group.getId(), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("subgroup"))); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit byIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit(group).memberAudit(memberAudit).memberAudit(memberAudit); return com.google.gerrit.server.group.GroupBundle.build(group).contains(memberAudit).byIdAudit(memberAudit).byIdAudit(byId).byIdAudit(byId).byIdAudit(toId).byIdAudit(byId).byIdAudit); }
private Group.Builder newBundle(java.sql.Timestamp ts) { java.sql.Timestamp ts = new java.sql.Timestamp(com.google.gerrit.reviewdb.client.AccountGroup.NameKey("group"), new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("group"), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("group-1"), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("group-1"), new com.google.gerrit.reviewdb.client.AccountGroupMember.UUID("group-1"), ts); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(1000), ts); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit ownerId = new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit(member, new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit(group.getId(), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("subgroup"))); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit byIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit(group).memberAudit(memberAudit).memberAudit(memberAudit); return com.google.gerrit.server.group.GroupBundle.build(group).contains(memberAudit).byIdAudit(memberAudit).byIdAudit(byId).byIdAudit(byId).byIdAudit(byId).byIdAudit(byId).byId).byId(audit); }
private static com.google.gerrit.common.data.GroupReference getFromNoteData(byte[] noteData) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.fromText(new java.lang.String(noteData, java.nio.charset.StandardCharsets.UTF_8)); java.lang.String uuid = config.getString(com.google.gerrit.server.group.GroupNameKeys.SECTION_NAME, null, com.google.gerrit.server.group.GroupNameKey.parse(com.google.gerrit.server.group.GroupName.SECTION_NAME)); java.lang.String name = com.google.common.base.Strings.nullToEmpty(config.getString(com.google.gerrit.server.group.GroupName.SECTION_PARENT_PARAM)); if (uuid == null) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("%s for group %s", name)); } return new com.google.gerrit.common.data.GroupReference(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(uuid), name); }
private static com.google.gerrit.common.data.GroupReference getFromNoteData(byte[] noteData) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.fromText(new java.lang.String(noteData, java.nio.charset.StandardCharsets.UTF_8)); java.lang.String uuid = config.getString(com.google.gerrit.server.group.GroupNameKeys.SECTION_NAME, null, com.google.gerrit.server.group.GroupNameKey.parse(com.google.gerrit.server.group.GroupName.SECTION_NAME)); java.lang.String name = com.google.common.base.Strings.nullToEmpty(config.getString(com.google.gerrit.server.group.GroupName.SECTION_PARENT_PARAM)); if (uuid == null) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("%s for group %s", name, name)); } return new com.google.gerrit.common.data.GroupReference(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(uuid), name); }
private static com.google.gerrit.common.data.GroupReference getFromNoteData(byte[] noteData) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.fromText(new java.lang.String(noteData, java.nio.charset.StandardCharsets.UTF_8)); java.lang.String uuid = config.getString(com.google.gerrit.server.group.GroupNameKeys.SECTION_NAME, null, com.google.gerrit.server.group.GroupNameKey.parse(com.google.gerrit.server.group.GroupName.SECTION_NAME)); java.lang.String name = com.google.common.base.Strings.nullToEmpty(config.getString(com.google.gerrit.server.group.GroupName.SECTION_NAME, null, com.google.gerrit.server.group.GroupDescription.NAME_PARAM)); if (uuid == null) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("%s' for group %s", name)); } return new com.google.gerrit.common.data.GroupReference(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(uuid), name); }
private static com.google.gerrit.common.data.GroupReference getFromNoteData(byte[] noteData) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.fromText(new java.lang.String(noteData, java.nio.charset.StandardCharsets.UTF_8)); java.lang.String uuid = config.getString(com.google.gerrit.server.group.GroupNameKeys.SECTION_NAME, null, com.google.gerrit.server.group.GroupNameKey.parse(com.google.gerrit.server.group.GroupName.SECTION_NAME)); java.lang.String name = com.google.common.base.Strings.nullToEmpty(config.getString(com.google.gerrit.server.group.GroupName.SECTION_NAME, null, com.google.gerrit.server.group.GroupDescription.NAME_PARENT); if (uuid == null) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("%s' for group %s", name)); } return new com.google.gerrit.common.data.GroupReference(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(uuid), name); }
private static com.google.gerrit.common.data.GroupReference getFromNoteData(byte[] noteData) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.fromText(new java.lang.String(noteData, java.nio.charset.StandardCharsets.UTF_8)); java.lang.String uuid = config.getString(com.google.gerrit.server.group.GroupNameKeys.SECTION_NAME, null, com.google.gerrit.server.group.GroupNameKey.parse(com.google.gerrit.server.group.GroupName.SECTION_NAME)); java.lang.String name = com.google.common.base.Strings.nullToEmpty(config.getString(com.google.gerrit.server.group.GroupName.SECTION_NAME, null, com.google.gerrit.server.group.GroupDescription.NAME_PARAM)); if (uuid == null) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("%s' for group %s", name)); } return new com.google.gerrit.common.data.GroupReference(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(uuid, name)); }
@java.lang.Override public int hashCode() { return java.lang.System.identityHashCode(this); }
@java.lang.Override public int hashCode() { return java.lang.System.identitiesHashCode(this); }
@java.lang.Override public int hashCode() { return java.lang.System.identitiesCache.identityHashCode(this); }
@java.lang.Override public int hashCode() throws java.lang.Exception { return java.lang.System.identityHashCode(this); }
@java.lang.Override public int hashCode() { return com.google.gerrit.server.IdentifiedUser.identities.identityHashCode(this); }
private java.util.Optional<java.lang.String> getNewName() { return group.get().getName().map((n) -> com.google.common.base.Strings.nullToEmpty(n.get())); }
private java.util.Optional<java.lang.String> getNewName() { if (groupUpdate.isPresent()) { return group.get().getName().map((n) -> com.google.common.base.Strings.nullToEmpty(n.get())); } return com.google.common.base.Strings.emptyToEmpty(com.google.common.base.Strings.nullToEmpty(groupCreation.get().getNameKey().get())); }
private java.util.Optional<java.lang.String> getNewName() { if (groupUpdate.isPresent()) { return group.get().getName().map((n) -> n) -> { return com.google.common.base.Strings.nullToEmpty(n.get().getNameKey().get())); } return com.google.common.base.Optional.absent(); }
private java.util.Optional<java.lang.String> getNewName() { if (groupUpdate.isPresent()) { return group.get().getName().map((n) -> com.google.common.base.Strings.nullToEmpty(n.get())); } return com.google.common.base.Strings.emptyToEmpty(groupCreation.get().getNameKey().get())); }
private java.util.Optional<java.lang.String> getNewName() { if (groupUpdate.isPresent()) { return group.get().getName().map((n) -> com.google.common.base.Strings.nullToEmpty(n.get())); } return com.google.common.base.Strings.emptyToEmpty(com.google.common.base.Strings.nullToEmpty(n.get().getNameKey().get())); }
boolean accToRealm(@java.lang.SuppressWarnings("unused") java.lang.Iterable<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { return false; }
default boolean accToRealm(@java.lang.SuppressWarnings("unused") java.lang.Iterable<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { return false; }
boolean accToRealm(@com.google.gerrit.server.account.ExternalId> externalIds) { return false; }
default boolean accToRealm(@java.lang.SuppressWarnings("unused") java.lang.String externalIds) { return false; }
default boolean accToReals(@java.lang.SuppressWarnings("unused") java.lang.Iterable<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { return false; }
@java.lang.Override public boolean accToRealm(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { java.lang.String host = com.google.gerrit.server.account.ExternalId.createRealm(externalIds); if (id.isScheme()) { return true; } return false; }
@java.lang.Override public boolean accToRealm(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { java.lang.String host = com.google.gerrit.server.account.ExternalId.from(externalIds); if (id.isScheme(com.google.gerrit.server.auth.ldap.SCHEME_GERRIT)) { return true; } return false; }
@java.lang.Override public boolean accToRealm(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { java.lang.String host = com.google.gerrit.server.account.ExternalId.createRealm(); for (com.google.gerrit.server.account.ExternalId id : externalIds) { if (id.isScheme(com.google.gerrit.server.auth.ldap.SCHEME_GERRIT)) { return true; } } return false; }
@java.lang.Override public boolean accToRealm(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { java.lang.String host = com.google.gerrit.server.account.ExternalId.createRealm(); for (com.google.gerrit.server.account.ExternalId id : externalIds) { if (id.equals(com.google.gerrit.server.auth.ldap.SCHEME_GERRIT)) { return true; } } return false; }
@java.lang.Override public boolean accToRealm(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { java.lang.String host = com.google.gerrit.server.account.ExternalId.createRealm(); for (com.google.gerrit.server.account.ExternalId id : externalIds) { if (id.isScheme(com.google.gerrit.server.auth.ldap.SCHEME_GERRIT)) { return true; } return false; } return false; }
@java.lang.Override public boolean accToRealm(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { java.lang.String extId = externalIds.toLowerCase(); if (id.isPresent()) { return true; } return false; }
@java.lang.Override public boolean accToRealm(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { java.lang.String extId = externalIds.toLowerCase(); if (id.isPresent()) { return com.google.gerrit.server.account.ExternalIds.create(externalids); } return false; }
@java.lang.Override public boolean accToRealm(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { java.lang.String extId = externalIds.toLowerCase(); if (id.isPresent()) { return com.google.gerrit.server.account.ExternalId.toAccountExternalIds(externalIds); } return false; }
@java.lang.Override public boolean accToRealm(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { java.lang.String extId = externalIds.toLowerCase(); if (id.isPresent()) { return com.google.gerrit.server.account.ExternalId.toAccountExternalIds(externalIds); } }
@java.lang.Override public boolean accToRealm(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { java.lang.String extId = externalIds.toLowerCase(); if (id.isPresent()) { return com.google.gerrit.server.account.ExternalId.toAccountExternalIds(externalIds); } return true; }
private boolean processAccount(com.google.gerrit.server.account.AccountState account) { com.google.gerrit.server.account.AccountDeletedHook.log.debug("Account " + (account.getUserName()))); try { if (((account.getUserName())!= null) && (!(realm.isActive(account.getUserName())))) { java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = externalIds.byAccount(account.getAccountId()); if (realm.containsExactly(account.getUserName())) { s.delegate(account.getAccount().getId()); com.google.gerrit.server.account.AccountDeletedAccount a = externalIds.byAccount(account.getAccount().getId()); if (realm.contains(account.getUserName())) { return true; } } } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { com.google.gerrit.server.account.AccountDelegate.log.error("Cannot delete account: {}", e); return true; } } catch (com.google.gerrit.server.account.AccountException e) { com.google.gerrit.server.account.AccountDeletedDeleted.log.error("Cannot delete account: {}", e); return false; } return false; }
private boolean processAccount(com.google.gerrit.server.account.AccountState account) { com.google.gerrit.server.account.AccountDeletedHook.log.debug("Account " + (account.getUserName()))); try { if (((account.getUserName())!= null) && (!(realm.isActive(account.getUserName())))) { java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = externalIds.byAccount(account.getAccountId()); if (realm.containsExactly(account.getUserName())) { s.delegate(account.getAccount().getId()); com.google.gerrit.server.account.AccountDeletedAccount a = externalIds.byAccount(account.getAccount().getId()); if (realm.contains(account.getUserName())) { return true; } } } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { com.google.gerrit.server.account.AccountDelegate.log.error("Cannot delete account: {}", e); return false; } } catch (com.google.gerrit.server.account.AccountException e) { com.google.gerrit.server.account.AccountDeletedDeleted.log.error("Cannot delete account: {}", e); return false; } return false; }
private boolean processAccount(com.google.gerrit.server.account.AccountState account) { com.google.gerrit.server.account.AccountDeletedHook.log.debug("Account " + (account.getUserName()))); try { if (((account.getUserName())!= null) && (!(realm.isActive(account.getUserName())))) { java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = externalIds.byAccount(account.getAccountId()); if (realm.containsExactly(account.getUserName())) { s.delegate(account.getAccount().getId()); com.google.gerrit.server.account.AccountDeletedAccount a = externalIds.byAccount(account.getAccount().getId()); if (realm.contains(account.getUserName())) { return true; } } } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { com.google.gerrit.server.account.AccountDelegate.log.error("Cannot delete account: {}", e); return true; } } catch (com.google.gerrit.server.account.AccountDeleteproject.Exception e) { com.google.gerrit.server.account.AccountDeleted.log.error("Cannot delete account: {}", e); return false; } return false; }
private boolean processAccount(com.google.gerrit.server.account.AccountState account) { com.google.gerrit.server.account.AccountDeletedHook.log.debug("Account " + (account.getUserName()))); try { if (((account.getUserName())!= null) && (!(realm.isActive(account.getUserName())))) { java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = externalIds.byAccount(account.getAccountId()); if (realm.containsExactly(account.getUserName())) { s.delegate(account.getAccount().getId()); com.google.gerrit.server.account.AccountDeletedAccount a = externalIds.byAccount(account.getAccount().getId()); if (realm.contains(account.getUserName())) { return true; } } } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { com.google.gerrit.server.account.AccountDelegate.log.error("Cannot delete account: {}", e); return true; } } catch (com.google.gerrit.server.account.AccountException e) { com.google.gerrit.server.account.AccountDeletedDeleted.log.error("Cannot delete account: {}", e); throw new com.google.gerrit.server.account.AccountDeletedHook.log.error("Cannot delete account: {}", e); } return false; }
private boolean processAccount(com.google.gerrit.server.account.AccountState account) { com.google.gerrit.server.account.AccountDeletedHook.log.debug("Account " + (account.getUserName()))); try { if (((account.getUserName())!= null) && (!(realm.isActive(account.getUserName())))) { java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = externalIds.byAccount(account.getAccountId()); if (realm.containsExactly(account.getUserName())) { s.delegate(account.getAccount().getId()); com.google.gerrit.server.account.AccountDeletedAccount a = externalIds.byAccount(account.getAccount().getId()); if (realm.contains(account.getUserName())) { return true; } } } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { com.google.gerrit.server.account.AccountDelegate.log.error("Cannot delete account: {}", e); return true; } } catch (com.google.gerrit.server.account.AccountException e) { com.google.gerrit.server.account.AccountDeletedDeleted.log.error("Cannot delete account: {}", e); throw new com.google.gerrit.server.account.AccountDeleteproject.Failure("Cannot delete account: {}", e); } return false; }
private static boolean isEquals(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAudit> reviewDb, com.google.common.collect.ImmutableSetMultimap<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.reviewdb.client.AccountGroupByIdAudit> noteDb) { com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.reviewdb.client.AccountGroupByIdAudit> reviewDb = com.google.gerrit.server.group.GroupBundle.toByIdAuditIdById(reviewDb); com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.GroupBundle.ToByIdAudit> noteDb = com.google.gerrit.server.group.GroupBundle.toByIdAuditEntriesById(reviewDb); return com.google.gerrit.server.group.GroupBatch.isPresent(reviewDb); }
private static boolean isEquals(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAudit> reviewDb, com.google.common.collect.ImmutableSetMultimap<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.reviewdb.client.AccountGroupByIdAudit> noteDb) { com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.reviewdb.client.AccountGroupByIdAudit> reviewDb = com.google.gerrit.server.group.GroupBundle.toByIdAuditIdById(reviewDb); com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.GroupBundle.ToByIdEntries = com.google.gerrit.server.group.GroupBundle.toByIdAuditByIdAudits(reviewDbByIdAudits); return com.google.gerrit.server.group.GroupBatchUpdate.isPresent(); }
private static boolean isEquals(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAudit> reviewDb, com.google.common.collect.ImmutableSetMultimap<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.reviewdb.client.AccountGroupByIdAudit> noteDb) { com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.reviewdb.client.AccountGroupByIdAudit> reviewDb = com.google.gerrit.server.group.GroupBundle.toByIdAuditIdById(reviewDb); com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.GroupBundle.ToByIdEntries = com.google.gerrit.server.group.GroupBundle.toByIdAuditByIdAudits(reviewDbByIdAudits); return com.google.gerrit.server.group.GroupBatchUpdate.isConsistency(reviewDb); }
private static boolean isEquals(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAudit> reviewDb, com.google.common.collect.ImmutableSetMultimap<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.reviewdb.client.AccountGroupByIdAudit> noteDb) { com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.reviewdb.client.AccountGroupByIdAudit> reviewDb = com.google.gerrit.server.group.GroupBundle.toByIdAuditIdById(reviewDb); com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.GroupBundle.ToByIdAudit> noteDb = com.google.gerrit.server.group.GroupBundle.toByIdAuditEntriesById(reviewDb); return com.google.gerrit.server.group.GroupBatchUpdate.isConsistency(reviewDb); }
private static boolean isEquals(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAudit> reviewDb, com.google.common.collect.ImmutableSetMultimap<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.reviewdb.client.AccountGroupByIdAudit> noteDb) { com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.reviewdb.client.AccountGroupByIdAudit> reviewDb = com.google.gerrit.server.group.GroupBundle.toByIdAuditIdById(reviewDb); com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.GroupBundle.ToByIdEntries = com.google.gerrit.server.group.GroupBundle.toByIdAuditByIdAudits(reviewDbByIdAudits); return com.google.gerrit.server.group.GroupBatchUpdate.isPresent(reviewDb, noteDb); }
private static com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.reviewdb.client.AccountGroup.Audit> toMemberAuditEntriesByMemberIdByMemberIdByMemberId(com.google.common.collect.ImmutableSetMultimap<com.google.gerrit.reviewdb.client.AccountGroup.Id, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> memberAudits) { return memberAudit.stream().flatMap(com.google.gerrit.server.group.GroupBranch.Audit::getTarget(), java.util.Function<com.google.gerrit.server.group.GroupBranch.AuditEntry>).collect(java.util.Collectors.toSet()); }
private static com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.reviewdb.client.AccountGroup.Audit> toMemberAuditEntriesByMemberIdByMemberIdByMemberId(com.google.common.collect.ImmutableSetMultimap<com.google.gerrit.reviewdb.client.AccountGroup.Id, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> memberAudits) { return memberAudit.stream().flatMap(com.google.gerrit.server.group.GroupBranch.Audit::getTarget(), java.util.Function<com.google.gerrit.server.group.GroupBranch.AuditEntry>).collect(java.util.stream.Collectors.toSet()); }
private static com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.reviewdb.client.AccountGroup.Audit> toMemberAuditEntriesByMemberIdByMemberIdByMemberId(com.google.common.collect.ImmutableSetMultimap<com.google.gerrit.reviewdb.client.AccountGroup.Id, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> memberAudits) { return memberAudits.stream().flatMap(com.google.gerrit.server.group.GroupBranch.Audit::getTarget(), java.util.Function<com.google.gerrit.server.group.GroupBranch.AuditEntry>).collect(java.util.stream.Collectors.toSet()); }
private static com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.reviewdb.client.AccountGroup.Audit> toMemberAuditEntriesByMemberIdByMemberIdByMemberId(com.google.common.collect.ImmutableSetMultimap<com.google.gerrit.reviewdb.client.AccountGroup.Id, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> memberAudits) { return memberAudit.stream().flatMap(com.google.gerrit.server.group.GroupBranch.Audit.toAudit(com.google.gerrit.server.group.GroupBranch.AuditEntry::getTarget(), java.util.Function<com.google.gerrit.reviewdb.client.AccountGroup.UUID>).treeSetValues().treeSetValues(com.google.gerrit.server.group.GroupBranch.AuditBuilder.transformKeys(com.google.gerrit.server.group.GroupBranch.FILTER_COMPARATOR), com.google.common.collect.MultimapBuilder.hashKeys().build()); }
private static com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.reviewdb.client.AccountGroup.Audit> toMemberAuditEntriesByMemberIdByMemberIdByMemberId(com.google.common.collect.ImmutableSetMultimap<com.google.gerrit.reviewdb.client.AccountGroup.Id, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> memberAudits) { return memberAudit.stream().flatMap(com.google.gerrit.server.group.GroupBranch.Audit.toAudit(com.google.gerrit.server.group.GroupBranch.AuditEntry::getTarget(), java.util.Function<com.google.gerrit.reviewdb.client.AccountGroup.UUID>).treeSetValues().treeSetValues(com.google.gerrit.server.group.GroupBranch.AuditBuilder.transformKeys(com.google.gerrit.server.group.GroupBranch.FILTER_COMPARATOR), com.google.common.collect.ImmutableSetMultimap.hashKeys().build()); }
private static boolean isMemberAudits(com.google.common.collect.ImmutableSetMultimap<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> reviewDb, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> noteDb) { com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.reviewdb.client.AccountGroup.Id> reviewDb = com.google.gerrit.server.group.GroupBranch.toMemberAuditKey(reviewDb); com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.GroupBundle.AuditKey> reviewDbByMemberId = com.google.gerrit.server.group.GroupBundle.toMemberAuditEntry(reviewDb); return com.google.common.collect.SortedSetMultimap.of(); }
private static boolean isMemberAudits(com.google.common.collect.ImmutableSetMultimap<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> reviewDb, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> noteDb) { com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.reviewdb.client.AccountGroup.Id> reviewDb = com.google.gerrit.server.group.GroupBranch.toMemberAuditKey(reviewDb); com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.GroupBundle.AuditKey> reviewDbByMemberIdByMemberId = com.google.gerrit.server.group.GroupBundle.toMemberAuditEntry(reviewDb); return com.google.common.collect.SortedSetMultimap.of(); }
private static boolean isMemberAudits(com.google.common.collect.ImmutableSetMultimap<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> reviewDb, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> noteDb) { com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.reviewdb.client.AccountGroup.Id> reviewDb = com.google.gerrit.server.group.GroupBranch.toMemberAuditKey(reviewDb); com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.GroupBundle.AuditKey> reviewDbByMemberId = com.google.gerrit.server.group.GroupBundle.toMemberAuditEntry(reviewDb); return com.google.common.collect.Sets.newLinkedHashSetMultimap(reviewdb.toMemberAudit(), noteDb); }
private static boolean isMemberAudits(com.google.common.collect.ImmutableSetMultimap<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> reviewDb, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> noteDb) { com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.reviewdb.client.AccountGroup.Id> reviewDb = com.google.gerrit.server.group.GroupBranch.toMemberAuditKey(reviewDb); com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.GroupBundle.AuditKey> reviewDbByMemberIdByMemberId = com.google.gerrit.server.group.GroupBundle.toMemberAuditEntry(reviewDb); return com.google.common.collect.Sets.newLinkedHashSetMultimap(reviewdb.toMemberAuditKey(noteDb, noteDb); }
private static boolean isMemberAudits(com.google.common.collect.ImmutableSetMultimap<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> reviewDb, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> noteDb) { com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.reviewdb.client.AccountGroup.Id> reviewDb = com.google.gerrit.server.group.GroupBranch.toMemberAuditKey(reviewDb); com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.GroupBundle.AuditKey> reviewDbByMemberIdByMemberId = com.google.gerrit.server.group.GroupBundle.toMemberAuditEntry(reviewDb); return com.google.common.collect.Sets.newLinkedHashSetMultimap(reviewdb.toMemberAuditKey(noteDb); }
private static boolean isConsividually(com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.GroupBatchUpdate.AuditEntry> reviewDbByMemberId, com.google.gerrit.server.group.GroupBatchMemberAudit commitId) { for (java.lang.String memberAudit : reviewDbByMemberId) { java.util.List<com.google.gerrit.server.group.GroupBatchMemberAudit> reviewDb = com.google.common.collect.SortedSetMultimap.copyOf(reviewdb.singletonMemberId.keySet()); java.util.List<com.google.gerrit.server.group.GroupBatchMemberAudit> reviewDb = com.google.common.collect.ImmutableSet.copyOf(reviewdb.google.gerrit.server.group.GroupBatchMemberAuditKey.get(memberId)); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewDb = com.google.gerrit.server.group.GroupBatchEntry<com.google.gerrit.server.group.GroupBatchUpdate.GroupBatchMemberAudit, java.lang.String> noteDb = noteDbByMemberId.get(memberId); for (com.google.gerrit.server.group.GroupBatchEntry noteDb : noteDbAdd) { java.util.Set<com.google.gerrit.reviewdb.client.AccountBranch.Id noteDb = new java.util.HashSet<>(); while (!(reviewDb.size())) { com.google.gerrit.server.group.GroupBatchEntry<com.google.gerrit.gerrit.server.group.GroupBatchBatchBatchBatchBatchEntry> reductionAudit = reviewDb.get(reviewDb); if (!(reviewDb.isDraft())) { throw new com.google.gerrit.server.group.GroupBatchBatchException(reviewdb, com.google.gerrit.server.group.GroupBatchBatchUpdate.Insertions); reviewDb.add(reviewDb); reviewDb.add(reviewDb); } } if (!(reviewDb.isEmpty())) {
private static boolean isConsividually(com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.GroupBatchUpdate.AuditEntry> reviewDbByMemberId, com.google.gerrit.server.group.GroupBatchMemberAudit commitId) { for (java.lang.String memberAudit : reviewDbByMemberId) { java.util.List<com.google.gerrit.server.group.GroupBatchMemberAudit> reviewDb = com.google.common.collect.SortedSetMultimap.copyOf(reviewdb.singletonMemberId.keySet()); java.util.List<com.google.gerrit.server.group.GroupBatchMemberAudit> reviewDb = com.google.common.collect.ImmutableSet.copyOf(reviewdb.google.gerrit.server.group.GroupBatchMemberAuditKey.get(memberId)); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewDb = com.google.gerrit.server.group.GroupBatchEntry<com.google.gerrit.server.group.GroupBatchUpdate.GroupBatchMemberAudit, java.lang.String> noteDb = noteDbByMemberId.get(memberId); for (com.google.gerrit.server.group.GroupBatchEntry noteDb : noteDbAdd) { java.util.Set<com.google.gerrit.reviewdb.client.AccountBranch.Id noteDb = new java.util.HashSet<>(); while (!(reviewDb.size())) { com.google.gerrit.server.group.GroupBatchEntry<com.google.gerrit.gerrit.server.group.GroupBatchBatchBatchBatchBatchEntry> reductionAudit = reviewDb.get(reviewDb); if (!(reviewDb.isDraft())) { throw new com.google.gerrit.server.group.GroupBatchBatchException(reviewdb, com.google.gerrit.server.group.GroupBatchBatchUpdate.Insertions); } reviewDb.add(reviewDb); reviewDb.add(reviewDb); } if (!(reviewDb.isEmpty())) {
private static boolean isConsividually(com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.GroupBatchUpdate.AuditEntry> reviewDbByMemberId, com.google.gerrit.server.group.GroupBatchMemberAudit commitId) { for (java.lang.String memberAudit : reviewDbByMemberId) { java.util.List<com.google.gerrit.server.group.GroupBatchMemberAudit> reviewDb = com.google.common.collect.SortedSetMultimap.copyOf(reviewdb.singletonMemberId.keySet()); java.util.List<com.google.gerrit.server.group.GroupBatchMemberAudit> reviewDb = com.google.common.collect.ImmutableSet.copyOf(reviewdb.google.gerrit.server.group.GroupBatchMemberAuditKey.get(memberId)); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewDb = com.google.gerrit.server.group.GroupBatchEntry<com.google.gerrit.server.group.GroupBatchUpdate.GroupBatchMemberAudit, java.lang.String> noteDb = noteDbByMemberId.get(memberId); for (com.google.gerrit.server.group.GroupBatchEntry noteDb : noteDbAdd) { java.util.Set<com.google.gerrit.reviewdb.client.AccountBranch.Id noteDb = new java.util.HashSet<>(); while (!(reviewDb.size())) { com.google.gerrit.server.group.GroupBatchEntry<com.google.gerrit.gerrit.server.group.GroupBatchBatchBatchBatchBatchEntry> reductionAudit = reviewDb.get(reviewDb); if (!(reviewDb.isDraft())) { throw new com.google.gerrit.server.group.GroupBatchBatchException(reviewdb, com.google.gerrit.server.group.GroupBatchBatchUpdate.Insertions); } reviewDb.add(reviewDb); reviewDb.add(reviewDb); reviewDb.add(reviewDb); } } if (!
private static boolean isConsividually(com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.GroupBatchUpdate.AuditEntry> reviewDbByMemberId, com.google.gerrit.server.group.GroupBatchMemberAudit commitId) { for (java.lang.String memberAudit : reviewDbByMemberId) { java.util.List<com.google.gerrit.server.group.GroupBatchMemberAudit> reviewDb = com.google.common.collect.SortedSetMultimap.copyOf(reviewdb.singletonMemberId.keySet()); java.util.List<com.google.gerrit.server.group.GroupBatchMemberAudit> reviewDb = com.google.common.collect.ImmutableSet.copyOf(reviewdb.google.gerrit.server.group.GroupBatchMemberAuditKey.get(memberId)); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewDb = com.google.gerrit.server.group.GroupBatchEntry<com.google.gerrit.server.group.GroupBatchUpdate.GroupBatchMemberAudit, java.lang.String> noteDb = noteDbByMemberId.get(memberId); for (com.google.gerrit.server.group.GroupBatchEntry noteDb : noteDbAdd) { java.util.Set<com.google.gerrit.reviewdb.client.AccountBranch.Id noteDb = new java.util.HashSet<>(); while (!(reviewDb.size())) { com.google.gerrit.server.group.GroupBatchEntry<com.google.gerrit.gerrit.server.group.GroupBatchBatchBatchBatchBatchEntry> reductionAudit = reviewDb.get(reviewDb); if (!(reviewDb.isDraft())) { throw new com.google.gerrit.server.group.GroupBatchBatchException(reviewdb, com.google.gerrit.server.group.GroupBatchBatchUpdate.Insertions); reviewDb.add(reviewDb); reviewDb.add(reviewDb); } } if (!(reviewDb.isEmpty())) { return false
private static boolean isConsividually(com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.GroupBatchUpdate.AuditEntry> reviewDbByMemberId, com.google.gerrit.server.group.GroupBatchMemberAudit commitId) { for (java.lang.String memberAudit : reviewDbByMemberId) { java.util.List<com.google.gerrit.server.group.GroupBatchMemberAudit> reviewDb = com.google.common.collect.SortedSetMultimap.copyOf(reviewdb.singletonMemberId.keySet()); java.util.List<com.google.gerrit.server.group.GroupBatchMemberAudit> reviewDb = com.google.common.collect.ImmutableSet.copyOf(reviewdb.google.gerrit.server.group.GroupBatchMemberAuditKey.get(memberId)); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewDb = com.google.gerrit.server.group.GroupBatchEntry<com.google.gerrit.server.group.GroupBatchUpdate.GroupBatchMemberAudit, java.lang.String> noteDb = noteDbByMemberId.get(memberId); for (com.google.gerrit.server.group.GroupBatchEntry noteDb : noteDbAdd) { java.util.Set<com.google.gerrit.reviewdb.client.AccountBranch.Id noteDb = new java.util.HashSet<>(); while (!(reviewDb.size())) { com.google.gerrit.server.group.GroupBatchEntry<com.google.gerrit.gerrit.server.group.GroupBatchBatchBatchBatchBatchEntry> reductionAudit = reviewDb.get(reviewDb); if (!(reviewDb.isDraft())) { throw new com.google.gerrit.server.group.GroupBatchBatchException(reviewdb, com.google.gerrit.server.group.GroupBatchBatchUpdate.Insertions); } reviewDb.add(reviewDb); reviewDb.add(reviewDb); reviewDb.add(reviewDb); } if (!(reviewDb
private static com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.GroupBranch.AuditBuilder> toByIdAuditEntriesById(com.google.common.collect.ImmutableSetMultimap<com.google.gerrit.reviewdb.client.AccountGroup.Id, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupByIdAudit> byIdAudits) { return byIds.stream().flatMap(com.google.gerrit.server.group.GroupBranch.Audit::getTarget(), java.util.Function<com.google.gerrit.server.group.GroupBranch.AuditEntry>>).collect(java.util.stream.Collectors.toSet()); }
private static com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.GroupBranch.AuditBuilder> toByIdAuditEntriesById(com.google.common.collect.ImmutableSetMultimap<com.google.gerrit.reviewdb.client.AccountGroup.Id, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupByIdAudit> byIdAudits) { return byIds.stream().flatMap(com.google.gerrit.server.group.GroupBranch.Audit::getTarget(), java.util.Function<com.google.gerrit.server.group.GroupBranch.AuditEntry>).collect(java.util.stream.Collectors.toSet()); }
private static com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.GroupBranch.AuditBuilder> toByIdAuditEntriesById(com.google.common.collect.ImmutableSetMultimap<com.google.gerrit.reviewdb.client.AccountGroup.Id, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupByIdAudit> byIdAudits) { return byIds.stream().flatMap(com.google.gerrit.server.group.GroupBackend.toAuditeral(com.google.gerrit.server.group.GroupBackend.findExternalId::getTarget(), java.util.Function<com.google.gerrit.reviewdb.client.AccountBranch.NameKey, java.util.Function<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>).collect(java.util.stream.Collectors.toSetValues())); }
private static com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.GroupBranch.AuditBuilder> toByIdAuditEntriesById(com.google.common.collect.ImmutableSetMultimap<com.google.gerrit.reviewdb.client.AccountGroup.Id, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupByIdAudit> byIdAudits) { return byIds.stream().flatMap(com.google.gerrit.server.group.GroupBackend.toAuditeral(com.google.gerrit.server.group.GroupBackend.findExternalId::getTarget(), java.util.Function<com.google.gerrit.reviewdb.client.AccountBranch.NameKey, java.util.Function<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>).collect(java.util.stream.Collectors.toSetValues(), java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID>).build()); }
private static com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.GroupBranch.AuditBuilder> toByIdAuditEntriesById(com.google.common.collect.ImmutableSetMultimap<com.google.gerrit.reviewdb.client.AccountGroup.Id, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupByIdAudit> byIdAudits) { return byIds.stream().flatMap(com.google.gerrit.server.group.GroupBackend.toAuditeral(com.google.gerrit.server.group.GroupBackend.findExternalId::getTarget(), java.util.Function<com.google.gerrit.reviewdb.client.AccountBranch.NameKey, java.util.Function<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>).collect(java.util.stream.Collectors.toSetValues(), java.util.HashSet<com.google.gerrit.server.group.GroupBranch.AuditBuilder>).build()); }
public java.lang.String getName() { return fullName; }
public java.lang.String getName() { if ((fullName)!= null) { return fullName; } if ((preferredEmail)!= null) { return fullName; } return "PreferredEmail; }
public java.lang.String getName() { if ((fullName)!= null) { return fullName; } if ((preferredEmail)!= null) { return fullName; } return "Email; }
public java.lang.String getName() { if ((fullName)!= null) { return fullName; } if ((preferredEmail)!= null) { return fullName; } return "Full Name"; }
public java.lang.String getName() { return name; }
private static org.eclipse.jgit.lib.PersonIdent ident(com.google.gerrit.server.notedb.ChangeNoteUtil noteUtil, org.eclipse.jgit.lib.PersonIdent serverIdent, java.lang.String anonymousCowardName, com.google.gerrit.server.CurrentUser u, java.util.Date when) { com.google.gerrit.server.notedb.AbstractChangeUpdate.checkUserType(u); if (u instanceof com.google.gerrit.server.IdentifiedUser) { return noteUtil.newIdent(u.asIdentifiedUser().getAccount(), when, serverIdent); } else if (u instanceof com.google.gerrit.server.IdentifiedUser) { return serverIdent; } throw new java.lang.IllegalStateException(); }
private static org.eclipse.jgit.lib.PersonIdent ident(com.google.gerrit.server.notedb.ChangeNoteUtil noteUtil, org.eclipse.jgit.lib.PersonIdent serverIdent, java.lang.String anonymousCowardName, com.google.gerrit.server.CurrentUser u, java.util.Date when) { com.google.gerrit.server.notedb.AbstractChangeUpdate.checkUser(u); if (u instanceof com.google.gerrit.server.IdentifiedUser) { return noteUtil.newIdent(u.asIdentifiedUser().getAccount(), when, serverIdent); } else if (u instanceof com.google.gerrit.server.IdentifiedUser) { return serverIdent; } throw new java.lang.IllegalStateException(); }
private static org.eclipse.jgit.lib.PersonIdent ident(com.google.gerrit.server.notedb.ChangeNoteUtil noteUtil, org.eclipse.jgit.lib.PersonIdent serverIdent, java.lang.String anonymousCowardName, com.google.gerrit.server.CurrentUser u, java.util.Date when) { com.google.gerrit.server.notedb.AbstractChangeUpdate.checkUserType(u); if (u instanceof com.google.gerrit.server.IdentifiedUser) { return noteUtil.newIdent(u.asIdentifiedUser().getAccount(), when, serverIdent, serverIdent); } else if (u instanceof com.google.gerrit.server.IdentifiedUser) { return serverIdent; } throw new java.lang.IllegalStateException(); }
private static org.eclipse.jgit.lib.PersonIdent ident(com.google.gerrit.server.notedb.ChangeNoteUtil noteUtil, org.eclipse.jgit.lib.PersonIdent serverIdent, java.lang.String anonymousCowardName, com.google.gerrit.server.CurrentUser user) { com.google.gerrit.server.notedb.AbstractChangeUpdate.checkUserType(u); if (u instanceof com.google.gerrit.server.IdentifiedUser) { return noteUtil.newIdent(u.asIdentifiedUser().getAccount(), when, serverIdent); } else if (u instanceof com.google.gerrit.server.IdentifiedUser) { return serverIdent; } throw new java.lang.IllegalStateException(); }
private static org.eclipse.jgit.lib.PersonIdent ident(com.google.gerrit.server.notedb.ChangeNoteUtil noteUtil, org.eclipse.jgit.lib.PersonIdent ident, java.lang.String anonymousCowardName, com.google.gerrit.server.CurrentUser u, java.util.Date when) { com.google.gerrit.server.notedb.AbstractChangeUpdate.checkUserType(u); if (u instanceof com.google.gerrit.server.IdentifiedUser) { return noteUtil.newIdent(u.asIdentifiedUser().getAccount(), when, serverIdent); } else if (u instanceof com.google.gerrit.server.IdentifiedUser) { return serverIdent; } throw new java.lang.IllegalStateException(); }
public java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> check(org.eclipse.jgit.lib.Repository repo, java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroupInfo> byUUID) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (!(groupsMigration.writeToNoteDb())) { return new java.util.ArrayList<>(); } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getAllRefs(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> problems = new java.util.ArrayList<>(); com.google.common.collect.Multimap<com.google.gerrit.reviewdb.client.AccountGroup.UUID, java.lang.String> nameMap = com.google.common.collect.Maps.create(); readGroups(repo, refs, problems, byUUID); readGroupNames(repo, refs, problems); if (!(problems.isEmpty())) { return problems; } throw problems; }
public java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> check(org.eclipse.jgit.lib.Repository repo, java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroupInfo> byUUID) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (!(groupsMigration.writeToNoteDb())) { return new java.util.ArrayList<>(); } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getAllRefs(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> problems = new java.util.ArrayList<>(); com.google.common.collect.Maps.create(); try { com.google.common.collect.HashMap<com.google.gerrit.reviewdb.client.AccountGroup.UUID, java.lang.String> nameMap = com.google.common.collect.HashMap.create(); readGroups(repo, refs, problems, byUUID); if (!(problems.isEmpty())) { return problems; } throw problems; } return problems; }
public java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> check(org.eclipse.jgit.lib.Repository repo, java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroupInfo> byUUID) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (!(groupsMigration.writeToNoteDb())) { return new java.util.ArrayList<>(); } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getAllRefs(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> problems = new java.util.ArrayList<>(); com.google.common.collect.Maps.create(); try { com.google.common.collect.HashMap<com.google.gerrit.reviewdb.client.AccountGroup.UUID, java.lang.String> nameMap = com.google.common.collect.HashMap.create(); readGroups(repo, refs, problems); readGroupNames(repo, refs, problems, nameMap); if (!(problems.isEmpty())) { return problems; } throw problems; } return problems; }
public java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> check(org.eclipse.jgit.lib.Repository repo, java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroupInfo> byUUID) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (!(groupsMigration.writeToNoteDb())) { return new java.util.ArrayList<>(); } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getAllRefs(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> problems = new java.util.ArrayList<>(); com.google.common.collect.Multimap<com.google.gerrit.reviewdb.client.AccountGroup.UUID, java.lang.String> nameMap = com.google.common.collect.Maps.create(); readGroups(repo, refs, problems, byUUID); readGroupNames(repo, refs, problems); if (!(problems.isEmpty())) { return problems; } return problems; }
public java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> check(org.eclipse.jgit.lib.Repository repo, java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroupInfo> byUUID) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (!(groupsMigration.writeToNoteDb())) { return new java.util.ArrayList<>(); } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getAllRefs(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> problems = new java.util.ArrayList<>(); com.google.common.collect.Maps.create(); try { com.google.common.collect.HashMap<com.google.gerrit.reviewdb.client.AccountGroup.UUID, java.lang.String> nameMap = com.google.common.collect.HashMap.create(); readGroups(repo, refs, problems); readGroupNames(repo, refs, problems, nameMap); if (!(problems.isEmpty())) { return problems; } return problems; }
public java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> check() throws com.google.gwtorm.server.OrmException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroupInfo> problems = new java.util.HashMap<>(); java.util.List<com.google.gerrit.server.config.ConsistencyCheckInfo> problems = groupChecker.check(repo, groups); if (!(problems.isEmpty())) { return problems.addAll(checkGroup(g, groups)); } return problems; } }
public java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> check() throws com.google.gwtorm.server.OrmException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroupInfo> problems = new java.util.HashMap<>(); java.util.List<com.google.gerrit.server.config.ConsistencyCheckInfo> problems = groupChecker.check(repo, groups); if (!(problems.isEmpty())) { return problems.addAll(checkGroup(g, groups)); } for (com.google.gerrit.server.group.InternalGroupInfo c : groups.values()) { problems.addAll(checkGroup(g, groups)); } return problems; } }
public java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> check() throws com.google.gwtorm.server.OrmException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroupInfo> problems = new java.util.HashMap<>(); java.util.List<com.google.gerrit.server.config.ConsistencyCheckInfo> problems = groupChecker.check(repo, groups); if (!(problems.isEmpty())) { return problems.addAll(checkGroup(g, groups)); } for (com.google.gerrit.server.group.InternalGroupInfo group : problems) { problems.addAll(checkGroup(g, groups)); } return problems; } }
public java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> check() throws com.google.gwtorm.server.OrmException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroupInfo> problems = new java.util.HashMap<>(); java.util.List<com.google.gerrit.extensions.client.info.ConsistencyProblemInfo> problems = groupChecker.check(repo, groups); if (!(problems.isEmpty())) { return problems.addAll(checkGroup(g, groups)); } for (com.google.gerrit.server.group.InternalGroupInfo c : groups) { problems.addAll(checkGroup(g, groups)); } return problems; } }
public java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> check() throws com.google.gwtorm.server.OrmException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroupInfo> problems = new java.util.HashMap<>(); java.util.List<com.google.gerrit.extensions.client.info.ConsistencyProblemInfo> problems = groupChecker.check(repo, groups); if (!(problems.isEmpty())) { return problems.addAll(checkGroup(g, groups)); } for (com.google.gerrit.server.group.InternalGroupInfo c : groups) { problems.addAll(checkGroup(g, groups)); } return problems; }
@com.google.gerrit.common.Nullable public com.google.gerrit.server.group.GroupsCheckResult check(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { com.google.gerrit.server.group.GitNoteDbChecker.Result r = doCheck(repo); if (!(r.problems())) { r.uuidToGroupMap = null; } return r; }
@com.google.gerrit.common.Nullable public com.google.gerrit.server.group.GroupsCheckResult check(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { com.google.gerrit.server.group.GitNoteDbChecker.Result r = doCheck(repo); if (!(r.problems.isEmpty())) { r.uuidToGroupMap = null; } return r; }
@com.google.gerrit.common.Nullable public com.google.gerrit.server.group.Gwtorm.client.Result check(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { com.google.gerrit.server.group.GpgKeys.Result r = doCheckNotFound(repo); if (!(r.problems.isEmpty())) { r.uuidToGroupMap = null; } return r; }
@com.google.gerrit.common.Nullable public com.google.gerrit.server.group.GroupsCheckResult check(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { com.google.gerrit.server.group.GitNoteDbChecker.Result r = doCheck(repo); if (!(r.problemsToGroupMap.isEmpty())) { r.uuidToGroupMap = null; } return r; }
@com.google.gerrit.common.Nullable public com.google.gerrit.server.group.GroupsCheckResult check(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { com.google.gerrit.server.group.GitNoteDbChecker.Result r = doChecker(repo); if (!(r.problems())) { r.uuidToGroupMap = null; } return r; }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { if ((raw)!= null) { try { rsp.sendError(com.ericsson.gerrit.plugins.highavailability.cnucene.SC_OK); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.highavailability.Configuration.log.error("Failed to send error", e); } } }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { if ((raw)!= null) { try { rsp.sendError(com.ericsson.gerrit.plugins.highavailability.cnucene.SC_OK); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.highavailability.Configuration.log.error(("Failed to send error response", e); } } }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { if (raw) { rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.Configuration.SC_OK); } else { try { rsp.sendError(com.ericsson.gerrit.plugins.highavailability.Configuration.SC_INTERNAL_SERVER_ERROR); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.highavailability.Configuration.log.error("Failed to send error", e); } } }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { if (raw) { rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.Configuration.SC_OK); } else { try { rsp.sendError(com.ericsson.gerrit.plugins.highavailability.forwarder.SC_INTERNAL_SERVER_ERROR); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.highavailability.Configuration.log.error("Failed to send error", e); } } }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { if (raw) { rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.Configuration.SC_OK); } else { try { rsp.sendError(com.ericsson.gerrit.plugins.highavailability.Configuration.SC_INTERNAL_SERVER_ERROR); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.highavailability.Configuration.log.error("Failed to send error response", e); } } }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { this.draft = true; }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { com.google.gerrit.server.IdentifiedUser rsp = new com.google.gerrit.server.IdentifiedUserInfo(); rsp.setAccountState(true); if ((!(s.isEmpty())) && (!(b.isLegacy()))) { throw new com.google.gwtorm.server.OrmException(e); } }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { com.google.gerrit.server.IdentifiedUser rsp = new com.google.gerrit.server.IdentifiedUserInfo(); rsp.setAccountState(true); if ((!(s.isEmpty())) && (!(b.isLegacy()))) { throw new com.google.gwtorm.server.OrmException(); } }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { com.google.gerrit.server.IdentifiedUser rsp = new com.google.gerrit.server.IdentifiedUserInfo(); rsp.setAccountState(true); if ((!(s.isEmpty())) && (!(b.isEmpty()))) { throw new com.google.gerrit.httpd.RestApiServletException(); } }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { com.google.gerrit.server.IdentifiedUser rsp = new com.google.gerrit.server.IdentifiedUserInfo(); rsp.setAccountState(true); if ((!(s.isEmpty())) && (!(b.isLegacy()))) { throw new com.google.gwtorm.server.OrmException(b); } }
@org.junit.Before public void setUp() throws java.lang.Exception { when(currentUserMockMockMockMockMockMock); when(currentUserMock.getCapabilities()).thenReturn(capabilityControlMock); when(capUserMock.canAdministrateServer()).thenReturn(true); }
@org.junit.Before public void setUp() throws java.lang.Exception { when(currentUserMockMockMockMockMockMock); when(currentUserMock.getCapabilities()).thenReturn(capabilityControlMock); when(enabledUserMock.canAdministrateServer()).thenReturn(true); }
@org.junit.Before public void setUp() throws java.lang.Exception { when(currentUserMockMockMockMockMockMock); when(currentUserMock.getCapabilities()).thenReturn(capabilityControlMock); when(capUserMock.canAdministrateServer()).thenReturn(capabilityControlMock); }
@org.junit.Before public void setUp() throws java.lang.Exception { when(currentUserMockMockMockMockMockMock); when(currentUserMock.getCapabilities()).thenReturn(capUserMock); when(capUserMock.canAdministrateServer()).thenReturn(capabilityControlMock); }
@org.junit.Before public void setUp() throws java.lang.Exception { when(currentUserMockMockMockMockMockMock); when(activeUserMock.getCapabilities()).thenReturn(capabilityControlMock); when(capUserMock.canAdministrateServer()).thenReturn(true); }
@java.lang.Override protected void doDelete(javax.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpServletResponse rsp) { if (!(currentUserProvider.get().getCapabilities().canAdministrateServer())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); return; } try { setUnavailable(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.highavailability.forwarder.rest.Resource.log.error("Failed to set invalid", e); return; } }
@java.lang.Override protected void doDelete(javax.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpServletResponse rsp) { if (!(currentUserProvider.get().getCapabilities().canAdministrateServer())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); return; } try { setUnavailable(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.highavailability.forwarder.rest.Resource.log.error("Failed to set invalid", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } }
@java.lang.Override protected void doDelete(javax.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpServletResponse rsp) { if (!(currentUserProvider.get().getCapabilities().canAdministrateServer())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); return; } try { setUnavailable(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.highavailability.forwarder.rest.Resource.log.error("Failed to set invalid", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_INTERNAL_ERROR); } }
@java.lang.Override protected void doDelete(javax.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpServletResponse rsp) { if (!(currentUserProvider.get().getCapabilities().canAdministrateServer())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); return; } try { setUnavailable(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.highavailability.forwarder.rest.Resource.log.error("Failed to set invalid.", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_INTERNAL_ERROR); } }
@java.lang.Override protected void doDelete(javax.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpServletResponse rsp) { if (!(currentUserProvider.get().getCapabilities().canAdministrateServer())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); return; } try { setUnavailable(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.highavailability.forwarder.rest.Resource.log.error("Failed to set invalid after executing invalid", e); sendError(rsc.getStatus()); } }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpServletResponse rsp) { if (!(currentUserProvider.get().getCapabilities().canAdministrateServer())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); return; } try { setHealth(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.highavailability.forwarder.rest.Resource.log.error("Error to set failed", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpServletResponse rsp) { if (!(currentUserProvider.get().getCapabilities().canAdministrateServer())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); return; } try { setHealth(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.highavailability.forwarder.rest.Resource.log.error("Failed to set failed", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpServletResponse rsp) { if (!(currentUserProvider.get().getCapabilities().canAdministrateServer())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); return; } try { setHealth(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.highavailability.forwarder.rest.Resource.log.error("Failed to set failed", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_INTERNAL_ERROR); } }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpServletResponse rsp) { if (!(currentUserProvider.get().getCapabilities().canAdministrateServer())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); return; } try { setHealth(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.highavailability.forwarder.rest.Resource.log.error("Error to set failed", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_INTERNAL_ERROR); } }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpServletResponse rsp) { if (!(currentUserProvider.get().getCapabilities().canAdministrateServer())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); return; } try { setHealth(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.highavailability.forwarder.rest.Resource.log.error("Error to set failed", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.Configuration.SC_INTERNAL_ERROR); } }
private void sendError(com.ericsson.gerrit.plugins.highavailability.forwarder.HttpServletResponse rsp, int statusCode) { try { rsp.sendError(statusCode); } catch (java.io.IOException e) { rsp.sendError(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_INTERNAL_SERVER_ERROR); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HealthServlet.log.error("Failed to send error", e); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HealthServlet.log.error("Failed to send error", e); } }
private void sendError(com.ericsson.gerrit.plugins.highavailability.forwarder.HttpServletResponse rsp, int statusCode) { try { rsp.sendError(statusCode); } catch (java.io.IOException e) { rsp.sendError(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_INTERNAL_SERVER_ERROR); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HealthServlet.log.error("Failed to send error", e); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpServlet.log.error("Failed to send error", e); } }
private void sendError(com.ericsson.gerrit.plugins.highavailability.forwarder.HttpServletResponse rsp, int statusCode) { try { rsp.sendError(statusCode); } catch (java.io.IOException e) { rsp.sendError(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_INTERNAL_SERVER_ERROR); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HealthServlet.log.error("Failed to send error", e); com.ericsson.gerrit.plugins.highavailability.highavailability.forwarder.rest.HealthServlet.log.error("Failed to send error", e); } }
private void sendError(com.ericsson.gerrit.plugins.highavailability.forwarder.HttpServletResponse rsp, int statusCode) { try { rsp.sendError(statusCode); } catch (java.io.IOException e) { rsp.sendError(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_INTERNAL_SERVER_ERROR); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HealthServlet.log.error("Failed to send error", e); com.ericsson.gerrit.plugins.highavailability.highavailability.forwarder.rest.HttpServlet.log.error("Failed to send error", e); } }
private void sendError(com.ericsson.gerrit.plugins.highavailability.forwarder.HttpServletResponse rsp, int statusCode) { try { rsp.sendError(statusCode); } catch (java.io.IOException e) { rsp.sendError(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_INTERNAL_SERVER_ERROR); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HealthServlet.log.error("Failed to send error", e); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HealthServlet.log.error("Failed to send error response", e); } }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpServletResponse rsp) { if (uncheckedFile.exists()) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.SC_SERVER_UNAVAILABLE); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpServletResponse rsp) { if (uncheckedFile.exists()) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.SC_SERVER_UNAVAILABLE); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.Configuration.SC_NO_CONTENT); }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpServletResponse rsp) { if (uncheckedFile.exists()) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.SC_SERVAIL_UNAVAILABLE); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpServletResponse rsp) { if (uncheckedFile.exists()) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_SERVAIL_UNAVAIL_UNAVAIL); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.Configuration.SC_NO_CONTENT); }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpServletResponse rsp) { if (uncheckedFile.exists()) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.SC_SERVER_UNAVAILABLE); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); return true; }
@java.lang.Override protected void doDelete(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { com.google.gerrit.server.IdentifiedUser rsp = new com.google.gerrit.server.IdentifiedUserInfo(); rp.setAllowDrafts(false); if ((s!= null) && (!(s.isEmpty())) { throw new com.google.gerrit.server.IdentifiedUserException(); } rp.setMessages(false); }
@java.lang.Override protected void doDelete(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { com.google.gerrit.server.IdentifiedUser rsp = new com.google.gerrit.server.IdentifiedUserInfo(); rp.setAllowDrafts(false); if ((s!= null) && (!(s.isEmpty()))) { throw new com.google.gerrit.server.IdentifiedUserException(); } rp.setMessages(false); }
@java.lang.Override protected void doDelete(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { com.google.gerrit.server.IdentifiedUser rsp = new com.google.gerrit.server.IdentifiedUserInfo(); rp.setAllowDrafts(false); if ((s!= null) && (!(s.isEmpty())) { throw new com.google.gerrit.httpd.RestApiServletException(); } rp.setMessages(false); }
@java.lang.Override protected void doDelete(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { com.google.gerrit.server.IdentifiedUser rsp = new com.google.gerrit.server.IdentifiedUserInfo(); rp.setAllowDrafts(false); if ((s!= null) && (!(s.isEmpty())) { throw new com.google.gwtorm.server.OrmException(e); } else { rp.setMessages(false); } }
@java.lang.Override protected void doDelete(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { com.google.gerrit.server.IdentifiedUser rsp = new com.google.gerrit.server.IdentifiedUserInfo(); rp.setAllowDrafts(false); if ((s!= null) && (!(s.isEmpty())) { throw new com.google.gerrit.httpd.RestApiServletException(e); } else { rp.setMessages(false); } }
private static int getInt(org.eclipse.jgit.lib.Config cfg, java.lang.String section, java.lang.String name, int defaultValue) { try { return cfg.getInt(section, name, defaultValue); } catch (java.lang.IllegalArgumentException e) { com.ericsson.gerrit.plugins.highavailability.Configuration.log.error("Cannot using default value for key: {}", name, defaultValue); com.ericsson.gerrit.plugins.highavailability.Configuration.log.debug(("Failed to retrieve int value: " + (e.getMessage())), e); return defaultValue; } }
private static int getInt(org.eclipse.jgit.lib.Config cfg, java.lang.String section, java.lang.String name, int defaultValue) { try { return cfg.getInt(section, name, defaultValue); } catch (java.lang.IllegalArgumentException e) { com.ericsson.gerrit.plugins.highavailability.Configuration.log.error("Cannot use value for key: {}", name, defaultValue); com.ericsson.gerrit.plugins.highavailability.Configuration.log.debug(("Failed to retrieve int value: " + (e.getMessage())), e); return defaultValue; } }
private static int getInt(org.eclipse.jgit.lib.Config cfg, java.lang.String section, java.lang.String name, int defaultValue) { try { return cfg.getInt(section, name, defaultValue); } catch (java.lang.IllegalArgumentException e) { com.ericsson.gerrit.plugins.highavailability.Configuration.log.error("Could not found for key: {}", name, defaultValue); com.ericsson.gerrit.plugins.highavailability.Configuration.log.debug(("Failed to retrieve abstract value: " + (e.getMessage())), e); return defaultValue; } }
private static int getInt(org.eclipse.jgit.lib.Config cfg, java.lang.String section, java.lang.String name, int defaultValue) { try { return cfg.getInt(section, name, defaultValue); } catch (java.lang.IllegalArgumentException e) { com.ericsson.gerrit.plugins.highavailability.Configuration.log.error("Cannot using default value for key: {}", name, defaultValue); com.ericsson.gerrit.plugins.highavailability.Configuration.log.debug(("Failed to retrieve integer value: " + (e.getMessage())), e); return defaultValue; } }
private static int getInt(org.eclipse.jgit.lib.Config cfg, java.lang.String section, java.lang.String name, int defaultValue) { try { return cfg.getInt(section, name, defaultValue); } catch (java.lang.IllegalArgumentException e) { com.ericsson.gerrit.plugins.highavailability.Configuration.log.error("Error setting value for {}: {}", name, defaultValue); com.ericsson.gerrit.plugins.highavailability.Configuration.log.debug(("Failed to retrieve abstract value: " + (e.getMessage())), e); return defaultValue; } }
private static boolean getBoolean(org.eclipse.jgit.lib.Config cfg, java.lang.String section, java.lang.String name, boolean defaultValue) { try { return cfg.getBoolean(section, name, defaultValue); } catch (java.lang.IllegalArgumentException e) { com.ericsson.gerrit.plugins.highavailability.Configuration.log.error("Option value for {}: {}", name, defaultValue); com.ericsson.gerrit.plugins.highavailability.Configuration.log.debug(("Failed to retrieve boolean value: " + (e.getMessage())), e); return defaultValue; } }
private static boolean getBoolean(org.eclipse.jgit.lib.Config cfg, java.lang.String section, java.lang.String name, boolean defaultValue) { try { return cfg.getBoolean(section, name, defaultValue); } catch (java.lang.IllegalArgumentException e) { com.ericsson.gerrit.plugins.highavailability.Configuration.log.error("Option value for {}: {}", name, defaultValue); com.ericsson.gerrit.plugins.highavailability.Configuration.log.debug(("Failed value: " + (e.getMessage())), e); return defaultValue; } }
private static boolean getBoolean(org.eclipse.jgit.lib.Config cfg, java.lang.String section, java.lang.String name, boolean defaultValue) { try { return cfg.getBoolean(section, name, defaultValue); } catch (java.lang.IllegalArgumentException e) { com.ericsson.gerrit.plugins.highavailability.Configuration.log.error("Cannot using default value for {}", name, defaultValue); com.ericsson.gerrit.plugins.highavailability.Configuration.log.debug(("Failed to retrieve boolean value: " + (e.getMessage())), e); return defaultValue; } }
private static boolean getBoolean(org.eclipse.jgit.lib.Config cfg, java.lang.String section, java.lang.String name, boolean defaultValue) { try { return cfg.getBoolean(section, name, defaultValue); } catch (java.lang.IllegalArgumentException e) { com.ericsson.gerrit.plugins.highavailability.Configuration.log.error("Cannot using default value for {}", name, defaultValue); com.ericsson.gerrit.plugins.highavailability.Configuration.log.debug(("Failed to retrieve boolean value: " + (e.getMessage())), e); return defaultValue; }
private static boolean getBoolean(org.eclipse.jgit.lib.Config cfg, java.lang.String section, java.lang.String name, boolean defaultValue) { try { return cfg.getBoolean(section, name, defaultValue); } catch (java.lang.IllegalArgumentException e) { com.ericsson.gerrit.plugins.highavailability.Configuration.log.error("Cannot using default value for {}: {}", name, defaultValue); com.ericsson.gerrit.plugins.highavailability.Configuration.log.debug(("Failed to retrieve boolean value: " + (e.getMessage())), e); return defaultValue; }
private void evictCache(com.google.common.cache.Cache<?,?> cache, java.lang.String cacheName, java.lang.Object key) { if (Constants.PROJECT_LIST.equals(cacheName)) { cache.invalidateAll(); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug("{} cache {} cache", cacheName); } else { cache.invalidate(key); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug("{} from {}: {}", cacheName); } }
private void evictCache(com.google.common.cache.Cache<?,?> cache, java.lang.String cacheName, java.lang.Object key) { if (Constants.PROJECT_LIST.equals(cacheName)) { cache.invalidateAll(); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug("{} cache {} cache", cacheName); } else { cache.invalidate(key); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug("{} from {}: {}", cacheName, cacheName); } }
private void evictCache(com.google.common.cache.Cache<?,?> cache, java.lang.String cacheName, java.lang.Object key) { if (Constants.PROJECT_LIST.equals(cacheName)) { cache.invalidateAll(); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug("{} cache {} cache", cacheName); } else { cache.invalidate(key); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug("{} from {}}", cacheName); } }
private void evictCache(com.google.common.cache.Cache<?,?> cache, java.lang.String cacheName, java.lang.Object key) { if (Constants.PROJECT_LIST.equals(cacheName)) { cache.invalidateAll(); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug("{} cache {} cache", cacheName); } else { cache.invalidate(key); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug("{} from {}}", cacheName, cacheName); } }
private void evictCache(com.google.common.cache.Cache<?,?> cache, java.lang.String cacheName, java.lang.Object key) { if (Constants.PROJECT_LIST.equals(cacheName)) { cache.invalidateAll(); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug("{} cache {} cache", cacheName); } else { cache.invalidate(key); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug("{}} from {}: {}", cacheName); } }
public java.lang.String[] getIssueIds(java.lang.String haystack) throws java.lang.Exception { java.util.regex.Pattern pattern = itsConfig.getIssuePattern(); if (pattern == null) { return new java.lang.String[]{ }; com.googlesource.gerrit.plugins.its.base.ItsExtractor.log.debug("Comment '{ haystack', haystack, haystack), haystack, pattern.pattern()); java.util.Set<java.lang.String> issues = com.google.common.collect.Sets.newHashSet(); java.util.regex.Matcher matcher = pattern.matcher(haystack); int groupIdx = itConfig.getIssuePattern(); while (matcher.find()) { java.lang.String issueId = matcher.group(groupIdx); if (!(com.google.common.base.Strings.isNullOrEmpty(issueId))) { issues.add(issueId); } } return issues.toArray(new java.lang.String[issues.size()]); }
public java.lang.String[] getIssueIds(java.lang.String haystack) throws java.lang.Exception { java.util.regex.Pattern pattern = itsConfig.getIssuePattern(); if (pattern == null) { return new java.lang.String[]{ }; com.googlesource.gerrit.plugins.its.base.ItsExtractor.log.debug("Timestamp '{ haystack, haystack), haystack, pattern.pattern()); java.util.Set<java.lang.String> issues = com.google.common.collect.Sets.newHashSet(); java.util.regex.Matcher matcher = pattern.matcher(haystack); int groupIdx = itConfig.getIssuePattern(); while (matcher.find()) { java.lang.String issueId = matcher.group(groupIdx); if (!(com.google.common.base.Strings.isNullOrEmpty(issueId))) { issues.add(issueId); } } return issues.toArray(new java.lang.String[issues.size()]); }
public java.lang.String[] getIssueIds(java.lang.String haystack) throws java.lang.Exception { java.util.regex.Pattern pattern = itsConfig.getIssuePattern(); if (pattern == null) { return new java.lang.String[]{ }; com.googlesource.gerrit.plugins.its.base.ItsExtractor.log.debug("Timestamp '{ haystack, haystack), haystack, pattern.pattern()); java.util.Set<java.lang.String> issues = com.google.common.collect.Sets.newHashSet(); java.util.regex.Matcher matcher = pattern.matcher(haystack); int groupIdx = matcher.getIssuePatternGroupIndex(); while (matcher.find()) { java.lang.String issueId = matcher.group(groupIdx); if (!(com.google.common.base.Strings.isNullOrEmpty(issueId))) { issues.add(issueId); } } return issues.toArray(new java.lang.String[issues.size()]); }
public java.lang.String[] getIssueIds(java.lang.String haystack) throws java.lang.Exception { java.util.regex.Pattern pattern = itsConfig.getIssuePattern(); if (pattern == null) { return new java.lang.String[]{ }; com.googlesource.gerrit.plugins.its.base.ItsExtractor.log.debug("Comment '{ haystack', haystack, haystack), haystack, pattern.pattern()); java.util.Set<java.lang.String> issues = com.google.common.collect.Sets.newHashSet(); java.util.regex.Matcher matcher = pattern.matcher(haystack); int groupIdx = itConfig.getIssuePatternGroupId(); while (matcher.find()) { java.lang.String issueId = matcher.group(groupIdx); if (!(com.google.common.base.Strings.isNullOrEmpty(issueId))) { issues.add(issueId); } } return issues.toArray(new java.lang.String[issues.size()]); }
public java.lang.String[] getIssueIds(java.lang.String haystack) throws java.lang.Exception { java.util.regex.Pattern pattern = itsConfig.getIssuePattern(); if (pattern == null) { return new java.lang.String[]{ }; com.googlesource.gerrit.plugins.its.base.ItsExtractor.log.debug("Comment '{ haystack', haystack, haystack), haystack, pattern.pattern()); java.util.Set<java.lang.String> issues = com.google.common.collect.Sets.newHashSet(); java.util.regex.Matcher matcher = pattern.matcher(haystack); int groupIdx = itConfig.getIssuePatternIndexGroupIndex(); while (matcher.find()) { java.lang.String issueId = matcher.group(groupIdx); if (!(com.google.common.base.Strings.isNullOrEmpty(issueId))) { issues.add(issueId); } } return issues.toArray(new java.lang.String[issues.size()]); }
public boolean isEnabled(com.google.gerrit.reviewdb.client.Project.NameKey projectName, java.lang.String refName) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectName); if (projectState == null) { com.googlesource.gerrit.plugins.its.base.its.its.ItsConfig.log.error("Checking to check if (pluginConfig.get())) { com.googlesource.gerrit.plugins.its.base.its.its.ItsConfig.log.error("Plugin not found for project {}: {}", projectName, projectName); return false; } if (isEnforcedByParentProject(refName, projectState)) { return true; } return (!("false".equals(pluginCfg.getFromProjectConfigWithInheritance(projectState, pluginName))) && (isEnabledForBranch(projectState, refName)))) && (isEnabledForBranch(projectState, refName)); } return false; }
public boolean isEnabled(com.google.gerrit.reviewdb.client.Project.NameKey projectName, java.lang.String refName) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectName); if (projectState == null) { com.googlesource.gerrit.plugins.its.base.its.its.ItsConfig.log.error("Checking to check if (pluginConfig.get())) { com.googlesource.gerrit.plugins.its.base.its.its.ItsConfig.log.error("Plugin not found for project {}: {}", projectName, projectName); return false; } if (isEnforcedByParentProject(refName, projectState)) { return true; } return (!("false".equals(pluginCfg.getFromProjectConfigWithInheritance(projectState, pluginName))) && (isEnabledForBranch(projectState, refName))) && (isEnabledForBranch(projectState, refName)); } return false; }
public boolean isEnabled(com.google.gerrit.reviewdb.client.Project.NameKey projectName, java.lang.String refName) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectName); if (projectState == null) { com.googlesource.gerrit.plugins.its.base.its.its.ItsConfig.log.error("Checking to check if (pluginConfig.get())) { com.googlesource.gerrit.plugins.its.base.its.its.ItsConfig.log.error("Plugin not found for project {}: {}", projectName, projectName); return false; } if (isEnforcedByParentProject(refName, projectState)) { return true; } return (!("false".equals(pluginCfg.getFromProjectConfigWithInheritance(projectState, pluginName).getString("enabled", "false")))) && (isEnabledForBranch(projectState, refName)); } return (!(isEnabledForBranch(projectState, refName))) && (isEnabledForBranch(projectState, refName)); }
public boolean isEnabled(com.google.gerrit.reviewdb.client.Project.NameKey projectName, java.lang.String refName) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectName); if (projectState == null) { com.googlesource.gerrit.plugins.its.base.its.its.ItsConfig.log.error("Checking to check if (pluginConfig.get())) { com.googlesource.gerrit.plugins.its.base.its.its.ItsConfig.log.error("Plugin not found for project {}: {}", projectName, projectName); return false; } if (isEnforcedByParentProject(refName, projectState)) { return true; } return (!("false".equals(pluginCfg.getFromProjectConfigWithInheritance(projectState, pluginName).getString("enabled", "false")))) && (isEnabledForBranch(projectState, refName)); } return (!(isEnabledForBranch(projectState, refName, refName)); }
public boolean isEnabled(com.google.gerrit.reviewdb.client.Project.NameKey projectName, java.lang.String refName) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectName); if (projectState == null) { com.googlesource.gerrit.plugins.its.base.its.its.ItsConfig.log.error("Checking to check if (pluginConfig.get())) { com.googlesource.gerrit.plugins.its.base.its.its.ItsConfig.log.error("Plugin not found for project {}: {}", projectName, projectName); return false; } if (isEnforcedByParentProject(refName, projectState)) { return true; } return (!("false".equals(pluginCfg.getFromProjectConfigWithInheritance(projectState, pluginName).getString("enabled", "false")))) && (isEnabledForBranch(projectState, refName)); } return (!(isEnabledForBranch(projectState, refName)))) && (isEnabledForBranch(projectState, refName)); }
@org.junit.Test public void rebuild() throws java.lang.Exception { assume().that(groupsMigration.writeToNoteDb()).isTrue(); assume().that(groupsMigration.readFromNoteDb()).isFalse(); com.google.gerrit.extensions.common.GroupInfo gApi = gApi.groups().create(name("group")).get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g.id); java.lang.String refName = com.google.gerrit.reviewdb.client.RefNames.refsGroups(g.id); org.eclipse.jgit.lib.Repository repo; try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { oldBundle = repo.openRepository(refName).getObjectId(); oldBranch = repo.exactRef(refName); newBranch = repo.exactRef(refName); } assertThat(adminRestSession.postOK((("/groups/" + uuid) + "/rebuild"), "rebuild"), new org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers))); assertThat(ref).isNotNull(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); assertThat(ref).isNotEqualTo(oldId); com.google.gerrit.server.group.GroupBundle newBundle = bundleFactory.fromNoteDb(repo, uuid); assertThat(ref).isNotEqualTo(oldBundle.member()); assertThat(newBranch.memberAudit()).isEqualTo(oldBundle.memberAudit()); assertThat(newBundle.memberAudit()).isEqualTo(oldBundle.memberAudit()); }
@org.junit.Test public void rebuild() throws java.lang.Exception { assume().that(groupsMigration.writeToNoteDb()).isTrue(); assume().that(groupsMigration.readFromNoteDb()).isFalse(); com.google.gerrit.extensions.common.GroupInfo gApi = gApi.groups().create(name("group")).get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g.id); java.lang.String refName = com.google.gerrit.reviewdb.client.RefNames.refsGroups(g.id); org.eclipse.jgit.lib.Repository repo; try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { oldBundle = repo.openRepository(refName).getObjectId(); oldBranch = repo.exactRef(refName); newBranch = repo.exactRef(refName); } assertThat(adminRestSession.postOK((("/groups/" + uuid) + "/rebuild"), "rebuild"), new org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers))); assertThat(ref).isNotNull(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); assertThat(ref).isNotEqualTo(oldId); com.google.gerrit.server.group.GroupBundle newBundle = bundleFactory.fromNoteDb(repo, uuid); assertThat(ref).isNotEqualTo(oldBundle.member()); assertThat(newBranch.memberAudit()).isEqualTo(oldBundle.memberAudit()); assertThat(newBundle.memberAudit()).isEqualTo(oldBundle.memberAudit()); } }
@org.junit.Test public void rebuild() throws java.lang.Exception { assume().that(groupsMigration.writeToNoteDb()).isTrue(); assume().that(groupsMigration.readFromNoteDb()).isFalse(); com.google.gerrit.extensions.common.GroupInfo gApi = gApi.groups().create(name("group")).get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g.id); java.lang.String refName = com.google.gerrit.reviewdb.client.RefNames.refsGroups(g.id); org.eclipse.jgit.lib.Repository repo; try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { oldBundle = repo.openRepository(refName).getObjectId(); oldBranch = repo.exactRef(refName); newBranch = repo.exactRef(refName); } assertThat(adminRestSession.postOK((("/groups/" + uuid) + "/rebuild"), "rebuild"), new org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers))); assertThat(ref).isNotNull(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); assertThat(ref).isNotEqualTo(oldId); com.google.gerrit.server.group.GroupBundle newBundle = bundleFactory.fromNoteDb(repo, uuid); assertThat(ref).isNotEqualTo(oldBundle.member()); assertThat(newBranch.memberAudit()).isEqualTo(oldBundle.memberAudit()); assertThat(newBranch.memberAudit.memberAudit()).isEqualTo(oldBundle.memberAudit()); }
@org.junit.Test public void rebuild() throws java.lang.Exception { assume().that(groupsMigration.writeToNoteDb()).isTrue(); assume().that(groupsMigration.readFromNoteDb()).isFalse(); com.google.gerrit.extensions.common.GroupInfo gApi = gApi.groups().create(name("group")).get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g.id); java.lang.String refName = com.google.gerrit.reviewdb.client.RefNames.refsGroups(g.id); org.eclipse.jgit.lib.Repository repo; try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { oldBundle = repo.openRepository(refName).getObjectId(); oldBranch = repo.exactRef(refName); newBranch = repo.exactRef(refName); } assertThat(adminRestSession.postOK((("/groups/" + uuid) + "/rebuild"), "rebuild"), new org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers))); assertThat(ref).isNotNull(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); assertThat(ref).isNotNull(); assertThat(ref).isNotNull(); assertThat(ref.getObjectId()).isNotEqualTo(oldId); com.google.gerrit.server.group.GroupBatchUpdate.Result newBundle = bundleFactory.create(repo, uuid, uuid); assertThat(newBranch.memberAudit()).isEqualTo(oldBundle.memberAudit()); assertThat(newBranch.memberAudit.memberAudit()).isEqualTo(oldBatch()); }
@org.junit.Test public void rebuild() throws java.lang.Exception { assume().that(groupsMigration.writeToNoteDb()).isTrue(); assume().that(groupsMigration.readFromNoteDb()).isFalse(); com.google.gerrit.extensions.common.GroupInfo gApi = gApi.groups().create(name("group")).get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g.id); java.lang.String refName = com.google.gerrit.reviewdb.client.RefNames.refsGroups(g.id); org.eclipse.jgit.lib.Repository repo; try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { oldBundle = repo.openRepository(refName).getObjectId(); oldBranch = repo.exactRef(refName); newBranch = repo.exactRef(refName); } assertThat(adminRestSession.postOK((("/groups/" + uuid) + "/rebuild"), "rebuild"), new org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers))); assertThat(ref).isNotNull(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); assertThat(ref).isNotEqualTo(oldId); com.google.gerrit.server.group.GroupBundle newBundle = bundleFactory.fromNoteDb(repo, uuid); assertThat(ref).isNotEqualTo(oldBundle.member()); assertThat(newBranch.memberAudit()).isEqualTo(oldBundle.memberAudit()); assertThat(newBranch.memberAudit.memberAudit()).isEqualTo(oldBundle.memberAudit()); } }
private java.lang.String getCommentChangeEvent(java.lang.String action, java.lang.String prefix, java.util.Map<java.lang.String, java.lang.String> map) { java.lang.String ret = ""; java.lang.String changeNumber = com.google.common.base.Strings.nullToEmpty(map.get(("change "change "change " + action)); if (!(changeNumber.isEmpty())) { changeNumber += " "Change-Id: " + action; } java.lang.String subject; java.lang.String submitter = formatPerson(prefix, map); if (!(submitter.isEmpty())) { ret += "\n"; } java.lang.String subject = com.google.common.base.Strings.nullToEmpty(prefix, map); if (!(subject.isEmpty())) { ret += "\n"; } java.lang.String subject = com.google.common.base.Strings.nullToEmpty(map.get(prefix))); if (!(subject.isEmpty())) { return "\n\n\n"; } java.lang.String url = com.google.common.base.Strings.nullToEmpty(map.get(url)); if (!(url.isEmpty())) { return "\n\n\n\n"; } return url; }
private java.lang.String getCommentChangeEvent(java.lang.String action, java.lang.String prefix, java.util.Map<java.lang.String, java.lang.String> map) { java.lang.String ret = ""; java.lang.String changeNumber = com.google.common.base.Strings.nullToEmpty(map.get(("change "change "change " + action)); if (!(changeNumber.isEmpty())) { changeNumber += " "Change-Id: " + action; } java.lang.String subject; java.lang.String submitter = formatPerson(prefix, map); if (!(submitter.isEmpty())) { ret += "\n"; } java.lang.String subject = com.google.common.base.Strings.nullToEmpty(prefix, map); if (!(subject.isEmpty())) { ret += "\n\n"; } java.lang.String subject = com.google.common.base.Strings.nullToEmpty(map.get(prefix)); if (!(subject.isEmpty())) { return "\n\n\n"; } java.lang.String url = com.google.common.base.Strings.nullToEmpty(map.get(url)); if (!(url.isEmpty())) { return "\n\n\n"; } return url; }
private java.lang.String getCommentChangeEvent(java.lang.String action, java.lang.String prefix, java.util.Map<java.lang.String, java.lang.String> map) { java.lang.String ret = ""; java.lang.String changeNumber = com.google.common.base.Strings.nullToEmpty(map.get(("change "change "change " + action)); if (!(changeNumber.isEmpty())) { changeNumber += " "Change-Id: " + action; } java.lang.String subject; java.lang.String submitter = formatPerson(prefix, map); if (!(submitter.isEmpty())) { ret += "\n"; } java.lang.String subject = com.google.common.base.Strings.nullToEmpty(prefix, map); if (!(subject.isEmpty())) { ret += "\n\n"; } java.lang.String subject = com.google.common.base.Strings.nullToEmpty(map.get(prefix))); if (!(subject.isEmpty())) { return "\n\n\n"; } java.lang.String url = com.google.common.base.Strings.nullToEmpty(map.get(url)); if (!(url.isEmpty())) { return "\n\n\n\n"; } return url; }
private java.lang.String getCommentChangeEvent(java.lang.String action, java.lang.String prefix, java.util.Map<java.lang.String, java.lang.String> map) { java.lang.String ret = ""; java.lang.String changeNumber = com.google.common.base.Strings.nullToEmpty(map.get(("change "change "change " + action)); if (!(changeNumber.isEmpty())) { changeNumber += " "Change-Id: " + action; } java.lang.String subject; java.lang.String submitter = formatPerson(prefix, map); if (!(submitter.isEmpty())) { ret += "\n"; } java.lang.String subject = com.google.common.base.Strings.nullToEmpty(prefix, map); if (!(subject.isEmpty())) { ret += "\n\n"; } java.lang.String subject = com.google.common.base.Strings.nullToEmpty(map.get(prefix))); if (!(subject.isEmpty())) { return "\n\n\n\n"; } java.lang.String url = com.google.common.base.Strings.nullToEmpty(map.get(url)); if (!(url.isEmpty())) { return "\n\n\n"; } return url; }
private java.lang.String getCommentChangeEvent(java.lang.String action, java.lang.String prefix, java.util.Map<java.lang.String, java.lang.String> map) { java.lang.String ret = ""; java.lang.String changeNumber = com.google.common.base.Strings.nullToEmpty(map.get(("change "change "change " + action)); if (!(changeNumber.isEmpty())) { changeNumber += " "Change-Id: " + action; } java.lang.String subject; java.lang.String submitter = formatPerson(prefix, map); if (!(submitter.isEmpty())) { ret += "\n\n"; } java.lang.String subject = com.google.common.base.Strings.nullToEmpty(prefix, map); if (!(subject.isEmpty())) { ret += "\n"; } java.lang.String subject = com.google.common.base.Strings.nullToEmpty(map.get(prefix))); if (!(subject.isEmpty())) { return "\n\n\n"; } java.lang.String url = com.google.common.base.Strings.nullToEmpty(map.get(url)); if (!(url.isEmpty())) { return "\n\n\n\n"; } return url; }
private java.lang.String formatPerson(java.lang.String prefix, java.util.Map<java.lang.String, java.lang.String> map) { java.lang.String ret = com.google.common.base.Strings.nullToEmpty(map.get((prefix + "Name")); if (ret.isEmpty()) { ret = com.google.common.base.Strings.nullToEmpty(map.get((prefix + "Username")); } return ret; }
private java.lang.String formatPerson(java.lang.String prefix, java.util.Map<java.lang.String, java.lang.String> map) { java.lang.String ret = com.google.common.base.Strings.nullToEmpty(map.get((prefix + "Name"))); if (ret.isEmpty()) { ret = com.google.common.base.Strings.nullToEmpty(map.get((prefix + "Username")); } return ret; }
private java.lang.String formatPerson(java.lang.String prefix, java.util.Map<java.lang.String, java.lang.String> map) { java.lang.String ret = com.google.common.base.Strings.nullToEmpty(map.get((prefix + "Name")); return ret; }
private java.lang.String formatPerson(java.lang.String prefix, java.util.Map<java.lang.String, java.lang.String> map) { java.lang.String ret = com.google.common.base.Strings.nullToEmpty(map.get((prefix + "Name")); if (ret.isEmpty()) { return ret; } return ret; }
private java.lang.String formatPerson(java.lang.String prefix, java.util.Map<java.lang.String, java.lang.String> map) { java.lang.String ret = com.google.common.base.Strings.nullToEmpty(map.get((prefix + "Name"))); if (ret.isEmpty()) { return ret; } return ret; }
static java.lang.String getOwnersFileName(com.google.gerrit.server.project.ProjectState projectState, com.googlesource.gerrit.plugins.query.change.ChangeData c) { if (((com.googlesource.gerrit.plugins.findowners.Config.config)!= null) && ((projectState!= null)) && (projectState.trim().getString(com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME))) { java.lang.String name = com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(projectState.PLUGIN_NAME).getString(com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME, com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME, com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME)); if (name.trim().equals("")) { com.googlesource.gerrit.plugins.findowners.Config.log.error((((((("Project " + (c.project()) + (c.project())) + " has wrong ") + name)); return com.googlesource.gerrit.plugins.findowners.Config.OWNERS; } return name; } return name; }
static java.lang.String getOwnersFileName(com.google.gerrit.server.project.ProjectState projectState, com.googlesource.gerrit.plugins.query.change.ChangeData c) { if (((com.googlesource.gerrit.plugins.findowners.Config.config)!= null) && ((projectState!= null)) && (projectState.trim().getString(com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME))) { java.lang.String name = com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(projectState.PLUGIN_NAME).getString(com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME, com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME, com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME)); if (name.trim().equals("")) { com.googlesource.gerrit.plugins.findowners.Config.log.error((((((("Project " + (c.project()) + " has wrong ") + (com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME)) + " for ") + name)); return com.googlesource.gerrit.plugins.findowners.Config.OWNERS; } return name; } return name; }
static java.lang.String getOwnersFileName(com.google.gerrit.server.project.ProjectState projectState, com.googlesource.gerrit.plugins.query.change.ChangeData c) { if (((com.googlesource.gerrit.plugins.findowners.Config.config)!= null) && ((projectState!= null)) && (projectState.trim().getString(com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME))) { java.lang.String name = com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(projectState.PLUGIN_NAME).getString(com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME, com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME, com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME)); if (name.trim().equals("")) { com.googlesource.gerrit.plugins.findowners.Config.log.error((((((("Project " + (c.project()) + " has wrong ") + (com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME)) + ": ") + name)); return com.googlesource.gerrit.plugins.findowners.Config.OWNERS; } return name; } return name; }
static java.lang.String getOwnersFileName(com.google.gerrit.server.project.ProjectState projectState, com.googlesource.gerrit.plugins.query.change.ChangeData c) { if (((com.googlesource.gerrit.plugins.findowners.Config.config)!= null) && ((projectState!= null)) && (projectState.trim().getString(com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME))) { java.lang.String name = com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(projectState.PLUGIN_NAME).getString(com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME, com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME, com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME)); if (name.trim().equals("")) { com.googlesource.gerrit.plugins.findowners.Config.log.error((((((("Project " + (c.project()) + " has wrong ") + (com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME)) + " has ") + name)); return com.googlesource.gerrit.plugins.findowners.Config.OWNERS; } return name; } return name; }
static java.lang.String getOwnersFileName(com.google.gerrit.server.project.ProjectState projectState, com.googlesource.gerrit.plugins.query.change.ChangeData c) { if (((com.googlesource.gerrit.plugins.findowners.Config.config)!= null) && ((projectState!= null)) && (projectState.trim().getString(com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME))) { java.lang.String name = com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(projectState.PLUGIN_NAME).getString(com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME, com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME, com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME)); if (name.trim().equals("")) { com.googlesource.gerrit.plugins.findowners.Config.log.error((((((("Project " + (c.project()) + (c.project())) + " has wrong ") + (com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME)) + " for ") + name)); return name; } return name; } return name; }
private boolean shouldReplicate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { projectState = projectCache.checkedGet(project); } catch (java.io.IOException e) { return false; } return false; }
private boolean shouldReplicate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { projectState = projectCache.checkedGet(project); } catch (java.io.IOException e) { return false; } catch (com.google.gerrit.server.project.NoSuchProjectException err) { return false; } return false; }
private boolean shouldReplicate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { projectState = projectCache.checkedGet(project); } catch (java.io.IOException e) { return false; } catch (com.google.gerrit.server.project.NoSuchProjectException err) { com.google.gerrit.server.project.ProjectControl projectState = projectCache.checkedGet(project); return false; } return false; }
private boolean shouldReplicate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { projectState = projectCache.checkedGet(project); } catch (java.io.IOException e) { return false; } catch (com.google.gerrit.server.project.NoSuchProjectException err) { com.google.gerrit.server.project.ProjectState projectState = projectCache.checkedGet(project); return false; } return false; }
private boolean shouldReplicate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { projectState = projectCache.checkedGet(project); } catch (java.io.IOException e) { return false; } if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } return shouldReplicate(projectState, userProvider.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException err) { stateLog.error(java.lang.String.format("source project %s not available", project), err, states); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUncheckedGetUncheckedGet(e); throw new java.lang.RuntimeException(e); } return false; }
public java.util.regex.Pattern getIssuePattern() { java.util.Optional<java.lang.String> match = com.googlesource.gerrit.plugins.its.base.base.its.Optional.from(getCommentLinkName())).filter(new com.googlesource.gerrit.plugins.its.base.base.Predicate<com.google.gerrit.extensions.api.projects.CommentLinkInfo>() { @java.lang.Override public boolean apply(com.google.gerrit.extensions.api.projects.CommentLinkInfo input) { return ((input.match)!= null) && (!(input.match.trim().isEmpty())); } }).transform(new com.google.gerrit.extensions.api.projects.CommentLinkInfo, java.lang.String>() { @java.lang.Override public java.lang.String apply(com.google.gerrit.extensions.api.projects.CommentLinkInfo input) { return input.match; }).last(); }).last(); java.lang.String def = gerritConfig.getString("commentlink", getCommentLinkName(), "match"); return gritConfig.getString(); }
public java.util.regex.Pattern getIssuePattern() { java.util.Optional<java.lang.String> match = com.googlesource.gerrit.plugins.its.base.base.its.Optional.from(getCommentLinkName())).filter(new com.googlesource.gerrit.plugins.its.base.base.Predicate<com.google.gerrit.extensions.api.projects.CommentLinkInfo>() { @java.lang.Override public boolean apply(com.google.gerrit.extensions.api.projects.CommentLinkInfo input) { return ((input.match)!= null) && (!(input.match.trim().isEmpty())); } }).transform(new com.google.gerrit.extensions.api.projects.CommentLinkInfo, java.lang.String>() { @java.lang.Override public java.lang.String apply(com.google.gerrit.extensions.api.projects.CommentLinkInfo input) { return input.match; }).last(); }).last(); java.lang.String def = gerritConfig.getString("commentlink", getCommentLinkName(), "match"); return new com.google.gerrit.extensions.api.changes.CommentLinkInfo.getString("commentlink", getCommentLinkName(), "match"); }
public java.util.regex.Pattern getIssuePattern() { java.util.Optional<java.lang.String> match = com.googlesource.gerrit.plugins.its.base.base.its.Optional.from(getCommentLinkName())).filter(new com.googlesource.gerrit.plugins.its.base.base.Predicate<com.google.gerrit.extensions.api.projects.CommentLinkInfo>() { @java.lang.Override public boolean apply(com.google.gerrit.extensions.api.projects.CommentLinkInfo input) { return ((input.match)!= null) && (!(input.match.trim().isEmpty())); } }).transform(new com.google.gerrit.extensions.api.projects.CommentLinkInfo, java.lang.String>() { @java.lang.Override public java.lang.String apply(com.google.gerrit.extensions.api.projects.CommentLinkInfo input) { return input.match; }).last(); }).last(); java.lang.String def = gerritConfig.getString("commentlink", getCommentLinkName(), "match"); return new com.google.gerrit.extensions.api.changes.CommentLinkInfo(gApi.getString("commentlink", getCommentLinkName(), "match"); }
public java.util.regex.Pattern getIssuePattern() { java.util.Optional<java.lang.String> match = com.googlesource.gerrit.plugins.its.base.base.its.Optional.from(getCommentLinkName())).filter(new com.googlesource.gerrit.plugins.its.base.base.Predicate<com.google.gerrit.extensions.api.projects.CommentLinkInfo>() { @java.lang.Override public boolean apply(com.google.gerrit.extensions.api.projects.CommentLinkInfo input) { return ((input.match)!= null) && (!(input.match.trim().isEmpty())); } }).transform(new com.google.gerrit.extensions.api.projects.CommentLinkInfo, java.lang.String>() { @java.lang.Override public java.lang.String apply(com.google.gerrit.extensions.api.projects.CommentLinkInfo input) { return input.match; }).last(); }).last(); java.lang.String def = gerritConfig.getString("commentlink", getCommentLinkName(), "match"); return new com.google.gerrit.extensions.api.projects.ProjectLinkInfo.getName("commentlink", getCommentLinkName(), "match"); }
public java.util.regex.Pattern getIssuePattern() { java.util.Optional<java.lang.String> match = com.googlesource.gerrit.plugins.its.base.base.its.Optional.from(getCommentLinkName())).filter(new com.googlesource.gerrit.plugins.its.base.base.Predicate<com.google.gerrit.extensions.api.projects.CommentLinkInfo>() { @java.lang.Override public boolean apply(com.google.gerrit.extensions.api.projects.CommentLinkInfo input) { return ((input.match)!= null) && (!(input.match.trim().isEmpty())); } }).transform(new com.google.gerrit.extensions.api.projects.CommentLinkInfo, java.lang.String>() { @java.lang.Override public java.lang.String apply(com.google.gerrit.extensions.api.projects.CommentLinkInfo input) { return input.match; }).last(); }).last(); java.lang.String def = gerritConfig.getString("commentlink", getCommentLinkName(), "match"); return new com.google.gerrit.extensions.api.changes.CommentLinkInfo(com.google.gerrit.extensions.api.projects.ProjectLinkInfo.name(), "match"); }
public java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) { java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create("revision", patchSetAttribute.revision)); properties.add(propertyFactory.create("patch-number", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("patch-number", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("ref", patchSetAttribute.ref)); properties.add(propertyFactory.create("created-on", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create("created-on", patchSetAttribute.createdOn.createdOn.toString())); properties.add(propertyFactory.create("parents", patchSetAttribute.parents.toString())); properties.add(propertyFactory.create("deletions", java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.add(propertyFactory.create("deletions", java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.add(extractFrom(patchSetAttribute.uploader, "author")); }
public java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) { java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create("revision", patchSetAttribute.revision)); properties.add(propertyFactory.create("patch-number", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("patch-number", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("ref", patchSetAttribute.ref)); properties.add(propertyFactory.create("created-on", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create("created-on", patchSetAttribute.createdOn.createdOn.toString())); properties.add(propertyFactory.create("parents", patchSetAttribute.parents.toString())); properties.add(propertyFactory.create("deletions", java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.add(propertyFactory.create("deletions", java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.add(extractFrom(patchSetAttribute.uploader, "author")); properties.addAll(extractFrom(patchSetAttribute.author, "author")); }
public java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) { java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create("revision", patchSetAttribute.revision)); properties.add(propertyFactory.create("patch-set-number", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("patch-number", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("ref", patchSetAttribute.ref)); properties.add(propertyFactory.create("created-on", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create("created-on", patchSetAttribute.createdOn.createdOn.toString())); properties.add(propertyFactory.create("parents", patchSetAttribute.parents.toString())); properties.add(propertyFactory.create("deletions", java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.add(propertyFactory.create("deletions", java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.add(extractFrom(patchSetAttribute.uploader, "author")); }
public java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) { java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create("revision", patchSetAttribute.revision)); properties.add(propertyFactory.create("patch-number", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("patch-number", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("ref", patchSetAttribute.ref)); properties.add(propertyFactory.create("created-on", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create("created-on", patchSetAttribute.createdOn.createdOn.toString())); properties.add(propertyFactory.create("parents", patchSetAttribute.parents.toString())); properties.add(propertyFactory.create("deletions", java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.add(propertyFactory.create("deletions", java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.addAll(extractFrom(patchSetAttribute.uploader, "author")); properties.addAll(extractFrom(patchSetAttribute.author, "author")); }
public java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) { java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create("revision", patchSetAttribute.revision)); properties.add(propertyFactory.create("patch-set-number", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("patch-number", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("ref", patchSetAttribute.ref)); properties.add(propertyFactory.create("created-on", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create("created-on", patchSetAttribute.createdOn.createdOn.toString())); properties.add(propertyFactory.create("parents", patchSetAttribute.parents.toString())); properties.add(propertyFactory.create("deletions", java.lang.Integer.toString(patchSetAttribute.sizeDeletions))); properties.add(propertyFactory.create("deletions", java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.addAll(extractFrom(patchSetAttribute.uploader, "author")); }
public static com.google.common.collect.ImmutableList<java.lang.String> compare(com.google.gerrit.server.group.GroupBundle reviewDb, com.google.gerrit.server.group.GroupBundle noteDb) { return com.google.gerrit.server.group.GroupBundle.compareTo(reviewDbBundle, noteDbBundle, true); }
public static com.google.common.collect.ImmutableList<java.lang.String> compare(com.google.gerrit.server.group.GroupBundle reviewDb, com.google.gerrit.server.group.GroupBundle noteDb) { return com.google.gerrit.server.group.GroupBundle.compareTo(reviewDbBundle, noteDb, true); }
public static com.google.common.collect.ImmutableList<java.lang.String> compare(com.google.gerrit.server.group.GroupBundle reviewDb, com.google.gerrit.server.group.GroupBundle noteDb) { return com.google.gerrit.server.group.GroupBundle.compare(reviewDbBundle, noteDbBundle, true); }
public static com.google.common.collect.ImmutableList<java.lang.String> compare(com.google.gerrit.server.group.GroupBundle reviewDb, com.google.gerrit.server.group.GroupBundle noteDb) { return com.google.gerrit.server.group.GroupBundle.compareTo(reviewdb, noteDbBundle, true); }
public static com.google.common.collect.ImmutableList<java.lang.String, com.google.gerrit.server.group.GroupBundle> compare(com.google.gerrit.server.group.GroupBundle reviewDb, com.google.gerrit.server.group.GroupBundle bundleDbBundle) { return com.google.gerrit.server.group.GroupBundle.compareTo(reviewDb, noteDb, true); }
private void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int val) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException { if (canRemoveReviewer(notes.getChange(), currentUser, val)) { return; } permissionBackend.user(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).check(ChangePermission.REVIEWER); }
private void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int val) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException { if (canRemoveReviewer(notes.getChange(), currentUser, val)) { return; } permissionBackend.user(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).check(ChangePermission.REMOVE_REVIEWER); }
private void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int val) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException { if (canRemoveReviewer(notes.getChange(), currentUser, val)) { return; } permissionBackend.user(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).check(ChangePermission.REVIEWER); }
private void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int val) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException { if (canRemoveReviewer(notes.getChange(), currentUser, val)) { return; } permissionBackend.user(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).check(ChangePermission.REMOVE_REVIEWER); }
private void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int val) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException { if (canRemoveReviewer(notes.getChange(), currentUser, val)) { return; } permissionBackend.user(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).check(reviewer).database(dbProvider.get(), notes)); }
public void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gwtorm.server.OrmException, java.lang.Exception { checkRemoveReviewer(notes, currentUser, null); }
public void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException { checkRemoveReviewer(notes, currentUser, null); }
public void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException { checkRemoveReviewer(notes, currentUser, null); }
public void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException { checkRemoveReviewer(notes, currentUser, null, null); }
public void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gwtorm.server.OrmException { checkRemoveReviewer(notes, currentUser, null, null); }
@org.junit.Test public void testHealthCheckEnabled() throws java.lang.Exception { when(configMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HE_CHECK_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_CHECK_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_THREAD_CHECK)).thenReturn(false); initializeConfiguration(); assertThat(configuration.mysql().enabled()).isFalse(); }
@org.junit.Test public void testHealthCheckEnabled() throws java.lang.Exception { when(configMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HE_CHECK_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_CHECK_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_HE_THREAD_CHECK)).thenReturn(false); initializeConfiguration(); assertThat(configuration.mysql().enabled()).isFalse(); }
@org.junit.Test public void testHealthCheckEnabled() throws java.lang.Exception { when(configMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HE_CHECK_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_THREAD_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_HE_HE_CHECK)).thenReturn(false); initializeConfiguration(); assertThat(configuration.mysql().enabled()).isFalse(); }
@org.junit.Test public void testHealthCheckEnabled() throws java.lang.Exception { when(configMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HE_CHECK_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_CHECK_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_HE_HE_CHECK)).thenReturn(false); initializeConfiguration(); assertThat(configuration.mysql().enabled()).isFalse(); }
@org.junit.Test public void testHealthCheckEnabled() throws java.lang.Exception { when(configMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HE_CHECK_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_CHECK_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_HE_THREAD_ENABLED)).thenReturn(false); initializeConfiguration(); assertThat(configuration.mysql().enabled()).isFalse(); }
@java.lang.Override public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement base, org.junit.runner.Description description) { return new org.junit.runners.model.Statement() { @java.lang.Override public void evaluate() throws java.lang.Throwable { if ((com.google.gerrit.acceptance.AbstractDaemonTest.firstTest(description)) == null) { com.google.gerrit.acceptance.AbstractDaemonTest.firstTest = description; } beforeTest(description); com.google.gerrit.acceptance.PushOneCommit.resetWithProjects(allProjects, allUsers); try { base.evaluate(); } finally { base.evaluate(); } } }; }
@java.lang.Override public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement base, org.junit.runner.Description description) { return new org.junit.runners.model.Statement() { @java.lang.Override public void evaluate() throws java.lang.Throwable { if ((com.google.gerrit.acceptance.AbstractDaemonTest.firstTest(description)) == null) { com.google.gerrit.acceptance.AbstractDaemonTest.firstTest = description; } beforeTest(description); com.google.gerrit.acceptance.PushOneCommit.reset(initialProjects, allUsers); try { base.evaluate(); } finally { base.evaluate(); } } }; }
@java.lang.Override public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement base, org.junit.runner.Description description) { return new org.junit.runners.model.Statement() { @java.lang.Override public void evaluate() throws java.lang.Throwable { if ((com.google.gerrit.acceptance.AbstractDaemonTest.firstTest(description)) == null) { com.google.gerrit.acceptance.AbstractDaemonTest.firstTest = description; } beforeTest(description); com.google.gerrit.acceptance.PushOneCommit.resetWithProjects(allProjects, allUsers); try { base.evaluate(); } finally { base.close(); } } }; }
@java.lang.Override public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement base, org.junit.runner.Description description) { return new org.junit.runners.model.Statement() { @java.lang.Override public void evaluate() throws java.lang.Throwable { if ((com.google.gerrit.acceptance.AbstractDaemonTest.firstTest(description)) == null) { com.google.gerrit.acceptance.AbstractDaemonTest.firstTest = description; } beforeTest(description); com.google.gerrit.acceptance.PushOneCommit.resetWithProjects(allProjects, allUsers); try { base.evaluate(); } finally { base.evaluate(); } } } }; }
@java.lang.Override public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement base, org.junit.runner.Description description) { return new org.junit.runners.model.Statement() { @java.lang.Override public void evaluate() throws java.lang.Throwable { if ((com.google.gerrit.acceptance.AbstractDaemonTest.firstTest(description)) == null) { com.google.gerrit.acceptance.AbstractDaemonTest.firstTest = description; } beforeTest(description); com.google.gerrit.acceptance.PushOneCommit.resetWithProjects(allProjects, allUsers); try { base.evaluate(); } finally { base.evaluate(); } } }
protected com.google.gerrit.acceptance.ProjectConfig resetProjects(com.google.gerrit.reviewdb.client.Project... projects) throws java.lang.Exception { return new com.google.gerrit.acceptance.ProjectConfig(repoManager, metaDataUpdateFactory, projectCache, projectCache); }
protected com.google.gerrit.acceptance.ProjectConfigResolver resetProjects(com.google.gerrit.reviewdb.client.Project... projects) throws java.lang.Exception { return new com.google.gerrit.acceptance.ProjectConfig(repoManager, metaDataUpdateFactory, projectCache, projectCache); }
protected com.google.gerrit.acceptance.ProjectConfigResolver resetProjects(com.google.gerrit.reviewdb.client.Project... projects) throws java.lang.Exception { return new com.google.gerrit.acceptance.ProjectConfig(repoManager, metaDataUpdateFactory, projectCache, projects); }
protected com.google.gerrit.acceptance.ProjectConfigResolver resetProjects(com.google.gerrit.reviewdb.client.Project... projects) throws java.lang.Exception { return new com.google.gerrit.acceptance.ProjectConfig(repoManager, metaDataUpdateFactory, projectCache, projectCache, projects); }
protected com.google.gerrit.acceptance.ProjectConfigResolver resetProjects(com.google.gerrit.reviewdb.client.Project... projects) throws java.lang.Exception { return new com.google.gerrit.acceptance.ProjectConfig(repoManager, metaDataUpdateFactory, projectCache, projectCache, projectsCache); }
@java.lang.Override public void evaluate() throws java.lang.Exception { if ((com.google.gerrit.acceptance.AbstractDaemonTest.firstTest) == null) { com.google.gerrit.acceptance.AbstractDaemonTest.firstTest = description; } else { beforeTest(description); } beforeTest(description); try { com.google.gerrit.acceptance.ProjectConfig resetProjects = resetProjects(allProjects); } finally { base.evaluate(); } }
@java.lang.Override public void evaluate() throws java.lang.Exception { if ((com.google.gerrit.acceptance.AbstractDaemonTest.firstTest) == null) { com.google.gerrit.acceptance.AbstractDaemonTest.firstTest = description; } else { beforeTest(description); } beforeTest(description); try { com.google.gerrit.acceptance.ProjectConfig r = resetProjects(allProjects); } finally { base.evaluate(); } }
@java.lang.Override public void evaluate() throws java.lang.Exception { if ((com.google.gerrit.acceptance.AbstractDaemonTest.firstTest) == null) { com.google.gerrit.acceptance.AbstractDaemonTest.firstTest = description; } else { beforeTest(description); } beforeTest(description); try { com.google.gerrit.acceptance.ProjectConfig resetProjects = resetProjects(allProjects, allUsers); } finally { base.evaluate(); } }
@java.lang.Override public void evaluate() throws java.lang.Exception { if ((com.google.gerrit.acceptance.AbstractDaemonTest.firstTest) == null) { com.google.gerrit.acceptance.AbstractDaemonTest.firstTest = description; } else { beforeTest(description); } beforeTest(description); try (com.google.gerrit.acceptance.ProjectConfig r = resetProjects(allProjects, allUsers)) { base.evaluate(); } finally { afterTest(); } }
@java.lang.Override public void evaluate() throws java.lang.Exception { if ((com.google.gerrit.acceptance.AbstractDaemonTest.firstTest) == null) { com.google.gerrit.acceptance.AbstractDaemonTest.firstTest = description; } else { beforeTest(description); } beforeTest(description); try (com.google.gerrit.acceptance.ProjectConfig r = resetProjects(allProjects, allUsers)) { base.evaluate(); } finally { base.evaluate(); }
public static com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference> loadAllGroupReferences(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return com.google.common.collect.ImmutableSet.of(); }
public static com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference> loadAllGroupReferences(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Ref ref = repository.exactRef(RefNames.REFS_GROUPS); if (ref == null) { return com.google.common.collect.ImmutableSet.of(); } try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository)) { org.eclipse.jgit.revwalk.RevCommit commit = revWalk.parseCommit(ref.getObjectId()); org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(reader, notes); com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.reviewdb.client.AccountGroup.UUID, java.lang.String> uuidMap = com.google.common.collect.ImmutableSet.builder(); java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, java.lang.String, java.lang.String> uuidMap = new java.util.HashMap<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.server.group.GroupReference groupReference = com.google.gerrit.server.group.GroupBackend.getGroupReference(reader, noteMap); groupReference.add(groupReference, uuid); } return groupReferences; } }
public static com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference> loadAllGroupReferences(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Ref ref = repository.exactRef(RefNames.REFS_GROUPS); if (ref == null) { return com.google.common.collect.ImmutableSet.of(); } try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository)) { org.eclipse.jgit.revwalk.RevCommit commit = revWalk.parseCommit(ref.getObjectId()); org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(reader, notes); com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.reviewdb.client.AccountGroup.UUID, java.lang.String> uuidMap = com.google.common.collect.ImmutableSet.builder(); java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, java.lang.String, java.lang.String> uuidMap = new java.util.HashMap<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.server.group.GroupReference groupReference = com.google.gerrit.server.group.GroupReference.getGroupReference(reader, noteMap.getData()); groupMap.add(groupReference, uuid); } return groupReferences; } }
public static com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference> loadAllGroupReferences(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Ref ref = repository.exactRef(RefNames.REFS_GROUPS); if (ref == null) { return com.google.common.collect.ImmutableSet.of(); } try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository)) { org.eclipse.jgit.revwalk.RevCommit commit = revWalk.parseCommit(ref.getObjectId()); org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(reader, notes); com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.reviewdb.client.AccountGroup.UUID, java.lang.String> uuidMap = com.google.common.collect.ImmutableSet.builder(); java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, java.lang.String, java.lang.String> uuidMap = new java.util.HashMap<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.server.group.GroupReference groupReference = com.google.gerrit.server.group.GroupReference.getGroupReference(reader, noteMap.getData()); groupReference.add(groupReference, uuid); } return groupReferences; } }
public static com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference> loadAllGroupReferences(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Ref ref = repository.exactRef(RefNames.REFS_GROUPS); if (ref == null) { return com.google.common.collect.ImmutableSet.of(); } try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository)) { org.eclipse.jgit.revwalk.RevCommit commit = revWalk.parseCommit(ref.getObjectId()); org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(reader, notes); com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.reviewdb.client.AccountGroup.UUID, java.lang.String> uuidMap = com.google.common.collect.ImmutableSet.builder(); java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, java.lang.String, java.lang.String> uuidMap = new java.util.HashMap<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.server.group.GroupReference groupReference = com.google.gerrit.server.group.GroupReference.getGroupReference(reader, noteMap); groupReference.add(groupReference, uuid); } return groupReferences; }
public static com.google.gerrit.server.group.GroupConfig createForNewGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.server.group.InternalGroupCreation groupCreation) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.GroupConfig groupConfig = new com.google.gerrit.server.group.GroupConfig(groupCreation.getGroupUUID(), repository); groupConfig.load(repository); return groupConfig; }
public static com.google.gerrit.server.group.GroupConfig createForNewGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.server.group.InternalGroupCreation groupCreation) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.GroupConfig groupCreation = new com.google.gerrit.server.group.GroupConfig(groupCreation.getGroupUUID(), repository); groupConfig.load(repository); return groupConfig; }
public static com.google.gerrit.server.group.GroupConfig createForNewGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.server.group.InternalGroupCreation> groupCreation) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.GroupConfig groupConfig = new com.google.gerrit.server.group.GroupConfig(groupCreation, repository); groupConfig.load(repository); return groupConfig; }
public static com.google.gerrit.server.group.GroupConfig createForNewGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.server.group.InternalGroupCreation event) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.GroupConfig groupConfig = new com.google.gerrit.server.group.GroupConfig(groupCreation.getGroupUUID(), repository); groupConfig.load(repository); return groupConfig; }
public static com.google.gerrit.server.group.GroupConfig createForNewGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.server.group.InternalGroupCreation> groupCreation) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.GroupConfig groupConfig = new com.google.gerrit.server.group.GroupConfig(groupCreation, repository); groupConfig.load(repository, repository); return groupConfig; }
public static com.google.gerrit.server.group.GroupConfig loadForGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.GroupConfig groupConfig = new com.google.gerrit.server.group.GroupConfig(groupUUID, repository); groupConfig.load(repository); return groupConfig; }
public static com.google.gerrit.server.group.GroupConfig loadForGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.GroupConfig groupConfig = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupUUID, repository); groupConfig.load(repository); return groupConfig; }
public static com.google.gerrit.server.group.GroupConfig loadForGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.GroupConfig groupConfig = new com.google.gerrit.server.group.GroupConfig(groupUUID, repository, repository); groupConfig.load(repository); return groupConfig; }
public static com.google.gerrit.server.group.GroupConfig loadForGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.GroupConfig groupConfig = new com.google.gerrit.server.group.GroupConfig(groupUUID, repository); groupConfig.load(repository, repository); return groupConfig; }
public static com.google.gerrit.server.group.GroupConfig loadForGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.GroupConfig groupConfig = new com.google.gerrit.server.group.GroupConfig(groupUUID, repository); groupConfig.load(); return groupConfig; }
public java.util.Optional<com.google.gerrit.server.group.InternalGroup> getLoadedGroup() { checkLoaded(); loadedGroup.detect(); return loadGroup; }
public java.util.Optional<com.google.gerrit.server.group.InternalGroup> getLoadedGroup() { checkLoaded(); loadedGroup.detect(); return loadConsistency(); }
public java.util.Optional<com.google.gerrit.server.group.InternalGroup> getLoadedGroup() { checkLoaded(); loadedGroup.detect(); return loadConsistencyWithGroup(t); }
public java.util.Optional<com.google.gerrit.server.group.InternalGroup> getLoadedGroup() { checkLoaded(); loadedGroup.detect(); return loadConsistency(t); }
public java.util.Optional<com.google.gerrit.server.group.InternalGroup> getLoadedGroup() { checkLoaded(); loadedGroup.ifecycle = loadConsistencyWithGroup("Cannot check", t); return loadGroup; }
public static com.google.gerrit.server.group.GroupConfig loadForGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, org.eclipse.jgit.lib.ObjectId commitId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.GroupConfig groupConfig = new com.google.gerrit.server.group.GroupConfig(groupUUID, repository); groupConfig.load(repository, commitId); return groupConfig; }
public static com.google.gerrit.server.group.GroupConfig loadForGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, org.eclipse.jgit.lib.ObjectId commitId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.GroupConfig groupConfig = new com.google.gerrit.server.group.GroupConfig(groupUUID, repository); groupConfig.load(repository, commitId); return groupConfig; }
public static com.google.gerrit.server.group.GroupConfig loadForGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, org.eclipse.jgit.lib.ObjectId commitId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.GroupConfig groupConfig = new com.google.gerrit.server.group.GroupConfig(groupUUID, commitId); groupConfig.load(repository, commitId); return groupConfig; }
public static com.google.gerrit.server.group.GroupConfig loadForGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, org.eclipse.jgit.lib.ObjectId commitId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.GroupConfig groupConfig = new com.google.gerrit.server.group.GroupConfig(groupUUID, repository); groupConfig.load(repo, commitId); return groupConfig; }
public static com.google.gerrit.server.group.GroupConfig loadForGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, org.eclipse.jgit.lib.ObjectId commitId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.GroupConfig groupConfig = new com.google.gerrit.server.group.GroupConfig(groupUUID, repository); groupConfig.load(repository, commitId); return g; }
private java.util.Optional<com.google.gerrit.common.data.GroupReference> loadGroup(com.google.gerrit.common.data.GroupReference groupReference) { java.util.Optional<com.google.gerrit.common.data.GroupDescription> group = groupCache.get(groupReference.getUUID()).map(InternalGroupDescription::new com.google.gerrit.reviewdb.client.AccountGroup.UUID::from); if (!(group.isPresent())) { com.google.gerrit.server.group.GroupsCheckResultChecker.log.warn("Failed to load from group " + (fromGroupName))); } return group; }
private java.util.Optional<com.google.gerrit.common.data.GroupReference> loadGroup(com.google.gerrit.common.data.GroupReference groupReference) { java.util.Optional<com.google.gerrit.common.data.GroupDescription> group = groupCache.get(groupReference.getUUID()).map(InternalGroupDescription::new com.google.gerrit.reviewdb.client.AccountGroup.UUID::from); if (!(group.isPresent())) { com.google.gerrit.server.group.GroupsCheckResultChecker.log.warn("Failed to load from group " + (fromGroupName))); return group; } return group; }
private java.util.Optional<com.google.gerrit.common.data.GroupReference> loadGroup(com.google.gerrit.common.data.GroupReference groupReference) { java.util.Optional<com.google.gerrit.common.data.GroupDescription> group = groupCache.get(groupReference.getUUID()).map(InternalGroupDescription::new com.google.gerrit.reviewdb.client.AccountGroup.UUID::from); if (!(group.isPresent())) { com.google.gerrit.server.group.GroupsCheckResultChecker.log.warn("Failed to load from group " + (fromGroupName))); return group; } }
private java.util.Optional<com.google.gerrit.common.data.GroupReference> loadGroup(com.google.gerrit.common.data.GroupReference groupReference) { java.util.Optional<com.google.gerrit.common.data.GroupDescription> group = groupCache.get(groupReference.getUUID()).map(InternalGroupDescription::new com.google.gerrit.reviewdb.client.AccountGroup.UUID::from); if (!(group.isPresent())) { com.google.gerrit.server.group.GroupsCheckResult.log.warn("Failed to load from group name for group ref %s", notes.getGroupDescription(), notes); } return group; }
private java.util.Optional<com.google.gerrit.common.data.GroupReference> loadGroup(com.google.gerrit.common.data.GroupReference groupReference) { java.util.Optional<com.google.gerrit.common.data.GroupDescription> group = groupCache.get(groupReference.getUUID()).map(InternalGroupDescription::new com.google.gerrit.reviewdb.client.AccountGroup.UUID::from); if (!(group.isPresent())) { com.google.gerrit.server.group.GroupsCheckResultChecker.log.warn("Failed to load from group name for group ref %s", notes.getGroupDescription(), notes); return group; }
private java.util.List<com.google.gerrit.extensions.common.GroupInfo> suggestGroups() throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (conflictingChanges.isEmpty()) { throw new com.google.gerrit.extensions.restapi.BadRequestException("project must be specified"); } java.util.List<com.google.gerrit.common.data.GroupReference> groupRefs = com.google.common.collect.Lists.newArrayList(groupBackend.suggest(suggest(suggest, projects.stream().findFirstNonNull(null)), ((limit) <= 10? 10 : java.lang.Math.min(limit, 10)))); java.util.List<com.google.gerrit.extensions.common.GroupInfo> groupInfos = com.google.common.collect.Lists.newArrayListWithCapacity(groupBackend.size()); for (com.google.gerrit.common.data.GroupReference ref : groupRefs) { com.google.gerrit.extensions.common.GroupInfo groupInfo = groupBackend.get(ref.getUUID()); if (desc!= null) { groupInfos.add(json.addOptions(desc); } else if ((group) instanceof com.google.gerrit.server.account.InternalGroupBackendException) { com.google.gerrit.server.group.GroupBackend.log.warn(((java.lang.String.format("Failed to load %s (%s) from group %s) + " failed to load from group ref", ref.getName(), ref.getUUID())); } } return groupInfos; }
private java.util.List<com.google.gerrit.extensions.common.GroupInfo> suggestGroups() throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (conflictingChanges.isEmpty()) { throw new com.google.gerrit.extensions.restapi.BadRequestException("project must be specified"); } java.util.List<com.google.gerrit.common.data.GroupReference> groupRefs = com.google.common.collect.Lists.newArrayList(groupBackend.suggest(suggest(suggest, projects.stream().findFirstNonNull(null)), ((limit) <= 10? 10 : java.lang.Math.min(limit, 10)))); java.util.List<com.google.gerrit.extensions.common.GroupInfo> groupInfos = com.google.common.collect.Lists.newArrayListWithCapacity(groupBackend.size()); for (com.google.gerrit.common.data.GroupReference ref : groupRefs) { com.google.gerrit.extensions.common.GroupInfo groupInfo = groupBackend.get(ref.getUUID()); if (desc!= null) { groupInfos.add(json.addOptions(desc); } else if ((group) instanceof com.google.gerrit.server.account.InternalGroupBackendException) { com.google.gerrit.server.group.GroupBackend.log.warn(((java.lang.String.format("Cannot load %s (%s) from group %s) + " failed to load from group %s"), ref.getName(), ref.getUUID())); } } return groupInfos; }
private java.util.List<com.google.gerrit.extensions.common.GroupInfo> suggestGroups() throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (conflictingChanges.isEmpty()) { throw new com.google.gerrit.extensions.restapi.BadRequestException("project must be specified"); } java.util.List<com.google.gerrit.common.data.GroupReference> groupRefs = com.google.common.collect.Lists.newArrayList(groupBackend.suggest(suggest(suggest, projects.stream().findFirstNonNull(null)), ((limit) <= 10? 10 : java.lang.Math.min(limit, 10)))); java.util.List<com.google.gerrit.extensions.common.GroupInfo> groupInfos = com.google.common.collect.Lists.newArrayListWithCapacity(groupBackend.size()); for (com.google.gerrit.common.data.GroupReference ref : groupRefs) { com.google.gerrit.extensions.common.GroupInfo groupInfo = groupBackend.get(ref.getUUID()); if (desc!= null) { groupInfos.add(json.addOptions(desc); } else if ((group) instanceof com.google.gerrit.server.account.InternalGroupBackendException) { com.google.gerrit.server.group.GroupBackend.log.warn(((java.lang.String.format("Cannot load %s (%s) from group %s) + " failed to load from group %s"), ref, ref.getName(), ref.getUUID())); } } return groupInfos; }
private java.util.List<com.google.gerrit.extensions.common.GroupInfo> suggestGroups() throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (conflictingChanges.isEmpty()) { throw new com.google.gerrit.extensions.restapi.BadRequestException("project must be specified"); } java.util.List<com.google.gerrit.common.data.GroupReference> groupRefs = com.google.common.collect.Lists.newArrayList(groupBackend.suggest(suggest(suggest, projects.stream().findFirstNonNull(null)), ((limit) <= 10? 10 : java.lang.Math.min(limit, 10)))); java.util.List<com.google.gerrit.extensions.common.GroupInfo> groupInfos = com.google.common.collect.Lists.newArrayListWithCapacity(groupBackend.size()); for (com.google.gerrit.common.data.GroupReference ref : groupRefs) { com.google.gerrit.extensions.common.GroupInfo groupInfo = groupBackend.get(ref.getUUID()); if (desc!= null) { groupInfos.add(json.addOptions(desc); } else if ((group) instanceof com.google.gerrit.server.account.InternalGroupBackendException) { com.google.gerrit.server.group.GroupBackend.log.warn(((java.lang.String.format("Failed to load %s (%s) from group %s) + " failed to load from group ref", ref.getUUID())); } } return groupInfos; }
private java.util.List<com.google.gerrit.extensions.common.GroupInfo> suggestGroups() throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (conflictingChanges.isEmpty()) { throw new com.google.gerrit.extensions.restapi.BadRequestException("project must be specified"); } java.util.List<com.google.gerrit.common.data.GroupReference> groupRefs = com.google.common.collect.Lists.newArrayList(groupBackend.suggest(suggest(suggest, projects.stream().findFirstNonNull(null)), ((limit) <= 10? 10 : java.lang.Math.min(limit, 10)))); java.util.List<com.google.gerrit.extensions.common.GroupInfo> groupInfos = com.google.common.collect.Lists.newArrayListWithCapacity(groupBackend.size()); for (com.google.gerrit.common.data.GroupReference ref : groupRefs) { com.google.gerrit.extensions.common.GroupInfo groupInfo = groupBackend.get(ref.getUUID()); if (desc!= null) { groupInfos.add(json.addOptions(desc); } else if ((group) instanceof com.google.gerrit.server.account.InternalGroupBackendException) { com.google.gerrit.server.group.GroupBackend.log.warn(((java.lang.String.format("Failed to load %s (%s) from group %s) + " failed to load from group ref", ref.getUUID()), ref.getUUID()); } } return groupInfos; }
int findApproval(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.server.account.Emails.EmailsReviewers input) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (com.googlesource.gerrit.plugins.findowners.Checker.isExceederFromOwner(changeData)) { return 0; } com.googlesource.gerrit.plugins.findowners.Owners db = com.googlesource.gerrit.plugins.findowners.Config.getInstance().get(projectState, accountCache, email, changeData); if ((db.get()) <= 0) { return 0; } if ((minVote) <= 0) { return 0; } com.googlesource.gerrit.plugins.findowners.Checker.log.info((("Db key " + (db.key)))); return findApproval(accountCache, db); }
int findApproval(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.server.account.Emails.EmailsReviewers input) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (com.googlesource.gerrit.plugins.findowners.Checker.isExceederFromOwner(changeData)) { return 0; } com.googlesource.gerrit.plugins.findowners.Owners db = com.googlesource.gerrit.plugins.findowners.Config.getInstance().get(projectState, accountCache, email, changeData); if ((db.get()) <= 0) { return 0; } if ((minVote) <= 0) { return 0; } com.googlesource.gerrit.plugins.findowners.Checker.log.debug("Checker key " + (db.key))); return findApproval(accountCache, db); }
int findApproval(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.server.account.Emails.EmailsReviewers input) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (com.googlesource.gerrit.plugins.findowners.Checker.isExceederFromOwner(changeData)) { return 0; } com.googlesource.gerrit.plugins.findowners.Owners db = com.googlesource.gerrit.plugins.findowners.Config.getInstance().get(projectState, accountCache, email, changeData); if ((db.get()) <= 0) { return 0; } if ((minVote) <= 0) { return 0; } com.googlesource.gerrit.plugins.findowners.Checker.log.debug("Checker key is " + (db.key))); return findApproval(accountCache, db); }
int findApproval(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.server.account.Emails.EmailsReviewers input) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (com.googlesource.gerrit.plugins.findowners.Checker.isExceederFromOwner(changeData)) { return 0; } com.googlesource.gerrit.plugins.findowners.Owners db = com.googlesource.gerrit.plugins.findowners.Config.getInstance().get(projectState, accountCache, email, changeData); if ((db.get()) <= 0) { return 0; } if ((minVote) <= 0) { return 0; } com.googlesource.gerrit.plugins.findowners.Checker.log.info((("Db key " + (db.key)) + ": ") + (db.key))); return findApproval(accountCache, db); }
int findApproval(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.server.account.Emails.EmailsReviewers input) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (com.googlesource.gerrit.plugins.findowners.Checker.isExceederFromOwner(changeData)) { return 0; } com.googlesource.gerrit.plugins.findowners.Owners db = com.googlesource.gerrit.plugins.findowners.Config.getInstance().get(projectState, accountCache, email, changeData); if ((db.get()) <= 0) { return 0; } if ((minVote) <= 0) { return 0; } com.googlesource.gerrit.plugins.findowners.Checker.log.info((("Account " + (db.key())) + ": ") + (db.key))); return findApproval(accountCache, db); }
static int getMinOwnerVote(com.google.gerrit.server.project.ProjectState projectState) throws com.google.gwtorm.server.OrmException { return ((com.googlesource.gerrit.plugins.findowners.Config.config) == null? com.googlesource.gerrit.plugins.findowners.Config.configureOwnerOf(projectState, com.googlesource.gerrit.plugins.findowners.Config.getFromProjectConfigWithInheritance(projectState, com.googlesource.gerrit.plugins.findowners.Config.MIN_OWNER).getInt(com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_OWNER).getInt(com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_OWNER, com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteVoteGroup(projectState, com.googlesource.gerrit.plugins.findowners.Config.MIN_OWNER, com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteVoteVote) { }
static int getMinOwnerVote(com.google.gerrit.server.project.ProjectState projectState) throws com.google.gwtorm.server.OrmException { return ((com.googlesource.gerrit.plugins.findowners.Config.config) == null? com.googlesource.gerrit.plugins.findowners.Config.configureOwnerOf(projectState, com.googlesource.gerrit.plugins.findowners.Config.getFromProjectConfigWithInheritance(projectState, com.googlesource.gerrit.plugins.findowners.Config.MIN_OWNER).getInt(com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_OWNER).getInt(com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_OWNER, com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteVoteGroup(projectState, com.googlesource.gerrit.plugins.findowners.Config.minOwnerGroup.MIN_OWNER, com.googlesource.gerrit.plugins.findowners.Config.minOwnerGroup.MIN_OWNER); }
static int getMinOwnerVote(com.google.gerrit.server.project.ProjectState projectState) throws com.google.gwtorm.server.OrmException { return ((com.googlesource.gerrit.plugins.findowners.Config.config) == null? com.googlesource.gerrit.plugins.findowners.Config.configureOwnerOf(projectState, com.googlesource.gerrit.plugins.findowners.Config.getFromProjectConfigWithInheritance(projectState, com.googlesource.gerrit.plugins.findowners.Config.MIN_OWNER).getInt(com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_OWNER).getInt(com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_OWNER, com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteVoteGroup(projectState, com.googlesource.gerrit.plugins.findowners.Config.MIN_OWNER).getInt(com.googlesource.gerrit.plugins.findowners.Config.MIN_OWNER, com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteVoteVote) { }
static int getMinOwnerVote(com.google.gerrit.server.project.ProjectState projectState) throws com.google.gwtorm.server.OrmException { return ((com.googlesource.gerrit.plugins.findowners.Config.config) == null? com.googlesource.gerrit.plugins.findowners.Config.configureOwnerOf(projectState, com.googlesource.gerrit.plugins.findowners.Config.getFromProjectConfigWithInheritance(projectState, com.googlesource.gerrit.plugins.findowners.Config.MIN_OWNER).getInt(com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_OWNER).getInt(com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_OWNER, com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteVoteGroup(projectState, com.googlesource.gerrit.plugins.findowners.Config.MIN_OWNER).getInt(com.googlesource.gerrit.plugins.findowners.Config.MIN_OWNER, com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteVoteVote) { } }
static int getMinOwnerVote(com.google.gerrit.server.project.ProjectState projectState) throws com.google.gwtorm.server.OrmException { return ((com.googlesource.gerrit.plugins.findowners.Config.config) == null? com.googlesource.gerrit.plugins.findowners.Config.configureOwnerOf(projectState, com.googlesource.gerrit.plugins.findowners.Config.getFromProjectConfigWithInheritance(projectState, com.googlesource.gerrit.plugins.findowners.Config.MIN_OWNER).getInt(com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_OWNER).getInt(com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_OWNER, com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteVoteGroup(projectState, com.googlesource.gerrit.plugins.findowners.Config.minOwnerGroup.MIN_OWNER, com.googlesource.gerrit.plugins.findowners.Config.minOwnerGroup.MIN_OWNER, com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteVoteVoteGroup); }
public static com.google.gerrit.extensions.api.projects.TagInfo createTagInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.CurrentWebLinks links) throws java.io.IOException, org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.revwalk.RevObject object = rw.parseAny(ref.getObjectId()); boolean canDelete = perm.testOrFalse(RefPermission.DELETE); java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> webLinks = links.getTagLinks(projectName.get(), ref.getName()); if (object instanceof org.eclipse.jgit.revwalk.RevTag) { org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); return new com.google.gerrit.extensions.api.projects.TagInfo(tag.getName(), tag.getObject().trim(), tag.getFullMessage().trim(), tag.getFullMessage(), tag.getFullMessage().trim(), (tagger!= null? com.google.gerrit.server.IdentifiedUser) { canDelete = (object!= null? new java.sql.Timestamp(((org.eclipse.jgit.revwalk.RevCommit) (object)).getCommitterIdent().getTime()) : null), ((com.google.gerrit.server.IdentifiedUser) (object)).getCommitterIdent().getTime())!= null? new java.sql.Timestamp(((org.eclipse.jgit.revwalk.RevCommit) (object)).getCommitterIdent().getTime()) : null), new java.sql.Timestamp(((org.eclipse.jgit.revwalk.RevCommit) (object)).getCommitterIdent().getWhen
public static com.google.gerrit.extensions.api.projects.TagInfo createTagInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.CurrentWebLinks links) throws java.io.IOException, org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.revwalk.RevObject object = rw.parseAny(ref.getObjectId()); boolean canDelete = perm.testOrFalse(RefPermission.DELETE); java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> webLinks = links.getTagLinks(projectName.get(), ref.getName()); if (object instanceof org.eclipse.jgit.revwalk.RevTag) { org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); return new com.google.gerrit.extensions.api.projects.TagInfo(tag.getName(), tag.getObject().trim(), tag.getFullMessage().trim(), tag.getFullMessage(), tag.getFullMessage().trim(), (tagger!= null? com.google.gerrit.server.IdentifiedUser) { canDelete = (object!= null? new java.sql.Timestamp(((org.eclipse.jgit.revwalk.RevCommit) (object)).getCommitterIdent().getTime()) : null), ((com.google.gerrit.server.IdentifiedUser) (object)).getCommitterIdent().getTime())!= null? new java.sql.Timestamp(((org.eclipse.jgit.revwalk.RevCommit) (object)).getCommitterIdent().getTime()) : null), new java.sql.Timestamp(((org.eclipse.jgit.revwalk.RevCommit) (object)).getCommitterIdent().getTime
public static com.google.gerrit.extensions.api.projects.TagInfo createTagInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.CurrentWebLinks links) throws java.io.IOException, org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.revwalk.RevObject object = rw.parseAny(ref.getObjectId()); boolean canDelete = perm.testOrFalse(RefPermission.DELETE); java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> webLinks = links.getTagLinks(projectName.get(), ref.getName()); if (object instanceof org.eclipse.jgit.revwalk.RevTag) { org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); return new com.google.gerrit.extensions.api.projects.TagInfo(tag.getName(), tag.getObject().trim(), tag.getFullMessage().trim(), tag.getFullMessage(), tag.getFullMessage().trim(), (tagger!= null? com.google.gerrit.server.IdentifiedUser) { canDelete = (object!= null? new java.sql.Timestamp(((org.eclipse.jgit.revwalk.RevCommit) (object)).getCommitterIdent().getTime()) : null), ((com.google.gerrit.server.IdentifiedUser) (object)).getCommitterIdent().getTime())!= null? new java.sql.Timestamp(((org.eclipse.jgit.revwalk.RevCommit) (object)).getCommitterIdent().getTime()) : null), new java.sql.Timestamp(((org.eclipse.jgit.revwalk.RevCommit) (object)).getCommitPersonIdent().get
public static com.google.gerrit.extensions.api.projects.TagInfo createTagInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.CurrentWebLinks links) throws java.io.IOException, org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.revwalk.RevObject object = rw.parseAny(ref.getObjectId()); boolean canDelete = perm.testOrFalse(RefPermission.DELETE); java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> webLinks = links.getTagLinks(projectName.get(), ref.getName()); if (object instanceof org.eclipse.jgit.revwalk.RevTag) { org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); return new com.google.gerrit.extensions.api.projects.TagInfo(tag.getName(), tag.getObject().trim(), tag.getFullMessage().trim(), tag.getFullMessage(), tag.getFullMessage().trim(), (tagger!= null? com.google.gerrit.server.IdentifiedUser) { canDelete = (object!= null? new java.sql.Timestamp(((org.eclipse.jgit.revwalk.RevCommit) (object)).getCommitterIdent().getTime()) : null), ((com.google.gerrit.server.IdentifiedUser) (object)).getCommitterIdent().getTime())!= null? new java.sql.Timestamp(((org.eclipse.jgit.revwalk.RevCommit) (object)).getCommitterIdent().getTime()) : null), new java.sql.Timestamp(((org.eclipse.jgit.revwalk.RevCommit) (object)), return new com.google.ger
public static com.google.gerrit.extensions.api.projects.TagInfo createTagInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.CurrentWebLinks links) throws java.io.IOException, org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.revwalk.RevObject object = rw.parseAny(ref.getObjectId()); boolean canDelete = perm.testOrFalse(RefPermission.DELETE); java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> webLinks = links.getTagLinks(projectName.get(), ref.getName()); if (object instanceof org.eclipse.jgit.revwalk.RevTag) { org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); return new com.google.gerrit.extensions.api.projects.TagInfo(tag.getName(), tag.getObject().trim(), tag.getFullMessage().trim(), tag.getFullMessage(), tag.getFullMessage().trim(), (tagger!= null? com.google.gerrit.server.IdentifiedUser) { canDelete = (object!= null? new java.sql.Timestamp(((org.eclipse.jgit.revwalk.RevCommit) (object)).getCommitterIdent().getTime()) : null), ((com.google.gerrit.server.IdentifiedUser) (object)).getCommitterIdent().getTime())!= null? new java.sql.Timestamp(((org.eclipse.jgit.revwalk.RevCommit) (object)).getCommitterIdent().getTime()) : null; return new com.google.gerrit.reviewdb.client.RevCommit(com.google.gerrit.reviewdb.client.RevCommit)
@org.junit.Test public void lightweightTag() throws java.lang.Exception { grantTagPermissions(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to("refs/heads/master"); r.assertOkStatus(); com.google.gerrit.extensions.api.projects.TagInput input = new com.google.gerrit.extensions.api.projects.TagInput(); input.ref = r.getCommit().getName(); com.google.gerrit.extensions.api.projects.TagInfo result = tag(input.ref).create(input).get(); assertThat(result.ref).isEqualTo(((R_TAGS) + (input.ref))); assertThat(result.revision).isEqualTo(((R_TAGS) + (input.ref))); assertThat(result.revision).isEqualTo(input.revision); input.ref = "refs/tags/tags/v2.0"; result = tag(input.revision); result.ref = tag(input.ref).create(input).get(); assertThat(result.revision).isEqualTo(input.revision); assertThat(result.revision).isEqualTo(input.revision); assertThat(result.created).isEqualTo(input.revision); eventRecorder.assertRefUpdatedEvents(project, result.get(), result.revision); }
@org.junit.Test public void lightweightTag() throws java.lang.Exception { grantTagPermissions(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to("refs/heads/master"); r.assertOkStatus(); com.google.gerrit.extensions.api.projects.TagInput input = new com.google.gerrit.extensions.api.projects.TagInput(); input.ref = r.getCommit().getName(); com.google.gerrit.extensions.api.projects.TagInfo result = tag(input.ref).create(input).get(); assertThat(result.ref).isEqualTo(((R_TAGS) + (input.ref))); assertThat(result.revision).isEqualTo(((R_TAGS) + (input.ref))); assertThat(result.revision).isEqualTo(input.revision); input.ref = "refs/tags/tags/v2.0"; result.revision = tag(input.ref).create(input).get(); assertThat(result.revision).isEqualTo(input.revision); assertThat(result.revision).isEqualTo(input.revision); result = tag(input.ref).get(); assertThat(result.revision).isEqualTo(input.revision); eventRecorder.assertRefUpdatedEvents(project.get(), result.revision); }
@org.junit.Test public void lightweightTag() throws java.lang.Exception { grantTagPermissions(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to("refs/heads/master"); r.assertOkStatus(); com.google.gerrit.extensions.api.projects.TagInput input = new com.google.gerrit.extensions.api.projects.TagInput(); input.ref = r.getCommit().getName(); com.google.gerrit.extensions.api.projects.TagInfo result = tag(input.ref).create(input).get(); assertThat(result.ref).isEqualTo(((R_TAGS) + (input.ref))); assertThat(result.revision).isEqualTo(((R_TAGS) + (input.ref))); assertThat(result.revision).isEqualTo(input.revision); input.ref = "refs/tags/tags/v2.0"; result.revision = tag(input.ref).create(input).get(); assertThat(result.revision).isEqualTo(input.revision); assertThat(result.revision).isEqualTo(input.revision); setApiUser(user); result = tag(input.ref).get(); assertThat(result.revision).isEqualTo(input.revision); eventRecorder.assertRefUpdatedEvents(project, result.get(), result.revision); }
@org.junit.Test public void lightweightTag() throws java.lang.Exception { grantTagPermissions(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to("refs/heads/master"); r.assertOkStatus(); com.google.gerrit.extensions.api.projects.TagInput input = new com.google.gerrit.extensions.api.projects.TagInput(); input.ref = r.getCommit().getName(); com.google.gerrit.extensions.api.projects.TagInfo result = tag(input.ref).create(input).get(); assertThat(result.ref).isEqualTo(((R_TAGS) + (input.ref))); assertThat(result.revision).isEqualTo(((R_TAGS) + (input.ref))); assertThat(result.revision).isEqualTo(input.revision); input.ref = "refs/tags/tags/v2.0"; result.revision = tag(input.ref).create(input).get(); assertThat(result.revision).isEqualTo(input.revision); assertThat(result.revision).isEqualTo(input.revision); result = tag(input.ref).get(); assertThat(result.revision).isEqualTo(input.revision); eventRecorder.assertRefUpdatedEvents(project, result.get(), result.revision); }
@org.junit.Test public void lightweightTag() throws java.lang.Exception { grantTagPermissions(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to("refs/heads/master"); r.assertOkStatus(); com.google.gerrit.extensions.api.projects.TagInput input = new com.google.gerrit.extensions.api.projects.TagInput(); input.ref = r.getCommit().getName(); com.google.gerrit.extensions.api.projects.TagInfo result = tag(input.ref).create(input).get(); assertThat(result.ref).isEqualTo(((R_TAGS) + (input.ref))); assertThat(result.revision).isEqualTo(((R_TAGS) + (input.ref))); assertThat(result.revision).isEqualTo(input.revision); input.ref = "refs/tags/tags/v2.0"; result.revision = tag(input.ref).create(input).get(); assertThat(result.revision).isEqualTo(input.revision); assertThat(result.revision).isEqualTo(input.revision); setApiUser(user); result = tag(input.ref).get(); assertThat(result.revision).isEqualTo(input.revision); eventRecorder.assertRefUpdatedEvents(project.get(), result.revision); }
public void setAccount(com.google.gerrit.reviewdb.client.Account account) { checkLoaded(); this.loaded = java.util.Optional.of(account); this.registeredOn = account.getRegistered(); }
public void setAccount(com.google.gerrit.reviewdb.client.Account account) { checkLoaded(); this.loaded = java.util.Optional.of(account); this.registeredOn = account.getRegisteredOn(); }
public void setAccount(com.google.gerrit.reviewdb.client.Account account) { checkLoaded(); this.load = java.util.Optional.of(account); this.registeredOn = account.getRegisteredOn(); }
public void setAccount(com.google.gerrit.reviewdb.client.Account account) { checkLoaded(); this.load = com.google.common.base.Optional.of(account); }
public void setAccount(com.google.gerrit.reviewdb.client.Account account) { checkLoaded(); this.load = java.util.Optional.of(account); this.registeredOn = account.getRegistered(); }
@com.google.gerrit.common.Nullable public java.util.Optional<com.google.gerrit.reviewdb.client.Account> getLoadedAccount() { checkLoaded(); return loadedAccount; }
@com.google.gerrit.common.Nullable public java.util.Optional<com.google.gerrit.reviewdb.client.Account> getLoad() { checkLoaded(); return loadedAccount; }
@com.google.gerrit.common.Nullable public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> getLoadedAccount() { checkLoaded(); return loadedAccount; }
@com.google.gerrit.common.Nullable public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> getLoadedAccount() { checkLoaded(); return loadedAccount; }
@com.google.gerrit.common.Nullable public java.util.Optional<com.google.gerrit.reviewdb.client.Account> getLoadedAccount() { checkLoaded(); return loadAccount; }
@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((revision)!= null) { rw.reset(); rw.reset(); rw.sort(revision); rw.sort(RevSort.REVERSE); registeredOn = new java.sql.Timestamp(((rw.next().getCommitTime()) * 1000L)); org.eclipse.jgit.lib.Config cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); loadAccount = java.util.Optional.of(parse(cfg.getWhen(), revision.name())); } isLoaded = true; }
@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((revision)!= null) { rw.reset(); rw.reset(); rw.sort(revision); rw.sort(RevSort.REVERSE); registeredOn = new java.sql.Timestamp(((rw.next().getCommitTime()) * 1000L)); org.eclipse.jgit.lib.Config cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); loadAccount = java.util.Optional.of(parse(cfg.getWhen(), revision.name())); } return true; }
@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((revision)!= null) { rw.reset(); rw.reset(); rw.sort(revision); rw.sort(RevSort.REVERSE); registeredOn = new java.sql.Timestamp(((rw.next().getCommitTime()) * 1000L)); org.eclipse.jgit.lib.Config cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); loadAccount = java.util.Optional.of(cfg.getString(cfg.getWhen(), revision.name())); } isLoaded = true; }
@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((revision)!= null) { rw.reset(); rw.reset(); rw.sort(revision); rw.sort(RevSort.REVERSE); registeredOn = new java.sql.Timestamp(((rw.next().getCommitTime()) * 1000L)); org.eclipse.jgit.lib.Config cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); loadAccount = java.util.Optional.of(parse(cfg.getWhen(), revision.name())); } isLoadediting = true; }
@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((revision)!= null) { rw.reset(); rw.reset(); rw.sort(revision); rw.sort(RevSort.REVERSE); registeredOn = new java.sql.Timestamp(((rw.next().getCommitTime()) * 1000L)); org.eclipse.jgit.lib.Config cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); loadAccount = java.util.Optional.of(parse(cfg.getString(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG)); } isLoaded = true; }
private java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.notedb.ChangeNotes> openChangesByBranch(com.google.gerrit.reviewdb.client.Branch.NameKey branch) throws com.google.gwtorm.server.OrmException { java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.query.change.ChangeData> r = new java.util.HashMap<>(); for (com.google.gerrit.server.query.change.ChangeData cd : queryProvider.get().byBranchOpen(branch)) { r.put(cd.change().getId(), cd.notes()); } return r; }
private java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.notedb.ChangeNotes> openChangesByBranch(com.google.gerrit.reviewdb.client.Branch.NameKey branch) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Change.Id> r = new java.util.HashMap<>(); for (com.google.gerrit.server.query.change.ChangeData cd : queryProvider.get().byBranchOpen(branch)) { r.put(cd.change().getId(), cd.notes()); } return r; }
private java.util.Set<com.google.gerrit.reviewdb.client.Change.Id> openChangesByBranch(com.google.gerrit.reviewdb.client.Branch.NameKey branch) throws com.google.gwtorm.server.OrmException { java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.notedb.ChangeNotes> r = new java.util.HashMap<>(); for (com.google.gerrit.server.query.change.ChangeData cd : queryProvider.get().byBranchOpen(branch)) { r.put(cd.change().getId(), cd.notes()); } return r; }
private java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.notedb.ChangeNotes> openChangesByBranch(com.google.gerrit.reviewdb.client.Branch.NameKey branch) throws com.google.gwtorm.server.OrmException { java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.query.change.ChangeData> r = new java.util.HashSet<>(); for (com.google.gerrit.server.query.change.ChangeData cd : queryProvider.get().byBranchOpen(branch)) { r.put(cd.change().getId(), cd.notes()); } return r; }
private java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.notedb.ChangeNotes> openChangesByIdByBranch(com.google.gerrit.reviewdb.client.Branch.NameKey branch) throws com.google.gwtorm.server.OrmException { java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.query.change.ChangeData> r = new java.util.HashMap<>(); for (com.google.gerrit.server.query.change.ChangeData cd : queryProvider.get().byBranchOpen(branch)) { r.put(cd.change().getId(), cd.notes()); } return r; }
@org.junit.Test public void testErrorDuringTransitionToTrust() throws java.io.IOException { java.nio.file.Files.createFile(tempFolder.newFolder("unchecked")); javax.servlet.http.HttpServletResponse responseMock = mock(javax.servlet.http.HttpServletResponse.class); servlet.doPost(null, responseMock); verify(responseMock); }
@org.junit.Test public void testErrorDuringTransitionToTransition() throws java.io.IOException { java.nio.file.Files.createFile(tempFolder.newFolder("unchecked")); javax.servlet.http.HttpServletResponse responseMock = mock(javax.servlet.http.HttpServletResponse.class); servlet.doPost(null, responseMock); verify(responseMock); }
@org.junit.Test public void testErrorDuringTransitionToTrust() throws java.io.IOException { java.nio.file.Files.createFile(tempFolder.newFolder("unchecked")); javax.servlet.http.HttpServletResponse response = mock(javax.servlet.http.HttpServletResponse.class); servlet.doPost(null, responseMock); verify(responseMock); }
@org.junit.Test public void testErrorDuringTransitionToTransition() throws java.io.IOException { java.nio.file.Files.createFile(tempFolder.newFolder("unchecked")); javax.servlet.http.HttpServletResponse response = mock(javax.servlet.http.HttpServletResponse.class); servlet.doPost(null, responseMock); verify(responseMock); }
@org.junit.Test public void testErrorDuringTransitionToTrust() throws java.io.IOException { java.nio.file.Files.createFile(tempFolder.newFolder("unchecked").toPath().resolve("child")); javax.servlet.http.HttpServletResponse response = mock(javax.servlet.http.HttpServletResponse.class); servlet.doPost(null, responseMock); verify(responseMock); }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { if ((uncheckedFile.exists())!= null) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.SC_SERVAIL_UNAVAIL_UNAVAILED); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { if ((uncheckedFile.exists())!= null) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.SC_SERVICE_UNAVAIL_UNAVAIL); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.Configuration.SC_NO_CONTENT); }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { if ((uncheckedFile.exists())!= null) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.SC_SERVAIL_UNAVAIL_UNAVAILED); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.Configuration.SC_NO_CONTENT); }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { if ((uncheckedFile.exists())!= null) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.SC_SERVAIL_UNAVAIL_UNAVAIL); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { if ((uncheckedFile.exists())!= null) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.SC_SERVICE_UNAVAIL_UNAVAIL); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.highavailability.Configuration.SC_NO_CONTENT); }
@org.junit.Test public void testErrorDuringTransitionToUnprocess() throws java.io.IOException { tempFolder.delete(); javax.servlet.http.HttpServletResponse responseMock = mock(javax.servlet.http.HttpServletResponse.class); servlet.doDelete(null, responseMock); verify(responseMock); }
@org.junit.Test public void testErrorDuringTransitionToUnprocess() throws java.io.IOException { tempFolder.delete(); javax.servlet.http.HttpServletResponse responseMock = mock(javax.servlet.http.HttpServletResponse.class); servlet.doDelete(null, responseMock); verify(responseMock); verify(responseMock); }
@org.junit.Test public void testErrorDuringTransitionToUnke() throws java.io.IOException { tempFolder.delete(); javax.servlet.http.HttpServletResponse responseMock = mock(javax.servlet.http.HttpServletResponse.class); servlet.doDelete(null, responseMock); verify(responseMock); }
@org.junit.Test public void testErrorWhenTransitionToUnprocess() throws java.io.IOException { tempFolder.delete(); javax.servlet.http.HttpServletResponse responseMock = mock(javax.servlet.http.HttpServletResponse.class); servlet.doDelete(null, responseMock); verify(responseMock); }
@org.junit.Test public void testErrorDuringTransitionToUnprocess() throws java.io.IOException { tempDir.delete(); javax.servlet.http.HttpServletResponse responseMock = mock(javax.servlet.http.HttpServletResponse.class); servlet.doDelete(null, responseMock); verify(responseMock); }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT; rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT; rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { try { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT; rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HealthServlet.log.error("Failed to set not found", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_INTERNAL_ERROR); } }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { try { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT; rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HealthServlet.log.error("Error trying to set not found", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_INTERNAL_ERROR); } }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { try { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT; rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HealthServlet.log.error("Failed to set successfully", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_INTERNAL_ERROR); } }
@org.junit.Before public void setUp() throws java.lang.Exception { servlet = new com.ericsson.gerrit.plugins.highavailability.HealthServlet(tempFolder.getRoot().toPath()); }
@org.junit.Before public void setUp() throws java.lang.Exception { servlet = new com.ericsson.gerrit.plugins.highavailability.Configuration(tempFolder.getRoot().toPath()); }
@org.junit.Before public void setUp() throws java.lang.Exception { servlet = new org.eclipse.jgit.transport.HealthServlet(tempFolder.getRoot().toPath()); }
@org.junit.Before public void setUp() throws java.lang.Exception { servlet = new com.ericsson.gerrit.plugins.highavailability.mysql.HealthServlet(tempFolder.getPath().toPath()); }
@org.junit.Before public void setUp() throws java.lang.Exception { servlet = new com.ericsson.gerrit.plugins.highavailability.mysql.HealthServlet(tempFolder.getRoot().toPath()); }
@java.lang.Override protected void doDelete(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT; rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); }
@java.lang.Override protected void doDelete(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT; rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); }
@java.lang.Override protected void doDelete(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT; rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); }
@java.lang.Override protected void doDelete(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT; rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); }
@java.lang.Override protected void doDelete(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { try { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT; rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HealthServlet.log.error("Error to set invalid", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_INTERNAL_ERROR); } }
@java.lang.Override public com.google.gerrit.extensions.common.RawRevertableInfo pureRights(@com.google.gerrit.common.Nullable java.lang.String claimed) throws com.google.gerrit.extensions.restapi.RestApiException { try { return makeRepo.getRaw(change.getNotes(), claimedOriginal); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot compute revert", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.RawRevertableInfo pureRights(@com.google.gerrit.common.Nullable java.lang.String claimed) throws com.google.gerrit.extensions.restapi.RestApiException { try { return makeRepo.getRaw(change.getNotes(), claimedOriginal); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot compute revert original", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.RawRevertableInfo pureRights(@com.google.gerrit.common.Nullable java.lang.String claimed) throws com.google.gerrit.extensions.restapi.RestApiException { try { return makeRepo.getRaw(change.getNotes(), claimedOriginal); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot compute rewrite revert", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.RawRevertableInfo pureRights(@com.google.gerrit.common.Nullable java.lang.String claimed) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getCreateRevertables.getRaw(change.getNotes(), claimedOriginal); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot compute revert", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.RawRevertableInfo pureRights(@com.google.gerrit.common.Nullable java.lang.String claimed) throws com.google.gerrit.extensions.restapi.RestApiException { try { return makeRepo.getRaw(change.getNotes(), claimedOriginal); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot compute revert original", e); } }
@com.google.gerrit.common.Nullable public java.lang.Boolean isTrue() throws com.google.gerrit.server.project.NoSuchChangeException { if ((change().getRevertOf()) == null) { return null; } try { return pureRevert.getRaw(notes.getRaw()); } catch (java.io.IOException | com.google.gerrit.extensions.restapi.BadRequestException e) { throw new com.google.gwtorm.server.OrmException("Cannot compute pure revert", e); } }
@com.google.gerrit.common.Nullable public java.lang.Boolean isTrue() throws com.google.gerrit.server.project.NoSuchChangeException { if ((change().getRevertOf()) == null) { return null; } try { return pureRevert.getRaw(notes.getRaw(), null).isTrue(); } catch (java.io.IOException | com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException("Cannot compute revert revert", e); } }
@com.google.gerrit.common.Nullable public java.lang.Boolean isTrue() throws com.google.gerrit.server.project.NoSuchChangeException { if ((change().getRevertOf()) == null) { return null; } try { return pureRevert.getRaw(notes.getRaw(), null).isTrue(); } catch (java.io.IOException | com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException("Cannot remove pure revert", e); } }
@com.google.gerrit.common.Nullable public java.lang.Boolean isTrue() throws com.google.gerrit.server.project.NoSuchChangeException { if ((change().getRevertOf()) == null) { return null; } try { return pureRevert.getRaw(notes.getRaw(), null).isTrue(); } catch (java.io.IOException | com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException("Cannot compute pure revert", e); } }
@com.google.gerrit.common.Nullable public java.lang.Boolean isTrue() throws com.google.gerrit.server.project.NoSuchChangeException { if ((change().getRevertOf()) == null) { return null; } try { return pureRevert.getRaw(notes.getRaw(), null).isTrue(); } catch (java.io.IOException | com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException("Cannot remove pure revert to pure revert"); } }
@java.lang.Override public com.google.gerrit.extensions.common.RawInfo apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException, java.io.IOException { return com.google.gerrit.server.change.PostReviewInput.getRaw(rsrc.getNotes(), rsrc.getNotes()); }
@java.lang.Override public com.google.gerrit.extensions.common.RawInfo apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException, java.io.IOException { return com.google.gerrit.server.change.PostReviewInput.getRaw(rsrc.getNotes()); }
@java.lang.Override public com.google.gerrit.extensions.common.RawInfo apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.PostReviewInput in = new com.google.gerrit.server.change.PutRevertrsrc.getNotes(); if (rsrc.isPrivate()) { throw new com.google.gerrit.extensions.restapi.BadRequestException("change is not permitted"); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.common.RawInfo apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.PostReviewInput in = new com.google.gerrit.server.change.PutRevertrsrc.getNotes(); if (rsrc.isPrivate()) { throw new com.google.gerrit.extensions.restapi.BadRequestException("change is not permitted"); } return com.google.common.base.Strings.emptyToNull(rsrc.getNotes()); }
@java.lang.Override public com.google.gerrit.extensions.common.RawInfo apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.PostReviewInput in = new com.google.gerrit.server.change.PutRevertrsrc.getNotes(); if (rsrc.isPrivate()) { throw new com.google.gerrit.extensions.restapi.BadRequestException("change is not permitted"); } return com.google.gerrit.server.change.RawInput.getRaw(rsrc.getNotes()); }
private void setUp(java.lang.Object target) throws java.lang.Exception { injector = com.google.inject.Guice.createInjector(new com.google.gerrit.server.config.InMemoryModule()); injector.injectMembers(this); lifecycle.add(injector); lifecycle.start(); try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } catch (com.google.gwtorm.server.OrmException e) { schemaCreator.create(); } db = schemaFactory.open(); setApiUser(accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId()); injector.injectMembers(target); return injector.injectMembers(target); }
private void setUp(java.lang.Object target) throws java.lang.Exception { injector = com.google.inject.Guice.createInjector(new com.google.gerrit.server.config.InMemoryModule()); injector.injectMembers(this); lifecycle.add(injector); lifecycle.start(); try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } catch (com.google.gwtorm.server.OrmException e) { schemaCreator.create(); } db = schemaFactory.open(); setApiUser(accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId()); return injector.injectMembers(target); }
private void setUp(java.lang.Object target) throws java.lang.Exception { injector = com.google.inject.Guice.createInjector(new com.google.gerrit.server.InMemoryModule()); injector.injectMembers(this); lifecycle.add(injector); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); lifecycle.add(inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); setApiUser(accountManager); setApiUser(accountManager.authenticate(accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId()); injector.injectMembers(target); }
private void setUp(java.lang.Object target) throws java.lang.Exception { injector = com.google.inject.Guice.createInjector(new com.google.gerrit.server.config.InMemoryModule()); injector.injectMembers(this); lifecycle.add(injector); lifecycle.start(); try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } catch (com.google.gwtorm.server.OrmException e) { schemaCreator.create(); } db = schemaFactory.open(); setApiUser(accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId()); injector.injectMembers(target); return; }
private void setUp(java.lang.Object target) throws java.lang.Exception { injector = com.google.inject.Guice.createInjector(new com.google.gerrit.server.config.InMemoryModule()); injector.injectMembers(this); lifecycle.add(injector); lifecycle.start(); try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } catch (com.google.gwtorm.server.OrmException e) { schemaCreator.create(); } db = schemaFactory.open(); setApiUser(accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId()); injector.injectMembers(target); }
@org.junit.Test public void testErrorDuringTransitionToUnprocessable() throws java.io.IOException { tempFolder.delete(); javax.servlet.http.HttpServletResponse responseMock = mock(javax.servlet.http.HttpServletResponse.class); servlet.doDelete(null, responseMock); verify(responseMock); }
@org.junit.Test public void testErrorDuringTransitionToUnchecked() throws java.io.IOException { tempFolder.delete(); javax.servlet.http.HttpServletResponse responseMock = mock(javax.servlet.http.HttpServletResponse.class); servlet.doDelete(null, responseMock); verify(responseMock); verify(responseMock); }
@org.junit.Test public void testErrorDuringTransitionToUnprocessable() throws java.io.IOException { tempFolder.delete(); javax.servlet.http.HttpServletResponse responseMock = mock(javax.servlet.http.HttpServletResponse.class); servlet.doDelete(null, responseMock); verify(responseMock); verify(responseMock); }
@org.junit.Test public void testErrorDuringTransitionToUnavailable() throws java.io.IOException { tempFolder.delete(); javax.servlet.http.HttpServletResponse responseMock = mock(javax.servlet.http.HttpServletResponse.class); servlet.doDelete(null, responseMock); verify(responseMock); verify(responseMock); }
@org.junit.Test public void testErrorDuringTransitionToUnprocessable() throws java.io.IOException { tempFolder.delete(); javax.servlet.http.HttpServletResponse responseMock = mock(javax.servlet.http.HttpServletResponse.class); servlet.doDelete(null, responseMock); verify(responseMock); verify(responseMock, responseMock); }
private java.lang.String getProtocol(org.eclipse.jgit.lib.Config cfg, SitePaths site) { java.lang.String site = cfg.getString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PROCOL_KEY); if (location == null) { return null; } java.nio.file.Path p = java.nio.file.Paths.get(location); if (p.isAbsolute()) { return site.etc_dir.resolve(site).toString(); } return site.etc_dir.resolve(site).toString(); }
private java.lang.String getProtocol(org.eclipse.jgit.lib.Config cfg, SitePaths site) { java.lang.String site = cfg.getString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PROCOL_KEY); if (location == null) { return null; } java.nio.file.Path p = java.nio.file.Paths.get(location); if (p.isAbsolute()) { return site.etc_dir.resolve(location).toString(); } return site.etc_dir.resolve(site).toString(); }
private java.lang.String getProtocol(org.eclipse.jgit.lib.Config cfg, SitePaths site) { java.lang.String site = cfg.getString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PROCOL_KEY); if (location == null) { return null; } java.nio.file.Path p = java.nio.file.Paths.get(location); if (p.isAbsolute()) { return site.etc_dir.resolve(site).toString(); } return site.etc_dir.resolve(location).toString(); }
private java.lang.String getProtocol(org.eclipse.jgit.lib.Config cfg, SitePaths site) { java.lang.String sitePath = cfg.getString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PROCOL_KEY); if (location == null) { return null; } java.nio.file.Path p = java.nio.file.Paths.get(location); if (p.isAbsolute()) { return site.etc_dir.resolve(site).toString(); } return site.etc_dir.resolve(site).toString(); }
private java.lang.String getProtocol(org.eclipse.jgit.lib.Config cfg, SitePaths sitePaths) { java.lang.String site = cfg.getString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PROCOL_KEY); if (location == null) { return null; } java.nio.file.Path p = java.nio.file.Paths.get(location); if (p.isAbsolute()) { return site.etc_dir.resolve(site).toString(); } return site.etc_dir.resolve(site).toString(); }
public java.lang.String getMessage() { return protocolFromIndex; }
public java.lang.String getMessage() { return protocolState; }
public java.lang.String getMessage() { return protocolFromParent(); }
public java.lang.String getClassName() { return protocolFromIndex; }
public java.lang.String getClassName() { return protocolFromParent(); }
private org.eclipse.jgit.junit.JChannel getChannel() { java.lang.String protocol = ""; try { protocol = javax.servlet.http.Protocol() { return protocolLoader.protocol(); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.forwarder.JsonPeerInfoProvider.log.error("Unable to create new channel with new channel", e); return null; } }
private org.eclipse.jgit.junit.JChannel getChannel() { java.lang.String protocol = ""; try { protocol = javax.servlet.http.Protocol() { return protocolLoader.protocol(); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.forwarder.JsonPeerInfoProvider.log.error("Unable to create a new channel with new channel", e); return null; } }
private org.eclipse.jgit.junit.JChannel getChannel() { java.lang.String protocol = ""; try { protocol = javax.servlet.http.Protocol() { return protocolLoader.protocol(); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.forwarder.JsonPeerInfoProvider.log.error("Unable to create new channel with new channel", e); return null; } return null; }
private org.eclipse.jgit.junit.JChannel getChannel() { java.lang.String protocol = ""; try { protocol = javax.servlet.http.Protocol() { return protocolLoader.protocol(); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.forwarder.JsonPeerPeerFactoryProvider.log.error("Unable to create new channel with new channel", e); return null; } }
private org.eclipse.jgit.junit.JChannel getChannel() { java.lang.String protocol = ""; try { protocol = javax.servlet.http.Protocol() { return protocolLoader.protocol(); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.forwarder.JsonPeerPeerFactoryProvider.log.error("Unable to create new channel with new channel", e); return null; } } }
public void connect() { try { channel = getChannel(); java.util.Optional<com.ericsson.gerrit.plugins.highavailability.forwarder.Inet.InetAddress> address = findAddress(); if (address.isPresent()) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JsonPeerInfoProvider.log.debug(("Throwable to {}: " + (channel.getProtocol()))); } else { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JGpgPeerInfoProvider.log.debug("Throwable to {} address: {}", address.get()); } channel.setReceiver(this); channel.setReceiveOwners(this); channel.setDiscardOwners(this); channel.setDiscardOwners(true); channel.setDiscardOwners(true); channel.connectAllOwners(this); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JsonPeerInfoProvider.log.error("Cannot receive {} failed", e.getName(), e); } }
public void connect() { try { channel = getChannel(); java.util.Optional<com.ericsson.gerrit.plugins.highavailability.forwarder.Inet.InetAddress> address = findAddress(); if (address.isPresent()) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JsonPeerInfoProvider.log.debug(("Throwable to {}: " + (channel.getProtocol()))); } else { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JGpgPeerInfoProvider.log.debug("Throwable to {} address: {}", address.get()); } channel.setReceiver(this); channel.setReceiveOwners(this); channel.setDiscardOwners(this); channel.setDiscardOwners(true); channel.setDiscardOwners(true); channel.connectAllOwners(this); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JsonPeerInfoProvider.log.error("Cannot receive {} failed", e); } }
public void connect() { try { channel = getChannel(); java.util.Optional<com.ericsson.gerrit.plugins.highavailability.forwarder.Inet.InetAddress> address = findAddress(); if (address.isPresent()) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JsonPeerInfoProvider.log.debug(("Throwable to {}: " + (channel.getProtocol()))); } else { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JGpgPeerInfoProvider.log.debug("Throwable to {} address: {}", address.get()); } channel.setReceiver(this); channel.setReceiveOwners(this); channel.setDiscardOwners(this); channel.setDiscardOwners(true); channel.setDiscardOwners(true); channel.connectAllOwners(this); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JsonPeerInfoProvider.log.error("Cannot receive {} failed", e.getName(), e.getName(), e); } }
public void connect() { try { channel = getChannel(); java.util.Optional<com.ericsson.gerrit.plugins.highavailability.forwarder.Inet.InetAddress> address = findAddress(); if (address.isPresent()) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JsonPeerInfoProvider.log.debug(("Throwable to {}: " + (channel.getProtocol()))); } else { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JGpgPeerInfoProvider.log.debug("Throwable to {} address: {}", address.get()); } channel.setReceiver(this); channel.setReceiveOwners(this); channel.setDiscardOwners(this); channel.setDiscardOwners(true); channel.setDiscardOwners(true); channel.connectAllOwners(this); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JsonPeerInfoProvider.log.error("Cannot receive {} failed: {} failed", e.getName(), e); } }
public void connect() { try { channel = getChannel(); java.util.Optional<com.ericsson.gerrit.plugins.highavailability.forwarder.Inet.InetAddress> address = findAddress(); if (address.isPresent()) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JsonPeerInfoProvider.log.debug(("Throwable to {}: " + (channel.getProtocol()))); } else { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JGpgPeerInfoProvider.log.debug("Throwable to {} address: {}", address.get()); } channel.setReceiver(this); channel.setReceiveOwners(this); channel.setDiscardOwners(this); channel.setDiscardOwners(true); channel.setDiscardOwners(true); channel.connectAllOwners(this); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JsonPeerInfoProvider.log.error("Cannot receive {} failed", e.getName(), e.getMessage()); } }
protected void setUseSignedOffBy(com.google.gerrit.extensions.client.InheritableBoolean value) throws java.lang.Exception { try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(project)) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); config.getProject().setBoolean(Boolean.SIGNED_OFF, value); config.commit(md); } }
protected void setUseSignedOffBy(com.google.gerrit.extensions.client.InheritableBoolean value) throws java.lang.Exception { try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(project)) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); config.getProject().setBoolean(Boolean.FORWARD_ONLY, value); config.commit(md); } }
protected void setUseSignedBy(com.google.gerrit.extensions.client.InheritableBoolean value) throws java.lang.Exception { try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(project)) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); config.getProject().setBoolean(Boolean.SIGNED_OFF, value); config.commit(md); } }
protected void setUseSignedOffBy(com.google.gerrit.extensions.client.InheritableBoolean value) throws java.lang.Exception { try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(project)) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); config.getProject().setBoolean(Boolean.useSignedOffBy(), value); config.commit(md); } }
protected void setUseSignedOffBy(com.google.gerrit.extensions.client.InheritableBoolean value) throws java.lang.Exception { try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(project)) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); config.getProject().setBoolean(Boolean.SIGNED_OFF, value); config.commit(md); } catch (java.lang.Exception e) { } }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(state.isUseSignedOffBy())) { return java.util.Collections.emptyList(); } org.eclipse.jgit.revwalk.RevCommit commit = receiveEvent.commit; org.eclipse.jgit.lib.PersonIdent committer = commit.getCommitterIdent(); org.eclipse.jgit.lib.PersonIdent committer = commit.getAuthorIdent(); boolean sboMe = false; for (org.eclipse.jgit.revwalk.FooterLine footer : commit.getFooterLines()) { if (footer.matches(FooterKey.SIGNED_OFF_BY)) { java.lang.String e = footer.getEmailAddress(); if (e!= null) { java.lang.String e = footer.getEmailAddress(); if (e!= null) { sboMe |= committer |= committer.getEmailAddress().equals(e); sboMe |= user.hasEmailAddress(e); } } } } if (((!sboAuthor) && (!sboAuthor)) && (!sboMe)) { try { perm.check(RefPermission.FORGE_COMMITTER); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.server.git.validators.CommitValidationException("Cannot check FORGE_COMMITTER", e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.validators.CommitValidationException denied = e; throw new com.google.gerrit.server.git.validators.CommitValidationException("Cannot check FORTER", e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.validators.
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(state.isUseSignedOffBy())) { return java.util.Collections.emptyList(); } org.eclipse.jgit.revwalk.RevCommit commit = receiveEvent.commit; org.eclipse.jgit.lib.PersonIdent committer = commit.getCommitterIdent(); org.eclipse.jgit.lib.PersonIdent committer = commit.getAuthorIdent(); boolean sboAuthor = false; boolean sboMe = false; for (org.eclipse.jgit.revwalk.FooterLine footer : commit.getFooterLines()) { if (footer.matches(FooterKey.SIGNED_BY)) { java.lang.String e = footer.getEmailAddress(); if (e!= null) { java.lang.String e = footer.getEmailAddress(); if (e!= null) { sboMe |= committer |= committer.getEmailAddress().equals(e); sboMe |= user.hasEmailAddress(e); } } } } if (((!sboAuthor) && (!sboAuthor)) && (!sboMe)) { try { perm.check(RefPermission.FORGE_COMMITTER); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.server.git.validators.CommitValidationException("Cannot check FORGE_COMMITTER", e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.validators.CommitValidationException denied; throw new com.google.gerrit.server.git.validators.CommitValidationException("Cannot check FORGE", e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(state.isUseSignedOffBy())) { return java.util.Collections.emptyList(); } org.eclipse.jgit.revwalk.RevCommit commit = receiveEvent.commit; org.eclipse.jgit.lib.PersonIdent committer = commit.getCommitterIdent(); org.eclipse.jgit.lib.PersonIdent committer = commit.getAuthorIdent(); boolean sboMe = false; for (org.eclipse.jgit.revwalk.FooterLine footer : commit.getFooterLines()) { if (footer.matches(FooterKey.SIGNED_OFF_BY)) { java.lang.String e = footer.getEmailAddress(); if (e!= null) { java.lang.String e = footer.getEmailAddress(); if (e!= null) { sboMe |= committer |= committer.getEmailAddress().equals(e); sboMe |= user.hasEmailAddress(e); } } } } if (((!sboAuthor) && (!sboAuthor)) && (!sboMe)) { try { perm.check(RefPermission.FORGE_COMMITTER); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.server.git.validators.CommitValidationException("Cannot check FORGE_COMMITTER", e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.validators.CommitValidationException denied = e; throw new com.google.gerrit.server.git.validators.CommitValidationException("Cannot check FORTER", e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.server.git.valid
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(state.isUseSignedOffBy())) { return java.util.Collections.emptyList(); } org.eclipse.jgit.revwalk.RevCommit commit = receiveEvent.commit; org.eclipse.jgit.lib.PersonIdent committer = commit.getCommitterIdent(); org.eclipse.jgit.lib.PersonIdent committer = commit.getAuthorIdent(); boolean sboAuthor = false; boolean sboMe = false; for (org.eclipse.jgit.revwalk.FooterLine footer : commit.getFooterLines()) { if (footer.matches(FooterKey.SIGNED_BY)) { java.lang.String e = footer.getEmailAddress(); if (e!= null) { java.lang.String e = footer.getEmailAddress(); if (e!= null) { sboMe |= committer |= committer.getEmailAddress().equals(e); sboMe |= user.hasEmailAddress(e); } } } } if (((!sboAuthor) && (!sboAuthor)) && (!sboMe)) { try { perm.check(RefPermission.FORGE_COMMITTER); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.server.git.validators.CommitValidationException("Cannot check FORGE_COMMITTER", e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.validators.CommitValidationException denied = e; throw new com.google.gerrit.server.git.validators.CommitValidationException("Cannot check FORTER", e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(state.isUseSignedOffBy())) { return java.util.Collections.emptyList(); } org.eclipse.jgit.revwalk.RevCommit commit = receiveEvent.commit; org.eclipse.jgit.lib.PersonIdent committer = commit.getCommitterIdent(); org.eclipse.jgit.lib.PersonIdent committer = commit.getAuthorIdent(); boolean sboMe = false; for (org.eclipse.jgit.revwalk.FooterLine footer : commit.getFooterLines()) { if (footer.matches(FooterKey.SIGNED_OFF_BY)) { java.lang.String e = footer.getEmailAddress(); if (e!= null) { java.lang.String e = footer.getEmailAddress(); if (e!= null) { sboMe |= committer |= committer.getEmailAddress().equals(e); sboMe |= user.hasEmailAddress(e); } } } } if (((!sboAuthor) && (!sboAuthor)) && (!sboMe)) { try { perm.check(RefPermission.FORGE_COMMITTER); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.server.git.validators.CommitValidationException("Cannot check FORGE_COMMITTER", e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.validators.CommitValidationException denied = e; throw new com.google.gerrit.server.git.validators.CommitValidationException("Cannot check FORGE_COMMITTER", e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.valid
private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canDelete(); case FORCE_HEADER : return canDelete(); case FORGE_HEADER : return canForceUpdate(); case FORGE_HEADER : return canForgeCommitter(); case FORGE_AUTHOR : return canForgeCommitter(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SUBMIT : return canUpload(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return projectControl.controlForRef(("refs/for/" + (getRefName()))).canUpload(); case READ_CONFIG : return isOwner(); case READ_CONFIG : return ((((canForgeCommitter()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerge())) && (canUploadMerges())) && (canUploadMerges())) && (!(projectControl.isOwner()))); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canDelete(); case FORCE_HEADER : return canDelete(); case FORGE_HEADER : return canForceUpdate(); case FORGE_HEADER : return canForgeCommitter(); case FORGE_AUTHOR : return canForgeCommitter(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SUBMIT : return canUpload(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return projectControl.controlForRef(("refs/for/" + (getRefName()))).canUpload(); case READ_CONFIG : return isOwner(); case READ_CONFIG : return ((((canForgeCommitter()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canForgeGerritServerIdentity())) && (canUploadMerge())) && (canUploadMerges())) && (!(projectControl.isOwner()))); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canDelete(); case FORCE_HEADER : return canDelete(); case FORGE_HEADER : return canForceUpdate(); case FORGE_HEADER : return canForgeCommitter(); case FORGE_AUTHOR : return canForgeCommitter(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SUBMIT : return canUpload(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return projectControl.controlForRef(("refs/for/" + (getRefName()))).canUpload(); case READ_CONFIG : return isOwner(); case READ_CONFIG : return ((((canForgeCommitter()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerge())) && (canUploadMerges())) && (canUploadMerges())) && (!(projectControl.getProjectState().isOwner()))); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canDelete(); case FORCE_HEADER : return canDelete(); case FORGE_HEADER : return canForceUpdate(); case FORGE_HEADER : return canForgeCommitter(); case FORGE_AUTHOR : return canForgeCommitter(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SUBMIT : return canUpload(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return projectControl.controlForRef(("refs/for/" + (getRefName()))).canUpload(); case READ_CONFIG : return isOwner(); case READ_CONFIG : return ((((canForgeCommitter()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerge())) && (canUploadMerges())) && (canUploadMerges())) && ((canUploadMerges())) && (!(projectControl.getProjectState().isEmpty()))); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canDelete(); case FORCE_HEADER : return canDelete(); case FORGE_HEADER : return canForceUpdate(); case FORGE_HEADER : return canForgeCommitter(); case FORGE_AUTHOR : return canForgeCommitter(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SUBMIT : return canUpload(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return projectControl.controlForRef(("refs/for/" + (getRefName()))).canUpload(); case READ_CONFIG : return isOwner(); case READ_CONFIG : return ((((canForgeCommitter()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerge())) && (canUploadMerges())) && (canUploadMerges())) && ((canUploadMerges())) && (!(projectControl.getProjectState().isEmpty()))); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported project \"" + " unsupported")); }
@org.junit.Test public void createProjectWithProperties() throws java.lang.Exception { java.lang.String newProjectName = name("newProject"); com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.description = "Test description"; in.submitType = com.google.gerrit.extensions.client.SubmitType.CHERRY_PICK; in.useContributorAgreements = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useContributorAgreements = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.requireChangeId = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; com.google.gerrit.extensions.common.ProjectInfo p = gApi.projects().create(in).get(); assertThat(p.name).isEqualTo(newProjectName); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjectInfo(project, p); assertThat(project.getDescription()).isEqualTo(in.description); assertThat(project.getSubmitType()).isEqualTo(in.description); assertThat(project.getSubmitType()).isEqualTo(in.useContributorAgreements); assertThat(project.getBoolean(Boolean.useContributorAgreements).isEqualTo(in.useContributorAgreements); assertThat(project.getBoolean(Boolean.useSignedOffBy.useSignedOffBy()); assertThat(project.getBoolean(InheritableBoolean.useSignedOffBy, in.useSignedOffBy)); }
@org.junit.Test public void createProjectWithProperties() throws java.lang.Exception { java.lang.String newProjectName = name("newProject"); com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.description = "Test description"; in.submitType = com.google.gerrit.extensions.client.SubmitType.CHERRY_PICK; in.useContributorAgreements = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useContributorAgreements = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.requireChangeId = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; com.google.gerrit.extensions.common.ProjectInfo p = gApi.projects().create(in).get(); assertThat(p.name).isEqualTo(newProjectName); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjectInfo(project, p); assertThat(project.getDescription()).isEqualTo(in.description); assertThat(project.getSubmitType()).isEqualTo(in.description); assertThat(project.getSubmitType()).isEqualTo(in.useContributorAgreements); assertThat(project.getBoolean(Boolean.useContributorAgreements).isEqualTo(in.useContributorAgreements); assertThat(project.getBoolean(Boolean.useSignedOffBy.useSignedOffBy()); assertThat(project.getBoolean(Boolean.useSignedOffBy, in.useSignedOffBy()); }
@org.junit.Test public void createProjectWithProperties() throws java.lang.Exception { java.lang.String newProjectName = name("newProject"); com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.description = "Test description"; in.submitType = com.google.gerrit.extensions.client.SubmitType.CHERRY_PICK; in.useContributorAgreements = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useContributorAgreements = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.requireChangeId = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; com.google.gerrit.extensions.common.ProjectInfo p = gApi.projects().create(in).get(); assertThat(p.name).isEqualTo(newProjectName); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjectInfo(project, p); assertThat(project.getDescription()).isEqualTo(in.description); assertThat(project.getSubmitType()).isEqualTo(in.description); assertThat(project.getSubmitType()).isEqualTo(in.useContributorAgreements); assertThat(project.getBoolean(Boolean.useContributorAgreements).isEqualTo(in.useContributorAgreements); assertThat(project.getBoolean(Boolean.useSignedOffBy.useSignedOffBy()); assertThat(project.getBoolean(Boolean.useSignedOffBy, in.useSignedOffBy)); }
@org.junit.Test public void createProjectWithProperties() throws java.lang.Exception { java.lang.String newProjectName = name("newProject"); com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.description = "Test description"; in.submitType = com.google.gerrit.extensions.client.SubmitType.CHERRY_PICK; in.useContributorAgreements = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useContributorAgreements = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.requireChangeId = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; com.google.gerrit.extensions.common.ProjectInfo p = gApi.projects().create(in).get(); assertThat(p.name).isEqualTo(newProjectName); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjectInfo(project, p); assertThat(project.getDescription()).isEqualTo(in.description); assertThat(project.getSubmitType()).isEqualTo(in.description); assertThat(project.getSubmitType()).isEqualTo(in.useContributorAgreements); assertThat(project.getBoolean(Boolean.useContributorAgreements).isEqualTo(in.useContributorAgreements); assertThat(project.getBoolean(Boolean.useSignedOffBy.useSignedOffBy()); assertThat(project.getBoolean(InheritableBoolean.useSignedOffBy, in.useSignedOffBy); }
@org.junit.Test public void createProjectWithProperties() throws java.lang.Exception { java.lang.String newProjectName = name("newProject"); com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.description = "Test description"; in.submitType = com.google.gerrit.extensions.client.SubmitType.CHERRY_PICK; in.useContributorAgreements = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useContributorAgreements = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.requireChangeId = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; com.google.gerrit.extensions.common.ProjectInfo p = gApi.projects().create(in).get(); assertThat(p.name).isEqualTo(newProjectName); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjectInfo(project, p); assertThat(project.getDescription()).isEqualTo(in.description); assertThat(project.getSubmitType()).isEqualTo(in.description); assertThat(project.getSubmitType()).isEqualTo(in.useContributorAgreements); assertThat(project.getBoolean(Boolean.useContributorAgreements).isEqualTo(in.useContributorAgreements); assertThat(project.getBoolean(Boolean.useSignedOffBy.useSignedOffBy()); assertThat(project.getBoolean(InheritableBoolean.useSignedOffBy, in.useSignedOffBy)); assertThat(project.getBoolean(InheritableBoolean.requireChangeID_SIGNED_CONFIG)).isEqualTo(in.getBoolean(InheritableBoolean.requireChangeID_SIGNED
private java.util.Set<java.util.Map<java.lang.String, com.google.gerrit.server.schema.Schema_130.AccountSet<com.google.gerrit.reviewdb.server.ReviewDb> getFields(com.google.gerrit.reviewdb.server.ReviewDb db) throws java.sql.SQLException { com.google.gwtorm.jdbc.JdbcSchema schema = ((com.google.gwtorm.jdbc.JdbcSchema) (db)); java.sql.Connection connection = schema.getConnection().listColumns(connection, com.google.gerrit.server.schema.Schema_105.TABLE); return java.util.Collections.emptySet().stream().filter(( e) -> columns.contains(e.getKey())).filter(( e) -> columns.contains(e.getKey())).collect(java.util.stream.Collectors.toSet()); }
private java.util.Set<java.util.Map<java.lang.String, com.google.gerrit.server.schema.Schema_130.AccountSet<com.google.gerrit.reviewdb.server.ReviewDb> getFields(com.google.gerrit.reviewdb.server.ReviewDb db) throws java.sql.SQLException { com.google.gwtorm.jdbc.JdbcSchema schema = ((com.google.gwtorm.jdbc.JdbcSchema) (db)); java.sql.Connection connection = schema.getConnection().listColumns(connection, com.google.gerrit.server.schema.Schema_53.TABLE); return java.util.Collections.emptySet().stream().filter(( e) -> columns.contains(e.getKey())).filter(( e) -> columns.contains(e.getKey())).collect(java.util.stream.Collectors.toSet()); }
private java.util.Set<java.util.Map<java.lang.String, com.google.gerrit.server.schema.Schema_130.AccountSet<com.google.gerrit.reviewdb.server.ReviewDb> getFields(com.google.gerrit.reviewdb.server.ReviewDb db) throws java.sql.SQLException { com.google.gwtorm.jdbc.JdbcSchema schema = ((com.google.gwtorm.jdbc.JdbcSchema) (db)); java.sql.Connection connection = schema.getConnection().listColumns(connection, com.google.gerrit.server.schema.Schema_105.TABLE); return java.util.Collections.emptySet().stream().filter(( e) -> columns.contains(e.getKey())).filter(( e) -> e.getKey())).collect(java.util.stream.Collectors.toSet()); }
private java.util.Set<java.util.Map<java.lang.String, com.google.gerrit.server.schema.Schema_130.AccountSet<com.google.gerrit.reviewdb.server.ReviewDb> getFields(com.google.gerrit.reviewdb.server.ReviewDb db) throws java.sql.SQLException { com.google.gwtorm.jdbc.JdbcSchema schema = ((com.google.gwtorm.jdbc.JdbcSchema) (db)); java.sql.Connection connection = schema.getDialect().listColumns(connection, com.google.gerrit.server.schema.Schema_105.TABLE); return java.util.Collections.emptySet().stream().filter(( e) -> columns.contains(e.getKey())).filter(( e) -> e.getKey())).collect(java.util.stream.Collectors.toSet()); }
private java.util.Set<java.util.Map<java.lang.String, com.google.gerrit.server.schema.Schema_130.AccountSet<com.google.gerrit.reviewdb.server.ReviewDb> getFields(com.google.gerrit.reviewdb.server.ReviewDb db) throws java.sql.SQLException { com.google.gwtorm.jdbc.JdbcSchema schema = ((com.google.gwtorm.jdbc.JdbcSchema) (db)); java.sql.Connection connection = schema.getConnection().listColumns(connection, com.google.gerrit.server.schema.Schema_105.TABLE); return java.util.Collections.emptySet().stream().filter(( e) -> columns.contains(e.getKey())).filter(( e) -> columns.contains(e.getKey())).collect(java.util.stream.Collectors.toList()); }
private java.util.Set<com.google.gerrit.reviewdb.client.Account> scanAccounts(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.lib.ProgressMonitor pm) throws java.sql.SQLException { java.util.Set<java.lang.String> fields = getFields(db); if (fields.isEmpty()) { return java.util.Collections.emptySet(); } java.lang.String query = fields.stream().map((f) -> f.getKey()).collect(java.util.stream.Collectors.toSet())); try (java.sql.Statement stmt = newStatement(db);java.sql.ResultSet rs = stmt.executeQuery(db);java.sql.ResultSet rs = stmt.executeQuery(db);java.sql.ResultSet rs = stmt.executeQuery(query); while (rs.next()) { com.google.gerrit.reviewdb.client.Account a = new com.google.gerrit.reviewdb.client.Account.Id(new com.google.gerrit.reviewdb.client.Account.Id(rs.getInt(1)), rs.getTimestamp(2)); rs.getValue().set(a.getTime()); } for (java.sql.Timestamp field : fields) { field.add(a.getValue()); } s.add(a); } return s; }
private java.util.Set<com.google.gerrit.reviewdb.client.Account> scanAccounts(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.lib.ProgressMonitor pm) throws java.sql.SQLException { java.util.Set<java.lang.String> fields = getFields(db); if (fields.isEmpty()) { return java.util.Collections.emptySet(); } java.lang.String query = fields.stream().map((f) -> f.getKey()).collect(java.util.stream.Collectors.toSet())); try (java.sql.Statement stmt = newStatement(db);java.sql.ResultSet rs = stmt.executeQuery(db);java.sql.ResultSet rs = stmt.executeQuery(db);java.sql.ResultSet rs = stmt.executeQuery(query); while (rs.next()) { com.google.gerrit.reviewdb.client.Account a = new com.google.gerrit.reviewdb.client.Account.Id(new com.google.gerrit.reviewdb.client.Account.Id(rs.getInt(1)), rs.getInt(2)); rs.getValue().set(a.getTime()); } for (java.sql.Timestamp field : fields) { field.add(a); } s.add(a); } return s; }
private java.util.Set<com.google.gerrit.reviewdb.client.Account> scanAccounts(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.lib.ProgressMonitor pm) throws java.sql.SQLException { java.util.Set<java.lang.String> fields = getFields(db); if (fields.isEmpty()) { return java.util.Collections.emptySet(); } java.lang.String query = fields.stream().map((f) -> f.getKey()).collect(java.util.stream.Collectors.toSet())); try (java.sql.Statement stmt = newStatement(db);java.sql.ResultSet rs = stmt.executeQuery(db);java.sql.ResultSet rs = stmt.executeQuery(db);java.sql.ResultSet rs = stmt.executeQuery(query); while (rs.next()) { com.google.gerrit.reviewdb.client.Account a = new com.google.gerrit.reviewdb.client.Account.Id(new com.google.gerrit.reviewdb.client.Account.Id(rs.getInt(1)), rs.getTime()); rs.getValue().set(a.getTime()); } for (java.sql.Timestamp field : fields) { if (rs.next()) { s.getValue().set(a.getTime()); } s.add(a); } rs.update(1); } return s; }
private java.util.Set<com.google.gerrit.reviewdb.client.Account> scanAccounts(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.lib.ProgressMonitor pm) throws java.sql.SQLException { java.util.Set<java.lang.String> fields = getFields(db); if (fields.isEmpty()) { return java.util.Collections.emptySet(); } java.lang.String query = fields.stream().map((f) -> f.getKey()).collect(java.util.stream.Collectors.toSet())); try (java.sql.Statement stmt = newStatement(db);java.sql.ResultSet rs = stmt.executeQuery(db);java.sql.ResultSet rs = stmt.executeQuery(db);java.sql.ResultSet rs = stmt.executeQuery(query); while (rs.next()) { com.google.gerrit.reviewdb.client.Account a = new com.google.gerrit.reviewdb.client.Account.Id(new com.google.gerrit.reviewdb.client.Account.Id(rs.getInt(1)), rs.getTime()); rs.getValue().set(a.getTime()); } for (java.sql.Timestamp field : fields) { if (rs.next()) { s.getValue().set(a.getTime()); } s.add(a); } s.update(1); } return s; }
private java.util.Set<com.google.gerrit.reviewdb.client.Account> scanAccounts(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.lib.ProgressMonitor pm) throws java.sql.SQLException { java.util.Set<java.lang.String> fields = getFields(db); if (fields.isEmpty()) { return java.util.Collections.emptySet(); } java.lang.String query = fields.stream().map((f) -> f.getKey()).collect(java.util.stream.Collectors.toSet())); try (java.sql.Statement stmt = newStatement(db);java.sql.ResultSet rs = stmt.executeQuery(db);java.sql.ResultSet rs = stmt.executeQuery(db);java.sql.ResultSet rs = stmt.executeQuery(query); while (rs.next()) { com.google.gerrit.reviewdb.client.Account a = new com.google.gerrit.reviewdb.client.Account.Id(new com.google.gerrit.reviewdb.client.Account.Id(rs.getInt(1)), rs.getTime()); rs.getValue().set(a.getTime()); } for (java.sql.Timestamp field : fields) { if (rs.next()) { s.getValue().set(a.getTime()); } s.add(a); } rs.update(1); return s; } }
private boolean isRest(javax.servlet.ServletRequest req) { return resturi.matches(); }
private static boolean isRest(javax.servlet.ServletRequest req) { return resturi.matches(); }
private boolean isRest(javax.servlet.ServletRequest req) { return resturi.matcher(getURI(req)).matches(); }
private boolean isRest(javax.servlet.ServletRequest req) throws java.io.IOException { return resturi.matches(); }
private boolean isRest(javax.servlet.ServletRequest req) throws java.io.IOException { return resturi.matcher(req)).matches(); }
public boolean inGracePermission() { if ((granted) < 0) { return 0; } return ((grant; }
public boolean inGracePermission() { if ((granted) < 0) { return 0; } return ((grantedPrefix) > 0) { }
public boolean inGracePermission() { if ((granted) < 0) { return 0; } return ((grantedPrefix) > 0) > 0); }
public boolean inGracePermission() { if ((granted) < 0) { return 0; } return ((grants.readGranted()) > 0) { }
public boolean inGracePermission() { if ((granted) < 0) { return 0; } return ((grantedPrefix) > 0) > 0) { } }
private final com.googlesource.gerrit.plugins.quota.Module.Holder createWithQuota(com.google.gerrit.reviewdb.client.Account.Id key, com.google.gerrit.reviewdb.client.Account.Id id) throws java.lang.Exception { com.googlesource.gerrit.plugins.quota.RepositoryManager.MatchingRateLimit m = findOrm(sourceConfigFactory, limitConfigFactory, userFactory.create(key))); return com.googlesource.gerrit.plugins.quota.GerritConfig.firstNonNull(fingerprint, limit); }
private final com.googlesource.gerrit.plugins.quota.Module.Holder createWithQuota(com.google.gerrit.reviewdb.client.Account.Id key, com.google.gerrit.reviewdb.client.Account.Id id) throws java.lang.Exception { com.googlesource.gerrit.plugins.quota.RepositoryManager.MatchingRateLimit m = findOrm(sourceConfigFactory, limitConfigFactory, userFactory.create(key))); return com.googlesource.gerrit.plugins.quota.Factory.create(filterConfig, userFactory, userFactory.create(key))); }
private final com.googlesource.gerrit.plugins.quota.Module.Holder createWithQuota(com.google.gerrit.reviewdb.client.Account.Id key, com.google.gerrit.reviewdb.client.Account.Id id) throws java.lang.Exception { com.googlesource.gerrit.plugins.quota.RepositoryManager.MatchingRateLimit m = findOrm(sourceConfigFactory, limitConfigFactory, userFactory.create(key))); return com.googlesource.gerrit.plugins.quota.GerritConfig.firstNonNull(reader, userFactory, userFactory.create(key))); }
private final com.googlesource.gerrit.plugins.quota.Module.Holder createWithQuota(com.google.gerrit.reviewdb.client.Account.Id key, com.google.gerrit.reviewdb.client.Account.Id id) throws java.lang.Exception { com.googlesource.gerrit.plugins.quota.RepositoryManager.MatchingRateLimit m = findOrm(sourceConfigFactory, limitConfigFactory, userFactory.create(key))); return com.googlesource.gerrit.plugins.quota.GerritConfig.firstNonNull(fingerprint, userFactory.create(key))); }
private final com.googlesource.gerrit.plugins.quota.Module.Holder createWithQuota(com.google.gerrit.reviewdb.client.Account.Id key, com.google.gerrit.reviewdb.client.Account.Id id) throws java.lang.Exception { com.googlesource.gerrit.plugins.quota.RepositoryManager.MatchingRateLimit m = findOrm(sourceConfigFactory, limitConfigFactory, userFactory.create(key))); return com.googlesource.gerrit.plugins.quota.GerritConfig.firstNonNull(fingerprint, userFactory.create(key).get(key); }
@java.lang.Override protected void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.httpd.AllRequestFilter.class).to(com.googlesource.gerrit.plugins.quota.AllRequestFilter.class); cache(com.googlesource.gerrit.plugins.quota.HttpModule.CACHE_NAME_ACCOUNT_ACCOUNT_ACCOUNT_ACCOUNT, Account.Id.class, Account.Id.class).loader(com.googlesource.gerrit.plugins.quota.HttpModule.ResourceAccountId.class); cache(com.googlesource.gerrit.plugins.quota.CACHE_NAME_RENDINGLETON, java.lang.String.class, java.lang.String.class).loader(com.googlesource.gerrit.plugins.quota.HttpPluginLoader.class); bind(com.googlesource.gerrit.plugins.quota.HttpModule.CACHE_NAME_RITORY_RESOUPS_RESOURCESSAGE_RESOURCESSAGE).to(RIT_RESOURCES); }
@java.lang.Override protected void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.httpd.AllRequestFilter.class).to(com.googlesource.gerrit.plugins.quota.AllRequestFilter.class); cache(com.googlesource.gerrit.plugins.quota.HttpModule.CACHE_NAME_ACCOUNT_ACCOUNT_ACCOUNT_ACCOUNT, Account.Id.class, Account.Id.class).loader(com.googlesource.gerrit.plugins.quota.HttpModule.ResourceAccountId.class); cache(com.googlesource.gerrit.plugins.quota.CACHE_NAME_RENDINGLETON, java.lang.String.class, java.lang.String.class).loader(com.googlesource.gerrit.plugins.quota.HttpPluginLoader.class); bind(com.googlesource.gerrit.plugins.quota.HttpModule.CACHE_NAME_RITORY_RESOUPS_RESOURCESSAGE_RESOURCESSAGE).to(RIT_MISSINGLETON); }
@java.lang.Override protected void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.httpd.AllRequestFilter.class).to(com.googlesource.gerrit.plugins.quota.AllRequestFilter.class); cache(com.googlesource.gerrit.plugins.quota.HttpModule.CACHE_NAME_ACCOUNT_ACCOUNT_ACCOUNT_ACCOUNT, Account.Id.class, Account.Id.class).loader(com.googlesource.gerrit.plugins.quota.HttpModule.ResourceAccountId.class); cache(com.googlesource.gerrit.plugins.quota.CACHE_NAME_RENDINGLETON, java.lang.String.class, java.lang.String.class).loader(com.googlesource.gerrit.plugins.quota.HttpPluginLoader.class); bind(com.googlesource.gerrit.plugins.quota.HttpModule.CACHE_NAME_RITORY_RESOUPS_RESOURCESSAGE_RESOURCESSAGE).to(com.googlesource.gerrit.plugins.quota.Names.RIT_CONFIG_MISSINGLETON_REGEXPANDONDS); }
@java.lang.Override protected void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.httpd.AllRequestFilter.class).to(com.googlesource.gerrit.plugins.quota.AllRequestFilter.class); cache(com.googlesource.gerrit.plugins.quota.HttpModule.CACHE_NAME_ACCOUNT_ACCOUNT_ACCOUNT_ACCOUNT, Account.Id.class, Account.Id.class).loader(com.googlesource.gerrit.plugins.quota.HttpModule.ResourceAccountId.class); cache(com.googlesource.gerrit.plugins.quota.CACHE_NAME_RENDINGLETON, java.lang.String.class, java.lang.String.class).loader(com.googlesource.gerrit.plugins.quota.HttpPluginLoader.class); bind(com.googlesource.gerrit.plugins.quota.HttpModule.CACHE_NAME_RITORY_RESOUPS_RESOURCESSAGE_RESOURCESSAGE).to(com.googlesource.gerrit.plugins.quota.Names.RIT_CONFIG_MISSINGLETON_REGEXPANDONED_REGEXCEPTION).to(RIT_LIMIT_MES); }
@java.lang.Override protected void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.httpd.AllRequestFilter.class).to(com.googlesource.gerrit.plugins.quota.AllRequestFilter.class); cache(com.googlesource.gerrit.plugins.quota.HttpModule.CACHE_NAME_ACCOUNT_ACCOUNT_ACCOUNT_ACCOUNT, Account.Id.class, Account.Id.class).loader(com.googlesource.gerrit.plugins.quota.HttpModule.ResourceAccountId.class); cache(com.googlesource.gerrit.plugins.quota.CACHE_NAME_RENDINGLETON, java.lang.String.class, java.lang.String.class).loader(com.googlesource.gerrit.plugins.quota.HttpPluginLoader.class); bind(com.googlesource.gerrit.plugins.quota.HttpModule.CACHE_NAME_RITORY_RESOUPS_RESOURCESSAGE_RESOURCESSAGE).to(com.googlesource.gerrit.plugins.quota.Names.RIT_CONFIG_MISSINGLETON_REGEXPANDONED_REGEXCEPTION).to(RIT_MSGACY_LIMIT_LIMIT_MES); }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest req, javax.servlet.ServletResponse res, final javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if (isRest(req)) { com.googlesource.gerrit.plugins.quota.Module.Holder holder = null; com.google.gerrit.server.CurrentUser userId = null; com.google.gerrit.reviewdb.client.Account.Id accountId = null; if (u.isIdentifiedUser()) { accountId = u.asIdentifiedUser().getAccountId(); try { accountId = u.asIdentifiedUser().getAccountId(); } catch (java.util.concurrent.ExecutionException e) { com.googlesource.gerrit.plugins.quota.RestApiServlet.log.warn(("Cannot get account '" + accountId); com.googlesource.gerrit.plugins.quota.RestApiServlet.log.warn(msg, e); } } else { try { return; } catch (java.util.concurrent.ExecutionException e) { java.lang.String msg = java.util.concurrent.ExecutionException.get(req.getRemoteHost()); com.googlesource.gerrit.plugins.quota.RestApiServletRequestScopePropagator.log.warn(msg, e); com.googlesource.gerrit.plugins.quota.RestApiServlet.log.warn(msgExpectedSize, e); } } if (((!(canGrantedPerformPerformPermission())) && (!(rateControl.isGranted()))) { java.lang.String msg = java.lang.String.format("Cannot set %s of %s", req.get().getAccount()); com.googlesource.gerrit.plugins.quota.RestApiServletRequest.log.warn(java.lang.String.format("Failed to get %s", ((com.googlesource.gerrit.plugins.quota.RestApiServlet.get().get().getRate()) * (com.googlesource.
@java.lang.Override public void doFilter(javax.servlet.ServletRequest req, javax.servlet.ServletResponse res, final javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if (isRest(req)) { com.googlesource.gerrit.plugins.quota.Module.Holder holder = null; com.google.gerrit.server.CurrentUser userId = null; com.google.gerrit.reviewdb.client.Account.Id accountId = null; if (u.isIdentifiedUser()) { accountId = u.asIdentifiedUser().getAccountId(); try { accountId = u.asIdentifiedUser().getAccountId(); } catch (java.util.concurrent.ExecutionException e) { com.googlesource.gerrit.plugins.quota.RestApiServlet.log.warn(("Cannot get account '" + accountId); com.googlesource.gerrit.plugins.quota.RestApiServlet.log.warn(msg, e); } } else { try { return; } catch (java.util.concurrent.ExecutionException e) { java.lang.String msg = java.util.concurrent.ExecutionException.get(req.getRemoteHost()); com.googlesource.gerrit.plugins.quota.RestApiServletRequestScopePropagator.log.warn(msg, e); com.googlesource.gerrit.plugins.quota.RestApiServlet.log.warn(msgExpectedSize, e); } } if (((!(canGrantedPerformPerformPermission())) && (!(rateControl.isGranted()))) { java.lang.String msg = java.lang.String.format("Cannot set %s of %s", req.get().getAccount()); com.googlesource.gerrit.plugins.quota.RestApiServlet.log.warn(java.lang.String.format("Failed to get %s", ((com.googlesource.gerrit.plugins.quota.RestApiServlet.get().get().getRate()) * (com.googlesource.ger
@java.lang.Override public void doFilter(javax.servlet.ServletRequest req, javax.servlet.ServletResponse res, final javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if (isRest(req)) { com.googlesource.gerrit.plugins.quota.Module.Holder holder = null; com.google.gerrit.server.CurrentUser userId = null; com.google.gerrit.reviewdb.client.Account.Id accountId = null; if (u.isIdentifiedUser()) { accountId = u.asIdentifiedUser().getAccountId(); try { accountId = u.asIdentifiedUser().getAccountId(); } catch (java.util.concurrent.ExecutionException e) { com.googlesource.gerrit.plugins.quota.RestApiServlet.log.warn(("Cannot get account '" + accountId); com.googlesource.gerrit.plugins.quota.RestApiServlet.log.warn(msg, e); } } else { try { return; } catch (java.util.concurrent.ExecutionException e) { java.lang.String msg = java.util.concurrent.ExecutionException.get(req.getRemoteHost()); com.googlesource.gerrit.plugins.quota.RestApiServletRequestScopePropagator.log.warn(msg, e); com.googlesource.gerrit.plugins.quota.RestApiServlet.log.warn(msgExpectedSize, e); } } if (((!(canGrantedPerformPerformPermission())) && (!(rateControl.isGranted()))) { java.lang.String msg = java.lang.String.format("Cannot set %s of %s", req.get().getAccount()); com.googlesource.gerrit.plugins.quota.RestApiServlet.log.warn(java.lang.String.format("Failed to get %s", (com.googlesource.gerrit.plugins.quota.RestApiServlet.SECONDS_HOST_HOST)), state.get().get().get
@java.lang.Override public void doFilter(javax.servlet.ServletRequest req, javax.servlet.ServletResponse res, final javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if (isRest(req)) { com.googlesource.gerrit.plugins.quota.Module.Holder holder = null; com.google.gerrit.server.CurrentUser userId = null; com.google.gerrit.reviewdb.client.Account.Id accountId = null; if (u.isIdentifiedUser()) { accountId = u.asIdentifiedUser().getAccountId(); try { accountId = u.asIdentifiedUser().getAccountId(); } catch (java.util.concurrent.ExecutionException e) { com.googlesource.gerrit.plugins.quota.RestApiServlet.log.warn(("Cannot get account '" + accountId); com.googlesource.gerrit.plugins.quota.RestApiServlet.log.warn(msg, e); } } else { try { return; } catch (java.util.concurrent.ExecutionException e) { java.lang.String msg = java.util.concurrent.ExecutionException.get(req.getRemoteHost()); com.googlesource.gerrit.plugins.quota.RestApiServletRequestScopePropagator.log.warn(msg, e); com.googlesource.gerrit.plugins.quota.RestApiServlet.log.warn(msgExpectedSize, e); } } if (((!(canGrantedPerformPerformPermission())) && (!(rateControl.isGranted()))) { java.lang.String msg = java.lang.String.format("Cannot set %s of %s", req.get().getAccount()); com.googlesource.gerrit.plugins.quota.RestApiServlet.log.warn(java.lang.String.format("Failed to get %s", (com.googlesource.gerrit.plugins.quota.RestApiServlet.SECONDS_HOST_HOST)), state.get().getGranted
@java.lang.Override public void doFilter(javax.servlet.ServletRequest req, javax.servlet.ServletResponse res, final javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if (isRest(req)) { com.googlesource.gerrit.plugins.quota.Module.Holder holder = null; com.google.gerrit.server.CurrentUser userId = null; com.google.gerrit.reviewdb.client.Account.Id accountId = null; if (u.isIdentifiedUser()) { accountId = u.asIdentifiedUser().getAccountId(); try { accountId = u.asIdentifiedUser().getAccountId(); } catch (java.util.concurrent.ExecutionException e) { com.googlesource.gerrit.plugins.quota.RestApiServlet.log.warn(("Cannot get account '" + accountId); com.googlesource.gerrit.plugins.quota.RestApiServlet.log.warn(msg, e); } } else { try { return; } catch (java.util.concurrent.ExecutionException e) { java.lang.String msg = java.util.concurrent.ExecutionException.get(req.getRemoteHost()); com.googlesource.gerrit.plugins.quota.RestApiServletRequestScopePropagator.log.warn(msg, e); com.googlesource.gerrit.plugins.quota.RestApiServlet.log.warn(msgExpectedSize, e); } } if (((!(canGrantedPerformPerformPermission())) && (!(rateControl.isGranted()))) { java.lang.String msg = java.lang.String.format("Cannot set %s of %s", req.get().getAccount()); com.googlesource.gerrit.plugins.quota.RestApiServlet.log.warn(java.lang.String.format("Failed to get %s", ((com.googlesource.gerrit.plugins.quota.RestApiServlet.get().get().getRate()) * (com.googlesource.gerrit
private final com.googlesource.gerrit.plugins.quota.Module.Holder createWithWithUrls(com.google.common.base.Optional<com.googlesource.gerrit.plugins.quota.AccountLimitsConfig.RateLimit> limit) throws java.lang.Exception { return com.googlesource.gerrit.plugins.quota.Module.Holder.createWithSingleton(limit); }
private final com.googlesource.gerrit.plugins.quota.Module.Holder createWithWithUrls(com.google.common.base.Optional<com.googlesource.gerrit.plugins.quota.AccountLimitsConfig.Rate> limit) throws java.lang.Exception { return com.googlesource.gerrit.plugins.quota.Module.Holder.createWithSingleton(limit); }
private final com.googlesource.gerrit.plugins.quota.Module.Holder createWithWithUrls(com.google.common.base.Optional<com.googlesource.gerrit.plugins.quota.AccountLimitsConfig.RateLimit> limit) throws java.lang.Exception { return com.googlesource.gerrit.plugins.quota.Module.Holder.createWithPrevertiser(limit); }
private final com.googlesource.gerrit.plugins.quota.Module.Holder createWithWithUrls(com.google.common.base.Optional<com.googlesource.gerrit.plugins.quota.AccountLimitsConfig.Rate> limit) throws java.lang.Exception { return com.googlesource.gerrit.plugins.quota.Module.Holder.createWithSingleton(Limit); }
private final com.googlesource.gerrit.plugins.quota.Module.Holder createWithWithUrls(com.google.common.base.Optional<com.googlesource.gerrit.plugins.quota.AccountLimitsConfig.RateLimit> limit) throws java.lang.Exception { return com.googlesource.gerrit.plugins.quota.Module.Holder.createWithSingleton(Limit); }
@java.lang.Override public final com.googlesource.gerrit.plugins.quota.Module load(Key) throws java.lang.Exception { if (((kind) == (com.googlesource.gerrit.plugins.quota.ModuleCache.Loader.Loader.ANONYMOUS)) && (key instanceof java.lang.String)) { return createWithSingleton(com.googlesource.gerrit.plugins.quota.ModuleLoader.Loader.class); } if (((kind) == (com.google.gerrit.reviewdb.client.Account.Id.ACCOUNT_ID)) && (key instanceof com.googlesource.gerrit.plugins.quota.Cache.AbstractCacheImpl.Loader)) { return createWithUrls(com.google.gerrit.reviewdb.client.Account.Id.class); } return com.googlesource.gerrit.plugins.quota.Module.Holder.EMPTY_NAME; }
@java.lang.Override public final com.googlesource.gerrit.plugins.quota.Module load(Key) throws java.lang.Exception { if (((kind) == (com.googlesource.gerrit.plugins.quota.ModuleCache.Loader.Loader.ANONYMOUS)) && (key instanceof java.lang.String)) { return createWithSingleton(com.googlesource.gerrit.plugins.quota.ModuleLoader.Loader.class); } if (((kind) == (com.google.gerrit.reviewdb.client.Account.Id.Id.ACCOUNT)) && (key instanceof com.googlesource.gerrit.plugins.quota.Cache.AbstractCacheImpl.Loader)) { return createWithUrls(com.google.gerrit.reviewdb.client.Account.Id.class); } return com.googlesource.gerrit.plugins.quota.Module.Holder.EMPTY_NAME; }
@java.lang.Override public final com.googlesource.gerrit.plugins.quota.Module load(Key) throws java.lang.Exception { if (((kind) == (com.googlesource.gerrit.plugins.quota.ModuleCache.Loader.Loader.ANONYMOUS)) && (key instanceof java.lang.String)) { return createWithSingleton(com.googlesource.gerrit.plugins.quota.ModuleLoader.Loader.class); } if (((kind) == (com.google.gerrit.reviewdb.client.Account.Id.Id.ACCOUNT)) && (key instanceof com.googlesource.gerrit.plugins.quota.Cache.AbstractCacheImpl.Loader)) { return createWithUrls(com.googlesource.gerrit.plugins.quota.Cache.Loader.class); } return com.googlesource.gerrit.plugins.quota.Module.Holder.EMPTY_NAME; }
@java.lang.Override public final com.googlesource.gerrit.plugins.quota.Module load(Key) throws java.lang.Exception { if (((kind) == (com.googlesource.gerrit.plugins.quota.ModuleCache.Loader.Loader.ANONYMOUS)) && (key instanceof java.lang.String)) { return createWithSingleton(com.googlesource.gerrit.plugins.quota.ModuleLoader.Loader.class); } if (((kind) == (com.google.gerrit.reviewdb.client.Account.Id.Id.ACCOUNT)) && (key instanceof com.googlesource.gerrit.plugins.quota.Cache.AbstractCacheImpl.Loader)) { return createWithUrls(com.googlesource.gerrit.plugins.quota.Cache.Loader.class); } return com.googlesource.gerrit.plugins.quota.Module.Holder.EMPTY_Mock; }
@java.lang.Override public final com.googlesource.gerrit.plugins.quota.Module load(Key) throws java.lang.Exception { if (((kind) == (com.googlesource.gerrit.plugins.quota.ModuleCache.Loader.Loader.ANONYMOUS)) && (key instanceof java.lang.String)) { return createWithSingleton(com.googlesource.gerrit.plugins.quota.ModuleLoader.Loader.class); } if (((kind) == (com.google.gerrit.reviewdb.client.Account.Id.ACCOUNT_ID)) && (key instanceof com.googlesource.gerrit.plugins.quota.Cache.AbstractCacheImpl.Loader)) { return createWithUrls(com.google.gerrit.reviewdb.client.Account.Id.class); } return com.googlesource.gerrit.plugins.quota.Module.Holder.EMPTY_MOST_SIZE_SIZE; }
public T execute(com.google.gerrit.server.update.BatchUpdate.Factory<T> T> action) throws com.google.gerrit.extensions.restapi.RestApiException { return execute(action, default); }
public T execute(com.google.gerrit.server.update.BatchUpdate.Factory<T> T> action) throws com.google.gerrit.server.extensions.restapi.RestApiException { return execute(action, default); }
public <T> void execute(com.google.gerrit.server.update.BatchUpdate.Factory<T> action) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { return execute(action, default); }
public <T> void execute(com.google.gerrit.server.update.BatchUpdate.Factory<T> T> action) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { return execute(action, default); }
public T execute(com.google.gerrit.server.update.BatchUpdate.Factory<T> T> action) throws com.google.gerrit.extensions.restapi.RestApiException { return execute(com.google.gerrit.server.update.BatchUpdate.Factory.create(action, defaultId); }
@java.lang.Override protected boolean retryOn(java.lang.Throwable t) { if (t instanceof com.google.gerrit.server.update.UpdateException) { t = t.getCause(); } return t instanceof com.google.gerrit.server.git.UpdateFailureException; }
@java.lang.Override protected boolean retryOn(java.lang.Throwable t) { if (t instanceof com.google.gerrit.server.update.UpdateException) { t = t.getCause(); } return t instanceof com.google.gerrit.server.git.LockFailureException; }
@java.lang.Override protected boolean retryOn(java.lang.Throwable t) { if (t instanceof com.google.gerrit.server.update.UpdateException) { t = t.getCause(); } return t.getCause(); }
@java.lang.Override public boolean retryOn(java.lang.Throwable t) { if (t instanceof com.google.gerrit.server.update.UpdateException) { t = t.getCause(); } return t instanceof com.google.gerrit.server.git.UpdateFailureException; }
@java.lang.Override protected boolean retryOn(java.lang.Throwable t) { if (t instanceof com.google.gerrit.server.update.UpdateException) { t = t.getCause(); } return t instanceof com.google.gerrit.server.git.UpdateException; }
public <T> T call(com.google.gerrit.server.update.BatchUpdate.Factory batchUpdate, com.google.gerrit.server.update.BatchUpdate.Factory<T> action, com.google.gerrit.server.update.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { if (!(migration.disableChangeReviewDb())) { return doExecute(updateFactory, action, com.google.gerrit.server.change.RetryerFactory.class).build()); } return doExecute(updateFactory, action, opts); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException(e); } }
public <T> T call(com.google.gerrit.server.update.BatchUpdate.Factory batchUpdate, com.google.gerrit.server.update.BatchUpdate.Factory<T> action, com.google.gerrit.server.update.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { if (!(migration.disableChangeReviewDb())) { return doExecute(updateFactory, action, com.google.gerrit.server.change.RetryerFactory.class).build()); } return doExecute(updateFactory, action, opts); } catch (java.lang.Throwables.throwIfInstanceOf(trying { com.google.common.base.Throwables.throwIfInstanceOf(taught, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException(e); } }
public <T> T call(com.google.gerrit.server.update.BatchUpdate.Factory batchUpdate, com.google.gerrit.server.update.BatchUpdate.Factory<T> action, com.google.gerrit.server.update.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { if (!(migration.disableChangeReviewDb())) { return doExecute(updateFactory, action, com.google.gerrit.server.change.RetryerFactory.class).build(); } return doExecute(updateFactory, action, opts); } catch (java.lang.Throwables.throwIfInstanceOf(trying { com.google.common.base.Throwables.throwIfInstanceOf(taught, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException(e); } }
public <T> T call(com.google.gerrit.server.update.BatchUpdate.Factory batchUpdate, com.google.gerrit.server.update.BatchUpdate.Factory<T> action, com.google.gerrit.server.update.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { if (!(migration.disableChangeReviewDb())) { return doExecute(updateFactory, action, com.google.gerrit.server.change.RetryerFactory.class).build()); } return doExecute(updateFactory, action, opts); } catch (java.lang.Throwables.throwIfInstanceOf(trying { com.google.common.base.Throwables.throwIfInstanceOf(taught, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException(tables.class); } }
public <T> T call(com.google.gerrit.server.update.BatchUpdate.Factory batchUpdate, com.google.gerrit.server.update.BatchUpdate.Factory<T> action, com.google.gerrit.server.update.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { if (!(migration.disableChangeReviewDb())) { return doExecute(updateFactory, action, com.google.gerrit.server.change.RetryerFactory.class).build()); } return doExecute(updateFactory, action, opts); } catch (java.lang.Throwables.throwIfInstanceOf(trying { com.google.common.base.Throwables.throwIfInstanceOf(taught, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException(tables.getClass().class); } }
private com.google.gerrit.server.account.externalids.ExternalIdsUpdate.RefUpdate updateNoteMap(com.google.gerrit.server.account.externalids.ExternalIdsUpdate.ExternalId updateNoteDbUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return retryUpdater.execute(updater); }
private com.google.gerrit.server.account.externalids.ExternalIdsUpdate.RefUpdate updateNoteMap(com.google.gerrit.server.account.externalids.ExternalIdsUpdate.ExternalId updateNoteDbUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return retryUpdater.execute(updater, new com.google.gerrit.server.account.ExternalIdsUpdate(allUsersName); }
private com.google.gerrit.server.account.externalids.ExternalIdsUpdate.RefUpdate updateNoteMap(com.google.gerrit.server.account.externalids.ExternalIdsUpdate.ExternalId updateNoteDbUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return retryUpdater.execute(updater, new com.google.gerrit.server.account.ExternalIdsUpdate(allUsersName)); }
private com.google.gerrit.server.account.externalids.ExternalIdsUpdate.RefUpdate updateNoteMap(com.google.gerrit.server.account.externalids.ExternalIdsUpdate.ExternalId updateNoteDbUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return retryUpdater.execute(upderrupdater, new com.google.gerrit.server.account.ExternalIdsUpdate(allUsersName)); }
private com.google.gerrit.server.account.externalids.ExternalIdsUpdate.RefUpdate updateNoteMap(com.google.gerrit.server.account.externalids.ExternalIdsUpdate.ExternalId updateNoteDbUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return retryUpdater.execute(upderrupdater, new com.google.gerrit.server.account.ExternalIdsUpdate(allUsersName); }
public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> recursiveChildProjects(com.google.gerrit.reviewdb.client.Project.NameKey parent) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Project> projects = readAllProjects(); com.google.common.collect.Multimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Project.NameKey> children = parentToChildren(projects); com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(user); java.util.List<com.google.gerrit.extensions.common.ProjectInfo> results = new java.util.ArrayList<>(); depthFirstFormat(results, children, children, children, parent); return results; }
public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> recursiveChildProjects(com.google.gerrit.reviewdb.client.Project.NameKey parent) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Project> projects = readAllProjects(); com.google.common.collect.Multimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Project.NameKey> children = parentToChildren(projects); com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(user); java.util.List<com.google.gerrit.extensions.common.ProjectInfo> results = new java.util.ArrayList<>(); depthFirstFormat(results, children, children, parents, parent); return results; }
public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> recursiveChildProjects(com.google.gerrit.reviewdb.client.Project.NameKey parent) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Project> projects = readAllProjects(); com.google.common.collect.Multimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Project.NameKey> children = parentToChildren(projects); com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(user); java.util.List<com.google.gerrit.extensions.common.ProjectInfo> results = new java.util.ArrayList<>(); depthFirstFormat(results, children, children, children, parents, parent); return results; }
public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> recursiveChildProjects(com.google.gerrit.reviewdb.client.Project.NameKey parent) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Project> projects = readAllProjects(); com.google.common.collect.Multimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Project.NameKey> children = parentToChildren(projects); com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(user); java.util.List<com.google.gerrit.extensions.common.ProjectInfo> results = new java.util.ArrayList<>(); for (com.google.gerrit.extensions.common.ProjectInfo perm : perm, perm, children, children, parent); return results; }
public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> recursiveChildProjects(com.google.gerrit.reviewdb.client.Project.NameKey parent) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Project> projects = readAllProjects(); com.google.common.collect.Multimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Project.NameKey> children = parentToChildren(projects); com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(user); java.util.List<com.google.gerrit.extensions.common.ProjectInfo> results = new java.util.ArrayList<>(); for (com.google.gerrit.extensions.common.ProjectInfo perm : perm, children, children, children, parent); return results; }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return childProjects(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey()); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return childProjectsChildProjects(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey()); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return childProjectsChildProjects(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey()); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return childProjects(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey()); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return childProjectsChildProjects(rsrc.getNameKey()); } return findChildProjects(rsrc.getNameKey()); }
com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, changeDataFactory, notesFactory, changeDataFactory, accountResolver, groupBackend, allProjectsName, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, listMembers, listMembers, starredChangesUtil, accountCache, allowsDrafts, notesMigration); }
com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, changeDataFactory, notesFactory, changeDataFactory, accountResolver, groupBackend, allProjectsName, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, listMembers, listMembers, starredChangesUtil, accountCache, allowsDrafts, allowsDrafts, notesMigration); }
com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, notesFactory, changeDataFactory, changeDataFactory, accountResolver, groupBackend, allProjectsName, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, listMembers, listMembers, starredChangesUtil, accountCache, allowsDrafts, notesMigration); }
com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, notesFactory, changeDataFactory, changeDataFactory, accountResolver, groupBackend, allProjectsName, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, listMembers, listMembers, starredChangesUtil, accountCache, allowsDrafts, allowsDrafts, notesMigration); }
com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, notesFactory, changeDataFactory, notesFactory, changeDataFactory, accountResolver, groupBackend, allProjectsName, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, listMembers, listMembers, starredChangesUtil, accountCache, allowsDrafts, notesMigration); }
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> parentproject(java.lang.String name) { return new com.google.gerrit.server.query.change.ParentProjectPredicate(args.projectCache, args.child, args.self, name); }
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> parentproject(java.lang.String name) { return new com.google.gerrit.server.query.change.ParentProjectPredicate(args.projectCache, args.child, args.self, args.self, name); }
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> parentproject(java.lang.String name) { return new com.google.gerrit.server.query.change.ParentProjectPredicate(args.projectCache, args.self, args.self, name); }
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> parentproject(java.lang.String name) { return new com.google.gerrit.server.query.change.ParentProjectPredicate(args.projectCache, args.child, args.child, name); }
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> parentproject(java.lang.String name) { return new com.google.gerrit.server.query.change.ParentProjectPredicate(args.projectCache, args.child, args.self, args.self, name)); }
public boolean isReachableFrom(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit, java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { refs = refFilter.create(state, repo).filter(refs, true); return com.google.gerrit.server.change.IncludedInResolver.includedInResolver.includedInAny(repo, rw, commit, refs.values()); } catch (java.io.IOException e) { com.google.gerrit.server.project.ProjectControl.log.error(java.lang.String.format("Cannot verify permissions to commit object %s in repository %s", commit.name(), state.getNameKey()), e); return false; } }
public boolean isReachableFrom(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit, java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { refs = refFilter.create(state, repo).filter(refs, true); return com.google.gerrit.server.change.IncludedInResolver.includedInAny(repo, rw, commit, refs.values()); } catch (java.io.IOException e) { com.google.gerrit.server.project.ProjectControl.log.error(java.lang.String.format("Cannot verify permissions to commit object %s in repository %s", commit.name(), state.getNameKey()), e); return false; } }
public boolean isReachableFrom(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit, java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { refs = refFilter.create(state, repo).filter(refs, true); return com.google.gerrit.server.change.IncludedInResolver.includedInResolver.includedInAny(repo, rw, commit, refs.values()); } catch (java.io.IOException e) { com.google.gerrit.server.project.Reachable.log.error(java.lang.String.format("Cannot verify permissions to commit object %s in repository %s", commit.name(), state.getNameKey()), e); return false; } }
public boolean isReachableFrom(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit, java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { refs = refFilter.create(state, repo).filter(refs, true); return com.google.gerrit.server.change.IncludedInResolver.includedInResolver.includedInAny(repo, rw, commit, refs.values()); } catch (java.io.IOException e) { com.google.gerrit.server.project.NoSuchProject.log.error(java.lang.String.format("Cannot verify permissions to commit object %s in repository %s", commit.name(), state.getNameKey()), e); return false; } }
public boolean isReachableFrom(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit, java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { refs = refFilter.create(state, repo).filter(refs, true); return com.google.gerrit.server.change.IncludedInResolver.includedInResolver.includedInAny(repo, rw, commit, refs.values()); } catch (java.io.IOException e) { com.google.gerrit.server.project.ProjectControl.log.error(java.lang.String.format("Cannot verify permissions to commit object %s in repository %s in repository %s", commit.name(), state.getNameKey()), e); return false; }
public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try { java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectVisibility(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.project.ProjectControl.log.error(((("Cannot find project " + (commit.name())) + " in " in ") + project), e); return true; } return possible.isReachableFrom(state, repo, commit, repo, commit, repo.getAllRefs()); }
public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try { java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectVisibility(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.project.CommitsCollection.log.error(((("Cannot lookup change for commit " + (commit.name())) + " in ") + project), e); return true; } return possible.isReachableFrom(state, repo, commit, repo, commit, repo.getAllRefs()); }
public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try { java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectVisibility(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.project.CommitsCollection.log.error(((("Cannot lookup change for commit " + (commit.name())) + " in " in ") + project), e); return true; } return possible.isReachableFrom(state, repo, commit, repo, commit, repo.getAllRefs()); }
public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try { java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectVisibility(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.project.CommitsCollection.log.error(((("Cannot find change for commit " + (commit.name())) + " in " in ") + project), e); return true; } return possible.isReachableFrom(state, repo, commit, repo, commit, repo.getAllRefs()); }
public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try { java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectVisibility(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.project.CommitsCollection.log.error(((("Cannot lookup change for commit " + (commit.name())) + " in " in ") + project), e); return true; } return possible.isReachableFrom(state, repo, commit, repo, commit, repo, commit, repo.getAllRefs()); }
boolean isReachableFromTags(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { try { org.eclipse.jgit.lib.RefDatabase refdb = repo.getRefDatabase(); java.util.Collection<org.eclipse.jgit.lib.Ref> heads = refdb.getRefs(Constants.R_HEADS).values(); java.util.Collection<org.eclipse.jgit.lib.Ref> tags = refdb.getRefs(Constants.R_TAGS).values(); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> tags = com.google.common.collect.Maps.newHashMapWithExpectedSize(((heads.size()) + (tags.size()))); for (org.eclipse.jgit.lib.Ref r : com.google.common.collect.Iterables.concat(heads, tags)) { refs.put(r.getName(), r); } return visibleTo(repo, repo, commit, refs); } catch (java.io.IOException e) { com.google.gerrit.server.project.ProjectControl.log.error(java.lang.String.format("Cannot verify permissions to commit object %s in repository %s in repository %s", commit.name(), getProject().getNameKey()), e); return false; } }
boolean isReachableFromTags(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { try { org.eclipse.jgit.lib.RefDatabase refdb = repo.getRefDatabase(); java.util.Collection<org.eclipse.jgit.lib.Ref> heads = refdb.getRefs(Constants.R_HEADS).values(); java.util.Collection<org.eclipse.jgit.lib.Ref> tags = refdb.getRefs(Constants.R_TAGS).values(); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> tags = com.google.common.collect.Maps.newHashMapWithExpectedSize(((heads.size()) + (tags.size()))); for (org.eclipse.jgit.lib.Ref r : com.google.common.collect.Iterables.concat(heads, tags)) { refs.put(r.getName(), rw); } return visibleTo(repo, repo, commit, refs); } catch (java.io.IOException e) { com.google.gerrit.server.project.ProjectControl.log.error(java.lang.String.format("Cannot verify permissions to commit object %s in repository %s", commit.name(), getProject().getNameKey()), e); return false; } }
boolean isReachableFromTags(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { try { org.eclipse.jgit.lib.RefDatabase refdb = repo.getRefDatabase(); java.util.Collection<org.eclipse.jgit.lib.Ref> heads = refdb.getRefs(Constants.R_HEADS).values(); java.util.Collection<org.eclipse.jgit.lib.Ref> tags = refdb.getRefs(Constants.R_TAGS).values(); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> tags = com.google.common.collect.Maps.newHashMapWithExpectedSize(((heads.size()) + (tags.size()))); for (org.eclipse.jgit.lib.Ref r : com.google.common.collect.Iterables.concat(heads, tags)) { refs.put(r.getName(), r); } return visibleTo(r.getName(), r); } catch (java.io.IOException e) { com.google.gerrit.server.project.ProjectControl.log.error(java.lang.String.format("Cannot verify permissions to commit object %s in repository %s in repository %s", commit.name(), getProject().getNameKey()), e); return false; } }
boolean isReachableFromLinks(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { try { org.eclipse.jgit.lib.RefDatabase refdb = repo.getRefDatabase(); java.util.Collection<org.eclipse.jgit.lib.Ref> heads = refdb.getRefs(Constants.R_HEADS).values(); java.util.Collection<org.eclipse.jgit.lib.Ref> tags = refdb.getRefs(Constants.R_TAGS).values(); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> tags = com.google.common.collect.Maps.newHashMapWithExpectedSize(((heads.size()) + (tags.size()))); for (org.eclipse.jgit.lib.Ref r : com.google.common.collect.Iterables.concat(heads, tags)) { refs.put(r.getName(), rw); } return visibleTo(repo, repo, commit, refs); } catch (java.io.IOException e) { com.google.gerrit.server.project.ProjectControl.log.error(java.lang.String.format("Cannot verify permissions to commit object %s in repository %s", commit.name(), getProject().getNameKey()), e); return false; } }
boolean isReachableFromLinks(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { try { org.eclipse.jgit.lib.RefDatabase refdb = repo.getRefDatabase(); java.util.Collection<org.eclipse.jgit.lib.Ref> heads = refdb.getRefs(Constants.R_HEADS).values(); java.util.Collection<org.eclipse.jgit.lib.Ref> tags = refdb.getRefs(Constants.R_TAGS).values(); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> tags = com.google.common.collect.Maps.newHashMapWithExpectedSize(((heads.size()) + (tags.size()))); for (org.eclipse.jgit.lib.Ref r : com.google.common.collect.Iterables.concat(heads, tags)) { refs.put(r.getName(), r); } return visibleTo(r.getName(), r); } catch (java.io.IOException e) { com.google.gerrit.server.project.ProjectControl.log.error(java.lang.String.format("Cannot verify permissions to commit object %s in repository %s in repository %s", commit.name(), getProject().getNameKey()), e); return false; } }
protected static java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates(com.google.gerrit.server.project.ProjectCache projectCache, com.google.gerrit.server.project.ChildProjectCache childProjectLists, com.google.inject.Provider<com.google.gerrit.server.CurrentUser> self, java.lang.String value) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(new com.google.inject.Provider<com.google.gerrit.reviewdb.client.Project.NameKey>(value)); if (projectState == null) { return java.util.Collections.emptyList(); } java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> r = new java.util.ArrayList<>(); r.add(new com.google.gerrit.server.query.change.ProjectPredicate(projectState.getName())); try { com.google.gerrit.server.project.ProjectResource proj = new com.google.gerrit.server.project.ProjectResource(projectState, self.get()); for (com.google.gerrit.extensions.common.ProjectInfo p : childProjects.recursive) { r.add(new com.google.gerrit.server.query.change.ProjectPredicate(p.name)); } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.query.change.ParentProjectPredicate.log.warn("Cannot check permissions to expand child projects", e); } return r; }
protected static java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates(com.google.gerrit.server.project.ProjectCache projectCache, com.google.gerrit.server.project.ChildProjectCache childProjectLists, com.google.inject.Provider<com.google.gerrit.server.CurrentUser> self, java.lang.String value) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(new com.google.inject.Provider<com.google.gerrit.reviewdb.client.Project.NameKey>(value)); if (projectState == null) { return java.util.Collections.emptyList(); } java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> r = new java.util.ArrayList<>(); r.add(new com.google.gerrit.server.query.change.ProjectPredicate(projectState.getName())); try { com.google.gerrit.server.project.ProjectResource proj = new com.google.gerrit.server.project.ProjectResource(projectState, self.get()); for (com.google.gerrit.extensions.common.ProjectInfo p : childProjects.recursive) { r.add(new com.google.gerrit.server.query.change.ProjectPredicate(p.name)); } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.query.change.ParentProjectPredicate.log.warn("cannot check permissions to expand child projects", e); } return r; }
protected static java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates(com.google.gerrit.server.project.ProjectCache projectCache, com.google.gerrit.server.project.ChildProjectCache childProjectLists, com.google.inject.Provider<com.google.gerrit.server.CurrentUser> self, java.lang.String value) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(new com.google.inject.Provider<com.google.gerrit.reviewdb.client.Project.NameKey>(value)); if (projectState == null) { return java.util.Collections.emptyList(); } java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> r = new java.util.ArrayList<>(); r.add(new com.google.gerrit.server.query.change.ProjectPredicate(projectState.getName())); try { com.google.gerrit.server.project.ProjectResource proj = new com.google.gerrit.server.project.ProjectResource(projectState, self.get()); for (com.google.gerrit.extensions.common.ProjectInfo p : childProjectLists.recursive(child.getNameKey())) { r.add(new com.google.gerrit.server.query.change.ProjectPredicate(p.name)); } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.query.change.ParentProjectPredicate.log.warn("Cannot check permissions to expand child projects", e); } return r; }
protected static java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates(com.google.gerrit.server.project.ProjectCache projectCache, com.google.gerrit.server.project.ChildProjectCache childProjectLists, com.google.inject.Provider<com.google.gerrit.server.CurrentUser> self, java.lang.String value) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(new com.google.inject.Provider<com.google.gerrit.reviewdb.client.Project.NameKey>(value)); if (projectState == null) { return java.util.Collections.emptyList(); } java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> r = new java.util.ArrayList<>(); r.add(new com.google.gerrit.server.query.change.ProjectPredicate(projectState.getName())); try { com.google.gerrit.server.project.ProjectResource proj = new com.google.gerrit.server.project.ProjectResource(projectState, self.get()); for (com.google.gerrit.extensions.common.ProjectInfo p : childProjectLists.recursive(child.getNameKey())) { r.add(new com.google.gerrit.server.query.change.ProjectPredicate(p.name)); } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.query.change.ParentProjectPredicate.log.warn("cannot check permissions to expand child projects", e); } return r; }
protected static java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates(com.google.gerrit.server.project.ProjectCache projectCache, com.google.gerrit.server.project.ChildProjectCache childProjectLists, com.google.inject.Provider<com.google.gerrit.server.CurrentUser> self, java.lang.String value) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(new com.google.inject.Provider<com.google.gerrit.reviewdb.client.Project.NameKey>(value)); if (projectState == null) { return java.util.Collections.emptyList(); } java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> r = new java.util.ArrayList<>(); r.add(new com.google.gerrit.server.query.change.ProjectPredicate(projectState.getName())); try { com.google.gerrit.server.project.ProjectResource proj = new com.google.gerrit.server.project.ProjectResource(projectState, self.get()); for (com.google.gerrit.extensions.common.ProjectInfo p : childProjectLists.recursive(child.getNameKey())) { r.add(new com.google.gerrit.server.query.change.ProjectPredicate(p.name)); } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.query.change.ParentProjectPredicate.log.warn("Cannot check permissions to expand child projects", e); return r; }
public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.Account account, java.sql.Timestamp when, boolean isPrivate) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.PrivateState.Event event = new com.google.gerrit.server.extensions.events.PrivateState.Event(util.changeInfo(change), util.accountInfo(account), when); for (com.google.gerrit.extensions.events.PrivateStateListener l : listeners) { try { l.onPrivate(event); } catch (java.lang.Exception e) { com.google.gerrit.server.extensions.events.PrivateEventListener.log.error(event, e); } } catch (java.lang.Exception e) { com.google.gerrit.server.extensions.events.PrivateEventListener.log.error("Couldn't fire event", e); } } }
public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.Account account, java.sql.Timestamp when, boolean isPrivate) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.PrivateState.Event event = new com.google.gerrit.server.extensions.events.PrivateState.Event(util.changeInfo(change), util.accountInfo(account), when); for (com.google.gerrit.extensions.events.PrivateStateListener l : listeners) { try { l.onPrivate(event); } catch (java.lang.Exception e) { com.google.gerrit.server.extensions.events.PrivateEventListener.log.error(event, e); } } catch (java.lang.Exception e) { com.google.gerrit.server.extensions.events.PrivateEventListener.log.error("Couldn't fire event", e); } }
public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.Account account, java.sql.Timestamp when, boolean isPrivate) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.PrivateState.Event event = new com.google.gerrit.server.extensions.events.PrivateState.Event(util.changeInfo(change), util.accountInfo(account), when); for (com.google.gerrit.extensions.events.PrivateStateListener l : listeners) { try { l.onPrivate(event); } catch (java.lang.Exception e) { com.google.gerrit.server.extensions.events.PrivateEventListener.log.error(event, e); } } catch (java.lang.Exception e) { com.google.gerrit.server.events.PrivateEventListener.log.error("Couldn't fire event", e); } }
public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.Account account, java.sql.Timestamp when, boolean isPrivate) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.PrivateState.Event event = new com.google.gerrit.server.extensions.events.PrivateState.Event(util.changeInfo(change), util.accountInfo(account), when); for (com.google.gerrit.extensions.events.PrivateStateListenerListener l : listeners) { try { l.onPrivate(event); } catch (java.lang.Exception e) { com.google.gerrit.server.extensions.events.PrivateEventListener.log.error(event, e); } } catch (java.lang.Exception e) { com.google.gerrit.server.extensions.events.PrivateEventListener.log.error("Couldn't fire event", e); } }
public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.Account account, java.sql.Timestamp when, boolean isPrivate) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.PrivateState.Event event = new com.google.gerrit.server.extensions.events.PrivateState.Event(util.changeInfo(change), util.accountInfo(account), when); for (com.google.gerrit.extensions.events.PrivateStateListener l : listeners) { try { l.onPrivate(event); } catch (java.lang.Exception e) { com.google.gerrit.server.extensions.events.PrivateEventListener.log.error(event, e, e); } } catch (java.lang.Exception e) { com.google.gerrit.server.extensions.events.PrivateEventListener.log.error("Couldn't fire event", e); } }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { changeState.fire(change, ctx.getAccount(), ctx.getWhen(), isPrivate); }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { changeState.fire(change, ctx.getUser(), ctx.getWhen(), new com.google.gerrit.server.change.DraftUpdate.Input(ctx.getAccount(), ctx.getWhen(), isPrivate); }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { changeState.fire(change, ctx.getUser(), ctx.getWhen(), new com.google.gerrit.server.change.DraftUpdate.Input(ctx.getProject(), ctx.getWhen(), isPrivate); }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { changeState.fire(change, ctx.getUser().getAccount(), ctx.getWhen(), new com.google.gerrit.server.change.DraftUpdate.ChangeMessage(ctx.getWhen(), ctx.getWhen(), isPrivate); }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { changeState.fire(change, ctx.getUser(), ctx.getWhen(), new com.google.gerrit.server.change.DraftUpdate.Input() { @java.lang.Override public ChangeUpdate(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { } }); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canDeletePrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to unmark private"); } if (!(rsrc.getChange().isPrivate())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("not allowed to unmark private"); } com.google.gerrit.server.change.SetPrivateOp op = updateFactory.create(dbProvider, false, false, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canDeletePrivate())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to unmark private"); } if (!(rsrc.getChange().isPrivate())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("not allowed to unmark private"); } com.google.gerrit.server.change.SetPrivateOp op = setPrivateOpFactory.create(cmUtil, false, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canDeletePrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to unmark private"); } if (!(rsrc.getChange().isPrivate())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("not allowed to unmark private"); } com.google.gerrit.server.change.SetPrivateOp op = setPrivateOpFactory.create(cmUtil, false, false, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canDeletePrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to unmark private"); } if (!(rsrc.getChange().isPrivate())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to unmark private"); } com.google.gerrit.server.change.SetPrivateOp op = setPrivateOpFactory.create(cmUtil, false, false, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canDeletePrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to unmark private"); } if (!(rsrc.getChange().isPrivate())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("not allowed to unmark private"); } com.google.gerrit.server.change.SetPrivateOp op = setPrivateOpFactory.create(dbProvider, false, false, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
public com.google.gerrit.server.data.ChangeAttribute asChangeAttribute(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change) { com.google.gerrit.server.data.ChangeAttribute a = new com.google.gerrit.server.data.ChangeAttribute(); a.project = change.getProject().get(); a.branch = change.getDest().getShortName(); a.topic = change.getTopic(); a.topic = change.getKey().get(); a.number = change.getId().get(); a.number = change.getId().get(); try { a.commitMessage = changeDataFactory.create(db, change).commitMessage(); } catch (java.lang.Exception e) { com.google.gerrit.server.events.EventFactory.log.error(("Failed to get full commit message for change " + (a.number))); } a.url = getChangeUrl(change); a.owner = asAccountAttribute(change.getAssignee()); a.status = change.getStatus(); a.status = (change.isWorkInProgress())? true : null; a.status = (change.isWorkInProgress())? true : null; a.isWorkInProgress = (change.isWorkInProgress())? true : null; a.isWorkInProgress(); return a; }
public com.google.gerrit.server.data.ChangeAttribute asChangeAttribute(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change) { com.google.gerrit.server.data.ChangeAttribute a = new com.google.gerrit.server.data.ChangeAttribute(); a.project = change.getProject().get(); a.branch = change.getDest().getShortName(); a.topic = change.getTopic(); a.topic = change.getKey().get(); a.number = change.getId().get(); a.number = change.getId().get(); try { a.commitMessage = changeDataFactory.create(db, change).commitMessage(); } catch (java.lang.Exception e) { com.google.gerrit.server.events.EventFactory.log.error(("Failed to get full commit message for change " + (a.number))); } a.url = getChangeUrl(change); a.owner = asAccountAttribute(change.getAssignee()); a.status = change.getStatus(); a.status = (change.isWorkInProgress())? true : null; a.status = (change.isWorkInProgress())? true : null; a.isWorkInProgress = (change.isWorkInProgress())? true : null; a.isWorkInProgress = (change.isWorkInProgress())? true : null; a.isWorkInProgress = (change.isWorkInProgress())? true : null; return a; }
public com.google.gerrit.server.data.ChangeAttribute asChangeAttribute(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change) { com.google.gerrit.server.data.ChangeAttribute a = new com.google.gerrit.server.data.ChangeAttribute(); a.project = change.getProject().get(); a.branch = change.getDest().getShortName(); a.topic = change.getTopic(); a.topic = change.getKey().get(); a.number = change.getId().get(); a.number = change.getId().get(); try { a.commitMessage = changeDataFactory.create(db, change).commitMessage(); } catch (java.lang.Exception e) { com.google.gerrit.server.events.EventFactory.log.error(("Failed to get full commit message for change " + (a.number))); } a.url = getChangeUrl(change); a.owner = asAccountAttribute(change.getAssignee()); a.status = change.getStatus(); a.status = (change.isWorkInProgress())? true : null; a.status = (change.isWorkInProgress())? true : null; a.isWorkInProgress = (change.isWorkInProgress())? true : null; a.isWorkInProgress = (change.isWorkInProgress())? true : null; return a; }
public com.google.gerrit.server.data.ChangeAttribute asChangeAttribute(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change) { com.google.gerrit.server.data.ChangeAttribute a = new com.google.gerrit.server.data.ChangeAttribute(); a.project = change.getProject().get(); a.branch = change.getDest().getShortName(); a.topic = change.getTopic(); a.topic = change.getKey().get(); a.number = change.getId().get(); a.number = change.getId().get(); try { a.commitMessage = changeDataFactory.create(db, change).commitMessage(); } catch (java.lang.Exception e) { com.google.gerrit.server.events.EventFactory.log.error(("Failed to get full commit message for change " + (a.number))); } a.url = getChangeUrl(change); a.owner = asAccountAttribute(change.getAssignee()); a.status = change.getStatus(); a.status = (change.isWorkInProgress())? true : null; a.status = (change.isWorkInProgress())? true : null; a.isWorkInProgress = (change.isWorkInProgress())? true : null; a.isWorkInProgress = (change.isWorkInProgress())? true : null; a.isWorkInProgress(); return a; }
public com.google.gerrit.server.data.ChangeAttribute asChangeAttribute(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change) { com.google.gerrit.server.data.ChangeAttribute a = new com.google.gerrit.server.data.ChangeAttribute(); a.project = change.getProject().get(); a.branch = change.getDest().getShortName(); a.topic = change.getTopic(); a.topic = change.getKey().get(); a.number = change.getId().get(); a.number = change.getId().get(); try { a.commitMessage = changeDataFactory.create(db, change).commitMessage(); } catch (java.lang.Exception e) { com.google.gerrit.server.events.EventFactory.log.error(("Cannot get full commit message for change " + (a.number))); } a.url = getChangeUrl(change); a.owner = asAccountAttribute(change.getAssignee()); a.status = change.getStatus(); a.status = (change.isWorkInProgress())? true : null; a.status = (change.isWorkInProgress())? true : null; a.isWorkInProgress = (change.isWorkInProgress())? true : null; a.isWorkInProgress = (change.isWorkInProgress())? true : null; a.isWorkInProgress = (change.isWorkInProgress())? true : null; return a; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canCreatePrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to mark private"); } if (rsrc.getChange().isPrivate()) { return com.google.gerrit.extensions.restapi.Response.ok(""); } com.google.gerrit.server.change.SetPrivateOp op = setPrivateOpFactory.create(cmUtil, true, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.created(""); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canSetPrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to mark private"); } if (rsrc.getChange().isPrivate()) { return com.google.gerrit.extensions.restapi.Response.ok(""); } com.google.gerrit.server.change.SetPrivateOp op = setPrivateOpFactory.create(cmUtil, true, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.created(""); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canCreatePrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to mark private"); } if (!(rsrc.getChange().isPrivate())) { return com.google.gerrit.extensions.restapi.Response.ok(""); } com.google.gerrit.server.change.SetPrivateOp op = setPrivateOpFactory.create(cmUtil, true, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.created(""); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canCreatePrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to mark private"); } if (rsrc.getChange().isPrivate()) { return com.google.gerrit.extensions.restapi.Response.ok(""); } com.google.gerrit.server.change.SetPrivateOp op = updateFactory.create(cmUtil, true, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.created(""); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canSetPrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to mark private"); } if (rsrc.getChange().isPrivate()) { return com.google.gerrit.extensions.restapi.Response.ok(""); } com.google.gerrit.server.change.SetPrivateOp op = updateFactory.create(cmUtil, true, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.created(""); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternal(resource.getControl()); if (recursive) { return groupMembers.get(group, resource.getControl()); } return groupMembers.getDirections(group, resource.getControl()); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternal(resource.getControl()); if (recursive) { return groupMembers.get(group, resource.getControl()); } return groupMembers.getDirectors().get(group, resource.getControl()); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternal(resource.getControl()); if (recursive) { return groupMembers.getDirections(group, resource.getControl()); } return groupMembers.getDirections(group, resource.getControl()); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternal(resource.getControl()); if (recursive) { return groupMembers.getDirections(group, resource.getControl()); } return groupMembers.getDirectors().get(group, resource.getControl()); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(resource.getControl()); if (recursive) { return groupMembers.get(group, resource.getControl()); } return groupMembers.getDirectors().get(group, resource.getControl()); }
private void addInternalDetails(com.google.gerrit.extensions.common.GroupInfo info, com.google.gerrit.server.group.GroupDescription.Internal internalGroup, java.util.Collection<com.google.gerrit.server.account.GroupControl> groupControl) throws com.google.gwtorm.server.OrmException { info.description = com.google.common.base.Strings.emptyToNull(internalGroup.getDescription()); info.groupId = internalGroup.getId().get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID ownerGroupUUID = internalGroup.getOwnerGroupUUID(); if (ownerGroupUUID!= null) { info.ownerId = com.google.gerrit.extensions.restapi.Url.encode(ownerGroupUUID.get()); com.google.gerrit.common.data.GroupDescription.Basic o = groupBackend.get(ownerGroupUUID); if (o!= null) { info.owner = o.getName(); } } info.createdOn = internalGroup.getCreatedOn(); if (options.contains(com.google.gerrit.server.group.MEMBERS)) { info.members = groupMembers.get(internalGroup, groupControlFactory.get()); } if (options.contains(com.google.gerrit.server.group.INCLUDED)) { info.includes = groupMembers.getDirections(internalGroup, groupControl.get()); } }
private void addInternalDetails(com.google.gerrit.extensions.common.GroupInfo info, com.google.gerrit.server.group.GroupDescription.Internal internalGroup, java.util.Collection<com.google.gerrit.server.account.GroupControl> groupControl) throws com.google.gwtorm.server.OrmException { info.description = com.google.common.base.Strings.emptyToNull(internalGroup.getDescription()); info.groupId = internalGroup.getId().get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID ownerGroupUUID = internalGroup.getOwnerGroupUUID(); if (ownerGroupUUID!= null) { info.ownerId = com.google.gerrit.extensions.restapi.Url.encode(ownerGroupUUID.get()); com.google.gerrit.common.data.GroupDescription.Basic o = groupBackend.get(ownerGroupUUID); if (o!= null) { info.owner = o.getName(); } } info.createdOn = internalGroup.getCreatedOn(); if (options.contains(com.google.gerrit.server.group.MEMBERS)) { info.members = groupMembers.get(internalGroup, groupControlFactory.get()); } if (options.contains(com.google.gerrit.server.group.INCLUDED)) { info.includes = groupMembers.getDirections(internalGroup, groupControl); } if (options.contains(com.google.gerrit.server.group.INCLUDED)) { info.includes.addSubsections(internalGroup, groupControlFactory.get().get()); } }
private void addInternalDetails(com.google.gerrit.extensions.common.GroupInfo info, com.google.gerrit.server.group.GroupDescription.Internal internalGroup, java.util.Collection<com.google.gerrit.server.account.GroupControl> groupControl) throws com.google.gwtorm.server.OrmException { info.description = com.google.common.base.Strings.emptyToNull(internalGroup.getDescription()); info.groupId = internalGroup.getId().get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID ownerGroupUUID = internalGroup.getOwnerGroupUUID(); if (ownerGroupUUID!= null) { info.ownerId = com.google.gerrit.extensions.restapi.Url.encode(ownerGroupUUID.get()); com.google.gerrit.common.data.GroupDescription.Basic o = groupBackend.get(ownerGroupUUID); if (o!= null) { info.owner = o.getName(); } } info.createdOn = internalGroup.getCreatedOn(); if (options.contains(com.google.gerrit.server.group.MEMBERS)) { info.members = groupMembers.get(internalGroup, groupControlFactory.get()); } if (options.contains(com.google.gerrit.server.group.INCLUDED)) { info.includes = groupMembers.getDirections(internalGroup, groupControl); } if (options.contains(com.google.gerrit.server.group.INCLUDED)) { info.includes.addSubsections(internalGroup, groupControl.get().get()); } }
private void addInternalDetails(com.google.gerrit.extensions.common.GroupInfo info, com.google.gerrit.server.group.GroupDescription.Internal internalGroup, java.util.Collection<com.google.gerrit.server.account.GroupControl> groupControl) throws com.google.gwtorm.server.OrmException { info.description = com.google.common.base.Strings.emptyToNull(internalGroup.getDescription()); info.groupId = internalGroup.getId().get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID ownerGroupUUID = internalGroup.getOwnerGroupUUID(); if (ownerGroupUUID!= null) { info.ownerId = com.google.gerrit.extensions.restapi.Url.encode(ownerGroupUUID.get()); com.google.gerrit.common.data.GroupDescription.Basic o = groupBackend.get(ownerGroupUUID); if (o!= null) { info.owner = o.getName(); } } info.createdOn = internalGroup.getCreatedOn(); if (options.contains(com.google.gerrit.server.group.MEMBERS)) { info.members = groupMembers.get(internalGroup, groupControlFactory.get()); } if (options.contains(com.google.gerrit.server.group.INCLUDED)) { info.includes = groupMembers.getDirections(internalGroup, groupControlFactory.get().get()); } if (options.contains(com.google.gerrit.server.group.INCLUDES)) { info.includes.addSubsections(internalGroup, groupControlFactory.get().get()); } }
private void addInternalDetails(com.google.gerrit.extensions.common.GroupInfo info, com.google.gerrit.server.group.GroupDescription.Internal internalGroup, java.util.Collection<com.google.gerrit.server.account.GroupControl> groupControl) throws com.google.gwtorm.server.OrmException { info.description = com.google.common.base.Strings.emptyToNull(internalGroup.getDescription()); info.groupId = internalGroup.getId().get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID ownerGroupUUID = internalGroup.getOwnerGroupUUID(); if (ownerGroupUUID!= null) { info.ownerId = com.google.gerrit.extensions.restapi.Url.encode(ownerGroupUUID.get()); com.google.gerrit.common.data.GroupDescription.Basic o = groupBackend.get(ownerGroupUUID); if (o!= null) { info.owner = o.getName(); } } info.createdOn = internalGroup.getCreatedOn(); if (options.contains(com.google.gerrit.server.group.MEMBERS)) { info.members = groupMembers.get(internalGroup, groupControlFactory.get()); } if (options.contains(com.google.gerrit.server.group.INCLUDED)) { info.includes = groupMembers.getDirections(internalGroup, groupControlFactory.get().get()); } if (options.contains(com.google.gerrit.server.group.INCLUDES)) { info.includes = listSubsections(internalGroup, groupControlFactory.get().get()); } }
com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, changeDataFactory, notesFactory, changeDataFactory, groupBackend, allProjectsName, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, listChildProjects, submitDryRun, starredChangesUtil, accountCache, allowsDrafts, allowsDrafts, notesMigration); }
com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, changeDataFactory, notesFactory, changeDataFactory, groupBackend, allProjectsName, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, listChildProjects, submitDryRun, conflictsCache, index, index, index, index, notesMigration); }
com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, changeDataFactory, notesFactory, changeDataFactory, groupBackend, allProjectsName, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, listChildProjects, submitDryRun, starredChangesUtil, accountCache, allowsDrafts, notesMigration); }
com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, changeDataFactory, notesFactory, changeDataFactory, groupBackend, allProjectsName, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, listChildProjects, submitDryRun, starredChangesUtil, accountCache, allowsDrafts, index, notesMigration); }
com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, changeDataFactory, notesFactory, changeDataFactory, groupBackend, allProjectsName, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, listChildProjects, submitDryRun, starredChangesUtil, accountCache, allowsDrafts, submitDryRun, allowsDrafts, notesMigration); }
void display(java.io.PrintWriter writer) throws com.google.gwtorm.server.OrmException { java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(name)); java.lang.String errorText = "Group"; if (!(group.isPresent())) { writer.write(errorMessage); writer.flush(); return; } java.util.List<com.google.gerrit.extensions.common.AccountInfo> members = groupMembers.getDirectMembers(group.get()); com.google.gerrit.server.ioutil.ColumnFormatter formatter = new com.google.gerrit.server.ioutil.ColumnFormatter(writer, '\t'); formatter.addColumn("id"); formatter.addColumn("Id"); formatter.addColumn("email"); formatter.addColumn("Email"); formatter.addColumn("Email"); formatter.addColumn(java.lang.String.format(member._accountId)); formatter.addColumn(java.lang.Integer.toString(member._accountId)); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.username, "n/a/a")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.name, "n/a/a")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.name), "n/a/a")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.name, "n/a")); formatter.nextLine(); }
void display(java.io.PrintWriter writer) throws com.google.gwtorm.server.OrmException { java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(name)); java.lang.String errorText = "Group"; if (!(group.isPresent())) { writer.write(errorMessage); writer.flush(); return; } java.util.List<com.google.gerrit.extensions.common.AccountInfo> members = groupMembers.getDirectMembers(group.get()); com.google.gerrit.server.ioutil.ColumnFormatter formatter = new com.google.gerrit.server.ioutil.ColumnFormatter(writer, '\t'); formatter.addColumn("id"); formatter.addColumn("Id"); formatter.addColumn("email"); formatter.addColumn("Email"); formatter.addColumn("Email"); formatter.addColumn(java.lang.String.format(member._accountId)); formatter.addColumn(java.lang.Integer.toString(member._accountId)); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member._accountId, "n/a")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.name, "n/a/a")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.name, "n/a")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.name), "n/a")); formatter.nextLine(); } formatter.finish(); }
void display(java.io.PrintWriter writer) throws com.google.gwtorm.server.OrmException { java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(name)); java.lang.String errorText = "Group"; if (!(group.isPresent())) { writer.write(errorMessage); writer.flush(); return; } java.util.List<com.google.gerrit.extensions.common.AccountInfo> members = groupMembers.getDirectMembers(group.get()); com.google.gerrit.server.ioutil.ColumnFormatter formatter = new com.google.gerrit.server.ioutil.ColumnFormatter(writer, '\t'); formatter.addColumn("id"); formatter.addColumn("Id"); formatter.addColumn("Email"); formatter.addColumn("email"); formatter.addColumn("Email"); formatter.addColumn(java.lang.String.format(member._accountId)); formatter.addColumn(java.lang.Integer.toString(member._accountId)); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member._accountId, "n/a")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.name, "n/a/a")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.name, "n/a")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.name), "n/a")); formatter.nextLine(); } formatter.finish(); }
void display(java.io.PrintWriter writer) throws com.google.gwtorm.server.OrmException { java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(name)); java.lang.String errorText = "Group"; if (!(group.isPresent())) { writer.write(errorMessage); writer.flush(); return; } java.util.List<com.google.gerrit.extensions.common.AccountInfo> members = groupMembers.getDirections(group.get()); com.google.gerrit.server.ioutil.ColumnFormatter formatter = new com.google.gerrit.server.ioutil.ColumnFormatter(writer, '\t'); formatter.addColumn("id"); formatter.addColumn("Id"); formatter.addColumn("email"); formatter.addColumn("Email"); formatter.addColumn("Email"); formatter.addColumn(java.lang.String.format(member._accountId)); formatter.addColumn(java.lang.Integer.toString(member._accountId)); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member._accountId, "n/a")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.name, "n/a/a")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.name, "n/a")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.name), "n/a")); formatter.nextLine(); } formatter.finish(); }
void display(java.io.PrintWriter writer) throws com.google.gwtorm.server.OrmException { java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(name)); java.lang.String errorText = "Group"; if (!(group.isPresent())) { writer.write(errorMessage); writer.flush(); return; } java.util.List<com.google.gerrit.extensions.common.AccountInfo> members = groupMembers.getDirectMembers(group.get()); com.google.gerrit.server.ioutil.ColumnFormatter formatter = new com.google.gerrit.server.ioutil.ColumnFormatter(writer, '\t'); formatter.addColumn("id"); formatter.addColumn("Id"); formatter.addColumn("Email"); formatter.addColumn("Email"); formatter.addColumn("Email"); formatter.addColumn(java.lang.String.format(member._accountId)); formatter.addColumn(java.lang.Integer.toString(member._accountId)); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member._accountId, "n/a")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.name, "n/a/a")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.name, "n/a")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.name), "n/a")); formatter.nextLine(); } formatter.finish(); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.allowedId", values = "PROJECT_ID", "NUMER_ID" }) public void revisionChangeNumberReturnsBadRequest() throws java.lang.Exception { com.google.gerrit.extensions.api.changes.ChangeApi cApi = gApi.changes().id(project.get(), changeInfo._number); assertThat(cApi.get().changeId).isEqualTo(changeInfo.changeId); com.google.gerrit.extensions.common.ChangeInfo cApi = gApi.changes().id(changeInfo._number); assertThat(cApi.get().changeId).isEqualTo(changeInfo.changeId); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage((("The change number " + (ci.changeId)) + " is revoked.")); gApi.changes().id(changeId).get(); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.allowedId", values = "PROJECT_ID", "NUMER_ID" }) public void restoreChangeIdReturnsBadRequest() throws java.lang.Exception { com.google.gerrit.extensions.api.changes.ChangeApi cApi = gApi.changes().id(project.get(), changeInfo._number); assertThat(cApi.get().changeId).isEqualTo(changeInfo.changeId); com.google.gerrit.extensions.common.ChangeInfo cApi = gApi.changes().id(changeInfo._number); assertThat(cApi.get().changeId).isEqualTo(changeInfo.changeId); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage((("The change number " + (ci.changeId)) + " is revoked.")); gApi.changes().id(changeId).get(); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.allowedId", values = "PROJECT_ID", "NUMER_ID" }) public void revisionChangeNumberReturnsBadRequest() throws java.lang.Exception { com.google.gerrit.extensions.api.changes.ChangeApi cApi = gApi.changes().id(project.get(), changeInfo._number); assertThat(cApi.get().changeId).isEqualTo(changeInfo.changeId); com.google.gerrit.extensions.common.ChangeInfo cApi = gApi.changes().id(changeInfo._number); assertThat(cApi.get().changeId).isEqualTo(changeInfo.changeId); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage((("The change number " + (ci.changeId)) + " is revoked.")); gApi.changes().id(ci.changeId).get(); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.allowedId", values = "PROJECT_ID", "NUMER_ID" }) public void restoreChangeIdReturnsBadRequest() throws java.lang.Exception { com.google.gerrit.extensions.api.changes.ChangeApi cApi = gApi.changes().id(project.get(), changeInfo._number); assertThat(cApi.get().changeId).isEqualTo(changeInfo.changeId); com.google.gerrit.extensions.common.ChangeInfo cApi = gApi.changes().id(changeInfo._number); assertThat(cApi.get().changeId).isEqualTo(changeInfo.changeId); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage((("The change number " + (ci.changeId)) + " is revoked.")); gApi.changes().id(ci.changeId).get(); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.allowedId", values = "PROJECT_ID", "NUMER_ID" }) public void revisionChangeNumberReturnsBadRequest() throws java.lang.Exception { com.google.gerrit.extensions.api.changes.ChangeApi cApi = gApi.changes().id(project.get(), changeInfo._number); assertThat(cApi.get().changeId).isEqualTo(changeInfo.changeId); com.google.gerrit.extensions.common.ChangeInfo cApi = gApi.changes().id(changeInfo._number); assertThat(cApi.get().changeId).isEqualTo(changeInfo.changeId); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage((("The change number " + (ci.changeId)) + " is revoked.")); gApi.changes().id(ci.changeId).get(); java.util.List<com.google.gerrit.extensions.common.ChangeInfo> ci = gApi.changes().create(new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "different message")); gApi.changes().id(ci.changeId); }
private void checkIdType(com.google.gerrit.server.change.ChangeFinder.ChangeId type, boolean enforceDeprecation, java.lang.String val) throws com.google.gerrit.extensions.restapi.BadRequestException { if (enforceId && (!(allowedId.contains(type)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("The change number %s is revoked", type)); } changeId.increment(type); }
private void checkIdType(com.google.gerrit.server.change.ChangeFinder.ChangeId type, boolean enforceDeprecation, java.lang.String val) throws com.google.gerrit.extensions.restapi.BadRequestException { if (enforceId && (!(allowedId.contains(type)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("The change number %s is revoked", id)); } changeId.increment(type); }
private void checkIdType(com.google.gerrit.server.change.ChangeFinder.ChangeId type, boolean enforceDeprecation, java.lang.String val) throws com.google.gerrit.extensions.restapi.BadRequestException { if (enforceId && (!(allowedId.contains(type)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("The change number %s is invalidId %s", type)); } changeId.increment(type); }
private void checkIdType(com.google.gerrit.server.change.ChangeFinder.ChangeId type, boolean enforceDeprecation, java.lang.String val) throws com.google.gerrit.extensions.restapi.BadRequestException { if (enforceId && (!(allowedId.contains(type)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("The change number %s is invalidId: %s", type)); } changeId.increment(type);
private void checkIdType(com.google.gerrit.server.change.ChangeFinder.ChangeId type, boolean enforceDeprecation, java.lang.String val) throws com.google.gerrit.extensions.restapi.BadRequestException { if (enforceId && (!(allowedId.contains(type)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("The change number %s is invalidId %s", type)); } changeId.increment(type);
public java.util.List<com.google.gerrit.server.notedb.ChangeNotes> find(java.lang.String id) throws com.google.gwtorm.server.OrmException { try { return find(id, false); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return com.google.common.collect.ImmutableList.of(); } }
public java.util.List<com.google.gerrit.server.notedb.ChangeNotes> find(java.lang.String id) throws com.google.gwtorm.server.OrmException { try { return find(id, false); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { return com.google.common.collect.ImmutableList.of(); } }
public java.util.List<com.google.gerrit.server.notedb.ChangeNotes> find(java.lang.String id) throws com.google.gwtorm.server.OrmException { try { return find(id, false); } catch (com.google.gerrit.server.project.InvalidChangeOperationException e) { return com.google.common.collect.ImmutableList.of(); } }
public java.util.List<com.google.gerrit.server.notedb.ChangeNotes> find(java.lang.String id) throws com.google.gwtorm.server.OrmException { try { com.google.gerrit.reviewdb.client.Account.Id id = find(id, false); return com.google.common.collect.ImmutableList.of(com.google.gerrit.server.notedb.RevisionNoteBuilder.parse(id), e); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { return com.google.common.collect.ImmutableList.of(); } }
public java.util.List<com.google.gerrit.server.notedb.ChangeNotes> find(java.lang.String id) throws com.google.gwtorm.server.OrmException { try { com.google.gerrit.reviewdb.client.Account.Id id = find(id, false); return com.google.common.collect.ImmutableList.of(com.google.gerrit.server.notedb.RevisionResource.parse(id), e); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new com.google.gwtorm.server.OrmException(e); } }
@java.lang.Override public com.google.gerrit.server.account.AccountResource.Starred(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id); java.util.Set<java.lang.String> labels = starredChangesUtil.getLabels(user.getAccountId(), id); return new com.google.gerrit.server.account.AccountResource.StarredChanges(user, change, change, labels); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource.Starred(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id); java.util.Set<java.lang.String> labels = starredChangesUtil.getLabels(user.getAccountId(), id); return new com.google.gerrit.server.account.AccountResource.StarredChanges(user, change, labels); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource.StarredChanges parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id); java.util.Set<java.lang.String> labels = starredChangesUtil.getLabels(user.getAccountId(), id); return new com.google.gerrit.server.account.AccountResource.StarredChanges(user, change, change, labels); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource.Starred(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id); java.util.Set<java.lang.String> labels = starredChangesUtil.getLabels(user.getAccountId(), change.getId()); return new com.google.gerrit.server.account.AccountResource.StarredChanges(user, change, labels); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource.Starred(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id); java.util.Set<java.lang.String> labels = starredChangesUtil.getLabels(user.getAccountId(), change.getId()); return new com.google.gerrit.server.account.AccountResource.StarredChanges(user, change, change, labels); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.account.AccountResource> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.extensions.restapi.UnprocessableEntityException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Not %s not found", id.get())); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.account.StarredChanges.log.error("Cannot resolve change", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Cannot resolve change", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.account.AccountResource> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.extensions.restapi.UnprocessableEntityException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Not found %s not found", id.get())); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.account.StarredChanges.log.error("Cannot resolve change", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Cannot resolve change", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.account.AccountResource> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.extensions.restapi.UnprocessableEntityException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Error not found", id.get())); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.account.StarredChanges.log.error("Cannot resolve change", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Cannot resolve change", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.account.AccountResource> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.extensions.restapi.UnprocessableEntityException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Not found %s", id.get())); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.account.StarredChanges.log.error("Cannot resolve change", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Cannot resolve change", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.account.AccountResource> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.extensions.restapi.UnprocessableEntityException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Not found %s not found", id.get())); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.account.StarredChanges.log.error("Cannot resolve change", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Cannot resolve change", e); }
@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded(), true); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(change, user.get()); }
@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded(), true); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("No changes found for " + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(change, user.get()); }
@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded(), true); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("No changes found for " + id)); } com.google.gerrit.server.notedb.ChangeNotes changeNotes = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(change, user.get()); }
@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded(), true); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Multiple changes found for " + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(change, user.get()); }
@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded(), true); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("No changes found for " + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(change, user); }
@java.lang.Override public AccountResource.StarredChange parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id); if (starredChangesUtil.getLabels(user.getAccountId(), change.getId())) { return new com.google.gerrit.server.account.AccountResource.StarredChange(user, change); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public AccountResource.StarredChange parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id); if (starredChangesUtil.getLabels(user.getAccountId(), change.getId())) { return new com.google.gerrit.server.account.AccountResource.StarredChanges(user, change); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public AccountResource.StarredChange parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id); if (starredChangesUtil.getLabels(user.getAccountId(), change.getId())) { return new com.google.gerrit.server.account.AccountResource.StarredChange(user, change); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public AccountResource.StarredChange parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id); if (starredChangesUtil.getLabels(user.getAccountId(), change.getId())) { return new com.google.gerrit.server.account.AccountResource.StarredChange(user, change); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public AccountResource.StarredChange parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id); if (starredChangesUtil.getLabels(user.getAccountId(), change.getId())) { return new com.google.gerrit.server.account.AccountResource.StarredChange(user, change); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
public void delete(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { checkLoaded(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = new java.util.HashSet<>(); noteMap.add(( rw) -> { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { removeExtIds.add(o, extId); } }); cacheUpdates.add(o, n); }
public void delete(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { checkLoaded(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = new java.util.HashSet<>(); noteMap.add(( rw) -> { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { removeExtIds.add(o, extId); } }); cacheUpdates.add(o, n); cacheUpdates.onRemove(o, n, removedExtIds); evictAccounts(removedExtIds); }
public void delete(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { checkLoaded(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = new java.util.HashSet<>(); noteMap.add(r, n); for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { com.google.gerrit.server.account.externalids.ExternalIds.remove(rw, noteMap, extId); removedExtIds.add(extId); } }); cacheUpdates.add(o, n, n, removedExtIds); }
public void delete(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { checkLoaded(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = new java.util.HashSet<>(); noteMap.add(r, n); for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { com.google.gerrit.server.account.externalids.ExternalIds.remove(rw, noteMap, extId); removedExtIds.add(extId); } }); cacheUpdates.onRemove(o, n, n, removedExtIds); }
public void delete(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { checkLoaded(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = new java.util.HashSet<>(); noteMap.add(r, n); for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { com.google.gerrit.server.account.externalids.ExternalIds.remove(rw, noteMap, extId); removedExtIds.add(extId); } }); cacheUpdates.onRemove(o, n, removedExtIds); }
private void addExtId(org.eclipse.jgit.junit.TestRepository<?> testRepo, com.google.gerrit.server.account.externalids.ExternalId... extIds) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.externalids.ExternalId extId = externalIdKeysFactory.create(testRepo.getRepository()); extIdNotes.insert(java.util.Arrays.asList(extIds)); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, null, testRepo.getRepository())) { metaDataUpdate.commit(admin.getIdent()); metaDataUpdate.commit(admin.getIdent()); } }
private void addExtId(org.eclipse.jgit.junit.TestRepository<?> testRepo, com.google.gerrit.server.account.externalids.ExternalId... extIds) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.externalids.ExternalId extId = externalIdKeysFactory.create(testRepo.getRepository()); extIdNotes.insert(java.util.Arrays.asList(extIds)); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, null, testRepo.getRepository())) { metaDataUpdate.commit(admin.getIdent()); metaDataUpdate.commit(admin.getIdent()); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { metaDataUpdate.commit(admin.getIdent()); } }
private void addExtId(org.eclipse.jgit.junit.TestRepository<?> testRepo, com.google.gerrit.server.account.externalids.ExternalId... extIds) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.externalids.ExternalId extId = externalIdKeysFactory.create(testRepo.getRepository()); extIdNotes.insert(java.util.Arrays.asList(extIds)); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, null, testRepo.getRepository())) { metaDataUpdate.commit(admin.getIdent()); metaDataUpdate.commit(admin.getIdent()); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { metaDataUpdate.commit(admin.getIdent(), e); } }
private void addExtId(org.eclipse.jgit.junit.TestRepository<?> testRepo, com.google.gerrit.server.account.externalids.ExternalId... extIds) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.externalids.ExternalId extId = externalIdKeysFactory.create(testRepo.getRepository()); extIdNotes.insert(java.util.Arrays.asList(extIds)); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, null, testRepo.getRepository())) { metaDataUpdate.commit(admin.getIdent()); metaDataUpdate.commit(admin.getIdent()); } catch (com.google.gerrit.server.git.MetaDataUpdateException e) { metaDataUpdate.commit(admin.getIdent(), e); } }
private void addExtId(org.eclipse.jgit.junit.TestRepository<?> testRepo, com.google.gerrit.server.account.externalids.ExternalId... extIds) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.externalids.ExternalId extId = externalIdKeysFactory.create(testRepo.getRepository()); extIdNotes.insert(java.util.Arrays.asList(extIds)); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, null, testRepo.getRepository())) { metaDataUpdate.commit(admin.getIdent()); metaDataUpdate.commit(admin.getIdent()); } catch (com.google.gerrit.server.git.IntegrationException e) { metaDataUpdate = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, null, com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, indexer.getIdent()); extId.commit(metaDataUpdate); } }
@org.junit.Test public void retryOnLockFailure() throws java.lang.Exception { com.google.gerrit.server.account.externalids.ExternalId.Key fooId = ExternalId.Key.create("foo", "foo"); com.google.gerrit.server.account.externalids.ExternalId.Key barId = ExternalId.Key.Key.create("bar", "bar"); final java.util.concurrent.atomic.AtomicBoolean update = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.server.account.externalids.ExternalIdsUpdate update = new com.google.gerrit.server.account.externalids.ExternalIdsUpdate(repoManager, updateCache, allUsersRepoManager, accountCache, allUsers, metricMaker, new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.DisabledExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalId.create(barId, admin.id)); }
@org.junit.Test public void retryOnLockFailure() throws java.lang.Exception { com.google.gerrit.server.account.externalids.ExternalId.Key fooId = ExternalId.Key.create("foo", "foo"); com.google.gerrit.server.account.externalids.ExternalId.Key barId = ExternalId.Key.Key.create("bar", "bar"); final java.util.concurrent.atomic.AtomicBoolean update = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.server.account.externalids.ExternalIdsUpdate update = new com.google.gerrit.server.account.externalids.ExternalIdsUpdate(repoManager, repoManager, allUsersRepoManager, accountCache, allUsers, metricMaker, new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.DisabledExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalId.create(barId, admin.id)); }
@org.junit.Test public void retryOnLockFailure() throws java.lang.Exception { com.google.gerrit.server.account.externalids.ExternalId.Key fooId = ExternalId.Key.create("foo", "foo"); com.google.gerrit.server.account.externalids.ExternalId.Key barId = ExternalId.Key.Key.create("bar", "bar"); final java.util.concurrent.atomic.AtomicBoolean update = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.server.account.externalids.ExternalIdsUpdate update = new com.google.gerrit.server.account.externalids.ExternalIdsUpdate(repoManager, repoManager, allUsersRepoManager, accountCache, allUsers, metricMaker, new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.DisabledExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache, adminMgr, admin.id); }
@org.junit.Test public void retryOnLockFailure() throws java.lang.Exception { com.google.gerrit.server.account.externalids.ExternalId.Key fooId = ExternalId.Key.create("foo", "foo"); com.google.gerrit.server.account.externalids.ExternalId.Key barId = ExternalId.Key.Key.create("bar", "bar"); final java.util.concurrent.atomic.AtomicBoolean update = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.server.account.externalids.ExternalIdsUpdate update = new com.google.gerrit.server.account.externalids.ExternalIdsUpdate(repoManager, updateCache, allUsersRepoManager, accountCache, allUsers, metricMaker, new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.DisabledExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalId.create(barId, admin.id)); updateBUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.create(barId, admin.id)); assertThat(doneBgUpdate.get()).isFalse(); assertThat(doneBgUpdate.get()).isFalse(); }
@org.junit.Test public void retryOnLockFailure() throws java.lang.Exception { com.google.gerrit.server.account.externalids.ExternalId.Key fooId = ExternalId.Key.create("foo", "foo"); com.google.gerrit.server.account.externalids.ExternalId.Key barId = ExternalId.Key.Key.create("bar", "bar"); final java.util.concurrent.atomic.AtomicBoolean update = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.server.account.externalids.ExternalIdsUpdate update = new com.google.gerrit.server.account.externalids.ExternalIdsUpdate(repoManager, updateCache, allUsersRepoManager, accountCache, allUsers, metricMaker, new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.DisabledExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalIdCache(), new com.google.gerrit.server.account.externalids.ExternalId.create(barId, admin.id)); updateBUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.create(barId, admin.id)); assertThat(doneBgUpdate.get()).isFalse(); assertThat(doneBgUpdate.get()).isFalse(); assertThat(doneBgUpdate.get()).isFalse(); }
@com.google.gerrit.common.Nullable com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.ExternalId.Key key) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkReadEnabled(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return com.google.gerrit.server.account.externalids.ExternalIds.load(repo).get(key); } }
@com.google.gerrit.common.Nullable com.google.gerrit.server.account.ExternalId get(com.google.gerrit.server.account.ExternalId.Key key) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkReadEnabled(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return com.google.gerrit.server.account.externalids.ExternalIds.load(repo).get(key); } }
@com.google.gerrit.common.Nullable com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.ExternalId.Key key) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkReadOnlyEnabled(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return com.google.gerrit.server.account.externalids.ExternalIdsUpdate.load(repo).get(key); } }
@com.google.gerrit.common.Nullable com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.ExternalId.Key key) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkReadOnlyEnabled(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return com.google.gerrit.server.account.externalids.ExternalIds.load(repo).get(key); } }
@com.google.gerrit.common.Nullable com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.externalids.ExternalId.Key key) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkReadOnlyEnabled(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return com.google.gerrit.server.account.externalids.ExternalIdsUpdate.load(repo).get(key); } }
private void updateNoteMap(com.google.gerrit.server.account.externalids.ExternalId update) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (com.google.gerrit.server.account.externalids.ExternalId update = new com.google.gerrit.server.account.externalids.ExternalIdsUpdate.Key(uperter)) { execute(updateRepo, repo); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.account.externalids.ExternalId extId = new com.google.gerrit.server.account.externalids.ExternalId(externalIdCache, accountId).load(); i.update(extId); try (com.google.gerrit.server.account.externalids.ExternalId extId = metaDataUpdateFactory.create()) { extId.update(extId); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = metaDataUpdateFactory.create(e.getUserNameKey(), e.getNotesRevWalk().load(metaDataUpdate); updateRefUpdate(metaDataUpdate); } return null; } }); }
private void updateNoteMap(com.google.gerrit.server.account.externalids.ExternalId update) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (com.google.gerrit.server.account.externalids.ExternalId update = new com.google.gerrit.server.account.externalids.ExternalIdsUpdate.Key(uperter)) { execute(updateRepo, repo); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.account.externalids.ExternalId extId = new com.google.gerrit.server.account.externalids.ExternalId(externalIdCache, accountId).load(); i.update(extId); try (com.google.gerrit.server.account.externalids.ExternalId extId = metaDataUpdateFactory.create()) { extId.update(extId); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = metaDataUpdateFactory.create(e.getUserNameKey(), e.getNotesRevWalk().load(metaDataUpdate); updateStore(); } return null; } }); }
private void updateNoteMap(com.google.gerrit.server.account.externalids.ExternalId update) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (com.google.gerrit.server.account.externalids.ExternalId update = new com.google.gerrit.server.account.externalids.ExternalIdsUpdate.Key(uperter)) { execute(updateRepo, repo); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.account.externalids.ExternalId extId = new com.google.gerrit.server.account.externalids.ExternalId(externalIdCache, accountId).load(); i.update(extId); try (com.google.gerrit.server.account.externalids.ExternalId extId = metaDataUpdateFactory.create()) { extId.update(extId); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = metaDataUpdateFactory.create(e.getUserNameKey(), e.getNotesRevWalk().load(metaDataUpdate); } updateCountsUpdate(metaDataUpdate); return null; } }); }
private void updateNoteMap(com.google.gerrit.server.account.externalids.ExternalId update) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (com.google.gerrit.server.account.externalids.ExternalId update = new com.google.gerrit.server.account.externalids.ExternalIdsUpdate.Key(uperter)) { execute(updateRepo, repo); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.account.externalids.ExternalId extId = new com.google.gerrit.server.account.externalids.ExternalId(externalIdCache, accountId).load(); i.update(extId); try (com.google.gerrit.server.account.externalids.ExternalId extId = metaDataUpdateFactory.create()) { extId.update(extId); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = metaDataUpdateFactory.create(e.getUserNameKey(), e.getNotesRevWalk().load(metaDataUpdate); } updateCountsUpdate.commit(metaDataUpdate); return null; } }); }
private void updateNoteMap(com.google.gerrit.server.account.externalids.ExternalId update) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (com.google.gerrit.server.account.externalids.ExternalId update = new com.google.gerrit.server.account.externalids.ExternalIdsUpdate.Key(uperter)) { execute(updateRepo, repo); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.account.externalids.ExternalId extId = new com.google.gerrit.server.account.externalids.ExternalId(externalIdCache, accountId).load(); i.update(extId); try (com.google.gerrit.server.account.externalids.ExternalId extId = metaDataUpdateFactory.create()) { extId.update(extId); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = metaDataUpdateFactory.create(e.getUserNameKey(), e.getNotesRevWalk().load(metaDataUpdate); return null; } updateCountsUpdate.commit(); return null; } }); }
public void upsert(com.google.gerrit.server.account.externalids.ExternalId extId) throws com.google.gwtorm.server.OrmException { upsert(java.util.Collections.singleton(extId)); }
public void upsert(com.google.gerrit.server.account.externalids.ExternalId extId) throws com.google.gwtorm.server.OrmException, java.io.IOException { upsert(java.util.Collections.singleton(extId)); }
public void upsert(com.google.gerrit.server.account.ExternalId extId) throws com.google.gwtorm.server.OrmException { upsert(java.util.Collections.singleton(extId)); }
public void upsert(com.google.gerrit.server.account.externalids.ExternalId extId) throws com.google.gerrit.server.account.AccountException, java.io.IOException { upsert(java.util.Collections.singleton(extId)); }
public void upsert(com.google.gerrit.server.account.externalids.ExternalId extId) throws com.google.gwtorm.server.OrmException { upsert(java.lang.String.format("ExternalId extId %s", extId)); }
public java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> all() throws java.io.IOException { checkLoaded(); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> extIds = new java.util.HashSet<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { byte[] raw = com.google.gerrit.server.account.externalids.ExternalId.readNoteData(rw, note.getData()); try { extIds.add(com.google.gerrit.server.account.externalids.ExternalId.parse(note.getName(), raw, note.getData())); } catch (java.lang.Exception e) { com.google.gerrit.server.account.externalids.ExternalIds.log.error(java.lang.String.format("Ignoring invalid external ID note %s", note.getName()), e); } } return extIds; }
public java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> all() throws java.io.IOException { checkLoaded(); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> extIds = new java.util.HashSet<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { byte[] raw = com.google.gerrit.server.account.externalids.ExternalId.readNoteMap(rw, note.getData()); try { extIds.add(com.google.gerrit.server.account.externalids.ExternalId.parse(note.getName(), raw, note.getData())); } catch (java.lang.Exception e) { com.google.gerrit.server.account.externalids.ExternalIds.log.error(java.lang.String.format("Ignoring invalid external ID note %s", note.getName()), e); } } return extIds; }
public java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> all() throws java.io.IOException { checkLoaded(); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> extIds = new java.util.HashSet<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { byte[] raw = com.google.gerrit.server.account.externalids.ExternalIds.readNoteData(rw, note.getData()); try { extIds.add(com.google.gerrit.server.account.externalids.ExternalId.parse(note.getName(), raw, note.getData())); } catch (java.lang.Exception e) { com.google.gerrit.server.account.externalids.ExternalIds.log.error(java.lang.String.format("Ignoring invalid external ID note %s", note.getName()), e); } } return extIds; }
public java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> all() throws java.io.IOException { checkLoaded(); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> extIds = new java.util.HashSet<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { byte[] raw = com.google.gerrit.server.account.externalids.ExternalId.readNoteData(rw, note.getData()); try { extIds.add(com.google.gerrit.server.account.externalids.ExternalId.parse(note.getName(), raw, note.getData())); } catch (java.lang.Exception e) { com.google.gerrit.server.account.externalids.ExternalIds.log.error(java.lang.String.format("Ignoring invalid external ID Note %s", note.getName()), e); } } return extIds; }
public java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> all() throws java.io.IOException { checkLoaded(); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> extIds = new java.util.HashSet<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { byte[] raw = com.google.gerrit.server.account.externalids.ExternalIds.readNoteData(rw, note.getData()); try { extIds.add(com.google.gerrit.server.account.externalids.ExternalId.parse(note.getName(), raw, note.getData())); } catch (java.lang.Exception e) { com.google.gerrit.server.account.externalids.ExternalIds.log.error(java.lang.String.format("Ignoring invalid external ID Note %s", note.getName()), e); } } return extIds; }
private static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId extId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extId.key().sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_SZ); com.google.gerrit.server.account.externalids.ExternalId actualExtId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); checkState(extId.equals(actualExtId), actualExtId.toString(), actualExtId.toString()); noteMap.remove(noteId); return actualExtId; }
private static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId extId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extId.key().sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_SZ); com.google.gerrit.server.account.externalids.ExternalId actualExtId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); checkState(extId.equals(actualExtId), actualExtId.toString(), actualExtId.toString()); return actualExtId; }
private static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId extId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extId.key().sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_SZ); com.google.gerrit.server.account.externalids.ExternalId actualExtId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); checkState(extId.equals(actualExtId), "external id %s should not match external ID %s", extId.toString(), actualExtId.toString()); noteMap.remove(noteId); return actualExtId; }
private static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId extId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extId.key().sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_SZ); com.google.gerrit.server.account.externalids.ExternalId actualExtId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); checkState(extId.equals(actualExtId), actualExtId.toString(), actualExtId.equals(noteId), actualExtId.toString()); return actualExtId; }
private static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId extId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extId.key().sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_SZ); com.google.gerrit.server.account.externalids.ExternalId actualExtId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); checkState(extId.equals(actualExtId), actualExtId.toString(), actualExtId.equals(noteId), actualExtId.toString()); noteMap.remove(noteId); return actualExtId; }
public void delete(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) { checkLoaded(); return; }
public void delete(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) { checkLoaded(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = new java.util.HashSet<>(); noteMap.add(rw, n); for (com.google.gerrit.server.account.externalids.ExternalId extId : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey); removedExtIds.add(removedExtIds); } cacheUpdates.onRemove(o, n, removedExtIds); evictAccounts(removedExtIds); evictAccounts(removedExtIds); }
public void delete(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) { checkLoaded(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = new java.util.HashSet<>(); noteMap.add(rw, n); for (com.google.gerrit.server.account.externalids.ExternalId extId : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIds.remove(rw, noteMap, extIdKey); removedExtIds.add(removedExtIds); } cacheUpdates.onRemove(o, n, removedExtIds); evictAccounts(removedExtIds); evictAccounts(removedExtIds); }
public void delete(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) { checkLoaded(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = new java.util.HashSet<>(); noteMap.add(rw, n); for (com.google.gerrit.server.account.externalids.ExternalId extId : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey); removedExtIds.add(removedExtIds); } cacheUpdates.onRemove(o, n, removedExtIds); evictAccounts(removedExtIds); evictAccounts(removed extExtIds); }
public void delete(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) { checkLoaded(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = new java.util.HashSet<>(); noteMap.add(rw, n); for (com.google.gerrit.server.account.externalids.ExternalId extId : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIds.remove(rw, noteMap, extIdKey); removedExtIds.add(removedExtIds); } cacheUpdates.onRemove(o, n, removedExtIds); evictAccounts(removedExtIds); evictAccounts(removed extExtIds); }
public void replace(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toDelete, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws com.google.gwtorm.server.OrmException, java.io.IOException, java.io.IOException { checkLoaded(); com.google.gerrit.server.account.externalids.ExternalIdsUpdate.checkSameAccount(toAdd, accountId); checkExternalIdKeys(ExternalId.Key.from(toAdd), toDelete); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); noteMap.add(rw, noteMap, extIdKey); for (com.google.gerrit.server.account.externalids.ExternalId extIdKey : toDelete) { com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalIds.remove(rw, noteMap, extIdKey); removedExtIds.add(removedExtId); } for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { com.google.gerrit.server.account.externalids.ExternalId extIds = com.google.gerrit.server.account.ExternalIds.upsert(rw, inserter, extId); updateExtIds.add(insertExtIds, extIds); } }); }
public void replace(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toDelete, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws com.google.gwtorm.server.OrmException, java.io.IOException, java.io.IOException { checkLoaded(); com.google.gerrit.server.account.externalids.ExternalIdsUpdate.checkSameAccount(toAdd, accountId); checkExternalIdKeys(ExternalId.Key.from(toAdd), toDelete); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); noteMap.add(rw, noteMap, extIdKey); for (com.google.gerrit.server.account.externalids.ExternalId extIdKey : toDelete) { com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalIds.remove(rw, noteMap, extIdKey); removedExtIds.add(removedExtId); } for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { com.google.gerrit.server.account.externalids.ExternalId extIds = com.google.gerrit.server.account.externalids.ExternalIdsUpdate.upsert(rw, inserter, extId); updateExtIds.onReplace(o, n, extIds); } }); }
public void replace(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toDelete, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws com.google.gwtorm.server.OrmException, java.io.IOException, java.io.IOException { checkLoaded(); com.google.gerrit.server.account.externalids.ExternalIdsUpdate.checkSameAccount(toAdd, accountId); checkExternalIdKeys(ExternalId.Key.from(toAdd), toDelete); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); noteMap.add(rw, noteMap, extIdKey); for (com.google.gerrit.server.account.externalids.ExternalId extIdKey : toDelete) { com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalIds.remove(rw, noteMap, extIdKey); removedExtIds.add(removedExtId); } for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { com.google.gerrit.server.account.externalids.ExternalId extIds = com.google.gerrit.server.account.externalids.ExternalIdsUpdate.add(rw, inserter, extId); updateExtIds.onReplace(o, n, extIds); } }); }
public void replace(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toDelete, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws com.google.gwtorm.server.OrmException, java.io.IOException, java.io.IOException { checkLoaded(); com.google.gerrit.server.account.externalids.ExternalIdsUpdate.checkSameAccount(toAdd, accountId); checkExternalIdKeys(ExternalId.Key.from(toAdd), toDelete); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); noteMap.add(rw, noteMap, extIdKey); for (com.google.gerrit.server.account.externalids.ExternalId extIdKey : toDelete) { com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalIds.remove(rw, noteMap, extIdKey); removedExtIds.add(removedExtId); } for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { com.google.gerrit.server.account.externalids.ExternalId extIds = com.google.gerrit.server.account.externalids.ExternalIdsUpdate.asAccount(rw, inserter, extId); updateExtIds.onReplace(o, n, extIds); } }); }
public void replace(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toDelete, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws com.google.gwtorm.server.OrmException, java.io.IOException, java.io.IOException { checkLoaded(); com.google.gerrit.server.account.externalids.ExternalIdsUpdate.checkSameAccount(toAdd, accountId); checkExternalIdKeys(ExternalId.Key.from(toAdd), toDelete); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); noteMap.add(rw, noteMap, extIdKey); for (com.google.gerrit.server.account.externalids.ExternalId extIdKey : toDelete) { com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalIds.remove(rw, noteMap, extIdKey); removedExtIds.add(removedExtId); } for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { com.google.gerrit.server.account.externalids.ExternalId extIds = com.google.gerrit.server.account.externalids.ExternalIdsUpdate.upsert(rw, inserter, extId); updateExtIds.onReplace(o, n, updatedExtIds); } }); }
public void deleteByKeys(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) { checkLoaded(); return; }
public void deleteByKeys(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) { checkLoaded(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = new java.util.HashSet<>(); noteMap.add(rw, n); for (com.google.gerrit.server.account.externalids.ExternalId extIdKey : extIdKeys) { removeExtIds.add(extIdKey, extIdKey); } cacheUpdates.onRemove(o, n, removedExtIds); }
public void deleteByKeys(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) { checkLoaded(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = new java.util.HashSet<>(); noteMap.add(rw, n); for (com.google.gerrit.server.account.externalids.ExternalId extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId extIds = com.google.gerrit.server.account.externalids.ExternalIds.remove(rw, noteMap, extIdKey); removedExtIds.add(extIds); } cacheUpdates.onRemove(o, n, removedExtIds); evictAccounts(removedExtIds); }
public void deleteByKeys(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) { checkLoaded(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = new java.util.HashSet<>(); noteMap.add(rw, n); for (com.google.gerrit.server.account.externalids.ExternalId extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId extIds = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey); removedExtIds.add(extIds); } cacheUpdates.onRemove(o, n, removedExtIds); evictAccounts(removedExtIds); }
public void deleteByKeys(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) { checkLoaded(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = new java.util.HashSet<>(); noteMap.add(rw, n); for (com.google.gerrit.server.account.externalids.ExternalId extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId extIds = com.google.gerrit.server.account.externalids.ExternalIds.remove(rw, noteMap, extIdKey); removedExtIds.add(extId); } cacheUpdates.onRemove(o, n, removedExtIds); evictAccounts(removedExtIds); }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (readOnly()) { return false; } if (noteMap.isEmpty()) { return false; } if (noteMap.isEmpty()) { return false; } if (noteMap.isEmpty()) { return false; } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { for (com.google.gerrit.server.account.externalids.ExternalId noteMap : noteMap) { try { noteMap.execute(rw, noteMap); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { throw new java.io.IOException(e); } } org.eclipse.jgit.revwalk.RevTree oldTree = ((revision)!= null)? rw.parseTree(revision) : null; try { noteMap.execute(rw, noteMap); } catch (java.io.IOException e) { throw new java.io.IOException(e); } org.eclipse.jgit.revwalk.RevTree oldTreeId = noteMap.writeTree(inserter); if (newTreeId.equals(oldTree)) { return false; } commit.setTreeId(newTreeId); return true; } }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (rw == null) { return false; } if (noteMap.isEmpty()) { return false; } if (noteMap.isEmpty()) { return false; } if (noteMap.isEmpty()) { return false; } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { for (com.google.gerrit.server.account.externalids.ExternalId noteMap : noteMap) { try { noteMap.execute(rw, noteMap); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { throw new java.io.IOException(e); } } org.eclipse.jgit.revwalk.RevTree oldTree = ((revision)!= null)? rw.parseTree(revision) : null; try { noteMap.execute(rw, noteMap); } catch (java.io.IOException e) { throw new java.io.IOException(e); } org.eclipse.jgit.revwalk.RevTreeId newTreeId = noteMap.writeTree(inserter); if (newTreeId.equals(oldTree)) { return false; } commit.setTreeId(newTreeId); return true; } }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (rw == null) { return false; } if (noteMap.isEmpty()) { return false; } if (noteMap.isEmpty()) { return false; } if (noteMap.isEmpty()) { return false; } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { for (com.google.gerrit.server.account.externalids.ExternalId noteMap : noteMap) { try { noteMap.execute(rw, noteMap); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { throw new java.io.IOException(e); } } org.eclipse.jgit.revwalk.RevTree oldTree = ((revision)!= null)? rw.parseTree(revision) : null; try { noteMap.execute(rw, inserter); } catch (java.io.IOException e) { throw new java.io.IOException(e); } org.eclipse.jgit.revwalk.RevTreeId newTreeId = noteMap.writeTree(inserter); if (newTreeId.equals(oldTree)) { return false; } commit.setTreeId(newTreeId); return true; } }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (readOnlyUpdate) { return false; } if (noteMap.isEmpty()) { return false; } if (noteMap.isEmpty()) { return false; } if (noteMap.isEmpty()) { return false; } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { for (com.google.gerrit.server.account.externalids.ExternalId noteMap : noteMap) { try { noteMap.execute(rw, noteMap); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { throw new java.io.IOException(e); } } org.eclipse.jgit.revwalk.RevTree oldTree = ((revision)!= null)? rw.parseTree(revision) : null; try { noteMap.execute(rw, inserter); } catch (java.io.IOException e) { throw new java.io.IOException(e); } org.eclipse.jgit.revwalk.RevTreeId newTreeId = noteMap.writeTree(inserter); if (newTreeId.equals(oldTree)) { return false; } commit.setTreeId(newTreeId); return true; } }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (rw == null) { return false; } if (noteMap.isEmpty()) { return false; } if (noteMap.isEmpty()) { return false; } if (noteMap.isEmpty()) { return false; } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { for (com.google.gerrit.server.account.externalids.ExternalId noteMap : noteMap) { try { noteMap.execute(rw, noteMap); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { throw new java.io.IOException(e); } } org.eclipse.jgit.revwalk.RevTree oldTree = ((revision)!= null)? rw.parseTree(revision) : null; try { noteMap.execute(rw, inserter); } catch (java.io.IOException e) { throw new java.io.IOException(e); } org.eclipse.jgit.revwalk.RevTreeId newTreeId = noteMap.writeTree(inserter); if (newTreeId.equals(oldTree)) { return false; } commit.setTreeId(newTreeId); return true; }
private void evictAccounts(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) throws java.io.IOException { if ((accountCache)!= null) { for (com.google.gerrit.reviewdb.client.Account.Id id : extIds) { accountCache.evict(id); } } }
private void evictAccounts(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) throws java.io.IOException { for (com.google.gerrit.reviewdb.client.Account.Id id : extIds) { accountCache.evict(id); } }
private void evictAccounts(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) throws java.io.IOException { if ((accountCache)!= null) { for (ExternalId extId : extIds) { accountCache.evict(id); } } }
private void evictAccounts(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) throws java.io.IOException { if ((accountCache)!= null) { for (com.google.gerrit.reviewdb.client.Account.Id id : extIds()) { accountCache.evict(id); } } }
private void evictAccounts(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) throws java.io.IOException { if ((accountCache)!= null) { for (com.google.gerrit.reviewdb.client.Account.Id id : extIds) { accountCache.evict(id); } accountCache.evict(id); } }
private static com.google.gerrit.server.account.ExternalId upsert(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectInserter ins, org.eclipse.jgit.notes.NoteMap noteMap, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.ExternalId extId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config c = new org.eclipse.jgit.lib.Config(); if (noteMap.contains(extId.key().sha1())) { byte[] raw = rw.getObjectReader().open(noteMap.get(noteMap).getCachedBytes(com.google.gerrit.server.account.ExternalIds.MAX_NOTE_SZ); try { c.fromText(new java.lang.String(raw, java.nio.charset.StandardCharsets.UTF_8)); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("Invalid external id config for note %s: %s", noteId, e.getMessage())); } } extId.writeToConfig(c); byte[] raw = c.toText().getBytes(java.nio.charset.StandardCharsets.UTF_8); org.eclipse.jgit.lib.ObjectId noteMap = ins.insert(com.google.gerrit.server.account.externalids.OBJ_BLOB, raw); return com.google.gerrit.server.account.ExternalId.create(extId, noteMap); }
private static com.google.gerrit.server.account.ExternalId upsert(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectInserter ins, org.eclipse.jgit.notes.NoteMap noteMap, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.ExternalId extId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config c = new org.eclipse.jgit.lib.Config(); if (noteMap.contains(extId.key().sha1())) { byte[] raw = rw.getObjectReader().open(noteMap.get(noteMap).getCachedBytes(com.google.gerrit.server.account.ExternalIds.MAX_NOTE_SZ); try { c.fromText(new java.lang.String(raw, java.nio.charset.StandardCharsets.UTF_8)); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("Invalid external ID %s: %s", noteId, e.getMessage())); } } extId = c.toText().getBytes(java.nio.charset.StandardCharsets.UTF_8); org.eclipse.jgit.lib.ObjectId noteMap = ins.insert(com.google.gerrit.server.account.externalids.OBJ_BLOB, raw); noteMap.set(noteId, noteMap); return com.google.gerrit.server.account.ExternalId.create(extId, noteData); }
private static com.google.gerrit.server.account.ExternalId upsert(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectInserter ins, org.eclipse.jgit.notes.NoteMap noteMap, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.ExternalId extId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config c = new org.eclipse.jgit.lib.Config(); if (noteMap.contains(extId.key().sha1())) { byte[] raw = rw.getObjectReader().open(noteMap.get(noteMap).getCachedBytes(com.google.gerrit.server.account.ExternalIds.MAX_NOTE_SZ); try { c.fromText(new java.lang.String(raw, java.nio.charset.StandardCharsets.UTF_8)); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("Invalid external ID %s: %s", noteId, e.getMessage())); } } extId = c.toText().getBytes(java.nio.charset.StandardCharsets.UTF_8); org.eclipse.jgit.lib.ObjectId noteMap = ins.insert(com.google.gerrit.server.account.externalids.OBJ_BLOB, raw); noteMap.set(noteId, noteMap); return com.google.gerrit.server.account.ExternalId.create(extId, noteMap); }
private static com.google.gerrit.server.account.ExternalId upsert(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectInserter ins, org.eclipse.jgit.notes.NoteMap noteMap, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.ExternalId extId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config c = new org.eclipse.jgit.lib.Config(); if (noteMap.contains(extId.key().sha1())) { byte[] raw = rw.getObjectReader().open(noteMap.get(noteMap).getCachedBytes(com.google.gerrit.server.account.ExternalIds.MAX_NOTE_SZ); try { c.fromText(new java.lang.String(raw, java.nio.charset.StandardCharsets.UTF_8)); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("Invalid external id config for note %s: %s", noteId, e.getMessage())); } } extId.writeToConfig(c); byte[] raw = c.toText().getBytes(java.nio.charset.StandardCharsets.UTF_8); org.eclipse.jgit.lib.ObjectId noteMap = ins.insert(com.google.gerrit.server.account.externalids.OBJ_BLOB, raw); return com.google.gerrit.server.account.ExternalId.create(extId, noteData); }
private static com.google.gerrit.server.account.ExternalId upsert(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectInserter ins, org.eclipse.jgit.notes.NoteMap noteMap, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.ExternalId extId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config c = new org.eclipse.jgit.lib.Config(); if (noteMap.contains(extId.key().sha1())) { byte[] raw = rw.getObjectReader().open(noteMap.get(noteMap).getCachedBytes(com.google.gerrit.server.account.ExternalIds.MAX_NOTE_SZ); try { c.fromText(new java.lang.String(raw, java.nio.charset.StandardCharsets.UTF_8)); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("Invalid external id config for note %s: %s", noteId, e.getMessage())); } } extId.writeToConfig(c); byte[] raw = c.toText().getBytes(java.nio.charset.StandardCharsets.UTF_8); org.eclipse.jgit.lib.ObjectId noteMap = ins.insert(com.google.gerrit.server.account.externalids.OBJ_BLOB, raw); return com.google.gerrit.server.account.externalids.ExternalId.create(extId, noteMap); }
public com.google.gerrit.server.account.InternalAccountUpdate.Builder updateExternalId(com.google.gerrit.server.account.externalids.ExternalId extId) { updatedExternalIdsUpdate.add(extId); return this; }
public com.google.gerrit.server.account.InternalAccountUpdate.Builder updateExternalId(com.google.gerrit.server.account.ExternalId extId) { updatedExternalIdsUpdate.add(extId); return this; }
public com.google.gerrit.server.account.InternalAccountUpdate.Builder updateExternalId(com.google.gerrit.server.account.externalids.ExternalIdsUpdate extId) { updatedExternalIdsUpdate.add(extId); return this; }
public com.google.gerrit.server.account.InternalAccountUpdate.Builder updateExternalIds(com.google.gerrit.server.account.externalids.ExternalId extId) { updatedExternalIdsUpdate.add(extId); return this; }
public com.google.gerrit.server.account.InternalAccountUpdate.Builder updateExternalId(com.google.gerrit.server.account.externalids.ExternalId extId) { updatedExternalIdsUpdate.add(extIds); return this; }
@com.google.gerrit.common.annotations.Nullable com.google.gerrit.server.account.ExternalId get(com.google.gerrit.server.account.ExternalId.Key key, org.eclipse.jgit.lib.ObjectId rev) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkReadEnabled(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return com.google.gerrit.server.account.externalids.ExternalIdsUpdate.load(repo, rev).get(key); } }
@com.google.gerrit.common.Nullable com.google.gerrit.server.account.ExternalId get(com.google.gerrit.server.account.ExternalId.Key key, org.eclipse.jgit.lib.ObjectId rev) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkReadEnabled(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return com.google.gerrit.server.account.externalids.ExternalIds.load(repo, rev).get(key); } }
@com.google.gerrit.common.annotations.Nullable com.google.gerrit.server.account.ExternalId get(com.google.gerrit.server.account.ExternalId.Key key, org.eclipse.jgit.lib.ObjectId rev) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkReadEnabled(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return com.google.gerrit.server.account.externalids.ExternalIdsUpdate.load(repo, rev); } }
@com.google.gerrit.common.Nullable com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.ExternalId.Key key, org.eclipse.jgit.lib.ObjectId rev) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkReadEnabled(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return com.google.gerrit.server.account.externalids.ExternalIdsUpdate.load(repo, rev).get(key); } }
@com.google.gerrit.common.annotations.Nullable com.google.gerrit.server.account.ExternalId get(com.google.gerrit.server.account.ExternalId.Key key, org.eclipse.jgit.lib.ObjectId rev) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkReadOnlyEnabled(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return com.google.gerrit.server.account.externalids.ExternalIdsUpdate.load(repo, rev).get(key); } }
public void upsert(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { checkLoaded(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); noteMap.add(( rw) -> { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { com.google.gerrit.server.account.externalids.ExternalId updatedExtId = com.google.gerrit.server.account.externalids.ExternalIdsUpdate.upsert(rw, inserter, noteMap, extId); updatedExtIds.add(updatedExtId); } }); cacheUpdates.onUpdate(o, n, updatedExtIds); }
public void upsert(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { checkLoaded(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); noteMap.add(( rw) -> { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { com.google.gerrit.server.account.externalids.ExternalId updatedExtId = com.google.gerrit.server.account.externalids.ExternalIdsUpdate.upsert(rw, inserter, noteMap, extId); updatedExtIds.add(updatedExtIds); } }); cacheUpdates.onUpdate(o, n, updatedExtIds); }
public void upsert(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { checkLoaded(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); noteMap.add(( rw) -> { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { com.google.gerrit.server.account.externalids.ExternalId updatedExtId = com.google.gerrit.server.account.externalids.ExternalIdsUpdate.upsert(rw, inserter, noteMap, extId); updatedExtIds.add(updatedExtId); } }); cacheUpdates.onUpdate(o, n, updateExtIds); }
public void upsert(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { checkLoaded(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); noteMap.add(( rw) -> { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { com.google.gerrit.server.account.externalids.ExternalId updatedExtId = com.google.gerrit.server.account.externalids.ExternalIdsUpdate.upsert(rw, inserter, noteMap, extId); updatedExtIds.add(updatedExtIds); } }); cacheUpdates.onUpdate(o, n, updateExtIds); }
public void upsert(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { checkLoaded(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); updateExtIds.add(( rw) -> { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { com.google.gerrit.server.account.externalids.ExternalId updatedExtId = com.google.gerrit.server.account.externalids.ExternalIdsUpdate.upsert(rw, inserter, noteMap, extId); updatedExtIds.add(updatedExtId); } }); cacheUpdates.add(oManager.onUpdate(o, n, updatedExtIds); }
public void insert(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) throws com.google.gwtorm.server.OrmException, java.io.IOException { checkLoaded(); checkExternalIds(extIds); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> newExtIds = new java.util.HashSet<>(); noteMap.add(( rw) -> { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { com.google.gerrit.server.account.externalids.ExternalId newExtId = com.google.gerrit.server.account.externalids.ExternalIdsUpdate(rw, inserter, noteMap, extId); newExtIds.add(insertedExtId); } }); cacheUpdates.add(o, n, newExtIds); }
public void insert(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) throws com.google.gwtorm.server.OrmException, java.io.IOException { checkLoaded(); checkExternalIds(extIds); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> newExtIds = new java.util.HashSet<>(); noteMap.add(( rw) -> { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { com.google.gerrit.server.account.externalids.ExternalId newExtId = com.google.gerrit.server.account.externalids.ExternalIdsUpdate(rw, inserter, noteMap, extId); newExtIds.add(insertedExtId); } }); cacheUpdates.add(o, n, newExtIds); evictAccounts(o, n, newExtIds); }
public void insert(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) throws com.google.gwtorm.server.OrmException, java.io.IOException { checkLoaded(); checkExternalIds(extIds); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> newExtIds = new java.util.HashSet<>(); noteMap.add(( rw) -> { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { com.google.gerrit.server.account.externalids.ExternalIdsUpdate updatedExtId = com.google.gerrit.server.account.externalids.ExternalIds.upsert(rw, inserter, noteMap, extId); newExtIds.add(insertedExtId); } }); cacheUpdates.add(o, n, newExtIds); }
public void insert(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) throws com.google.gwtorm.server.OrmException, java.io.IOException { checkLoaded(); checkExternalIds(extIds); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> newExtIds = new java.util.HashSet<>(); noteMap.add(( rw) -> { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { com.google.gerrit.server.account.externalids.ExternalIdsUpdate updatedExtId = com.google.gerrit.server.account.externalids.ExternalIds.upsert(rw, inserter, noteMap, extId); newExtIds.add(insertedExtId); } }); cacheUpdates.add(o, n, newExtIds); evictAccounts(o, n, newExtIds); }
public void insert(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) throws com.google.gwtorm.server.OrmException, java.io.IOException { checkLoaded(); checkExternalIds(extIds); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> newExtIds = new java.util.HashSet<>(); noteMap.add(( rw) -> { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { com.google.gerrit.server.account.externalids.ExternalId newExtId = com.google.gerrit.server.account.externalids.ExternalIdsUpdate(rw, inserter, noteMap, extId); newExtIds.add(insertedExtId); } }); cacheUpdates.add(o, n, newExtIds); externalIdsUpdate.onCreate(o, n, newExtIds); }
public void replaceByKeys(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toDelete, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws com.google.gwtorm.server.OrmException, java.io.IOException, java.io.IOException { checkLoaded(); checkLoaded(ExternalId.Key.from(toAdd), toDelete); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); noteMap.add(rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId extIdKey : toDelete) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIds.remove(rw, noteMap, extIdKey); removedExtIds.add(removedExtId); } for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { com.google.gerrit.server.account.externalids.ExternalId extIds = com.google.gerrit.server.account.ExternalIds.upsert(rw, inserter, extId); updatedExtIds.add(insertedExtIds, extExtIds); } }); cacheUpdates.onReplace(o, n, removedExtIds); evictAccounts(com.google.common.collect.Streams.concat(removed, updatedExtIds.stream(), updatedExtIds); }
public void replaceByKeys(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toDelete, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws com.google.gwtorm.server.OrmException, java.io.IOException, java.io.IOException { checkLoaded(); checkLoaded(ExternalId.Key.from(toAdd), toDelete); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); noteMap.add(rw, n); for (com.google.gerrit.server.account.externalids.ExternalId extIdKey : toDelete) { com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalIds.remove(rw, noteMap, extIdKey); removedExtIds.add(removedExtId); } for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { com.google.gerrit.server.account.externalids.ExternalId extIds = com.google.gerrit.server.account.ExternalIds.upsert(rw, inserter, extId); updatedExtIds.add(insertedExtIds, extIds); } }); cacheUpdates.onReplace(o, n, removedExtIds); evictAccounts(com.google.common.collect.Streams.concat(removed, updatedExtIds.stream(), updatedExtIds); }
public void replaceByKeys(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toDelete, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws com.google.gwtorm.server.OrmException, java.io.IOException, java.io.IOException { checkLoaded(); checkLoaded(ExternalId.Key.from(toAdd), toDelete); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); noteMap.add(rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId extIdKey : toDelete) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIds.remove(rw, noteMap, extIdKey); removedExtIds.add(removedExtId); } for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { com.google.gerrit.server.account.externalids.ExternalId extIds = com.google.gerrit.server.account.ExternalIds.upsert(rw, inserter, extId); updatedExtIds.add(insertedExtIds, extIds); } }); cacheUpdates.onReplace(o, n, removedExtIds); evictAccounts(com.google.common.collect.Streams.concat(removed, updatedExtIds.stream(), updatedExtIds); }
public void replaceByKeys(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toDelete, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws com.google.gwtorm.server.OrmException, java.io.IOException, java.io.IOException { checkLoaded(); checkLoaded(ExternalId.Key.from(toAdd), toDelete); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); noteMap.add(rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId extIdKey : toDelete) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIds.remove(rw, noteMap, extIdKey); removedExtIds.add(removedExtId); } for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { com.google.gerrit.server.account.externalids.ExternalId extIds = com.google.gerrit.server.account.ExternalIds.upsert(rw, inserter, extId); updatedExtIds.add(insertedExtIds, extIds); } }); cacheUpdates.onReplace(o, n, removedExtIds); evictAccounts(com.google.common.collect.Streams.concat(removed, removedExtIds.stream(), updatedExtIds); }
public void replaceByKeys(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toDelete, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws com.google.gwtorm.server.OrmException, java.io.IOException, java.io.IOException { checkLoaded(); checkLoaded(ExternalId.Key.from(toAdd), toDelete); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); noteMap.add(rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId extIdKey : toDelete) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIds.remove(rw, noteMap, extIdKey); removedExtIds.add(removedExtId); } for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { com.google.gerrit.server.account.ExternalId extIds = com.google.gerrit.server.account.externalids.ExternalIds.upsert(rw, inserter, extId); updatedExtIds.add(insertedExtIds, extIds); } }); cacheUpdates.onReplace(o, n, removedExtIds); evictAccounts(com.google.common.collect.Streams.concat(removed, updatedExtIds.stream(), updatedExtIds); }
public com.google.gerrit.server.account.InternalAccountUpdate.Builder addExternalId(java.lang.String extId) { createdExternalIdsBuilder().add(externalIds); return this; }
public com.google.gerrit.server.account.InternalAccountUpdate.Builder createExternalId(com.google.gerrit.server.account.externalids.ExternalId extId) { createdExternalIdsBuilder.add(extIds); return this; }
public com.google.gerrit.server.account.InternalAccountUpdate.Builder addExternalId(java.lang.String extId) { createdExternalIdsBuilder().add(com.google.gerrit.server.account.externalids.ExternalIdsUpdate.create(extIds)); return this; }
public com.google.gerrit.server.account.InternalAccountUpdate.Builder addExternalId(java.lang.String extId) { createdExternalIdsBuilder().add(com.google.gerrit.server.account.externalids.ExternalIdsUpdate.createExternalIds(extIds)); return this; }
public com.google.gerrit.server.account.InternalAccountUpdate.Builder addExternalId(java.lang.String extId) { createdExternalIdsBuilder().add(com.google.gerrit.server.account.externalids.ExternalId.ExternalIdsUpdate.create(extIds)); return this; }
public com.google.gerrit.server.account.InternalAccountUpdate.Builder deleteExternalIds(java.lang.String extId) { deletedExternalIds.add(extId); return this; }
public com.google.gerrit.server.account.InternalAccountUpdate.Builder deleteExternalIds(java.lang.String extId) { deletedExternalIds.add(extIds); return this; }
public com.google.gerrit.server.account.InternalAccountUpdate.Builder deleteExternalIds(java.lang.Iterable<com.google.gerrit.server.account.externalids.ExternalId> extIds) { deletedExternalIds.add(extId); return this; }
public void deleteExternalIds(java.lang.Iterable<com.google.gerrit.server.account.externalids.ExternalId> deleteExternalIds) { deletedExternalIds.add(extId); }
public void deleteExternalIds(java.lang.Iterable<com.google.gerrit.server.account.externalids.ExternalId> deleteExternalIds) { deletedExternalIds.add(extIds); }
@com.google.gerrit.common.Nullable public com.google.gerrit.server.account.ExternalId get(com.google.gerrit.server.account.ExternalId.Key key) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); org.eclipse.jgit.lib.ObjectId noteId = key.sha1(); if (!(noteMap.contains(noteId))) { return null; } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = com.google.gerrit.server.account.externalids.ExternalIds.readNoteMap(rw, noteData); return com.google.gerrit.server.account.externalids.ExternalId.parseNote(noteId.name(), raw, noteData); } }
@com.google.gerrit.common.Nullable public com.google.gerrit.server.account.ExternalId get(com.google.gerrit.server.account.externalids.ExternalId.Key key) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); org.eclipse.jgit.lib.ObjectId noteId = key.sha1(); if (!(noteMap.contains(noteId))) { return null; } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = com.google.gerrit.server.account.externalids.ExternalIds.readNoteMap(rw, noteData); return com.google.gerrit.server.account.externalids.ExternalId.parseNote(noteId.name(), raw, noteData); } }
@com.google.gerrit.common.Nullable public com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.externalids.ExternalId.Key key) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); org.eclipse.jgit.lib.ObjectId noteId = key.sha1(); if (!(noteMap.contains(noteId))) { return null; } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = com.google.gerrit.server.account.externalids.ExternalIds.readNoteMap(rw, noteData); return com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); } }
@com.google.gerrit.common.Nullable public com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.ExternalId.Key key) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); org.eclipse.jgit.lib.ObjectId noteId = key.sha1(); if (!(noteMap.contains(noteId))) { return null; } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = com.google.gerrit.server.account.externalids.ExternalIds.readNoteMap(rw, noteData); return com.google.gerrit.server.account.externalids.ExternalId.parseNote(noteId.name(), raw, noteData); } }
@com.google.gerrit.common.Nullable public com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.externalids.ExternalId.Key key) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); org.eclipse.jgit.lib.ObjectId noteId = key.sha1(); if (!(noteMap.contains(noteId))) { return null; } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = com.google.gerrit.server.account.externalids.ExternalIds.readNoteMap(rw, noteData); return com.google.gerrit.server.account.externalids.ExternalId.parseNote(noteId.name(), raw, noteData); } }
public static java.util.Map<com.google.gerrit.server.account.externalids.ExternalId.Key> from(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIds) throws com.google.gerrit.server.account.externalids.ExternalIdException, java.util.concurrent.ExecutionException { java.util.Set<com.google.gerrit.server.account.externalids.ExternalIdsUpdate> extIds = new java.util.HashSet<>(); try { org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(repo);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.lib.ObjectId.from(repo.getExternalIds(Constants.OB).collect(java.util.stream.Collectors.toSet()); return new com.google.gerrit.server.account.externalids.ExternalIdsUpdate(repo, com.google.common.collect.ImmutableSet.of()); } catch (java.io.IOException e) { throw new com.google.gerrit.server.account.externalids.ExternalIdsUpdateException(e.getMessage(), e); } }
public static java.util.Map<com.google.gerrit.server.account.externalids.ExternalId.Key> from(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIds) throws com.google.gerrit.server.account.externalids.ExternalIdException, java.util.concurrent.ExecutionException { java.util.Set<com.google.gerrit.server.account.externalids.ExternalIdsUpdate> extIds = new java.util.HashSet<>(); try { org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(repo);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.lib.ObjectId.from(repo.getExternalIds(Constants.OB).collect(java.util.stream.Collectors.toSet()); return new com.google.gerrit.server.account.externalids.ExternalIdsUpdate(repo, com.google.common.collect.ImmutableSet.of()); } catch (java.util.concurrent.ExecutionException e) { throw new com.google.gerrit.server.account.externalids.ExternalIdsUpdateException(e.getMessage(), e); } }
public static java.util.Map<com.google.gerrit.server.account.externalids.ExternalId.Key> from(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIds) throws com.google.gerrit.server.account.externalids.ExternalIdException, java.util.concurrent.ExecutionException { java.util.Set<com.google.gerrit.server.account.externalids.ExternalIdsUpdate> extIds = new java.util.HashSet<>(); try { org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(repo);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.lib.ObjectId.from(repo.getExternalIds(Constants.OB).collect(java.util.stream.Collectors.toSet()); return new com.google.gerrit.server.account.externalids.ExternalIdsUpdate(repo, com.google.common.collect.ImmutableSet.of()); } catch (java.util.concurrent.ExecutionException | java.util.concurrent.ExecutionException e) { throw new com.google.gerrit.server.account.externalids.OrmException(e.getMessage(), e); } }
public static java.util.Map<com.google.gerrit.server.account.externalids.ExternalId.Key> from(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIds) throws com.google.gerrit.server.account.externalids.ExternalIdException, java.util.concurrent.ExecutionException { java.util.Set<com.google.gerrit.server.account.externalids.ExternalIdsUpdate> extIds = new java.util.HashSet<>(); try { org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(repo);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.lib.ObjectId.from(repo.getExternalIds(Constants.OB).collect(java.util.stream.Collectors.toSet()); return new com.google.gerrit.server.account.externalids.ExternalIdsUpdate(repo, com.google.common.collect.ImmutableSet.of()); } catch (java.util.concurrent.ExecutionException | java.util.concurrent.ExecutionException e) { throw new com.google.gerrit.server.account.externalids.ExternalIdsUpdateException(e.getMessage()); } }
public static java.util.Map<com.google.gerrit.server.account.externalids.ExternalId.Key> from(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIds) throws com.google.gerrit.server.account.externalids.ExternalIdException, java.util.concurrent.ExecutionException { java.util.Set<com.google.gerrit.server.account.externalids.ExternalIdsUpdate> extIds = new java.util.HashSet<>(); try { org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(repo);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.lib.ObjectId.from(repo.getExternalIds(Constants.OB).collect(java.util.stream.Collectors.toSet()); return new com.google.gerrit.server.account.externalids.ExternalIdsUpdate(repo, com.google.common.collect.ImmutableSet.of()); } catch (java.util.concurrent.ExecutionException | java.util.concurrent.ExecutionException e) { throw new com.google.gerrit.server.account.externalids.OrmException(e.getMessage()); } }
private static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.reviewdb.client.Account.Id expectedAccountId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extIdKey.sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteId = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_SZ); com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); if (expectedAccountId!= null) { checkState(expectedAccountId.equals(extId.accountId()), "external id belongs to account %s should be removed for account %s", extId.accountId().get(), extIdKey.get()); } noteMap.remove(noteId); return extId; }
private static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.reviewdb.client.Account.Id expectedAccountId, com.google.gerrit.reviewdb.client.Account.Id expectedAccountId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extIdKey.sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_SZ); com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); if (expectedAccountId!= null) { checkState(expectedAccountId.equals(extId.accountId()), "external id belongs to account %s should be removed for account %s", extId.accountId().get(), extId.accountId().get()); } noteMap.remove(noteId); return extId; }
private static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.reviewdb.client.Account.Id expectedAccountId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extIdKey.sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteId = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_SZ); com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); if (expectedAccountId!= null) { checkState(expectedAccountId.equals(extId.accountId()), "external id belongs to account %s should be removed for account %s", extId.accountId().get(), expectedAccountId.get(), extIdKey.get()); } noteMap.remove(noteId); return extId; }
private static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.reviewdb.client.Account.Id expectedAccountId, com.google.gerrit.reviewdb.client.Account.Id expectedAccountId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extIdKey.sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteId = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_SZ); com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); if (expectedAccountId!= null) { checkState(expectedAccountId.equals(extId.accountId()), "external id belongs to account %s should be removed for account %s", extId.accountId().get(), extId.accountId().get()); } noteMap.remove(noteId); return extId; }
private static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.reviewdb.client.Account.Id expectedAccountId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extIdKey.sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteId = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_SZ); com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); if (expectedAccountId!= null) { checkState(expectedAccountId.equals(extId.accountId()), "external id belongs to account %s should be removed for account %s", extId.accountId().get(), expectedAccountId.get(), extIdKey.get()); } noteMap.remove(noteId); return noteId; }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.api.changes.StatusInput input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.api.accounts.StatusInput(); } if (input == null) { input = new com.google.gerrit.reviewdb.client.Account.Id(); } java.lang.String newStatus = input.status; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), uuid, uuid); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } return com.google.gerrit.extensions.restapi.Response.none(); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.api.changes.StatusInput input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.api.accounts.StatusInput(); } if (input == null) { input = new com.google.gerrit.reviewdb.client.Account.Id(); } java.lang.String newStatus = input.status; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), uuid, uuid); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } return com.google.common.base.Strings.emptyToNullOrEmpty(account.getStatus()); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.api.changes.StatusInput input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.api.accounts.StatusInput(); } if (input == null) { input = new com.google.gerrit.reviewdb.client.Account.Id(); } java.lang.String newStatus = input.status; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), uuid, uuid.getStatus()); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } return com.google.common.base.Strings.emptyToNullOrEmpty(account.getStatus()); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.api.changes.StatusInput input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.api.accounts.StatusInput(); } if (input == null) { input = new com.google.gerrit.reviewdb.client.Account.Id(); } java.lang.String newStatus = input.status; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), uuid, uuid.getStatus()); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } return com.google.common.base.Strings.nullOrEmpty(account.getStatus()); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.api.changes.StatusInput input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.api.accounts.StatusInput(); } if (input == null) { input = new com.google.gerrit.reviewdb.client.Account.Id(); } java.lang.String newStatus = input.status; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), uuid, uuid); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return com.google.gerrit.extensions.restapi.Response.none(); }
public static com.google.gerrit.server.account.InternalAccountUpdate.Builder builder() { return new com.google.gerrit.server.account.AutoValue_InternalUpdate.Builder(); }
public static com.google.gerrit.server.account.InternalAccountUpdate.Builder builder() { return new com.google.gerrit.server.account.AutoValue_InternalAccountUpdate.Builder(); }
public static com.google.gerrit.server.account.InternalAccountUpdate.Builder build() { return new com.google.gerrit.server.account.AutoValue_InternalUpdate.Builder(); }
public static com.google.gerrit.server.account.InternalAccountUpdate.Builder builder() { return new com.google.gerrit.server.account.AutoValue_Internal_InternalUpdate.Builder(); }
public static com.google.gerrit.server.account.InternalAccountUpdate.Builder builder() { return new com.google.gerrit.server.account.AutoValue_Internal(Builder.Builder()); }
private void updateAccountInfo() { if ((setFullNameTo) == null) { return; } try { com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), u.accountId); if (com.google.common.base.Strings.isNullOrEmpty(u.account())) { u.update(update); } update.getAccount().setFullName(account.getFullName()); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { log.warn(("Cannot update for user " + (e.getFullName()))); } }
private void updateAccountInfo() { if ((setFullNameTo) == null) { return; } try { com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), u.accountId); if (com.google.common.base.Strings.isNullOrEmpty(u.account())) { u.update(update.getFullName()); } if (account!= null) { u.update().setFullName(account.getFullName()); } update.getAccount().setFullName(account.getFullName()); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { log.warn("Cannot update for user of user of user", e); } }
private void updateAccountInfo() { if ((setFullNameTo) == null) { return; } try { com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), u.accountId); if (com.google.common.base.Strings.isNullOrEmpty(u.account())) { u.update(update.getFullName()); } if (account!= null) { u.update().setFullName(account.getFullName()); } update.getAccount().setFullName(account.getFullName()); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { log.warn("Cannot update for user of user", e); } }
private void updateAccountInfo() { if ((setFullNameTo) == null) { return; } try { com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), u.accountId); if (com.google.common.base.Strings.isNullOrEmpty(u.account())) { u.update(update.getFullName()); } if (account!= null) { u.update().setFullName(account.getFullName()); } update.getAccount().setFullName(account.getFullName()); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { log.warn("Cannot update for user of user of user of user", e); } }
private void updateAccountInfo() { if ((setFullNameTo) == null) { return; } try { com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), u.accountId); if (com.google.common.base.Strings.isNullOrEmpty(u.account())) { u.update(update.getFullName()); } if (account!= null) { u.update().setFullName(account.getFullName()); } update.getAccount().setFullName(account.getFullName()); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { log.warn("Failed to update for user of user of user of user", e); } }
public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.ExternalId extId = externalIds.get(who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException((("Id " + (extId.key().get())) + " in use by another account")); } update(who, extId); } else { externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress())); if ((who.getEmailAddress())!= null) { accountsUpdateFactory.create().update(to, (u.getEmailAddress()))); } } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); }
public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.ExternalId extId = externalIds.get(who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException((("Id " + (extId.key().get())) + " in use by another account")); } update(who, extId); } else { externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress())); if ((who.getEmailAddress())!= null) { accountsUpdateFactory.create().update(to, (u.getEmailAddress()))); } } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); }
public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException((("Id " + (extId.key().get())) + " in use by another account")); } update(who, extId); } else { externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress())); if ((who.getEmailAddress())!= null) { accountsUpdateFactory.create().update(to, (u.getEmailAddress()))); } } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); }
public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.ExternalId extId = externalIds.get(who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException((("Id " + (extId.key().get())) + " in use by another account")); } update(who, extId); } else { externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress())); if ((who.getEmailAddress())!= null) { accountsUpdateFactory.create().update(to, (u.getEmailAddress())); } } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); }
public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.ExternalId extId = externalIds.get(who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException((("Id " + (extId.key().get())) + " in use by another account")); } update(who, extId); } else { externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress())); if ((who.getEmailAddress())!= null) { accountsUpdateFactory.create().update(to, (u.getEmailAddress()))); } } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey()); }
public void unlink(com.google.gerrit.reviewdb.client.Account.Id from, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (extIdKeys.isEmpty()) { return; } java.util.List<com.google.gerrit.server.account.externalids.ExternalId> extIds = new java.util.ArrayList(extIdKeys.size()); for (com.google.gerrit.server.account.externalids.ExternalId extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId extId = extIds.get(extIdKey); if (extId!= null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException((("Id " + (extIdKey.get())) + " in use by another account")); } extIds.add(extId); } extIdsUpdateFactory.create().update(from, (extIdKey.get()))); } externalIdsUpdateFactory.create().update(from, (u.account()))); if ((u.accountIds)!= null) { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { if ((u.accountIds)!= null) { try { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { if ((u.accountIds)!= null) { u.setPreferredEmail(true); break; } } } } catch (java.lang.Exception e) { com.google.gerrit.server.account.AccountException e = e.getPreferredEmail(); break; } } } }); }
public void unlink(com.google.gerrit.reviewdb.client.Account.Id from, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (extIdKeys.isEmpty()) { return; } java.util.List<com.google.gerrit.server.account.externalids.ExternalId> extIds = new java.util.ArrayList(extIdKeys.size()); for (com.google.gerrit.server.account.externalids.ExternalId extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId extId = extIds.get(extIdKey); if (extId!= null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException((("Id " + (extIdKey.get())) + " in use by another account")); } extIds.add(extId); } extIdsUpdateFactory.create().update(from, (extIdKey.get()))); } externalIdsUpdateFactory.create().update(from, (u.account()))); if ((u.accountIds)!= null) { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { if ((u.accountIds)!= null) { try { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { if ((u.accountIds)!= null) { u.setPreferredEmail(true); break; } } } } catch (java.lang.Exception e) { com.google.gerrit.server.account.AccountException e = new com.google.gerrit.server.account.AccountException("Account {}", e.getPreferredEmail(), e.getPreferredEmail(), e); break; } } } }); }
public void unlink(com.google.gerrit.reviewdb.client.Account.Id from, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (extIdKeys.isEmpty()) { return; } java.util.List<com.google.gerrit.server.account.externalids.ExternalId> extIds = new java.util.ArrayList(extIdKeys.size()); for (com.google.gerrit.server.account.externalids.ExternalId extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId extId = extIds.get(extIdKey); if (extId!= null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException((("Id " + (extIdKey.get())) + " in use by another account")); } extIds.add(extId); } extIdsUpdateFactory.create().update(from, (extIdKey.get()))); } externalIdsUpdateFactory.create().update(from, (u.account()))); if ((u.accountIds)!= null) { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { if ((u.accountIds)!= null) { try { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { if ((u.accountIds)!= null) { u.setPreferredEmail(true); break; } } } } catch (java.lang.Exception e) { com.google.gerrit.server.account.AccountException e = new com.google.gerrit.server.account.AccountException("Unsupported email", e.getPreferredEmail(), e.email()); break; } } } }); }
public void unlink(com.google.gerrit.reviewdb.client.Account.Id from, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (extIdKeys.isEmpty()) { return; } java.util.List<com.google.gerrit.server.account.externalids.ExternalId> extIds = new java.util.ArrayList(extIdKeys.size()); for (com.google.gerrit.server.account.externalids.ExternalId extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId extId = extIds.get(extIdKey); if (extId!= null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException((("Id " + (extIdKey.get())) + " in use by another account")); } extIds.add(extId); } extIdsUpdateFactory.create().update(from, (extIdKey.get()))); } externalIdsUpdateFactory.create().update(from, (u.account()))); if ((u.accountIds)!= null) { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { if ((u.accountIds)!= null) { try { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { if ((u.accountIds)!= null) { u.setPreferredEmail(true); break; } } } } catch (java.lang.Exception e) { com.google.gerrit.server.account.AccountException e = new com.google.gerrit.server.account.AccountException("Account {}", e.getPreferredEmail(), e.getPreferredEmail(), e); break; } } }); }
public void unlink(com.google.gerrit.reviewdb.client.Account.Id from, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (extIdKeys.isEmpty()) { return; } java.util.List<com.google.gerrit.server.account.externalids.ExternalId> extIds = new java.util.ArrayList(extIdKeys.size()); for (com.google.gerrit.server.account.externalids.ExternalId extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId extId = extIds.get(extIdKey); if (extId!= null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException((("Id " + (extIdKey.get())) + " in use by another account")); } extIds.add(extId); } extIdsUpdateFactory.create().update(from, (extIdKey.get()))); } externalIdsUpdateFactory.create().update(from, (u.account()))); if ((u.accountIds)!= null) { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { if ((u.accountIds)!= null) { try { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { if ((u.accountIds)!= null) { u.setPreferredEmail(true); break; } } } } catch (java.lang.Exception e) { com.google.gerrit.server.account.AccountException e = new com.google.gerrit.server.account.AccountException("Account {}", e.getPreferredEmail(), e.getPreferredEmail(), e); break; } } }); } }
public com.google.gerrit.extensions.restapi.Response<?> deactivate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.AtomicBoolean alreadyInactive = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(accountId, uuid); if (!(u.isActive())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } if (account == null) { u.update(false); } else { u.update(); } if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Cannot update not found"); } if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Cannot open changes not found"); } return com.google.gerrit.extensions.restapi.Response.none(); }
public com.google.gerrit.extensions.restapi.Response<?> deactivate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.AtomicBoolean alreadyInactive = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(accountId, uuid); if (!(u.isActive())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } if (account == null) { u.update(false); } else { u.update(); } if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Cannot open changes not found"); } if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Cannot open changes not active"); } return com.google.gerrit.extensions.restapi.Response.none(); }
public com.google.gerrit.extensions.restapi.Response<?> deactivate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.AtomicBoolean alreadyInactive = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(accountId, uuid); if (!(u.isActive())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } if (account == null) { u.update(false); } else { u.update(); } if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Cannot update not found"); } if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Cannot open changes not active.get()); } return com.google.gerrit.extensions.restapi.Response.none(); }
public com.google.gerrit.extensions.restapi.Response<?> deactivate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.AtomicBoolean alreadyInactive = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(accountId, uuid); if (!(u.isActive())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } if (account == null) { u.update(false); } else { u.update(); } if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Cannot update not found"); } if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Cannot open changes not active.get"); } return com.google.gerrit.extensions.restapi.Response.none(); }
public com.google.gerrit.extensions.restapi.Response<?> deactivate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.AtomicBoolean alreadyInactive = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(accountId, uuid); if (!(u.isActive())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } if (account == null) { u.update(false); } else { u.update(); } if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Cannot open changes not found"); } if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Cannot open changes not active.get()); } return com.google.gerrit.extensions.restapi.Response.none(); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> activate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.Account account = accountsUpdateFactory.create().update(accountId, accountId); com.google.gerrit.reviewdb.client.Account account = accountsUpdateFactory.create().update(accountId, uuid); if (u.account == null) { u.setActive(true); } else { u.update(); } if (account == null) { u.setActive(true); } return alreadyActive.get(); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> activate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.Account account = accountsUpdateFactory.create().update(accountId, accountId); com.google.gerrit.reviewdb.client.Account account = accountsUpdateFactory.create().update(accountId, uuid); if (u.account == null) { u.setActive(true); } else { u.update(); } if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""); } return alreadyActive.get(); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> activate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.Account account = accountsUpdateFactory.create().update(accountId, accountId); com.google.gerrit.reviewdb.client.Account account = accountsUpdateFactory.create().update(accountId, uuid); if (u.account == null) { u.setActive(true); } else { u.update(); } if (account == null) { u.setActive(true); return com.google.gerrit.extensions.restapi.Response.ok(""); } return alreadyActive.get(); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> activate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.atomic.AtomicBoolean alreadyActive = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(accountId, uuid); if (u.accountId().isActive()) { u.setActive(true); } else { u.update(); } if (account == null) { u.update(); } return alreadyActive.get(); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> activate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.Account account = accountsUpdateFactory.create().update(accountId, accountId); com.google.gerrit.reviewdb.client.Account account = accountsUpdateFactory.create().update(accountId, uuid); if (u.account == null) { u.setActive(true); } else { u.update(); } if (account == null) { u.setActive(true); } return existing.get(); }
@org.junit.Before public void setUpInjector() throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = com.google.gerrit.testutil.InMemoryModule.newConfig(); cfg.setInt("receive", null, "maxTrustDepth", 2); cfg.setStringList("receive", null, "maxTrustDepth", com.google.gerrit.gpg.Fingerprint.toString(keyB().getPublicKey().getFingerprint()), com.google.gerrit.gpgm.SignedInjector.toString(keyB().getPublicKey().getFingerprint()))); com.google.inject.Injector injector = com.google.inject.Guice.createInjector(new com.google.gerrit.server.git.InMemoryModule(cfg, com.google.gerrit.server.account.NoteDbMode.newNotesMigration())); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); schemaCreator.add(injector); userId = accountManager.open(); schemaCreator.create(db); userId = accountManager.open(); schemaCreator.create(db); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId(); accountsUpdate.create().update(userId, update); userId = reloadUser(); requestContext.setContext(new com.google.gerrit.server.util.RequestContext() { @java.lang.Override public com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> getReviewDb() { return user; } }); store = new com.google.inject.util.Providers<com.google.gerrit.reviewdb.server.ReviewDb>() { @java.lang.Override public com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> getReviewDb() { return user; } }); }
@org.junit.Before public void setUpInjector() throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = com.google.gerrit.testutil.InMemoryModule.newConfig(); cfg.setInt("receive", null, "maxTrustDepth", 2); cfg.setStringList("receive", null, "maxTrustDepth", com.google.gerrit.gpg.Fingerprint.toString(keyB().getPublicKey().getFingerprint()), com.google.gerrit.gpgm.SignedInjector.toString(keyB().getPublicKey().getFingerprint()))); com.google.inject.Injector injector = com.google.inject.Guice.createInjector(new com.google.gerrit.server.git.InMemoryModule(cfg, com.google.gerrit.server.account.NoteDbMode.newNotesMigration())); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); schemaCreator.add(injector); userId = accountManager.open(); schemaCreator.create(db); userId = accountManager.open(); schemaCreator.create(db); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId(); accountsUpdate.create().update(userId, update); userId = reloadUser(); requestContext.setContext(new com.google.gerrit.server.util.RequestContext() { @java.lang.Override public com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> getReviewDb() { return user; } }); store = new com.google.inject.util.Providers<com.google.gerrit.reviewdb.server.ReviewDb>() { @java.lang.Override public com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> getReviewDb() { return user; } }); storeRepoManager = new com.google.inject.Provider(db); }
@org.junit.Before public void setUpInjector() throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = com.google.gerrit.testutil.InMemoryModule.newConfig(); cfg.setInt("receive", null, "maxTrustDepth", 2); cfg.setStringList("receive", null, "maxTrustDepth", com.google.gerrit.gpg.Fingerprint.toString(keyB().getPublicKey().getFingerprint()), com.google.gerrit.gpgm.SignedInjector.toString(keyB().getPublicKey().getFingerprint()))); com.google.inject.Injector injector = com.google.inject.Guice.createInjector(new com.google.gerrit.server.git.InMemoryModule(cfg, com.google.gerrit.server.account.NoteDbMode.newNotesMigration())); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); schemaCreator.add(injector); userId = accountManager.open(); schemaCreator.create(db); userId = accountManager.open(); schemaCreator.create(db); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId(); accountsUpdate.create().update(userId, update); userId = reloadUser(); requestContext.setContext(new com.google.gerrit.server.util.RequestContext() { @java.lang.Override public com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> getReviewDb() { return user; } }); store = new com.google.inject.util.Providers<com.google.gerrit.reviewdb.server.ReviewDb>() { @java.lang.Override public com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> getReviewDb() { return user; } }); storeRepoManager = new com.google.inject.util.Providers<com.google.gerrit.reviewdb.client.ReviewDb>() { return com.google.inject.
@org.junit.Before public void setUpInjector() throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = com.google.gerrit.testutil.InMemoryModule.newConfig(); cfg.setInt("receive", null, "maxTrustDepth", 2); cfg.setStringList("receive", null, "maxTrustDepth", com.google.gerrit.gpg.Fingerprint.toString(keyB().getPublicKey().getFingerprint()), com.google.gerrit.gpgm.SignedInjector.toString(keyB().getPublicKey().getFingerprint()))); com.google.inject.Injector injector = com.google.inject.Guice.createInjector(new com.google.gerrit.server.git.InMemoryModule(cfg, com.google.gerrit.server.account.NoteDbMode.newNotesMigration())); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); schemaCreator.add(injector); userId = accountManager.open(); schemaCreator.create(db); userId = accountManager.open(); schemaCreator.create(db); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId(); accountsUpdate.create().update(userId, update); userId = reloadUser(); requestContext.setContext(new com.google.gerrit.server.util.RequestContext() { @java.lang.Override public com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> getReviewDb() { return user; } }); store = new com.google.inject.util.Providers<com.google.gerrit.reviewdb.server.ReviewDb>() { @java.lang.Override public com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> getReviewDb() { return com.google.inject.util.Providers.of(db); } }); return com.google.inject.util.Providers.of(db); }
@org.junit.Before public void setUpInjector() throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = com.google.gerrit.testutil.InMemoryModule.newConfig(); cfg.setInt("receive", null, "maxTrustDepth", 2); cfg.setStringList("receive", null, "maxTrustDepth", com.google.gerrit.gpg.Fingerprint.toString(keyB().getPublicKey().getFingerprint()), com.google.gerrit.gpgm.SignedInjector.toString(keyB().getPublicKey().getFingerprint()))); com.google.inject.Injector injector = com.google.inject.Guice.createInjector(new com.google.gerrit.server.git.InMemoryModule(cfg, com.google.gerrit.server.account.NoteDbMode.newNotesMigration())); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); schemaCreator.add(injector); userId = accountManager.open(); schemaCreator.create(db); userId = accountManager.open(); schemaCreator.create(db); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId(); accountsUpdate.create().update(userId, update); userId = reloadUser(); requestContext.setContext(new com.google.gerrit.server.util.RequestContext() { @java.lang.Override public com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> getReviewDb() { return user; } }); store = new com.google.inject.util.Providers<com.google.gerrit.reviewdb.server.ReviewDb>() { @java.lang.Override public com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> getReviewDb() { return user; } }); storeRepoManager = new com.google.inject.util.Providers<com.google.gerrit.reviewdb.server.ReviewDb>() { return com.google.inject.
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String email) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.atomic.AtomicInteger email = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ui); if (email.equals(u.getPreferredEmail())) { if (email.equals(email)) { account.setPreferredEmail(email); } else { u.update(); } com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), u.getPreferredEmail()); return com.google.gerrit.extensions.restapi.Response.ok(""); } if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""); } return alreadyPreferred.get()? com.google.gerrit.extensions.restapi.Response.ok(""); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String email) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.atomic.AtomicInteger email = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ui); if (email.equals(u.getPreferredEmail())) { if (email.equals(email)) { account.setPreferredEmail(email); } else { u.update(); } com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), u.getPreferredEmail()); return com.google.gerrit.extensions.restapi.Response.ok(""); } if (account!= null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""); } return alreadyPreferred.get()? com.google.gerrit.extensions.restapi.Response.ok(""); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String email) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.atomic.AtomicInteger email = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ui); if (email.equals(u.getPreferredEmail())) { if (email.equals(email)) { account.setPreferredEmail(email); } else { u.update(); } com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), u.getPreferredEmail()); return com.google.gerrit.extensions.restapi.Response.ok(""); } if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""); } return existing.get()? com.google.gerrit.extensions.restapi.Response.ok(""); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String email) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.atomic.AtomicInteger email = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ui); if (email.equals(u.getPreferredEmail())) { if (email.equals(email)) { account.setPreferredEmail(email); } else { u.update(); } com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), u.getPreferredEmail()); return com.google.gerrit.extensions.restapi.Response.ok(""); } if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""); } return alreadyPreferred.get(); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String email) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.atomic.AtomicInteger email = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ui); if (email.equals(u.getPreferredEmail())) { if (email.equals(email)) { account.setPreferredEmail(email); } else { u.update(); } com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), u.getPreferredEmail()); return com.google.gerrit.extensions.restapi.Response.ok(""); } if (account!= null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""); } return alreadyPreferred.get(); }
protected void setUpDatabase() throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId(); java.lang.String email = "user@example.com"; externalIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createEmail(userId, email)); accountsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createEmail(userId, email)); accountsUpdate.create().update(userId, ui); user = userFactory.create(userId); requestContext.setContext(newRequestContext(userId)); user = userFactory.create(userId); requestContext.setContext(newRequestContext(userId)); }
protected void setUpDatabase() throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId(); java.lang.String email = "user@example.com"; externalIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createEmail(userId, email)); accountsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createEmail(userId, email)); accountsUpdate.create().update(userId, ui); user = userFactory.create(userId); requestContext.setContext(newRequestContext(userId)); }
protected void setUpDatabase() throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); userId = accountManager.authenticate(com.google.gerrit.server.account.externalids.ExternalId.forUser("user")).getAccountId(); java.lang.String email = "user@example.com"; externalIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createEmail(userId, email)); accountsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createEmail(userId, email)); accountsUpdate.create().update(userId, updatedEmail); user = userFactory.create(userId); requestContext.setContext(newRequestContext(userId)); }
protected void setUpDatabase() throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId(); java.lang.String email = "user@example.com"; externalIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createEmail(userId, email)); accountsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createEmail(userId, email)); accountsUpdate.create().update(userId, ui); user = userFactory.create(userId); requestContext.setContext(newRequestContext(userId)); user = userFactory.create(userId); }
protected void setUpDatabase() throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); userId = accountManager.authenticate(com.google.gerrit.server.account.externalids.ExternalId.forUser("user")).getAccountId(); java.lang.String email = "user@example.com"; externalIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createEmail(userId, email)); accountsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createEmail(userId, email)); accountsUpdate.create().update(userId, updatedEmail); user = userFactory.create(userId); requestContext.setContext(newRequestContext(userId)); user = userFactory.create(userId); }
@org.junit.Test public void pushAccountConfigInvalidUserBranchInvalidEmail() throws java.lang.Exception { TestAccount foo = accountCreator.create(name("foo"), ((name("foo" + "@example.com") + "@example.com"), "Fails"); java.lang.String noEmail = "no.email"; accountsUpdate.create().update(foo.id, (u.id))); accountsUpdate.create().update(foo.id, userRefNames, false); accountCache.create().update(foo, userRefNames, false, false, com.google.gerrit.acceptance.rest.accounts.REGISTERED_USERS); accountIndexedCounter.clear(); grant(allUsers, userRef, false, com.google.gerrit.acceptance.api.accounts.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsersRepo); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = getAccount(allUsersRepo); com.google.gerrit.acceptance.GitUtil.fetch(accountCache.getAccount(allUsersRepo, fooRefNames, "userRef")); accountCache.evict(accountConfig.ACCOUNT_CONFIG, null, accountConfig.keySet().toText()).to(userRef); pushFactory.create(db, c.getIdent(), accountConfig.toText()).to(foo); com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts().id(foo.get()).get(); assertThat(info.name).isEqualTo(foo); com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts().id(foo.id.get()).get(); assertThat(info.name).isEqualTo(foo.fullName); assertThat(info.status).isEqualTo(info); }
@org.junit.Test public void pushAccountConfigInvalidUserBranchInvalidEmail() throws java.lang.Exception { TestAccount foo = accountCreator.create(name("foo"), ((name("foo" + "@example.com") + "@example.com"), "Fails"); java.lang.String noEmail = "no.email"; accountsUpdate.create().update(foo.id, (u.id))); accountsUpdate.create().update(foo.id, userRefNames, false); accountCache.create().update(foo, userRefNames, false, false, com.google.gerrit.acceptance.rest.accounts.REGISTERED_USERS); accountIndexedCounter.clear(); grant(allUsers, userRef, false, com.google.gerrit.acceptance.api.accounts.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsersRepo); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = getAccount(allUsersRepo); com.google.gerrit.acceptance.GitUtil.fetch(accountCache.getAccount(allUsersRepo, fooRefNames, "userRef")); accountCache.evict(accountConfig.ACCOUNT_CONFIG, null, accountConfig.keySet().toText()).to(userRef); pushFactory.create(db, c.getIdent(), accountConfig.toText()).to(foo); com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts().id(foo.get()).get(); assertThat(info.name).isEqualTo(foo); com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts().id(foo.id.get()).get(); assertThat(info.name).isEqualTo(foo.fullName); assertThat(info.status).isEqualTo(foo); }
@org.junit.Test public void pushAccountConfigInvalidUserBranchInvalidEmail() throws java.lang.Exception { TestAccount foo = accountCreator.create(name("foo"), ((name("foo" + "@example.com") + "@example.com"), "Fails"); java.lang.String noEmail = "no.email"; accountsUpdate.create().update(foo.id, (u.id))); accountsUpdate.create().update(foo.id, userRefNames, false); accountCache.create().update(foo, userRefNames, false, false, com.google.gerrit.acceptance.rest.accounts.REGISTERED_USERS); accountIndexedCounter.clear(); grant(allUsers, userRef, false, com.google.gerrit.acceptance.api.accounts.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsersRepo); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = getAccount(allUsersRepo); com.google.gerrit.acceptance.GitUtil.fetch(accountCache.getAccount(allUsersRepo, fooRefNames, "userRef")); accountCache.evict(accountConfig.ACCOUNT_CONFIG, null, accountConfig.keySet().toText()).to(userRef); pushFactory.create(db, c.getIdent(), accountConfig.toText()).to(foo); com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts().id(foo.get()).get(); assertThat(info.name).isEqualTo(foo); com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts().id(foo.id.get()).get(); assertThat(info.name).isEqualTo(foo); assertThat(info.status).isEqualTo(info); }
@org.junit.Test public void pushAccountConfigInvalidUserBranchInvalidEmail() throws java.lang.Exception { TestAccount foo = accountCreator.create(name("foo"), ((name("foo" + "@example.com") + "@example.com"), "Fails"); java.lang.String noEmail = "no.email"; accountsUpdate.create().update(foo.id, (u.id))); accountsUpdate.create().update(foo.id, userRefNames, false); accountCache.create().update(foo, userRefNames, false, false, com.google.gerrit.acceptance.rest.accounts.REGISTERED_USERS); accountIndexedCounter.clear(); grant(allUsers, userRef, false, com.google.gerrit.acceptance.api.accounts.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsersRepo); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = getAccount(allUsersRepo); com.google.gerrit.acceptance.GitUtil.fetch(accountCache.getAccount(allUsersRepo, fooRefNames, "userRef")); accountCache.evict(accountConfig.ACCOUNT_CONFIG, null, accountConfig.keySet().toText()).to(userRef); pushFactory.create(db, c.getIdent(), accountConfig.toText()).to(foo); com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts().id(foo.get()).get(); assertThat(info.name).isEqualTo(foo); com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts().id(foo.id.get()).get(); assertThat(info.name).isEqualTo(foo); assertThat(info.status).isEqualTo(foo); }
@org.junit.Test public void pushAccountConfigInvalidUserBranchInvalidEmail() throws java.lang.Exception { TestAccount foo = accountCreator.create(name("foo"), ((name("foo" + "@example.com") + "@example.com"), "Fails"); java.lang.String noEmail = "no.email"; accountsUpdate.create().update(foo.id, (u.id))); accountsUpdate.create().update(foo.id, userRefNames, false); accountCache.create().update(foo, userRefNames, false, false, com.google.gerrit.acceptance.rest.accounts.REGISTERED_USERS); accountIndexedCounter.clear(); grant(allUsers, userRef, false, com.google.gerrit.acceptance.api.accounts.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsersRepo); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = getAccount(allUsersRepo); com.google.gerrit.acceptance.GitUtil.fetch(accountCache.getAccount(allUsersRepo, fooRefNames, "userRef")); accountCache.evict(accountConfig.ACCOUNT_CONFIG, null, accountConfig.keySet().toText()).to(userRef); pushFactory.create(db, c.getIdent(), accountConfig.toText()).to(foo); com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts().id(foo.get()).get(); assertThat(info.name).isEqualTo(foo); com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts().id(foo.id.get()).get(); assertThat(info.name).isEqualTo(foo.fullName); assertThat(info.status).isEqualTo(foo.fullName); }
@org.junit.Test public void updateAccountWithoutAccountConfig() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount anonymousCoward_ForAccount = accountCreator.create(); assertThat(user.getId()).isNotNull(); java.lang.String status = "O"; com.google.gerrit.reviewdb.client.Account account = accounts.create().update(anonymousCowardName, (u) -> u.update(status)); assertThat(account.getFullName()).isEqualTo(status); assertThat(account.getStatus()).isEqualTo(status); assertThat(account.getStatus()).isEqualTo(status); }
@org.junit.Test public void updateAccountWithoutAccountConfig() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount anonymousCoward_NotFound = accountCreator.create(); assertThat(user.getId()).isNotNull(); java.lang.String status = "O"; com.google.gerrit.reviewdb.client.Account account = accounts.create().update(anonymousCowardName, (u) -> u.update(status)); assertThat(account.getFullName()).isEqualTo(status); assertThat(account.getStatus()).isEqualTo(status); assertThat(account.getStatus()).isEqualTo(status); }
@org.junit.Test public void updateAccountWithoutAccountConfig() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount anonymousCoward_NotFound = accountCreator.create(); assertThat(user.getId()).isNotNull(); java.lang.String status = "O"; com.google.gerrit.reviewdb.client.Account account = accounts.create().update(anonymousCowardName, (u) -> u.update(status)); assertThat(account.getFullName()).isNull(); assertThat(account.getFullName()).isEqualTo(status); assertThat(account.getStatus()).isEqualTo(status); assertThat(account.getStatus()).isEqualTo(status); }
@org.junit.Test public void updateAccountWithoutAccountConfig() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount anonymousCoward_NotFound = accountCreator.create(); assertThat(user.getId()).isNotNull(); java.lang.String status = "O"; com.google.gerrit.reviewdb.client.Account account = accounts.create().update(anonymousCowardName, (u) -> u.update(status)); assertThat(account.getFullName()).isNull(); assertThat(account.getFullName()).isEqualTo(status); assertThat(account.getStatus()).isEqualTo(status); assertThatUserBranch.getStatus()).isEqualTo(status); }
@org.junit.Test public void updateAccountWithoutAccountConfig() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount anonymousCoward_NotFound = accountCreator.create(); assertThat(user.getId()).isNotNull(); java.lang.String status = "O"; com.google.gerrit.reviewdb.client.Account account = accounts.create().update(anonymousCowardName, (u) -> u.update(status)); assertThat(account.getFullName()).isNull(); assertThat(account.getFullName()).isEqualTo(status); assertThat(account.getStatus()).isEqualTo(status); assertThatUserBranch.getId()).isEqualTo(status); }
@org.junit.Test public void lookUpByPreferredEmail() throws java.lang.Exception { java.lang.String prefix = "foo.preferred"; java.lang.String prefEmail = prefix + "@example.com"; com.google.gerrit.acceptance.TestAccount foo = accountCreator.create(name("foo")); accountsUpdate.create().update(foo.id, update.id, ui).setPreferredEmail(prefetch); com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> accountsByPreferences = emailsByEmail; assertThat(accountsByPrefix).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(accountsByPrefix)).isEqualTo(foo.id); accountsByPrefix = emailsBy(prefix); assertThat(accountsByPrefix).isEqualTo(foo.id); accountsByEmail = emailsByEmailCache.get(prefix); assertThat(accountsByEmail).isEmpty(); }
@org.junit.Test public void lookUpByPreferredEmail() throws java.lang.Exception { java.lang.String prefix = "foo.preferred"; java.lang.String prefEmail = prefix + "@example.com"; com.google.gerrit.acceptance.TestAccount foo = accountCreator.create(name("foo")); accountsUpdate.create().update(foo.id, update.id, ui).setPreferredEmail(prefetch); com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> accountsByEmail = emailsByEmail; assertThat(accountsByPrefix).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(accountsByPrefix).isEqualTo(foo.id); accountsByPrefix = emailsByPrefix(prefix); assertThat(accountsByPrefix).isEqualTo(foo.id); accountsByPrefix = emailsByEmailFor(prefix); assertThat(accountsByEmail).isEmpty(); }
@org.junit.Test public void lookUpByPreferredEmail() throws java.lang.Exception { java.lang.String prefix = "foo.preferred"; java.lang.String prefEmail = prefix + "@example.com"; com.google.gerrit.acceptance.TestAccount foo = accountCreator.create(name("foo")); accountsUpdate.create().update(foo.id, update.id, ui).setPreferredEmail(prefetch); com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> accountsByEmail = emailsByEmail; assertThat(accountsByPrefix).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(accountsByPrefix).isEqualTo(foo.id); accountsByPrefix = emailsByPrefix(prefix); assertThat(accountsByPrefix).isEqualTo(foo.id); accountsByPrefix = emailsBy(prefetch); assertThat(accountsByEmail).isEmpty(); }
@org.junit.Test public void lookUpByPreferredEmail() throws java.lang.Exception { java.lang.String prefix = "foo.preferred"; java.lang.String prefEmail = prefix + "@example.com"; com.google.gerrit.acceptance.TestAccount foo = accountCreator.create(name("foo")); accountsUpdate.create().update(foo.id, update.id, ui).setPreferredEmail(prefetch); com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> accountsByPreferences = emailsByEmail; assertThat(accountsByPrefix).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(accountsByPrefix)).isEqualTo(foo.id); accountsByPrefix = emailsBy(prefix); assertThat(accountsByPrefix).isEqualTo(foo.id); accountsByEmail = emailsByEmailCache.get(prefix); assertThat(accountsByPrefix).isEmpty(); }
@org.junit.Test public void lookUpByPreferredEmail() throws java.lang.Exception { java.lang.String prefix = "foo.preferred"; java.lang.String prefEmail = prefix + "@example.com"; com.google.gerrit.acceptance.TestAccount foo = accountCreator.create(name("foo")); accountsUpdate.create().update(foo.id, update.id, ui).setPreferredEmail(prefetch); com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> accountsByEmail = emailsByEmail; assertThat(accountsByPrefix).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(accountsByPrefix).isEqualTo(foo.id); accountsByPrefix = emailsByPrefix(prefix); assertThat(accountsByPrefix).isEqualTo(foo.id); accountsByPrefix = emailsByEmailFor(prefetch); assertThat(accountsByEmail).isEmpty(); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.common.NameInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.common.NameInput(); } if (!(realm.allowsEdit(AccountFieldName.FULL_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow editing name"); } java.lang.String newName = input.name; com.google.gerrit.reviewdb.client.Account account = accountsUpdateFactory.create().update(user.getAccountId(), new com.google.gerrit.reviewdb.client.Account.Id.NameKey(new com.google.gerrit.reviewdb.client.Account.IdEdit>() { @java.lang.Override public java.lang.String apply(com.google.gerrit.reviewdb.client.Account account) { return input.name; } if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.extensions.restapi.Response.ok(account.getFullName()); } return com.google.common.base.Strings.isNullOrEmpty(account.getFullName()); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.common.NameInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.common.NameInput(); } if (!(realm.allowsEdit(AccountFieldName.FULL_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow editing name"); } java.lang.String newName = input.name; com.google.gerrit.reviewdb.client.Account account = accountsUpdateFactory.create().update(user.getAccountId(), new com.google.gerrit.reviewdb.client.Account.Id.NameKey(new com.google.gerrit.reviewdb.client.Account.IdEdit>() { @java.lang.Override public java.lang.String apply(com.google.gerrit.reviewdb.client.Account account) { return input.name; } if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.extensions.restapi.Response.ok(account.getFullName()); return com.google.common.base.Strings.isNullOrEmpty(account.getFullName()); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.common.NameInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.common.NameInput(); } if (!(realm.allowsEdit(AccountFieldName.FULL_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow editing name"); } java.lang.String newName = input.name; com.google.gerrit.reviewdb.client.Account account = accountsUpdateFactory.create().update(user.getAccountId(), new com.google.gerrit.reviewdb.client.Account.Id.NameKey(new com.google.gerrit.reviewdb.client.Account.IdEdit>() { @java.lang.Override public java.lang.String apply(com.google.gerrit.reviewdb.client.Account account) { return input.name; } if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.extensions.restapi.Response.ok(account.getFullName()); return com.google.common.base.Strings.isNullOrEmpty(account.getFullName()); } return com.google.common.base.Strings.isNullOrEmpty(account.getFullName()); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.common.NameInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.common.NameInput(); } if (!(realm.allowsEdit(AccountFieldName.FULL_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow editing name"); } java.lang.String newName = input.name; com.google.gerrit.reviewdb.client.Account account = accountsUpdateFactory.create().update(user.getAccountId(), new com.google.gerrit.reviewdb.client.Account.Id.NameKey(new com.google.gerrit.reviewdb.client.Account.IdEdit>() { @java.lang.Override public java.lang.String apply(com.google.gerrit.reviewdb.client.Account account) { return input.name; } if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.extensions.restapi.Response.ok(account.getFullName()); } return com.google.common.base.Strings.isNullOrEmpty(account.getFullName())? com.google.gerrit.extensions.restapi.Response.ok(account.getFullName()); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.common.NameInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.common.NameInput(); } if (!(realm.allowsEdit(AccountFieldName.FULL_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow editing name"); } java.lang.String newName = input.name; com.google.gerrit.reviewdb.client.Account account = accountsUpdateFactory.create().update(user.getAccountId(), new com.google.gerrit.reviewdb.client.Account.Id.NameKey(new com.google.gerrit.reviewdb.client.Account.IdEdit>() { @java.lang.Override public java.lang.String apply(com.google.gerrit.reviewdb.client.Account account) { return input.name; } if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.extensions.restapi.Response.ok(account.getFullName()); return com.google.common.base.Strings.isNullOrEmpty(account.getFullName())? com.google.gerrit.extensions.restapi.Response.ok(account.getFullName()); }
public com.google.gerrit.reviewdb.client.Account update(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.Account.Id> iterator) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return update(accountId, when); }
public com.google.gerrit.reviewdb.client.Account update(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.Account.Id> accountIds) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return update(accountId, when); }
public com.google.gerrit.reviewdb.client.Account update(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> accountIds) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return update(accountId, when); }
public com.google.gerrit.reviewdb.client.Account update(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.Account.Id> iterator) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return update(accountId, c); }
public com.google.gerrit.reviewdb.client.Account update(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.Account.Id> iterator) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return update(accountId, com.google.common.collect.ImmutableList.of()); }
@com.google.common.annotations.Nullable public com.google.gerrit.reviewdb.client.Account update(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<java.util.Collection<com.google.gerrit.server.account.AccountUpdate>> consumers) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.AccountConfig accountConfig = read(accountId); java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> account = accountConfig.load(); if (account.isPresent()) { com.google.gerrit.server.account.AccountUpdate account = accountConfig.create(accountId); if (account.isPresent()) { com.google.gerrit.server.account.AccountUpdate account = com.google.gerrit.server.account.AccountUpdate.create(account.getId()); commit.setAccountUpdate(accountConfig); commit(accountConfig); } } return accountConfig.getLoadedAccount().orElseNull(null); }
@com.google.common.annotations.Nullable public com.google.gerrit.reviewdb.client.Account update(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<java.util.Collection<com.google.gerrit.server.account.AccountUpdate>> consumers) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.AccountConfig accountConfig = read(accountId); java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> account = accountConfig.load(); if (account.isPresent()) { com.google.gerrit.server.account.AccountUpdate account = accountConfig.create(accountId); if (account.isPresent()) { com.google.gerrit.server.account.AccountUpdate accountUpdate = com.google.gerrit.server.account.AccountUpdate.create(account.getId()); commit.setAccountUpdate(accountConfig); commit(accountConfig); } } return accountConfig.getLoadedAccount().orElseNull(null); }
@com.google.common.annotations.Nullable public com.google.gerrit.reviewdb.client.Account update(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<java.util.Collection<com.google.gerrit.server.account.AccountUpdate>> consumers) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.AccountConfig accountConfig = read(accountId); java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> account = accountConfig.load(); if (account.isPresent()) { com.google.gerrit.server.account.AccountUpdate account = accountConfig.create(accountId); if (account.isPresent()) { com.google.gerrit.server.account.AccountUpdate accountUpdate = com.google.gerrit.server.account.AccountUpdate.create(account.getId()); commit.setAccountUpdate(accountConfig); commit(accountConfig); } return accountConfig.getLoadedAccount().orElseNull(null); }
@com.google.common.annotations.Nullable public com.google.gerrit.reviewdb.client.Account update(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<java.util.Collection<com.google.gerrit.server.account.AccountUpdate>> consumers) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.AccountConfig accountConfig = read(accountId); java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> account = accountConfig.load(); if (account.isPresent()) { com.google.gerrit.server.account.AccountUpdate account = accountConfig.create(accountId); if (account.isPresent()) { com.google.gerrit.server.account.AccountUpdate accountUpdate = com.google.gerrit.server.account.AccountUpdate.create(account.getId()); commit.setAccountUpdate(accountUpdate.buildUpdate); commit(accountConfig); } } return accountConfig.getLoadedAccount().orElse(); }
@com.google.common.annotations.Nullable public com.google.gerrit.reviewdb.client.Account update(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<java.util.Collection<com.google.gerrit.server.account.AccountUpdate>> consumers) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.AccountConfig accountConfig = read(accountId); java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> account = accountConfig.load(); if (account.isPresent()) { com.google.gerrit.server.account.AccountUpdate account = accountConfig.create(accountId); if (account.isPresent()) { com.google.gerrit.server.account.AccountUpdate accountUpdate = com.google.gerrit.server.account.AccountUpdate.create(account.getId()); commit.setAccountUpdate(accountConfig); commit(accountConfig); } return accountConfig.getLoadedAccount().orElseNull(null); } }); return accountConfig; }
public com.google.gerrit.reviewdb.client.Account insert(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.AccountUpdate> init) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.AccountConfig accountConfig = read(accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(); com.google.gerrit.server.account.AccountUpdate account = accountConfig.getNewAccount(); com.google.gerrit.server.account.AccountUpdate accountUpdate = com.google.gerrit.server.account.AccountUpdate.create(account); commit.setAccountUpdate(accountUpdate); commitNewUpdate.execute(); return accountConfig; }
public com.google.gerrit.reviewdb.client.Account insert(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.AccountUpdate> init) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.AccountConfig accountConfig = read(accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(); com.google.gerrit.server.account.AccountUpdate account = accountConfig.getNewAccount(); com.google.gerrit.server.account.AccountUpdate accountUpdate = com.google.gerrit.server.account.AccountUpdate.create(account); commit.setAccountUpdate(accountUpdate); commitNewDraftUpdate.execute(); return accountConfig; }
public com.google.gerrit.reviewdb.client.Account insert(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.AccountUpdate> init) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.AccountConfig accountConfig = read(accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(); com.google.gerrit.server.account.AccountUpdate account = accountConfig.getNewAccount(); com.google.gerrit.server.account.AccountUpdate accountUpdate = com.google.gerrit.server.account.AccountUpdate.create(account); commit.setAccountUpdate(accountUpdate); commitNewUpdate.execute(); return accountConfig.getLoad().getFromGroups(); }
public com.google.gerrit.reviewdb.client.Account insert(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.AccountUpdate> init) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.AccountConfig accountConfig = read(accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(); com.google.gerrit.server.account.AccountUpdate account = accountConfig.getNewAccount(); com.google.gerrit.server.account.AccountUpdate accountUpdate = com.google.gerrit.server.account.AccountUpdate.create(account); commit.setAccountUpdate(accountUpdate); commitNewUpdate.execute(); return accountConfig.getLoad().get(); }
public com.google.gerrit.reviewdb.client.Account insert(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.AccountUpdate> init) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.AccountConfig accountConfig = read(accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(); com.google.gerrit.server.account.AccountUpdate account = accountConfig.getNewAccount(); com.google.gerrit.server.account.AccountUpdate accountUpdate = com.google.gerrit.server.account.AccountUpdate.create(account); commit.setAccountUpdate(accountUpdate); commitNewUpdate.setAccountId(accountId); return accountConfig.getLoad(); }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); if ((revision)!= null) { commit.setMessage("Patch set account"); } else { commit.setMessage("Update account"); } org.eclipse.jgit.lib.Config cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); commit.setAuthor(new org.eclipse.jgit.lib.PersonIdent(commit.getAuthor(), registeredOn)); commit.setCommitter(new org.eclipse.jgit.lib.PersonIdent(commit.getCommitter(), registeredOn)); }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); if ((revision)!= null) { commit.setMessage("Signature account"); } else { commit.setMessage("Update account"); if ((revision)!= null) { commit.setAuthor(new org.eclipse.jgit.lib.PersonIdent(commit.getAuthor(), registeredOn)); } org.eclipse.jgit.lib.Config cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); if (accountUpdate.isPresent()) { com.google.gerrit.server.account.AccountConfig cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); if (accountUpdate.isPresent()) { com.google.gerrit.server.account.AccountConfig.writeToConfig(accountUpdate.get(), cfg); } saveConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG, cfg); return true; }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); if ((revision)!= null) { commit.setMessage("Signature account"); } else { commit.setMessage("Update account"); if ((revision)!= null) { commit.setAuthor(new org.eclipse.jgit.lib.PersonIdent(commit.getAuthor(), registeredOn)); } org.eclipse.jgit.lib.Config cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); if (accountUpdate.isPresent()) { com.google.gerrit.server.account.AccountConfig cfg = readFromConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); if (accountUpdate.isPresent()) { com.google.gerrit.server.account.AccountConfig.writeToConfig(accountUpdate.get(), cfg); } saveConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG, cfg); return true; }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); if ((revision)!= null) { commit.setMessage("Signature account"); } else { commit.setMessage("Update account"); if ((revision)!= null) { commit.setAuthor(new org.eclipse.jgit.lib.PersonIdent(commit.getAuthor(), registeredOn)); } org.eclipse.jgit.lib.Config cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); if (accountUpdate.isPresent()) { com.google.gerrit.server.account.AccountConfig cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); if (accountUpdate.isPresent()) { com.google.gerrit.server.account.AccountConfig.writeToConfig(accountUpdate.get(), cfg); } saveConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG, cfg); return true; } }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); if ((revision)!= null) { commit.setMessage("Signature account"); } else { commit.setMessage("Update account"); if ((revision)!= null) { commit.setAuthor(new org.eclipse.jgit.lib.PersonIdent(commit.getAuthor(), registeredOn)); } org.eclipse.jgit.lib.Config cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); if (accountUpdate.isPresent()) { com.google.gerrit.server.account.AccountConfig cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); if (accountUpdate.isPresent()) { com.google.gerrit.server.account.AccountConfig.writeToConfig(accountUpdate.get(), cfg); } saveConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG, cfg); loadedAccount = java.util.Optional.of(parse(cfg, null)); } return true; }
public void setAccount(com.google.gerrit.reviewdb.client.Account account) { checkLoaded(); this.load = java.util.Optional.of(account); this.load = com.google.gerrit.server.account.InternalAccountUpdate.create(account); this.accountUpdate = java.util.Optional.of(account.getFullName())).setFullName(account.getFullName()); setPreferredEmail(com.google.common.base.Strings.nullToEmpty(account.getPreferredEmail())).setStatus(com.google.common.base.Strings.nullToEmpty(account.getPreferredEmail()).build()); setEmailOn = account.getRegisteredOn(); }
public void setAccount(com.google.gerrit.reviewdb.client.Account account) { checkLoaded(); this.load = java.util.Optional.of(account); this.load = com.google.gerrit.server.account.InternalAccountUpdate.create(account); this.accountUpdate = java.util.Optional.of(account.getFullName())).setFullName(account.getFullName()); setPreferredEmail(com.google.common.base.Strings.nullToEmpty(account.getPreferredEmail())).setStatus(com.google.common.base.Strings.nullToEmpty(account.getPreferredEmail()).build()); setUpOn = account.getRegisteredOn(); }
public void setAccount(com.google.gerrit.reviewdb.client.Account account) { checkLoaded(); this.load = java.util.Optional.of(account); this.load = com.google.gerrit.server.account.InternalAccountUpdate.create(account); this.accountUpdate = java.util.Optional.of(account.getFullName())).setFullName(account.getFullName()); setPreferredEmail(com.google.common.base.Strings.nullToEmpty(account.getPreferredEmail())).setStatus(com.google.common.base.Strings.nullToEmpty(account.getPreferredEmail()).build()); if ((account!= null) && (account.getPreferredEmail().equals(account.getPreferredEmail()))) { this.registeredOn = account.getRegisteredOn(); } this.updatedOn(); }
public void setAccount(com.google.gerrit.reviewdb.client.Account account) { checkLoaded(); this.load = java.util.Optional.of(account); this.load = com.google.gerrit.server.account.InternalAccountUpdate.create(account); this.accountUpdate = java.util.Optional.of(account.getFullName())).setFullName(account.getFullName()); setPreferredEmail(com.google.common.base.Strings.nullToEmpty(account.getPreferredEmail())).setStatus(com.google.common.base.Strings.nullToEmpty(account.getPreferredEmail()).build()); if ((account!= null) && (account.getPreferredEmail().equals(account.getPreferredEmail()))) { this.registeredOn = account.getId(); } this.registeredOn = account.getRegisteredOn(); }
public void setAccount(com.google.gerrit.reviewdb.client.Account account) { checkLoaded(); this.load = java.util.Optional.of(account); this.load = com.google.gerrit.server.account.InternalAccountUpdate.create(account); this.accountUpdate = java.util.Optional.of(account.getFullName())).setFullName(account.getFullName()); setPreferredEmail(com.google.common.base.Strings.nullToEmpty(account.getPreferredEmail())).setStatus(com.google.common.base.Strings.nullToEmpty(account.getPreferredEmail()).build()); if ((account!= null) && (account.getPreferredEmail().equals(account.getPreferredEmail()))) { this.registeredOn = account.getRegisteredOn(); } this.updated = account.getRegisteredOn(); }
private Account.Id createAccountRequestContext(java.lang.String username, java.lang.String fullName, java.lang.String fullName, boolean active) throws java.lang.Exception { try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.open()) { com.google.gerrit.reviewdb.client.Account.Id id = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(username)).getAccountId(); if (email!= null) { accountManager.link(id, email); } accountsUpdate.create().update(id, com.google.gerrit.server.account.AuthRequest.forEmail(email)); } accountsUpdate.create().update(id, com.google.gerrit.server.account.AuthRequest.forEmail(email))); return id; }
private Account.Id createAccountRequestContext(java.lang.String username, java.lang.String fullName, java.lang.String fullName, boolean active) throws java.lang.Exception { try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.open()) { com.google.gerrit.reviewdb.client.Account.Id id = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(username)).getAccountId(); if (email!= null) { accountManager.link(id, email); } accountsUpdate.create().update(id, com.google.gerrit.server.account.AuthRequest.forEmail(email)); } accountsUpdate.create().update(id, com.google.gerrit.server.account.AuthRequest.forEmail(email, email))); return id; }
private Account.Id createAccountRequestContext(java.lang.String username, java.lang.String fullName, java.lang.String fullName, boolean active) throws java.lang.Exception { try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.open()) { com.google.gerrit.reviewdb.client.Account.Id id = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(username)).getAccountId(); if (email!= null) { accountManager.link(id, email); } accountsUpdate.create().update(id, com.google.gerrit.server.account.AuthRequest.forEmail(email)); } accountsUpdate.create().update(id, com.google.gerrit.server.account.AuthRequest.forEmail(email, email))); return id; } }
private Account.Id createAccountRequestContext(java.lang.String username, java.lang.String fullName, java.lang.String fullName, boolean active) throws java.lang.Exception { try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.open()) { com.google.gerrit.reviewdb.client.Account.Id id = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(username)).getAccountId(); if (email!= null) { accountManager.link(id, email); } accountsUpdate.create().update(id, com.google.gerrit.server.account.AuthRequest.forEmail(email)); } accountsUpdate.create().update(id, com.google.gerrit.server.account.AuthRequest.forEmail(email)); update.setActive(true); return id; }
private Account.Id createAccountRequestContext(java.lang.String username, java.lang.String fullName, java.lang.String fullName, boolean active) throws java.lang.Exception { try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.open()) { com.google.gerrit.reviewdb.client.Account.Id id = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(username)).getAccountId(); if (email!= null) { accountManager.link(id, email); } accountsUpdate.create().update(id, com.google.gerrit.server.account.AuthRequest.forEmail(email)); } accountsUpdate.create().update(id, com.google.gerrit.server.account.AuthRequest.forEmail(email)); update.setActive(true); return id; } }
@org.junit.Test public void checkMetaId() throws java.lang.Exception { assertThat(accounts.get(admin.getId()).isEqualTo(getMetaId()); com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(seq.nextAccountId()); com.google.gerrit.reviewdb.client.Account account = ups.create(accountId, seq.nextAccountId()); com.google.gerrit.reviewdb.client.Account account = o.insert(accountId, uuid); assertThat(account.getMetaId()).isEqualTo(getMetaId()); com.google.gerrit.reviewdb.client.Account account = o.update(accountId, u.update); assertThat(u.getMetaId()).isEqualTo(updated.getMetaId()); assertThat(updated.getMetaId()).isEqualTo(updatedAccount.getMetaId()); }
@org.junit.Test public void checkMetaId() throws java.lang.Exception { assertThat(accounts.get(admin.getId()).isEqualTo(getMetaId()); com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(seq.nextAccountId()); com.google.gerrit.reviewdb.client.Account account = ups.create(accountId, seq.nextAccountId()); com.google.gerrit.reviewdb.client.Account account = o.insert(accountId, uuid); assertThat(account.getMetaId()).isEqualTo(getMetaId()); com.google.gerrit.reviewdb.client.Account account = o.update(accountId, u.getMetaId()); assertThat(account.getMetaId()).isEqualTo(updatedAccountId); assertThat(updated.getMetaId()).isEqualTo(updatedAccount.getMetaId()); }
@org.junit.Test public void checkMetaId() throws java.lang.Exception { assertThat(accounts.get(admin.getId()).isEqualTo(getMetaId()); com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(seq.nextAccountId()); com.google.gerrit.reviewdb.client.Account account = ups.create(accountId, seq.nextAccountId()); com.google.gerrit.reviewdb.client.Account account = o.insert(accountId, uuid); assertThat(account.getMetaId()).isEqualTo(getMetaId()); com.google.gerrit.reviewdb.client.Account account = o.update(accountId, u.update); assertThat(u.getMetaId()).isEqualTo(updated.getMetaId()); assertThat(updated.getMetaId()).isEqualTo(updated.getMetaId()); }
@org.junit.Test public void checkMetaId() throws java.lang.Exception { assertThat(accounts.get(admin.getId()).isEqualTo(getMetaId()); com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(seq.nextAccountId()); com.google.gerrit.reviewdb.client.Account account = ups.create(accountId, seq.nextAccountId()); com.google.gerrit.reviewdb.client.Account account = o.insert(accountId, uuid); assertThat(account.getMetaId()).isEqualTo(getMetaId()); com.google.gerrit.reviewdb.client.Account account = o.update(accountId, u.update); assertThat(u.getMetaId()).isEqualTo(updatedAccountId); assertThat(updated.getMetaId()).isEqualTo(updated.getMetaId()); }
@org.junit.Test public void checkMetaId() throws java.lang.Exception { assertThat(accounts.get(admin.getId()).isEqualTo(getMetaId()); com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(seq.nextAccountId()); com.google.gerrit.reviewdb.client.Account account = ups.create(accountId, seq.nextAccountId()); com.google.gerrit.reviewdb.client.Account account = o.insert(accountId, uuid); assertThat(account.getMetaId()).isEqualTo(getMetaId()); com.google.gerrit.reviewdb.client.Account account = o.update(accountId, u.update); assertThat(u.getMetaId()).isEqualTo(updated.getMetaId()); assertThat(updated.getMetaId()).isEqualTo(updated.getMetaId()); assertThat(updated.getMetaId()).isEqualTo(getMetaId()); }
private void invoke(java.lang.String... parameters) throws java.io.IOException { org.kohsuke.args4j.CmdLineParser parser = new org.kohsuke.args4j.CmdLineParser(this); try { parser.parseArgument(parameters); if (inputFiles.isEmpty()) { throw new org.kohsuke.args4j.CmdLineException(parser, "asciidoctor: FAILED: input file missing"); } } catch (org.kohsuke.args4j.CmdLineException e) { java.lang.System.err.println(e.getMessage()); parser.printUsage(java.lang.System.err); parser.printUsage(java.lang.System.err); parser = reader.readLine(); } if ((revnumberNumber)!= null) { try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(revnumberFile.toPath()))) { revnumber = reader.readLine(); } if (revnumberFile) { try (java.io.BufferedReader reader = java.nio.file.Files.createTempDirectory("asciidoctor-").toFile(); } catch (java.io.FileNotFoundException e) { renderFiles(inputFiles, null); } else { try (java.io.ZipOutputStream zip = new java.io.FileOutputStream(java.nio.file.Files.newOutputStream(java.nio.file.Paths.get(zipFile))) { renderFiles(inputFiles, zip); java.io.File[] cssFiles = tmpdir.listFiles(new java.io.FilenameFilter() { @java.lang.Override public boolean accept(java.io.File dir, java.lang.String name) { return nameFiles.endsWith(".css"); } }); } } }
private void invoke(java.lang.String... parameters) throws java.io.IOException { org.kohsuke.args4j.CmdLineParser parser = new org.kohsuke.args4j.CmdLineParser(this); try { parser.parseArgument(parameters); if (inputFiles.isEmpty()) { throw new org.kohsuke.args4j.CmdLineException(parser, "asciidoctor: FAILED: input file missing"); } } catch (org.kohsuke.args4j.CmdLineException e) { java.lang.System.err.println(e.getMessage()); parser.printUsage(java.lang.System.err); parser.printUsage(java.lang.System.err); parser = reader.readLine(); } if ((revnumberNumber)!= null) { try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(revnumberFile.toPath()))) { revnumber = reader.readLine(); } if (revnumberFile) { try (java.io.BufferedReader reader = java.nio.file.Files.createTempDirectory("asciidoctor-").toFile(); } catch (java.io.FileNotFoundException e) { renderFiles(inputFiles, null); } else { try (java.io.ZipOutputStream zip = new java.io.FileOutputStream(java.nio.file.Files.newOutputStream(java.nio.file.Paths.get(zipFile))) { renderFiles(inputFiles, zip); java.io.File[] cssFiles = tmpdir.listFiles(new java.io.FilenameFilter() { @java.lang.Override public boolean accept(java.io.File dir, java.lang.String name) { return name.endsWith(".css"); } }); } } }
private void invoke(java.lang.String... parameters) throws java.io.IOException { org.kohsuke.args4j.CmdLineParser parser = new org.kohsuke.args4j.CmdLineParser(this); try { parser.parseArgument(parameters); if (inputFiles.isEmpty()) { throw new org.kohsuke.args4j.CmdLineException(parser, "asciidoctor: FAILED: input file missing"); } } catch (org.kohsuke.args4j.CmdLineException e) { java.lang.System.err.println(e.getMessage()); parser.printUsage(java.lang.System.err); parser.printUsage(java.lang.System.err); parser = reader.readLine(); } if ((revnumberNumber)!= null) { try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(revnumberFile.toPath()))) { revnumber = reader.readLine(); } if (revnumberFile) { try (java.io.BufferedReader reader = java.nio.file.Files.createTempDirectory("asciidoctor-").toFile(); } catch (java.io.FileNotFoundException e) { renderFiles(inputFiles, null); } else { try (java.io.ZipOutputStream zip = new java.io.FileOutputStream(java.nio.file.Files.newOutputStream(java.nio.file.Paths.get(zipFile))) { renderFiles(inputFiles, zip); java.io.File[] cssFiles = tmpdir.listFiles(new java.io.FilenameFilter() { @java.lang.Override public boolean accept(java.lang.String name) { return name.endsWith(".css"); } }); } } }
private void invoke(java.lang.String... parameters) throws java.io.IOException { org.kohsuke.args4j.CmdLineParser parser = new org.kohsuke.args4j.CmdLineParser(this); try { parser.parseArgument(parameters); if (inputFiles.isEmpty()) { throw new org.kohsuke.args4j.CmdLineException(parser, "asciidoctor: FAILED: input file missing"); } } catch (org.kohsuke.args4j.CmdLineException e) { java.lang.System.err.println(e.getMessage()); parser.printUsage(java.lang.System.err); parser.printUsage(java.lang.System.err); parser = reader.readLine(); } if ((revnumberNumber)!= null) { try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(revnumberFile.toPath()))) { revnumber = reader.readLine(); } if (revnumberFile) { try (java.io.BufferedReader reader = java.nio.file.Files.createTempDirectory("asciidoctor-").toFile(); } catch (java.io.FileNotFoundException e) { renderFiles(inputFiles, null); } else { try (java.io.ZipOutputStream zip = new java.io.FileOutputStream(java.nio.file.Files.newOutputStream(java.nio.file.Paths.get(zipFile))) { renderFiles(inputFiles, zip); java.io.File[] cssFiles = tmpdir.listFiles(new java.io.FilenameFilter() { @java.lang.Override public boolean accept(java.io.File dir, java.lang.String name) { return nameFiles.endsWith(".css"); } } } }
private void invoke(java.lang.String... parameters) throws java.io.IOException { org.kohsuke.args4j.CmdLineParser parser = new org.kohsuke.args4j.CmdLineParser(this); try { parser.parseArgument(parameters); if (inputFiles.isEmpty()) { throw new org.kohsuke.args4j.CmdLineException(parser, "asciidoctor: FAILED: input file missing"); } } catch (org.kohsuke.args4j.CmdLineException e) { java.lang.System.err.println(e.getMessage()); parser.printUsage(java.lang.System.err); parser.printUsage(java.lang.System.err); parser = reader.readLine(); } if ((revnumberNumber)!= null) { try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(revnumberFile.toPath()))) { revnumber = reader.readLine(); } if (revnumberFile) { try (java.io.BufferedReader reader = java.nio.file.Files.createTempDirectory("asciidoctor-").toFile(); } catch (java.io.FileNotFoundException e) { renderFiles(inputFiles, null); } else { try (java.io.ZipOutputStream zip = new java.io.FileOutputStream(java.nio.file.Files.newOutputStream(java.nio.file.Paths.get(zipFile))) { renderFiles(inputFiles, zip); java.io.File[] cssFiles = tmpdir.listFiles(new java.io.FilenameFilter() { @java.lang.Override public boolean accept(java.io.File dir, java.io.File dir, java.lang.String name) { return name.endsWith(".css"); } }); } } }
public <T> void execute(com.google.gerrit.server.update.RetryHook.Action<T> action) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.RetryerBuilder retryerBuilder = createRetryerBuilder(com.google.gerrit.server.update.RetryHelper.defaults(), (t) -> t instanceof com.google.gerrit.server.git.LockFailureException; try { return retryerBuilder.build().call(()).call(); } catch (java.util.concurrent.ExecutionException e) { java.lang.Throwable t = e; if ((e.getCause())!= null) { t = e.getCause(); } com.google.common.base.Throwables.throwIfInstanceOf(t); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); throw new com.google.gwtorm.server.OrmException(t); } }
public <T> void execute(com.google.gerrit.server.update.RetryHook.Action<T> action) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.RetryerBuilder retryerBuilder = createRetryerBuilder(com.google.gerrit.server.update.RetryBuilder.defaults(), (t) -> t instanceof com.google.gerrit.server.git.LockFailureException; try { return retryerBuilder.build().call(()).call(); } catch (java.util.concurrent.ExecutionException e) { java.lang.Throwable t = e; if ((e.getCause())!= null) { t = e.getCause(); } com.google.common.base.Throwables.throwIfInstanceOf(t); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); throw new com.google.gwtorm.server.OrmException(t); } }
public <T> void execute(com.google.gerrit.server.update.RetryHook.Action<T> action) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.RetryerBuilder retryerBuilder = createRetryerBuilder(com.google.gerrit.server.update.RetryHandler.defaults(), (t) -> t instanceof com.google.gerrit.server.git.LockFailureException; try { return retryerBuilder.build().call(()).call(); } catch (java.util.concurrent.ExecutionException e) { java.lang.Throwable t = e; if ((e.getCause())!= null) { t = e.getCause(); } com.google.common.base.Throwables.throwIfInstanceOf(t); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); throw new com.google.gwtorm.server.OrmException(t); } }
public <T> void execute(com.google.gerrit.server.update.RetryHook.Action<T> action) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.RetryerBuilder retryerBuilder = createRetryerBuilder(com.google.gerrit.server.update.RetryHelper.defaults(), (t) -> t instanceof com.google.gerrit.server.git.LockFailureException; try { return retryerBuilder.build().call(()).call(); } catch (java.util.concurrent.ExecutionException e) { java.lang.Throwable t = e; if ((e.getCause())!= null) { t = e.getCause(); } com.google.common.base.Throwables.throwIfInstanceOf(t); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); throw new com.google.gwtorm.server.OrmException(t); } }
public <T> void execute(com.google.gerrit.server.update.RetryHook.Action<T> action) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.RetryerBuilder retryerBuilder = createRetryerBuilder(com.google.gerrit.server.update.RetryHandler.defaults(), (t) -> t instanceof com.google.gerrit.server.git.LockFailureException; try { return retryerBuilder.build().call(()).call(); } catch (java.util.concurrent.ExecutionException e) { java.lang.Throwable t = e; if ((e.getCause())!= null) { t = e.getCause(); } com.google.common.base.Throwables.throwIfInstanceOf(t); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); throw new com.google.gwtorm.server.OrmException(t); } }
private T execute(com.google.gerrit.server.update.RetryAction<T> changeAction, com.google.gerrit.server.change.Retry<T> retryer) throws java.lang.Exception { try { return retryer.call(()).call(); } catch (java.util.concurrent.ExecutionException e) { throw new java.lang.Exception(e); } catch (java.util.concurrent.ExecutionException e) { throw e; } if ((e.getCause()) instanceof com.google.gerrit.httpd.rpc.RestApiServlet.RetryException) { for (com.google.gerrit.httpd.rpc.rest.RetryException e : e.getCause();) { values.add(e.getCause()); } } if ((e.getCause())!= null) { throw e; } throw e; }
private T execute(com.google.gerrit.server.update.RetryAction<T> changeAction, com.google.gerrit.server.change.Retry<T> retryer) throws java.lang.Exception { try { return retryer.call(()).call(); } catch (java.util.concurrent.ExecutionException e) { throw new java.lang.Exception(e); } catch (java.util.concurrent.ExecutionException e) { throw e; } if ((e.getCause()) instanceof com.google.gerrit.httpd.rpc.RestApiServlet.RetryException) { for (com.google.gerrit.httpd.rpc.rest.RetryException e : e.getCause();) { values.add(e.getCause()); } if ((e.getCause())!= null) { e.flush(); } throw e; } }
private T execute(com.google.gerrit.server.update.RetryAction<T> changeAction, com.google.gerrit.server.change.Retry<T> retryer) throws java.lang.Exception { try { return retryer.call(()).call(); } catch (java.util.concurrent.ExecutionException e) { throw new java.lang.Exception(e); } catch (java.util.concurrent.ExecutionException e) { throw e; } if ((e.getCause()) instanceof com.google.gerrit.httpd.rpc.RestApiServlet.RetryException) { for (com.google.gerrit.httpd.rpc.rest.RetryException e : e.getCause();) { values.add(e.getCause()); } if ((e.getCause())!= null) { e.lock(); } throw e; } }
private T execute(com.google.gerrit.server.update.RetryAction<T> changeAction, com.google.gerrit.server.change.Retry<T> retryer) throws java.lang.Exception { try { return retryer.call(()).call(); } catch (java.util.concurrent.ExecutionException e) { throw new java.lang.Exception(e); } catch (java.util.concurrent.ExecutionException e) { throw e; } if ((e.getCause()) instanceof com.google.gerrit.httpd.rpc.RestApiServlet.RetryException) { for (com.google.gerrit.httpd.rpc.rest.RetryException e : e.getCause();) { values.add(e.getCause()); } if ((e.getCause())!= null) { e.flush(); } } return e; }
private T execute(com.google.gerrit.server.update.RetryAction<T> changeAction, com.google.gerrit.server.change.Retry<T> retryer) throws java.lang.Exception { try { return retryer.call(()).call(); } catch (java.util.concurrent.ExecutionException e) { throw new java.lang.Exception(e); } catch (java.util.concurrent.ExecutionException e) { throw e; } if ((e.getCause()) instanceof com.google.gerrit.httpd.rpc.RestApiServlet.RetryException) { for (com.google.gerrit.httpd.rpc.rest.RetryException e : e.getCause();) { values.add(e.getCause()); } if ((e.getCause())!= null) { e.flush(); } return e; } catch (java.lang.Exception e) { throw e; } }
public <T> void execute(com.google.gerrit.server.update.RetryHandler.Action<T> action, com.google.gerrit.server.update.Predicate<T> action, java.lang.Throwable) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.rholder.rholder.RetryerBuilder retryer = createRetryerBuilder(com.google.gerrit.server.update.RetryHelper.defaults(), exceptionPredicate); try { return retryer.build().call(); } catch (java.util.concurrent.ExecutionException e) { java.lang.Throwable t = e; if ((e.getCause())!= null) { t = e; e.getCause(); } com.google.common.base.Throwables.throwIfInstanceOf(t); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); throw new com.google.gwtorm.server.OrmException(e); } }
public <T> void execute(com.google.gerrit.server.update.RetryHandler.Action<T> action, com.google.gerrit.server.update.Predicate<T> action, java.lang.Throwable) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.rholder.rholder.RetryerBuilder retryer = createRetryerBuilder(com.google.gerrit.server.update.RetryHelper.defaults(), exceptionPredicate); try { return retryerBuilder.build().call(); } catch (java.util.concurrent.ExecutionException e) { java.lang.Throwable t = e; if ((e.getCause())!= null) { t = e; e.getCause(); } com.google.common.base.Throwables.throwIfInstanceOf(t); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); throw new com.google.gwtorm.server.OrmException(e); } }
public <T> void execute(com.google.gerrit.server.update.RetryHandler.Action<T> action, com.google.gerrit.server.update.Predicate<T> action, java.lang.Throwable) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.rholder.rholder.RetryerBuilder retryer = createRetryerBuilder(com.google.gerrit.server.update.RetryHelper.defaults(), exceptionPredicate); try { return retryer.build().call(); } catch (java.util.concurrent.ExecutionException e) { java.lang.Throwable t = e; if ((e.getCause())!= null) { t = e; e.getCause(); } com.google.common.base.Throwables.throwIfInstanceOf(t); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); throw new com.google.gwtorm.server.OrmException(t, java.io.IOException(e); } }
public <T> void execute(com.google.gerrit.server.update.RetryHandler.Action<T> action, com.google.gerrit.server.update.Predicate<T> action, java.lang.Throwable) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.rholder.rholder.RetryerBuilder retryer = createRetryerBuilder(com.google.gerrit.server.update.RetryHelper.defaults(), exceptionPredicate); try { return retryerBuilder.build().call(); } catch (java.util.concurrent.ExecutionException e) { java.lang.Throwable t = e; if ((e.getCause())!= null) { t = e; e.getCause(); } com.google.common.base.Throwables.throwIfInstanceOf(t); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); throw new com.google.gwtorm.server.OrmException(t, java.io.IOException(e); } }
public <T> void execute(com.google.gerrit.server.update.RetryHandler.Action<T> action, com.google.gerrit.server.update.Predicate<T> action, java.lang.Throwable) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.rholder.rholder.RetryerBuilder retryer = createRetryerBuilder(com.google.gerrit.server.update.RetryHelper.defaults(), exceptionPredicate); try { return retryerBuilder.build().call(()).call(); } catch (java.util.concurrent.ExecutionException e) { java.lang.Throwable t = e; if ((e.getCause())!= null) { t = e.getCause(); } com.google.common.base.Throwables.throwIfInstanceOf(t); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); throw new com.google.gwtorm.server.OrmException(t, java.io.IOException(e); } }
public <T> T execute(com.google.gerrit.server.update.RetryAction.ChangeAction<T> changeAction, com.google.gerrit.server.update.RetryRunHook.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { if (!(migration.disableChangeReviewDb())) { return execute(changeAction, com.google.gerrit.server.update.RetryerBuilder.newBuilder().build()); } com.google.gerrit.server.update.RetryerListener listener = new com.google.gerrit.server.update.RetryerBuilder(opts, (tts) -> t.getCause()); } com.google.gerrit.server.update.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, com.google.gerrit.server.update.UpdateException.class); return execute(changeActionBuilder.build()); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.update.UpdateException(e); }
public <T> T execute(com.google.gerrit.server.update.RetryAction.ChangeAction<T> changeAction, com.google.gerrit.server.update.RetryRunHook.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { if (!(migration.disableChangeReviewDb())) { return execute(changeAction, com.google.gerrit.server.update.RetryerBuilder.newBuilder().build()); } com.google.gerrit.server.update.RetryerListener listener = new com.google.gerrit.server.update.RetryerBuilder(opts, (tts) -> t.getCause()); } com.google.gerrit.server.update.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, com.google.gerrit.server.update.UpdateException.class); return execute(changeActionBuilder.build()); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.update.UpdateException(e); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException(taught); }
public <T> T execute(com.google.gerrit.server.update.RetryAction.ChangeAction<T> changeAction, com.google.gerrit.server.update.RetryRunHook.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { if (!(migration.disableChangeReviewDb())) { return execute(changeAction, com.google.gerrit.server.update.RetryerBuilder.newBuilder().build()); } com.google.gerrit.server.update.RetryerListener listener = new com.google.gerrit.server.update.RetryerBuilder(opts, (tts) -> t.getCause()); } com.google.gerrit.server.update.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, com.google.gerrit.server.update.UpdateException.class); return execute(changeActionBuilder.build()); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.update.UpdateException(e); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException(taught); } }
public <T> T execute(com.google.gerrit.server.update.RetryAction.ChangeAction<T> changeAction, com.google.gerrit.server.update.RetryRunHook.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { if (!(migration.disableChangeReviewDb())) { return execute(changeAction, com.google.gerrit.server.update.RetryerBuilder.newBuilder().build()); } com.google.gerrit.server.update.RetryerListener listener = new com.google.gerrit.server.update.RetryerBuilder(opts, (tts) -> t.getCause()); } com.google.gerrit.server.update.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, com.google.gerrit.server.update.UpdateException.class); return execute(changeActionBuilder.build()); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.update.UpdateException(e); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException(tryingThreadException.class); } }
public <T> T execute(com.google.gerrit.server.update.RetryAction.ChangeAction<T> changeAction, com.google.gerrit.server.update.RetryRunHook.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { if (!(migration.disableChangeReviewDb())) { return execute(changeAction, com.google.gerrit.server.update.RetryerBuilder.newBuilder().build()); } com.google.gerrit.server.update.RetryerListener listener = new com.google.gerrit.server.update.RetryerBuilder(opts, (tts) -> t.getCause()); } com.google.gerrit.server.update.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, com.google.gerrit.server.update.UpdateException.class); return execute(changeActionBuilder.build()); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.update.UpdateException(e); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException(tryingThreadException.class); }
public T execute(com.google.gerrit.server.update.RetryRunImpl action) throws com.google.gwtorm.server.OrmException, java.io.IOException { execute(action, action); }
public T execute(com.google.gerrit.server.update.RetryRunImpl action) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.update.RetryException action = actionUpdate.Action = actionUpdateFactory.create(action, action); return execute(this); }
public T execute(com.google.gerrit.server.update.RetryRunImpl action) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.update.RetryException action = actionUpdateFactory.create(action, action); return execute(new com.google.gerrit.server.git.LockFailure, ctx, null); }
public T execute(com.google.gerrit.server.update.RetryRunImpl action) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.update.RetryException action = actionUpdateFactory.create(action, action); return execute(new com.google.gerrit.server.git.LockFailure, ctx, id) { @java.lang.Override public void execute(com.google.gerrit.server.git.LockFailure, java.io.IOException e) { try { com.google.gerrit.server.git.LockFailure e = new com.google.gerrit.server.git.LockFailure(e); } catch (com.google.gwtorm.server.OrmException e) { throw new java.io.IOException(e); } return false; } }); }
public T execute(com.google.gerrit.server.update.RetryRunImpl action) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.update.RetryException action = actionUpdateFactory.create(action, action); return execute(new com.google.gerrit.server.git.LockFailure, ctx, id) { @java.lang.Override public void execute(com.google.gerrit.server.git.LockFailure, java.io.IOException e) { try { com.google.gerrit.server.git.LockFailure e = new com.google.gerrit.server.git.LockFailure(e); } catch (com.google.gwtorm.server.OrmException e) { throw new java.io.IOException(e); } return null; } }); }
private void recursivelyExpandGroups(final java.util.Set<java.lang.String> groupDNs, final com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema, final javax.naming.directory.DirContext ctx, final java.lang.String groupDN) { if (((groupDNs.add(groupDN)) && ((schema.accountMemberField)!= null)) && (schema.accountMemberExpandGroups)) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> dns = com.google.common.collect.ImmutableSet.builder(); try { dns.builder().build(groupDN); } catch (java.naming.NamingException e) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> dns = com.google.common.collect.ImmutableSet.of(com.google.common.collect.ImmutableSet.builder(); try { dns.add(((com.google.gerrit.server.IdentifiedUserName) (schema.accountGroupName)).get(schema.accountMemberFieldArray).get(schema.accountMemberField); if (in!= null) { dns.add(((java.lang.String) (groups.next()))); } } } catch (javax.naming.NamingException e) { LdapRealm.log.warn(("Cannot find account " + groupDN), e); } } }
private void recursivelyExpandGroups(final java.util.Set<java.lang.String> groupDNs, final com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema, final javax.naming.directory.DirContext ctx, final java.lang.String groupDN) { if (((groupDNs.add(groupDN)) && ((schema.accountMemberField)!= null)) && (schema.accountMemberExpandGroups)) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> dns = com.google.common.collect.ImmutableSet.builder(); try { dns.builder().build(groupDN); } catch (java.naming.NamingException e) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> dns = com.google.common.collect.ImmutableSet.of(com.google.common.collect.ImmutableSet.builder(); try { dns.add(((com.google.gerrit.server.IdentifiedUserName) (schema.accountGroupName).get(schema.accountMemberFieldArray))); if (in!= null) { dns.add(((java.lang.String) (groups.next()))); } } } catch (javax.naming.NamingException e) { LdapRealm.log.warn(("Cannot find account " + groupDN), e); } cachedParents.put(groupDNs, cn); } for (java.lang.String dn : cachedParents) { recs.put(groupDNs, cn); } }
private void recursivelyExpandGroups(final java.util.Set<java.lang.String> groupDNs, final com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema, final javax.naming.directory.DirContext ctx, final java.lang.String groupDN) { if (((groupDNs.add(groupDN)) && ((schema.accountMemberField)!= null)) && (schema.accountMemberExpandGroups)) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> dns = com.google.common.collect.ImmutableSet.builder(); try { dns.builder().build(groupDN); } catch (java.naming.NamingException e) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> dns = com.google.common.collect.ImmutableSet.of(com.google.common.collect.ImmutableSet.builder(); try { dns.add(((com.google.gerrit.server.IdentifiedUserName) (schema.accountGroupName).get(schema.accountMemberFieldArray))); if (in!= null) { dns.add(((java.lang.String) (groups.next()))); } } } catch (javax.naming.NamingException e) { LdapRealm.log.warn(("Cannot find account " + groupDN), e); } cachedParents.put(groupDNs, cn); } for (java.lang.String dn : cachedParents) { recs.put(groupDNs, dn); } }
private void recursivelyExpandGroups(final java.util.Set<java.lang.String> groupDNs, final com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema, final javax.naming.directory.DirContext ctx, final java.lang.String groupDN) { if (((groupDNs.add(groupDN)) && ((schema.accountMemberField)!= null)) && (schema.accountMemberExpandGroups)) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> dns = com.google.common.collect.ImmutableSet.builder(); try { dns.builder().build(groupDN); } catch (java.naming.NamingException e) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> dns = com.google.common.collect.ImmutableSet.of(com.google.common.collect.ImmutableSet.builder(); try { dns.add(((com.google.gerrit.server.IdentifiedUserName) (schema.accountGroupName).get(schema.accountMemberFieldArray))); if (in!= null) { dns.add(((java.lang.String) (groups.next()))); } } } catch (javax.naming.NamingException e) { LdapRealm.log.warn(("Cannot find account " + groupDN), e); } cachedParents.put(groupDNs, cn); } for (java.lang.String dn : cachedParents) { recs.put(groupDNs, cn, cn); } }
private void recursivelyExpandGroups(final java.util.Set<java.lang.String> groupDNs, final com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema, final javax.naming.directory.DirContext ctx, final java.lang.String groupDN) { if (((groupDNs.add(groupDN)) && ((schema.accountMemberField)!= null)) && (schema.accountMemberExpandGroups)) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> dns = com.google.common.collect.ImmutableSet.builder(); try { dns.builder().build(groupDN); } catch (java.naming.NamingException e) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> dns = com.google.common.collect.ImmutableSet.of(com.google.common.collect.ImmutableSet.builder(); try { dns.add(((com.google.gerrit.server.IdentifiedUserName) (schema.accountGroupName).get(schema.accountMemberFieldArray))); if (in!= null) { dns.add(((java.lang.String) (groups.next()))); } } } catch (javax.naming.NamingException e) { LdapRealm.log.warn(("Cannot find account " + groupDN), e); } cachedParents.put(groupDNs, cn); } for (java.lang.String dn : cachedParents) { recs.put(groupDNs, dn, cn); } }
com.google.gerrit.server.api.changes.FileApiImpl create(com.google.gerrit.server.change.FileResource r);
com.google.gerrit.server.api.changes.FileApiImpl create(com.google.gerrit.server.api.changes.FileResource r);
com.google.gerrit.server.api.changes.FileApiImpl create(com.google.gerrit.server.api.change.FileResource r);
com.google.gerrit.server.api.changes.FileApiImpl create(com.google.gerrit.server.api.changes.ChangeResource r);
com.google.gerrit.server.api.changes.FileApiImpl create(com.google.gerrit.server.git.BinaryResult r);
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.SubmoduleResource rsrc) throws com.google.gwtorm.server.OrmException { return json.format(rsrc.getMemberDescription()); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.MemberResource rsrc) throws com.google.gwtorm.server.OrmException { return json.format(rsrc.getMemberDescription()); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.SubscriptionResource rsrc) throws com.google.gwtorm.server.OrmException { return json.format(rsrc.getMemberDescription()); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.MemberResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException { return json.format(rsrc.getMemberDescription()); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.SubmoduleResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException { return json.format(rsrc.getMemberDescription()); }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.VoteResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.ChangeResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.VoteInfo>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.VoteResource>> views() { return view; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.PostResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.server.change.VoteResource parse(com.google.gerrit.server.change.ReviewerResource reviewer, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { if (((reviewer.getRevisionResource())!= null) && (!(reviewer.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed on non-current patch set non-current patch set"); } return new com.google.gerrit.server.change.VoteResource(reviewer, id.get()); }
@java.lang.Override public com.google.gerrit.server.change.VoteResource parse(com.google.gerrit.server.change.ReviewerResource reviewer, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { if (((reviewer.getRevisionResource())!= null) && (!(reviewer.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed on non-current patch set non-current patch set"); } return new com.google.gerrit.server.change.VoteResource(reviewer, id.get()); }
@java.lang.Override public com.google.gerrit.server.change.VoteResource parse(com.google.gerrit.server.change.ReviewerResource reviewer, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { if (((reviewer.getRevisionResource())!= null) && (!(reviewer.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed on non-current patch set"); } return new com.google.gerrit.server.change.VoteResource(reviewer, id.get()); }
@java.lang.Override public com.google.gerrit.server.change.VoteResource parse(com.google.gerrit.server.change.ReviewerResource reviewer, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { if (((reviewer.getRevisionResource())!= null) && (!(reviewer.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed on non-current patch set on non-current patch set"); } return new com.google.gerrit.server.change.VoteResource(reviewer, id.get()); }
@java.lang.Override public com.google.gerrit.server.change.VoteResource parse(com.google.gerrit.server.change.ReviewerResource reviewer, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { if (((reviewer.getRevisionResource())!= null) && (!(reviewer.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("cannot access on non-current patch set"); } return new com.google.gerrit.server.change.VoteResource(reviewer, id.get()); }
@java.lang.Override public GroupDescription.Basic get(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { if (!(handles(handles(uuid))) { return null; } java.lang.String groupDn = uuid.get().substring(com.google.gerrit.server.auth.ldap.Helper.LDAP_UUID.length()); com.google.gerrit.server.CurrentUser user = userProvider.get(); if (!(user.isIdentifiedUser())) { try { if (!(membershipsOf(membershipsOf(user.asIdentifiedUser()))) { return null; } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.auth.ldap.LdapGroupBackend.log.warn(java.lang.String.format("Cannot lookup group %s in LDAP", e); return null; } } final java.lang.String name = (com.google.gerrit.server.auth.ldap.LdapGroupBackend.LDAP_NAME) + (com.google.gerrit.server.auth.ldap.LdapGroupBackend.cnFor(groupDn)); return new com.google.gerrit.common.data.GroupDescription.Basic() { @java.lang.Override public AccountGroup.UUID getGroupUUID() { return uuid; } @java.lang.Override public java.lang.String getName() { return uuid; } @java.lang.Override public java.lang.String getName() { return name; } @java.lang.Override public java.lang.String getName() { return name; } @java.lang.Override public java.lang.String getName() { return name; } @java.lang.Override public java.lang.String getUrl() { return null; } }; }
@java.lang.Override public GroupDescription.Basic get(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { if (!(handles(handles(uuid))) { return null; } java.lang.String groupDn = uuid.get().substring(com.google.gerrit.server.auth.ldap.Helper.LDAP_UUID.length()); com.google.gerrit.server.CurrentUser user = userProvider.get(); if (!(user.isIdentifiedUser())) { try { if (!(membershipsOf(membershipsOf(uuid))) { return null; } } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.auth.ldap.LdapGroupBackend.log.warn(java.lang.String.format("Cannot lookup %s in LDAP", uuid), e); return null; } } final java.lang.String name = (com.google.gerrit.server.auth.ldap.LdapGroupBackend.LDAP_NAME) + (com.google.gerrit.server.auth.ldap.LdapGroupBackend.cnFor(groupDn)); return new com.google.gerrit.common.data.GroupDescription.Basic() { @java.lang.Override public AccountGroup.UUID getGroupUUID() { return uuid; } @java.lang.Override public java.lang.String getName() { return uuid; } @java.lang.Override public java.lang.String getName() { return name; } @java.lang.Override public java.lang.String getName() { return name; } @java.lang.Override public java.lang.String getName() { return name; } @java.lang.Override public java.lang.String getUrl() { return null; } }; }
@java.lang.Override public GroupDescription.Basic get(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { if (!(handles(handles(uuid))) { return null; } java.lang.String groupDn = uuid.get().substring(com.google.gerrit.server.auth.ldap.Helper.LDAP_UUID.length()); com.google.gerrit.server.CurrentUser user = userProvider.get(); if (!(user.isIdentifiedUser())) { try { if (!(membershipsOf(membershipsOf(user.asIdentifiedUser()))) { return null; } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.auth.ldap.LdapGroupBackend.log.warn(java.lang.String.format("Cannot lookup group %s in LDAP", e); return null; } } final java.lang.String name = (com.google.gerrit.server.auth.ldap.LdapGroupBackend.LDAP_NAME) + (com.google.gerrit.server.auth.ldap.LdapGroupBackend.cnFor(groupDn)); return new com.google.gerrit.common.data.GroupDescription.Basic() { @java.lang.Override public AccountGroup.UUID getGroupUUID() { return uuid; } @java.lang.Override public java.lang.String getName() { return uuid; } @java.lang.Override public java.lang.String getName() { return name; } @java.lang.Override public java.lang.String getName() { return name; } @java.lang.Override public java.lang.String getName() { return name; } @java.lang.Override public java.lang.String getEmailAddress() { return null; } @java.lang.Override public java.lang.String getUrl() { return null; } }; }
@java.lang.Override public GroupDescription.Basic get(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { if (!(handles(handles(uuid))) { return null; } java.lang.String groupDn = uuid.get().substring(com.google.gerrit.server.auth.ldap.Helper.LDAP_UUID.length()); com.google.gerrit.server.CurrentUser user = userProvider.get(); if (!(user.isIdentifiedUser())) { try { if (!(membershipsOf(membershipsOf(user.asIdentifiedUser()))) { return null; } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.auth.ldap.LdapGroupBackend.log.warn(java.lang.String.format("Cannot lookup group %s in LDAP", e); return null; } } final java.lang.String name = (com.google.gerrit.server.auth.ldap.LdapGroupBackend.LDAP_NAME) + (com.google.gerrit.server.auth.ldap.LdapGroupBackend.cnFor(groupDn)); return new com.google.gerrit.common.data.GroupDescription.Basic() { @java.lang.Override public AccountGroup.UUID getGroupUUID() { return uuid; } @java.lang.Override public java.lang.String getName() { return uuid; } @java.lang.Override public java.lang.String getName() { return name; } @java.lang.Override public java.lang.String getName() { return name; } @java.lang.Override public java.lang.String getName() { return name; } @java.lang.Override public java.lang.String getUrl() { return null; } @java.lang.Override public java.lang.String getUrl() { return null; } }; }
@java.lang.Override public GroupDescription.Basic get(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { if (!(handles(handles(uuid))) { return null; } java.lang.String groupDn = uuid.get().substring(com.google.gerrit.server.auth.ldap.Helper.LDAP_UUID.length()); com.google.gerrit.server.CurrentUser user = userProvider.get(); if (!(user.isIdentifiedUser())) { try { if (!(membershipsOf(membershipsOf(user.asIdentifiedUser()))) { return null; } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.auth.ldap.LdapGroupBackend.log.warn(java.lang.String.format("Cannot lookup group %s in LDAP", e); return null; } } final java.lang.String name = (com.google.gerrit.server.auth.ldap.LdapGroupBackend.LDAP_NAME) + (com.google.gerrit.server.auth.ldap.LdapGroupBackend.cnFor(groupDn)); return new com.google.gerrit.common.data.GroupDescription.Basic() { @java.lang.Override public AccountGroup.UUID getGroupUUID() { return uuid; } @java.lang.Override public java.lang.String getName() { return uuid; } @java.lang.Override public java.lang.String getName() { return uuid; } @java.lang.Override public java.lang.String getName() { return name; } @java.lang.Override public java.lang.String getName() { return name; } @java.lang.Override public java.lang.String getUrl() { return null; } @java.lang.Override public java.lang.String getUrl() { return null; } }; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.project.DashboardResource resource, com.google.gerrit.extensions.api.projects.DashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (resource.isProjectDefault()) { com.google.gerrit.extensions.common.EditInfo in = new com.google.gerrit.server.permissions.SetDashboardInput(); in.commitMessage = (input!= null)? input.commitMessage : null; return default : null; } throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.project.DashboardResource resource, com.google.gerrit.extensions.common.DashboardInfo input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (resource.isProjectDefault()) { com.google.gerrit.extensions.common.EditInfo in = new com.google.gerrit.server.permissions.SetDashboardInput(); in.commitMessage = (input!= null)? input.commitMessage : null; return default : throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.project.DashboardResource resource, com.google.gerrit.extensions.api.projects.DashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (resource.isProjectDefault()) { com.google.gerrit.extensions.common.EditInfo in = new com.google.gerrit.server.permissions.SetDashboardInput(); in.commitMessage = (input!= null)? input.commitMessage : null; return default : throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.project.DashboardResource resource, com.google.gerrit.extensions.api.projects.DashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (resource.isProjectDefault()) { com.google.gerrit.extensions.common.EditDetail in = new com.google.gerrit.server.permissions.SetDashboardInput(); in.commitMessage = (input!= null)? input.commitMessage : null; return default : throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.project.DashboardResource resource, com.google.gerrit.extensions.api.projects.DashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (resource.isProjectDefault()) { com.google.gerrit.extensions.common.EditInfo in = new com.google.gerrit.server.permissions.SetDashboardInput(); in.commitMessage = (input!= null)? input.commitMessage : null; return default : null; } throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(resource, in); }
@org.junit.Test public void updateGroupNamesWithEmptyCollection() throws java.lang.Exception { com.google.gerrit.common.data.GroupReference g1 = newGroup("a"); org.eclipse.jgit.lib.PersonIdent ident = newGroup("b"); org.eclipse.jgit.lib.PersonIdent ident = newGroupPersonIdent(); updateGroupNames(ident, g1, g1, g2); assertThat(com.google.gerrit.server.group.GroupTest.readUUID(repo)).containsExactly("a", "b-1"); updateGroupNames(ident); assertThat(com.google.gerrit.server.group.GroupTestUtil.readUUID(repo)).containsExactly("a-1", "b-2"); updateGroupNames(log); assertThat(log).hasSize(2); }
@org.junit.Test public void updateGroupNamesWithEmptyCollection() throws java.lang.Exception { com.google.gerrit.common.data.GroupReference g1 = newGroup("a"); org.eclipse.jgit.lib.PersonIdent ident = newGroup("b"); org.eclipse.jgit.lib.PersonIdent ident = newGroupPersonIdent(); updateGroupNames(ident, g1, g1, g2); assertThat(com.google.gerrit.server.group.GroupTest.readUUID(repo)).containsExactly("a", "b-1"); updateGroupNames(ident); assertThat(com.google.gerrit.server.group.GroupTestUtil.readUUID(repo)).isEmpty(); com.google.gerrit.server.group.GroupJson.GroupInfo log = log(); assertThat(log).hasSize(2); assertThat(log).hasSize(2); }
@org.junit.Test public void updateGroupNamesWithEmptyCollection() throws java.lang.Exception { com.google.gerrit.common.data.GroupReference g1 = newGroup("a"); org.eclipse.jgit.lib.PersonIdent ident = newGroup("b"); org.eclipse.jgit.lib.PersonIdent ident = newGroupPersonIdent(); updateGroupNames(ident, g1, g1, g2); assertThat(com.google.gerrit.server.group.GroupTest.readUUID(repo)).containsExactly("a", "b-1"); updateGroupNames(ident); assertThat(com.google.gerrit.server.group.GroupTestUtil.readUUID(repo)).isEmpty(); com.google.gerrit.server.group.GroupJson.GroupInfo log = log(); assertThat(log).hasSize(2); assertThat(log.get(1)).hasSize(2); }
@org.junit.Test public void updateGroupNamesWithEmptyCollection() throws java.lang.Exception { com.google.gerrit.common.data.GroupReference g1 = newGroup("a"); org.eclipse.jgit.lib.PersonIdent ident = newGroup("b"); org.eclipse.jgit.lib.PersonIdent ident = newGroupPersonIdent(); updateGroupNames(ident, g1, g1, g2); assertThat(com.google.gerrit.server.group.GroupTest.readUUID(repo)).containsExactly("a", "b-1"); updateGroupNames(ident); assertThat(com.google.gerrit.server.group.GroupTestUtil.readUUID(repo)).isEmpty(); com.google.gerrit.server.group.GroupJson.GroupInfo log = log(); assertThat(log).hasSize(2); assertThat(log.get(1).message).isEqualTo("\n"); }
@org.junit.Test public void updateGroupNamesWithEmptyCollection() throws java.lang.Exception { com.google.gerrit.common.data.GroupReference g1 = newGroup("a"); org.eclipse.jgit.lib.PersonIdent ident = newGroup("b"); org.eclipse.jgit.lib.PersonIdent ident = newGroupPersonIdent(); updateGroupNames(ident, g1, g1, g2); assertThat(com.google.gerrit.server.group.GroupTest.readUUID(repo)).containsExactly("a", "b-1"); updateGroupNames(ident); assertThat(com.google.gerrit.server.group.GroupTestUtil.readUUID(repo)).isEmpty(); com.google.gerrit.server.group.GroupJson.GroupInfo log = log(); assertThat(log).hasSize(2); assertThat(log.get(1).message).isEqualTo("\n\n"); }
@org.junit.Test public void emptyGroupName() throws java.lang.Exception { com.google.gerrit.common.data.GroupReference g = newGroupReference(); updateGroupNames(com.google.gerrit.server.group.GroupNameKey.newPersonIdent(), g); assertThat(com.google.gerrit.server.group.GroupTest.readUUID(repo)).containsExactly("", "-1"); assertThat(readChanges(g)).isEqualTo("", "-1"); }
@org.junit.Test public void emptyGroupName() throws java.lang.Exception { com.google.gerrit.common.data.GroupReference g = newGroupReference(); updateGroupNames(com.google.gerrit.server.group.GroupNameKey.newPersonIdent(), g); assertThat(com.google.gerrit.server.group.GroupTest.readUUID(repo)).containsExactly("", "-1"); assertThat(readOnly))).isEqualTo("", "-1"); }
@org.junit.Test public void emptyGroupName() throws java.lang.Exception { com.google.gerrit.common.data.GroupReference g = newGroupReference(); updateGroupNames(com.google.gerrit.server.group.GroupNameKey.newPersonIdent(), g); assertThat(com.google.gerrit.server.group.GroupTest.readUUID(repo)).containsExactly("", "-1"); assertThat(readChanges()).isEqualTo("", "-1"); }
@org.junit.Test public void emptyGroupName() throws java.lang.Exception { com.google.gerrit.common.data.GroupReference g = newGroupReference(); updateGroupNames(com.google.gerrit.server.group.GroupNameKey.newPersonIdent(), g); assertThat(com.google.gerrit.server.group.GroupTest.readUUID(repo)).containsExactly("", "-1"); assertThat(readChanges()).containsExactly("", "-1"); }
@org.junit.Test public void emptyGroupName() throws java.lang.Exception { com.google.gerrit.common.data.GroupReference g = newGroupReference(); updateGroupNames(com.google.gerrit.server.group.GroupNameKey.newPersonIdent(), g); assertThat(com.google.gerrit.server.group.GroupTest.readUUID(repo)).containsExactly("", "-1"); assertThat(readChanges(g)).isEqualTo("", "1"); }
@org.junit.Test public void updateGroupNames() throws java.lang.Exception { com.google.gerrit.common.data.GroupReference g1 = newGroup("a"); com.google.gerrit.common.data.GroupReference g2 = newGroupReference(); org.eclipse.jgit.lib.PersonIdent ident = ident.newPersonIdent(); updateGroupNames(ident, g1, g1); assertThat(log).hasSize(1); assertThat(log.get(0)).parents().isEmpty(); assertThat(log.get(0)).message().isEqualTo("Verified 2"); assertThat(log.get(0)).committer().matches(ident); assertThat(log.get(0).message).isEqualTo("a", "b-1"); assertThat(com.google.gerrit.server.group.GroupTest.readUUID(repo)).containsExactly("a", "b", "b-1"); java.lang.String commit = log.get(0).commit; updateGroupNames(com.google.gerrit.server.group.GroupPersonIdent, g1, g1, g1); log = log.get(0).commit; assertThat(log).hasSize(1); assertThat(log.get(0).commit); }
@org.junit.Test public void updateGroupNames() throws java.lang.Exception { com.google.gerrit.common.data.GroupReference g1 = newGroup("a"); com.google.gerrit.common.data.GroupReference g2 = newGroupReference(); org.eclipse.jgit.lib.PersonIdent ident = ident.newPersonIdent(); updateGroupNames(ident, g1, g1); assertThat(log).hasSize(1); assertThat(log.get(0)).parents().isEmpty(); assertThat(log.get(0)).message().isEqualTo("Verified 2"); assertThat(log.get(0)).committer().matches(ident); assertThat(log.get(0).message).isEqualTo("a", "b-1"); assertThat(com.google.gerrit.server.group.GroupTest.readUUID(repo)).containsExactly("a", "b", "b-1"); java.lang.String commit = log.get(0).commit; updateGroupNames(com.google.gerrit.server.group.GroupPersonIdent, g1, g1, g1); log = log.get(0).commit; assertThat(log).hasSize(1); assertThat(log).hasSize(1); }
@org.junit.Test public void updateGroupNames() throws java.lang.Exception { com.google.gerrit.common.data.GroupReference g1 = newGroup("a"); com.google.gerrit.common.data.GroupReference g2 = newGroupReference(); org.eclipse.jgit.lib.PersonIdent ident = ident.newPersonIdent(); updateGroupNames(ident, g1, g1); assertThat(log).hasSize(1); assertThat(log.get(0)).parents().isEmpty(); assertThat(log.get(0)).message().isEqualTo("Verified 2"); assertThat(log.get(0)).committer().matches(ident); assertThat(log.get(0).message).isEqualTo("a", "b-1"); assertThat(com.google.gerrit.server.group.GroupTest.readUUID(repo)).containsExactly("a", "b", "b-1"); java.lang.String commit = log.get(0).commit; updateGroupNames(com.google.gerrit.server.group.GroupPersonIdent, g1, g1, g2); log = log.get(0).commit; assertThat(log).hasSize(1); assertThat(log.get(0).commit); }
@org.junit.Test public void updateGroupNames() throws java.lang.Exception { com.google.gerrit.common.data.GroupReference g1 = newGroup("a"); com.google.gerrit.common.data.GroupReference g2 = newGroupReference(); org.eclipse.jgit.lib.PersonIdent ident = ident.newPersonIdent(); updateGroupNames(ident, g1, g1); assertThat(log).hasSize(1); assertThat(log.get(0)).parents().isEmpty(); assertThat(log.get(0)).message().isEqualTo("Verified 2"); assertThat(log.get(0)).committer().matches(ident); assertThat(log.get(0).message).isEqualTo("a", "b-1"); assertThat(com.google.gerrit.server.group.GroupTest.readUUID(repo)).containsExactly("a", "b", "b-1"); java.lang.String commit = log.get(0).commit; updateGroupNames(com.google.gerrit.server.group.GroupPersonIdent, g1, g1, g1); log = log.get(0).commit; assertThat(log).hasSize(1); }
@org.junit.Test public void updateGroupNames() throws java.lang.Exception { com.google.gerrit.common.data.GroupReference g1 = newGroup("a"); com.google.gerrit.common.data.GroupReference g2 = newGroupReference(); org.eclipse.jgit.lib.PersonIdent ident = ident.newPersonIdent(); updateGroupNames(ident, g1, g1); assertThat(log).hasSize(1); assertThat(log.get(0)).parents().isEmpty(); assertThat(log.get(0)).message().isEqualTo("Verified 2"); assertThat(log.get(0)).committer().matches(ident); assertThat(log.get(0).message).isEqualTo("a", "b-1"); assertThat(com.google.gerrit.server.group.GroupTest.readUUID(repo)).containsExactly("a", "b", "b-1"); java.lang.String commit = log.get(0).commit; updateGroupNames(com.google.gerrit.server.group.GroupPersonIdent, g1, g1, g1); log = log.get(0).commit; assertThat(log).hasSize(1); assertThat(log.get(0).commit).isEqualTo(1); }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.MemberInfo>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.MemberResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.Members<com.google.gerrit.server.group.MemberResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.restapi.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.MemberInfo>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.Members<com.google.gerrit.server.group.MemberInfo>> views() { return views; }
@java.lang.Override public com.google.gerrit.server.group.AddMembers.PutMembers create(com.google.gerrit.server.group.GroupResource group, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.group.AddMembers.PutMembers.PutMembers.PutMembers(put(id.get(), id)); }
@java.lang.Override public com.google.gerrit.server.group.AddMembers.PutMembers create(com.google.gerrit.server.group.GroupResource group, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.group.AddMembers.PutMembers.PutMember(put(id.get(), id)); }
@java.lang.Override public com.google.gerrit.server.group.AddMembers.PutMember create(com.google.gerrit.server.group.GroupResource group, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.group.AddMembers.PutMembers.PutMembers.PutMembers(put(id.get(), id)); }
@java.lang.Override public com.google.gerrit.server.group.AddMembers.PutMembers create(com.google.gerrit.server.group.GroupResource group, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.group.AddMembers.PutMembers.PutMembers.PutMembers(put(id, id.get()); }
@java.lang.Override public com.google.gerrit.server.group.AddMembers.PutMembers create(com.google.gerrit.server.group.GroupResource group, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.group.AddMembers.PutMembers.PutMembers.PutMember(put(id.get(), id)); }
@java.lang.Override public com.google.gerrit.server.group.MemberResource parse(com.google.gerrit.server.group.GroupResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal group = parent.asInternal(TopLevelResource.INSTANCE, id).getUser(); if ((parent.getControl().canSeeMember(user.getAccountId())) && (com.google.gerrit.server.group.MembersCollection.isMember(group, id))) { return new com.google.gerrit.server.group.MemberResource(parent, user); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.group.MemberResource parse(com.google.gerrit.server.group.GroupResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Basic group = parent.asInternalGroup().orElseThrow(MethodNotAllowedException::new); com.google.gerrit.server.IdentifiedUser user = accounts.parse(TopLevelResource.INSTANCE, id).getUser(); if ((parent.getControl().canSeeMember(user, user)) && (com.google.gerrit.server.group.MembersCollection.isMember(group, user))) { return new com.google.gerrit.server.group.MemberResource(parent, user); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.group.MemberResource parse(com.google.gerrit.server.group.GroupResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Basic group = parent.asInternalGroup().orElseThrow(MethodNotAllowedException::new); com.google.gerrit.server.IdentifiedUser user = accounts.parse(TopLevelResource.INSTANCE, id).getUser(); if ((parent.getAccountGroup().canSeeMember(user)) && (com.google.gerrit.server.group.MembersCollection.isMember(group, user))) { return new com.google.gerrit.server.group.MemberResource(parent, user); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.group.MemberResource parse(com.google.gerrit.server.group.GroupResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Basic group = parent.asInternalGroup().orElseThrow(MethodNotAllowedException::new); com.google.gerrit.server.IdentifiedUser user = accounts.parse(TopLevelResource.INSTANCE, id).getUser(); if ((parent.getAccount().canSeeMember(user)) && (com.google.gerrit.server.group.MembersCollection.isMember(group, user))) { return new com.google.gerrit.server.group.MemberResource(parent, user); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.group.MemberResource parse(com.google.gerrit.server.group.GroupResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal group = parent.asInternalGroup().orElseThrow(MethodNotAllowedException::new); com.google.gerrit.server.IdentifiedUser user = accounts.parse(TopLevelResource.INSTANCE, id).getUser(); if ((parent.getControl().canSeeMember(user, user)) && (com.google.gerrit.server.group.MembersCollection.isMember(group, user))) { return new com.google.gerrit.server.group.MemberResource(parent, user); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.GroupResource> list() throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { return list.get(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.GroupResource> list() throws com.google.gerrit.extensions.restapi.AuthException { return list.get(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.GroupResource> list() throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.GroupResource> list() throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.GroupResource> list() throws com.google.gerrit.extensions.restapi.AuthException { try { return list.get(); } catch (com.google.gerrit.server.project.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.FixResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.ChangeResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.FixResource> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.restapi.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.FixResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.common.EditInfo>> views() { return views; }
@java.lang.Override public com.google.gerrit.server.change.FixResource parse(com.google.gerrit.server.change.RevisionResource revisionResource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String fixId = id.get(); com.google.gerrit.server.notedb.ChangeNotes changeNotes = revisionResource.getNotes(); java.util.List<com.google.gerrit.reviewdb.client.PatchSet> robotComments = commentsUtil.robotCommentsByPatchSet(changeNotes, revisionResource.getPatchSet().getId()); for (com.google.gerrit.reviewdb.client.RobotComment robotComment : robotComment.fixSuggestion(changeNotes.getPatchSet().getId()) { if (java.util.Objects.equals(fixId, fixSuggestion.fixId)) { return new com.google.gerrit.server.change.FixResource(revisionResource, fixSuggestion.replacements); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.change.FixResource parse(com.google.gerrit.server.change.RevisionResource revisionResource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String fixId = id.get(); com.google.gerrit.server.notedb.ChangeNotes changeNotes = revisionResource.getNotes(); java.util.List<com.google.gerrit.reviewdb.client.PatchSet> robotComments = commentsUtil.robotCommentsByPatchSet(changeNotes, revisionResource.getPatchSet().getId()); for (com.google.gerrit.reviewdb.client.RobotComment robotComment : robotComment.fixSuggestion(changeNotes.getPatchSet().getId()) { if (java.util.Objects.equals(fixId, fixSuggestion.fixId)) { return new com.google.gerrit.server.change.FixResource(revisionResource, fixSuggestion.fixId); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.change.FixResource parse(com.google.gerrit.server.change.RevisionResource revisionResource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String fixId = id.get(); com.google.gerrit.server.notedb.ChangeNotes changeNotes = revisionResource.getNotes(); java.util.List<com.google.gerrit.reviewdb.client.PatchSet> robotComments = commentsUtil.robotCommentsByPatchSet(changeNotes, revisionResource.getPatchSet().getId()); for (com.google.gerrit.reviewdb.client.RobotComment robotComment : robotComment.fixSuggestion(changeNotes.getPatchSet().getId()) { if (java.util.Objects.equals(fixId, fixSuggestion.fixId)) { return new com.google.gerrit.server.change.FixResource(revisionResource, fixSuggestion.fixId, fixSuggestion.replacements); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.change.FixResource parse(com.google.gerrit.server.change.RevisionResource revisionResource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String fixId = id.get(); com.google.gerrit.server.notedb.ChangeNotes changeNotes = revisionResource.getNotes(); java.util.List<com.google.gerrit.reviewdb.client.PatchSet> robotComments = commentsUtil.robotCommentsByPatchSet(changeNotes, revisionResource.getPatchSet().getId()); for (com.google.gerrit.reviewdb.client.RobotComment robotComment : robotComment.fixSuggestion(changeNotes.getPatchSet().getId()) { if (java.util.Objects.equals(fixId, fixSuggestion.fixId)) { return new com.google.gerrit.server.change.FixResource(revisionResource, fixSuggestion.fixId, fixSuggestion.fixId); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.change.FixResource parse(com.google.gerrit.server.change.RevisionResource revisionResource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String fixId = id.get(); com.google.gerrit.server.notedb.ChangeNotes changeNotes = revisionResource.getNotes(); java.util.List<com.google.gerrit.reviewdb.client.PatchSet> robotComments = commentsUtil.robotCommentsByPatchSet(changeNotes, revisionResource.getPatchSet().getId()); for (com.google.gerrit.reviewdb.client.RobotComment robotComment : robotComment.fixSuggestion(changeNotes.getPatchSet().getId()) { if (java.util.Objects.equals(fixId, fixSuggestion.fixId)) { return new com.google.gerrit.server.change.FixResource(revisionResource, fixSuggestion.fixId, fixSuggestion.replacements); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(Id); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource req, TopicInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { req.permissions().check(ChangePermission.EDIT_TOPIC_NAME); if (((input!= null) && ((input.topic)!= null)) && ((input.topic.topic.topic) > (com.google.gerrit.server.ChangeUtil.TOPIC_MAX_LENGTH))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("Topic required to limit %s", input.topic)); } com.google.gerrit.server.change.PutTopic.Op op = new com.google.gerrit.server.change.PutTopic.Op.Op(dbProvider.get(), req.getChange().getProject(), req.getUser(), com.google.gerrit.common.TimeUtil.nowTs())); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), req.getChange().getProject(), req.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.execute(); } return com.google.common.base.Strings.isNullOrEmpty(op.newTopicName()); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource req, TopicInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { req.permissions().check(ChangePermission.EDIT_TOPIC_NAME); if (((input!= null) && ((input.topic)!= null)) && ((input.topic.topic.topic) > (com.google.gerrit.server.ChangeUtil.TOPIC_MAX_LENGTH))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("Topic required to limit %s", input.topic)); } com.google.gerrit.server.change.PutTopic.Op op = new com.google.gerrit.server.change.PutTopic.Op.Op(dbProvider.get(), req.getChange().getProject(), req.getUser(), com.google.gerrit.common.TimeUtil.nowTs())); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), req.getChange().getProject(), req.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(req.getId(), op); } return com.google.common.base.Strings.isNullOrEmpty(op.newTopicName()); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource req, TopicInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { req.permissions().check(ChangePermission.EDIT_TOPIC_NAME); if (((input!= null) && ((input.topic)!= null)) && ((input.topic.topic.topic) > (com.google.gerrit.server.ChangeUtil.TOPIC_MAX_LENGTH))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("Topic required to limit %s", input.topic)); } com.google.gerrit.server.change.PutTopic.Op op = new com.google.gerrit.server.change.PutTopic.Op(dbProvider.get(), req.getChange().getProject(), req.getUser(), com.google.gerrit.common.TimeUtil.nowTs())); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), req.getChange().getProject(), req.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(req.getId(), op); } return com.google.common.base.Strings.isNullOrEmpty(op.newTopicName()); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource req, TopicInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { req.permissions().check(ChangePermission.EDIT_TOPIC_NAME); if (((input!= null) && ((input.topic)!= null)) && ((input.topic.topic.topic) > (com.google.gerrit.server.ChangeUtil.TOPIC_MAX_LENGTH))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("Topic required to limit %s", input.topic)); } com.google.gerrit.server.change.PutTopic.Op op = new com.google.gerrit.server.change.PutTopic.Op.Op(dbProvider.get(), req.getChange().getProject(), req.getUser(), com.google.gerrit.common.TimeUtil.nowTs())); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), req.getProject(), req.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(req.getId(), op); } return com.google.common.base.Strings.isNullOrEmpty(op.newTopicName()); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource req, TopicInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { req.permissions().check(ChangePermission.EDIT_TOPIC_NAME); if (((input!= null) && ((input.topic)!= null)) && ((input.topic.topic.topic) > (com.google.gerrit.server.ChangeUtil.TOPIC_MAX_LENGTH))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("Topic required to limit %s", input.topic)); } com.google.gerrit.server.change.PutTopic.Op op = new com.google.gerrit.server.change.PutTopic.Op.Op(dbProvider.get(), req.getChange().getProject(), req.getUser(), com.google.gerrit.common.TimeUtil.nowTs())); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), req.getProject(), req.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(req.getId(), op); } u.execute(); return com.google.common.base.Strings.isNullOrEmpty(op.newTopicName()); }
@org.junit.Test public void byLabelGroup() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount("user1"); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testutil.InMemoryRepositoryManager.Repo> repo = createProject("repo"); java.lang.String g1 = createGroup("group1", "Administrators"); gApi.groups().id(g1).addMembers("user2"); gApi.groups().id(g2).addMembers("user2"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo), user1); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change1.getId().get()).current().review(new com.google.gerrit.extensions.api.changes.ReviewInput().label("Code-Review", 1)); requestContext.setContext(newRequestContext(userId)); assertQuery("label:Code-Review=+1", change1); assertQuery("label:Code-Review=+1, user1", change1); assertQuery("label:Code-Review=+1, user1", change1); assertQuery("label:Code-Review=+1, user2"); }
@org.junit.Test public void byLabelGroup() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount("user1"); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testutil.InMemoryRepositoryManager.Repo> repo = createProject("repo"); java.lang.String g1 = createGroup("group1", "Administrators"); gApi.groups().id(g1).addMembers("user2"); gApi.groups().id(g2).addMembers("user2"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo), user1); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change1.getId().get()).current().review(new com.google.gerrit.extensions.api.changes.ReviewInput().label("Code-Review", 1)); requestContext.setContext(newRequestContext(userId)); assertQuery("label:Code-Review=+1", change1); assertQuery("label:Code-Review=+1, user1", change1); assertQuery("label:Code-Review=+1, user2", change1); assertQuery("label:Code-Review=+1, user2"); }
@org.junit.Test public void byLabelGroup() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount("user1"); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testutil.InMemoryRepositoryManager.Repo> repo = createProject("repo"); java.lang.String g1 = createGroup("group1", "Administrators"); gApi.groups().id(g1).addMembers("user2"); gApi.groups().id(g2).addMembers("user2"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo), user1); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change1.getId().get()).current().review(new com.google.gerrit.extensions.api.changes.ReviewInput().label("Code-Review", 1)); requestContext.setContext(newRequestContext(user1, user1)); assertQuery("label:Code-Review=+1, user1", change1); assertQuery("label:Code-Review=+1, user1", change1); assertQuery("label:Code-Review=+1, user2"); assertQuery("label:Code-Review=+1, user2"); }
@org.junit.Test public void byLabelGroup() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount("user1"); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testutil.InMemoryRepositoryManager.Repo> repo = createProject("repo"); java.lang.String g1 = createGroup("group1", "Administrators"); gApi.groups().id(g1).addMembers("user2"); gApi.groups().id(g2).addMembers("user2"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo), user1); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change1.getId().get()).current().review(new com.google.gerrit.extensions.api.changes.ReviewInput().label("Code-Review", 1)); requestContext.setContext(newRequestContext(user1, user1)); assertQuery("label:Code-Review=+1, user1", change1); assertQuery("label:Code-Review=+1, user1", change1); assertQuery("label:Code-Review=+1, user2", change1); assertQuery("label:Code-Review=+1, user2"); }
@org.junit.Test public void byLabelGroup() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount("user1"); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testutil.InMemoryRepositoryManager.Repo> repo = createProject("repo"); java.lang.String g1 = createGroup("group1", "Administrators"); gApi.groups().id(g1).addMembers("user2"); gApi.groups().id(g2).addMembers("user2"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo), user1); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change1.getId().get()).current().review(new com.google.gerrit.extensions.api.changes.ReviewInput().label("Code-Review", 1)); requestContext.setContext(newRequestContext(user1, user1)); assertQuery("label:Code-Review=+1, user1", change1); assertQuery("label:Code-Review=+1, user1", change1); assertQuery("label:Code-Review=+1, user2"); assertQuery("label:Code-Review=+1, user2", user2); }
@org.junit.Test public void submitRecords() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount("user1"); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testutil.InMemoryRepositoryManager.Repo> repo = createProject("repo"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); gApi.changes().id(change1.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.recommend()); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change2.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.recommend()); requestContext.setContext(newRequestContext(user.getAccountId())); assertQuery("-is:not:submittable", change1); assertQuery("status:not_ready", change1); assertQuery("status:not_ready", change1); assertQuery("label:not_ready", change1); assertQuery("label:not_ready", change1); assertQuery("label:notedbose", change1); assertQuery("label:Code-Revision=ok", user1); assertQuery("label:Blocked, user1", change1); assertQuery("label:BLISH", change1); }
@org.junit.Test public void submitRecords() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount("user1"); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testutil.InMemoryRepositoryManager.Repo> repo = createProject("repo"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); gApi.changes().id(change1.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.recommend()); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change2.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.recommend()); requestContext.setContext(newRequestContext(user.getAccountId())); assertQuery("-is:not:submittable", change1); assertQuery("status:not_ready", change1); assertQuery("status:not_ready", change1); assertQuery("label:not_ready", change1); assertQuery("label:not_ready", change1); assertQuery("label:notedbose", change1); assertQuery("label:Code-Revision=ok", user1); assertQuery("label:Blocked, user1", change1); assertQuery("label:BLISH", change1); assertQuery("label:BLISH", change1); }
@org.junit.Test public void submitRecords() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount("user1"); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testutil.InMemoryRepositoryManager.Repo> repo = createProject("repo"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); gApi.changes().id(change1.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.recommend()); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change2.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.recommend()); requestContext.setContext(newRequestContext(user.getAccountId())); assertQuery("-is:not:submittable", change1); assertQuery("status:not_ready", change1); assertQuery("status:not_ready", change1); assertQuery("label:not_ready", change1); assertQuery("label:not_ready", change1); assertQuery("label:notedbose", change1); assertQuery("label:Code-Revision=ok", user1); assertQuery("label:codemails", user1); assertQuery("label:BLISH", change1, user1); assertQuery("label:BLISH", change1); }
@org.junit.Test public void submitRecords() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount("user1"); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testutil.InMemoryRepositoryManager.Repo> repo = createProject("repo"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); gApi.changes().id(change1.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.recommend()); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change2.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.recommend()); requestContext.setContext(newRequestContext(user.getAccountId())); assertQuery("-is:not:submittable", change1); assertQuery("status:not_ready", change1); assertQuery("status:not_ready", change1); assertQuery("label:not_ready", change1); assertQuery("label:not_ready", change1); assertQuery("label:notedbose", change1); assertQuery("label:Code-Revision=ok", user1); assertQuery("label:Blocked, user1", change1); assertQuery("label:BLISH", change1); assertQuery("label:BLISH", user1); }
@org.junit.Test public void submitRecords() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount("user1"); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testutil.InMemoryRepositoryManager.Repo> repo = createProject("repo"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); gApi.changes().id(change1.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.recommend()); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change2.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.recommend()); requestContext.setContext(newRequestContext(user.getAccountId())); assertQuery("-is:not:submittable", change1); assertQuery("status:not_ready", change1); assertQuery("status:not_ready", change1); assertQuery("label:not_ready", change1); assertQuery("label:not_ready", change1); assertQuery("label:notedbose", change1); assertQuery("label:Code-Revision=ok", user1); assertQuery("label:codemails", user1); assertQuery("label:BLISH", change1, user1); assertQuery("label:BLISH", change1); assertQuery("label: Published", user1); }
@java.lang.Override public com.google.gerrit.extensions.common.CommitInfo apply(com.google.gerrit.server.project.CommitResource rsrc) throws java.io.IOException { return com.google.gerrit.server.git.CommitUtil.toCommitInfo(rsrc.getCommit()); }
@java.lang.Override public com.google.gerrit.extensions.common.CommitInfo apply(com.google.gerrit.server.project.CommitResource rsrc) throws java.io.IOException { return com.google.gerrit.server.git.CommitUtil.toCommitInfo(rsrc); }
@java.lang.Override public com.google.gerrit.extensions.common.CommitInfo apply(com.google.gerrit.server.project.CommitResource rsrc) throws java.io.IOException { return com.google.gerrit.server.git.CommitUtil.toCommit(rsrc.getCommit()); }
@java.lang.Override public com.google.gerrit.extensions.common.CommitInfo apply(com.google.gerrit.server.project.CommitResource rsrc) throws java.io.IOException { return com.google.gerrit.server.git.CommitUtil.toCommit(rsrc); }
@java.lang.Override public com.google.gerrit.extensions.common.CommitInfo apply(com.google.gerrit.server.project.CommitResource rsrc) throws java.io.IOException { return com.google.gerrit.server.git.CommitUtil.toCommitInfo(rsrc, rsrc.getCommit()); }
@java.lang.Override public com.google.gerrit.server.project.CreateTag create(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString id) { return createTagFactory.create(name, resource.get()); }
@java.lang.Override public com.google.gerrit.server.project.CreateTag create(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString id) { return createTagFactory.create(name, resource, name); }
@java.lang.Override public com.google.gerrit.server.project.CreateTag create(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString id) { return createTagFactory.create(name, com.google.gerrit.server.project.RefControl.toTag(resource.getName()), name); }
@java.lang.Override public com.google.gerrit.server.project.CreateTag create(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString id) { return createTagFactory.create(name, com.google.gerrit.server.project.TagResource.createTag(resource.getProject(), resource.get())); }
@java.lang.Override public com.google.gerrit.server.project.CreateTag create(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString id) { return createTagFactory.create(name, com.google.gerrit.server.change.IdResource.createTag(resource.getProject(), resource.get())); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.api.groups.GroupInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.api.changes.GroupInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.api.groups.GroupInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("database already exists"); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.api.groups.GroupInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("database is already exists"); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.api.groups.GroupInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("delete existing exists"); }
public static java.lang.String describe(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) { return user.getAccountId().toString(); } if (user instanceof com.google.gerrit.server.query.change.SingleGroupUser) { return com.google.gerrit.server.query.change.SingleGroupUser) { return "account:" + (user.getAccountGroup().iterator().next().next().toString()); } return user.toString(); }
public static java.lang.String describe(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) { return user.getAccountId().toString(); } if (user instanceof com.google.gerrit.server.query.change.SingleGroupUser) { return com.google.gerrit.server.query.change.SingleGroupUser) { return com.google.gerrit.server.query.change.SingleGroupUser) { return (user.getAccountGroup().iterator().next().next().toString()); } return user.toString(); }
public static java.lang.String describe(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) { return user.getAccountId().toString(); } if (user instanceof com.google.gerrit.server.query.change.SingleGroupUser) { return com.google.gerrit.server.query.change.SingleGroupUser) { return com.google.gerrit.server.query.change.SingleGroupUser) { return (user.getAccountGroupUUID().iterator().next().next().toString()); } return user.toString(); }
public static java.lang.String describe(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) { return user.getAccountId().toString(); } if (user instanceof com.google.gerrit.server.query.change.SingleGroupUser) { return com.google.gerrit.server.query.change.SingleGroupUser) { return com.google.gerrit.server.query.change.SingleGroupUser) { return com.google.common.collect.ImmutableList.of(user.getAccountGroup().iterator().next().next().toString()); } return user.toString(); }
public static java.lang.String describe(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) { return user.getAccountId().toString(); } if (user instanceof com.google.gerrit.server.query.change.SingleGroupUser) { return com.google.gerrit.server.query.change.SingleGroupUser) { return com.google.gerrit.server.query.change.SingleGroupUser) { return com.google.common.collect.ImmutableList.of(user.getAccountGroup().iterator().next().next().next().toString()); } return user.toString(); }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.group.MemberResource rsrc) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.account.AccountLoader loader = infoFactory.create(true); com.google.gerrit.extensions.common.AccountInfo info = loader.get(rsrc.getMember().getAccountId()); loader.fill(); return info; }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.group.MemberResource rsrc) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.account.AccountLoader loader = infoFactory.create(true); com.google.gerrit.reviewdb.client.Account account = loader.get(rsrc.getMember().getAccountId()); loader.fill(); return info; }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.group.MemberResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.account.AccountLoader loader = infoFactory.create(true); com.google.gerrit.extensions.common.AccountInfo info = loader.get(rsrc.getMember().getAccountId()); loader.fill(); return info; }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.group.MemberResource rsrc) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.account.AccountLoader loader = infoFactory.create(true); com.google.gerrit.server.account.AccountInfo info = loader.get(rsrc.getMember().getAccountId()); loader.fill(); return info; }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.group.MemberResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.account.AccountLoader loader = infoFactory.create(true); com.google.gerrit.extensions.common.AccountInfo info = loader.get(rsrc.getUser().getAccountId()); loader.fill(); return info; }
private java.lang.String getGroupName(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { return groupCache.get(groupId).map(("Group " + groupId)); }
private java.lang.String getGroupName(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { return groupCache.get(groupId).map("Group " + groupId)); }
private java.lang.String getGroupName(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { return groupCache.get(groupId).map((("Group " + groupId)); }
private java.lang.String getGroupName(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { return groupCache.get(groupId).map(groupId); }
private java.lang.String getGroupName(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { return groupCache.get(groupId).map(groupId).map("Group " + groupId)); }
private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> values, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById m : values) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = m.getIncludeUUID(); java.lang.String groupName = m.getGroupId(); java.lang.String groupName = m.getGroupId(); com.google.gerrit.reviewdb.client.AccountGroup.Id targetUuid = m.getGroupId(); java.lang.String targetGroupId = m.getGroupId(); com.google.gerrit.reviewdb.client.AccountGroup.Id targetUuid = m.getGroupId(); java.lang.String group = m.getGroupId(); java.lang.String targetUuid = getGroupName(groupUUID); descriptions.add(java.lang.String.format(groupId, groupUuid, groupUuid, groupName, targetGroupName, targetType)); } logOrmException(header, e); }
private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> values, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById m : values) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = m.getIncludeUUID(); java.lang.String groupName = m.getGroupId(); java.lang.String groupName = m.getGroupId(); com.google.gerrit.reviewdb.client.AccountGroup.Id targetUuid = m.getGroupId(); java.lang.String targetGroupId = m.getGroupId(); com.google.gerrit.reviewdb.client.AccountGroup.Id targetUuid = m.getGroupId(); java.lang.String group = m.getGroupId(); java.lang.String targetUuid = getGroupName(groupUUID); descriptions.add(java.lang.String.format(groupId, groupUuid, groupUuid, groupName, targetGroupName, targetType)); } logOrmException(header, me, e); }
private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> values, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById m : values) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = m.getIncludeUUID(); java.lang.String groupName = m.getGroupId(); java.lang.String groupName = m.getGroupId(); com.google.gerrit.reviewdb.client.AccountGroup.Id targetUuid = m.getGroupId(); java.lang.String targetGroupId = m.getGroupId(); com.google.gerrit.reviewdb.client.AccountGroup.Id targetUuid = m.getGroupId(); java.lang.String group = m.getGroupId(); java.lang.String targetUuid = getGroupName(groupUUID); descriptions.add(java.lang.String.format(groupId, groupUuid, groupUuid, groupName, targetGroupName, targetType)); } logOrmException(header, me, descriptions, e); }
private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> values, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById m : values) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = m.getIncludeUUID(); java.lang.String groupName = m.getGroupId(); java.lang.String groupName = m.getGroupId(); com.google.gerrit.reviewdb.client.AccountGroup.Id targetUuid = m.getGroupId(); java.lang.String targetGroupId = m.getGroupId(); com.google.gerrit.reviewdb.client.AccountGroup.Id targetUuid = m.getGroupId(); java.lang.String group = m.getGroupId(); java.lang.String targetUuid = getGroupName(groupUUID); descriptions.add(java.lang.String.format(groupId, groupUuid, groupUuid, groupName, targetGroupName, targetType)); } logOrmException(header, e); } logOrmException e); }
private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> values, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById m : values) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = m.getIncludeUUID(); java.lang.String groupName = m.getGroupId(); java.lang.String groupName = m.getGroupId(); com.google.gerrit.reviewdb.client.AccountGroup.Id targetUuid = m.getGroupId(); java.lang.String targetGroupId = m.getGroupId(); com.google.gerrit.reviewdb.client.AccountGroup.Id targetUuid = m.getGroupId(); java.lang.String group = m.getGroupId(); java.lang.String targetUuid = getGroupName(groupUUID); descriptions.add(java.lang.String.format(groupId, groupUuid, groupUuid, groupName, targetGroupName, targetType)); } logOrmException(header, me, e); logOrmException e); }
@java.lang.Override public void onDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed, java.sql.Timestamp removedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = new java.util.ArrayList<>(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditUpdates = new java.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupMember m : removed) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupMemberAudit a : db.accountGroupMembersAudit().byGroupAccount(m.getAccountGroupId(), m.getAccountId())) { if (a.isActive()) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); } else { audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, removedOn); audit.removedLegacy(); auditInserts.add(audit); } } db.accountGroupMembersAudit().update(auditUpdates); db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log delete accounts from user", e); } }
@java.lang.Override public void onDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed, java.sql.Timestamp removedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = new java.util.ArrayList<>(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditUpdates = new java.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupMember m : removed) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupMemberAudit a : db.accountGroupMembersAudit().byGroupAccount(m.getAccountGroupId(), m.getAccountId())) { if (a.isActive()) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); auditUpdates.add(audit); } else { audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, removedOn); audit.removedLegacy(); auditInserts.add(audit); } } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log delete accounts from user", me, e); } }
@java.lang.Override public void onDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed, java.sql.Timestamp removedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = new java.util.ArrayList<>(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditUpdates = new java.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupMember m : removed) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupMemberAudit a : db.accountGroupMembersAudit().byGroupAccount(m.getAccountGroupId(), m.getAccountId())) { if (a.isActive()) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); } else { audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, removedOn); audit.removedLegacy(); auditInserts.add(audit); } } db.accountGroupMembersAudit().update(auditUpdates); db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log delete accounts from user", me, e); } }
@java.lang.Override public void onDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed, java.sql.Timestamp removedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = new java.util.ArrayList<>(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditUpdates = new java.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupMember m : removed) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupMemberAudit a : db.accountGroupMembersAudit().byGroupAccount(m.getAccountGroupId(), m.getAccountId())) { if (a.isActive()) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); auditUpdates.add(audit); } else { audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, removedOn); auditInserts.add(audit); } } db.accountGroupMembersAudit().update(auditUpdates); db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log delete accounts from user", me, e); } }
@java.lang.Override public void onDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed, java.sql.Timestamp removedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = new java.util.ArrayList<>(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditUpdates = new java.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupMember m : removed) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupMemberAudit a : db.accountGroupMembersAudit().byGroupAccount(m.getAccountGroupId(), m.getAccountId())) { if (a.isActive()) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); auditUpdates.add(audit); } else { audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, removedOn); audit.removedLegacy(); auditInserts.add(audit); } } db.accountGroupMembersAudit().update(auditUpdates); db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log delete accounts from user", e); } }
@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : added) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, addedOn); auditInserts.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log add accounts to account event performed by user", me, e); } }
@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : added) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, addedOn); auditInserts.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log add accounts to account event performed by user", me, added, e); } }
@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = new java.util.ArrayList<>(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, addedOn); auditInserts.add(audit); }
@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : added) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, addedOn); auditInserts.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log add accounts to create accounts to account event performed by user", me, e); } }
@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : added) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, addedOn); auditInserts.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log add accounts to accounts to account event performed by user", me, e); } }
@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed, java.sql.Timestamp removedOn) { final java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = new java.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupById g : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(g.getGroupId(), g.getIncludeUUID())) { if (a.isActive()) { audit = a; break; } } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(auditUpdates); } } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log delete groups from user", me, removed, removed, e); } }
@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed, java.sql.Timestamp removedOn) { final java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = new java.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupById g : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(g.getGroupId(), g.getIncludeUUID())) { if (a.isActive()) { audit = a; break; } } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); } db.accountGroupByIdAud().update(auditUpdates); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log delete groups from user", me, removed, removed, e); } }
@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed, java.sql.Timestamp removedOn) { final java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = new java.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupById g : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(g.getGroupId(), g.getIncludeUUID())) { if (a.isActive()) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); } } db.accountGroupByIdAud().update(auditUpdates); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log delete groups from user", me, removed, removed, e); } }
@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed, java.sql.Timestamp removedOn) { final java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = new java.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupById g : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(g.getGroupId(), g.getIncludeUUID())) { if (a.isActive()) { audit = a; break; } } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); } db.accountGroupByIdAud().update(auditUpdates); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log delete groups from user", me, removed, e); } }
@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed, java.sql.Timestamp removedOn) { final java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = new java.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupById g : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(g.getGroupId(), g.getIncludeUUID())) { if (a.isActive()) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); } } db.accountGroupByIdAud().update(auditUpdates); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log delete groups from user", me, removed, e); } }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Label " + topic)); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Label " + (rsrc.getChange().getKey()))); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Label " + (rsrc.getChange().getLabelId()))); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Label " + (rsrc.getChange().getLabel()))); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Label " + (rsrc.getChange().getId()))); }
@java.lang.Override public void onAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> includesAudit = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById groupInclude : added) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(groupInclude, me, addedOn); includesAudit.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(includesAudit); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log add groups to group event performed by user", me, added, e); } }
@java.lang.Override public void onAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> includesAudit = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById groupInclude : added) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(groupInclude, me, addedOn); includesAudit.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(includesAudit); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log add groups to group event performed by user", me, e); } }
@java.lang.Override public void onAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> includesAudit = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById groupInclude : added) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(groupInclude, me, addedOn); includesAudit.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema)) { db.accountGroupByIdAud().insert(includesAudit); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log add groups to group event performed by user", me, e); } }
@java.lang.Override public void onAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> includesAudit = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById groupInclude : added) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(groupInclude, me, addedOn); includesAudit.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema)) { db.accountGroupByIdAud().insert(includesAudit); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log add groups to group event performed by user", me, added, e); } }
@java.lang.Override public void onAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> includesAudit = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById groupInclude : added) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(groupInclude, me, addedOn); includesAudit.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(groupInclude, me, addedOn); db.accountGroupByIdAud().insert(includesAudit); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log add groups to group event performed by user", me, added, e); }
public static void logFailToGroupRefFromGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { com.google.gerrit.server.group.GroupsCheckResult crn = null; try { com.google.gerrit.server.group.GroupsNoteDbChecker.log.warn("Failed to UUID from UUID from account %s from account ref", uuid.get()), uuid.getMessage()); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.group.GroupsNoteDbConsistencyCheckerChecker.log.error(("Cannot load from ref " + uuid), e); } }
public static void logFailToGroupRefFromGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { com.google.gerrit.server.group.GroupsCheckResult crn = null; try { com.google.gerrit.server.group.GroupsNoteDbChecker.log.warn("Failed to UUID from UUID from account %s from account ref", uuid.get()), uuid.getMessage()); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.group.GroupsNoteDbConsistencyCheckerChecker.log.error(("Cannot load from account ref " + uuid)); } }
public static void logFailToGroupRefFromGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { com.google.gerrit.server.group.GroupsCheckResult crn = null; try { com.google.gerrit.server.group.GroupsNoteDbChecker.log.warn("Failed to UUID from UUID from account %s from account ref", uuid.get()), uuid.getMessage()); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.group.GroupsNoteDbConsistencyCheckerChecker.log.error(("Cannot load from ref " + uuid)); } }
public static void logFailToGroupRefFromGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { com.google.gerrit.server.group.GroupsCheckResult crn = null; try { com.google.gerrit.server.group.GroupsNoteDbChecker.log.warn("Failed to UUID from UUID from account %s from account ref", uuid.get()), uuid.getMessage()); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.group.GroupsNoteDbConsistencyCheckerChecker.log.error(("Cannot load from account ref " + uuid), e); } }
public static void logFailToGroupRefFromGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { com.google.gerrit.server.group.GroupsCheckResult crn = null; try { com.google.gerrit.server.group.GroupsNoteDbChecker.log.warn("Failed to UUID from UUID from account %s from account ref", uuid.get()), uuid.getMessage()); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.group.GroupsNoteDbConsistencyCheckerChecker.log.error(("Cannot load from account ref " + (uuid.get()), e); } }
@com.google.common.annotations.VisibleForTesting static java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkWithGroupNameNotes(org.eclipse.jgit.lib.Repository repo, java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throws java.io.IOException { try { java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> groupRef = com.google.gerrit.server.group.GroupReference.loadOneGroupReference(allUsersRepo, groupUUID); if (!(groupRef.isPresent())) { return com.google.common.collect.ImmutableList.of(uuid); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = groupRef.get().getUUID(); java.lang.String name = groupRef.get().getName(); java.lang.String name = groupRef.get().getName(); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo> problems = new java.util.ArrayList<>(); if (!(java.util.Objects.equals(groupUUID, uuid))) { problems.add(warning); } if (!(java.util.Objects.equals(groupUUID, uuid))) { problems.add(warning); } return problems; } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { return problems; } return problems; }
@com.google.common.annotations.VisibleForTesting static java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkWithGroupNameNotes(org.eclipse.jgit.lib.Repository repo, java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throws java.io.IOException { try { java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> groupRef = com.google.gerrit.server.group.GroupReference.loadOneGroupReference(allUsersRepo, groupUUID); if (!(groupRef.isPresent())) { return com.google.common.collect.ImmutableList.of(uuid); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = groupRef.get().getUUID(); java.lang.String name = groupRef.get().getName(); java.lang.String name = groupRef.get().getName(); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo> problems = new java.util.ArrayList<>(); if (!(java.util.Objects.equals(groupUUID, uuid))) { problems.add(warning); } if (!(java.util.Objects.equals(groupName, uuid))) { problems.add(warning); } return problems; } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { return problems; } return problems; }
@com.google.common.annotations.VisibleForTesting static java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkWithGroupNameNotes(org.eclipse.jgit.lib.Repository repo, java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throws java.io.IOException { try { java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> groupRef = com.google.gerrit.server.group.GroupReference.loadOneGroupReference(allUsersRepo, groupUUID); if (!(groupRef.isPresent())) { return com.google.common.collect.ImmutableList.of(uuid); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = groupRef.get().getUUID(); java.lang.String name = groupRef.get().getName(); java.lang.String name = groupRef.get().getName(); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo> problems = new java.util.ArrayList<>(); if (!(java.util.Objects.equals(groupUUID, uuid))) { problems.add(warning); } if (!(java.util.Objects.equals(groupUUID, uuid))) { problems.add(notes.get().getName()); } return problems; } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { return problems; } return problems; }
@com.google.common.annotations.VisibleForTesting static java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkWithGroupNameNotes(org.eclipse.jgit.lib.Repository repo, java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throws java.io.IOException { try { java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> groupRef = com.google.gerrit.server.group.GroupReference.loadOneGroupReference(allUsersRepo, groupUUID); if (!(groupRef.isPresent())) { return com.google.common.collect.ImmutableList.of(uuid); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = groupRef.get().getUUID(); java.lang.String name = groupRef.get().getName(); java.lang.String name = groupRef.get().getName(); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo> problems = new java.util.ArrayList<>(); if (!(java.util.Objects.equals(groupUUID, uuid))) { problems.add(warning); } if (!(java.util.Objects.equals(groupUUID, uuid))) { problems.add(warning); } return problems; } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { return problems; } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { return problems; }
@com.google.common.annotations.VisibleForTesting static java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkWithGroupNameNotes(org.eclipse.jgit.lib.Repository repo, java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throws java.io.IOException { try { java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> groupRef = com.google.gerrit.server.group.GroupReference.loadOneGroupReference(allUsersRepo, groupUUID); if (!(groupRef.isPresent())) { return com.google.common.collect.ImmutableList.of(uuid); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = groupRef.get().getUUID(); java.lang.String name = groupRef.get().getName(); java.lang.String name = groupRef.get().getName(); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo> problems = new java.util.ArrayList<>(); if (!(java.util.Objects.equals(groupUUID, uuid))) { problems.add(warning); } if (!(java.util.Objects.equals(groupName, uuid))) { problems.add(warning); } return problems; } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { return problems; } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { return problems; } return problems; }
private void readGroups(org.eclipse.jgit.lib.Repository repo, java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs, com.google.gerrit.server.group.Gwtorm.ResultResult result) throws java.io.IOException { for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> entry : refs.entrySet()) { if (!(entry.getKey().startsWith(RefNames.REFS_GROUPS))) { continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = AccountGroup.UUID.fromRef(entry.getKey()); if (uuid == null) { continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = AccountGroup.UUID.fromRef(entry.getKey()); if (uuid == null) { result.add(error(errorMessage); continue; } try { com.google.gerrit.server.group.GroupConfig cfg = com.google.gerrit.server.group.GroupConfig.loadForGroup(repo, uuid, entry.getValue()); result.uuid = uuid.getValue().getObjectId(); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { result.problems.add(error(e.getMessage()); } } }
private void readGroups(org.eclipse.jgit.lib.Repository repo, java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs, com.google.gerrit.server.group.Gwtorm.ResultResult result) throws java.io.IOException { for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> entry : refs.entrySet()) { if (!(entry.getKey().startsWith(RefNames.REFS_GROUPS))) { continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = AccountGroup.UUID.fromRef(entry.getKey()); if (uuid == null) { continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = AccountGroup.UUID.fromRef(entry.getKey()); if (uuid == null) { result.add(error(errorMessage); continue; } try { com.google.gerrit.server.group.GroupConfig cfg = com.google.gerrit.server.group.GroupConfig.loadForGroup(repo, uuid, entry.getValue()); result.uuidToGroup.put(uuid, cfg.getLoadedGroup().get()); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { result.problems.add(error(errorMessage); } } }
private void readGroups(org.eclipse.jgit.lib.Repository repo, java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs, com.google.gerrit.server.group.Gwtorm.ResultResult result) throws java.io.IOException { for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> entry : refs.entrySet()) { if (!(entry.getKey().startsWith(RefNames.REFS_GROUPS))) { continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = AccountGroup.UUID.fromRef(entry.getKey()); if (uuid == null) { continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = AccountGroup.UUID.fromRef(entry.getKey()); if (uuid == null) { result.add(errorMessage); continue; } try { com.google.gerrit.server.group.GroupConfig cfg = com.google.gerrit.server.group.GroupConfig.loadForGroup(repo, uuid, uuid, entry.getValue()); result.uuidToGroup.put(uuid, cfg.getLoadedGroup().get()); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { result.problems.add(error(errorMessage); } } }
private void readGroups(org.eclipse.jgit.lib.Repository repo, java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs, com.google.gerrit.server.group.Gwtorm.ResultResult result) throws java.io.IOException { for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> entry : refs.entrySet()) { if (!(entry.getKey().startsWith(RefNames.REFS_GROUPS))) { continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = AccountGroup.UUID.fromRef(entry.getKey()); if (uuid == null) { continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = AccountGroup.UUID.fromRef(entry.getKey()); if (uuid == null) { result.add(error(errorMessage); continue; } try { com.google.gerrit.server.group.GroupConfig cfg = com.google.gerrit.server.group.GroupConfig.loadForGroup(repo, uuid, entry.getValue()); result.uuid = uuid.getValue().getObjectId(); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { result.problems.add(error("Error: %s does not parse: %s does not parse: %s", uuid, e.getMessage())); } } }
private void readGroups(org.eclipse.jgit.lib.Repository repo, java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs, com.google.gerrit.server.group.Gwtorm.ResultResult result) throws java.io.IOException { for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> entry : refs.entrySet()) { if (!(entry.getKey().startsWith(RefNames.REFS_GROUPS))) { continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = AccountGroup.UUID.fromRef(entry.getKey()); if (uuid == null) { continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = AccountGroup.UUID.fromRef(entry.getKey()); if (uuid == null) { result.add(errorMessage); continue; } try { com.google.gerrit.server.group.GroupConfig cfg = com.google.gerrit.server.group.GroupConfig.loadForGroup(repo, uuid, uuid, entry.getValue()); result.uuidToGroup.put(uuid, cfg.getLoadedGroup().get()); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { result.problems.add(error("Error: Cannot parse: %s does not parse: %s", uuid, e.getMessage())); } } }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ParentInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return apply(rsrc, input, true, true); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ParentInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return apply(rsrc, input, true); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ParentInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return apply(rsrc, input, true, true); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ParentInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return apply(rsrc, input, true, true); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ParentInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return apply(rsrc, input, true); }
public void validateParentUpdate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.server.IdentifiedUser user, java.lang.String newParent, boolean checkIfAdmin) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException { if (checkIfAdmin) { permissionBackend.user(user).check(GlobalPermission.ADMINISTRATE_SERVER); } if ((project.equals(allUsers)) && (!(allUsers.get().equals(newParent)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("All must be inherited from %s", allUsers.get(), allUsers.get())); } if (project.equals(allProjects)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("Project %s must be created of %s", allProjects.get())); } newParent = com.google.common.base.Strings.emptyToNull(new com.google.gerrit.reviewdb.client.Project.NameKey(newParent)); if (parent == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException((("Project project " + (parent.get())) + "\" not found")); } if (parent.getName().equals(project.get())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(parent.tree(), (p.getName()))); } if (com.google.common.collect.Iterables.tryParse(parent.tree(), (p)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Cannot set parent: " + p)); } if (com.google.common.collect.Iterables.tryGet(parent, (parent
public void validateParentUpdate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.server.IdentifiedUser user, java.lang.String newParent, boolean checkIfAdmin) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException { if (checkIfAdmin) { permissionBackend.user(user).check(GlobalPermission.ADMINISTRATE_SERVER); } if ((project.equals(allUsers)) && (!(allUsers.get().equals(newParent)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("All must be inherited from %s", allUsers.get(), allUsers.get())); } if (project.equals(allProjects)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("Project %s must be created of %s", allProjects.get())); } newParent = com.google.common.base.Strings.emptyToNull(new com.google.gerrit.reviewdb.client.Project.NameKey(newParent)); if (parent == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException((("Project project " + (parent.get())) + "\" not found")); } if (parent.getName().equals(project.get())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(parent.tree(), (p.getName()))); } if (com.google.common.collect.Iterables.tryParse(parent.tree(), (p)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Cannot set parent project " + p)); } if (com.google.common.collect.Iterables.tryGet(parent, (parent
public void validateParentUpdate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.server.IdentifiedUser user, java.lang.String newParent, boolean checkIfAdmin) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException { if (checkIfAdmin) { permissionBackend.user(user).check(GlobalPermission.ADMINISTRATE_SERVER); } if ((project.equals(allUsers)) && (!(allUsers.get().equals(newParent)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("All must be inherited from %s", allUsers.get(), allUsers.get())); } if (project.equals(allProjects)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("Project %s must be created of %s", allProjects.get())); } newParent = com.google.common.base.Strings.emptyToNull(new com.google.gerrit.reviewdb.client.Project.NameKey(newParent)); if (parent == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException((("Project project " + (parent.get())) + "\" not found")); } if (parent.getName().equals(project.get())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(parent.tree(), (p.getName()))); } if (com.google.common.collect.Iterables.tryParse(parent.tree(), (p)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Cannot set parent: " + p)); } if (com.google.common.collect.Iterables.start()) { throw new com.
public void validateParentUpdate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.server.IdentifiedUser user, java.lang.String newParent, boolean checkIfAdmin) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException { if (checkIfAdmin) { permissionBackend.user(user).check(GlobalPermission.ADMINISTRATE_SERVER); } if ((project.equals(allUsers)) && (!(allUsers.get().equals(newParent)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("All must be inherited from %s", allUsers.get(), allUsers.get())); } if (project.equals(allProjects)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("Project %s must be created of %s", allProjects.get())); } newParent = com.google.common.base.Strings.emptyToNull(new com.google.gerrit.reviewdb.client.Project.NameKey(newParent)); if (parent == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException((("Project project " + (parent.get())) + "\" not found")); } if (parent.getName().equals(project.get())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(parent.tree(), (p.getName()))); } if (com.google.common.collect.Iterables.tryParse(parent.tree(), (p)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Cannot set parent: " + p)); } if (com.google.common.collect.Iterables.tryGet(parent, (p
public void validateParentUpdate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.server.IdentifiedUser user, java.lang.String newParent, boolean checkIfAdmin) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException { if (checkIfAdmin) { permissionBackend.user(user).check(GlobalPermission.ADMINISTRATE_SERVER); } if ((project.equals(allUsers)) && (!(allUsers.get().equals(newParent)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("All must be inherited from %s", allUsers.get(), allUsers.get())); } if (project.equals(allProjects)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("Project %s must be created of %s", allProjects.get())); } newParent = com.google.common.base.Strings.emptyToNull(new com.google.gerrit.reviewdb.client.Project.NameKey(newParent)); if (parent == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException((("Project project " + (parent.get())) + "\" not found")); } if (parent.getName().equals(project.get())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(parent.tree(), (p.getName()))); } if (com.google.common.collect.Iterables.tryParse(parent.tree(), (p)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Cannot set parent: " + p)); } if (com.google.common.collect.Iterables.tryGet(parent.tree(),
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.TagResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.TagInfo>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.View<com.google.gerrit.server.project.TagResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.RestView<com.google.gerrit.server.project.TagResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.GetView<com.google.gerrit.server.project.TagResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.server.project.TagResource parse(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { return new com.google.gerrit.server.project.TagResource(rsrc.getProjectState(), rsrc.getUser(), list.get(rsrc, id)); }
@java.lang.Override public com.google.gerrit.server.project.TagResource parse(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { return new com.google.gerrit.server.project.TagResource(rsrc.getProjectState(), rsrc.getUser(), list.getUser(), list.get(rsrc, id)); }
@java.lang.Override public com.google.gerrit.server.project.TagResource parse(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { return new com.google.gerrit.server.project.TagResource(rsrc.getProjectState(), rsrc.getUser(), list.get().get(rsrc, id)); }
@java.lang.Override public com.google.gerrit.server.project.TagResource parse(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.project.TagResource parse(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { com.google.gerrit.server.project.TagResource rsrc = rsrc.getProjectState(); return new com.google.gerrit.server.project.TagResource(rsrc.getProjectState(), rsrc.getUser(), list.get(rsrc, id)); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AgreementInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException { if (!(agreementsEnabled)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("Authentication required"); } if (!(self.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get contributor agreements"); } com.google.gerrit.server.IdentifiedUser user = self.get().asIdentifiedUser(); if (user!= null) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get contributor agreements"); } java.util.Collection<com.google.gerrit.common.data.ContributorAgreement> results = new java.util.ArrayList<>(); java.util.Collection<com.google.gerrit.common.data.PermissionRule> group = projectCache.getAllowed().getConfig().getConfig().getConfig().getConfig(); for (com.google.gerrit.common.data.ContributorAgreement ca : ca) { if (((rule.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.Action)) && ((rule.getGroup())!= null)) { groupIds.add(rule.getGroup().getUUID()); } else if ((rule.getGroup().getUUID())!= null) { com.google.gerrit.server.account.GetAgreements.log.warn(((((("Action " + (rule.getGroup().getName())) + " is not permitted")); } else { com.google.gerrit.server.account.GetAgreements.log.warn(((((("Failed to " + (ca.getGroup().getName())) + "\"") + "\"") + (ca.getName())) + "\"")); } } }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AgreementInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException { if (!(agreementsEnabled)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("Authentication required"); } if (!(self.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get contributor agreements"); } com.google.gerrit.server.IdentifiedUser user = self.get().asIdentifiedUser(); if (user!= null) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get contributor agreements"); } java.util.Collection<com.google.gerrit.common.data.ContributorAgreement> results = new java.util.ArrayList<>(); java.util.Collection<com.google.gerrit.common.data.PermissionRule> group = projectCache.getAllowed().getConfig().getConfig().getConfig().getConfig(); for (com.google.gerrit.common.data.ContributorAgreement ca : ca) { if (((rule.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.Action)) && ((rule.getGroup())!= null)) { groupIds.add(rule.getGroup().getUUID()); } else if ((rule.getGroup().getUUID())!= null) { com.google.gerrit.server.account.GetAgreements.log.warn(((((("Action " + (rule.getGroup().getName())) + " is not permitted")); } else { com.google.gerrit.server.account.GetAgreements.log.warn(((((("Failed to " + (ca.getGroup().getName())) + "\"") + "\"") + "\"")); } } }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AgreementInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException { if (!(agreementsEnabled)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("Authentication required"); } if (!(self.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get contributor agreements"); } com.google.gerrit.server.IdentifiedUser user = self.get().asIdentifiedUser(); if (user!= null) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get contributor agreements"); } java.util.Collection<com.google.gerrit.common.data.ContributorAgreement> results = new java.util.ArrayList<>(); java.util.Collection<com.google.gerrit.common.data.PermissionRule> group = projectCache.getAllowed().getConfig().getConfig().getConfig().getConfig(); for (com.google.gerrit.common.data.ContributorAgreement ca : ca) { if (((rule.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.Action.Action)) && ((rule.getGroup())!= null)) { groupIds.add(rule.getGroup().getUUID()); } else if ((rule.getGroup().getUUID())!= null) { com.google.gerrit.server.account.GetAgreements.log.warn(((((("Action " + (rule.getGroup().getName())) + "\"") + (ca.getName())) + "\"")); } else { com.google.gerrit.server.account.GetAgreements.log.warn(((((("Verified " + (ca.getGroup().getName())) + "\"") + "\"") + "\"")); } } }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AgreementInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException { if (!(agreementsEnabled)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("Authentication required"); } if (!(self.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get contributor agreements"); } com.google.gerrit.server.IdentifiedUser user = self.get().asIdentifiedUser(); if (user!= null) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get contributor agreements"); } java.util.Collection<com.google.gerrit.common.data.ContributorAgreement> results = new java.util.ArrayList<>(); java.util.Collection<com.google.gerrit.common.data.PermissionRule> group = projectCache.getAllowed().getConfig().getConfig().getConfig().getConfig(); for (com.google.gerrit.common.data.ContributorAgreement ca : ca) { if (((rule.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.Action.Action)) && ((rule.getGroup())!= null)) { groupIds.add(rule.getGroup().getUUID()); } else if ((rule.getGroup().getUUID())!= null) { com.google.gerrit.server.account.GetAgreements.log.warn(((((("Action " + (rule.getGroup().getName())) + "\"") + (ca.getName())) + "\"")); } else { com.google.gerrit.server.account.GetAgreements.log.warn(((((("Verified " + (ca.getGroup().getName())) + "\"") + "\"") + (ca.getName())) + "\"")); } } }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AgreementInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException { if (!(agreementsEnabled)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("Authentication required"); } if (!(self.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get contributor agreements"); } com.google.gerrit.server.IdentifiedUser user = self.get().asIdentifiedUser(); if (user!= null) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get contributor agreements"); } java.util.Collection<com.google.gerrit.common.data.ContributorAgreement> results = new java.util.ArrayList<>(); java.util.Collection<com.google.gerrit.common.data.PermissionRule> group = projectCache.getAllowed().getConfig().getConfig().getConfig().getConfig(); for (com.google.gerrit.common.data.ContributorAgreement ca : ca) { if (((rule.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.Action.Action)) && ((rule.getGroup())!= null)) { groupIds.add(rule.getGroup().getUUID()); } else if ((rule.getGroup().getUUID())!= null) { com.google.gerrit.server.account.GetAgreements.log.warn(((((("Action " + (rule.getGroup().getName())) + "\"") + (ca.getName())) + "\"")); } else { com.google.gerrit.server.account.GetAgreements.log.warn(((((("Failed to " + (ca.getGroup().getName())) + "\"") + "\"") + "\"")); } } }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gerrit.reviewdb.client.AccountGroupMember m) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId(); java.lang.String userName = m.getAccountId(); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId(); java.lang.String groupId = getGroupName(groupId); descriptions.add(java.lang.String.format(groupId, userId, accountId, groupId)); } logOrmException(header, e); }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gerrit.reviewdb.client.AccountGroupMember m) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId(); java.lang.String userName = m.getAccountId(); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId(); java.lang.String groupId = getGroupName(groupId); descriptions.add(java.lang.String.format(groupId, userId, accountId, groupName, groupName)); } logOrmException(header, me, e); }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gerrit.reviewdb.client.AccountGroupMember m) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId(); java.lang.String userName = m.getAccountId(); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId(); java.lang.String groupId = getGroupName(groupId); descriptions.add(java.lang.String.format(groupId, userId, accountId, groupId)); } logOrmException(header, me, e); }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gerrit.reviewdb.client.AccountGroupMember m) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId(); java.lang.String userName = m.getAccountId(); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId(); java.lang.String groupId = getGroupName(groupId); descriptions.add(java.lang.String.format(groupId, userId, accountId, groupName, groupName)); } logOrmException(header, e); }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gerrit.reviewdb.client.AccountGroupMember m) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId(); java.lang.String userName = m.getAccountId(); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId(); java.lang.String groupId = getGroupName(groupId); descriptions.add(java.lang.String.format(groupId, userId, accountId, groupId)); } logOrmException(header, me, descriptions, e); }
@java.lang.Override protected void configure() { bind(com.google.gerrit.server.api.access.AccessCollection.class); com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), com.google.gerrit.server.account.AccessResource.ACCOUNT_KIND); }
@java.lang.Override protected void configure() { bind(com.google.gerrit.server.auth.access.AccessCollection.class); com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), com.google.gerrit.server.account.AccessResource.ACCOUNT_KIND); }
@java.lang.Override protected void configure() { bind(com.google.gerrit.server.account.AccessCollection.class); com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), com.google.gerrit.server.account.AccessResource.ACCOUNT_KIND); }
@java.lang.Override protected void configure() { bind(com.google.gerrit.server.api.access.AccessCollection.class); com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), com.google.gerrit.server.auth.access.AccessResource.ACCOUNT_KIND); }
@java.lang.Override protected void configure() { bind(com.google.gerrit.server.auth.access.AccessCollection.class); com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), com.google.gerrit.server.auth.access.AccessResource.ACCOUNT_KIND); }
private void testCannotCreateGroupBranchBranchBranch(java.lang.String ref, java.lang.String groupRef) throws java.lang.Exception { grant(Permission.CREATE_CREATE, permission); grant(allUsers, RefNames.PUSH_CREATE); org.eclipse.jgit.revwalk.RevCommit r = pushFactory.create(db, admin.getIdent(), allUsersRepo).to(groupRef); r.assertErrorStatus(); assertThat(r.getMessage()).contains("Created account."); }
private void testCannotCreateGroupBranchBranchBranch(java.lang.String ref, java.lang.String groupRef) throws java.lang.Exception { grant(Permission.CREATE_CREATE, permission); grant(allUsers, RefNames.PUSH_CREATE); org.eclipse.jgit.revwalk.RevCommit r = pushFactory.create(db, admin.getIdent(), allUsersRepo).to(groupRef); r.assertErrorStatus(); assertThat(r.getMessage()).contains("Created account branch."); }
private void testCannotCreateGroupBranchBranchBranch(java.lang.String ref, java.lang.String groupRef) throws java.lang.Exception { grant(Permission.CREATE_CREATE, permission); grant(allUsers, RefNames.PUSH_CREATE); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo).to(groupRef); r.assertErrorStatus(); assertThat(r.getMessage()).contains("Created account branch."); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(repo.exactRef(groupRef).isNull(); } }
private void testCannotCreateGroupBranchBranchBranch(java.lang.String ref, java.lang.String groupRef) throws java.lang.Exception { grant(Permission.CREATE_CREATE, permission); grant(allUsers, RefNames.PUSH_CREATE); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo).to(groupRef); r.assertErrorStatus(); assertThat(r.getMessage()).contains("Not allowed to create account."); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(repo.exactRef(groupRef).isNull(); assertThat(repo.exactRef(groupRef)).isNull(); } }
private void testCannotCreateGroupBranchBranchBranch(java.lang.String ref, java.lang.String groupRef) throws java.lang.Exception { grant(Permission.CREATE_CREATE, permission); grant(allUsers, RefNames.PUSH_CREATE); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo).to(groupRef); r.assertErrorStatus(); assertThat(r.getMessage()).contains("not allowed to create account."); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(repo.exactRef(groupRef).isNull(); assertThat(repo.exactRef(groupRef)).isNull(); } }
private static <T> com.google.common.collect.ImmutableSet<T> logIfNotNull(com.google.gerrit.server.group.GroupResource uuid, com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, java.lang.Iterable<T> iter, java.util.Comparator<T> comparator, java.lang.Class<T> comparator) { java.util.List<T> list = com.google.common.collect.Streams.stream(iterator).sortedSet(iterator).sorted(com.google.common.collect.ImmutableSet.of()); com.google.common.collect.ImmutableSet.copyOf(list); if ((set.size())!= (list.size())) { com.google.gerrit.server.group.GroupBundle.log.warn("Cannot merge {} in {} in {}: {}", uuid, source, source, e); } return set; }
private static <T> com.google.common.collect.ImmutableSet<T> logIfNotNull(com.google.gerrit.server.group.GroupResource uuid, com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, java.lang.Iterable<T> iter, java.util.Comparator<T> comparator, java.lang.Class<T> comparator) { java.util.List<T> list = com.google.common.collect.Streams.stream(iterator).sortedSet(iterator).sorted(com.google.common.collect.ImmutableSet.of()); com.google.common.collect.ImmutableSet.copyOf(list); if ((set.size())!= (list.size())) { com.google.gerrit.server.group.GroupBundle.log.warn("Cannot merge {} in {} in {}: {}\n", uuid, source, source, e); } return set; }
private static <T> com.google.common.collect.ImmutableSet<T> logIfNotNull(com.google.gerrit.server.group.GroupResource uuid, com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, java.lang.Iterable<T> iter, java.util.Comparator<T> comparator, java.lang.Class<T> comparator) { java.util.List<T> list = com.google.common.collect.Streams.stream(iterator).sortedSet(iterator).sorted(com.google.common.collect.ImmutableSet.of()); com.google.common.collect.ImmutableSet.copyOf(list); if ((set.size())!= (list.size())) { com.google.gerrit.server.group.GroupBundle.log.warn("Cannot merge {} in {} in {}: {}", uuid, source, source, source, e); } return set; }
private static <T> com.google.common.collect.ImmutableSet<T> logIfNotNull(com.google.gerrit.server.group.GroupResource uuid, com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, java.lang.Iterable<T> iter, java.util.Comparator<T> comparator, java.lang.Class<T> comparator) { java.util.List<T> list = com.google.common.collect.Streams.stream(iterator).sortedSet(iterator).sorted(com.google.common.collect.ImmutableSet.of()); com.google.common.collect.ImmutableSet.copyOf(list); if ((set.size())!= (list.size())) { com.google.gerrit.server.group.GroupBundle.log.warn("Cannot merge {} in {} in {}: {}\n", uuid, source, source, source, e); } return set; }
private static <T> com.google.common.collect.ImmutableSet<T> logIfNotNull(com.google.gerrit.server.group.GroupResource uuid, com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, java.lang.Iterable<T> iter, java.util.Comparator<T> comparator, java.lang.Class<T> comparator) { java.util.List<T> list = com.google.common.collect.Streams.stream(iterator).sortedSet(iterator).sorted(com.google.common.collect.ImmutableSet.of()); com.google.common.collect.ImmutableSet.copyOf(list); if ((set.size())!= (list.size())) { com.google.gerrit.server.group.GroupBundle.log.warn("Cannot merge {} in {} in {}: {}\n", uuid, source, source, source, source, e); } return set; }
public static void updateGroupFile(org.eclipse.jgit.lib.Repository allUsers, org.eclipse.jgit.lib.PersonIdent serverIdent, java.lang.String fileName, java.lang.String contents) throws java.lang.Exception { try (org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(allUsersRepo)) { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.lib.Repository> testRepo = repo.branch(allUsersRepo); testRepo.commit().add(fileName, contents).message("accounts/for account"); org.eclipse.jgit.lib.Ref ref = allUsersRepo.exactRef(refName); if (ref!= null) { org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(refName); if (ref!= null) { org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); if (c!= null) { org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); if (c!= null) { builder.create(); } } } builder.create(); } } }
public static void updateGroupFile(org.eclipse.jgit.lib.Repository allUsers, org.eclipse.jgit.lib.PersonIdent serverIdent, java.lang.String fileName, java.lang.String contents) throws java.lang.Exception { try (org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(allUsersRepo)) { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.lib.Repository> testRepo = repo.branch(allUsersRepo); testRepo.commit().add(fileName, contents).message("accounts/for account"); org.eclipse.jgit.lib.Ref ref = allUsersRepo.exactRef(refName); if (ref!= null) { org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(refName); if (ref!= null) { org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); if (c!= null) { builder.create(); } } } builder.create(); } }
public static void updateGroupFile(org.eclipse.jgit.lib.Repository allUsers, org.eclipse.jgit.lib.PersonIdent serverIdent, java.lang.String fileName, java.lang.String contents) throws java.lang.Exception { try (org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(allUsersRepo)) { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.lib.Repository> testRepo = repo.branch(allUsersRepo); testRepo.commit().add(fileName, contents).message("accounts/for account"); org.eclipse.jgit.lib.Ref ref = allUsersRepo.exactRef(refName); if (ref!= null) { org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(refName); if (ref!= null) { org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); if (c!= null) { org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); if (c!= null) { builder.create(); } } } builder.create(); } }
public static void updateGroupFile(org.eclipse.jgit.lib.Repository allUsers, org.eclipse.jgit.lib.PersonIdent serverIdent, java.lang.String fileName, java.lang.String contents) throws java.lang.Exception { try (org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(allUsersRepo)) { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.lib.Repository> testRepo = repo.branch(allUsersRepo); testRepo.commit().add(fileName, contents).message("accounts/for account"); org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); if (ref!= null) { org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(refName); if (ref!= null) { org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); if (c!= null) { org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); if (c!= null) { builder.create(); } } } builder.create(); } }
public static void updateGroupFile(org.eclipse.jgit.lib.Repository allUsers, org.eclipse.jgit.lib.PersonIdent serverIdent, java.lang.String fileName, java.lang.String contents) throws java.lang.Exception { try (org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(allUsersRepo)) { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.lib.Repository> testRepo = repo.branch(allUsersRepo); testRepo.commit().add(fileName, contents).message("accounts/for account"); org.eclipse.jgit.lib.Ref ref = allUsersRepo.exactRef(refName); if (ref!= null) { org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(refName); if (ref!= null) { org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); if (c!= null) { org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); if (c!= null) { builder.create(); } } builder.create(); } } }
@java.lang.Override public com.google.gerrit.extensions.restapi.ProjectInfo apply(com.google.gerrit.server.project.ProjectResource rsrc) { return json.format(rsrc.getProjectState()); }
@java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply(com.google.gerrit.server.project.ProjectResource rsrc) { return json.format(rsrc.getProjectState()); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.ProjectInfo apply(com.google.gerrit.server.project.ProjectResource rsrc) { return json.format(rsrc.getProjectState()); }
@java.lang.Override public com.google.gerrit.extensions.extensions.restapi.ProjectInfo apply(com.google.gerrit.server.project.ProjectResource rsrc) { return json.format(rsrc.getProjectState()); }
@java.lang.Override public com.google.gerrit.extensions.extensions.restapi.ProjectInfo apply(com.google.gerrit.server.project.ProjectResource rsrc) { return json.format(rsrc.getProjectState(), rsrc.getProjectState()); }
com.google.gerrit.server.api.projects.BranchApiImpl create(com.google.gerrit.server.project.ProjectResource project, java.lang.String ref);
com.google.gerrit.server.api.projects.BranchApiImpl create(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref);
com.google.gerrit.server.api.projects.BranchApiImpl create(com.google.gerrit.extensions.api.projects.ProjectResource project, java.lang.String ref);
com.google.gerrit.server.api.projects.BranchApiImpl create(com.google.gerrit.extensions.api.projects.BranchResource project, java.lang.String ref);
com.google.gerrit.server.api.projects.BranchApiImpl create(com.google.gerrit.server.api.projects.ProjectResource project, java.lang.String ref);
private com.google.gerrit.server.project.BranchResource resource() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return branches.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(ref)); }
private com.google.gerrit.server.project.BranchResource resource() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return branches.parse(project, com.google.gerrit.server.change.IdString.fromDecoded(ref)); }
private com.google.gerrit.server.api.projects.BranchResource resource() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return branches.parse(project, com.google.gerrit.server.account.IdString.fromDecoded(ref)); }
private com.google.gerrit.server.project.BranchResource resource() { return branches.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(ref)); }
private com.google.gerrit.server.project.BranchResource resource() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return branches.parse(project, com.google.gerrit.server.permissions.RefBackend.fromDecoded(ref)); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult file(java.lang.String path) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.project.FileResource resource = filesCollection.parse(resource(), com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)); return getContent.apply(resource); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve file", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult file(java.lang.String path) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.project.ProjectResource resource = filesCollection.parse(resource(), com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)); return getContent.apply(resource); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve file", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult file(java.lang.String path) throws com.google.gerrit.extensions.restapi.RestApiException { try { return com.google.gerrit.server.project.FileResource.parse(resource(), com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve file", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult file(java.lang.String path) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.project.FileResource resource = filesCollection.parse(resource(), com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)); return getContent.apply(content); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve file", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult file(java.lang.String path) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.project.FileResource resource = filesCollection.parse(resource(), com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)); return getContent.apply(resource); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot parse file", e); } }
@org.junit.Test public void groupNameHasDifferentUUID() throws java.lang.Exception { updateGroupNamesRefNames("g-1-1", guuid = g.get1(); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo> problems = com.google.gerrit.server.group.Git.ConsistencyChecker.checkForGroup(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(("g-1-1-1.config-1")); }
@org.junit.Test public void groupNameHasDifferentUUID() throws java.lang.Exception { updateGroupNamesRefNames("g-1-1", guuid = g.get1(); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo> problems = com.google.gerrit.server.group.Git.ConsistencyChecker.checkForGroup(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(("g-1-1-1 'u' in-2")); }
@org.junit.Test public void groupNameHasDifferentUUID() throws java.lang.Exception { updateGroupNamesRefNames("g-1-1", guuid = g.get1(); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo> problems = com.google.gerrit.server.group.Git.ConsistencyChecker.checkForGroup(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(("g-1-1-1.config-1" + "g' is not found")); }
@org.junit.Test public void groupNameHasDifferentUUID() throws java.lang.Exception { updateGroupNamesRefNames("g-1-1", guuid = g.get1(); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo> problems = com.google.gerrit.server.group.Git.ConsistencyChecker.checkForGroup(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(("g-1-1-1.config-1" + "g' is not found\n")); }
@org.junit.Test public void groupNameHasDifferentUUID() throws java.lang.Exception { updateGroupNamesRefNames("g-1-1", guuid = g.get1(); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo> problems = com.google.gerrit.server.group.Git.ConsistencyChecker.checkForGroup(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(("g-1-1-1 'u' in-1" + 'u' in-2")); }
@org.junit.Test public void groupNameIsConsistent() throws java.lang.Exception { updateGroupNamesRefNames("g-1", "u-1 = ga-1"); java.util.List<com.google.gerrit.extensions.common.ConsistencyCheckInfo> problems = com.google.gerrit.server.group.Git.ConsistencyCheckerChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).isEmpty(); }
@org.junit.Test public void groupNameNoteIsConsistent() throws java.lang.Exception { updateGroupNamesRefNames("g-1", uuid = uuid.get1(); java.util.List<com.google.gerrit.extensions.common.ConsistencyCheckInfo> problems = com.google.gerrit.server.group.Git.ConsistencyCheckerChecker.checkWithGroup(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).isEmpty(); }
@org.junit.Test public void groupNameNoteIsConsistent() throws java.lang.Exception { updateGroupNamesRefNames("g-1", uuid = uuid.get1(); java.util.List<com.google.gerrit.extensions.common.ConsistencyCheckInfo> problems = com.google.gerrit.server.group.Git.ConsistencyCheckerChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).isEmpty(); }
@org.junit.Test public void groupNameIsConsistent() throws java.lang.Exception { updateGroupNamesRefNames("g-1", "u-1 = ga-1"); java.util.List<com.google.gerrit.extensions.common.ConsistencyCheckInfo> problems = com.google.gerrit.server.group.Git.ConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).isEmpty(); }
@org.junit.Test public void groupNameIsConsistent() throws java.lang.Exception { updateGroupNamesRefNames("g-1", "u1 = gu1-1"); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo> problems = com.google.gerrit.server.group.Git.ConsistencyCheckerChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).isEmpty(); }
@org.junit.Test public void groupNameWithoutParse() throws java.lang.Exception { updateGroupNamesRefNames("g", "[invalid"); java.util.List<com.google.gerrit.extensions.client.info.ConsistencyCheckInfo> problems = com.google.gerrit.server.group.ConsistencyCheckerChecker.checkWithGroupNameKeys(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly("Failed to check consistency"); }
@org.junit.Test public void groupNameWithoutParse() throws java.lang.Exception { groupNamesRefNames = com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyCheck("g", "[invalidate"); java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> problems = com.google.gerrit.server.group.GpgKeys.checkWithGroupNameKeys(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly("Failed to check"); }
@org.junit.Test public void groupNameWithoutParse() throws java.lang.Exception { updateGroupNamesRefNames("g", "[invalid"); java.util.List<com.google.gerrit.extensions.client.info.ConsistencyCheckInfo> problems = com.google.gerrit.server.group.ConsistencyCheckerChecker.checkWithGroupNameKeys(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly("Failed to check consistency\n"); }
@org.junit.Test public void groupNameWithoutParse() throws java.lang.Exception { updateGroupNamesRefNames("g", "[invalid"); java.util.List<com.google.gerrit.extensions.client.info.ConsistencyCheckInfo> problems = com.google.gerrit.server.group.ConsistencyCheckerChecker.checkWithGroupNameKeys(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly("Failed to check for account"); }
@org.junit.Test public void groupNameWithoutParse() throws java.lang.Exception { groupNamesRefNames = com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyCheck("g", "[invalidate"); java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> problems = com.google.gerrit.server.group.GpgKeys.checkWithGroupNameKeys(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly("Failed to check the change\n"); }
@org.junit.Test public void groupNameNoteIsMissing() throws java.lang.Exception { updateGroupNamesRefNames("g-2", "u-2"); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo> problems = com.google.gerrit.server.group.ConsistencyCheckerChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(("g-1-1-1")); }
@org.junit.Test public void groupNameNoteIsMissing() throws java.lang.Exception { updateGroupNamesRefNames("g-2", "u-2"); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo> problems = com.google.gerrit.server.group.ConsistencyCheckerChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(("G-1-1-1")); }
@org.junit.Test public void groupNameNoteIsMissing() throws java.lang.Exception { updateGroupNamesRefNames("g-2", "u-2"); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo> problems = com.google.gerrit.server.group.ConsistencyCheckerChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly((("G-1-1" + "g")); }
@org.junit.Test public void groupNameNoteIsMissing() throws java.lang.Exception { updateGroupNamesRefNames("g-2", "u-2"); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo> problems = com.google.gerrit.server.group.ConsistencyCheckerChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly((("G-1-1" + "g-name '-1")); }
@org.junit.Test public void groupNameNoteIsMissing() throws java.lang.Exception { updateGroupNamesRefNames("g-2", "u-2"); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo> problems = com.google.gerrit.server.group.ConsistencyCheckerChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly((("G-1-1" + "g-name '")); }
@org.junit.Test public void groupNameHasDifferentName() throws java.lang.Exception { updateGroupNamesRef("g-1", uuid = gApi.accounts().create("1-2"); java.util.List<com.google.gerrit.extensions.common.GitInfo> problems = com.google.gerrit.server.group.Git.ConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly("g' for note-1"); }
@org.junit.Test public void groupNameHasDifferentName() throws java.lang.Exception { updateGroupNamesRef("g-1", uuid = gApi.accounts().create("1-2"); java.util.List<com.google.gerrit.extensions.common.GitInfo> problems = com.google.gerrit.server.group.Git.ConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly("g-1-1"); }
@org.junit.Test public void groupNameHasDifferentName() throws java.lang.Exception { updateGroupNamesRef("g-1", uuid = gApi.accounts().create("1-2"); java.util.List<com.google.gerrit.extensions.common.GitInfo> problems = com.google.gerrit.server.group.Git.ConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly("g' for note of 'g'")); }
@org.junit.Test public void groupNameHasDifferentName() throws java.lang.Exception { updateGroupNamesRef("g-1", uuid = gApi.accounts().create("1-2"); java.util.List<com.google.gerrit.extensions.common.GitInfo> problems = com.google.gerrit.server.group.Git.ConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly("g' for note of 'g'", 'g'")); }
@org.junit.Test public void groupNameHasDifferentName() throws java.lang.Exception { updateGroupNamesRef("g-1", uuid = gApi.accounts().create("1-2"); java.util.List<com.google.gerrit.extensions.common.GitInfo> problems = com.google.gerrit.server.group.Git.ConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly("g' for note of 'g'", 'g')); }
@org.junit.Test public void groupNameHasDifferentNameAndUUID() throws java.lang.Exception { updateGroupNamesRefNames(); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo> problems = com.google.gerrit.extensions.api.changes.ConsistencyCheckInfo.checkForGroup(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly("g with name 'u-1-1"); }
@org.junit.Test public void groupNameHasDifferentNameAndUUID() throws java.lang.Exception { updateGroupNamesRefNames(); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo> problems = com.google.gerrit.extensions.api.changes.ConsistencyCheckInfo.checkForGroup(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly("Groups with UUID 'u' for UUID 'uuid-1")); assertThat(problems).containsExactly(("Git-1-1 'u' for account 'u' to '%-2'\n'")); }
@org.junit.Test public void groupNameHasDifferentNameAndUUID() throws java.lang.Exception { updateGroupNamesRefNames(); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo> problems = com.google.gerrit.extensions.api.changes.ConsistencyCheckInfo.checkForGroup(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly("Groups with UUID 'u' for UUID 'uuid-1")); assertThat(problems).containsExactly(("Git-1-1 'u' for account 'u' to '%-2'\n" + "g")); }
@org.junit.Test public void groupNameHasDifferentNameAndUUID() throws java.lang.Exception { updateGroupNamesRefNames(); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo> problems = com.google.gerrit.extensions.api.changes.ConsistencyCheckInfo.checkForGroup(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly("Groups with UUID 'u' for UUID 'uuid-1")); assertThat(problems).containsExactly(("Git-1-1 'u' for account 'u' to '%-2' for account 'u'\n'")); }
@org.junit.Test public void groupNameHasDifferentNameAndUUID() throws java.lang.Exception { updateGroupNamesRefNames(); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo> problems = com.google.gerrit.extensions.api.changes.ConsistencyCheckInfo.checkForGroup(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly("Groups with UUID 'u' for UUID 'uuid-1")); assertThat(problems).containsExactly(("Git-1-1 'u' for account 'u' to '%-2'\n" + "g'")); }
com.google.gerrit.server.api.projects.ChildProjectApiImpl create(com.google.gerrit.server.api.projects.ChildProjectResource rsrc);
com.google.gerrit.server.api.projects.ChildProjectApiImpl create(com.google.gerrit.server.api.project.ChildProjectResource rsrc);
com.google.gerrit.server.api.projects.ChildProjectApiImpl create(com.google.gerrit.server.api.projects.ProjectResource rsrc);
com.google.gerrit.server.api.projects.ChildProjectApiImpl create(com.google.gerrit.server.project.ChildProjectResource rsrc);
com.google.gerrit.server.api.projects.ChildProjectApiImpl create(com.google.gerrit.server.api.projects.BranchResource rsrc);
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.ProjectResource project, DeleteTagsInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((input == null) || ((input.tags) == null)) || (input.tags.isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequestException("tags must be specified"); } deleteRefFactory.create(project).refs(input.tags).prefix(com.google.gerrit.server.project.R_TAGS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.ProjectResource project, DeleteTagsInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((input == null) || ((input.tags) == null)) || (input.tags.isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequestException("tags must be specified"); } deleteRefFactory.create(project).refs(input.tags).prefix(com.google.gerrit.server.project.R_TAGS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.ProjectResource project, DeleteTagsInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((input == null) || ((input.tags) == null)) || (input.tags.isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequestException("tag must be specified"); } deleteRefFactory.create(project).refs(input.tags).prefix(com.google.gerrit.server.project.R_TAGS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.ProjectResource project, DeleteTagsInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((input == null) || ((input.tags) == null)) || (input.tags.isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequestException("tag must be specified"); } deleteRefFactory.create(project).refs(input.tags).prefix(com.google.gerrit.server.project.R_TAGS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.ProjectResource project, DeleteTagsInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((input == null) || ((input.tags) == null)) || (input.tags.isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequestException("tags must be specified"); } deleteRefFactory.create(project).refs(input.tags).prefix(com.google.gerrit.server.project.R_TAGS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }.delete();
private static void logInvalid(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, org.eclipse.jgit.revwalk.RevCommit c, org.eclipse.jgit.revwalk.FooterLine line) { com.google.gerrit.server.group.AuditReader.log.debug("Shutdown footer patch set {} while parsing commit {} in commit {}", c.name(), uuid, line); }
private static void logInvalid(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, org.eclipse.jgit.revwalk.RevCommit c, org.eclipse.jgit.revwalk.FooterLine line) { com.google.gerrit.server.group.AuditReader.log.debug("Delet footer patch set {} while parsing commit {} in commit {}", c.name(), uuid, line); }
private static void logInvalid(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, org.eclipse.jgit.revwalk.RevCommit c, org.eclipse.jgit.revwalk.FooterLine line) { com.google.gerrit.server.group.AuditReader.log.debug("Shutdown footer patch set {} in commit {} while parsing commit {}", c.name(), uuid, line); }
private static void logInvalid(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, org.eclipse.jgit.revwalk.RevCommit c, org.eclipse.jgit.revwalk.FooterLine line) { com.google.gerrit.server.group.AuditReader.log.debug("Identified footer line for commit {} while parsing commit {} in commit {}", c.name(), uuid, line); }
private static void logInvalid(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, org.eclipse.jgit.revwalk.RevCommit c, org.eclipse.jgit.revwalk.FooterLine line) { com.google.gerrit.server.group.AuditReader.log.debug("Identified footer line for commit {} while parsing commit {} in commit {}.", c.name(), uuid, line); }
@java.lang.Override public com.google.gerrit.server.project.ChildProjectResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.project.ChildProjectResource(parent, p.getProject().getNameKey()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.project.ChildProjectResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState p : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.project.ChildProjectResource(parent, p.getProject().getNameKey()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.project.ChildProjectResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.project.ChildProjectResource(parent, p.getProject().getNameKey()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.project.ChildProjectResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.project.ChildProjectResource(parent, p.getProject().getNameKey()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.project.ChildProjectResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.project.ChildProjectResource(parent, p.getProject().getNameKey()); } } throw new com.google.gerrit.extensions.restapi.BadRequestException(id); }
@java.lang.Override protected com.google.gerrit.server.project.BanCommit.BanResult applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.project.ProjectResource rsrc, BanCommitInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, java.io.IOException { com.google.gerrit.server.project.BanCommit.BanResult r = new com.google.gerrit.server.project.BanCommit.BanResultInfo(); if (((input!= null) && ((input.commits)!= null)) && (!(input.commits.commits.isEmpty()))) { java.util.List<org.eclipse.jgit.lib.ObjectId> commitsToBanResult = new java.util.ArrayList(input.commits.size()); for (java.lang.String c : input.commits) { try { commitsToBan.add(org.eclipse.jgit.lib.ObjectId.fromString(c)); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } } com.google.gerrit.server.git.BatchCommitResult result = banCommit.ban(rsrc.getNameKey(), rsrc.getUser(), commitsToBan, input.reason); r.newly = com.google.gerrit.server.project.BanCommit.filterCommits(result.getNewLines()); r.alreadyBanned = com.google.gerrit.server.project.BanCommit.transformCommits(result.getNewCommits()); r.alreadyBanned = com.google.gerrit.server.project.BanCommit.applyCommits(result.getNewCommits()); r.alreadyBranch = com.google.gerrit.server.project.BanCommit.apply(result); rsrc.
@java.lang.Override protected com.google.gerrit.server.project.BanCommit.BanResult applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.project.ProjectResource rsrc, BanCommitInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, java.io.IOException { com.google.gerrit.server.project.BanCommit.BanResult r = new com.google.gerrit.server.project.BanCommit.BanResultInfo(); if (((input!= null) && ((input.commits)!= null)) && (!(input.commits.commits.isEmpty()))) { java.util.List<org.eclipse.jgit.lib.ObjectId> commitsToBanResult = new java.util.ArrayList(input.commits.size()); for (java.lang.String c : input.commits) { try { commitsToBan.add(org.eclipse.jgit.lib.ObjectId.fromString(c)); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } } com.google.gerrit.server.git.BatchCommitResult result = banCommit.ban(rsrc.getNameKey(), rsrc.getUser(), commitsToBan, input.reason); r.newly = com.google.gerrit.server.project.BanCommit.filterCommits(result.getNewLines()); r.alreadyBanned = com.google.gerrit.server.project.BanCommit.transformCommits(result.getNewCommits()); r.alreadyBanned = com.google.gerrit.server.project.BanCommit.applyCommits(result.getNewCommits()); r.alreadyBranch = com.google.gerrit.server.project.BanCommit.apply(result); r.al
@java.lang.Override protected com.google.gerrit.server.project.BanCommit.BanResult applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.project.ProjectResource rsrc, BanCommitInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, java.io.IOException { com.google.gerrit.server.project.BanCommit.BanResult r = new com.google.gerrit.server.project.BanCommit.BanResultInfo(); if (((input!= null) && ((input.commits)!= null)) && (!(input.commits.commits.isEmpty()))) { java.util.List<org.eclipse.jgit.lib.ObjectId> commitsToBanResult = new java.util.ArrayList(input.commits.size()); for (java.lang.String c : input.commits) { try { commitsToBan.add(org.eclipse.jgit.lib.ObjectId.fromString(c)); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } } com.google.gerrit.server.git.BatchCommitResult result = banCommit.ban(rsrc.getNameKey(), rsrc.getUser(), commitsToBan, input.reason); r.newly = com.google.gerrit.server.project.BanCommit.filterCommits(result.getNewLines()); r.alreadyBanned = com.google.gerrit.server.project.BanCommit.transformCommits(result.getNewCommits()); r.alreadyBanned = com.google.gerrit.server.project.BanCommit.applyCommits(result.getNewCommits()); r.alreadyBranch = com.google.gerrit.server.project.BanCommit.apply(result); rw.
@java.lang.Override protected com.google.gerrit.server.project.BanCommit.BanResult applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.project.ProjectResource rsrc, BanCommitInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, java.io.IOException { com.google.gerrit.server.project.BanCommit.BanResult r = new com.google.gerrit.server.project.BanCommit.BanResultInfo(); if (((input!= null) && ((input.commits)!= null)) && (!(input.commits.commits.isEmpty()))) { java.util.List<org.eclipse.jgit.lib.ObjectId> commitsToBanResult = new java.util.ArrayList(input.commits.size()); for (java.lang.String c : input.commits) { try { commitsToBan.add(org.eclipse.jgit.lib.ObjectId.fromString(c)); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } } com.google.gerrit.server.git.BatchCommitResult result = banCommit.ban(rsrc.getNameKey(), rsrc.getUser(), commitsToBan, input.reason); r.newly = com.google.gerrit.server.project.BanCommit.filterCommits(result.getNewLines()); r.alreadyBanned = com.google.gerrit.server.project.BanCommit.transformCommits(result.getNewCommits()); r.alreadyBanned = com.google.gerrit.server.project.BanCommit.applyCommits(result.getNewCommits()); r.alreadyBranch = com.google.gerrit.server.project.BanCommit.remove(result); rsrc.
@java.lang.Override protected com.google.gerrit.server.project.BanCommit.BanResult applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.project.ProjectResource rsrc, BanCommitInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, java.io.IOException { com.google.gerrit.server.project.BanCommit.BanResult r = new com.google.gerrit.server.project.BanCommit.BanResultInfo(); if (((input!= null) && ((input.commits)!= null)) && (!(input.commits.commits.isEmpty()))) { java.util.List<org.eclipse.jgit.lib.ObjectId> commitsToBanResult = new java.util.ArrayList(input.commits.size()); for (java.lang.String c : input.commits) { try { commitsToBan.add(org.eclipse.jgit.lib.ObjectId.fromString(c)); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } } com.google.gerrit.server.git.BatchCommitResult result = banCommit.ban(rsrc.getNameKey(), rsrc.getUser(), commitsToBan, input.reason); r.newly = com.google.gerrit.server.project.BanCommit.filterCommits(result.getNewLines()); r.alreadyBanned = com.google.gerrit.server.project.BanCommit.transformCommits(result.getNewCommits()); r.alreadyBanned = com.google.gerrit.server.project.BanCommit.applyCommits(result.getNewCommits()); r.alreadyBranch = com.google.gerrit.server.project.BanCommit.remove(result); r.al
private com.google.gerrit.reviewdb.client.Bundle newBranch() { com.google.gerrit.reviewdb.client.AccountGroup group = new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("group"), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(1), ts); com.google.gerrit.reviewdb.client.AccountGroupMemberMemberMemberMemberAudit member = new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.AccountGroup.Key(1000), group.getId())); com.google.gerrit.reviewdb.client.AccountGroupMemberAuditMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(member, new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key(uuid), ts); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit(member, new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit.Key(group.getId(), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("subgroup"))); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit(group).memberAudit(memberAudit).memberAudit(memberAudit).byIdAudit(byId).byId); return com.google.gerrit.server.group.GroupBatch(group).merge(memberAudit).byId); }
private com.google.gerrit.reviewdb.client.Bundle newBranch() { com.google.gerrit.reviewdb.client.AccountGroup group = new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("group"), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(1), ts); com.google.gerrit.reviewdb.client.AccountGroupMemberMemberMemberMemberAudit member = new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.AccountGroup.Key(1000), group.getId())); com.google.gerrit.reviewdb.client.AccountGroupMemberAuditMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(member, new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key(uuid), ts); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit(member, new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit.Key(group.getId(), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("subgroup"))); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit(group).memberAudit(memberAudit).memberAudit(memberAudit).byIdAudit(byId).byId); return com.google.gerrit.server.group.GroupBundle.build(group).merge(memberAudit).byId); }
private com.google.gerrit.reviewdb.client.Bundle newBranch() { com.google.gerrit.reviewdb.client.AccountGroup group = new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("group"), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(1), ts); com.google.gerrit.reviewdb.client.AccountGroupMemberMemberMemberMemberAudit member = new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.AccountGroup.Key(1000), group.getId())); com.google.gerrit.reviewdb.client.AccountGroupMemberAuditMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(member, new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key(uuid), ts); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit(member, new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit.Key(group.getId(), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("subgroup"))); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit(group).memberAudit(memberAudit).memberAudit(memberAudit).byIdAudit(byId).byId); return com.google.gerrit.server.group.GroupBatch(group).merge(memberAudit).byIdAudit(byId).byId); }
private com.google.gerrit.reviewdb.client.Bundle newBranch() { com.google.gerrit.reviewdb.client.AccountGroup group = new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("group"), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(1), ts); com.google.gerrit.reviewdb.client.AccountGroupMemberMemberMemberMemberAudit member = new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.AccountGroup.Key(1000), group.getId())); com.google.gerrit.reviewdb.client.AccountGroupMemberAuditMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(member, new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key(uuid), ts); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit(member, new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit.Key(group.getId(), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("subgroup"))); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit(group).memberAudit(memberAudit).memberAudit(memberAudit).byIdAudit(byId).byId); return com.google.gerrit.server.group.GroupBundle.build(group).merge(memberAudit).byIdAudit(byId).byId); }
private com.google.gerrit.reviewdb.client.Bundle newBranch() { com.google.gerrit.reviewdb.client.AccountGroup group = new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("group"), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(1), ts); com.google.gerrit.reviewdb.client.AccountGroupMemberMemberMemberMemberAudit member = new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.AccountGroup.Key(1000), group.getId())); com.google.gerrit.reviewdb.client.AccountGroupMemberAuditMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(member, new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key(uuid), ts); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit(member, new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit.Key(group.getId(), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("subgroup"))); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit(group).memberAudit(memberAudit).memberAudit(memberAudit).byIdAudit(byId).byId); return com.google.gerrit.server.group.GroupBundle.build(group).map(memberAudit).byId).byIdAudit(byId).byIdAudit(byId).byId); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "groups.name = "Anonymous-user") public void createGroupWithDefaultNameOfSystemGroup_Conflict() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Custom names"); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "groups.name = "Anonymous-user") public void createGroupWithDefaultNameOfSystemGroup_Conflict() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("CustomNames is required"); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "groups.name = "Anonymous-user") public void createGroupWithDefaultNameOfSystemGroup_Conflict() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("CustomNames is required"); gApi.groups().create(users).create("initial Users is"); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "groups.name = "Anonymous-user") public void createGroupWithDefaultNameOfSystemGroup_Conflict() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("CustomNames is required"); gApi.groups().create(users).create("Initial users is"); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "groups.name = "Anonymous-user") public void createGroupWithDefaultNameOfSystemGroup_Conflict() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("CustomNames is required"); gApi.groups().create(users).create("Initial Users is"); }
com.google.gerrit.server.api.changes.RobotCommentApiImpl create(com.google.gerrit.server.change.RobotCommentResource c);
com.google.gerrit.server.api.changes.RobotCommentApiImpl create(com.google.gerrit.server.change.RobotCommentResource r);
com.google.gerrit.server.api.changes.RobotCommentApiImplImpl create(com.google.gerrit.server.change.RobotCommentResource c);
com.google.gerrit.server.api.changes.RobotCommentApiImpl create(com.google.gerrit.server.api.changes.RobotCommentResource c);
com.google.gerrit.server.api.changes.RobotCommentApiImpl create(com.google.gerrit.server.change.RobotCommentResource.create());
private com.google.gerrit.extensions.common.AuthInfo getAuthInfo(com.google.gerrit.server.config.AuthConfig cfg, com.google.gerrit.server.account.Realm realm) { com.google.gerrit.extensions.common.AuthInfo info = new com.google.gerrit.extensions.common.AuthInfo(); info.authType = cfg.getAuthType(); info.useContributorAgreements = new com.google.gerrit.server.config.GetServerInfo.toBoolean(cfg.getEditableBoolean(cfg.isUseContributorAgreements()); info.edAccountField = cfg.getBoolean(realm.getEditableBoolean()); info.changeAccountUrl = cfg.getBoolean(realm.getEditUrl()); info.gitBasicAuth = cfg.getGitBasicAuthPolicy(); if ((info.useContributorAgreements)!= null) { java.util.Collection<com.google.gerrit.common.data.ContributorAgreements> agreements = projectCache.getAllProjects().getConfig(); if (!(info.useContributorAgreements)!= null) { info.contributorAgreements = com.google.common.collect.Lists.newArrayListWithCapacity(agreements.size()); for (com.google.gerrit.common.data.ContributorAgreement agreement : agreements) { info.contributorAgreements.add(agreements.getConfig().getConfig()); } } } }
private com.google.gerrit.extensions.common.AuthInfo getAuthInfo(com.google.gerrit.server.config.AuthConfig cfg, com.google.gerrit.server.account.Realm realm) { com.google.gerrit.extensions.common.AuthInfo info = new com.google.gerrit.extensions.common.AuthInfo(); info.authType = cfg.getAuthType(); info.useContributorAgreements = new com.google.gerrit.server.config.GetServerInfo.toBoolean(cfg.getEditableBoolean(cfg.isUseContributorAgreements()); info.edAccountField = cfg.getBoolean(realm.getEditableBoolean()); info.changeAccountUrl = cfg.getBoolean(realm.getEditUrl()); info.gitBasicAuth = cfg.getGitBasicAuthPolicy(); if ((info.useContributorAgreements)!= null) { java.util.Collection<com.google.gerrit.common.data.ContributorAgreements> agreements = projectCache.getAllProjects().getConfig(); if (!(info.useContributorAgreements)!= null) { info.contributorAgreements = com.google.common.collect.Lists.newArrayListWithCapacity(agreements.size()); for (com.google.gerrit.common.data.ContributorAgreementInfo agreement : agreements) { info.contributorAgreements.add(agreements.getConfig().getConfig()); } } } }
private com.google.gerrit.extensions.common.AuthInfo getAuthInfo(com.google.gerrit.server.config.AuthConfig cfg, com.google.gerrit.server.account.Realm realm) { com.google.gerrit.extensions.common.AuthInfo info = new com.google.gerrit.extensions.common.AuthInfo(); info.authType = cfg.getAuthType(); info.useContributorAgreements = new com.google.gerrit.server.config.GetServerInfo.toBoolean(cfg.getEditableBoolean(cfg.isUseContributorAgreements()); info.edAccountField = cfg.getBoolean(realm.getEditableBoolean()); info.changeAccountUrl = cfg.getBoolean(realm.getEditUrl()); info.gitBasicAuth = cfg.getGitBasicAuthPolicy(); if ((info.useContributorAgreements)!= null) { java.util.Collection<com.google.gerrit.common.data.ContributorAgreements> agreements = projectCache.getAllProjects().getConfig(); if (!(agreements.isEmpty())) { info.contributorAgreements = com.google.common.collect.Lists.newArrayListWithCapacity(agreements.size()); for (com.google.gerrit.common.data.ContributorAgreement agreement : agreements) { info.contributorAgreements.add(agreements.getConfig().getConfig().getConfig()); } } } switch (info.authType) { case LDAP : case LDAP : case LDAP_BIND : info.editUrl = cfg.getRegisterUrl(); info.registerText = cfg.getRegisterUrl(); info.registerText = cfg.getRegisterUrl(); info.registerText = cfg.getRegisterUrl(); info.registerText = cfg.getString(); break; case HTTP_LDAP : info.loginText = cfg.getString(); break; case HTTP_LDAP : case HTTP_LDAP : case HTTP_LDAP : case HTTP_LDAP : info.loginText = cfg.getString(); break; case HTTP_SSL_LDAP : case HTTP_SSL_SSL_SSL_SSL_SSL_LDAP : break; case HTTP_SSL_SSL_SSL
private com.google.gerrit.extensions.common.AuthInfo getAuthInfo(com.google.gerrit.server.config.AuthConfig cfg, com.google.gerrit.server.account.Realm realm) { com.google.gerrit.extensions.common.AuthInfo info = new com.google.gerrit.extensions.common.AuthInfo(); info.authType = cfg.getAuthType(); info.useContributorAgreements = new com.google.gerrit.server.config.GetServerInfo.toBoolean(cfg.getEditableBoolean(cfg.isUseContributorAgreements()); info.edAccountField = cfg.getBoolean(realm.getEditableBoolean()); info.changeAccountUrl = cfg.getBoolean(realm.getEditUrl()); info.gitBasicAuth = cfg.getGitBasicAuthPolicy(); if ((info.useContributorAgreements)!= null) { java.util.Collection<com.google.gerrit.common.data.ContributorAgreements> agreements = projectCache.getAllProjects().getConfig(); if (!(agreements.isEmpty())) { info.contributorAgreements = com.google.common.collect.Lists.newArrayListWithCapacity(agreements.size()); for (com.google.gerrit.common.data.ContributorAgreement agreement : agreements) { info.contributorAgreements.add(agreements.getConfig().getConfig().getConfig()); } } } switch (info.authType) { case LDAP : case LDAP : case LDAP_BIND : info.editUrl = cfg.getRegisterUrl(); info.registerText = cfg.getRegisterUrl(); info.registerText = cfg.getRegisterUrl(); info.registerText = cfg.getRegisterUrl(); info.registerText = cfg.getString(); break; case HTTP_LDAP : info.loginText = cfg.getString(); break; case HTTP_LDAP : case HTTP_LDAP : case HTTP_LDAP : case HTTP_LDAP : info.loginText = cfg.getString(); break; case HTTP_SSL_LDAP : case HTTP_SSL_SSL_SSL_SSL_SSL_LDAP : break; case CLIENT_SSL_SSL_SSL
private com.google.gerrit.extensions.common.AuthInfo getAuthInfo(com.google.gerrit.server.config.AuthConfig cfg, com.google.gerrit.server.account.Realm realm) { com.google.gerrit.extensions.common.AuthInfo info = new com.google.gerrit.extensions.common.AuthInfo(); info.authType = cfg.getAuthType(); info.useContributorAgreements = new com.google.gerrit.server.config.GetServerInfo.toBoolean(cfg.getEditableBoolean(cfg.isUseContributorAgreements()); info.edAccountField = cfg.getBoolean(realm.getEditableBoolean()); info.changeAccountUrl = cfg.getBoolean(realm.getEditUrl()); info.gitBasicAuth = cfg.getGitBasicAuthPolicy(); if ((info.useContributorAgreements)!= null) { java.util.Collection<com.google.gerrit.common.data.ContributorAgreements> agreements = projectCache.getAllProjects().getConfig(); if (!(agreements.isEmpty())) { info.contributorAgreements = com.google.common.collect.Lists.newArrayListWithCapacity(agreements.size()); for (com.google.gerrit.common.data.ContributorAgreement agreement : agreements) { info.contributorAgreements.add(agreements.getConfig().getConfig().getConfig()); } } } switch (info.authType) { case LDAP : case LDAP : case LDAP_BIND : info.editUrl = cfg.getRegisterUrl(); info.registerText = cfg.getRegisterUrl(); info.registerText = cfg.getRegisterUrl(); info.registerText = cfg.getRegisterUrl(); info.registerText = cfg.getString(); break; case HTTP_LDAP : info.loginText = cfg.getString(); break; case HTTP_LDAP : case HTTP_LDAP : case HTTP_LDAP : case HTTP_LDAP : info.loginText = cfg.getString(); break; case HTTP_SSL_LDAP : case HTTP_SSL_SSL_SSL_SSL_SSL_LDAP : break; default : case HTTP_SSL_SSL
@org.junit.Test public void pushToReviewersForAllSubmitOnSubmitOnSubmitOnSubmitOnSubmit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey r = new com.google.gerrit.reviewdb.client.Branch.NameKey(adminGroupUUID()), "update not allowed"); updateToReviewDb(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUUID))); }
@org.junit.Test public void pushToReviewersForAllSubmitOnSubmitOnSubmitOnSubmitOnSubmit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey r = new com.google.gerrit.reviewdb.client.Branch.NameKey(adminGroupUUID()), "update not allowed"); updateToReviewers(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUUID))); }
@org.junit.Test public void pushToReviewersForAllSubmitOnSubmitOnSubmitOnSubmitOnSubmit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectState = new com.google.gerrit.reviewdb.client.Branch.NameKey(adminGroupUUID()), "update not allowed"); updateToReviewers(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUUID))); }
@org.junit.Test public void pushToReviewersForAllSubmitOnSubmitOnSubmitOnSubmitOnSubmit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectState = new com.google.gerrit.reviewdb.client.Branch.NameKey(adminGroupUUID()), "update not allowed"); updateToReviewers(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUUID))); assertThat(allUsersRepo).isFalse(); }
@org.junit.Test public void pushToReviewersForAllSubmitOnSubmitOnSubmitOnSubmitOnSubmit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey r = new com.google.gerrit.reviewdb.client.Branch.NameKey(adminGroupUUID()), "update not allowed"); updateToReviewers(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUUID())); java.lang.Iterable<com.google.gerrit.reviewdb.client.Branch.NameKey> allUsers = com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUUID); for (com.google.gerrit.reviewdb.client.RefNames.REFS_Groups : com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUUID)) { push = gApi.changes().id(adminGroupUUID.refsGroups(adminGroupUUID()), "not allowed to update not allowed"); } }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "groups.name = "Anonymous-user") public void createGroupWithConfiguredNameOfSystemGroup_Conflict() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("The users already exists"); gApi.groups().create("Created users already exists"); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "groups.AnonymousUsers.name = "Anonymous-user") public void createGroupWithConfiguredNameOfSystemGroup_Conflict() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("The users already exists"); gApi.groups().create("Created users already exists"); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "groups.AnonymousUsers.name = "Anonymous-user") public void createGroupWithConfiguredNameOfSystemGroup_Conflict() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("The users already exists"); gApi.groups().create("Created users that you cannot create"); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "groups.AnonymousUsers.name = "Anonymous-user") public void createGroupWithConfiguredNameOfSystemGroup_Conflict() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("The users already exists"); gApi.groups().create("Create new users that you cannot create"); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "groups.AnonymousUsers.name = "Anonymous-user") public void createGroupWithConfiguredNameOfSystemGroup_Conflict() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("The users already exists"); gApi.groups().create("Created users that you cannot create"); gApi.groups().create("Create"); }
@org.junit.Test public void createDuplicateSystemGroupSensitive_Conflict() throws java.lang.Exception { java.lang.String newGroupName = "test"; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Create groups already exists"); gApi.groups().create(newGroupName); }
@org.junit.Test public void createDuplicateSystemGroupSensitive_Conflict() throws java.lang.Exception { java.lang.String newGroupName = "test"; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Create new users already exists"); gApi.groups().create(newGroupName); }
@org.junit.Test public void createDuplicateSystemGroupSensitive_Conflict() throws java.lang.Exception { java.lang.String newGroupName = "users/conflicts"; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Create groups already exists"); gApi.groups().create(newGroupName); }
@org.junit.Test public void createDuplicateSystemGroupSensitive_Conflict() throws java.lang.Exception { java.lang.String newGroupName = "users/conflicts"; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Create new users already exists"); gApi.groups().create(newGroupName); }
@org.junit.Test public void createDuplicateSystemGroupSensitive_Conflict() throws java.lang.Exception { java.lang.String newGroupName = "test"; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Create new users already exists"); gApi.projects().create(newGroupName); }
private void testDeleteGroupBranchBranchBranchBranch, java.lang.String groupRef) throws java.lang.Exception { grant(allUsers, RefNames.DELETE_USERS, true, com.google.gerrit.acceptance.api.group.InMemoryRepository.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); org.eclipse.jgit.junit.TestRepository r = com.google.gerrit.acceptance.GitUtil.deleteRef(allUsersRepo, groupRef); assertThat(refUpdate.getStatus()).isEqualTo(RefUpdate.Result.REJECTED_OTHER_REASON); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(refUpdate.getStatus()).isNotNull(); assertThat(refUpdate.getMessage()).isNotNull(); } }
private void testDeleteGroupBranchBranchBranchBranch, java.lang.String groupRef) throws java.lang.Exception { grant(allUsers, RefNames.DELETE_USERS, true, com.google.gerrit.acceptance.api.group.InMemoryRepository.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); org.eclipse.jgit.transport.PushResult r = com.google.gerrit.acceptance.GitUtil.deleteRef(allUsersRepo, groupRef); assertThat(refUpdate.getStatus()).isEqualTo(RefUpdate.Result.REJECTED_OTHER_REASON); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(refUpdate.getStatus()).isNotNull(); assertThat(refUpdate.getMessage()).contains("not allowed to delete account"); } }
private void testDeleteGroupBranchBranchBranchBranch, java.lang.String groupRef) throws java.lang.Exception { grant(allUsers, RefNames.DELETE_USERS, true, com.google.gerrit.acceptance.api.group.InMemoryRepository.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); org.eclipse.jgit.junit.TestRepository r = com.google.gerrit.acceptance.GitUtil.deleteRef(allUsersRepo, groupRef); assertThat(refUpdate.getStatus()).isEqualTo(RefUpdate.Result.REJECTED_OTHER_REASON); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(refUpdate.getStatus()).isNotNull(); assertThat(refUpdate.getMessage()).contains("not allowed to delete account"); } }
private void testDeleteGroupBranchBranchBranchBranch, java.lang.String groupRef) throws java.lang.Exception { grant(allUsers, RefNames.DELETE_USERS, true, com.google.gerrit.acceptance.api.group.InMemoryRepository.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); org.eclipse.jgit.junit.TestRepository r = com.google.gerrit.acceptance.GitUtil.deleteRef(allUsersRepo, groupRef); assertThat(refUpdate.getStatus()).isEqualTo(RefUpdate.Result.REJECTED_OTHER_REASON); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(refUpdate.getStatus()).isNotNull(); assertThat(refUpdate.getMessage()).contains("Not allowed to delete account"); } }
private void testDeleteGroupBranchBranchBranchBranch, java.lang.String groupRef) throws java.lang.Exception { grant(allUsers, RefNames.DELETE_USERS, true, com.google.gerrit.acceptance.api.group.InMemoryRepository.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); org.eclipse.jgit.junit.TestRepository r = com.google.gerrit.acceptance.GitUtil.deleteRef(allUsersRepo, groupRef); assertThat(refUpdate.getStatus()).isEqualTo(RefUpdate.Result.REJECTED_OTHER_REASON); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(refUpdate.getStatus()).isNotNull(); assertThat(refUpdate.getMessage()).contains("not allowed to delete account branch"); } }
private void pushToGroupBranchForReviewersForSubmit(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedError) throws java.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); grant(groupsInNoteDb()).isTrue(); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "2"), 2, project, false, com.google.gerrit.reviewdb.client.RefNames.REFS_USERS, false); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ":group")); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_USERS) + ":group")); org.eclipse.jgit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRefNames.REFS_GROUPS) + ":group")); repo.reset("group"); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, "account.config", projectRef); r.assertOkStatus(); assertThat(r.getChange().getDest().get()).isEqualTo(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); if (expectedError!= null) { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("not allowed to update not allowed"); } gApi.changes().id(r.getChangeId()).current().submit(); }
private void pushToGroupBranchForReviewersForSubmit(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedError) throws java.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); grant(groupsInNoteDb()).isTrue(); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "2"), 2, project, false, com.google.gerrit.reviewdb.client.RefNames.REFS_USERS, false); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ":group")); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_USERS) + ":group")); org.eclipse.jgit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRefNames.REFS_GROUPS) + ":group")); repo.reset("group"); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, "account.config", projectRef); r.assertOkStatus(); assertThat(r.getChange().getDest().get()).isEqualTo(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); if (expected!= null) { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("not allowed to update not allowed"); } gApi.changes().id(r.getChangeId()).current().submit(); }
private void pushToGroupBranchForReviewersForSubmit(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedError) throws java.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); grant(groupsInNoteDb()).isTrue(); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "2"), 2, project, false, com.google.gerrit.reviewdb.client.RefNames.REFS_USERS, false); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ":group")); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_USERS) + ":group")); org.eclipse.jgit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRefNames.REFS_GROUPS) + ":group")); repo.reset("group"); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, "account.config", projectRef); r.assertOkStatus(); assertThat(r.getChange().getDest().get()).isEqualTo(groupRef); gApi.changes().id(r.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); if (expectedError!= null) { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("not allowed to update not allowed"); } gApi.changes().id(r.getChangeId()).current().submit(); }
private void pushToGroupBranchForReviewersForSubmit(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedError) throws java.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); grant(groupsInNoteDb()).isTrue(); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "2"), 2, project, false, com.google.gerrit.reviewdb.client.RefNames.REFS_USERS, false); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ":group")); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_USERS) + ":group")); org.eclipse.jgit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRefNames.REFS_GROUPS) + ":group")); repo.reset("group"); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, "account.config", projectRef); r.assertOkStatus(); assertThat(r.getChange().getDest().get()).isEqualTo(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); if (expectedError!= null) { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("not allowed to update not allowed"); } gApi.changes().id(r.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); }
private void pushToGroupBranchForReviewersForSubmit(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedError) throws java.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); grant(groupsInNoteDb()).isTrue(); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "2"), 2, project, false, com.google.gerrit.reviewdb.client.RefNames.REFS_USERS, false); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ":group")); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_USERS) + ":group")); org.eclipse.jgit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRefNames.REFS_GROUPS) + ":group")); repo.reset("group"); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, "account.config", projectRef); r.assertOkStatus(); assertThat(r.getChange().getDest().get()).isEqualTo(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); if (expectedError!= null) { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("not allowed to update not allowed"); } gApi.changes().id(r.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); exception.expectMessage("Deletion not allowed"); }
@org.junit.Test public void pushToGroupNamesIsRejected() throws java.lang.Exception { assume().that(groupsInNoteDbEnabled()).isTrue(); allowGlobalCapabilities(com.google.gerrit.acceptance.api.group.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); assertPushTo(allUsers, RefNames.REFS_GROUPS.REFS_GROUPS_GROUPS); }
@org.junit.Test public void pushToGroupNamesToAllUsersRepo() throws java.lang.Exception { assume().that(groupsInNoteDbEnabled()).isTrue(); allowGlobalCapabilities(com.google.gerrit.acceptance.api.group.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); assertPushTo(allUsers, RefNames.REFS_GROUPS_GROUPS.REFS_GROUPS); }
@org.junit.Test public void pushToGroupNamesToAllUsersRepo() throws java.lang.Exception { assume().that(groupsInNoteDbEnabled()).isTrue(); allowGlobalCapabilities(com.google.gerrit.acceptance.api.group.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); assertPushTo(allUsers, RefNames.REFS_GROUPS_GROUPS_GROUPS.REFS_GROUPS); }
@org.junit.Test public void pushToGroupNamesToAllUsersRepo() throws java.lang.Exception { assume().that(groupsInNoteDbEnabled()).isTrue(); allowGlobalCapabilities(com.google.gerrit.acceptance.api.group.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); assertPushTo(allUsers, RefNames.REFS_GROUPS_GROUPS.REFS_GROUPS_GROUPS); }
@org.junit.Test public void pushToGroupNamesToAllUsersRepo() throws java.lang.Exception { assume().that(groupsInNoteDbEnabled()).isTrue(); allowGlobalCapabilities(com.google.gerrit.acceptance.api.group.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); assertPushTo(allUsers, RefNames.REFS_GROUPS_GROUPS_GROUPS.REFS_GROUPS, "update not allowed"); }
@org.junit.Test public void pushToDeletedGroupBranchRefStateIsRejected() throws java.lang.Exception { java.lang.String groupRef = com.google.gerrit.reviewdb.client.AccountGroup.UUID.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("foo")).get().id)); createBranch(allUsers, groupRef); assertPushToGroupBranch(allUsers, groupRefs); }
@org.junit.Test public void pushToDeletedGroupBranchRefStateIsRejected() throws java.lang.Exception { java.lang.String groupRef = com.google.gerrit.reviewdb.client.AccountGroup.UUID.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("foo")).get().id)); createBranch(allUsers, groupRef); assertPushToGroupBranch(allUsers, groupRef); }
@org.junit.Test public void pushToDeletedGroupBranchRefStateIsRejected() throws java.lang.Exception { java.lang.String groupRef = com.google.gerrit.reviewdb.client.AccountGroup.UUID.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("foo")).get().id)); createBranch(allUsers, groupRef); assertPushToGroupBranch(allUsers, groupRef, "Update not permitted"); }
@org.junit.Test public void pushToDeletedGroupBranchRefStateIsRejected() throws java.lang.Exception { java.lang.String groupRef = com.google.gerrit.reviewdb.client.AccountGroup.UUID.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("foo")).get().id)); createBranch(allUsers, groupRef); assertPushToGroupBranch(allUsers, groupRef, "Update not allowed"); }
@org.junit.Test public void pushToDeletedGroupBranchRefStateIsRejected() throws java.lang.Exception { java.lang.String groupRef = com.google.gerrit.reviewdb.client.AccountGroup.UUID.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("foo")).get().id)); createBranch(allUsers, groupRef); assertPushToGroupBranch.getGroupBranch(allUsers, groupRef); }
@org.junit.Test public void createDuplicateInternalGroupSensitive_Conflict() throws java.lang.Exception { java.lang.String df = name("duplicate"); gApi.groups().create(dupGroupName); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage((("Duplicate " + buckGroupName) + "\" already exists")); gApi.groups().create(duplicateName); }
@org.junit.Test public void createDuplicateInternalGroupSensitive_Conflict() throws java.lang.Exception { java.lang.String df = name("duplicate"); gApi.groups().create(dupGroupName); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage((("Duplicate " + buckGroupName) + " already exists")); gApi.groups().create(duplicateName); }
@org.junit.Test public void createDuplicateInternalGroupSensitive_Conflict() throws java.lang.Exception { java.lang.String df = name("duplicate"); gApi.groups().create(dupGroupName); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage((("Duplicate " + buckGroupName) + "'")); gApi.groups().create(duplicateName); }
@org.junit.Test public void createDuplicateInternalGroupSensitive_Conflict() throws java.lang.Exception { java.lang.String df = name("duplicate"); gApi.groups().create(dupGroupName); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage((("Duplicate " + buckGroupName) + "\" already exists")); gApi.groups().create(dupk.getName()); }
@org.junit.Test public void createDuplicateInternalGroupSensitive_Conflict() throws java.lang.Exception { java.lang.String df = name("duplicate"); gApi.groups().create(dupGroupName); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage((("Duplicate " + buckGroupName) + " successful already exists")); gApi.groups().create(dupk.getName()); }
private void assertPushToGroupBranchBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedErrorOnUpdate) throws java.lang.Exception { grant(project, com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(project, "user"), permission.create()); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), perm, false, com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_USERS) + "*"), perm, perm, false, com.google.gerrit.acceptance.api.group.RefNames.REFS_USERS); grant(project, RefNames.REFS_USERS, RefNames.REFS_USERS); grant(project, RefNames.REFS_USERS, RefNames.PUSH_USERS, perm.PUSH, false, com.google.gerrit.reviewdb.client.AccountGroup.Id accountRefNames = AccountGroup(project); com.google.gerrit.server.git.GitUtil.fetch(repo, (groupRefName + ":groupRef")); repo.reset("groupRef"); com.google.gerrit.server.git.GitUtil.fetch(repo, (groupRefName + ":groupRef")); repo.close(); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), admin.getIdent(), AccountGroup.FILE_NAME, ":group"); if (expected!= null) { r.assertErrorStatusOnUpdate(expectedErrorOnUpdate); } else { r.assertErrorStatusOnUpdate(expectedErrorOnUpdate(expectedUpdate); } }
private void assertPushToGroupBranchBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedErrorOnUpdate) throws java.lang.Exception { grant(project, com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(project, "user"), permission.create()); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), perm, false, com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_USERS) + "*"), perm, perm, false, com.google.gerrit.acceptance.api.group.RefNames.REFS_USERS); grant(project, RefNames.REFS_USERS, RefNames.REFS_USERS); grant(project, RefNames.REFS_USERS, RefNames.PUSH_USERS, perm.PUSH, false, com.google.gerrit.reviewdb.client.AccountGroup.Id accountRefNames = AccountGroup(project); com.google.gerrit.server.git.GitUtil.fetch(repo, (groupRefName + ":groupRef")); repo.reset("groupRef"); com.google.gerrit.server.git.GitUtil.fetch(repo, (groupRefName + ":groupRef")); repo.close(); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), admin.getIdent(), AccountGroup.FILE_NAME, ":group"); if (expected!= null) { r.assertErrorStatusOnUpdate(expectedErrorOnUpdate); } else { com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, admin.getIdent(), "User", "User", "User.email); } }
private void assertPushToGroupBranchBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedErrorOnUpdate) throws java.lang.Exception { grant(project, com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(project, "user"), permission.create()); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), perm, false, com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_USERS) + "*"), perm, perm, false, com.google.gerrit.acceptance.api.group.RefNames.REFS_USERS); grant(project, RefNames.REFS_USERS, RefNames.REFS_USERS); grant(project, RefNames.REFS_USERS, RefNames.PUSH_USERS, perm.PUSH, false, com.google.gerrit.reviewdb.client.AccountGroup.Id accountRefNames = AccountGroup(project); com.google.gerrit.server.git.GitUtil.fetch(repo, (groupRefName + ":groupRef")); repo.reset("groupRef"); com.google.gerrit.server.git.GitUtil.fetch(repo, (groupRefName + ":groupRef")); repo.close(); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), admin.getIdent(), AccountGroup.FILE_NAME, ":group"); if (expected!= null) { r.assertErrorStatusOnUpdate(expectedErrorOnUpdate); } else { com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, admin.getIdent(), "User", "User"), r.getUpdate(AccountGroup.getUpdate()); } }
private void assertPushToGroupBranchBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedErrorOnUpdate) throws java.lang.Exception { grant(project, com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(project, "user"), permission.create()); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), perm, false, com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_USERS) + "*"), perm, perm, false, com.google.gerrit.acceptance.api.group.RefNames.REFS_USERS); grant(project, RefNames.REFS_USERS, RefNames.REFS_USERS); grant(project, RefNames.REFS_USERS, RefNames.PUSH_USERS, perm.PUSH, false, com.google.gerrit.reviewdb.client.AccountGroup.Id accountRefNames = AccountGroup(project); com.google.gerrit.server.git.GitUtil.fetch(repo, (groupRefName + ":groupRef")); repo.reset("groupRef"); com.google.gerrit.server.git.GitUtil.fetch(repo, (groupRefName + ":groupRef")); repo.close(); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), admin.getIdent(), AccountGroup.FILE_NAME, ":group"); if (expected!= null) { r.assertErrorStatusOnUpdate(expectedErrorOnUpdate); } else { com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, admin.getIdent(), "User", "User"), r.getUpdateOnUpdate(AccountGroup.getUpdate()); } }
private void assertPushToGroupBranchBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedErrorOnUpdate) throws java.lang.Exception { grant(project, com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(project, "user"), permission.create()); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), perm, false, com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_USERS) + "*"), perm, perm, false, com.google.gerrit.acceptance.api.group.RefNames.REFS_USERS); grant(project, RefNames.REFS_USERS, RefNames.REFS_USERS); grant(project, RefNames.REFS_USERS, RefNames.PUSH_USERS, perm.PUSH, false, com.google.gerrit.reviewdb.client.AccountGroup.Id accountRefNames = AccountGroup(project); com.google.gerrit.server.git.GitUtil.fetch(repo, (groupRefName + ":groupRef")); repo.reset("groupRef"); com.google.gerrit.server.git.GitUtil.fetch(repo, (groupRefName + ":groupRef")); repo.close(); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), admin.getIdent(), AccountGroup.FILE_NAME, ":group"); if (expected!= null) { r.assertErrorStatusOnUpdate(expectedErrorOnUpdate); } else { com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, admin.getIdent(), "User", "User"), r.getUpdateOnUpdateOnUpdateOnUpdate(true); } }
private void assertCreateGroupBranchBranch_NameKey(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedErrorOnCreate) throws java.lang.Exception { grant(project, RefNames.REFS_USERS, false); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_USERS) + "*"), permission.user, false, com.google.gerrit.acceptance.api.accounts.GroupRepositoryManager.group(project); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), accountCreator.group(cfg.getIdent(), "user")); org.eclipse.jgit.lib.Repository r = repoManager.create(db, admin.getIdent(), accountConfig.group(cfg.getIdent(), "bar")); if (expectedErrorOnCreateChange!= null) { r.assertOkStatus(); } else { r.assertOkStatus(); } }
private void assertCreateGroupBranchBranch_NameKey(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedErrorOnCreate) throws java.lang.Exception { grant(project, RefNames.REFS_USERS, false); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_USERS) + "*"), permission.user, false, com.google.gerrit.acceptance.api.accounts.GroupRepositoryManager.group(project); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), accountCreator.group(cfg.getIdent(), "user")); org.eclipse.jgit.lib.Repository r = repoManager.create(db, admin.getIdent(), accountConfig.group(cfg.getIdent(), "bar")); if (expectedErrorOnCreateChange!= null) { r.assertErrorStatus(); } else { r.assertOkStatus(); } }
private void assertCreateGroupBranchBranch_NameKey(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedErrorOnCreate) throws java.lang.Exception { grant(project, RefNames.REFS_USERS, false); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_USERS) + "*"), permission.user, false, com.google.gerrit.acceptance.api.accounts.GroupRepositoryManager.group(project); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), accountCreator.group(cfg.getIdent(), "user")); org.eclipse.jgit.lib.Repository r = repoManager.create(db, admin.getIdent(), accountConfig.group(cfg.getIdent(), "bar")); if (expectedErrorOnCreateChange!= null) { r.assertOK(); } else { r.assertOkStatus(); } }
private void assertCreateGroupBranchBranch_NameKey(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedErrorOnCreate) throws java.lang.Exception { grant(project, RefNames.REFS_USERS, false); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_USERS) + "*"), permission.user, false, com.google.gerrit.acceptance.api.accounts.GroupRepositoryManager.group(project); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), accountCreator.group(cfg.getIdent(), "user")); org.eclipse.jgit.lib.Repository r = repoManager.create(db, admin.getIdent(), accountConfig.group(cfg.getIdent(), "bar")); if (expectedErrorOnCreateChange!= null) { r.assertOkStatus(); } else { r.assertOK(); } }
private void assertCreateGroupBranchBranch_NameKey(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedErrorOnCreate) throws java.lang.Exception { grant(project, RefNames.REFS_USERS, false); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_USERS) + "*"), permission.user, false, com.google.gerrit.acceptance.api.accounts.GroupRepositoryManager.group(project); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), accountCreator.group(cfg.getIdent(), "user")); org.eclipse.jgit.lib.Repository r = repoManager.create(db, admin.getIdent(), accountConfig.group(cfg.getIdent(), "bar")); if (expectedErrorOnCreateChange!= null) { r.assertErrorStatus(); } else { r.assertOK(); } }
@org.junit.Test public void onlyVisibleGroupsReturned() throws java.lang.Exception { java.lang.String newGroupName = name("newGroup"); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = "newGroup"; in.description = "Create group"; in.ownerId = adminGroupUUID().get(); gApi.groups().create(in); setApiUser(user); assertThat(gApi.groups().list().getAsMap()).doesNotContainKey(newGroupName); setApiUser(admin); gApi.groups().id(newGroupName); setApiUser(admin); gApi.groups().id(newGroupName).addMembers(user.username); setApiUser(user); assertThat(gApi.groups().list().getAsMap()).containsKey(newGroupName); }
@org.junit.Test public void onlyVisibleGroupsReturned() throws java.lang.Exception { java.lang.String newGroupName = name("newGroup"); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = "newGroup"; in.description = "Create group"; in.ownerId = adminGroupUUID().get(); gApi.groups().create(in); setApiUser(user); assertThat(gApi.groups().list().getAsMap()).doesNotContainKey(newGroupName); setApiUser(admin); gApi.groups().list().addMembers(newGroupName); setApiUser(admin); gApi.groups().id(newGroupName); setApiUser(user); assertThat(gApi.groups().list().getAsMap()).containsKey(newGroupName); }
@org.junit.Test public void onlyVisibleGroupsReturned() throws java.lang.Exception { java.lang.String newGroupName = name("newGroup"); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = "newGroup"; in.description = "Create group"; in.ownerId = adminGroupUUID().get(); gApi.groups().create(in); setApiUser(user); assertThat(gApi.groups().list().getAsMap()).doesNotContainKey(newGroupName); setApiUser(admin); gApi.groups().list().addMembers(newGroupName); setApiUser(admin); gApi.groups().id(newGroupName).addMembers(user.username); setApiUser(user); assertThat(gApi.groups().list().getAsMap()).containsKey(newGroupName); }
@org.junit.Test public void onlyVisibleGroupsReturned() throws java.lang.Exception { java.lang.String newGroupName = name("newGroup"); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = "newGroup"; in.description = "Create group"; in.ownerId = adminGroupUUID().get(); gApi.groups().create(in); setApiUser(user); assertThat(gApi.groups().list().getAsMap()).doesNotContainsKey(newGroupName); setApiUser(admin); gApi.groups().list().addMembers(newGroupName); setApiUser(admin); gApi.groups().id(newGroupName); setApiUser(user); assertThat(gApi.groups().list().getAsMap()).containsKey(newGroupName); }
@org.junit.Test public void onlyVisibleGroupsReturned() throws java.lang.Exception { java.lang.String newGroupName = name("newGroup"); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = "newGroup"; in.description = "Create group"; in.ownerId = adminGroupUUID().get(); gApi.groups().create(in); setApiUser(user); assertThat(gApi.groups().list().getAsMap()).doesNotContainsKey(newGroupName); setApiUser(admin); gApi.groups().list().addMembers(newGroupName); setApiUser(admin); gApi.groups().id(newGroupName).addMembers(user.username); setApiUser(user); assertThat(gApi.groups().list().getAsMap()).containsKey(newGroupName); }
@org.junit.Test public void pushToGroupBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { assertThat(groupsInNoteDb.refsGroups()).isTrue(); }
@org.junit.Test public void pushToGroupBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { pushToReviewDbChangeBranch_refs(adminGroupUUID); assertThat(groups).isTrue(); }
@org.junit.Test public void pushToGroupBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { assertThat(groupsInNoteDb.refs().isEqualToAllUsersRepo(adminGroupUUID()).isTrue(); }
@org.junit.Test public void pushToGroupBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { pushToReviewDbChangeBranch_refs(adminUUID); assertThat(groupsInNoteDb.refsGroups()).isTrue(); }
@org.junit.Test public void pushToGroupBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { assertThat(groupsInNoteDb.refs().isEqualToAllUsersRepo(adminGroupUUID()).isFalse(); }
@org.junit.Test public void groupDescription() throws java.lang.Exception { java.lang.String name = name("group"); gApi.groups().create(name).description(); java.lang.String desc = "description"; gApi.groups().id(name).descriptionFor(name); assertThat(gApi.groups().id(name).isEmpty(); gApi.groups().id(name).description(desc); assertThat(gApi.groups().id(name).isEqualTo(desc); gApi.groups().id(name).description(desc); assertThat(gApi.groups().id(name).description()).isEqualTo(null); gApi.groups().id(name).description(""); assertThat(gApi.groups().id(name).description()).isEmpty(); }
@org.junit.Test public void groupDescription() throws java.lang.Exception { java.lang.String name = name("group"); gApi.groups().create(name).description(); java.lang.String desc = "description"; gApi.groups().id(name).descriptionFor(name); assertThat(gApi.groups().id(name).isEmpty(); gApi.groups().id(name).description(desc); assertThat(gApi.groups().id(name).isEqualTo(desc); gApi.groups().id(name).description(desc); assertThat(gApi.groups().id(name).description()).isEqualTo(null); assertThat(gApi.groups().id(name).description()).isEmpty(); gApi.groups().id(name).description(""); assertThat(gApi.groups().id(name).description()).isEmpty(); }
@org.junit.Test public void groupDescription() throws java.lang.Exception { java.lang.String name = name("group"); gApi.groups().create(name).description(); java.lang.String desc = "description"; gApi.groups().id(name).descriptionFor(name); assertThat(gApi.groups().id(name).isEmpty(); gApi.groups().id(name).description(desc); assertThat(gApi.groups().id(name).isEqualTo(desc); gApi.groups().id(name).description(desc); assertThat(gApi.groups().id(name).description()).isEqualTo(null); gApi.groups().id(name).description(""); assertThat(gApi.groups().id(name).description()).isEmpty(); assertThat(gApi.groups().id(name).description()).isEmpty(); }
@org.junit.Test public void groupDescription() throws java.lang.Exception { java.lang.String name = name("group"); gApi.groups().create(name).description(); java.lang.String desc = "description"; gApi.groups().id(name).descriptionFor(name); assertThat(gApi.groups().id(name).isEmpty(); gApi.groups().id(name).description(desc); assertThat(gApi.groups().id(name).isEqualTo(desc); gApi.groups().id(name).description(desc); assertThat(gApi.groups().id(name).description).isEqualTo(name); gApi.groups().id(name).description(""); assertThat(gApi.groups().id(name).description()).isEmpty(); assertThat(gApi.groups().id(name).isEmpty(); }
@org.junit.Test public void groupDescription() throws java.lang.Exception { java.lang.String name = name("group"); gApi.groups().create(name).description(); java.lang.String desc = "description"; gApi.groups().id(name).descriptionFor(name); assertThat(gApi.groups().id(name).isEmpty(); gApi.groups().id(name).description(desc); assertThat(gApi.groups().id(name).isEqualTo(desc); gApi.groups().id(name).description(desc); assertThat(gApi.groups().id(name).description()).isEqualTo(null); gApi.groups().id(name).description(""); assertThat(gApi.groups().id(name).description()).isEmpty(); assertThat(gApi.groups().id(name).isEmpty(); }
@org.junit.Test public void reindexPermissions() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount groupOwner = accountCreator.user2(); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = name("group"); in.members = java.util.Collections.singleton(groupOwner).stream().map(( u) -> u.id.toString()).collect(java.util.stream.Collectors.toList()); in.visibleToAll = true; com.google.gerrit.extensions.common.GroupInfo group = gApi.groups().create(in).get(); setApiUser(admin); gApi.groups().id(group.id).index(); setApiUser(group); gApi.groups().id(group.id).index(); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.AuthException.class); exception.expectMessage("Not allowed to index not allowed to index"); gApi.groups().id(group.id).index(); }
@org.junit.Test public void reindexPermissions() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount groupOwner = accountCreator.user2(); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = name("group"); in.members = java.util.Collections.singleton(groupOwner).stream().map(( u) -> u.id.toString()).collect(java.util.stream.Collectors.toList()); in.visibleToAll = true; com.google.gerrit.extensions.common.GroupInfo group = gApi.groups().create(in).get(); setApiUser(admin); gApi.groups().id(group.id).index(); setApiUser(user); gApi.groups().id(group.id).index(); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.AuthException.class); exception.expectMessage("Not allowed to index not allowed to index"); gApi.groups().id(group.id).index(); }
@org.junit.Test public void reindexPermissions() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount groupOwner = accountCreator.user2(); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = name("group"); in.members = java.util.Collections.singleton(groupOwner).stream().map(( u) -> u.id.toString()).collect(java.util.stream.Collectors.toList()); in.visibleToAll = true; com.google.gerrit.extensions.common.GroupInfo group = gApi.groups().create(in).get(); setApiUser(admin); gApi.groups().id(group.id).index(); setApiUser(group.id); gApi.groups().id(group.id).index(); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.AuthException.class); exception.expectMessage("Not allowed to index not allowed to index"); gApi.groups().id(group.id).index(); }
@org.junit.Test public void reindexPermissions() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount groupOwner = accountCreator.user2(); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = name("group"); in.members = java.util.Collections.singleton(groupOwner).stream().map(( u) -> u.id.toString()).collect(java.util.stream.Collectors.toList()); in.visibleToAll = true; com.google.gerrit.extensions.common.GroupInfo group = gApi.groups().create(in).get(); setApiUser(admin); gApi.groups().id(group.id).index(); setApiUser(group); gApi.groups().id(group.id).index(); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.AuthException.class); exception.expectMessage("Not allowed to index not allowed to index"); gApi.changes().id(group.id).index(); }
@org.junit.Test public void reindexPermissions() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount groupOwner = accountCreator.user2(); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = name("group"); in.members = java.util.Collections.singleton(groupOwner).stream().map(( u) -> u.id.toString()).collect(java.util.Collections.singleton(groupOwner).get(); in.visibleToAll = true; com.google.gerrit.extensions.common.GroupInfo group = gApi.groups().create(in).get(); setApiUser(admin); gApi.groups().id(group.id).index(); setApiUser(user); gApi.groups().id(group.id).index(); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.AuthException.class); exception.expectMessage("Not allowed to index not allowed to index"); gApi.groups().id(group.id).index(); }
@org.junit.Test public void createDuplicateSystemConfigCaseConflict() throws java.lang.Exception { java.lang.String newGroupName = "users/conflicts"; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Create groups already exists"); gApi.groups().create(newGroupName); }
@org.junit.Test public void createDuplicateSystemConfigCaseConflict() throws java.lang.Exception { java.lang.String newGroupName = "users/conflicts"; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Create new users already exists"); gApi.groups().create(newGroupName); }
@org.junit.Test public void createDuplicateSystemGroupInsensitive_Conflict() throws java.lang.Exception { java.lang.String newGroupName = "users/conflicts"; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Create new users already exists"); gApi.groups().create(newGroupName); }
@org.junit.Test public void createDuplicateSystemGroupInsensitive_Conflict() throws java.lang.Exception { java.lang.String newGroupName = "users/conflicts"; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Create new Users already exists"); gApi.groups().create(newGroupName); }
@org.junit.Test public void createDuplicateSystemConfigCaseConflict() throws java.lang.Exception { java.lang.String newGroupName = "users/conflicts"; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Create groups already exists"); gApi.projects().create(newGroupName); }
private com.google.gerrit.extensions.common.ChangeConfigInfo getChangeInfo(org.eclipse.jgit.lib.Config cfg) { return new com.google.gerrit.extensions.common.ChangeConfigInfo(); }
private com.google.gerrit.extensions.common.ChangeConfigInfo getChangeInfo(org.eclipse.jgit.lib.Config cfg) { com.google.gerrit.extensions.common.ChangeConfigInfo info = new com.google.gerrit.extensions.common.ChangeConfigInfo(); info.allowBlame = com.google.gerrit.server.config.GetServerInfo.toBoolean(cfg.getBoolean("change", "allowBlame", true)); info.allowDrafts = com.google.gerrit.server.config.GetServerInfo.toBoolean(cfg.getBoolean("change", "allowDrafts", true)); boolean hasAssigneeInIndex = indexes.getSearchIndex().hasField(ChangeField.ASSIGNEE); info.showAssigneeInChangesTable = indexes.getSearchIndex().getSchema().hasField(ChangeField.ASSIGNEE); info.showAssigneeInChangesTable = com.google.gerrit.server.config.GetServerInfo.toBoolean(((cfg.getBoolean("change", "showAssigneeInChangesTable", false)) && hasAssigneeInIndex)); info.largeChange = cfg.getInt("change", "largeChange", 500); info.replyTooltip = (java.util.Optional.ofNullable(cfg.getBoolean("change", "replyTooltip")).orElse("Reply and score")) + " (Shortcut: a)"; info.replyTooltip = (java.util.Optional.ofNullable(cfg.getString("change", null, "replyLabel")).orElse("Reply")) + " (Shortcut: a)"; info.updateDelay = ((int) (com.google.gerrit.server.git.ConfigUtil.getTimeUnit(cfg, "change", null, "updateDelay", 300, java.util.concurrent.TimeUnit.SECONDS))); info.submitWholeTopic = com.google.gerrit.server.git.MergeSuperSet.wholeTopicEnabled(cfg); return info; }
private com.google.gerrit.extensions.common.ChangeConfigInfo getChangeInfo(org.eclipse.jgit.lib.Config cfg) { com.google.gerrit.extensions.common.ChangeConfigInfo info = new com.google.gerrit.extensions.common.ChangeConfigInfo(); info.allowBlame = com.google.gerrit.server.config.GetServerInfo.toBoolean(cfg.getBoolean("change", "allowBlame", true)); info.allowDrafts = com.google.gerrit.server.config.GetServerInfo.toBoolean(cfg.getBoolean("change", "allowDrafts", true)); boolean hasAssigneeInIndex = indexes.getSearchIndex().hasField(ChangeField.ASSIGNEE); info.showAssigneeInChangesTable = indexes.getSearchIndex().getSchema().hasField(ChangeField.ASSIGNEE); info.showAssigneeInChangesTable = com.google.gerrit.server.config.GetServerInfo.toBoolean(((cfg.getBoolean("change", "showAssigneeInChangesTable", false)) && hasAssigneeInIndex)); info.largeChange = cfg.getInt("change", "largeChange", 500); info.replyTooltip = (java.util.Optional.ofNullable(cfg.getBoolean("change", false))? a) : "largeChange", 500); info.replyTooltip = (java.util.Optional.ofNullable(cfg.getString("change", null, "replyTooltip")).orElse("Reply")) + " (Shortcut: a)"; info.updateDelay = ((int) (com.google.gerrit.server.git.ConfigUtil.getTimeUnit(cfg, "change", null, "updateDelay", 300, java.util.concurrent.TimeUnit.SECONDS))); info.submitWholeTopic = com.google.gerrit.server.git.MergeSuperSet.wholeTopicEnabled(cfg); return info; }
private com.google.gerrit.extensions.common.ChangeConfigInfo getChangeInfo(org.eclipse.jgit.lib.Config cfg) { com.google.gerrit.extensions.common.ChangeConfigInfo info = new com.google.gerrit.extensions.common.ChangeConfigInfo(); info.allowBlame = com.google.gerrit.server.config.GetServerInfo.toBoolean(cfg.getBoolean("change", "allowBlame", true)); info.allowDrafts = com.google.gerrit.server.config.GetServerInfo.toBoolean(cfg.getBoolean("change", "allowDrafts", true)); boolean hasAssigneeInIndex = indexes.getSearchIndex().hasField(ChangeField.ASSIGNEE); info.showAssigneeInChangesTable = indexes.getSearchIndex().getSchema().hasField(ChangeField.ASSIGNEE); info.showAssigneeInChangesTable = com.google.gerrit.server.config.GetServerInfo.toBoolean(((cfg.getBoolean("change", "showAssigneeInChangesTable", false)) && hasAssigneeInIndex)); info.largeChange = cfg.getInt("change", "largeChange", 500); info.replyTooltip = (java.util.Optional.ofNullable(cfg.getBoolean("change", false))? a) : "largeChange", 500); info.replyTooltip = (java.util.Optional.ofNullable(cfg.getString("change", null, "replyTooltip")).orElse("Reply")) + " (Shortcut: a)"; info.updateDelay = ((int) (com.google.gerrit.server.git.ConfigUtil.getTimeUnit(cfg, "change", null, "updateDelay")); info.submitWholeTopic = com.google.gerrit.server.git.MergeSuperSet.wholeTopicEnabled(cfg); return info; }
private com.google.gerrit.extensions.common.ChangeConfigInfo getChangeInfo(org.eclipse.jgit.lib.Config cfg) { com.google.gerrit.extensions.common.ChangeConfigInfo info = new com.google.gerrit.extensions.common.ChangeConfigInfo(); info.allowBlame = com.google.gerrit.server.config.GetServerInfo.toBoolean(cfg.getBoolean("change", "allowBlame", true)); info.allowDrafts = com.google.gerrit.server.config.GetServerInfo.toBoolean(cfg.getBoolean("change", "allowDrafts", true)); boolean hasAssigneeInIndex = indexes.getSearchIndex().hasField(ChangeField.ASSIGNEE); info.showAssigneeInChangesTable = indexes.getSearchIndex().getSchema().hasField(ChangeField.ASSIGNEE); info.showAssigneeInChangesTable = com.google.gerrit.server.config.GetServerInfo.toBoolean(((cfg.getBoolean("change", "showAssigneeInChangesTable", false)) && hasAssigneeInIndex)); info.largeChange = cfg.getInt("change", "largeChange", 500); info.replyTooltip = (java.util.Optional.ofNullable(cfg.getBoolean("change", false))? a) : "largeChange", 500); info.replyTooltip = (java.util.Optional.ofNullable(cfg.getString("change", null, "replyTooltip")).orElse("Reply")) + " (Shortcut: a)"; info.updateDelay = ((int) (com.google.gerrit.server.git.ConfigUtil.getTimeUnit(cfg, "change", null, "replyLabel")); info.submitWholeTopic = com.google.gerrit.server.git.MergeSuperSet.wholeTopicEnabled(cfg); return info; }
private com.google.gerrit.extensions.common.GerritInfo getGerritInfo(org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.config.AllProjectsName allProjectsName, com.google.gerrit.server.config.AllUsersName allUsersName) { com.google.gerrit.extensions.common.GerritInfo info = new com.google.gerrit.extensions.common.GerritInfo(); info.allProjects = allProjectsName.get(); info.allUsers = allUsersName.get(); info.reportBugUrl = cfg.getString("gerrit", null, "reportBugUrl"); info.reportBugText = cfg.getString("gerrit", null, "reportBugUrl"); info.reportBugText = getDocUrl(cfg); info.docSearch = docSearcher.isAvailable(); info.editGpgKeys = com.google.gerrit.server.config.GetServerInfo.toBoolean(((enableSignedPush) && (cfg.getBoolean("gerrit", null, "editGpgKeys", true)))); info.webUis = java.util.EnumSet.noneOf(com.google.gerrit.extensions.client.UiType.class); if (gerritOptions.enableGwtUi()) { info.webUi = java.util.EnumSet.noneOf(com.google.gerrit.extensions.client.UiType.class); if (gerritOptions.enableGwtUi()) { info.webUi.add(UiType.GWTIP); } } return info; }
private com.google.gerrit.extensions.common.GerritInfo getGerritInfo(org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.config.AllProjectsName allProjectsName, com.google.gerrit.server.config.AllUsersName allUsersName) { com.google.gerrit.extensions.common.GerritInfo info = new com.google.gerrit.extensions.common.GerritInfo(); info.allProjects = allProjectsName.get(); info.allUsers = allUsersName.get(); info.reportBugUrl = cfg.getString("gerrit", null, "reportBugUrl"); info.reportBugUrl = cfg.getString("gerrit", null, "reportBugText"); info.reportBugText = getDocUrl(cfg); info.docSearch = docSearcher.isAvailable(); info.editGpgKeys = com.google.gerrit.server.config.GetServerInfo.toBoolean(((enableSignedPush) && (cfg.getBoolean("gerrit", null, "editGpgKeys", true)))); info.webUis = java.util.EnumSet.noneOf(com.google.gerrit.extensions.client.UiType.class); if (gerritOptions.enableGwtUi()) { info.webUi = java.util.EnumSet.noneOf(com.google.gerrit.extensions.client.UiType.class); if (gerritOptions.enableGwtUi()) { info.webUi.add(UiType.GWTIP); } } return info; }
private com.google.gerrit.extensions.common.GerritInfo getGerritInfo(org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.config.AllProjectsName allProjectsName, com.google.gerrit.server.config.AllUsersName allUsersName) { com.google.gerrit.extensions.common.GerritInfo info = new com.google.gerrit.extensions.common.GerritInfo(); info.allProjects = allProjectsName.get(); info.allUsers = allUsersName.get(); info.reportBugUrl = cfg.getString("gerrit", null, "reportBugUrl"); info.reportBugText = cfg.getString("gerrit", null, "reportBugText"); info.reportBugText = getDocUrl(cfg); info.docSearch = docSearcher.isAvailable(); info.editGpgKeys = com.google.gerrit.server.config.GetServerInfo.toBoolean(((enableSignedPush) && (cfg.getBoolean("gerrit", null, "editGpgKeys", true)))); info.webUis = java.util.EnumSet.noneOf(com.google.gerrit.extensions.client.UiType.class); if (gerritOptions.enableGwtUi()) { info.webUi = java.util.EnumSet.noneOf(com.google.gerrit.extensions.client.UiType.class); if (gerritOptions.enableGwtUi()) { info.webUi.add(UiType.GWTIP); } } return info; }
private com.google.gerrit.extensions.common.GerritInfo getGerritInfo(org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.config.AllProjectsName allProjectsName, com.google.gerrit.server.config.AllUsersName allUsersName) { com.google.gerrit.extensions.common.GerritInfo info = new com.google.gerrit.extensions.common.GerritInfo(); info.allProjects = allProjectsName.get(); info.allUsers = allUsersName.get(); info.reportBugUrl = cfg.getString("gerrit", null, "reportBugUrl"); info.reportBugUrl = cfg.getString("gerrit", null, "reportBugUrl"); info.reportBugText = getDocUrl(cfg); info.docSearch = docSearcher.isAvailable(); info.editGpgKeys = com.google.gerrit.server.config.GetServerInfo.toBoolean(((enableSignedPush) && (cfg.getBoolean("gerrit", null, "editGpgKeys", true)))); info.webUis = java.util.EnumSet.noneOf(com.google.gerrit.extensions.client.UiType.class); if (gerritOptions.enableGwtUi()) { info.webUi = java.util.EnumSet.noneOf(com.google.gerrit.extensions.client.UiType.class); if (gerritOptions.enableGwtUi()) { info.webUi.add(UiType.GWTIP); } } return info; }
private com.google.gerrit.extensions.common.GerritInfo getGerritInfo(org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.config.AllProjectsName allProjectsName, com.google.gerrit.server.config.AllUsersName allUsersName) { com.google.gerrit.extensions.common.GerritInfo info = new com.google.gerrit.extensions.common.GerritInfo(); info.allProjects = allProjectsName.get(); info.allUsers = allUsersName.get(); info.reportBugUrl = cfg.getString("gerrit", null, "reportBugUrl"); info.reportBugText = cfg.getString("gerrit", null, "reportBugUrl"); info.reportBugText = getDocUrl(cfg); info.docSearch = docSearcher.isAvailable(); info.editGpgKeys = com.google.gerrit.server.config.GetServerInfo.toBoolean(((enableSignedPush) && (cfg.getBoolean("gerrit", null, "editGpgKeys", true)))); info.webUis = java.util.EnumSet.noneOf(com.google.gerrit.extensions.client.UiType.class); if (gerritOptions.enableGwtUi()) { info.webUi = java.util.EnumSet.noneOf(com.google.gerrit.extensions.client.UiType.class); if (gerritOptions.enableGwtUi()) { info.webUi.add(UiType.POLYGERRIT); } } return info; }
@java.lang.Override public com.google.gerrit.extensions.common.ServerInfo apply(com.google.gerrit.server.config.ConfigResource rsrc) throws java.net.MalformedURLException { com.google.gerrit.extensions.common.ServerInfo info = new com.google.gerrit.extensions.common.ServerInfo(); info.accounts = getAccountsInfo(authConfig); info.auth = getAuthInfo(authConfig, realm); info.change = getDownloadInfo(config); info.download = getDownloadInfo(downloadSchemes, downloadCommands, cloneCommands, archiveFormats); info.gerrit = getGerritInfo(config, allProjectsName, allUsersName); info.noteDbEnabled = com.google.gerrit.server.config.GetServerInfo.toBoolean(isNoteDbEnabled()); info.plugin = getPluginInfo(); if (java.nio.file.Files.exists(sitePaths.site_theme)) { info.defaultTheme = getPluginInfo(); if (java.nio.file.Files.exists(sitePaths.site_theme)) { info.sshd = getSuggestInfo(config); } info.suggest = getSuggestInfo(config); java.util.Map<java.lang.String, java.lang.String> urlAliases = getUrlAliasesInfo(config); info.urlAliases =!(urlAliases.isEmpty()))? urlAliases : null; info.receive = getUserInfo(); return info; }
@java.lang.Override public com.google.gerrit.extensions.common.ServerInfo apply(com.google.gerrit.server.config.ConfigResource rsrc) throws java.net.MalformedURLException { com.google.gerrit.extensions.common.ServerInfo info = new com.google.gerrit.extensions.common.ServerInfo(); info.accounts = getAccountsInfo(authConfig); info.auth = getAuthInfo(authConfig, realm); info.change = getDownloadInfo(config); info.download = getDownloadInfo(downloadSchemes, downloadCommands, cloneCommands, archiveFormats); info.gerrit = getGerritInfo(config, allProjectsName, allUsersName); info.noteDbEnabled = com.google.gerrit.server.config.GetServerInfo.toBoolean(isNoteDbEnabled()); info.plugin = getPluginInfo(); if (java.nio.file.Files.exists(sitePaths.site_theme)) { info.defaultTheme = getPluginInfo(); if (java.nio.file.Files.exists(sitePaths.site_theme)) { info.sshd = getSuggestInfo(config); } info.suggest = getSuggestInfo(config); java.util.Map<java.lang.String, java.lang.String> urlAliases = getUrlAliasesInfo(config); info.urlAliases =!(urlAliases.isEmpty()))? urlAliases : null; info.receive = getUserInfo(anonymousCowardName); info.receive = getReceiveInfo(); return info; }
@java.lang.Override public com.google.gerrit.extensions.common.ServerInfo apply(com.google.gerrit.server.config.ConfigResource rsrc) throws java.net.MalformedURLException { com.google.gerrit.extensions.common.ServerInfo info = new com.google.gerrit.extensions.common.ServerInfo(); info.accounts = getAccountsInfo(authConfig); info.auth = getAuthInfo(authConfig, realm); info.change = getDownloadInfo(config); info.download = getDownloadInfo(downloadSchemes, downloadCommands, cloneCommands, archiveFormats); info.gerrit = getGerritInfo(config, allProjectsName, allUsersName); info.noteDbEnabled = com.google.gerrit.server.config.GetServerInfo.toBoolean(isNoteDbEnabled()); info.plugin = getPluginInfo(); if (java.nio.file.Files.exists(sitePaths.site_theme)) { info.defaultTheme = getPluginInfo(); if (java.nio.file.Files.exists(sitePaths.site_theme)) { info.sshd = getSuggestInfo(config); } info.suggest = getSuggestInfo(config); java.util.Map<java.lang.String, java.lang.String> urlAliases = getUrlAliasesInfo(config); info.urlAliases = getUrlAliasesInfo(config); info.urlAliases =!(urlAliases.isEmpty()))? urlAliases : null; info.receive = getReceiveInfo(); return info; }
@java.lang.Override public com.google.gerrit.extensions.common.ServerInfo apply(com.google.gerrit.server.config.ConfigResource rsrc) throws java.net.MalformedURLException { com.google.gerrit.extensions.common.ServerInfo info = new com.google.gerrit.extensions.common.ServerInfo(); info.accounts = getAccountsInfo(authConfig); info.auth = getAuthInfo(authConfig, realm); info.change = getDownloadInfo(config); info.download = getDownloadInfo(downloadSchemes, downloadCommands, cloneCommands, archiveFormats); info.gerrit = getGerritInfo(config, allProjectsName, allUsersName); info.noteDbEnabled = com.google.gerrit.server.config.GetServerInfo.toBoolean(isNoteDbEnabled()); info.plugin = getPluginInfo(); if (java.nio.file.Files.exists(sitePaths.site_theme)) { info.defaultTheme = getPluginInfo(); if (java.nio.file.Files.exists(sitePaths.site_theme)) { info.sshd = getSuggestInfo(config); } info.suggest = getSuggestInfo(config); java.util.Map<java.lang.String, java.lang.String> urlAliases = getUrlAliasesInfo(config); info.urlAliases =!(urlAliases.isEmpty()))? urlAliases : null; info.urlAliases = getUserInfo(anonymousCowardName); info.receive = getReceiveInfo(); return info; }
@java.lang.Override public com.google.gerrit.extensions.common.ServerInfo apply(com.google.gerrit.server.config.ConfigResource rsrc) throws java.net.MalformedURLException { com.google.gerrit.extensions.common.ServerInfo info = new com.google.gerrit.extensions.common.ServerInfo(); info.accounts = getAccountsInfo(authConfig); info.auth = getAuthInfo(authConfig, realm); info.change = getDownloadInfo(config); info.download = getDownloadInfo(downloadSchemes, downloadCommands, cloneCommands, archiveFormats); info.gerrit = getGerritInfo(config, allProjectsName, allUsersName); info.noteDbEnabled = com.google.gerrit.server.config.GetServerInfo.toBoolean(isNoteDbEnabled()); info.plugin = getPluginInfo(); if (java.nio.file.Files.exists(sitePaths.site_theme)) { info.defaultTheme = getPluginInfo(); if (java.nio.file.Files.exists(sitePaths.site_theme)) { info.sshd = getSuggestInfo(config); } info.suggest = getSuggestInfo(config); java.util.Map<java.lang.String, java.lang.String> urlAliases = getUrlAliasesInfo(config); info.urlAliases =!(urlAliases.isEmpty()))? urlAliases : null; info.receive = getReceiveInfo(anonymousCowardName); info.receive = getReceiveInfo(); return info; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ChildProjectResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.RestView<com.google.gerrit.server.project.ChildProjectResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource>> views() throws com.google.gerrit.extensions.restapi.RestApiException { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource>> views() { return views; }
@java.lang.Override public void check() throws com.google.gerrit.server.StartupException { java.lang.String invalid = cfg.getSubsections("groups").stream().filter(( sub) -> { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(sub); com.google.gerrit.server.account.GroupBackend groupBackend = util.group(uuid); return (group == null)? uuid.get(uuid)) : ("'" + uuid.get(uuid)) + "'").collect(java.util.stream.Collectors.toSet(java.util.Collectors.joining(", uuid)); if (!(invalidators.isEmpty())) { throw new com.google.gerrit.server.project.NoSuchProjectException(java.lang.String.format(("No such account '%s in '" + invalid) + "' are invalid' in the following ") + invalid) + "' are not remove '\n')); } }
@java.lang.Override public void check() throws com.google.gerrit.server.StartupException { java.lang.String invalid = cfg.getSubsections("groups").stream().filter(( sub) -> { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(sub); com.google.gerrit.server.account.GroupBackend groupBackend = util.group(uuid); return (group == null)? uuid.get(uuid)) : ("'" + uuid.get(uuid)) + "'").collect(java.util.stream.Collectors.toSet(java.util.Collectors.joining(", uuid)); if (!(invalidators.isEmpty())) { throw new com.google.gerrit.server.project.NoSuchProjectException(java.lang.String.format(("No such account '%s in '" + invalid) + "' are invalid' in the following ") + invalid) + "' are not remove '\n")); } }
@java.lang.Override public void check() throws com.google.gerrit.server.StartupException { java.lang.String invalid = cfg.getSubsections("groups").stream().filter(( sub) -> { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(sub); com.google.gerrit.server.account.GroupBackend groupBackend = util.group(uuid); return (group == null)? uuid.get(uuid)) : ("'" + uuid.get(uuid)) + "'").collect(java.util.stream.Collectors.toSet(java.util.Collectors.joining(", uuid)); if (!(invalidators.isEmpty())) { throw new com.google.gerrit.server.project.NoSuchProjectException(java.lang.String.format(("No such account '%s in '" + invalid) + "' are invalid' in the following ") + invalid) + "' are not remove '\n"), gerrit.accounts().toString()); } }
@java.lang.Override public void check() throws com.google.gerrit.server.StartupException { java.lang.String invalid = cfg.getSubsections("groups").stream().filter(( sub) -> { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(sub); com.google.gerrit.server.account.GroupBackend groupBackend = util.group(uuid); return (group == null)? uuid.get(uuid)) : ("'" + uuid.get(uuid)) + "'").collect(java.util.stream.Collectors.toSet(java.util.Collectors.joining(", uuid)); if (!(invalidators.isEmpty())) { throw new com.google.gerrit.server.project.NoSuchProjectException(java.lang.String.format(("No such account '%s in '" + invalid) + "' are invalid' in the following ") + invalid) + "' are not remove '\n"), gerrit.config.urls().toString()); } }
@java.lang.Override public void check() throws com.google.gerrit.server.StartupException { java.lang.String invalid = cfg.getSubsections("groups").stream().filter(( sub) -> { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(sub); com.google.gerrit.server.account.GroupBackend groupBackend = util.group(uuid); return (group == null)? uuid.get(uuid)) : ("'" + uuid.get(uuid)) + "'").collect(java.util.stream.Collectors.toSet(java.util.Collectors.joining(", uuid)); if (!(invalidators.isEmpty())) { throw new com.google.gerrit.server.project.NoSuchProjectException(java.lang.String.format(("No such account '%s in '" + invalid) + "' are invalid' in the following ") + invalid) + "' are not remove '\n"), gerrit.accounts.format(validators.format(("Users '%s in '" + invalid"), gerrit.config)); } }
@org.kohsuke.args4j.Option(name = "--query", aliases = { "-q" }, metaVar = "CNT", usage = "add to lookup group") void addGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { addGroup(uuid); }
@org.kohsuke.args4j.Option(name = "--query", aliases = { "-q" }, metaVar = "CNT", usage = "add to lookup group") void addGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid); }
@org.kohsuke.args4j.Option(name = "--query", aliases = { "-q" }, metaVar = "CNT", usage = "--change-group"; }
@org.kohsuke.args4j.Option(name = "--query", aliases = { "-q" }, metaVar = "CNT", usage = "--change-group"; addGroup(uuid); }
@org.kohsuke.args4j.Option(name = "--query", aliases = { "-q" }, metaVar = "CNT", usage = "--change-Id"); addGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, uuid); }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.server.group.GroupResource rsrc = groups.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromDecoded(groupName)); com.google.gerrit.extensions.common.NameInput input = new com.google.gerrit.extensions.common.NameInput(); input.name = newGroups.apply(rsrc, input); putName.apply(rsrc, input); } catch (com.google.gerrit.extensions.restapi.RestApiException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw die(e); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.server.group.GroupResource rsrc = groups.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromDecoded(groupName)); com.google.gerrit.extensions.common.NameInput input = new com.google.gerrit.extensions.common.NameInput(); input.name = newGroups.apply(rsrc, input); putName.apply(rsrc, input); } catch (com.google.gerrit.extensions.restapi.RestApiException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw die(e); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.server.group.GroupResource rsrc = groups.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromDecoded(groupName)); com.google.gerrit.extensions.common.NameKey input = new com.google.gerrit.extensions.common.NameInput(); input.name = newGroups.apply(rsrc, input); putName.apply(rsrc, input); } catch (com.google.gerrit.extensions.restapi.RestApiException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw die(e); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.server.group.GroupResource rsrc = groups.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromDecoded(groupName)); com.google.gerrit.extensions.common.NameKey input = new com.google.gerrit.extensions.common.NameInput(); input.name = newGroups.apply(rsrc, input); putName.apply(rsrc, input); } catch (com.google.gerrit.extensions.restapi.RestApiException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw die(e); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.server.group.GroupResource rsrc = groups.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromDecoded(groupName)); com.google.gerrit.extensions.common.NameInput input = new com.google.gerrit.extensions.common.NameInput(); input.name = newGroups.apply(rsrc, input); putName.apply(rsrc, input); } catch (com.google.gerrit.extensions.restapi.RestApiException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw e; } }
private static java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> getGroupFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUUID).toList(); if ((accountGroups.size()) == 1) { return java.util.Optional.emptyList(); } else if (accountGroups.isEmpty()) { return java.util.Optional.emptyList(); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException(("Cannot apply group UUID " + groupUUID)); } }
private static java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> getGroupFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUUID).toList(); if ((accountGroups.size()) == 1) { return java.util.Optional.emptyList(); } else if (accountGroups.isEmpty()) { return java.util.Optional.emptyList(); } else if (accountGroups.isEmpty()) { return java.util.Optional.emptyList(); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException(("Cannot apply group UUID " + groupUUID)); } }
private static java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> getGroupFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUUID).toList(); if ((accountGroups.size()) == 1) { return java.util.Optional.of(accountGroups.get(com.google.common.collect.Iterables.getOnlyElement(accountGroups)); } else if (accountGroups.isEmpty()) { return java.util.Optional.emptyList(); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException(("Cannot apply group UUID " + groupUUID)); } }
private static java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> getGroupFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUUID).toList(); if ((accountGroups.size()) == 1) { return java.util.Optional.of(accountGroups.get(com.google.common.collect.Iterables.getOnlyElement(accountGroups)); } else if (accountGroups.isEmpty()) { return java.util.Optional.emptyList(); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException(("Cannot find account UUID " + groupUUID)); } }
private static java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> getGroupFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUUID).toList(); if ((accountGroups.size()) == 1) { return java.util.Optional.of(accountGroups.get(com.google.common.collect.Iterables.getOnlyElement(accountGroups)); } else if (accountGroups.isEmpty()) { return java.util.Optional.emptyList(); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException(("Cannot lookup group UUID " + groupUUID)); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.BranchResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.BranchResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.server.project.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.BranchResource> list() throws com.google.gerrit.extensions.restapi.BadRequestException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.BranchResource> list() throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.BranchResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.server.project.NoSuchProjectException(); }
@java.lang.Override public com.google.gerrit.server.project.FileResource parse(com.google.gerrit.server.project.BranchResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { return com.google.gerrit.server.project.FileResource.create(repoManager, parent.getProjectState(), org.eclipse.jgit.lib.ObjectId.fromString(parent.getRevision()), id.get()); }
@java.lang.Override public com.google.gerrit.server.project.FileResource parse(com.google.gerrit.server.project.BranchResource parent, com.google.gerrit.server.project.BranchResource parent) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { return com.google.gerrit.server.project.FileResource.create(repoManager, parent.getProjectState(), org.eclipse.jgit.lib.ObjectId.fromString(parent.getRevision()), id.get()); }
@java.lang.Override public com.google.gerrit.server.project.FileResource parse(com.google.gerrit.server.project.BranchResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.server.project.NoSuchFileException, java.io.IOException { return com.google.gerrit.server.project.FileResource.create(repoManager, parent.getProjectState(), org.eclipse.jgit.lib.ObjectId.fromString(parent.getRevision()), id.get()); }
@java.lang.Override public com.google.gerrit.server.project.FileResource parse(com.google.gerrit.server.project.BranchResource parent, com.google.gerrit.server.project.BranchResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { return com.google.gerrit.server.project.FileResource.create(repoManager, parent.getProjectState(), org.eclipse.jgit.lib.ObjectId.fromString(parent.getRevision()), id.get()); }
@java.lang.Override public com.google.gerrit.server.project.FileResource parse(com.google.gerrit.server.project.BranchResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { return com.google.gerrit.server.project.FileResource.create(repoManager, parent.getProjectState(), org.eclipse.jgit.lib.ObjectId.fromString(parent.getRevision().get()), id.get()); }
@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("groups", " + (staff.toConfigValue()))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationError()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationError()).containsExactly((("Account " + (staff.getName())) + " is not in ") + (GroupList.FILE_NAME))); }
@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("groups", " + (staff.toConfigValue()))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationError()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationError()).containsExactly((("account " + (staff.getName())) + " is not in ") + (GroupList.FILE_NAME))); }
@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("groups", " + (staff.toConfigValue()))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationError()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationError()).containsExactly((("Account " + (staff.getName())) + " is not in ") + (GroupList.FILE_NAME)) + " in ") + (GroupList.FILE_NAME))); }
@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("groups", " + (staff.toConfigValue()))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationError()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationError()).containsExactly((("Account " + (staff.getName())) + " is not in ") + (GroupList.FILE_NAME)) + " in ") + (AccountList.FILE_NAME))); }
@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("groups", " + (staff.toConfigValue()))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationError()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationError()).containsExactly((("Account " + (staff.getName())) + " is not in ") + (GroupList.FILE_NAME)) + " in ") + (groupList.FILE_NAME))); }
@org.junit.Test public void editConfigMissingGroupTableEntry() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("groups", "exclusiveGroup\n"); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.common.data.AccessSection section = cfg.getAccessSection("refs/heads/*"); com.google.gerrit.common.data.AccessSection section = cfg.getAccessSection("refs/heads/*"); submit.add(new com.google.gerrit.common.data.PermissionRule(cfg.resolve(staff))).isEqualTo(Permission.SUBMIT); submit.add(new com.google.gerrit.common.data.PermissionRule(cfg.resolve(staff))); rev = commit(cfg); assertThat(text(rev, "project.config")).isEqualTo(((((("project.config\n" + " exclusiveGroupPermissions = read submit\n") + " submit = read submit\n") + " submit = read submit\n") + " submit = account\n") + " submit = accountCreator.config\n") + " upload = accountCreator.config")); }
@org.junit.Test public void editConfigMissingGroupTableEntry() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("groups", "exclusiveGroup\n"); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.common.data.AccessSection section = cfg.getAccessSection("refs/heads/*"); com.google.gerrit.common.data.AccessSection section = cfg.getAccessSection("refs/heads/*"); submit.add(new com.google.gerrit.common.data.PermissionRule(cfg.resolve(staff))).isEqualTo(Permission.SUBMIT); submit.add(new com.google.gerrit.common.data.PermissionRule(cfg.resolve(staff))); rev = commit(cfg); assertThat(text(rev, "project.config")).isEqualTo(((((("project.config\n" + " exclusiveGroupPermissions = read submit\n") + " submit = read submit\n") + " submit = read submit\n") + " submit = account\n") + " upload = accountCreator.config\n") + " upload = account\n") + " upload = accountCreator.config\n")); }
@org.junit.Test public void editConfigMissingGroupTableEntry() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("groups", "exclusiveGroup\n"); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.common.data.AccessSection section = cfg.getAccessSection("refs/heads/*"); com.google.gerrit.common.data.AccessSection section = cfg.getAccessSection("refs/heads/*"); submit.add(new com.google.gerrit.common.data.PermissionRule(cfg.resolve(staff))).isEqualTo(Permission.SUBMIT); submit.add(new com.google.gerrit.common.data.PermissionRule(cfg.resolve(staff))); rev = commit(cfg); assertThat(text(rev, "project.config")).isEqualTo(((((("project.config\n" + " exclusiveGroupPermissions = read submit\n") + " submit = read submit\n") + " submit = read submit\n") + " submit = account\n") + " upload = accountCreator.config\n") + " upload = account\n") + " upload = accountCreator.config")); }
@org.junit.Test public void editConfigMissingGroupTableEntry() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("groups", "exclusiveGroup\n"); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.common.data.AccessSection section = cfg.getAccessSection("refs/heads/*"); com.google.gerrit.common.data.AccessSection section = cfg.getAccessSection("refs/heads/*"); submit.add(new com.google.gerrit.common.data.PermissionRule(cfg.resolve(staff))).isEqualTo(Permission.SUBMIT); submit.add(new com.google.gerrit.common.data.PermissionRule(cfg.resolve(staff))); rev = commit(cfg); assertThat(text(rev, "project.config")).isEqualTo(((((("project.config\n" + " exclusiveGroupPermissions = read submit\n") + " submit = read submit\n") + " submit = read submit\n") + " submit = account\n") + " submit = accountCreator.config\n") + " upload = account\n") + " upload = accountCreator.config")); }
@org.junit.Test public void editConfigMissingGroupTableEntry() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("groups", "exclusiveGroup\n"); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.common.data.AccessSection section = cfg.getAccessSection("refs/heads/*"); com.google.gerrit.common.data.AccessSection section = cfg.getAccessSection("refs/heads/*"); submit.add(new com.google.gerrit.common.data.PermissionRule(cfg.resolve(staff))).isEqualTo(Permission.SUBMIT); submit.add(new com.google.gerrit.common.data.PermissionRule(cfg.resolve(staff))); rev = commit(cfg); assertThat(text(rev, "project.config")).isEqualTo(((((("project.config\n" + " exclusiveGroupPermissions = read submit\n") + " submit = read submit\n") + " submit = read submit\n") + " submit = account\n") + " submit = accountCreator.config\n") + " upload = account\n") + " upload = accountCreator.config\n")); }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.access.AccessResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.access.View<com.google.gerrit.server.access.AccessResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.access.AccessResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.access.View<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.access.AccessResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.access.RestView<com.google.gerrit.server.access.AccessResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.server.access.AccessResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.access.AccessResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.server.project.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.edit.AccessResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.auth.AccessResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.access.AccessResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.TagInfo apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.api.projects.TagInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Cannot merge " + (resource.getTagInfo().ref)) + "\" already exists")); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.TagInfo apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.api.projects.TagInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Tag \"" + (resource.getTagInfo().ref)) + "\" already exists")); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.TagInfo apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.api.projects.TagInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Cannot merge " + (resource.getTagInfo().ref)) + " already exists")); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.TagInfo apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.api.projects.TagInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Tag " + (resource.getTagInfo().ref)) + "\" already exists")); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.TagInfo apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.api.projects.TagInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Merge \"" + (resource.getTagInfo().ref)) + "\" already exists")); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { permissionBackend.user(user).ref(RefPermission.DELETE).check(RefPermission.DELETE); if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Project " + (rsrc.getBranchKey())) + " has open changes")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).prefix(com.google.gerrit.server.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { permissionBackend.user(user).ref(RefPermission.DELETE); if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Project " + (rsrc.getBranchKey())) + " has open changes")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).prefix(com.google.gerrit.server.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { permissionBackend.user(user).ref(RefPermission.DELETE).check(RefPermission.DELETE); if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Branch " + (rsrc.getBranchKey())) + " has open changes")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).prefix(com.google.gerrit.server.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { permissionBackend.user(user).ref(RefPermission.DELETE).check(RefPermission.DELETE); if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Project " + (rsrc.getBranchKey())) + " has open changes")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).database(com.google.gerrit.server.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { permissionBackend.user(user).ref(RefPermission.DELETE).check(RefPermission.DELETE); if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Project " + (rsrc.getBranchKey())) + " has open changes")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).prefix(com.google.gerrit.server.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }.delete();
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource) { return com.google.gerrit.server.group.GroupOptions.createOptions(resource.getGroup()); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource) { return com.google.gerrit.server.group.GroupOptions.create(resource.getGroup()); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource) { return com.google.gerrit.server.group.GroupJson.createOptions(resource.getGroup()); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupOptions apply(com.google.gerrit.server.group.GroupResource resource) { return com.google.gerrit.server.group.GroupOptions.createOptions(resource.getGroup()); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupOptions apply(com.google.gerrit.server.group.GroupResource resource) { return com.google.gerrit.server.group.GroupOptions.create(resource.getGroup()); }
@org.kohsuke.args4j.Option(name = "-o", usage = "add options") public void addOption(com.google.gerrit.extensions.client.ListGroupsOption o) { options.add(o); }
@org.kohsuke.args4j.Option(name = "-o", usage = "add options") void addOption(com.google.gerrit.extensions.client.ListGroupsOption o) { options.add(o); }
@org.kohsuke.args4j.Option(name = "-o", usage = "add options") public void addOption(com.google.gerrit.extensions.client.ListGroups option) { options.add(o); }
@org.kohsuke.args4j.Option(name = "-o", usage = "add options") public void addOption(com.google.gerrit.extensions.client.GroupsOption o) { options.add(o); }
@org.kohsuke.args4j.Option(name = "-o", usage = "add options") public void addOption(com.google.gerrit.extensions.client.ListGroupsOption o) { options.add(o.getName()); }
@org.kohsuke.args4j.Option(name = "--query2", aliases = { "-q2" }, usage = "query2" }, usage = "query2" }) public void setQuery(java.lang.String query) { this.query = query; }
@org.kohsuke.args4j.Option(name = "--query2", aliases = { "-q2" }, metaVar = "query2" }, usage = "query2" }, usage = { this.query = query; }
@org.kohsuke.args4j.Option(name = "--query2", aliases = { "-q2" }, usage = "query2" }, usage = "query2" }, usage = "query to query") public void setQuery(java.lang.String query) { this.query = query; }
@org.kohsuke.args4j.Option(name = "--query2", aliases = { "-q2" }, usage = "query2" }, usage = "query2" }) public void setQuery(java.lang.String query) { this. query = query; }
@org.kohsuke.args4j.Option(name = "--query2", aliases = { "-q2" }, usage = "query2" }, usage = "query2" }, usage = "query to query") public void setQuery(java.lang.String query) { this. query = query; }
@java.lang.Override public com.google.gerrit.extensions.api.projects.DashboardInfo apply(com.google.gerrit.server.project.DashboardResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if ((inherited) && (!(rsrc.isProjectDefault()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("project must be specified"); } if (rsrc.isProjectDefault()) { rsrc = defaultOf(rsrc.getProjectState(), rsrc.getUser()); } if (rsrc.isProjectDefault()) { try { rsrc = defaultOf(rsrc.getProjectState(), rsrc.getUser()); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } return com.google.gerrit.server.project.DashboardsCollection.parse(rsrc.getProjectState().getProject(), rsrc.getRefName(), rsrc.getConfig(), rsrc.getConfig(), rsrc.getConfig().getName(), rsrc.getConfig(), rsrc.getConfig(), rsrc.getConfig().getProjectState(), true); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.DashboardInfo apply(com.google.gerrit.server.project.DashboardResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if ((inherited) && (!(rsrc.isProjectDefault()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("project must be specified"); } if (rsrc.isProjectDefault()) { rsrc = defaultOf(rsrc.getProjectState(), rsrc.getUser()); } if (rsrc.isProjectDefault()) { try { rsrc = defaultOf(rsrc.getProjectState(), rsrc.getUser()); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } } return com.google.gerrit.server.project.DashboardsCollection.parse(rsrc.getProjectState().getProject(), rsrc.getRefName(), rsrc.getConfig(), rsrc.getConfig(), rsrc.getConfig().getName(), rsrc.getConfig().getName(), rsrc.getProjectState(), rsrc.getConfig().getName(), true); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.DashboardInfo apply(com.google.gerrit.server.project.DashboardResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if ((inherited) && (!(rsrc.isProjectDefault()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("project must be specified"); } if (rsrc.isProjectDefault()) { rsrc = defaultOf(rsrc.getProjectState(), rsrc.getUser()); } if (rsrc.isProjectDefault()) { try { rsrc = defaultOf(rsrc.getProjectState(), rsrc.getUser()); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } return com.google.gerrit.server.project.DashboardsCollection.parse(rsrc.getProjectState().getProject(), rsrc.getRefName(), rsrc.getConfig(), rsrc.getConfig(), rsrc.getConfig().getName(), rsrc.getConfig(), rsrc.getConfig(), rsrc.getConfig().getProjectState(), rsrc.getConfig().getName(), true); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.DashboardInfo apply(com.google.gerrit.server.project.DashboardResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if ((inherited) && (!(rsrc.isProjectDefault()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("project must be specified"); } if (rsrc.isProjectDefault()) { rsrc = defaultOf(rsrc.getProjectState(), rsrc.getUser()); } if (rsrc.isProjectDefault()) { try { rsrc = defaultOf(rsrc.getProjectState(), rsrc.getUser()); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } } return com.google.gerrit.server.project.DashboardsCollection.parse(rsrc.getProjectState().getProject(), rsrc.getRefName(), rsrc.getConfig(), rsrc.getConfig(), rsrc.getConfig().getName(), rsrc.getConfig().getName(), rsrc.getProjectState(), rsrc.getConfig().getName(), rsrc.getConfig().getProjectState(), true); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.DashboardInfo apply(com.google.gerrit.server.project.DashboardResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if ((inherited) && (!(rsrc.isProjectDefault()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("project must be specified"); } if (rsrc.isProjectDefault()) { rsrc = defaultOf(rsrc.getProjectState(), rsrc.getUser()); } if (rsrc.isProjectDefault()) { try { rsrc = defaultOf(rsrc.getProjectState(), rsrc.getUser()); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } } return com.google.gerrit.server.project.DashboardsCollection.parse(rsrc.getProjectState().getProject(), rsrc.getRefName(), rsrc.getConfig(), rsrc.getConfig(), rsrc.getConfig().getName(), rsrc.getConfig().getName(), rsrc.getProjectState(), rsrc.getConfig().getName(), rsrc.getConfig().getProjectState(), rsrc.getConfig().getName(), true); }
private com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String id = projectState.getProject().getDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { return parse(projectState, user, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
private com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String id = projectState.getProject().getDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return parse(project, user, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
private com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String id = projectState.getProject().getDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
private com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String id = projectState.getProject().getDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
private com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String id = projectState.getProject().getDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(project, user, id); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState project, com.google.gerrit.server.CurrentUser user, java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id)); java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(0)); return dashboards.parse(new com.google.gerrit.server.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.UrlString.fromUrl(((ref + ':') + path))); }
private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').split(2).split(id)); java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(0)); return dashboards.parse(new com.google.gerrit.server.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.UrlString.fromUrl(((ref + ':') + path))); }
private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState project, com.google.gerrit.server.CurrentUser user, java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').split(2).split(id)); java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(0)); return dashboards.parse(new com.google.gerrit.server.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.UrlString.fromUrl(((ref + ':') + path))); }
private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id)); java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(0)); return dashboards.parse(new com.google.gerrit.server.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.UrlString.fromUrl(((ref + ':') + path))); }
private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').split(2).split(id).split(id)); java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(1)); return dashboards.parse(new com.google.gerrit.server.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.UrlString.fromUrl(((ref + ':') + path))); }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.RobotCommentResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.PostCommentResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.ChangeResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RobotCommentInfo>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.RobotCommentResource>> views() { return views; }
@org.junit.Test public void byOwner() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo ownerGroup = createGroup(name("owner")); com.google.gerrit.extensions.common.GroupInfo group = createGroupWithOwner(name("group"), ownerGroup); createGroup(name); assertQuery(("owner:group2")); assertQuery(("owner:" + (group.id))); assertQuery(("owner:" + (ownerGroup.id)), group, ownerGroup); assertQuery(("owner:" + (ownerGroup.name)), group, ownerGroup); }
@org.junit.Test public void byOwner() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo ownerGroup = createGroup(name("owner")); com.google.gerrit.extensions.common.GroupInfo group = createGroupWithOwner(name("group"), ownerGroup); createGroup(name); assertQuery(("owner:group2")); assertQuery(("owner:" + (group.id))); assertQuery(("owner:" + (ownerGroup.id)), group, ownerGroup); assertQuery(("owner:" + (ownerGroup.name)), group, group); }
@org.junit.Test public void byOwner() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo ownerGroup = createGroup(name("owner")); com.google.gerrit.extensions.common.GroupInfo group = createGroupWithOwner(name("group"), ownerGroup); createGroup(name); assertQuery(("owner:" + (group.id))); assertQuery(("owner:" + (ownerGroup.id))); assertQuery(("owner:" + (ownerGroup.id)), group, ownerGroup); assertQuery(("owner:" + (ownerGroup.name)), group, group); }
@org.junit.Test public void byOwner() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo ownerGroup = createGroup(name("owner")); com.google.gerrit.extensions.common.GroupInfo group = createGroupWithOwner(name("group"), ownerGroup); createGroup(name); assertQuery(("owner:" + (group.id))); assertQuery(("owner:" + (ownerGroup.id))); assertQuery(("owner:" + (ownerGroup.id)), group, ownerGroup); assertQuery(("owner:group:" + (ownerGroup.name)), group, group); }
@org.junit.Test public void byOwner() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo ownerGroup = createGroup(name("owner")); com.google.gerrit.extensions.common.GroupInfo group = createGroupWithOwner(name("group"), ownerGroup); createGroup(name); assertQuery(("owner:" + (group.id))); assertQuery(("owner:" + (ownerGroup.id))); assertQuery(("owner:" + (ownerGroup.id)), group, ownerGroup); assertQuery(("owner:" + (ownerGroup.name)), group, group, group); }
@java.lang.Override public com.google.gerrit.server.change.RobotCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String uuid = id.get(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); for (com.google.gerrit.reviewdb.client.RobotComment c : commentsUtil.robotCommentsByPatchSet(notes.getPatchSet().getId())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.change.RobotCommentResource(id, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.change.RobotCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String uuid = id.get(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); for (com.google.gerrit.reviewdb.client.RobotComment c : commentsUtil.robotCommentsByPatchSet(notes, rev.getPatchSet().getId())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.change.RobotCommentResource(id, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.change.RobotCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String uuid = id.get(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); for (com.google.gerrit.reviewdb.client.RobotComment c : commentsUtil.robotCommentsByPatchSet(notes.getPatchSet().getId())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.change.RobotCommentResource(id, c); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.server.change.RobotCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String uuid = id.get(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); for (com.google.gerrit.reviewdb.client.RobotComment c : commentsUtil.robotCommentsByPatchSet(notes.getPatchSet().getId())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.change.RobotCommentResource(id, c); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } throw new com.google.gwtorm.server.OrmException(id); }
@java.lang.Override public com.google.gerrit.server.change.RobotCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String uuid = id.get(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); for (com.google.gerrit.reviewdb.client.RobotComment c : commentsUtil.robotCommentsByPatchSet(notes.getPatchSet().getId())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.change.RobotCommentResource(id, c); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } throw new com.google.gerrit.server.project.NoSuchChangeException(id); }
@org.junit.Test public void byName() throws java.lang.Exception { assertQuery("name:non-existing"); group = createGroup(name("Group")); assertQuery(("name:" + (group.name)), group); assertQuery(("name:" + (group.name.toLowerCase(Locale.USERS)))); groupWithGreater = createGroup(name); createGroup(name); assertQuery(("name-match-match-match-with-match-match-match-with"))); }
@org.junit.Test public void byName() throws java.lang.Exception { assertQuery("name:non-existing"); group = createGroup(name("Group")); assertQuery(("name:" + (group.name)), group); assertQuery(("name:" + (group.name.toLowerCase(Locale.USERS)))); groupWithGreater = createGroup(name); createGroup(name); assertQuery(("name-match-match-with-match-match-match-match-with"))); }
@org.junit.Test public void byName() throws java.lang.Exception { assertQuery("name:non-existing"); group = createGroup(name("Group")); assertQuery(("name:" + (group.name)), group); assertQuery(("name:" + (group.name.toLowerCase(Locale.USERS)))); groupWithGreater = createGroup(name); createGroup(name); assertQuery(("name-match-match-match-with-match-match-match-match-with"))); }
@org.junit.Test public void byName() throws java.lang.Exception { assertQuery("name:non-existing"); group = createGroup(name("Group")); assertQuery(("name:" + (group.name)), group); assertQuery(("name:" + (group.name.toLowerCase(Locale.USERS)))); groupWithGreater = createGroup(name); createGroup(name); assertQuery(("name-match-match-match-with-match-match-match-with-match-match-with"))); }
@org.junit.Test public void byName() throws java.lang.Exception { assertQuery("name:non-existing"); group = createGroup(name("Group")); assertQuery(("name:" + (group.name)), group); assertQuery(("name:" + (group.name.toLowerCase(Locale.USERS)))); groupWithGreater = createGroup(name); createGroup(name); assertQuery(("name-match-match-match-with-match-match-match-with-match-match-match"))); }
@org.junit.Test public void byDefaultField() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name("foo-account" + "foo-account-account")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroup(name("group2"); com.google.gerrit.extensions.common.GroupInfo group3 = createGroupWithDescription(name("group3"), ("group3 must contain a group2\n" + "group2"), (group2.id))); assertQuery("foo", group3, group3); assertQuery("foo", group2, group2); assertQuery("foo", group2, group2); }
@org.junit.Test public void byDefaultField() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name("foo-account" + "foo-account-account")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroup(name("group2"); com.google.gerrit.extensions.common.GroupInfo group3 = createGroupWithDescription(name("group3"), ("group3 must contain a group2\n" + "group2"), (group2.id))); assertQuery("foo", group3, group3); assertQuery("foo", group2, group3); assertQuery("foo", group2, group2); }
@org.junit.Test public void byDefaultField() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name("foo-account" + "foo-account-account")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroup(name("group2"); com.google.gerrit.extensions.common.GroupInfo group3 = createGroupWithDescription(name("group3"), ("group3 must contain a group2\n" + "group2"), group3); assertQuery("foo", group3, group3); assertQuery("foo", group2, group3); assertQuery("foo", group2, group2); }
@org.junit.Test public void byDefaultField() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name("foo-account" + "foo-account-account")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroup(name("group2"); com.google.gerrit.extensions.common.GroupInfo group3 = createGroupWithDescription(name("group3"), ("group3 must contain a group2\n" + "group2"), group3); assertQuery("foo", group3, group3); assertQuery("foo", group2, group2); assertQuery("foo", group2, group2); }
@org.junit.Test public void byDefaultField() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name("foo-account" + "foo-account-account")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroup(name("group2"); com.google.gerrit.extensions.common.GroupInfo group3 = createGroupWithDescription(name("group3"), ("group3 must contain a group2\n" + "group2"), group3); assertQuery("foo", group3, group3); assertQuery("foo", group2, group3); assertQuery("foo", group2, group3); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String path = rsrc.getPatchKey().get(); if (Patch.COMMIT_MSG.equals(path)) { java.lang.String msg = getMessage(rsrc.getRevision().getChangeResource().getNotes()); return com.google.gerrit.extensions.restapi.BinaryResult.create(msg).setContentType(FileContentUtil.TEXT_X_X_MESSAGE_MESSAGE).base64(); } else if (Patch.MERGE_LIST.equals(path)) { byte[] mergeList = getMergeList(rsrc.getRevision().getNotes()); return com.google.gerrit.extensions.restapi.BinaryResult.create(mergeList).setContentType(FileContentUtil.TEXT_X_GERRIT_MERGE_LIST).base64(); } return fileContentUtil.getContent(projectCache.checkedGet(rsrc.getRevision().getProject()), org.eclipse.jgit.lib.ObjectId.fromString(rsrc.getRevision().getRevision().get()), path, parent); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String path = rsrc.getPatchKey().get(); if (Patch.COMMIT_MSG.equals(path)) { java.lang.String msg = getMessage(rsrc.getRevision().getNotes()); return com.google.gerrit.extensions.restapi.BinaryResult.create(msg).setContentType(FileContentUtil.TEXT_X_GERRIT_MERGE_MESSAGE_MESSAGE).base64(); } else if (Patch.MERGE_LIST.equals(path)) { byte[] mergeList = getMergeList(rsrc.getRevision().getNotes()); return com.google.gerrit.extensions.restapi.BinaryResult.create(mergeList).setContentType(FileContentUtil.TEXT_X_GERRIT_MERGE_LIST).base64(); } return fileContentUtil.getContent(projectCache.checkedGet(rsrc.getRevision().getProject()), org.eclipse.jgit.lib.ObjectId.fromString(rsrc.getRevision().getRevision().get()), path, parent); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String path = rsrc.getPatchKey().get(); if (Patch.COMMIT_MSG.equals(path)) { java.lang.String msg = getMessage(rsrc.getRevision().getChangeResource().getNotes()); return com.google.gerrit.extensions.restapi.BinaryResult.create(msg).setContentType(FileContentUtil.TEXT_X_GERRIT_MESSAGE_MESSAGE).base64(); } else if (Patch.MERGE_LIST.equals(path)) { byte[] mergeList = getMergeList(rsrc.getRevision().getNotes()); return com.google.gerrit.extensions.restapi.BinaryResult.create(mergeList).setContentType(FileContentUtil.TEXT_X_GERRIT_MERGE_LIST).base64(); } return fileContentUtil.getContent(projectCache.checkedGet(rsrc.getRevision().getProject()), org.eclipse.jgit.lib.ObjectId.fromString(rsrc.getRevision().getRevision().get()), path, parent); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String path = rsrc.getPatchKey().get(); if (Patch.COMMIT_MSG.equals(path)) { java.lang.String msg = getMessage(rsrc.getRevision().getChangeResource().getNotes()); return com.google.gerrit.extensions.restapi.BinaryResult.create(msg).setContentType(FileContentUtil.TEXT_X_GERRIT_MERGE_MESSAGE).base64(); } else if (Patch.MERGE_LIST.equals(path)) { byte[] mergeList = getMergeList(rsrc.getRevision().getNotes()); return com.google.gerrit.extensions.restapi.BinaryResult.create(mergeList).setContentType(FileContentUtil.TEXT_X_GERRIT_MERGE_LIST).base64(); } return fileContentUtil.getContent(projectCache.checkedGet(rsrc.getRevision().getProject()), org.eclipse.jgit.lib.ObjectId.fromString(rsrc.getRevision().getRevision().get()), path, parent); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String path = rsrc.getPatchKey().get(); if (Patch.COMMIT_MSG.equals(path)) { java.lang.String msg = getMessage(rsrc.getRevision().getChangeResource().getNotes()); return com.google.gerrit.extensions.restapi.BinaryResult.create(msg).setContentType(FileContentUtil.TEXT_X_GERRIT_MESSAGE_MESSAGE).base64(); } else if (Patch.MERGE_LIST.equals(path)) { byte[] mergeList = getMergeList(rsrc.getRevision().getNotes()); return com.google.gerrit.extensions.restapi.BinaryResult.create(mergeList).setContentType(FileContentUtil.TEXT_X_X_GERRIT_MERGE_LIST).base64(); } return fileContentUtil.getContent(projectCache.checkedGet(rsrc.getRevision().getProject()), org.eclipse.jgit.lib.ObjectId.fromString(rsrc.getRevision().getRevision().get()), path, parent); }
@org.junit.Test public void fixUpCommitPostAuditsAllAuditsAllAuditsOnAuditEvents() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); java.util.Intstream(0, 20).forEach(( i) -> i).forEach(( i) -> com.google.gerrit.common.TimeUtil.nowTs()); java.sql.Timestamp future = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.testutil.TestTimeUtil.resetWithClockStep(1, java.util.concurrent.TimeUnit.SECONDS); com.google.gerrit.server.group.GroupBranchBundle b = com.google.gerrit.server.group.GroupRebuilderTest.builder().group(g); com.google.gerrit.server.group.GroupBranchBundle b = com.google.gerrit.server.group.GroupRebuilderTest.Builder.Builder b = new com.google.gerrit.server.group.GroupRebuilderTest.Builder(g); checker(g); assertThat(log).hasSize(addId(addId(g, "x", 8"), byId(g, "x")).build(); rebuilder.rebuild(g), b, null); assertThat(log).hasSize(3); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log.get(g); assertThat(log.get(1), "I").isEqualTo(c.committer.date).isEqualTo(toImmutableList()); assertThat(log.get(2).named("%s", c.committer.date).isEqualTo(toImmutableList()); assertThat(com.google.gerrit.common.TimeUtil.nowTs()).isEqualTo(future); }
@org.junit.Test public void fixUpCommitPostAuditsAllAuditsAllAuditsOnAuditEvents() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); java.util.Intstream(0, 20).forEach(( i) -> i).forEach(( i) -> com.google.gerrit.common.TimeUtil.nowTs()); java.sql.Timestamp future = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.testutil.TestTimeUtil.resetWithClockStep(1, java.util.concurrent.TimeUnit.SECONDS); com.google.gerrit.server.group.GroupBranchBundle b = com.google.gerrit.server.group.GroupRebuilderTest.builder().group(g); com.google.gerrit.server.group.GroupBranchBundle b = com.google.gerrit.server.group.GroupRebuilderTest.Builder.Builder b = new com.google.gerrit.server.group.GroupRebuilderTest.Builder(g); checker(g); assertThat(log).hasSize(addId(addId(g, "x", 8"), byId(g, "x")).build(); rebuilder.rebuild(g), b, null); assertThat(log).hasSize(3); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log.get(g); assertThat(log.get(1), "I").isEqualTo(c.committer.date).isEqualTo(toImmutableList()); assertThat(log.get(2).named("%s", c.committer.date).isEqualTo(toImmutableList()); assertThat(com.google.gerrit.common.TimeUtil.nowTs()).containsExactly(toImmutableList)).isEqualTo(log); }
@org.junit.Test public void fixUpCommitPostAuditsAllAuditsAllAuditsOnAuditEvents() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); java.util.Intstream(0, 20).forEach(( i) -> i).forEach(( i) -> com.google.gerrit.common.TimeUtil.nowTs()); java.sql.Timestamp future = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.testutil.TestTimeUtil.resetWithClockStep(1, java.util.concurrent.TimeUnit.SECONDS); com.google.gerrit.server.group.GroupBranchBundle b = com.google.gerrit.server.group.GroupRebuilderTest.builder().group(g); com.google.gerrit.server.group.GroupBranchBundle b = com.google.gerrit.server.group.GroupRebuilderTest.Builder.Builder b = new com.google.gerrit.server.group.GroupRebuilderTest.Builder(g); checker(g); assertThat(log).hasSize(addId(addId(g, "x", 8"), byId(g, "x")).build(); rebuilder.rebuild(g), b, null); assertThat(log).hasSize(3); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log.get(g); assertThat(log.get(1), "I").isEqualTo(c.committer.date).isEqualTo(toImmutableList()); assertThat(log.get(2).named("%s", c.committer.date).isEqualTo(toImmutableList()); assertThat(com.google.gerrit.common.TimeUtil.nowTs()).containsExactly(toImmutableList)).isEqualTo(log.get(project); }
@org.junit.Test public void fixUpCommitPostAuditsAllAuditsAllAuditsOnAuditEvents() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); java.util.Intstream(0, 20).forEach(( i) -> i).forEach(( i) -> com.google.gerrit.common.TimeUtil.nowTs()); java.sql.Timestamp future = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.testutil.TestTimeUtil.resetWithClockStep(1, java.util.concurrent.TimeUnit.SECONDS); com.google.gerrit.server.group.GroupBranchBundle b = com.google.gerrit.server.group.GroupRebuilderTest.builder().group(g); com.google.gerrit.server.group.GroupBranchBundle b = com.google.gerrit.server.group.GroupRebuilderTest.Builder.Builder b = new com.google.gerrit.server.group.GroupRebuilderTest.Builder(g); checker(g); assertThat(log).hasSize(addId(addId(g, "x", 8"), byId(g, "x")).build(); rebuilder.rebuild(g), b, null); assertThat(log).hasSize(3); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log.get(g); assertThat(log.get(1), "I").isEqualTo(c.committer.date).isEqualTo(toImmutableList()); assertThat(log.get(2).named("%s", c.committer.date).isEqualTo(toImmutableList()); assertThat(com.google.gerrit.common.TimeUtil.nowTs()).containsExactly(toImmutableList)).isEqualTo(log.get(future); }
@org.junit.Test public void fixUpCommitPostAuditsAllAuditsAllAuditsOnAuditEvents() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); java.util.Intstream(0, 20).forEach(( i) -> i).forEach(( i) -> com.google.gerrit.common.TimeUtil.nowTs()); java.sql.Timestamp future = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.testutil.TestTimeUtil.resetWithClockStep(1, java.util.concurrent.TimeUnit.SECONDS); com.google.gerrit.server.group.GroupBranchBundle b = com.google.gerrit.server.group.GroupRebuilderTest.builder().group(g); com.google.gerrit.server.group.GroupBranchBundle b = com.google.gerrit.server.group.GroupRebuilderTest.Builder.Builder b = new com.google.gerrit.server.group.GroupRebuilderTest.Builder(g); checker(g); assertThat(log).hasSize(addId(addId(g, "x", 8"), byId(g, "x")).build(); rebuilder.rebuild(g), b, null); assertThat(log).hasSize(3); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log.get(g); assertThat(log.get(1), "I").isEqualTo(c.committer.date).isEqualTo(toImmutableList()); assertThat(log.get(2).named("%s", c.committer.date).isEqualTo(toImmutableList()); assertThat(com.google.gerrit.common.TimeUtil.nowTs()).containsExactly(toImmutableList)).isEqualTo(log.get(toImmutableList()); }
@org.junit.Test public void memberAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); java.sql.Timestamp t2 = com.google.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.GroupBackend b = groupBackend.builder().group(g).members(g).member(addMember(g, 1, 8, t2).build(); rebuildAndRemove(repo, b, null, t2).build(); rebuild(repo, b, null, null); assertMigration.rebuild(g), b, null); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertThat(log.get(0), "Inserter")).hasSize(4); assertCommit(log.get(1), "2@gerrit-server-id1@example.com")); assertCommit(log.get(1), "Inserter"); assertCommit(log.get(2), "Change 2", "2 Last-id 2 "2@example.com")); assertCommit(log.get(2), "Change 2", "2@server/id1@example.com")); }
@org.junit.Test public void memberAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); java.sql.Timestamp t2 = com.google.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.GroupBackend b = groupBackend.builder().group(g).members(g).member(addMember(g, 1, 8, t2).build(); rebuildAndRemove(repo, b, null, t2).build(); rebuild(repo, b, null, null); assertMigration.rebuild(g), b, null); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertThat(log.get(0), "Inserter")).hasSize(4); assertCommit(log.get(1), "2@gerrit-server-id1@example.com")); assertCommit(log.get(1), "Inserter"); assertCommit(log.get(2), "Change 2", "2 Last-id 2 "2@example.com")); assertCommit(log.get(2), "Change 2", "2@server/id1@server/id")); }
@org.junit.Test public void memberAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); java.sql.Timestamp t2 = com.google.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.GroupBackend b = groupBackend.builder().group(g).members(g).member(addMember(g, 1, 8, t2).build(); rebuildAndRemove(repo, b, null, t2).build(); rebuild(repo, b, null, null); assertMigration.rebuild(g), b, null); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertThat(log.get(0), "Inserter")).hasSize(4); assertCommit(log.get(1), "2@gerrit-server-id1@example.com")); assertCommit(log.get(1), "Inserter"); assertCommit(log.get(2), "Change 2", "2 Last-id 2 "2@example.com")); assertCommit(log.get(2), "Change 2", "2@server/id1@server/id2"); }
@org.junit.Test public void memberAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); java.sql.Timestamp t2 = com.google.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.GroupBackend b = groupBackend.builder().group(g).members(g).member(addMember(g, 1, 8, t2).build(); rebuildAndRemove(repo, b, null, t2).build(); rebuild(repo, b, null, null); assertMigration.rebuild(g), b, null); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertThat(log.get(0), "Inserter")).hasSize(4); assertCommit(log.get(1), "2@gerrit-server-id1@example.com")); assertCommit(log.get(1), "Inserter"); assertCommit(log.get(2), "Change 2", "2 Last-id 2 "2@example.com")); assertCommit(log.get(2), "Change 2", "2@server/id1@example.com")); assertCommit(log.get(2), "Change-id 1 "2"); }
@org.junit.Test public void memberAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); java.sql.Timestamp t2 = com.google.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.GroupBackend b = groupBackend.builder().group(g).members(g).member(addMember(g, 1, 8, t2).build(); rebuildAndRemove(repo, b, null, t2).build(); rebuild(repo, b, null, null); assertMigration.rebuild(g), b, null); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertThat(log.get(0), "Inserter")).hasSize(4); assertCommit(log.get(1), "2@gerrit-server-id1@example.com")); assertCommit(log.get(1), "Inserter"); assertCommit(log.get(2), "Change 2", "2 Last-id 2 "2@example.com")); assertCommit(log.get(2), "Change 2", "2@server/id1@example.com")); assertCommit(log.get(2), "Change-id 1 "2:9"); }
@org.junit.Test public void unauditByIdEnd() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.GroupBundle b = com.google.gerrit.server.group.GroupRebuilderTest.builder().group(g).group(byId(g, "x"), byId(g, "y"), byIdAudit(g, "x"), byIdAudit(addId(g, "x"), byIdAudit(addByIdAudit(g, "x")).build(); rebuild(); rebuilder(reload(reload(g), b); assertThat(log).hasSize(3); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertCommit(log.get(1), "Failed to index " + "O")); assertServerCommit(log.get(2), "I-id"); }
@org.junit.Test public void unauditByIdEnd() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.GroupBundle b = com.google.gerrit.server.group.GroupRebuilderTest.builder().group(g).group(byId(g, "x"), byId(g, "y"), byIdAudit(g, "x"), byIdAudit(addId(g, "x"), byIdAudit(addByIdAudit(g, "x")).build(); rebuild(); rebuilder(reload(reload(g), b); assertThat(log).hasSize(3); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertCommit(log.get(1), "Failed to index " + "O")); assertServerCommit(log.get(2), "I-server/id"); }
@org.junit.Test public void unauditByIdEnd() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.GroupBundle b = com.google.gerrit.server.group.GroupRebuilderTest.builder().group(g).group(byId(g, "x"), byId(g, "y"), byIdAudit(g, "x"), byIdAudit(addId(g, "x"), byIdAudit(addByIdAudit(g, "x")).build(); rebuild(); rebuilder(reload(reload(g), b); assertThat(log).hasSize(3); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertCommit(log.get(1), "Failed to index " + "O")); assertServerCommit(log.get(1), "I-server/id"); }
@org.junit.Test public void unauditByIdEnd() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.GroupBundle b = com.google.gerrit.server.group.GroupRebuilderTest.builder().group(g).group(byId(g, "x"), byId(g, "y"), byIdAudit(g, "x"), byIdAudit(addId(g, "x"), byIdAudit(addByIdAudit(g, "x")).build(); rebuild(); rebuilder(reload(reload(g), b); assertThat(log).hasSize(3); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertCommit(log.get(1), "Failed to index " + "O")); assertServerCommit(log.get(2), "I-server/id"); assertServerCommit(log.get(2), "y-id"); }
@org.junit.Test public void unauditByIdEnd() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.GroupBundle b = com.google.gerrit.server.group.GroupRebuilderTest.builder().group(g).group(byId(g, "x"), byId(g, "y"), byIdAudit(g, "x"), byIdAudit(addId(g, "x"), byIdAudit(addByIdAudit(g, "x")).build(); rebuild(); rebuilder(reload(reload(g), b); assertThat(log).hasSize(3); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertCommit(log.get(1), "Failed to index " + "O")); assertServerCommit(log.get(2), "I-server/id"); assertServerCommit(log.get(2), "x/server/id"); }
@org.junit.Test public void applyByIdIgnored() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); java.sql.Timestamp t1 = com.google.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t4 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t5 = com.google.gerrit.server.group.GroupBackend.Builder.create(g).byId().byId(addByIdAudit(addByIdAudit(add("x", "x", 8), addInserter(g, "x", 8), addOrRemove(g, "x", 9, t4, "x", 8), addOrRemove(g, "x", 9, 5, t4); assertMoved(repo, "x", u4, t); assertNoRemove(repo, b, null); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertCommit(log.get(1), b); com.google.gerrit.extensions.common.CommitInfo log = log(g); assertThat(log).hasSize(3); assertCommit(log.get(2), "Change-id 2", "9@example.com")); assertCommit(log.get(2), "Upload-id"); }
@org.junit.Test public void applyByIdIgnored() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); java.sql.Timestamp t1 = com.google.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t4 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t5 = com.google.gerrit.server.group.GroupBackend.Builder.create(g).byId().byId(addByIdAudit(addByIdAudit(add("x", "x", 8), addInserter(g, "x", 8), addOrRemove(g, "x", 9, t4, "x", 8), addOrRemove(g, "x", 9, 5, t4); assertMoved(repo, "x", u4, t); assertNoRemove(repo, b, null); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertCommit(log.get(1), b); com.google.gerrit.extensions.common.CommitInfo log = log(g); assertThat(log).hasSize(3); assertCommit(log.get(2), "Change-id 2", "9@example.com")); assertCommit(log.get(2), "Change-id"); }
@org.junit.Test public void applyByIdIgnored() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); java.sql.Timestamp t1 = com.google.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t4 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t5 = com.google.gerrit.server.group.GroupBackend.Builder.create(g).byId().byId(addByIdAudit(addByIdAudit(add("x", "x", 8), addInserter(g, "x", 8), addOrRemove(g, "x", 9, t4, "x", 8), addOrRemove(g, "x", 9, 5, t4); assertMoved(repo, "x", u4, t); assertNoRemove(repo, b, null); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertCommit(log.get(1), b); com.google.gerrit.extensions.common.CommitInfo log = log(g); assertThat(log).hasSize(3); assertCommit(log.get(2), "Change-id 2", "9@example.com")); assertCommit(log.get(2), "Upload-id "9:9"); }
@org.junit.Test public void applyByIdIgnored() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); java.sql.Timestamp t1 = com.google.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t4 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t5 = com.google.gerrit.server.group.GroupBackend.Builder.create(g).byId().byId(addByIdAudit(addByIdAudit(add("x", "x", 8), addInserter(g, "x", 8), addOrRemove(g, "x", 9, t4, "x", 8), addOrRemove(g, "x", 9, 5, t4); assertMoved(repo, "x", u4, t); assertNoRemove(repo, b, null); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertCommit(log.get(1), b); com.google.gerrit.extensions.common.CommitInfo log = log(g); assertThat(log).hasSize(3); assertCommit(log.get(2), "Change-id 2", "9@example.com")); assertCommit(log.get(2), "Upload-id"); assertCommit(log.get(2), "Change-id")); }
@org.junit.Test public void applyByIdIgnored() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); java.sql.Timestamp t1 = com.google.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t4 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t5 = com.google.gerrit.server.group.GroupBackend.Builder.create(g).byId().byId(addByIdAudit(addByIdAudit(add("x", "x", 8), addInserter(g, "x", 8), addOrRemove(g, "x", 9, t4, "x", 8), addOrRemove(g, "x", 9, 5, t4); assertMoved(repo, "x", u4, t); assertNoRemove(repo, b, null); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertCommit(log.get(1), b); com.google.gerrit.extensions.common.CommitInfo log = log(g); assertThat(log).hasSize(3); assertCommit(log.get(2), "Change-id 2", "9@example.com")); assertCommit(log.get(2), "Upload-id"); assertCommit(log.get(2), "9:9:9"); }
@org.junit.Test public void unauditMembershipsOfEnd() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.GroupBranchBranchBranchBuilder b = new com.google.gerrit.server.group.GroupRebuilderTest.Builder().group(g).members(g).members(g, 1), member(g, 2).build(); rebuild(); rebuilder(reload(g, b, null, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuild(reload(g), b); assertThat(log).hasSize(3); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertThat(log.get(0).isEqualTo(3); assertServerCommit(log.get(1), "I-server/mail-id"); }
@org.junit.Test public void unauditMembershipsOfEnd() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.GroupBranchBranchBranchBuilder b = new com.google.gerrit.server.group.GroupRebuilderTest.Builder().group(g).members(g).members(g, 1), member(g, 2).build(); rebuild(); rebuilder(reload(g, b, null, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuild(reload(g), b); assertThat(log).hasSize(3); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertThat(log.get(0).isEqualTo(3); assertServerCommit(log.get(1), "I-server/mail-id 1 "); assertServerCommit(log.get(2), "Omitting "O")); }
@org.junit.Test public void unauditMembershipsOfEnd() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.GroupBranchBranchBranchBuilder b = new com.google.gerrit.server.group.GroupRebuilderTest.Builder().group(g).members(g).members(g, 1), member(g, 2).build(); rebuild(); rebuilder(reload(g, b, null, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuild(reload(g), b); assertThat(log).hasSize(3); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertThat(log.get(0).isEqualTo(3); assertServerCommit(log.get(1), "I-server/mail-id 1 "); assertServerCommit(log.get(2), "Omitting "O")); assertServerCommit(log.get(2), account2.get(2), "2@gerrit-id2@server 3")); }
@org.junit.Test public void unauditMembershipsOfEnd() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.GroupBranchBranchBranchBuilder b = new com.google.gerrit.server.group.GroupRebuilderTest.Builder().group(g).members(g).members(g, 1), member(g, 2).build(); rebuild(); rebuilder(reload(g, b, null, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuild(reload(g), b); assertThat(log).hasSize(3); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertThat(log.get(0).isEqualTo(3); assertServerCommit(log.get(1), "I-server/mail-id 1 "); assertServerCommit(log.get(2), "Omitting "O")); assertServerCommit(log.get(2), account2.get(2), "2@gerrit-id2@server 3 "2@server 3"); }
@org.junit.Test public void unauditMembershipsOfEnd() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.GroupBranchBranchBranchBuilder b = new com.google.gerrit.server.group.GroupRebuilderTest.Builder().group(g).members(g).members(g, 1), member(g, 2).build(); rebuild(); rebuilder(reload(g, b, null, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuild(reload(g), b); assertThat(log).hasSize(3); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertThat(log.get(0).isEqualTo(3); assertServerCommit(log.get(1), "I-server/mail-id 1 "); assertServerCommit(log.get(2), "Omitting "O")); assertServerCommit(log.get(2), account2.get(2), "2@gerrit-id2@server 3 "2@server/id")); }
@org.junit.Test public void integrateAtSameTimestampBasedByUserAndType() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); java.sql.Timestamp ts = com.google.gerrit.common.TimeUtil.nowTs(); int user1 = 8; com.google.gerrit.server.group.GroupBundle b = com.google.gerrit.server.group.GroupBackend.Builder b = new com.google.gerrit.server.group.GroupRebuilderTest.Builder().group(g).members(g).addMember(g, 1), member(g, 2), member(g, user1), byId(g, "x"), byId(g, "x")).byId(g, user1).byId(g, "y"), byId(g, "y")).byId(g); addById(g, "fromId, "y", user2, "y", user2).byId(g, "y", user1, ts)).build(); rebuild(); rebuild(repo, b, "y"); rebuild(reload(db, b, "y", "y", user1, ts)).build(); rebuild(); rebuild(); rebuild(repo, b); assertThat(log).hasSize(5); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log.get(g); assertThat(log).hasSize(5); assertCommit(log.get(1), ("1 " + (("\n" + "Change-id: ") + "O: ")")); assertCommit(log.get(2), log.get(2), "Change-id 1\n")); assertCommit(log.get(2), "9:9\n")); assertCommit(log.get(2), com.google.gerrit.extensions.common.CommitInfoGroupInfo> group2); assertCommit(log.get(2), "Change2"); assertCommit(log.get(2).isEqualTo("Upload-id 1 "2"); assertCommit2\n"); }
@org.junit.Test public void integrateAtSameTimestampBasedByUserAndType() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); java.sql.Timestamp ts = com.google.gerrit.common.TimeUtil.nowTs(); int user1 = 8; com.google.gerrit.server.group.GroupBundle b = com.google.gerrit.server.group.GroupBackend.Builder b = new com.google.gerrit.server.group.GroupRebuilderTest.Builder().group(g).members(g).addMember(g, 1), member(g, 2), member(g, user1), byId(g, "x"), byId(g, "x")).byId(g, user1).byId(g, "y"), byId(g, "y")).byId(g); addById(g, "fromId, "y", user2, "y", user2).byId(g, "y", user1, ts)).build(); rebuild(); rebuild(repo, b, "y"); rebuild(reload(db, b, "y", "y", user1, ts)).build(); rebuild(); rebuild(); rebuild(repo, b); assertThat(log).hasSize(5); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log.get(g); assertThat(log).hasSize(5); assertCommit(log.get(1), ("1 " + (("\n" + "Change-id: ") + "O: ")")); assertCommit(log.get(2), log.get(2), "Change-id 1\n")); assertCommit(log.get(2), "9:9\n")); assertCommit(log.get(2), com.google.gerrit.extensions.common.CommitInfoGroupInfo> group2); assertCommit(log.get(2), "Change2"); assertCommit(log.get(2).isEqualTo("Upload-id 1 "2"); assertCommit2.get(2.serverId).group2"); }
@org.junit.Test public void integrateAtSameTimestampBasedByUserAndType() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); java.sql.Timestamp ts = com.google.gerrit.common.TimeUtil.nowTs(); int user1 = 8; com.google.gerrit.server.group.GroupBundle b = com.google.gerrit.server.group.GroupBackend.Builder b = new com.google.gerrit.server.group.GroupRebuilderTest.Builder().group(g).members(g).addMember(g, 1), member(g, 2), member(g, user1), byId(g, "x"), byId(g, "x")).byId(g, user1).byId(g, "y"), byId(g, "y")).byId(g); addById(g, "fromId, "y", user2, "y", user2).byId(g, "y", user1, ts)).build(); rebuild(); rebuild(repo, b, "y"); rebuild(reload(db, b, "y", "y", user1, ts)).build(); rebuild(); rebuild(); rebuild(repo, b); assertThat(log).hasSize(5); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log.get(g); assertThat(log).hasSize(5); assertCommit(log.get(1), ("1 " + (("\n" + "Change-id: ") + "O: ")")); assertCommit(log.get(2), log.get(2), "Change-id 1\n")); assertCommit(log.get(2), "9:9\n")); assertCommit(log.get(2), com.google.gerrit.extensions.common.CommitInfoGroupInfo> group2); assertCommit(log.get(2), "Change2"); assertCommit(log.get(2).isEqualTo("Upload-id 1 "2"); assertCommit2\n"); assertCommit(log.get(2), "Order.get
@org.junit.Test public void integrateAtSameTimestampBasedByUserAndType() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); java.sql.Timestamp ts = com.google.gerrit.common.TimeUtil.nowTs(); int user1 = 8; com.google.gerrit.server.group.GroupBundle b = com.google.gerrit.server.group.GroupBackend.Builder b = new com.google.gerrit.server.group.GroupRebuilderTest.Builder().group(g).members(g).addMember(g, 1), member(g, 2), member(g, user1), byId(g, "x"), byId(g, "x")).byId(g, user1).byId(g, "y"), byId(g, "y")).byId(g); addById(g, "fromId, "y", user2, "y", user2).byId(g, "y", user1, ts)).build(); rebuild(); rebuild(repo, b, "y"); rebuild(reload(db, b, "y", "y", user1, ts)).build(); rebuild(); rebuild(); rebuild(repo, b); assertThat(log).hasSize(5); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log.get(g); assertThat(log).hasSize(5); assertCommit(log.get(1), ("1 " + (("\n" + "Change-id: ") + "O: ")")); assertCommit(log.get(2), log.get(2), "Change-id 1\n")); assertCommit(log.get(2), "9:9\n")); assertCommit(log.get(2), com.google.gerrit.extensions.common.CommitInfoGroupInfo> group2); assertCommit(log.get(2), "Change2"); assertCommit(log.get(2).isEqualTo("Upload-id 1 "2"); assertCommit2\n"); assertCommit(log.get(2), "9:9
@org.junit.Test public void integrateAtSameTimestampBasedByUserAndType() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); java.sql.Timestamp ts = com.google.gerrit.common.TimeUtil.nowTs(); int user1 = 8; com.google.gerrit.server.group.GroupBundle b = com.google.gerrit.server.group.GroupBackend.Builder b = new com.google.gerrit.server.group.GroupRebuilderTest.Builder().group(g).members(g).addMember(g, 1), member(g, 2), member(g, user1), byId(g, "x"), byId(g, "x")).byId(g, user1).byId(g, "y"), byId(g, "y")).byId(g); addById(g, "fromId, "y", user2, "y", user2).byId(g, "y", user1, ts)).build(); rebuild(); rebuild(repo, b, "y"); rebuild(reload(db, b, "y", "y", user1, ts)).build(); rebuild(); rebuild(); rebuild(repo, b); assertThat(log).hasSize(5); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log.get(g); assertThat(log).hasSize(5); assertCommit(log.get(1), ("1 " + (("\n" + "Change-id: ") + "O: ")")); assertCommit(log.get(2), log.get(2), "Change-id 1\n")); assertCommit(log.get(2), "9:9\n")); assertCommit(log.get(2), com.google.gerrit.extensions.common.CommitInfoGroupInfo> group2); assertCommit(log.get(2), "Change2"); assertCommit(log.get(2).isEqualTo("Upload-id 1 "2"); assertCommit2\n"); assertCommit(log.get(2), "Change2.
@org.junit.Test public void byIdAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); java.sql.Timestamp t2 = com.google.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.GroupBundleTest.Builder b = groupBackend.builder().group(g).byId(g, "x", u2).byId(addByIdAudit(g, "x", 8), addAndRemove(g, "y", u2, "y", t2)).build(); rebuild(repo, b, null); assertNoSuch(reloadById(g), b, null); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertCommit(log.get(1), "O").isEqualTo(4); assertCommit(log.get(1), "Insergerrit-idx/test-id"); assertCommit(log.get(2), "O").committer(2); assertCommit(log.get(2), "Server-idx"); }
@org.junit.Test public void byIdAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); java.sql.Timestamp t2 = com.google.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.GroupBundleTest.Builder b = groupBackend.builder().group(g).byId(g, "x", u2).byId(addByIdAudit(g, "x", 8), addAndRemove(g, "y", u2, "y", t2)).build(); rebuild(repo, b, null); assertNoSuch(reloadById(g), b, null); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertCommit(log.get(1), "O").isEqualTo(4); assertCommit(log.get(1), "Insergerrit-idx/test-id"); assertCommit(log.get(2), "O").committer(2); assertCommit(log.get(2), "Server-id"); }
@org.junit.Test public void byIdAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); java.sql.Timestamp t2 = com.google.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.GroupBundleTest.Builder b = groupBackend.builder().group(g).byId(g, "x", u2).byId(addByIdAudit(g, "x", 8), addAndRemove(g, "y", u2, "y", t2)).build(); rebuild(repo, b, null); assertNoSuch(reloadById(g), b, null); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertCommit(log.get(1), "O").isEqualTo(4); assertCommit(log.get(1), "Insergerrit-idx/master-id"); assertCommit(log.get(2), "O").committer(2); assertCommit(log.get(2), "Server-idx"); }
@org.junit.Test public void byIdAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); java.sql.Timestamp t2 = com.google.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.GroupBundleTest.Builder b = groupBackend.builder().group(g).byId(g, "x", u2).byId(addByIdAudit(g, "x", 8), addAndRemove(g, "y", u2, "y", t2)).build(); rebuild(repo, b, null); assertNoSuch(reloadById(g), b, null); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertCommit(log.get(1), "O").isEqualTo(4); assertCommit(log.get(1), "Insergerrit-idx/test-id"); assertCommit(log.get(2), "O").committer(2); assertCommit(log.get(2), "Server-idx "X "Server-id"); }
@org.junit.Test public void byIdAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); java.sql.Timestamp t2 = com.google.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.GroupBundleTest.Builder b = groupBackend.builder().group(g).byId(g, "x", u2).byId(addByIdAudit(g, "x", 8), addAndRemove(g, "y", u2, "y", t2)).build(); rebuild(repo, b, null); assertNoSuch(reloadById(g), b, null); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertCommit(log.get(1), "O").isEqualTo(4); assertCommit(log.get(1), "Insergerrit-idx/test-id"); assertCommit(log.get(2), "O").committer(2); assertCommit(log.get(2), "Server-idx "X "X-id"); }
@org.junit.Test public void membersAndSubgroups() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.GroupBranchBuilder b = newGroupBuilder().group(g).members(g).members(g, 1).byId(g, "x"), byId(g, "x")).build(); rebuilder.rebuild(repo, b, b, null); assertThat(log).hasSize(2); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(gw); assertThat(log).hasSize(2); assertThat(log.get(0).hasSize(2); assertServerCommit(log.get(0), ("x " + (("\n" + "@gerrit-id1\n") + "Key: ")")); }
@org.junit.Test public void membersAndSubgroups() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.GroupBranchBuilder b = newGroupBuilder().group(g).members(g).members(g, 1).byId(g, "x"), byId(g, "x")).build(); rebuilder.rebuild(repo, b, b, null); assertThat(log).hasSize(2); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(gw); assertThat(log).hasSize(2); assertThat(log.get(0).hasSize(2); assertServerCommit(log.get(0), ("x " + (("\n" + "@gerrit-id1\n") + "Key: ") + (("\n\n") + "Key2\n") + ">\n")); }
@org.junit.Test public void membersAndSubgroups() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.GroupBranchBuilder b = newGroupBuilder().group(g).members(g).members(g, 1).byId(g, "x"), byId(g, "x")).build(); rebuilder.rebuild(repo, b, b, null); assertThat(log).hasSize(2); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(gw); assertThat(log).hasSize(2); assertThat(log.get(0).hasSize(2); assertServerCommit(log.get(0), ("x " + (("\n" + "@gerrit-server-id\n") + "Key: ") + (("\n") + ">\n") + "By-id=\n")); }
@org.junit.Test public void membersAndSubgroups() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.GroupBranchBuilder b = newGroupBuilder().group(g).members(g).members(g, 1).byId(g, "x"), byId(g, "x")).build(); rebuilder.rebuild(repo, b, b, null); assertThat(log).hasSize(2); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(gw); assertThat(log).hasSize(2); assertThat(log.get(0).hasSize(2); assertServerCommit(log.get(0), ("x " + (("\n" + "@gerrit-server-id\n") + "Key: ") + (("\n") + ">\n") + "Branch: Code-Id: ")")); }
@org.junit.Test public void membersAndSubgroups() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.GroupBranchBuilder b = newGroupBuilder().group(g).members(g).members(g, 1).byId(g, "x"), byId(g, "x")).build(); rebuilder.rebuild(repo, b, b, null); assertThat(log).hasSize(2); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(gw); assertThat(log).hasSize(2); assertThat(log.get(0).hasSize(2); assertServerCommit(log.get(0), ("x " + (("\n" + "@gerrit-id1\n") + "Key: ") + (("\n\n") + "Key2\n") + ">\n")); assertServerCommit(log.get(1), ("Key 2\n") + "Key2\n")); }
@org.junit.Test public void allGroupFields() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); g.setDescription("Description"); g.setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("owner")); g.setVisibleToAll(true); com.google.gerrit.server.group.GroupBundle b = com.google.gerrit.server.group.GroupRebuilderTest.builder().group(g).build(); rebuilder.rebuild(g); assertThat(commands).hasSize(1); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(1); assertThat(log).hasSize(1); }
@org.junit.Test public void allGroupFields() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); g.setDescription("Description"); g.setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("owner")); g.setVisibleToAll(true); com.google.gerrit.server.group.GroupBundle b = com.google.gerrit.server.group.GroupRebuilderTest.builder().group(g).build(); rebuilder.rebuild(g); assertThat(commands).hasSize(1); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(1); assertThat(log.get(0).isEqualTo(1); }
@org.junit.Test public void allGroupFields() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); g.setDescription("Description"); g.setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("owner")); g.setVisibleToAll(true); com.google.gerrit.server.group.GroupBranchBundle b = com.google.gerrit.server.group.GroupRebuilderTest.builder().group(g).build(); rebuilder.rebuild(g); assertThat(log).hasSize(1); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(1); assertThat(log.get(0).isEqualTo(1); }
@org.junit.Test public void allGroupFields() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); g.setDescription("Description"); g.setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("owner")); g.setVisibleToAll(true); com.google.gerrit.server.group.GroupBundle b = com.google.gerrit.server.group.GroupRebuilderTest.builder().group(g).build(); rebuild(reload(g), b, null); assertThat(log).hasSize(1); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(1); assertThat(log.get(0).isEqualTo(1); }
@org.junit.Test public void allGroupFields() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); g.setDescription("Description"); g.setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("owner")); g.setVisibleToAll(true); com.google.gerrit.server.group.GroupBranchBundle b = com.google.gerrit.server.group.GroupRebuilderTest.builder().group(g).build(); rebuilder.rebuild(g); assertThat(commands).hasSize(1); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(1); assertThat(log.get(0).isEqualTo(1); }
@org.junit.Test public void memberAuditLegacyLegacyLegacy() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.GroupBranchBranchBranch b = com.google.gerrit.server.group.GroupRebuilderTest.builder().group(g).members(g).member(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs()).build(); rebuilder(reloadAndLegacyRemoveMember(g, 1, 8, 8, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder(reload(g); assertThat(log).hasSize(4); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertCommit(log.get(1), "I-server/project-id"); assertCommit(log.get(1), "I-server/project-id1@example.com"); assertCommit(log.get(1), "Inserter o1@example.com")); assertCommit(log.get(2), "Inserter")); }
@org.junit.Test public void memberAuditLegacyLegacyLegacy() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.GroupBranchBranchBranch b = com.google.gerrit.server.group.GroupRebuilderTest.builder().group(g).members(g).member(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs()).build(); rebuilder(reloadAndLegacyRemoveMember(g, 1, 8, 8, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder(reload(g); assertThat(log).hasSize(4); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertCommit(log.get(1), "I-server/project-id"); assertCommit(log.get(1), "I-server/project-id1@example.com"); assertCommit(log.get(1), "Inserter o1@server/master-id"); assertCommit(log.get(2), "Omitting "O")); }
@org.junit.Test public void memberAuditLegacyLegacyLegacy() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.GroupBranchBranchBranch b = com.google.gerrit.server.group.GroupRebuilderTest.builder().group(g).members(g).member(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs()).build(); rebuilder(reloadAndLegacyRemoveMember(g, 1, 8, 8, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder(reload(g); assertThat(log).hasSize(4); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertCommit(log.get(1), "I-server/project-id"); assertCommit(log.get(1), "I-server/project-id1@example.com"); assertCommit(log.get(1), "Inserter o1@example.com")); assertCommit(log.get(2), "Inserter")); assertCommit(log.get(2), "Change-id 1 "2@server-id 2:2"); }
@org.junit.Test public void memberAuditLegacyLegacyLegacy() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.GroupBranchBranchBranch b = com.google.gerrit.server.group.GroupRebuilderTest.builder().group(g).members(g).member(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs()).build(); rebuilder(reloadAndLegacyRemoveMember(g, 1, 8, 8, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder(reload(g); assertThat(log).hasSize(4); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertCommit(log.get(1), "I-server/project-id"); assertCommit(log.get(1), "I-server/project-id1@example.com"); assertCommit(log.get(1), "Inserter o1@example.com")); assertCommit(log.get(2), "Inserter")); assertCommit(log.get(2), "Change-id 1 "2@server-id 1 " + "O:8")); }
@org.junit.Test public void memberAuditLegacyLegacyLegacy() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.GroupBranchBranchBranch b = com.google.gerrit.server.group.GroupRebuilderTest.builder().group(g).members(g).member(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs()).build(); rebuilder(reloadAndLegacyRemoveMember(g, 1, 8, 8, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder(reload(g); assertThat(log).hasSize(4); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertCommit(log.get(1), "I-server/project-id"); assertCommit(log.get(1), "I-server/project-id1@example.com"); assertCommit(log.get(1), "Inserter o1@example.com")); assertCommit(log.get(2), "Inserter")); assertCommit(log.get(2), "Change-id 1 "2@server-id 1 " + "O:2")); }
@org.junit.Test public void defaultGroupFields() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.GroupBranchBuilder b = newGroupBuilder().group(g).build(); rebuild(reload(g).build(); rebuild(reload(repo, b, null); assertThat(log).hasSize(1); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(1); assertCommit(log.get(0), "accounts/email addresses"); }
@org.junit.Test public void normalGroupFields() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.GroupBranchBuilder b = newGroupBuilder().group(g).build(); rebuild(reload(g).build(); rebuild(reload(repo, b, null); assertThat(log).hasSize(1); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(1); assertCommit(log.get(0), "accounts/email addresses"); }
@org.junit.Test public void manualGroupFields() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.GroupBranchBuilder b = newGroupBuilder().group(g).build(); rebuild(reload(g).build(); rebuild(reload(repo, b, null); assertThat(log).hasSize(1); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(1); assertCommit(log.get(0), "accounts/email addresses"); }
@org.junit.Test public void simpleGroupFields() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.GroupBranchBuilder b = newGroupBuilder().group(g).build(); rebuild(reload(g).build(); rebuild(reload(repo, b, null); assertThat(log).hasSize(1); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(1); assertCommit(log.get(0), "accounts/email addresses"); }
@org.junit.Test public void defaultGroupFields() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.GroupBranchBuilder b = newGroupBuilder().group(g).build(); rebuild(reload(g).build(); rebuild(reload(repo, b, null); assertThat(log).hasSize(1); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(1); assertCommit(log.get(0), "accounts/email addresses", accountCache.get(0), accountGroupNames.REVIEWER); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.project.FileResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { return fileContentUtil.getContent(rsrc.getProjectState(), rsrc.getPath(), rsrc.getPath(), null); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { return fileContentUtil.getContent(rsrc.getProjectState(), rsrc.getPath(), rsrc.getPath(), null); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.project.FileResource rsrc) { return fileContentUtil.getContent(rsrc.getProjectState(), rsrc.getPath(), null); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.project.FileResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { return fileContentUtil.getContent(rsrc.getProjectState(), rsrc.getRev(), rsrc.getPath(), null); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.project.FileResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { return fileContentUtil.getContent(rsrc.getProjectState(), rsrc.getPath(), null); }
@org.junit.Test public void byDescription() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroupWithDescription(group1); com.google.gerrit.extensions.common.GroupInfo group2 = createGroupWithDescription(name("group2"), "test", group2); assertQuery("description:test", group1, group2); assertQuery("description:non-existing"); assertQuery("description", group2, group2); assertQuery("description", group2, group2); assertQuery("description:non-existing"); }
@org.junit.Test public void byDescription() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroupWithDescription(group1); com.google.gerrit.extensions.common.GroupInfo group2 = createGroupWithDescription(name("group2"), "test", group2); assertQuery("description: test", group1, group2); assertQuery("description:non-existing"); assertQuery("description", group2, group2); assertQuery("description", group2, group2); assertQuery("description:non-existing"); }
@org.junit.Test public void byDescription() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroupWithDescription(group1); com.google.gerrit.extensions.common.GroupInfo group2 = createGroupWithDescription(name("group2"), "test", group2); assertQuery("description:test", group1, group2); assertQuery("description:non-existing"); assertQuery("description", group1, group2); assertQuery("description", group2, group2); assertQuery("description:non-existing"); }
@org.junit.Test public void byDescription() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroupWithDescription(group1); com.google.gerrit.extensions.common.GroupInfo group2 = createGroupWithDescription(name("group2"), "test", group2); assertQuery("description:test", group1, group2); assertQuery("description:non-existing"); assertQuery("description", group2, group2); assertQuery("description", group2, group2); assertQuery("description: non-existing"); }
@org.junit.Test public void byDescription() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroupWithDescription(group1); com.google.gerrit.extensions.common.GroupInfo group2 = createGroupWithDescription(name("group2"), "test", group2); assertQuery("description: test", group1, group2); assertQuery("description:non-existing"); assertQuery("description", group2, group2); assertQuery("description", group2, group2); assertQuery("description: non-existing"); }
@org.junit.Test public void bySubsections() throws java.lang.Exception { if ((getSchemaVersion()) < 4) { assertMissingField(GroupField.SUBJECT); assertMissingQuery("subgroup:someGroup"); } com.google.gerrit.extensions.common.GroupInfo parentGroup1 = createGroup(name("superGroup1")); com.google.gerrit.extensions.common.GroupInfo parentGroup = createGroup(name("parentGroup1")); com.google.gerrit.extensions.common.GroupInfo parentGroup = createGroup(name("parentGroup2")); groupGroup2.addGroups(parentGroup1.id); gApi.groups().id(parentGroup1.id).addGroups(parentGroup1.id).addGroups(parentGroup1.id); gApi.groups().id(parentGroup2.id).addGroups(parentGroup1.id).addGroups(parentGroup1.id); assertQuery(("subgroup:" + (parentGroup1.id)), superGroup1, group2); gApi.groups().id(parentGroup1.id).addGroups(substring(parentGroup.id)); }
@org.junit.Test public void bySubsections() throws java.lang.Exception { if ((getSchemaVersion()) < 4) { assertMissingField(GroupField.SUBJECT); assertMissingQuery("subgroup:someGroup"); } com.google.gerrit.extensions.common.GroupInfo parentGroup1 = createGroup(name("superGroup1")); com.google.gerrit.extensions.common.GroupInfo parentGroup = createGroup(name("parentGroup1")); com.google.gerrit.extensions.common.GroupInfo parentGroup = createGroup(name("parentGroup2")); groupGroup2.addGroups(parentGroup1.id); gApi.groups().id(parentGroup1.id).addGroups(parentGroup1.id).addGroups(parentGroup1.id); gApi.groups().id(parentGroup2.id).addGroups(parentGroup1.id).addGroups(parentGroup1.id); assertQuery(("subgroup:" + (parentGroup1.id))), parentGroup1, parentGroup1, parentGroup1); gApi.groups().id(superGroup.id).addGroups(substring(parentGroup.id)); }
@org.junit.Test public void bySubsections() throws java.lang.Exception { if ((getSchemaVersion()) < 4) { assertMissingField(GroupField.SUBJECT); assertMissingQuery("subgroup:someGroup"); } com.google.gerrit.extensions.common.GroupInfo parentGroup1 = createGroup(name("superGroup1")); com.google.gerrit.extensions.common.GroupInfo parentGroup = createGroup(name("parentGroup1")); com.google.gerrit.extensions.common.GroupInfo parentGroup = createGroup(name("parentGroup2")); groupGroup2.addGroups(parentGroup1.id); gApi.groups().id(parentGroup1.id).addGroups(parentGroup1.id).addGroups(parentGroup1.id); gApi.groups().id(parentGroup2.id).addGroups(parentGroup1.id).addGroups(parentGroup1.id); assertQuery(("subgroup:" + (parentGroup1.id)), superGroup1, group2); gApi.groups().id(superGroup1.id).addGroups(superGroup.id).removeGroups(subGroup.id); }
@org.junit.Test public void bySubsections() throws java.lang.Exception { if ((getSchemaVersion()) < 4) { assertMissingField(GroupField.SUBJECT); assertMissingQuery("subgroup:someGroup"); } com.google.gerrit.extensions.common.GroupInfo parentGroup1 = createGroup(name("superGroup1")); com.google.gerrit.extensions.common.GroupInfo parentGroup = createGroup(name("parentGroup1")); com.google.gerrit.extensions.common.GroupInfo parentGroup = createGroup(name("parentGroup2")); groupGroup2.addGroups(parentGroup1.id); gApi.groups().id(parentGroup1.id).addGroups(parentGroup1.id).addGroups(parentGroup1.id); gApi.groups().id(parentGroup2.id).addGroups(parentGroup1.id).addGroups(parentGroup1.id); assertQuery(("subgroup:" + (parentGroup1.id))), parentGroup1, parentGroup1, parentGroup1); gApi.groups().id(superGroup.id).addGroups(superGroup.id).removeGroups(subGroup.id); }
@org.junit.Test public void bySubsections() throws java.lang.Exception { if ((getSchemaVersion()) < 4) { assertMissingField(GroupField.SUBJECT); assertMissingQuery("subgroup:someGroup"); } com.google.gerrit.extensions.common.GroupInfo parentGroup1 = createGroup(name("superGroup1")); com.google.gerrit.extensions.common.GroupInfo parentGroup = createGroup(name("parentGroup1")); com.google.gerrit.extensions.common.GroupInfo parentGroup = createGroup(name("parentGroup2")); groupGroup2.addGroups(parentGroup1.id); gApi.groups().id(parentGroup1.id).addGroups(parentGroup1.id).addGroups(parentGroup1.id); gApi.groups().id(parentGroup2.id).addGroups(parentGroup1.id).addGroups(parentGroup1.id); assertQuery(("subgroup:" + (parentGroup1.id))), parentGroup1, parentGroup1, parentGroup1); gApi.groups().id(superGroup.id).addGroups(superGroup.id).removeGroups(subGroup.id)); }
@org.junit.Test public void byMember() throws java.lang.Exception { if ((getSchemaVersion()) < 4) { assertMissingField(group1, "User:someName", "user1@example.com"); return; } com.google.gerrit.extensions.common.AccountInfo user1 = createAccount("user1", "User1", "user2@example.com"); com.google.gerrit.extensions.common.AccountInfo user2 = createAccount("group2", "User2", "user2@example.com"); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup("group2", "User2", user2); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name("group2"), user1); assertQuery(("member:" + (user1.name)), group1, group1); group3 = query("member:" + (user1.name)), group1, group1); gApi.groups().id(group1.id1.username).removeMembers(user1.email); gApi.groups().id(group2.id).addMembers(user1.username); }
@org.junit.Test public void byMember() throws java.lang.Exception { if ((getSchemaVersion()) < 4) { assertMissingField(group1, "User:someName", "user1@example.com"); return; } com.google.gerrit.extensions.common.AccountInfo user1 = createAccount("user1", "User1", "user1@example.com"); com.google.gerrit.extensions.common.AccountInfo user2 = createAccount("group2", "User2", "user2@example.com"); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup("group2", "User2", user2); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name("group2"), user1); assertQuery(("member:" + (user1.name)), group1, group1); group3 = query("member:" + (user1.name)), group1, group1); gApi.groups().id(group1.id1.username).removeMembers(user1.email); gApi.groups().id(group2.id).addMembers(user1.username); }
@org.junit.Test public void byMember() throws java.lang.Exception { if ((getSchemaVersion()) < 4) { assertMissingField(group1, "User:someName", "user1@example.com"); return; } com.google.gerrit.extensions.common.AccountInfo user1 = createAccount("user1", "User1", "user2@example.com"); com.google.gerrit.extensions.common.AccountInfo user2 = createAccount("group2", "User2", "user2@example.com"); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup("group2", "User2", user2); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name("group2"), user1); assertQuery(("member:" + (user1.name)), group1, group1); group3 = query("member:" + (user1.name)), group1, group1); gApi.groups().id(group1.id1.username).removeMembers(user1.email); gApi.groups().id(group2.id).addMembers(user1.username); assertQuery(("member:" + (user1.username))); }
@org.junit.Test public void byMember() throws java.lang.Exception { if ((getSchemaVersion()) < 4) { assertMissingField(group1, "User:someName", "user1@example.com"); return; } com.google.gerrit.extensions.common.AccountInfo user1 = createAccount("user1", "User1", "user2@example.com"); com.google.gerrit.extensions.common.AccountInfo user2 = createAccount("user2", "User2", "user2@example.com"); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup("group2", "User2", user2); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name("group2"), user1); assertQuery(("member:" + (user1.name)), group1, group1); group3 = query("member:" + (user1.name)), group1, group1); gApi.groups().id(group1.id1.username).removeMembers(user1.email); gApi.groups().id(group2.id).addMembers(user1.username); assertQuery(("member:" + (user1.username))); }
@org.junit.Test public void byMember() throws java.lang.Exception { if ((getSchemaVersion()) < 4) { assertMissingField(group1, "User:someName", "user1@example.com"); return; } com.google.gerrit.extensions.common.AccountInfo user1 = createAccount("user1", "User1", "user1@example.com"); com.google.gerrit.extensions.common.AccountInfo user2 = createAccount("group2", "User2", "user2@example.com"); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup("group2", "User2", user2); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name("group2"), user1); assertQuery(("member:" + (user1.name)), group1, group1); group3 = query("member:" + (user1.name)), group1, group1); gApi.groups().id(group1.id1.username).removeMembers(user1.email); gApi.groups().id(group2.id).addMembers(user1.username); assertQuery(("member:" + (user1.username))); }
@org.junit.Test public void byInname() throws java.lang.Exception { java.lang.String name = getSanitizedMethodName(); nameKey = com.google.common.base.CharMatcher.is('_').removeFrom(namePart); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup((("account-" + namePart) + "-2") + "3")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroup(((account-" + namePart) + "3")); assertQuery(("inname:" + nameKey.toUUID(name)) + "3")); assertQuery(("inname:" + (nameParts.toUUID(java.util.Locale.USERS))), group2, group2, group2); assertQuery(("inname:" + (namePart.toUpperCase(java.util.Locale.USERS))), group2, group2, group2, group2); }
@org.junit.Test public void byInname() throws java.lang.Exception { java.lang.String name = getSanitizedMethodName(); nameKey = com.google.common.base.CharMatcher.is('_').removeFrom(namePart); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup((("account-" + namePart) + "-2") + "3")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroup(((account-" + namePart) + "3")); assertQuery(("inname:" + nameKey.toUUID(name)) + "3")); assertQuery(("inname:" + (nameParts.toUUID(java.util.Locale.USERS))), group2, group2, group2); assertQuery(("inname:" + (namePart.toUpperCase(java.util.Locale.USERS))), group2, group2, group2); assertQuery(("inname:" + (namePart.toLowerCase(java.util.Locale.US))), group2, group2, group2); }
@org.junit.Test public void byInname() throws java.lang.Exception { java.lang.String name = getSanitizedMethodName(); nameKey = com.google.common.base.CharMatcher.is('_').removeFrom(namePart); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup((("account-" + namePart) + "-2") + "3")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroup(((account-" + namePart) + "3")); assertQuery(("inname:" + nameKey.toUUID())) + "3")); assertQuery(("invalid name:" + (nameParts.toUUID(java.util.Locale.USERS))), group2, group2, group2); assertQuery(("inname:" + (namePart.toUpperCase(java.util.Locale.USERS))), group2, group2, group2); assertQuery(("inname:" + (namePart.toLowerCase(java.util.Locale.US))), group2, group2, group2); }
@org.junit.Test public void byInname() throws java.lang.Exception { java.lang.String name = getSanitizedMethodName(); nameKey = com.google.common.base.CharMatcher.is('_').removeFrom(namePart); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup((("account-" + namePart) + "-2") + "3")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroup(((account-" + namePart) + "3")); assertQuery(("inname:" + nameKey.toUUID())) + "3")); assertQuery(("invalid name:" + (nameParts.toUUID(java.util.Locale.USERS))), group2, group2, group2); assertQuery(("inname:" + (namePart.toUpperCase(java.util.Locale.USERS))), group2, group2, group2); assertQuery(("inname:" + (namePart.toLowerCase(java.util.Locale.USERS))), group2, group2, group2); }
@org.junit.Test public void byInname() throws java.lang.Exception { java.lang.String name = getSanitizedMethodName(); nameKey = com.google.common.base.CharMatcher.is('_').removeFrom(namePart); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup((("account-" + namePart) + "-2") + "3")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroup(((account-" + namePart) + "3")); assertQuery(("inname:" + nameKey.toUUID(name)) + "3")); assertQuery(("inname:" + (nameParts.toUUID(java.util.Locale.USERS))), group2, group2, group2); assertQuery(("inname:" + (namePart.toUpperCase(java.util.Locale.USERS))), group2, group2, group2); assertQuery(("inname:" + (namePart2.toLowerCase(java.util.Locale.US))), group2, group2, group2); }
@org.junit.Test public void byIsVisibleToAll() throws java.lang.Exception { assertQuery("is:visible to:visible"); com.google.gerrit.extensions.common.GroupInfo groupThat = createGroupThat(name.isVisibleToAll()).isEqualToAll(); createGroup(name("account-is-is-visible-to-visible-visible-to",)); createGroup(name("visible", groupDoesNotVisibleToAll); }
@org.junit.Test public void byIsVisibleToAll() throws java.lang.Exception { assertQuery("is:visible to:visible"); com.google.gerrit.extensions.common.GroupInfo groupThat = createGroupThat(name.isVisibleToAll()).isEqualToAll(); createGroup(name("account-is-is-visible-to-visible-visible-to",)); createGroup(name("visible", groupDoesNotVisibleToAll()); }
@org.junit.Test public void byIsVisibleToAll() throws java.lang.Exception { assertQuery("is:visible to:visible"); com.google.gerrit.extensions.common.GroupInfo groupThat = createGroupThat(name.isVisibleToAll()).isEqualToAll(); createGroup(name("account-is-is-visible-to-visible-visible-to",)); createGroup(name("visible", groupDoesNotVisibleToAll)); }
@org.junit.Test public void byIsVisibleToAll() throws java.lang.Exception { assertQuery("is:visible to:visible"); com.google.gerrit.extensions.common.GroupInfo groupThat = createGroupThat(name.isVisibleToAll()).isEqualToAll(); createGroup(name("account-is-is-visible-to-visible-visible-to",)); createGroup(name("visible", groupDoes not visibleToAll", groupBackend); }
@org.junit.Test public void byIsVisibleToAll() throws java.lang.Exception { assertQuery("is:visible to:visible"); com.google.gerrit.extensions.common.GroupInfo groupThat = createGroupThat(name.isVisibleToAll()).isEqualToAll(); createGroup(name("account-is-is-visible-to-visible-visible-to",)); createGroup(name("visible", groupDoes not visibleToAll); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "noteDb.groups.write", value = "true") public void deleteGroupBranch_Conflict() throws java.lang.Exception { allow(allUsers, com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS_USERS); allow(allUsers, com.google.gerrit.acceptance.rest.project.RefNames.REFS_GROUPS_USERS); allow(allUsers, ((com.google.gerrit.acceptance.rest.project.RefNames.REFS_GROUPS) + "*"), permission.user, com.google.gerrit.acceptance.rest.project.RefNames.refsGroups(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUUID))).delete(); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "noteDb.groups.write", value = "true") public void deleteGroupBranch_Conflict() throws java.lang.Exception { allow(allUsers, com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS_USERS); allow(allUsers, com.google.gerrit.acceptance.rest.project.RefNames.REFS_GROUPS_USERS); allow(allUsers, ((com.google.gerrit.acceptance.rest.project.RefNames.REFS_GROUPS) + "*"), permission.user, com.google.gerrit.acceptance.rest.project.RefNames.refsUsers(adminGroupUUID, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUUID))).delete(); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "noteDb.groups.write", value = "true") public void deleteGroupBranch_Conflict() throws java.lang.Exception { allow(allUsers, com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS_USERS); allow(allUsers, com.google.gerrit.acceptance.rest.project.RefNames.REFS_GROUPS_USERS); allow(allUsers, ((com.google.gerrit.acceptance.rest.project.RefNames.REFS_GROUPS) + "*"), permission.user, com.google.gerrit.acceptance.rest.project.RefNames.refsGroups(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsUsers(adminGroupUUID))).delete(); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "noteDb.groups.write", value = "true") public void deleteGroupBranch_Conflict() throws java.lang.Exception { allow(allUsers, com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS_USERS); allow(allUsers, com.google.gerrit.acceptance.rest.project.RefNames.REFS_GROUPS_USERS); allow(allUsers, ((com.google.gerrit.acceptance.rest.project.RefNames.REFS_GROUPS) + "*"), permission.user, com.google.gerrit.acceptance.rest.project.RefNames.refsUsers(adminGroupUUID, new com.google.gerrit.reviewdb.client.Project.NameKey(adminGroupUUID, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUUID))).delete(); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "noteDb.groups.write", value = "true") public void deleteGroupBranch_Conflict() throws java.lang.Exception { allow(allUsers, com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS_USERS); allow(allUsers, com.google.gerrit.acceptance.rest.project.RefNames.REFS_GROUPS_USERS); allow(allUsers, ((com.google.gerrit.acceptance.rest.project.RefNames.REFS_GROUPS) + "*"), permission.user, com.google.gerrit.acceptance.rest.project.RefNames.refsUsers(adminGroupUUID, new com.google.gerrit.reviewdb.client.Project.NameKey(adminGroupUUID, com.google.gerrit.reviewdb.client.RefNames.refsUsers(adminGroupUUID))).delete(); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchInfo apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Cannot merge " + (rsrc.getRef())) + "\" already exists")); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchInfo apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Cannot merge " + (rsrc.getRef())) + " already exists")); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchInfo apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Cannot create " + (rsrc.getRef())) + "\" already exists")); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchInfo apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Cannot merge " + (rsrc.getRef())) + "\" already exists") + "\" already exists")); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchInfo apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Cannot merge " + (rsrc.getRef())) + "\" already exists") + "\" not existing")); }
com.google.gerrit.server.api.changes.CommentApiImpl create(com.google.gerrit.server.change.CommentResource c);
com.google.gerrit.server.api.changes.CommentApiImpl create(com.google.gerrit.server.api.changes.CommentResource c);
com.google.gerrit.server.api.changes.CommentApiImpl create(com.google.gerrit.server.change.CommentResource r);
com.google.gerrit.server.api.changes.CommentApiImplImpl create(com.google.gerrit.server.change.CommentResource c);
com.google.gerrit.server.api.changes.CommentApiImpl create(com.google.gerrit.server.api.changes.CommentResource r);
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Move change").setTitle("Move change to a change"); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Move change").setTitle("Move change to a change to a change"); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); return new com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Move change").setTitle("Move change to a change"); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Move change").setTitle("Move change to a change").setTitle("Move change to a change"); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); return new com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Move change").setTitle("Move change to a change to a change"); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.project.ProjectResource rsrc) { return com.google.common.base.Strings.nullToEmpty(rsrc.getProjectState().getDescription()); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.project.ProjectResource rsrc) { return com.google.common.base.Strings.nullToEmpty(rsrc.getProjectState().getProject().getDescription()); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.project.ProjectResource rsrc) { return com.google.common.base.Strings.nullToEmpty(rsrc.getProject().getDescription()); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.project.ProjectResource rsrc) { return com.google.common.base.Strings.nullToEmpty(rsrc.getProjectState().getProjectState()); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.project.ProjectResource rsrc) { return com.google.common.base.Strings.nullToEmpty(rsrc.getProject().getProject().getDescription()); }
private com.google.gerrit.server.project.ProjectResource checkExists() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ((project) == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(name); } return project; }
private com.google.gerrit.server.project.ProjectResource checkExists() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ((project) == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return project; }
private com.google.gerrit.server.project.ProjectResource checkExists() throws com.google.gerrit.extensions.restapi.RestApiException { if ((project) == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(name); } return project; }
private com.google.gerrit.server.project.ProjectResource checkExists()) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ((project) == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(name); } return project; }
private com.google.gerrit.server.project.ProjectResource checkExists() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ((project) == null) { return project; } return project; }
com.google.gerrit.server.api.projects.ProjectApiImpl create(com.google.gerrit.server.api.projects.ProjectResource project);
com.google.gerrit.server.api.projects.ProjectApiImpl create(com.google.gerrit.server.api.project.ProjectResource project);
com.google.gerrit.server.api.projects.ProjectApiImpl create(com.google.gerrit.server.project.ProjectResource project);
com.google.gerrit.server.api.projects.ProjectApiImpl create(com.google.gerrit.extensions.api.projects.ProjectResource project);
com.google.gerrit.server.api.projects.ProjectApiImpl create(com.google.gerrit.server.api.projects.ProjectApi project);
@java.lang.Override public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.server.IdentifiedUser caller) throws com.google.gerrit.server.git.validators.MergeValidationException { if ((!(allUsersName.equals(destProject.getNameKey()))) || (!(com.google.gerrit.server.IdentifiedUser.get())))) { return; } throw new com.google.gerrit.server.git.validators.MergeValidationException("Not allowed to update not allowed"); }
@java.lang.Override public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.server.IdentifiedUser caller) throws com.google.gerrit.server.git.validators.MergeValidationException { if ((!(allUsersName.equals(destProject.getNameKey()))) || (!(com.google.gerrit.reviewdb.client.RefNames.isGroupRef(destBranch.getNameKey())))) { return; } throw new com.google.gerrit.server.git.validators.MergeValidationException("Not allowed to update not allowed"); }
@java.lang.Override public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.server.IdentifiedUser caller) throws com.google.gerrit.server.git.validators.MergeValidationException { if ((!(allUsersName.equals(destProject.getNameKey()))) || (!(com.google.gerrit.server.IdentifiedUser.get()))) { return; } throw new com.google.gerrit.server.git.validators.MergeValidationException("Not allowed to update not allowed"); }
@java.lang.Override public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.server.IdentifiedUser caller) throws com.google.gerrit.server.git.validators.MergeValidationException { if ((!(allUsersName.equals(destProject.getNameKey()))) || (!(com.google.gerrit.server.IdentifiedUser.get())))) { return; } throw new com.google.gerrit.server.git.validators.MergeValidationException("Cannot update not allowed to update not allowed"); }
@java.lang.Override public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.server.IdentifiedUser caller) throws com.google.gerrit.server.git.validators.MergeValidationException { if ((!(allUsersName.equals(destProject.getNameKey()))) || (!(com.google.gerrit.reviewdb.client.RefNames.isGroupRef(destBranch.getNameKey()))) { return; } throw new com.google.gerrit.server.git.validators.MergeValidationException("Not allowed to update not allowed"); }
public static AccountGroup.UUID create(java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent author) { java.security.Message m = org.eclipse.jgit.lib.Constants.encode(org.eclipse.jgit.lib.PersonIdent.zeroId()); md.update(org.eclipse.jgit.lib.Constants.encode(("\n" + groupName)); md.update(org.eclipse.jgit.lib.Constants.encode((" " + (creator.toExternalString())))); }
public static AccountGroup.UUID create(java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent author) { java.security.Message m = org.eclipse.jgit.lib.Constants.encode(org.eclipse.jgit.lib.PersonIdent.zeroId()); md.update(org.eclipse.jgit.lib.Constants.encode(("\n" + groupName)); md.update(org.eclipse.jgit.lib.Constants.encode((" " + (author.toExternalString())))); }
public static AccountGroup.UUID create(java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent author) { java.security.Message m = org.eclipse.jgit.lib.Constants.encode(org.eclipse.jgit.lib.PersonIdent.zeroId()); md.update(org.eclipse.jgit.lib.Constants.encode(("\n" + groupName)); md.update(org.eclipse.jgit.lib.Constants.encode(("\n" + (creator.toExternalString())))); }
public static AccountGroup.UUID create(java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent author) { java.security.Message m = org.eclipse.jgit.lib.Constants.encode(org.eclipse.jgit.lib.PersonIdent.zeroId()); md.update(org.eclipse.jgit.lib.Constants.encode(("\n" + groupName)); md.update(org.eclipse.jgit.lib.Constants.encode((" " + (creator.getExternalString())))); }
public static AccountGroup.UUID create(java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent author) { java.security.Message m = org.eclipse.jgit.lib.Constants.encode(org.eclipse.jgit.lib.PersonIdent.zeroId()); md.update(org.eclipse.jgit.lib.Constants.encode(("\n" + groupName)); md.update(org.eclipse.jgit.lib.Constants.encode(("\n" + (creator.getExternalString())))); }
@org.junit.Test public void createdOnIsPopupsertForGroups() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup("accountId"); setCreatedOn(groupId); removeAuditEntriesForTesting(groupId); deleteAuditData(db, new com.google.gerrit.reviewdb.client.AccountGroup.Id()); java.sql.Timestamp createdOn = getCreatedOn(groupId); assertThat(createdOn).isEqualTo(com.google.gerrit.reviewdb.client.AccountGroup.auditCreationInstantTs()); }
@org.junit.Test public void createdOnIsPopupsertForGroups() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup("accountId"); setCreatedOn(groupId); removeAuditEntriesForTesting(groupId); removeAuditEvents(db, new com.google.gerrit.reviewdb.client.AccountGroup.Id()); java.sql.Timestamp createdOn = getCreatedOn(groupId); assertThat(createdOn).isEqualTo(com.google.gerrit.reviewdb.client.AccountGroup.auditCreationInstantTs()); }
@org.junit.Test public void createdOnIsPopupsertForGroups() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup("accountId"); setCreatedOn(groupId); removeAuditEntriesForTesting(groupId); deleteAuditValidationData(db, new com.google.gerrit.testutil.TestUpdateUI()); java.sql.Timestamp createdOn = getCreatedOn(groupId); assertThat(createdOn).isEqualTo(com.google.gerrit.reviewdb.client.AccountGroup.auditCreationInstantTs()); }
@org.junit.Test public void createdOnIsPopupsertForGroups() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup("accountId"); setCreatedOn(groupId); removeAuditEntriesForTesting(groupId); deleteAuditData(db, new com.google.gerrit.testutil.TestUpdateUI()); java.sql.Timestamp createdOn = getCreatedOn(groupId); assertThat(createdOn).isEqualTo(com.google.gerrit.reviewdb.client.AccountGroup.auditCreationInstantTs()); }
@org.junit.Test public void createdOnIsPopupToGroupsCreated() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup("accounts/schema"); setCreatedOn(groupId); removeAuditEntriesFor(groupId); deleteAuditValidationData(db, new com.google.gerrit.testutil.TestUpdateUI()); java.sql.Timestamp createdOn = getCreatedOn(groupId); assertThat(createdOn).isEqualTo(com.google.gerrit.reviewdb.client.AccountGroup.auditCreationInstantTs()); }
private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState project, java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId())!= null)? ref.getObjectId().name() : null; info.canDelete = ((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE)))? true : null; com.google.gerrit.server.project.BranchResource rsrc = new com.google.gerrit.server.project.BranchResource(projectState, user, ref); for (com.google.gerrit.extensions.webui.UiAction.Description d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(projectState.getName(), ref.getName()); info.webLinks = (links.isEmpty())? null : links; return info; }
private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState project, java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId())!= null)? ref.getObjectId().name() : null; info.canDelete = ((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE))) && (perm.testOrFalse(RefPermission.DELETE)))? true : null; com.google.gerrit.server.project.BranchResource rsrc = new com.google.gerrit.server.project.BranchResource(projectState, user, rsrc); for (com.google.gerrit.extensions.webui.UiAction d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions = new java.util.TreeMap(); } info.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(projectState.getName(), ref.getName()); info.webLinks = (links.isEmpty())? null : links; return info; }
private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState project, java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId())!= null)? ref.getObjectId().name() : null; info.canDelete = ((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE)))? true : null; com.google.gerrit.server.project.BranchResource rsrc = new com.google.gerrit.server.project.BranchResource(projectState, user, ref); for (com.google.gerrit.extensions.webui.UiAction.Description d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.WebLinkInfo(d)); } java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(projectState.getName(), ref.getName()); info.webLinks = (links.isEmpty())? null : links; return info; }
private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState project, java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId())!= null)? ref.getObjectId().name() : null; info.canDelete = ((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE)))? true : null; com.google.gerrit.server.project.BranchResource rsrc = new com.google.gerrit.server.project.BranchResource(projectState, user, ref); for (com.google.gerrit.extensions.webui.UiAction.Description d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(projectState.getName(), ref.getName()); info.webLinks = (links!= null)? null : links; return info; }
private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState project, java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId())!= null)? ref.getObjectId().name() : null; info.canDelete = ((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE))) && (perm.testOrFalse(RefPermission.DELETE)))? true : null; com.google.gerrit.server.project.BranchResource rsrc = new com.google.gerrit.server.project.BranchResource(projectState, user, rsrc); for (com.google.gerrit.extensions.webui.UiAction d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions = new com.google.gerrit.extensions.common.WebLinkInfo(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(d)); info.webLinks = (links.isEmpty())? null : links; return info; }
com.google.gerrit.extensions.api.projects.BranchInfo toBranchInfo(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { try (org.eclipse.jgit.lib.Repository r = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.lib.Ref r = db.getRef(rsrc.getRef()); if (r == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, com.google.common.collect.ImmutableList.of(r)).get(0); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
com.google.gerrit.extensions.api.projects.BranchInfo toBranchInfo(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { try (org.eclipse.jgit.lib.Repository r = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.lib.Ref r = db.getRef(rsrc.getRef()); if (r == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, com.google.common.collect.ImmutableList.of(r)); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
com.google.gerrit.extensions.api.projects.BranchInfo toBranchInfo(com.google.gerrit.server.project.BranchResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { try (org.eclipse.jgit.lib.Repository r = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.lib.Ref r = db.getRef(rsrc.getRef()); if (r == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, com.google.common.collect.ImmutableList.of(r)).get(0); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
com.google.gerrit.extensions.api.projects.BranchInfo toBranchInfo(com.google.gerrit.server.project.BranchResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { try (org.eclipse.jgit.lib.Repository r = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.lib.Ref r = db.getRef(rsrc.getRef()); if (r == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, com.google.common.collect.ImmutableList.of(r)); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
com.google.gerrit.extensions.api.projects.BranchInfo toBranchInfo(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { try (org.eclipse.jgit.lib.Repository r = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.lib.Ref r = db.getRef(rsrc.getRef()); if (r == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, com.google.common.collect.ImmutableList.of(r).get(0); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
private java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> allBranches(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { java.util.List<org.eclipse.jgit.lib.Repository> refs; try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) { java.util.Collection<org.eclipse.jgit.lib.Ref> heads = db.getRefDatabase().getRefs(Constants.R_HEADS).values(); refs = new java.util.ArrayList(((heads.size()) + 3)); refs.addAll(heads); refs.addAll(heads); refs.addAll(db.getRefDatabase().exactRef(Constants.REFS_CONFIG, RefNames.REFS_CONFIG, RefNames.REFS_CONFIG, RefNames.REFS_CONFIG).values()); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noGitRepository) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, refs); }
private java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> allBranches(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<org.eclipse.jgit.lib.Repository> refs; try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) { java.util.Collection<org.eclipse.jgit.lib.Ref> heads = db.getRefDatabase().getRefs(Constants.R_HEADS).values(); refs = new java.util.ArrayList(((heads.size()) + 3)); refs.addAll(heads); refs.addAll(db.getRefDatabase().exactRef(Constants.REFS_CONFIG, RefNames.REFS_CONFIG, RefNames.REFS_CONFIG, RefNames.REFS_CONFIG).values()); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noGitRepository) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, refs); }
private java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> allBranches(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<org.eclipse.jgit.lib.Repository> refs; try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) { java.util.Collection<org.eclipse.jgit.lib.Ref> heads = db.getRefDatabase().getRefs(Constants.R_HEADS).values(); refs = new java.util.ArrayList(((heads.size()) + 3)); refs.addAll(heads); refs.addAll(db.getRefDatabase().exactRef(Constants.REFS_CONFIG, RefNames.REFS_CONFIG, RefNames.REFS_CONFIG, RefNames.REFS_USERS_DEFAULT).values()); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noGitRepository) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, refs); }
private java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> allBranches(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<org.eclipse.jgit.lib.Repository> refs; try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) { java.util.Collection<org.eclipse.jgit.lib.Ref> heads = db.getRefDatabase().getRefs(Constants.R_HEADS).values(); refs = new java.util.ArrayList(((heads.size()) + 3)); refs.addAll(heads); refs.addAll(db.getRefDatabase().exactRef(Constants.REFS_CONFIG, RefNames.REFS_CONFIG, RefNames.REFS_CONFIG_USERS, RefNames.REFS_CONFIG).values()); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noGitRepository) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, refs); }
private java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> allBranches(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<org.eclipse.jgit.lib.Repository> refs; try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) { java.util.Collection<org.eclipse.jgit.lib.Ref> heads = db.getRefDatabase().getRefs(Constants.R_HEADS).values(); refs = new java.util.ArrayList(((heads.size()) + 3)); refs.addAll(heads); refs.addAll(db.getRefDatabase().exactRef(Constants.REFS_CONFIG, RefNames.REFS_CONFIG, RefNames.REFS_CONFIG, RefNames.REFS_CONFIG).values()); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noGitRepository) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, refs, refs); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring(matchSubstring).regex(matchRegex).start(start).limit(limit).limit(allBranches(allBranches(rsrc)); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring(matchSubstring).regex(matchRegex).start(start).limit(limit).limit(limit(allBranches(rsrc)); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).substring(matchSubstring(matchSubstring).regex(matchRegex).start(start).limit(limit).limit(allBranches(allBranches(rsrc)); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring(matchSubstring).regex(matchRegex).start(start).limit(limit).limit(allBranches(start).limit(allBranches(rsrc)); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring(matchSubstring).regex(matchRegex).start(start).limit(limit).limit(allBranches(start).limit(allBranches(allBranches)); }
private java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> toBranchInfo(com.google.gerrit.server.project.ProjectResource rsrc, java.util.List<org.eclipse.jgit.lib.Ref> refs) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Set<java.lang.String> targets = com.google.common.collect.Sets.newHashSetWithExpectedSize(1); for (org.eclipse.jgit.lib.Ref ref : refs) { if (ref.isSymbolic()) { targets.add(ref.getTarget().getName()); } } com.google.gerrit.server.permissions.PermissionBackend.ForProject perm = permissionBackend.user(user).project(rsrc.getNameKey()); java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> branches = new java.util.ArrayList(refs.size()); for (org.eclipse.jgit.lib.Ref ref : refs) { if (ref.isSymbolic()) { java.lang.String target = ref.getTarget().getName(); if (!(perm.ref(target.ref.ref(target).test(RefPermission.READ))) { continue; } if (target.startsWith(Constants.R_HEADS)) { target = target.substring(Constants.R_HEADS.length()); } com.google.gerrit.extensions.api.projects.BranchInfo b = new com.google.gerrit.extensions.api.projects.BranchInfo(); b.revision = ref.getName(); b.revision = target; branches.add(b); if (!(Constants.R_HEAD.equals(ref.getName()))) { b.canDelete = (ref.getName())? true : null; } } if (perm.ref.equals(ref.getName())) { branches.add(createBranchInfo(ref.getName()), ref, null); } } if (perm.ref.ref.ref(ref.getName())) { branches.add(createBranchInfo(ref
private java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> toBranchInfo(com.google.gerrit.server.project.ProjectResource rsrc, java.util.List<org.eclipse.jgit.lib.Ref> refs) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Set<java.lang.String> targets = com.google.common.collect.Sets.newHashSetWithExpectedSize(1); for (org.eclipse.jgit.lib.Ref ref : refs) { if (ref.isSymbolic()) { targets.add(ref.getTarget().getName()); } } com.google.gerrit.server.permissions.PermissionBackend.ForProject perm = permissionBackend.user(user).project(rsrc.getNameKey()); java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> branches = new java.util.ArrayList(refs.size()); for (org.eclipse.jgit.lib.Ref ref : refs) { if (ref.isSymbolic()) { java.lang.String target = ref.getTarget().getName(); if (!(perm.ref(targetPermission.READ))) { continue; } if (target.startsWith(Constants.R_HEADS)) { target = target.substring(Constants.R_HEADS.length()); } com.google.gerrit.extensions.api.projects.BranchInfo b = new com.google.gerrit.extensions.api.projects.BranchInfo(); b.revision = ref.getName(); b.revision = target; branches.add(b); if (!(Constants.R_HEAD.equals(ref.getName()))) { b.canDelete = (perm.ref(ref.getName()).testOrFalse(Ref.READ))? true : null; } } if (perm.ref(ref.getName())) { branches.add(createBranchInfo(ref.getName()), ref, null); } } if (perm.ref.ref.ref(ref.getName())) { branches.add(createBranchInfo(ref
private java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> toBranchInfo(com.google.gerrit.server.project.ProjectResource rsrc, java.util.List<org.eclipse.jgit.lib.Ref> refs) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Set<java.lang.String> targets = com.google.common.collect.Sets.newHashSetWithExpectedSize(1); for (org.eclipse.jgit.lib.Ref ref : refs) { if (ref.isSymbolic()) { targets.add(ref.getTarget().getName()); } } com.google.gerrit.server.permissions.PermissionBackend.ForProject perm = permissionBackend.user(user).project(rsrc.getNameKey()); java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> branches = new java.util.ArrayList(refs.size()); for (org.eclipse.jgit.lib.Ref ref : refs) { if (ref.isSymbolic()) { java.lang.String target = ref.getTarget().getName(); if (!(perm.ref(target.ref.ref(target).test(RefPermission.READ))) { continue; } if (target.startsWith(Constants.R_HEADS)) { target = target.substring(Constants.R_HEADS.length()); } com.google.gerrit.extensions.api.projects.BranchInfo b = new com.google.gerrit.extensions.api.projects.BranchInfo(); b.revision = ref.getName(); b.revision = target; branches.add(b); if (!(Constants.R_HEAD.equals(ref.getName()))) { b.canDelete = (ref.getName())? true : null; } } if (perm.ref.equals(ref.getName())) { branches.add(createBranchInfo(ref.getName()), ref, null); } } if (perm.ref.ref.ref(ref.getName())) { branches.add(createBranch, ref,
private java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> toBranchInfo(com.google.gerrit.server.project.ProjectResource rsrc, java.util.List<org.eclipse.jgit.lib.Ref> refs) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Set<java.lang.String> targets = com.google.common.collect.Sets.newHashSetWithExpectedSize(1); for (org.eclipse.jgit.lib.Ref ref : refs) { if (ref.isSymbolic()) { targets.add(ref.getTarget().getName()); } } com.google.gerrit.server.permissions.PermissionBackend.ForProject perm = permissionBackend.user(user).project(rsrc.getNameKey()); java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> branches = new java.util.ArrayList(refs.size()); for (org.eclipse.jgit.lib.Ref ref : refs) { if (ref.isSymbolic()) { java.lang.String target = ref.getTarget().getName(); if (!(perm.ref(target.ref.ref(target).test(RefPermission.READ))) { continue; } if (target.startsWith(Constants.R_HEADS)) { target = target.substring(Constants.R_HEADS.length()); } com.google.gerrit.extensions.api.projects.BranchInfo b = new com.google.gerrit.extensions.api.projects.BranchInfo(); b.revision = ref.getName(); b.revision = target; branches.add(b); if (!(Constants.R_HEAD.equals(ref.getName()))) { b.canDelete = (ref.getName())? true : null; } } if (perm.ref.equals(ref.getName())) { branches.add(createBranchInfo(ref.getName()), ref, ref, null); } } if (perm.ref.ref.ref(ref.getName())) { branches.add(createBranch,
private java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> toBranchInfo(com.google.gerrit.server.project.ProjectResource rsrc, java.util.List<org.eclipse.jgit.lib.Ref> refs) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Set<java.lang.String> targets = com.google.common.collect.Sets.newHashSetWithExpectedSize(1); for (org.eclipse.jgit.lib.Ref ref : refs) { if (ref.isSymbolic()) { targets.add(ref.getTarget().getName()); } } com.google.gerrit.server.permissions.PermissionBackend.ForProject perm = permissionBackend.user(user).project(rsrc.getNameKey()); java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> branches = new java.util.ArrayList(refs.size()); for (org.eclipse.jgit.lib.Ref ref : refs) { if (ref.isSymbolic()) { java.lang.String target = ref.getTarget().getName(); if (!(perm.ref(targetPermission.READ))) { continue; } if (target.startsWith(Constants.R_HEADS)) { target = target.substring(Constants.R_HEADS.length()); } com.google.gerrit.extensions.api.projects.BranchInfo b = new com.google.gerrit.extensions.api.projects.BranchInfo(); b.revision = ref.getName(); b.revision = target; branches.add(b); if (!(Constants.R_HEAD.equals(ref.getName()))) { b.canDelete = (perm.ref(ref.getName()).testOrFalse(Ref.READ))? true : null; } } if (perm.ref(ref.getName())) { branches.add(createBranchInfo(ref.getName()), ref, null); } } if (perm.ref.ref.ref(ref.getName())) { branches.add(createBranch, ref,
@java.lang.Override public boolean apply(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.api.projects.ProjectInput input) { com.google.gerrit.reviewdb.client.Project.NameKey project = resource.getNameKey(); com.google.gerrit.server.git.MultiProgressMonitor mgr = new com.google.gerrit.server.git.MultiProgressMonitor(com.google.common.io.ByteStreams.nullOutputStream(), "project").beginSubProgressMonitor("MultiProgressMonitor", project)).beginSubProgressMonitor.UNKNOWN); com.google.gerrit.server.index.change.AllChangesIndexer indexer = allChangesIndexerProvider.get(); allChangesIndexer.setVerboseOut(NullOutputStream.INSTANCE); @java.lang.SuppressWarnings("unused") java.util.concurrent.Future<java.lang.Void> ignored = executor.submit(allProjects.reindexProject(indexer, project, mpt)); return com.google.gerrit.extensions.restapi.Response.acceptance.acceptance.restapi.Response.accepted(((""); }
@java.lang.Override public boolean apply(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.api.projects.ProjectInput input) { com.google.gerrit.reviewdb.client.Project.NameKey project = resource.getNameKey(); com.google.gerrit.server.git.MultiProgressMonitor mgr = new com.google.gerrit.server.git.MultiProgressMonitor(com.google.common.io.ByteStreams.nullOutputStream(), "project").beginSubProgressMonitor("MultiProgressMonitor", project)).beginSubProgressMonitor.UNKNOWN); com.google.gerrit.server.index.change.AllChangesIndexer indexer = allChangesIndexerProvider.get(); allChangesIndexer.setVerboseOut(NullOutputStream.INSTANCE); @java.lang.SuppressWarnings("unused") java.util.concurrent.Future<java.lang.Void> ignored = executor.submit(allProjects.reindexProject(indexer, project, mpt)); return com.google.gerrit.extensions.restapi.Response.acceptance.acceptance.restapi.Response.accepted((("Multiple changes for " + project) + " submitted for reindex")); }
@java.lang.Override public boolean apply(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.api.projects.ProjectInput input) { com.google.gerrit.reviewdb.client.Project.NameKey project = resource.getNameKey(); com.google.gerrit.server.git.MultiProgressMonitor mgr = new com.google.gerrit.server.git.MultiProgressMonitor(com.google.common.io.ByteStreams.nullOutputStream(), "project").beginSubProgressMonitor("MultiProgressMonitor", project).beginSubProgressMonitor.UNKNOWN); com.google.gerrit.server.index.change.AllChangesIndexer indexer = allChangesIndexerProvider.get(); allChangesIndexer.setVerboseOut(NullOutputStream.INSTANCE); @java.lang.SuppressWarnings("unused") java.util.concurrent.Future<java.lang.Void> ignored = executor.submit(allProjects.reindexProject(indexer, project, mpt)); return com.google.gerrit.extensions.restapi.Response.acceptance.acceptance.restapi.Response.accepted((("Multiple changes for " + project) + " submitted for reindex")); }
@java.lang.Override public boolean apply(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.api.projects.ProjectInput input) { com.google.gerrit.reviewdb.client.Project.NameKey project = resource.getNameKey(); com.google.gerrit.server.git.MultiProgressMonitor mgr = new com.google.gerrit.server.git.MultiProgressMonitor(com.google.common.io.ByteStreams.nullOutputStream(), "project").beginSubProgressMonitor("MultiProgressMonitor", project)).beginSubProgressMonitor.UNKNOWN); com.google.gerrit.server.index.change.AllChangesIndexer indexer = allChangesIndexerProvider.get(); allChangesIndexer.setVerboseOut(NullOutputStream.INSTANCE); @java.lang.SuppressWarnings("unused") java.util.concurrent.Future<java.lang.Void> ignored = executor.submit(allProjects.reindexProject(indexer, project, mpt)); return com.google.gerrit.extensions.restapi.Response.acceptance.acceptance.restapi.Response.accepted((("Multiple changes for " + project) + " submitted for reindexed")); }
@java.lang.Override public boolean apply(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.api.projects.ProjectInput input) { com.google.gerrit.reviewdb.client.Project.NameKey project = resource.getNameKey(); com.google.gerrit.server.git.MultiProgressMonitor mgr = new com.google.gerrit.server.git.MultiProgressMonitor(com.google.common.io.ByteStreams.nullOutputStream(), "project").beginSubProgressMonitor("MultiProgressMonitor", project)).beginSubProgressMonitor.UNKNOWN); com.google.gerrit.server.index.change.AllChangesIndexer indexer = allChangesIndexerProvider.get(); allChangesIndexer.setVerboseOut(NullOutputStream.INSTANCE); @java.lang.SuppressWarnings("unused") java.util.concurrent.Future<java.lang.Void> ignored = executor.submit(allProjects.reindexProject(indexer, project, mpt)); return com.google.gerrit.extensions.restapi.Response.acceptance.acceptance.restapi.Response.accepted((("Reindexer indexer " + project) + " submitted for reindex")); }
@org.kohsuke.args4j.Option(name = "--owned", usage = "project-by", usage = "add the groups owned by the owned by the owned by the owned by user"); }
@org.kohsuke.args4j.Option(name = "--owned", usage = "project-by", usage = "add the groups owned by the membership owned by the owned by the owned by user"); }
@org.kohsuke.args4j.Option(name = "--owned", usage = "project-by", usage = "add the groups owned by the membership owned by the owned by the owned by the owned by user"); }
@org.kohsuke.args4j.Option(name = "--owned", usage = "project-by", usage = "add the groups owned by the membership owned by the owned by the owned by the owned by") void setOwnedBy(boolean ownedBy) { this.ownedBy = ownedBy; }
@org.kohsuke.args4j.Option(name = "--owned", usage = "project-by", usage = "add the groups owned by the membership owned by the owned by the owned by the owned by") void setOwnedBy(boolean ownedBy) { this.owned = ownedBy; }
@org.kohsuke.args4j.Option(name = "--account", aliases = { "-g" }, metaVar = "GROUP", usage = "add to index") void addGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { groupsToAdd.add(uuid); }
@org.kohsuke.args4j.Option(name = "--account", aliases = { "-g" }, metaVar = "GROUP", usage = "add to index") public void addGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { groupsToAdd.add(uuid); }
@org.kohsuke.args4j.Option(name = "--account", aliases = { "-g" }, metaVar = "GROUP", usage = "add to index") void addGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, uuid) { groupsToAdd.add(uuid); }
@org.kohsuke.args4j.Option(name = "--account", aliases = { "-g" }, metaVar = "GROUP", usage = "add to index") public void addGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { groupsToGroups.add(uuid); }
@org.kohsuke.args4j.Option(name = "--account", aliases = { "-g" }, metaVar = "GROUP", usage = "add to index") public void addGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { groupsToImplement(uuid); }
@org.kohsuke.args4j.Option(name = "-o", usage = "add options") void addOption(com.google.gerrit.extensions.client.ListGroupsOption o) { options.add(o); }
@org.kohsuke.args4j.Option(name = "-o", usage = "o") void addOption(com.google.gerrit.extensions.client.ListGroupsOption o) { options.add(o); }
@org.kohsuke.args4j.Option(name = "-o", usage = "o", usage = "add options") void addOption(com.google.gerrit.extensions.client.ListGroupsOption o) { options.add(o); }
@org.kohsuke.args4j.Option(name = "-o", usage = "add options") void addOption(com.google.gerrit.extensions.client.ListGroupsOption o) { options.addOption(o); }
@org.kohsuke.args4j.Option(name = "-o", usage = "add options") void addOption(com.google.gerrit.extensions.client.ListGroupsOption o) { options.add(o.getName()); }
@org.kohsuke.args4j.Option(name = "--regex", aliases = { "-r" }, metaVar = "REGEX", usage = "REGEX", usage = "REGEX", usage = "REGEXIST") public void setMatchRegex = matchRegex; }
@org.kohsuke.args4j.Option(name = "--regex", aliases = { "-r" }, metaVar = "REGEX", usage = "REGEX", usage = "REGEX", usage = "REGEXIST") void setMatchRegex = matchRegex; }
@org.kohsuke.args4j.Option(name = "--regex", aliases = { "-r" }, metaVar = "REGEX", usage = "REGEX", usage = "REGEX", usage = "REGEXIST") public void setMatchRegex(java.lang.String matchRegex) { this.matchRegex = matchRegex; }
@org.kohsuke.args4j.Option(name = "--regex", aliases = { "-r" }, metaVar = "REGEX", usage = "REGEX", usage = "REGEX", usage = "REGEXPAND") public void setMatchRegex = matchRegex; }
@org.kohsuke.args4j.Option(name = "--regex", aliases = { "-r" }, metaVar = "REGEX", usage = "REGEX", usage = "REGEX", usage = "REGEXPAND") public void setMatchRegex(java.lang.String matchRegex) { this.matchRegex = matchRegex; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.common.TagInfo input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String tag = com.google.gerrit.server.project.RefUtil.normalizeTagRef(resource.getTagInfo().ref); permissionBackend.user(resource).project(resource.getNameKey()).check(tag).delete(); deleteRefFactory.create(resource).ref(tag).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.common.TagInfo input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String tag = com.google.gerrit.server.project.RefUtil.normalizeTagRef(resource.getTagInfo().ref); permissionBackend.user(resource).project(resource).ref(tag).check(RefPermission.DELETE).check(RefPermission.DELETE).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.common.TagInfo input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String tag = com.google.gerrit.server.project.RefUtil.normalizeTagRef(resource.getTagInfo().ref); permissionBackend.user(user).project(resource).ref(tag).check(RefPermission.DELETE).check(RefPermission.DELETE).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.common.TagInfo input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String tag = com.google.gerrit.server.project.RefUtil.normalizeTagRef(resource.getTagInfo().ref); permissionBackend.user(resource).project(resource).ref(tag).check(RefPermission.DELETE).delete(); deleteRefFactory.create(resource).ref(tag).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.common.TagInfo input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String tag = com.google.gerrit.server.project.RefUtil.normalizeTagRef(resource.getTagInfo().ref); permissionBackend.user(resource).project(resource).ref(tag).check(RefPermission.DELETE).delete(); deleteRefFactory.create(resource).ref(tag).delete(); return com.google.gerrit.extensions.restapi.Response.ok(""); }
private static com.google.gerrit.server.query.QueryParseException getExceptionForUnsupportedOperation(java.lang.String operatorName) { return new com.google.gerrit.server.query.QueryParseException(java.lang.String.format("Unsupported operator for index version %s", operatorName)); }
private static com.google.gerrit.server.query.query.QueryParseException getExceptionForUnsupportedOperation(java.lang.String operator) { return new com.google.gerrit.server.query.QueryParseException(java.lang.String.format("Unsupported operator for index version %s index version %s", operatorName)); }
private static com.google.gerrit.server.query.query.QueryParseException getExceptionForUnsupportedOperation(java.lang.String operator) { return new com.google.gerrit.server.query.QueryParseException(java.lang.String.format("Unsupported operator for index version %s index version %s", operatorName, operatorName)); }
private static com.google.gerrit.server.query.query.QueryParseException getExceptionForUnsupportedOperation(java.lang.String operator) { return new com.google.gerrit.server.query.QueryParseException(java.lang.String.format("Unsupported operator for index version %s index version is not supported by index", com.google.gerrit.server.query.change.QueryBuilder.format(field)); }
private static com.google.gerrit.server.query.QueryParseException getExceptionForUnsupportedOperation(java.lang.String operatorName) { return new com.google.gerrit.server.query.QueryParseException(java.lang.String.format("Unsupported operator for index version %s index version is not supported by index", com.google.gerrit.server.query.change.QueryBuilder.format(java.lang.String.format("index version for index version %s", operatorName)); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((user.getUserName()) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Authentication must be set"); } com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(ExternalId.Key.create(com.google.gerrit.server.account.SCHEME_USERNAME, user.getUserName())); if (extId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.server.account.externalids.ExternalId newExtId = com.google.gerrit.server.account.externalids.ExternalId.createWithPassword(extId.key(), extId.email(), extId.email(), newPassword); externalIdsUpdate.create().upsert(newExtId); externalIdsUpdate.create().upsert(newPassword); return com.google.common.base.Strings.isNullOrEmpty(newPassword); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((user.getUserName()) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Authentication must be set"); } com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(ExternalId.Key.create(com.google.gerrit.server.account.SCHEME_USERNAME, user.getUserName())); if (extId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.server.account.externalids.ExternalId newExtId = com.google.gerrit.server.account.externalids.ExternalId.createWithPassword(extId.key(), extId.email(), extId.email(), newPassword); externalIdsUpdate.create().upsert(newExtId); return com.google.common.base.Strings.isNullOrEmpty(newPassword); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((user.getUserName()) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Authentication must be set"); } com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(ExternalId.Key.create(com.google.gerrit.server.account.SCHEME_USERNAME, user.getUserName())); if (extId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.server.account.externalids.ExternalId newExtId = com.google.gerrit.server.account.externalids.ExternalId.createWithPassword(extId.key(), extId.accountId(), extId.email(), newPassword); externalIdsUpdate.create().upsert(newExtId); externalIdsUpdate.create().upsert(newPassword); return com.google.common.base.Strings.isNullOrEmpty(newPassword); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((user.getUserName()) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("requires set must be set"); } com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(ExternalId.Key.create(com.google.gerrit.server.account.SCHEME_USERNAME, user.getUserName())); if (extId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.server.account.externalids.ExternalId newExtId = com.google.gerrit.server.account.externalids.ExternalId.createWithPassword(extId.key(), extId.accountId(), extId.email(), newPassword); externalIdsUpdate.create().upsert(newExtId); externalIdsUpdate.create().upsert(newPassword); return com.google.common.base.Strings.isNullOrEmpty(newPassword); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((user.getUserName()) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("requires set must be set"); } com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(ExternalId.Key.create(com.google.gerrit.server.account.SCHEME_USERNAME, user.getUserName())); if (extId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.server.account.externalids.ExternalId newExtId = com.google.gerrit.server.account.externalids.ExternalId.createWithPassword(extId.key(), extId.email(), extId.email(), newPassword); externalIdsUpdate.create().upsert(newExtId); externalIdsUpdate.create().upsert(newPassword); return com.google.common.base.Strings.isNullOrEmpty(newPassword); }
@java.lang.Override public void readFromConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, com.google.gerrit.server.group.InternalGroupConfig config, org.eclipse.jgit.lib.Config config) throws org.eclipse.jgit.errors.ConfigInvalidException { int id = config.getInt(com.google.gerrit.server.group.GroupConfigEntry.SECTION_NAME, super.keySet()); if (id < 0) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("account of account %s must be negative, found, found %s", found.get(), id)); } group.setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(id)); }
@java.lang.Override public void readFromConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, com.google.gerrit.server.group.InternalGroupConfig config, org.eclipse.jgit.lib.Config config) throws org.eclipse.jgit.errors.ConfigInvalidException { int id = config.getInt(com.google.gerrit.server.group.GroupConfigEntry.SECTION_NAME, super.keySet()); if (id < 0) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("%s must be negative, found, found %s", found, found.get(), id)); } group.setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(id)); }
@java.lang.Override public void readFromConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, com.google.gerrit.server.group.InternalGroupConfig config, org.eclipse.jgit.lib.Config config) throws org.eclipse.jgit.errors.ConfigInvalidException { int id = config.getInt(com.google.gerrit.server.group.GroupConfigEntry.SECTION_NAME, super.keySet()); if (id < 0) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("account of account %s must be negative, found, found %s", found, found.get(), id)); } group.setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(id)); }
@java.lang.Override public void readFromConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, com.google.gerrit.server.group.InternalGroupConfig config, org.eclipse.jgit.lib.Config config) throws org.eclipse.jgit.errors.ConfigInvalidException { int id = config.getInt(com.google.gerrit.server.group.GroupConfigEntry.SECTION_NAME, super.keySet()); if (id < 0) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("account of account %s must be negative, found, found %s", found, found, found)); } group.setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(id)); }
@java.lang.Override public void readFromConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, com.google.gerrit.server.group.InternalGroupConfig config, org.eclipse.jgit.lib.Config config) throws org.eclipse.jgit.errors.ConfigInvalidException { int id = config.getInt(com.google.gerrit.server.group.GroupConfigEntry.SECTION_NAME, super.keySet()); if (id < 0) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("account of account %s must be negative, found, found %s found", found, found, found)); } group.setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(id)); }
@java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply(com.google.gerrit.server.project.ChildProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ((recursive) || (rsrc.isDirectChild())) { return json.format(rsrc.getChild().getProject()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(rsrc.getChild().getProject()); }
@java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply(com.google.gerrit.server.project.ChildProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ((recursive) || (rsrc.isDirectChild())) { return json.format(rsrc.getChild().getProject().getName()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(rsrc.getChild().getProject()); }
@java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply(com.google.gerrit.server.project.ChildProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException { if ((recursive) || (rsrc.isDirectChild())) { return json.format(rsrc.getChild().getProject()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(rsrc.getChild().getProject()); }
@java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply(com.google.gerrit.server.project.ChildProjectResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException { if ((recursive) || (rsrc.isDirectChild())) { return json.format(rsrc.getChild().getProject()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(rsrc.getChild().getProject()); }
@java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply(com.google.gerrit.server.project.ChildProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ((recursive) || (rsrc.isDirectChild())) { return json.format(rsrc.getChild().getProject()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(rsrc.getChild().getProject().getName()); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.GroupInfo> apply(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = rsrc.asInternalGroup().orNull(r.getControl()); return getDirections(group, rsrc.getControl()); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.GroupInfo> apply(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = rsrc.asInternalGroup().orElseThrow(MethodNotFound); return getDirections(group, rsrc.getControl()); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.GroupInfo> apply(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = rsrc.asInternalGroup().orNull(method.new com.google.gerrit.reviewdb.client.AccountGroup.UUID::new); return getDirections(group, rsrc.getControl()); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.GroupInfo> apply(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = rsrc.asInternalGroup().orElseThrow(MethodNotAllowedException.new com.google.gerrit.server.project.NoSuchGroupException()); return getDirections(group, rsrc.getControl()); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.GroupInfo> apply(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = rsrc.asInternalGroup().orElseThrow(MethodNotAllowedException.new com.google.gerrit.server.project.NoSuchGroupException(((rsrc.getControl()) -> rsrc.getControl()))); return getDirections(group, rsrc.getControl()); }
private java.util.List<com.google.gerrit.reviewdb.client.Account.Id> suggestAccounts(com.google.gerrit.server.query.change.SuggestReviewers suggestReviewers) throws com.google.gwtorm.server.OrmException { try (com.google.gerrit.metrics.Timer0.Context ctx = metrics.queryAccountsLatency.start()) { try { com.google.gerrit.metrics.Timer0.Context result = queryProvider.get().setUserWithCapacity(((suggestReviewers.getLimit()) * (com.google.gerrit.server.change.ReviewersUtil.CANDONLY_LIST))).query(com.google.gerrit.server.query.change.ReviewersPredicate.defaultQuery(accountQueryBuilder.defaultQuery(accountQueryBuilder.getQuery()))).query(com.google.gerrit.server.query.change.AccountPredicate.defaultQuery(accountQueryBuilder.defaultQuery(suggestReviewers.getQuery()))).collect(java.util.stream.Collectors.toList()); return result.entities().map(( a) -> a.getAccount().getId()).collect(java.util.stream.Collectors.toList()); } catch (com.google.gerrit.server.query.QueryParseException e) { return com.google.common.collect.ImmutableList.of(); } }
private java.util.List<com.google.gerrit.reviewdb.client.Account.Id> suggestAccounts(com.google.gerrit.server.query.change.SuggestReviewers suggestReviewers) throws com.google.gwtorm.server.OrmException { try (com.google.gerrit.metrics.Timer0.Context ctx = metrics.queryAccountsLatency.start()) { try { com.google.gerrit.metrics.Timer0.Context result = queryProvider.get().setUserWithCapacity(((suggestReviewers.getLimit()) * (com.google.gerrit.server.change.ReviewersUtil.CANDONLY_LIST))).query(com.google.gerrit.server.query.change.ReviewersPredicate.defaultQuery(accountQueryBuilder.defaultQuery(suggestReviewers.getQuery()))).query(com.google.gerrit.server.query.change.AccountPredicate.defaultQuery(accountQueryBuilder.defaultQuery(suggestReviewers.getQuery()))).collect(java.util.stream.Collectors.toList()); return result.entities().map(( a) -> a.getAccount().getId()).collect(java.util.stream.Collectors.toList()); } catch (com.google.gerrit.server.query.QueryParseException e) { return com.google.common.collect.ImmutableList.of(); } }
private java.util.List<com.google.gerrit.reviewdb.client.Account.Id> suggestAccounts(com.google.gerrit.server.query.change.SuggestReviewers suggestReviewers) throws com.google.gwtorm.server.OrmException { try (com.google.gerrit.metrics.Timer0.Context ctx = metrics.queryAccountsLatency.start()) { try { com.google.gerrit.metrics.Timer0.Context result = queryProvider.get().setUserWithCapacity(((suggestReviewers.getLimit()) * (com.google.gerrit.server.change.ReviewersUtil.CANDONLY_LIST))).query(com.google.gerrit.server.query.change.ReviewersPredicate.defaultQuery(accountQueryBuilder.defaultQuery(accountQueryBuilder.getQuery()))).query(com.google.gerrit.server.query.change.AccountPredicate.defaultQuery(accountQueryBuilder.defaultQuery(accountQueryBuilder.defaultQuery()))).collect(java.util.stream.Collectors.toList()); return result.entities().map(( a) -> a.getAccount().getId()).collect(java.util.stream.Collectors.toList()); } catch (com.google.gerrit.server.query.QueryParseException e) { return com.google.common.collect.ImmutableList.of(); } }
private java.util.List<com.google.gerrit.reviewdb.client.Account.Id> suggestAccounts(com.google.gerrit.server.query.change.SuggestReviewers suggestReviewers) throws com.google.gwtorm.server.OrmException { try (com.google.gerrit.metrics.Timer0.Context ctx = metrics.queryAccountsLatency.start()) { try { com.google.gerrit.metrics.Timer0.Context result = queryProvider.get().setUserWithCapacity(((suggestReviewers.getLimit()) * (com.google.gerrit.server.change.ReviewersUtil.CANDONLY_LIST))).query(com.google.gerrit.server.query.change.ReviewersPredicate.defaultQuery(accountQueryBuilder.defaultQuery(suggestReviewers.getQuery()))).query(com.google.gerrit.server.query.change.AccountPredicate.defaultQuery(accountQueryBuilder.defaultQuery(accountQueryBuilder.defaultQuery()))).collect(java.util.stream.Collectors.toList()); return result.entities().map(( a) -> a.getAccount().getId()).collect(java.util.stream.Collectors.toList()); } catch (com.google.gerrit.server.query.QueryParseException e) { return com.google.common.collect.ImmutableList.of(); } }
private java.util.List<com.google.gerrit.reviewdb.client.Account.Id> suggestAccounts(com.google.gerrit.server.query.change.SuggestReviewers suggestReviewers) throws com.google.gwtorm.server.OrmException { try (com.google.gerrit.metrics.Timer0.Context ctx = metrics.queryAccountsLatency.start()) { try { com.google.gerrit.metrics.Timer0.Context result = queryProvider.get().setUserWithCapacity(((suggestReviewers.getLimit()) * (com.google.gerrit.server.change.ReviewersUtil.CANDONLY_LIST))).query(com.google.gerrit.server.query.change.ReviewersPredicate.defaultQuery(accountQueryBuilder.defaultQuery(accountQueryBuilder.getQuery()))).query(com.google.gerrit.server.query.change.AccountPredicates.defaultQuery(accountQueryBuilder.defaultQuery(accountQueryBuilder.defaultQuery()))).collect(java.util.stream.Collectors.toList()); return result.entities().map(( a) -> a.getAccount().getId()).collect(java.util.stream.Collectors.toList()); } catch (com.google.gerrit.server.query.QueryParseException e) { return com.google.common.collect.ImmutableList.of(); } }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.GroupResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.MemberResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.MemberInfo>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.RestView<com.google.gerrit.server.group.GroupResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.RestView<com.google.gerrit.server.group.MemberResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.server.group.AddSubmodule.PutSubscription create(com.google.gerrit.server.group.GroupResource group, com.google.gerrit.reviewdb.client.AccountGroup.Id id) { return new com.google.gerrit.server.group.AddSubsections.AddSubstring(id.get()); }
@java.lang.Override public com.google.gerrit.server.group.AddSubmodule.PutSubscription create(com.google.gerrit.server.group.GroupResource group, com.google.gerrit.reviewdb.client.AccountGroup.Id id) { return new com.google.gerrit.server.group.AddSubsections.AddSubsections(addSubsections, id.get()); }
@java.lang.Override public com.google.gerrit.server.group.AddSubmodule.PutSubscription create(com.google.gerrit.server.group.GroupResource group, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.group.AddSubsections.AddSubmodule(addSubsections, id); }
@java.lang.Override public com.google.gerrit.server.group.AddSubmodule.PutSubscription create(com.google.gerrit.server.group.GroupResource group, com.google.gerrit.reviewdb.client.AccountGroup.Id id) { return new com.google.gerrit.server.group.AddSubsections.AddSubsections(addSubsections, id); }
@java.lang.Override public com.google.gerrit.server.group.AddSubmodule.PutSubscription create(com.google.gerrit.server.group.GroupResource group, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.group.AddSubsections.AddSubsections(addSubsections, id); }
@java.lang.Override public com.google.gerrit.server.group.GroupResource parse(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.common.data.GroupDescription.Basic parent = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); com.google.gerrit.common.data.GroupDescription.Basic member = groupsCollection.parse(TopLevelResource.INSTANCE, id).getGroup(); if ((resource.getControl().canSeeGroup()) && (com.google.gerrit.server.group.Subsections.isVisibleGroup(parent, member))) { return new com.google.gerrit.server.group.SubmoduleResource(resource, member); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.group.GroupResource parse(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.common.data.GroupDescription.Basic parent = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); com.google.gerrit.common.data.GroupDescription.Basic member = groupsCollection.parse(TopLevelResource.INSTANCE, id).getGroup(); if ((resource.getControl().canSeeGroup()) && (com.google.gerrit.server.group.Subsections.isVisibleGroup(parent, member))) { return new com.google.gerrit.server.group.Substring(parent, member); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.group.GroupResource parse(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.common.data.GroupDescription.Basic parent = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); com.google.gerrit.common.data.GroupDescription member = groupsCollection.parse(TopLevelResource.INSTANCE, id).getGroup(); if ((resource.getControl().canSeeGroup()) && (com.google.gerrit.server.group.Subsections.isVisibleGroup(parent, member))) { return new com.google.gerrit.server.group.Subsections.Substring(parent, member)); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.group.GroupResource parse(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.common.data.GroupDescription.Basic parent = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); com.google.gerrit.common.data.GroupDescription.Basic member = groupsCollection.parse(TopLevelResource.INSTANCE, id).getGroup(); if ((resource.getControl().canSeeGroup()) && (com.google.gerrit.server.group.Subsections.isVisibleGroup(parent, member))) { return new com.google.gerrit.server.group.Subsections.Substring(parent, member); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.group.GroupResource parse(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.common.data.GroupDescription.Basic parent = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); com.google.gerrit.common.data.GroupDescription.Basic member = groupsCollection.parse(TopLevelResource.INSTANCE, id).getGroup(); if ((resource.getControl().canSeeGroup()) && (com.google.gerrit.server.group.Subsections.isVisibleGroup(parent, member))) { return new com.google.gerrit.server.group.Subsections.Substring(parent, member)); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.GroupResource> list() { return list; }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.GroupResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { return list; }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.GroupResource> list() throws com.google.gerrit.extensions.restapi.RestApiException { return list; }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.account.GroupResource> list() { return list; }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.GroupResource> list() { return com.google.gerrit.server.group.GroupResource.list(); }
com.google.gerrit.server.api.changes.DraftApiImpl create(com.google.gerrit.server.api.changes.DraftCommentResource d);
com.google.gerrit.server.api.changes.DraftApiImpl create(com.google.gerrit.server.change.DraftCommentResource d);
com.google.gerrit.server.api.changes.DraftApiImplImpl create(com.google.gerrit.server.change.DraftCommentResource d);
com.google.gerrit.server.api.changes.DraftApiImplImpl create(com.google.gerrit.server.api.changes.DraftCommentResource d);
com.google.gerrit.server.api.changes.DraftApiImpl create(com.google.gerrit.server.api.changes.CommentResource d);
@org.kohsuke.args4j.Option(name = "--match", aliases = { "-m" }, metaVar = "MATCH", usage = "MATCH", usage = "add sub sub sub sub sub sub subsubstring") void setMatchSubstring(java.lang.String matchSubstring) { this.matchSubstring = matchSubstring; }
@org.kohsuke.args4j.Option(name = "--match", aliases = { "-m" }, metaVar = "MATCH", usage = "MATCH", usage = "add sub sub sub sub sub sub sub subsubstring") void setMatchSubstring(java.lang.String matchSubstring) { this.matchSubstring = matchSubstring; }
@org.kohsuke.args4j.Option(name = "--match", aliases = { "-m" }, metaVar = "MATCH", usage = "MATCH", usage = "add sub sub sub sub sub sub subsubstring") void setMatchSubstring(matchSubstring) { this.matchSubstring = matchSubstring; }
@org.kohsuke.args4j.Option(name = "--match", aliases = { "-m" }, metaVar = "MATCH", usage = "MATCH", usage = "add sub sub sub sub sub sub sub subsubstring") void setMatchSubstring(matchSubstring) { this.matchSubstring = matchSubstring; }
@org.kohsuke.args4j.Option(name = "--match", aliases = { "-m" }, metaVar = "MATCH", usage = "MATCH", usage = "add sub sub sub sub sub sub subsubstring") void setMatchSubstring(java.lang.String matchSubstring) { this.matchSubstring = matchSubstring; } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupOptions apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.common.GroupOptionsInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.common.data.GroupDescription.Basic internalGroup = resource.asInternal(); if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to determine private"); } if ((input == null) || (resource.getControl().isOwner())) { input.visibleToAll = false; } if ((input.visibleToAll) == null) { input.visibleToAll(input.visibleToAll()); } if ((internalGroup.visibleToAll) == null) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); com.google.gerrit.server.group.GroupResource group = com.google.gerrit.server.group.InternalGroupUpdate.Builder.setVisibleToAll(input.visibleToAll(input.visibleToAll).build(); try { groupsUpdateFactory.get().update(db.get(), groupUuid, groupUuid, group); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("Group %s not found", groupUUID)); } } return options; }
@java.lang.Override public com.google.gerrit.extensions.common.GroupOptions apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.common.GroupOptionsInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.common.data.GroupDescription.Basic internalGroup = resource.asInternal(); if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to determine private"); } if ((input == null) || (resource.getControl().isOwner())) { input.visibleToAll = false; } if ((input.visibleToAll) == null) { input.visibleToAll(input.visibleToAll()); } if ((internalGroup.visibleToAll) == null) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); com.google.gerrit.server.group.GroupResource group = com.google.gerrit.server.group.InternalGroupUpdate.Builder.setVisibleToAll(input.visibleToAll(input.visibleToAll).build(); try { groupsUpdateFactory.get().update(db.get(), groupUuid, groupUuid, group); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("Group %s not found", groupUUID)); } return group; }
@java.lang.Override public com.google.gerrit.extensions.common.GroupOptions apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.common.GroupOptionsInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.common.data.GroupDescription.Basic internalGroup = resource.asInternal(); if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to determine private"); } if ((input == null) || (resource.getControl().isOwner())) { input.visibleToAll = false; } if ((input.visibleToAll) == null) { input.visibleToAll(input.visibleToAll()); } if ((internalGroup.visibleToAll) == null) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); com.google.gerrit.server.group.GroupResource group = com.google.gerrit.server.group.InternalGroupUpdate.Builder.setVisibleToAll(input.visibleToAll(input.visibleToAll).build(); try { groupsUpdateFactory.get().update(db.get(), groupUuid, groupUuid, group); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("Group %s not found", groupUUID)); } } return groupOptions; }
@java.lang.Override public com.google.gerrit.extensions.common.GroupOptions apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.common.GroupOptionsInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.common.data.GroupDescription.Basic internalGroup = resource.asInternal(); if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to determine private"); } if ((input == null) || (resource.getControl().isOwner())) { input.visibleToAll = false; } if ((input.visibleToAll) == null) { input.visibleToAll(input.visibleToAll()); } if ((internalGroup.visibleToAll) == null) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); com.google.gerrit.server.group.GroupResource group = com.google.gerrit.server.group.InternalGroupUpdate.Builder.setVisibleToAll(input.visibleToAll(input.visibleToAll).build(); try { groupsUpdateFactory.get().update(db.get(), groupUuid, groupUuid, group); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("Group %s not found", groupUUID)); } } return group; }
@java.lang.Override public com.google.gerrit.extensions.common.GroupOptions apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.common.GroupOptionsInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.common.data.GroupDescription.Basic internalGroup = resource.asInternal(); if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to determine private"); } if ((input == null) || (resource.getControl().isOwner())) { input.visibleToAll = false; } if ((input.visibleToAll) == null) { input.visibleToAll(input.visibleToAll()); } if ((internalGroup.visibleToAll) == null) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); com.google.gerrit.server.group.GroupResource group = com.google.gerrit.server.group.InternalGroupUpdate.Builder.setVisibleToAll(input.visibleToAll(input.visibleToAll).build(); try { groupsUpdateFactory.get().update(db.get(), groupUuid, group); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("Group %s not found", groupUUID)); } } return new com.google.gerrit.server.group.GroupOptions(options); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.project.ProjectResource resource) { com.google.gerrit.reviewdb.client.Project.NameKey parent = resource.getProject().getProject(); com.google.gerrit.reviewdb.client.Project.NameKey parentName = project.getParent(allProjectsName); return parentName!= null? parentName.get() : ""; }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.project.ProjectResource resource) { com.google.gerrit.reviewdb.client.Project project = resource.getProjectState().getProject(); com.google.gerrit.reviewdb.client.Project.NameKey parentName = project.getParent(allProjectsName); return parentName!= null? parentName.get() : ""; }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.project.ProjectResource resource) { com.google.gerrit.reviewdb.client.Project project = resource.getProject().getProject(); com.google.gerrit.reviewdb.client.Project.NameKey parentName = project.getParent(allProjectsName); return parentName!= null? parentName.get() : ""; }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.project.ProjectResource resource) { com.google.gerrit.reviewdb.client.Project.NameKey parent = resource.getProjectState().getProject(); com.google.gerrit.reviewdb.client.Project.NameKey parentName = project.getParent(allProjectsName); return parentName!= null? parentName.get() : ""; }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.project.ProjectResource resource) { com.google.gerrit.reviewdb.client.Project.NameKey parent = resource.getProject(); com.google.gerrit.reviewdb.client.Project.NameKey parentName = project.getParent(allProjectsName); return parentName!= null? parentName.get() : ""; }
@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.server.project.GarbageCollection.Input input) { com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getNameKey(); if (input.async) { return applyAsync(project, input); } return applyAsync(project, input); }
@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.server.project.GarbageCollect.Input input) { com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getNameKey(); if (input.async) { return applyAsync(project, input); } return applyAsync(project, input); }
@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.server.project.GarbageCollection.Input input) { com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getNameKey(); if (input.async) { return applyAsync(project, input); } return applySync(project, input); }
@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.server.project.GarbageCollection.Input input) { com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getNameKey(); if (input.async) { return applyAsync(project, input); } return apply(project, input); }
@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.server.project.GarbageCollection.Input input) { return com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getNameKey(); if (input.async) { return applyAsync(project, input); } return applyAsync(project, input); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.project.ProjectResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Git GCGarbage collection for GC : com.google.gerrit.reviewdb.client.Project.NameKey.setGitGarbageCollection().setName(trimGarbageCollection.getName()); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.project.ProjectResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Git GCGarbage collection for GC : com.google.gerrit.extensions.webui.UiAction.Description.setLabel("Git GCGarbage collection for GC)); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.project.ProjectResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Git GCGarbage collection for GC : com.google.gerrit.reviewdb.client.Project.NameKey.setGitGarbageCollection().setName(trimGarbageCollection.getName())); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.project.ProjectResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Git GCGarbage collection for GC : com.google.gerrit.reviewdb.client.Project.NameKey.setGitGarbageCollection().setGroups(trimGarbageCollection.getName()); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.project.ProjectResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Git GCGarbage collection for GC : com.google.gerrit.reviewdb.client.Project.NameKey.setGitGarbageCollection().setGroups(trimGarbageCollection.getName())); }
protected com.google.gerrit.common.data.ContributorAgreement configureContributorAgreement(boolean autoVerify) throws java.lang.Exception { com.google.gerrit.common.data.ContributorAgreement ca; if (autoVerify) { java.lang.String g = createGroup(g); com.google.gerrit.extensions.api.groups.GroupApi groupApi = gApi.groups().id(g); groupApi.description("cla test"); com.google.gerrit.server.group.GroupReference group = group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupApi.getGroupUUID().id)); com.google.gerrit.server.group.GroupReference group = new com.google.gerrit.common.data.GroupReference(ca.getGroupUUID(), group.getName()); com.google.gerrit.common.data.PermissionRule rule = new com.google.gerrit.common.data.PermissionRule(groupRef); rule.setAction(PermissionRule.Action.Action.ALL); ca.setAutoValue(groupRef); ca.setAccepted(groupRef); } else { ca = new com.google.gerrit.common.data.ContributorAgreements("cla-check"); ca.setAutoValue(groupRef); } return ca; }
protected com.google.gerrit.common.data.ContributorAgreement configureContributorAgreement(boolean autoVerify) throws java.lang.Exception { com.google.gerrit.common.data.ContributorAgreement ca; if (autoVerify) { java.lang.String g = createGroup(g); com.google.gerrit.extensions.api.groups.GroupApi groupApi = gApi.groups().id(g); groupApi.description("cla test"); com.google.gerrit.server.group.GroupReference group = group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupApi.getGroupUUID().id)); com.google.gerrit.server.group.GroupReference group = new com.google.gerrit.common.data.GroupReference(ca.getGroupUUID(), group.getName()); com.google.gerrit.common.data.PermissionRule rule = new com.google.gerrit.common.data.PermissionRule(groupRef); rule.setAction(PermissionRule.Action.Action.ALL); ca.setAutoValue(groupRef); ca.setAccepted(groupRef); } else { ca = new com.google.gerrit.common.data.ContributorAgreements("cla-check"); ca.setAutoValue(groupRef); } }
protected com.google.gerrit.common.data.ContributorAgreement configureContributorAgreement(boolean autoVerify) throws java.lang.Exception { com.google.gerrit.common.data.ContributorAgreement ca; if (autoVerify) { java.lang.String g = createGroup(g); com.google.gerrit.extensions.api.groups.GroupApi groupApi = gApi.groups().id(g); groupApi.description("cla test"); com.google.gerrit.server.group.GroupReference group = group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupApi.getGroupUUID().id)); com.google.gerrit.server.group.GroupReference group = new com.google.gerrit.common.data.GroupReference(ca.getGroupUUID(), group.getName()); com.google.gerrit.common.data.PermissionRule rule = new com.google.gerrit.common.data.GroupReference(groupRef); rule.setAction(PermissionRule.Action.ALL); ca.setAutoMerge(groupRef); ca.setAutoMerge(groupRef); } else { ca = new com.google.gerrit.common.data.ContributorAgreements("cla-check"); ca.setAutoValue(groupRef); } ca.setDescription("avax.servlet.Filter")); return ca; }
protected com.google.gerrit.common.data.ContributorAgreement configureContributorAgreement(boolean autoVerify) throws java.lang.Exception { com.google.gerrit.common.data.ContributorAgreement ca; if (autoVerify) { java.lang.String g = createGroup(g); com.google.gerrit.extensions.api.groups.GroupApi groupApi = gApi.groups().id(g); groupApi.description("cla test"); com.google.gerrit.server.group.GroupReference group = group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupApi.getGroupUUID().id)); com.google.gerrit.server.group.GroupReference group = new com.google.gerrit.common.data.GroupReference(ca.getGroupUUID(), group.getName()); com.google.gerrit.common.data.PermissionRule rule = new com.google.gerrit.common.data.GroupReference(groupRef); rule.setAction(PermissionRule.Action.ALL); ca.setAutoMerge(groupRef); ca.setAutoMerge(groupRef); } else { ca = new com.google.gerrit.common.data.ContributorAgreements("cla-check"); ca.setAutoValue(groupRef); } ca.setDescription("avax.servlet.Filter")); saveProjectConfig(all); return ca; }
protected com.google.gerrit.common.data.ContributorAgreement configureContributorAgreement(boolean autoVerify) throws java.lang.Exception { com.google.gerrit.common.data.ContributorAgreement ca; if (autoVerify) { java.lang.String g = createGroup(g); com.google.gerrit.extensions.api.groups.GroupApi groupApi = gApi.groups().id(g); groupApi.description("cla test"); com.google.gerrit.server.group.GroupReference group = group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupApi.getGroupUUID().id)); com.google.gerrit.server.group.GroupReference group = new com.google.gerrit.common.data.GroupReference(ca.getGroupUUID(), group.getName()); com.google.gerrit.common.data.PermissionRule rule = new com.google.gerrit.common.data.GroupReference(groupRef); rule.setAction(PermissionRule.Action.ALL); ca.setAutoMerge(groupRef); ca.setAutoMerge(groupRef); } else { ca = new com.google.gerrit.common.data.ContributorAgreements("cla-check"); ca.setAutoValue(groupRef); } ca.setDescription("avax.servlet.http.HttpServletRequest req = projectCache.checkedGet(allProjects).getConfig(); cfg.setConfig(ca); saveProjectConfig(all); return ca; }
@java.lang.Override public com.google.gerrit.server.change.FileResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.change.FileResource(rev, id.get()); }
@java.lang.Override public com.google.gerrit.server.change.FileResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.change.FileResource(id, id.get()); }
@java.lang.Override public com.google.gerrit.server.change.FileResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.change.FileResource(revisions.get(id).get()); }
@java.lang.Override public com.google.gerrit.server.change.FileResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.change.FileResource(revisions.get(id.get()), id.get()); }
@java.lang.Override public com.google.gerrit.server.change.FileResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.change.FileResource(revisions.get(id.get()), id); }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.FileResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.Resource<com.google.gerrit.server.change.FileResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.ChangeResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.FileResource>> views() { return view; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.FileView<com.google.gerrit.server.change.FileResource>> views() { return views; }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.extensions.api.projects.BanCommitInput input = com.google.gerrit.extensions.api.projects.BanCommitInput.fromCommits(com.google.common.collect.Lists.transform(commitsToBan, objectId::getName)); input.reason = reason; com.google.gerrit.server.project.BanCommit.BanResult r = banCommit.apply(new com.google.gerrit.server.project.ProjectResource(projectState, user), input); printCommits(r.alreadyBanned, "The following commits were banned"); printCommits(r.alreadyBanned, "The following commits were ignored"); } catch (java.lang.Exception e) { throw die(e); } catch (java.lang.Exception e) { throw die(e); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.extensions.api.projects.BanCommitInput input = com.google.gerrit.extensions.api.projects.BanCommitInput.fromCommits(com.google.common.collect.Lists.transform(commitsToBan, objectId::getName)); input.reason = reason; com.google.gerrit.server.project.BanCommit.BanResult r = banCommit.apply(new com.google.gerrit.server.project.ProjectResource(projectState, user), input); printCommits(r.alreadyBanned, "The following commits were banned"); printCommits(r.alreadyBanned, "The following commits were ignored"); } catch (java.lang.Exception e) { throw die(e); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.extensions.api.projects.BanCommitInput input = com.google.gerrit.extensions.api.projects.BanCommitInput.fromCommits(com.google.common.collect.Lists.transform(commitsToBan, objectId::getName)); input.reason = reason; com.google.gerrit.server.project.BanCommit.BanResult r = banCommit.apply(new com.google.gerrit.server.project.ProjectResource(projectState, user), input); printCommits(r.alreadyBanned, "The following commits were banned"); printCommits(r.alreadyBanned, "The following commits were ignored"); } catch (java.lang.Exception e) { throw die(e); } } catch (java.lang.Exception e) { throw die(e); }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.extensions.api.projects.BanCommitInput input = com.google.gerrit.extensions.api.projects.BanCommitInput.fromCommits(com.google.common.collect.Lists.transform(commitsToBan, objectId::getName)); input.reason = reason; com.google.gerrit.server.project.BanCommit.BanResult r = banCommit.apply(new com.google.gerrit.server.project.ProjectResource(projectState, user), input); printCommits(r.alreadyBanned, "The following commits were banned"); printCommits(r.alreadyBanned, "The following commits were ignored"); } catch (java.lang.Exception e) { throw die(e); } catch (java.lang.Exception e) { throw die(e); }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.extensions.api.projects.BanCommitInput input = com.google.gerrit.extensions.api.projects.BanCommitInput.fromCommits(com.google.common.collect.Lists.transform(commitsToBan, objectId::getName)); input.reason = reason; com.google.gerrit.server.project.BanCommit.BanResult r = banCommit.apply(new com.google.gerrit.server.project.ProjectResource(projectState, user), input); printCommits(r.alreadyBanned, "The following commits were banned"); printCommits(r.alreadyBanned, "The following commits were ignored"); } catch (java.lang.Exception e) { throw die(e); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { throw die(e); } }
@java.lang.Override public void readFromConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, com.google.gerrit.server.group.InternalGroupConfig config, org.eclipse.jgit.lib.Config config) throws org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String ownerGroupUUID = config.getString(com.google.gerrit.server.group.GroupConfigSection.SECTION_NAME, null, super.key); if (com.google.common.base.Strings.isNullOrEmpty(ownerGroupUUID)) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("Invalid group %s must be provided by " + ownerId.get())); } group.setOwnerUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(ownerGroupUUID)); }
@java.lang.Override public void readFromConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, com.google.gerrit.server.group.InternalGroupConfig config, org.eclipse.jgit.lib.Config config) throws org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String ownerGroupUUID = config.getString(com.google.gerrit.server.group.GroupConfigConstants.SECTION_NAME, null, super.key); if (com.google.common.base.Strings.isNullOrEmpty(ownerGroupUUID)) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("Group %s must be provided by " + ownerUUID)); } group.setOwnerUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(ownerGroupUUID)); }
@java.lang.Override public void readFromConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, com.google.gerrit.server.group.InternalGroupConfig config, org.eclipse.jgit.lib.Config config) throws org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String ownerGroupUUID = config.getString(com.google.gerrit.server.group.GroupConfigSection.SECTION_NAME, null, super.key); if (com.google.common.base.Strings.isNullOrEmpty(ownerGroupUUID)) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("Invalid group %s must be provided by " + ownerUUID)); } group.setOwnerUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(ownerGroupUUID)); }
@java.lang.Override public void readFromConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, com.google.gerrit.server.group.InternalGroupConfig config, org.eclipse.jgit.lib.Config config) throws org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String ownerGroupUUID = config.getString(com.google.gerrit.server.group.GroupConfigSection.SECTION_NAME, null, super.key); if (com.google.common.base.Strings.isNullOrEmpty(ownerGroupUUID)) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("Invalid group %s must be provided by " + ownerUuid.get())); } group.setOwnerUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(ownerGroupUUID)); }
@java.lang.Override public void readFromConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, com.google.gerrit.server.group.InternalGroupConfig config, org.eclipse.jgit.lib.Config config) throws org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String ownerGroupUUID = config.getString(com.google.gerrit.server.group.GroupConfigSection.SECTION_NAME, null, super.key); if (com.google.common.base.Strings.isNullOrEmpty(ownerGroupUUID)) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("Invalid group %s must be provided by " + ownerId.get())); } group.setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(ownerGroupUUID)); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.ProjectResource project, DeleteBranchesInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((input == null) || ((input.branches) == null)) || (input.branches.isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequestException("branches must be specified"); } deleteRefFactory.create(project).refs(input.branches).prefix(com.google.gerrit.server.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.ProjectResource project, DeleteBranchesInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((input == null) || ((input.branches) == null)) || (input.branches.isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequestException("branch must be specified"); } deleteRefFactory.create(project).refs(input.branches).prefix(com.google.gerrit.server.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.ProjectResource project, DeleteBranchesInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((input == null) || ((input.branches) == null)) || (input.branches.isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequestException("branches must be specified"); } deleteRefFactory.create(project).refs(input.branch).prefix(com.google.gerrit.server.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.ProjectResource project, DeleteBranchesInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((input == null) || ((input.branches) == null)) || (input.branches.isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequestException("project must be specified"); } deleteRefFactory.create(project).refs(input.branches).prefix(com.google.gerrit.server.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.ProjectResource project, DeleteBranchesInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((input == null) || ((input.branches) == null)) || (input.branches.isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequestException("branches must be specified"); } deleteRefFactory.create(project).refs(input.branches).prefix(com.google.gerrit.server.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.common.CommentInfo applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.DraftCommentResource rsrc, DraftInput in) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException { if (((in == null) || ((in.message) == null)) || (in.message.trim().isEmpty())) { return delete.apply(updateFactory, rsrc, null); } else if (((in.id)!= null) && (!(rsrc.getId().equals(in.id)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("line must match URL"); } else if (((in.line)!= null) && ((in.line)!= null)) && ((in.line)!= null)) { throw new com.google.gerrit.extensions.restapi.BadRequestException("line must be >= 0"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())); bu.addOp(rsrc.getChange().key(), in); bu.addOp(rsrc.getChange().getId(), op); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(rsrc.getChange().key(), op); }
@java.lang.Override protected com.google.gerrit.extensions.common.CommentInfo applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.DraftCommentResource rsrc, DraftInput in) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException { if (((in == null) || ((in.message) == null)) || (in.message.trim().isEmpty())) { return delete.apply(updateFactory, rsrc, null); } else if (((in.id)!= null) && (!(rsrc.getId().equals(in.id)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("line must match URL"); } else if (((in.line)!= null) && ((in.line)!= null)) && ((in.line)!= null)) { throw new com.google.gerrit.extensions.restapi.BadRequestException("line must be >= 0"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs()))); bu.addOp(rsrc.getChange().key(), in); bu.addOp(rsrc.getChange().getId(), op); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(rsrc.getChange().getId(), op); }
@java.lang.Override protected com.google.gerrit.extensions.common.CommentInfo applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.DraftCommentResource rsrc, DraftInput in) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException { if (((in == null) || ((in.message) == null)) || (in.message.trim().isEmpty())) { return delete.apply(updateFactory, rsrc, null); } else if (((in.id)!= null) && (!(rsrc.getId().equals(in.id)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("line must match URL"); } else if (((in.line)!= null) && ((in.line)!= null)) { throw new com.google.gerrit.extensions.restapi.BadRequestException("line must be >= 0"); } else if ((((in.line)!= null) && ((in.line)!= null)) && ((in.line)!= null)) { throw new com.google.gerrit.extensions.restapi.BadRequestException("line must be >= 0"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.server.change.PutDraftComment.Op op = new com.google.gerrit.server.change.PutDraft.Op(rsrc.getChange().key(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs()))); bu.addOp(rsrc.getChange().getId(), op); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(rsrc.getChange().getId(), op); }
@java.lang.Override protected com.google.gerrit.extensions.common.CommentInfo applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.DraftCommentResource rsrc, DraftInput in) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException { if (((in == null) || ((in.message) == null)) || (in.message.trim().isEmpty())) { return delete.apply(updateFactory, rsrc, null); } else if (((in.id)!= null) && (!(rsrc.getId().equals(in.id)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("line must match URL"); } else if (((in.line)!= null) && ((in.line)!= null)) { throw new com.google.gerrit.extensions.restapi.BadRequestException("line must be >= 0"); } else if ((((in.line)!= null) && ((in.line)!= null)) && ((in.line)!= null)) { throw new com.google.gerrit.extensions.restapi.BadRequestException("line must be >= 0"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.server.change.PutDraftComment.Op op = new com.google.gerrit.server.change.PutDraft.Op(rsrc.getChange().key(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())); bu.addOp(rsrc.getChange().getId(), op); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(rsrc.getChange().getId(), op); }
@java.lang.Override protected com.google.gerrit.extensions.common.CommentInfo applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.DraftCommentResource rsrc, DraftInput in) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException { if (((in == null) || ((in.message) == null)) || (in.message.trim().isEmpty())) { return delete.apply(updateFactory, rsrc, null); } else if (((in.id)!= null) && (!(rsrc.getId().equals(in.id)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("line must match URL"); } else if (((in.line)!= null) && ((in.line)!= null)) { throw new com.google.gerrit.extensions.restapi.BadRequestException("line must be >= 0"); } else if ((((in.line)!= null) && ((in.line)!= null)) && ((in.line)!= null)) { throw new com.google.gerrit.extensions.restapi.BadRequestException("line must be >= 0"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.server.change.PutDraftComment.Op op = new com.google.gerrit.server.change.PutDraft.Op(rsrc.getChange().key(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs()))); bu.addOp(rsrc.getChange().getId(), op); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(rsrc.getChange().getId(), in); }
private java.util.Optional<com.google.gerrit.server.group.GroupsResult> updateGroupInNoteDb(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.InternalGroupUpdate uuid) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsers = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.load(allUsersName); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail(), this::getGroupName); if (!(groupConfig.isPresent())) { if (!(groupsMigration.readFromNoteDb())) { throw new com.google.gerrit.common.errors.NoSuchGroupException(group); } return java.util.Optional.emptyMap(); } com.google.gerrit.server.group.GroupBackend originalGroup = groupConfig.getLoadedAccount().get(); com.google.gerrit.reviewdb.client.AccountGroup group = null; if (groupUpdate.getName().isPresent())) { if (groupMigration.readFromNoteDb()) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey oldName = groupUpdate.getNameKey(); com.google.gerrit.reviewdb.client.AccountGroup.NameKey newName = groupUpdate.getNameKey(); com.google.gerrit.reviewdb.client.AccountGroup.NameKey newName = groupUpdate.getNameKey(); groupName = com.google.gerrit.server.group.GroupNameKey.load(allUsersRepoManager, groupUuid, oldName, newName, newName); } commit(allUsersRepoManager, groupName); return group; } catch (java.lang.IllegalStateException e) { com.google.gerrit.server.group.Internal.log.error("Cannot throw new java.lang.IllegalState
private java.util.Optional<com.google.gerrit.server.group.GroupsResult> updateGroupInNoteDb(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.InternalGroupUpdate uuid) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsers = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.load(allUsersName); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail(), this::getGroupName); if (!(groupConfig.isPresent())) { if (!(groupsMigration.readFromNoteDb())) { throw new com.google.gerrit.common.errors.NoSuchGroupException(group); } return java.util.Optional.emptyMap(); } com.google.gerrit.server.group.GroupBackend originalGroup = groupConfig.getLoadedAccount().get(); com.google.gerrit.reviewdb.client.AccountGroup group = null; if (groupUpdate.getName().isPresent())) { if (groupMigration.readFromNoteDb()) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey oldName = groupUpdate.getNameKey(); com.google.gerrit.reviewdb.client.AccountGroup.NameKey newName = groupUpdate.getNameKey(); com.google.gerrit.reviewdb.client.AccountGroup.NameKey newName = groupUpdate.getNameKey(); groupName = com.google.gerrit.server.group.GroupNameKeys.load(allUsersRepoManager, groupUuid, oldName, newName, newName); } commit(allUsersRepoManager, groupName); return group; } catch (java.lang.IllegalStateException e) { com.google.gerrit.server.group.Internal.log.error("Cannot throw new java.lang.IllegalState
private java.util.Optional<com.google.gerrit.server.group.GroupsResult> updateGroupInNoteDb(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.InternalGroupUpdate uuid) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsers = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.load(allUsersName); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail(), this::getGroupName); if (!(groupConfig.isPresent())) { if (!(groupsMigration.readFromNoteDb())) { throw new com.google.gerrit.common.errors.NoSuchGroupException(group); } return java.util.Optional.emptyMap(); } com.google.gerrit.server.group.GroupBackend originalGroup = groupConfig.getLoadedAccount().get(); com.google.gerrit.reviewdb.client.AccountGroup group = null; if (groupUpdate.getName().isPresent())) { if (groupMigration.readFromNoteDb()) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey oldName = groupUpdate.getNameKey(); com.google.gerrit.reviewdb.client.AccountGroup.NameKey newName = groupUpdate.getNameKey(); com.google.gerrit.reviewdb.client.AccountGroup.NameKey newName = groupUpdate.getNameKey(); groupName = com.google.gerrit.server.group.GroupNameKey.load(allUsersRepoManager, groupUuid, oldName, newName, newName); } commit(allUsersRepoManager, groupName); return group; } catch (java.lang.IllegalStateException e) { com.google.gerrit.server.group.Internal.log.error("Cannot throw new com.google.gerrit.
private java.util.Optional<com.google.gerrit.server.group.GroupsResult> updateGroupInNoteDb(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.InternalGroupUpdate uuid) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsers = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.load(allUsersName); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail(), this::getGroupName); if (!(groupConfig.isPresent())) { if (!(groupsMigration.readFromNoteDb())) { throw new com.google.gerrit.common.errors.NoSuchGroupException(group); } return java.util.Optional.emptyMap(); } com.google.gerrit.server.group.GroupBackend originalGroup = groupConfig.getLoadedAccount().get(); com.google.gerrit.reviewdb.client.AccountGroup group = null; if (groupUpdate.getName().isPresent())) { if (groupMigration.readFromNoteDb()) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey oldName = groupUpdate.getNameKey(); com.google.gerrit.reviewdb.client.AccountGroup.NameKey newName = groupUpdate.getNameKey(); com.google.gerrit.reviewdb.client.AccountGroup.NameKey newName = groupUpdate.getNameKey(); groupName = com.google.gerrit.server.group.GroupNameKeys.load(allUsersRepoManager, groupUuid, oldName, newName, newName); } commit(allUsersRepoManager, groupName); return group; } catch (java.lang.IllegalStateException e) { com.google.gerrit.server.group.Internal.log.error("Cannot throw new com.google.gerrit.
private java.util.Optional<com.google.gerrit.server.group.GroupsResult> updateGroupInNoteDb(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.InternalGroupUpdate uuid) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsers = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.load(allUsersName); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail(), this::getGroupName); if (!(groupConfig.isPresent())) { if (!(groupsMigration.readFromNoteDb())) { throw new com.google.gerrit.common.errors.NoSuchGroupException(group); } return java.util.Optional.emptyMap(); } com.google.gerrit.server.group.GroupBackend originalGroup = groupConfig.getLoadedAccount().get(); com.google.gerrit.reviewdb.client.AccountGroup group = null; if (groupUpdate.getName().isPresent())) { if (groupMigration.readFromNoteDb()) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey oldName = groupUpdate.getNameKey(); com.google.gerrit.reviewdb.client.AccountGroup.NameKey newName = groupUpdate.getNameKey(); com.google.gerrit.reviewdb.client.AccountGroup.NameKey newName = groupUpdate.getNameKey(); groupName = com.google.gerrit.server.group.GroupNameKey.load(allUsersRepoManager, groupUuid, oldName, newName, newName); } commit(allUsersRepoManager, groupName); return group; } catch (java.lang.IllegalStateException e) { com.google.gerrit.server.group.Internal.log.error("Cannot throw new com.google.gwtorm
public void dispatchAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added, java.sql.Timestamp added, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onAddGroupsToGroup(owner, added, added, added, added); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceService.log.error("Cannot log add groups to log to log to log to log", e); } } }
public void dispatchAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added, java.sql.Timestamp added, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onAddGroupsToGroup(owner, added, added, added, added); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceService.log.error("Cannot log to log add groups to log to log to log", e); } } }
public void dispatchAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added, java.sql.Timestamp added, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onAddGroupsToGroup(owner, added, added, added, added); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceService.log.error("Cannot log to log add groups to log to log to log to log", e); } } }
public void dispatchAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added, java.sql.Timestamp added, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onAddGroupsToGroup(owner, added, added, added, added); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceService.log.error("Cannot log add groups to log to log to log to log to log", e); } } }
public void dispatchAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added, java.sql.Timestamp added, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onAddGroupsToGroup(owner, added, added, added, added); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceService.log.error("Cannot log to log add groups to log to log to log to log to run", e); } }
private void addMembers(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.AddMembers.Input input = AddMembers.Input.fromMembers(initialMembers.stream().map(java.util.Collections.singleton(r)); addMembers.apply(rsrc, input); }
private void addMembers(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.AddMembers.Input input = AddMembers.Input.fromMembers(initialMembers.stream().map(java.util.stream.Collectors.toList())); addMembers.apply(rsrc, input); }
private void addMembers(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.AddMembers.Input input = AddMembers.Input.fromMembers(initialMembers.stream().map(java.util.Collectors.toList())); addMembers.apply(rsrc, input); }
private void addMembers(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.AddMembers.Input input = AddMembers.Input.fromMembers(initialMembers.stream().map(java.util.Collections.singleton(ps)); addMembers.apply(rsrc, input); }
private void addMembers(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.AddMembers.Input input = AddMembers.Input.fromMembers(initialMembers.stream().map(java.util.Arrays.asList(members.stream().collect(java.util.stream.Collectors.toList())); addMembers.apply(rsrc, input); }
private void addSubgroups(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.AddSubmodule.Input input = AddSubsections.Input.fromGroups(InitialGroups.stream().map(Group).collect(java.util.stream.Collectors.toList())); addSubgroups.apply(rsrc, input); }
private void addSubgroups(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.AddSubmodule.Input input = AddSubsections.Input.fromGroups(InitialGroups.stream().map(groups).collect(java.util.stream.Collectors.toList())); addSubgroups.apply(rsrc, input); }
private void addSubgroups(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.AddSubmodule.Input input = AddSubsections.Input.fromGroups(initialGroups.stream().map(Group).collect(java.util.stream.Collectors.toList())); addSubgroups.apply(rsrc, input); }
private void addSubgroups(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.AddSubmodule.Input input = AddSubsections.Input.fromGroups(InitialGroups.stream().map(members.get).collect(java.util.stream.Collectors.toList())); addSubgroups.apply(rsrc, input); }
private void addSubgroups(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.AddSubmodule.Input input = AddSubsections.Input.fromGroups(initialGroups.stream().map(members.get).collect(java.util.stream.Collectors.toList())); addSubgroups.apply(rsrc, input); }
@org.kohsuke.args4j.Option(name = "--account", aliases = { initGroup(group); }
@org.kohsuke.args4j.Option(name = "--account", aliases = "-g", metaVar = "GROUP", usage = "initial set of groups to be included in the group") void addGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID id) { initialGroups.add(id); }
@org.kohsuke.args4j.Option(name = "--account", aliases = { "-g", usage = "GROUP", usage = "initial set of groups to be included in the group") void addGroup(id); }
@org.kohsuke.args4j.Option(name = "--account", aliases = { "-g", metaVar = "GROUP", usage = "initial set of groups to be included in the group") void addGroup(id); }
@org.kohsuke.args4j.Option(name = "--account", aliases = { "-g", usage = "GROUP", usage = "initial set of groups to be included in the group") void addGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID id) { initialGroups.add(id); }
@java.lang.Override public void replace(com.google.gerrit.server.group.InternalGroup group) throws java.io.IOException { io.searchbox.core.Bulk bulk = new io.searchbox.core.Bulk.Builder().defaultIndex(indexName).defaultType(com.google.gerrit.elasticsearch.ElasticGroupIndex.GROUPS).defaultAction(insert(com.google.gerrit.elasticsearch.ElasticGroupIndex.GROUPS, group)).refresh(true).build(); io.searchbox.client.JestResult result = client.execute(bulk); if (!(result.isSucceeded())) { throw new java.io.IOException(java.lang.String.format("Account %s in index %s: %s", group.getGroupUUID().get(), indexName, result.getErrorMessage())); } }
@java.lang.Override public void replace(com.google.gerrit.server.group.InternalGroup group) throws java.io.IOException { io.searchbox.core.Bulk bulk = new io.searchbox.core.Bulk.Builder().defaultIndex(indexName).defaultType(com.google.gerrit.elasticsearch.ElasticGroupIndex.GROUPS).defaultAction(insert(com.google.gerrit.elasticsearch.ElasticGroupIndex.GROUPS, group)).refresh(true).build(); io.searchbox.client.JestResult result = client.execute(bulk); if (!(result.isSucceeded())) { throw new java.io.IOException(java.lang.String.format("Account %s in index %s in account %s: %s", group.getGroupUUID().get(), indexName, result.getErrorMessage())); } }
@java.lang.Override public void replace(com.google.gerrit.server.group.InternalGroup group) throws java.io.IOException { io.searchbox.core.Bulk bulk = new io.searchbox.core.Bulk.Builder().defaultIndex(indexName).defaultType(com.google.gerrit.elasticsearch.ElasticGroupIndex.GROUPS).defaultAction(insert(com.google.gerrit.elasticsearch.ElasticGroupIndex.GROUPS, group)).refresh(true).build(); io.searchbox.client.JestResult result = client.execute(bulk); if (!(result.isSucceeded())) { throw new java.io.IOException(java.lang.String.format("Account %s in index %s: %s", group.getGroupUUID().get(), indexName, result.getErrorMessage()); } }
@java.lang.Override public void replace(com.google.gerrit.server.group.InternalGroup group) throws java.io.IOException { io.searchbox.core.client.Bulk bulk = new io.searchbox.core.Bulk.Builder().defaultIndex(indexName).defaultType(com.google.gerrit.elasticsearch.ElasticGroupIndex.GROUPS).addAction(insert(com.google.gerrit.elasticsearch.ElasticGroupIndex.GROUPS, group)).refresh(true).build(); io.searchbox.client.JestResult result = client.execute(bulk); if (!(result.isSucceeded())) { throw new java.io.IOException(java.lang.String.format("Account %s in index %s: %s", group.getGroupUUID().get(), indexName, result.getErrorMessage())); } }
@java.lang.Override public void replace(com.google.gerrit.server.group.InternalGroup group) throws java.io.IOException { io.searchbox.core.client.Bulk bulk = new io.searchbox.core.Bulk.Builder().defaultIndex(indexName).defaultType(com.google.gerrit.elasticsearch.ElasticGroupIndex.GROUPS).addAction(insert(com.google.gerrit.elasticsearch.ElasticGroupIndex.GROUPS, group)).refresh(true).build(); io.searchbox.client.JestResult result = client.execute(bulk); if (!(result.isSucceeded())) { throw new java.io.IOException(java.lang.String.format("Account %s in index %s in account %s: %s", group.getGroupUUID().get(), indexName, result.getErrorMessage()); } }
private void reportGroupsAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group, java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupUuidList) throws java.io.IOException, java.io.UnsupportedEncodingException { java.lang.String names = groupList.stream().map(( uuid) -> groupCache.get(uuid).map(com.google.gerrit.server.group.InternalGroup::getName).collect(java.util.stream.Collectors.toSet)).map(java.lang.String.format("%s action %s: %s", action, group.getName(), names).getBytes(com.google.gerrit.sshd.commands.ENC)); }
private void reportGroupsAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group, java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupUuidList) throws java.io.IOException, java.io.UnsupportedEncodingException { java.lang.String names = groupList.stream().map(( uuid) -> groupCache.get(uuid).map(com.google.gerrit.server.group.InternalGroup::getName)).collect(java.util.stream.Collectors.toSet()); for (java.lang.String action : groupCache.get(uuid).map(java.lang.String.format("%s: %s", action, action.getName(), names))); }
private void reportGroupsAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group, java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupUuidList) throws java.io.IOException, java.io.UnsupportedEncodingException { java.lang.String names = groupList.stream().map(( uuid) -> groupCache.get(uuid).map(com.google.gerrit.server.group.InternalGroup::getName)).collect(java.util.stream.Collectors.toSet()); for (java.lang.String action : groupCache.get(uuid).map(java.lang.String.format("%s action %s: %s", action, action.getName(), names))); }
private void reportGroupsAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group, java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupUuidList) throws java.io.IOException, java.io.UnsupportedEncodingException { java.lang.String names = groupList.stream().map(( uuid) -> groupCache.get(uuid).map(com.google.gerrit.server.group.InternalGroup::getName)).collect(java.util.stream.Collectors.toSet()); for (java.lang.String action : groupCache.get(uuid).map(java.lang.String.format("%s action %s: %s", action, action, action.getName(), names))); }
private void reportGroupsAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group, java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupUuidList) throws java.io.IOException, java.io.UnsupportedEncodingException { java.lang.String names = groupList.stream().map(( uuid) -> groupCache.get(uuid).map(com.google.gerrit.server.group.InternalGroup::getName)).collect(java.util.stream.Collectors.toSet()); for (java.lang.String action : groupCache.get(uuid).map(java.lang.String.format("%s action %s: %s", action, action, action.getName(), names))); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gerrit.sshd.commands.UnloggedFailure, java.lang.Exception { try { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid : groups) { com.google.gerrit.server.group.GroupResource resource = groupsCollection.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromUrl(groupUuid.get())); if (!(accountsToRemove.isEmpty())) { deleteMembersAction.apply(resource, fromMembers(accountsToRemove)); reportMembersAction("removed from", accountsToRemove); reportMembersAction("removed from", accountsToRemove); reportMembersAction("removed from", accountsToRemove); reportMembersAction.apply(resource, fromMembers(accountsToRemove)); reportMembersAction("removed from", accountsToAdd); reportMembersAction("removed from", accountsToAdd); } if (!(groupsToInclude.isEmpty())) { addSubgroupsAction("included from", resource, accountsToInclude); reportGroupsAction("Include"); } if (!(groupsToInclude.isEmpty())) { addMembersAction("Include", toInclude); reportGroupsAction("Include"); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e.getMessage()); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e.getMessage()); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gerrit.sshd.commands.UnloggedFailure, java.lang.Exception { try { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid : groups) { com.google.gerrit.server.group.GroupResource resource = groupsCollection.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromUrl(groupUuid.get())); if (!(accountsToRemove.isEmpty())) { deleteMembersAction.apply(resource, fromMembers(accountsToRemove)); reportMembersAction("removed from", accountsToRemove); reportMembersAction("removed from", accountsToRemove); reportMembersAction("removed from", accountsToRemove); reportMembersAction.apply(resource, fromMembers(accountsToRemove)); reportMembersAction("removed from", accountsToAdd); reportMembersAction("removed from", accountsToAdd); } if (!(groupsToInclude.isEmpty())) { addSubgroupsAction("included from", resource, accountsToInclude); reportGroupsAction("Include"); } if (!(groupsToInclude.isEmpty())) { addSubmissionsAction("Include", toInclude); reportGroupsAction("Include"); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e.getMessage()); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gerrit.sshd.commands.UnloggedFailure, java.lang.Exception { try { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid : groups) { com.google.gerrit.server.group.GroupResource resource = groupsCollection.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromUrl(groupUuid.get())); if (!(accountsToRemove.isEmpty())) { deleteMembersAction.apply(resource, fromMembers(accountsToRemove)); reportMembersAction("removed from", accountsToRemove); reportMembersAction("removed from", accountsToRemove); reportMembersAction("removed from", accountsToRemove); reportMembersAction.apply(resource, fromMembers(accountsToRemove)); reportMembersAction("removed from", accountsToAdd); reportMembersAction("removed from", accountsToAdd); } if (!(groupsToInclude.isEmpty())) { addSubgroupsAction("included from", resource, accountsToInclude); reportGroupsAction("Include"); } if (!(groupsToInclude.isEmpty())) { addSubmissionAction("Include", toInclude); reportGroupsAction("Include"); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e.getMessage()); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gerrit.sshd.commands.UnloggedFailure, java.lang.Exception { try { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid : groups) { com.google.gerrit.server.group.GroupResource resource = groupsCollection.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromUrl(groupUuid.get())); if (!(accountsToRemove.isEmpty())) { deleteMembersAction.apply(resource, fromMembers(accountsToRemove)); reportMembersAction("removed from", accountsToRemove); reportMembersAction("removed from", accountsToRemove); reportMembersAction("removed from", accountsToRemove); reportMembersAction.apply(resource, fromMembers(accountsToRemove)); reportMembersAction("removed from", accountsToAdd); reportMembersAction("removed from", accountsToAdd); } if (!(groupsToInclude.isEmpty())) { addSubgroupsAction("included from", resource, accountsToInclude); reportGroupsAction("Include"); } if (!(groupsToInclude.isEmpty())) { addSubmissionsAction("Include", toAdd); reportGroupsAction("Include"); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e.getMessage()); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e.getMessage()); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gerrit.sshd.commands.UnloggedFailure, java.lang.Exception { try { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid : groups) { com.google.gerrit.server.group.GroupResource resource = groupsCollection.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromUrl(groupUuid.get())); if (!(accountsToRemove.isEmpty())) { deleteMembersAction.apply(resource, fromMembers(accountsToRemove)); reportMembersAction("removed from", accountsToRemove); reportMembersAction("removed from", accountsToRemove); reportMembersAction("removed from", accountsToRemove); reportMembersAction.apply(resource, fromMembers(accountsToRemove)); reportMembersAction("removed from", accountsToAdd); reportMembersAction("removed from", accountsToAdd); } if (!(groupsToInclude.isEmpty())) { addSubgroupsAction("included from", resource, accountsToInclude); reportGroupsAction("Include"); } if (!(groupsToInclude.isEmpty())) { addMembersAction("Include", toInclude); reportGroupsAction("Include"); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e.getMessage()); } }
private void reportMembersAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group, java.util.List<com.google.gerrit.reviewdb.client.Account.Id> accountIdList) throws java.io.IOException, java.io.UnsupportedEncodingException { java.lang.String names = accountIdList.stream().map(( accountId) -> com.google.common.base.MoreObjects.firstNonNull(accountCache.get(accountId).getAccount().getPreferredEmail(), "n/a")).collect(java.util.stream.Collectors.toSet()); java.lang.StringBuilder out = new java.lang.StringBuilder("Account %s: %s", action.getName(), "n/a")).getBytes(com.google.gerrit.sshd.commands.ENC)); action.write(java.lang.String.format("%s action %s: %s", action, action.getName(), actions.getBytes(com.google.gerrit.sshd.commands.ENC)); }
private void reportMembersAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group, java.util.List<com.google.gerrit.reviewdb.client.Account.Id> accountIdList) throws java.io.IOException, java.io.UnsupportedEncodingException { java.lang.String names = accountIdList.stream().map(( accountId) -> com.google.common.base.MoreObjects.firstNonNull(accountCache.get(accountId).getAccount().getPreferredEmail(), "n/a")).collect(java.util.stream.Collectors.toSet()); java.lang.StringBuilder out = new java.lang.StringBuilder("Account %s: %s", action.getName(), "n/a")).getBytes(com.google.gerrit.sshd.commands.ENC)); action.write(java.lang.String.format("Account %s action %s: %s", action, action.getName(), actions.getBytes(com.google.gerrit.sshd.commands.ENC)); }
private void reportMembersAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group, java.util.List<com.google.gerrit.reviewdb.client.Account.Id> accountIdList) throws java.io.IOException, java.io.UnsupportedEncodingException { java.lang.String names = accountIdList.stream().map(( accountId) -> com.google.common.base.MoreObjects.firstNonNull(accountCache.get(accountId).getAccount().getPreferredEmail(), "n/a")).collect(java.util.stream.Collectors.toSet()); java.lang.StringBuilder out = new java.lang.StringBuilder("Account %s: %s", action.getName(), "n/a")).getBytes(com.google.gerrit.sshd.commands.ENC)); action.write(java.lang.String.format("Account %s action %s: %s", action.getName(), actions.getName(), action.getBytes(com.google.gerrit.sshd.commands.ENC)); }
private void reportMembersAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group, java.util.List<com.google.gerrit.reviewdb.client.Account.Id> accountIdList) throws java.io.IOException, java.io.UnsupportedEncodingException { java.lang.String names = accountIdList.stream().map(( accountId) -> com.google.common.base.MoreObjects.firstNonNull(accountCache.get(accountId).getAccount().getPreferredEmail(), "n/a")).collect(java.util.stream.Collectors.toSet()); java.lang.StringBuilder out = new java.lang.StringBuilder("Account %s: %s", action.getName(), "n/a")).getBytes(com.google.gerrit.sshd.commands.ENC)); action.write(java.lang.String.format("%s action %s: %s", action.getName(), actions.getName(), action.getBytes(com.google.gerrit.sshd.commands.ENC)); }
private void reportMembersAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group, java.util.List<com.google.gerrit.reviewdb.client.Account.Id> accountIdList) throws java.io.IOException, java.io.UnsupportedEncodingException { java.lang.String names = accountIdList.stream().map(( accountId) -> com.google.common.base.MoreObjects.firstNonNull(accountCache.get(accountId).getAccount().getPreferredEmail(), "n/a")).collect(java.util.stream.Collectors.toSet()); java.lang.StringBuilder out = new java.lang.StringBuilder("Account %s: %s", action.getName(), "n/a")).getBytes(com.google.gerrit.sshd.commands.ENC)); action.write(java.lang.String.format("Account %s action %s: %s", action.getName(), actions.getName(), actions.getBytes(com.google.gerrit.sshd.commands.ENC)); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.api.projects.ProjectInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Project " + (resource.getName())) + "\" already exists")); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.api.projects.ProjectInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Cannot merge " + (resource.getName())) + "\" already exists")); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.api.projects.ProjectInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("No such project " + (resource.getName())) + "\" already exists")); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.api.projects.ProjectInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Cannot merge " + (resource.getName())) + " already exists")); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.api.projects.ProjectInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Cannot merge " + (resource.getName())) + " already exists")); }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { com.google.gerrit.extensions.api.projects.ConfigInput configInput = new com.google.gerrit.extensions.api.projects.ConfigInput(); configInput.submitType = submitType; configInput.useContributorAgreements = submitType; configInput.useContributorAgreements = contributorMerge; configInput.useContributorAgreements = signedOffBy; configInput.useContributorAgreements = state.useContributorAgreements; configInput.useSignedOffBy = state.getProject().getState(); configInput.maxObjectSizeLimit = maxObjectSizeLimit; if ((com.google.common.base.Strings.emptyToNull(projectDescription))!= null) { configInput.description = projectDescription; } else { configInput.description = projectState.getProject().getDescription(); } try { putConfig.apply(new com.google.gerrit.server.project.ProjectResource(projectState, user), configInput); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw die(e); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { com.google.gerrit.extensions.api.projects.ConfigInput configInput = new com.google.gerrit.extensions.api.projects.ConfigInput(); configInput.submitType = submitType; configInput.useContributorAgreements = submitType; configInput.useContributorAgreements = contributorMerge; configInput.useContributorAgreements = signedOffBy; configInput.useContributorAgreements = state.useSignedOffBy(); configInput.useSignedOffBy = state.getProject().getState(); configInput.maxObjectSizeLimit = maxObjectSizeLimit; if ((com.google.common.base.Strings.emptyToNull(projectDescription))!= null) { configInput.description = projectDescription; } else { configInput.description = projectState.getProject().getDescription(); } try { putConfig.apply(new com.google.gerrit.server.project.ProjectResource(projectState, user), configInput); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw die(e); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { com.google.gerrit.extensions.api.projects.ConfigInput configInput = new com.google.gerrit.extensions.api.projects.ConfigInput(); configInput.submitType = submitType; configInput.useContributorAgreements = submitType; configInput.useContributorAgreements = contributorMerge; configInput.useContributorAgreements = signedOffBy; configInput.useContributorAgreements = state.useContributorAgreements; configInput.useSignedOffBy = state.getProject().getState(); configInput.maxObjectSizeLimit = maxObjectSizeLimit; if ((com.google.common.base.Strings.emptyToNull(projectDescription))!= null) { configInput.description = projectDescription; } else { configInput.description = projectState.getProject().getDescription(); } try { putConfig.apply(new com.google.gerrit.server.project.ProjectResource(projectState, user), configInput); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { com.google.gerrit.sshd.commands.Failure { com.google.gerrit.extensions.api.projects.ConfigInput configInput = new com.google.gerrit.extensions.api.projects.ConfigInput(); configInput.submitType = submitType; configInput.useContributorAgreements = contributorMerge; configInput.useContributorAgreements = contributorAgreements; configInput.useContributorAgreements = state.useContributorAgreements; configInput.useSignedOffBy = state.getProject().getState(); configInput.maxObjectSizeLimit = maxObjectSizeLimit; if ((com.google.common.base.Strings.emptyToNull(projectDescription))!= null) { configInput.description = projectDescription; } else { configInput.description = projectState.getProject().getDescription(); } try { putConfig.apply(new com.google.gerrit.server.project.ProjectResource(projectState, user), configInput); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw die(e); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { com.google.gerrit.extensions.api.projects.ConfigInput configInput = new com.google.gerrit.extensions.api.projects.ConfigInput(); configInput.submitType = submitType; configInput.useContributorAgreements = submitType; configInput.useContributorAgreements = contributorMerge; configInput.useContributorAgreements = signedOffBy; configInput.useContributorAgreements = state.useSignedOffBy; configInput.useSignedOffBy = state.getProject().getState(); configInput.maxObjectSizeLimit = maxObjectSizeLimit; if ((com.google.common.base.Strings.emptyToNull(projectDescription))!= null) { configInput.description = projectDescription; } else { configInput.description = projectState.getProject().getDescription(); } try { putConfig.apply(new com.google.gerrit.server.project.ProjectResource(projectState, user), configInput); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw die(e); } }
com.google.gerrit.server.api.groups.GroupApiImpl create(com.google.gerrit.server.group.GroupResource rsrc);
com.google.gerrit.server.api.groups.GroupApiImplImpl create(com.google.gerrit.server.group.GroupResource rsrc);
com.google.gerrit.server.api.groups.GroupApiImpl create(com.google.gerrit.server.group.GroupResource rsrc) { com.google.gerrit.server.api.groups.GroupApiImpl.create(rsrc); }
com.google.gerrit.server.api.groups.GroupApiImpl create(com.google.gerrit.server.group.GroupResource rsrc) { com.google.gerrit.server.api.groups.GroupApiImpl.create(rsrc); }
com.google.gerrit.server.api.groups.GroupApiImpl create(com.google.gerrit.server.group.GroupResource rsrc) { com.google.gerrit.server.api.groups.GroupApiImpl.create(rsrc); return rsrc; }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo owner() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getOwner.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot get owner", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo owner() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getOwner.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot get account", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo owner() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getOwner.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot get change owner", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo owner() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getOwner.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot get account owner", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo getOwner() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getOwner.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot get owner", e); } }
@java.lang.Override public void options(com.google.gerrit.extensions.common.GroupOptionsInfo options) throws com.google.gerrit.extensions.restapi.RestApiException { try { putOptions.apply(rsrc, options); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put options", e); } }
@java.lang.Override public void options(com.google.gerrit.extensions.common.GroupOptionsInfo options) throws com.google.gerrit.extensions.restapi.RestApiException { try { putOptions.apply(rsrc, options); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put settings", e); } }
@java.lang.Override public void options(com.google.gerrit.extensions.common.GroupOptionsInfo options) throws com.google.gerrit.extensions.restapi.RestApiException { try { putOptions.apply(rsrc, options); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put option", e); } }
@java.lang.Override public void options(com.google.gerrit.extensions.common.GroupOptionsInfo options) throws com.google.gerrit.extensions.restapi.RestApiException { try { putOptions.apply(rsrc, options); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot set settings", e); } }
@java.lang.Override public void options(com.google.gerrit.extensions.common.GroupOptionsInfo options) throws com.google.gerrit.extensions.restapi.RestApiException { try { putOptions.apply(rsrc, options); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot delete options", e); } }
@java.lang.Override public void index() throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply(rsrc, new com.google.gerrit.extensions.common.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot index", e); } }
@java.lang.Override public void index() throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply(rsrc, new com.google.gerrit.extensions.common.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot index account", e); } }
@java.lang.Override public void index() throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply(rsrc, new com.google.gerrit.server.change.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot index", e); } }
@java.lang.Override public void index() throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply(rsrc, new com.google.gerrit.extensions.restapi.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot index", e); } }
@java.lang.Override public void index() throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply(rsrc, new com.google.gerrit.extensions.common.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot index change", e); } }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> members(boolean recursive) throws com.google.gerrit.extensions.restapi.RestApiException { listMembers.setRecursive(recursive); try { return listMembers.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot list members", e); } }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> members(boolean recursive) throws com.google.gerrit.extensions.restapi.RestApiException { listMembers.setRecursive(recursive); try { return listMembers.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot list accounts", e); } }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> members(boolean recursive) throws com.google.gerrit.extensions.restapi.RestApiException { listMembers.setRecursive(recursive); try { return listMembers.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot list", e); } }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> members(boolean recursive) throws com.google.gerrit.extensions.restapi.RestApiException { listMembers.setRecursive(rec); try { return listMembers.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot list members", e); } }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> members(boolean recursive) throws com.google.gerrit.extensions.restapi.RestApiException { listMembers.setRecursive(recursive); try { return listMembers.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot list members", e); } }
@java.lang.Override public void removeMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot remove members", e); } }
@java.lang.Override public void removeMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot remove account", e); } }
@java.lang.Override public void removeMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot remove accounts", e); } }
@java.lang.Override public void removeMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot delete members", e); } }
@java.lang.Override public void removeMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot remove", e); } }
@java.lang.Override public void name(java.lang.String name) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.NameInfo in = new com.google.gerrit.extensions.common.NameInput(); in.name = name; try { putName.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put name", e); } }
@java.lang.Override public void name(java.lang.String name) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.NameKey in = new com.google.gerrit.extensions.common.NameInput(); in.name = name; try { putName.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put name", e); } }
@java.lang.Override public void name(java.lang.String name) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.NameInfo in = new com.google.gerrit.extensions.common.NameInfo(); in.name = name; try { putName.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put name", e); } }
@java.lang.Override public void name(java.lang.String name) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.NameInfo in = new com.google.gerrit.extensions.common.NameInput(); in.name = name; try { putName.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put account", e); } }
@java.lang.Override public void name(java.lang.String name) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.NameKeyInfo in = new com.google.gerrit.extensions.common.NameInput(); in.name = name; try { putName.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put name", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo detail() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getDetail.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve account", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo get() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getDetail.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve account", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo list() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getDetail.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve account", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo detail() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getDetail.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo detail() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getDetail.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve accounts", e); } }
@java.lang.Override public void addMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { addMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot add members", e); } }
@java.lang.Override public void addMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { addMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot add accounts", e); } }
@java.lang.Override public void addMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { addMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot add account", e); } }
@java.lang.Override public void addMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { addMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot add missing members", e); } }
@java.lang.Override public void addMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { addMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot add member", e); } }
@java.lang.Override public void description(java.lang.String description) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.Description in = new com.google.gerrit.extensions.common.Description(); in.description = description; try { putDescription.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put description", e); } }
@java.lang.Override public void description(java.lang.String description) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.DescriptionInfo in = new com.google.gerrit.extensions.common.Description(); in.description = description; try { putDescription.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put description", e); } }
@java.lang.Override public void description(java.lang.String description) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.Info in = new com.google.gerrit.extensions.common.Description(); in.description = description; try { putDescription.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put description", e); } }
@java.lang.Override public void description(java.lang.String description) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.Description in = new com.google.gerrit.extensions.common.Description(); in.description = description; try { putDescription.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot delete description", e); } }
@java.lang.Override public void description(java.lang.String description) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.DescriptionInfo in = new com.google.gerrit.extensions.common.Description(); in.description = description; try { putDescription.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put description", e); } }
@org.kohsuke.args4j.Option(name = "--member", aliases = { "-m" }, metaVar = "USER", usage = "USER", usage = "initial set of users to be members of users to be members of members of users to be members of members of members of members of the account", id); initialMembers.add(id); }
@org.kohsuke.args4j.Option(name = "--member", aliases = { "-m" }, metaVar = "USER", usage = "USER", usage = "initial set of users to be members of users to be members of members of users to be members of members of members of members of the account", id); }
@org.kohsuke.args4j.Option(name = "--member", aliases = { "-m" }, metaVar = "USER", usage = "USER", usage = "initial set of users to be members of users to be members of members of users to be members of members of members of members of members of members of members of " + id)); initialMembers.add(id); }
@org.kohsuke.args4j.Option(name = "--member", aliases = { "-m" }, metaVar = "USER", usage = "USER", usage = "initial set of users to be members of users to be members of members of users to be members of members of members of members of members of members of members of the user"); initialMembers.add(id); }
@org.kohsuke.args4j.Option(name = "--member", aliases = { "-m" }, metaVar = "USER", usage = "USER", usage = "initial set of users to be members of users to be members of members of users to be members of members of members of members of members of members of members of the user") void add(id); }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gwtorm.server.OrmException, java.io.IOException { try { com.google.gerrit.server.group.GroupResource rsrc = createGroup(); if (!(initialMembers.isEmpty())) { addMembers(rsrc); } if (!(initialGroups.isEmpty())) { addSubmissions(rsrc); } if (!(initialGroups.isEmpty())) { addSubmissions(rsrc); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gwtorm.server.OrmException, java.io.IOException { try { com.google.gerrit.server.group.GroupResource rsrc = createGroup(); if (!(initialMembers.isEmpty())) { addMembers(rsrc); } if (!(initialGroups.isEmpty())) { addSubmissions(rsrc); } if (!(initialGroups.isEmpty())) { addSubmissions(rsrc); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gwtorm.server.OrmException, java.io.IOException { try { com.google.gerrit.server.group.GroupResource rsrc = createGroup(); if (!(initialGroups.isEmpty())) { addMembers(rsrc); } if (!(initialGroups.isEmpty())) { addSubmissions(rsrc); } if (!(initialGroups.isEmpty())) { addSubmissions(rsrc); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gwtorm.server.OrmException, java.io.IOException { try { com.google.gerrit.server.group.GroupResource rsrc = createGroup(); if (!(initialMembers.isEmpty())) { addMembers(rsrc); } if (!(initialGroups.isEmpty())) { addSubmissions(rsrc); } if (!(initialGroups.isEmpty())) { addSubmissions(rsrc); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e); } catch (com.google.gerrit.server.api.ApiException e) { throw die(e); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gwtorm.server.OrmException, java.io.IOException { try { com.google.gerrit.server.group.GroupResource rsrc = createGroup(); if (!(initialGroups.isEmpty())) { addMembers(rsrc); } if (!(initialGroups.isEmpty())) { addSubmissions(rsrc); } if (!(initialGroups.isEmpty())) { addSubmissions(rsrc); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e); } catch (com.google.gerrit.server.api.ApiException e) { throw die(e); } }
private com.google.gerrit.server.group.GroupResource createGroup() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.extensions.api.changes.GroupInput input = new com.google.gerrit.extensions.api.changes.GroupInput(); input.visibleToAll = visibleToAll; input.visibleToAll = visibleToAll; if ((ownerGroupId)!= null) { input.ownerId = java.lang.String.valueOf(ownerId.get()); } com.google.gerrit.extensions.common.GroupInfo group = createGroupFactory.create(groupName).apply(TopLevelResource.INSTANCE, input); return groups.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromUrl(group.id)); }
private com.google.gerrit.server.group.GroupResource createGroup() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.extensions.api.changes.GroupInput input = new com.google.gerrit.extensions.api.changes.GroupInput(); input.visibleToAll = visibleToAll; input.visibleToAll = visibleToAll; if ((ownerGroupId)!= null) { input.ownerId = java.lang.String.valueOf(ownerGroup.get()); } com.google.gerrit.extensions.common.GroupInfo group = createGroupFactory.create(groupName).apply(TopLevelResource.INSTANCE, input); return groups.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromUrl(group.id)); }
private com.google.gerrit.server.group.GroupResource createGroup() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.extensions.api.changes.GroupInput input = new com.google.gerrit.extensions.api.changes.GroupInput(); input.visibleToAll = visibleToAll; input.visibleToAll = visibleToAll; if ((ownerGroupId)!= null) { input.ownerId = java.lang.String.valueOf(ownerId.get()); } com.google.gerrit.extensions.common.GroupInfo group = createGroupFactory.create(groupName).apply(TopLevelResource.INSTANCE, input); return groups; }
private com.google.gerrit.server.group.GroupResource createGroup() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.extensions.api.changes.GroupInput input = new com.google.gerrit.extensions.api.changes.GroupInput(); input.visibleToAll = visibleToAll; input.visibleToAll = visibleToAll; if ((ownerGroupId)!= null) { input.ownerId = java.lang.String.valueOf(ownerGroupId.get()); } com.google.gerrit.extensions.common.GroupInfo group = createGroupFactory.create(groupName).apply(TopLevelResource.INSTANCE, input); return groups; }
private com.google.gerrit.server.group.GroupResource createGroup() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.extensions.api.changes.GroupInput input = new com.google.gerrit.extensions.api.groups.GroupInput(); input.visibleToAll = visibleToAll; input.visibleToAll = visibleToAll; if ((ownerGroupId)!= null) { input.ownerId = java.lang.String.valueOf(ownerId.get()); } com.google.gerrit.extensions.common.GroupInfo group = createGroupFactory.create(groupName).apply(TopLevelResource.INSTANCE, input); return groups.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromUrl(group.id)); }
@java.lang.Override public com.google.gerrit.extensions.api.groups.GroupApi create(com.google.gerrit.extensions.api.groups.GroupInput in) throws com.google.gerrit.extensions.restapi.RestApiException { if ((checkNotNull(in, "GroupInput").name) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("Group must be specified"); } try { com.google.gerrit.server.group.CreateGroup impl = createGroup.create(in.name); permissionBackend.user(user).checkAny(com.google.gerrit.server.permissions.GlobalPermission.class, in); com.google.gerrit.extensions.common.GroupInfo info = impl.apply(TopLevelResource.INSTANCE, in); return id(info.id); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("Cannot create account " + (in.name)), e); } }
@java.lang.Override public com.google.gerrit.extensions.api.groups.GroupApi create(com.google.gerrit.extensions.api.groups.GroupInput in) throws com.google.gerrit.extensions.restapi.RestApiException { if ((checkNotNull(in, "GroupInput").name) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("Group must be specified"); } try { com.google.gerrit.server.group.CreateGroup impl = createGroup.create(in.name); permissionBackend.user(user).checkAny(com.google.gerrit.server.permissions.GlobalPermission.class, in); com.google.gerrit.extensions.common.GroupInfo info = impl.apply(TopLevelResource.INSTANCE, in); return id(info.id); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.api.ApiUtil.asRestApiException(("Cannot create account " + (in.name)), e); } }
@java.lang.Override public com.google.gerrit.extensions.api.groups.GroupApi create(com.google.gerrit.extensions.api.groups.GroupInput in) throws com.google.gerrit.extensions.restapi.RestApiException { if ((checkNotNull(in, "GroupInput").name) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("Group must be specified"); } try { com.google.gerrit.server.group.CreateGroup impl = createGroup.create(in.name); permissionBackend.user(user).checkAny(com.google.gerrit.server.permissions.GlobalPermission.class); com.google.gerrit.extensions.common.GroupInfo info = impl.apply(TopLevelResource.INSTANCE, in); return id(info.id); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("Cannot create account " + (in.name)), e); } }
@java.lang.Override public com.google.gerrit.extensions.api.changes.GroupApi create(com.google.gerrit.extensions.api.groups.GroupInput in) throws com.google.gerrit.extensions.restapi.RestApiException { if ((checkNotNull(in, "GroupInput").name) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("Group must be specified"); } try { com.google.gerrit.server.group.CreateGroup impl = createGroup.create(in.name); permissionBackend.user(user).checkAny(com.google.gerrit.server.permissions.GlobalPermission.class); com.google.gerrit.extensions.common.GroupInfo info = impl.apply(TopLevelResource.INSTANCE, in); return id(info.id); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("Cannot create account " + (in.name)), e); } }
@java.lang.Override public com.google.gerrit.extensions.api.changes.GroupApi create(com.google.gerrit.extensions.api.groups.GroupInput in) throws com.google.gerrit.extensions.restapi.RestApiException { if ((checkNotNull(in, "Group input") == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("Group must be specified"); } try { com.google.gerrit.server.group.CreateGroup impl = createGroup.create(in.name); permissionBackend.user(user).checkAny(com.google.gerrit.server.permissions.GlobalPermission.class); com.google.gerrit.extensions.common.GroupInfo info = impl.apply(user).checkAny(com.google.gerrit.server.permissions.GlobalPermission.class, in); return id(info.id); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("Cannot create " + (in.name)), e); } }
public static com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference> loadAllGroupReferences(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Ref ref = repository.exactRef(RefNames.REFS_GROUPS); if (ref == null) { return com.google.common.collect.ImmutableSet.of(); } try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository)) { org.eclipse.jgit.revwalk.RevCommit commit = revWalk.parseCommit(ref.getObjectId()); org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(reader, noteMap); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> groupReference = new java.util.LinkedHashSet<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.common.data.GroupReference groupReference = com.google.gerrit.server.group.GroupReference.getGroupReference(reader, note.getData()); boolean result = groupReferences.add(groupReference); if (!result.contains(account))) { com.google.gerrit.server.group.GroupsCheckResult.log.warn("Cannot check UUID of UUID of UUID of %s (%s) is duplicate in %s)", groupReference.getUUID()); } } return com.google.common.collect.ImmutableSet.copyOf(groupReferences); }
public static com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference> loadAllGroupReferences(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Ref ref = repository.exactRef(RefNames.REFS_GROUPS); if (ref == null) { return com.google.common.collect.ImmutableSet.of(); } try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository)) { org.eclipse.jgit.revwalk.RevCommit commit = revWalk.parseCommit(ref.getObjectId()); org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(reader, noteMap); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> groupReference = new java.util.LinkedHashSet<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.common.data.GroupReference groupReference = com.google.gerrit.server.group.GroupReference.getGroupReference(reader, note.getData()); boolean result = groupReferences.add(groupReference); if (!result.contains(account))) { com.google.gerrit.server.group.GroupsCheckResult.log.warn("Cannot check UUID of UUID of UUID of %s (%s) is duplicate in " + noteReference.getUUID()); } } return com.google.common.collect.ImmutableSet.copyOf(groupReferences); } }
public static com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference> loadAllGroupReferences(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Ref ref = repository.exactRef(RefNames.REFS_GROUPS); if (ref == null) { return com.google.common.collect.ImmutableSet.of(); } try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository)) { org.eclipse.jgit.revwalk.RevCommit commit = revWalk.parseCommit(ref.getObjectId()); org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(reader, noteMap); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> groupReference = new java.util.LinkedHashSet<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.common.data.GroupReference groupReference = com.google.gerrit.server.group.GroupReference.getGroupReference(reader, note.getData()); boolean result = groupReferences.add(groupReference); if (!result.contains(account))) { com.google.gerrit.server.group.GroupsCheckResult.log.warn("Cannot check UUID of UUID of UUID of %s (%s) is duplicate in %s)", groupReference.getUUID()); } } return com.google.common.collect.ImmutableSet.copyOf(groupReferences); } }
public static com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference> loadAllGroupReferences(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Ref ref = repository.exactRef(RefNames.REFS_GROUPS); if (ref == null) { return com.google.common.collect.ImmutableSet.of(); } try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository)) { org.eclipse.jgit.revwalk.RevCommit commit = revWalk.parseCommit(ref.getObjectId()); org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(reader, noteMap); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> groupReference = new java.util.LinkedHashSet<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.common.data.GroupReference groupReference = com.google.gerrit.server.group.GroupReference.getGroupReference(reader, note.getData()); boolean result = groupReferences.add(groupReference); if (!result.contains(account))) { com.google.gerrit.server.group.GroupsCheckResult.log.warn("Cannot check UUID of UUID of UUID of %s (%s) is duplicate in " + noteReference.getUUID()); } } return com.google.common.collect.ImmutableSet.copyOf(groupReference); } }
public static com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference> loadAllGroupReferences(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Ref ref = repository.exactRef(RefNames.REFS_GROUPS); if (ref == null) { return com.google.common.collect.ImmutableSet.of(); } try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository)) { org.eclipse.jgit.revwalk.RevCommit commit = revWalk.parseCommit(ref.getObjectId()); org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(reader, noteMap); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> groupReference = new java.util.LinkedHashSet<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.common.data.GroupReference groupReference = com.google.gerrit.server.group.GroupReference.getGroupReference(reader, note.getData()); boolean result = groupReferences.add(groupReference); if (!result.contains(account))) { com.google.gerrit.server.group.GroupsCheckResult.log.warn("Cannot check UUID of UUID of UUID of %s (%s) is duplicate in " + accountReference.getUUID()); } } return com.google.common.collect.ImmutableSet.copyOf(groupReferences); } }
private java.lang.String getCommitMessage() { if ((oldGroupName.isPresent()) && (newGroupName.isPresent())) { return java.lang.String.format("Account from '%s' to '%s' to '%s'", oldGroupName.get()); } if (newGroupName.isPresent()) { return java.lang.String.format("Account '%s'", newGroupName.get()); } return "No-up"; }
private java.lang.String getCommitMessage() { if ((oldGroupName.isPresent()) && (newGroupName.isPresent())) { return java.lang.String.format(" account from '%s' to '%s' to '%s'", newGroupName.get()); } if (newGroupName.isPresent()) { return java.lang.String.format("Account '%s'", newGroupName.get()); } return "No-up"; }
private java.lang.String getCommitMessage() { if ((oldGroupName.isPresent()) && (newGroupName.isPresent())) { return java.lang.String.format("Account from '%s' to '%s' to '%s'", newGroupName.get()); } if (newGroupName.isPresent()) { return java.lang.String.format("Account '%s'", newGroupName.get()); } return "No-up"; }
private java.lang.String getCommitMessage() { if ((oldGroupName.isPresent()) && (newGroupName.isPresent())) { return java.lang.String.format("Account '%s' to '%s' to '%s'", oldGroupName.get()); } if (newGroupName.isPresent()) { return java.lang.String.format("Account '%s'", newGroupName.get()); } return "No-up"; }
private java.lang.String getCommitMessage() { if ((oldGroupName.isPresent()) && (newGroupName.isPresent())) { return java.lang.String.format("Account '%s' to '%s' to '%s'", newGroupName.get(), newGroupName.get()); } if (oldGroupName.isPresent()) { return java.lang.String.format("Account '%s'", newGroupName.get()); } return "No-up"; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource resource, com.google.gerrit.extensions.common.AgreementInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { if (!(agreementsEnabled)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("Authentication required"); } if ((self.get())!= (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to enter contributor agreement"); } java.lang.String agreementName = com.google.common.base.Strings.nullToEmpty(input.name); com.google.gerrit.common.data.ContributorAgreements ca = projectCache.getAllProjects().getConfig().getConfig().getConfig(agreementName); if (ca == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("auto-auto-auto-auto-auto-auto-auto-auto-auto-auto-auto-active"); } if ((ca.getAutoVerify()) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("auto-auto-auto-auto-auto-auto-auto-auto-auto-active"); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = ca.get().getUUID(); if (uuid == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Cannot consult the account"); } com.google.gerrit.reviewdb.client.Account account = self.get().getAccount(); try { addMembers(uuid, com.google.common.collect.ImmutableSet.of(account.getId())); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Cannot query inactive"); } return account; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource resource, com.google.gerrit.extensions.common.AgreementInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { if (!(agreementsEnabled)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("Authentication required"); } if ((self.get())!= (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to enter contributor agreement"); } java.lang.String agreementName = com.google.common.base.Strings.nullToEmpty(input.name); com.google.gerrit.common.data.ContributorAgreements ca = projectCache.getAllProjects().getConfig().getConfig().getConfig(agreementName); if (ca == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("auto-auto-auto-auto-auto-auto-auto-auto-auto-auto-auto-active"); } if ((ca.getAutoVerify()) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("auto-auto-auto-auto-auto-auto-auto-auto-auto-active"); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = ca.get().getUUID(); if (uuid == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Cannot consult the account"); } com.google.gerrit.reviewdb.client.Account account = self.get().getAccount(); try { addMembers(uuid, com.google.common.collect.ImmutableSet.of(account.getId())); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Cannot check not found"); } return account;
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource resource, com.google.gerrit.extensions.common.AgreementInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { if (!(agreementsEnabled)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("Authentication required"); } if ((self.get())!= (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to enter contributor agreement"); } java.lang.String agreementName = com.google.common.base.Strings.nullToEmpty(input.name); com.google.gerrit.common.data.ContributorAgreements ca = projectCache.getAllProjects().getConfig().getConfig().getConfig(agreementName); if (ca == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("auto-auto-auto-auto-auto-auto-auto-auto-auto-auto-auto-active"); } if ((ca.getAutoVerify()) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("auto-auto-auto-auto-auto-auto-auto-auto-auto-active"); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = ca.get().getUUID(); if (uuid == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Cannot consult the account"); } com.google.gerrit.reviewdb.client.Account account = self.get().getAccount(); try { addMembers(uuid, com.google.common.collect.ImmutableSet.of(account.getId())); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Cannot add accounts"); } return account; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource resource, com.google.gerrit.extensions.common.AgreementInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { if (!(agreementsEnabled)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("Authentication required"); } if ((self.get())!= (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to enter contributor agreement"); } java.lang.String agreementName = com.google.common.base.Strings.nullToEmpty(input.name); com.google.gerrit.common.data.ContributorAgreements ca = projectCache.getAllProjects().getConfig().getConfig().getConfig(agreementName); if (ca == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("auto-auto-auto-auto-auto-auto-auto-auto-auto-auto-auto-active"); } if ((ca.getAutoVerify()) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("auto-auto-auto-auto-auto-auto-auto-auto-auto-active"); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = ca.get().getUUID(); if (uuid == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Cannot consult the account"); } com.google.gerrit.reviewdb.client.Account account = self.get().getAccount(); try { addMembers(uuid, com.google.common.collect.ImmutableSet.of(account.getId())); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Cannot find account"); } return account; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource resource, com.google.gerrit.extensions.common.AgreementInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { if (!(agreementsEnabled)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("Authentication required"); } if ((self.get())!= (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to enter contributor agreement"); } java.lang.String agreementName = com.google.common.base.Strings.nullToEmpty(input.name); com.google.gerrit.common.data.ContributorAgreements ca = projectCache.getAllProjects().getConfig().getConfig().getConfig(agreementName); if (ca == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("auto-auto-auto-auto-auto-auto-auto-auto-auto-auto-auto-active"); } if ((ca.getAutoVerify()) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("auto-auto-auto-auto-auto-auto-auto-auto-auto-active"); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = ca.get().getUUID(); if (uuid == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Cannot consult the account"); } com.google.gerrit.reviewdb.client.Account account = self.get().getAccount(); try { addMembers(uuid, com.google.common.collect.ImmutableSet.of(account.getId())); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Cannot query inactive"); } return addMembersFactory
@org.junit.Test public void sharedGroupID() throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString("group", null, "name", g1.name); cfg.setInt("group", null, "group", g2.groupId); cfg.setString("group", null, "ownerGroupUUID", gApi.accounts().id); updateGroupFile(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.AccountGroup.UUID.group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g.id)), AccountGroup.UUID, cfg.toText()); assertError("account {}", err); }
@org.junit.Test public void sharedGroupID() throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString("group", null, "name", g1.name); cfg.setInt("group", null, "group", g2.groupId); cfg.setString("group", null, "ownerGroupUUID", gApi.accounts().id); updateGroupFile(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.AccountGroup.UUID.group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g.id)), AccountGroup.UUID, cfg.toText()); assertError("Cannot account id", ui); }
@org.junit.Test public void sharedGroupID() throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString("group", null, "name", g1.name); cfg.setInt("group", null, "group", g2.groupId); cfg.setString("group", null, "ownerGroupUUID", gApi.accounts().id); updateGroupFile(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.AccountGroup.UUID.group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g.id)), AccountGroup.UUID_FILE_NAME, cfg.toText()); assertError("Cannot account"); }
@org.junit.Test public void sharedGroupID() throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString("group", null, "name", g1.name); cfg.setInt("group", null, "group", g2.groupId); cfg.setString("group", null, "ownerGroupUUID", gApi.accounts().id); updateGroupFile(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.AccountGroup.UUID.group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g.id)), AccountGroup.UUID_FILE_NAME, cfg.toText()); assertError("account {}", ui); }
@org.junit.Test public void sharedGroupID() throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString("group", null, "name", g1.name); cfg.setInt("group", null, "group", g2.groupId); cfg.setString("group", null, "ownerGroupUUID", gApi.accounts().id); updateGroupFile(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.AccountGroup.UUID.group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g.id)), AccountGroup.UUID_FILE_NAME, cfg.toText()); assertError("account {}", u.toText()); }
@org.junit.Test public void missingGroupName() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(RefNames.REFS_GROUPS); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result result = ru.delete(); assertThat(result).isEqualTo(Result.FORCED); } assertThat(result).isEqualTo(Result.FORCED); }
@org.junit.Test public void missingGroupName() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(RefNames.REFS_GROUPS); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result result = ru.delete(); assertThat(result).isEqualTo(Result.FORCED); } assertError("does not exist"); }
@org.junit.Test public void missingGroupNameRefName() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(RefNames.REFS_GROUPS); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result result = ru.delete(); assertThat(result).isEqualTo(Result.FORCED); } assertError("does not exist"); }
@org.junit.Test public void missingGroupName() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(RefNames.REFS_GROUPS.REFS_GROUPS); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result result = ru.delete(); assertThat(result).isEqualTo(Result.FORCED); } assertError("does not exist"); }
@org.junit.Test public void missingGroupName() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(RefNames.REFS_GROUPS.REFS_GROUPS); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result result = ru.delete(); assertThat(result).isEqualTo(Result.FORCED); } assertError("noted does not exist"); }
@org.junit.Test public void nameWithoutGroupRef() throws java.lang.Exception { java.lang.String invalidName = ""; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.setString("group", null, "uuid", com.google.gerrit.acceptance.api.group.GroupsByGIT.BUGIN_UUID); config.setString("group", null, "name", invalidName); updateGroupFile(RefNames.REFS_GROUPS, com.google.gerrit.server.group.GroupNameKey.getName(), config.toText(), config.toText()); assertError("Cannot missing as account ref"); }
@org.junit.Test public void nameWithoutGroupRef() throws java.lang.Exception { java.lang.String invalidName = ""; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.setString("group", null, "uuid", com.google.gerrit.acceptance.api.group.GroupsByGIT.BUGIN_UUID); config.setString("group", null, "name", invalidName); updateGroupFile(RefNames.REFS_GROUPS, com.google.gerrit.server.group.GroupNameKey.getName(), config.toText(), config.toText()); assertAccountFile(RefNames.REFS_GROUPS, config.toText()); }
@org.junit.Test public void nameWithoutGroupRef() throws java.lang.Exception { java.lang.String invalidName = ""; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.setString("group", null, "uuid", com.google.gerrit.acceptance.api.group.GroupsByGIT.BUGIN_UUID); config.setString("group", null, "name", invalidName); updateGroupFile(RefNames.REFS_GROUPS, com.google.gerrit.server.group.GroupNameKey.getName(), config.toText(), config.toText()); assertError("Cannot invalid as account ref"); }
@org.junit.Test public void nameWithoutGroupRef() throws java.lang.Exception { java.lang.String invalidName = ""; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.setString("group", null, "uuid", com.google.gerrit.acceptance.api.group.GroupsByGIT.BUGIN_UUID); config.setString("group", null, "name", invalidName); updateGroupFile(RefNames.REFS_GROUPS, com.google.gerrit.server.group.GroupNameKey.getName(), config.toText(), config.toText()); assertAccountFile(RefNames.REFS_CONFIG, config.toText()); }
@org.junit.Test public void nameWithoutGroupRef() throws java.lang.Exception { java.lang.String invalidName = ""; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.setString("group", null, "uuid", com.google.gerrit.acceptance.api.group.GroupsByGIT.BUGIN_UUID); config.setString("group", null, "name", invalidName); updateGroupFile(RefNames.REFS_GROUPS, com.google.gerrit.server.group.GroupNameKey.getName(), config.toText(), config.toText()); assertError("Cannot missing as account ref", null); }
@org.junit.Test public void missingNameEntryEntry() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ru = repo.refs.rename(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(com.google.gerrit.acceptance.api.group.Groups.BERS_UUID))); org.eclipse.jgit.lib.RefUpdate result = ru.rename(); assertThat(result).isEqualTo(Result.RENAMED); } assertError(((" + (com.google.gerrit.acceptance.api.group.Groups.BGroupsByUUID)) + " has no solution")); }
@org.junit.Test public void missingNameEntryEntry() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ru = repo.refs.rename(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(com.google.gerrit.acceptance.api.group.Groups.BERS_UUID))); org.eclipse.jgit.lib.RefUpdate result = ru.rename(); assertThat(result).isEqualTo(Result.RENAME); } assertError(((" + (com.google.gerrit.acceptance.api.group.Groups.BGroupsByUUID_UUID)) + " has no entry")); }
@org.junit.Test public void missingNameEntryEntry() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ru = repo.refs.rename(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(com.google.gerrit.acceptance.api.group.Groups.BERS_UUID))); org.eclipse.jgit.lib.RefUpdate result = ru.rename(); assertThat(result).isEqualTo(Result.RENAME); } assertError(((" + (com.google.gerrit.acceptance.api.group.Groups.BGroupsByUUID_UUID)) + " has no solution")); }
@org.junit.Test public void missingNameEntryEntry() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ru = repo.refs.rename(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(com.google.gerrit.acceptance.api.group.Groups.BERS_UUID))); org.eclipse.jgit.lib.RefUpdate result = ru.rename(); assertThat(result).isEqualTo(Result.RENAME); } assertError(((" + (com.google.gerrit.acceptance.api.group.Groups.BGroupsByUUID)) + (com.google.gerrit.acceptance.api.group.GroupsByUUIDIT.BUGIN_UUID)) + " has no solution")); }
@org.junit.Test public void missingNameEntryEntry() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ru = repo.refs.rename(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(com.google.gerrit.acceptance.api.group.Groups.BERS_UUID))); org.eclipse.jgit.lib.RefUpdate result = ru.rename(); assertThat(result).isEqualTo(Result.RENAME); } assertError(((" + (com.google.gerrit.acceptance.api.group.Groups.BGroupsByUUID)) + (com.google.gerrit.acceptance.api.group.GroupsByUUIDIT.BUGIN_UUID)) + " has no match in name in ")"); }
@org.junit.Test public void unknownOwnerGroup() throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString("group", null, "name", g1.name); cfg.setInt("group", null, "id", g1.groupId); cfg.setString("group", null, "ownerGroupUUID", com.google.gerrit.reviewdb.client.AccountGroup.UUID.UUID.class); updateGroupFile(com.google.gerrit.reviewdb.client.AccountGroup.UUID.group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.AccountGroup.UUID.GROUP_FILE_NAME, cfg.toText()); assertError("Owner"); }
@org.junit.Test public void unknownOwnerGroup() throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString("group", null, "name", g1.name); cfg.setInt("group", null, "id", g1.groupId); cfg.setString("group", null, "ownerGroupUUID", com.google.gerrit.reviewdb.client.AccountGroup.UUID.UUID.class); updateGroupFile(com.google.gerrit.reviewdb.client.AccountGroup.UUID.group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.AccountGroup.UUID.group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.AccountGroup.UUID_CONFIG, cfg.toText()); assertOwner("user", ownerId); }
@org.junit.Test public void unknownOwnerGroup() throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString("group", null, "name", g1.name); cfg.setInt("group", null, "id", g1.groupId); cfg.setString("group", null, "ownerGroupUUID", com.google.gerrit.reviewdb.client.AccountGroup.UUID.UUID.class); updateGroupFile(com.google.gerrit.reviewdb.client.AccountGroup.UUID.group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.AccountGroup.UUID.group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.AccountGroup.UUID_CONFIG, cfg.toText()); assertOwner("user owner account"); }
@org.junit.Test public void unknownOwnerGroup() throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString("group", null, "name", g1.name); cfg.setInt("group", null, "id", g1.groupId); cfg.setString("group", null, "ownerGroupUUID", com.google.gerrit.reviewdb.client.AccountGroup.UUID.UUID.class); updateGroupFile(com.google.gerrit.reviewdb.client.AccountGroup.UUID.group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.AccountGroup.UUID.group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.AccountGroup.UUID_CONFIG, cfg.toText()); assertOwner("user account", ownerId); assertOwner("user account to account"); }
@org.junit.Test public void unknownOwnerGroup() throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString("group", null, "name", g1.name); cfg.setInt("group", null, "id", g1.groupId); cfg.setString("group", null, "ownerGroupUUID", com.google.gerrit.reviewdb.client.AccountGroup.UUID.UUID.class); updateGroupFile(com.google.gerrit.reviewdb.client.AccountGroup.UUID.group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.AccountGroup.UUID.group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.AccountGroup.UUID_CONFIG, cfg.toText()); assertOwner("user account", ownerId); assertAccount.create("account", owner); }
@org.junit.Test public void missingGroupRef() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id))); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result result = ru.delete(); assertThat(result).isEqualTo(Result.FORCED); } assertThat(result).isEqualTo(Result.FORCED); }
@org.junit.Test public void missingGroupRef() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id))); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result result = ru.delete(); assertThat(result).isEqualTo(Result.FORCED); } assertError("Cannot update as account"); }
@org.junit.Test public void missingGroupRef() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id))); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result result = ru.delete(); assertThat(result).isEqualTo(Result.FORCED); } assertThat(result).isEqualTo(Result.OK); }
@org.junit.Test public void missingGroupRef() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id))); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result result = ru.delete(); assertThat(result).isEqualTo(Result.FORCED); } assertError("Cannot update as merged"); }
@org.junit.Test public void missingGroupRef() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id))); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result result = ru.delete(); assertThat(result).isEqualTo(Result.FORCED); } assertThat(result).isEqualTo(Result.FAILED); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo get() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getGroup.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve account", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo get() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getGroup.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo get() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getGroup.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve accounts", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo get() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getGroup.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve user", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo get() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getGroup.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve by account", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.project.DashboardResource resource, com.google.gerrit.extensions.common.DashboardInfo input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (resource.isProjectDefault()) { return defaultValue.get().apply(resource, input); } throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.project.DashboardResource resource, com.google.gerrit.extensions.common.DashboardInfo input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (resource.isProjectDefault()) { return defaultValue; } throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.project.DashboardResource resource, com.google.gerrit.extensions.common.DashboardInfo input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (resource.isProjectDefault()) { return defaultValue.get().apply(resource, input); } throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.project.DashboardResource resource, com.google.gerrit.extensions.common.DashboardInfo input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (resource.isProjectDefault()) { return defaultValue.get().apply(resource, input); } throw new com.google.gerrit.extensions.restapi.ResourceNotAllowedException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.project.DashboardResource resource, com.google.gerrit.extensions.common.DashboardInfo input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (resource.isProjectDefault()) { return defaultValue; } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public java.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.NameKey name) { if (name == null) { return java.util.Optional.emptySet(); } try { return byName.get(name.get()); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(java.lang.String.format("Cannot find account %s by name", name.get()), e); return java.util.Optional.emptySet(); } }
@java.lang.Override public java.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.NameKey name) { if (name == null) { return java.util.Optional.emptyMap(); } try { return byName.get(name.get()); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(java.lang.String.format("Cannot find account %s by name", name.get()), e); return java.util.Optional.emptySet(); } }
@java.lang.Override public java.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.NameKey name) { if (name == null) { return java.util.Optional.emptySet(); } try { return byName.get(name.get()); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(java.lang.String.format("Cannot lookup account %s by name", name.get()), e); return java.util.Optional.emptySet(); } }
@java.lang.Override public java.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.NameKey name) { if (name == null) { return java.util.Optional.emptyMap(); } try { return byName.get(name.get()); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(java.lang.String.format("Cannot lookup account %s by name", name.get()), e); return java.util.Optional.emptySet(); } }
@java.lang.Override public java.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.NameKey name) { if (name == null) { return java.util.Optional.emptySet(); } try { return byName.get(name.get()); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(java.lang.String.format("Cannot find account %s by name", name.get()), e); return java.util.Optional.emptyMap(); } }
@java.lang.Override public java.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { try { return byId.get(groupId); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(("Cannot load " + groupId), e); return java.util.Optional.emptyMap(); } }
@java.lang.Override public java.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { try { return byId.get(groupId); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(("Cannot load " + groupId), e); return java.util.Collections.emptyMap(); } }
@java.lang.Override public java.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { try { return byId.get(groupId); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(("Cannot load " + groupId), e); return java.util.Optional.emptySet(); } }
@java.lang.Override public java.util.Collection<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { try { return byId.get(groupId); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(("Cannot load " + groupId), e); return java.util.Optional.emptyMap(); } }
@java.lang.Override public java.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { try { return byId.get(groupId).get(groupId); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(("Cannot load " + groupId), e); return java.util.Optional.emptyMap(); }
@java.lang.Override public java.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) { if (groupUUID == null) { return java.util.Optional.emptySet(); } try { return byUUID.get(groupUUID.get()); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(java.lang.String.format("Cannot find uuid %s by uuid", uuid.get()), e); return java.util.Optional.emptyMap(); } }
@java.lang.Override public java.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) { if (groupUUID == null) { return java.util.Optional.emptyMap(); } try { return byUUID.get(groupUUID.get()); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(java.lang.String.format("Cannot find uuid %s by uuid", uuid.get()), e); return java.util.Optional.emptyMap(); } }
@java.lang.Override public java.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) { if (groupUUID == null) { return java.util.Optional.emptySet(); } try { return byUUID.get(groupUUID.get()); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(java.lang.String.format("Cannot find uuid %s by uuid", uuid.get()), e); return java.util.Optional.empty(); } }
@java.lang.Override public java.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) { if (groupUUID == null) { return java.util.Optional.emptyMap(); } try { return byUUID.get(groupUUID.get()); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(java.lang.String.format("Cannot find uuid %s by uuid", uuid.get()), e); return java.util.Optional.empty(); } }
@java.lang.Override public java.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) { if (groupUUID == null) { return java.util.Optional.emptySet(); } try { return byUUID.get(groupUUID.get()); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(java.lang.String.format("Cannot find uuid %s by uuid", uuid.get()), e); return java.util.Collections.emptyList(); } }
private void index(com.google.gerrit.server.project.ProjectState projectState) { try { index.apply(new com.google.gerrit.server.project.ProjectResource(projectState, user), null); } catch (java.lang.Exception e) { writeError("error", e); } }
private void index(com.google.gerrit.server.project.ProjectState projectState) { try { index.apply(new com.google.gerrit.server.project.ProjectResource(projectState, user), null); } catch (java.lang.Exception e) { writeError("Error", e); } }
private void index(com.google.gerrit.server.project.ProjectState projectState) { try { index.apply(new com.google.gerrit.server.project.ProjectResource(projectState, user), null); } catch (java.lang.Exception e) { writeError("error", java.lang.String.format("Failed to index %s: %s", projectState.getName(), e.getMessage())); } }
private void index(com.google.gerrit.server.project.ProjectState projectState) { try { index.apply(new com.google.gerrit.server.project.ProjectResource(projectState, user), null); } catch (java.lang.Exception e) { writeError("Error", java.lang.String.format("Failed to index %s: %s", projectState.getName(), e.getMessage())); } }
private void index(com.google.gerrit.server.project.ProjectState projectState) { try { index.apply(new com.google.gerrit.server.project.ProjectResource(projectState, user), null); } catch (java.lang.Exception e) { writeError("error: to index %s", projectState.getName(), e.getMessage())); } }
public com.google.gerrit.extensions.api.projects.TagInfo get(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.lang.String tagName = id.get(); if (!(tagName.startsWith(Constants.R_TAGS))) { tagName = (org.eclipse.jgit.lib.Constants.R_TAGS) + tagName; } org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().exactRef(tagName); if ((ref!= null) && (!(visibleTags(resource.getProjectState(), repo, com.google.common.collect.ImmutableMap.of(ref.getProjectState()))) { return com.google.gerrit.server.project.ListTags.createTagInfo(permissionBackend.user(resource.getUser()).project(resource.getNameKey()).ref(resource.getNameKey()).ref(ref.getNameKey()).isEmpty())); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
public com.google.gerrit.extensions.api.projects.TagInfo get(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.RepositoryNotFoundException { try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.lang.String tagName = id.get(); if (!(tagName.startsWith(Constants.R_TAGS))) { tagName = (resource.getProjectState(tagName); } org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().exactRef(tagName); if ((ref!= null) && (!(visibleTags(resource.getProjectState(), repo, com.google.common.collect.ImmutableMap.of(ref.getProjectState()))) { return com.google.gerrit.server.project.ListTags.createTagInfo(permissionBackend.user(resource.getUser()).project(resource.getNameKey()).ref(ref.getNameKey()).ref(ref.getNameKey()).isEmpty())); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
public com.google.gerrit.extensions.api.projects.TagInfo get(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.lang.String tagName = id.get(); if (!(tagName.startsWith(Constants.R_TAGS))) { tagName = (org.eclipse.jgit.lib.Constants.R_TAGS) + tagName; } org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().exactRef(tagName); if ((ref!= null) && (!(visibleTags(resource.getProjectState(), repo, com.google.common.collect.ImmutableMap.of(ref.getProjectState()))) { return com.google.gerrit.server.project.ListTags.createTagInfo(permissionBackend.user(resource.getUser()).project(resource.getNameKey(), repo, com.google.common.collect.ImmutableMap.of(resource.getUser()), ref, rw, rw, rw.getNameKey(), links); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
public com.google.gerrit.extensions.api.projects.TagInfo get(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.lang.String tagName = id.get(); if (!(tagName.startsWith(Constants.R_TAGS))) { tagName = (org.eclipse.jgit.lib.Constants.R_TAGS) + tagName; } org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().exactRef(tagName); if ((ref!= null) && (!(visibleTags(resource.getProjectState(), repo, com.google.common.collect.ImmutableMap.of(ref.getProjectState()))) { return com.google.gerrit.server.project.ListTags.createTagInfo(permissionBackend.user(resource.getUser()).project(resource.getNameKey(), repo, com.google.common.collect.ImmutableMap.of(resource.getUser()), ref, rw, rw, rw.getNameKey(), tags); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
public com.google.gerrit.extensions.api.projects.TagInfo get(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.lang.String tagName = id.get(); if (!(tagName.startsWith(Constants.R_TAGS))) { tagName = (org.eclipse.jgit.lib.Constants.R_TAGS) + tagName; } org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().exactRef(tagName); if ((ref!= null) && (!(visibleTags(resource.getProjectState(), repo, com.google.common.collect.ImmutableMap.of(ref.getProjectState()))) { return com.google.gerrit.server.project.ListTags.createTagInfo(permissionBackend.user(resource.getUser()).project(resource.getNameKey()).ref(resource.getNameKey()).ref(ref.getNameKey()).isEmpty())); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> apply(com.google.gerrit.server.project.ProjectResource resource) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.BadRequestException, java.io.IOException { java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> tags = new java.util.ArrayList<>(); com.google.gerrit.server.api.projects.ProjectAccess.ForProject perm = permissionBackend.user(user).project(resource.getNameKey()); try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = visibleTags(resource.getProjectState(), repo, repo.getRefDatabase().getRefs(Constants.R_TAGS)); for (org.eclipse.jgit.lib.Ref ref : all.values()) { tags.add(com.google.gerrit.server.api.projects.ListTags.createTagInfo(perm.ref(ref.getName()), ref, rw, resource.getNameKey(), links)); } } java.util.Collections.sort(tags, new java.util.Comparator<com.google.gerrit.extensions.api.projects.TagInfo>() { @java.lang.Override public int compare(com.google.gerrit.extensions.api.projects.TagInfo a, com.google.gerrit.extensions.api.projects.TagInfo b) { return a.ref.compareTo(b.ref); } }); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.TagInfo>(org.eclipse.jgit.lib.Constants.R_TAGS); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> apply(com.google.gerrit.server.project.ProjectResource resource) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.BadRequestException, java.io.IOException { java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> tags = new java.util.ArrayList<>(); com.google.gerrit.server.api.projects.ProjectAccess.ForProject perm = permissionBackend.user(user).project(resource.getNameKey()); try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = visibleTags(resource.getProjectState(), repo, repo.getRefDatabase().getRefs(Constants.R_TAGS)); for (org.eclipse.jgit.lib.Ref ref : all.values()) { tags.add(com.google.gerrit.server.api.projects.ListTags.createTagInfo(perm.ref(ref.getName()), ref, rw, resource.getNameKey(), links)); } } java.util.Collections.sort(tags, new java.util.Comparator<com.google.gerrit.extensions.api.projects.TagInfo>() { @java.lang.Override public int compare(com.google.gerrit.extensions.api.projects.TagInfo a, com.google.gerrit.extensions.api.projects.TagInfo b) { return a.ref.compareTo(b.ref); } }); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.TagInfo>(org.eclipse.jgit.lib.Constants.OBJ_TAGS); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> apply(com.google.gerrit.server.project.ProjectResource resource) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.BadRequestException, java.io.IOException { java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> tags = new java.util.ArrayList<>(); com.google.gerrit.server.api.projects.ProjectAccess.ForProject perm = permissionBackend.user(user).project(resource.getNameKey()); try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = visibleTags(resource.getProjectState(), repo, repo.getRefDatabase().getRefs(Constants.R_TAGS)); for (org.eclipse.jgit.lib.Ref ref : all.values()) { tags.add(com.google.gerrit.server.api.projects.ListTags.createTagInfo(perm.ref(ref.getName()), ref, rw, resource.getNameKey(), links)); } } java.util.Collections.sort(tags, new java.util.Comparator<com.google.gerrit.extensions.api.projects.TagInfo>() { @java.lang.Override public int compare(com.google.gerrit.extensions.api.projects.TagInfo a, com.google.gerrit.extensions.api.projects.TagInfo b) { return a.ref.compareTo(b.ref); } }); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.TagInfo>(org.eclipse.jgit.api.projects.TagInfo>() { return a.ref.compareTo(b.ref); } });
@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> apply(com.google.gerrit.server.project.ProjectResource resource) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.BadRequestException, java.io.IOException { java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> tags = new java.util.ArrayList<>(); com.google.gerrit.server.api.projects.ProjectAccess.ForProject perm = permissionBackend.user(user).project(resource.getNameKey()); try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = visibleTags(resource.getProjectState(), repo, repo.getRefDatabase().getRefs(Constants.R_TAGS)); for (org.eclipse.jgit.lib.Ref ref : all.values()) { tags.add(com.google.gerrit.server.api.projects.ListTags.createTagInfo(perm.ref(ref.getName()), ref, rw, resource.getNameKey(), links)); } } java.util.Collections.sort(tags, new java.util.Comparator<com.google.gerrit.extensions.api.projects.TagInfo>() { @java.lang.Override public int compare(com.google.gerrit.extensions.api.projects.TagInfo a, com.google.gerrit.extensions.api.projects.TagInfo b) { return a.ref.compareTo(b.ref); } }); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.TagInfo>(org.eclipse.jgit.api.projects.TagInfo>() { return a.ref.ref; }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> apply(com.google.gerrit.server.project.ProjectResource resource) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.BadRequestException, java.io.IOException { java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> tags = new java.util.ArrayList<>(); com.google.gerrit.server.api.projects.ProjectAccess.ForProject perm = permissionBackend.user(user).project(resource.getNameKey()); try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = visibleTags(resource.getProjectState(), repo, repo.getRefDatabase().getRefs(Constants.R_TAGS)); for (org.eclipse.jgit.lib.Ref ref : all.values()) { tags.add(com.google.gerrit.server.api.projects.ListTags.createTagInfo(perm.ref(ref.getName()), ref, rw, resource.getNameKey(), links)); } } java.util.Collections.sort(tags, new java.util.Comparator<com.google.gerrit.extensions.api.projects.TagInfo>() { @java.lang.Override public int compare(com.google.gerrit.extensions.api.projects.TagInfo a, com.google.gerrit.extensions.api.projects.TagInfo b, com.google.gerrit.extensions.api.projects.TagInfo b) { return a.ref.compareTo(b.ref); } }); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.TagInfo>(org.eclipse.jgit.api.projects.TagInfo
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.Set<java.lang.String>> apply(com.google.gerrit.server.change.ChangeResource req) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.notedb.ChangeNotes notes = req.getNotes().load(); java.util.Set<java.lang.String> hashtags = notes.getHashtags(); if (hashtags == null) { hashtags = java.util.Collections.emptySet(); } return com.google.gerrit.extensions.restapi.Response.ok(hashtags); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.Set<java.lang.String>> apply(com.google.gerrit.server.change.ChangeResource req) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.notedb.ChangeNotes notes = req.getNotes().load(); if (hashtags == null) { hashtags = java.util.Collections.emptySet(); } return com.google.gerrit.extensions.restapi.Response.ok(hashtags); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.Set<java.lang.String>> apply(com.google.gerrit.server.change.ChangeResource req) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.notedb.ChangeNotes notes = req.getNotes().load(); if (hashtags == null) { hashtags = java.util.Collections.emptySet(); if (hashtags == null) { hashtags = java.util.Collections.emptySet(); } return com.google.gerrit.extensions.restapi.Response.ok(hashtags); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.Set<java.lang.String>> apply(com.google.gerrit.server.change.ChangeResource req) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.notedb.ChangeNotes notes = req.getNotes().load(); java.util.Set<java.lang.String> hashtags = notes.getHashtags(); if (hashtags == null) { hashtags = java.util.Collections.emptySet(); } return com.google.gerrit.extensions.restapi.Response.ok(hashtags); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.Set<java.lang.String>> apply(com.google.gerrit.server.change.ChangeResource req) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.notedb.ChangeNotes notes = req.getNotes().load(); java.util.Set<java.lang.String> hashtags = notes.getHashtags(); if (hashtags == null) { hashtags = java.util.Collections.emptySet(); } return com.google.gerrit.extensions.restapi.Response.ok(Hashtags); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "noteDb.groups.write", value = "true") public void createGroupBranch_Conflict() throws java.lang.Exception { allow(allUsers, com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS_USERS); allow(allUsers, com.google.gerrit.acceptance.rest.project.RefNames.REFS_GROUPS_USERS); allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), permission.PUSH, perm, com.google.gerrit.acceptance.rest.project.RefNames.refsGroups(adminGroupUUID))); assertCreateFails(new com.google.gerrit.reviewdb.client.Branch.NameKey(adminGroupUUID, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUUID))), com.google.gerrit.extensions.restapi.ResourceConflictException.class); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "noteDb.groups.write", value = "true") public void createGroupBranch_Conflict() throws java.lang.Exception { allow(allUsers, com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS_USERS); allow(allUsers, com.google.gerrit.acceptance.rest.project.RefNames.REFS_GROUPS_USERS); allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), permission.PUSH, perm, com.google.gerrit.acceptance.rest.project.RefNames.refsGroups(adminGroupUUID))); assertCreateFails(new com.google.gerrit.reviewdb.client.Branch.NameKey(adminGroupUUID, com.google.gerrit.reviewdb.client.AccountGroup.UUID.create(adminGroupUUID))), com.google.gerrit.extensions.restapi.ResourceConflictException.class); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "noteDb.groups.write", value = "true") public void createGroupBranch_Conflict() throws java.lang.Exception { allow(allUsers, com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS_USERS); allow(allUsers, com.google.gerrit.acceptance.rest.project.RefNames.REFS_GROUPS_USERS); allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), permission.PUSH, com.google.gerrit.acceptance.rest.project.RefNames.refsGroups(allUsers, com.google.gerrit.reviewdb.client.AccountGroup.UUID.create(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("foo")), com.google.gerrit.acceptance.rest.project.RefNames.refsGroups(adminGroupUUID))), com.google.gerrit.extensions.restapi.ResourceConflictException.class); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "noteDb.groups.write", value = "true") public void createGroupBranch_Conflict() throws java.lang.Exception { allow(allUsers, com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS_USERS); allow(allUsers, com.google.gerrit.acceptance.rest.project.RefNames.REFS_GROUPS_USERS); allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), permission.PUSH, com.google.gerrit.acceptance.rest.project.RefNames.refsGroups(allUsers, com.google.gerrit.reviewdb.client.AccountGroup.UUID.create(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("foo")), com.google.gerrit.acceptance.rest.project.RefNames.refsGroups(adminGroupUUID))), com.google.gerrit.acceptance.rest.project.RefNames.refsGroups(adminGroupUUID.create(adminGroupUUID))); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "noteDb.groups.write", value = "true") public void createGroupBranch_Conflict() throws java.lang.Exception { allow(allUsers, com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS_USERS); allow(allUsers, com.google.gerrit.acceptance.rest.project.RefNames.REFS_GROUPS_USERS); allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), permission.PUSH, com.google.gerrit.acceptance.rest.project.RefNames.refsGroups(allUsers, com.google.gerrit.reviewdb.client.AccountGroup.UUID.create(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("foo")), com.google.gerrit.acceptance.rest.project.RefNames.refsGroups(adminGroupUUID))), com.google.gerrit.acceptance.rest.project.RefNames.refsGroups(adminGroupUUID, com.google.gerrit.acceptance.rest.project.RefNames.refsGroups(adminGroupUUID))); }
private java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.GroupInfo> list(com.google.gerrit.server.api.groups.ListRequest req) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.restapi.TopLevelResource tlr = com.google.gerrit.extensions.restapi.TopLevelResource.INSTANCE; com.google.gerrit.server.group.ListGroups list = listGroups.get(); list.setOptions(req.getOptions()); for (java.lang.String project : req.getProjects()) { try { com.google.gerrit.server.project.ProjectResource rsrc = projects.parse(tlr, com.google.gerrit.extensions.restapi.IdString.fromDecoded(project)); list.addProject(rsrc.getProjectState()); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.api.ApiException(("Cannot list project " + project), e); } } for (java.lang.String group : req.getGroups()) { list.addGroup(groups.parse(group).getGroupUUID()); } list.setVisibleToAll(req.getVisibleToAll()); if ((req.getOwnedBy())!= null) { try { list.setUser(accounts.parse(req.getUser()).getAccountId()); } catch (java.lang.Exception e) { try { list.setUser(accounts.parse(req.getUser()).getAccountId()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("Cannot list user " + (req.getUser())), e); } } list.setOwned(req.getOwned()); list.setStart(req.getStart()); list.setStart(req.getStart()); list.setStart(req.getStart()); list.setStart(req.getStart()); list.setMatchSubstring(req.getSubstring()); list.setMatch(req.getSubstring()); list.setMatch(req.getStart());
private java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.GroupInfo> list(com.google.gerrit.server.api.groups.ListRequest req) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.restapi.TopLevelResource tlr = com.google.gerrit.extensions.restapi.TopLevelResource.INSTANCE; com.google.gerrit.server.group.ListGroups list = listGroups.get(); list.setOptions(req.getOptions()); for (java.lang.String project : req.getProjects()) { try { com.google.gerrit.server.project.ProjectResource rsrc = projects.parse(tlr, com.google.gerrit.extensions.restapi.IdString.fromDecoded(project)); list.addProject(rsrc.getProjectState()); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.api.ApiException(("Cannot list project " + project), e); } } for (java.lang.String group : req.getGroups()) { list.addGroup(groups.parse(group).getGroupUUID()); } list.setVisibleToAll(req.getVisibleToAll()); if ((req.getOwnedBy())!= null) { try { list.setUser(accounts.parse(req.getUser()).getAccountId()); } catch (java.lang.Exception e) { try { list.setUser(accounts.parse(req.getUser()).getAccountId()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("Error looking up user " + (req.getUser())), e); } } list.setOwned(req.getOwned()); list.setStart(req.getStart()); list.setStart(req.getStart()); list.setStart(req.getStart()); list.setStart(req.getStart()); list.setMatchSubstring(req.getSubstring()); list.setMatch(req.getSubstring()); list.setMatch(req.getStart());
private java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.GroupInfo> list(com.google.gerrit.server.api.groups.ListRequest req) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.restapi.TopLevelResource tlr = com.google.gerrit.extensions.restapi.TopLevelResource.INSTANCE; com.google.gerrit.server.group.ListGroups list = listGroups.get(); list.setOptions(req.getOptions()); for (java.lang.String project : req.getProjects()) { try { com.google.gerrit.server.project.ProjectResource rsrc = projects.parse(tlr, com.google.gerrit.extensions.restapi.IdString.fromDecoded(project)); list.addProject(rsrc.getProjectState()); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.api.ApiException(("Cannot list project " + project), e); } } for (java.lang.String group : req.getGroups()) { list.addGroup(groups.parse(group).getGroupUUID()); } list.setVisibleToAll(req.getVisibleToAll()); if ((req.getOwnedBy())!= null) { try { list.setUser(accounts.parse(req.getUser()).getAccountId()); } catch (java.lang.Exception e) { try { list.setUser(accounts.parse(req.getUser()).getAccountId()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("Cannot list user " + (req.getUser())), e); } } list.setOwned(req.getOwned()); list.setStart(req.getStart()); list.setStart(req.getStart()); list.setStart(req.getStart()); list.setStart(req.getStart()); list.setMatchSubstring(req.getSubstring()); list.setMatch(req.getSubstring()); list.setMatch(req.getSubstring
private java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.GroupInfo> list(com.google.gerrit.server.api.groups.ListRequest req) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.restapi.TopLevelResource tlr = com.google.gerrit.extensions.restapi.TopLevelResource.INSTANCE; com.google.gerrit.server.group.ListGroups list = listGroups.get(); list.setOptions(req.getOptions()); for (java.lang.String project : req.getProjects()) { try { com.google.gerrit.server.project.ProjectResource rsrc = projects.parse(tlr, com.google.gerrit.extensions.restapi.IdString.fromDecoded(project)); list.addProject(rsrc.getProjectState()); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.api.ApiException(("Cannot list project " + project), e); } } for (java.lang.String group : req.getGroups()) { list.addGroup(groups.parse(group).getGroupUUID()); } list.setVisibleToAll(req.getVisibleToAll()); if ((req.getOwnedBy())!= null) { try { list.setUser(accounts.parse(req.getUser()).getAccountId()); } catch (java.lang.Exception e) { try { list.setUser(accounts.parse(req.getUser()).getAccountId()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("Cannot list user " + (req.getUser())), e); } } list.setOwned(req.getOwned()); list.setStart(req.getStart()); list.setStart(req.getStart()); list.setStart(req.getStart()); list.setStart(req.getStart()); list.setMatchSubstring(req.getSubstring()); list.setMatch(req.getSubstring()); list.setMatch(req.getRegex
private java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.GroupInfo> list(com.google.gerrit.server.api.groups.ListRequest req) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.restapi.TopLevelResource tlr = com.google.gerrit.extensions.restapi.TopLevelResource.INSTANCE; com.google.gerrit.server.group.ListGroups list = listGroups.get(); list.setOptions(req.getOptions()); for (java.lang.String project : req.getProjects()) { try { com.google.gerrit.server.project.ProjectResource rsrc = projects.parse(tlr, com.google.gerrit.extensions.restapi.IdString.fromDecoded(project)); list.addProject(rsrc.getProjectState()); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.api.ApiException(("Cannot list project " + project), e); } } for (java.lang.String group : req.getGroups()) { list.addGroup(groups.parse(group).getGroupUUID()); } list.setVisibleToAll(req.getVisibleToAll()); if ((req.getOwnedBy())!= null) { try { list.setUser(accounts.parse(req.getUser()).getAccountId()); } catch (java.lang.Exception e) { try { list.setUser(accounts.parse(req.getUser()).getAccountId()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("Cannot list user " + (req.getUser())), e); } } list.setOwned(req.getOwned()); list.setStart(req.getStart()); list.setStart(req.getStart()); list.setStart(req.getStart()); list.setStart(req.getStart()); list.setStart(req.getStart()); list.setMatchSubstring(req.getSubstring()); list.setMatch(req.getSubstring());
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.List<com.google.gerrit.extensions.common.AccountInfo>> apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> pastAssignees = rsrc.getNotes().load().getPastAssignees(); if (pastAssignees == null) { return com.google.gerrit.server.account.AccountLoader accountLoaderFactory.create(true); } com.google.gerrit.server.account.AccountLoader accountLoader = accountLoaderFactory.create(true); java.util.List<com.google.gerrit.extensions.common.AccountInfo> infos = accountLoaderFactory.create(true); return com.google.gerrit.extensions.restapi.Response.ok(infos); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.List<com.google.gerrit.extensions.common.AccountInfo>> apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> pastAssignees = rsrc.getNotes().load().getPastAssignees(); if (pastAssignees == null) { return com.google.gerrit.server.account.AccountLoader.ok(java.util.Collections.emptyList()); } com.google.gerrit.server.account.AccountLoader accountLoader = accountLoaderFactory.create(true); java.util.List<com.google.gerrit.extensions.common.AccountInfo> infos = accountLoaderFactory.create(true); return com.google.gerrit.extensions.restapi.Response.ok(infos); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.List<com.google.gerrit.extensions.common.AccountInfo>> apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> pastAssignees = rsrc.getNotes().load().getPastAssignees(); if (pastAssignees == null) { return com.google.gerrit.server.account.AccountLoader.ok(java.util.Collections.emptyList()); } com.google.gerrit.server.account.AccountLoader accountLoader = accountLoaderFactory.create(true); java.util.List<com.google.gerrit.extensions.common.AccountInfo> accountLoader = accountLoaderFactory.create(true).map(accountInfoFactory.create(accountLoader::get).collect(java.util.stream.Collectors.toList()); accountLoader.fill(); return com.google.gerrit.extensions.restapi.Response.ok(infos); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.List<com.google.gerrit.extensions.common.AccountInfo>> apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> pastAssignees = rsrc.getNotes().load().getPastAssignees(); if (pastAssignees == null) { return com.google.gerrit.server.account.AccountLoader.ok(java.util.Collections.emptyList()); } com.google.gerrit.server.account.AccountLoader accountLoader = accountLoaderFactory.create(true); java.util.List<com.google.gerrit.extensions.common.AccountInfo> accountLoader = accountLoaderFactory.create(true).map(accountInfoFactory.create(accountLoader::get).collect(java.util.stream.Collectors.toList()); return com.google.gerrit.extensions.restapi.Response.ok(infos); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.List<com.google.gerrit.extensions.common.AccountInfo>> apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> pastAssignees = rsrc.getNotes().load().getPastAssignees(); if (pastAssignees == null) { return com.google.gerrit.server.account.AccountLoader.ok(java.util.Collections.emptyList()); } com.google.gerrit.server.account.AccountLoader accountLoader = accountLoaderFactory.create(true); java.util.List<com.google.gerrit.extensions.common.AccountInfo> accountLoader = accountLoaderFactory.create(true).map(accountInfoFactory.create(accountLoader::get).collect(java.util.stream.Collectors.toList()); return com.google.gerrit.extensions.restapi.Response.ok(pastAssignees); }
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> visibleTo(java.lang.String who) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { if (isSelf(who)) { return is_visible(); } java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = args.accountResolver.findAll(who); java.util.List<com.google.gerrit.server.query.change.ChangeData>> p = com.google.common.collect.Lists.newArrayListWithCapacity(m.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : m) { return visibleTo(args.userFactory.create(id)); } return com.google.gerrit.server.query.Predicate.or(p); }
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> visibleto(java.lang.String who) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { if (isSelf(who)) { return is_visible(); } java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = args.accountResolver.findAll(who); java.util.List<com.google.gerrit.server.query.change.ChangeData>> p = com.google.common.collect.Lists.newArrayListWithCapacity(m.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : m) { return visibleTo(args.userFactory.create(id)); } return com.google.gerrit.server.query.Predicate.or(p); }
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> visibleTo(java.lang.String who) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { if (isSelf(who)) { return is_visible(); } java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = args.accountResolver.findAll(who); java.util.List<com.google.gerrit.server.query.change.ChangeData>> p = com.google.common.collect.Lists.newArrayListWithCapacity(m.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : m) { return visibleTo(args.userFactory.create(id)); } return visibleTo(p); }
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> visibleTo(java.lang.String who) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException, java.io.IOException { if (isSelf(who)) { return is_visible(); } java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = args.accountResolver.findAll(who); java.util.List<com.google.gerrit.server.query.change.ChangeData>> p = com.google.common.collect.Lists.newArrayListWithCapacity(m.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : m) { return visibleTo(args.userFactory.create(id)); } return visibleTo(p); }
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> visibleTo(java.lang.String who) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException, java.io.IOException { if (isSelf(who)) { return is_visible(); } java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = args.accountResolver.findAll(who); java.util.List<com.google.gerrit.server.query.change.ChangeData>> p = com.google.common.collect.Lists.newArrayListWithCapacity(m.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : m) { return visibleTo(args.userFactory.create(id)); } return visibletoList(p); }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.GroupResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.restapi.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.GroupResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.GroupResource>> views() { return view; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.extensions.restapi.GroupResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.GroupResource>> views() throws com.google.gerrit.extensions.restapi.AuthException { return views; }
@java.lang.Override public com.google.gerrit.server.group.GroupResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { final com.google.gerrit.server.CurrentUser user = self.get(); if (user instanceof com.google.gerrit.server.AnonymousUser) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } else if (!(user instanceof com.google.gerrit.server.AnonymousUser) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.common.data.GroupDescription.Basic group = parseId(id.get()); if (group == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id.get()); } com.google.gerrit.server.account.GroupControl ctl = groupControlFactory.controlFor(group); if (!(ctl.isVisible())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.group.GroupResource(ctl); }
@java.lang.Override public com.google.gerrit.server.group.GroupResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { final com.google.gerrit.server.CurrentUser user = self.get(); if (user instanceof com.google.gerrit.server.AnonymousUser) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } else if (!(user instanceof com.google.gerrit.server.AnonymousUser)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.common.data.GroupDescription.Basic group = parseId(id.get()); if (group == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id.get()); } com.google.gerrit.server.account.GroupControl ctl = groupControlFactory.controlFor(group); if (!(ctl.isVisible())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.group.GroupResource(ctl); }
@java.lang.Override public com.google.gerrit.server.group.GroupResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { final com.google.gerrit.server.CurrentUser user = self.get(); if (user instanceof com.google.gerrit.server.AnonymousUser) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } else if (!(user instanceof com.google.gerrit.server.AnonymousUser) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.common.data.GroupDescription.Basic group = parseId(id.get()); if (group == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id.get()); } return new com.google.gerrit.server.account.GroupResource(ctl); }
@java.lang.Override public com.google.gerrit.server.group.GroupResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException { final com.google.gerrit.server.CurrentUser user = self.get(); if (user instanceof com.google.gerrit.server.AnonymousUser) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } else if (!(user instanceof com.google.gerrit.server.AnonymousUser) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.common.data.GroupDescription.Basic group = parseId(id.get()); if (group == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id.get()); } com.google.gerrit.server.account.GroupControl ctl = groupControlFactory.controlFor(group); if (!(ctl.isVisible())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.group.GroupResource(ctl); }
@java.lang.Override public com.google.gerrit.server.group.GroupResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { final com.google.gerrit.server.CurrentUser user = self.get(); if (user instanceof com.google.gerrit.server.AnonymousUser) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } else if (!(user instanceof com.google.gerrit.server.AnonymousUser) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.common.data.GroupDescription.Basic group = parseId(id.get()); if (group == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id.get()); } com.google.gerrit.server.account.GroupControl ctl = groupControlFactory.controlFor(group); if (!(ctl.isVisible())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.account.GroupResource(ctl); }
public void visit(org.eclipse.jgit.revwalk.RevCommit c) { checkState((!(done)), "gwtorm") java.util.Set<org.eclipse.jgit.revwalk.RevCommit> seen = getCloseParents(c); if ((interestingParents.size()) == 0) { groups.put(c, c.name()); return; } else if ((interestingParents.size()) == 1) { groups = new java.util.TreeSet<>(); java.util.Set<java.lang.String> parentGroups = com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize(interestingParents.size()); for (org.eclipse.jgit.revwalk.RevCommit p :interestingParents) { parentGroups = com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize(interestingParents.size()); for (org.eclipse.jgit.revwalk.RevCommit p : parents) { if (parentGroups.isEmpty()) { throw new java.lang.IllegalStateException(java.lang.String.format("Account %s associated to commit %s of commit %s of commit %s", p.name())); } for (java.lang.String parentGroups : parentGroups) { if (isGroupFromExclusiveGroup(p, parentGroup)) { this.add(parentGroups); } else { parentGroups; } } } } java.lang.Iterable<java.lang.String> toMember; if (thisCommitsGroups.isEmpty()) { com.google.common.collect.Iterables.addAll(c, new com.google.common.collect.Iterables.skip(parentGroups, 1); } else { toAlias = parentGroups; } groupsByInclude; for (java.lang.String p : toAlias) { groupNames.putAll(pGroups); } }
public void visit(org.eclipse.jgit.revwalk.RevCommit c) { checkState((!(done)), "gwtorm") java.util.Set<org.eclipse.jgit.revwalk.RevCommit> seen = getCloseParents(c); if ((interestingParents.size()) == 0) { groups.put(c, c.name()); return; } else if ((interestingParents.size()) == 1) { groups = new java.util.TreeSet<>(); java.util.Set<java.lang.String> parentGroups = com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize(interestingParents.size()); for (org.eclipse.jgit.revwalk.RevCommit p :interestingParents) { parentGroups = com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize(interestingParents.size()); for (org.eclipse.jgit.revwalk.RevCommit p : parents) { if (parentGroups.isEmpty()) { throw new java.lang.IllegalStateException(java.lang.String.format("Account %s associated to commit %s of commit %s of commit %s", p.name())); } for (java.lang.String parentGroups : parentGroups) { if (isGroupFromExclusiveGroup(p, parentGroup)) { this.add(parentGroups); } else { parentGroups; } } } } java.lang.Iterable<java.lang.String> toMember; if (thisCommitsGroups.isEmpty()) { com.google.common.collect.Iterables.addAll(c, new com.google.common.collect.Iterables.skip(parentGroups, 1); } else { toEmptyCommits = parentGroups; } groupsByInclude; for (java.lang.String p : toAlias) { groupNames.putAll(pGroups); } }
public void visit(org.eclipse.jgit.revwalk.RevCommit c) { checkState((!(done)), "gwtorm") java.util.Set<org.eclipse.jgit.revwalk.RevCommit> seen = getCloseParents(c); if ((interestingParents.size()) == 0) { groups.put(c, c.name()); return; } else if ((interestingParents.size()) == 1) { groups = new java.util.TreeSet<>(); java.util.Set<java.lang.String> parentGroups = com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize(interestingParents.size()); for (org.eclipse.jgit.revwalk.RevCommit p :interestingParents) { parentGroups = com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize(interestingParents.size()); for (org.eclipse.jgit.revwalk.RevCommit p : parents) { if (parentGroups.isEmpty()) { throw new java.lang.IllegalStateException(java.lang.String.format("Account %s associated to commit %s of commit %s of commit %s", p.name())); } for (java.lang.String parentGroups : parentGroups) { if (isGroupFromExclusiveGroup(p, parentGroup)) { this.add(parentGroups); } else { parentGroups; } } } } java.lang.Iterable<java.lang.String> toMember; if (thisCommitsGroups.isEmpty()) { com.google.common.collect.Iterables.addAll(c, new com.google.common.collect.Iterables.skip(parentGroups, 1); } else { toAlias = parentGroups; } groupsByInclude; for (java.lang.String p : toAlias) { groupNames.putAll(pGroups); } groupNames.putAll(c, thisCommits); }
public void visit(org.eclipse.jgit.revwalk.RevCommit c) { checkState((!(done)), "gwtorm") java.util.Set<org.eclipse.jgit.revwalk.RevCommit> seen = getCloseParents(c); if ((interestingParents.size()) == 0) { groups.put(c, c.name()); return; } else if ((interestingParents.size()) == 1) { groups = new java.util.TreeSet<>(); java.util.Set<java.lang.String> parentGroups = com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize(interestingParents.size()); for (org.eclipse.jgit.revwalk.RevCommit p :interestingParents) { parentGroups = com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize(interestingParents.size()); for (org.eclipse.jgit.revwalk.RevCommit p : parents) { if (parentGroups.isEmpty()) { throw new java.lang.IllegalStateException(java.lang.String.format("Account %s associated to commit %s of commit %s of commit %s", p.name())); } for (java.lang.String parentGroups : parentGroups) { if (isGroupFromExclusiveGroup(p, parentGroup)) { this.add(parentGroups); } else { parentGroups; } } } } java.lang.Iterable<java.lang.String> toMember; if (thisCommitsGroups.isEmpty()) { com.google.common.collect.Iterables.addAll(c, new com.google.common.collect.Iterables.skip(parentGroups, 1); } else { toAlias = parentGroups; } groupsByInclude; for (java.lang.String p : toAlias) { groupNames.putAll(pGroups); } groupNames.putAll(c, thisCommitGroups); }
public void visit(org.eclipse.jgit.revwalk.RevCommit c) { checkState((!(done)), "gwtorm") java.util.Set<org.eclipse.jgit.revwalk.RevCommit> seen = getCloseParents(c); if ((interestingParents.size()) == 0) { groups.put(c, c.name()); return; } else if ((interestingParents.size()) == 1) { groups = new java.util.TreeSet<>(); java.util.Set<java.lang.String> parentGroups = com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize(interestingParents.size()); for (org.eclipse.jgit.revwalk.RevCommit p :interestingParents) { parentGroups = com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize(interestingParents.size()); for (org.eclipse.jgit.revwalk.RevCommit p : parents) { if (parentGroups.isEmpty()) { throw new java.lang.IllegalStateException(java.lang.String.format("Account %s associated to commit %s of commit %s of commit %s", p.name())); } for (java.lang.String parentGroups : parentGroups) { if (isGroupFromExclusiveGroup(p, parentGroup)) { this.add(parentGroups); } else { parentGroups; } } } } java.lang.Iterable<java.lang.String> toMember; if (thisCommitsGroups.isEmpty()) { com.google.common.collect.Iterables.addAll(c, new com.google.common.collect.Iterables.skip(parentGroups, 1); } else { toAlias = parentGroups; } groupsByInclude; for (java.lang.String p : toAlias) { groupNames.putAll(pGroups); } groupNames.putAll(c, thisChangeGroups); }
private org.eclipse.jgit.lib.ObjectId parseGroup(org.eclipse.jgit.lib.ObjectId forCommit, java.lang.String group) { try { return org.eclipse.jgit.lib.ObjectId.fromString(group); } catch (java.lang.IllegalArgumentException e) { com.google.gerrit.server.git.GroupCollector.log.warn("Could not a commit {} for commit {}", e); return null; } }
private org.eclipse.jgit.lib.ObjectId parseGroup(org.eclipse.jgit.lib.ObjectId forCommit, java.lang.String group) { try { return org.eclipse.jgit.lib.ObjectId.fromString(group); } catch (java.lang.IllegalArgumentException e) { com.google.gerrit.server.git.GroupCollector.log.warn(("Commit for commit {}: " + group), e); return null; } }
private org.eclipse.jgit.lib.ObjectId parseGroup(org.eclipse.jgit.lib.ObjectId forCommit, java.lang.String group) { try { return org.eclipse.jgit.lib.ObjectId.fromString(group); } catch (java.lang.IllegalArgumentException e) { com.google.gerrit.server.git.GroupCollector.log.warn(("Commit for commit {} is a commit: " + group)); return null; } }
private org.eclipse.jgit.lib.ObjectId parseGroup(org.eclipse.jgit.lib.ObjectId forCommit, java.lang.String group) { try { return org.eclipse.jgit.lib.ObjectId.fromString(group); } catch (java.lang.IllegalArgumentException e) { com.google.gerrit.server.git.GroupCollector.log.warn(("Commit for commit {} is a commit: {}", group); return null; } }
private org.eclipse.jgit.lib.ObjectId parseGroup(org.eclipse.jgit.lib.ObjectId forCommit, java.lang.String group) { try { return org.eclipse.jgit.lib.ObjectId.fromString(group); } catch (java.lang.IllegalArgumentException e) { com.google.gerrit.server.git.GroupCollector.log.warn(("Commit for commit {} is a commit: " + group), e); return null; }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { return json.format(rsrc); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { return json.format(rsrc.format(rsrc)); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException { return json.format(rsrc); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException { return json.format(rsrc.format(rsrc)); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource rsrc) { return json.format(rsrc); }
@org.junit.Test public void createGroupAsUserIdent() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup group = createGroupAsUUID("test-account" + "test-account")); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getId(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit = createExpandExpand(group.getId(), userId, userId); assertThat(auditRepo).containsExactly(expAudit); }
@org.junit.Test public void createGroupAsUserIdent() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup group = createGroupAsUUID("test-account" + "test-account")); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroup.UUID extId = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit = createExpand(group.getId(), userId, userId); assertThat(auditRepo).containsExactly(expAudit); }
@org.junit.Test public void createGroupAsUserIdent() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup group = createGroupAsUUID("test-account" + "test-account")); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroup.UUID extId = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit exAudit = createExpand(group.getId(), userId, userId); assertThat(auditRepo).containsExactly(expAudit); }
@org.junit.Test public void createGroupAsUserIdent() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup group = createGroupAsUUID("test-account" + "test-account")); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroup.UUID extId = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit = createExpand(group.getId(), userId, userId); assertThat(audit.getMembersAudit(allUsersRepo))).containsExactly(expAudit); }
@org.junit.Test public void createGroupAsUserIdent() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup group = createGroupAsUUID("test-account" + "test-account")); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroup.UUID extId = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit = createExpand(group.getId(), userId, userId); assertThat(audit.getMembersAudit(allUsersRepo))).containsExactly(expaudit); }
private com.google.gerrit.server.group.InternalGroupUpdate updateGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.server.group.InternalGroupUpdate uuid, com.google.gerrit.reviewdb.client.AccountGroup.Id uuid) throws java.lang.Exception { com.google.gerrit.server.group.GroupConfigGroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(allUsersRepoManager, uuid); groupConfig.setGroupUpdate(groupUpdate,AbstractResult.getGroupName()); groupConfig.commit(createMetaDataUpdate(userIdent)); return groupConfig.getLoadedGroup().orElseInstance(createMetaData(user)); }
private com.google.gerrit.server.group.InternalGroupUpdate updateGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.server.group.InternalGroupUpdate uuid, com.google.gerrit.reviewdb.client.AccountGroup.Id uuid) throws java.lang.Exception { com.google.gerrit.server.group.GroupConfigGroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(allUsersRepoManager, uuid); groupConfig.setGroupUpdate(groupUpdate,AbstractResult.getAccountNameEmail()); groupConfig.commit(createMetaDataUpdate(userIdent)); return groupConfig.getLoadedGroup().orElseInstance("Create group"); }
private com.google.gerrit.server.group.InternalGroupUpdate updateGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.server.group.InternalGroupUpdate uuid, com.google.gerrit.reviewdb.client.AccountGroup.Id uuid) throws java.lang.Exception { com.google.gerrit.server.group.GroupConfigGroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(allUsersRepoManager, uuid); groupConfig.setGroupUpdate(groupUpdate,AbstractResult.getGroupName()); groupConfig.commit(createMetaDataUpdate(userIdent)); return groupConfig.getLoadedGroup().orElseInstance(createMetaData(userIdent)); }
private com.google.gerrit.server.group.InternalGroupUpdate updateGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.server.group.InternalGroupUpdate uuid, com.google.gerrit.reviewdb.client.AccountGroup.Id uuid) throws java.lang.Exception { com.google.gerrit.server.group.GroupConfigGroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(allUsersRepoManager, uuid); groupConfig.setGroupUpdate(groupUpdate,AbstractResult.getAccountNameEmail()); groupConfig.commit(createMetaDataUpdate(userIdent)); return groupConfig.getLoadedGroup().orElseInstance(createMetaData(user)); }
private com.google.gerrit.server.group.InternalGroupUpdate updateGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.server.group.InternalGroupUpdate uuid, com.google.gerrit.reviewdb.client.AccountGroup.Id uuid) throws java.lang.Exception { com.google.gerrit.server.group.GroupConfigGroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(allUsersRepoManager, uuid); groupConfig.setGroupUpdate(groupUpdate,AbstractResult.getAccountNameEmail()); groupConfig.commit(createMetaDataUpdate(userIdent)); return groupConfig.getLoadedGroup().orElseInstance(createMetaData(userIdent)); }
@org.junit.Test public void addMultiSubsections() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup group = createGroupAsUsers(1, "test-account-account" + "test-account-account" }; com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroupBackend group1 = createGroupAsUser(2, "test-account-2"); com.google.gerrit.reviewdb.client.AccountGroup subUUID = group1.getGroupUUID(); addSubgroups(uuid, groupUUID2); com.google.gerrit.reviewdb.client.AccountGroup.UUID subUUID = subgroup2.getGroupUUID(); addSubgroups(uuid, com.google.common.collect.ImmutableSet.of(substring(1, submoduleUUID2)); assertTipCommit(uuid, ((("account \"" + "\n") + (java.lang.String.format("Group UUID1\n") + "GroupUUID2") + (java.lang.String.format("GroupUUID<a> subgroupUUID1\n") + " groupUuid2") + (java.lang.String.format("GroupUUID2\n") + " groupUUID2"))); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit uuid = createExpand(group.getId(), subgroupUUID, userId, getKey(uuid)); assertThat(auditRepo2, uuid).containsExactly(expaudit2).inOrder(); }
@org.junit.Test public void addMultiSubsections() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup group = createGroupAsUsers(1, "test-account-account" + "test-account-account" }; com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroupBackend group1 = createGroupAsUser(2, "test-account-2"); com.google.gerrit.reviewdb.client.AccountGroup subUUID = group1.getGroupUUID(); addSubgroups(uuid, groupUUID2); com.google.gerrit.reviewdb.client.AccountGroup.UUID subUUID = subgroup2.getGroupUUID(); addSubgroups(uuid, com.google.common.collect.ImmutableSet.of(substring(1, submoduleUUID2)); assertTipCommit(uuid, ((("account \"" + "\n") + (java.lang.String.format("Group UUID1\n") + "GroupUUID2") + (java.lang.String.format("GroupUUID<a> subgroupUUID1\n") + " groupUuid2") + (java.lang.String.format("GroupUUID2\n") + " groupUUID2"))); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit uuid = createExpand(group.getId(), subgroupUUID, userId, getKey(uuid)); assertThat(auditRepo2, uuid).containsExactly(expaudit2); }
@org.junit.Test public void addMultiSubsections() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup group = createGroupAsUsers(1, "test-account-account" + "test-account-account" }; com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroupBackend group1 = createGroupAsUser(2, "test-account-2"); com.google.gerrit.reviewdb.client.AccountGroup subUUID = group1.getGroupUUID(); addSubgroups(uuid, groupUUID2); com.google.gerrit.reviewdb.client.AccountGroup.UUID subUUID = subgroup2.getGroupUUID(); addSubgroups(uuid, com.google.common.collect.ImmutableSet.of(substring(1, submoduleUUID2)); assertTipCommit(uuid, ((("account \"" + "\n") + (java.lang.String.format("Group UUID1\n") + "GroupUUID2") + (java.lang.String.format("GroupUUID<a> subgroupUUID1\n") + " groupUuid2") + (java.lang.String.format("GroupUUID2\n") + " groupUUID2"))); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit uuid = createExpand(group.getId(), subgroupUUID, userId, getKey(uuid)); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit uuid = createExpand(group.getId(), uuid, userId, uuid, userId); assertThat(audit2).containsExactly(expaudit2).inOrder(); }
@org.junit.Test public void addMultiSubsections() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup group = createGroupAsUsers(1, "test-account-account" + "test-account-account" }; com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroupBackend group1 = createGroupAsUser(2, "test-account-2"); com.google.gerrit.reviewdb.client.AccountGroup subUUID = group1.getGroupUUID(); addSubgroups(uuid, groupUUID2); com.google.gerrit.reviewdb.client.AccountGroup.UUID subUUID = subgroup2.getGroupUUID(); addSubgroups(uuid, com.google.common.collect.ImmutableSet.of(substring(1, submoduleUUID2)); assertTipCommit(uuid, ((("account \"" + "\n") + (java.lang.String.format("Group UUID1\n") + "GroupUUID2") + (java.lang.String.format("GroupUUID<a> subgroupUUID1\n") + " groupUuid2") + (java.lang.String.format("GroupUUID2\n") + " groupUUID2"))); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit uuid = createExpand(group.getId(), subgroupUUID, userId, getKey(uuid)); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit uuid = createExpand(group.getId(), uuid, uuid, userId, userId); assertThat(audit2).containsExactly(expaudit2).inOrder(); }
@org.junit.Test public void addMultiSubsections() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup group = createGroupAsUsers(1, "test-account-account" + "test-account-account" }; com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroupBackend group1 = createGroupAsUser(2, "test-account-2"); com.google.gerrit.reviewdb.client.AccountGroup subUUID = group1.getGroupUUID(); addSubgroups(uuid, groupUUID2); com.google.gerrit.reviewdb.client.AccountGroup.UUID subUUID = subgroup2.getGroupUUID(); addSubgroups(uuid, com.google.common.collect.ImmutableSet.of(substring(1, submoduleUUID2)); assertTipCommit(uuid, ((("account \"" + "\n") + (java.lang.String.format("Group UUID1\n") + "GroupUUID2") + (java.lang.String.format("GroupUUID<a> subgroupUUID1\n") + " groupUuid2") + (java.lang.String.format("GroupUUID2\n") + " groupUUID2"))); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit uuid = createExpand(group.getId(), subgroupUUID, userId, getKey(uuid)); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit uuid = createExpand(group.getId(), uuid, userId, uuid, userId); assertThat(auditBox2).containsExactly(expaudit2).inOrder(); }
@org.junit.Test public void createGroupAsServerIdent() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupMember group = createGroup(1, "test-account", null); assertThat(auditRepo.getMembersAudit(allUsersRepo, group.getGroupUUID())).hasSize(0); }
@org.junit.Test public void createGroupAsServerIdent() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupBackend group = createGroup(1, "test-account", null); assertThat(auditRepo.getMembersAudit(allUsersRepo, group.getGroupUUID())).hasSize(0); }
@org.junit.Test public void createGroupAsServerIdent() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupBackend group = createGroup(1, "test-account", null); assertThat(auditReader.getMembersAudit(allUsersRepo, group.getGroupUUID())).hasSize(0); }
@org.junit.Test public void createGroupAsServerIdent() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupMember group = createGroup(1, "test-account", null); assertThat(auditRepo.getMembersAudit(allUsersRepo))).hasSize(0); }
@org.junit.Test public void createGroupAsServerIdent() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupMember group = createGroup(1, "test-account", null); assertThat(auditRepo.getMembersAudit(allUsersRepo, group.getGroupUUID())).hasSize(1); }
private com.google.gerrit.server.group.InternalGroup createGroup(int next, java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent authorIdent, com.google.gerrit.reviewdb.client.Account.Id authorId) throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreationFoundException groupCreationFound = com.google.gerrit.server.group.InternalGroupCreationTest.builder().setGroupUUID(com.google.gerrit.server.account.GroupUUID.create(groupName, serverIdent)).setId(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupName)).setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(groupName)).setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(next)).build(); com.google.gerrit.server.group.InternalGroupUpdate.setDescription("Groups").build(); com.google.gerrit.reviewdb.client.AccountGroup update = (authorIdentifiedUser)? com.google.gerrit.server.group.Internal.createGroup(allUsers, groupId)).build(); org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersRepo); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.GroupConfig.createForNewGroup(allUsersRepo::getAccountName); org.eclipse.jgit.revwalk.RevCommit commit = org.eclipse.jgit.revwalk.RevCommit commit; org.eclipse.jgit.revwalk.RevCommit commit = groupConfig.commit(authorIdent); assertCreateGroup(authorIdent, commit); return groupConfig.getLoadedByName(); }
private com.google.gerrit.server.group.InternalGroup createGroup(int next, java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent authorIdent, com.google.gerrit.reviewdb.client.Account.Id authorId) throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreationFoundException groupCreationFound = com.google.gerrit.server.group.InternalGroupCreationTest.builder().setGroupUUID(com.google.gerrit.server.account.GroupUUID.create(groupName, serverIdent)).setId(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupName)).setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(groupName)).setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(next)).build(); com.google.gerrit.server.group.InternalGroupUpdate.setDescription("Groups").build(); com.google.gerrit.reviewdb.client.AccountGroup update = (authorIdentifiedUser)? com.google.gerrit.server.group.Internal.createGroup(allUsers, groupId)).build(); org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersRepo); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.GroupConfig.createForNewGroup(allUsersRepo::getAccountName); org.eclipse.jgit.revwalk.RevCommit commit = org.eclipse.jgit.revwalk.RevCommit commit; org.eclipse.jgit.revwalk.RevCommit commit = groupConfig.parseCommit(authorIdent); assertCreateGroup(authorIdent, commit); return groupConfig.getLoadedAccount().orElse(authorIdent); }
private com.google.gerrit.server.group.InternalGroup createGroup(int next, java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent authorIdent, com.google.gerrit.reviewdb.client.Account.Id authorId) throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreationFoundException groupCreationFound = com.google.gerrit.server.group.InternalGroupCreationTest.builder().setGroupUUID(com.google.gerrit.server.account.GroupUUID.create(groupName, serverIdent)).setId(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupName)).setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(groupName)).setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(next)).build(); com.google.gerrit.server.group.InternalGroupUpdate.setDescription("Groups").build(); com.google.gerrit.reviewdb.client.AccountGroup update = (authorIdentifiedUser)? com.google.gerrit.server.group.Internal.createGroup(allUsers, groupId)).build(); org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersRepo); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.GroupConfig.createForNewGroup(allUsersRepo::getAccountName); org.eclipse.jgit.revwalk.RevCommit commit = org.eclipse.jgit.revwalk.RevCommit commit; org.eclipse.jgit.revwalk.RevCommit commit = groupConfig.parseCommit(authorIdent); assertCreateGroup(authorIdent, commit); return groupConfig.getLoadedGroup().orElse(authorIdent); }
private com.google.gerrit.server.group.InternalGroup createGroup(int next, java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent authorIdent, com.google.gerrit.reviewdb.client.Account.Id authorId) throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreationFoundException groupCreationFound = com.google.gerrit.server.group.InternalGroupCreationTest.builder().setGroupUUID(com.google.gerrit.server.account.GroupUUID.create(groupName, serverIdent)).setId(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupName)).setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(groupName)).setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(next)).build(); com.google.gerrit.server.group.InternalGroupUpdate.setDescription("Groups").build(); com.google.gerrit.reviewdb.client.AccountGroup update = (authorIdentifiedUser)? com.google.gerrit.server.group.Internal.createGroup(allUsers, groupId)).build(); org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersRepo); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.GroupConfig.createForNewGroup(allUsersRepo::getAccountName); org.eclipse.jgit.revwalk.RevCommit commit = org.eclipse.jgit.revwalk.RevCommit commit; org.eclipse.jgit.revwalk.RevCommit commit = groupConfig.parseCommit(authorIdent); assertCreateGroup(authorIdent, commit); return groupConfig.getLoadedAccount().orElseInstance(authorIdent); }
private com.google.gerrit.server.group.InternalGroup createGroup(int next, java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent authorIdent, com.google.gerrit.reviewdb.client.Account.Id authorId) throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreationFoundException groupCreationFound = com.google.gerrit.server.group.InternalGroupCreationTest.builder().setGroupUUID(com.google.gerrit.server.account.GroupUUID.create(groupName, serverIdent)).setId(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupName)).setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(groupName)).setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(next)).build(); com.google.gerrit.server.group.InternalGroupUpdate.setDescription("Groups").build(); com.google.gerrit.reviewdb.client.AccountGroup update = (authorIdentifiedUser)? com.google.gerrit.server.group.Internal.createGroup(allUsers, groupId)).build(); org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersRepo); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.GroupConfig.createForNewGroup(allUsersRepo::getAccountName); org.eclipse.jgit.revwalk.RevCommit commit = org.eclipse.jgit.revwalk.RevCommit commit; org.eclipse.jgit.revwalk.RevCommit commit = groupConfig.parseCommit(authorIdent); assertCreateGroup(authorIdent, commit); return groupConfig.getLoadedGroup().orElseInstance(authorIdent); }
private void assertCreateGroup(org.eclipse.jgit.lib.PersonIdent authorIdent, org.eclipse.jgit.revwalk.RevCommit commit) throws java.lang.Exception { if (authorIdent.equals(serverIdent)) { assertServerCommit(com.google.gerrit.server.git.CommitUtil.toCommitInfo(commit), "refs/%s/%s\n"); } else { assertCommit(com.google.gerrit.server.git.CommitUtil.toCommit(commit), getAccountId(userId), getAccountName(userId), getAccountName(userId)); } }
private void assertCreateGroup(org.eclipse.jgit.lib.PersonIdent authorIdent, org.eclipse.jgit.revwalk.RevCommit commit) throws java.lang.Exception { if (authorIdent.equals(serverIdent)) { assertServerCommit(com.google.gerrit.server.git.CommitUtil.toCommitInfo(commit), "refs/%s/%s\n"); } else { assertCommit(com.google.gerrit.server.git.CommitUtil.toCommit(commit), getAccountId(userId), getAccountName(userId), getAccountId(userId)); } }
private void assertCreateGroup(org.eclipse.jgit.lib.PersonIdent authorIdent, org.eclipse.jgit.revwalk.RevCommit commit) throws java.lang.Exception { if (authorIdent.equals(serverIdent)) { assertServerCommit(com.google.gerrit.server.git.CommitUtil.toCommitInfo(commit), "refs/%s/%s\n"); } else { assertCommit(com.google.gerrit.server.git.CommitUtil.toCommit(commit), getAccountId(userId), getAccountName(userId), getAccountName(userId), getAccountId(userId)); } }
private void assertCreateGroup(org.eclipse.jgit.lib.PersonIdent authorIdent, org.eclipse.jgit.revwalk.RevCommit commit) throws java.lang.Exception { if (authorIdent.equals(serverIdent)) { assertServerCommit(com.google.gerrit.server.git.CommitUtil.toCommitInfo(commit), "refs/%s/%s\n"); } else { assertCommit(com.google.gerrit.server.git.CommitUtil.toCommit(commit), getAccountId(userId), getAccountName(userId), getAccountId(userId), getAccountId(userId)); } }
private void assertCreateGroup(org.eclipse.jgit.lib.PersonIdent authorIdent, org.eclipse.jgit.revwalk.RevCommit commit) throws java.lang.Exception { if (authorIdent.equals(serverIdent)) { assertServerCommit(com.google.gerrit.server.git.CommitUtil.toCommitInfo(commit), "refs/%s/%s\n"); } else { assertCommit(com.google.gerrit.server.git.CommitUtil.toCommit(commit), getAccountId(userId), getAccountName(userId), getAccountName(userId), getAccountId(userId), getAccountId(userId)); } }
void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException;
void validateNewProject(com.google.gerrit.server.api.projects.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException;
void validateNewProject(com.google.gerrit.server.project.CreateProject args) throws com.google.gerrit.server.validators.ValidationException;
void validateNewProject(com.google.gerrit.server.api.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException;
private void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException;
@org.junit.Test public void addAndRemoveSubsections() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup group = createGroupAsUsers(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroupBackend group = createGroupAsGroup(2, "test-account-2"); com.google.gerrit.reviewdb.client.AccountGroup.UUID subUuid = subgroup.getGroupUUID(); addSubgroups(uuid, com.google.common.collect.ImmutableSet.of(substring(submoduleUUID)); assertTipCommit(uuid, uuid, userId); }
@org.junit.Test public void addAndRemoveSubsections() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup group = createGroupAsUsers(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroupBackend group = createGroupAsGroup(2, "test-account-2"); com.google.gerrit.reviewdb.client.AccountGroup.UUID subUuid = subgroup.getGroupUUID(); addSubgroups(uuid, com.google.common.collect.ImmutableSet.of(substring(submoduleUUID)); assertTipCommit(uuid, uuid, uuid, userId); }
@org.junit.Test public void addAndRemoveSubsections() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup group = createGroupAsUsers(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroupBackend group = createGroupAsGroup(2, "test-account-2"); com.google.gerrit.reviewdb.client.AccountGroup.UUID subUuid = subgroup.getGroupUUID(); addSubgroups(uuid, com.google.common.collect.ImmutableSet.of(substring(submoduleUUID)); assertTipCommit(uuid, uuid, userId); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit uuid = createExpandGroups(groupUUID, uuid, userId, userId); assertThat(auditLog.getSubgroups()).containsExactly(uuid); removeSubgroups(uuid, uuid, userId); }
@org.junit.Test public void addAndRemoveSubsections() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup group = createGroupAsUsers(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroupBackend group = createGroupAsGroup(2, "test-account-2"); com.google.gerrit.reviewdb.client.AccountGroup.UUID subUuid = subgroup.getGroupUUID(); addSubgroups(uuid, com.google.common.collect.ImmutableSet.of(substring(submoduleUUID)); assertTipCommit(uuid, uuid, userId); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit uuid = createExpandGroups(groupUUID, uuid, userId, userId); assertThat(auditLog.getSubgroups()).containsExactly(uuid); removeSubgroups(uuid, uuid, uuid); removeSubgroups(uuid, uuid, com.google.common.collect.ImmutableSet.of(uuid)); }
@org.junit.Test public void addAndRemoveSubsections() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup group = createGroupAsUsers(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroupBackend group = createGroupAsGroup(2, "test-account-2"); com.google.gerrit.reviewdb.client.AccountGroup.UUID subUuid = subgroup.getGroupUUID(); addSubgroups(uuid, com.google.common.collect.ImmutableSet.of(substring(submoduleUUID)); assertTipCommit(uuid, uuid, userId); com.google.gerrit.reviewdb.client.AccountGroupByIdAudit uuid = createExpandGroups(groupUUID, uuid, userId, userId); assertThat(auditLog.getSubgroups()).containsExactly(uuid); removeSubgroups(uuid, uuid, uuid); removeSubgroups(uuid, com.google.common.collect.ImmutableSet.of(uuidUuid)); }
@org.junit.Test public void addMultiMembers() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup group = createGroupAsUser(1, "test-account" + "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.Id uuid = group.getId(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = createExpand(groupId, userId, userId); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1); com.google.gerrit.reviewdb.client.Account.Id id1 = new com.google.gerrit.reviewdb.client.Account.Id(10000); addMembers(uuid, com.google.common.collect.ImmutableSet.of(id1)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit exId = createExpand(uuid1, id2); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit ex = createExpand(groupId, id1, userId, userId); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit newAccountGroupMemberAudit = createExpandExpand(groupId, id2, userId, getTip(uuid)); assertThat(audit).containsExactly(accountId, com.google.common.collect.Iterables.getMembersAudit(allUsersRepo, uuid)).inOrder(); }
@org.junit.Test public void addMultiMembers() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup group = createGroupAsUser(1, "test-account" + "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.Id uuid = group.getId(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = createExpand(groupId, userId, userId); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1); com.google.gerrit.reviewdb.client.Account.Id id1 = new com.google.gerrit.reviewdb.client.Account.Id(10000); addMembers(uuid, com.google.common.collect.ImmutableSet.of(id1)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit exId = createExpand(uuid1, id2); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit ex = createExpand(groupId, id1, userId, userId); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit newAccountGroupMemberAudit = createExpandExpand(groupId, id2, userId, getTip(uuid)); assertThat(audit).containsExactly(accountId, com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.allUsers(allUsersRepo, uuid)).inOrder(); }
@org.junit.Test public void addMultiMembers() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup group = createGroupAsUser(1, "test-account" + "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.Id uuid = group.getId(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = createExpand(groupId, userId, userId); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1); com.google.gerrit.reviewdb.client.Account.Id id1 = new com.google.gerrit.reviewdb.client.Account.Id(10000); addMembers(uuid, com.google.common.collect.ImmutableSet.of(id1)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit exId = createExpand(uuid1, id2); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit ex = createExpand(groupId, id1, userId, userId); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit newAccountGroupMemberAudit = createExpandExpand(groupId, id2, userId, getTip(uuid)); assertThat(audit).containsExactly(accountId, com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.allUsers(allUsersRepo, uuid).inOrder(); }
@org.junit.Test public void addMultiMembers() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup group = createGroupAsUser(1, "test-account" + "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.Id uuid = group.getId(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = createExpand(groupId, userId, userId); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1); com.google.gerrit.reviewdb.client.Account.Id id1 = new com.google.gerrit.reviewdb.client.Account.Id(10000); addMembers(uuid, com.google.common.collect.ImmutableSet.of(id1)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit exId = createExpand(uuid1, id2); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit ex = createExpand(groupId, id1, userId, userId); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit newAccountGroupMemberAudit = createExpandExpand(groupId, id2, userId, getTip(uuid)); assertThat(audit).containsExactly(accountId, com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.key(allUsersRepo))).containsExactly(expiresAtList); }
@org.junit.Test public void addMultiMembers() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup group = createGroupAsUser(1, "test-account" + "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.Id uuid = group.getId(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = createExpand(groupId, userId, userId); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1); com.google.gerrit.reviewdb.client.Account.Id id1 = new com.google.gerrit.reviewdb.client.Account.Id(10000); addMembers(uuid, com.google.common.collect.ImmutableSet.of(id1)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit exId = createExpand(uuid1, id2); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit ex = createExpand(groupId, id1, userId, userId); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit newAccountGroupMemberAudit = createExpandExpand(groupId, id2, userId, getTip(uuid)); assertThat(audit).containsExactly(accountId, com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.key(allUsersRepo))).containsExactly(expaudit1, uuid2, accountId); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.CommitResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.CommitResource> list() throws com.google.gerrit.extensions.restapi.BadRequestException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.CommitResource> list() throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.CommitInfo> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.CommitResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.server.project.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.server.project.FileResource parse(com.google.gerrit.server.project.CommitResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { if (com.google.gerrit.reviewdb.client.Patch.isMagic(id.get())) { return new com.google.gerrit.server.project.FileResource(parent.getProjectState(), parent.getCommit(), id.get()); } return com.google.gerrit.server.project.FileResource.create(repoManager, parent.getProjectState(), parent.getCommit(), id.get()); }
@java.lang.Override public com.google.gerrit.server.project.FileResource parse(com.google.gerrit.server.project.CommitResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { if (com.google.gerrit.server.project.NoSuchFile.isMagic(id.get())) { return new com.google.gerrit.server.project.FileResource(parent.getProjectState(), parent.getCommit(), id.get()); } return com.google.gerrit.server.project.FileResource.create(repoManager, parent.getProjectState(), parent.getCommit(), id.get()); }
@java.lang.Override public com.google.gerrit.server.project.FileResource parse(com.google.gerrit.server.project.CommitResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.server.project.NoSuchFileException, java.io.IOException { if (com.google.gerrit.reviewdb.client.Patch.isMagic(id.get())) { return new com.google.gerrit.server.project.FileResource(parent.getProjectState(), parent.getCommit(), id.get()); } return com.google.gerrit.server.project.FileResource.create(repoManager, parent.getProjectState(), parent.getCommit(), id.get()); }
@java.lang.Override public com.google.gerrit.server.project.FileResource parse(com.google.gerrit.server.project.CommitResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { if (com.google.common.base.Strings.isNullOrMagic(id.get())) { return new com.google.gerrit.server.project.FileResource(parent.getProjectState(), parent.getCommit(), id.get()); } return com.google.gerrit.server.project.FileResource.create(repoManager, parent.getProjectState(), parent.getCommit(), id.get()); }
@java.lang.Override public com.google.gerrit.server.project.FileResource parse(com.google.gerrit.server.project.CommitResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { if (com.google.gerrit.reviewdb.client.Patch.isMagic(id.get())) { return new com.google.gerrit.server.project.FileResource(parent.getProjectState(), parent.getCommit(), id.get()); } return com.google.gerrit.server.project.FileResource.create(parent.getProjectState(), parent.getCommit(), parent.getCommit(), id.get()); }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.group.AddMembers.Input in = new com.google.gerrit.server.group.AddMembers.Input(); in.name = id; try { java.util.List<com.google.gerrit.extensions.common.AccountInfo> list = put.apply(resource, in); if ((list.size()) == 1) { return list.get(0); } throw new java.lang.IllegalStateException(); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.CreateGroup.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.group.AddMembers.Input in = new com.google.gerrit.server.group.AddMembers.Input(); in.name = id; try { java.util.List<com.google.gerrit.extensions.common.AccountInfo> list = put.apply(resource, in); if ((list.size()) == 1) { return list.get(0); } throw new java.lang.IllegalStateException(); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.group.AddMembers.Input in = new com.google.gerrit.server.group.AddMembers.Input(); in.name = id; try { java.util.List<com.google.gerrit.extensions.common.AccountInfo> list = put.apply(resource, in); if ((list.size()) == 1) { return list.get(0); } throw new java.lang.IllegalStateException(); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.CreateGroup.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.group.AddMembers.Input in = new com.google.gerrit.server.group.AddMembers.Input(); in.name = id; try { java.util.List<com.google.gerrit.extensions.common.AccountInfo> list = put.apply(resource, in); if ((list.size()) == 1) { return list.get(0); } throw new java.lang.IllegalStateException(); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.group.AddMembers.Input in = new com.google.gerrit.server.group.AddMembers.Input(); in.name = id; try { java.util.List<com.google.gerrit.extensions.common.AccountInfo> list = put.apply(resource, in); if ((list.size()) == 1) { return list.get(0); } throw new java.lang.IllegalStateException(); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.group.MemberResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gwtorm.server.OrmException { return get.apply(resource); }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.group.MemberResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.group.AddMembers.Input input = get.apply(resource); return get.apply(resource); }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.group.MemberResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gwtorm.server.OrmException { try { return get.apply(resource); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.AuthException(e.getMessage()); } }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.group.MemberResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gwtorm.server.OrmException { try { return get.apply(resource); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gwtorm.server.OrmException(e.getMessage()); } }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.group.MemberResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gwtorm.server.OrmException { try { return get.apply(resource); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(e.getMessage()); } }
@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchInfo apply(com.google.gerrit.server.project.BranchResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return list.get().toBranchInfo(rsrc); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchInfo apply(com.google.gerrit.server.project.BranchResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return list.get().toBranchInfo(rsrc); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchInfo apply(com.google.gerrit.server.project.BranchResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { return list.get().toBranchInfo(rsrc); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchInfo apply(com.google.gerrit.server.project.BranchResource rsrc) { return list.get().toBranchInfo(rsrc); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchInfo apply(com.google.gerrit.server.project.BranchResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.lang.Exception { return list.get().toBranchInfo(rsrc); }
private com.google.gerrit.server.group.InternalGroupInNoteDb createGroupInNoteDb(org.eclipse.jgit.lib.Repository allUsersRepository, com.google.gerrit.server.group.InternalChangeCreation<com.google.gerrit.reviewdb.client.AccountGroup> groupCreation, com.google.gerrit.server.group.InternalGroupUpdate> groupUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get())); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = com.google.gerrit.reviewdb.client.AccountGroup.Id::toString(); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = com.google.gerrit.server.group.GroupNameKeys.loadForNewGroup(allUsersRepo::getGroupUUID(), groupName); commit(allUsers, groupName); return groupConfig.getLoadedAccountGroup().orElseInstance(new java.lang.Runnable() { @java.lang.Override public java.lang.String apply(com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.group.GroupDescriptions.forAccountGroup(uuid)); } }
private com.google.gerrit.server.group.InternalGroupInNoteDb createGroupInNoteDb(org.eclipse.jgit.lib.Repository allUsersRepository, com.google.gerrit.server.group.InternalChangeCreation<com.google.gerrit.reviewdb.client.AccountGroup> groupCreation, com.google.gerrit.server.group.InternalGroupUpdate> groupUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get())); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = com.google.gerrit.reviewdb.client.AccountGroup.Id::toString(); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = com.google.gerrit.server.group.GroupNameKeys.loadForNewGroup(allUsersRepo::getGroupUUID(), groupName); commit(allUsers, groupName); return groupConfig.getLoadedAccountGroup().orElseInstance(new java.lang.Runnable() { @java.lang.Override public java.lang.String apply(com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.group.GroupDescriptions.toAccountGroup(uuid)); } }
private com.google.gerrit.server.group.InternalGroupInNoteDb createGroupInNoteDb(org.eclipse.jgit.lib.Repository allUsersRepository, com.google.gerrit.server.group.InternalChangeCreation<com.google.gerrit.reviewdb.client.AccountGroup> groupCreation, com.google.gerrit.server.group.InternalGroupUpdate> groupUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get())); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = com.google.gerrit.reviewdb.client.AccountGroup.Id::toString(); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = com.google.gerrit.server.group.GroupNameKeys.loadForNewGroup(allUsersRepo::getGroupUUID(), groupName); commit(allUsers, groupName); return groupConfig.getLoadedAccountGroup().orElseInstance(new java.lang.Runnable() { @java.lang.Override public java.lang.String apply(com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.group.GroupDescriptions.forAccountGroup(uuid)); } }); }
private com.google.gerrit.server.group.InternalGroupInNoteDb createGroupInNoteDb(org.eclipse.jgit.lib.Repository allUsersRepository, com.google.gerrit.server.group.InternalChangeCreation<com.google.gerrit.reviewdb.client.AccountGroup> groupCreation, com.google.gerrit.server.group.InternalGroupUpdate> groupUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get())); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = com.google.gerrit.reviewdb.client.AccountGroup.Id::toString(); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = com.google.gerrit.server.group.GroupNameKeys.loadForNewGroup(allUsersRepo::getGroupUUID(), groupName); commit(allUsers, groupName); return groupConfig.getLoadedAccountGroup().orElseInstance(new java.lang.Runnable() { @java.lang.Override public java.lang.String apply(com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.group.GroupDescriptions.toAccountGroup(uuid)); } }); }
private com.google.gerrit.server.group.InternalGroupInNoteDb createGroupInNoteDb(org.eclipse.jgit.lib.Repository allUsersRepository, com.google.gerrit.server.group.InternalChangeCreation<com.google.gerrit.reviewdb.client.AccountGroup> groupCreation, com.google.gerrit.server.group.InternalGroupUpdate> groupUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get())); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = com.google.gerrit.reviewdb.client.AccountGroup.Id::toString(); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = com.google.gerrit.server.group.GroupNameKeys.loadForNewGroup(allUsersRepo::getGroupUUID(), groupName); commit(allUsers, groupName); return groupConfig.getLoadedAccountGroup().orElseInstance(new java.lang.Runnable() { @java.lang.Override public java.lang.String apply(com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.group.GroupDescriptions.forAccountGroup(userRepo::getGroupUUID())); }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { java.lang.String refName = cmd.getRefName(); if ((cmd.getType()) == (ReceiveCommand.Type.UPDATE)) { logDebug("Failed to fast-forward of {}", cmd.getRefName()); tagCache.updateFastForward(project, refName, cmd.getOldId(), cmd.getNewId(), cmd.getNewId()); } if (com.google.gerrit.server.git.ReceiveCommits.isConfig(cmd)) { try { projectCache.evict(project); } catch (java.io.IOException e) { com.google.gerrit.server.git.ReceiveCommits.log.warn(("Cannot evict project cache " + (project.getName())), e); } com.google.gerrit.server.project.ProjectState ps = projectCache.get(project); try { logDebug("Cannot update project description of " + (project.getName())), e); } catch (java.io.IOException e) { com.google.gerrit.server.git.ReceiveCommits.log.warn(("Cannot update description of " + (project.getName())), e); } if (allProjectsName.equals(project.getNameKey())) { try { com.google.gerrit.server.git.ReceiveCommits.log.warn(("Cannot update description of " + (project.getName())), e); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.git.ReceiveCommits.log.error("Cannot create account capabilities", e); } } }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { java.lang.String refName = cmd.getRefName(); if ((cmd.getType()) == (ReceiveCommand.Type.UPDATE)) { logDebug("Failed to fast-forward of {}", cmd.getRefName()); tagCache.updateFastForward(project, refName, cmd.getOldId(), cmd.getNewId(), cmd.getNewId()); } if (com.google.gerrit.server.git.ReceiveCommits.isConfig(cmd)) { try { projectCache.evict(project); } catch (java.io.IOException e) { com.google.gerrit.server.git.ReceiveCommits.log.warn(("Cannot evict project cache " + (project.getName())), e); } com.google.gerrit.server.project.ProjectState ps = projectCache.get(project); try { logDebug("Cannot update project description of " + (project.getName())), e); } catch (java.io.IOException e) { com.google.gerrit.server.git.ReceiveCommits.log.warn(("Cannot update description of " + (project.getName())), e); } if (allProjectsName.equals(project.getNameKey())) { try { com.google.gerrit.server.git.ReceiveCommits.log.warn(("Cannot update description of " + (project.getName())), e); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.git.ReceiveCommits.log.error("Cannot create account capabilities", e); } } } }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { java.lang.String refName = cmd.getRefName(); if ((cmd.getType()) == (ReceiveCommand.Type.UPDATE)) { logDebug("Failed to fast-forward of {}", cmd.getRefName()); tagCache.updateFastForward(project, refName, cmd.getOldId(), cmd.getNewId(), cmd.getNewId()); } if (com.google.gerrit.server.git.ReceiveCommits.isConfig(cmd)) { try { projectCache.evict(project); } catch (java.io.IOException e) { com.google.gerrit.server.git.ReceiveCommits.log.warn(("Cannot evict project cache " + (project.getName())), e); } com.google.gerrit.server.project.ProjectState ps = projectCache.get(project); try { logDebug("Cannot update project description of " + (project.getName())), e); } catch (java.io.IOException e) { com.google.gerrit.server.git.ReceiveCommits.log.warn(("Cannot update description of " + (project.getName())), e); } if (allProjectsName.equals(project.getNameKey())) { try { com.google.gerrit.server.git.ReceiveCommits.log.warn(("Cannot update description of " + (project.getName())), e); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.git.ReceiveCommits.log.error("Cannot create project configuration", e); } } }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { java.lang.String refName = cmd.getRefName(); if ((cmd.getType()) == (ReceiveCommand.Type.UPDATE)) { logDebug("Failed to fast-forward of {}", cmd.getRefName()); tagCache.updateFastForward(project, refName, cmd.getOldId(), cmd.getNewId(), cmd.getNewId()); } if (com.google.gerrit.server.git.ReceiveCommits.isConfig(cmd)) { try { projectCache.evict(project); } catch (java.io.IOException e) { com.google.gerrit.server.git.ReceiveCommits.log.warn(("Cannot evict project cache " + (project.getName())), e); } com.google.gerrit.server.project.ProjectState ps = projectCache.get(project); try { logDebug("Cannot update project description of " + (project.getName())), e); } catch (java.io.IOException e) { com.google.gerrit.server.git.ReceiveCommits.log.warn(("Cannot update description of " + (project.getName())), e); } if (allProjectsName.equals(project.getNameKey())) { try { com.google.gerrit.server.git.ReceiveCommits.log.warn(("Cannot update description of " + (project.getNameKey()))), e); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.git.ReceiveCommits.log.error("Cannot create account capabilities", e); } } }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { java.lang.String refName = cmd.getRefName(); if ((cmd.getType()) == (ReceiveCommand.Type.UPDATE)) { logDebug("Failed to fast-forward of {}", cmd.getRefName()); tagCache.updateFastForward(project, refName, cmd.getOldId(), cmd.getNewId(), cmd.getNewId()); } if (com.google.gerrit.server.git.ReceiveCommits.isConfig(cmd)) { try { projectCache.evict(project); } catch (java.io.IOException e) { com.google.gerrit.server.git.ReceiveCommits.log.warn(("Cannot evict project cache " + (project.getName())), e); } com.google.gerrit.server.project.ProjectState ps = projectCache.get(project); try { logDebug("Cannot update project description of " + (project.getName())), e); } catch (java.io.IOException e) { com.google.gerrit.server.git.ReceiveCommits.log.warn(("Cannot update description of " + (project.getName())), e); } if (allProjectsName.equals(project.getNameKey())) { try { com.google.gerrit.server.git.ReceiveCommits.log.warn(("Cannot update description of " + (project.getNameKey()))), e); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.git.ReceiveCommits.log.error("Cannot create project configuration", e); } } }
@java.lang.Override public com.google.gerrit.server.project.RepositoryStatistics apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.api.GarbageCollectCommand gc = org.eclipse.jgit.api.Git.wrap(repo).gc(); return new com.google.gerrit.server.project.RepositoryStatistics(gc.wrap(repo).gc(); } catch (org.eclipse.jgit.api.errors.GitAPIException | org.eclipse.jgit.api.errors.JGitAPIException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(e.getMessage()); } }
@java.lang.Override public com.google.gerrit.server.project.RepositoryStatistics apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.api.GarbageCollectCommand gc = org.eclipse.jgit.api.Git.wrap(repo).gc(); return new com.google.gerrit.server.project.RepositoryStatistics(gc.wrap(repo).gc(); } catch (org.eclipse.jgit.api.errors.GitAPIException | org.eclipse.jgit.api.errors.GitAPIException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(e.getMessage()); } }
@java.lang.Override public com.google.gerrit.server.project.RepositoryStatistics apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.api.GarbageCollectCommand gc = org.eclipse.jgit.api.Git.wrap(repo).gc(); return new com.google.gerrit.server.project.RepositoryStatistics(gc.wrap(repo).gc(); } catch (org.eclipse.jgit.api.errors.GitAPIException | org.eclipse.jgit.api.errors.JGitInternalException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(e.getMessage()); } }
@java.lang.Override public com.google.gerrit.server.project.RepositoryStatistics apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.api.GarbageCollectCommand gc = org.eclipse.jgit.api.Git.wrap(repo).gc(); return new com.google.gerrit.server.project.RepositoryStatistics(gc.wrap(repo).gc(); } catch (org.eclipse.jgit.api.errors.GitAPIException | org.eclipse.jgit.api.errors.JGitAPIException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(e.getName()); } }
@java.lang.Override public com.google.gerrit.server.project.RepositoryStatistics apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.api.GarbageCollectCommand gc = org.eclipse.jgit.api.Git.wrap(repo).gc(); return new com.google.gerrit.server.project.RepositoryStatistics(gc.wrap(repo).gc(); } catch (org.eclipse.jgit.api.errors.GitAPIException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(e.getMessage()); } }
@org.junit.Test public void addAndRemoveMember() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup group = createGroupAsUUID("test-account" + "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getId(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit uuid = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(uuid, userId, userId, userId); assertThat(auditRepo).containsExactly(expAudit1); com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(10000); addMembers(uuid, com.google.common.collect.ImmutableSet.of(id)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit ex = createExpandAddReviewer(group.getId(), id, userId, userId); assertThat(audit.getMembersAudit().isEqualTo(uuid, userId))).containsExactly(expAudit.getMembersAudit(userId)); addMembers(uuid, com.google.common.collect.ImmutableSet.of(userId, uuid, com.google.common.collect.ImmutableSet.of(id)); assertThat(uuid).containsExactly(userId, com.google.common.collect.ImmutableSet.of(userId, uuid).inOrder(); }
@org.junit.Test public void addAndRemoveMember() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup group = createGroupAsUUID("test-account" + "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getId(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit uuid = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(uuid, userId, userId, userId); assertThat(auditRepo).containsExactly(expAudit1); com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(10000); addMembers(uuid, com.google.common.collect.ImmutableSet.of(id)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit ex = createExpandAddReviewer(group.getId(), id, userId, userId); assertThat(audit.getMembersAudit().isEqualTo(uuid, userId))).containsExactly(expAudit.getMembersAudit(userId)); addMembers(uuid, com.google.common.collect.ImmutableSet.of(userId, uuid, com.google.common.collect.ImmutableSet.of(id)); assertThat(uuid).containsExactly(userId, com.google.common.collect.ImmutableSet.of(userId, uuid2).inOrder(); }
@org.junit.Test public void addAndRemoveMember() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup group = createGroupAsUUID("test-account" + "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getId(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit uuid = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(uuid, userId, userId, userId); assertThat(auditRepo).containsExactly(expAudit1); com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(10000); addMembers(uuid, com.google.common.collect.ImmutableSet.of(id)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit ex = createExpandAddReviewer(group.getId(), id, userId, userId); assertThat(audit.getMembersAudit().isEqualTo(uuid, userId))).containsExactly(expAudit.getMembersAudit(userId)); addMembers(uuid, com.google.common.collect.ImmutableSet.of(userId, uuid, com.google.common.collect.ImmutableSet.of(id)); assertThat(uuid).containsExactly(userId, com.google.common.collect.ImmutableSet.of(userId, uuid.getEmailAddress(uuid)); }
@org.junit.Test public void addAndRemoveMember() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup group = createGroupAsUUID("test-account" + "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getId(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit uuid = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(uuid, userId, userId, userId); assertThat(auditRepo).containsExactly(expAudit1); com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(10000); addMembers(uuid, com.google.common.collect.ImmutableSet.of(id)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit ex = createExpandAddReviewer(group.getId(), id, userId, userId); assertThat(audit.getMembersAudit().isEqualTo(uuid, userId))).containsExactly(expAudit.getMembersAudit(userId)); addMembers(uuid, com.google.common.collect.ImmutableSet.of(userId, uuid, com.google.common.collect.ImmutableSet.of(id)); assertThat(uuid).containsExactly(userId, com.google.common.collect.ImmutableSet.of(userId, com.google.common.collect.ImmutableSet.of(userId, uuid)); assertThat(audit.removed(uuid).isEqualTo(uuid); }
@org.junit.Test public void addAndRemoveMember() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup group = createGroupAsUUID("test-account" + "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getId(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit uuid = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(uuid, userId, userId, userId); assertThat(auditRepo).containsExactly(expAudit1); com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(10000); addMembers(uuid, com.google.common.collect.ImmutableSet.of(id)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit ex = createExpandAddReviewer(group.getId(), id, userId, userId); assertThat(audit.getMembersAudit().isEqualTo(uuid, userId))).containsExactly(expAudit.getMembersAudit(userId)); addMembers(uuid, com.google.common.collect.ImmutableSet.of(userId, uuid, com.google.common.collect.ImmutableSet.of(id)); assertThat(uuid).containsExactly(userId, com.google.common.collect.ImmutableSet.of(userId, com.google.common.collect.ImmutableSet.of(userId, uuid)); assertThat(audit.removed(uuid).isEqualTo(uuid, user2).inOrder(); }
static com.google.gerrit.common.data.GroupReference getFromNoteData(byte[] noteData) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.fromText(new java.lang.String(noteData, java.nio.charset.StandardCharsets.UTF_NAME)); return uuid; }
static com.google.gerrit.common.data.GroupReference getFromNoteData(byte[] noteData) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.fromText(new java.lang.String(noteData, java.nio.charset.StandardCharsets.UTF_NAME)); java.lang.String uuid = config.getString(com.google.gerrit.server.group.GroupNameKeys.SECTION_NAME, null, com.google.gerrit.server.group.GroupNameKeys.parse(com.google.gerrit.server.group.GroupName.SECTION_NAME)); java.lang.String name = com.google.common.base.Strings.nullToEmpty(config.getString(com.google.gerrit.server.group.GroupName.SECTION_PARENT_PARAM)); if (uuid == null) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("%s' for account '%s'", name)); } return new com.google.gerrit.common.data.GroupReference(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(uuid), name); }
static com.google.gerrit.common.data.GroupReference getFromNoteData(byte[] noteData) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.fromText(new java.lang.String(noteData, java.nio.charset.StandardCharsets.UTF_NAME)); java.lang.String uuid = config.getString(com.google.gerrit.server.group.GroupNameKeys.SECTION_NAME, null, com.google.gerrit.server.group.GroupNameKeys.parse(com.google.gerrit.server.group.GroupName.SECTION_NAME)); java.lang.String name = com.google.common.base.Strings.nullToEmpty(config.getString(com.google.gerrit.server.group.GroupName.SECTION_PARENT_PARAM)); if (uuid == null) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("%s' for account %s", name)); } return new com.google.gerrit.common.data.GroupReference(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(uuid), name); }
static com.google.gerrit.common.data.GroupReference getFromNoteData(byte[] noteData) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.fromText(new java.lang.String(noteData, java.nio.charset.StandardCharsets.UTF_NAME)); java.lang.String uuid = config.getString(com.google.gerrit.server.group.GroupName.SECTION_NAME, null, com.google.gerrit.server.group.GroupName.SECTION_PARAM); java.lang.String name = com.google.common.base.Strings.nullToEmpty(config.getString(com.google.gerrit.server.group.GroupName.SECTION_NAME, null, com.google.gerrit.server.group.GroupName.SECTION_PARAM)); if (uuid == null) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("%s' for account '%s'", name)); } return new com.google.gerrit.common.data.GroupReference(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(uuid), name); }
static com.google.gerrit.common.data.GroupReference getFromNoteData(byte[] noteData) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.fromText(new java.lang.String(noteData, java.nio.charset.StandardCharsets.UTF_NAME)); java.lang.String uuid = config.getString(com.google.gerrit.server.group.GroupNameKeys.SECTION_NAME, null, com.google.gerrit.server.group.GroupNameKeys.parse(com.google.gerrit.server.group.GroupName.SECTION_NAME)); java.lang.String name = com.google.common.base.Strings.nullToEmpty(config.getString(com.google.gerrit.server.group.GroupName.SECTION_PARENT_PARAM)); if (uuid == null) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("%s' for account '%s'", name)); } return new com.google.gerrit.common.data.GroupReference(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(uuid), name); }).toSet(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EditInfo> apply(com.google.gerrit.server.change.FixResource fixResource, java.lang.Void fixResource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.RevisionResource revisionResource = fixResource.getRevisionResource(); com.google.gerrit.reviewdb.client.Project.NameKey project = revisionResource.getProject(); com.google.gerrit.server.project.ProjectState projectState = revisionResource.checkedGet(project); com.google.gerrit.reviewdb.client.PatchSet patchSet = revisionResource.getPatchSet(); org.eclipse.jgit.lib.ObjectId patchSetCommitId = org.eclipse.jgit.lib.ObjectId.fromString(patchSet.getRevision().get()); try (org.eclipse.jgit.lib.Repository repository = gitRepositoryManager.openRepository(project)) { java.util.List<com.google.gerrit.server.edit.tree.TreeModification> treeModification = fixReplacementInfos.toTreeModification(repository, projectState, patchSetCommitId, fixResource.getFixReplacements()); com.google.gerrit.server.edit.ChangeEdit changeEdit = changeEditJson.combineWithModifiedPatchSetTree(changeEdit, patchSet, treeModification); return com.google.gerrit.extensions.restapi.Response.ok(changeEditJson.toEditInfo(changeEdit, false)); } catch (com.google.gerrit.server.project.InvalidChangeOperationException e) { throw new com.google.gerrit.extensions.restapi.BadRequestException(e.getMessage()); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EditInfo> apply(com.google.gerrit.server.change.FixResource fixResource, java.lang.Void fixResource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.RevisionResource revisionResource = fixResource.getRevisionResource(); com.google.gerrit.reviewdb.client.Project.NameKey project = revisionResource.getProject(); com.google.gerrit.server.project.ProjectState projectState = revisionResource.checkedGet(project); com.google.gerrit.reviewdb.client.PatchSet patchSet = revisionResource.getPatchSet(); org.eclipse.jgit.lib.ObjectId patchSetCommitId = org.eclipse.jgit.lib.ObjectId.fromString(patchSet.getRevision().get()); try (org.eclipse.jgit.lib.Repository repository = gitRepositoryManager.openRepository(project)) { java.util.List<com.google.gerrit.server.edit.tree.TreeModification> treeModification = fixReplacementInfos.toTreeModification(repository, projectState, patchSetCommitId, fixResource.getFixReplacements()); com.google.gerrit.server.edit.ChangeEdit changeEdit = changeEditJson.combineWithModifiedPatchSetTree(repository, changeResource.getNotes(), patchSet, treeModification); return com.google.gerrit.extensions.restapi.Response.ok(changeEditJson.toEditInfo(changeEdit, false)); } catch (com.google.gerrit.server.project.InvalidChangeOperationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(changeEdit, e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EditInfo> apply(com.google.gerrit.server.change.FixResource fixResource, java.lang.Void fixResource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.RevisionResource revisionResource = fixResource.getRevisionResource(); com.google.gerrit.reviewdb.client.Project.NameKey project = revisionResource.getProject(); com.google.gerrit.server.project.ProjectState projectState = revisionResource.checkedGet(project); com.google.gerrit.reviewdb.client.PatchSet patchSet = revisionResource.getPatchSet(); org.eclipse.jgit.lib.ObjectId patchSetCommitId = org.eclipse.jgit.lib.ObjectId.fromString(patchSet.getRevision().get()); try (org.eclipse.jgit.lib.Repository repository = gitRepositoryManager.openRepository(project)) { java.util.List<com.google.gerrit.server.edit.tree.TreeModification> treeModification = fixReplacementInfos.toTreeModification(repository, projectState, patchSetCommitId, fixResource.getFixReplacements()); com.google.gerrit.server.edit.ChangeEdit changeEdit = changeEditJson.combineWithModifiedPatchSetTree(repository, changeResource.getNotes(), patchSet, treeModification); return com.google.gerrit.extensions.restapi.Response.ok(changeEditJson.toEditInfo(changeEdit, false)); } catch (com.google.gerrit.server.project.InvalidChangeOperationException e) { throw new com.google.gerrit.extensions.restapi.BadChangeOperationException(changeEdit, e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EditInfo> apply(com.google.gerrit.server.change.FixResource fixResource, java.lang.Void fixResource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.RevisionResource revisionResource = fixResource.getRevisionResource(); com.google.gerrit.reviewdb.client.Project.NameKey project = revisionResource.getProject(); com.google.gerrit.server.project.ProjectState projectState = revisionResource.checkedGet(project); com.google.gerrit.reviewdb.client.PatchSet patchSet = revisionResource.getPatchSet(); org.eclipse.jgit.lib.ObjectId patchSetCommitId = org.eclipse.jgit.lib.ObjectId.fromString(patchSet.getRevision().get()); try (org.eclipse.jgit.lib.Repository repository = gitRepositoryManager.openRepository(project)) { java.util.List<com.google.gerrit.server.edit.tree.TreeModification> treeModification = fixReplacementInfos.toTreeModification(repository, projectState, patchSetCommitId, fixResource.getFixReplacements()); com.google.gerrit.server.edit.ChangeEdit changeEdit = changeEditJson.combineWithModifiedPatchSetTree(repository, changeResource.getNotes(), patchSet, treeModification); return com.google.gerrit.extensions.restapi.Response.ok(changeEditJson.toEditInfo(changeEdit, false)); } catch (com.google.gerrit.server.project.InvalidChangeOperationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(changeEditJson.toEdit
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EditInfo> apply(com.google.gerrit.server.change.FixResource fixResource, java.lang.Void fixResource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.RevisionResource revisionResource = fixResource.getRevisionResource(); com.google.gerrit.reviewdb.client.Project.NameKey project = revisionResource.getProject(); com.google.gerrit.server.project.ProjectState projectState = revisionResource.checkedGet(project); com.google.gerrit.reviewdb.client.PatchSet patchSet = revisionResource.getPatchSet(); org.eclipse.jgit.lib.ObjectId patchSetCommitId = org.eclipse.jgit.lib.ObjectId.fromString(patchSet.getRevision().get()); try (org.eclipse.jgit.lib.Repository repository = gitRepositoryManager.openRepository(project)) { java.util.List<com.google.gerrit.server.edit.tree.TreeModification> treeModification = fixReplacementInfos.toTreeModification(repository, projectState, patchSetCommitId, fixResource.getFixReplacements()); com.google.gerrit.server.edit.ChangeEdit changeEdit = changeEditJson.combineWithModifiedPatchSetTree(repository, changeResource.getNotes(), patchSet, treeModification); return com.google.gerrit.extensions.restapi.Response.ok(changeEditJson.toEditInfo(changeEdit, false)); } catch (com.google.gerrit.server.project.InvalidChangeOperationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(changeEdit, e); }
com.google.gerrit.server.api.projects.DashboardApiImpl create(com.google.gerrit.server.project.ProjectResource project, java.lang.String id);
com.google.gerrit.server.api.projects.ProjectApiImpl create(com.google.gerrit.server.project.ProjectResource project, java.lang.String id);
com.google.gerrit.server.api.projects.DashboardsImpl create(com.google.gerrit.server.project.ProjectResource project, java.lang.String id);
com.google.gerrit.server.api.projects.DashboardApiImpl create(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String id);
com.google.gerrit.server.api.projects.DashboardApiImpl create(com.google.gerrit.server.project.ProjectResource project, java.lang.String id) { com.google.gerrit.server.api.projects.ProjectApiImpl.String id;
public com.google.gerrit.server.change.PostReviewers.Addition prepareApplication(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.api.changes.AddReviewerInput input, boolean allowGroup) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String reviewer = input.state; com.google.gerrit.extensions.client.ReviewerState state = input.state; com.google.gerrit.extensions.client.NotifyHandling notify = input.notify; com.google.gerrit.extensions.common.AccountInfo notify = input.notify; try { accountsToNotify = notifyUtil.resolveAccounts(input.notifyDetails); com.google.common.collect.ListMultimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify = addByAccounts(input.notifyDetails); if (byAccountsToNotify) { return allowByEmail = projectCache.checkedGet(rsrc.getProject()).isEnableReviewerByEmail(); com.google.gerrit.server.change.PostReviewers.Addition byAccountId = addByAccountId(rsrc, rsrc, state, allowByEmail); if (byAccountId!= null) { return byAccountId; } } com.google.gerrit.server.change.PostReviewers.Addition wholeGroup = addByEmail(reviewer, rsrc, state, allowByEmail); if (byAccountId!= null) { return byAccountId; } return addByEmail(reviewer, rsrc, notify, accountsToNotify); }
public com.google.gerrit.server.change.PostReviewers.Addition prepareApplication(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.api.changes.AddReviewerInput input, boolean allowGroup) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String reviewer = input.state; com.google.gerrit.extensions.client.ReviewerState state = input.state; com.google.gerrit.extensions.client.NotifyHandling notify = input.notify; com.google.gerrit.extensions.common.AccountInfo notify = input.notify; try { accountsToNotify = notifyUtil.resolveAccounts(input.notifyDetails); com.google.common.collect.ListMultimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify = addByAccounts(input.notifyDetails); if (byAccountsToNotify) { return allowByEmail = projectCache.checkedGet(rsrc.getProject()).isEnableReviewerByEmail(); com.google.gerrit.server.change.PostReviewers.Addition byAccountId = addByAccountId(rsrc, rsrc, state, allowByEmail); if (byAccountId!= null) { return byAccountId; } } com.google.gerrit.server.change.PostReviewers.Addition wholeGroup = addByEmail(reviewer, rsrc, state, allowByEmail, allowByEmail); if (wholeGroup!= null) { return byAccountId; } return addByEmail(reviewer, rsrc, state, accountsToNotify); }
public com.google.gerrit.server.change.PostReviewers.Addition prepareApplication(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.api.changes.AddReviewerInput input, boolean allowGroup) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String reviewer = input.state; com.google.gerrit.extensions.client.ReviewerState state = input.state; com.google.gerrit.extensions.client.NotifyHandling notify = input.notify; com.google.gerrit.extensions.common.AccountInfo notify = input.notify; try { accountsToNotify = notifyUtil.resolveAccounts(input.notifyDetails); com.google.common.collect.ListMultimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify = addByAccounts(input.notifyDetails); if (byAccountsToNotify) { return allowByEmail = projectCache.checkedGet(rsrc.getProject()).isEnableReviewerByEmail(); com.google.gerrit.server.change.PostReviewers.Addition byAccountId = addByEmail(rsrc, rsrc, state, allowByEmail); if (byAccountId!= null) { return byAccountId; } } com.google.gerrit.server.change.PostReviewers.Addition wholeGroup = addByEmail(reviewer, rsrc, state, allowByEmail); if (byAccountId!= null) { return byAccountId; } com.google.gerrit.server.change.PostReviewers.Addition wholeGroup = addByEmail(reviewer, rsrc, state, notify, allowByEmail); return addByEmail; } return addByEmail(reviewer, rsrc, state, notify, accountsToNotify); }
public com.google.gerrit.server.change.PostReviewers.Addition prepareApplication(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.api.changes.AddReviewerInput input, boolean allowGroup) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String reviewer = input.state; com.google.gerrit.extensions.client.ReviewerState state = input.state; com.google.gerrit.extensions.client.NotifyHandling notify = input.notify; com.google.gerrit.extensions.common.AccountInfo notify = input.notify; try { accountsToNotify = notifyUtil.resolveAccounts(input.notifyDetails); com.google.common.collect.ListMultimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify = addByAccounts(input.notifyDetails); if (byAccountsToNotify) { return allowByEmail = projectCache.checkedGet(rsrc.getProject()).isEnableReviewerByEmail(); com.google.gerrit.server.change.PostReviewers.Addition byAccountId = addByAccountId(rsrc, rsrc, state, allowByEmail); if (byAccountId!= null) { return byAccountId; } } com.google.gerrit.server.change.PostReviewers.Addition wholeGroup = addByEmail(reviewer, rsrc, state, allowByEmail); if (byAccountId!= null) { return byAccountId; } com.google.gerrit.server.change.PostReviewers.Addition wholeGroup = addByEmail(reviewer, rsrc, state, notify, accountsToNotify); return addByEmail(reviewer, rsrc, notify, accountsToNotify); }
public com.google.gerrit.server.change.PostReviewers.Addition prepareApplication(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.api.changes.AddReviewerInput input, boolean allowGroup) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String reviewer = input.state; com.google.gerrit.extensions.client.ReviewerState state = input.state; com.google.gerrit.extensions.client.NotifyHandling notify = input.notify; com.google.gerrit.extensions.common.AccountInfo notify = input.notify; try { accountsToNotify = notifyUtil.resolveAccounts(input.notifyDetails); com.google.common.collect.ListMultimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify = addByAccounts(input.notifyDetails); if (byAccountsToNotify) { return allowByEmail = projectCache.checkedGet(rsrc.getProject()).isEnableReviewerByEmail(); com.google.gerrit.server.change.PostReviewers.Addition byAccountId = addByAccountId(rsrc, rsrc, state, allowByEmail); if (byAccountId!= null) { return byAccountId; } } com.google.gerrit.server.change.PostReviewers.Addition wholeGroup = addByEmail(reviewer, rsrc, state, allowByEmail); if (byAccountId!= null) { return byAccountId; } com.google.gerrit.server.change.PostReviewers.Addition wholeGroup = addByEmail(reviewer, rsrc, state, notify, allowByEmail); return addByEmail; } return addByEmail(reviewer, rsrc, state, notify, accountsToNotify); }
private java.lang.String createCommitMessage(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> originalMembers, java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id>> updatedMembers, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> originalMembers, java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup.UUID>> updatedSubmissionId, java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup.UUID>> updatedSubmission) { java.lang.String summary = (groupCreation.isPresent())? accountGroup : ""; accountFooter.setEmptyValue(""); updateFooter.setEmptyValue(""); getCommitForRename(footers.add); footer.setEmptyValue(""); getCommitForRename(originalFooters, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(originalMembers, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(originalMembers, newMembers, newMembers) { @java.lang.Override public java.lang.String apply(com.google.gerrit.reviewdb.client.AccountGroup.UUID apply) { return getCommitFootersForSubmission(originalFooters, new com.google.gerrit.server.change.ReviewerCommit.toString(originalFooters, new com.google.gerrit.server.change.ReviewerCommit.toString(originalFooters, new com.google.gerrit.reviewdb.client.AccountGroup.Id(originalFooters, new com.google.gerrit.reviewdb.client.AccountGroup.Id(originalFooters, new com.google.gerrit.reviewdb.client.AccountGroup.Id(originalFooters, new com.google.gerrit.server.project.GetString()).toString(); return footer; }
private java.lang.String createCommitMessage(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> originalMembers, java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id>> updatedMembers, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> originalMembers, java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup.UUID>> updatedSubmissionId, java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup.UUID>> updatedSubmission) { java.lang.String summary = (groupCreation.isPresent())? accountGroup : ""; accountFooter.setEmptyValue(""); updateFooter.setEmptyValue(""); getCommitForRename(footers.add); footer.setEmptyValue(""); getCommitForRename(originalFooters, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(originalMembers, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(originalMembers, newMembers, newMembers) { @java.lang.Override public java.lang.String apply(com.google.gerrit.reviewdb.client.AccountGroup.UUID apply) { return getCommitFootersForSubmission(originalFooters, new com.google.gerrit.server.change.ReviewerCommit.toString(originalFooters, new com.google.gerrit.server.change.ReviewerCommit.toString(originalFooters, new com.google.gerrit.reviewdb.client.AccountGroup.Id(originalFooters, new com.google.gerrit.reviewdb.client.AccountGroup.Id(originalFooters, new com.google.gerrit.reviewdb.client.AccountGroup.Id(originalFooters, new com.google.gerrit.server.change.GetString()).toString(); return footer; }
private java.lang.String createCommitMessage(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> originalMembers, java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id>> updatedMembers, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> originalMembers, java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup.UUID>> updatedSubmissionId, java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup.UUID>> updatedSubmission) { java.lang.String summary = (groupCreation.isPresent())? accountGroup : ""; accountFooter.setEmptyValue(""); updateFooter.setEmptyValue(""); getCommitForRename(footers.add); footer.setEmptyValue(""); getCommitForRename(originalFooters, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(originalMembers, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(originalMembers, newMembers, newMembers) { @java.lang.Override public java.lang.String apply(com.google.gerrit.reviewdb.client.AccountGroup.UUID apply) { return getCommitFootersForSubmission(originalFooters, new com.google.gerrit.server.change.ReviewerCommit.toString(originalFooters, new com.google.gerrit.server.change.ReviewerCommit.toString(originalFooters, new com.google.gerrit.reviewdb.client.AccountGroup.Id(originalFooters, new com.google.gerrit.reviewdb.client.AccountGroup.Id(originalFooters, new com.google.gerrit.reviewdb.client.AccountGroup.Id(originalFooters, new com.google.gerrit.server.project.GetString()).toString(); return summary; }
private java.lang.String createCommitMessage(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> originalMembers, java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id>> updatedMembers, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> originalMembers, java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup.UUID>> updatedSubmissionId, java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup.UUID>> updatedSubmission) { java.lang.String summary = (groupCreation.isPresent())? accountGroup : ""; accountFooter.setEmptyValue(""); updateFooter.setEmptyValue(""); getCommitForRename(footers.add); footer.setEmptyValue(""); getCommitForRename(originalFooters, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(originalMembers, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(originalMembers, newMembers, newMembers) { @java.lang.Override public java.lang.String apply(com.google.gerrit.reviewdb.client.AccountGroup.UUID apply) { return getCommitFootersForSubmission(originalFooters, new com.google.gerrit.server.change.ReviewerCommit.toString(originalFooters, new com.google.gerrit.server.change.ReviewerCommit.toString(originalFooters, new com.google.gerrit.reviewdb.client.AccountGroup.Id(originalFooters, new com.google.gerrit.reviewdb.client.AccountGroup.Id(originalFooters, new com.google.gerrit.reviewdb.client.AccountGroup.Id(originalFooters, new com.google.gerrit.server.change.ToString.toString()).toString(); return footer; }
private java.lang.String createCommitMessage(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> originalMembers, java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id>> updatedMembers, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> originalMembers, java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup.UUID>> updatedSubmissionId, java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup.UUID>> updatedSubmission) { java.lang.String summary = (groupCreation.isPresent())? accountGroup : ""; accountFooter.setEmptyValue(""); updateFooter.setEmptyValue(""); getCommitForRename(footers.add); footer.setEmptyValue(""); getCommitForRename(originalFooters, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(originalMembers, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(originalMembers, newMembers, newMembers) { @java.lang.Override public java.lang.String apply(com.google.gerrit.reviewdb.client.AccountGroup.UUID apply) { return getCommitFootersForSubmission(originalFooters, new com.google.gerrit.server.change.ReviewerCommit.toString(originalFooters, new com.google.gerrit.server.change.ReviewerCommit.toString(originalFooters, new com.google.gerrit.reviewdb.client.AccountGroup.Id(originalFooters, new com.google.gerrit.reviewdb.client.AccountGroup.Id(originalFooters, new com.google.gerrit.reviewdb.client.AccountGroup.Id(originalFooters, new com.google.gerrit.server.change.ToString.toString()).toString(); return footer; } }
@java.lang.Override protected void run() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.HeadInput input = new com.google.gerrit.extensions.api.projects.HeadInput(); input.ref = newHead; try { setHead.apply(newHead); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw e; } }
@java.lang.Override protected void run() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.HeadInput input = new com.google.gerrit.extensions.api.projects.HeadInput(); input.ref = newHead; try { setHead.apply(newHead); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw die(e); } }
@java.lang.Override protected void run() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.HeadInput input = new com.google.gerrit.extensions.api.projects.HeadInput(); input.ref = newHead; try { setHead.apply(newHead); } catch (com.google.gerrit.server.project.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e); } }
@java.lang.Override protected void run() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.HeadInput input = new com.google.gerrit.extensions.api.projects.HeadInput(); input.ref = newHead; try { setHead.apply(newHead); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e); } }
@java.lang.Override protected void run() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.HeadInput input = new com.google.gerrit.extensions.api.projects.HeadInput(); input.ref = newHead; try { setHead.apply(newHead); } catch (com.google.gerrit.server.project.NoSuchEntityException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e); } }
@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo apply(com.google.gerrit.server.change.DraftCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newCommentFormatter().format(rsrc.getComment()); }
@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo apply(com.google.gerrit.server.change.CommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newCommentFormatter().format(rsrc.getComment()); }
@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo apply(com.google.gerrit.server.change.DraftCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newCommentFormatter().format(rsrc.getComment(), rsrc.getComment()); }
@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo apply(com.google.gerrit.server.change.DraftCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newCommentFormatter().newCommentFormatter().format(rsrc.getComment()); }
@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo apply(com.google.gerrit.server.change.DraftCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newCommentFormatter().newCommentFormatter().format(rsrc.getComment(), rsrc.getComment()); }
private java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> getChildrenForRepository(com.google.gerrit.server.project.ProjectState parent) throws com.google.gerrit.server.permissions.PermissionBackendException { final java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> childProjects = new java.util.ArrayList<>(); final java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> includes = new java.util.ArrayList(excludedChild.size()); for (com.google.gerrit.server.project.ProjectState externalChild : excludeChild) { includes.add(excludedChild.getProject().getNameKey()); } final java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> automaticallyExceptExclude = new java.util.ArrayList<com.google.gerrit.server.project.ProjectResource>(); if ((newParentCount)!= null) { automaticallyExclude.addAll(getAllParents(new com.google.gerrit.server.project.ProjectResource(parent, user))) { for (com.google.gerrit.extensions.common.ProjectInfo child : listChildProjects.apply(new com.google.gerrit.reviewdb.client.Project.Name(parent, user))) { if (!(exists.contains(child))) { childProjects.add(childName); } } else { stdout.println(((((((("The child " + childName) + "\" not in ") + ") + (newParentKey)) + "'.")); } } return childProjects; }
private java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> getChildrenForRepository(com.google.gerrit.server.project.ProjectState parent) throws com.google.gerrit.server.permissions.PermissionBackendException { final java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> childProjects = new java.util.ArrayList<>(); final java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> includes = new java.util.ArrayList(excludedChild.size()); for (com.google.gerrit.server.project.ProjectState externalChild : excludeChild) { includes.add(excludedChild.getProject().getNameKey()); } final java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> automaticallyExceptExclude = new java.util.ArrayList<com.google.gerrit.server.project.ProjectResource>(); if ((newParentCount)!= null) { automaticallyExclude.addAll(getAllParents(new com.google.gerrit.server.project.ProjectResource(parent, user))) { for (com.google.gerrit.extensions.common.ProjectInfo child : listChildProjects.apply(new com.google.gerrit.reviewdb.client.Project.Name(parent, user))) { if (!(exists.contains(child))) { childProjects.add(childName); } } else { stdout.println(((((((("The child " + childName) + "\" not in ") + ") + (newParentKey)) + "."))); } } return childProjects; }
private java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> getChildrenForRepository(com.google.gerrit.server.project.ProjectState parent) throws com.google.gerrit.server.permissions.PermissionBackendException { final java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> childProjects = new java.util.ArrayList<>(); final java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> includes = new java.util.ArrayList(excludedChild.size()); for (com.google.gerrit.server.project.ProjectState externalChild : excludeChild) { includes.add(excludedChild.getProject().getNameKey()); } final java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> automaticallyExceptExclude = new java.util.ArrayList<com.google.gerrit.server.project.ProjectResource>(); if ((newParentCount)!= null) { automaticallyExclude.addAll(getAllParents(new com.google.gerrit.server.project.ProjectResource(parent, user))) { for (com.google.gerrit.extensions.common.ProjectInfo child : listChildProjects.apply(new com.google.gerrit.reviewdb.client.Project.Name(parent, user))) { if (!(exists.contains(child))) { childProjects.add(childName); } } else { stdout.println(((((((("The child " + childName) + "\" not in ") + ") + (newParentKey)) + ".")); } } return childProjects; }
private java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> getChildrenForRepository(com.google.gerrit.server.project.ProjectState parent) throws com.google.gerrit.server.permissions.PermissionBackendException { final java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> childProjects = new java.util.ArrayList<>(); final java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> includes = new java.util.ArrayList(excludedChild.size()); for (com.google.gerrit.server.project.ProjectState externalChild : excludeChild) { includes.add(excludedChild.getProject().getNameKey()); } final java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> automaticallyExceptExclude = new java.util.ArrayList<com.google.gerrit.server.project.ProjectResource>(); if ((newParentCount)!= null) { automaticallyExclude.addAll(getAllParents(new com.google.gerrit.server.project.ProjectResource(parent, user))) { for (com.google.gerrit.extensions.common.ProjectInfo child : listChildProjects.apply(new com.google.gerrit.reviewdb.client.Project.Name(parent, user))) { if (!(exists.contains(child))) { childProjects.add(childName); } } else { stdout.println(((((((("The child " + childName) + "\" not in parent ") + ") + (newParentKey)) + "."))); } } return childProjects; }
private java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> getChildrenForRepository(com.google.gerrit.server.project.ProjectState parent) throws com.google.gerrit.server.permissions.PermissionBackendException { final java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> childProjects = new java.util.ArrayList<>(); final java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> includes = new java.util.ArrayList(excludedChild.size()); for (com.google.gerrit.server.project.ProjectState externalChild : excludeChild) { includes.add(excludedChild.getProject().getNameKey()); } final java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> automaticallyExceptExclude = new java.util.ArrayList<com.google.gerrit.server.project.ProjectResource>(); if ((newParentCount)!= null) { automaticallyExclude.addAll(getAllParents(new com.google.gerrit.server.project.ProjectResource(parent, user))) { for (com.google.gerrit.extensions.common.ProjectInfo child : listChildProjects.apply(new com.google.gerrit.reviewdb.client.Project.Name(parent, user))) { if (!(exists.contains(child))) { childProjects.add(childName); } } else { stdout.println(((((((("The child " + childName) + "\" not in parent ") + ") + (newParentKey)) + ".")); } } return childProjects; }
public com.google.gerrit.extensions.common.AgreementInfo format(com.google.gerrit.common.data.ContributorAgreement ca) { com.google.gerrit.extensions.common.AgreementInfo info = new com.google.gerrit.extensions.common.AgreementInfo(); info.name = ca.getName(); info.description = ca.getDescription(); info.url = ca.getDescription(); com.google.gerrit.common.data.GroupReference autoVerifier = ca.getAutoVerify(); if ((autoVerifyGroup!= null) && (self.get().isIdentifiedUser())) { com.google.gerrit.server.IdentifiedUser user = identifiedUserFactory.create(self.get().getAccountId()); try { com.google.gerrit.server.account.GroupControl gc = new com.google.gerrit.server.account.GroupControl(user, autoVerify); info.autoVerify(group); } catch (com.google.gerrit.common.errors.NoSuchGroupException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.account.GroupJson.log.warn(((("Cannot group " + (autoVerifier.getName())) + "\" does not exist"), e); } } return info; }
public com.google.gerrit.extensions.common.AgreementInfo format(com.google.gerrit.common.data.ContributorAgreement ca) { com.google.gerrit.extensions.common.AgreementInfo info = new com.google.gerrit.extensions.common.AgreementInfo(); info.name = ca.getName(); info.description = ca.getDescription(); info.url = ca.getDescription(); com.google.gerrit.common.data.GroupReference autoVerifier = ca.getAutoVerify(); if ((autoVerifyGroup!= null) && (self.get().isIdentifiedUser())) { com.google.gerrit.server.IdentifiedUser user = identifiedUserFactory.create(self.get().getAccountId()); try { com.google.gerrit.server.account.GroupControl gc = new com.google.gerrit.server.account.GroupControl(user, autoVerify); info.autoVerify(group); } catch (com.google.gerrit.common.errors.NoSuchGroupException | com.google.gerrit.common.errors.NoSuchGroupException e) { com.google.gerrit.server.account.GroupJson.log.warn(((("Cannot load group " + (autoVerifier.getName())) + "\" does not exist"), e); } } return info; }
public com.google.gerrit.extensions.common.AgreementInfo format(com.google.gerrit.common.data.ContributorAgreement ca) { com.google.gerrit.extensions.common.AgreementInfo info = new com.google.gerrit.extensions.common.AgreementInfo(); info.name = ca.getName(); info.description = ca.getDescription(); info.url = ca.getDescription(); com.google.gerrit.common.data.GroupReference autoVerifier = ca.getAutoVerify(); if ((autoVerifyGroup!= null) && (self.get().isIdentifiedUser())) { com.google.gerrit.server.IdentifiedUser user = identifiedUserFactory.create(self.get().getAccountId()); try { com.google.gerrit.server.account.GroupControl gc = new com.google.gerrit.server.account.GroupControl(user, autoVerify); info.autoVerify(group); } catch (com.google.gerrit.common.errors.NoSuchGroupException | com.google.gerrit.common.errors.NoSuchGroupException e) { com.google.gerrit.server.account.GroupJson.log.warn(((("Cannot group " + (autoVerifyGroup.getName())) + "\" does not exist"), e); } } return info; }
public com.google.gerrit.extensions.common.AgreementInfo format(com.google.gerrit.common.data.ContributorAgreement ca) { com.google.gerrit.extensions.common.AgreementInfo info = new com.google.gerrit.extensions.common.AgreementInfo(); info.name = ca.getName(); info.description = ca.getDescription(); info.url = ca.getDescription(); com.google.gerrit.common.data.GroupReference autoVerifier = ca.getAutoVerify(); if ((autoVerifyGroup!= null) && (self.get().isIdentifiedUser())) { com.google.gerrit.server.IdentifiedUser user = identifiedUserFactory.create(self.get().getAccountId()); try { com.google.gerrit.server.account.GroupControl gc = new com.google.gerrit.server.account.GroupControl(user, autoVerify); info.autoVerify(group); } catch (com.google.gerrit.common.errors.NoSuchGroupException | com.google.gerrit.common.errors.NoSuchGroupException e) { com.google.gerrit.server.account.GroupJson.log.warn(((("Cannot load group " + (autoVerifyType.getName())) + "\" does not exist"), e); } } return info; }
public com.google.gerrit.extensions.common.AgreementInfo format(com.google.gerrit.common.data.ContributorAgreement ca) { com.google.gerrit.extensions.common.AgreementInfo info = new com.google.gerrit.extensions.common.AgreementInfo(); info.name = ca.getName(); info.description = ca.getDescription(); info.url = ca.getDescription(); com.google.gerrit.common.data.GroupReference autoVerifier = ca.getAutoVerify(); if ((autoVerifyGroup!= null) && (self.get().isIdentifiedUser())) { com.google.gerrit.server.IdentifiedUser user = identifiedUserFactory.create(self.get().getAccountId()); try { com.google.gerrit.server.account.GroupControl gc = new com.google.gerrit.server.account.GroupControl(user, autoVerify); info.autoVerify(group); } catch (com.google.gerrit.common.errors.NoSuchGroupException | com.google.gerrit.common.errors.NoSuchGroupException e) { com.google.gerrit.server.account.GroupJson.log.warn(((("Cannot load group " + (autoVerifyType.getName())) + "\" does not exist"), ca.getName()))); } } return info; }
public static com.google.gerrit.server.project.DashboardResource projectDefault(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.project.CurrentUser user) { return new com.google.gerrit.server.project.DashboardResource(projectState, null, null, null, null, null); }
public static com.google.gerrit.server.project.DashboardResource projectDefault(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.project.CurrentUser user) { return new com.google.gerrit.server.project.DashboardResource(projectState, user, null, null, null, null); }
public static com.google.gerrit.server.project.DashboardResource projectDefault(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.project.CurrentUser user) { return new com.google.gerrit.server.project.DashboardResource(projectState, user, null, null, null, null, null); }
public static com.google.gerrit.server.project.DashboardResource projectDefault(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.project.CurrentUser user) { return new com.google.gerrit.server.project.DashboardResource(projectState, null, null, null, null, null, null); }
public static com.google.gerrit.server.project.DashboardResource projectDefaultDefault(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.project.CurrentUser user) { return new com.google.gerrit.server.project.DashboardResource(projectState, null, null, null, null, null); }
@java.lang.Override public com.google.gerrit.extensions.common.RobotCommentInfo apply(com.google.gerrit.server.change.RobotCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newRobotCommentFormatter().format(rsrc.getComment()); }
@java.lang.Override public com.google.gerrit.extensions.common.RobotCommentInfo apply(com.google.gerrit.server.change.RobotCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newRobotCommentFormatter().newRobotCommentFormatter().format(rsrc.getComment()); }
@java.lang.Override public com.google.gerrit.extensions.common.RobotCommentInfo apply(com.google.gerrit.server.change.CommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newRobotCommentFormatter().format(rsrc.getComment()); }
@java.lang.Override public com.google.gerrit.extensions.common.RobotCommentInfo apply(com.google.gerrit.server.change.RobotCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newRobotCommentFormatter().format(rsrc.getCommentFormatter().format(rsrc.getComment()); }
@java.lang.Override public com.google.gerrit.extensions.common.RobotCommentInfo apply(com.google.gerrit.server.change.RobotCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newRobotCommentFormatter().format(rsrc.getCommentFormatter().newCommentFormatter().format(rsrc.getComment()); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gwtorm.server.OrmException { return json.format(resource.getGroup()); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { return json.format(resource.getGroup()); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource) { return json.format(resource.getGroup()); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException { return json.format(resource.getGroup()); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.group.GroupResource r = json.format(resource.getGroup()); return json.format(resource.getGroup()); }
@org.junit.Test public void createProjectWithNonExistingOwner_UnprocessableEntity() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.name = name("newProject""); in.owners = java.util.Collections.singletonList(newProjectName); assertCreateFails(in, com.google.gerrit.extensions.restapi.UnprocessableEntityException.class); }
@org.junit.Test public void createProjectWithNonExistingOwner_UnprocessableEntity() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.name = name("new-existing-account""); in.owners = java.util.Collections.singletonList(newProjectName); assertCreateFails(in, com.google.gerrit.extensions.restapi.UnprocessableEntityException.class); }
@org.junit.Test public void createProjectWithNonExistingOwner_UnprocessableEntity() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.name = name("newProject" + "new-existing-account")); in.owners = java.util.Collections.singletonList(in, com.google.gerrit.extensions.restapi.UnprocessableEntityException.class); assertCreateFails(in, com.google.gerrit.extensions.restapi.UnprocessableEntityException.class); }
@org.junit.Test public void createProjectWithNonExistingOwner_UnprocessableEntity() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.name = name("newProject" + "new-existing-account"); in.owners = java.util.Collections.singletonList(new com.google.gerrit.extensions.api.changes.UnprocessableEntityException.class); assertCreateFails(in, com.google.gerrit.extensions.restapi.UnprocessableEntityException.class); }
@org.junit.Test public void createProjectWithNonExistingOwner_UnprocessableEntity() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.name = name("newProject" + "new-existing-account")); in.owners = java.util.Collections.singletonList(in, com.google.gerrit.extensions.restapi.UnprocessableEntityException.class); assertCreateFails(in, com.google.common.collect.ImmutableList.of()); }
@org.kohsuke.args4j.Option(name = "--has-access", metaVar = "GROUP", usage = "GROUP", usage = "GROUP") public void setGroupUUID(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) { this.groupUUID = groupUUID; }
@org.kohsuke.args4j.Option(name = "--has-config", metaVar = "GROUP", usage = "GROUP", usage = "GROUP") public void setGroupUUID(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) { this.groupUUID = groupUUID; }
@org.kohsuke.args4j.Option(name = "--has-access", metaVar = "GROUP", usage = "GROUP", usage = "GROUP") public void setGroupUUID(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) { this.groupUUID = groupUuid; }
@org.kohsuke.args4j.Option(name = "--has-config", metaVar = "GROUP", usage = "GROUP", usage = "GROUP") public void setGroupUUID(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) { this.groupUUID = groupUuid; }
@org.kohsuke.args4j.Option(name = "--has-access", metaVar = "GROUP", usage = "GROUP", usage = "GROUP") public void setGroupUUID(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) { this.groupUuid = groupUUID; }
com.google.gerrit.server.api.projects.TagApiImpl create(com.google.gerrit.server.project.ProjectResource project, java.lang.String ref);
com.google.gerrit.server.api.projects.TagApiImpl create(com.google.gerrit.server.api.projects.ProjectResource project, java.lang.String ref);
com.google.gerrit.server.api.projects.TagApiImpl create(com.google.gerrit.server.api.projects.TagResource project, java.lang.String ref);
com.google.gerrit.server.api.projects.TagApiImpl create(com.google.gerrit.server.api.project.ProjectResource project, java.lang.String ref);
com.google.gerrit.server.api.projects.TagApiImpl create(com.google.gerrit.server.project.TagResource project, java.lang.String ref);
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.CreateGroup.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.group.AddSubmodule.Input in = new com.google.gerrit.server.group.AddSubmodule.Input(); in.groups = com.google.common.collect.ImmutableList.of(id); try { java.util.List<com.google.gerrit.server.group.CreateGroupInfo> list = addSubsections.apply(resource, in); try { java.util.List<com.google.gerrit.extensions.common.GroupInfo> list = addSubsections.apply(resource, in); if ((list.size()) == 1) { return list.get(0); } throw new java.lang.IllegalStateException(); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.CreateGroup.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.group.AddSubmission.Input in = new com.google.gerrit.server.group.AddSubmodule.Input(); in.groups = com.google.common.collect.ImmutableList.of(id); try { java.util.List<com.google.gerrit.server.group.CreateGroupInfo> list = addSubsections.apply(resource, in); try { java.util.List<com.google.gerrit.extensions.common.GroupInfo> list = addSubsections.apply(resource, in); if ((list.size()) == 1) { return list.get(0); } throw new java.lang.IllegalStateException(); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.CreateGroup.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.group.AddSubmodule.Input in = new com.google.gerrit.server.group.AddSubmodule.Input(); in.groups = com.google.common.collect.ImmutableList.of(id); try { java.util.List<com.google.gerrit.server.group.CreateGroupInfo> list = addSubsections.apply(resource, in); try { java.util.List<com.google.gerrit.extensions.common.GroupInfo> list = addSubsections.apply(resource, in); if ((list.size()) == 1) { return list.get(0); } throw new java.lang.IllegalStateException(); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.CreateGroup.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.group.AddSubmodule.Input in = new com.google.gerrit.server.group.AddSubmodule.Input(); in.groups = com.google.common.collect.ImmutableList.of(id); try { java.util.List<com.google.gerrit.server.group.CreateGroupInfo> list = addSubsections.apply(resource, in); try { java.util.List<com.google.gerrit.extensions.common.GroupInfo> list = addSubgroups.apply(resource, in); if ((list.size()) == 1) { return list.get(0); } throw new java.lang.IllegalStateException(); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.CreateGroup.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.group.AddSubmodule.Input in = new com.google.gerrit.server.group.AddSubmodule.Input(); in.groups = com.google.common.collect.ImmutableList.of(id); try { java.util.List<com.google.gerrit.server.group.CreateGroupInfo> list = addSubsections.apply(resource, in); try { java.util.List<com.google.gerrit.extensions.common.GroupInfo> list = addSubsections.apply(resource, in); if ((list.size()) == 1) { return list.get(0); } throw new java.lang.IllegalStateException(); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.SubmoduleResource resource, com.google.gerrit.server.group.AddSubsections.Input input) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.group.CreateGroup.Input input = get.get().apply(resource); return get.get().apply(resource); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.CreateGroupResource resource, com.google.gerrit.server.group.AddSubsections.Input input) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.group.CreateGroup.Input input = get.get().apply(resource); return get.get().apply(resource); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.SubmoduleResource resource, com.google.gerrit.server.group.AddSubsections.Input input) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.group.AddSubmodule.Input input = get.get().apply(resource); return get.get().apply(resource); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.SubmoduleResource resource, com.google.gerrit.server.group.AddSubsections.Input input) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.group.CreateGroup.Input input = get.get().apply(resource); if (resource == null) { throw new com.google.gwtorm.server.OrmException(("no group " + input)); } return get.get().apply(resource); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.SubmoduleResource resource, com.google.gerrit.server.group.AddSubsections.Input input) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.group.CreateGroup.Input input = get.get().apply(resource); if (resource == null) { throw new com.google.gwtorm.server.OrmException(("no group " + resource)); } return get.get().apply(resource); }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.CommentResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.ChangeResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.restapi.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.CommentResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.restapi.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.ChangeResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.CommentResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.server.change.CommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String uuid = id.get(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.publishedByPatchSet(dbProvider.get(), notes, rev)) { if (uuid.equals(c.keySet().getId())) { return new com.google.gerrit.server.change.CommentResource(rev, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.change.CommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String uuid = id.get(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.publishedByPatchSet(dbProvider.get(), notes, rev.getPatchSet().getId())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.change.CommentResource(id); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.server.change.CommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String uuid = id.get(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.publishedByPatchSet(dbProvider.get(), notes, rev.getPatchSet().getId())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.change.CommentResource(id, c); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.server.change.CommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String uuid = id.get(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.publishedByPatchSet(dbProvider.get(), notes, rev.getPatchSet().getId())) { if (uuid.equals(c.keySet().getId())) { return new com.google.gerrit.server.change.CommentResource(id); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.server.change.CommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String uuid = id.get(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.publishedByPatchSet(dbProvider.get(), notes, rev)) { if (uuid.equals(c.keySet().getId())) { return new com.google.gerrit.server.change.CommentResource(id); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } throw new com.google.gerrit.server.project.NoSuchChangeException(id); }
public static com.google.gerrit.server.project.FileResource create(com.google.gerrit.server.git.GitRepositoryManager repoManager, com.google.gerrit.server.git.ProjectState projectState, org.eclipse.jgit.lib.ObjectId rev, java.lang.String path) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(projectState.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevTree tree = rw.parseTree(rev); if ((org.eclipse.jgit.treewalk.TreeWalk.forPath(repo, path, tree))!= null) { return new com.google.gerrit.server.project.FileResource(projectState, rev, tree); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.project.NoSuchProjectException.fromDecoded(path)); }
public static com.google.gerrit.server.project.FileResource create(com.google.gerrit.server.git.GitRepositoryManager repoManager, com.google.gerrit.server.git.GitRepositoryManager repoManager, org.eclipse.jgit.lib.ObjectId rev, java.lang.String path) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(projectState.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevTree tree = rw.parseTree(rev); if ((org.eclipse.jgit.treewalk.TreeWalk.forPath(repo, path, tree))!= null) { return new com.google.gerrit.server.project.FileResource(projectState, rev, tree); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.extensions.restapi.ResourceString.fromDecoded(path)); }
public static com.google.gerrit.server.project.FileResource create(com.google.gerrit.server.git.GitRepositoryManager repoManager, com.google.gerrit.server.git.GitRepositoryManager repoManager, org.eclipse.jgit.lib.ObjectId rev, java.lang.String path) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(projectState.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevTree tree = rw.parseTree(rev); if ((org.eclipse.jgit.treewalk.TreeWalk.forPath(repo, path, tree))!= null) { return new com.google.gerrit.server.project.FileResource(projectState, rev, tree); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.project.NoSuchProjectException.fromDecoded(path)); }
public static com.google.gerrit.server.project.FileResource create(com.google.gerrit.server.git.GitRepositoryManager repoManager, com.google.gerrit.server.git.ProjectState projectState, org.eclipse.jgit.lib.ObjectId rev, java.lang.String path) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(projectState.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevTree tree = rw.parseTree(rev); if ((org.eclipse.jgit.treewalk.TreeWalk.forPath(repo, path, tree))!= null) { return new com.google.gerrit.server.project.FileResource(projectState, rev, tree); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.project.NoSuchProjectException.class); }
public static com.google.gerrit.server.project.FileResource create(com.google.gerrit.server.git.GitRepositoryManager repoManager, com.google.gerrit.server.git.GitRepositoryManager repoManager, org.eclipse.jgit.lib.ObjectId rev, java.lang.String path) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(projectState.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevTree tree = rw.parseTree(rev); if ((org.eclipse.jgit.treewalk.TreeWalk.forPath(repo, path, tree))!= null) { return new com.google.gerrit.server.project.FileResource(projectState, rev, tree); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.project.NoSuchProjectException.class); }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, git)) { md.getCommitBuilder().setAuthor(serverUser); md.getCommitBuilder().setCommitter(serverUser); com.google.gerrit.server.schema.ProjectConfig config = com.google.gerrit.server.schema.Schema_105.COMMIT_MSG.COMMIT_MSG); md.getCommitBuilder().setMessage(com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS); com.google.gerrit.server.schema.SchemaUtil config = config.getAccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), true, systemGroupBackend.getGroup(com.google.gerrit.server.schema.REGISTERED_USERS)); config.commit(md); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException("Cannot read permissions on permissions", e); } }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, git)) { md.getCommitBuilder().setAuthor(serverUser); md.getCommitBuilder().setCommitter(serverUser); com.google.gerrit.server.schema.ProjectConfig config = com.google.gerrit.server.schema.Schema_105.COMMIT_MSG.COMMIT_MSG); md.getCommitBuilder().setMessage(com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS); com.google.gerrit.server.schema.SchemaUtil config = config.getAccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), true, systemGroupBackend.getGroup(com.google.gerrit.server.schema.Schema_GROUPS_USERS)); config.commit(md); } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException("Cannot read permissions on permissions", e); } }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, git)) { md.getCommitBuilder().setAuthor(serverUser); md.getCommitBuilder().setCommitter(serverUser); com.google.gerrit.server.schema.ProjectConfig config = com.google.gerrit.server.schema.Schema_105.COMMIT_MSG.COMMIT_MSG); md.getCommitBuilder().setMessage(com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS); com.google.gerrit.server.schema.SchemaUtil config = config.getAccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), true, systemGroupBackend.getGroup(com.google.gerrit.server.schema.REGISTERED_USERS)); config.commit(md); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException("Cannot read permissions to read permissions", e); } }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, git)) { md.getCommitBuilder().setAuthor(serverUser); md.getCommitBuilder().setCommitter(serverUser); com.google.gerrit.server.schema.ProjectConfig config = com.google.gerrit.server.schema.Schema_105.COMMIT_MSG.COMMIT_MSG); md.getCommitBuilder().setMessage(com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS); com.google.gerrit.server.schema.SchemaUtil config = config.getAccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), true, systemGroupBackend.getGroup(com.google.gerrit.server.schema.REGISTERED_USERS)); config.commit(md); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException("Cannot read permissions to read permissions on account", e); } }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, git)) { md.getCommitBuilder().setAuthor(serverUser); md.getCommitBuilder().setCommitter(serverUser); com.google.gerrit.server.schema.ProjectConfig config = com.google.gerrit.server.schema.Schema_105.COMMIT_MSG.COMMIT_MSG); md.getCommitBuilder().setMessage(com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS); com.google.gerrit.server.schema.SchemaUtil config = config.getAccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), true, systemGroupBackend.getGroup(com.google.gerrit.server.schema.REGISTERED_USERS)); config.commit(md); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException("Cannot read permissions on permissions", e); } finally { db.close(); } }
private com.google.gerrit.server.project.DashboardResource resource() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id)); }
private com.google.gerrit.server.project.DashboardResource resource() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.server.account.IdString.fromDecoded(id)); }
private com.google.gerrit.server.project.DashboardResource resource() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id)); }
private com.google.gerrit.server.project.DashboardResource resource() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.server.project.RefControl.fromDecoded(id)); }
private com.google.gerrit.server.project.DashboardResource resource() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.server.account.IdString.fromDecoded(id)); }
@java.lang.Override public void setDefault() throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.SetDashboardInput input = new com.google.gerrit.extensions.common.SetDashboardInfo(); input.id = id; try { set.apply(com.google.gerrit.server.project.DashboardResource.projectDefaultDashboard(project.getProjectState(), project.getUser()), input); } catch (java.lang.Exception e) { com.google.gerrit.server.api.ApiUtil.asRestApiException(msg); throw new com.google.gerrit.server.api.ApiUtil.asRestApiException(msg, e); } }
@java.lang.Override public void setDefault() throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.SetDashboardInput input = new com.google.gerrit.extensions.common.SetDashboardInfo(); input.id = id; try { set.apply(com.google.gerrit.server.project.DashboardResource.projectDefaultDashboard(project.getProjectState(), project.getUser()), input); } catch (java.lang.Exception e) { com.google.gerrit.server.api.ApiUtil.asRestApiException(msg); throw new com.google.gerrit.server.api.ApiUtil.asRestApiException(msg); } }
@java.lang.Override public void setDefault() throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.SetDashboardInput input = new com.google.gerrit.extensions.common.SetDashboardInfo(); input.id = id; try { set.apply(com.google.gerrit.server.project.DashboardResource.projectDefaultDashboard(project.getProjectState(), project.getUser()), input); } catch (java.lang.Exception e) { com.google.gerrit.server.api.ApiUtil.asRestApiException(msg); throw new com.google.gerrit.server.api.ApiUtil.asRestApiException(msg, "Cannot delete default edit", e); } }
@java.lang.Override public void setDefault() throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.SetDashboardInput input = new com.google.gerrit.extensions.common.SetDashboardInfo(); input.id = id; try { set.apply(com.google.gerrit.server.project.DashboardResource.projectDefaultDashboard(project.getProjectState(), project.getUser()), input); } catch (java.lang.Exception e) { com.google.gerrit.server.api.ApiUtil.asRestApiException msg = java.lang.String.format("Cannot default default dashboard", e); throw com.google.gerrit.server.api.ApiUtil.asRestApiException(msg); } }
@java.lang.Override public void setDefault() throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.SetDashboardInput input = new com.google.gerrit.extensions.common.SetDashboardInfo(); input.id = id; try { set.apply(com.google.gerrit.server.project.DashboardResource.projectDefaultDashboard(project.getProjectState(), project.getUser()), input); } catch (java.lang.Exception e) { com.google.gerrit.server.api.ApiUtil.asRestApiException(msg); throw new com.google.gerrit.server.api.ApiUtil.asRestApiException(msg, "Cannot delete default edit", "remove"); } }
private com.google.gerrit.server.project.TagResource resource() throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException { return tags.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(ref)); }
private com.google.gerrit.server.project.TagResource resource() throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException { return tags.parse(project, com.google.gerrit.server.change.IdString.fromDecoded(ref)); }
private com.google.gerrit.server.project.TagResource resource() throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException { return tags.parse(resource, com.google.gerrit.extensions.restapi.IdString.fromDecoded(ref)); }
private com.google.gerrit.server.project.TagResource resource() throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException { return tags.parse(resource, com.google.gerrit.server.change.IdString.fromDecoded(ref)); }
private com.google.gerrit.server.project.TagResource resource() throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException { returntags.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(ref)); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.common.data.GroupDescription.Internal externalGroup = resource.asInternal(); if (!(control.canSeeGroup())) { throw new com.google.gerrit.extensions.restapi.AuthException("included group not be throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException"); } com.google.gerrit.server.account.GroupControl control = resource.asAccountGroup().init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveMember())) { throw new com.google.gerrit.extensions.restapi.AuthException(("Cannot delete members from account " + (internalGroup.getName()))); } java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> membersToRemove = new java.util.HashSet<>(); for (java.lang.String name : input.members) { com.google.gerrit.reviewdb.client.AccountGroup a = accounts.parse(nameOrEmail).getAccount(); membersToRemove.add(a.getAccountId()); } return groupMembers; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.common.data.GroupDescription.Internal externalGroup = resource.asInternal(); if (!(control.canSeeGroup())) { throw new com.google.gerrit.extensions.restapi.AuthException("included group not be throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException"); } com.google.gerrit.server.account.GroupControl control = resource.asAccountGroup().init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveMember())) { throw new com.google.gerrit.extensions.restapi.AuthException(("Cannot delete members from account " + (internalGroup.getName()))); } java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> membersToRemove = new java.util.HashSet<>(); for (java.lang.String name : input.members) { com.google.gerrit.reviewdb.client.AccountGroup a = accounts.parse(nameOrEmail).getAccount(); membersToRemove.add(a.getAccountId()); } return group; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.common.data.GroupDescription.Internal externalGroup = resource.asInternal(); if (!(control.canSeeGroup())) { throw new com.google.gerrit.extensions.restapi.AuthException("included group not be throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException"); } com.google.gerrit.server.account.GroupControl.Internal group = resource.asAccountGroup().init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveMember())) { throw new com.google.gerrit.extensions.restapi.AuthException(("Cannot delete members from account " + (internalGroup.getName()))); } java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> membersToRemove = new java.util.HashSet<>(); for (java.lang.String name : input.members) { com.google.gerrit.reviewdb.client.AccountGroup a = accounts.parse(nameOrEmail).getAccount(); membersToRemove.add(a.getAccountId()); } return groupMembers; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.common.data.GroupDescription.Internal externalGroup = resource.asInternal(); if (!(control.canSeeGroup())) { throw new com.google.gerrit.extensions.restapi.AuthException("included group not be throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException"); } com.google.gerrit.server.account.GroupControl.Internal groupControl = resource.asAccountGroup().init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveMember())) { throw new com.google.gerrit.extensions.restapi.AuthException(("Cannot delete members from account " + (internalGroup.getName()))); } java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> membersToRemove = new java.util.HashSet<>(); for (java.lang.String name : input.members) { com.google.gerrit.reviewdb.client.AccountGroup a = accounts.parse(nameOrEmail).getAccount(); membersToRemove.add(a.getAccountId()); } return group; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.common.data.GroupDescription.Internal externalGroup = resource.asInternal(); if (!(control.canSeeGroup())) { throw new com.google.gerrit.extensions.restapi.AuthException("included group not be throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException"); } com.google.gerrit.server.account.GroupControl control = resource.asAccountGroup().init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveMember())) { throw new com.google.gerrit.extensions.restapi.AuthException(("Cannot delete members from account " + (internalGroup.getName()))); } java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> membersToRemove = new java.util.HashSet<>(); for (java.lang.String name : input.members) { com.google.gerrit.reviewdb.client.AccountGroup a = accounts.parse(nameOrEmail).getAccount(); membersToRemove.add(a.getAccountId()); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); try { removeGroupMembers(groupUUID, membersToRemove); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(e.getMessage()); } return com.google.ger
@java.lang.Override public void owner(java.lang.String owner) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.changes.OwnerInput in = new com.google.gerrit.extensions.api.changes.OwnerInput(); in.owner = owner; try { putOwner.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put owner", e); } }
@java.lang.Override public void owner(java.lang.String owner) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.changes.OwnerInput in = new com.google.gerrit.extensions.api.changes.OwnerInput(); in.owner = owner; try { putOwner.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot set owner", e); } }
@java.lang.Override public void owner(java.lang.String owner) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.changes.OwnerInput in = new com.google.gerrit.extensions.api.changes.OwnerInput(); in.owner = account; try { putOwner.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put owner", e); } }
@java.lang.Override public void owner(java.lang.String owner) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.projects.OwnerInput in = new com.google.gerrit.extensions.api.changes.OwnerInput(); in.owner = owner; try { putOwner.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put owner", e); } }
@java.lang.Override public void owner(java.lang.String owner) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.changes.OwnerInput in = new com.google.gerrit.extensions.api.changes.OwnerInput(); in.owner = account; try { putOwner.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot set owner", e); } }
@org.junit.Test public void rejectWhenFeatureIsDisabled() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.api.projects.ConfigInput cfg = new com.google.gerrit.extensions.api.projects.ConfigInput(); cfg.enableReviewerByEmail = com.google.gerrit.extensions.client.InheritableBoolean.FALSE; gApi.projects().name(project.get()).config(conf); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.AddReviewerResult result = gApi.changes().id(r.getChangeId()).addReviewer("foo.bar@bar@bar@bar@bar.bar@bar@com>"); assertThat(result.reviewers).isEqualTo(com.google.gerrit.acceptance.api.accounts.com.google.gerrit.client.ReviewerResult.class); assertThat(result.reviewers).isNull(); }
@org.junit.Test public void rejectWhenFeatureIsDisabled() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.api.projects.ConfigInput cfg = new com.google.gerrit.extensions.api.projects.ConfigInput(); cfg.enableReviewerByEmail = com.google.gerrit.extensions.client.InheritableBoolean.FALSE; gApi.projects().name(project.get()).config(conf); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.AddReviewerResult result = gApi.changes().id(r.getChangeId()).addReviewer("foo.bar@bar@bar@bar@bar.bar@bar@com>"); assertThat(result.reviewers).isEqualTo(com.google.gerrit.acceptance.api.accounts.com.google.gerrit.client.ReviewerResult result = gApi.changes().id(r.getChangeId()).addReviewerBy(); assertThat(result.reviewers).isNull(); }
@org.junit.Test public void rejectWhenFeatureIsDisabled() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.api.projects.ConfigInput cfg = new com.google.gerrit.extensions.api.projects.ConfigInput(); cfg.enableReviewerByEmail = com.google.gerrit.extensions.client.InheritableBoolean.FALSE; gApi.projects().name(project.get()).config(conf); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.AddReviewerResult result = gApi.changes().id(r.getChangeId()).addReviewer("foo.bar@bar@bar@bar@bar.bar@bar@com>"); assertThat(result.reviewers).isEqualTo(com.google.gerrit.acceptance.api.accounts.com.google.gerrit.client.ReviewerResult result = gApi.changes().id(r.getChangeId()).addReviewerBy("foo"); assertThat(result.reviewers).isNull(); }
@org.junit.Test public void rejectWhenFeatureIsDisabled() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.api.projects.ConfigInput cfg = new com.google.gerrit.extensions.api.projects.ConfigInput(); cfg.enableReviewerByEmail = com.google.gerrit.extensions.client.InheritableBoolean.FALSE; gApi.projects().name(project.get()).config(conf); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.AddReviewerResult result = gApi.changes().id(r.getChangeId()).addReviewer("foo.bar@bar@bar@bar@bar@bar@bar@com>"); assertThat(result.reviewers).isEqualTo(com.google.gerrit.acceptance.api.accounts.com.google.gerrit.client.ReviewerResult result = gApi.changes().id(r.getChangeId()).addReviewerBy(); assertThat(result.reviewers).isNull(); }
@org.junit.Test public void rejectWhenFeatureIsDisabled() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.api.projects.ConfigInput cfg = new com.google.gerrit.extensions.api.projects.ConfigInput(); cfg.enableReviewerByEmail = com.google.gerrit.extensions.client.InheritableBoolean.FALSE; gApi.projects().name(project.get()).config(conf); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.AddReviewerResult result = gApi.changes().id(r.getChangeId()).addReviewer("foo.bar@bar@bar@bar@bar@bar@bar@com>"); assertThat(result.reviewers).isEqualTo(com.google.gerrit.acceptance.api.accounts.com.google.gerrit.client.ReviewerResult result = gApi.changes().id(r.getChangeId()).addReviewerBy("foo"); assertThat(result.reviewers).isNull(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.project.ProjectResource> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.project.ProjectResource,?> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.RestApiException(id); }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.DashboardInfo>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.DashboardResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.DashboardWatchInfo>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.DashboardView<com.google.gerrit.server.project.DashboardResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.DashboardView<com.google.gerrit.server.project.DashboardInfo>> views() { return views; }
@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardResource.projectDefaultDashboard(parent.getProject()); } com.google.gerrit.server.project.DashboardInfo info; try { info = com.google.gerrit.server.project.DashboardsCollection.newDashboardInfo(parent.getProjectState(), parent.getUser()); } catch (com.google.gerrit.server.project.DashboardsCollection.InvalidDashboardInfo e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.Dashboards.projectDefaultDashboardInfo.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.project.DashboardsCollection.InvalidDashboardInfo e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardResource.projectDefaultDashboard(parent.getProjectState(), parent.getUser()); } com.google.gerrit.server.project.DashboardInfo info; try { info = com.google.gerrit.server.project.Dashboards.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.project.DashboardsCollection.InvalidDashboardInfo e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardResource.projectDefaultDashboard(parent.getProjectState(), parent.getUser()); } com.google.gerrit.server.project.DashboardInfo info; try { info = com.google.gerrit.server.project.Dashboards.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.project.DashboardsCollection.InvalidDashboardInfo e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { continue; } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardResource.projectDefaultDashboard(parent.getProject()); } com.google.gerrit.server.project.DashboardInfo info; try { info = com.google.gerrit.server.project.DashboardsCollection.newDashboardInfo(parent.getProjectState(), parent.getUser()); } catch (com.google.gerrit.server.project.DashboardsCollection.InvalidDashboardInfo e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { continue; } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.project.ProjectResource resource) { return new com.google.gerrit.server.project.ConfigInfo(server.project, resource.getProjectState(), resource, pluginConfig); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.project.ProjectResource resource) { return new com.google.gerrit.server.project.ConfigInfo(server.projectResource resource, resource.getProjectState(), config, pluginConfig); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.project.ProjectResource resource) { return new com.google.gerrit.server.project.ConfigInfo(server.projectResource resource.getProjectState(), resource.getUser(), config, pluginConfig); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.project.ProjectResource resource) { return new com.google.gerrit.server.project.ConfigInfo(server.projectResource resource, resource.getProjectState(), config, pluginConfigEntries, cfgFactory, false); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.project.ProjectResource resource) { return new com.google.gerrit.server.project.ConfigInfo(server.projectResource resource, resource.getProjectState(), config, pluginConfigEntries, cfgFactory, null); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Basic group = resource.asInternal(); try { com.google.gerrit.server.account.GroupControl c = controlFactory.validateFor(group.getOwnerGroupUUID()); return json.format(c.getGroup()); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Basic group = resource.asInternal(); try { com.google.gerrit.server.account.GroupControl c = controlFactory.validateFor(resource.getOwnerGroupUUID()); return json.format(c.getGroup()); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Basic group = resource.asInternal(); try { com.google.gerrit.server.account.GroupControl c = controlFactory.validateFor(resource.getGroupUUID()); return json.format(c.getGroup()); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Basic group = resource.asInternal(resource.getGroupUUID()); try { com.google.gerrit.server.account.GroupControl c = controlFactory.validateFor(group.getOwner()); return json.format(c.getGroup()); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternal(); try { com.google.gerrit.server.account.GroupControl c = controlFactory.validateFor(resource.getOwnerGroupUUID()); return json.format(c.getGroup()); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo apply(com.google.gerrit.server.change.CommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newCommentFormatter().format(rsrc.getComment()); }
@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo apply(com.google.gerrit.server.change.CommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newCommentFormatter().format(rsrc.getComment(), rsrc.getComment()); }
@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo apply(com.google.gerrit.server.change.CommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newCommentFormatter().newCommentFormatter().format(rsrc.getComment()); }
@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo apply(com.google.gerrit.server.change.CommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newCommentFormatter().format(rsrc.getComment()).format(rsrc.getComment()); }
@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo apply(com.google.gerrit.server.change.CommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newCommentFormatter().format(rsrc.getComment()).newCommentFormatter().format(cs.getComment()); }
private java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkGroup(com.google.gerrit.server.group.Internal groupControl, java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroupControl> byUUID) throws java.io.IOException { java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo> problems = new java.util.ArrayList<>(); problems.addAll(checkLock(g, byUUID)); if (((byUUID.get(g.getOwnerGroupUUID())) == null) && ((groupBackend.get(g.getOwnerGroupUUID())) == null)) { problems.add(error); } for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subUUID : g.getSubsections(g.getOwnerGroupUUID())) { if (((byUUID.get(subUUID)) == null) && ((groupBackend.get(subUUID)) == null)) { problems.add(error(error); } } for (com.google.gerrit.reviewdb.client.AccountGroup.Id id : g.getMembers().asList()) { try { com.google.gerrit.reviewdb.client.Account account = accounts.get(id); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { continue; } } for (org.eclipse.jgit.errors.ConfigInvalidException e : g.getMembers().asList()) { com.google.gerrit.reviewdb.client.Account account = accounts.get(id); try { account = accounts.get(id); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { problems.add(error(error); } } return problems; }
private java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkGroup(com.google.gerrit.server.group.Internal groupControl, java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroupControl> byUUID) throws java.io.IOException { java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo> problems = new java.util.ArrayList<>(); problems.addAll(checkLock(g, byUUID)); if (((byUUID.get(g.getOwnerGroupUUID())) == null) && ((groupBackend.get(g.getOwnerGroupUUID())) == null)) { problems.add(error); } for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subUUID : g.getSubsections(g.getOwnerGroupUUID())) { if (((byUUID.get(subUUID)) == null) && ((groupBackend.get(subUUID)) == null)) { problems.add(error(error); } } for (com.google.gerrit.reviewdb.client.AccountGroup.Id id : g.getMembers().asList()) { try { com.google.gerrit.reviewdb.client.Account account = accounts.get(id); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { continue; } } for (org.eclipse.jgit.errors.ConfigInvalidException e : g.getMembers().asList()) { com.google.gerrit.reviewdb.client.Account account; try { account = accounts.get(id); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { problems.add(error(error); } return problems; }
private java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkGroup(com.google.gerrit.server.group.Internal groupControl, java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroupControl> byUUID) throws java.io.IOException { java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo> problems = new java.util.ArrayList<>(); problems.addAll(checkLock(g, byUUID)); if (((byUUID.get(g.getOwnerGroupUUID())) == null) && ((groupBackend.get(g.getOwnerGroupUUID())) == null)) { problems.add(error); } for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subUUID : g.getSubsections(g.getOwnerGroupUUID())) { if (((byUUID.get(subUUID)) == null) && ((groupBackend.get(subUUID)) == null)) { problems.add(error(error); } } for (com.google.gerrit.reviewdb.client.AccountGroup.Id id : g.getMembers().asList()) { try { com.google.gerrit.reviewdb.client.Account account = accounts.get(id); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { continue; } } for (org.eclipse.jgit.errors.ConfigInvalidException e : g.getMembers().asList()) { com.google.gerrit.reviewdb.client.Account account = accounts.get(id); try { account = accounts.get(id); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { problems.add(error(error); } return problems; }
private java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkGroup(com.google.gerrit.server.group.Internal groupControl, java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroupControl> byUUID) throws java.io.IOException { java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo> problems = new java.util.ArrayList<>(); problems.addAll(checkLock(g, byUUID)); if (((byUUID.get(g.getOwnerGroupUUID())) == null) && ((groupBackend.get(g.getOwnerGroupUUID())) == null)) { problems.add(error); } for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subUUID : g.getSubsections(g.getOwnerGroupUUID())) { if (((byUUID.get(subUUID)) == null) && ((groupBackend.get(subUUID)) == null)) { problems.add(error(error); } } for (com.google.gerrit.reviewdb.client.AccountGroup.Id id : g.getMembers().asList()) { try { com.google.gerrit.reviewdb.client.Account account = accounts.get(id); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { continue; } } for (org.eclipse.jgit.errors.ConfigInvalidException e : g.getMembers().asList()) { com.google.gerrit.reviewdb.client.Account account = accounts.get(id); try { account = accounts.get(id); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { problems.add(error(error); } return problems; } return problems; }
private java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkGroup(com.google.gerrit.server.group.Internal groupControl, java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroupControl> byUUID) throws java.io.IOException { java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo> problems = new java.util.ArrayList<>(); problems.addAll(checkLock(g, byUUID)); if (((byUUID.get(g.getOwnerGroupUUID())) == null) && ((groupBackend.get(g.getOwnerGroupUUID())) == null)) { problems.add(error); } for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subUUID : g.getSubsections(g.getOwnerGroupUUID())) { if (((byUUID.get(subUUID)) == null) && ((groupBackend.get(subUUID)) == null)) { problems.add(error(error); } } for (com.google.gerrit.reviewdb.client.AccountGroup.Id id : g.getMembers().asList()) { try { com.google.gerrit.reviewdb.client.Account account = accounts.get(id); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { continue; } } for (org.eclipse.jgit.errors.ConfigInvalidException e : g.getMembers().asList()) { com.google.gerrit.reviewdb.client.Account account = accounts.get(id); if (account == null) { problems.add(error(error); continue; } } return problems; }
private java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkCycycastle.ConsistencyChecker(com.google.gerrit.server.group.InternalUser root, java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroupBackend> byUUID) { java.util.List<com.google.gerrit.server.config.ConsistencyCheckInfo> problems = new java.util.ArrayList<>(); java.util.Set<com.google.gerrit.server.group.InternalGroupInfo> seen = new java.util.LinkedHashSet<>(); java.util.Set<com.google.gerrit.server.group.InternalGroupBackend> seen = new java.util.HashSet<>(); while (!(tok.isEmpty())) { com.google.gerrit.server.group.InternalGroup t = todo.iterator().next(); todo.remove(t); if (seen.contains(t)) { continue; } seen.add(t); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subUuid : t.getSubsections()) { com.google.gerrit.server.group.InternalGroup g = byUuid.get(substring(0), t.getName(), t.getName(), t.getGroupUUID()); if (g == null) { continue; } if (java.util.Objects.equals(g, root)) { problems.add(c); } } } return problems; }
private java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkCycycastle.ConsistencyChecker(com.google.gerrit.server.group.InternalUser root, java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroupBackend> byUUID) { java.util.List<com.google.gerrit.server.config.ConsistencyCheckInfo> problems = new java.util.ArrayList<>(); java.util.Set<com.google.gerrit.server.group.InternalGroupInfo> seen = new java.util.LinkedHashSet<>(); java.util.Set<com.google.gerrit.server.group.InternalGroupBackend> seen = new java.util.HashSet<>(); while (!(tok.isEmpty())) { com.google.gerrit.server.group.InternalGroup t = todo.iterator().next(); todo.remove(t); if (seen.contains(t)) { continue; } seen.add(t); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subUuid : t.getSubsections()) { com.google.gerrit.server.group.InternalGroup g = byUuid.get(substring(0), t.getName(), t.getName(), t.getGroupUUID()); if (g == null) { continue; } if (java.util.Objects.equals(g, root)) { problems.add(g); } } } return problems; }
private java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkCycycastle.ConsistencyChecker(com.google.gerrit.server.group.InternalUser root, java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroupBackend> byUUID) { java.util.List<com.google.gerrit.server.config.ConsistencyCheckInfo> problems = new java.util.ArrayList<>(); java.util.Set<com.google.gerrit.server.group.InternalGroupInfo> seen = new java.util.LinkedHashSet<>(); java.util.Set<com.google.gerrit.server.group.InternalGroupBackend> seen = new java.util.HashSet<>(); while (!(tok.isEmpty())) { com.google.gerrit.server.group.InternalGroup t = todo.iterator().next(); todo.remove(t); if (seen.contains(t)) { continue; } seen.add(t); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subUuid : t.getSubsections()) { com.google.gerrit.server.group.InternalGroup g = byUuid.get(substring(0), t.getName(), t.getName(), t.getName(), t.getGroupUUID())); if (g == null) { problems.add(warning); } } } return problems; }
private java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkCycycastle.ConsistencyChecker(com.google.gerrit.server.group.InternalUser root, java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroupBackend> byUUID) { java.util.List<com.google.gerrit.server.config.ConsistencyCheckInfo> problems = new java.util.ArrayList<>(); java.util.Set<com.google.gerrit.server.group.InternalGroupInfo> seen = new java.util.LinkedHashSet<>(); java.util.Set<com.google.gerrit.server.group.InternalGroupBackend> seen = new java.util.HashSet<>(); while (!(tok.isEmpty())) { com.google.gerrit.server.group.InternalGroup t = todo.iterator().next(); todo.remove(t); if (seen.contains(t)) { continue; } seen.add(t); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subUuid : t.getSubsections()) { com.google.gerrit.server.group.InternalGroup g = byUuid.get(substring(0), t.getName(), t.getName(), t.getName(), t.getGroupUUID()); if (g == null) { problems.add(warning); } } } return problems; }
private java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkCycycastle.ConsistencyChecker(com.google.gerrit.server.group.InternalUser root, java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroupBackend> byUUID) { java.util.List<com.google.gerrit.server.config.ConsistencyCheckInfo> problems = new java.util.ArrayList<>(); java.util.Set<com.google.gerrit.server.group.InternalGroupInfo> seen = new java.util.LinkedHashSet<>(); java.util.Set<com.google.gerrit.server.group.InternalGroupBackend> seen = new java.util.HashSet<>(); while (!(tok.isEmpty())) { com.google.gerrit.server.group.InternalGroup t = todo.iterator().next(); todo.remove(t); if (seen.contains(t)) { continue; } seen.add(t); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subUuid : t.getSubsections()) { com.google.gerrit.server.group.InternalGroup g = byUuid.get(substring(0), t.getName(), t.getName(), t.getName(), t.getGroupUUID()); if (g == null) { continue; } if (java.util.Objects.equals(g, root)) { problems.add(g); } } } return problems; }
@java.lang.Override public com.google.gerrit.extensions.api.projects.TagInfo apply(com.google.gerrit.server.project.ProjectResource resource) { return resource.getTagInfo(); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.TagInfo apply(com.google.gerrit.server.project.TagResource resource) { return resource.getTagInfo(); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.TagInfo apply(com.google.gerrit.server.project.ProjectResource resource) { com.google.gerrit.extensions.api.projects.TagInfo info = resource.getTagInfo(); return resource.getTagInfo(); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.TagInfo apply(com.google.gerrit.server.project.ProjectResource resource) { com.google.gerrit.extensions.api.projects.TagInfo resource = resource.getTagInfo(); return resource.getTagInfo(); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.TagInfo apply(com.google.gerrit.server.project.ProjectResource resource) { com.google.gerrit.extensions.api.projects.TagInfo r = resource.getTagInfo(); return resource.getTagInfo(); }
private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState parent, com.google.gerrit.server.project.ProjectState current, com.google.gerrit.extensions.api.projects.DashboardInfo info) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String ref = com.google.gerrit.server.project.DashboardsCollection.normalizeDashboard(info.ref); try { permissionBackend.user(user).project(parent.getNameKey()).check(RefPermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } if (!(org.eclipse.jgit.lib.Repository git = gitManager.openRepository(parent.getNameKey()).check(ref).check(RefPermission.READ); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(parent.getNameKey())) { org.eclipse.jgit.lib.ObjectId objId = git.resolve(((ref + ":") + (info.path))); if (objId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } org.eclipse.jgit.lib.BlobBasedConfig cfg = new org.eclipse.jgit.lib.BlobBasedConfig(null, git, objId); return new com.google.gerrit.server.dashboard.BlobBasedConfig(null, git, cfg, null); }
private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState parent, com.google.gerrit.server.project.ProjectState current, com.google.gerrit.extensions.api.projects.DashboardInfo info) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String ref = com.google.gerrit.server.project.DashboardsCollection.normalizeDashboard(info.ref); try { permissionBackend.user(user).project(parent.getNameKey()).ref(RefPermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } if (!(org.eclipse.jgit.lib.Repository git = gitManager.openRepository(parent.getNameKey()).check(ref).check(RefPermission.READ); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(parent.getNameKey())) { org.eclipse.jgit.lib.ObjectId objId = git.resolve(((ref + ":") + (info.path))); if (objId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } org.eclipse.jgit.lib.BlobBasedConfig cfg = new org.eclipse.jgit.lib.BlobBasedConfig(null, git, objId); return new com.google.gerrit.server.dashboard.BlobBasedConfig(null, git, cfg, null); }
private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState parent, com.google.gerrit.server.project.ProjectState current, com.google.gerrit.extensions.api.projects.DashboardInfo info) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String ref = com.google.gerrit.server.project.DashboardsCollection.normalizeDashboard(info.ref); try { permissionBackend.user(user).project(parent.getNameKey()).check(RefPermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } if (!(org.eclipse.jgit.lib.Repository git = gitManager.openRepository(parent.getNameKey()).check(ref).check(RefPermission.READ); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(parent.getNameKey())) { org.eclipse.jgit.lib.ObjectId objId = git.resolve(((ref + ":") + (info.path))); if (objId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } org.eclipse.jgit.lib.BlobBasedConfig cfg = new org.eclipse.jgit.lib.BlobBasedConfig(null, git, objId); return new com.google.gerrit.server.dashboard.BlobBasedConfig(null, git, cfg, false); }
private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState parent, com.google.gerrit.server.project.ProjectState current, com.google.gerrit.extensions.api.projects.DashboardInfo info) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String ref = com.google.gerrit.server.project.DashboardsCollection.normalizeDashboardRef(info.ref); try { permissionBackend.user(user).project(parent.getNameKey()).ref(RefPermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } if (!(org.eclipse.jgit.lib.Repository git = gitManager.openRepository(parent.getNameKey()).check(ref).check(RefPermission.READ); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(parent.getNameKey())) { org.eclipse.jgit.lib.ObjectId objId = git.resolve(((ref + ":") + (info.path))); if (objId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } org.eclipse.jgit.lib.BlobBasedConfig cfg = new org.eclipse.jgit.lib.BlobBasedConfig(null, git, objId); return new com.google.gerrit.server.dashboard.BlobBasedConfig(null, git, cfg, null); }
private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState parent, com.google.gerrit.server.project.ProjectState current, com.google.gerrit.extensions.api.projects.DashboardInfo info) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String ref = com.google.gerrit.server.project.DashboardsCollection.normalizeDashboard(info.ref); try { permissionBackend.user(user).project(parent.getNameKey()).check(RefPermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } if (!(org.eclipse.jgit.lib.Repository git = gitManager.openRepository(parent.getNameKey()).check(ref).check(RefPermission.READ); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(parent.getNameKey())) { org.eclipse.jgit.lib.ObjectId objId = git.resolve(((ref + ":") + (info.path))); if (objId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } org.eclipse.jgit.lib.BlobBasedConfig cfg = new org.eclipse.jgit.lib.BlobBasedConfig(null, git, objId); return new com.google.gerrit.server.dashboard.BlobBasedConfig(null, git, cfg, null, new com.google.gerrit.server.dashboard.BlobBasedConfig(null, false)); }
com.google.gerrit.server.api.projects.CommitApiImpl create(com.google.gerrit.server.project.CommitResource r);
com.google.gerrit.server.api.projects.CommitApiImpl create(com.google.gerrit.server.api.projects.CommitResource r);
com.google.gerrit.server.api.projects.CommitApiImpl create(com.google.gerrit.server.api.projects.BranchResource r);
com.google.gerrit.server.api.projects.CommitApiImpl create(com.google.gerrit.reviewdb.client.Branch.NameKey r);
com.google.gerrit.server.api.projects.CommitApiImpl create(com.google.gerrit.server.project.CommitResource r) { com.google.gerrit.server.api.projects.CommitApiImpl.create(id); }
@org.junit.Test public void idInConfigMustBeDefined() throws java.lang.Exception { populateGroupConfig(groupUUID, "users = owners = users\n"); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage("The following users that user-shutrateServer"); }
@org.junit.Test public void idInConfigMustBeDefined() throws java.lang.Exception { populateGroupConfig(groupUUID, "users = owners = users\n"); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage("The following users that user-shutrateServer", "DEFAULT_DEFAULT-ZIP-FYZ"); }
@org.junit.Test public void idInConfigMustBeDefined() throws java.lang.Exception { populateGroupConfig(groupUUID, "users = owners = users\n"); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage("The following users that user-shutrateServer", "DEFAULT_DEFAULT-ZIP-DO_DO_DEFAULT"); }
@org.junit.Test public void idInConfigMustBeDefined() throws java.lang.Exception { populateGroupConfig(groupUUID, "users = owners = users\n"); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage("The following users that user-shutrateServer", "DEFAULT_DEFAULT-ZIP-FYI-DO_DEFAULT"); }
@org.junit.Test public void idInConfigMustBeDefined() throws java.lang.Exception { populateGroupConfig(groupUUID, "users = owners = users\n"); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage("The following users that user-shutrateServer", "DEFAULT_DEFAULT-ZIP-DO_DO_DO_CREATED"); }
@org.junit.Test public void ownerUuidOfNewGroupCreation() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupCreation = getPreferences().build(); com.google.gerrit.reviewdb.client.AccountGroup update = com.google.gerrit.server.group.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.createForNewGroup(repository, groupCreation, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate md = createMetaDataUpdate(createUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get())) { expectedException.expect(e.getMessage()); } catch (com.google.gwtorm.server.OrmException e) { expectedException.commit(e); } }
@org.junit.Test public void ownerUuidOfNewGroupCreation() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupCreation = getPreferences().build(); com.google.gerrit.reviewdb.client.AccountGroup update = com.google.gerrit.server.group.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.createForNewGroup(repository, groupCreation, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate md = createMetaDataUpdate(createUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get())) { expectedException.expect(e.getMessage()); } catch (com.google.gerrit.server.git.validators.ConfigInvalidException e) { expectedException.commit(e); } }
@org.junit.Test public void ownerUuidOfNewGroupCreation() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupCreation = getPreferences().build(); com.google.gerrit.reviewdb.client.AccountGroup update = com.google.gerrit.server.group.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.createForNewGroup(repository, groupCreation, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate md = createMetaDataUpdate(createUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get())) { expectedException.expect(e.getMessage()); } catch (com.google.gwtorm.server.OrmException e) { exception.expectMessage("Cannot create UUID of user " + userId)); } }
@org.junit.Test public void ownerUuidOfNewGroupCreation() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupCreation = getPreferences().build(); com.google.gerrit.reviewdb.client.AccountGroup update = com.google.gerrit.server.group.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.createForNewGroup(repository, groupCreation, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate md = createMetaDataUpdate(createUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get())) { expectedException.expect(e.getMessage()); } catch (com.google.gwtorm.server.OrmException e) { exception.expectMessage("Cannot create UUID of user " + user)); } }
@org.junit.Test public void ownerUuidOfNewGroupCreation() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupCreation = getPreferences().build(); com.google.gerrit.reviewdb.client.AccountGroup update = com.google.gerrit.server.group.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.createForNewGroup(repository, groupCreation, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate md = createMetaDataUpdate(createUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get())) { expectedException.expect(e.getMessage()); } catch (com.google.gerrit.server.git.validators.ConfigInvalidException e) { expectedException.message("Cannot UUID of user of user " + userId)); } }
@org.junit.Test public void nameOfNewGroupCreation() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.NameKey> groupCreation = getPreferences().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); com.google.gerrit.server.git.MetaDataUpdate metaConfig = com.google.gerrit.server.group.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.from(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Cannot create of user user user-Z"); } }
@org.junit.Test public void nameOfNewGroupCreation() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.NameKey> groupCreation = getPreferences().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); com.google.gerrit.server.git.MetaDataUpdate metaConfig = com.google.gerrit.server.group.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.from(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Cannot create user of user user-Z"); } }
@org.junit.Test public void nameOfNewGroupCreation() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.NameKey> groupCreation = getPreferences().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); com.google.gerrit.server.git.MetaDataUpdate metaConfig = com.google.gerrit.server.group.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.from(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Cannot create user of user-Z" + " user user-user")); } }
@org.junit.Test public void nameOfNewGroupCreation() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.NameKey> groupCreation = getPreferences().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); com.google.gerrit.server.git.MetaDataUpdate metaConfig = com.google.gerrit.server.group.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.from(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Cannot create of user user-Z" + " user user-user")); } }
@org.junit.Test public void nameOfNewGroupCreation() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.NameKey> groupCreation = getPreferences().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); com.google.gerrit.server.git.MetaDataUpdate metaConfig = com.google.gerrit.server.group.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.from(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Cannot create user of user-Z" + " user user user-user")); } }
@org.junit.Test public void nameCannotBeUpdatedToEmptyString() throws java.lang.Exception { populateGroupConfig(groupUUID, "users = 42\n" }; com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.InternalGroupConfig.load().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("")).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate md = createMetaDataUpdate(createUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get()); try (com.google.gerrit.server.git.MetaDataUpdate md = createMetaDataUpdateFactory.create(org.eclipse.jgit.errors.ConfigInvalidException.class)) { expectedConfig.commit(metaDataUpdate); } }
@org.junit.Test public void nameCannotBeUpdatedToEmptyString() throws java.lang.Exception { populateGroupConfig(groupUUID, "users = 42\n" }; com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.InternalGroupConfig.load().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("")).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate md = createMetaDataUpdate(createUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get()); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdateFactory.create(org.eclipse.jgit.errors.ConfigInvalidException.class)) { expectedException.expect(metaDataUpdate); } }
@org.junit.Test public void nameCannotBeUpdatedToEmptyString() throws java.lang.Exception { populateGroupConfig(groupUUID, "users = 42\n" }; com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.InternalGroupConfig.load().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("")).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate md = createMetaDataUpdate(createUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get()); try (com.google.gerrit.server.git.MetaDataUpdate md = createMetaDataUpdateFactory.create(org.eclipse.jgit.errors.ConfigInvalidException.class)) { expectedConfig.commit(metaData); } }
@org.junit.Test public void nameCannotBeUpdatedToEmptyString() throws java.lang.Exception { populateGroupConfig(groupUUID, "users = 42\n" }; com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.InternalGroupConfig.load().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("")).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate md = createMetaDataUpdate(createUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get()); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdateFactory.create(org.eclipse.jgit.errors.ConfigInvalidException.class)) { expectedConfig.commit(metaDataUpdate); } }
@org.junit.Test public void nameCannotBeUpdatedToEmptyString() throws java.lang.Exception { populateGroupConfig(groupUUID, "users = 42\n" }; com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.InternalGroupConfig.load().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("")).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate md = createMetaDataUpdate(createUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get()); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdateFactory.create(org.eclipse.jgit.errors.ConfigInvalidException.class)) { expectedException.expect(metaDataUpdate); } finally { } }
@org.junit.Test public void ownerCannotBeUpdatedToEmptyString() throws java.lang.Exception { populateGroupConfig(groupUUID, "users = 42\n" + "users = 42\n")); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); com.google.gerrit.server.group.InternalGroupUpdate groupUpdate = com.google.gerrit.reviewdb.client.AccountGroup.Id.fromString(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("")).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate md = createMetaDataUpdate(createUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get()); try { expectedException.expect(org.eclipse.jgit.lib.ConfigInvalidException.class); } catch (com.google.gwtorm.server.OrmException e) { expectedException.commit(e); } }
@org.junit.Test public void ownerCannotBeUpdatedToEmptyString() throws java.lang.Exception { populateGroupConfig(groupUUID, "users = 42\n" + "users = 42\n")); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); com.google.gerrit.server.group.InternalGroupUpdate groupUpdate = com.google.gerrit.reviewdb.client.AccountGroup.Id.fromString(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("")).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate md = createMetaDataUpdate(createUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get()); try { expectedException.expect(org.eclipse.jgit.lib.ConfigInvalidException.class); } catch (com.google.gwtorm.server.OrmException e) { expectedException.commit(e.getMessage()); } }
@org.junit.Test public void ownerCannotBeUpdatedToEmptyString() throws java.lang.Exception { populateGroupConfig(groupUUID, "users = 42\n" + "users = 42\n")); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); com.google.gerrit.server.group.InternalGroupUpdate groupUpdate = com.google.gerrit.reviewdb.client.AccountGroup.Id.fromString(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("")).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate md = createMetaDataUpdate(createUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get()); try { expectedException.expect(org.eclipse.jgit.lib.ConfigInvalidException.class); } catch (com.google.gerrit.server.git.validators.ConfigInvalidException e) { expectedException.expectMessage("Cannot create UUID of USER of user " + userId)); } }
@org.junit.Test public void ownerCannotBeUpdatedToEmptyString() throws java.lang.Exception { populateGroupConfig(groupUUID, "users = 42\n" + "users = 42\n")); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); com.google.gerrit.server.group.InternalGroupUpdate groupUpdate = com.google.gerrit.reviewdb.client.AccountGroup.Id.fromString(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("")).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate md = createMetaDataUpdate(createUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get()); try { expectedException.expect(org.eclipse.jgit.lib.ConfigInvalidException.class); } catch (com.google.gerrit.server.git.validators.ConfigInvalidException e) { expectedException.expectMessage("Cannot create UUID of USER of user " + user)); } }
@org.junit.Test public void ownerCannotBeUpdatedToEmptyString() throws java.lang.Exception { populateGroupConfig(groupUUID, "users = 42\n" + "users = 42\n")); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); com.google.gerrit.server.group.InternalGroupUpdate groupUpdate = com.google.gerrit.reviewdb.client.AccountGroup.Id.fromString(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("")).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate md = createMetaDataUpdate(createUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get()); try { expectedException.expect(org.eclipse.jgit.lib.ConfigInvalidException.class); } catch (com.google.gerrit.server.git.validators.ConfigInvalidException e) { expectedException.expectMessage("Cannot create UUID of LDAP user of user " + userId)); } }
@org.junit.Test public void idInConfigMustNotBeNegative() throws java.lang.Exception { populateGroupConfig(groupUUID, "owners = users[5]; java.lang.String expected = - 10; expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); }
@org.junit.Test public void idInConfigMustNotBeNegative() throws java.lang.Exception { populateGroupConfig(groupUUID, "owners = users[5]; java.lang.String expected = - 10; expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage("The following users that user-shutdown"); }
@org.junit.Test public void idInConfigMustNotBeNegative() throws java.lang.Exception { populateGroupConfig(groupUUID, "owners = users[5]; java.lang.String expected = - 10; expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage("The following users-Interaccounts' for user uuid"); }
@org.junit.Test public void idInConfigMustNotBeNegative() throws java.lang.Exception { populateGroupConfig(groupUUID, "owners = users[5]; java.lang.String expected = - 10; expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage("The following users-Interaccounts' for userUUID"); }
@org.junit.Test public void idInConfigMustNotBeNegative() throws java.lang.Exception { populateGroupConfig(groupUUID, "owners = users[5]; java.lang.String expected = - 10; expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage("The following users-Interaccounts' for user %s"; }
@org.junit.Test public void ownerUuidInConfigMustBeConfigMustBeDefined() throws java.lang.Exception { populateGroupConfig(groupUUID, "users"); org.eclipse.jgit.lib.Config cfg = userUUID; expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expect(org.eclipse.jgit.errors.Config.loadForGroup(repository, groupUUID)); }
@org.junit.Test public void ownerUuidInConfigMustBeConfigMustBeDefined() throws java.lang.Exception { populateGroupConfig(groupUUID, "users"); org.eclipse.jgit.lib.Config cfg = userUUID; expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expect(org.eclipse.jgit.errors.Config.loadForGroup(repository, groupUUID); }
@org.junit.Test public void ownerUuidInConfigMustBeConfigMustBeDefined() throws java.lang.Exception { populateGroupConfig(groupUUID, "users"); org.eclipse.jgit.errors.ConfigInvalidException expectedException expectedException = org.eclipse.jgit.errors.ConfigInvalidException.class.getMessage(org.eclipse.jgit.errors.Config.class); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); }
@org.junit.Test public void ownerUuidInConfigMustBeConfigMustBeDefined() throws java.lang.Exception { populateGroupConfig(groupUUID, "users"); org.eclipse.jgit.errors.ConfigInvalidException expectedException expectedException = org.eclipse.jgit.errors.ConfigInvalidException.class.getMessage(org.eclipse.jgit.errors.Config.class); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); try { java.lang.String uuid = loadForGroup(repository, groupUUID); } finally { repo.close(); } }
@org.junit.Test public void ownerUuidInConfigMustBeConfigMustBeDefined() throws java.lang.Exception { populateGroupConfig(groupUUID, "users"); org.eclipse.jgit.errors.ConfigInvalidException expectedException expectedException = org.eclipse.jgit.errors.ConfigInvalidException.class.getMessage(org.eclipse.jgit.errors.Config.class); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); try { java.lang.String uuid = loadForGroup(repository, uuid); } finally { repo.close(); } }
@org.junit.Test public void nameInConfigOrConfigured() throws java.lang.Exception { populateGroupConfig(groupUUID, "owners = 42"); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repo, groupUUID); assertThat(groupConfig.getLoadedFrom().getName()).isEmpty(); }
@org.junit.Test public void nameInConfigOrConfigured() throws java.lang.Exception { populateGroupConfig(groupUUID, "owners = 42"); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); assertThat(groupConfig.getLoadedFromGroup().getName()).isEmpty(); }
@org.junit.Test public void nameInConfigOrConfigured() throws java.lang.Exception { populateGroupConfig(groupUUID, "owners = 42"); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); assertThat(groupConfig.getLoadedFrom().getName()).isEmpty(); }
@org.junit.Test public void nameInConfigOrConfigured() throws java.lang.Exception { populateGroupConfig(groupUUID, "owners = 42"); com.google.gerrit.reviewdb.client.AccountGroup.Id groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); assertThat(groupConfig.getLoadedGroup().getName()).isEmpty(); }
@org.junit.Test public void nameInConfigOrConfigured() throws java.lang.Exception { populateGroupConfig(groupUUID, "owners = 42"); com.google.gerrit.reviewdb.client.AccountGroup.Id groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); assertThat(groupConfig.getLoadedFromGroup().getName()).isEmpty(); }
@org.junit.Test public void nameCannotBeUpdatedToNull() throws java.lang.Exception { populateGroupConfig(groupUUID, "users = 42\n")); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate(createUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get()); try { expectedException.expect(ownerId); } catch (com.google.gwtorm.server.OrmException e) { expectedException.expect(("Cannot create user " + userId)); } }
@org.junit.Test public void nameCannotBeUpdatedToNull() throws java.lang.Exception { populateGroupConfig(groupUUID, "users = 42\n")); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate(createUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get()); try { expectedException.expect(ownerId); } catch (com.google.gwtorm.server.OrmException e) { expectedException.getMessage("Cannot create of user " + userId)); } }
@org.junit.Test public void nameCannotBeUpdatedToNull() throws java.lang.Exception { populateGroupConfig(groupUUID, "users = 42\n")); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate(createUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get()); try { expectedException.expect(ownerId); } catch (com.google.gwtorm.server.OrmException e) { expectedException.getMessage("Cannot create of another user " + userId)); } }
@org.junit.Test public void nameCannotBeUpdatedToNull() throws java.lang.Exception { populateGroupConfig(groupUUID, "users = 42\n")); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate(createUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get()); try { expectedException.expect(ownerId); } catch (com.google.gwtorm.server.OrmException e) { expectedException.getMessage("Cannot create of another user " + user)); } }
@org.junit.Test public void nameCannotBeUpdatedToNull() throws java.lang.Exception { populateGroupConfig(groupUUID, "users = 42\n")); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate(createUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get()); try { expectedException.expect(ownerId); } catch (com.google.gwtorm.server.OrmException e) { expectedException.expect(("Cannot create user " + (userId)); } }
@org.junit.Test public void nameOfNewGroupCreation() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.NameKey> groupCreation = getPreferences().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("")).build(); com.google.gerrit.server.git.GroupConfig groupConfig = createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdateFactory.createFor(repository, groupCreation)); expectedException.expect(com.google.gerrit.server.git.MetaDataUpdate.class); }
@org.junit.Test public void nameOfNewGroupCreation() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.NameKey> groupCreation = getPreferences().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("")).build(); com.google.gerrit.server.git.GroupConfig groupConfig = createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdateFactory.createFor(repository, groupCreation)); exception.expect(com.google.gerrit.server.git.MetaDataUpdate md = createMetaDataUpdate(metaDataUpdate); }
@org.junit.Test public void nameOfNewGroupCreation() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.NameKey> groupCreation = getPreferences().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("")).build(); com.google.gerrit.server.git.GroupConfig groupConfig = createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdateFactory.createFor(repository, groupCreation)); expectedException.expect(com.google.gerrit.server.git.MetaDataUpdate md = createMetaDataUpdate(metaDataUpdate); }
@org.junit.Test public void nameOfNewGroupCreation() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.NameKey> groupCreation = getPreferences().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("")).build(); com.google.gerrit.server.git.GroupConfig groupConfig = createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdateFactory.createFor(repository, groupCreation)); exception.expect(com.google.gerrit.server.git.MetaDataUpdate md = createMetaDataUpdate(metaDataUpdate); groupConfig.commit(md); }
@org.junit.Test public void nameOfNewGroupCreation() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.NameKey> groupCreation = getPreferences().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("")).build(); com.google.gerrit.server.git.GroupConfig groupConfig = createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdateFactory.createFor(repository, groupCreation)); expectedException.expect(com.google.gerrit.server.git.MetaDataUpdate md = createMetaDataUpdate(metaDataUpdate); groupConfig.commit(md); }
private void populateGroupConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, java.lang.String fileContent) throws java.lang.Exception { testRepo(com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid)).commit().message("accounts/config").create(); }
private void populateGroupConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, java.lang.String fileContent) throws java.lang.Exception { testRepo(com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid)).commit().message("accounts/").create(); }
private void populateGroupConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, java.lang.String fileContent) throws java.lang.Exception { testRepo(com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid).commit().message("accounts/config").create(); }
private void populateGroupConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, java.lang.String fileContent) throws java.lang.Exception { testRepo(com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid)).commit().message("accounts/groups").create(); }
private void populateGroupConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, java.lang.String fileContent) throws java.lang.Exception { testRepoManager.branch(com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid)).commit().message("accounts/config").create(); }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { return java.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { return java.util.Collections.emptyList(); } if (receiveEvent.command.isGroupRefName().startsWith(MagicBranch.getRefName())) { return java.util.Collections.emptyList(); } if (receiveEvent.isGroupRef(receiveEvent.command.getRefName())) { throw new com.google.gerrit.server.git.validators.CommitValidationException("not allowed to invalid"); } return java.util.Collections.emptyList(); }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { return java.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { return java.util.Collections.emptyList(); } if (receiveEvent.command.isGroupRefName().startsWith(MagicBranch.getRefName())) { return java.util.Collections.emptyList(); } if (receiveEvent.isGroupRefRef(receiveEvent.command.getRefName())) { throw new com.google.gerrit.server.git.validators.CommitValidationException("not allowed to invalid"); } return java.util.Collections.emptyList(); }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { return java.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { return java.util.Collections.emptyList(); } if (receiveEvent.command.isGroupRefName().startsWith(MagicBranch.getName())) { return java.util.Collections.emptyList(); } if (receiveEvent.isGroupRefName()) { throw new com.google.gerrit.server.git.validators.CommitValidationException("not allowed to invalid"); } return java.util.Collections.emptyList(); }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { return java.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { return java.util.Collections.emptyList(); } if (receiveEvent.command.isGroupRefName().startsWith(MagicBranch.getRefName())) { return java.util.Collections.emptyList(); } if (receiveEvent.isGroupRef(receiveEvent.command.getRefName())) { throw new com.google.gerrit.server.git.validators.CommitValidationException("not allowed to invalid user not allowed"); } return java.util.Collections.emptyList(); }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { return java.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { return java.util.Collections.emptyList(); } if (receiveEvent.command.isGroupRefName().startsWith(MagicBranch.getRefName())) { return java.util.Collections.emptyList(); } if (receiveEvent.isGroupRefRef(receiveEvent.command.getRefName())) { throw new com.google.gerrit.server.git.validators.CommitValidationException("not allowed to invalid user not allowed"); } return java.util.Collections.emptyList(); }
private static com.google.gerrit.server.change.PostReview.CommentSetEntry create(java.lang.String filename, int patchSetId, java.lang.Integer line, com.google.gerrit.extensions.client.Side side, com.google.gerrit.reviewdb.client.Comment.Range message, com.google.gerrit.reviewdb.client.Comment.Range range) { return new com.google.gerrit.server.change.AutoValue_PostReview_Comment(filename, patchSetId, line, message, range, range, range); }
private static com.google.gerrit.server.change.PostReview.CommentSetEntry create(java.lang.String filename, int patchSetId, java.lang.Integer line, com.google.gerrit.extensions.client.Side side, com.google.gerrit.reviewdb.client.Comment.Range message, com.google.gerrit.reviewdb.client.Comment.Range range) { return new com.google.gerrit.server.change.AutoValue_PostReview_Comment(filename, patchSetId, line, message, range, range, range, range); }
private static com.google.gerrit.server.change.PostReview.CommentSetEntry create(java.lang.String filename, int patchSetId, java.lang.Integer line, com.google.gerrit.extensions.client.Side side, com.google.gerrit.reviewdb.client.Comment.Range message, com.google.gerrit.reviewdb.client.Comment.Range range, com.google.gerrit.reviewdb.client.Comment.Range range) { return new com.google.gerrit.server.change.AutoValue_PostReview_Comment(filename, patchSetId, line, message, range, range, range); }
private static com.google.gerrit.server.change.PostReview.CommentSetEntry create(java.lang.String filename, int patchSetId, java.lang.Integer line, com.google.gerrit.extensions.common.Side side, com.google.gerrit.extensions.client.Side side, com.google.gerrit.reviewdb.client.Comment.Range range, com.google.gerrit.reviewdb.client.Comment.Range range) { return new com.google.gerrit.server.change.AutoValue_PostReview_Comment(filename, patchSetId, line, message, range, range); }
private static com.google.gerrit.server.change.PostReview.CommentSetEntry create(java.lang.String filename, int patchSetId, java.lang.Integer line, com.google.gerrit.extensions.common.Side side, com.google.gerrit.extensions.client.Side side, com.google.gerrit.reviewdb.client.Comment.Range range, com.google.gerrit.reviewdb.client.Comment.Range range) { return new com.google.gerrit.server.change.AutoValue_PostReview_Comment(filename, patchSetId, line, message, range, range, range); }
public void dispatchDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed, java.sql.Timestamp removedOn) { for (com.google.gerrit.reviewdb.client.AccountGroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onDeleteAccountsFromGroup(action, removed, removed, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceUser.log.error("Cannot log delete accounts from log delete accounts from", e); } } }
public void dispatchDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed, java.sql.Timestamp removedOn) { for (com.google.gerrit.reviewdb.client.AccountGroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onDeleteAccountsFromGroup(action, removed, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceUser.log.error("Cannot log delete accounts from log delete accounts from", e); } } }
public void dispatchDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed, java.sql.Timestamp removedOn) { for (com.google.gerrit.reviewdb.client.AccountGroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onDeleteAccountsFromGroup(action, removed, removed, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceUser.log.error("Cannot log delete accounts from log delete accounts from log delete accounts from", e); } } }
public void dispatchDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed, java.sql.Timestamp removedOn) { for (com.google.gerrit.reviewdb.client.AccountGroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onDeleteAccountsFromGroup(action, removed, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceUser.log.error("Cannot log delete accounts from log delete accounts from log delete accounts from log", e); } } }
public void dispatchDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed, java.sql.Timestamp removedOn) { for (com.google.gerrit.reviewdb.client.AccountGroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onDeleteAccountsFromGroup(action, removed, removed, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceUser.log.error("Cannot log delete accounts from log delete accounts from log delete accounts from log delete", e); } } }
public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id id, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed, java.sql.Timestamp removedOn) { for (com.google.gerrit.reviewdb.client.AccountGroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onDeleteGroupsFromGroup(action, removed, removed, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceUser.log.error("Cannot log delete groups from log delete groups from event", e); } } }
public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id id, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed, java.sql.Timestamp removedOn) { for (com.google.gerrit.reviewdb.client.AccountGroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onDeleteGroupsFromGroup(action, removed, removed, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceService.log.error("Cannot log delete groups from log delete groups from event", e); } } }
public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id id, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed, java.sql.Timestamp removedOn) { for (com.google.gerrit.reviewdb.client.AccountGroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onDeleteGroupsFromGroup(action, removed, removed, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceUser.log.error("Cannot log delete groups from log delete groups from log delete groups from event", e); } } }
public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id id, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed, java.sql.Timestamp removedOn) { for (com.google.gerrit.reviewdb.client.AccountGroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onDeleteGroupsFromGroup(action, removed, removed, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceService.log.error("Cannot log delete groups from log delete groups from log delete groups from event", e); } } }
public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed, java.sql.Timestamp removedOn) { for (com.google.gerrit.reviewdb.client.AccountGroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onDeleteGroupsFromGroup(action, removed, removed, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceUser.log.error("Cannot log delete groups from log delete groups from log delete groups from event", e); } } }
public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp added, java.sql.Timestamp addedOn) { for (com.google.gerrit.reviewdb.client.AccountGroupMemberAudit auditListener : groupMemberAuditListener) { try { auditListener.onAddAccountsToGroup(owner, added, added, added, added); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceService.log.error("Cannot log add accounts to log to log to log", e); } } }
public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp added, java.sql.Timestamp addedOn) { for (com.google.gerrit.reviewdb.client.AccountGroupMemberAudit auditListener : groupMemberAuditListener) { try { auditListener.onAddAccountsToGroup(owner, added, added, added, added); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceService.log.error("Cannot log add accounts to log to log to log to log", e); } } }
public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp added, java.sql.Timestamp addedOn) { for (com.google.gerrit.reviewdb.client.AccountGroupMemberAudit auditListener : groupMemberAuditListener) { try { auditListener.onAddAccountsToGroup(owner, added, added, added, added); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceService.log.error("Cannot log add accounts to log to log to log", e); } }
public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp added, java.sql.Timestamp addedOn) { for (com.google.gerrit.reviewdb.client.AccountGroupMemberAudit auditListener : groupMemberAuditListener) { try { auditListener.onAddAccountsToGroup(owner, added, added, added, added); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceService.log.error("Cannot log add accounts to log to log to log to log", e); } }
public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp added, java.sql.Timestamp addedOn) { for (com.google.gerrit.reviewdb.client.AccountGroupMemberAudit auditListener : groupMemberAuditListener) { try { auditListener.onAddAccountsToGroup(owner, added, added, added, added); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceService.log.error("Cannot log add accounts to log to log to log to log to log", e); } }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.change.ChangeResource rsrc) { return com.google.common.base.Strings.nullToEmpty(rsrc.getChange().getTopic()); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.change.ChangeResource rsrc) { return com.google.common.base.Strings.emptyToEmpty(rsrc.getChange().getTopic()); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.change.ChangeResource rsrc) { return com.google.common.base.Strings.emptyToNull(rsrc.getChange().getTopic()); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.change.ChangeResource rsrc) { return com.google.common.base.Strings.nullToEmpty(rsrc.getChange().getChange().getTopic()); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.change.ChangeResource rsrc) { return com.google.common.base.Strings.nullToNull(rsrc.getChange().getTopic()); }
private void loadPluginSections(org.eclipse.jgit.lib.Config rc) { pluginConfigs = new java.util.HashMap(); for (java.lang.String plugin : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)) { org.eclipse.jgit.lib.Config pluginConfig = new org.eclipse.jgit.lib.Config(); pluginConfigs.put(plugin, pluginConfig); for (java.lang.String name : rc.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) { java.lang.String value = rc.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name); if (groupName!= null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name); if (group == null) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, ((("Group " + groupList) + ": not in ") + (GroupList.FILE_NAME)))); } rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(rc.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } else { pluginConfig.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(rc.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }
private void loadPluginSections(org.eclipse.jgit.lib.Config rc) { pluginConfigs = new java.util.HashMap(); for (java.lang.String plugin : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)) { org.eclipse.jgit.lib.Config pluginConfig = new org.eclipse.jgit.lib.Config(); pluginConfigs.put(plugin, pluginConfig); for (java.lang.String name : rc.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) { java.lang.String value = rc.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name); if (groupName!= null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name); if (group == null) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, ((("Group " + groupList) + ": not in ") + (GroupList.FILE_NAME)))); } rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(rc.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(rc.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }
private void loadPluginSections(org.eclipse.jgit.lib.Config rc) { pluginConfigs = new java.util.HashMap(); for (java.lang.String plugin : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)) { org.eclipse.jgit.lib.Config pluginConfig = new org.eclipse.jgit.lib.Config(); pluginConfigs.put(plugin, pluginConfig); for (java.lang.String name : rc.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) { java.lang.String value = rc.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name); if (groupName!= null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name); if (group == null) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, ((("Group " + groupList) + " in ": not in ") + (GroupList.FILE_NAME)))); } rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(rc.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(rc.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }
private void loadPluginSections(org.eclipse.jgit.lib.Config rc) { pluginConfigs = new java.util.HashMap(); for (java.lang.String plugin : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)) { org.eclipse.jgit.lib.Config pluginConfig = new org.eclipse.jgit.lib.Config(); pluginConfigs.put(plugin, pluginConfig); for (java.lang.String name : rc.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) { java.lang.String value = rc.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name); if (groupName!= null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name); if (group == null) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, ((("Group " + groupList) + ": not in ") + (GroupList.FILE_NAME)))); } rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(rc.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } else { pluginConfig.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(rc.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } } }
private void loadPluginSections(org.eclipse.jgit.lib.Config rc) { pluginConfigs = new java.util.HashMap(); for (java.lang.String plugin : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)) { org.eclipse.jgit.lib.Config pluginConfig = new org.eclipse.jgit.lib.Config(); pluginConfigs.put(plugin, pluginConfig); for (java.lang.String name : rc.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) { java.lang.String value = rc.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name); if (groupName!= null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name); if (group == null) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, ((("Group " + groupList) + ": not in ") + (groupList.getStringList())))); } rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(rc.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } else { pluginConfig.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(rc.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }
private void loadPermissionRules(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String varName, java.util.Map<java.lang.String, com.google.gerrit.common.data.GroupReference> groupsByName, com.google.gerrit.common.data.GroupReference> groupsByName, boolean useRange) { for (java.lang.String ruleString : rc.getStringList(section, subsection, varName)) { com.google.gerrit.common.data.PermissionRule rule; try { rule = com.google.gerrit.common.data.PermissionRule.fromString(ruleString, useRange); } catch (java.lang.IllegalArgumentException notRule) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (((((("Invalid rule in " + section) + (subsection!= null? "." + subsection : "")) + ".") + varName) + ".") + (notRule.getMessage())))); continue; } com.google.gerrit.common.data.GroupReference ref = groupsByName.get(rule.getGroup().getName()); if (ref == null) { ref = rule.getGroup(); groupsByName.put(ref.getName(), ref); error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, ((("Project config: " + (ref.getName())) + " in ") + (GroupList.FILE_NAME)))); } rule.setGroup(rule); perm.add(rule); } }
private void loadPermissionRules(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String varName, java.util.Map<java.lang.String, com.google.gerrit.common.data.GroupReference> groupsByName, com.google.gerrit.common.data.GroupReference> groupsByName, boolean useRange) { for (java.lang.String ruleString : rc.getStringList(section, subsection, varName)) { com.google.gerrit.common.data.PermissionRule rule; try { rule = com.google.gerrit.common.data.PermissionRule.fromString(ruleString, useRange); } catch (java.lang.IllegalArgumentException notRule) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (((((("Invalid rule in " + section) + (subsection!= null? "." + subsection : "")) + ".") + varName) + ".") + (notRule.getMessage())))); continue; } com.google.gerrit.common.data.GroupReference ref = groupsByName.get(rule.getGroup().getName()); if (ref == null) { ref = rule.getGroup(); groupsByName.put(ref.getName(), ref); error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, ((("group \"" + (ref.getName())) + " in ") + (GroupList.FILE_NAME)))); } rule.add(rule); } rule.setGroup(rule); }
private void loadPermissionRules(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String varName, java.util.Map<java.lang.String, com.google.gerrit.common.data.GroupReference> groupsByName, com.google.gerrit.common.data.GroupReference> groupsByName, boolean useRange) { for (java.lang.String ruleString : rc.getStringList(section, subsection, varName)) { com.google.gerrit.common.data.PermissionRule rule; try { rule = com.google.gerrit.common.data.PermissionRule.fromString(ruleString, useRange); } catch (java.lang.IllegalArgumentException notRule) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (((((("Invalid rule in " + section) + (subsection!= null? "." + subsection : "")) + ".") + varName) + ".") + (notRule.getMessage())))); continue; } com.google.gerrit.common.data.GroupReference ref = groupsByName.get(rule.getGroup().getName()); if (ref == null) { ref = rule.getGroup(); groupsByName.put(ref.getName(), ref); error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, ((("Project config: " + (ref.getName())) + " in ") + (groupList.getName())))); } rule.setGroup(rule); perm.add(rule); } }
private void loadPermissionRules(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String varName, java.util.Map<java.lang.String, com.google.gerrit.common.data.GroupReference> groupsByName, com.google.gerrit.common.data.GroupReference> groupsByName, boolean useRange) { for (java.lang.String ruleString : rc.getStringList(section, subsection, varName)) { com.google.gerrit.common.data.PermissionRule rule; try { rule = com.google.gerrit.common.data.PermissionRule.fromString(ruleString, useRange); } catch (java.lang.IllegalArgumentException notRule) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (((((("Invalid rule in " + section) + (subsection!= null? "." + subsection : "")) + ".") + varName) + ".") + (notRule.getMessage())))); continue; } com.google.gerrit.common.data.GroupReference ref = groupsByName.get(rule.getGroup().getName()); if (ref == null) { ref = rule.getGroup(); groupsByName.put(ref.getName(), ref); error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, ((("Project config: " + (ref.getName())) + " in ") + (GroupList.FILE_NAME)))); } rule.setGroup(rule); perm.add(rule); } rule.setGroup(rule); }
private void loadPermissionRules(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String varName, java.util.Map<java.lang.String, com.google.gerrit.common.data.GroupReference> groupsByName, com.google.gerrit.common.data.GroupReference> groupsByName, boolean useRange) { for (java.lang.String ruleString : rc.getStringList(section, subsection, varName)) { com.google.gerrit.common.data.PermissionRule rule; try { rule = com.google.gerrit.common.data.PermissionRule.fromString(ruleString, useRange); } catch (java.lang.IllegalArgumentException notRule) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (((((("Invalid rule in " + section) + (subsection!= null? "." + subsection : "")) + ".") + varName) + ".") + (notRule.getMessage())))); continue; } com.google.gerrit.common.data.GroupReference ref = groupsByName.get(rule.getGroup().getName()); if (ref == null) { ref = rule.getGroup(); groupsByName.put(ref.getName(), ref); error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, ((("Project config: " + (ref.getName())) + " in ") + (groupList.getName())))); } rule.setGroup(rule); perm.add(rule); } rule.setGroup(rule); }
private void savePluginSections(org.eclipse.jgit.lib.Config rc, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> keepGroups) { java.util.List<java.lang.String> existing = com.google.common.collect.Lists.newArrayList(rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)); for (java.lang.String name : existing) { rc.unsetSection(com.google.gerrit.server.git.ProjectConfig.PLUGIN, name); } for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Config> e : pluginConfigs.entrySet()) { java.lang.String plugin = e.getKey(); org.eclipse.jgit.lib.Config pluginConfig = e.getValue(); for (java.lang.String name : pluginConfig.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) { java.lang.String value = pluginConfig.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name); if (group!= null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(value); if (group!= null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(groupName); if ((ref!= null) && ((ref.getUUID())!= null)) { keepGroups.add(ref.getUUID()); pluginConfig.setString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, (ref.getName()))); } } rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(pluginConfig.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }
private void savePluginSections(org.eclipse.jgit.lib.Config rc, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> keepGroups) { java.util.List<java.lang.String> existing = com.google.common.collect.Lists.newArrayList(rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)); for (java.lang.String name : existing) { rc.unsetSection(com.google.gerrit.server.git.ProjectConfig.PLUGIN, name); } for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Config> e : pluginConfigs.entrySet()) { java.lang.String plugin = e.getKey(); org.eclipse.jgit.lib.Config pluginConfig = e.getValue(); for (java.lang.String name : pluginConfig.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) { java.lang.String value = pluginConfig.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name); if (group!= null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(groupName); if (group!= null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(groupName); if ((ref!= null) && ((ref.getUUID())!= null)) { keepGroups.add(ref.getUUID()); pluginConfig.setString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, (ref.getName()))); } } } rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(pluginConfig.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } }
private void savePluginSections(org.eclipse.jgit.lib.Config rc, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> keepGroups) { java.util.List<java.lang.String> existing = com.google.common.collect.Lists.newArrayList(rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)); for (java.lang.String name : existing) { rc.unsetSection(com.google.gerrit.server.git.ProjectConfig.PLUGIN, name); } for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Config> e : pluginConfigs.entrySet()) { java.lang.String plugin = e.getKey(); org.eclipse.jgit.lib.Config pluginConfig = e.getValue(); for (java.lang.String name : pluginConfig.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) { java.lang.String value = pluginConfig.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name); if (group!= null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(groupName); if (group!= null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(groupName); if ((ref!= null) && ((ref.getUUID())!= null)) { keepGroups.add(ref.getUUID()); pluginConfig.setString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, (ref.getUUID()))); } } } rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(pluginConfig.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } }
private void savePluginSections(org.eclipse.jgit.lib.Config rc, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> keepGroups) { java.util.List<java.lang.String> existing = com.google.common.collect.Lists.newArrayList(rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)); for (java.lang.String name : existing) { rc.unsetSection(com.google.gerrit.server.git.ProjectConfig.PLUGIN, name); } for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Config> e : pluginConfigs.entrySet()) { java.lang.String plugin = e.getKey(); org.eclipse.jgit.lib.Config pluginConfig = e.getValue(); for (java.lang.String name : pluginConfig.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) { java.lang.String value = pluginConfig.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name); if (group!= null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(groupName); if (group!= null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(groupName); if ((ref!= null) && ((ref.getUUID())!= null)) { keepGroups.add(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, (ref.getName()))); } } } rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(pluginConfig.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }
private void savePluginSections(org.eclipse.jgit.lib.Config rc, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> keepGroups) { java.util.List<java.lang.String> existing = com.google.common.collect.Lists.newArrayList(rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)); for (java.lang.String name : existing) { rc.unsetSection(com.google.gerrit.server.git.ProjectConfig.PLUGIN, name); } for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Config> e : pluginConfigs.entrySet()) { java.lang.String plugin = e.getKey(); org.eclipse.jgit.lib.Config pluginConfig = e.getValue(); for (java.lang.String name : pluginConfig.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) { java.lang.String value = pluginConfig.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name); if (group!= null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(groupName); if (group!= null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(groupName); if ((ref!= null) && ((ref.getUUID())!= null)) { keepGroups.add(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, (ref.getName()))); } } } rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(pluginConfig.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(pluginConfig
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.MemberResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.group.AddMembers.Input in = new com.google.gerrit.server.group.AddMembers.Input(); in.asAccountId = resource.getAccountId().toString(); in.name = resource.getAccountId().toString(); return delete.get().apply(resource, in); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.MemberResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.group.AddMembers.Input in = new com.google.gerrit.server.group.AddMembers.Input(); in.asAccountId = resource.getAccount().getAccountId().toString(); in.name = resource.getAccountId().toString(); return delete.get().apply(resource, in); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.MemberResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.group.AddMembers.Input in = new com.google.gerrit.server.group.AddMembers.Input(); in.name = resource.getAccount().getAccountId().toString(); in.name = resource.getAccountId().toString(); return delete.get().apply(resource, in); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.MemberResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.group.AddMembers.Input in = new com.google.gerrit.server.group.AddMembers.Input(); in.asAccountId = resource.getAccount().getAccountId().toString(); in.name = resource.getAccountId().toString(); return delete.get().apply(resource, in); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.MemberResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.group.AddMembers.Input in = new com.google.gerrit.server.group.AddMembers.Input(); in.asAccountId = resource.getAccountId().toString(); in.name = resource.getAccountId().getAccountId().toString(); return delete.get().apply(resource, in); }
public com.google.gerrit.common.data.GroupReference getGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { return checkNotNull(uuid); }
public com.google.gerrit.common.data.GroupReference getGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { return checkNotNull(uuids.get(uuid), "no not found"); }
public com.google.gerrit.common.data.GroupReference getGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { return checkNotNull(uuid.get(uuid), "no not found"); }
public com.google.gerrit.common.data.GroupReference getGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { return checkNotNull(uuids.get(uuid), "no found"); }
public com.google.gerrit.common.data.GroupReference getGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { return checkNotNull(uuid.get(uuid), "no found"); }
public static com.google.gerrit.server.git.GroupList parse(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String text, com.google.gerrit.server.git.ValidationError.Sink errors) throws java.io.IOException { java.util.List<com.google.gerrit.server.git.GroupList> rows = com.google.gerrit.server.git.GroupList.parse(text, com.google.gerrit.server.git.GroupList.FILE_NAME, com.google.gerrit.server.git.TRIM, com.google.gerrit.server.git.TRIM, errors); java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.common.data.GroupReference> groupsByUUID = new java.util.HashMap(rows.size()); for (com.google.gerrit.server.git.Row row : rows) { if ((row.left) == null) { com.google.gerrit.server.git.GroupList.log.warn("invalid field for {}: {}: {}", project, text); continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(row.left); java.lang.String name = row.right; com.google.gerrit.common.data.GroupReference ref = new com.google.gerrit.common.data.GroupReference(uuid, name); groupsByUUID.put(uuid, ref); } return new com.google.gerrit.server.git.GroupList(groupsByUUID); }
public static com.google.gerrit.server.git.GroupList parse(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String text, com.google.gerrit.server.git.ValidationError.Sink errors) throws java.io.IOException { java.util.List<com.google.gerrit.server.git.Row> rows = com.google.gerrit.server.git.GroupList.parse(text, com.google.gerrit.server.git.GroupList.FILE_NAME, com.google.gerrit.server.git.TRIM, com.google.gerrit.server.git.TRIM, errors); java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.common.data.GroupReference> groupsByUUID = new java.util.HashMap(rows.size()); for (com.google.gerrit.server.git.Row row : rows) { if ((row.left) == null) { com.google.gerrit.server.git.GroupList.log.warn("invalid field for {}: {}: {}", project, text); continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(row.left); java.lang.String name = row.right; com.google.gerrit.common.data.GroupReference ref = new com.google.gerrit.common.data.GroupReference(uuid, name); groupsByUUID.put(uuid, ref); } return new com.google.gerrit.server.git.GroupList(groupsByUUID); }
public static com.google.gerrit.server.git.GroupList parse(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String text, com.google.gerrit.server.git.ValidationError.Sink errors) throws java.io.IOException { java.util.List<com.google.gerrit.server.git.GroupList> rows = com.google.gerrit.server.git.GroupList.parse(text, com.google.gerrit.server.git.GroupList.FILE_NAME, com.google.gerrit.server.git.TRIM, com.google.gerrit.server.git.TRIM, errors); java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.common.data.GroupReference> groupsByUUID = new java.util.HashMap(rows.size()); for (com.google.gerrit.server.git.Row row : rows) { if ((row.left) == null) { com.google.gerrit.server.git.GroupList.log.warn("invalid field for {}: {}: {}", project, text); continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.common.data.GroupReference(row.left); java.lang.String name = row.right; com.google.gerrit.common.data.GroupReference ref = new com.google.gerrit.common.data.GroupReference(uuid, name); groupsByUUID.put(uuid, ref); } return new com.google.gerrit.server.git.GroupList(groupsByUUID); }
public static com.google.gerrit.server.git.GroupList parse(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String text, com.google.gerrit.server.git.ValidationError.Sink errors) throws java.io.IOException { java.util.List<com.google.gerrit.server.git.GroupList> rows = com.google.gerrit.server.git.GroupList.parse(text, com.google.gerrit.server.git.GroupList.FILE_NAME, com.google.gerrit.server.git.TRIM, com.google.gerrit.server.git.TRIM, errors); java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.common.data.GroupReference> groupsByUUID = new java.util.HashMap(rows.size()); for (com.google.gerrit.server.git.Row row : rows) { if ((row.left) == null) { com.google.gerrit.server.git.GroupList.log.warn("invalid field for {}: {}: {}: {}", project, text); continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.common.data.GroupReference(row.left); java.lang.String name = row.right; com.google.gerrit.common.data.GroupReference ref = new com.google.gerrit.common.data.GroupReference(uuid, name); groupsByUUID.put(uuid, ref); } return new com.google.gerrit.server.git.GroupList(groupsByUUID); }
public static com.google.gerrit.server.git.GroupList parse(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String text, com.google.gerrit.server.git.ValidationError.Sink errors) throws java.io.IOException { java.util.List<com.google.gerrit.server.git.Row> rows = com.google.gerrit.server.git.GroupList.parse(text, com.google.gerrit.server.git.GroupList.FILE_NAME, com.google.gerrit.server.git.TRIM, com.google.gerrit.server.git.TRIM, errors); java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.common.data.GroupReference> groupsByUUID = new java.util.HashMap(rows.size()); for (com.google.gerrit.server.git.Row row : rows) { if ((row.left) == null) { com.google.gerrit.server.git.GroupList.log.warn("invalid field for {}: {}: {}: {}", project, text); continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(row.left); java.lang.String name = row.right; com.google.gerrit.common.data.GroupReference ref = new com.google.gerrit.common.data.GroupReference(uuid, name); groupsByUUID.put(uuid, ref); } return new com.google.gerrit.server.git.GroupList(groupsByUUID); }
private static java.lang.String getAmbiguousNameMessage(java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, com.google.gerrit.reviewdb.client.AccountGroup.UUID systemGroupUUID) { return java.lang.String.format("%s associated with system-account '%s' for account '%s' is invalid", (((("%s' + (com.google.gerrit.common.data.GroupGroupUUID.get(), groupUUID)) + " for existing ") + (groupUUID.get(), systemConfig.name()))); }
private static java.lang.String getAmbiguousNameMessage(java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, com.google.gerrit.reviewdb.client.AccountGroup.UUID systemGroupUUID) { return java.lang.String.format("%s associated with system-account '%s' for account '%s' is invalid", (((("%s' + (com.google.gerrit.common.data.GroupGroupUUID.get(), groupUUID)) + " for existing ") + (groupUUID.get(), systemConfig.get(), systemConfig.get(), systemConfig.get(), systemGroupUUID, systemConfig.get()); }
private static java.lang.String getAmbiguousNameMessage(java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, com.google.gerrit.reviewdb.client.AccountGroup.UUID systemGroupUUID) { return java.lang.String.format("%s associated with system-account '%s' for account '%s' is invalid", (((("%s' + (com.google.gerrit.common.data.GroupGroupUUID.get(), groupUUID)) + " for existing ") + (groupUUID.get(), systemConfig.get(), systemConfig.get(), systemConfig.get(), systemGroupUUID, systemGroupUUID, systemGroup.get()); }
private static java.lang.String getAmbiguousNameMessage(java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, com.google.gerrit.reviewdb.client.AccountGroup.UUID systemGroupUUID) { return java.lang.String.format("%s associated with system-account '%s' for account '%s' is invalid", (((("%s' + (com.google.gerrit.common.data.GroupGroupUUID.get(), groupUUID)) + " for existing ") + (groupUUID.get(), systemConfig.get(), systemConfig.get(), systemGroupUUID, systemConfig.get(), systemGroupUUID, systemGroup.get()); }
private static java.lang.String getAmbiguousNameMessage(java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, com.google.gerrit.reviewdb.client.AccountGroup.UUID systemGroupUUID) { return java.lang.String.format("%s associated with system-account '%s' for account '%s' is invalid", (((("%s' + (com.google.gerrit.common.data.GroupGroupUUID.get(), groupUUID)) + " for existing ") + (groupUUID.get(), systemConfig.get(), systemConfig.get(), systemConfig.get(), systemConfig.get(), systemGroupUUID, systemGroup.get()); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException { com.google.gerrit.common.data.GroupDescription.Internal com.google.gerrit.server.group.GroupDescription.Internal group = resource.asInternal(resource.getDescription()); return com.google.common.base.Strings.nullToEmpty(group.getDescription()); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException { com.google.gerrit.common.data.GroupDescription.Internal com.google.gerrit.server.group.GroupDescription.Internal group = resource.asInternal(resource.getDescription()); return com.google.common.base.Strings.nullToEmpty(method.new com.google.common.base.Strings.nullToEmpty(group.getDescription())); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.AuthException { com.google.gerrit.common.data.GroupDescription.Internal com.google.gerrit.server.group.GroupDescription.Internal group = resource.asInternal(resource.getDescription()); return com.google.common.base.Strings.nullToEmpty(method.new com.google.common.base.Strings.nullToEmpty(group.getDescription())); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException { com.google.gerrit.common.data.GroupDescription.Internal com.google.gerrit.server.group.GroupDescription.Internal group = resource.asInternal(resource.getDescription()); return com.google.common.base.Strings.nullToEmpty(method.new com.google.common.base.Strings.emptyToNull(group.getDescription())); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException { com.google.gerrit.common.data.GroupDescription.Internal com.google.gerrit.server.group.GroupDescription.Internal group = resource.asInternal(resource.getDescription()); return com.google.common.base.Strings.nullToEmpty(method.new com.google.common.base.Strings.nullToNull(group.getDescription())); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.change.FileResource resource, com.google.gerrit.extensions.common.FileResource input) throws com.google.gwtorm.server.OrmException { if (!(accountPatchReviewStore.get().markReviewed(resource.getPatchKey().getParentKey(), resource.getPatchKey()))) { return com.google.gerrit.extensions.restapi.Response.ok(""); } return com.google.gerrit.extensions.restapi.Response.ok(""); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.change.FileResource resource, com.google.gerrit.extensions.common.FileResource resource) throws com.google.gwtorm.server.OrmException { if (!(accountPatchReviewStore.get().markReviewed(resource.getPatchKey().getParentKey(), resource.getPatchKey()))) { return com.google.gerrit.extensions.restapi.Response.ok(""); } return com.google.gerrit.extensions.restapi.Response.ok(""); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.change.FileResource resource, com.google.gerrit.extensions.common.FileInfo input) throws com.google.gwtorm.server.OrmException { if (!(accountPatchReviewStore.get().markReviewed(resource.getPatchKey().getParentKey(), resource.getPatchKey()))) { return com.google.gerrit.extensions.restapi.Response.ok(""); } return com.google.gerrit.extensions.restapi.Response.ok(""); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.change.FileResource resource, com.google.gerrit.extensions.common.FileResource input) throws com.google.gwtorm.server.OrmException { if (!(accountPatchReviewStore.get().markReviewed(resource.getPatchKey().getParentKey(), resource.getPatchKey().getFile())) { return com.google.gerrit.extensions.restapi.Response.ok(""); } return com.google.gerrit.extensions.restapi.Response.ok(""); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.change.FileResource resource, com.google.gerrit.extensions.common.FileResource input) throws com.google.gwtorm.server.OrmException { if (!(accountPatchReviewStore.get().markReviewed(resource.getPatchKey().getParentKey(), resource.getPatchKey()))) { return com.google.gerrit.extensions.restapi.Response.create(""); } return com.google.gerrit.extensions.restapi.Response.ok(""); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.FileResource resource, com.google.gerrit.extensions.common.FileResource input) throws com.google.gwtorm.server.OrmException { accountPatchReviewStore.get().clearReviewed(resource.getPatchKey(), resource.getPatchKey(), resource.getPatchKey().getFileName()); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.FileResource resource, com.google.gerrit.extensions.common.FileResource input) throws com.google.gwtorm.server.OrmException { accountPatchReviewStore.get().clearReviewed(resource.getPatchKey(), resource.getAccountId(), resource.getPatchKey().getFileName()); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.FileResource resource, com.google.gerrit.extensions.common.FileInfo input) throws com.google.gwtorm.server.OrmException { accountPatchReviewStore.get().clearReviewed(resource.getPatchKey(), resource.getPatchKey(), resource.getPatchKey().getFileName()); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.FileResource resource, com.google.gerrit.extensions.common.FileResource input) throws com.google.gwtorm.server.OrmException { accountPatchReviewStore.get().clearReviewed(resource.getPatchKey(), resource.getPatchKey(), resource.getPatchKey().getFile())); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.FileResource resource, com.google.gerrit.extensions.common.FileResource input) throws com.google.gwtorm.server.OrmException { accountPatchReviewStore.get().clearReviewed(resource.getPatchKey(), resource.getPatchKey(), resource.getPatchKey(), resource.getPatchKey().getFileName()); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException { if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to index account"); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = rsrc.getGroup().getGroupUUID(); if (!(rsrc.isInternalGroup())) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Group Not allowed to index %s", groupUuid.get())); } java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(groupUUID); if (group.isPresent()) { groupCache.evict(group.get().getId(), group.getNameKey()); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException { if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to index account"); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = rsrc.getGroup().getGroupUUID(); if (!(rsrc.isInternalGroup())) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Group Not allowed to index %s", groupUUID.get())); } java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(groupUUID); if (group.isPresent()) { groupCache.evict(group.get().getId(), group.getNameKey()); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, java.io.IOException { if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to index account"); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = rsrc.getGroup().getGroupUUID(); if (!(rsrc.isInternalGroup())) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Group Not allowed to index %s", groupUuid.get())); } java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(groupUUID); if (group.isPresent()) { groupCache.evict(group.get().getId(), group.getNameKey()); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, java.io.IOException { if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to index account"); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = rsrc.getGroup().getGroupUUID(); if (!(rsrc.isInternalGroup())) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Group Not allowed to index %s", groupUuid.get())); } java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(groupUUID); if (group.isPresent()) { groupCache.evict(group.get().getGroupUUID(), group.getNameKey()); } return com.google.gerrit.server.group.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, java.io.IOException { if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to index account"); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = rsrc.getGroup().getGroupUUID(); if (!(rsrc.isInternalGroup())) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Group Not allowed to index %s", groupUuid.get())); } java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(groupUUID); if (group.isPresent()) { groupCache.evict(group.get().getGroupUUID(), group.get().getNameKey()); } return com.google.gerrit.server.group.Get(); }
public static void assertGroups(java.lang.Iterable<java.lang.String> expected, java.util.Set<java.lang.String> actual) { for (java.lang.String g : expected) { assertWithMessage((((" + g)).that(actual.remove(g)).isTrue(); } assertWithMessage(((" " + g)).isEmpty(); }
public static void assertGroups(java.lang.Iterable<java.lang.String> expected, java.util.Set<java.lang.String> actual) { for (java.lang.String g : expected) { assertWithMessage((("unexpected " + g)).that(actual.remove(g)).isTrue(); } assertWithMessage(((" " + g)).isEmpty(); }
public static void assertGroups(java.lang.Iterable<java.lang.String> expected, java.util.Set<java.lang.String> actual) { for (java.lang.String g : expected) { assertWithMessage((("unexpected " + g)).that(actual.remove(g)).isTrue(); } assertWithMessage(((" " + g)).that(actual)).isEmpty(); }
public static void assertGroups(java.lang.Iterable<java.lang.String> expected, java.util.Set<java.lang.String> actual) { for (java.lang.String g : expected) { assertWithMessage((((" + g)).that(actual.remove(g)).isTrue(); } assertWithMessage(((" " + g)).that(actual)).isEmpty(); }
public static void assertGroups(java.lang.Iterable<java.lang.String> expected, java.util.Set<java.lang.String> actual) { for (java.lang.String g : expected) { assertWithMessage(((("unexpected " + g)).that(actual.remove(g)).isTrue(); } assertWithMessage(((" " + g)).that(actual)).isEmpty(); }
public com.google.gerrit.extensions.api.access.ProjectAccessInfo apply(com.google.gerrit.reviewdb.client.Project.NameKey nameKey) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(nameKey.get()); } return apply(new com.google.gerrit.server.project.ProjectResource(state, user.get())); }
public com.google.gerrit.extensions.api.access.ProjectAccessInfo apply(com.google.gerrit.reviewdb.client.Project.NameKey nameKey) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(nameKey.get()); } return apply(new com.google.gerrit.server.project.ProjectResource(state, user.get())); }
public com.google.gerrit.extensions.api.access.ProjectAccessInfo apply(com.google.gerrit.reviewdb.client.Project.NameKey nameKey) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(nameKey.get()); } return apply(new com.google.gerrit.server.project.ProjectResource(state, user.get()); }
public com.google.gerrit.extensions.api.access.ProjectAccessInfo apply(com.google.gerrit.reviewdb.client.Project.NameKey nameKey) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(nameKey.get()); } return apply(new com.google.gerrit.server.project.ProjectResource(state, user.get())); }
public com.google.gerrit.extensions.api.access.ProjectAccessInfo apply(com.google.gerrit.reviewdb.client.Project.NameKey nameKey) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(nameKey.get()); } return apply(new com.google.gerrit.server.project.ProjectResource(state, user.get())); }
private com.google.gerrit.extensions.common.GroupInfo loadGroup(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> visibleGroups, visibleGroups, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.GroupInfo group = visibleGroups.get(id); if (group == null) { try { com.google.gerrit.server.account.GroupControl control = groupControlFactory.controlFor(id); group = com.google.gerrit.server.project.GetAccess.INVALID; if (control.isVisible()) { group = null; } group = groupJson.format(control.getGroup()); group.id = null; } } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { com.google.gerrit.server.project.GetAccess.log.warn(("No such account " + id), e); } return group; }
private com.google.gerrit.extensions.common.GroupInfo loadGroup(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> visibleGroups, visibleGroups, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.GroupInfo group = visibleGroups.get(id); if (group == null) { try { com.google.gerrit.server.account.GroupControl control = groupControlFactory.controlFor(id); group = com.google.gerrit.server.project.GetAccess.INVALID; if (control.isVisible()) { group = null; } group = groupJson.format(control.getGroup()); group.id = null; } } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { com.google.gerrit.server.project.GetAccess.log.warn(("No such account " + id), e); group = com.google.gerrit.common.data.GetAccess.INVALID.INVALID; } visible = com.google.gerrit.server.project.GetAccess.INVALID.INVALID; } return group; }
private com.google.gerrit.extensions.common.GroupInfo loadGroup(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> visibleGroups, visibleGroups, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.GroupInfo group = visibleGroups.get(id); if (group == null) { try { com.google.gerrit.server.account.GroupControl control = groupControlFactory.controlFor(id); group = com.google.gerrit.server.project.GetAccess.INVALID; if (control.isVisible()) { group = null; } group = groupJson.format(control.getGroup()); group.id = null; } } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { com.google.gerrit.server.project.GetAccess.log.warn(("No such account " + id), e); group = com.google.gerrit.server.project.GetAccess.INVALID.INVALID; } visible = com.google.gerrit.server.project.GetAccess.INVALID.INVALID; } return group; }
private com.google.gerrit.extensions.common.GroupInfo loadGroup(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> visibleGroups, visibleGroups, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.GroupInfo group = visibleGroups.get(id); if (group == null) { try { com.google.gerrit.server.account.GroupControl control = groupControlFactory.controlFor(id); group = com.google.gerrit.server.project.GetAccess.INVALID; if (control.isVisible()) { group = null; } group = groupJson.format(control.getGroup()); group.id = null; } } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { com.google.gerrit.server.project.GetAccess.log.warn(("No such account " + id), e); group = com.google.gerrit.server.project.GetAccess.INTERNAL_SVC.INVALID; } visible = com.google.gerrit.server.project.GetAccess.INVALID.INVALID; } return group; }
private com.google.gerrit.extensions.common.GroupInfo loadGroup(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> visibleGroups, visibleGroups, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.GroupInfo group = visibleGroups.get(id); if (group == null) { try { com.google.gerrit.server.account.GroupControl control = groupControlFactory.controlFor(id); group = com.google.gerrit.server.project.GetAccess.INVALID; if (control.isVisible()) { group = null; } group = groupJson.format(control.getGroup()); group.id = null; } } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { com.google.gerrit.server.project.GetAccess.log.warn(("No such account " + id), e); group = com.google.gerrit.server.project.GetAccess.INTERNAL_SIDE_SIDE; } visible = com.google.gerrit.server.project.GetAccess.INVALID.INVALID; } return group; }
private java.util.Collection<com.google.gerrit.server.project.ProjectState> tree(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.project.ProjectState> tree = new java.util.LinkedHashMap<>(); for (com.google.gerrit.server.project.ProjectState ps : rsrc.getProjectState().tree()) { tree.put(ps.getNameKey(), ps); } tree.keySet().retainAll(Permission.ACCESS, tree.filter(ProjectPermission.ACCESS, tree.keySet())); return tree.values(); }
private java.util.Collection<com.google.gerrit.server.project.ProjectState> tree(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.project.ProjectState> tree = new java.util.LinkedHashMap<>(); for (com.google.gerrit.server.project.ProjectState ps : rsrc.getProjectState().tree()) { tree.put(ps.getNameKey(), ps); } tree.keySet().retainAll(Permission.ACCESS, tree.keySet())); return tree.values(); }
private java.util.Collection<com.google.gerrit.server.project.ProjectState> tree(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.project.ProjectState> tree = new java.util.LinkedHashMap<>(); for (com.google.gerrit.server.project.ProjectState ps : rsrc.getProjectState().tree()) { tree.put(ps.getProjectState().tree(), ps); } tree.keySet().retainAll(Permission.ACCESS, treeSet.keySet())); return tree.values(); }
private java.util.Collection<com.google.gerrit.server.project.ProjectState> tree(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.project.ProjectState> tree = new java.util.LinkedHashMap<>(); for (com.google.gerrit.server.project.ProjectState ps : rsrc.getProjectState().tree()) { tree.put(ps.getNameKey(), ps); } tree.keySet().retainAll(Permission.ACCESS, tree.filter(ProjectPermission.ACCESS, tree.keySet())); return tree.values().values(); }
private java.util.Collection<com.google.gerrit.server.project.ProjectState> tree(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.project.ProjectState> tree = new java.util.LinkedHashMap<>(); for (com.google.gerrit.server.project.ProjectState ps : rsrc.getProjectState().tree()) { tree.put(ps.getNameKey(), ps); } tree.keySet().retainAll(Permission.ACCESS, tree.filter(ProjectPermission.ACCESS, tree.keySet())); return tree.values().map(Permission.ACCESS, tree.keySet())); }
@java.lang.Override public java.util.List<?> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { java.lang.String project = rsrc.getName(); if (!(inherited)) { return scan(rsrc.getProjectState(), project, true); } java.util.List<java.util.List<com.google.gerrit.extensions.api.projects.DashboardInfo>> all = new java.util.ArrayList<>(); boolean setDefault = true; for (com.google.gerrit.server.project.ProjectState ps : tree(rsrc)) { java.util.List<com.google.gerrit.extensions.api.projects.DashboardInfo> list = scan(ps, project, setDefault); for (com.google.gerrit.extensions.api.projects.DashboardInfo d : list) { if (((d.isDefault)!= null) && (java.lang.Boolean.TRUE.equals(d.isDefault))) { setDefault = false; } } if (!(list.isEmpty())) { all.add(list); } } return all; }
@java.lang.Override public java.util.List<?> apply(com.google.gerrit.server.api.projects.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { java.lang.String project = rsrc.getName(); if (!(inherited)) { return scan(rsrc.getProjectState(), project, true); } java.util.List<java.util.List<com.google.gerrit.extensions.api.projects.DashboardInfo>> all = new java.util.ArrayList<>(); boolean setDefault = true; for (com.google.gerrit.server.project.ProjectState ps : tree(rsrc)) { java.util.List<com.google.gerrit.extensions.api.projects.DashboardInfo> list = scan(ps, project, setDefault); for (com.google.gerrit.extensions.api.projects.DashboardInfo d : list) { if (((d.isDefault)!= null) && (java.lang.Boolean.TRUE.equals(d.isDefault))) { setDefault = false; } } } if (!(list.isEmpty())) { all.add(list); } } return all; }
@java.lang.Override public java.util.List<?> apply(com.google.gerrit.server.api.projects.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { java.lang.String project = rsrc.getName(); if (!(inherited)) { return scan(rsrc.getProjectState(), project, true); } java.util.List<java.util.List<com.google.gerrit.extensions.api.projects.DashboardInfo>> all = new java.util.ArrayList<>(); boolean setDefault = true; for (com.google.gerrit.server.project.ProjectState ps : tree(rsrc)) { java.util.List<com.google.gerrit.extensions.api.projects.DashboardInfo> list = scan(ps, project, setDefault); for (com.google.gerrit.extensions.api.projects.DashboardInfo d : list) { if (((d.isDefault)!= null) && (java.lang.Boolean.TRUE.equals(d.isDefault))) { setDefault = false; } } if (!(list.isEmpty())) { all.add(list); } } return all; }
@java.lang.Override public java.util.List<?> apply(com.google.gerrit.server.api.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { java.lang.String project = rsrc.getName(); if (!(inherited)) { return scan(rsrc.getProjectState(), project, true); } java.util.List<java.util.List<com.google.gerrit.extensions.api.projects.DashboardInfo>> all = new java.util.ArrayList<>(); boolean setDefault = true; for (com.google.gerrit.server.project.ProjectState ps : tree(rsrc)) { java.util.List<com.google.gerrit.extensions.api.projects.DashboardInfo> list = scan(ps, project, setDefault); for (com.google.gerrit.extensions.api.projects.DashboardInfo d : list) { if (((d.isDefault)!= null) && (java.lang.Boolean.TRUE.equals(d.isDefault))) { setDefault = false; } } } if (!(list.isEmpty())) { all.add(list); } } return all; }
@java.lang.Override public java.util.List<?> apply(com.google.gerrit.server.api.projects.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { java.lang.String project = rsrc.getName(); if (!(inherited)) { return scan(rsrc.getProjectState(), project, true); } java.util.List<java.util.List<com.google.gerrit.extensions.api.projects.DashboardInfo>> all = new java.util.ArrayList<>(); boolean setDefault = true; for (com.google.gerrit.server.project.ProjectState ps : tree(rsrc)) { java.util.List<com.google.gerrit.extensions.api.projects.DashboardInfo> list = scan(ps, project, setDefault); for (com.google.gerrit.extensions.api.projects.DashboardInfo d : list) { if (((d.isDefault)!= null) && (java.lang.Boolean.TRUE.equals(d.isDefault))) { setDefault = false; } } } if (!(list.isEmpty())) { all.add(list); } } return all;
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.api.groups.OwnerInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.common.data.GroupReference internalGroup = resource.asInternal(resource.getOwner()); if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("restricted to determine owner"); } if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.owner))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("commit is required"); } com.google.gerrit.common.data.GroupDescription.Basic owner = groupsCollection.parse(input.owner); if (!(internalGroup.getOwnerGroupUUID().equals(ownerGroup.getGroupUUID()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("group is required"); } com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.InternalUpdate.Builder.parse(group); if (!(internalGroup.getOwnerGroupUUID().equals(ownerGroup.getGroupUUID()))) { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.InternalGroupUpdate.Builder.parse(group.getGroupUUID()).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, group); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.api.groups.OwnerInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.common.data.GroupReference internalGroup = resource.asInternal(resource.getOwner()); if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("restricted to determine owner"); } if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.owner))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("commit is required"); } com.google.gerrit.common.data.GroupDescription.Basic owner = groupsCollection.parse(input.owner); if (!(internalGroup.getOwnerGroupUUID().equals(ownerGroup.getGroupUUID()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("group is required"); } com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.InternalUpdate.Builder.parse(group); if (!(internalGroup.getOwnerGroupUUID().equals(ownerGroup.getGroupUUID()))) { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.InternalGroupUpdate.Builder.parse(group.getGroupUUID()).build(); try { groupsUpdateFactory.get().update(db.get(), groupUuid, group); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.api.groups.OwnerInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.common.data.GroupReference internalGroup = resource.asInternal(resource.getOwner()); if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("restricted to determine owner"); } if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.owner))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("commit is required"); } com.google.gerrit.common.data.GroupDescription.Basic owner = groupsCollection.parse(input.owner); if (!(internalGroup.getOwnerGroupUUID().equals(ownerGroup.getGroupUUID()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("group is required"); } com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.InternalUpdate.Builder.parse(group); if (!(internalGroup.getOwnerGroupUUID().equals(ownerGroup.getGroupUUID()))) { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.InternalGroupUpdate.builder().setOwnerGroup(ownerGroup.getGroupUUID()).build(); try { groupsUpdateFactory.get().update(db.get(), groupUuid, group); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.api.groups.OwnerInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.common.data.GroupReference internalGroup = resource.asInternal(resource.getOwner()); if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("restricted to determine owner"); } if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.owner))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("commit is required"); } com.google.gerrit.common.data.GroupDescription.Basic owner = groupsCollection.parse(input.owner); if (!(internalGroup.getOwnerGroupUUID().equals(ownerGroup.getGroupUUID()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("group is required"); } com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.InternalUpdate.Builder.parse(group); if (!(internalGroup.getOwnerGroupUUID().equals(ownerGroup.getGroupUUID()))) { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.InternalGroupUpdate.builder().setOwnerGroup(ownerGroup.getGroupUUID()).build(); try { groupsUpdateFactory.get().update(db.get(), groupUuid, groupUuid, group); } catch (com.google.gerrit.common.errors.NoSuchGroupException e)
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.api.groups.OwnerInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.common.data.GroupReference internalGroup = resource.asInternal(resource.getOwner()); if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("restricted to determine owner"); } if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.owner))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("commit is required"); } com.google.gerrit.common.data.GroupDescription.Basic owner = groupsCollection.parse(input.owner); if (!(internalGroup.getOwnerGroupUUID().equals(ownerGroup.getGroupUUID()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("group is required"); } com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.InternalUpdate.Builder.parse(group); if (!(internalGroup.getOwnerGroupUUID().equals(ownerGroup.getGroupUUID()))) { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.InternalGroupUpdate.builder().setOwnerGroup(ownerGroup.getGroupUUID()).build(); try { groupsUpdateFactory.get().update(db.get(), groupUUID, groupUuid, group); } catch (com.google.gerrit.common.errors.NoSuchGroupException e)
@org.junit.Test public void ownerUuidOfNewGroupCreation() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupCreation = getPreferences().build(); com.google.gerrit.reviewdb.client.AccountGroup update = com.google.gerrit.server.group.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("")).build(); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.reviewdb.client.AccountGroup.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get())) { expectedException.expect(instanceOf(org.eclipse.jgit.errors.ConfigInvalidUser.class)); try (com.google.gerrit.server.git.MetaDataUpdate md = createMetaDataUpdate(createMetaDataUpdate(org.eclipse.jgit.errors.ConfigInvalid())) { expectedConfig.commit(metaDataUpdate); } } }
@org.junit.Test public void ownerUuidOfNewGroupCreation() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupCreation = getPreferences().build(); com.google.gerrit.reviewdb.client.AccountGroup update = com.google.gerrit.server.group.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("")).build(); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.reviewdb.client.AccountGroup.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get())) { expectedException.expect(instanceOf(org.eclipse.jgit.errors.ConfigInvalidUser.class)); try (com.google.gerrit.server.git.MetaDataUpdate md = createMetaDataUpdate(createMetaDataUpdate(org.eclipse.jgit.errors.ConfigInvalidUser())) { expectedConfig.commit(metaData); } } }
@org.junit.Test public void ownerUuidOfNewGroupCreation() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupCreation = getPreferences().build(); com.google.gerrit.reviewdb.client.AccountGroup update = com.google.gerrit.server.group.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("")).build(); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.reviewdb.client.AccountGroup.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get())) { expectedException.expect(instanceOf(org.eclipse.jgit.errors.ConfigInvalidUser.class)); try (com.google.gerrit.server.git.MetaDataUpdate md = createMetaDataUpdate(createMetaDataUpdate(org.eclipse.jgit.errors.ConfigInvalid())) { expectedConfig.commit(metaDataUpdate); } } catch (com.google.gwtorm.server.OrmException e) { } }
@org.junit.Test public void ownerUuidOfNewGroupCreation() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupCreation = getPreferences().build(); com.google.gerrit.reviewdb.client.AccountGroup update = com.google.gerrit.server.group.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("")).build(); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.reviewdb.client.AccountGroup.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get())) { expectedException.expect(instanceOf(org.eclipse.jgit.errors.ConfigInvalidUser.class)); try (com.google.gerrit.server.git.MetaDataUpdate md = createMetaDataUpdate(createMetaDataUpdate(org.eclipse.jgit.errors.ConfigInvalidUser())) { expectedConfig.commit(metaData); } } catch (com.google.gwtorm.server.OrmException e) { } }
@org.junit.Test public void ownerUuidOfNewGroupCreation() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupCreation = getPreferences().build(); com.google.gerrit.reviewdb.client.AccountGroup update = com.google.gerrit.server.group.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("")).build(); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.reviewdb.client.AccountGroup.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get())) { expectedException.expect(instanceOf(org.eclipse.jgit.errors.ConfigInvalidUser.class)); try (com.google.gerrit.server.git.MetaDataUpdate md = createMetaDataUpdate(createMetaDataUpdate(org.eclipse.jgit.errors.ConfigInvalid())) { expectedConfig.commit(metaDataUpdate); } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.git.validators.ConfigInvalidUserValidationException.log.warn("Cannot create UUID of user " + userId)); } }
@java.lang.Override public void onChangeMerged(com.google.gerrit.server.events.Event event) { if ((!(allProjects.get().equals(event.getChange().project))) || (!(RefNames.REFS_CONFIG.equals(event.getChange().branch)))) { return; } try { syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.account.CreateGroup.log.error("Cannot create create create create create account", e); } }
@java.lang.Override public void onChangeMerged(com.google.gerrit.server.events.Event event) { if ((!(allProjects.get().equals(event.getChange().project))) || (!(RefNames.REFS_CONFIG.equals(event.getChange().branch)))) { return; } try { syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.account.CreateGroup.log.error("Cannot create create create create create create account", e); } }
@java.lang.Override public void onChangeMerged(com.google.gerrit.server.events.Event event) { if ((!(allProjects.get().equals(event.getChange().project))) || (!(RefNames.REFS_CONFIG.equals(event.getChange().branch)))) { return; } try { syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.IdentifiedUser submitter = createCreateGroup(); try { sync.delete(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { } } }
@java.lang.Override public void onChangeMerged(com.google.gerrit.server.events.Event event) { if ((!(allProjects.get().equals(event.getChange().project))) || (!(RefNames.REFS_CONFIG.equals(event.getChange().branch)))) { return; } try { syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.IdentifiedUser submitter = createCreateGroup(); try { sync.delete(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { } }
@java.lang.Override public void onChangeMerged(com.google.gerrit.server.events.Event event) { if ((!(allProjects.get().equals(event.getChange().project))) || (!(RefNames.REFS_CONFIG.equals(event.getChange().branch)))) { return; } try { syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.account.CreateGroup.log.error("Cannot create create create create create account",("Cannot create user."); } }
@org.junit.Test public void nameInConfigOrEmpty() throws java.lang.Exception { populateGroupConfig(groupUUID, "owners = 42"); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); assertThat(groupConfig.getLoadedFrom().getName()).isEmpty(); }
@org.junit.Test public void nameInConfigOrEmpty() throws java.lang.Exception { populateGroupConfig(groupUUID, "owners = 42"); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repo, groupUUID); assertThat(groupConfig.getLoadedFrom().getName()).isEmpty(); }
@org.junit.Test public void nameInConfigOrEmpty() throws java.lang.Exception { populateGroupConfig(groupUUID, "owners = 42\n"; com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); assertThat(groupConfig.getLoadedFromGroup().getName()).isEmpty(); }
@org.junit.Test public void nameInConfigOrEmpty() throws java.lang.Exception { populateGroupConfig(groupUUID, "owners = 42\n"; com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repo, groupUUID); assertThat(groupConfig.getLoadedFromGroup().getName()).isEmpty(); }
@org.junit.Test public void nameInConfigOrEmpty() throws java.lang.Exception { populateGroupConfig(groupUUID, "owners = 42"); com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); assertThat(groupConfig.getLoaded().getName()).isEmpty(); }
protected static java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates(com.google.gerrit.server.project.ProjectCache projectCache, com.google.inject.Provider<com.google.gerrit.server.project.ListChildProjects> listChildProjects, com.google.inject.Provider<com.google.gerrit.server.CurrentUser> self, java.lang.String value) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(new com.google.inject.Provider<com.google.gerrit.reviewdb.client.Project.NameKey>(value)); if (projectState == null) { return java.util.Collections.emptyList(); } java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> r = new java.util.ArrayList<>(); r.add(new com.google.gerrit.server.query.change.ProjectPredicate(projectState.getName())); try { com.google.gerrit.server.project.ProjectResource proj = new com.google.gerrit.server.project.ProjectResource(projectState, self.get()); com.google.gerrit.server.project.ListChildProjects children = listChildProjects.get(); children.setRecursive(true); for (com.google.gerrit.extensions.common.ProjectInfo p : children.apply(proj)) { r.add(new com.google.gerrit.server.query.change.ProjectPredicate(p.name)); } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.query.change.ParentProjectPredicate.log.warn("cannot check permissions to expand child projects", e); } return r; }
protected static java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates(com.google.gerrit.server.project.ProjectCache projectCache, com.google.inject.Provider<com.google.gerrit.server.project.ListChildProjects> listChildProjects, com.google.inject.Provider<com.google.gerrit.server.CurrentUser> self, java.lang.String value) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(new com.google.inject.Provider<com.google.gerrit.reviewdb.client.Project.NameKey(value)); if (projectState == null) { return java.util.Collections.emptyList(); } java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> r = new java.util.ArrayList<>(); r.add(new com.google.gerrit.server.query.change.ProjectPredicate(projectState.getName())); try { com.google.gerrit.server.project.ProjectResource proj = new com.google.gerrit.server.project.ProjectResource(projectState, self.get()); com.google.gerrit.server.project.ListChildProjects children = listChildProjects.get(); children.setRecursive(true); for (com.google.gerrit.extensions.common.ProjectInfo p : children.apply(proj)) { r.add(new com.google.gerrit.server.query.change.ProjectPredicate(p.name)); } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.query.change.ParentProjectPredicate.log.warn("cannot check permissions to expand child projects", e); } return r; }
protected static java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates(com.google.gerrit.server.project.ProjectCache projectCache, com.google.inject.Provider<com.google.gerrit.server.project.ListChildProjects> listChildProjects, com.google.inject.Provider<com.google.gerrit.server.CurrentUser> self, java.lang.String value) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(new com.google.inject.Provider<com.google.gerrit.reviewdb.client.Project.NameKey>(value)); if (projectState == null) { return java.util.Collections.emptyList(); } java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> r = new java.util.ArrayList<>(); r.add(new com.google.gerrit.server.query.change.ProjectPredicate(projectState.getName())); try { com.google.gerrit.server.project.ProjectResource proj = new com.google.gerrit.server.project.ProjectResource(projectState, self.get()); com.google.gerrit.server.project.ListChildProjects children = listChildProjects.get(); children.setRecursive(true); for (com.google.gerrit.extensions.common.ProjectInfo p : children.apply(proj)) { r.add(new com.google.gerrit.server.query.change.ProjectPredicate(p.name)); } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.query.change.ParentProjectPredicate.log.warn("Cannot check permissions to expand child projects", e); } return r; }
protected static java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates(com.google.gerrit.server.project.ProjectCache projectCache, com.google.inject.Provider<com.google.gerrit.server.project.ListChildProjects> listChildProjects, com.google.inject.Provider<com.google.gerrit.server.CurrentUser> self, java.lang.String value) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(new com.google.inject.Provider<com.google.gerrit.reviewdb.client.Project.NameKey>(value)); if (projectState == null) { return java.util.Collections.emptyList(); } java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> r = new java.util.ArrayList<>(); r.add(new com.google.gerrit.server.query.change.ProjectPredicate(projectState.getName())); try { com.google.gerrit.server.project.ProjectResource proj = new com.google.gerrit.server.project.ProjectResource(projectState, self.get()); com.google.gerrit.server.project.ListChildProjects children = listChildProjects.get(); children.setRecursive(true); for (com.google.gerrit.extensions.common.ProjectInfo p : children.apply(proj)) { r.add(new com.google.gerrit.server.query.change.ProjectPredicate(p.name)); } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.query.change.ParentProjectPredicate.log.warn("Error checking permissions to expand child projects", e); } return r; }
protected static java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates(com.google.gerrit.server.project.ProjectCache projectCache, com.google.inject.Provider<com.google.gerrit.server.project.ListChildProjects> listChildProjects, com.google.inject.Provider<com.google.gerrit.server.CurrentUser> self, java.lang.String value) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(new com.google.inject.Provider<com.google.gerrit.reviewdb.client.Project.NameKey(value)); if (projectState == null) { return java.util.Collections.emptyList(); } java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> r = new java.util.ArrayList<>(); r.add(new com.google.gerrit.server.query.change.ProjectPredicate(projectState.getName())); try { com.google.gerrit.server.project.ProjectResource proj = new com.google.gerrit.server.project.ProjectResource(projectState, self.get()); com.google.gerrit.server.project.ListChildProjects children = listChildProjects.get(); children.setRecursive(true); for (com.google.gerrit.extensions.common.ProjectInfo p : children.apply(proj)) { r.add(new com.google.gerrit.server.query.change.ProjectPredicate(p.name)); } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.query.change.ParentProjectPredicate.log.warn("Error checking permissions to expand child projects", e); } return r; }
public com.google.gerrit.extensions.common.GroupInfo format(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { return createGroupInfo(rsrc.getGroup(), rsrc.getControl()); }
public com.google.gerrit.extensions.common.GroupInfo format(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { return createGroupInfo(rsrc.getGroup(), rsrc.getControl()); }
public com.google.gerrit.extensions.common.GroupInfo format(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { return createGroupInfo(rsrc.getGroup(), rsrc::getControl()); }
public com.google.gerrit.extensions.common.GroupInfo format(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { return createGroupInfo(rsrc.getControl(), rsrc.getControl()); }
public com.google.gerrit.extensions.common.GroupInfo format(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { return createGroupInfo(rsrc.getControl(), rsrc.getControl()); }
private static void checkSameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, com.google.gerrit.server.account.GroupControl groupControl) { checkState(groupControl, "group control"); }
private static void checkSameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, com.google.gerrit.server.account.GroupControl groupControl) { checkState(group.equals(groupControl.getGroup()), "check not match"); }
private static void checkSameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, com.google.gerrit.server.account.GroupControl groupControl) { checkState(group.equals(groupControl.getGroup()), "test not match"); }
private static void checkSameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, com.google.gerrit.server.account.GroupControl groupControl) { checkState(group.getGroup()).isTrue(); }
private static void checkSameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, com.google.gerrit.server.account.GroupControl groupControl) { checkState(group.equals(groupControl.getGroup()), "not match and match"); }
@java.lang.Override public void setReviewed(java.lang.String path, boolean reviewed) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.change.FileResource, com.google.gerrit.server.change.FileResource> view; if (reviewed) { view = putReviewed; } else { view = deleteReviewed; } view = deleteReviewed; } view.apply(files.parse(revision, com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)), new com.google.gerrit.extensions.restapi.RestApiException("Cannot update reviewed"); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot update reviewed", e); } }
@java.lang.Override public void setReviewed(java.lang.String path, boolean reviewed) throws com.google.gerrit.extensions.restapi.RestModifyViewException { try { com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.change.FileResource, com.google.gerrit.server.change.FileResource> view; if (reviewed) { view = putReviewed; } else { view = deleteReviewed; } view = deleteReviewed; } view.apply(files.parse(revision, com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)), new com.google.gerrit.server.change.Input()); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot update reviewed", e); }
@java.lang.Override public void setReviewed(java.lang.String path, boolean reviewed) throws com.google.gerrit.extensions.restapi.RestModifyViewException { try { com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.change.FileResource, com.google.gerrit.server.change.FileResource> view; if (reviewed) { view = putReviewed; } else { view = deleteReviewed; } view = deleteReviewed; } view.apply(files.parse(revision, com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)), new com.google.gerrit.extensions.restapi.RestApiException("Cannot update reviewed"); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot update reviewed", e); }
@java.lang.Override public void setReviewed(java.lang.String path, boolean reviewed) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.change.FileResource, com.google.gerrit.server.change.FileResource> view; if (reviewed) { view = putReviewed; } else { view = deleteReviewed; } view = deleteReviewed; } view.apply(files.parse(revision, com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)), new com.google.gerrit.extensions.restapi.RestApiException("Cannot update reviewed"); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot update reviewed", e); }
@java.lang.Override public void setReviewed(java.lang.String path, boolean reviewed) throws com.google.gerrit.extensions.restapi.RestModifyViewException { try { com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.change.FileResource, com.google.gerrit.server.change.FileResource> view; if (reviewed) { view = putReviewed; } else { view = deleteReviewed; } view = deleteReviewed; } view.apply(files.parse(revision, com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)), new com.google.gerrit.extensions.common.EditInfo()); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot update reviewed reviewed", e); }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.CommitResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.CommitInfo>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.CommitResource> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.View<com.google.gerrit.server.project.CommitResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.View<com.google.gerrit.server.project.CommitResource>> view() { return views; }
@java.lang.Override public com.google.gerrit.server.project.CommitResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { org.eclipse.jgit.lib.ObjectId objectId; try { objectId = org.eclipse.jgit.lib.ObjectId.fromString(id.get()); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(parent.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(objectId); rw.parseBody(commit); if (!(canRead(parent.getParentCount()))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (int i = 0; i < (commit.getParentCount()); i++) { rw.parseBody(rw.parseCommit(commit.getParent(i))); } return new com.google.gerrit.server.project.CommitResource(parent, commit); } catch (org.eclipse.jgit.errors.IncorrectObjectTypeException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.server.project.CommitResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { org.eclipse.jgit.lib.ObjectId objectId; try { objectId = org.eclipse.jgit.lib.ObjectId.fromString(id.get()); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(parent.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(objectId); rw.parseBody(commit); if (!(canRead(parent.getParentCount()))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (int i = 0; i < (commit.getParentCount()); i++) { rw.parseBody(rw.parseCommit(commit.getParent(i))); } return new com.google.gerrit.server.project.CommitResource(parent, commit); } catch (org.eclipse.jgit.errors.MissingObjectException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.server.project.CommitResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { org.eclipse.jgit.lib.ObjectId objectId; try { objectId = org.eclipse.jgit.lib.ObjectId.fromString(id.get()); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(parent.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(objectId); rw.parseBody(commit); if (!(canRead(parent.getParentCount()))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (int i = 0; i < (commit.getParentCount()); i++) { rw.parseBody(rw.parseCommit(commit.getParent(i))); } for (int i = 0; i < (commit.getParentCount()); i++) { rw.parseCommit(commit); } return new com.google.gerrit.server.project.CommitResource(parent, commit); } catch (org.eclipse.jgit.errors.IncorrectObjectTypeException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.server.project.CommitResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { org.eclipse.jgit.lib.ObjectId objectId; try { objectId = org.eclipse.jgit.lib.ObjectId.fromString(id.get()); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(parent.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(objectId); rw.parseBody(commit); if (!(canRead(parent.getParentCount()))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (int i = 0; i < (commit.getParentCount()); i++) { rw.parseBody(rw.parseCommit(commit.getParent(i))); } for (int i = 0; i < (commit.getParentCount()); i++) { rw.parseCommit(commit); } return new com.google.gerrit.server.project.CommitResource(parent, commit); } catch (org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.server.project.CommitResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { org.eclipse.jgit.lib.ObjectId objectId; try { objectId = org.eclipse.jgit.lib.ObjectId.fromString(id.get()); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(parent.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(objectId); rw.parseBody(commit); if (!(canRead(parent.getParentCount()))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (int i = 0; i < (commit.getParentCount()); i++) { rw.parseBody(rw.parseCommit(commit.getParent(i))); } return new com.google.gerrit.server.project.CommitResource(parent, commit); } catch (org.eclipse.jgit.errors.IncorrectObjectTypeException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.MissingObjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try { java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectCommit(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.project.CommitsCollection.log.error(((("Cannot lookup change for commit " + (commit.name())) + " in ") + project), e); return true; } return isReachableFrom(state, repo, commit, repo, commit, repo.getAllRefs()); }
public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try { java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectCommit(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.project.CommitsCollection.log.error(((("Cannot find change for commit " + (commit.name())) + " in ") + project), e); return true; } return isReachableFrom(state, repo, commit, repo, commit, repo.getAllRefs()); }
public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try { java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectVisibility(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.project.CommitsCollection.log.error(((("Cannot find change for commit " + (commit.name())) + " in ") + project), e); return true; } return isReachableFrom(state, repo, commit, repo, commit, repo.getAllRefs()); }
public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try { java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectCommit(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.project.CommitCollection.log.error(((("Cannot find change for commit " + (commit.name())) + " in ") + project), e); return true; } return isReachableFrom(state, repo, commit, repo, commit, repo.getAllRefs()); }
public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try { java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectCommit(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.project.CommitsCollection.log.error(((("Cannot find change for commit " + (commit.name())) + " in " in ") + project), e); return true; } return isReachableFrom(state, repo, commit, repo, commit, repo.getAllRefs()); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.server.project.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource> list() throws com.google.gerrit.extensions.restapi.BadRequestException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.server.project.NoSuchProjectException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource> list() throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.BranchResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.BranchInfo>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.BranchResource> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.BranchResource>> views() { return view; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.BranchResource>> views() throws com.google.gerrit.extensions.restapi.AuthException { return views; }
@java.lang.Override public com.google.gerrit.server.change.DraftCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { checkIdentifiedUser(); java.lang.String uuid = id.get(); java.lang.String uuid = id.get(); for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.draftByPatchSetAuthor(dbProvider.get(), rev.get(), rev.getNotes())) { if (uuid.equals(c.key())) { return new com.google.gerrit.server.change.DraftCommentResource(id, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.change.DraftCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { checkIdentifiedUser(); java.lang.String uuid = id.get(); java.lang.String uuid = id.get(); for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.draftByPatchSetAuthor(dbProvider.get(), rev.getPatchSet().getId(), rev.getNotes())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.change.DraftCommentResource(id, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.change.DraftCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { checkIdentifiedUser(); java.lang.String uuid = id.get(); java.lang.String uuid = id.get(); for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.draftByPatchSetAuthor(dbProvider.get(), rev.get(), rev.getNotes())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.change.DraftCommentResource(id, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.change.DraftCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { checkIdentifiedUser(); java.lang.String uuid = id.get(); java.lang.String uuid = id.get(); for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.draftByPatchSetAuthor(dbProvider.get(), rev.get(), rev.getNotes())) { if (uuid.equals(c.key.uuid())) { return new com.google.gerrit.server.change.DraftCommentResource(id, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.change.DraftCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { checkIdentifiedUser(); java.lang.String uuid = id.get(); java.lang.String uuid = id.get(); for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.draftByPatchSetAuthor(dbProvider.get(), rev.getPatchSet().getId(), rev.getNotes())) { if (uuid.equals(c.key.uuid())) { return new com.google.gerrit.server.change.DraftCommentResource(id, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource> list() { return list.get(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { return list.get(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource> list() throws com.google.gerrit.extensions.restapi.RestApiException { return list.get(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource> list() throws com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource> list() { return list.get(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource> list() throws com.google.gerrit.extensions.restapi.RestApiException { try { return list.get(); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
@java.lang.Override public com.google.gerrit.server.project.CreateBranch create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) { return createBranchFactory.create(name, name.get()); }
@java.lang.Override public com.google.gerrit.server.project.CreateBranch create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) { return createBranchFactory.create(name, project, name); }
@java.lang.Override public com.google.gerrit.server.project.CreateBranch create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString name) { return createBranchFactory.create(name, project, name); }
@java.lang.Override public com.google.gerrit.server.project.CreateBranch create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) { return createBranchFactory.create(name, project, name.get()); }
@java.lang.Override public com.google.gerrit.server.project.CreateBranch create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) { return createBranchFactory.create(name, project, name).build(); }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource>> views() { return view; }
@java.lang.Override public com.google.gerrit.extensions.restapi.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource>> views() throws com.google.gerrit.extensions.restapi.AuthException { return views; }
@com.google.gerrit.common.Nullable private com.google.gerrit.server.project.ProjectResource _parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (id.endsWith(Constants.DOT_GIT_EXT)) { id = id.substring(0, ((id.length()) - (Constants.DOT_GIT_EXT.length()))); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(id); com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { return null; } if (checkAccess) { try { permissionBackend.user(user).check(ProjectPermission.ACCESS); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return null; } } return new com.google.gerrit.server.project.ProjectResource(state, user.get()); }
@com.google.gerrit.common.Nullable private com.google.gerrit.server.project.ProjectResource _parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (id.endsWith(Constants.DOT_GIT_EXT)) { id = id.substring(0, ((id.length()) - (Constants.DOT_GIT_EXT.length()))); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(id); com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { return null; } if (checkAccess) { try { permissionBackend.user(user).check(ProjectPermission.ACCESS); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return null; } } return new com.google.gerrit.server.project.ProjectResource(state, user.get()); }
@com.google.gerrit.common.Nullable private com.google.gerrit.server.project.ProjectResource _parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (id.endsWith(Constants.DOT_GIT_EXT)) { id = id.substring(Constants.DOT_GIT_EXT.length()); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(id); com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { return null; } if (checkAccess) { try { permissionBackend.user(user).check(ProjectPermission.ACCESS); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return null; } } return new com.google.gerrit.server.project.ProjectResource(state, user.get()); }
@com.google.gerrit.common.Nullable private com.google.gerrit.server.project.ProjectResource _parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (id.endsWith(Constants.DOT_GIT_EXT)) { id = id.substring(0, ((id.length()) - (Constants.DOT_GIT_EXT.length()))); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(id); com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { return null; } if (checkAccess) { try { permissionBackend.user(user).project(nameKey).check(ProjectPermission.ACCESS); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return null; } } return new com.google.gerrit.server.project.ProjectResource(state, user.get()); }
@com.google.gerrit.common.Nullable private com.google.gerrit.server.project.ProjectResource _parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (id.endsWith(Constants.DOT_GIT_EXT)) { id = id.substring(0, ((id.length()) - (Constants.DOT_GIT_EXT.length()))); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(id); com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { return null; } if (checkAccess) { try { permissionBackend.user(user).check(ProjectPermission.ACCESS); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return null; } return new com.google.gerrit.server.project.ProjectResource(state, user.get()); } }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id, checkAccess); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Not Found: %s", id)); } return rsrc; }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id, checkAccess); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Not found: %s", id)); } return rsrc; }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id, checkAccess); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Not Found: %s not found: %s", id)); } return rsrc; }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id, checkAccess); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Not Found: %s not found", id)); } return rsrc; }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id, checkAccess); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Not Found: %s", id)); } return rsrc; }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return parse(id, true); }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { try { return parse(id, true); } catch (com.google.gerrit.server.permissions.PermissionBackendException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.server.permissions.PermissionBackendException(id, true); } }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { try { return parse(id, true); } catch (com.google.gerrit.server.permissions.PermissionBackendException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { try { return parse(id, true); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(id, java.io.IOException(id, true); } }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { try { return parse(id, true); } catch (com.google.gerrit.server.permissions.PermissionBackendException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(id, true); } }
@java.lang.Override public com.google.gerrit.server.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }
@java.lang.Override public com.google.gerrit.server.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.project.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }
@java.lang.Override public com.google.gerrit.server.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.lang.Exception { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }
@java.lang.Override public com.google.gerrit.server.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(id); } return rsrc; }
@java.lang.Override public com.google.gerrit.server.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommentInfo> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.DraftCommentResource rsrc, com.google.gerrit.extensions.common.DraftCommentInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, com.google.gerrit.server.update.UpdateException { try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.server.change.DeleteDraftComment.Op op = new com.google.gerrit.server.change.DeleteDraftComment.Op(rsrc.getComment().key); bu.addOp(rsrc.getChange().key); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommentInfo> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.DraftCommentResource rsrc, com.google.gerrit.extensions.common.DraftCommentInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.server.change.DeleteDraftComment.Op op = new com.google.gerrit.server.change.DeleteDraft.Op(rsrc.getComment().key); bu.addOp(rsrc.getChange().key); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommentInfo> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.DraftCommentResource rsrc, com.google.gerrit.extensions.common.DraftCommentInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.server.change.DeleteDraft.Op op = new com.google.gerrit.server.change.DeleteDraftComment.Op(rsrc.getComment().key); bu.addOp(rsrc.getChange().key); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommentInfo> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.DraftCommentResource rsrc, com.google.gerrit.extensions.common.DraftCommentInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.server.change.DeleteDraftComment.Op op = new com.google.gerrit.server.change.DeleteDraftComment.Op(rsrc.getComment().key); bu.addOp(rsrc.getChange().key); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommentInfo> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.DraftCommentResource rsrc, com.google.gerrit.extensions.common.DraftCommentInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, com.google.gerrit.server.update.UpdateException { try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.server.change.DeleteDraftComment.Op op = new com.google.gerrit.server.change.DeleteDraftComment.Op(rsrc.getComment().key); bu.addOp(rsrc.getChange().key); bu.execute(); return com.google.gerrit.extensions.restapi.Response.none(); }
private static com.google.gerrit.reviewdb.client.AccountGroup getExistingGroup(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUUID).toList(); if ((accountGroups.size()) == 1) { return com.google.gerrit.common.data.GroupReference.getOnlyElement(accountGroups); } else if (accountGroups.isEmpty()) { return com.google.gerrit.common.errors.NoSuchGroupException(groupUUID); } else if (accountGroups.isEmpty()) { throw new com.google.gwtorm.server.OrmDuplicateKeyException(("Group UUID " + groupUUID)); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException(("Cannot lookup group " + groupUUID)); } }
private static com.google.gerrit.reviewdb.client.AccountGroup getExistingGroup(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUUID).toList(); if ((accountGroups.size()) == 1) { return com.google.gerrit.common.data.GroupReference.getOnlyElement(accountGroups); } else if (accountGroups.isEmpty()) { return com.google.gerrit.common.errors.NoSuchGroupException(groupUUID); } else if (accountGroups.isEmpty()) { throw new com.google.gwtorm.server.OrmDuplicateKeyException(("Cannot find group UUID " + groupUUID)); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException(("Cannot query group " + groupUUID)); } }
private static com.google.gerrit.reviewdb.client.AccountGroup getExistingGroup(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUUID).toList(); if ((accountGroups.size()) == 1) { return com.google.gerrit.common.data.GroupReference.getOnlyElement(accountGroups); } else if (accountGroups.isEmpty()) { return com.google.gerrit.common.errors.NoSuchGroupException(groupUUID); } else if (accountGroups.isEmpty()) { throw new com.google.gwtorm.server.OrmDuplicateKeyException(("Cannot find group UUID " + groupUUID)); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException(("Cannot lookup group " + groupUUID)); } }
private static com.google.gerrit.reviewdb.client.AccountGroup getExistingGroup(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUUID).toList(); if ((accountGroups.size()) == 1) { return com.google.gerrit.common.data.GroupReference.getOnlyElement(accountGroups); } else if (accountGroups.isEmpty()) { return com.google.gerrit.common.errors.NoSuchGroupException(groupUUID); } else if (accountGroups.isEmpty()) { throw new com.google.gwtorm.server.OrmDuplicateKeyException(("Cannot find group UUID " + groupUUID)); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException(("Cannot find account UUID " + groupUUID)); } }
private static com.google.gerrit.reviewdb.client.AccountGroup getExistingGroup(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUUID).toList(); if ((accountGroups.size()) == 1) { return com.google.gerrit.common.data.GroupReference.getOnlyElement(accountGroups); } else if (accountGroups.isEmpty()) { return com.google.gerrit.common.errors.NoSuchGroupException(groupUUID); } else if (accountGroups.isEmpty()) { throw new com.google.gwtorm.server.OrmDuplicateKeyException(("Cannot find group UUID " + groupUUID)); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException(("Cannot find group " + groupUUID)); } }
@org.junit.Test public void ownerCannotBeUpdatedToNull() throws java.lang.Exception { populateGroupConfig(groupUUID, "users = 42\n" }; com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.InternalGroupConfig.load().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate(createUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get()); try { expectedException.class); } catch (com.google.gwtorm.server.OrmException e) { expectedException.commit(e); } }
@org.junit.Test public void ownerCannotBeUpdatedToNull() throws java.lang.Exception { populateGroupConfig(groupUUID, "users = 42\n" }; com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.InternalGroupConfig.load().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate(createUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get()); try { expectedException.class); } catch (com.google.gwtorm.server.OrmException e) { expectedException.commit(e.getMessage()); } }
@org.junit.Test public void ownerCannotBeUpdatedToNull() throws java.lang.Exception { populateGroupConfig(groupUUID, "users = 42\n" }; com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.InternalGroupConfig.load().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate(createUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get()); try { expectedException.expect(ownerId); } catch (com.google.gwtorm.server.OrmException e) { expectedException.commit(e); } }
@org.junit.Test public void ownerCannotBeUpdatedToNull() throws java.lang.Exception { populateGroupConfig(groupUUID, "users = 42\n" }; com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.InternalGroupConfig.load().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate(createUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get()); try { expectedException.class); } catch (com.google.gwtorm.server.OrmException e) { expectedException.expectMessage("Cannot create UUID of user " + userId)); } }
@org.junit.Test public void ownerCannotBeUpdatedToNull() throws java.lang.Exception { populateGroupConfig(groupUUID, "users = 42\n" }; com.google.gerrit.server.group.GroupConfig groupConfig = com.google.gerrit.server.group.GroupConfig.loadForGroup(repository, groupUUID); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.InternalGroupConfig.load().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate(createUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get()); try { expectedException.class); } catch (com.google.gwtorm.server.OrmException e) { expectedException.expectMessage("Cannot create UUID of another user " + userId)); } }
@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic()? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic()? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic()? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic()? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic()? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.DraftCommentResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.DraftCommentInfo>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.DraftResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.ChangeResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.DraftResource>> views() { return views; }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternal(); if (recursive) { return getDirections(group, resource.getControl()); } return getDirectMembers(group, resource.getControl()); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternal(); if (recursive) { return getDirections(group, resource.getControl()); } return getDirections(group, resource.getControl()); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(resource.getControl()); if (recursive) { return getDirections(group, resource.getControl()); } return getDirections(group, resource.getControl()); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Basic group = resource.asInternalGroup().orElseThrow(resource.getControl()); if (recursive) { return getDirections(group, resource.getControl()); } return getDirections(group, resource.getControl()); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternal(); if (recursive) { return getDirections(group, resource.getControl()); } if (recursive) { return getDirections(group, resource.getControl()); } }
public com.google.gerrit.server.project.ProjectResource getParent() { return parent; }
public com.google.gerrit.server.api.project.ProjectResource getParent() { return parent; }
public com.google.gerrit.server.project.ProjectResource getParent() { return getParent(); }
public com.google.gerrit.server.project.ProjectResource getParent() { return parent.getParent(); }
public com.google.gerrit.server.api.project.ProjectResource getParent() { return getParentProject().parent(); }
@org.junit.Test public void idOfNewGroupCreation() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.Id>(getPreferences().setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id((-2))).build(); com.google.gerrit.server.git.MetaDataUpdate metaConfig = com.google.gerrit.server.group.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdateFactory.createFor(org.eclipse.jgit.errors.ConfigInvalidException.class)) { expectedException.expect(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); } }
@org.junit.Test public void idOfNewGroupCreation() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.Id>(getPreferences().setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id((-2))).build(); com.google.gerrit.server.git.MetaDataUpdate metaConfig = com.google.gerrit.server.group.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdateFactory.createFor(org.eclipse.jgit.errors.ConfigInvalidException.class)) { expectedException.expect(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); exception.expectMessage("Cannot create of user of user " + userId)); } }
@org.junit.Test public void idOfNewGroupCreation() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.Id>(getPreferences().setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id((-2))).build(); com.google.gerrit.server.git.MetaDataUpdate metaConfig = com.google.gerrit.server.group.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdateFactory.createFor(org.eclipse.jgit.errors.ConfigInvalidException.class)) { expectedException.expect(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); exception.expectMessage("Cannot create of user of user " + userDataUpdate")); } }
@org.junit.Test public void idOfNewGroupCreation() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.Id>(getPreferences().setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id((-2))).build(); com.google.gerrit.server.git.MetaDataUpdate metaConfig = com.google.gerrit.server.group.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdateFactory.createFor(org.eclipse.jgit.errors.ConfigInvalidException.class)) { expectedException.expect(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); exception.expectMessage("Cannot create of user of user " + (userDataUpdate) + "Users")); } }
@org.junit.Test public void idOfNewGroupCreation() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.Id>(getPreferences().setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id((-2))).build(); com.google.gerrit.server.git.MetaDataUpdate metaConfig = com.google.gerrit.server.group.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdateFactory.createFor(org.eclipse.jgit.errors.ConfigInvalidException.class)) { expectedException.expect(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); exception.expectMessage("Cannot create of user of user " + (userDataUpdate) + "User-user")); } }
private com.google.gerrit.server.group.InternalGroupInNoteDb createGroupInNoteDb(com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.server.group.InternalGroupCreation> groupCreation, com.google.gerrit.server.group.InternalUser user) throws com.google.gwtorm.server.OrmException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { com.google.gerrit.reviewdb.client.Account.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey()); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getNameKey(); com.google.gerrit.server.group.GroupNameKey groupName = com.google.gerrit.server.GroupConfig.loadForNewGroup(allUsersRepoInfo, groupCreation::getGroupUUID(), groupName); com.google.gerrit.reviewdb.client.AccountGroup.Id groupName = com.google.gerrit.server.group.GroupConfig.createForNewGroup(allUsersRepo, groupCreation, user.getAccountId(), groupName); commit(repo, userName); return groupConfig.getLoad(); } }
private com.google.gerrit.server.group.InternalGroupInNoteDb createGroupInNoteDb(com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.server.group.InternalGroupCreation> groupCreation, com.google.gerrit.server.group.InternalUser user) throws com.google.gwtorm.server.OrmException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { com.google.gerrit.reviewdb.client.Account.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey()); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getNameKey(); com.google.gerrit.server.group.GroupNameKey groupName = com.google.gerrit.server.GroupConfig.loadForNewGroup(allUsersRepo, groupCreation::getGroupUUID(), groupName); com.google.gerrit.reviewdb.client.AccountGroup.Id groupName = com.google.gerrit.server.group.GroupConfig.createForNewGroup(allUsersRepoInfo, groupCreation, user.getAccountId(), groupName); commit(repo, userName); return groupConfig.getLoad(); } }
private com.google.gerrit.server.group.InternalGroupInNoteDb createGroupInNoteDb(com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.server.group.InternalGroupCreation> groupCreation, com.google.gerrit.server.group.InternalUser user) throws com.google.gwtorm.server.OrmException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { com.google.gerrit.reviewdb.client.Account.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey()); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getNameKey(); com.google.gerrit.server.group.GroupNameKey groupName = com.google.gerrit.server.GroupConfig.loadForNewGroup(allUsersRepoInfo, groupCreation::getGroupUUID(), groupName); com.google.gerrit.reviewdb.client.AccountGroup.Id groupName = com.google.gerrit.server.group.GroupConfig.createForNewGroup(allUsersRepoInfo, groupCreation, user.getAccountId(), groupName); commit(repo, userName); return groupConfig.getLoaded(); } }
private com.google.gerrit.server.group.InternalGroupInNoteDb createGroupInNoteDb(com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.server.group.InternalGroupCreation> groupCreation, com.google.gerrit.server.group.InternalUser user) throws com.google.gwtorm.server.OrmException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { com.google.gerrit.reviewdb.client.Account.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey()); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getNameKey(); com.google.gerrit.server.group.GroupNameKey groupName = com.google.gerrit.server.GroupConfig.loadForNewGroup(allUsersRepoInfo, groupCreation::getGroupUUID(), groupName); com.google.gerrit.reviewdb.client.AccountGroup.Id groupName = com.google.gerrit.server.group.GroupConfig.createForNewGroup(allUsersRepoInfo, groupCreation, user.getAccountId(), groupName); commit(repo, userName); return groupConfig.getLoadedAccount().orElseInstance(true); } }
private com.google.gerrit.server.group.InternalGroupInNoteDb createGroupInNoteDb(com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.server.group.InternalGroupCreation> groupCreation, com.google.gerrit.server.group.InternalUser user) throws com.google.gwtorm.server.OrmException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { com.google.gerrit.reviewdb.client.Account.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey()); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getNameKey(); com.google.gerrit.server.group.GroupNameKey groupName = com.google.gerrit.server.GroupConfig.loadForNewGroup(allUsersRepoInfo, groupCreation::getGroupUUID(), groupName); com.google.gerrit.reviewdb.client.AccountGroup.Id groupName = com.google.gerrit.server.group.GroupConfig.createForNewGroup(allUsersRepoInfo, groupCreation, user.getAccountId(), groupName); commit(repo, groupName); return groupConfig.getLoadedAccount().orElseInstance(new com.google.gerrit.reviewdb.client.Account.Id(com.google.gerrit.reviewdb.client.Account.Id, groupCreation)); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orNull(input); input = com.google.gerrit.server.group.AddSubsections.Input.init(input); final com.google.gerrit.server.group.AddSubsections.Input input = resource.asAccountGroup().init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveGroup())) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format("Cannot delete groups from delete groups from group %s", internalGroup.getName())); } java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subsectionsToRemove = new java.util.HashSet<>(); for (java.lang.String subgroup : input.groups) { com.google.gerrit.common.data.GroupDescription.Basic submodule = groupsCollection.parse(substring.getName())); subgroupsToRemove.add(substring); } return submodulesToRemove; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orNull(input); input = com.google.gerrit.server.group.AddSubsections.Input.init(input); final com.google.gerrit.server.group.AddSubsections.Input input = resource.asAccountGroup().init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveGroup())) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format("Cannot delete groups from group %s", internalGroup.getName())); } java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subsectionsToRemove = new java.util.HashSet<>(); for (java.lang.String subgroup : input.groups) { com.google.gerrit.common.data.GroupDescription.Basic submodule = groupsCollection.parse(substring, internalGroup.getName())); subgroupsToRemove.add(substring); } return submodulesToRemove; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orNull(input); input = com.google.gerrit.server.group.AddSubsections.Input.init(input); final com.google.gerrit.server.group.AddSubsections.Input input = resource.asAccountGroup().init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveGroup())) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format("Cannot delete groups from group %s", internalGroup.getName())); } java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subsectionsToRemove = new java.util.HashSet<>(); for (java.lang.String subgroup : input.groups) { com.google.gerrit.common.data.GroupDescription.Basic submodule = groupsCollection.parse(substring.getName())); subgroupsToRemove.add(substring, groupToRemove); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = groupsCollection.parse(groupId); if (!(groupControl.canRemove())) { throw new com.google.gerrit.server.project.NoSuchGroupException(groupControl.getGroupUUID()); } return group; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orNull(input); input = com.google.gerrit.server.group.AddSubsections.Input.init(input); final com.google.gerrit.server.group.AddSubsections.Input input = resource.asAccountGroup().init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveGroup())) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format("Cannot delete groups from group %s", internalGroup.getName())); } java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subsectionsToRemove = new java.util.HashSet<>(); for (java.lang.String subgroup : input.groups) { com.google.gerrit.common.data.GroupDescription.Basic submodule = groupsCollection.parse(substring.getName())); subgroupsToRemove.add(substring, groupToRemove); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = groupsCollection.parse(groupId); if (!(groupControl.canRemove())) { throw new com.google.gerrit.server.project.NoSuchGroupException(groupUUID, e.getGroupUUID()); } return group; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orNull(input); input = com.google.gerrit.server.group.AddSubsections.Input.init(input); final com.google.gerrit.server.group.AddSubsections.Input input = resource.asAccountGroup().init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveGroup())) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format("Cannot delete groups from group %s", internalGroup.getName())); } java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subsectionsToRemove = new java.util.HashSet<>(); for (java.lang.String subgroup : input.groups) { com.google.gerrit.common.data.GroupDescription.Basic submodule = groupsCollection.parse(substring.getName())); subgroupsToRemove.add(substring, groupToRemove); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = groupsCollection.parse(groupId); if (group!= null) { removeSubsectionsToRemove.add(group.getGroupUUID()); } try { deleteSubsections(groupUUID, groupUuid); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.common.errors.NoSuchGroupException(e); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.CreateGroupResource resource, com.google.gerrit.server.group.AddMember.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.group.AddSubmodule.Input in = new com.google.gerrit.server.group.AddSubmodule.Input(); in.groups = com.google.common.collect.ImmutableList.of(resource.getMember().get()); delete.groups = com.google.common.collect.ImmutableList.of(resource.getMember().get()); return delete.get().apply(resource, in); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.CreateGroupResource resource, com.google.gerrit.server.group.AddMember.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.group.AddSubmodule.Input in = new com.google.gerrit.server.group.AddSubmodule.Input(); in.groups = com.google.common.collect.ImmutableList.of(resource.getMember().get()); in.groups = com.google.common.collect.ImmutableList.of(resource.getMember().get()); return delete.get().apply(resource, in); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.CreateGroupResource resource, com.google.gerrit.server.group.AddMember.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.group.AddSubmodule.Input in = new com.google.gerrit.server.group.AddSubmission.Input(); in.groups = com.google.common.collect.ImmutableList.of(resource.getMember().get()); delete.groups = com.google.common.collect.ImmutableList.of(resource.getMember().get()); return delete.get().apply(resource, in); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.CreateGroupResource resource, com.google.gerrit.server.group.AddMember.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.group.AddSubmodule.Input in = new com.google.gerrit.server.group.AddSubmission.Input(); in.groups = com.google.common.collect.ImmutableList.of(resource.getMember().get()); delete.apply(resource, in); return delete.get().apply(resource, in); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.CreateGroupResource resource, com.google.gerrit.server.group.AddMember.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.group.AddSubmodule.Input in = new com.google.gerrit.server.group.AddSubmission.Input(); in.groups = com.google.common.collect.ImmutableList.of(resource.getMember().get()); in.groups = com.google.common.collect.ImmutableList.of(resource.getMember().get()); delete.get().apply(resource, in); }
com.google.gerrit.server.project.DeleteRef create(com.google.gerrit.server.project.ProjectResource r);
com.google.gerrit.server.project.DeleteRef create(com.google.gerrit.reviewdb.client.Project.NameKey r);
com.google.gerrit.server.project.DeleteRef create(com.google.gerrit.server.project.ProjectResource r;
com.google.gerrit.server.project.DeleteRef create(com.google.gerrit.server.project.ProjectResource rsrc);
com.google.gerrit.server.project.DeleteRef create(com.google.gerrit.reviewdb.client.Project.NameKey r;
private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { referenceUpdated.fire(project.getNameKey(), cmd, identifiedUser.get().getAccount()); }
private void postDeletion(com.google.gerrit.server.git.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { referenceUpdated.fire(project.getNameKey(), cmd, identifiedUser.get().getAccount()); }
private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { refUpdated.fire(project.getNameKey(), cmd, identifiedUser.get().getAccount()); }
private void postDeleted(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { referenceUpdated.fire(project.getNameKey(), cmd, identifiedUser.get().getAccount()); }
private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { referenceUpdated.fire(project.getNameKey(), ctl.getUser().getAccount()); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ConfigInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.user(rsrc.getNameKey()).check(ProjectPermission.WRITE_CONFIG); return apply(rsrc.getProjectState(), input); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ConfigInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.user(rsrc.getNameKey()).check(ProjectPermission.WRITE); return apply(rsrc.getProjectState(), input); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ConfigInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.user(rsrc.getNameKey()).check(ProjectPermission.WRITE); return apply(rsrc.getProjectState(), input); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ConfigInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.user(user).check(ProjectPermission.WRITE); return apply(rsrc.getProjectState(), input); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ConfigInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.user(user).check(ProjectPermission.WRITE); return apply(rsrc.getProjectState(), input); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.VoteResource rsrc, com.google.gerrit.extensions.api.changes.VoteInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, java.io.IOException { if (input == null) { input = new com.google.gerrit.server.change.DeleteVoteInput(); } if (((input.label)!= null) && (!(rsrc.getLabel().equals(input.label)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("label must match URL"); } if ((input.notify) == null) { input.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.ALL; } com.google.gerrit.server.change.ReviewerResource r = rsrc.getReviewer(); com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (((r.getRevisionResource())!= null) && (!(r.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("cannot delete vote on non-current patch set"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), change.getProject(), r.getChange().getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(change.getId(), new com.google.gerrit.server.change.DeleteVote.Op(projectCache.checkedGet(r.getChange().getProject()), rsrc.getReviewerUser(), input)); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.VoteResource rsrc, com.google.gerrit.extensions.api.changes.VoteInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, java.io.IOException { if (input == null) { input = new com.google.gerrit.server.api.changes.DeleteVoteInput(); } if (((input.label)!= null) && (!(rsrc.getLabel().equals(input.label)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("label must match URL"); } if ((input.notify) == null) { input.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.ALL; } com.google.gerrit.server.change.ReviewerResource r = rsrc.getReviewer(); com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (((r.getRevisionResource())!= null) && (!(r.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("cannot delete vote on non-current patch set"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), change.getProject(), r.getChange().getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(change.getId(), new com.google.gerrit.server.change.DeleteVote.Op(projectCache.checkedGet(r.getChange().getProject()), rsrc.getReviewerUser(), input)); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.VoteResource rsrc, com.google.gerrit.extensions.api.changes.DeleteVoteInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, java.io.IOException { if (input == null) { input = new com.google.gerrit.server.change.DeleteVoteInput(); } if (((input.label)!= null) && (!(rsrc.getLabel().equals(input.label)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("label must match URL"); } if ((input.notify) == null) { input.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.ALL; } com.google.gerrit.server.change.ReviewerResource r = rsrc.getReviewer(); com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (((r.getRevisionResource())!= null) && (!(r.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("Cannot delete vote on non-current patch set"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), change.getProject(), r.getChange().getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(change.getId(), new com.google.gerrit.server.change.DeleteVote.Op(projectCache.checkedGet(r.getChange().getProject()), rsrc.getReviewerUser(), input)); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.VoteResource rsrc, com.google.gerrit.extensions.api.changes.VoteInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, java.io.IOException { if (input == null) { input = new com.google.gerrit.server.api.changes.DeleteVoteInput(); } if (((input.label)!= null) && (!(rsrc.getLabel().equals(input.label)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("label must match URL"); } if ((input.notify) == null) { input.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.ALL; } com.google.gerrit.server.change.ReviewerResource r = rsrc.getReviewer(); com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (((r.getRevisionResource())!= null) && (!(r.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("cannot delete vote on non-current patch set"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), change.getProject(), r.getChange().getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(change.getId(), new com.google.gerrit.server.change.DeleteVote.Op(projectCache.checkedGet(r.getChange().getProject()), rsrc.getLabel(), rsrc.getReviewerUser(), input)); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.VoteResource rsrc, com.google.gerrit.extensions.api.changes.VoteInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, java.io.IOException { if (input == null) { input = new com.google.gerrit.server.api.changes.DeleteVoteInput(); } if (((input.label)!= null) && (!(rsrc.getLabel().equals(input.label)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("label must match URL"); } if ((input.notify) == null) { input.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.ALL; } com.google.gerrit.server.change.ReviewerResource r = rsrc.getReviewer(); com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (((r.getRevisionResource())!= null) && (!(r.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("cannot delete vote on non-current patch set"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), change.getProject(), r.getChange().getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(change.getId(), new com.google.gerrit.server.change.DeleteVote.Op(projectCache.checkedGet(r.getChange().getProject()), rsrc.getReviewerUser(), rsrc.getLabel(), input)); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return directChildProjects(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey()); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return recursiveChildProjects(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey()); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { if (recursiveChildProjects(rsrc.getNameKey())) { return directChildProjects(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey()); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return directChildProjects(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey()); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return directChildProjects(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey(), }
@java.lang.Override public void run() { java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> names = (tryingAgain)? retryOn : projectCache.all(); for (com.google.gerrit.reviewdb.client.Project.NameKey projectName : names) { com.google.gerrit.server.git.ProjectConfig config = projectCache.get(projectName).getConfig(); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { continue; } try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName)) { rename(md); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noProject) { continue; } catch (org.eclipse.jgit.errors.RepositoryNotFoundException err) { continue; } catch (org.eclipse.jgit.errors.RepositoryNotFoundException | java.io.IOException err) { com.google.gerrit.server.git.RenameGroupOp.log.error(((("Cannot rename account " + (oldName)) + " in " in ") + projectName), err); err); } } if ((!(retryingAgain)) && (!(tryingAgain))) { try { retryingAgain = true; } catch (org.eclipse.jgit.errors.ConfigInvalidException | java.util.concurrent.TimeUnit.MINUTES); } }
@java.lang.Override public void run() { java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> names = (tryingAgain)? retryOn : projectCache.all(); for (com.google.gerrit.reviewdb.client.Project.NameKey projectName : names) { com.google.gerrit.server.git.ProjectConfig config = projectCache.get(projectName).getConfig(); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { continue; } try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName)) { rename(md); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noProject) { continue; } catch (org.eclipse.jgit.errors.RepositoryNotFoundException err) { continue; } catch (org.eclipse.jgit.errors.RepositoryNotFoundException | java.io.IOException err) { com.google.gerrit.server.git.RenameGroupOp.log.error(((("Cannot rename account " + (oldName)) + " in " in ") + projectName), err); } } if ((!(retryingAgain)) && (!(tryingAgain))) { try { retryingAgain = true; } catch (org.eclipse.jgit.errors.ConfigInvalidException | java.util.concurrent.TimeUnit.MINUTES); } }
@java.lang.Override public void run() { java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> names = (tryingAgain)? retryOn : projectCache.all(); for (com.google.gerrit.reviewdb.client.Project.NameKey projectName : names) { com.google.gerrit.server.git.ProjectConfig config = projectCache.get(projectName).getConfig(); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { continue; } try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName)) { rename(md); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noProject) { continue; } catch (org.eclipse.jgit.errors.RepositoryNotFoundException err) { continue; } catch (org.eclipse.jgit.errors.RepositoryNotFoundException | java.io.IOException err) { com.google.gerrit.server.git.RenameGroupOp.log.error(((("Cannot rename account " + (oldName)) + " in " in ") + projectName), err); err); } } if ((!(retryOn.isEmpty())) && (!(tryingAgain))) { try { retries = true; } catch (java.util.concurrent.FutureException | java.util.concurrent.TimeUnit.MINUTES); } }
@java.lang.Override public void run() { java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> names = (tryingAgain)? retryOn : projectCache.all(); for (com.google.gerrit.reviewdb.client.Project.NameKey projectName : names) { com.google.gerrit.server.git.ProjectConfig config = projectCache.get(projectName).getConfig(); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { continue; } try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName)) { rename(md); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noProject) { continue; } catch (org.eclipse.jgit.errors.RepositoryNotFoundException err) { continue; } catch (org.eclipse.jgit.errors.RepositoryNotFoundException | java.io.IOException err) { com.google.gerrit.server.git.RenameGroupOp.log.error(((("Cannot rename account " + (oldName)) + " in " in ") + projectName), err); err); } } if ((!(retryingAgain)) && (!(tryingAgain))) { try { retryingAgain = true; } catch (org.eclipse.jgit.errors.ConfigInvalidException | java.util.concurrent.TimeUnit.MINUTES); } } }
@java.lang.Override public void run() { java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> names = (tryingAgain)? retryOn : projectCache.all(); for (com.google.gerrit.reviewdb.client.Project.NameKey projectName : names) { com.google.gerrit.server.git.ProjectConfig config = projectCache.get(projectName).getConfig(); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { continue; } try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName)) { rename(md); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noProject) { continue; } catch (org.eclipse.jgit.errors.RepositoryNotFoundException err) { continue; } catch (org.eclipse.jgit.errors.RepositoryNotFoundException | java.io.IOException err) { com.google.gerrit.server.git.RenameGroupOp.log.error(((("Cannot rename account " + (oldName)) + " in " in ") + projectName), err); err); } } if ((!(retryingAgain)) && (!(tryingAgain))) { try { retryingAgain = true; } catch (org.eclipse.jgit.errors.ConfigInvalidException | java.util.concurrent.concurrent.TimeUnit.MINUTES); } }
private void rename(com.google.gerrit.server.git.MetaDataUpdate md) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { boolean success = false; for (int attempts = 0; (!success) && (attempts < (com.google.gerrit.server.git.RenameGroupOp.MAX_TRIES)); attempts++) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { projectCache.evict(config.getProject()); return; } ref.setName(newName); md.getCommitBuilder().setAuthor(author); md.setMessage((((("Account " + (oldName)) + " to ") + (newName)) + "\n")); try { config.commit(md); projectCache.evict(config.getProject()); success = true; } catch (java.io.IOException e) { com.google.gerrit.server.git.RenameGroupOp.log.error(((((("Could not commit rename of account " + (oldName)) + " in ") + (newName)) + " in ") + (md.getProjectName().get())), e); try { java.lang.Thread.sleep(25); } catch (java.io.IOException e) { continue; } } if (!success) { com.google.gerrit.server.git.RenameGroupOp.log.warn(((((("Could not rename of change " + (oldName)) + " in ") + (md.getProjectName().get())) + " in ") + (md.getProjectName().get())) + " in ") + (md.getProjectName().get()))); } else { retryOn.add(md.getProjectName()); } } }
private void rename(com.google.gerrit.server.git.MetaDataUpdate md) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { boolean success = false; for (int attempts = 0; (!success) && (attempts < (com.google.gerrit.server.git.RenameGroupOp.MAX_TRIES)); attempts++) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { projectCache.evict(config.getProject()); return; } ref.setName(newName); md.getCommitBuilder().setAuthor(author); md.setMessage((((("Account " + (oldName)) + " to ") + (newName)) + "\n")); try { config.commit(md); projectCache.evict(config.getProject()); success = true; } catch (java.io.IOException e) { com.google.gerrit.server.git.RenameGroupOp.log.error(((((("Could not commit rename of account " + (oldName)) + " in ") + (newName)) + " in ") + (md.getProjectName().get())), e); try { java.lang.Thread.sleep(25); } catch (java.io.IOException e) { continue; } } if (!success) { com.google.gerrit.server.git.RenameGroupOp.log.warn(((((("Could not rename of account " + (oldName)) + " in ") + (md.getProjectName().get())) + " in ") + (md.getProjectName().get())) + " in ") + (md.getProjectName().get()))); } else { retryOn.add(md.getProjectName()); } } }
private void rename(com.google.gerrit.server.git.MetaDataUpdate md) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { boolean success = false; for (int attempts = 0; (!success) && (attempts < (com.google.gerrit.server.git.RenameGroupOp.MAX_TRIES)); attempts++) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { projectCache.evict(config.getProject()); return; } ref.setName(newName); md.getCommitBuilder().setAuthor(author); md.setMessage((((("Account " + (oldName)) + " to ") + (newName)) + "\n")); try { config.commit(md); projectCache.evict(config.getProject()); success = true; } catch (java.io.IOException e) { com.google.gerrit.server.git.RenameGroupOp.log.error(((((("Could not commit rename of account " + (oldName)) + " in ") + (newName)) + " in ") + (md.getProjectName().get())), e); try { java.lang.Thread.sleep(25); } catch (java.io.IOException e) { continue; } } if (!success) { com.google.gerrit.server.git.RenameGroupOp.log.warn(((((("Failed to rename of " + (oldName)) + " in ") + (md.getProjectName().get())) + " in ") + (md.getProjectName().get())) + " in ") + (md.getProjectName().get()))); } else { retryOn.add(md.getProjectName()); } } }
private void rename(com.google.gerrit.server.git.MetaDataUpdate md) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { boolean success = false; for (int attempts = 0; (!success) && (attempts < (com.google.gerrit.server.git.RenameGroupOp.MAX_TRIES)); attempts++) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { projectCache.evict(config.getProject()); return; } ref.setName(newName); md.getCommitBuilder().setAuthor(author); md.setMessage((((("Account " + (oldName)) + " to ") + (newName)) + "\n")); try { config.commit(md); projectCache.evict(config.getProject()); success = true; } catch (java.io.IOException e) { com.google.gerrit.server.git.RenameGroupOp.log.error(((((("Could not commit rename of account " + (oldName)) + " in ") + (newName)) + " in ") + (md.getProjectName().get())), e); try { java.lang.Thread.sleep(25); } catch (java.io.IOException e) { continue; } } if (!success) { com.google.gerrit.server.git.RenameGroupOp.log.warn(((((("Could not rename of change " + (oldName)) + " in ") + (md.getProjectName().get())) + " in ") + (md.getProjectName().get())) + " in ") + (md.getProjectName().get()))); try { retryOn.add(md.getProjectName()); } catch (java.lang.InterruptedException wakeUp) { continue; } } }
private void rename(com.google.gerrit.server.git.MetaDataUpdate md) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { boolean success = false; for (int attempts = 0; (!success) && (attempts < (com.google.gerrit.server.git.RenameGroupOp.MAX_TRIES)); attempts++) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { projectCache.evict(config.getProject()); return; } ref.setName(newName); md.getCommitBuilder().setAuthor(author); md.setMessage((((("Account " + (oldName)) + " to ") + (newName)) + "\n")); try { config.commit(md); projectCache.evict(config.getProject()); success = true; } catch (java.io.IOException e) { com.google.gerrit.server.git.RenameGroupOp.log.error(((((("Could not commit rename of account " + (oldName)) + " in ") + (newName)) + " in ") + (md.getProjectName().get())), e); try { java.lang.Thread.sleep(25); } catch (java.io.IOException e) { continue; } } if (!success) { com.google.gerrit.server.git.RenameGroupOp.log.warn(((((("Could not rename of account " + (oldName)) + " in ") + (md.getProjectName().get())) + " in ") + (md.getProjectName().get())) + " in ") + (md.getProjectName().get()))); try { retryOn.add(md.getProjectName()); } catch (java.lang.InterruptedException wakeUp) { continue; } } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.common.SetDashboardInfo input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.SetDefaultDashboard set = setDefault.get(); set.inherited = inherited; return set.apply(com.google.gerrit.server.project.DashboardResource.projectDefault(resource.getProjectState(), resource.getUser()), input); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.common.ProjectInfo input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.SetDefaultDashboard set = setDefault.get(); set.inherited = inherited; return set.apply(com.google.gerrit.server.project.DashboardResource.projectDefault(resource.getProjectState(), resource.getUser()), input); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.common.ProjectResource input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.SetDefaultDashboard set = setDefault.get(); set.inherited = inherited; return set.apply(com.google.gerrit.server.project.DashboardResource.projectDefault(resource.getProjectState(), resource.getUser()), input); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.common.EditInfo input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.SetDefaultDashboard set = setDefault.get(); set.inherited = inherited; return set.apply(com.google.gerrit.server.project.DashboardResource.projectDefault(resource.getProjectState(), resource.getUser()), input); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.common.SetDashboardInfo input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.SetDefaultDashboard set = setDefault.get(); set.inherited = inherited; return set.apply(com.google.gerrit.server.project.DashboardResource.project(), resource.getUser()), input); }
private void renameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, java.lang.String newName) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroupUpdate group = com.google.gerrit.server.group.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(newName)).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, group); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("Cannot lookup group %s not found", groupUUID, groupUuid)); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Cannot lookup group " + newName) + "\" already exists")); } }
private void renameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, java.lang.String newName) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroupUpdate group = com.google.gerrit.server.group.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(newName)).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, group); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("Cannot lookup group %s not found", groupUUID, groupUuid)); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Cannot lookup name " + newName) + "\" already exists")); } }
private void renameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, java.lang.String newName) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroupUpdate group = com.google.gerrit.server.group.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(newName)).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, group); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("Cannot lookup group %s not found", groupUUID, groupUuid)); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Cannot create name " + newName) + "\" already exists")); } }
private void renameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, java.lang.String newName) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroupUpdate group = com.google.gerrit.server.group.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(newName)).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, group); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("Cannot lookup group %s not found", groupUUID, groupUUID)); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Cannot lookup name " + newName) + "\" already exists")); } }
private void renameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, java.lang.String newName) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroupUpdate group = com.google.gerrit.server.group.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(newName)).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, group); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("Cannot lookup group %s not found", groupUUID, groupUuid)); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Cannot lookup group " + newName) + "\" not existing")); } }
@java.lang.Override public com.google.gerrit.extensions.api.changes.IncludedInInfo apply(com.google.gerrit.server.project.CommitResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc.getCommit(); com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getProjectState().getNameKey(); return includedIn.apply(project, commit.getId().getName()); }
@java.lang.Override public com.google.gerrit.extensions.api.changes.IncludedInInfo apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc.getCommit(); com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getProjectState().getNameKey(); return includedIn.apply(project, commit.getId().getName()); }
@java.lang.Override public com.google.gerrit.extensions.api.changes.IncludedInInfo apply(com.google.gerrit.server.project.CommitResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc.getCommit(); com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getProjectState().getNameKey(); return includedIn.apply(project, commit.getId().get()); }
@java.lang.Override public com.google.gerrit.extensions.api.changes.IncludedInInfo apply(com.google.gerrit.server.project.CommitResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc.getCommit(); com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getProjectState().getNameKey(); return includedIn.apply(project, commit.getId()); }
@java.lang.Override public com.google.gerrit.extensions.api.changes.IncludedInInfo apply(com.google.gerrit.server.project.CommitResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc.getCommit(); com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getProjectState().getNameKey(); return includesIn.apply(project, commit.getId().getName()); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupResource rsrc, NameInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = rsrc.getOwner().orElseThrow(MethodNotAllowedException); if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("restricted owner"); } else if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("name is required"); } else if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("name is required"); } java.lang.String newName = input.name.trim(); if (newName.isEmpty()) { return newName; } renameGroup(internalGroup, newName); return newName; }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupResource rsrc, NameInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = rsrc.getOwner().orElseThrow(MethodNotAllowedException); if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("restricted owner"); } else if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("name must be required"); } else if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("name is required"); } java.lang.String newName = input.name.trim(); if (newName.isEmpty()) { return newName; } renameGroup(internalGroup, newName); return newName; }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupResource rsrc, NameInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = rsrc.getOwner().orElseThrow(MethodNotAllowedException); if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("restricted owner"); } else if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("name is required"); } else if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("option is required"); } java.lang.String newName = input.name.trim(); if (newName.isEmpty()) { return newName; } renameGroup(internalGroup, newName); return newName; }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupResource rsrc, NameInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = rsrc.getOwner().orElseThrow(MethodNotAllowedException); if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("restricted owner"); } else if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("name is required"); } java.lang.String newName = input.name.trim(); if (newName.isEmpty()) { throw new com.google.gerrit.extensions.restapi.BadRequestException("name is required"); } if (internalName.isEmpty()) { return newName; } renameGroup(internalGroup, newName); return newName; }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupResource rsrc, NameInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = rsrc.getOwner().orElseThrow(MethodNotAllowedException); if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("restricted owner"); } else if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("name is required"); } else if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("name is required"); } java.lang.String newName = input.name.trim(); if (newName.isEmpty()) { return newName; } renameGroup(internalName, newName); return newName; }
@java.lang.Override java.lang.String groupPattern() { return ((&(groupName)!= null) && (!(groupName.equals(groupName))))); }
@java.lang.Override java.lang.String groupPattern() { return ((&(groupName)!= null) && (!(groupName.equals(groupName))) { throw new com.google.gwtorm.server.OrmException(); } }
@java.lang.Override java.lang.String groupPattern() { return ((&(groupName)!= null) && (!(groupName.equals(groupname))) { throw new com.google.gwtorm.server.OrmException(); } }
@java.lang.Override java.lang.String groupPattern() { return ((&(groupName)!= null) && (!(groupName.equals(groupName))) { throw new com.google.gwtorm.server.OrmException(); }
@java.lang.Override java.lang.String groupPattern() { return ((&(groupName)!= null) && (!(groupName.equals(groupname))) { throw new com.google.gwtorm.server.OrmException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String path = rsrc.getPatchKey().get(); com.google.gerrit.server.change.RevisionResource rev = rsrc.getRevision(); org.eclipse.jgit.lib.ObjectId revstr = org.eclipse.jgit.lib.ObjectId.fromString(rev.getPatchSet().getRevision().get()); return fileContentUtil.downloadContent(projectCache.checkedGet(rev.getProject()), revstr, parent, parent); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String path = rsrc.getPatchKey().get(); com.google.gerrit.server.change.RevisionResource rev = rsrc.getRevision(); org.eclipse.jgit.lib.ObjectId revstr = org.eclipse.jgit.lib.ObjectId.fromString(rev.getPatchSet().getRevision().get()); return fileContentUtil.downloadContent(projectCache.checkedGet(rev.getProject()), revstr, parent, parent); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String path = rsrc.getPatchKey().get(); com.google.gerrit.server.change.RevisionResource rev = rsrc.getRevision(); org.eclipse.jgit.lib.ObjectId revstr = org.eclipse.jgit.lib.ObjectId.fromString(rev.getPatchSet().getRevision().get()); return fileContentUtil.downloadContent(projectCache.checkedGet(rev.getProject()), revstr, path, parent); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String path = rsrc.getPatchKey().get(); com.google.gerrit.server.change.RevisionResource rev = rsrc.getRevision(); org.eclipse.jgit.lib.ObjectId revstr = org.eclipse.jgit.lib.ObjectId.fromString(rev.getPatchSet().getRevision().get()); return fileContentUtil.downloadContent(projectCache.checkedGet(rev.getProject()), revstr, path, parent); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String path = rsrc.getPatchKey().get(); com.google.gerrit.server.change.RevisionResource rev = rsrc.getRevision(); org.eclipse.jgit.lib.ObjectId revstr = org.eclipse.jgit.lib.ObjectId.fromString(rev.getPatchSet().getRevision().get()); return fileContentUtil.downloadContent(projectCache.checkedGet(rev.getProject()), revstr, parent, parent); }
public java.util.Optional<com.google.gerrit.server.group.InternalGroup> byName(com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(groupName, groupName); }
public java.util.Optional<com.google.gerrit.server.query.change.InternalGroup> byName(com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(groupName, groupName); }
public java.util.Optional<com.google.gerrit.server.query.change.InternalGroup> byName(com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.change.GroupPredicate.name(groupName.get()), ("group " + groupName)) + "'")); }
public java.util.Optional<com.google.gerrit.server.query.change.InternalGroup> byName(com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.change.GroupPredicate.name(groupName.get()), ("group " + groupName) + "'")); }
public java.util.Optional<com.google.gerrit.server.group.InternalGroup> byName(com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.group.GroupPredicate.name(groupName.get()), ("match(groupName " + groupName)) + "'")); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupResource resource) { return resource.getName(); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupResource resource) { return resource.getGroup().getName(); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupResource resource) { return resource.getName().equals(resource.getName()); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupResource resource) { return com.google.common.base.Strings.nullToNull(resource.getName()); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupResource resource) { return com.google.gerrit.server.group.GroupResource.parse(resource.getName()); }
public java.util.Optional<com.google.gerrit.server.group.InternalGroup> byId(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(groupId).isEmpty(); }
public java.util.Optional<com.google.gerrit.server.group.InternalGroup> byId(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.change.GroupPredicate.id(groupId), ("group " + groupId))); }
public java.util.Optional<com.google.gerrit.server.group.InternalGroup> byId(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.change.GroupPredicate.id(groupId), ("limit " + groupId))); }
public java.util.Optional<com.google.gerrit.server.group.InternalGroup> byId(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.group.GroupPredicate.id(groupId), ("group " + groupId))); }
public java.util.Optional<com.google.gerrit.server.group.InternalGroup> byId(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.change.GroupPredicate.id(groupId), ("group " + groupId)")); }
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(rejectEmptyCommit = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitEmptyCommit_NoFastForward() throws java.lang.Exception { assume().that(getSubmitType()).isNotEqualTo(SubmitType.FAST_FORWARD_FORWARD_ONLY); com.google.gerrit.acceptance.PushOneCommit.Result change1 = createChange("Change 1", "a.txt", "content"); submit(change1.getChangeId()); com.google.gerrit.extensions.api.changes.ChangeApi revert1 = gApi.changes().id(change.getChangeId()).revert(); approve(revert(change1.getChangeId()); revert(revertChange2.id()); revert(revert(revert.get()._number()); }
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(rejectEmptyCommit = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitEmptyCommit_NoFastForward() throws java.lang.Exception { assume().that(getSubmitType()).isNotEqualTo(SubmitType.FAST_FORWARD_FORWARD_ONLY); com.google.gerrit.acceptance.PushOneCommit.Result change1 = createChange("Change 1", "a.txt", "content"); submit(change1.getChangeId()); com.google.gerrit.extensions.api.changes.ChangeApi revert1 = gApi.changes().id(change.getChangeId()).revert(); revert(revert(); approve(revert(change1.getChangeId()).revert(); com.google.gerrit.extensions.api.changes.ChangeApi revert2 = gApi.changes().id(change.getChangeId()).revert(); approve(revert(); approve(revert(revert2.get()._number()).submit(); }
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(rejectEmptyCommit = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitEmptyCommit_NoFastForward() throws java.lang.Exception { assume().that(getSubmitType()).isNotEqualTo(SubmitType.FAST_FORWARD_FORWARD_ONLY); com.google.gerrit.acceptance.PushOneCommit.Result change1 = createChange("Change 1", "a.txt", "content"); submit(change1.getChangeId()); com.google.gerrit.extensions.api.changes.ChangeApi revert1 = gApi.changes().id(change.getChangeId()).revert(); revert(revert(); approve(revert(change1.getChangeId()).revert(); com.google.gerrit.extensions.api.changes.ChangeApi revert2 = gApi.changes().id(change.getChangeId()).revert(); approve(revert(); approve(revert2.id()); revert(revert(revert2.get()._number).get(); }
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(rejectEmptyCommit = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitEmptyCommit_NoFastForward() throws java.lang.Exception { assume().that(getSubmitType()).isNotEqualTo(SubmitType.FAST_FORWARD_FORWARD_ONLY); com.google.gerrit.acceptance.PushOneCommit.Result change1 = createChange("Change 1", "a.txt", "content"); submit(change1.getChangeId()); com.google.gerrit.extensions.api.changes.ChangeApi revert1 = gApi.changes().id(change.getChangeId()).revert(); revert(revert(); approve(revert(change1.getChangeId()).revert(); com.google.gerrit.extensions.api.changes.ChangeApi revert2 = gApi.changes().id(change.getChangeId()).revert(); approve(revert(); approve(revert2.id()); revert(revert(revert2.get()._number); revert2.current().submit(); }
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(rejectEmptyCommit = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitEmptyCommit_NoFastForward() throws java.lang.Exception { assume().that(getSubmitType()).isNotEqualTo(SubmitType.FAST_FORWARD_FORWARD_ONLY); com.google.gerrit.acceptance.PushOneCommit.Result change1 = createChange("Change 1", "a.txt", "content"); submit(change1.getChangeId()); com.google.gerrit.extensions.api.changes.ChangeApi revert1 = gApi.changes().id(change.getChangeId()).revert(); revert(revert(); approve(revert(change1.getChangeId()).revert(); com.google.gerrit.extensions.api.changes.ChangeApi revert2 = gApi.changes().id(change.getChangeId()).revert(); approve(revert(); approve(revert2.id()); revert(revert(revert2.get()._number); }
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(rejectEmptyCommit = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitEmptyCommit_FastForward() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInput ci = new com.google.gerrit.extensions.common.ChangeInput(); ci.subject = "Empty change"; ci.project = project.get(); ci.branch = "master"; com.google.gerrit.extensions.api.changes.ChangeApi change = gApi.changes().create(ci); approve(change.id()); cherry.branch(change.id()); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(((("Change " + (change.get()._number)) + ": Change could not be submitted.")); change.current().submit(); }
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(rejectEmptyCommit = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitEmptyCommit_FastForward() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInput ci = new com.google.gerrit.extensions.common.ChangeInput(); ci.subject = "Empty change"; ci.project = project.get(); ci.branch = "master"; com.google.gerrit.extensions.api.changes.ChangeApi change = gApi.changes().create(ci); approve(change.id()); cherry.branch(change.id()); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage((("Change " + (change.get()._number)) + ": Change could not be submitted.")); change.current().submit(); }
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(rejectEmptyCommit = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitEmptyCommit_FastForward() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInput ci = new com.google.gerrit.extensions.common.ChangeInput(); ci.subject = "Empty change"; ci.project = project.get(); ci.branch = "master"; com.google.gerrit.extensions.api.changes.ChangeApi change = gApi.changes().create(ci); approve(change.id()); commit(change.id()); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(((("Change " + (change.get()._number)) + ": Change could not be ") + ": ") + (change.get()._number)) + "Project is not be merged.")); change.current().submit(); }
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(rejectEmptyCommit = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitEmptyCommit_FastForward() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInput ci = new com.google.gerrit.extensions.common.ChangeInput(); ci.subject = "Empty change"; ci.project = project.get(); ci.branch = "master"; com.google.gerrit.extensions.api.changes.ChangeApi change = gApi.changes().create(ci); approve(change.id()); commit(change.id()); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(((("Change " + (change.get()._number)) + ": Change could not be ") + ": ") + (change.get()._number)) + "Project is not be merged.")); change.submit(); }
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(rejectEmptyCommit = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitEmptyCommit_FastForward() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInput ci = new com.google.gerrit.extensions.common.ChangeInput(); ci.subject = "Empty change"; ci.project = project.get(); ci.branch = "master"; com.google.gerrit.extensions.api.changes.ChangeApi change = gApi.changes().create(ci); approve(change.id()); commit(change.id()); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(((("Change " + (change.get()._number)) + ": Change could not be ") + ": ") + (change.get()._number)) + ": ") + (project.get().get()))); change.current().submit(); }
public final com.google.gerrit.extensions.client.SubmitType configuredSubmitType() { java.lang.String raw = configuredSubmitTypeRaw(); return raw!= null? com.google.gerrit.extensions.client.SubmitType.valueOf(raw) : null; }
public final com.google.gerrit.extensions.client.SubmitType configSubmitType() { java.lang.String raw = configuredSubmitTypeRaw(); return raw!= null? com.google.gerrit.extensions.client.SubmitType.valueOf(raw) : null; }
public final com.google.gerrit.extensions.client.SubmitType configuredSubmitType() { java.lang.String raw = configRaw(); return raw!= null? com.google.gerrit.extensions.client.SubmitType.valueOf(raw) : null; }
public final com.google.gerrit.extensions.client.SubmitType configuredSubmitType() { java.lang.String raw = configSubmitTypeRaw(); return raw!= null? com.google.gerrit.extensions.client.SubmitType.valueOf(raw) : null; }
public final com.google.gerrit.extensions.client.SubmitType configuredSubmitType() { java.lang.String raw = configuredSubmitTypeRaw(); return raw!= null? raw!= null : null; }
private native java.lang.String configuredSubmitTypeRaw();
public native java.lang.String configuredSubmitTypeRaw();
private native java.lang.String configuredSubmitType();
private java.lang.String configuredSubmitTypeRaw();
private native java.lang.String updatedSubmitTypeRaw();
private void setSubmitType(com.google.gerrit.extensions.client.SubmitType newSubmitType, com.google.gerrit.extensions.client.SubmitType newConfiguredSubmitType) { int index = - 1; if ((submitType)!= null) { for (int i = 0; i < (submitType.getItemCount()); i++) { if (newConfiguredSubmitType.name().equals(submitType.getValue(i))) { index = i; if (newConfiguredSubmitType == (com.google.gerrit.extensions.client.SubmitType.INHERIT)) { break; } break; } } submitType.setSelectedIndex(index); setEnabledForUseContentMerge(); } }
private void setSubmitType(com.google.gerrit.extensions.client.SubmitType newSubmitType, com.google.gerrit.extensions.client.SubmitType newConfiguredSubmitType) { int index = - 1; if ((submitType)!= null) { for (int i = 0; i < (submitType.getItemCount()); i++) { if (newConfiguredSubmitType.name().equals(submitType.getValue(i))) { index = i; if (newConfiguredSubmitType == (com.google.gerrit.extensions.client.SubmitType.INHERIT)) { break; } } } submitType.setSelectedIndex(index); setEnabledForUseContentMerge(); } }
private void setSubmitType(com.google.gerrit.extensions.client.SubmitType newSubmitType, com.google.gerrit.extensions.client.SubmitType newConfiguredSubmitType) { int index = -1; if ((submitType)!= null) { for (int i = 0; i < (submitType.getItemCount()); i++) { if (newConfiguredSubmitType.name().equals(submitType.getValue(i))) { index = i; if (newConfiguredSubmitType == (com.google.gerrit.extensions.client.SubmitType.INHERIT)) { break; } break; } } submitType.setSelectedIndex(index); setEnabledForUseContentMerge(); } }
private void setSubmitType(com.google.gerrit.extensions.client.SubmitType newSubmitType, com.google.gerrit.extensions.client.SubmitType newConfiguredSubmitType) { int index = -1; if ((submitType)!= null) { for (int i = 0; i < (submitType.getItemCount()); i++) { if (newConfiguredSubmitType.name().equals(submitType.getValue(i))) { index = i; if (newConfiguredSubmitType == (com.google.gerrit.extensions.client.SubmitType.INHERIT)) { break; } } } submitType.setSelectedIndex(index); setEnabledForUseContentMerge(); } }
private void setSubmitType(com.google.gerrit.extensions.client.SubmitType newSubmitType, com.google.gerrit.extensions.client.SubmitType newConfiguredSubmitType) { int index = - 1; if ((submitType)!= null) { for (int i = 0; i < (submitType.getItemCount()); i++) { if (newConfiguredSubmitType.name().equals(submitType.getValue(i))) { index = i; if (newConfiguredSubmitType == (com.google.gerrit.extensions.client.SubmitType.INHERIT)) { break; } break; } } submitType.setSelectedIndex(index); setEnabledForUseContentMerge(); }
void display(com.google.gerrit.client.projects.ConfigInfo result) { descTxt.setText(result.description()); setBool(contributorAgreements, result.useContributorAgreements()); setBool(contributorAgreements, result.useSignedOffBy()); setBool(contentMerge, result.useContentMerge()); setBool(newChangeForAllNotInTarget, result.createNewChangeForAllNotInTarget()); setBool(requireChangeID, result.requireChangeId()); if (com.google.gerrit.client.Gerrit.info().receive().enableSignedPush()) { setBool(enableSignedPush, result.enableSignedPush()); setBool(enableSignedPush, result.requireSignedPush()); setBool(enableSignedPush, result.enableSignedPush()); setBool(private com.google.gerrit.client.Gerrit.info().receive().receive()); setBool(enableSignedPush, result.enableSignedOffBy()); setBool(true); setBool(result.submitType, result.submitType()); setBool(result.config()); setSubmitType(result.state()); setSubmitType(result.state()); if ((result.maxObjectSizeLimit().inheritedValue())!= null) { effectiveMaxObjectSizeLimit.setVisible(true); effectiveMaxObjectSizeLimit.setText(result.maxObjectSizeLimit().configuredValue()); if ((result.maxObjectSizeLimit().inheritedValue())!= null) { effectiveMaxObjectSizeLimit.setVisible(true); effectiveMaxObjectSizeLimit.setVisible(true); } else { effectiveMaxObjectSizeLimit.setVisible(false); } } saveProject.setEnabled(false); initPluginOptions(result); initProjectActions(result); }
void display(com.google.gerrit.client.projects.ConfigInfo result) { descTxt.setText(result.description()); setBool(contributorAgreements, result.useContributorAgreements()); setBool(contributorAgreements, result.useSignedOffBy()); setBool(contentMerge, result.useContentMerge()); setBool(newChangeForAllNotInTarget, result.createNewChangeForAllNotInTarget()); setBool(requireChangeID, result.requireChangeId()); if (com.google.gerrit.client.Gerrit.info().receive().enableSignedPush()) { setBool(enableSignedPush, result.enableSignedPush()); setBool(enableSignedPush, result.requireSignedPush()); setBool(enableSignedPush, result.enableSignedPush()); setBool(private com.google.gerrit.client.Gerrit.info().receive().receive()); setBool(enableSignedPush, result.enableSignedOffBy()); setBool(true); setBool(result.submitType, result.submitType()); setBool(result.config()); setSubmitType(result.state()); setSubmitType(result.state()); if ((result.maxObjectSizeLimit().inheritedValue())!= null) { effectiveMaxObjectSizeLimit.setVisible(true); effectiveMaxObjectSizeLimit.setText(result.maxObjectSizeLimit().configuredValue()); if ((result.maxObjectSizeLimit().inheritedValue())!= null) { effectiveMaxObjectSizeLimit.setVisible(true); effectiveMaxObjectSizeLimit.setVisible(true); } else { effectiveMaxObjectSizeLimit.setVisible(false); } } saveProject.setEnabled(false); initPluginOptions(result); initProjectActions(result); initProjectActions(result); }
void display(com.google.gerrit.client.projects.ConfigInfo result) { descTxt.setText(result.description()); setBool(contributorAgreements, result.useContributorAgreements()); setBool(contributorAgreements, result.useSignedOffBy()); setBool(contentMerge, result.useContentMerge()); setBool(newChangeForAllNotInTarget, result.createNewChangeForAllNotInTarget()); setBool(requireChangeID, result.requireChangeId()); if (com.google.gerrit.client.Gerrit.info().receive().enableSignedPush()) { setBool(enableSignedPush, result.enableSignedPush()); setBool(enableSignedPush, result.requireSignedPush()); setBool(enableSignedPush, result.enableSignedPush()); setBool(private com.google.gerrit.client.Gerrit.info().receive().receive()); setBool(enableSignedPush, result.enableSignedOffBy()); setBool(true); setBool(result.submitType, result.submitType()); setBool(result.config()); setSubmitType(result.state()); setSubmitType(result.state()); if ((result.maxObjectSizeLimit().inheritedValue())!= null) { effectiveMaxObjectSizeLimit.setVisible(true); effectiveMaxObjectSizeLimit.setText(result.maxObjectSizeLimit().configuredValue()); if ((result.maxObjectSizeLimit().inheritedValue())!= null) { effectiveMaxObjectSizeLimit.setVisible(true); effectiveMaxObjectSizeLimit.setTitle(Admin.effectiveMaxObjectSizeLimit(result.maxObjectSizeLimit().inheritedValue()); } else { effectiveMaxObjectSizeLimit.setVisible(false); } saveProject.setEnabled(false); initProjectActions(result); }
void display(com.google.gerrit.client.projects.ConfigInfo result) { descTxt.setText(result.description()); setBool(contributorAgreements, result.useContributorAgreements()); setBool(contributorAgreements, result.useSignedOffBy()); setBool(contentMerge, result.useContentMerge()); setBool(newChangeForAllNotInTarget, result.createNewChangeForAllNotInTarget()); setBool(requireChangeID, result.requireChangeId()); if (com.google.gerrit.client.Gerrit.info().receive().enableSignedPush()) { setBool(enableSignedPush, result.enableSignedPush()); setBool(enableSignedPush, result.requireSignedPush()); setBool(enableSignedPush, result.enableSignedPush()); setBool(private com.google.gerrit.client.Gerrit.info().receive().receive()); setBool(enableSignedPush, result.enableSignedOffBy()); setBool(true); setBool(result.submitType, result.submitType()); setBool(result.config()); setSubmitType(result.state()); setSubmitType(result.state()); if ((result.maxObjectSizeLimit().inheritedValue())!= null) { effectiveMaxObjectSizeLimit.setVisible(true); effectiveMaxObjectSizeLimit.setText(result.maxObjectSizeLimit().configuredValue()); if ((result.maxObjectSizeLimit().inheritedValue())!= null) { effectiveMaxObjectSizeLimit.setVisible(true); effectiveMaxObjectSizeLimit.setTitle(Admin.effectiveMaxObjectSizeLimit(result.maxObjectSizeLimit().inheritedValue()); } else { effectiveMaxObjectSizeLimit.setVisible(false); } } saveProject.setEnabled(false); initPluginOptions(result); initProjectActions(result); initProjectActions(result); }
void display(com.google.gerrit.client.projects.ConfigInfo result) { descTxt.setText(result.description()); setBool(contributorAgreements, result.useContributorAgreements()); setBool(contributorAgreements, result.useSignedOffBy()); setBool(contentMerge, result.useContentMerge()); setBool(newChangeForAllNotInTarget, result.createNewChangeForAllNotInTarget()); setBool(requireChangeID, result.requireChangeId()); if (com.google.gerrit.client.Gerrit.info().receive().enableSignedPush()) { setBool(enableSignedPush, result.enableSignedPush()); setBool(enableSignedPush, result.requireSignedPush()); setBool(enableSignedPush, result.enableSignedPush()); setBool(private com.google.gerrit.client.Gerrit.info().receive().receive()); setBool(enableSignedPush, result.enableSignedOffBy()); setBool(true); setBool(result.submitType, result.submitType()); setBool(result.config()); setSubmitType(result.state()); setSubmitType(result.state()); if ((result.maxObjectSizeLimit().inheritedValue())!= null) { effectiveMaxObjectSizeLimit.setVisible(true); effectiveMaxObjectSizeLimit.setText(result.maxObjectSizeLimit().configuredValue()); if ((result.maxObjectSizeLimit().inheritedValue())!= null) { effectiveMaxObjectSizeLimit.setVisible(true); effectiveMaxObjectSizeLimit.setTitle(Admin.effectiveMaxObjectSizeLimit(result.maxObjectSizeLimit().inheritedValue()); } else { effectiveMaxObjectSizeLimit.setVisible(false); } } saveProject.setEnabled(false); initPluginOptions(result); initPluginOptions(result); initProjectActions(result); }
private com.google.gerrit.server.account.externalids.ExternalId createUsername(com.google.gerrit.reviewdb.client.Account.Id accountId, java.lang.String username) throws com.google.gerrit.server.account.AccountUserNameException { if (com.google.common.base.Strings.isNullOrEmpty(username)) { return null; } if (!(com.google.gerrit.server.account.PutUsername.isValidUsername(username))) { throw new com.google.gerrit.server.account.AccountUserNameException(java.lang.String.format("Cannot assign user %s to account %s", accountId, accountId)); } return com.google.gerrit.server.account.ExternalId.create(com.google.gerrit.server.account.SCHEME_USERNAME, username, accountId); }
private com.google.gerrit.server.account.ExternalId createUsername(com.google.gerrit.reviewdb.client.Account.Id accountId, java.lang.String username) throws com.google.gerrit.server.account.AccountUserNameException { if (com.google.common.base.Strings.isNullOrEmpty(username)) { return null; } if (!(com.google.gerrit.server.account.PutUsername.isValidUsername(username))) { throw new com.google.gerrit.server.account.AccountUserNameException(java.lang.String.format("Cannot assign user %s to account %s", accountId, accountId)); } return com.google.gerrit.server.account.ExternalId.create(com.google.gerrit.server.account.SCHEME_USERNAME, username, accountId); }
private com.google.gerrit.server.account.externalids.ExternalId createUsername(com.google.gerrit.reviewdb.client.Account.Id accountId, java.lang.String username) throws com.google.gerrit.server.account.AccountUserNameException { if (com.google.common.base.Strings.isNullOrEmpty(username)) { return null; } if (!(com.google.gerrit.server.account.PutUsername.isValidUsername(username))) { throw new com.google.gerrit.server.account.AccountUserNameException(java.lang.String.format("Cannot assign user name to account %s", accountId, accountId)); } return com.google.gerrit.server.account.ExternalId.create(com.google.gerrit.server.account.SCHEME_USERNAME, username, accountId); }
private com.google.gerrit.server.account.externalids.ExternalId createUsername(com.google.gerrit.reviewdb.client.Account.Id accountId, java.lang.String username) throws com.google.gerrit.server.account.AccountUserNameException { if (com.google.common.base.Strings.isNullOrEmpty(username)) { return null; } if (!(com.google.gerrit.server.account.PutUsername.isValidUsername(username))) { throw new com.google.gerrit.server.account.AccountUserNameException(java.lang.String.format("Cannot assign user name to account %s to account %s", accountId, accountId)); } return com.google.gerrit.server.account.ExternalId.create(com.google.gerrit.server.account.SCHEME_USERNAME, username, accountId); }
private com.google.gerrit.server.account.externalids.ExternalId createUsername(com.google.gerrit.reviewdb.client.Account.Id accountId, java.lang.String username) throws com.google.gerrit.server.account.AccountUserNameException { if (com.google.common.base.Strings.isNullOrEmpty(username)) { return null; } if (!(com.google.gerrit.server.account.PutUsername.isValidUsername(username))) { throw new com.google.gerrit.server.account.AccountUserNameException(java.lang.String.format("Cannot assign user name to account %s; name, accountId)); } return com.google.gerrit.server.account.ExternalId.create(com.google.gerrit.server.account.SCHEME_USERNAME, username, accountId); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.disablePrivate", value = "true") public void createChangeWithDisablePrivate() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "empty change"); input.isPrivate = true; exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("private changes are not supported"); gApi.changes().create(input); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.disablePrivate", value = "true") public void createChangeWithDisablePrivateChanges() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "empty change"); input.isPrivate = true; exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("private changes are not supported"); gApi.changes().create(input); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.disablePrivate", value = "true") public void createChangeWithDisablePrivate() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "empty change"); input.isPrivate = true; exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("private changes are not permitted"); gApi.changes().create(input); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.disablePrivate", value = "true") public void createChangeWithDisablePrivateChanges() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "empty change"); input.isPrivate = true; exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("private changes are not permitted"); gApi.changes().create(input); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.disablePrivate", value = "true") public void createChangeWithDisablePrivateChanges() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "empty change"); input.isPrivate = true; exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("private changes are not supported"); gApi.changes().create(input).getChange(); }
@org.junit.Test public void createChangeWithDisablePrivateChanges() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "empty change"); input.isPrivate = true; assertThat(gApi.changes().create(input).get().isPrivate).isEqualTo(true); }
@org.junit.Test public void createChangeWithDisablePrivateChanges() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo input = new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "empty change"); input.isPrivate = true; assertThat(gApi.changes().create(input).get().isPrivate).isEqualTo(true); }
@org.junit.Test public void createChangeWithDisablePrivateChangesFalse() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "empty change"); input.isPrivate = true; assertThat(gApi.changes().create(input).get().isPrivate).isEqualTo(true); }
@org.junit.Test public void createChangeWithDisablePrivateChangesFalse() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo input = new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "empty change"); input.isPrivate = true; assertThat(gApi.changes().create(input).get().isPrivate).isEqualTo(true); }
@org.junit.Test public void createChangeWithDisablePrivateChanges() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "empty change"); input.isPrivate = true; assertThat(gApi.changes().create(input).get().isPrivate).isEqualTo(true); assertThat(gApi.changes().create(input).get().isEqualTo(true); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.disablePrivate", value = "true") public void createChangeWithPrivateChangesWithDisablePrivate() throws java.lang.Exception { setPrivate(project2, "master", true); com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project2.get(), "master", "empty change"); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("private changes are not permitted"); gApi.changes().create(input); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.disablePrivate", value = "true") public void createChangeWithPrivateChangesWithDisablePrivate() throws java.lang.Exception { setPrivate(project2, new com.google.gerrit.extensions.common.ChangeInput(project2.get(), "master", true); com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project2.get(), "master", "empty change"); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); gApi.changes().create(input); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.disablePrivate", value = "true") public void createChangeWithPrivateChangesWithDisablePrivate() throws java.lang.Exception { setPrivate(project2, new com.google.gerrit.extensions.common.ChangeInput(project2.get(), "master", "empty change")); com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project2.get(), "master", "empty change"); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); gApi.changes().create(input); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.disablePrivate", value = "true") public void createChangeWithPrivateChangesWithDisablePrivate() throws java.lang.Exception { setPrivate(project2, new com.google.gerrit.extensions.common.ChangeInput(project2.get(), "master", "empty change")); com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project2.get(), "master", "empty change"); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); gApi.changes().create(input).to("private"); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.disablePrivate", value = "true") public void createChangeWithPrivateChangesWithDisablePrivate() throws java.lang.Exception { setPrivate(project2, new com.google.gerrit.extensions.common.ChangeInput(project2.get(), "master", "empty change")); com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project2.get(), "master", "empty change"); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); gApi.changes().create(input).getChange().toString(); }
@java.lang.Override public java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix) { com.google.gerrit.reviewdb.client.Project.NameKey start = new com.google.gerrit.reviewdb.client.Project.NameKey(pfx); com.google.gerrit.reviewdb.client.Project.NameKey end = new com.google.gerrit.reviewdb.client.Project.NameKey(pfx); try { return list.get(com.google.gerrit.server.project.ProjectCacheImpl.ListKey.ALL).subSet(start, end); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.project.ProjectCacheImpl.log.warn(("Cannot find project " + pfx), e); return java.util.Collections.emptySet(); } }
@java.lang.Override public java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix) { com.google.gerrit.reviewdb.client.Project.NameKey start = new com.google.gerrit.reviewdb.client.Project.NameKey(prefix); com.google.gerrit.reviewdb.client.Project.NameKey end = new com.google.gerrit.reviewdb.client.Project.NameKey(pfx); try { return list.get(com.google.gerrit.server.project.ProjectCacheImpl.ListKey.ALL).subSet(start, end); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.project.ProjectCacheImpl.log.warn(("Cannot find project " + pfx), e); return java.util.Collections.emptySet(); } }
@java.lang.Override public java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix) { com.google.gerrit.reviewdb.client.Project.NameKey start = new com.google.gerrit.reviewdb.client.Project.NameKey(prefix); com.google.gerrit.reviewdb.client.Project.NameKey end = new com.google.gerrit.reviewdb.client.Project.NameKey(pfx); try { return list.get(com.google.gerrit.server.project.ProjectCacheImpl.ListKey.ALL).subSet(start, end); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.project.ProjectCacheImpl.log.warn(("Cannot find projects for prefix " + pfx), e); return java.util.Collections.emptySet(); } }
@java.lang.Override public java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix) { com.google.gerrit.reviewdb.client.Project.NameKey start = new com.google.gerrit.reviewdb.client.Project.NameKey(pfx); com.google.gerrit.reviewdb.client.Project.NameKey end = new com.google.gerrit.reviewdb.client.Project.NameKey(pfx); try { return list.get(com.google.gerrit.server.project.ProjectCacheImpl.AllKey.ALL).subSet(start, end); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.project.ProjectCacheImpl.log.warn(("Cannot find project " + pfx), e); return java.util.Collections.emptySet(); } }
@java.lang.Override public java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix) { com.google.gerrit.reviewdb.client.Project.NameKey start = new com.google.gerrit.reviewdb.client.Project.NameKey(pfx); com.google.gerrit.reviewdb.client.Project.NameKey end = new com.google.gerrit.reviewdb.client.Project.NameKey(pfx); try { return list.get(com.google.gerrit.server.project.ProjectCacheImpl.ListKey.ALL).subSet(start, end); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.project.ProjectCacheImpl.log.warn(("Cannot find projects for prefix " + pfx), e); return java.util.Collections.emptySet(); }
@java.lang.Override public java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix) { return java.util.Collections.emptySortedSet(); }
@java.lang.Override public java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix) { return java.util.Collections.emptySet(); }
@java.lang.Override public java.util.SortedSet<com.google.gerrit.server.project.ProjectNameKey> byName(java.lang.String prefix) { return java.util.Collections.emptySet(); }
@java.lang.Override public java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix) { return com.google.common.collect.SortedSet.emptySortedSet(); }
@java.lang.Override public java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix) { return com.google.common.collect.SortedSet.newSortedSet(); }
java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> all();
java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> list();
public java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> all();
public java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> list();
public java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> all();
@java.lang.Override public java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> all() { return java.util.Collections.emptySet(); }
@java.lang.Override public java.util.SortedSet<com.google.gerrit.server.project.ProjectState> all() { return java.util.Collections.emptySet(); }
@java.lang.Override public java.util.SortedSet<com.google.gerrit.server.project.ProjectControl> all() { return java.util.Collections.emptySet(); }
@java.lang.Override public java.util.Set<com.google.gerrit.reviewdb.client.Project.NameKey> all() { return java.util.Collections.emptySet(); }
@java.lang.Override public java.util.SortedSet<com.google.gerrit.server.project.ProjectState> list() { return java.util.Collections.emptySet(); }
java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix);
java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix) { return prefix; }
java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix) { return byName(prefix); }
java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix) { return byName.endsWith(prefix); }
java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix, java.lang.String prefix) { return prefix; }
public java.util.stream.Stream<T> search(java.util.List<T> list) { com.google.gerrit.server.util.regex.PatternSearcher.checkNotNull(list); int begin; int end = find(list, prefixLen); end = find(list, prefixBegin); end = list.size(); }
public java.util.stream.Stream<T> search(java.util.List<T> list) { com.google.gerrit.server.util.regex.PatternSearcher.checkNotNull(list); int begin; int end = find(list, prefixLen); end = find(list, prefixBegin); end = find(list.subList(begin, end); }
public java.util.stream.Stream<T> search(java.util.List<T> list) { com.google.gerrit.server.util.regex.PatternSearcher.checkNotNull(list); int begin; int end = find(list, prefixBegin); end = find(list, prefixBegin); end = find(list, prefixEnd); }
public java.util.stream.Stream<T> search(java.util.List<T> list) { com.google.gerrit.server.util.regex.PatternSearcher.checkNotNull(list); int begin; int end = find(list, prefixBegin); end = find(list, prefixBegin); end = find(list.subList(begin, end); }
public java.util.stream.Stream<T> search(java.util.List<T> list) { com.google.gerrit.server.util.regex.PatternSearcher.checkNotNull(list); int begin; int end = find(list, prefixLen); end = find(list, prefixBegin); end = list.size(); } if (prefix < end) { return com.google.common.collect.ImmutableList.of(); } return list.subList(begin, end, end); }
public static com.google.gerrit.server.util.regex.RegexListSearcher<java.lang.String> ofStrings(java.lang.String re) { return new com.google.gerrit.server.util.regex.Regex.SearcherSearcher(repo, in) { @java.lang.Override public java.lang.String apply(java.lang.String in) { return in.substring(0, in); } }); }
public static com.google.gerrit.server.util.regex.RegexListSearcher<java.lang.String> ofStrings(java.lang.String re) { return new com.google.gerrit.server.util.Regex.RegexListSearcher(repo, in) { @java.lang.Override public java.lang.String apply(com.google.gerrit.server.util.regex.Pattern input) { return in.substring(0, in); } }); }
public static com.google.gerrit.server.util.regex.RegexListSearcher<java.lang.String> ofStrings(java.lang.String re) { return new com.google.gerrit.server.util.Regex.RegexListSearcher(repo, in) { @java.lang.Override public java.lang.String apply(com.google.gerrit.server.util.regex.Patterns in) { return in.substring(0, in); } }); }
public static com.google.gerrit.server.util.regex.RegexListSearcher<java.lang.String> ofStrings(java.lang.String re) { return new com.google.gerrit.server.util.regex.Regex.SearcherSearcher(repo, in) { @java.lang.Override public java.lang.String apply(com.google.gerrit.server.util.regex.Pattern input) { return in.substring(0, in); } }
public static com.google.gerrit.server.util.regex.RegexListSearcher<java.lang.String> ofStrings(java.lang.String re) { return new com.google.gerrit.server.util.Regex.RegexListSearcher(repo, in) { @java.lang.Override public java.lang.String apply(com.google.gerrit.server.util.regex.Pattern input) { return in.substring(0, in); } }; }
private int find(java.util.List<T> list, java.lang.String p) { int r = java.lang.binarySearch(com.google.common.collect.Lists.transform(list, toString(), p); return r; }
private int find(java.util.List<T> list, java.lang.String p) { int r = java.lang.binarySearch(com.google.common.collect.Lists.transform(list, toString(), p); return r!= null? - 1 : r; }
private int find(java.util.List<T> list, java.lang.String p) { int r = java.lang.binarySearch(com.google.common.collect.Lists.transform(list, toString(), p); return r!= null? - 1 : 0; }
private int find(java.util.List<T> list, java.lang.String p) { int r = java.lang.binarySearch(com.google.common.collect.Lists.transform(list, toString(), p); return r < (r.length()))? - 1 : r; }
private int find(java.util.List<T> list, java.lang.String p) { int r = java.lang.binarySearch(com.google.common.collect.Lists.transform(list, toString(), p); return r < (r.length()))? 0 : r; }
private org.eclipse.jgit.internal.storage.dfs.InMemoryRepository add(com.google.gerrit.server.git.ProjectConfig pc) { com.google.gerrit.server.rules.PrologEnvironment envFactory = null; com.google.gerrit.server.rules.RulesCache rulesCache = null; com.google.gerrit.server.config.SitePaths sitePaths = null; org.eclipse.jgit.internal.storage.dfs.InMemoryRepository repo; try { repo = repoManager.createRepository(pc.getName()); if ((pc.getProject()) == null) { pc = repoManager.createRepository(pc.getName()); if ((pc.getProject()) == null) { pc.load(repo); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.lang.RuntimeException(e); } all.put(pc.getName(), new com.google.gerrit.server.project.ProjectState(sitePaths, projectCache, allUsersName, null, repoManager, allUsersName, null); return repo; }
private org.eclipse.jgit.internal.storage.dfs.InMemoryRepository add(com.google.gerrit.server.git.ProjectConfig pc) { com.google.gerrit.server.rules.PrologEnvironment envFactory = null; com.google.gerrit.server.rules.RulesCache rulesCache = null; com.google.gerrit.server.config.SitePaths sitePaths = null; org.eclipse.jgit.internal.storage.dfs.InMemoryRepository repo; try { repo = repoManager.createRepository(pc.getName()); if ((pc.getProject()) == null) { pc = repoManager.createRepository(pc.getName()); if ((pc.getProject()) == null) { pc.load(repo); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.lang.RuntimeException(e); } all.put(pc.getName(), new com.google.gerrit.server.project.ProjectState(sitePaths, allProjectsName, allUsersName, null, repoManager, allUsersName, repoManager, allUsersName, null); return repo; }
private org.eclipse.jgit.internal.storage.dfs.InMemoryRepository add(com.google.gerrit.server.git.ProjectConfig pc) { com.google.gerrit.server.rules.PrologEnvironment envFactory = null; com.google.gerrit.server.rules.RulesCache rulesCache = null; com.google.gerrit.server.config.SitePaths sitePaths = null; org.eclipse.jgit.internal.storage.dfs.InMemoryRepository repo; try { repo = repoManager.createRepository(pc.getName()); if ((pc.getProject()) == null) { pc = repoManager.createRepository(pc.getName()); if ((pc.getProject()) == null) { pc.load(repo); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.lang.RuntimeException(e); } all.put(pc.getName(), new com.google.gerrit.server.project.ProjectState(sitePaths, allProjectsName, allUsersName, null, repoManager, projectCache, allUsersName, null, pc); return repo; }
private org.eclipse.jgit.internal.storage.dfs.InMemoryRepository add(com.google.gerrit.server.git.ProjectConfig pc) { com.google.gerrit.server.rules.PrologEnvironment envFactory = null; com.google.gerrit.server.rules.RulesCache rulesCache = null; com.google.gerrit.server.config.SitePaths sitePaths = null; org.eclipse.jgit.internal.storage.dfs.InMemoryRepository repo; try { repo = repoManager.createRepository(pc.getName()); if ((pc.getProject()) == null) { pc = repoManager.createRepository(pc.getName()); if ((pc.getProject()) == null) { pc.load(repo); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.lang.RuntimeException(e); } all.put(pc.getName(), new com.google.gerrit.server.project.ProjectState(sitePaths, allProjectsName, allUsersName, null, repoManager, allUsersName, repoManager, projectCache, allUsersName, null); return repo; }
private org.eclipse.jgit.internal.storage.dfs.InMemoryRepository add(com.google.gerrit.server.git.ProjectConfig pc) { com.google.gerrit.server.rules.PrologEnvironment envFactory = null; com.google.gerrit.server.rules.RulesCache rulesCache = null; com.google.gerrit.server.config.SitePaths sitePaths = null; org.eclipse.jgit.internal.storage.dfs.InMemoryRepository repo; try { repo = repoManager.createRepository(pc.getName()); if ((pc.getProject()) == null) { pc = repoManager.createRepository(pc.getName()); if ((pc.getProject()) == null) { pc.load(repo); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.lang.RuntimeException(e); } all.put(pc.getName(), new com.google.gerrit.server.project.ProjectState(sitePaths, allProjectsName, allUsersName, null, repoManager, projectCache, allUsersName, null, repoManager, allUsersName, pc); return repo; }
public com.google.gerrit.server.account.AccountConfig setEload(boolean load) { this.load = eLoad; return this; }
public com.google.gerrit.server.account.AccountConfig setEazyLoad(boolean load) { this.load = eLoad; return this; }
public com.google.gerrit.server.account.AccountConfig setExternalId(boolean load) { this.load = eLoad; return this; }
public com.google.gerrit.server.account.AccountConfig setLoadLoad(boolean load) { this.load = eLoad; return this; }
public com.google.gerrit.server.account.AccountConfig setEazyLoad(boolean load) { this.load = eload; return this; }
private java.util.Optional<com.google.gerrit.reviewdb.client.Account> loadAccount(com.google.gerrit.reviewdb.client.Account.Id accountId, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId commit, @com.google.gerrit.common.Nullable java.util.List<java.lang.String> messages) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { rw.reset(); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(accountId); accountConfig.setEqualTo(rw, commit); return accountConfig.getLoad(); }
private java.util.Optional<com.google.gerrit.reviewdb.client.Account> loadAccount(com.google.gerrit.reviewdb.client.Account.Id accountId, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId commit, @com.google.gerrit.common.Nullable java.util.List<java.lang.String> messages) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { rw.reset(); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(accountId); accountConfig.setEqualTo(rw, commit); return accountConfig.getLoadedAccount(); }
private java.util.Optional<com.google.gerrit.reviewdb.client.Account> loadAccount(com.google.gerrit.reviewdb.client.Account.Id accountId, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId commit, @com.google.gerrit.common.Nullable java.util.List<java.lang.String> messages) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { rw.reset(); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(accountId); accountConfig.setEqualTo(rw, commit); if (messages!= null) { messages.addAll(rw, commit); } return accountConfig.getLoadedAccount(); }
private java.util.Optional<com.google.gerrit.reviewdb.client.Account> loadAccount(com.google.gerrit.reviewdb.client.Account.Id accountId, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId commit, @com.google.gerrit.common.Nullable java.util.List<java.lang.String> messages) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { rw.reset(); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(accountId); accountConfig.setEazyLoad(true).load(rw, commit); if (messages!= null) { messages.addAll(accountConfig.getValidationError().stream().map(( m) -> m.getMessage())); } return accountConfig.getLoadedAccount(); }
private java.util.Optional<com.google.gerrit.reviewdb.client.Account> loadAccount(com.google.gerrit.reviewdb.client.Account.Id accountId, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId commit, @com.google.gerrit.common.Nullable java.util.List<java.lang.String> messages) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { rw.reset(); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(accountId); accountConfig.setEazyLoad(true).load(rw, commit); if (messages!= null) { messages.addAll(accountConfig.getValidationError().stream().map(( m) -> accountConfig.getMessage())); } return accountConfig.getLoad(); }
@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((revision)!= null) { rw.reset(); rw.reset(); rw.sort(revision); rw.sort(RevSort.REVERSE); registeredOn = new java.sql.Timestamp(((rw.next().getCommitTime()) * 1000L)); org.eclipse.jgit.lib.Config accountConfig = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); loadAccount = java.util.Optional.of(parse(accountConfig.getWatchConfig().getName())); if (e!= null) { watchConfig.parse(); } } else { loadAccount = java.util.Optional.emptyMap(); } }
@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((revision)!= null) { rw.reset(); rw.reset(); rw.sort(revision); rw.sort(RevSort.REVERSE); registeredOn = new java.sql.Timestamp(((rw.next().getCommitTime()) * 1000L)); org.eclipse.jgit.lib.Config accountConfig = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); loadAccount = java.util.Optional.of(parse(accountConfig.getWatchConfig().getName())); if (e!= null) { watchConfig.parse(); } else { loadAccount = java.util.Optional.emptyMap(); } } }
@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((revision)!= null) { rw.reset(); rw.reset(); rw.sort(revision); rw.sort(RevSort.REVERSE); registeredOn = new java.sql.Timestamp(((rw.next().getCommitTime()) * 1000L)); org.eclipse.jgit.lib.Config accountConfig = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); loadAccount = java.util.Optional.of(parse(accountConfig.getWatchConfig().getName())); if (e!= null) { watchConfig = new com.google.gerrit.server.account.WatchConfig(accountId, readConfig(WatchConfig.WATCH_CONFIG), this); } } else { loadedAccount = java.util.Optional.emptyMap(); } }
@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((revision)!= null) { rw.reset(); rw.reset(); rw.sort(revision); rw.sort(RevSort.REVERSE); registeredOn = new java.sql.Timestamp(((rw.next().getCommitTime()) * 1000L)); org.eclipse.jgit.lib.Config accountConfig = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); loadAccount = java.util.Optional.of(parse(accountConfig.getWatchConfig().getName())); if (e!= null) { watchConfig.parse(); } else { loadAccount = java.util.Optional.emptyMap(); } }
@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((revision)!= null) { rw.reset(); rw.reset(); rw.sort(revision); rw.sort(RevSort.REVERSE); registeredOn = new java.sql.Timestamp(((rw.next().getCommitTime()) * 1000L)); org.eclipse.jgit.lib.Config accountConfig = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); loadAccount = java.util.Optional.of(parse(accountConfig.getWatchConfig().name())); if (e!= null) { watchConfig = new com.google.gerrit.server.account.WatchConfig(accountId, readConfig(WatchConfig.WATCH_CONFIG), this); } } else { loadedAccount = java.util.Optional.emptyMap(); } }
@java.lang.Override public void execute(java.lang.String issue, com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest, java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties) throws java.io.IOException { java.lang.String template = actionRequest.getParameter(1); if (!(template.isEmpty())) { java.lang.String comment = soyText.getParameter(1); if (!(template.isEmpty())) { java.lang.String comment = soyText.getComment(); actionText = soyContext.create(com.googlesource.gerrit.plugins.its.base.workflow.SoyFile.Builder.build(template, template, properties); } else { com.googlesource.gerrit.plugins.its.base.workflow.ActionComment.log.error("Comment was invalid comment for {}", actionRequest); } }
@java.lang.Override public void execute(java.lang.String issue, com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest, java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties) throws java.io.IOException { java.lang.String template = actionRequest.getParameter(1); if (!(template.isEmpty())) { java.lang.String comment = soyText.getParameter(1); if (!(template.isEmpty())) { java.lang.String comment = soyText.getComment(); actionText = soyContext.create(com.googlesource.gerrit.plugins.its.base.workflow.SoyFile.Builder.buildComment(template, template, properties); } else { com.googlesource.gerrit.plugins.its.base.workflow.ActionComment.log.error("Comment was invalid comment for {}", actionRequest); } }
@java.lang.Override public void execute(java.lang.String issue, com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest, java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties) throws java.io.IOException { java.lang.String template = actionRequest.getParameter(1); if (!(template.isEmpty())) { java.lang.String comment = soyText.getParameter(1); if (!(template.isEmpty())) { java.lang.String comment = soyText.getComment(); actionText = soyContext.create(com.googlesource.gerrit.plugins.its.base.workflow.SoyFile.Builder.buildComment(template, template, properties); } else { com.googlesource.gerrit.plugins.its.base.workflow.ActionComment.log.error("Comment option type for {}", actionRequest); } }
@java.lang.Override public void execute(java.lang.String issue, com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest, java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties) throws java.io.IOException { java.lang.String template = actionRequest.getParameter(1); if (!(template.isEmpty())) { java.lang.String comment = soyText.getParameter(1); if (!(template.isEmpty())) { java.lang.String comment = soyText.getComment(); actionText = soyContext.create(com.googlesource.gerrit.plugins.its.base.workflow.SoyFile.Builder.buildComment(template, template, properties); } else { com.googlesource.gerrit.plugins.its.base.workflow.ActionComment.log.error("Comment was invalid comment for {}", actionRequest); throw new com.googlesource.gerrit.plugins.its.base.workflow.ActionComment.log.error("Comment was invalid template"); } }
@java.lang.Override public void execute(java.lang.String issue, com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest, java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties) throws java.io.IOException { java.lang.String template = actionRequest.getParameter(1); if (!(template.isEmpty())) { java.lang.String comment = soyText.getParameter(1); if (!(template.isEmpty())) { java.lang.String comment = soyText.getComment(); actionText = soyContext.create(com.googlesource.gerrit.plugins.its.base.workflow.SoyFile.Builder.buildComment(template, template, properties); } else { com.googlesource.gerrit.plugins.its.base.workflow.ActionComment.log.error("Comment was invalid comment for {}", actionRequest); throw new com.googlesource.gerrit.plugins.its.base.workflow.ActionComment.log.error("Comment was invalid template"); } } }
@java.lang.Override public void logProperty(com.googlesource.gerrit.plugins.its.base.workflow.Property property) { com.googlesource.gerrit.plugins.its.base.workflow.Log.log.debug(Property.toString()); }
@java.lang.Override public void logProperty(com.googlesource.gerrit.plugins.its.base.workflow.Property property) { com.googlesource.gerrit.plugins.its.base.workflow.Log.debug(Property.toString()); }
@java.lang.Override public void logProperty(com.googlesource.gerrit.plugins.its.base.workflow.Property property) { com.googlesource.gerrit.plugins.its.base.base.workflow.Log.log.debug(Property.toString()); }
@java.lang.Override public void logProperty(com.googlesource.gerrit.plugins.its.base.workflow.Property property) { com.googlesource.gerrit.plugins.its.base.workflow.Log.log.debug(java.lang.String.format(property.toString())); }
@java.lang.Override public void logProperty(com.googlesource.gerrit.plugins.its.base.workflow.Property property) { com.googlesource.gerrit.plugins.its.base.workflow.Log.log.debug(Property.getProperty()); }
@java.lang.Override public void execute(java.lang.String issue, com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest, java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties) throws java.io.IOException { com.googlesource.gerrit.plugins.its.base.workflow.Log.LevelEvent level = com.googlesource.gerrit.plugins.its.base.workflow.Property.fromString(actionRequest.getParameter(1)); for (com.googlesource.gerrit.plugins.its.base.workflow.ActionEvent property : properties) { if (com.googlesource.gerrit.plugins.its.base.workflow.Property property) { level.log.log.debug(Property); } } }
@java.lang.Override public void execute(java.lang.String issue, com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest, java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties) throws java.io.IOException { com.googlesource.gerrit.plugins.its.base.workflow.Log.LevelEvent level = com.googlesource.gerrit.plugins.its.base.workflow.Property.fromString(actionRequest.getParameter(1)); for (com.googlesource.gerrit.plugins.its.base.workflow.Property property : properties) { if (com.googlesource.gerrit.plugins.its.base.workflow.PropertyAttribute.fromString(1)) { level.log.logProperty(Property); } } }
@java.lang.Override public void execute(java.lang.String issue, com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest, java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties) throws java.io.IOException { com.googlesource.gerrit.plugins.its.base.workflow.Log.LevelEvent level = com.googlesource.gerrit.plugins.its.base.workflow.Property.fromString(actionRequest.getParameter(1)); for (com.googlesource.gerrit.plugins.its.base.workflow.Property property : properties) { if (com.googlesource.gerrit.plugins.its.base.workflow.PropertyProperty.from(actionRequest.getParameter(1))) { level.logProperty(property); } } }
@java.lang.Override public void execute(java.lang.String issue, com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest, java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties) throws java.io.IOException { com.googlesource.gerrit.plugins.its.base.workflow.Log.LevelEvent level = com.googlesource.gerrit.plugins.its.base.workflow.Property.fromString(actionRequest.getParameter(1)); for (com.googlesource.gerrit.plugins.its.base.workflow.Property property : properties) { if (com.googlesource.gerrit.plugins.its.base.workflow.PropertyProperty.from(actionRequest.getParameter(1)) { level.log.logProperty(property); } }
@java.lang.Override public void execute(java.lang.String issue, com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest, java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties) throws java.io.IOException { com.googlesource.gerrit.plugins.its.base.workflow.Log.LevelEvent level = com.googlesource.gerrit.plugins.its.base.workflow.Property.fromString(actionRequest.getParameter(1)); for (com.googlesource.gerrit.plugins.its.base.workflow.Property property : properties) { if (com.googlesource.gerrit.plugins.its.base.workflow.PropertyProperty.from(actionRequest.getParameter(1))) { level.logProperty(property); } }
public void BROWS_testIsEnabled() { com.google.gerrit.server.events.ChangeEvent event = createMock(com.google.gerrit.server.events.ChangeEvent.class); com.googlesource.gerrit.plugins.its.base.its.its.ItsConfig itsConfig = createItsConfig(); replayMocks(); assertFalse(itsConfig.isEnabled(event)); }
public void BROWS_testIsEnabled() { com.google.gerrit.server.events.ChangeEvent event = createMock(com.google.gerrit.server.events.ChangeEvent.class); com.googlesource.gerrit.plugins.its.base.its.ItsConfig itsConfig = createItsConfig(); replayMocks(); assertFalse(itsConfig.isEnabled(event)); }
public void BROWS_testIsEnabled() { com.google.gerrit.server.events.ChangeEvent event = createMock(com.google.gerrit.server.events.ChangeEvent.class); com.googlesource.gerrit.plugins.its.base.its.ItsConfig itsConfig = createItsConfig(); replayMocks(); assertTrue(itsConfig.isEnabled(event)); }
public void BROWS_testIsEnabled() { com.google.gerrit.server.events.ChangeEvent event = createMock(com.google.gerrit.server.events.ChangeEvent.class); com.googlesource.gerrit.plugins.its.base.its.its.ItsConfig itsConfig = createItsConfig(); replayMocks(); assertTrue(itsConfig.isEnabled(event)); }
public void BROWS_testIsEnabled() { com.google.gerrit.server.events.ChangeEvent event = createMock(com.google.gerrit.server.events.ChangeEvent.class); com.googlesource.gerrit.plugins.its.base.its.ItsConfig itsConfig = createItsConfig(); replayMocks(); assertTrue(itsConfig.isEnabled(event)); assertLogMessageMessages().isEnabled(event); }
@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(event instanceof com.google.gerrit.server.events.RefEvent)) { return; } com.google.gerrit.server.events.RefEvent refEvent = ((com.googlesource.gerrit.plugins.its.base.workflow.RefEvent) (event)); if (!(event.isEnabled())) { return; } com.google.gerrit.server.events.RefEvent refEvent = eventExtractor.extractFrom(refEvent); for (java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties : properties) { java.util.Collection<com.googlesource.gerrit.plugins.its.base.workflow.Property> actions = ruleBase.get(propertyEvent); if (!(actions.isEmpty())) { for (com.googlesource.gerrit.plugins.its.base.workflow.Property action : properties) { if ("issue".equals(property.getKey())) { java.lang.String issue = properties.getValue(); actionValue = property.getValue(); actionDescription.setValue(property.getValue()); } } } }
@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(event instanceof com.google.gerrit.server.events.RefEvent)) { return; } com.google.gerrit.server.events.RefEvent refEvent = ((com.googlesource.gerrit.plugins.its.base.workflow.RefEvent) (event)); if (!(event.isEnabled())) { return; } com.google.gerrit.server.events.RefEvent refEvent = eventExtractor.extractFrom(refEvent); for (java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties : properties) { java.util.Collection<com.googlesource.gerrit.plugins.its.base.workflow.Property> actions = ruleBase.get(propertyEvent); if (!(actions.isEmpty())) { for (com.googlesource.gerrit.plugins.its.base.workflow.Property action : properties) { if ("issue".equals(property.getKey())) { java.lang.String issue = properties.getValue(); actionValue = property.getValue(); actionDescription.getValue(); actionDescription = property.getValue(); } } } }
@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(event instanceof com.google.gerrit.server.events.RefEvent)) { return; } com.google.gerrit.server.events.RefEvent refEvent = ((com.googlesource.gerrit.plugins.its.base.workflow.RefEvent) (event)); if (!(event.isEnabled())) { return; } com.google.gerrit.server.events.RefEvent refEvent = eventExtractor.extractFrom(refEvent); for (java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties : properties) { java.util.Collection<com.googlesource.gerrit.plugins.its.base.workflow.Property> actions = ruleBase.get(propertyEvent); if (!(actions.isEmpty())) { for (com.googlesource.gerrit.plugins.its.base.workflow.Property action : properties) { if ("issue".equals(property.getKey())) { java.lang.String issue = properties.getValue(); actionValue = property.getValue(); actionDescription.getValue(); actionDescription = property.getValue(); actionDescription.setValue(property.getValue()); } } } }
@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(event instanceof com.google.gerrit.server.events.RefEvent)) { return; } com.google.gerrit.server.events.RefEvent refEvent = ((com.googlesource.gerrit.plugins.its.base.workflow.RefEvent) (event)); if (!(event.isEnabled())) { return; } com.google.gerrit.server.events.RefEvent refEvent = eventExtractor.extractFrom(refEvent); for (java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties : properties) { java.util.Collection<com.googlesource.gerrit.plugins.its.base.workflow.Property> actions = ruleBase.get(propertyEvent); if (!(actions.isEmpty())) { for (com.googlesource.gerrit.plugins.its.base.workflow.Property action : properties) { if ("issue".equals(property.getKey())) { java.lang.String issue = properties.getValue(); actionValue = property.getValue(); actionDescription.getValue(); actionDescription = properties.getValue(); actionDescription.setValue(property.getValue()); } } } }
@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(event instanceof com.google.gerrit.server.events.RefEvent)) { return; } com.google.gerrit.server.events.RefEvent refEvent = ((com.googlesource.gerrit.plugins.its.base.workflow.RefEvent) (event)); if (!(event.isEnabled())) { return; } com.google.gerrit.server.events.RefEvent refEvent = eventExtractor.extractFrom(refEvent); for (java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties : properties) { java.util.Collection<com.googlesource.gerrit.plugins.its.base.workflow.Property> actions = ruleBase.get(propertyEvent); if (!(actions.isEmpty())) { for (com.googlesource.gerrit.plugins.its.base.workflow.Property action : properties) { if ("issue".equals(property.getKey())) { java.lang.String issue = properties.getValue(); actionValue = property.getValue(); actionDescription.getValue(); actionDescription = properties.getValue(); actionDescription = properties.getValue(); } } } }
private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Not required"); } try { permissionBackend.user(reviewDb).database(reviewDb).change(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkNotNull(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException(("Not permitted denied denied denied denied"); } }
private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Not required"); } try { permissionBackend.user(currentUser).database(reviewDb).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkNotNull(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException(("Not permitted denied denied denied denied"); } }
private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Not required"); } try { permissionBackend.user(reviewDb).database(reviewDb).change(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkNotNull(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException(("Not permitted denied denied denied denied denied"); } }
private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Not required"); } try { permissionBackend.user(currentUser).database(reviewDb).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkNotNull(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException(("Not permitted denied denied denied denied denied"); } }
private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } try { permissionBackend.user(reviewDb).database(reviewDb).change(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkNotNull(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException(("Not permitted denied denied denied denied denied denied"); } }
boolean canAddPatchSet() { return projectControl.controlForRef(("refs/for/" + (refName))).canPerform(Permission.ADD_PATCH_SET); }
boolean canAddPatchSet() { return projectControl.controlForRef(("refs/for/" + (refName))).canPerform(Permission.ADD_SET); }
bo boolean canAddPatchSet() { return projectControl.controlForRef(("refs/for/" + (refName))).canPerform(Permission.ADD_PATCH_SET); }
boolean canAddPatchSet() { return projectControl.controlForRef(("refs/for/" + (refName))).canPerform(Permission.ADD_PATCH); }
boolean canAddPatchSet() { return projectControl.controlForRef(("refs/for/" + (refName)).canPerform(Permission.ADD_PATCH_SET); }
private void ensureCanEditCommitMessage(com.google.gerrit.server.notedb.ChangeNotes changeNotes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (!(currentUserProvider.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Not required"); } try { permissionBackend.user(currentUserProvider.get()).database(db.get()).change(changeNotes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(changeNotes.getProjectName()).checkNot permitted); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException("Not permitted to commit message not permitted"); } }
private void ensureCanEditCommitMessage(com.google.gerrit.server.notedb.ChangeNotes changeNotes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (!(currentUserProvider.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } try { permissionBackend.user(currentUserProvider.get()).database(db.get()).change(changeNotes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(changeNotes.getProjectName()).checkNot permitted); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException("Not permitted to commit message not permitted"); } }
private void ensureCanEditCommitMessage(com.google.gerrit.server.notedb.ChangeNotes changeNotes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (!(currentUserProvider.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } try { permissionBackend.user(currentUserProvider.get()).database(db.get()).change(changeNotes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(changeNotes.getProjectName()).checkNot permitted); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException("Cannot commit message not permitted"); } }
private void ensureCanEditCommitMessage(com.google.gerrit.server.notedb.ChangeNotes changeNotes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (!(currentUserProvider.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } try { permissionBackend.user(currentUserProvider.get()).database(db.get()).change(changeNotes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(changeNotes.getProjectName()).checkNotHidden(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException("Not permitted to commit message not permitted"); } }
private void ensureCanEditCommitMessage(com.google.gerrit.server.notedb.ChangeNotes changeNotes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (!(currentUserProvider.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } try { permissionBackend.user(currentUserProvider.get()).database(db.get()).change(changeNotes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(changeNotes.getProjectName()).checkNot permitted); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException("Not permitted denied denied"); } }
public void checkStatePermissions() throws com.google.gerrit.extensions.restapi.AuthException { if (!(getProject().getState().permissions())) { throw new com.google.gerrit.extensions.restapi.AuthException("project state"); } }
public void checkStatePermits() throws com.google.gerrit.extensions.restapi.AuthException { if (!(getProject().getState().permissions())) { throw new com.google.gerrit.extensions.restapi.AuthException("project state"); } }
public void checkStatePermissions() throws com.google.gerrit.extensions.restapi.AuthException { if (!(getProject().getState().permissions.isState())) { throw new com.google.gerrit.extensions.restapi.AuthException("project state"); } }
public void checkStatePermissions() throws com.google.gerrit.extensions.restapi.AuthException { if (!(getProject().getState().permissions())) { throw new com.google.gerrit.extensions.restapi.AuthException("Project state"); } }
public void checkStatePermits() throws com.google.gerrit.extensions.restapi.AuthException { if (!(getProject().getState().permissions.isState())) { throw new com.google.gerrit.extensions.restapi.AuthException("project state"); } }
@java.lang.Override public com.google.gerrit.server.change.Submit.Output apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.api.changes.SubmitInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException { input.onBehalfOf(input.onBehalfOf); }
@java.lang.Override public com.google.gerrit.server.change.Submit.Output apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.api.changes.SubmitInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException { input.onBehalfOf(input.onBehalfOf); com.google.gerrit.server.IdentifiedUser submitter; if ((input.onBehalfOf)!= null) { submitter = onBehalfOf(rsrc, input); } else { rsrc.permissions().check(ChangePermission.SUBMIT); } rsrc.permissions().check(ChangePermission.SUBMIT); submitter = rsrc.getUser().asIdentifiedUser(); submitter = rsrc.getUser().asIdentifiedUser(); submitter = rsrc.getUser().asIdentifiedUser(); submitter = rsrc.getUser().asIdentifiedUser(); }
@java.lang.Override public com.google.gerrit.server.change.Submit.Output apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.api.changes.SubmitInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException { input.onBehalfOf(input.onBehalfOf); com.google.gerrit.server.IdentifiedUser submitter; if ((input.onBehalfOf)!= null) { submitter = onBehalfOf(rsrc, input); } else { rsrc.permissions().check(ChangePermission.SUBMIT); } rsrc.permissions().check(ChangePermission.SUBMIT); submitter = rsrc.getUser().asIdentifiedUser(); submitter = rsrc.getUser().asIdentifiedUser(); submitter = rsrc.getUser().asIdentifiedUser(); }
@java.lang.Override public com.google.gerrit.server.change.Submit.Output apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.api.changes.SubmitInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException { input.onBehalfOf(input.onBehalfOf); com.google.gerrit.server.IdentifiedUser submitter; if ((input.onBehalfOf)!= null) { submitter = onBehalfOf(rsrc, input); } else { rsrc.permissions().check(ChangePermission.SUBMIT); } rsrc.permissions().check(ChangePermission.SUBMIT); submitter = rsrc.getUser().asIdentifiedUser(); submitter = rsrc.getUser().asIdentifiedUser(); submitter = rsrc.getUser().asIdentifiedUser(); submitter = rsrc.getProject(); }
@java.lang.Override public com.google.gerrit.server.change.Submit.Output apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.api.changes.SubmitInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException { input.onBehalfOf(input.onBehalfOf); com.google.gerrit.server.IdentifiedUser submitter; if ((input.onBehalfOf)!= null) { submitter = onBehalfOf(rsrc, input); } else { rsrc.permissions().check(ChangePermission.SUBMIT); } rsrc.permissions().check(ChangePermission.SUBMIT); submitter = rsrc.getUser().asIdentifiedUser(); submitter = rsrc.getUser().asIdentifiedUser(); submitter = rsrc.getUser().asIdentifiedUser(); submitter = rsrc.getUser().asIdentifiedUser(); submitter = rsrc.getUser().asIdentifiedUser(); }
@org.junit.Test public void unblockForceEditTopicName() { block(local, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.DEVS, "refs/heads/*").setForceUpdate(true); com.google.gerrit.server.project.ProjectControl u = user(local, com.google.gerrit.server.project.DEVS); assertThat(u.controlForRef("refs/heads/master").canPerform(Permission.EDIT_NAME)).named("can edit topic"); }
@org.junit.Test public void unblockForceEditTopicName() { block(local, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.DEVS, "refs/heads/*").setForceUpdate(true); com.google.gerrit.server.project.ProjectControl u = user(local, com.google.gerrit.server.project.DEVS); assertThat(u.controlForRef("refs/heads/master").canPerform(Permission.EDIT_NAME)).named("can edit topic name"); }
@org.junit.Test public void unblockForceEditTopicName() { block(local, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.DEVS, "refs/heads/*").setForceUpdate(true); com.google.gerrit.server.project.ProjectControl u = user(local, com.google.gerrit.server.project.DEVS); assertThat(u.controlForRef("refs/heads/master").canPerform(Permission.EDIT_NAME)).named("u can edit topic"); }
@org.junit.Test public void unblockForceEditTopicName() { block(local, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.DEVS, "refs/heads/*").setForceUpdate(true); com.google.gerrit.server.project.ProjectControl u = user(local, com.google.gerrit.server.project.DEVS); assertThat(u.controlForRef("refs/heads/master").canPerform(Permission.READ_NAME)).named("u can edit topic"); }
@org.junit.Test public void unblockForceEditTopicName() { block(local, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.DEVS, "refs/heads/*").setForceUpdate(true); com.google.gerrit.server.project.ProjectControl u = user(local, com.google.gerrit.server.project.DEVS); assertThat(u.controlForRef("refs/heads/master").canPerform(Permission.EDIT_NAME)).named("u can't edit topic"); }
@org.junit.Test public void unblockInLocalDiskInTargetName_Fails() { block(parent, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.ANONYMOUS_USERS, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.REGISTERED_USERS, "refs/heads/*").setForce(true); com.google.gerrit.server.project.ProjectControl u = user(local, com.google.gerrit.server.project.REGISTERED_USERS); assertThat(u.controlForRef("refs/heads/master").isEmpty(); }
@org.junit.Test public void unblockInLocalDiskInTargetName_Fails() { block(parent, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.EDIT_TOPIC, "refs/heads/*").setForceUpdate(true); com.google.gerrit.server.project.ProjectControl u = user(local, com.google.gerrit.server.project.REGISTERED_USERS); assertThat(u.controlForRef("refs/heads/master").isEmpty(); }
@org.junit.Test public void unblockInLocalDiskInTargetName_Fails() { block(parent, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.ANONYMOUS_USERS, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.REGISTERED_USERS, "refs/heads/*").setForce(true); com.google.gerrit.server.project.ProjectControl u = user(local, com.google.gerrit.server.project.REGISTERED_USERS); assertThat(u.controlForRef("refs/heads/master").isEmpty()); }
@org.junit.Test public void unblockInLocalDiskInTargetName_Fails() { block(parent, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.ANONYMOUS_USERS, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.REGISTERED_USERS, "refs/heads/*").setForce(true); com.google.gerrit.server.project.ProjectControl u = user(local, com.google.gerrit.server.project.REGISTERED_USERS); assertThat(u.controlForRef("refs/heads/master").canPerform(Permission.EDIT_NAME)).named("' }
@org.junit.Test public void unblockInLocalDiskInTargetName_Fails() { block(parent, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.ANONYMOUS_USERS, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.REGISTERED_USERS, "refs/heads/*").setForce(true); com.google.gerrit.server.project.ProjectControl u = user(local, com.google.gerrit.server.project.REGISTERED_USERS); assertThat(u.controlForRef("refs/heads/master").canPerform(Permission.READ_NAME)).named("' }
private boolean canEditTopicName() { if (getChange().isOwner()) { return ((((isOwner()) || (refControl.isOwner())) || (getProjectControl().isOwner())) || (getProjectControl().isOwner())) || (getProjectControl().canAdministrateServer())) || (getProjectControl().isOwner()); } return refControl.canPerform(Permission.READ_NAME); }
private boolean canEditTopicName() { if (getChange().isOwner()) { return ((((isOwner()) || (refControl.isOwner())) || (getProjectControl().isOwner())) || (getProjectControl().isOwner())) || (getProjectControl().canAdministrateServer())) || (getProjectControl().isOwner()); } return refControl.canPerform(Permission.EDIT_NAME); }
private boolean canEditTopicName() { if (getChange().isOwner()) { return ((((isOwner()) || (refControl.isOwner())) || (getProjectControl().isOwner())) || (getProjectControl().canAdministrateServer())) || (getProjectControl().isOwner())) || (getProjectControl().canAdministrateServer()); } return refControl.canPerform(Permission.READ_NAME); }
private boolean canEditTopicName() { if (getChange().isOwner()) { return ((((isOwner()) || (refControl.isOwner())) || (getProjectControl().isOwner())) || (getProjectControl().canAdministrateServer())) || (getProjectControl().canAdministrateServer())) || (getProjectControl().canAdministrateServer()); } return refControl.canPerform(Permission.READ_NAME); }
private boolean canEditTopicName() { if (getChange().isOwner()) { return ((((isOwner()) || (refControl.isOwner())) || (getProjectControl().isOwner())) || (getProjectControl().canAdministrateServer())) || (getProjectControl().isOwner())) || (getProjectControl().canAdministrateServer())) { return refControl.canPerform(Permission.READ_NAME); } return refControl.canPerform(Permission.READ_NAME); }
private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canDelete(); case FORCE_HEADER : return canDelete(); case FORGE_HEADER : return canDelete(); case FORGE_HEADER : return canForgeCommitter(); case FORGE_AUTHOR : return canForgeCommitter(); case FORGE_COMMITTER : return canForgeCommitter(); case CREATE_SERVER : return canForgeCommitter(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return projectControl.controlForRef(((com.google.gerrit.server.util.MagicBranch.new com.google.gerrit.server.util.MagicBranch.NameKey(refName) + (refName))).canSubmit(true); case CREATE_CONFIG : return isOwner(); case READ_CONFIG : return isOwner(); case WRITE_CONFIG : return isOwner(); case WRITE_CONFIG : return isOwner(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported") && (canUploadMergeServerIdentity())) && (!(canForgeCommitMerge()))); }
private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canDelete(); case FORCE_HEADER : return canDelete(); case FORGE_HEADER : return canDelete(); case FORGE_HEADER : return canForgeCommitter(); case FORGE_AUTHOR : return canForgeCommitter(); case FORGE_COMMITTER : return canForgeCommitter(); case CREATE_SERVER : return canForgeCommitter(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return projectControl.controlForRef(((com.google.gerrit.server.util.MagicBranch.new com.google.gerrit.server.util.MagicBranch.NameKey(refName) + (refName))).canSubmit(true); case CREATE_CONFIG : return isOwner(); case READ_CONFIG : return isOwner(); case WRITE_CONFIG : return isOwner(); case WRITE_CONFIG : return isOwner(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported") && (canUploadMergeServerIdentity())) && (!(canForgeCommitMergeServerIdentity()))); }
private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canDelete(); case FORCE_HEADER : return canDelete(); case FORGE_HEADER : return canDelete(); case FORGE_HEADER : return canForgeCommitter(); case FORGE_AUTHOR : return canForgeCommitter(); case FORGE_COMMITTER : return canForgeCommitter(); case CREATE_SERVER : return canForgeCommitter(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return projectControl.controlForRef(((com.google.gerrit.server.util.MagicBranch.new com.google.gerrit.server.util.MagicBranch.NameKey(refName) + (refName))).canSubmit(true); case CREATE_CONFIG : return isOwner(); case READ_CONFIG : return isOwner(); case WRITE_CONFIG : return isOwner(); case WRITE_CONFIG : return isOwner(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported") && (canUploadMergeServerIdentity())) && (canUploadMergeServer())) && (!(projectControl.getProjectState().isOwner()))); }
private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canDelete(); case FORCE_HEADER : return canDelete(); case FORGE_HEADER : return canDelete(); case FORGE_HEADER : return canForgeCommitter(); case FORGE_AUTHOR : return canForgeCommitter(); case FORGE_COMMITTER : return canForgeCommitter(); case CREATE_SERVER : return canForgeCommitter(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return projectControl.controlForRef(((com.google.gerrit.server.util.MagicBranch.new com.google.gerrit.server.util.MagicBranch.NameKey(refName) + (refName))).canSubmit(true); case CREATE_CONFIG : return isOwner(); case READ_CONFIG : return isOwner(); case WRITE_CONFIG : return isOwner(); case WRITE_CONFIG : return isOwner(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported") && (canUploadMergeServerIdentity())) && (canUploadMergeServer())) && (!(projectControl.getProjectState().isEmpty()))); }
private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canDelete(); case FORCE_HEADER : return canDelete(); case FORGE_HEADER : return canDelete(); case FORGE_HEADER : return canForgeCommitter(); case FORGE_AUTHOR : return canForgeCommitter(); case FORGE_COMMITTER : return canForgeCommitter(); case CREATE_SERVER : return canForgeCommitter(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return projectControl.controlForRef(((com.google.gerrit.server.util.MagicBranch.new com.google.gerrit.server.util.MagicBranch.NameKey(refName) + (refName))).canSubmit(true); case CREATE_CONFIG : return isOwner(); case READ_CONFIG : return isOwner(); case WRITE_CONFIG : return isOwner(); case WRITE_CONFIG : return isOwner(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported") && (canUploadMergeServerIdentity())) && (!(canForgeCommitMerge())) && (!(canForgeCommitMergeServerIdentity()))); }
private void loadExtensionPanel(org.eclipse.jgit.lib.Config rc) { java.util.Map<java.lang.String, java.lang.String> lowerNames = new java.util.HashMap<>(); for (java.lang.String name : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.EXTENSION)) { java.lang.String lower = new java.util.LinkedHashMap<>(); for (java.lang.String name : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.EXTENSION_PATTERN)) { java.lang.String lower = name.toLowerCase(); if (lowerNames.containsKey(lower)) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, java.lang.String.format("Planches conflicts with " + name, lowerNames.get(lower)))); } lowerNames.put(name, name); } }
private void loadExtensionPanel(org.eclipse.jgit.lib.Config rc) { java.util.Map<java.lang.String, java.lang.String> lowerNames = new java.util.HashMap<>(); for (java.lang.String name : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.EXTENSION)) { java.lang.String lower = new java.util.LinkedHashMap<>(); for (java.lang.String name : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.EXTENSION_PATTERN)) { java.lang.String lower = name.toLowerCase(); if (lowerNames.containsKey(lower)) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, java.lang.String.format("Planches conflicts with " + name, lowerNames.get(lower)))); } lowerNames.put(name, name); extension.put(name, name); } }
private void loadExtensionPanel(org.eclipse.jgit.lib.Config rc) { java.util.Map<java.lang.String, java.lang.String> lowerNames = new java.util.HashMap<>(); for (java.lang.String name : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.EXTENSION)) { java.lang.String lower = new java.util.LinkedHashMap<>(); for (java.lang.String name : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.EXTENSION_PATTERN)) { java.lang.String lower = name.toLowerCase(); if (lowerNames.containsKey(lower)) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, java.lang.String.format("Planches conflicts with " + lowerNames.get(lower)))); } lowerNames.put(name, name, name); } }
private void loadExtensionPanel(org.eclipse.jgit.lib.Config rc) { java.util.Map<java.lang.String, java.lang.String> lowerNames = new java.util.HashMap<>(); for (java.lang.String name : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.EXTENSION)) { java.lang.String lower = new java.util.LinkedHashMap<>(); for (java.lang.String name : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.EXTENSION_PATTERN)) { java.lang.String lower = name.toLowerCase(); if (lowerNames.containsKey(lower)) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, java.lang.String.format("Planches conflicts with " + lowerNames.get(lower)))); } lowerNames.put(name, name); extension.put(name, name); } }
private void loadExtensionPanel(org.eclipse.jgit.lib.Config rc) { java.util.Map<java.lang.String, java.lang.String> lowerNames = new java.util.HashMap<>(); for (java.lang.String name : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.EXTENSION)) { java.lang.String lower = new java.util.LinkedHashMap<>(); for (java.lang.String name : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.EXTENSION_PATTERN)) { java.lang.String lower = name.toLowerCase(); if (lowerNames.containsKey(lower)) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, java.lang.String.format("Planches conflicts with " + name, lowerNames.get(lower)))); } lowerNames.put(name, name); extension.put(name, new java.util.Arrays.asList(rc.getStringList(com.google.gerrit.server.git.ProjectConfig.EXTENSION_PANCH)); } }
@java.lang.Override public org.eclipse.jgit.lib.Config getConfig() throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = com.googlesource.gerrit.plugins.gitiles.Resolver.getNameKey(req); com.google.gerrit.server.project.ProjectState state = projectCache.get(nameKey); if (state!= null) { org.eclipse.jgit.lib.Config cfg = state.getConfig("gitiles.config").getWithInheritance(); if ((cfg!= null) && ((cfg.getSections().size()) > 0)) { return cfg; } } else { state = projectCache.getAllProjects(); org.eclipse.jgit.lib.Config cfg = state.getConfig("gitiles.config").get(); if ((cfg!= null) && ((cfg.getSections().size()) > 0)) { return cfg; } } try { return org.eclipse.jgit.lib.Config cfg = getGlobalConfig(); return cfg; } catch (java.lang.Exception e) { } }
@java.lang.Override public org.eclipse.jgit.lib.Config getConfig() throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = com.googlesource.gerrit.plugins.gitiles.Resolver.getNameKey(req); com.google.gerrit.server.project.ProjectState state = projectCache.get(nameKey); if (state!= null) { org.eclipse.jgit.lib.Config cfg = state.getConfig("gitiles.config").getWithInheritance(); if ((cfg!= null) && ((cfg.getSections().size()) > 0)) { return cfg; } } else { state = projectCache.getAllProjects(); org.eclipse.jgit.lib.Config cfg = state.getConfig("gitiles.config").get(); if (cfg!= null) { return cfg; } } try { return org.eclipse.jgit.lib.Config cfg; } catch (java.lang.Exception e) { return cfg; } }
@java.lang.Override public org.eclipse.jgit.lib.Config getConfig() throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = com.googlesource.gerrit.plugins.gitiles.Resolver.getNameKey(req); com.google.gerrit.server.project.ProjectState state = projectCache.get(nameKey); if (state!= null) { org.eclipse.jgit.lib.Config cfg = state.getConfig("gitiles.config").getWithInheritance(); if ((cfg!= null) && ((cfg.getSections().size()) > 0)) { return cfg; } } else { state = projectCache.getAllProjects(); org.eclipse.jgit.lib.Config cfg = state.getConfig("gitiles.config").get(); if (cfg!= null) { return cfg; } } try { return org.eclipse.jgit.lib.Config cfg; } catch (java.lang.Exception e) { return null; } }
@java.lang.Override public org.eclipse.jgit.lib.Config getConfig() throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = com.googlesource.gerrit.plugins.gitiles.Resolver.getNameKey(req); com.google.gerrit.server.project.ProjectState state = projectCache.get(nameKey); if (state!= null) { org.eclipse.jgit.lib.Config cfg = state.getConfig("gitiles.config").getWithInheritance(); if (cfg!= null) { return cfg; } } else { state = projectCache.getAllProjects(); org.eclipse.jgit.lib.Config cfg = state.getConfig("gitiles.config").get(); if ((cfg!= null) && ((cfg.getSections().size()) > 0)) { return cfg; } } try { org.eclipse.jgit.lib.Config cfg = getGlobalConfig(); return cfg; } catch (java.lang.Exception e) { } }
@java.lang.Override public org.eclipse.jgit.lib.Config getConfig() throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = com.googlesource.gerrit.plugins.gitiles.Resolver.getNameKey(req); com.google.gerrit.server.project.ProjectState state = projectCache.get(nameKey); if (state!= null) { org.eclipse.jgit.lib.Config cfg = state.getConfig("gitiles.config").getWithInheritance(); if ((cfg!= null) && ((cfg.getSections().size()) > 0)) { return cfg; } } else { state = projectCache.getAllProjects(); org.eclipse.jgit.lib.Config cfg = state.getConfig("gitiles.config").get(); if ((cfg!= null) && ((cfg.getSections().size()) > 0)) { return cfg; } } try { return org.eclipse.jgit.lib.Config cfg; } catch (java.lang.Exception e) { return null; } }
private org.eclipse.jgit.lib.Config getGlobalConfig() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.io.File sitePath = new java.io.File(".").getAbsoluteFile(); if (".".equals(sitePath.getName())) { sitePath = sitePath.getParentFile(); } java.io.File cfg = new java.io.File(sitePath, "etc/gitiles.config"); org.eclipse.jgit.storage.file.FileBasedConfig cfg = new org.eclipse.jgit.storage.file.FileBasedConfig(cfgFile, org.eclipse.jgit.util.FS.DETECTED); if (cfg.getFile().exists()) { cfg.load(); } return cfg; }
private org.eclipse.jgit.lib.Config getGlobalConfig() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.io.File sitePath = new java.io.File(".").getAbsoluteFile(); if (".".equals(sitePath.getName())) { sitePath = sitePath.getParentFile(); } java.io.File cfg = new java.io.File(sitePath, "etc/gitiles.config"); org.eclipse.jgit.storage.file.FileBasedConfig cfg = new org.eclipse.jgit.storage.file.FileBasedConfig(cfg); cfg.load(); cfg.load(); return cfg; }
private org.eclipse.jgit.lib.Config getGlobalConfig() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.io.File sitePath = new java.io.File(".").getAbsoluteFile(); if (".".equals(sitePath.getName())) { sitePath = sitePath.getParentFile(); } java.io.File cfg = new java.io.File(sitePath, "etc/gitiles.config"); org.eclipse.jgit.storage.file.FileBasedConfig cfg = new org.eclipse.jgit.storage.file.FileBasedConfig(cfgFile, org.eclipse.jgit.util.FS.DETECTED); cfg.load(); cfg.load(); return cfg; }
private org.eclipse.jgit.lib.Config getGlobalConfig() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.io.File sitePath = new java.io.File(".").getAbsoluteFile(); if (".".equals(sitePath.getName())) { sitePath = sitePath.getParentFile(); } java.io.File cfg = new java.io.File(sitePath, "etc/gitiles.config"); org.eclipse.jgit.storage.file.FileBasedConfig cfg = new org.eclipse.jgit.storage.file.FileBasedConfig(cfg, org.eclipse.jgit.util.FS.DETECTED); if (cfg.getFile().exists()) { cfg.load(); } return cfg; }
private org.eclipse.jgit.lib.Config getGlobalConfig() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.io.File sitePath = new java.io.File(".").getAbsoluteFile(); if (".".equals(sitePath.getName())) { sitePath = sitePath.getParentFile(); } java.io.File cfg = new org.eclipse.jgit.storage.file.FileBasedConfig(sitePath, "etc/etc/config"); cfg.load(); cfg.load(); return cfg; }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (o instanceof com.google.gerrit.extensions.api.projects.CommentLinkInfo) { com.google.gerrit.extensions.api.projects.CommentLinkInfo a = ((com.google.gerrit.extensions.api.projects.CommentLinkInfo) (o)); return ((com.google.gerrit.extensions.api.projects.CommentLinkInfo) (o)); } return ((((this.match) == null) && (this.match)) && ((this.link) == null)) && ((this.link) == null)) && (this.link.html.equals(other.html)); }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (o instanceof com.google.gerrit.extensions.api.projects.CommentLinkInfo) { com.google.gerrit.extensions.api.projects.CommentLinkInfo a = ((com.google.gerrit.extensions.api.projects.CommentLinkInfo) (o)); return ((com.google.gerrit.extensions.api.projects.CommentLinkInfo) (o)); } return ((((this.match) == null) && (this.match)) && ((this.link) == null)) && ((this.link) == null)) && (this.html.html.client.equals(other.html)); }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (o instanceof com.google.gerrit.extensions.api.projects.CommentLinkInfo) { com.google.gerrit.extensions.api.projects.CommentLinkInfo a = ((com.google.gerrit.extensions.api.projects.CommentLinkInfo) (o)); return ((com.google.gerrit.extensions.api.projects.CommentLinkInfo) (o)); } return ((((this.match) == null) && (this.match)) && ((this.link) == null)) && ((this.link) == null)) && (this.html.html.client.equals(other.html))) && ((this.html) == null))); }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (o instanceof com.google.gerrit.extensions.api.projects.CommentLinkInfo) { com.google.gerrit.extensions.api.projects.CommentLinkInfo b = ((com.google.gerrit.extensions.api.projects.CommentLinkInfo) (o)); return ((com.google.gerrit.extensions.api.projects.CommentLinkInfo) (o)); } return ((((this.match) == null) && (this.match)) && ((this.link) == null)) && ((this.link) == null)) && (this.html.html.client.equals(other.html))) && ((this.html) == null))); }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (o instanceof com.google.gerrit.extensions.api.projects.CommentLinkInfo) { com.google.gerrit.extensions.api.projects.CommentLinkInfo a = ((com.google.gerrit.extensions.api.projects.CommentLinkInfo) (o)); return ((com.google.gerrit.extensions.api.projects.CommentLinkInfo) (o)); } return ((((this.match) == null) && (this.match)) && ((this.link) == null)) && ((this.link) == null)) && (this.html.html.client.equals(other.html))) && ((this.html) == null)? this.enabled : this.enabled; }
com.googlesource.gerrit.plugins.gitiles.FilteredRepository create(com.google.gerrit.reviewdb.client.Project.NameKey name) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { com.google.gerrit.server.project.ProjectState projectState = projectCache.checkedGet(name); try { if (!(projectState.getProject().containsKey(name))) { throw new com.google.gerrit.server.git.NoSuchProjectException(name); } return new com.google.gerrit.server.gitiles.ProjectRepository(projectState, userProvider.get(), visibleRefFilter, visibleRefFilter); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.gitiles.NoSuchProjectException(nameKey, e); } }
com.googlesource.gerrit.plugins.gitiles.FilteredRepository create(com.google.gerrit.reviewdb.client.Project.NameKey name) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { com.google.gerrit.server.project.ProjectState projectState = projectCache.checkedGet(name); try { if (!(projectState.getProject().containsKey(name))) { throw new com.google.gerrit.server.git.NoSuchProjectException(name); } return new com.google.gerrit.server.gitiles.ProjectRepository(projectState, userProvider.get(), visibleRefFilter, visibleRefFilter); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.gitiles.NoSuchProjectException(name); } }
com.googlesource.gerrit.plugins.gitiles.FilteredRepository create(com.google.gerrit.reviewdb.client.Project.NameKey name) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { com.google.gerrit.server.project.ProjectState projectState = projectCache.checkedGet(name); try { if (!(projectState.getProject().containsKey(name))) { throw new com.google.gerrit.server.git.NoSuchProjectException(name); } return new com.google.gerrit.server.gitiles.ProjectRepository(projectState, userProvider.get(), visibleRefFilter, visibleRefFilter); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.gitiles.NoSuchProjectException(e); } }
com.googlesource.gerrit.plugins.gitiles.FilteredRepository create(com.google.gerrit.reviewdb.client.Project.NameKey name) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { com.google.gerrit.server.project.ProjectState projectState = projectCache.checkedGet(name); try { if (!(projectState.getProject().equals(name))) { return null; } } catch (java.lang.Exception e) { throw new com.google.gerrit.server.gitiles.NoSuchProjectException(nameKey, e); } return new com.google.gerrit.server.gitiles.Filtered(projectState, userProvider.get(), visibleRefFilter, permissionBackendFactory, visibleRefFilter); }
com.googlesource.gerrit.plugins.gitiles.FilteredRepository create(com.google.gerrit.reviewdb.client.Project.NameKey name) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { com.google.gerrit.server.project.ProjectState projectState = projectCache.checkedGet(name); try { if (!(projectState.getProject().getState().containsKey(name))) { throw new com.google.gerrit.server.git.NoSuchProjectException(name); } return new com.google.gerrit.server.gitiles.ProjectRepository(projectState, userProvider.get(), visibleRefFactory, visibleRefFilter); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.gitiles.NoSuchProjectException(e); } }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(this); }
@java.lang.Override public int hashCode() { return com.google.common.base.Objects.firstNonNull(this); }
@java.lang.Override public int hashCode() { return com.google.common.base.Objects.firstNonNull(this).hashCode(); }
@java.lang.Override public int hashCode() { return com.google.common.base.Objects.firstNonNull(1, 1); }
@java.lang.Override public int hashCode() { return com.google.common.base.Objects.firstNonNull(this.message).hash(); }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o == null) { return true; } if (o instanceof com.google.gerrit.server.git.ValidationError) { com.google.gerrit.server.git.ValidationError this = ((com.google.gerrit.server.git.ValidationError) (o)); return (this.message) == null? this.message : this.message; return false; } return false; }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (o instanceof com.google.gerrit.server.git.ValidationError) { com.google.gerrit.server.git.ValidationError this = ((com.google.gerrit.server.git.ValidationError) (o)); return (this.message) == null? this.message : this.message; return false; } return false; }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o == null) { return true; } if (o instanceof com.google.gerrit.server.git.ValidationError) { com.google.gerrit.server.git.ValidationError) { com.google.gerrit.server.git.ValidationError this = ((com.google.gerrit.server.git.ValidationError) (o)); return (this.message) == null? this.message : this.message; } return false; }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o == null) { return true; } if (o instanceof com.google.gerrit.server.git.ValidationError) { com.google.gerrit.server.git.ValidationError) { com.google.gerrit.server.git.ValidationError this = ((com.google.gerrit.server.git.ValidationError) (o)); return this.message; } return false; }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o == null) { return true; } if (o instanceof com.google.gerrit.server.git.ValidationError) { com.google.gerrit.server.git.ValidationError this = ((com.google.gerrit.server.git.ValidationError) (o)); return (this.message) == null? this.message : this.message; this.message = this.message; return false; }
@java.lang.Override public com.google.gerrit.server.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }
@java.lang.Override public com.google.gerrit.server.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }
@java.lang.Override public com.google.gerrit.server.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }
@java.lang.Override public com.google.gerrit.server.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }
@java.lang.Override public com.google.gerrit.server.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.project.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return parse(id, true); }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return parse(id, true); }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { try { return parse(id, true); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.server.permissions.PermissionBackendException(id, e); } }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { try { return parse(id, true); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.server.permissions.PermissionBackendException(id, java.io.IOException(id, true); } }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { try { return parse(id, true); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(id, java.io.IOException(id)); } }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id, checkAccess); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Not Found: %s", id)); } return rsrc; }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id, checkAccess); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Not found: %s", id)); } return rsrc; }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id, checkAccess); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Not found: %s", id)); } return rsrc; }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id, checkAccess); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Not Found: %s not found: %s", id)); } return rsrc; }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id, checkAccess); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Not Found: %s not found: %s", id)); } return rsrc; }
public void checkStatePermits() throws com.google.gerrit.extensions.restapi.ResourceConflictException { if (!(statePermissions.isOpen())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("project state " + (getState().name())) + " does not permitted")); } }
public void checkStatePermissions() throws com.google.gerrit.extensions.restapi.ResourceConflictException { if (!(statePermissions.isOpen())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("project state " + (getState().name())) + " does not permitted")); } }
public void checkStatePermits() throws com.google.gerrit.extensions.restapi.ResourceConflictException { if (!(statePermissions.isOpen())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Project state " + (getState().name())) + " does not permitted")); } }
public void checkStatePermits() throws com.google.gerrit.extensions.restapi.ResourceConflictException { if (!(statePermissions.isOpen())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("project state " + (getProject().getState().name())) + " does not permitted")); } }
public void checkStatePermissions() throws com.google.gerrit.extensions.restapi.ResourceConflictException { if (!(statePermissions.isOpen())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("project state " + (getProject().getState().name())) + " does not permitted")); } }
@java.lang.Override public com.google.gerrit.server.project.ChildProjectResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.project.ChildProjectResource(parent, p.getProject().getNameKey()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.project.ChildProjectResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState p : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.project.ChildProjectResource(parent, p.getProject().getNameKey()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.project.ChildProjectResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.project.ChildProjectResource(parent, p.getProject().getNameKey()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.project.ChildProjectResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.project.ChildProjectResource(parent, p.getProject().getNameKey()); } } throw new com.google.gerrit.extensions.restapi.BadRequestException(id); }
@java.lang.Override public com.google.gerrit.server.project.ChildProjectResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.project.ChildProjectResource(parent, p.getProject().getNameKey()); } } throw new com.google.gerrit.extensions.restapi.BadRequestException(id); }
private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return (isVisible()) && (getProjectControl().getProjectState().getProjectState().get()); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_HEADER : return canForceUpdate(); case FORCE_HEADER : return canForceUpdate(); case FORGE_AUTHOR : return canForgeCommitter(); case FORGE_COMMIT : return canForgeCommitter(); case FORGE_SERVER : return canForgeCommitter(); case CREATE_SERVER : return canForgeCommitter(); case CREATE_SERVER : return canUploadMerge(); case CREATE_CHANGE : return canForgeCommitter(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canPerform(perm.getName()); case CREATE_CHANGE : return canPerform(Permission.READ_CONFIG); case WRITE_CONFIG : return canForgeCommit(Permission.READ_CONFIG); case WRITE_CONFIG : return isOwner(); case WRITE_CONFIG : return isOwner(); case WRITE_CONFIG : return isOwner(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "canForgeCommitter())) && (canForgeCommitter())) && (!(canForgeCommitter()))); }
private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return (isVisible()) && (getProjectControl().getProjectState().getProjectState().get()); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_HEADER : return canForceUpdate(); case FORCE_HEADER : return canForceUpdate(); case FORGE_AUTHOR : return canForgeCommitter(); case FORGE_COMMIT : return canForgeCommitter(); case FORGE_SERVER : return canForgeCommitter(); case CREATE_SERVER : return canForgeCommitter(); case CREATE_SERVER : return canUploadMerge(); case CREATE_CHANGE : return canForgeCommitter(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canPerform(perm.getName()); case CREATE_CHANGE : return canPerform(Permission.READ_CONFIG); case WRITE_CONFIG : return canForgeCommit(Permission.READ_CONFIG); case WRITE_CONFIG : return isOwner(); case WRITE_CONFIG : return isOwner(); case WRITE_CONFIG : return isOwner(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "canForgeCommitter())) && (canForgeCommitter())) && (canUploadMerge()))); }
private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return (isVisible()) && (getProjectControl().getProjectState().getProjectState().get()); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_HEADER : return canForceUpdate(); case FORCE_HEADER : return canForceUpdate(); case FORGE_AUTHOR : return canForgeCommitter(); case FORGE_COMMIT : return canForgeCommitter(); case FORGE_SERVER : return canForgeCommitter(); case CREATE_SERVER : return canForgeCommitter(); case CREATE_SERVER : return canUploadMerge(); case CREATE_CHANGE : return canForgeCommitter(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canPerform(perm.getName()); case CREATE_CHANGE : return canPerform(Permission.READ_CONFIG); case WRITE_CONFIG : return canForgeCommit(Permission.READ_CONFIG); case WRITE_CONFIG : return isOwner(); case WRITE_CONFIG : return isOwner(); case WRITE_CONFIG : return isOwner(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "canForgeCommitter())) && (canForgeCommitter())) && (!(canForgeCommitMerge()))); }
private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return (isVisible()) && (getProjectControl().getProjectState().getProjectState().get()); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_HEADER : return canForceUpdate(); case FORCE_HEADER : return canForceUpdate(); case FORGE_AUTHOR : return canForgeCommitter(); case FORGE_COMMIT : return canForgeCommitter(); case FORGE_SERVER : return canForgeCommitter(); case CREATE_SERVER : return canForgeCommitter(); case CREATE_SERVER : return canUploadMerge(); case CREATE_CHANGE : return canForgeCommitter(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canPerform(perm.getName()); case CREATE_CHANGE : return canPerform(Permission.READ_CONFIG); case WRITE_CONFIG : return canForgeCommit(Permission.READ_CONFIG); case WRITE_CONFIG : return isOwner(); case WRITE_CONFIG : return isOwner(); case WRITE_CONFIG : return isOwner(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "canForgeCommitter())) && (canForgeCommitter())) && (!(canForgeCommitter())) && (!(canForgeCommitter()))); }
private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return (isVisible()) && (getProjectControl().getProjectState().getProjectState().get()); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_HEADER : return canForceUpdate(); case FORCE_HEADER : return canForceUpdate(); case FORGE_AUTHOR : return canForgeCommitter(); case FORGE_COMMIT : return canForgeCommitter(); case FORGE_SERVER : return canForgeCommitter(); case CREATE_SERVER : return canForgeCommitter(); case CREATE_SERVER : return canUploadMerge(); case CREATE_CHANGE : return canForgeCommitter(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canUploadMerge(); case CREATE_CHANGE : return canPerform(perm.getName()); case CREATE_CHANGE : return canPerform(Permission.READ_CONFIG); case WRITE_CONFIG : return canForgeCommit(Permission.READ_CONFIG); case WRITE_CONFIG : return isOwner(); case WRITE_CONFIG : return isOwner(); case WRITE_CONFIG : return isOwner(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "canForgeCommitter())) && (canForgeCommitter())) && (!(canForgeCommitter())) && (!(canForgeCommitter())))); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Supplier.of(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Supplier.of(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.gerrit.server.account.GetPreferences.defaults()); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.of(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.gerrit.server.account.GetPreferences.defaults()); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.of(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.gerrit.server.account.GetDiffPreferences.defaults()); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Supplier.of(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.common.base.Supplier.of(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())); }
public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIds.byAccount(account.getId())!= null? extId.getRevision()) : com.google.common.collect.ImmutableSet.of(); }
public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIds.byAccount(account.getId())!= null? externalId.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of(); }
public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIds.byAccount(account.getId())!= null? extId.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.collect.ImmutableSet.of(); }
public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.byAccount(account.getId())!= null? extId.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.collect.ImmutableSet.of(); }
public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIds.byAccount(account.getId())!= null? extId.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Supplier<com.google.gerrit.server.account.AccountState, accountConfig.getProjectWatches()); }
public static java.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.ExternalId accountConfig) throws java.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { return java.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return java.util.Optional.emptySet(); }
public static java.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.ExternalId accountConfig) throws java.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { return java.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return java.util.Optional.of(accountConfig.getLoadedAccount().get(); }
public static java.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalId externalIds, com.google.gerrit.server.account.ExternalId accountConfig) throws java.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { return java.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return java.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, accountConfig.getExternalIds().isPresent())? accountConfig.getExternalIds().get()) : com.google.common.collect.ImmutableSet.of(); }
public static java.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalId externalIds, com.google.gerrit.server.account.ExternalId accountConfig) throws java.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { return java.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return java.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, accountConfig.getExternalIds().getExternalIds().isPresent()? externalIds.byAccount(account.getExternalIds().get()) : java.util.Collections.emptySet(); }
public static java.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalId externalIds, com.google.gerrit.server.account.ExternalId accountConfig) throws java.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { return java.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return java.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, accountConfig.getExternalIds().getExternalIds().isPresent()? externalIds.byAccount(account.getExternalIds().get()) : com.google.common.collect.ImmutableSet.of()); }
@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT_DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = "eclipse:jgit/lib.fromString.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.collect.Iterables.getOnlyElement(values))); assertThat(com.google.common.collect.Iterables.getOnlyElement(values).isEqualTo(expectedValue); }
@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT_DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = "eclipse:jgit/lib.fromString.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.collect.Iterables.getOnlyElement(values))); java.lang.String expectedValue = ((allUsersName)!= (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values))).isEqualTo(expectedValue); }
@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT_DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = "eclipse:jgit/lib.fromString.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.collect.Iterables.getOnlyElement(values))); java.lang.String expectedValue = ((((allUsersName) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values))).isEqualTo(expectedValue); }
@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT_DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = "eclipse:jgit/lib.fromString.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.collect.Iterables.getOnlyElement(values))); java.lang.String expectedValue = ((allUsersName)!= (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values))).isEqualTo(expectedValue); assertThat(com.google.common.collect.Iterables.getOnlyElement(values).isEqualTo(expectedValue); }
@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT_DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = "eclipse:jgit/lib.fromString.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.collect.Iterables.getOnlyElement(values))); java.lang.String expectedValue = ((((allUsersName) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(accounts)) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(values)) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values))).isEqualTo(expectedValue); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())), com.google.gerrit.server.account.DiffPreferences.defaults(), com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())), com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())), com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults(), com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())), com.google.gerrit.server.account.DiffPreferences.defaults(), com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults(), com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of())); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Supplier<com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), com.google.gerrit.server.account.GetDiffPreferences.defaults()); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults), com.google.common.base.Supplier.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Supplier<com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), com.google.gerrit.server.account.GetDiffPreferences.defaults); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults)); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults)); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults); }
public static java.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.ExternalId accountConfig) throws java.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { return java.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return java.util.Optional.emptySet(); }
public static java.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.ExternalId accountConfig) throws java.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { return java.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return java.util.Optional.of(accountConfig.getLoadedAccount().get(); }
public static java.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalId externalIds, com.google.gerrit.server.account.ExternalId accountConfig) throws java.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { return java.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return java.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, accountConfig.getExternalIds().isPresent())? accountConfig.getExternalIds().get()) : com.google.common.collect.ImmutableSet.of(); }
public static java.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalId externalIds, com.google.gerrit.server.account.ExternalId accountConfig) throws java.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { return java.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return java.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, accountConfig.getExternalIds().isPresent()? externalIds.byAccount(account.getExternalIds().get()) : com.google.common.collect.ImmutableSet.of(); }
public static java.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalId externalIds, com.google.gerrit.server.account.ExternalId accountConfig) throws java.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { return java.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return java.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, accountConfig.getExternalIds().isPresent()? externalIds.byAccount(account.getExternalIds().get()) : com.google.common.collect.ImmutableSet.of(accountConfig.getProjectWatches()), accountConfig.getProjectWatches()); }
@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT_DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = "eclipse:jgit/lib.fromString.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); assertThat(values).hasSize(1); java.lang.String expectedValue = ((allUsersName.get()) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values))).isEqualTo(expectedValue); }
@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT_DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = "eclipse:jgit/lib.fromString.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); assertThat(values).hasSize(1); java.lang.String expectedValue = ((allUsersName.get()) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values))).isEqualTo(expectedValue); }
@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT_DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = "eclipse:jgit/lib.fromString.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); assertThat(values).hasSize(1); java.lang.String expectedValue = ((allUsersName.get()) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountsUsers(account.getId()))) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values))).isEqualTo(expectedValue); }
@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT_DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = "eclipse:jgit/lib.fromString.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); assertThat(values).hasSize(1); java.lang.String expectedValue = ((allUsersName.get()) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.refsUsers(account.getId()))) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values))).isEqualTo(expectedValue); }
@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT_DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = "eclipse:jgit/lib.fromString.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); assertThat(values).hasSize(1); java.lang.String expectedValue = ((allUsersName.get()) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values))).isEqualTo(expectedValue); assertThat(com.google.common.collect.Iterables.getOnlyElement(values).isEqualTo(expectedValue); }
public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIds.byAccount(account.getId())!= null? extId.getRevision()) : com.google.common.collect.ImmutableSet.of(); }
public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.byAccount(account.getId())!= null? extId.getRevision()) : com.google.common.collect.ImmutableSet.of(); }
public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIds.byAccount(account.getId())!= null? extId.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Supplier<java.lang.Boolean, com.google.common.base.Supplier<com.google.gerrit.reviewdb.client.Account.Id> accountConfig.getProjectWatches()), com.google.common.collect.ImmutableSet.copyOf(accountConfig.getDiffPreferences()), com.google.common.base.Supplier(accountConfig.getDiffPreferences()), accountConfig.getEditPreferences()), com.google.common.base.Supplier(accountConfig.getEditPreferences()), accountConfig.getEditPreferences()); }
public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIds.byAccount(account.getId())!= null? extId.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Supplier<java.lang.Boolean, com.google.common.base.Supplier<com.google.gerrit.reviewdb.client.Account.Id> accountConfig.getProjectWatches()), com.google.common.collect.ImmutableSet.copyOf(accountConfig.getDiffPreferences()), com.google.common.base.Supplier(accountConfig.getDiffPreferences()), com.google.common.base.Joiner.on(viewConfig.getEditPreferences()), com.google.common.base.Supplier(accountConfig.getEditPreferences()), com.google.common.base.Supplier(accountConfig.getEditPreferences()), accountConfig.getEditPreferences())); }
public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIds.byAccount(account.getId())!= null? extId.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Supplier<java.lang.Boolean, com.google.common.base.Supplier<com.google.gerrit.reviewdb.client.Account.Id> accountConfig.getProjectWatches()), com.google.common.collect.ImmutableSet.copyOf(accountConfig.getDiffPreferences()), com.google.common.base.Supplier(accountConfig.getDiffPreferences()), com.google.common.base.Joiner.on(viewConfig.getEditPreferences()), com.google.common.base.Supplier(accountConfig.getEditPreferences()), com.google.common.base.Supplier(accountConfig.getEditPreferences()), accountConfig.getEditPreferences()); }
public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.byAccount(account.getId())!= null? extId.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Supplier(accountConfig.getProjectWatches()), com.google.common.base.Supplier<com.google.common.base.Supplier<com.google.gerrit.reviewdb.client.Account.Id> accountConfig.getProjectWatches()), com.google.common.base.Supplier(accountConfig.getDiffPreferences()), accountConfig.getDiffPreferences()); }
public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.byAccount(account.getId())!= null? extId.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Supplier(accountConfig.getProjectWatches()), com.google.common.base.Supplier<com.google.common.base.Supplier<com.google.gerrit.reviewdb.client.AccountPreferences.Id, accountConfig.getGeneralPreferences()), com.google.common.base.Supplier(accountConfig.getDiffPreferences()), accountConfig.getDiffPreferences()); }
public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.byAccount(account.getId())!= null? extId.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Supplier(accountConfig.getProjectWatches()), com.google.common.base.Supplier<com.google.common.base.Supplier<com.google.gerrit.reviewdb.client.AccountPreferences.Id, accountConfig.getGeneralPreferences()), com.google.common.base.Supplier(accountConfig.getDiffPreferences()), com.google.common.base.Supplier<com.google.gerrit.server.account.AccountPreferences.enablePreferences() { @java.lang.Override public com.google.common.base.Supplier<com.google.gerrit.server.account.AccountPreferences.GetPreferencesInfo> accountConfig(accountConfig.getDiffPreferences()), accountConfig.getDiffPreferences()); } }); }
public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.byAccount(account.getId())!= null? extId.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Supplier(accountConfig.getProjectWatches()), com.google.common.base.Supplier<com.google.common.base.Supplier<com.google.gerrit.reviewdb.client.AccountPreferences.Id, accountConfig.getGeneralPreferences()), com.google.common.base.Supplier(accountConfig.getDiffPreferences()), com.google.common.base.Supplier<com.google.gerrit.server.account.AccountPreferences.enablePreferences() { @java.lang.Override public com.google.common.base.Supplier<com.google.gerrit.server.account.AccountPreferences.GetPreferencesInfo> accountConfig(accountConfig.getDiffPreferences())), accountConfig.getDiffPreferences()); } }); }
public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.byAccount(account.getId())!= null? extId.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Supplier(accountConfig.getProjectWatches()), com.google.common.base.Supplier<com.google.common.base.Supplier<com.google.gerrit.reviewdb.client.AccountPreferences.Id, accountConfig.getGeneralPreferences()), com.google.common.base.Supplier(accountConfig.getDiffPreferences()), com.google.common.base.Supplier<com.google.gerrit.server.account.AccountPreferences.enablePreferences() { @java.lang.Override public com.google.common.base.Supplier<com.google.gerrit.server.account.AccountPreferences.GetPreferencesInfo> accountConfig(accountConfig.getDiffPreferences()), accountConfig.getDiffPreferences()); }).collect(toSet()); }
public static java.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.ExternalId accountConfig) throws java.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { return java.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return java.util.Optional.emptySet(); }
public static java.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.ExternalId accountConfig) throws java.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { return java.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return java.util.Optional.of(accountConfig.getLoadedAccount().get(); }
public static java.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalId externalIds, com.google.gerrit.server.account.ExternalId accountConfig) throws java.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { return java.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return java.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, accountConfig.getExternalIds().isPresent()? externalIds.byAccount(account.getExternalIds().get()) : java.util.Collections.emptySet(); }
public static java.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalId externalIds, com.google.gerrit.server.account.ExternalId accountConfig) throws java.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { return java.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return java.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, accountConfig.getExternalIds().isPresent()? accountConfig.getExternalIds().get()) : com.google.common.collect.ImmutableSet.of(); }
public static java.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalId externalIds, com.google.gerrit.server.account.ExternalId accountConfig) throws java.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { return java.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return java.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, accountConfig.getExternalIds().isPresent()? accountConfig.getExternalIds().get()) : com.google.common.collect.ImmutableSet.of(accountConfig.getProjectWatches()), com.google.common.base.Supplier<com.google.gerrit.reviewdb.client.Account.Id> accountConfig.getProjectWatches()), com.google.common.base.Supplier<com.google.gerrit.reviewdb.client.Account.Id> accountConfig.getDefaultPreferences()), com.google.common.base.Supplier<com.google.gerrit.reviewdb.client.Account.Id> accountConfig.getDefaultPreferences()), com.google.common.base.Supplier(accountConfig.getDefaultPreferences()), accountConfig.getDefaultPreferences())); }
@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT_DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = "eclipse:jgit:lib.fromString.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.collect.Iterables.getOnlyElement(values), com.google.common.collect.Iterables.getOnlyElement(values))); java.lang.String expectedValue = ((allUsersName)!= (com.google.gerrit.reviewdb.client.ChangePreferences.defaults(account.getId()))) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(values))); assertThat(com.google.common.collect.Iterables.getOnlyElement(values))).isEqualTo(expectedValue); }
@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT_DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = "eclipse:jgit:lib.fromString.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.collect.Iterables.getOnlyElement(values), com.google.common.collect.Iterables.getOnlyElement(values))); java.lang.String expectedValue = ((allUsersName)!= (com.google.gerrit.reviewdb.client.ChangePreferences.defaults(account.getId()))) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(values)) + ":") + metaId; assertThat(metaId).isEqualTo(expectedValue); }
@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT_DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = "eclipse:jgit:lib.fromString.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.collect.Iterables.getOnlyElement(values), com.google.common.collect.Iterables.getOnlyElement(values))); java.lang.String expectedValue = ((allUsersName)!= (com.google.gerrit.reviewdb.client.ChangePreferences.defaults(account.getId()))) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(values)) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values))).isEqualTo(expectedValue); }
@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT_DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = "eclipse:jgit:lib.fromString.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.collect.Iterables.getOnlyElement(values), com.google.common.collect.Iterables.getOnlyElement(values))); java.lang.String expectedValue = ((allUsersName)!= (com.google.gerrit.reviewdb.client.ChangePreferences.defaults(account.getId()))) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(values))); assertThat(com.google.common.collect.Iterables.getOnlyElement(values))).isEqualTo(expectedId); }
@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT_DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = "eclipse:jgit:lib.fromString.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.collect.Iterables.getOnlyElement(values), com.google.common.collect.Iterables.getOnlyElement(values))); java.lang.String expectedValue = ((allUsersName)!= (com.google.gerrit.reviewdb.client.ChangePreferences.defaults(account.getId()))) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(values)) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values))).isEqualTo(expectedId); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.SuppressWarnings.nullify(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.gerrit.extensions.client.EditPreferencesInfo.defaults()); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.SuppressWarnings.nullify(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.gerrit.extensions.client.EditPreferencesInfo.defaults(), com.google.gerrit.extensions.client.EditPreferencesInfo.defaults()); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT_DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.SuppressWatches.of(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.gerrit.extensions.client.EditPreferencesInfo.defaults(), com.google.gerrit.extensions.client.EditPreferencesInfo.defaults()); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.SuppressWarnings.nullify(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.gerrit.extensions.client.EditPreferencesInfo.defaults(), com.google.gerrit.extensions.client.EditPreferencesInfo.defaults())); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT_DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.SuppressWarnings.nullToNull(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.gerrit.extensions.client.EditPreferencesInfo.defaults()); }
public com.google.gerrit.server.account.AccountState insert(java.lang.String message, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate uuid) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return updateAccount(r, accountId); }
public com.google.gerrit.server.account.AccountState insert(java.lang.String message, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate uuid) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return updateAccount(( r) -> { com.google.gerrit.server.account.AccountConfig accountConfig = read(r, accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(new java.sql.Timestamp(committerIdent.getWhen().getTime())); com.google.gerrit.server.account.AccountState accountState = new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.server.account.GetPreferences.defaults(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), com.google.gerrit.server.account.GetPreferences.defaults(), accountId, update); com.google.gerrit.server.account.ExternalIdsUpdate.update(accountState, update); com.google.gerrit.server.account.ExternalIdsUpdate.setAccountUpdate(update); com.google.gerrit.server.account.ExternalId updatedAccounts = createExternalIds(r, accountConfig.getExternalIds(), accountConfig, update); com.google.gerrit.server.account.ExternalId updatedAccounts = new com.google.gerrit.server.account.AccountsUpdate(allUsersName, externalIds, update); com.google.gerrit.server.account.AccountsUpdate.Update = new com.google.gerrit.server.account.AccountsUpdate(allUsersName, externalIds, update, message,
public com.google.gerrit.server.account.AccountState insert(java.lang.String message, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate uuid) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return updateAccount(( r) -> { com.google.gerrit.server.account.AccountConfig accountConfig = read(r, accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(new java.sql.Timestamp(committerIdent.getWhen().getTime())); com.google.gerrit.server.account.AccountState accountState = new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.server.account.GetPreferences.defaults(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), com.google.gerrit.server.account.GetPreferences.defaults(), accountId, update); com.google.gerrit.server.account.ExternalIdsUpdate.update(accountState, update); com.google.gerrit.server.account.ExternalIdsUpdate.setAccountUpdate(update); com.google.gerrit.server.account.ExternalId updatedAccounts = createExternalIds(r, accountConfig.getExternalIds(), accountConfig, update); com.google.gerrit.server.account.ExternalId updatedAccounts = new com.google.gerrit.server.account.AccountsUpdate(allUsersName, externalIds, update); com.google.gerrit.server.account.AccountsUpdate.Update = new com.google.gerrit.server.account.AccountsUpdate(allUsersName, externalIds, message, accountConfig
public com.google.gerrit.server.account.AccountState insert(java.lang.String message, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate uuid) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return updateAccount(( r) -> { com.google.gerrit.server.account.AccountConfig accountConfig = read(r, accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(new java.sql.Timestamp(committerIdent.getWhen().getTime())); com.google.gerrit.server.account.AccountState accountState = new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.server.account.GetPreferences.defaults(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), com.google.gerrit.server.account.GetPreferences.defaults(), accountId, update); com.google.gerrit.server.account.ExternalIdsUpdate.update(accountState, update); com.google.gerrit.server.account.ExternalIdsUpdate.setAccountUpdate(update); com.google.gerrit.server.account.ExternalId updatedAccounts = createExternalIds(r, accountConfig.getExternalIds(), accountConfig, update); com.google.gerrit.server.account.ExternalId updatedAccounts = new com.google.gerrit.server.account.AccountsUpdate(allUsersName, externalIds, update); com.google.gerrit.server.account.AccountsUpdate.Update = new com.google.gerrit.server.account.AccountsUpdate(allUsersName, externalId, message, accountConfig,
public com.google.gerrit.server.account.AccountState insert(java.lang.String message, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate uuid) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return updateAccount(( r) -> { com.google.gerrit.server.account.AccountConfig accountConfig = read(r, accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(new java.sql.Timestamp(committerIdent.getWhen().getTime())); com.google.gerrit.server.account.AccountState accountState = new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.server.account.GetPreferences.defaults(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), com.google.gerrit.server.account.GetPreferences.defaults(), accountId, update); com.google.gerrit.server.account.ExternalIdsUpdate.update(accountState, update); com.google.gerrit.server.account.ExternalIdsUpdate.setAccountUpdate(update); com.google.gerrit.server.account.ExternalId updatedAccounts = createExternalIds(r, accountConfig.getExternalIds(), accountConfig, update); com.google.gerrit.server.account.ExternalId updatedAccounts = new com.google.gerrit.server.account.AccountsUpdate(allUsersName, externalIds, update); com.google.gerrit.server.account.AccountsUpdate.Update = new com.google.gerrit.server.account.AccountsUpdate(allUsersName, externalId, update, message, account
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of()); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of()); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.server.account.GetPreferences.defaults()); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); return default : }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults(), com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults(), com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults(), com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults(), com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults(), com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.base.Optional.of(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.common.base.SuppressWatches.of(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults(), com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.base.Optional.of(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.common.base.SuppressWatches.of(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults(), com.google.gerrit.extensions.client.EditPreferencesInfo.defaults); }
private void saveProjectWatches() throws java.io.IOException { if ((accountUpdate.isPresent()) && ((!(accountUpdate.get().getDeletedProjectWatches().isEmpty())) || (!(accountUpdate.get().getUpdatedProjectWatches().isEmpty()))) { java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches = new java.util.HashMap<>(); accountUpdate.get().getProjectWatches().forProjectWatches().forProjectWatches(pwwatches); accountUpdate.get().getUpdatedProjectWatches().forEach(( pw) -> projectWatches.put(pw, ntwatches.save(projectWatches)); } }
private void saveProjectWatches() throws java.io.IOException { if ((accountUpdate.isPresent()) && ((!(accountUpdate.get().getDeletedProjectWatches().isEmpty())) || (!(accountUpdate.get().getUpdatedProjectWatches().isEmpty()))) { java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches = new java.util.HashMap<>(); accountUpdate.get().getProjectWatches().forProjectWatches().forProjectWatches(pw) -> projectWatches.remove(pw)); accountUpdate.get().forEach(( pw) -> projectWatches.put(pw, ntw, projectWatches.save(projectWatches)); } }
private void saveProjectWatches() throws java.io.IOException { if ((accountUpdate.isPresent()) && ((!(accountUpdate.get().getDeletedProjectWatches().isEmpty())) || (!(accountUpdate.get().getUpdatedProjectWatches().isEmpty()))) { java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches = new java.util.HashMap<>(); accountUpdate.get().getProjectWatches().forProjectWatches().forProjectWatches(pw) -> projectWatches.remove(pw)); accountUpdate.get().forEach(( pw) -> projectWatches.put(pw, ntw, projectWatches.save(com.google.common.collect.ImmutableMap.of(projectWatches)); } }
private void saveProjectWatches() throws java.io.IOException { if ((accountUpdate.isPresent()) && ((!(accountUpdate.get().getDeletedProjectWatches().isEmpty())) || (!(accountUpdate.get().getUpdatedProjectWatches().isEmpty()))) { java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches = new java.util.HashMap<>(); accountUpdate.get().getProjectWatches().forProjectWatches().forProjectWatches(pw) -> projectWatches.remove(pw); accountUpdate.get().forEach(( pw) -> projectWatches.put(pw, ntw, projectWatches.save(com.google.common.collect.ImmutableMap.of(projectWatches)); } }
private void saveProjectWatches() throws java.io.IOException { if ((accountUpdate.isPresent()) && ((!(accountUpdate.get().getDeletedProjectWatches().isEmpty())) || (!(accountUpdate.get().getUpdatedProjectWatches().isEmpty()))) { java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches = new java.util.HashMap<>(); accountUpdate.get().getProjectWatches().forProjectWatches().forProjectWatches(pw) -> projectWatches.remove(pw)); accountUpdate.get().forEach(( pw) -> projectWatches.put(pw, ntw)); saveConfig(WatchConfig.WATCH_CONFIG, watchConfig.save(projectWatches)); } }
public com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { checkLoaded(); return watchConfig.getProjectWatches(); }
public java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { checkLoaded(); return watchConfig.getProjectWatches(); }
public java.util.Set<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { checkLoaded(); return watchConfig.getProjectWatches(); }
public com.google.common.collect.ImmutableSet<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { checkLoaded(); return watchConfig.getProjectWatches(); }
public com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.lang.String>> getProjectWatches() { checkLoaded(); return watchConfig.getProjectWatches(); }
@com.google.common.annotations.VisibleForTesting public static com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> parse(com.google.gerrit.reviewdb.client.Account.Id accountId, org.eclipse.jgit.lib.Config cfg, org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.git.ValidationError validationError) { java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches = new java.util.HashMap<>(); for (java.lang.String projectName : cfg.getSubsections(com.google.gerrit.server.account.WatchConfig.PROJECT)) { java.lang.String[] notifyValues = cfg.getStringList(com.google.gerrit.server.account.WatchConfig.PROJECT_NOTIFY); for (java.lang.String nv : notifyValues) { if (com.google.common.base.Strings.isNullOrEmpty(nv)) { continue; } com.google.gerrit.server.account.WatchConfig.NotifyValue notifyValue = com.google.gerrit.server.account.WatchConfig.NotifyValue.parse(accountId, projectName, nv, validationError.filter()); if (n!= null) { continue; } com.google.gerrit.server.account.WatchConfig.ProjectWatchKey key = com.google.gerrit.server.account.WatchConfig.ProjectWatchKey.parse(new com.google.gerrit.server.account.WatchConfig.NotifyType(projectName), notifyValue.filter()); if (!(projectWatches.containsKey(key))) { projectWatches.put(key, java.util.EnumSet.noneOf(com.google.gerrit.server.account.WatchConfig.NotifyType.NO_PATCH)); } projectWatches.put(key, java.util.EnumSet
@com.google.common.annotations.VisibleForTesting public static com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> parse(com.google.gerrit.reviewdb.client.Account.Id accountId, org.eclipse.jgit.lib.Config cfg, org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.git.ValidationError validationError) { java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches = new java.util.HashMap<>(); for (java.lang.String projectName : cfg.getSubsections(com.google.gerrit.server.account.WatchConfig.PROJECT)) { java.lang.String[] notifyValues = cfg.getStringList(com.google.gerrit.server.account.WatchConfig.PROJECT_NOTIFY); for (java.lang.String nv : notifyValues) { if (com.google.common.base.Strings.isNullOrEmpty(nv)) { continue; } com.google.gerrit.server.account.WatchConfig.NotifyValue notifyValue = com.google.gerrit.server.account.WatchConfig.NotifyValue.parse(accountId, projectName, nv, validationError.filter()); if (n!= null) { continue; } com.google.gerrit.server.account.WatchConfig.ProjectWatchKey key = com.google.gerrit.server.account.WatchConfig.ProjectWatchKey.parse(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName), notifyValue.filter()); if (!(projectWatches.containsKey(key))) { projectWatches.put(key, java.util.EnumSet.noneOf(com.google.gerrit.server.account.WatchConfig.NotifyType.class)); } projectWatches.put(key, java.util.Set<com.google.ger
@com.google.common.annotations.VisibleForTesting public static com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> parse(com.google.gerrit.reviewdb.client.Account.Id accountId, org.eclipse.jgit.lib.Config cfg, org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.git.ValidationError validationError) { java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches = new java.util.HashMap<>(); for (java.lang.String projectName : cfg.getSubsections(com.google.gerrit.server.account.WatchConfig.PROJECT)) { java.lang.String[] notifyValues = cfg.getStringList(com.google.gerrit.server.account.WatchConfig.PROJECT_NOTIFY); for (java.lang.String nv : notifyValues) { if (com.google.common.base.Strings.isNullOrEmpty(nv)) { continue; } com.google.gerrit.server.account.WatchConfig.NotifyValue notifyValue = com.google.gerrit.server.account.WatchConfig.NotifyValue.parse(accountId, projectName, nv, validationError.filter()); if (n!= null) { continue; } com.google.gerrit.server.account.WatchConfig.ProjectWatchKey key = com.google.gerrit.server.account.WatchConfig.ProjectWatchKey.parse(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName), notifyValue.filter()); if (!(projectWatches.containsKey(key))) { projectWatches.put(key, java.util.EnumSet.noneOf(com.google.gerrit.server.account.WatchConfig.NotifyType.class)); } projectWatches.put(key, java.util.EnumSet.noneOf(
@com.google.common.annotations.VisibleForTesting public static com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> parse(com.google.gerrit.reviewdb.client.Account.Id accountId, org.eclipse.jgit.lib.Config cfg, org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.git.ValidationError validationError) { java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches = new java.util.HashMap<>(); for (java.lang.String projectName : cfg.getSubsections(com.google.gerrit.server.account.WatchConfig.PROJECT)) { java.lang.String[] notifyValues = cfg.getStringList(com.google.gerrit.server.account.WatchConfig.PROJECT_NOTIFY); for (java.lang.String nv : notifyValues) { if (com.google.common.base.Strings.isNullOrEmpty(nv)) { continue; } com.google.gerrit.server.account.WatchConfig.NotifyValue notifyValue = com.google.gerrit.server.account.WatchConfig.NotifyValue.parse(accountId, projectName, nv, validationError.filter()); if (n!= null) { continue; } com.google.gerrit.server.account.WatchConfig.ProjectWatchKey key = com.google.gerrit.server.account.WatchConfig.ProjectWatchKey.parse(new com.google.gerrit.server.account.WatchConfig.NotifyType(projectName), notifyValue.filter()); if (!(projectWatches.containsKey(key))) { projectWatches.put(key, java.util.EnumSet.noneOf(com.google.gerrit.server.account.WatchConfig.NotifyType.ALLOW)); } projectWatches.put(key, java.util.EnumSet.En
@com.google.common.annotations.VisibleForTesting public static com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> parse(com.google.gerrit.reviewdb.client.Account.Id accountId, org.eclipse.jgit.lib.Config cfg, org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.git.ValidationError validationError) { java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches = new java.util.HashMap<>(); for (java.lang.String projectName : cfg.getSubsections(com.google.gerrit.server.account.WatchConfig.PROJECT)) { java.lang.String[] notifyValues = cfg.getStringList(com.google.gerrit.server.account.WatchConfig.PROJECT_NOTIFY); for (java.lang.String nv : notifyValues) { if (com.google.common.base.Strings.isNullOrEmpty(nv)) { continue; } com.google.gerrit.server.account.WatchConfig.NotifyValue notifyValue = com.google.gerrit.server.account.WatchConfig.NotifyValue.parse(accountId, projectName, nv, validationError.filter()); if (n!= null) { continue; } com.google.gerrit.server.account.WatchConfig.ProjectWatchKey key = com.google.gerrit.server.account.WatchConfig.ProjectWatchKey.parse(new com.google.gerrit.server.account.WatchConfig.NotifyType(projectName), notifyValue.filter()); if (!(projectWatches.containsKey(key))) { projectWatches.put(key, java.util.EnumSet.noneOf(com.google.gerrit.server.account.WatchConfig.NotifyType.NO_PATCH)); } projectWatches.put(key, java.util.Set<com
public org.eclipse.jgit.lib.Config save(com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches) { this.projectWatches = projectWatches; for (java.lang.String projectName : cfg.getSubsections(com.google.gerrit.server.account.WatchConfig.PROJECT)) { cfg.unsetSection(com.google.gerrit.server.account.WatchConfig.PROJECT, projectName); } com.google.common.collect.Multimap<java.lang.String, java.lang.String> notifyValuesByProject = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (java.util.Map.Entry<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> e : projectWatchesByProject.entrySet()) { com.google.gerrit.server.account.WatchConfig.NotifyValue notifyValue = com.google.gerrit.server.account.WatchConfig.NotifyValue.create(e.getKey().project().filter(), e.getValue()); notifyValuesByProject.put(e.getKey().project().get(), e.getValue()); } for (java.util.Map.Entry<java.lang.String, java.lang.String>> e : notifyValuesByProject.asMap().entrySet()) { cfg.setStringList(com.google.gerrit.server.account.WatchConfig.PROJECT_PROJECT, e.getValue()); } for (java.util.Map.Entry<java.lang.String, java.lang.String>> e : e.getValue().entrySet()) { cfg.setStringList(com.google.gerrit.server.account.WatchConfig.PROJECT, e.getValue()); cfg.setStringList(e.getValue()); } return cfg.getValue().setStringList(com.google.gerrit.server.account.WatchConfig.PROJECT, e
public org.eclipse.jgit.lib.Config save(com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches) { this.projectWatches = projectWatches; for (java.lang.String projectName : cfg.getSubsections(com.google.gerrit.server.account.WatchConfig.PROJECT)) { cfg.unsetSection(com.google.gerrit.server.account.WatchConfig.PROJECT, projectName); } com.google.common.collect.Multimap<java.lang.String, java.lang.String> notifyValuesByProject = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (java.util.Map.Entry<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> e : projectWatchesByProject.entrySet()) { com.google.gerrit.server.account.WatchConfig.NotifyValue notifyValue = com.google.gerrit.server.account.WatchConfig.NotifyValue.create(e.getKey().project().filter(), e.getValue()); notifyValuesByProject.put(e.getKey().project().get(), e.getValue()); } for (java.util.Map.Entry<java.lang.String, java.lang.String>> e : notifyValuesByProject.asMap().entrySet()) { cfg.setStringList(com.google.gerrit.server.account.WatchConfig.PROJECT_PROJECT, e.getValue()); } for (java.util.Map.Entry<java.lang.String, java.lang.String>> e : e.getValue().entrySet()) { cfg.setStringList(com.google.gerrit.server.account.WatchConfig.PROJECT, e.getValue()); cfg.setStringList(e.getValue()); } return cfg.getStringList(e.getValue(), e.getValue()); }
public org.eclipse.jgit.lib.Config save(com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches) { this.projectWatches = projectWatches; for (java.lang.String projectName : cfg.getSubsections(com.google.gerrit.server.account.WatchConfig.PROJECT)) { cfg.unsetSection(com.google.gerrit.server.account.WatchConfig.PROJECT, projectName); } com.google.common.collect.Multimap<java.lang.String, java.lang.String> notifyValuesByProject = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (java.util.Map.Entry<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> e : projectWatchesByProject.entrySet()) { com.google.gerrit.server.account.WatchConfig.NotifyValue notifyValue = com.google.gerrit.server.account.WatchConfig.NotifyValue.create(e.getKey().project().filter(), e.getValue()); notifyValuesByProject.put(e.getKey().project().get(), e.getValue()); } for (java.util.Map.Entry<java.lang.String, java.lang.String>> e : notifyValuesByProject.asMap().entrySet()) { cfg.setStringList(com.google.gerrit.server.account.WatchConfig.PROJECT_PROJECT, e.getValue()); } for (java.util.Map.Entry<java.lang.String, java.lang.String>> e : e.getValue().entrySet()) { cfg.setStringList(com.google.gerrit.server.account.WatchConfig.PROJECT, e.getValue()); cfg.setStringList(e.getValue()); } return cfg.getValue().setStringList(com.google.gerrit.server.account.WatchConfig.PROJECT, java
public org.eclipse.jgit.lib.Config save(com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches) { this.projectWatches = projectWatches; for (java.lang.String projectName : cfg.getSubsections(com.google.gerrit.server.account.WatchConfig.PROJECT)) { cfg.unsetSection(com.google.gerrit.server.account.WatchConfig.PROJECT, projectName); } com.google.common.collect.Multimap<java.lang.String, java.lang.String> notifyValuesByProject = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (java.util.Map.Entry<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> e : projectWatchesByProject.entrySet()) { com.google.gerrit.server.account.WatchConfig.NotifyValue notifyValue = com.google.gerrit.server.account.WatchConfig.NotifyValue.create(e.getKey().project().filter(), e.getValue()); notifyValuesByProject.put(e.getKey().project().get(), e.getValue()); } for (java.util.Map.Entry<java.lang.String, java.lang.String>> e : notifyValuesByProject.asMap().entrySet()) { cfg.setStringList(com.google.gerrit.server.account.WatchConfig.PROJECT_PROJECT, e.getValue()); } for (java.util.Map.Entry<java.lang.String, java.lang.String>> e : e.getValue().entrySet()) { cfg.setStringList(com.google.gerrit.server.account.WatchConfig.PROJECT, e.getValue()); cfg.setStringList(e.getValue(), e.getValue()); } return cfg.getValue().setStringList(com.google.gerrit.server.account.WatchConfig
public org.eclipse.jgit.lib.Config save(com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches) { this.projectWatches = projectWatches; for (java.lang.String projectName : cfg.getSubsections(com.google.gerrit.server.account.WatchConfig.PROJECT)) { cfg.unsetSection(com.google.gerrit.server.account.WatchConfig.PROJECT, projectName); } com.google.common.collect.Multimap<java.lang.String, java.lang.String> notifyValuesByProject = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (java.util.Map.Entry<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> e : projectWatchesByProject.entrySet()) { com.google.gerrit.server.account.WatchConfig.NotifyValue notifyValue = com.google.gerrit.server.account.WatchConfig.NotifyValue.create(e.getKey().project().filter(), e.getValue()); notifyValuesByProject.put(e.getKey().project().get(), e.getValue()); } for (java.util.Map.Entry<java.lang.String, java.lang.String>> e : notifyValuesByProject.asMap().entrySet()) { cfg.setStringList(com.google.gerrit.server.account.WatchConfig.PROJECT_PROJECT, e.getValue()); } for (java.util.Map.Entry<java.lang.String, java.lang.String>> e : e.getValue().entrySet()) { cfg.setStringList(com.google.gerrit.server.account.WatchConfig.PROJECT, e.getValue()); cfg.setStringList(e.getValue()); } return cfg.getValue().setStringList(e.getValue(), e.getValue()); }
public java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { if ((projectWatches) == null) { parse(); } return projectWatches; }
public com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { if ((projectWatches) == null) { parse(); } return projectWatches; }
public com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.lang.String>> getProjectWatches() { if ((projectWatches) == null) { parse(); } return projectWatches; }
public java.util.Set<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { if ((projectWatches) == null) { parse(); } return projectWatches; }
public com.google.common.collect.ImmutableSet<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { if ((projectWatches) == null) { parse(); } return projectWatches; }
public java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { return projectWatches; }
public com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { return projectWatches; }
public java.util.Set<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { return projectWatches; }
public com.google.common.collect.ImmutableSet<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { return projectWatches; }
public com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.lang.String>> getProjectWatches() { return projectWatches; }
public com.google.gerrit.server.account.AccountState insert(java.lang.String message, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate uuid) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return updateAccount(r, accountId); }
public com.google.gerrit.server.account.AccountState insert(java.lang.String message, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate update) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return updateAccount(r, accountId); }
public com.google.gerrit.server.account.AccountState insert(java.lang.String message, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate update) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return updateAccount(( r) -> { com.google.gerrit.server.account.AccountConfig accountConfig = read(r, accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(new java.sql.Timestamp(committerIdent.getWhen().getTime())); com.google.gerrit.server.account.AccountState accountState = accountConfig.getNewAccount(accountId, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())), com.google.common.collect.ImmutableSet.of(com.google.gerrit.server.account.GeneralPreferencesInfo.defaults(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), accountId, update); com.google.gerrit.server.account.ExternalIdsUpdate.update(accountState, update); com.google.gerrit.server.account.ExternalIdsUpdate.setAccountUpdate(update); com.google.gerrit.server.account.ExternalId updatedAccounts = createExternalIds(r, accountConfig.getExternalIds(), accountId, update); updateAccounts.setCreatedOn(true); return updatedAccounts; }
public com.google.gerrit.server.account.AccountState insert(java.lang.String message, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate update) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return updateAccount(( r) -> { com.google.gerrit.server.account.AccountConfig accountConfig = read(r, accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(new java.sql.Timestamp(committerIdent.getWhen().getTime())); com.google.gerrit.server.account.AccountState accountState = accountConfig.getNewAccount(accountId, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())), com.google.common.collect.ImmutableSet.of(com.google.gerrit.server.account.GeneralPreferencesInfo.defaults(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), accountId, update); com.google.gerrit.server.account.ExternalIdsUpdate.update(accountState, update); com.google.gerrit.server.account.ExternalIdsUpdate.setAccountUpdate(update); com.google.gerrit.server.account.ExternalId updatedAccount = createExternalIds(r, accountConfig.getExternalIds(), accountId, update); updateAccountsUpdate.setCreatedOn(true); return updatedAccounts; }
public com.google.gerrit.server.account.AccountState insert(java.lang.String message, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate update) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return updateAccount(( r) -> { com.google.gerrit.server.account.AccountConfig accountConfig = read(r, accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(new java.sql.Timestamp(committerIdent.getWhen().getTime())); com.google.gerrit.server.account.AccountState accountState = accountConfig.getNewAccount(accountId, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())), com.google.common.collect.ImmutableSet.of(com.google.gerrit.server.account.GeneralPreferencesInfo.defaults(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), accountId, update); com.google.gerrit.server.account.ExternalIdsUpdate.update(accountState, update); com.google.gerrit.server.account.ExternalIdsUpdate.setAccountUpdate(update); com.google.gerrit.server.account.ExternalId updatedAccounts = createExternalIds(r, accountConfig.getExternalIds(), accountId, update); updateAccountsUpdate.setCreatedOn(true); return updatedAccounts; }
public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.regex.Matcher m = java.util.regex.Pattern.compile("".matches())).matches(); if (m.matches()) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(m.group(1)); return java.util.Collections.emptySet(); } return java.util.Collections.emptySet(); }
public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.regex.Matcher m = java.util.regex.Pattern.compile("Matches", ").matches()) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(m.group(1)); if (accounts.get(id)) { return java.util.Collections.emptySet(); } return java.util.Collections.emptySet(); } if (nameOrEmail.matches("^[1-9][0-9]*$"))) { return java.util.Collections.emptySet(); } return java.util.Collections.emptySet(); }
public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.regex.Matcher m = java.util.regex.Pattern.compile("Matcher", ").matches()) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(m.group(1)); if (accounts.get(id)) { return java.util.Collections.emptySet(); } return java.util.Collections.emptySet(); } if (nameOrEmail.matches("^[1-9][0-9]*$"))) { return java.util.Collections.emptySet(); } return java.util.Collections.emptySet(); }
public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.regex.Matcher m = java.util.regex.Pattern.compile("".matches())).matches(); if (m.matches()) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(m.group(1)); if (accounts.get(id)) { return java.util.Collections.emptySet(); } return java.util.Collections.emptySet(); } if (nameOrEmail.matches("^[1-9][0-9]*$")) { return java.util.Collections.emptySet(); } return java.util.Collections.emptySet(); }
public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.regex.Matcher m = java.util.regex.Pattern.compile("".matches())).matches(); if (m.matches()) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(m.group(1)); if (accounts.get(id)) { return java.util.Collections.emptySet(); } return java.util.Collections.emptySet(); } if (nameOrEmail.matches("^[1-9][0-9]*$"))) { return java.util.Collections.emptySet(); } return java.util.Collections.emptySet(); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT_DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT_DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults)); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT_DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT_DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())), com.google.common.collect.ImmutableSet.of(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); }
private void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int val) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.project.RemoveReviewerByEmail.canRemoveReviewer(permissionBackend, notes.getChange(), currentUser, val)) { return; } permissionBackend.user(notes).database(dbProvider).database(dbProvider).change(ChangePermission.REMOVE_REVIEWER); }
private void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int val) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.project.RemoveReviewer.canRemoveReviewer(permissionBackend, notes.getChange(), currentUser, val)) { return; } permissionBackend.user(notes).database(dbProvider).database(dbProvider).change(ChangePermission.REMOVE_REVIEWER); }
private void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int val) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.project.RemoveReviewer.canRemoveReviewer(permissionBackend, notes.getChange(), currentUser, val)) { return; } permissionBackend.user(notes).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(ChangePermission.REVIEWER); }
private void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int val) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.project.RemoveReviewerPermission.canRemoveReviewer(permissionBackend, notes.getChange(), currentUser, val)) { return; } permissionBackend.user(notes).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(ChangePermission.REVIEWER); }
private void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int val) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.project.RemoveReviewerPermission.canRemoveReviewer(permissionBackend, notes.getChange(), currentUser, val)) { return; } permissionBackend.user(notes).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(ChangePermission.REVISIVE_REVIEWER); }
private static boolean canRemoveReviewerByPermission(com.google.gerrit.server.permissions.PermissionBackend permissionBackend, com.google.gerrit.server.permissions.Change change, com.google.gerrit.reviewdb.client.Account currentUser, int value) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { if (!(change.getStatus().isOpen())) { return false; } if (currentUser.isIdentifiedUser()) { com.google.gerrit.reviewdb.client.Account.Id aId = currentUser.getAccountId(); if (aId.equals(reviewer)) { return true; } else if ((aId.equals(change.getOwner())) && (0 <= value)) { return true; } com.google.gerrit.server.permissions.PermissionBackend.WithUser fromUser = permissionBackend.user(currentUser); com.google.gerrit.server.permissions.PermissionBackend.ForProject = permissionBackend.user(change.getProject()); if (com.google.gerrit.server.project.RemoveReviewerControl.check(forProject(change.getDest().get()), RefPermission.WRITE)) { return true; } return false; }
private static boolean canRemoveReviewerByPermission(com.google.gerrit.server.permissions.PermissionBackend permissionBackend, com.google.gerrit.server.permissions.Change change, com.google.gerrit.reviewdb.client.Account currentUser, int value) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { if (!(change.getStatus().isOpen())) { return false; } if (currentUser.isIdentifiedUser()) { com.google.gerrit.reviewdb.client.Account.Id aId = currentUser.getAccountId(); if (aId.equals(reviewer)) { return true; } else if ((aId.equals(change.getOwner())) && (0 < value)) { return true; } com.google.gerrit.server.permissions.PermissionBackend.WithUser fromUser = permissionBackend.user(currentUser); com.google.gerrit.server.permissions.PermissionBackend.ForProject = permissionBackend.user(change.getProject()); if (com.google.gerrit.server.project.RemoveReviewerControl.check(forProject(change.getDest().get()), RefPermission.WRITE)) { return true; } return false; }
private static boolean canRemoveReviewerByPermission(com.google.gerrit.server.permissions.PermissionBackend permissionBackend, com.google.gerrit.server.permissions.Change change, com.google.gerrit.reviewdb.client.Account currentUser, int value) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { if (!(change.getStatus().isOpen())) { return false; } if (currentUser.isIdentifiedUser()) { com.google.gerrit.reviewdb.client.Account.Id aId = currentUser.getAccountId(); if (aId.equals(reviewer)) { return true; } else if ((aId.equals(change.getOwner())) && (0 <= value)) { return true; } com.google.gerrit.server.permissions.PermissionBackend.WithUser fromUser = permissionBackend.user(currentUser); com.google.gerrit.server.permissions.PermissionBackend.ForProject = permissionBackend.user(change.getProject()); if (com.google.gerrit.server.project.RemoveReviewerControl.check(forProject(change.getDest().get()), RefControl.controlFor(change.getDest().get()), RefControl.WRITE)) { return true; } return false; }
private static boolean canRemoveReviewerByPermission(com.google.gerrit.server.permissions.PermissionBackend permissionBackend, com.google.gerrit.server.permissions.Change change, com.google.gerrit.reviewdb.client.Account currentUser, int value) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { if (!(change.getStatus().isOpen())) { return false; } if (currentUser.isIdentifiedUser()) { com.google.gerrit.reviewdb.client.Account.Id aId = currentUser.getAccountId(); if (aId.equals(reviewer)) { return true; } else if ((aId.equals(change.getOwner())) && (0 <= value)) { return true; } com.google.gerrit.server.permissions.PermissionBackend.WithUser fromUser = permissionBackend.user(currentUser); com.google.gerrit.server.permissions.PermissionBackend.ForProject = permissionBackend.user(change.getProject()); if (com.google.gerrit.server.project.RemoveReviewerControl.check(forProject(change.getDest().get()), RefControl.controlFor(change.getProject().get()), RefControl.WRITE)) { return true; } return false; }
private static boolean canRemoveReviewerByPermission(com.google.gerrit.server.permissions.PermissionBackend permissionBackend, com.google.gerrit.server.permissions.Change change, com.google.gerrit.reviewdb.client.Account currentUser, int value) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { if (!(change.getStatus().isOpen())) { return false; } if (currentUser.isIdentifiedUser()) { com.google.gerrit.reviewdb.client.Account.Id aId = currentUser.getAccountId(); if (aId.equals(reviewer)) { return true; } else if ((aId.equals(change.getOwner())) && (0 < value)) { return true; } com.google.gerrit.server.permissions.PermissionBackend.WithUser fromUser = permissionBackend.user(currentUser); com.google.gerrit.server.permissions.PermissionBackend.ForProject = permissionBackend.user(change.getProject()); if (com.google.gerrit.server.project.RemoveReviewerControl.check(forProject(change.getDest().get()), RefControl.controlFor(change.getProject().get()), RefControl.WRITE)) { return true; } return false; }
public boolean testRemoveReviewer(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int value) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gwtorm.server.OrmException, java.io.IOException { if (com.google.gerrit.server.project.RemoveReviewerByEmail.canRemoveReviewer(permissionBackend, currentUser, reviewer, value)) { return true; } return permissionBackend.user(currentUser).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).change(ChangePermission.REVIEWER); }
public boolean testRemoveReviewer(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.Account.Id reviewer, int value) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gwtorm.server.OrmException, java.io.IOException { if ((com.google.gerrit.server.project.RemoveReviewer) || (permissionBackend.canRemoveReviewer(permissionBackend, currentUser, reviewer, value)) { return true; } return permissionBackend.user(currentUser).database(dbProvider).change(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(ChangePermission.REVIEWER); }
public boolean testRemoveReviewer(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int value) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gwtorm.server.OrmException, java.io.IOException { if (com.google.gerrit.server.project.RemoveReviewerByEmail.canRemoveReviewer(permissionBackend, currentUser, reviewer, value)) { return true; } return permissionBackend.user(currentUser).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).change(ChangePermission.REVIEWER); }
public boolean testRemoveReviewer(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.Account.Id reviewer, int value) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gwtorm.server.OrmException, java.io.IOException { if ((com.google.gerrit.server.project.RemoveReviewer) || (permissionBackend.canRemoveReviewer(permissionBackend, currentUser, reviewer, value)) { return true; } return permissionBackend.user(currentUser).database(dbProvider).change(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(ChangePermission.REMOVE_REVIEWER); }
public boolean testRemoveReviewer(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int value) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gwtorm.server.OrmException, java.io.IOException { if (com.google.gerrit.server.project.RemoveReviewerByEmail.canRemoveReviewer(permissionBackend, currentUser, reviewer, value)) { return true; } return permissionBackend.user(currentUser).database(dbProvider).database(dbProvider).change(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(dbProvider).database(ChangePermission.REVIEWER); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.project.ProjectResource> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { parent.getProject().checkState(); if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.project.ProjectResource> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { parent.getProject().checkState(id); if (parent == null) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.project.ProjectResource> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { parent.getProject().checkState(id); if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.project.ProjectResource> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { parent.getProject().checkState(); if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.project.ProjectResource> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { parent.getProject().checkState(); if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
public void testSuggestedNonMatching() throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> retry = injector.getInstance(com.googlesource.gerrit.plugins.its.base.ItsValidator.class); org.eclipse.jgit.transport.ReceiveCommand commit = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); org.eclipse.jgit.revwalk.RevCommit commit = newCommit(org.eclipse.jgit.revwalk.RevCommit.parseCommit(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(commit, project, null, commit, null, null); expect(commit.getFullMessage()).andReturn(); expect(commit.getFullMessage()).andReturn("Test Message").andReturn(java.util.regex.Pattern.compile("x/")).andReturn(commit).andReturn("Test Message").anyTimes(); expect(commitExtractor.getIssueIds("Test Message")).andReturn(new java.lang.String[]{}", commit).andReturn(new java.lang.String[]{ "Example")).andReturn(new java.lang.String[]{}", commitMessage)); }
public void testSuggestedNonMatching() throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> retry = injector.getInstance(com.googlesource.gerrit.plugins.its.base.ItsValidator.class); org.eclipse.jgit.transport.ReceiveCommand commit = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); org.eclipse.jgit.revwalk.RevCommit commit = newCommit(org.eclipse.jgit.revwalk.RevCommit.parseCommit(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(commit, project, null, commit, null, null); expect(commit.getFullMessage()).andReturn(); expect(commit.getFullMessage()).andReturn("Test Message").andReturn(java.util.regex.Pattern.compile("x/")).andReturn(commit).andReturn("Test Message").anyTimes(); expect(commitExtractor.getIssueIds("Test Message")).andReturn(new java.lang.String[]{}", commit).andReturn(new java.lang.String[]{ "Example")).andReturn(new java.lang.String[]{}", commitMessage))); replayMocks(); replayMocks(); }
public void testSuggestedNonMatching() throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> retry = injector.getInstance(com.googlesource.gerrit.plugins.its.base.ItsValidator.class); org.eclipse.jgit.transport.ReceiveCommand commit = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); org.eclipse.jgit.revwalk.RevCommit commit = newCommit(org.eclipse.jgit.revwalk.RevCommit.parseCommit(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(commit, project, null, commit, null, null); expect(commit.getFullMessage()).andReturn(); expect(commit.getFullMessage()).andReturn("Test Message").andReturn(java.util.regex.Pattern.compile("x/")).andReturn(commit).andReturn("Test Message").anyTimes(); expect(commitExtractor.getIssueIds("Test Message")).andReturn(new java.lang.String[]{}", commit).andReturn(new java.lang.String[]{ "Example")).andReturn(new java.lang.String[]{}", commitMessage))).andReturn(expectedCommitMessage); replayMocks(); }
public void testSuggestedNonMatching() throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> retry = injector.getInstance(com.googlesource.gerrit.plugins.its.base.ItsValidator.class); org.eclipse.jgit.transport.ReceiveCommand commit = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); org.eclipse.jgit.revwalk.RevCommit commit = newCommit(org.eclipse.jgit.revwalk.RevCommit.parseCommit(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(commit, project, null, commit, null, null); expect(commit.getFullMessage()).andReturn(); expect(commit.getFullMessage()).andReturn("Test Message").andReturn(java.util.regex.Pattern.compile("x/")).andReturn(commit).andReturn("Test Message").anyTimes(); expect(commitExtractor.getIssueIds("Test Message")).andReturn(new java.lang.String[]{}", commit).andReturn(new java.lang.String[]{ "Example")).andReturn(new java.lang.String[]{}", commitMessage))).andReturn(expectedCommitMessage); replayMocks(); replayMocks(); }
public void testSuggestedNonMatching() throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> retry = injector.getInstance(com.googlesource.gerrit.plugins.its.base.ItsValidator.class); org.eclipse.jgit.transport.ReceiveCommand commit = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); org.eclipse.jgit.revwalk.RevCommit commit = newCommit(org.eclipse.jgit.revwalk.RevCommit.parseCommit(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(commit, project, null, commit, null, null); expect(commit.getFullMessage()).andReturn(); expect(commit.getFullMessage()).andReturn("Test Message").andReturn(java.util.regex.Pattern.compile("x/")).andReturn(commit).andReturn("Test Message").anyTimes(); expect(commitExtractor.getIssueIds("Test Message")).andReturn(new java.lang.String[]{}", commit).andReturn(new java.lang.String[]{ "Example")).andReturn(new java.lang.String[]{}", commitMessage))).andReturn(expectedCommitMessage); replayMocks(); replayMocks(); replayMocks(); assertEquals(event); assertEquals(com.google.gerrit.server.git.validators.CommitReceiveCommitsReceived(event); assertEquals(event.getCommitsIds("No such " + ""), ret.getMessage().contains("message")); }
public java.lang.String getCommentLinkName() { java.lang.String ret; ret = getPluginConfigString("commentlink"); if (ret == null) { ret = pluginName; } return ret; }
public java.lang.String getCommentLinkName() { java.lang.String ret; ret = getPluginConfigString("commentlink", null); if (ret == null) { ret = pluginName; } return ret; }
public java.lang.String getCommentLinkName() { java.lang.String ret; ret = getPluginConfigString("commentlink"); if ( ret == null) { ret = pluginName; } return ret; }
public java.lang.String getCommentLinkName() { java.lang.String ret; ret = getPluginConfigString("commentlink", null); if ( ret == null) { ret = pluginName; } return ret; }
public java.lang.String getCommentLinkName() { java.lang.String ret; ret = getPluginConfig("commentlink"); if (ret == null) { ret = pluginName; } return ret; }
public java.lang.String getDummyIssuePattern() { return java.util.regex.Pattern.compile(getPluginConfigString("dummyIssuePattern", "x\\$"))); }
public java.lang.String getDummyIssuePattern() { return java.util.regex.Pattern.compile(getPluginConfigString("dummyIssuePattern", "xception$"))); }
public java.lang.String getDummyIssuePattern() { return java.util.regex.Pattern.compile(getPluginConfigString("dummyIssuePattern", "x", "x\\$"))); }
public java.lang.String getDummyIssuePattern() { return java.util.regex.Pattern.compile(getPluginConfigString("dummyIssuePattern", "x", "x$^^^"))); }
public java.lang.String getDummyIssuePattern() { return java.util.regex.Pattern.compile(getPluginConfigString("dummyIssuePattern", "x", "x$^^^^"))); }
public void testMandatory() { com.googlesource.gerrit.plugins.its.base.ItsValidator env = injector.getInstance(com.googlesource.gerrit.plugins.its.base.ItsValidator.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, commit, null); expect(itsConfig.getShortMessage()).andReturn("TestMessage").andReturn(java.util.regex.Pattern.compareAndIssuePattern()).andReturn("Test"; expect(commit.getId()).andReturn("Test Message").andReturn(commit).andReturn("Test Message").anyTimes(); expect(commitExtractor.getIssueIds("Test Message")).andReturn(new java.lang.String[]{}", commitExtractor.getIssueIds("Test Message")).andReturn(new java.lang.String[]{}", commitExtractor.getIssueIds("Test Message")).anyTimes(); }
public void testMandatory() { com.googlesource.gerrit.plugins.its.base.ItsValidator env = injector.getInstance(com.googlesource.gerrit.plugins.its.base.ItsValidator.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, commit, null); expect(itsConfig.getShortMessage()).andReturn("TestMessage").andReturn(java.util.regex.Pattern.compareAndIssuePattern()).andReturn("Test"; expect(commit.getId()).andReturn("Test Message").andReturn(commit).andReturn("Test Message").anyTimes(); expect(commitExtractor.getIssueIds("Test Message")).andReturn(new java.lang.String[]{}", commitExtractor.getIssueIds("Test Message")).andReturn(new java.lang.String[]{}", commitExtractor.getIssueIds("Test Message")).andThrow(); }
public void testMandatory() { com.googlesource.gerrit.plugins.its.base.ItsValidator env = injector.getInstance(com.googlesource.gerrit.plugins.its.base.ItsValidator.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, commit, null); expect(itsConfig.getShortMessage()).andReturn("TestMessage").andReturn(java.util.regex.Pattern.compareAndIssuePattern()).andReturn("Test"; expect(commit.getId()).andReturn("Test Message").andReturn(commit).andReturn("Test Message").anyTimes(); expect(commitExtractor.getIssueIds("Test Message")).andReturn(new java.lang.String[]{}", commitExtractor.getIssueIds("Test Message")).andReturn(new java.lang.String[]{}", commitExtractor.getIssueIds("Test Message")).andReturn(new java.lang.String[]{ "No footer")); }
public void testMandatory() { com.googlesource.gerrit.plugins.its.base.ItsValidator env = injector.getInstance(com.googlesource.gerrit.plugins.its.base.ItsValidator.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, commit, null); expect(itsConfig.getShortMessage()).andReturn("TestMessage").andReturn(java.util.regex.Pattern.compareAndIssuePattern()).andReturn("Test"; expect(commit.getId()).andReturn("Test Message").andReturn(commit).andReturn("Test Message").anyTimes(); expect(commitExtractor.getIssueIds("Test Message")).andReturn(new java.lang.String[]{}", commitExtractor.getIssueIds("Test Message")).andReturn(new java.lang.String[]{}", commitExtractor.getIssueIds("Test Message")).andReturn(new java.lang.String[]{ "No footer")).andThrow(); }
public void testMandatory() { com.googlesource.gerrit.plugins.its.base.ItsValidator env = injector.getInstance(com.googlesource.gerrit.plugins.its.base.ItsValidator.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, commit, null); expect(itsConfig.getShortMessage()).andReturn("TestMessage").andReturn(java.util.regex.Pattern.compareAndIssuePattern()).andReturn("Test"; expect(commit.getId()).andReturn("Test Message").andReturn(commit).andReturn("Test Message").anyTimes(); expect(commitExtractor.getIssueIds("Test Message")).andReturn(new java.lang.String[]{}", commitExtractor.getIssueIds("Test Message")).andReturn(new java.lang.String[]{}", commitExtractor.getIssueIds("Test Message")).andReturn(new java.lang.String[]{ " + issueExtId")); }
private java.lang.String getPluginConfigString(java.lang.String key, java.lang.String defaultValue) { java.lang.String val = getCurrentPluginConfig().getString(com.googlesource.gerrit.plugins.its.base.its.its.ItsConfig.PLUGIN, pluginName, key); return val == null? defaultValue : val; }
private java.lang.String getPluginConfigString(java.lang.String key, java.lang.String defaultValue) { java.lang.String val = getCurrentPluginConfig().getString(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.PLUGIN, pluginName, key); return val == null? defaultValue : val; }
private java.lang.String getPluginConfigString(java.lang.String key, java.lang.String defaultValue) { java.lang.String val = getCurrentPluginConfig().getString(com.googlesource.gerrit.plugins.its.base.its.its.ItsConfig.PLUGIN, pluginName, key); return val == null? defaultValue : defaultValue; }
private java.lang.String getPluginConfigString(java.lang.String key, java.lang.String defaultValue) { java.lang.String val = getCurrentPluginConfig().getString(com.googlesource.gerrit.plugins.its.base.its.its.ItsConfig.PLUGIN, pluginName, key); return val == null? defaultValue : return val; }
private java.lang.String getPluginConfigString(java.lang.String key, java.lang.String defaultValue) { java.lang.String val = getCurrentPluginConfig().getString(com.googlesource.gerrit.plugins.its.base.its.its.its.ItsConfig.PLUGIN, pluginName, key); return val == null? defaultValue : val; }
public void testSkipSkipSkipMatching() throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> retc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.ItsValidator.class); org.eclipse.jgit.transport.ReceiveCommand cherry = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); org.eclipse.jgit.revwalk.RevCommit commit = newCommit(org.eclipse.jgit.revwalk.RevCommit.parseCommit(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null, null); expect(commit.getFullMessage()).andReturn(java.util.regex.Pattern.compile("SKIPPED")).andReturn(commit).andReturn(java.util.regex.Pattern.compile("SKIPPED")).andReturn(commit).andReturn(commit).andReturn("Test"; expect(commit.getName()).andReturn(new java.lang.String[]{}", commit).andReturn(commit).andReturn(new java.lang.String[]{}", commit).andReturn(event); }
public void testSkipSkipSkipMatching() throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> retc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.ItsValidator.class); org.eclipse.jgit.transport.ReceiveCommand cherry = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); org.eclipse.jgit.revwalk.RevCommit commit = newCommit(org.eclipse.jgit.revwalk.RevCommit.parseCommit(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null, null); expect(commit.getFullMessage()).andReturn(java.util.regex.Pattern.compile("SKIPPED")).andReturn(commit).andReturn(java.util.regex.Pattern.compile("SKIPPED")).andReturn(commit).andReturn(commit).andReturn("Test"; expect(commit.getName()).andReturn(new java.lang.String[]{}", commit).andReturn(new java.lang.String[]{}", commit).andReturn(commit).andReturn(new java.lang.String[]{}).andReturn(event); }
public void testSkipSkipSkipMatching() throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> retc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.ItsValidator.class); org.eclipse.jgit.transport.ReceiveCommand cherry = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); org.eclipse.jgit.revwalk.RevCommit commit = newCommit(org.eclipse.jgit.revwalk.RevCommit.parseCommit(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null, null); expect(commit.getFullMessage()).andReturn(java.util.regex.Pattern.compile("SKIPPED")).andReturn(commit).andReturn(java.util.regex.Pattern.compile("SKIPPED")).andReturn(commit).andReturn(commit).andReturn("Test"; expect(commit.getName()).andReturn(new java.lang.String[]{}", commit).andReturn(new java.lang.String[]{}", commit).andReturn(commit).andReturn(new java.lang.String[]{}", "Test").anyTimes(); }
public void testSkipSkipSkipMatching() throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> retc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.ItsValidator.class); org.eclipse.jgit.transport.ReceiveCommand cherry = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); org.eclipse.jgit.revwalk.RevCommit commit = newCommit(org.eclipse.jgit.revwalk.RevCommit.parseCommit(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null, null); expect(commit.getFullMessage()).andReturn(java.util.regex.Pattern.compile("SKIPPED")).andReturn(commit).andReturn(java.util.regex.Pattern.compile("SKIPPED")).andReturn(commit).andReturn(commit).andReturn("Test"; expect(commit.getName()).andReturn(new java.lang.String[]{}", commit).andReturn(new java.lang.String[]{}", commit).andReturn(commit).andReturn(new java.lang.String[]{}#")).andReturn(new java.lang.String[]{}).andReturn(event); }
public void testSkipSkipSkipMatching() throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> retc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.ItsValidator.class); org.eclipse.jgit.transport.ReceiveCommand cherry = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); org.eclipse.jgit.revwalk.RevCommit commit = newCommit(org.eclipse.jgit.revwalk.RevCommit.parseCommit(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null, null); expect(commit.getFullMessage()).andReturn(java.util.regex.Pattern.compile("SKIPPED")).andReturn(commit).andReturn(java.util.regex.Pattern.compile("SKIPPED")).andReturn(commit).andReturn(commit).andReturn("Test"; expect(commit.getName()).andReturn(new java.lang.String[]{}", commit).andReturn(new java.lang.String[]{}", commit).andReturn(commit).andReturn(new java.lang.String[]{}#")).andReturn(new java.lang.String[]{}", commit).andReturn(event); }
@java.lang.Override public synchronized com.google.common.base.Optional<com.google.gerrit.server.account.AccountState> getByUsername(java.lang.String username) { return com.google.common.base.Optional.ofNullable(byUsername.get(username)); }
@java.lang.Override public synchronized com.google.common.base.Optional<com.google.gerrit.server.account.AccountState> getByUsername(java.lang.String username) { return com.google.common.base.Optional.ofNullable(byUsername.get(username), username); }
@java.lang.Override public synchronized com.google.common.base.Optional<com.google.gerrit.server.account.AccountState> getByUsername(java.lang.String username) { return com.google.common.base.Optional.ofNullable(com.google.gerrit.server.account.AccountState.get(username), username); }
@java.lang.Override public synchronized com.google.common.base.Optional<com.google.gerrit.server.account.AccountState> getByUsername(java.lang.String username) { return com.google.common.base.Optional.ofNullable(com.google.gerrit.server.account.AccountState.getByUsername(username), username); }
@java.lang.Override public synchronized com.google.common.base.Optional<com.google.gerrit.server.account.AccountState> getByUsername(java.lang.String username) { com.google.common.base.Optional<com.google.gerrit.server.account.AccountState> byUsername = byUsername.get(username); return com.google.common.base.Optional.ofNullable(com.google.gerrit.server.account.AccountState.get(username), username); }
private java.util.Optional<java.lang.String> readProjectConfig(java.lang.String projectName) throws java.lang.Exception { return readProjectConfig(projectName); }
private java.util.Optional<java.lang.String> readProjectConfig(java.lang.String projectName) throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName))) { org.eclipse.jgit.junit.TestRepository<?> tr = new org.eclipse.jgit.revwalk.RevWalk(repo); org.eclipse.jgit.lib.Ref ref = tr.getRevWalk(); org.eclipse.jgit.lib.Ref ref = repo.exactRef(RefNames.REFS_CONFIG); if (ref == null) { return java.util.Optional.emptyMap(); } org.eclipse.jgit.lib.ObjectLoader obj = rw.getObjectReader().open(trimTree(rw.parseTree(ref.getObjectId()), com.google.gerrit.acceptance.rest.project.PROJECT_CONFIG), com.google.gerrit.acceptance.rest.project.OBJ_BLOB); return java.util.Optional.of(new java.lang.String(obj.getCachedBytes(java.lang.Integer.MAX_VALUE), java.nio.charset.StandardCharsets.UTF_8)); } }
private java.util.Optional<java.lang.String> readProjectConfig(java.lang.String projectName) throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(projectName)) { org.eclipse.jgit.junit.TestRepository<?> tr = new org.eclipse.jgit.revwalk.RevWalk(repo); org.eclipse.jgit.lib.Ref ref = tr.getRevWalk(); org.eclipse.jgit.lib.Ref ref = tr.exactRef(RefNames.REFS_CONFIG); if (ref == null) { return java.util.Optional.emptyMap(); } org.eclipse.jgit.lib.Ref ref = rw.getObjectReader().open(trimTree(tr.parseTree(ref.getObjectId()), com.google.gerrit.acceptance.rest.project.PROJECT_CONFIG), com.google.gerrit.acceptance.rest.project.OBJ_BLOB); return java.util.Optional.of(new java.lang.String(obj.getCachedBytes(java.lang.Integer.MAX_VALUE), java.nio.charset.StandardCharsets.UTF_8)); } }
private java.util.Optional<java.lang.String> readProjectConfig(java.lang.String projectName) throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(projectName)) { org.eclipse.jgit.junit.TestRepository<?> tr = new org.eclipse.jgit.revwalk.RevWalk(repo); org.eclipse.jgit.lib.Ref ref = tr.getRevWalk(); org.eclipse.jgit.lib.Ref ref = tr.exactRef(RefNames.REFS_CONFIG); if (ref == null) { return java.util.Optional.emptyMap(); } org.eclipse.jgit.lib.Ref ref = rw.getObjectReader().open(trimTree(tr.parseTree(ref.getObjectId()), com.google.gerrit.acceptance.rest.project.PROJECT_CONFIG), com.google.gerrit.acceptance.rest.project.OBJ_BLOB); return java.util.Optional.of(new java.lang.String(obj.getCachedBytes(java.lang.Integer.MAX_VALUE), java.nio.charset.StandardCharsets.UTF_8)); } } }
private java.util.Optional<java.lang.String> readProjectConfig(java.lang.String projectName) throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(projectName)) { org.eclipse.jgit.junit.TestRepository<?> tr = new org.eclipse.jgit.revwalk.RevWalk(repo); org.eclipse.jgit.lib.Ref ref = tr.getRevWalk(); org.eclipse.jgit.lib.Ref ref = tr.exactRef(RefNames.REFS_CONFIG); if (ref == null) { return java.util.Optional.emptyMap(); } org.eclipse.jgit.lib.Ref ref = rw.getObjectReader().open(trimTree(tr.parseTree(ref.getObjectId()), com.google.gerrit.acceptance.rest.project.PROJECT_CONFIG), com.google.gerrit.acceptance.rest.project.PROJECT_CONFIG); return java.util.Optional.of(new java.lang.String(obj.getCachedBytes(java.lang.Integer.MAX_VALUE), java.nio.charset.StandardCharsets.UTF_8)); } }
public T executeIndexQuery(com.google.gerrit.server.update.RetryRunnable<T> action) throws com.google.gwtorm.server.OrmException { try { return retryHelper.execute(ActionType.INDEX_QUERY_QUERY, action, null); } catch (java.lang.Throwable e) { com.google.common.base.Throwables.throwIfUnsupportedOperationException(e); throw new com.google.gwtorm.server.OrmException(e); } }
public T executeIndexQuery(com.google.gerrit.server.update.RetryRunnable<T> action) throws com.google.gwtorm.server.OrmException { try { return retryHelper.execute(ActionType.INDEX_QUERY_QUERY, action, null); } catch (java.lang.Throwable e) { com.google.common.base.Throwables.throwIfUnsupportedOperationException(e); } catch (java.lang.Throwables.propagateIfUncheckedException e) { com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmException.class); throw new com.google.gwtorm.server.OrmException(e); } }
public T executeIndexQuery(com.google.gerrit.server.update.RetryRunnable<T> action) throws com.google.gwtorm.server.OrmException { try { return retryHelper.execute(Action.INDEX_QUERY_QUERY, action, null); } catch (java.lang.Throwable e) { com.google.common.base.Throwables.throwIfUnsupportedOperationException(e); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnsupportedOperationException(e); throw new com.google.gwtorm.server.OrmException(e); } }
public T executeIndexQuery(com.google.gerrit.server.update.RetryRunnable<T> action) throws com.google.gwtorm.server.OrmException { try { return retryHelper.execute(ActionType.INDEX_QUERY_QUERY, action, null); } catch (java.lang.Throwable e) { com.google.common.base.Throwables.throwIfUnsupportedOperationException(e); } catch (java.lang.Throwables.propagateIfUnchecked") com.google.gwtorm.server.OrmException e) { com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmException.class); throw new com.google.gwtorm.server.OrmException(e); } }
public T executeIndexQuery(com.google.gerrit.server.update.RetryRunnable<T> action) throws com.google.gwtorm.server.OrmException { try { return retryHelper.execute(ActionType.INDEX_QUERY_QUERY, action, null); } catch (java.lang.Throwable e) { com.google.common.base.Throwables.throwIfUnsupportedOperationException(e); } catch (java.lang.Throwables.propagateIfUnchecked") com.google.gwtorm.server.OrmException e) { com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gwtorm.server.OrmException.class); throw new com.google.gwtorm.server.OrmException(e); } }
private <T> java.lang.Iterable<T> executeWithAttachmentCount(com.google.gerrit.server.update.RetryType.Action<T> actionType, com.google.gerrit.server.update.RetainCountAction<T> actionType, com.google.gerrit.server.update.RetryerImpl.Options opts, com.google.gerrit.server.update.RetryerListener.Options opts, java.lang.Throwable caught) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.update.RetryerImpl.RetryerListener listener = new com.google.gerrit.server.update.RetryerBuilder(opts, exception); return executeWithTimeout(actionType, actionType); }
private <T> java.lang.Iterable<T> executeWithAttachmentCount(com.google.gerrit.server.update.RetryType.Action<T> actionType, com.google.gerrit.server.update.RetainCountAction<T> actionType, com.google.gerrit.server.update.RetryerImpl.Options opts, com.google.gerrit.server.update.RetryerListener.Options opts, java.lang.Throwable caught) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.update.RetryerImpl.RetryerListener listener = new com.google.gerrit.server.update.RetryerBuilder(opts, exception); return executeWithTimeout(actionType, actionBuilder.build()); }
private <T> java.lang.Iterable<T> executeWithAttachmentCount(com.google.gerrit.server.update.RetryType.Action<T> actionType, com.google.gerrit.server.update.RetainCountAction<T> actionType, com.google.gerrit.server.update.RetryerImpl.Options opts, com.google.gerrit.server.update.RetryerListener.Options opts, java.lang.ThrowableException ex) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.update.RetryerImpl.RetryerListener listener = new com.google.gerrit.server.update.RetryerImpl(opts, exception); return executeWithTimeout(actionType, actionBuilder.build()); }
private <T> java.lang.Iterable<T> executeWithAttachmentCount(com.google.gerrit.server.update.RetryType.Action<T> actionType, com.google.gerrit.server.update.RetainCountAction<T> actionType, com.google.gerrit.server.update.RetryerImpl.Options opts, com.google.gerrit.server.update.RetryerListener.Options opts, java.lang.Throwable caught) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.update.RetryerImpl.RetryerListener listener = new com.google.gerrit.server.update.RetryerBuilder(opts, exception); return executeWithTimeout(actionType, actionBuilder.build(), actionType); }
private <T> java.lang.Iterable<T> executeWithAttachmentCount(com.google.gerrit.server.update.RetryType.Action<T> actionType, com.google.gerrit.server.update.RetainCountAction<T> actionType, com.google.gerrit.server.update.RetryerImpl.Options opts, com.google.gerrit.server.update.RetryerListener.Options opts, java.lang.ThrowableException ex) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.update.RetryerImpl.RetryerListener listener = new com.google.gerrit.server.update.RetryerBuilder(); try { retryerBuilder.setRetryer(opts, exception); return executeWithTimeout(actionType, actionType); } catch (java.lang.Exception e) { throw new java.lang.IllegalArgumentException(actionType, e); } }
public T execute(com.google.gerrit.server.update.RetryType.Action<T> action, com.google.gerrit.server.update.Retry<T> action, com.google.gerrit.server.update.Retry<T> action, com.google.gerrit.server.update.RetainCounts action, com.google.common.base.Throwable<java.lang.Throwable> exception) throws java.lang.Exception { try { return execute(actionType, actionType, opts, optionPredicate); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(t); throw new java.lang.UnsupportedOperationException(t); } }
public T execute(com.google.gerrit.server.update.RetryType.Action<T> action, com.google.gerrit.server.update.Retry<T> action, com.google.gerrit.server.update.Retry<T> action, com.google.gerrit.server.update.RetainCounts action, com.google.common.base.Throwable<java.lang.Throwable> exception) throws java.lang.Exception { try { return execute(actionType, actionType, opts, optionPredicate); } catch (java.lang.Throwable e) { com.google.common.base.Throwables.throwIfInstanceOf(t); throw new java.lang.UnsupportedOperationException(t); } }
public T execute(com.google.gerrit.server.update.RetryType.Action<T> action, com.google.gerrit.server.update.Retry<T> action, com.google.gerrit.server.update.Retry<T> action, com.google.gerrit.server.update.RetainCounts action, com.google.common.base.Throwable<java.lang.Throwable> exception) throws java.lang.Exception { try { return execute(actionType, actionType, opts, optionPredicate); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(taught, java.lang.Throwable.class); throw new java.lang.UnsupportedOperationException(t); } }
public T execute(com.google.gerrit.server.update.RetryType.Action<T> action, com.google.gerrit.server.update.Retry<T> action, com.google.gerrit.server.update.Retry<T> action, com.google.gerrit.server.update.RetainCounts action, com.google.common.base.Throwable<java.lang.Throwable> exception) throws java.lang.Exception { try { return executeWithAttachedCount(action, action, opts, opts, ex); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(t, java.lang.Exception.class); throw new java.lang.UnsupportedOperationException(t); } }
public T execute(com.google.gerrit.server.update.RetryType.Action<T> action, com.google.gerrit.server.update.Retry<T> action, com.google.gerrit.server.update.Retry<T> action, com.google.gerrit.server.update.RetainCounts action, com.google.common.base.Throwable<java.lang.Throwable> exception) throws java.lang.Exception { try { return executeWithAttachedCount(action, action, opts, opts, ex); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(t, java.lang.Exception.class); throw new java.lang.UncheckedStateException(e); } }
private com.google.gerrit.server.group.InternalGroupInNoteDb createGroupInNoteDbWithRetry(com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.server.group.InternalGroupCreation> groupCreation, com.google.gerrit.server.group.InternalGroupUpdate.Action groupUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryStatus.GROUP_UPDATE, createGroupInNoteDb(groupCreation, groupUpdate), com.google.gerrit.server.git.LockFailure.class); } catch (java.io.IOException e) { com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmDuplicateKeyException.class); throw new java.io.IOException(e); } }
private com.google.gerrit.server.group.InternalGroupInNoteDb createGroupInNoteDbWithRetry(com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.server.group.InternalGroupCreation> groupCreation, com.google.gerrit.server.group.InternalGroupUpdate.Action groupUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryStatus.GROUP_UPDATE, createGroupInNoteDb(groupCreation, groupUpdate), com.google.gerrit.server.git.LockFailure.class); } catch (java.io.IOException e) { com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); } catch (java.io.IOException e) { com.google.common.base.Throwables.throwIfInstanceOf(e, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmDuplicateKeyException.class); throw new java.io.IOException(e); } }
private com.google.gerrit.server.group.InternalGroupInNoteDb createGroupInNoteDbWithRetry(com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.server.group.InternalGroupCreation> groupCreation, com.google.gerrit.server.group.InternalGroupUpdate.Result resultUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryStatus.GROUP_UPDATE, createGroupInNoteDb(groupCreation, groupUpdate), com.google.gerrit.server.git.LockFailure.class); } catch (java.io.IOException e) { com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmDuplicateKeyException.class); throw new java.io.IOException(e); } }
private com.google.gerrit.server.group.InternalGroupInNoteDb createGroupInNoteDbWithRetry(com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.server.group.InternalGroupCreation> groupCreation, com.google.gerrit.server.group.InternalGroupUpdate.Action groupUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryStatus.GROUP_UPDATE, createGroupInNoteDb(groupCreation, groupUpdate), com.google.gerrit.server.git.LockFailure, new com.google.gwtorm.server.OrmException(e); } catch (java.io.IOException e) { com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmDuplicateKeyException.class); } }
private com.google.gerrit.server.group.InternalGroupInNoteDb createGroupInNoteDbWithRetry(com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.server.group.InternalGroupCreation> groupCreation, com.google.gerrit.server.group.InternalGroupUpdate.Action groupUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryStatus.GROUP_UPDATE, createGroupInNoteDb(groupCreation, groupUpdate), com.google.gerrit.server.git.LockFailure, new com.google.gwtorm.server.OrmException(e); } catch (java.io.IOException e) { com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmDuplicateKeyException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmDuplicateKeyException.class); } }
private void executeAccountUpdate(com.google.gerrit.server.update.RetryUpdate.Action<T> action) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryImpl.execute(Action, action, action, t) -> { com.google.gerrit.server.git.LockFailure.throwIfInstanceOfAccountException(java.io.IOException.class); } catch (java.IOException e) { com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); throw new com.google.gwtorm.server.OrmException(e); } }
private void executeAccountUpdate(com.google.gerrit.server.update.RetryUpdate.Action<T> action) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryImpl.execute(Action, action, action, t) -> { com.google.gerrit.server.git.LockFailure.throwIfInstanceOfAccountException(java.io.IOException.class); } catch (java.IOException e) { com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); throw new com.google.gwtorm.server.OrmException(java.lang.String.class); } }
private void executeAccountUpdate(com.google.gerrit.server.update.RetryUpdate.Action<T> action) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryImpl.execute(Action, action, action, t) -> { com.google.gerrit.server.git.LockFailure.throwIfInstanceOfAccountException(java.io.IOException.class); } catch (java.IOException e) { com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); throw new com.google.gwtorm.server.OrmException(t); } }
private void executeAccountUpdate(com.google.gerrit.server.update.RetryUpdate.Action<T> action) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryImpl.execute(Action, action, action, t) -> { com.google.gerrit.server.git.LockFailure.throwIfInstanceOfAccountException(java.io.IOException.class); } catch (java.IOException e) { com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.server.git.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gwtorm.server.OrmException.class); throw new com.google.gwtorm.server.OrmException(e); } }
private void executeAccountUpdate(com.google.gerrit.server.update.RetryUpdate.Action<T> action) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryImpl.execute(Action, action, action, t) -> { com.google.gerrit.server.git.LockFailure.throwIfInstanceOfAccountException(java.io.IOException.class); } catch (java.IOException e) { com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gerrit.server.git.UpdateException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gwtorm.server.OrmException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); throw new com.google.gwtorm.server.OrmException(e); } }
private com.google.gerrit.server.group.InternalGroupInNoteDb createGroupInNoteDb(com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup> groupCreation, com.google.gerrit.server.group.InternalGroupUpdate> groupUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupInserter.getNameKey().orElseGet(groupCreation::getNameKey()); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getNameKey(); com.google.gerrit.server.group.GroupNameKey groupName = com.google.gerrit.server.GroupConfig.createForNewGroup(allUsersRepo, groupCreation::getGroupUUID(), groupName); com.google.gerrit.server.group.GroupNameKeys = com.google.gerrit.server.GroupConfig.createForNewGroup(allUsersRepo, groupCreation, this::getAccountId(), groupName); commit(repo, groupName); return groupConfig; } }
private com.google.gerrit.server.group.InternalGroupInNoteDb createGroupInNoteDb(com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup> groupCreation, com.google.gerrit.server.group.InternalGroupUpdate> groupUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupInserter.getNameKey().orElseGet(groupCreation::getNameKey()); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getNameKey(); com.google.gerrit.server.group.GroupNameKey groupName = com.google.gerrit.server.GroupConfig.createForNewGroup(allUsersRepo, groupCreation::getGroupUUID(), groupName); com.google.gerrit.server.group.GroupNameKeys = com.google.gerrit.server.GroupConfig.createForNewGroup(allUsersRepo, groupCreation, this::getAccountId(), groupName); commit(repo, groupName); return groupConfig.getLoadedByUUID(); } }
private com.google.gerrit.server.group.InternalGroupInNoteDb createGroupInNoteDb(com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup> groupCreation, com.google.gerrit.server.group.InternalGroupUpdate> groupUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupInserter.getNameKey().orElseGet(groupCreation::getNameKey()); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getNameKey(); com.google.gerrit.server.group.GroupNameKey groupName = com.google.gerrit.server.GroupConfig.createForNewGroup(allUsersRepo, groupCreation::getGroupUUID(), groupName); com.google.gerrit.server.group.GroupNameKeys = com.google.gerrit.server.GroupConfig.createForNewGroup(allUsersRepo, groupCreation, this::getAccountId(), groupName); commit(repo, groupName); return groupConfig.getLoadedByGroup(); } }
private com.google.gerrit.server.group.InternalGroupInNoteDb createGroupInNoteDb(com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup> groupCreation, com.google.gerrit.server.group.InternalGroupUpdate> groupUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupInserter.getNameKey().orElseGet(groupCreation::getNameKey()); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getNameKey(); com.google.gerrit.server.group.GroupNameKey groupName = com.google.gerrit.server.GroupConfig.createForNewGroup(allUsersRepo, groupCreation::getGroupUUID(), groupName); com.google.gerrit.server.group.GroupNameKeys = com.google.gerrit.server.GroupConfig.createForNewGroup(allUsersRepo, groupCreation, this::getAccountId(), groupName); commit(repo, groupName); return groupConfig.getLoadedGroup().orElseInstance(true); } }
private com.google.gerrit.server.group.InternalGroupInNoteDb createGroupInNoteDb(com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup> groupCreation, com.google.gerrit.server.group.InternalGroupUpdate> groupUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupInserter.getNameKey().orElseGet(groupCreation::getNameKey()); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getNameKey(); com.google.gerrit.server.group.GroupNameKey groupName = com.google.gerrit.server.GroupConfig.createForNewGroup(allUsersRepo, groupCreation::getGroupUUID(), groupName); com.google.gerrit.server.group.GroupNameKeys = com.google.gerrit.server.GroupConfig.createForNewGroup(allUsersRepo, groupCreation, this::getAccountId(), groupName); commit(repo, groupName); return groupConfig.getLoadedGroup().orElseInstance(new com.google.gerrit.reviewdb.client.Account.Id(com.google.gerrit.reviewdb.client.AccountGroup.UUID(accountId)); } }
private java.util.Optional<com.google.gerrit.server.group.GroupsUpdate.Update> updateGroupInNoteDbWithRetry(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.InternalGroupUpdate updateUpdate) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryRunInNoteDb.Action(groupUUID, groupUpdate, updateGroupInNoteDb(groupUpdate), com.google.gerrit.server.git.LockFailure, new com.google.gerrit.server.git.LockFailureException.class); } catch (java.io.IOException e) { com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmDuplicateKeyException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gerrit.server.git.NoSuchGroupException.class); throw new java.io.IOException(e); } }
private java.util.Optional<com.google.gerrit.server.group.GroupsResult> updateGroupInNoteDbWithRetry(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.InternalGroupUpdate groupUpdate) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryRunInNoteDb.Action, updateGroupInNoteDb(groupUuid, groupUpdate), com.google.gerrit.server.git.LockFailure, new com.google.gerrit.server.git.LockFailureException.class); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmDuplicateKeyException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gerrit.server.git.NoSuchGroupException.class); throw new java.io.IOException(e); } }
private java.util.Optional<com.google.gerrit.server.group.GroupsResult> updateGroupInNoteDbWithRetry(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.InternalGroupUpdate groupUpdate) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryRunInNoteDb.Action, updateGroupInNoteDb(groupUuid, groupUpdate), com.google.gerrit.server.git.LockFailure, new com.google.gerrit.server.git.LockFailureException.class); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gerrit.server.git.NoSuchGroupException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmDuplicateKeyException.class); throw new java.io.IOException(e); } }
private java.util.Optional<com.google.gerrit.server.group.GroupsResult> updateGroupInNoteDbWithRetry(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.InternalGroupUpdate groupUpdate) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryRunInNoteDb.Action, updateGroupInNoteDb(groupUuid, groupUpdate), com.google.gerrit.server.git.LockFailure, new com.google.gerrit.server.git.LockFailureException.class); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gerrit.server.git.NoSuchGroupException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gerrit.server.git.NoSuchGroupException.class); throw new java.io.IOException(e); } }
private java.util.Optional<com.google.gerrit.server.group.GroupsResult> updateGroupInNoteDbWithRetry(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.InternalGroupUpdate groupUpdate) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryRunInNoteDb.Action, updateGroupInNoteDb(groupUuid, groupUpdate), com.google.gerrit.server.git.LockFailure, new com.google.gerrit.server.git.LockFailureException.class); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmDuplicateKeyException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gerrit.server.git.NoSuchGroupException.class); throw new java.io.IOException(e); } } }
private com.google.gerrit.reviewdb.client.Account updateAccount(com.google.gerrit.server.account.AccountsUpdate account) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName);com.google.gerrit.server.account.VersionedAccount updated = accountUpdate.update(allUsersName); if (updatedAccount == null) { return null; } commitUpdate.execute(); }
private com.google.gerrit.reviewdb.client.Account updateAccount(com.google.gerrit.server.account.AccountsUpdate account) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName);com.google.gerrit.server.account.VersionedAccount updated = accountUpdate.update(allUsersName); if (updatedAccount == null) { return null; } commitUpdate.execute(allUsersRepo, updatedAccount); return updatedUser; }
private com.google.gerrit.reviewdb.client.Account updateAccount(com.google.gerrit.server.account.AccountsUpdate account) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.account.AccountUpdate update = accountUpdate.update(allUsersName); if (updatedAccount == null) { return null; } commitUpdate = update.getAccount(); return updatedUser; } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.io.IOException(e); } }
private com.google.gerrit.reviewdb.client.Account updateAccount(com.google.gerrit.server.account.AccountsUpdate account) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.account.AccountUpdate update = accountUpdate.update(allUsersName); if (updatedAccount == null) { return null; } commitUpdate = update.getAccount(); return updatedUser; } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } }
private com.google.gerrit.reviewdb.client.Account updateAccount(com.google.gerrit.server.account.AccountsUpdate account) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.account.AccountUpdate update = accountUpdate.update(allUsersName); if (updatedAccount == null) { return null; } commitUpdate = update.getAccount(); return updatedUser; } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException(e); } }); }
@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); parent.getProjectState().checkState(parent); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic()? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); parent.getProjectState().checkState(parent); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic()? ref.getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); parent.getProjectState().checkState(parent); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.refsStarredChanges(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic()? ref.getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); parent.getProjectState().checkState(parent); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic()? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); parent.getProjectState().checkState(parent); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic()? ref.getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { rsrc.getProjectState().checkState(); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring(matchSubstring).start(start).limit(start).limit(limit).limit(allBranches(allBranches(rsrc)); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { rsrc.getProjectState().checkState(); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring).regex(matchRegex).start(start).limit(limit).limit(allBranches(allBranches(rsrc)); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { rsrc.getProjectState().checkState(); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring(matchSubstring).regex(matchRegex(matchSubstring).start(start).limit(allBranches(rsrc)); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { rsrc.getProjectState().checkState(); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring(matchSubstring).regex(matchRegex(matchRegex).start(start).limit(allBranches(rsrc)); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { rsrc.getProjectState().checkState(); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring(matchSubstring).regex(matchRegex(matchSubstring).start(start).limit(allBranches(allBranches(rsrc)); }
private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState project, com.google.gerrit.server.CurrentUser user, java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').split(2).split(id)); java.lang.String ref = com.google.gerrit.server.project.Url.encode(p.get(0)); return dashboards.parse(new com.google.gerrit.extensions.restapi.Url.encode(p.get(1)); }
private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState project, com.google.gerrit.server.CurrentUser user, java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id)); java.lang.String ref = com.google.gerrit.server.project.Url.encode(p.get(0)); return dashboards.parse(new com.google.gerrit.extensions.restapi.Url.encode(p.get(1)); }
private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState project, com.google.gerrit.server.CurrentUser user, java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id)); java.lang.String ref = com.google.gerrit.server.project.Url.encode(p.get(0)); return dashboards.parse(new com.google.gerrit.extensions.restapi.Url.encode(p.get(1)); }
private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState project, com.google.gerrit.server.CurrentUser user, java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').split(2).split(id)); java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(0)); return dashboards.parse(new com.google.gerrit.server.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.UrlString.fromUrl(((ref + ':') + path))); }
private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState project, com.google.gerrit.server.CurrentUser user, java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').split(2).split(id)); java.lang.String ref = com.google.gerrit.server.project.Url.encode(p.get(0)); java.lang.String path = com.google.gerrit.extensions.restapi.Url.encode(p.get(1)); return dashboards; }
private com.google.gerrit.server.project.DashboardResource resource() throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id)); }
private com.google.gerrit.server.project.DashboardResource resource() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id)); }
private com.google.gerrit.server.project.DashboardResource resource() throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.server.account.IdString.fromDecoded(id)); }
private com.google.gerrit.server.project.DashboardResource resource() throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.server.account.IdString.fromDecoded(id)); }
private com.google.gerrit.server.project.DashboardResource resource() throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.permissions.PermissionBackend.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id)); return dashboards.parse(project, null); }
private com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String id = projectState.getProject().getDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return parse(projectState, user, id); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
private com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String id = projectState.getProject().getDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return parse(projectState, user, id); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
private com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String id = projectState.getProject().getDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
private com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String id = projectState.getProject().getDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return parse(projectState, user, id); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
private com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String id = projectState.getProject().getDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardInfo.projectDefault(parent.getProject()); } com.google.gerrit.server.project.DashboardInfo info; try { info = com.google.gerrit.server.project.Dashboards.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.project.DashboardsCollection.InvalidDashboardInfo e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardInfo.projectDefault(parent.getProject()); } com.google.gerrit.server.project.DashboardInfo info; try { info = com.google.gerrit.server.project.Dashboards.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.project.DashboardsCollection.InvalidDashboardInfo e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardInfo.projectDefault(parent.getProject()); } com.google.gerrit.server.project.DashboardInfo info; try { info = com.google.gerrit.server.project.Dashboards.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.project.DashboardsCollection.InvalidDashboardInfo e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.IncorrectObjectTypeException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardInfo.projectDefault(parent.getProject()); } com.google.gerrit.server.project.DashboardInfo info; try { info = com.google.gerrit.server.project.Dashboards.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.project.DashboardsCollection.InvalidDashboardInfo e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.IncorrectObjectTypeException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { continue; } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardInfo.projectDefault(parent.getProject()); } com.google.gerrit.server.project.DashboardInfo info; try { info = com.google.gerrit.server.project.Dashboards.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.project.DashboardsCollection.InvalidDashboardInfo e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } } catch (org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { continue; } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.notedb.ChangeNotes notes = changeFinder.find(id); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.notedb.ChangeNotes.toIdString(id)); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } com.google.gerrit.server.notedb.ChangeNotes changeNotes = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } return changeResourceFactory.create(change, user.get()); }
public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.notedb.ChangeNotes.toIdString(id)); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } com.google.gerrit.server.notedb.ChangeNotes changeNotes = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } return changeResourceFactory.create(change, user.get()); }
public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.notedb.ChangeNotes notes = changeFinder.find(id); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.notedb.ChangeNotes.toIdString(id)); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } com.google.gerrit.server.notedb.ChangeNotes changeNotes = notes.get(0); if (!(notes.isRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } return changeResourceFactory.create(change, user.get()); }
public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.notedb.ChangeNotes notes = changeFinder.find(id); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.notedb.ChangeNotes.toIdString(id)); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } com.google.gerrit.server.notedb.ChangeNotes changeNotes = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(change, user.get()); }
public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.notedb.ChangeNotes.toIdString(id)); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } com.google.gerrit.server.notedb.ChangeNotes changeNotes = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } return changeResource.create(change, user.get()); }
@org.kohsuke.args4j.Argument(index = 0, required = true, multiValued = true, metaVar = "CHANGE", usage = "changes to modify") void addChange(java.lang.String token) { try { changeArgumentParser.addChange(token, changes, projectState); } catch (com.google.gerrit.sshd.commands.UnloggedFailure e) { throw new java.lang.IllegalArgumentException(e.getMessage(), e); } catch (java.lang.Exception e) { throw new java.lang.IllegalArgumentException("Cannot check down", e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.lang.IllegalArgumentException("Cannot check permissions", e); } }
@org.kohsuke.args4j.Argument(index = 0, required = true, multiValued = true, metaVar = "CHANGE", usage = "changes to modify") void addChange(java.lang.String token) { try { changeArgumentParser.addChange(token, changes, projectState); } catch (com.google.gerrit.sshd.commands.UnloggedFailure e) { throw new java.lang.IllegalArgumentException(e.getMessage(), e); } catch (java.lang.Exception e) { throw new java.lang.IllegalArgumentException("Cannot check permissions", e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.lang.IllegalArgumentException("Cannot check permissions", e); } }
@org.kohsuke.args4j.Argument(index = 0, required = true, multiValued = true, metaVar = "CHANGE", usage = "changes to modify") void addChange(java.lang.String token) { try { changeArgumentParser.addChange(token, changes, changes, projectState); } catch (com.google.gerrit.sshd.commands.UnloggedFailure e) { throw new java.lang.IllegalArgumentException(e.getMessage(), e); } catch (java.lang.Exception e) { throw new java.lang.IllegalArgumentException("Cannot check permissions", e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.lang.IllegalArgumentException("Cannot check permissions", e); } }
@org.kohsuke.args4j.Argument(index = 0, required = true, multiValued = true, metaVar = "CHANGE", usage = "changes to modify") void addChange(java.lang.String token) { try { changeArgumentParser.addChange(token, changes, projectState); } catch (com.google.gerrit.sshd.commands.UnloggedFailure e) { throw new java.lang.IllegalArgumentException(e.getMessage(), e); } catch (java.lang.IllegalArgumentException e) { throw new java.lang.IllegalArgumentException("Cannot check down", e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.lang.IllegalArgumentException("Cannot check permissions", e); } }
@org.kohsuke.args4j.Argument(index = 0, required = true, multiValued = true, metaVar = "CHANGE", usage = "changes to modify") void addChange(java.lang.String token) { try { changeArgumentParser.addChange(token, changes, projectState); } catch (com.google.gerrit.sshd.commands.UnloggedFailure e) { throw new java.lang.IllegalArgumentException(e.getMessage(), e); } catch (java.lang.IllegalArgumentException e) { throw new java.lang.IllegalArgumentException("Cannot check permissions", e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.lang.IllegalArgumentException("Cannot check permissions", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.account.AccountResource> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Not found %s not found", id.get())); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.account.StarredChanges.log.error("Cannot resolve change", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Cannot resolve change", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.account.AccountResource> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Error not found", id)); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.account.StarredChanges.log.error("Cannot resolve change", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Cannot resolve change", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.account.AccountResource> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Error not found", id)); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Cannot resolve change", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.account.AccountResource> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Error not found", id)); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.account.StarredChanges.log.error("Cannot resolve change", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Cannot resolve change", id); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.account.AccountResource> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Not found %s not found", id.get())); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.account.StarredChanges.log.error("Cannot resolve change", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Cannot resolve change", id); } }
@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded(), true); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(change, user.get()); }
@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded(), true); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(change, user.get()); }
@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded(), true); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.server.notedb.ChangeNotes changeNotes = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(change, user.get()); }
@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded(), true); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(change, user); }
@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded(), true); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(change, user.get()); }
private boolean isVisible(com.google.gerrit.server.change.RelatedChangesSorter.PatchSetData psa) throws com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(currentUserProvider).database(dbProvider); try { perm.change(psd.data()).check(ChangePermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } return projectCache.checkedGet(psd.data().project()).state(); }
private boolean isVisible(com.google.gerrit.server.change.RelatedChangesSorter.PatchSetData psa) throws com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(currentUserProvider).database(dbProvider).check(ChangePermission.READ); try { perm.change(psd.data()).check(ChangePermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } return projectCache.checkedGet(psd.data().project()).state(); }
private boolean isVisible(com.google.gerrit.server.change.RelatedChangesSorter.PatchSetData psa) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException { com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(currentUserProvider).database(dbProvider).check(ChangePermission.READ); return false; }
private boolean isVisible(com.google.gerrit.server.change.RelatedChangesSorter.PatchSetData psa) throws com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(currentUserProvider).database(dbProvider).check(ChangePermission.READ); try { perm.change(psd.data()).check(ChangePermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } return projectCache.checkedGet(ps.data().project()).state(); }
private boolean isVisible(com.google.gerrit.server.change.RelatedChangesSorter.PatchSetData pds) throws com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(currentUserProvider).database(dbProvider).check(ChangePermission.READ); try { perm.change(psd.data()).check(ChangePermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } return projectCache.checkedGet(psd.data().project()).state(); }
public void sort(java.lang.String ref, java.util.List<com.google.gerrit.common.data.AccessSection> sections) { final int cnt = sections.size(); if (cnt <= 1) { return; } com.google.gerrit.server.project.SectionCache.Entry key = com.google.gerrit.server.project.SectionCache.Entry.Entry.create(ref, sections); com.google.gerrit.server.project.Section val = cache.getIfPresent(ref, sections); if (val!= null) { int srcIdx = valIdx; if (srcIdx!= null) { com.google.gerrit.common.data.AccessSection[] src = com.google.gerrit.server.project.Section.copy(sections); for (int i = 0; i < cnt; i++) { sections.set(i); i++) { srcIndex = com.google.gerrit.common.data.AccessSection[] srcList = com.google.gerrit.server.project.AccessSection.copy(sections); for (int i = 0; i < cnt; i++) { srcMap.put(srcId.get(i), i); } } java.util.Collections.sort(sections, new com.google.gerrit.server.util.HashSet<com.google.gerrit.common.data.AccessSection>(); for (int i = 0; i < cnt; i++) { srcIdx.put(sections.get(i), i); } java.util.Collections.sort(sections, new com.google.gerrit.server.project.SectionCache.Entry(ref)); int[] srcIndex = srcMap.get(sections.get(i)); if (c!= null) { srcIdx = srcMap.get(sections.get(i)); } else { cache.put(key, new com.google.gerrit.server.project.SectionCache.Entry(srcId, notCache)); } } }
public void sort(java.lang.String ref, java.util.List<com.google.gerrit.common.data.AccessSection> sections) { final int cnt = sections.size(); if (cnt <= 1) { return; } com.google.gerrit.server.project.SectionCache.Entry key = com.google.gerrit.server.project.SectionCache.Entry.Entry.create(ref, sections); com.google.gerrit.server.project.Section val = cache.getIfPresent(ref, sections); if (val!= null) { int srcIdx = valIdx; if (srcIdx!= null) { com.google.gerrit.common.data.AccessSection[] src = com.google.gerrit.server.project.Section.copy(sections); for (int i = 0; i < cnt; i++) { sections.set(i); i++) { srcIndex = com.google.gerrit.common.data.AccessSection[] srcList = com.google.gerrit.server.project.AccessSection.copy(sections); for (int i = 0; i < cnt; i++) { srcMap.put(srcId.get(i), i); } } java.util.Collections.sort(sections, new com.google.gerrit.server.util.HashSet<com.google.gerrit.common.data.AccessSection>(); for (int i = 0; i < cnt; i++) { srcIdx.put(sections.get(i), i); } java.util.Collections.sort(sections, new com.google.gerrit.server.project.SectionCache.Entry(ref)); int[] srcIndex = srcMap.get(sections.get(i)); if (c!= null) { srcIdx = srcMap.get(sections.get(i)); } else { cache.put(key, new com.google.gerrit.server.project.SectionCache.Entry(srcId, not cached)); } } }
public void sort(java.lang.String ref, java.util.List<com.google.gerrit.common.data.AccessSection> sections) { final int cnt = sections.size(); if (cnt <= 1) { return; } com.google.gerrit.server.project.SectionCache.Entry key = com.google.gerrit.server.project.SectionCache.Entry.Entry.create(ref, sections); com.google.gerrit.server.project.Section val = cache.getIfPresent(ref, sections); if (val!= null) { int srcIdx = valIdx; if (srcIdx!= null) { com.google.gerrit.common.data.AccessSection[] src = com.google.gerrit.server.project.Section.copy(sections); for (int i = 0; i < cnt; i++) { sections.set(i); i++) { srcIndex = com.google.gerrit.common.data.AccessSection[] srcList = com.google.gerrit.server.project.AccessSection.copy(sections); for (int i = 0; i < cnt; i++) { srcMap.put(srcId.get(i), i); } } java.util.Collections.sort(sections, new com.google.gerrit.server.util.HashSet<com.google.gerrit.common.data.AccessSection>(); for (int i = 0; i < cnt; i++) { srcIdx = srcMap.get(i); i++) { srcIdx; } java.util.Collections.sort(sections, new com.google.gerrit.server.project.SectionCache.Entry(ref)); int i = srcMap.get(sections.get(i)); } if (po!= null) { cache.put(key, new com.google.gerrit.server.project.SectionCache.Entry(srcId, notCache)); } else { cache.put(key, new com.google.gerrit.server.project.SectionCache.Entry(srcId)); } } }
public void sort(java.lang.String ref, java.util.List<com.google.gerrit.common.data.AccessSection> sections) { final int cnt = sections.size(); if (cnt <= 1) { return; } com.google.gerrit.server.project.SectionCache.Entry key = com.google.gerrit.server.project.SectionCache.Entry.Entry.create(ref, sections); com.google.gerrit.server.project.Section val = cache.getIfPresent(ref, sections); if (val!= null) { int srcIdx = valIdx; if (srcIdx!= null) { com.google.gerrit.common.data.AccessSection[] src = com.google.gerrit.server.project.Section.copy(sections); for (int i = 0; i < cnt; i++) { sections.set(i); i++) { srcIndex = com.google.gerrit.common.data.AccessSection[] srcList = com.google.gerrit.server.project.AccessSection.copy(sections); for (int i = 0; i < cnt; i++) { srcMap.put(srcId.get(i), i); } } java.util.Collections.sort(sections, new com.google.gerrit.server.util.HashSet<com.google.gerrit.common.data.AccessSection>(); for (int i = 0; i < cnt; i++) { srcIdx = srcMap.get(i); i++) { srcIdx; } java.util.Collections.sort(sections, new com.google.gerrit.server.project.SectionCache.Entry(ref)); int i = srcMap.get(sections.get(i)); if (c!= null) { srcIdx = srcMap.get(sections.get(i)); } else { cache.put(key, new com.google.gerrit.server.project.SectionCache.Entry(srcId, notCache)); } } }
public void sort(java.lang.String ref, java.util.List<com.google.gerrit.common.data.AccessSection> sections) { final int cnt = sections.size(); if (cnt <= 1) { return; } com.google.gerrit.server.project.SectionCache.Entry key = com.google.gerrit.server.project.SectionCache.Entry.Entry.create(ref, sections); com.google.gerrit.server.project.Section val = cache.getIfPresent(ref, sections); if (val!= null) { int srcIdx = valIdx; if (srcIdx!= null) { com.google.gerrit.common.data.AccessSection[] src = com.google.gerrit.server.project.Section.copy(sections); for (int i = 0; i < cnt; i++) { sections.set(i); i++) { srcIndex = com.google.gerrit.common.data.AccessSection[] srcList = com.google.gerrit.server.project.AccessSection.copy(sections); for (int i = 0; i < cnt; i++) { srcMap.put(srcId.get(i), i); } } java.util.Collections.sort(sections, new com.google.gerrit.server.util.HashSet<com.google.gerrit.common.data.AccessSection>(); for (int i = 0; i < cnt; i++) { srcIdx = srcMap.get(i); i++) { srcIdx; } java.util.Collections.sort(sections, new com.google.gerrit.server.project.SectionCache.Entry(ref)); int i = srcMap.get(sections.get(i)); if (c!= null) { srcIdx = srcMap.get(sections.get(i)); } else { cache.put(key, new com.google.gerrit.server.project.SectionCache.Entry(srcId, not cached)); } } }
@org.junit.Test public void noteDbCommit() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.common.ChangeInfo c = newChangeInfo(newChangeInput(ChangeStatus.NEW)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(new com.google.gerrit.reviewdb.client.Change.Id(changeMetaRef(new com.google.gerrit.reviewdb.client.Change.Id(c._number))).getObjectId()); assertThat(commit.getShortMessage()).isEqualTo(expectedCommit); assertThat(commit.getAuthorIdent()).isEqualTo(expectedAuthor); assertThat(commit.getAuthorIdent()).isEqualTo(expectedAuthor); assertThat(commit.getCommitterIdent()).isEqualTo(expectedAuthor); assertThat(commit.getCommitterIdent()).isEqualTo(new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), c.createdUser); assertThat(commit.getCommitterIdent()).isEqualTo(0); } }
@org.junit.Test public void noteDbCommit() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.common.ChangeInfo c = newChangeInfo(newChangeInput(ChangeStatus.NEW)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(new com.google.gerrit.reviewdb.client.Change.Id(changeMetaRef(new com.google.gerrit.reviewdb.client.Change.Id(c._number))).getObjectId()); assertThat(commit.getShortMessage()).isEqualTo(expectedCommit); assertThat(commit.getAuthorIdent()).isEqualTo(expectedAuthor); assertThat(commit.getAuthorIdent()).isEqualTo(expectedAuthor); assertThat(commit.getCommitterIdent()).isEqualTo(expectedAuthor); assertThat(commit.getCommitterIdent()).isEqualTo(new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), c.createdOn)); assertThat(commit.getCommitterIdent()).isEqualTo(0); } }
@org.junit.Test public void noteDbCommit() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.common.ChangeInfo c = newChangeInfo(newChangeInput(ChangeStatus.NEW)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(new com.google.gerrit.reviewdb.client.Change.Id(changeMetaRef(new com.google.gerrit.reviewdb.client.Change.Id(c._number))).getObjectId()); assertThat(commit.getShortMessage()).isEqualTo(expectedCommit); assertThat(commit.getAuthorIdent()).isEqualTo(expectedAuthor); assertThat(commit.getAuthorIdent()).isEqualTo(expectedAuthor); assertThat(commit.getCommitterIdent()).isEqualTo(expectedAuthor); assertThat(commit.getCommitterIdent()).isEqualTo(new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), c.createdFrom, serverIdent.created)); assertThat(commit.getCommitterIdent()).isEqualTo(0); } }
@org.junit.Test public void noteDbCommit() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.common.ChangeInfo c = newChangeInfo(newChangeInput(ChangeStatus.NEW)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(new com.google.gerrit.reviewdb.client.Change.Id(changeMetaRef(new com.google.gerrit.reviewdb.client.Change.Id(c._number))).getObjectId()); assertThat(commit.getShortMessage()).isEqualTo(expectedCommit); assertThat(commit.getAuthorIdent()).isEqualTo(expectedAuthor); assertThat(commit.getAuthorIdent()).isEqualTo(expectedAuthor); assertThat(commit.getCommitterIdent()).isEqualTo(expectedAuthor); assertThat(commit.getCommitterIdent()).isEqualTo(new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), c.createdFrom, c.getCreated)); assertThat(commit.getCommitterIdent()).isEqualTo(0); } }
@org.junit.Test public void noteDbCommit() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.common.ChangeInfo c = newChangeInfo(newChangeInput(ChangeStatus.NEW)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(new com.google.gerrit.reviewdb.client.Change.Id(changeMetaRef(new com.google.gerrit.reviewdb.client.Change.Id(c._number))).getObjectId()); assertThat(commit.getShortMessage()).isEqualTo(expectedCommit); assertThat(commit.getAuthorIdent()).isEqualTo(expectedAuthor); assertThat(commit.getAuthorIdent()).isEqualTo(expectedAuthor); assertThat(commit.getCommitterIdent()).isEqualTo(expectedAuthor); assertThat(commit.getCommitterIdent()).isEqualTo(new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), c.createdUser); assertThat(commit.getCommitterIdent()).isEqualTo(0); assertThat(commit.getParentCount()).isEqualTo(0); } }
@org.junit.Test public void getExternalIdsAndOtherUserWithAccessDatabase() throws java.lang.Exception { allowGlobalCapabilities(GlobalCapability.ACCESS_USERS, GlobalCapability.ACCESS_DATABASE); java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = accountCache.get(admin.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get((("/accounts/" + (admin.id)) + "/external.ids")); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
@org.junit.Test public void getExternalIdsAndOtherUserWithAccessDatabase() throws java.lang.Exception { allowGlobalCapabilities(com.google.gerrit.acceptance.rest.account.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = accountCache.get(admin.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get((("/accounts/" + (admin.id)) + "/external.ids")); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(expectedIdInfos); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
@org.junit.Test public void getExternalIdsAndOtherUserWithAccessDatabase() throws java.lang.Exception { allowGlobalCapabilities(com.google.gerrit.acceptance.rest.account.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); java.util.Collection<com.google.gerrit.server.account.external.ExternalId> expectedIds = accountCache.get(admin.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get((("/accounts/" + (admin.id)) + "/external.ids")); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
@org.junit.Test public void getExternalIdsAndOtherUserWithAccessDatabase() throws java.lang.Exception { allowGlobalCapabilities(com.google.gerrit.acceptance.rest.account.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = accountCache.get(admin.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get((("/accounts/" + (admin.id)) + "/external.ids")); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIds); }
@org.junit.Test public void getExternalIdsOfOtherUserWithAccessDatabase() throws java.lang.Exception { allowGlobalCapabilities(com.google.gerrit.acceptance.rest.account.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = accountCache.get(admin.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get((("/accounts/" + (admin.id)) + "/external.ids")); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIds); }
@org.junit.Test public void getExternalIds() throws java.lang.Exception { java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get("/accounts/self/external.ids"); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
@org.junit.Test public void getExternalIds() throws java.lang.Exception { java.util.Collection<com.google.gerrit.server.account.external.ExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get("/accounts/self/external.ids"); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(expectedIdInfos); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
@org.junit.Test public void getExternalIds() throws java.lang.Exception { java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get("/accounts/self/external.ids"); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
@org.junit.Test public void getExternalIds() throws java.lang.Exception { java.util.Collection<com.google.gerrit.server.account.external.ExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get("/accounts/self/external.ids"); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
@org.junit.Test public void getExternalIds() throws java.lang.Exception { java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get("/accounts/self/external.ids"); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(expectedIdInfos); assertThat(results).containsExactlyElementsIn(expectedIds); }
private void assertUserBranch(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable java.lang.String name, @com.google.gerrit.common.Nullable java.lang.String status) throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.lib.ObjectReader or = repo.newObjectReader();org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); assertThat(ref).isNotNull(); org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); long timestampDiffMs = java.lang.Math.abs((((c.getCommitTime()) * 1000L) - (accountCache.get(accountId).getAccount().getTime()))); assertThat(timestampDiffMs).isAtMost(ChangeRebuilderImpl.MAX_WINDOW_WINDOW_MS); try (org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(or, Account.ACCESS_CONFIG, c.getTree())) { if ((name!= null) || (status!= null)) { assertThat(tw).isNotNull(); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText(new java.lang.String(org.eclipse.jgit.lib.ObjectId(tw.getObjectId(0), com.google.gerrit.acceptance.api.accounts.OBJ_BLOBJ_FOUND)); assertThat(cfg.getString(AccountId).getString()).isNotNull(); } assertThat(cfg.getString(Account.ACCOUNT_FOUND, null, AccountProblems); } }
private void assertUserBranch(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable java.lang.String name, @com.google.gerrit.common.Nullable java.lang.String status) throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.lib.ObjectReader or = repo.newObjectReader();org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); assertThat(ref).isNotNull(); org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); long timestampDiffMs = java.lang.Math.abs((((c.getCommitTime()) * 1000L) - (accountCache.get(accountId).getAccount().getTime()))); assertThat(timestampDiffMs).isAtMost(ChangeRebuilderImpl.MAX_WINDOW_WINDOW_MS); try (org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(or, Account.ACCESS_CONFIG, c.getTree())) { if ((name!= null) || (status!= null)) { assertThat(tw).isNotNull(); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText(new java.lang.String(org.eclipse.jgit.api.accounts.OBJ_BLOBJ_BLOB).getBytes(), java.nio.charset.StandardCharsets.UTF_8)); assertThat(cfg.getString(Constants.ACCOUNT_FOUND, null, AccountProperties.KEY_FOUND); assertThat(cfg.getString(Constants.ACCOUNT_FOUND, null, null, AccountPro
private void assertUserBranch(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable java.lang.String name, @com.google.gerrit.common.Nullable java.lang.String status) throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.lib.ObjectReader or = repo.newObjectReader();org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); assertThat(ref).isNotNull(); org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); long timestampDiffMs = java.lang.Math.abs((((c.getCommitTime()) * 1000L) - (accountCache.get(accountId).getAccount().getTime()))); assertThat(timestampDiffMs).isAtMost(ChangeRebuilderImpl.MAX_WINDOW_WINDOW_MS); try (org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(or, Account.ACCESS_CONFIG, c.getTree())) { if ((name!= null) || (status!= null)) { assertThat(tw).isNotNull(); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText(new java.lang.String(org.eclipse.jgit.api.accounts.OBJ_BLOBJ_BLOB).getBytes(), java.nio.charset.StandardCharsets.UTF_8)); assertThat(cfg.getString(Constants.ACCOUNT_FOUND, null, AccountProperties.KEY_FOUND); assertThat(cfg.getString(Account.ACCOUNT_FOUND, null, AccountProblemsForF
private void assertUserBranch(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable java.lang.String name, @com.google.gerrit.common.Nullable java.lang.String status) throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.lib.ObjectReader or = repo.newObjectReader();org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); assertThat(ref).isNotNull(); org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); long timestampDiffMs = java.lang.Math.abs((((c.getCommitTime()) * 1000L) - (accountCache.get(accountId).getAccount().getTime()))); assertThat(timestampDiffMs).isAtMost(ChangeRebuilderImpl.MAX_WINDOW_WINDOW_MS); try (org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(or, Account.ACCESS_CONFIG, c.getTree())) { if ((name!= null) || (status!= null)) { assertThat(tw).isNotNull(); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText(new java.lang.String(org.eclipse.jgit.api.accounts.OBJ_BLOBJ_BLOB).getBytes(), java.nio.charset.StandardCharsets.UTF_8)); assertThat(cfg.getString(Constants.ACCOUNT_FOUND, null, AccountProperties.KEY_FOUND); assertThat(cfg.getString(Account.ACCOUNT_FOUND, null, AccountProblemsToAll
private void assertUserBranch(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable java.lang.String name, @com.google.gerrit.common.Nullable java.lang.String status) throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.lib.ObjectReader or = repo.newObjectReader();org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); assertThat(ref).isNotNull(); org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); long timestampDiffMs = java.lang.Math.abs((((c.getCommitTime()) * 1000L) - (accountCache.get(accountId).getAccount().getTime()))); assertThat(timestampDiffMs).isAtMost(ChangeRebuilderImpl.MAX_WINDOW_WINDOW_MS); try (org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(or, Account.ACCESS_CONFIG, c.getTree())) { if ((name!= null) || (status!= null)) { assertThat(tw).isNotNull(); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText(new java.lang.String(org.eclipse.jgit.api.accounts.OBJ_BLOBJ_BLOB).getBytes(), java.nio.charset.StandardCharsets.UTF_8)); assertThat(cfg.getString(Constants.ACCOUNT_FOUND, null, AccountProperties.KEY_FOUND); assertThat(cfg.getString(Account.ACCOUNT_FOUND, null, AccountProblemsTo(
@org.junit.Test public void getDetail() throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminRestSession.get((("/accounts/" + (admin.username)) + "/detail/")); com.google.gerrit.server.account.GetDetailInfo info = newGson().fromJson(r.getReader(), com.google.gerrit.server.account.GetDetail.class); com.google.gerrit.acceptance.rest.account.AccountAssert.assertAccountInfo(admin, info); com.google.gerrit.reviewdb.client.Account account = accountCache.get(admin.getId()); assertThat(info.registeredOn).isEqualTo(account.getAccount(); }
@org.junit.Test public void getDetail() throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminRestSession.get((("/accounts/" + (admin.username)) + "/detail/")); com.google.gerrit.server.account.GetDetailInfo info = newGson().fromJson(r.getReader(), com.google.gerrit.server.account.GetDetail.class); com.google.gerrit.acceptance.rest.account.AccountAssert.assertAccountInfo(admin, info); com.google.gerrit.acceptance.rest.account.AccountAssert.assertAccountInfo(admin, info); com.google.gerrit.reviewdb.client.Account account = accountCache.get(admin.getId()); assertThat(info.registeredOn).isEqualTo(account.getRegisteredOn()); }
@org.junit.Test public void getDetail() throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminRestSession.get((("/accounts/" + (admin.username)) + "/detail/")); com.google.gerrit.server.account.GetDetailInfo info = newGson().fromJson(r.getReader(), com.google.gerrit.server.account.GetDetailInfo.class); com.google.gerrit.acceptance.rest.account.AccountAssert.assertAccountInfo(admin, info); com.google.gerrit.reviewdb.client.Account account = accountCache.get(admin.getId()); assertThat(info.registeredOn).isEqualTo(account.getRegisteredOn()); }
@org.junit.Test public void getDetail() throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminRestSession.get((("/accounts/" + (admin.username)) + "/detail/")); com.google.gerrit.server.account.GetDetailInfo info = newGson().fromJson(r.getReader(), com.google.gerrit.server.account.GetDetail.class); com.google.gerrit.acceptance.rest.account.AccountAssert.assertAccountInfo(admin, info); com.google.gerrit.reviewdb.client.Account account = accountCache.get(admin.getId()); assertThat(info.registeredOn).isEqualTo(Account.Id); }
@org.junit.Test public void getDetail() throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminRestSession.get((("/accounts/" + (admin.username)) + "/detail/")); com.google.gerrit.server.account.GetDetailInfo info = newGson().fromJson(r.getReader(), com.google.gerrit.server.account.GetDetailInfo.class); com.google.gerrit.acceptance.rest.account.AccountAssert.assertAccountInfo(admin, info); com.google.gerrit.reviewdb.client.Account account = accountCache.get(admin.getId()); assertThat(info.registeredOn).isEqualTo(account.getAccount(); }
private void addNoteDbCommit(com.google.gerrit.reviewdb.client.Change.Id id, java.lang.String commitMessage) throws java.lang.Exception { if (!(notesMigration.commitChangeWrites())) { return; } org.eclipse.jgit.lib.PersonIdent committer = serverIdent.get(); org.eclipse.jgit.lib.PersonIdent author = noteUtil.newIdent(accountCache.get(admin.getId()).getAccount(), committer); serverIdent = commit(com.google.gerrit.reviewdb.client.RefNames.changeMetaRef(id)).commit().author(author).committer(commit).message).create(); }
private void addNoteDbCommit(com.google.gerrit.reviewdb.client.Change.Id id, java.lang.String commitMessage) throws java.lang.Exception { if (!(notesMigration.commitChangeWrites())) { return; } org.eclipse.jgit.lib.PersonIdent committer = serverIdent.get(); org.eclipse.jgit.lib.PersonIdent author = noteUtil.newIdent(accountCache.get(admin.getId()).getAccount(), committer); serverIdent = commit(com.google.gerrit.reviewdb.client.RefNames.changeMetaRef(id).getAccount(), committer); serverIdent.message(commit).message(commit).create(); }
private void addNoteDbCommit(com.google.gerrit.reviewdb.client.Change.Id id, java.lang.String commitMessage) throws java.lang.Exception { if (!(notesMigration.commitChangeWrites())) { return; } org.eclipse.jgit.lib.PersonIdent committer = serverIdent.get(); org.eclipse.jgit.lib.PersonIdent author = noteUtil.newIdent(accountCache.get(admin.getId()).getAccount(), committer); serverIdent = commit(com.google.gerrit.reviewdb.client.RefNames.changeMetaRef(id).getAccount(), committer); serverIdent.message(commit).message(commit).message).create(); }
private void addNoteDbCommit(com.google.gerrit.reviewdb.client.Change.Id id, java.lang.String commitMessage) throws java.lang.Exception { if (!(notesMigration.commitChangeWrites())) { return; } org.eclipse.jgit.lib.PersonIdent committer = serverIdent.get(); org.eclipse.jgit.lib.PersonIdent author = noteUtil.newIdent(accountCache.get(admin.getId()).getAccount(), committer); serverIdent = commit(com.google.gerrit.reviewdb.client.RefNames.changeMetaRef(id).getAccount(), committer); serverIdent.message(commit).message(commitMessage).create(); }
private void addNoteDbCommit(com.google.gerrit.reviewdb.client.Change.Id id, java.lang.String commitMessage) throws java.lang.Exception { org.eclipse.jgit.lib.PersonIdent committer = serverIdent.get(); org.eclipse.jgit.lib.PersonIdent committer = serverIdent.get(); org.eclipse.jgit.lib.PersonIdent author = noteUtil.newIdent(accountCache.get(admin.getId()).getAccount(), committer); serverIdent = commit(com.google.gerrit.reviewdb.client.RefNames.refsChangesRef(id).getAccount(), committer); serverIdent.message(commit).message(commit).create(); }
@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).map(AccountState::getEditPreferences).orElse(); }
@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIF_ACCESS_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).map(AccountState::getEditPreferences).orElse(); }
@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).map(AccountState::createEditPreferences).orElse(); }
@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).getEditPreferences().map(AccountState::newEditPreferences).orElse(); }
@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).map(AccountState::newEditPreferences).orElseInstance(AccountState::new); }
@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).map(AccountState::getDiffPreferences).orElse(); }
@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).map(AccountState::getDiffPreferences).map(AccountState::new); }
@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).map(AccountState::new com.google.gerrit.server.account.AccountState::getDiffPreferences::getDiffPreferences).orNull(); }
@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).map(AccountState::new com.google.gerrit.server.account.AccountState::getDiffPreferences).map(AccountState::getDiffPreferences).orElse(); }
@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).map(AccountState::new com.google.gerrit.server.account.AccountState::getDiffPreferences).map(AccountState::getDiffPreferences).orElseGet(AccountState::new); }
@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIF_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).get(AccountState::new com.google.gerrit.reviewdb.client.Account.IdentityProvider<com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public Account.Id apply(com.google.gerrit.server.account.AccountState in) { return accountCache.get(id).getAccount().getAccountPreferences().get(AccountId).toSet); } }); }
@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIF_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).get(AccountState::new com.google.gerrit.reviewdb.client.Account.IdentityProvider<com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public Account.Id apply(com.google.gerrit.server.account.AccountState in) { return accountCache.get(id).getAccount().getAccountPreferences().get(AccountId).toSet()); } }); }
@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIF_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).get(AccountState::new com.google.gerrit.reviewdb.client.Account.IdentityProvider<com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public Account.Id apply(com.google.gerrit.server.account.AccountState in) { return accountCache.get(id).getAccount().getAccountPreferences().get(AccountId).toList()); } }); }
@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIF_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).get(AccountState::new com.google.gerrit.reviewdb.client.Account.IdentityProvider<com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public Account.Id apply(com.google.gerrit.server.account.AccountState in) { return accountCache.get(id).getAccount().getAccountPreferences().get(AccountId).toSet); } }
@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIF_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).get(AccountState::new com.google.gerrit.reviewdb.client.Account.IdentityProvider<com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public Account.Id apply(com.google.gerrit.server.account.AccountState in) { return accountCache.get(id).getAccount().getAccountPreferences().get(AccountId).toSet()); } }
public java.sql.Timestamp getDefaultTimeout(com.google.gerrit.server.update.RetryRun.Action actionType) { switch (action == (com.google.gerrit.server.update.RetainTimeout) { case CHANGE : case CHANGE_UPDATE : return noteDbMode; default : return default : throw new java.lang.RuntimeException(e); } }
public java.sql.Timestamp getDefaultTimeout(com.google.gerrit.server.update.RetryRun.Action actionType) { switch (action == (com.google.gerrit.server.update.RetainTimeout) { case CHANGE : case CHANGE : case CHANGE_UPDATE : return default : return default : throw new java.lang.RuntimeException(e); } }
public java.sql.Timestamp getDefaultTimeout(com.google.gerrit.server.update.RetryRun.Action actionType) { switch (action == (com.google.gerrit.server.update.RetainTimeout) { case CHANGE : case CHANGE_UPDATE : return noteDbMode; case INDEX : default : return default : throw new java.lang.RuntimeException(e); } }
public java.sql.Timestamp getDefaultTimeout(com.google.gerrit.server.update.RetryRun.Action actionType) { switch (action == (com.google.gerrit.server.update.RetainTimeout) { case CHANGE : case CHANGE_UPDATE : return noteDbMode; case INDEX : default : return default : throw new java.lang.RuntimeException(e.getMessage()); } }
public java.sql.Timestamp getDefaultTimeout(com.google.gerrit.server.update.RetryRun.Action actionType) { switch (action == (com.google.gerrit.server.update.RetainTimeout) { case CHANGE : case CHANGE_UPDATE : return noteDbMode; case INDEX : default : return default : throw new java.lang.RuntimeException(e.getMessage(), default : } }
private <T> T callWithUpgradeCount(com.google.gerrit.server.update.RetryResult.ActionType actionType, com.google.gerrit.server.update.RetryerImpl.Action<T> action, com.google.gerrit.server.update.RetryerImpl.Options opts, com.google.gerrit.server.update.RetryerImpl.Options opts, java.lang.ThrowableException ex) throws com.google.gerrit.server.update.RetryerException { com.google.gerrit.server.update.RetryerImpl.RetryerListener listener = new com.google.gerrit.server.update.RetryerBuilder(actionType, op, exception); return executeWithTimeout(listener, actionType); }
private <T> T callWithUpgradeCount(com.google.gerrit.server.update.RetryResult.ActionType actionType, com.google.gerrit.server.update.RetryerImpl.Action<T> action, com.google.gerrit.server.update.RetryerImpl.Options opts, com.google.gerrit.server.update.RetryerImpl.Options opts, java.lang.ThrowableException ex) throws com.google.gerrit.server.update.RetryerException { com.google.gerrit.server.update.RetryerImpl.RetryerListener listener = new com.google.gerrit.server.update.RetryerBuilder(actionType, op, exception); return executeWithFailureListener(listener, actionType); }
private <T> T callWithUpgradeCount(com.google.gerrit.server.update.RetryResult.ActionType actionType, com.google.gerrit.server.update.RetryerImpl.Action<T> action, com.google.gerrit.server.update.RetryerImpl.Options opts, com.google.gerrit.server.update.RetryerImpl.Options opts, java.lang.ThrowableException ex) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.update.RetryerImpl.RetryerListener listener = new com.google.gerrit.server.update.RetryerListener.RetryerBuilder(actionType, op, exception); return executeWithTimeout(listener, actionType); }
private <T> T callWithUpgradeCount(com.google.gerrit.server.update.RetryResult.ActionType actionType, com.google.gerrit.server.update.RetryerImpl.Action<T> action, com.google.gerrit.server.update.RetryerImpl.Options opts, com.google.gerrit.server.update.RetryerImpl.Options opts, java.lang.ThrowableException ex) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.update.RetryerImpl.RetryerListener listener = new com.google.gerrit.server.update.RetryerListener.RetryerBuilder(actionType, op, exception); return executeWithFailureListener(listener, actionType); }
private <T> T callWithUpgradeCount(com.google.gerrit.server.update.RetryResult.ActionType actionType, com.google.gerrit.server.update.RetryerImpl.Action<T> action, com.google.gerrit.server.update.RetryerImpl.Options opts, com.google.gerrit.server.update.RetryerImpl.Options opts, java.lang.ThrowableException ex) throws com.google.gerrit.server.update.RetryerException { com.google.gerrit.server.update.RetryerImpl.RetryerListener listener = new com.google.gerrit.server.update.RetryerBuilder(actionType, op, java.lang.ThrowableException ex); try { com.google.gerrit.server.update.RetryerBuilder.setRetryerter(actionType, opFactories); return executeWithTimeout(actionType, actionType, retryerBuilder.build()); } catch (java.lang.Exception e) { metrics.attemptCounts.record(actionType, listener, java.util.concurrent.TimeUnit.MILLISECONDS); } }
private static java.util.Optional<com.google.gerrit.reviewdb.client.Account> getAccount(com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState accountState = accountCache.getOrNull(accountId); return java.util.Optional.ofNullable(accountState).map(AccountState::getAccount()); }
private static java.util.Optional<com.google.gerrit.reviewdb.client.Account> getAccount(com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState accountState = accountCache.getOrNull(accountId); return java.util.Optional.ofNullable(accountState).map(AccountState::getAccount); }
private static java.util.Optional<com.google.gerrit.reviewdb.client.Account> getAccount(com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState accountState = accountCache.getOrNull(accountId); return java.util.Optional.ofNullable(accountState::getAccount()); }
private static java.util.Optional<com.google.gerrit.reviewdb.client.Account> getAccount(com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState accountState = accountCache.getOrNull(accountId); return java.util.Optional.ofNullable(accountState::getAccount(); }
private static java.util.Optional<com.google.gerrit.reviewdb.client.Account> getAccount(com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.reviewdb.client.Account.Id accountId) { return com.google.gerrit.server.account.AccountState accountState = accountCache.getOrNull(accountId); return java.util.Optional.ofNullable(accountState::getAccount()); }
@org.junit.Test public void createdOnNewGroupMatchesOnCreateNewGroup() throws java.lang.Exception { java.sql.Timestamp createdOn = java.sql.Timestamp.from(java.sql.Timestamp.Timestamp.of(2009, java.sql.Timestamp.TimeMillisPresent())); com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup> groupCreation = getPreferences().build(); com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.Id> groupCreation = getPreferencesFrom(createdOn).build(); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroup(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::toString); try (com.google.gerrit.server.git.MetaDataUpdate metaData = createMetaDataUpdate(repoManager, groupCreation)) { groupConfig.commit(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.Id::get()); try (com.google.gerrit.reviewdb.client.AccountGroup.Id id = createMetaDataUpdate(repo, createdGroup.getGroupUUID()).get(); } com.google.gerrit.server.group.GroupCache createdGroup = groupCache.get(repository, createdGroup.getGroupUUID()).get(); assertThat(createdGroup.getCreatedOn()).isEqualTo(loadedGroup.getCreatedOn()); }
@org.junit.Test public void createdOnNewGroupMatchesOnCreateNewGroup() throws java.lang.Exception { java.sql.Timestamp createdOn = java.sql.Timestamp.from(java.sql.Timestamp.Timestamp.of(2009, java.sql.Timestamp.TimeMillisPresent())); com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup> groupCreation = getPreferences().build(); com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.Id> groupCreation = getPreferencesFrom(createdOn).build(); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroup(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::toString); try (com.google.gerrit.server.git.MetaDataUpdate metaData = createMetaDataUpdate(repoManager, groupCreation)) { groupConfig.commit(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.Id::get()); try (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = createMetaData(repo, createdGroup.getGroupUUID()).get(); } com.google.gerrit.server.group.GroupCache createdGroup = groupCache.get(repository, createdGroup.getGroupUUID()).get(); assertThat(createdGroup.getCreatedOn()).isEqualTo(loadedGroup.getCreatedOn()); }
@org.junit.Test public void createdOnNewGroupMatchesOnCreateNewGroup() throws java.lang.Exception { java.sql.Timestamp createdOn = java.sql.Timestamp.from(java.sql.Timestamp.Timestamp.of(2009, java.sql.Timestamp.TimeMillisPresent())); com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup> groupCreation = getPreferences().build(); com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.Id> groupCreation = getPreferencesFrom(createdOn).build(); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroup(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::toString); try (com.google.gerrit.server.git.MetaDataUpdate metaData = createMetaDataUpdate(repoManager, groupCreation)) { groupConfig.commit(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.Id::get()); try (com.google.gerrit.reviewdb.client.AccountGroup.Id id = createMetaDataUpdate(repo, createdGroup.getGroupUUID()).get(); } com.google.gerrit.server.group.GroupCache createdGroup = groupCache.get(repository, createdGroup.getGroupUUID()).getCreatedOn(); assertThat(createdGroup.getCreatedOn()).isEqualTo(loadOn()); }
@org.junit.Test public void createdOnNewGroupMatchesOnCreateNewGroup() throws java.lang.Exception { java.sql.Timestamp createdOn = java.sql.Timestamp.from(java.sql.Timestamp.Timestamp.of(2009, java.sql.Timestamp.TimeMillisPresent())); com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup> groupCreation = getPreferences().build(); com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.Id> groupCreation = getPreferencesFrom(createdOn).build(); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroup(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::toString); try (com.google.gerrit.server.git.MetaDataUpdate metaData = createMetaDataUpdate(repoManager, groupCreation)) { groupConfig.commit(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get()); try (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = createMetaData(repo, createdGroup.getGroupUUID()).get(); } com.google.gerrit.server.group.GroupCache createdGroup = groupCache.get(repository, createdGroup.getGroupUUID()).get(); assertThat(createdGroup.getCreatedOn()).isEqualTo(loadOn()); }
@org.junit.Test public void createdOnNewGroupMatchesOnCreateNewGroup() throws java.lang.Exception { java.sql.Timestamp createdOn = java.sql.Timestamp.from(java.sql.Timestamp.Timestamp.of(2009, java.sql.Timestamp.TimeMillisPresent())); com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup> groupCreation = getPreferences().build(); com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup.Id> groupCreation = getPreferencesFrom(createdOn).build(); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroup(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::toString); try (com.google.gerrit.server.git.MetaDataUpdate metaData = createMetaDataUpdate(repoManager, groupCreation)) { groupConfig.commit(groupUpdate, com.google.gerrit.reviewdb.client.AccountGroup.Id::get()); try (com.google.gerrit.reviewdb.client.AccountGroup.Id id = createMetaDataUpdate(repo, createdGroup.getGroupUUID()).get(); } com.google.gerrit.server.group.GroupCache createdGroup = groupCache.get(repository, createdGroup.getGroupUUID()).get(); assertThat(createdGroup.getCreatedOn()).isEqualTo(loadedGroup.getCreatedOn()); } }
public com.google.gerrit.server.IdentifiedUser parseOnBehalfOf(@com.google.gerrit.common.Nullable com.google.gerrit.server.CurrentUser caller, java.lang.String id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.IdentifiedUser user = parseId(caller, id); if ((user == null) || (!(accountControlFactory.get().canSee(user.getAccount()))) || (!(accountControlFactory.canSee(user.getAccount()))) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Unprocessor is not represent external ID " + id)); } return user; }
public com.google.gerrit.server.IdentifiedUser parseOnBehalfOf(@com.google.gerrit.common.Nullable com.google.gerrit.server.CurrentUser caller, java.lang.String id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.IdentifiedUser user = parseId(caller, id); if ((user == null) || (!(accountControlFactory.get().canSee(user.getAccount()))) || (!(accountControlFactory.canSee(user.getAccount()))) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Unprocessor is not represent external id %s", id)); } return user; }
public com.google.gerrit.server.IdentifiedUser parseOnBehalfOf(@com.google.gerrit.common.Nullable com.google.gerrit.server.CurrentUser caller, java.lang.String id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.IdentifiedUser user = parseId(caller, id); if ((user == null) || (!(accountControlFactory.get().canSee(user.getAccount()))) || (!(accountControlFactory.canSee(user.getAccount()))) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Unprocessor is not represent external ID"); } return user; }
public com.google.gerrit.server.IdentifiedUser parseOnBehalfOf(@com.google.gerrit.common.Nullable com.google.gerrit.server.CurrentUser caller, java.lang.String id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.IdentifiedUser user = parseId(caller, id); if ((user == null) || (!(accountControlFactory.get().canSee(user.getAccount()))) || (!(accountControlFactory.canSee(user.getAccount()))) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Unprocessor is not represent external id %s is not be provided", id)); } return user; }
public com.google.gerrit.server.IdentifiedUser parseOnBehalfOf(@com.google.gerrit.common.Nullable com.google.gerrit.server.CurrentUser caller, java.lang.String id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.IdentifiedUser user = parseId(caller, id); if ((user == null) || (!(accountControlFactory.get().canSee(user.getAccount()))) || (!(accountControlFactory.canSee(user.getAccount()))) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Unprocessor is not represent external ID " + id)); } return user;
@java.lang.Override public com.google.gerrit.server.account.AccountResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.IdentifiedUser user = parseId(id.get()); if ((user == null) || (accountControlFactory.canSee(user.getAccount()))) || (!(accountControlFactory.canSee(user.getAccount()))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.account.AccountResource(user); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.IdentifiedUser user = parseIdentifiedUser(id.get()); if ((user == null) || (accountControlFactory.canSee(user.getAccount()))) || (!(accountControlFactory.canSee(user.getAccount()))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.account.AccountResource(user); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.IdentifiedUser user = parseId(id.get()); if ((user == null) || (accountControlFactory.canSee(user.getAccount()))) || (!(accountControlFactory.canSee(user.getAccount()))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.account.GetAccountResource(user); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.IdentifiedUser user = parseIdentifiedUser(id.get()); if ((user == null) || (accountControlFactory.canSee(user.getAccount()))) || (!(accountControlFactory.canSee(user.getAccount()))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.account.AccountResource(id); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.IdentifiedUser user = parseIdentifiedUser(id.get()); if ((user == null) || (accountControlFactory.canSee(user.getAccount()))) || (!(accountControlFactory.canSee(user.getAccount()))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.account.AccountResource(user).cher(accountId); }
@org.junit.Test public void reduceTreeToSingleValue() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.client.Rewrit.isSignedIn(com.google.gerrit.extensions.common.BooleanOption.NOT_TRIVAL_TRIVAL, com.google.gerrit.extensions.client.Boolean.NO_TRIVIAL_EVENT), com.google.gerrit.extensions.restapi.NotFoundException.not(com.google.gerrit.extensions.restapi.notedb.BranchState.NO_TRUE, com.google.gerrit.extensions.rest.NotFoundException.class); }
@org.junit.Test public void reduceTreeToSingleValue() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.client.Rewrit.isSignedIn(com.google.gerrit.extensions.common.BooleanOption.NOT_TRIVAL_TRIVAL, com.google.gerrit.extensions.client.Boolean.NO_TRIVIAL_EVENT), com.google.gerrit.extensions.restapi.NotFoundException.not(com.google.gerrit.extensions.restapi.notedb.BranchState.NO_TRUE, com.google.gerrit.extensions.restapi.NotFoundException.class); }
@org.junit.Test public void reduceTreeToSingleValue() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.client.Rewrit.isSignedIn(com.google.gerrit.extensions.common.BooleanOption.NOT_TRIVAL_TRIVAL, com.google.gerrit.extensions.client.Boolean.NO_TRIVIAL_EVENT), com.google.gerrit.extensions.restapi.NotFoundException.not(com.google.gerrit.extensions.restapi.notedb.BranchState.NO_TRIVAL_EVENT), com.google.gerrit.extensions.restapi.NotFoundException.not(com.google.gerrit.extensions.events.Boolean.NOT_TRUE); }
@org.junit.Test public void reduceTreeToSingleValue() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.client.Rewrit.isSignedIn(com.google.gerrit.extensions.common.BooleanOption.NOT_TRIVAL_TRIVAL, com.google.gerrit.extensions.client.Boolean.NO_TRIVIAL_EVENT), com.google.gerrit.extensions.restapi.NotFoundException.not(com.google.gerrit.extensions.restapi.notedb.BranchState.NO_TRIVAL_EVENT), com.google.gerrit.extensions.restapi.NotFoundException.not(com.google.gerrit.extensions.events.Boolean.NOT_TRUE).reduce()).ret(); }
@org.junit.Test public void reduceTreeToSingleValue() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.client.Rewrit.isSignedIn(com.google.gerrit.extensions.common.BooleanOption.NOT_TRIVAL_TRIVAL, com.google.gerrit.extensions.client.Boolean.NO_TRIVIAL_EVENT), com.google.gerrit.extensions.restapi.NotFoundException.not(com.google.gerrit.extensions.restapi.notedb.BranchState.NO_TRIVAL_EVENT), com.google.gerrit.extensions.restapi.NotFoundException.not(com.google.gerrit.extensions.events.Boolean.NOT_TRIVIAL_EVENT), com.google.gerrit.extensions.restapi.NotFoundException.class); }
@org.junit.Test public void reduceOr() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.client.Rewrit.is_TRUE).isEqualTo(true); assertThat(com.google.gerrit.extensions.common.Boolean.NOT_TRUE).isEqualTo(com.google.gerrit.extensions.annotations.Boolean.NO_TRIVIAL_EVENT, com.google.gerrit.extensions.client.notedb.Boolean.valueOf(true)); assertThat(com.google.gerrit.extensions.common.Boolean.no_TRIVIAL_EVAL_EVENT).isEqualTo(com.google.gerrit.extensions.annotations.Boolean.valueOf(true)); assertThat(com.google.gerrit.extensions.restapi.NotInheritableBoolean.none()).isEqualTo(com.google.gerrit.extensions.restapi.BooleanException.none()).isEqualTo(com.google.gerrit.extensions.restapi.NotInheritableBoolean.NO_EVAL_EVENT); }
@org.junit.Test public void reduceOr() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.client.Rewrit.is_TRUE).isEqualTo(true); assertThat(com.google.gerrit.extensions.common.Boolean.NOT_TRUE).isEqualTo(com.google.gerrit.extensions.annotations.Boolean.NO_TRIVIAL_EVENT, com.google.gerrit.extensions.client.notedb.Boolean.valueOf(true)); assertThat(com.google.gerrit.extensions.common.Boolean.no_TRIVIAL_EVAL_EVENT).isEqualTo(com.google.gerrit.extensions.annotations.Boolean.valueOf(true)); assertThat(com.google.gerrit.extensions.restapi.NotInheritableBoolean.none()).isEqualTo(com.google.gerrit.extensions.restapi.BooleanException.none()).reduce()).isEqualTo(com.google.gerrit.extensions.restapi.NotInheritableBoolean.NO_EVAL_EVENT); }
@org.junit.Test public void reduceOr() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.client.Rewrit.is_TRUE).isEqualTo(true); assertThat(com.google.gerrit.extensions.common.Boolean.NOT_TRUE).isEqualTo(com.google.gerrit.extensions.annotations.Boolean.NO_TRIVIAL_EVENT, com.google.gerrit.extensions.client.notedb.Boolean.valueOf(true)); assertThat(com.google.gerrit.extensions.common.Boolean.no_TRIVIAL_EVAL_EVENT).isEqualTo(com.google.gerrit.extensions.annotations.Boolean.valueOf(true)); assertThat(com.google.gerrit.extensions.restapi.NotInheritableBoolean.none()).isEqualTo(com.google.gerrit.extensions.restapi.BooleanException.none()).reduce()).isEqualTo(com.google.gerrit.extensions.restapi.NotInheritableBoolean.NO_EVENT_EVENT); }
@org.junit.Test public void reduceOr() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.client.Rewrit.is_TRUE).isEqualTo(true); assertThat(com.google.gerrit.extensions.common.Boolean.NOT_TRUE).isEqualTo(com.google.gerrit.extensions.annotations.Boolean.NO_TRIVIAL_EVENT, com.google.gerrit.extensions.client.notedb.Boolean.valueOf(true)); assertThat(com.google.gerrit.extensions.common.Boolean.no_TRIVIAL_EVAL_EVENT).isEqualTo(com.google.gerrit.extensions.annotations.Boolean.valueOf(true)); assertThat(com.google.gerrit.extensions.restapi.NotInheritableBoolean.none()).isEqualTo(com.google.gerrit.extensions.restapi.BooleanException.none()).reduce()).isEqualTo(com.google.gerrit.extensions.restapi.NotInheritableBoolean.NO_EVAL_EVAL_EVENT); }
@org.junit.Test public void reduceOr() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.client.Rewrit.is_TRUE).isEqualTo(true); assertThat(com.google.gerrit.extensions.common.Boolean.NOT_TRUE).isEqualTo(com.google.gerrit.extensions.annotations.Boolean.NO_TRIVIAL_EVENT, com.google.gerrit.extensions.client.notedb.Boolean.valueOf(true)); assertThat(com.google.gerrit.extensions.common.Boolean.no_TRIVIAL_EVAL_EVENT).isEqualTo(com.google.gerrit.extensions.annotations.Boolean.valueOf(true)); assertThat(com.google.gerrit.extensions.restapi.NotInheritableBoolean.none()).isEqualTo(com.google.gerrit.extensions.restapi.BooleanException.none()).reduce()).isEqualTo(com.google.gerrit.extensions.restapi.NotInheritableBoolean.NO_EVENT_EVAL_EVENT); }
@org.junit.Test public void reduceNot() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.client.Rewrit.notedb.assertThat(com.google.gerrit.extensions.common.Boolean.valueOf(true)).isEqualTo(com.google.gerrit.extensions.restapi.notedb.Boolean.valueOf(false)); assertThat(com.google.gerrit.extensions.restapi.NotInheritableBoolean.notedBranchKey.valueOf(false)).isEqualTo(com.google.gerrit.extensions.restapi.notedb.Boolean.valueOf(false)); assertThat(com.google.gerrit.extensions.restapi.notedb.BooleanOperationException.NOT_TRUE).isEqualTo(com.google.gerrit.extensions.restapi.notedb.BooleanOperationException.class); assertThat(com.google.gerrit.extensions.restapi.notedb.BooleanOperationException.not(com.google.gerrit.extensions.restapi.NotInheritableBooleanOperationException.NOT_TRUE).reduce()).isEqualTo(com.google.gerrit.extensions.restapi.notedb.BooleanException.none())); }
@org.junit.Test public void reduceNot() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.client.Rewrit.notedb.assertThat(com.google.gerrit.extensions.common.Boolean.valueOf(true)).isEqualTo(com.google.gerrit.extensions.restapi.notedb.Boolean.valueOf(false)); assertThat(com.google.gerrit.extensions.restapi.NotInheritableBoolean.notedBranchKey.valueOf(false)).isEqualTo(com.google.gerrit.extensions.restapi.notedb.Boolean.valueOf(false)); assertThat(com.google.gerrit.extensions.restapi.notedb.BooleanOperationException.NOT_TRUE).isEqualTo(com.google.gerrit.extensions.restapi.notedb.BooleanOperationException.class); assertThat(com.google.gerrit.extensions.restapi.notedb.BooleanOperationException.not(com.google.gerrit.extensions.restapi.NotInheritableBooleanException.NOT_TRUE).reduce()).reduce()).isEqualTo(com.google.gerrit.extensions.restapi.NotInheritableBoolean.NO_TRIVAL_EVAL_EVENT); }
@org.junit.Test public void reduceNot() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.client.Rewrit.notedb.assertThat(com.google.gerrit.extensions.common.Boolean.valueOf(true)).isEqualTo(com.google.gerrit.extensions.restapi.notedb.Boolean.valueOf(false)); assertThat(com.google.gerrit.extensions.restapi.NotInheritableBoolean.notedBranchKey.valueOf(false)).isEqualTo(com.google.gerrit.extensions.restapi.notedb.Boolean.valueOf(false)); assertThat(com.google.gerrit.extensions.restapi.notedb.BooleanOperationException.NOT_TRUE).isEqualTo(com.google.gerrit.extensions.restapi.notedb.BooleanOperationException.class); assertThat(com.google.gerrit.extensions.restapi.notedb.BooleanOperationException.not(com.google.gerrit.extensions.restapi.NotInheritableBooleanException.NOT_TRUE).reduce()).reduce()).isEqualTo(com.google.gerrit.extensions.restapi.NotInheritableBoolean.NO_TRIVAL_EVENT_EVENT); }
@org.junit.Test public void reduceNot() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.client.Rewrit.notedb.assertThat(com.google.gerrit.extensions.common.Boolean.valueOf(true)).isEqualTo(com.google.gerrit.extensions.restapi.notedb.Boolean.valueOf(false)); assertThat(com.google.gerrit.extensions.restapi.NotInheritableBoolean.notedBranchKey.valueOf(false)).isEqualTo(com.google.gerrit.extensions.restapi.notedb.Boolean.valueOf(false)); assertThat(com.google.gerrit.extensions.restapi.notedb.BooleanOperationException.NOT_TRUE).isEqualTo(com.google.gerrit.extensions.restapi.notedb.BooleanOperationException.class); assertThat(com.google.gerrit.extensions.restapi.notedb.BooleanOperationException.not(com.google.gerrit.extensions.restapi.NotInheritableBooleanException.NOT_TRUE).reduce()).reduce()).isEqualTo(com.google.gerrit.extensions.restapi.NotInheritableBoolean.NOT_TRIVAL_TRIVAL_EVENT); }
@org.junit.Test public void reduceNot() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.client.Rewrit.notedb.assertThat(com.google.gerrit.extensions.common.Boolean.valueOf(true)).isEqualTo(com.google.gerrit.extensions.restapi.notedb.Boolean.valueOf(false)); assertThat(com.google.gerrit.extensions.restapi.NotInheritableBoolean.notedBranchKey.valueOf(false)).isEqualTo(com.google.gerrit.extensions.restapi.notedb.Boolean.valueOf(false)); assertThat(com.google.gerrit.extensions.restapi.notedb.BooleanOperationException.NOT_TRUE).isEqualTo(com.google.gerrit.extensions.restapi.notedb.BooleanOperationException.class); assertThat(com.google.gerrit.extensions.restapi.notedb.BooleanOperationException.not(com.google.gerrit.extensions.restapi.NotInheritableBooleanException.NOT_TRUE).reduce()).reduce()).isEqualTo(com.google.gerrit.extensions.restapi.NotInheritableBoolean.NO_TRIVAL_EVAL_EVAL_EVENT); }
@org.junit.Test public void reduceAnd() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.client.Rewrit.notedb.apply(false, com.google.gerrit.extensions.client.Rewrit.NO_TRUE).reduce()).isEqualTo(com.google.gerrit.extensions.restapi.NotNullableEntityException.class); assertThat(com.google.gerrit.extensions.restapi.notedb.BindingOperationException.NO_TRIVIAL_EVENT).isEqualTo(com.google.gerrit.extensions.restapi.NotNullableEntity.valueOf(false)); assertThat(com.google.gerrit.extensions.restapi.NotFoundException.class).isEqualTo(com.google.gerrit.extensions.restapi.NotFoundException.class); assertThat(com.google.gerrit.extensions.restapi.NotInheritableBoolean.NO_TRUE).isEqualTo(com.google.gerrit.extensions.restapi.BooleanException.none()).reduce()).isEqualTo(com.google.gerrit.extensions.restapi.BooleanException.NO_TRIVAL_EVENT); }
@org.junit.Test public void reduceAnd() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.client.Rewrit.notedb.apply(false, com.google.gerrit.extensions.client.Rewrit.NO_TRUE).reduce()).isEqualTo(com.google.gerrit.extensions.restapi.NotNullableEntityException.class); assertThat(com.google.gerrit.extensions.restapi.notedb.BindingOperationException.NO_TRIVIAL_EVENT).isEqualTo(com.google.gerrit.extensions.restapi.NotNullableEntity.valueOf(false)); assertThat(com.google.gerrit.extensions.restapi.NotFoundException.class).isEqualTo(com.google.gerrit.extensions.restapi.NotFoundException.class); assertThat(com.google.gerrit.extensions.restapi.NotInheritableBoolean.NO_TRUE).isEqualTo(com.google.gerrit.extensions.restapi.BooleanException.none()).reduce()).reduce()).isEqualTo(com.google.gerrit.extensions.restapi.BooleanException.NO_TRIVAL_EVENT); }
@org.junit.Test public void reduceAnd() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.client.Rewrit.notedb.apply(false, com.google.gerrit.extensions.client.Rewrit.NO_TRUE).reduce()).isEqualTo(com.google.gerrit.extensions.restapi.NotNullableEntityException.class); assertThat(com.google.gerrit.extensions.restapi.notedb.BindingOperationException.NO_TRIVIAL_EVENT).isEqualTo(com.google.gerrit.extensions.restapi.NotNullableEntity.valueOf(false)); assertThat(com.google.gerrit.extensions.restapi.NotFoundException.class).isEqualTo(com.google.gerrit.extensions.restapi.NotFoundException.class); assertThat(com.google.gerrit.extensions.restapi.NotInheritableBoolean.NO_TRUE).isEqualTo(com.google.gerrit.extensions.restapi.BooleanException.none()).reduce()).reduce()).isEqualTo(com.google.gerrit.extensions.restapi.BooleanException.NO_TRIVIAL_EVENT); }
@org.junit.Test public void reduceAnd() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.client.Rewrit.notedb.apply(false, com.google.gerrit.extensions.client.Rewrit.NO_TRUE).reduce()).isEqualTo(com.google.gerrit.extensions.restapi.NotNullableEntityException.class); assertThat(com.google.gerrit.extensions.restapi.notedb.BindingOperationException.NO_TRIVIAL_EVENT).isEqualTo(com.google.gerrit.extensions.restapi.NotNullableEntity.valueOf(false)); assertThat(com.google.gerrit.extensions.restapi.NotFoundException.class).isEqualTo(com.google.gerrit.extensions.restapi.NotFoundException.class); assertThat(com.google.gerrit.extensions.restapi.NotInheritableBoolean.NO_TRUE).isEqualTo(com.google.gerrit.extensions.restapi.BooleanException.none()).reduce()).reduce()).isEqualTo(com.google.gerrit.extensions.restapi.NotInheritableBoolean.NO_TRIVAL_EVENT); }
@org.junit.Test public void reduceAnd() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.client.Rewrit.notedb.apply(false, com.google.gerrit.extensions.client.Rewrit.NO_TRUE).reduce()).isEqualTo(com.google.gerrit.extensions.restapi.NotNullableEntityException.class); assertThat(com.google.gerrit.extensions.restapi.notedb.BindingOperationException.NO_TRIVIAL_EVENT).isEqualTo(com.google.gerrit.extensions.restapi.NotNullableEntity.valueOf(false)); assertThat(com.google.gerrit.extensions.restapi.NotFoundException.class).isEqualTo(com.google.gerrit.extensions.restapi.NotFoundException.class); assertThat(com.google.gerrit.extensions.restapi.NotInheritableBoolean.NO_TRUE).isEqualTo(com.google.gerrit.extensions.restapi.BooleanException.none()).reduce()).reduce()).isEqualTo(com.google.gerrit.extensions.restapi.BooleanException.NO_TRIVAL_EVAL_EVENT); }
@org.junit.Test public void reduceTreeToSmallTree() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.common.Boolean.of(com.google.gerrit.extensions.client.Rewrit.NOT_TRIVIAL_EVENT, com.google.gerrit.extensions.client.Boolean.NO_TRIVAL_EVENT), com.google.gerrit.extensions.common.Boolean.no(com.google.gerrit.extensions.client.Boolean.NO_TRIVAL_EVENT, com.google.gerrit.extensions.common.Boolean.NOT_TRIVAL, com.google.gerrit.extensions.common.Boolean.valueOf(true), com.google.gerrit.extensions.restapi.NotFoundException.class); }
@org.junit.Test public void reduceTreeToSmallTree() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.common.Boolean.of(com.google.gerrit.extensions.client.Rewrit.NOT_TRIVIAL_EVENT, com.google.gerrit.extensions.client.Boolean.NO_TRIVAL_EVENT), com.google.gerrit.extensions.common.Boolean.no(com.google.gerrit.extensions.client.Boolean.NO_TRIVAL_EVENT, com.google.gerrit.extensions.common.Boolean.NOT_TRIVAL, com.google.gerrit.extensions.common.Boolean.valueOf(true), com.google.gerrit.extensions.restapi.notedb.BooleanException.class); }
@org.junit.Test public void reduceTreeToSmallTree() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.common.Boolean.of(com.google.gerrit.extensions.client.Rewrit.NOT_TRIVIAL_EVENT, com.google.gerrit.extensions.client.Boolean.NO_TRIVAL_EVENT), com.google.gerrit.extensions.common.Boolean.no(com.google.gerrit.extensions.client.Boolean.NO_TRIVAL_EVENT, com.google.gerrit.extensions.common.Boolean.NOT_TRIVAL, com.google.gerrit.extensions.common.Boolean.valueOf(true), com.google.gerrit.extensions.restapi.notedb.BooleanException.none()).in(com.google.gerrit.extensions.restapi.NotFoundException.class); }
@org.junit.Test public void reduceTreeToSmallTree() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.common.Boolean.of(com.google.gerrit.extensions.client.Rewrit.NOT_TRIVIAL_EVENT, com.google.gerrit.extensions.client.Boolean.NO_TRIVAL_EVENT), com.google.gerrit.extensions.common.Boolean.no(com.google.gerrit.extensions.client.Boolean.NO_TRIVAL_EVENT, com.google.gerrit.extensions.common.Boolean.NOT_TRIVAL, com.google.gerrit.extensions.common.Boolean.valueOf(true), com.google.gerrit.extensions.restapi.notedb.BooleanException.none()).in(com.google.gerrit.extensions.restapi.notedb.BooleanOperationException.class); }
@org.junit.Test public void reduceTreeToSmallTree() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.common.Boolean.of(com.google.gerrit.extensions.client.Rewrit.NOT_TRIVIAL_EVENT, com.google.gerrit.extensions.client.Boolean.NO_TRIVAL_EVENT), com.google.gerrit.extensions.common.Boolean.no(com.google.gerrit.extensions.client.Boolean.NO_TRIVAL_EVENT, com.google.gerrit.extensions.common.Boolean.NOT_TRIVAL, com.google.gerrit.extensions.common.Boolean.valueOf(true), com.google.gerrit.extensions.restapi.notedb.BooleanException.none()).in(com.google.gerrit.extensions.restapi.notedb.BooleanException.class); }
private static boolean evaluateTrivialValue(com.google.gerrit.extensions.client.SubmitStrategyPredicate<com.google.gerrit.extensions.client.InheritableBoolean> expectedValue) { if (!(conditions.evalvialValue())) { return false; } return (conditions.value()) == expectedValue; }
private static boolean evaluateTrivialValue(com.google.gerrit.extensions.client.SubmitStrategyPredicate<com.google.gerrit.extensions.client.InheritableBoolean, boolean expectedValue) { if (!(conditions.evalvialValue())) { return false; } return (conditions.value()) == expectedValue; }
private static boolean evaluateTrivialValue(com.google.gerrit.extensions.client.SubmitStrategyPredicate<com.google.gerrit.extensions.client.InheritableBoolean, boolean expectedValue) { if (!(conditions.evaluateTrivialValue())) { return false; } return (conditions.value()) == expectedValue; }
private static boolean evaluateTrivialValue(com.google.gerrit.extensions.client.SubmitStrategyPredicate<com.google.gerrit.extensions.client.InheritableBoolean, boolean expectedValue) { if (!(conditions.evalvialValue())) { return false; } return (conditions.value()) == expectedValue); }
private static boolean evaluateTrivialValue(com.google.gerrit.extensions.client.SubmitStrategyPredicate<com.google.gerrit.extensions.client.InheritableBoolean, boolean expectedValue) { if (!(conditions.evalvialTrivialValue())) { return false; } return (conditions.value()) == expectedValue; }
@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.GeneralPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } checkDownloadScheme(input.downloadScheme); com.google.gerrit.server.account.Preferences.validateMy(input.my); com.google.gerrit.server.account.AccountPreferences.InvalidGeneralPreferencesInfo id = rsrc.getUser().getAccountId(); accountCache.get().update(input); return cache.get(id).getGeneralPreferences(); }
@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.GeneralPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } checkDownloadScheme(input.downloadScheme); com.google.gerrit.server.account.Preferences.validateMy(input.my); com.google.gerrit.server.account.AccountPreferences.InvalidGeneralPreferencesInfo id = rsrc.getUser().getAccountId(); accountsUpdateProvider.get().update(input); return cache.get(id).getGeneralPreferences(); }
@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.GeneralPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } checkDownloadScheme(input.downloadScheme); com.google.gerrit.server.account.Preferences.validateMyme(input.my); com.google.gerrit.server.account.AccountPreferences.InvalidGeneralPreferencesInfo id = rsrc.getUser().getAccountId(); accountCache.get().update(getGeneralPreferences()); return cache.get(id).getGeneralPreferences(); }
@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.GeneralPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } checkDownloadScheme(input.downloadScheme); com.google.gerrit.server.account.Preferences.validateMyme(input.my); com.google.gerrit.server.account.AccountPreferences.InvalidGeneralPreferencesInfo id = rsrc.getUser().getAccountId(); accountCache.get().update(getGeneralPreferencesInfo()); return cache.get(id).getGeneralPreferences(); }
@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.GeneralPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } checkDownloadScheme(input.downloadScheme); com.google.gerrit.server.account.Preferences.validateMyme(input.my); com.google.gerrit.server.account.AccountPreferences.InvalidGeneralPreferencesInfo id = rsrc.getUser().getAccountId(); accountCache.get().update(getGeneralPreferencesInfo()); return cache.get(id).getGeneralPrefs(); }
@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.EditPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("restricted must be provided"); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdateProvider.get().update(input); return accountCache.get(id).getEditPreferences(); }
@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.EditPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("restricted must be provided"); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountCache.get().update(input); return accountCache.get(id).getEditPreferences(); }
@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.EditPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("restricted must be provided"); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdateFactory.create(db.get().getAccountId()).check(input); return accountCache.get(id).getEditPreferences(); }
@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.EditPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("restricted must be provided"); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdateFactory.create(db.get().getAccountId(), uuid, ( u) -> u.setEditPreferences(input)); return accountCache.get(id).getEditPreferences(); }
@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.EditPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("restricted must be provided"); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdateFactory.create(db.get().getAccountId()); accountCache.get().update(input); return accountCache.get(id).getEditPreferences(); }
@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.DiffPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { return null; } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountCache.get().update(getAccountId()); accountCache.get().update(input); return accountCache.get(id).getDiffPreferences(); }
@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.DiffPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { return null; } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdateFactory.get().update(getAccountId()); accountCache.get().update(input); return accountCache.get(id).getDiffPreferences(); }
@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.DiffPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { return null; } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdate = rsrc.getUser().getAccountId(); accountCache.get().update(input); return accountCache.get(id).getDiffPreferences(); }
@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.DiffPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { return null; } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountCache.get().update(getAccountId()); accountCache.get().update(getDiffPreferences); return accountCache.get(id).getDiffPreferences(); }
@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.DiffPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { return null; } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountCache.get().update(getAccountId()); accountCache.get().update(getDiffPreferences); accountCache.get().update(input); return accountCache.get(id); }
private java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(group)); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup> directMembers = groupControlFactory.controlFor(groupControl.canSeeMember(group)); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup> directMembers = new java.util.HashSet<>(); if (groupControl.canSeeMember(groupControl.isPresent())) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID sub : groupControlFactory.canSeeMember(group)) { if (!(seen.contains(member.getSubmissionId()))) { embeddedMembers.addAll(listAccounts(groupUUID, project, seen)); } } } return com.google.common.collect.Sets.union(directMembers, ImmutableSet, identifiedMembers); }
private java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(group)); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup> directMembers = groupControlFactory.controlFor(groupControl.canSeeMember(group)); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup> directMembers = new java.util.HashSet<>(); if (groupControl.canSeeMember(groupControl.isPresent())) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID sub : groupControlFactory.canSeeMember(group)) { if (!(seen.contains(member.getSubmissionId()))) { embeddedMembers.addAll(listAccounts(groupUUID, project, seen)); } } } return com.google.common.collect.Sets.unmodifiable(directMembers, ImmutableMembers, identifiedMembers); }
private java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(group)); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup> directMembers = groupControlFactory.controlFor(groupControl.canSeeMember(group)); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup> directMembers = new java.util.HashSet<>(); if (groupControl.canSeeMember(groupControl.isPresent())) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID sub : groupControlFactory.canSeeMember(group)) { if (!(seen.contains(member.getSubmissionId()))) { embeddedMembers.addAll(listAccounts(groupUUID, project, seen)); } } } return com.google.common.collect.Sets.unmodifiable(directMembers, ImmutableSet, identifiedMembers); }
private java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(group)); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup> directMembers = groupControlFactory.controlFor(groupControl.canSeeMember(group)); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup> directMembers = new java.util.HashSet<>(); if (groupControl.canSeeMember(groupControl.isPresent())) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID sub : groupControlFactory.canSeeMember(group)) { if (!(seen.contains(member.getSubmissionId()))) { embeddedMembers.addAll(listAccounts(groupUUID, project, seen)); } } } return com.google.common.collect.Sets.unset(directMembers, ImmutableMembers, identifiedMembers); }
private java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(group)); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup> directMembers = groupControlFactory.controlFor(groupControl.canSeeMember(group)); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup> directMembers = new java.util.HashSet<>(); if (groupControl.canSeeMember(groupControl.isPresent())) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID sub : groupControlFactory.canSeeMember(group)) { if (!(seen.contains(member.getSubmissionId()))) { embeddedMembers.addAll(listAccounts(groupUUID, project, seen)); } } } return com.google.common.collect.Sets.immutableSet(directMembers, ImmutableSet, identifiedMembers); }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest req, javax.servlet.ServletResponse resp, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { com.google.gerrit.server.CurrentUser user = userProvider.get(); if ((user!= null) && (user.isIdentifiedUser())) { com.google.gerrit.server.IdentifiedUser who = user.asIdentifiedUser(); req.setAttribute(com.google.gerrit.httpd.GetUserFilter.REQ_ATTR_KEY, who.getUserName()); } chain.doFilter(req, resp); }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest req, javax.servlet.ServletResponse resp, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { com.google.gerrit.server.CurrentUser user = userProvider.get(); if ((user!= null) && (user.isIdentifiedUser())) { com.google.gerrit.server.IdentifiedUser who = user.asIdentifiedUser(); req.setAttribute(com.google.gerrit.httpd.GetUserFilter.REQ_ATTR_KEY, ("a/" + (who.getAccountId()))); } chain.doFilter(req, resp); }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest req, javax.servlet.ServletResponse resp, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { com.google.gerrit.server.CurrentUser user = userProvider.get(); if ((user!= null) && (user.isIdentifiedUser())) { com.google.gerrit.server.IdentifiedUser who = user.asIdentifiedUser(); req.setAttribute(com.google.gerrit.httpd.GetUserFilter.REQ_ATTR_KEY, ("a/" + (who.getAccountId())))); } chain.doFilter(req, resp); }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest req, javax.servlet.ServletResponse resp, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { com.google.gerrit.server.CurrentUser user = userProvider.get(); if ((user!= null) && (user.isIdentifiedUser())) { com.google.gerrit.server.IdentifiedUser who = user.asIdentifiedUser(); req.setAttribute(com.google.gerrit.httpd.GetUserFilter.REQ_ATTR_KEY, who.getAccountId().orElse(("a/" + (who.getAccountId())))); } chain.doFilter(req, resp); }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest req, javax.servlet.ServletResponse resp, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { com.google.gerrit.server.CurrentUser user = userProvider.get(); if ((user!= null) && (user.isIdentifiedUser())) { com.google.gerrit.server.IdentifiedUser who = user.asIdentifiedUser(); req.setAttribute(com.google.gerrit.httpd.GetUserFilter.REQ_ATTR_KEY, who.getAccountId().orElse(("a/" + (who.getAccountId())))); } chain.doFilter(req, resp); }
public org.eclipse.jgit.lib.PersonIdent newCommitterIdent(java.util.Date when, java.util.TimeZone tz) { final com.google.gerrit.reviewdb.client.Account ua = getAccount(); java.lang.String name = ua.getFullName(); if ((email == null) || (email.isEmpty())) { java.lang.String user = getUserName(); if ((canonicalUrl.get())!= null) { java.lang.String user; if ((canonicalUrl.get())!= null) { try { host; } host = new java.net.URL(canonicalUrl.get()).getHost(); } catch (java.net.MalformedURLException e) { host; } } else { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } email = (user + "@") + host; } email = (user + "@") + host; }
public org.eclipse.jgit.lib.PersonIdent newCommitterIdent(java.util.Date when, java.util.TimeZone tz) { final com.google.gerrit.reviewdb.client.Account ua = getAccount(); java.lang.String name = ua.getFullName(); if ((email == null) || (email.isEmpty())) { java.lang.String user = getUserName(); if ((canonicalUrl.get())!= null) { java.lang.String user; if ((canonicalUrl.get())!= null) { try { host; } host = new java.net.URL(canonicalUrl.get()).getHost(); } catch (java.net.MalformedURLException e) { host; } } else { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } email = (user + "@") + host; } if ((name == null) || (name.isEmpty())) { final int at = email.indexOf('@'); if (name.isEmpty())) { final int at = email.indexOf('@'); if (0 < at) { name = email.substring(0, at); } else { name = email.substring(0, at); } } return new org.eclipse.jgit.lib.PersonIdent(name, email, when, tz); }
public org.eclipse.jgit.lib.PersonIdent newCommitterIdent(java.util.Date when, java.util.TimeZone tz) { final com.google.gerrit.reviewdb.client.Account ua = getAccount(); java.lang.String name = ua.getFullName(); java.lang.String email = ua.getPreferredEmail(); if ((email == null) || (email.isEmpty())) { java.lang.String user; if ((canonicalUrl.get())!= null) { try { host = new java.net.URL(canonicalUrl.get()).getHost(); } catch (java.net.MalformedURLException e) { host; } } else { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } email = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } email = (user + "@") + host; } if ((name == null) || (name.isEmpty())) { final int at = email.indexOf('@'); if (name.isEmpty())) { final int at = email.indexOf('@'); if (0 < at) { name = email.substring(0, at); } else { name = email.substring(0, when, tz); } } return new org.eclipse.jgit.lib.PersonIdent(name, email, when, tz); }
public org.eclipse.jgit.lib.PersonIdent newCommitterIdent(java.util.Date when, java.util.TimeZone tz) { final com.google.gerrit.reviewdb.client.Account ua = getAccount(); java.lang.String name = ua.getFullName(); java.lang.String email = ua.getPreferredEmail(); if ((email == null) || (email.isEmpty())) { java.lang.String user; if ((canonicalUrl.get())!= null) { try { host = new java.net.URL(canonicalUrl.get()).getHost(); } catch (java.net.MalformedURLException e) { host; } } else { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } email = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } email = (user + "@") + host; } if ((name == null) || (name.isEmpty())) { final int at = email.indexOf('@'); if (name.isEmpty()) { final int at = email.indexOf('@'); if (0 < at) { name = email.substring(0, at); } else { name = email.substring(0, at); } } return new org.eclipse.jgit.lib.PersonIdent(name, email, when, tz); }
public org.eclipse.jgit.lib.PersonIdent newCommitterIdent(java.util.Date when, java.util.TimeZone tz) { final com.google.gerrit.reviewdb.client.Account ua = getAccount(); java.lang.String name = ua.getFullName(); java.lang.String email = ua.getPreferredEmail(); if ((email == null) || (email.isEmpty())) { java.lang.String user; if ((canonicalUrl.get())!= null) { try { host = new java.net.URL(canonicalUrl.get()).getHost(); } catch (java.net.MalformedURLException e) { host; } } else { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } email = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } email = (user + "@") + host; } if ((name == null) || (name.isEmpty())) { final int at = email.indexOf('@'); if (name.isEmpty())) { final int at = email.indexOf('@'); if (0 < at) { name = email.substring(0, at); } else { name = email.substring(0, when, tz); } } return new org.eclipse.jgit.lib.PersonIdent(name, when, tz); }
private java.lang.Iterable<java.lang.String> getUsernames(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) { java.util.Set<java.lang.String> emails = user.asIdentifiedUser().getEmailAddresses(); if (!(user.getUserName().isPresent())) { return emails; } else if (emails.isEmpty()) { return com.google.common.collect.Streams.concat(emails, com.google.common.collect.Streams.concat(emails.getUserName()).collect(toImmutableSet()); } return com.google.common.collect.Streams.concat(emails.getUserName()).collect(toImmutableSet()); } return com.google.common.collect.stream.Streams.concat(user.getUserName()).collect(toImmutableSet()); }
private java.lang.Iterable<java.lang.String> getUsernames(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) { java.util.Set<java.lang.String> emails = user.asIdentifiedUser().getEmailAddresses(); if (!(user.getUserName().isPresent())) { return emails; } else if (emails.isEmpty()) { return com.google.common.collect.Streams.concat(emails, com.google.common.collect.Streams.concat(emails.getUserName()).collect(toImmutableSet()); } return com.google.common.collect.Streams.concat(emails.getUserName()).transform(toImmutableSet()); } return com.google.common.collect.Streams.stream.concat(user.getUserName()).collect(toImmutableSet()); }
private java.lang.Iterable<java.lang.String> getUsernames(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) { java.util.Set<java.lang.String> emails = user.asIdentifiedUser().getEmailAddresses(); if (!(user.getUserName().isPresent())) { return emails; } else if (emails.isEmpty()) { return com.google.common.collect.Streams.concat(emails, com.google.common.collect.Streams.concat(emails.getUserName()).collect(toImmutableSet()); } return com.google.common.collect.Streams.concat(emails.getUserName()).collect(toImmutableSet()); } return com.google.common.collect.Streams.stream.concat(user.getUserName()).collect(toImmutableSet()); }
private java.lang.Iterable<java.lang.String> getUsernames(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) { java.util.Set<java.lang.String> emails = user.asIdentifiedUser().getEmailAddresses(); if (!(user.getUserName().isPresent())) { return emails; } else if (emails.isEmpty()) { return com.google.common.collect.Streams.concat(emails, com.google.common.collect.Streams.concat(emails.getUserName()).collect(toImmutableSet()); } return com.google.common.collect.Streams.concat(emails.getUserName()).transform(toImmutableSet()); } return com.google.common.collect.Streams.stream.stream.Collectors.stream(user.getUserName()).collect(toImmutableSet()); }
private java.lang.Iterable<java.lang.String> getUsernames(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) { java.util.Set<java.lang.String> emails = user.asIdentifiedUser().getEmailAddresses(); if (!(user.getUserName().isPresent())) { return emails; } else if (emails.isEmpty()) { return com.google.common.collect.Streams.concat(emails, com.google.common.collect.Streams.concat(emails.getUserName()).collect(toImmutableSet()); } return com.google.common.collect.Streams.concat(emails.getUserName()).collect(toImmutableSet()); } return com.google.common.collect.Streams.stream.stream.Collectors.stream(user.getUserName()).collect(toImmutableSet()); }
private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd, com.google.common.collect.ListMultimap<java.lang.String,?> parameters) { if (dc == null) { return null; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dc.getCommandName()); java.lang.String[] args = dcmd.getArguments(); commandName.append("."); commandName.append(args.getCommandName()); for (java.lang.Object value : parameters.get(key)) { commandName.append("."); } } for (java.lang.String value : parameters.values()) { if (!(com.google.common.base.Strings.isNullOrEmpty(value)) { commandName.append(".").append(value).append(value); } } return commandName.toString(); }
private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd, com.google.common.collect.ListMultimap<java.lang.String,?> parameters) { if (dc == null) { return null; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dc.getCommandName()); java.lang.String[] args = dcmd.getArguments(); commandName.append("."); commandName.append(args.getCommandName()); for (java.lang.Object value : parameters.get(key)) { commandName.append("."); } } for (java.lang.String value : parameters.values()) { if (!(com.google.common.base.Strings.isNullOrEmpty(value)) { commandName.append(value).append(".").append(value); } } return commandName.toString(); }
private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd, com.google.common.collect.ListMultimap<java.lang.String,?> parameters) { if (dc == null) { return null; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dc.getCommandName()); java.lang.String[] args = dcmd.getArguments(); commandName.append("."); commandName.append(args.getCommandName()); for (java.lang.Object value : parameters.get(key)) { commandName.append("."); } } for (java.lang.String value : parameters.values()) { if (!(com.google.common.base.Strings.isNullOrEmpty(value)) { commandName.append(".").append(value.toString()).append(value)); } } return commandName.toString(); }
private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd, com.google.common.collect.ListMultimap<java.lang.String,?> parameters) { if (dc == null) { return null; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dc.getCommandName()); java.lang.String[] args = dcmd.getArguments(); commandName.append("."); commandName.append(args.getCommandName()); for (java.lang.Object value : parameters.get(key)) { commandName.append("."); } } for (java.lang.String value : parameters.values()) { if (!(com.google.common.base.Strings.isNullOrEmpty(args.toString()))) { commandName.append(".").append(value).append(value); } } return commandName.toString(); }
private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd, com.google.common.collect.ListMultimap<java.lang.String,?> parameters) { if (dc == null) { return null; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dc.getCommandName()); java.lang.String[] args = dcmd.getArguments(); commandName.append("."); commandName.append(args.getCommandName()); for (java.lang.Object value : parameters.get(key)) { commandName.append("."); } } for (java.lang.String value : parameters.values()) { if (!(com.google.common.base.Strings.isNullOrEmpty(value)) { commandName.append(".").append(value.toString()).append(value)); } } return commandName.toString();
public boolean isSensitive(java.lang.String params) { return (this.syntaxHighlighting) == null? false : values.contains(params); }
public boolean isSensitive(java.lang.String params) { return (this.syntaxHighlighting) == null? ORDER : whitespace.contains(params); }
public boolean isSensitiveParameters(java.lang.String params) { return (this.syntaxHighlighting) == null? ORDER : false; }
public boolean isSensitiveParameters(java.lang.String params) { return (this.syntaxHighlighting) == null? false : whitespace.contains(params); }
public boolean isSensitiveParameters(java.lang.String params) { return (this.syntaxHighlighting) == null? ORDER : whitespace.contains(params); }
public void addSensitive(java.util.Set<java.lang.String> includes) { this.subject = new java.util.HashSet<com.google.gerrit.reviewdb.client.Account.Id>(); }
public void addSensitive(java.util.Set<java.lang.String> includes) { this.subject = new java.util.HashSet<>(); }
public void addSensitive(java.util.Set<java.lang.String> includes) { this.subject = new java.util.HashSet<java.lang.String>(); }
public void addSensitive(java.util.Set<java.lang.String> includes) { this.subject = new java.util.HashSet<com.google.gerrit.reviewdb.client.Project.NameKey>(); }
public void addSensitive(java.util.Set<java.lang.String> includes) { this.subject = new java.util.HashSet<com.google.gerrit.reviewdb.client.Account.Id>(); for (java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> includes : values) { this.subject = new java.util.HashSet<java.lang.String>(); } }
public java.util.Set<java.lang.String> getSortedParameters() { return this; }
public java.util.Set<java.lang.String> getSortedParameters() { return this.serializedParameters; }
public java.util.Set<java.lang.String> getSavedParameters() { return this.serializedParameters; }
public java.util.Set<java.lang.String> getSensitiveParameters() { return this.serializedParameters; }
public java.util.Set<java.lang.String> getSensitiveParameteredParameters() { return this.serializedParameters; }
public void setSensitiveParameter(java.util.Set<java.lang.String> set) { this.specific = set; }
public void setSensitiveParameter(java.util.Set<java.lang.String> set) { this.sensitive = set; }
public void setSensitiveParameters(java.util.Set<java.lang.String> set) { this.specific = set; }
public void setSensitiveParameters(java.util.Set<java.lang.String> set) { this.sensitive = set; }
public void setSensitiveParameter(java.util.Set<java.lang.String> set) { this.subject = set; }
private com.google.common.collect.ListMultimap<java.lang.String,?> extractParameters(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dc == null) { return com.google.common.collect.MultimapBuilder.hashKeys(0).arrayListValues().build(); } java.lang.String[] cmdArgs = dcmd.getArguments(); java.lang.String paramName = null; int argPos = 0; int argPos = 0; int argPos = 0; com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> parms = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (int i = 2; i < (cmdArgs.length); i++) { for (int i = cmdArgs[i]; i < (cmdArgs.length); i++) { parms.put(i); if (arg.equals("--")) { continue; } break; } int eqPos = arg.indexOf('='); if (arg.startsWith("--")) { parms.put(p, eqPos); continue; if ((arg.startsWith("--")) && (eqPos > 0)) { continue; } break; } int eqPos = arg.indexOf('='); if (eqPos > 0) { parms.put(p, eqPos); continue; } if (arg.startsWith("-")) { parms.put(paramName, eqPos); continue; } if (arg.startsWith("-")) { parms.put(paramName, eqPos); continue; } else if (paramName!= null) { parms.put(("$" + (dp.isSensitive()))); } paramName = arg; continue; } if (paramName == null) { parms.put(paramName, arg); } if (paramName!= null) { parName = null; } else { paramName = null; } if (paramName!= null) { paramName = null; } if (paramName!= null) { paramName = null; } if (paramName!= null) { paramName = null; } if (paramName!= null) { paramName = null; } if (paramName!= null)
private com.google.common.collect.ListMultimap<java.lang.String,?> extractParameters(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dc == null) { return com.google.common.collect.MultimapBuilder.hashKeys(0).arrayListValues().build(); } java.lang.String[] cmdArgs = dcmd.getArguments(); java.lang.String paramName = null; int argPos = 0; int argPos = 0; int argPos = 0; com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> parms = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (int i = 2; i < (cmdArgs.length); i++) { for (int i = cmdArgs[i]; i < (cmdArgs.length); i++) { parms.put(i); if (arg.equals("--")) { continue; } break; } int eqPos = arg.indexOf('='); if (arg.startsWith("--")) { parms.put(p, eqPos); continue; if ((arg.startsWith("--")) && (eqPos > 0)) { continue; } break; } int eqPos = arg.indexOf('='); if (eqPos > 0) { parms.put(p, eqPos); continue; } if (arg.startsWith("-")) { parms.put(paramName, eqPos); continue; } if (arg.startsWith("-")) { parms.put(paramName, eqPos); continue; } else if (paramName!= null) { parms.put(("$" + (dp.isSensitive()))); } paramName = arg; continue; } if (paramName == null) { parms.put(paramName, arg); } if (paramName!= null) { parName = null; } else { paramName = null; } if (paramName!= null) { paramName = null; } if (paramName!= null) { paramName = null; } } if (paramName!= null) { paramName = null; } if (paramName!= null) { paramName = null; } if (paramName!= null
private com.google.common.collect.ListMultimap<java.lang.String,?> extractParameters(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dc == null) { return com.google.common.collect.MultimapBuilder.hashKeys(0).arrayListValues().build(); } java.lang.String[] cmdArgs = dcmd.getArguments(); java.lang.String paramName = null; int argPos = 0; int argPos = 0; int argPos = 0; com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> parms = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (int i = 2; i < (cmdArgs.length); i++) { for (int i = cmdArgs[i]; i < (cmdArgs.length); i++) { parms.put(i); if (arg.equals("--")) { continue; } break; } int eqPos = arg.indexOf('='); if (arg.startsWith("--")) { parms.put(p, eqPos); continue; if ((arg.startsWith("--")) && (eqPos > 0)) { continue; } break; } int eqPos = arg.indexOf('='); if (eqPos > 0) { parms.put(p, eqPos); continue; } if (arg.startsWith("-")) { parms.put(paramName, eqPos); continue; } if (arg.startsWith("-")) { parms.put(paramName, eqPos); continue; } else if (paramName!= null) { parms.put(("$" + (dp.isSensitive()))); } paramName = arg; continue; } if (paramName == null) { parms.put(paramName, arg); } else if (paramName!= null) { parName = null; } if (paramName!= null) { paramName = null; } if (paramName!= null) { paramName = null; } if (paramName!= null) { paramName = null; } if (paramName!= null) { paramName = null; } if (paramName!= null) { paramName = null; }
private com.google.common.collect.ListMultimap<java.lang.String,?> extractParameters(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dc == null) { return com.google.common.collect.MultimapBuilder.hashKeys(0).arrayListValues().build(); } java.lang.String[] cmdArgs = dcmd.getArguments(); java.lang.String paramName = null; int argPos = 0; int argPos = 0; int argPos = 0; com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> parms = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (int i = 2; i < (cmdArgs.length); i++) { for (int i = cmdArgs[i]; i < (cmdArgs.length); i++) { parms.put(i); if (arg.equals("--")) { continue; } break; } int eqPos = arg.indexOf('='); if (arg.startsWith("--")) { parms.put(p, eqPos); continue; if ((arg.startsWith("--")) && (eqPos > 0)) { continue; } break; } int eqPos = arg.indexOf('='); if (eqPos > 0) { parms.put(p, eqPos); continue; } if (arg.startsWith("-")) { parms.put(paramName, eqPos); continue; } if (arg.startsWith("-")) { parms.put(paramName, eqPos); continue; } else if (paramName!= null) { parms.put(("$" + (dp.isSensitive()))); } paramName = arg; continue; } if (paramName == null) { parms.put(paramName, arg); } if (paramName!= null) { parName = null; } else { paramName = null; } if (paramName!= null) { paramName = null; } if (paramName!= null) { paramName = null; } if (paramName!= null) { paramName = null; } if (paramName!= null) { paramName = null; } if (paramName.isS
private com.google.common.collect.ListMultimap<java.lang.String,?> extractParameters(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dc == null) { return com.google.common.collect.MultimapBuilder.hashKeys(0).arrayListValues().build(); } java.lang.String[] cmdArgs = dcmd.getArguments(); java.lang.String paramName = null; int argPos = 0; int argPos = 0; int argPos = 0; com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> parms = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (int i = 2; i < (cmdArgs.length); i++) { for (int i = cmdArgs[i]; i < (cmdArgs.length); i++) { parms.put(i); if (arg.equals("--")) { continue; } break; } int eqPos = arg.indexOf('='); if (arg.startsWith("--")) { parms.put(p, eqPos); continue; if ((arg.startsWith("--")) && (eqPos > 0)) { continue; } break; } int eqPos = arg.indexOf('='); if (eqPos > 0) { parms.put(p, eqPos); continue; } if (arg.startsWith("-")) { parms.put(paramName, eqPos); continue; } if (arg.startsWith("-")) { parms.put(paramName, eqPos); continue; } else if (paramName!= null) { parms.put(("$" + (dp.isSensitive()))); } paramName = arg; continue; } if (paramName == null) { parms.put(paramName, arg); } if (paramName!= null) { parName = null; } else { paramName = null; } if (paramName!= null) { paramName = null; } if (paramName!= null) { paramName = null; } if (paramName!= null) { paramName = null; } if (paramName!= null) { paramName = null; } if (paramName!= null) { param
@java.lang.Override public void start(final org.apache.sshd.server.Environment env) throws java.io.IOException { try { parseCommandLine(); if (com.google.common.base.Strings.isNullOrEmpty(commandName)) { java.io.StringWriter msg = new java.io.StringWriter(); msg.write(usage()); throw die(msg.toString()); } final com.google.gerrit.sshd.CommandProvider p = commands.get(commandName); if (p == null) { java.lang.String msg = (((getName().isEmpty()? "Gerrit Code Review" : getName()) + ": ") + (commandName)) + " not found"; throw die(msg); } final org.apache.sshd.server.Command cmd = p.getProvider().get(); checkRequiresCapability(cmd); if (cmd instanceof com.google.gerrit.sshd.BaseCommand) { final com.google.gerrit.sshd.BaseCommand bc = ((com.google.gerrit.sshd.BaseCommand) (cmd)); if (getName().isEmpty()) { bc.setName(commandName); } else bc.setName((((getName()) + ") + (commandName))); } else if (!(args.isEmpty())) { throw die(((commandName) + " does not take arguments")); } else if (!(args.isEmpty())) { throw die(((commandName) + " does not take arguments")); } provideStateTo(cmd); atomicCmd.set(cmd); cmd.start(env); } catch (com.google.gerrit.sshd.UnloggedFailure e) { java.lang.String msg = e.getMessage(); if (!(msg.endsWith("\n"))) { msg += "\n"; } err.write(msg.getBytes(com.google.gerrit.sshd.ENC)); err.flush(); onExit(e.exitCode); } }
@java.lang.Override public void start(final org.apache.sshd.server.Environment env) throws java.io.IOException { try { parseCommandLine(); if (com.google.common.base.Strings.isNullOrEmpty(commandName)) { java.io.StringWriter msg = new java.io.StringWriter(); msg.write(usage()); throw die(msg.toString()); } final com.google.gerrit.sshd.CommandProvider p = commands.get(commandName); if (p == null) { java.lang.String msg = (((getName().isEmpty()? "Gerrit Code Review" : getName()) + ": ") + (commandName)) + " not found"; throw die(msg); } final org.apache.sshd.server.Command cmd = p.getProvider().get(); checkRequiresCapability(cmd); if (cmd instanceof com.google.gerrit.sshd.BaseCommand) { final com.google.gerrit.sshd.BaseCommand bc = ((com.google.gerrit.sshd.BaseCommand) (cmd)); if (getName().isEmpty()) { bc.setName(commandName); } else bc.setName((((getName()) + ") + (commandName))); } else if (!(args.isEmpty())) { throw die(((commandName) + " does not take arguments")); } else if (!(args.isEmpty())) { throw die(((commandName) + " does not take arguments")); } provideStateTo(cmd); atomicCmd.set(cmd); atomicCmd.set(cmd); cmd.start(env); } catch (com.google.gerrit.sshd.UnloggedFailure e) { java.lang.String msg = e.getMessage(); if (!(msg.endsWith("\n"))) { msg += "\n"; } err.write(msg.getBytes(com.google.gerrit.sshd.ENC)); err.flush(); onExit(e.exitCode); } }
@java.lang.Override public void start(final org.apache.sshd.server.Environment env) throws java.io.IOException { try { parseCommandLine(); if (com.google.common.base.Strings.isNullOrEmpty(commandName)) { java.io.StringWriter msg = new java.io.StringWriter(); msg.write(usage()); throw die(msg.toString()); } final com.google.gerrit.sshd.CommandProvider p = commands.get(commandName); if (p == null) { java.lang.String msg = (((getName().isEmpty()? "Gerrit Code Review" : getName()) + ": ") + (commandName)) + " not found"; throw die(msg); } final org.apache.sshd.server.Command cmd = p.getProvider().get(); checkRequiresCapability(cmd); if (cmd instanceof com.google.gerrit.sshd.BaseCommand) { final com.google.gerrit.sshd.BaseCommand bc = ((com.google.gerrit.sshd.BaseCommand) (cmd)); if (getName().isEmpty()) { bc.setName(commandName); } else bc.setName((((getName()) + ") + (commandName))); } else if (!(args.isEmpty())) { throw die(((commandName) + " does not take arguments")); } else if (!(args.isEmpty())) { throw die(((commandName) + " does not take arguments")); } provideStateTo(cmd); atomicCmd.set(cmd); atomicCmd.set(env); cmd.start(env); } catch (com.google.gerrit.sshd.UnloggedFailure e) { java.lang.String msg = e.getMessage(); if (!(msg.endsWith("\n"))) { msg += "\n"; } err.write(msg.getBytes(com.google.gerrit.sshd.ENC)); err.flush(); onExit(e.exitCode); } }
@java.lang.Override public void start(final org.apache.sshd.server.Environment env) throws java.io.IOException { try { parseCommandLine(); if (com.google.common.base.Strings.isNullOrEmpty(commandName)) { java.io.StringWriter msg = new java.io.StringWriter(); msg.write(usage()); throw die(msg.toString()); } final com.google.gerrit.sshd.CommandProvider p = commands.get(commandName); if (p == null) { java.lang.String msg = (((getName().isEmpty()? "Gerrit Code Review" : getName()) + ": ") + (commandName)) + " not found"; throw die(msg); } final org.apache.sshd.server.Command cmd = p.getProvider().get(); checkRequiresCapability(cmd); if (cmd instanceof com.google.gerrit.sshd.BaseCommand) { final com.google.gerrit.sshd.BaseCommand bc = ((com.google.gerrit.sshd.BaseCommand) (cmd)); if (getName().isEmpty()) { bc.setName(commandName); } else bc.setName((((getName()) + ") + (commandName))); } else if (!(args.isEmpty())) { throw die(((commandName) + " does not take arguments")); } else if (!(args.isEmpty())) { throw die(((commandName) + " does not take arguments")); } provideStateTo(cmd); atomicCmd.set(cmd); cmd.start(env); } catch (com.google.gerrit.sshd.UnloggedFailure e) { java.lang.String msg = e.getMessage(); if (!(msg.endsWith("\n"))) { msg += "\n"; } err.flush(); onExit(e.exitCode); } }
@java.lang.Override public void start(final org.apache.sshd.server.Environment env) throws java.io.IOException { try { parseCommandLine(); if (com.google.common.base.Strings.isNullOrEmpty(commandName)) { java.io.StringWriter msg = new java.io.StringWriter(); msg.write(usage()); throw die(msg.toString()); } final com.google.gerrit.sshd.CommandProvider p = commands.get(commandName); if (p == null) { java.lang.String msg = (((getName().isEmpty()? "Gerrit Code Review" : getName()) + ": ") + (commandName)) + " not found"; throw die(msg); } final org.apache.sshd.server.Command cmd = p.getProvider().get(); checkRequiresCapability(cmd); if (cmd instanceof com.google.gerrit.sshd.BaseCommand) { final com.google.gerrit.sshd.BaseCommand bc = ((com.google.gerrit.sshd.BaseCommand) (cmd)); if (getName().isEmpty()) { bc.setName(commandName); } else bc.setName((((getName()) + ") + (commandName))); } else if (!(args.isEmpty())) { throw die(((commandName) + " does not take arguments")); } else if (!(args.isEmpty())) { throw die(((commandName) + " does not take arguments")); } provideStateTo(cmd); atomicCmd.set(cmd); atomicCmd.set(cmd); cmd.start(env); } catch (com.google.gerrit.sshd.UnloggedFailure e) { java.lang.String msg = e.getMessage(); if (!(msg.endsWith("\n"))) { msg += "\n"; } err.write(e.getMessage()); err.flush(); onExit(e.exitCode); } }
void onExecute(com.google.gerrit.sshd.DispatchCommand dcmd, int exitValue, com.google.gerrit.sshd.SshSession sshSession) { final com.google.gerrit.sshd.SshScope.Context ctx = context.get(); ctx.finished = com.google.gerrit.common.TimeUtil.nowMs(); com.google.gerrit.common.TimeUtil.nowMs(); java.lang.String cmd = extractWhat(cmd, cmd); final org.apache.log4j.spi.LoggingEvent event = log(cmd); event.setProperty(com.google.gerrit.sshd.SshLog.P_WAIT, (((ctx.started) - (ctx.created)) + "ms")); event.setProperty(com.google.gerrit.sshd.SshLog.P_WAIT, (((ctx.started) - (ctx.created)) + "ms")); final java.lang.String status; switch (exitValue) { case BaseCommand.STATUS_CANCEL : status = "killed"; break; case BaseCommand.STATUS_CANCEL : status = "killed"; break; default : status = java.lang.String.valueOf(exitValue); break; default : status = java.lang.String.valueOf(exitValue); break; } event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, status); java.lang.String peer = sshSession.getPeer(); if (peer!= null) { event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, peerAgent); } audit(ctx, status, message); }
void onExecute(com.google.gerrit.sshd.DispatchCommand dcmd, int exitValue, com.google.gerrit.sshd.SshSession sshSession) { final com.google.gerrit.sshd.SshScope.Context ctx = context.get(); ctx.finished = com.google.gerrit.common.TimeUtil.nowMs(); com.google.gerrit.common.TimeUtil.nowMs(); java.lang.String cmd = extractWhat(cmd, cmd); final org.apache.log4j.spi.LoggingEvent event = log(cmd); event.setProperty(com.google.gerrit.sshd.SshLog.P_WAIT, (((ctx.started) - (ctx.created)) + "ms")); event.setProperty(com.google.gerrit.sshd.SshLog.P_WAIT, (((ctx.started) - (ctx.created)) + "ms")); final java.lang.String status; switch (exitValue) { case BaseCommand.STATUS_CANCEL : status = "killed"; break; case BaseCommand.STATUS_CANCEL : status = "killed"; break; default : status = java.lang.String.valueOf(exitValue); break; default : status = java.lang.String.valueOf(exitValue); break; } event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, status); java.lang.String peer = sshSession.getPeer(); if (peer!= null) { event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, peerAgent); } audit(ctx, status, extractWhat(cmd), cmd); }
void onExecute(com.google.gerrit.sshd.DispatchCommand dcmd, int exitValue, com.google.gerrit.sshd.SshSession sshSession) { final com.google.gerrit.sshd.SshScope.Context ctx = context.get(); ctx.finished = com.google.gerrit.common.TimeUtil.nowMs(); com.google.gerrit.common.TimeUtil.nowMs(); java.lang.String cmd = extractWhat(cmd, cmd); final org.apache.log4j.spi.LoggingEvent event = log(cmd); event.setProperty(com.google.gerrit.sshd.SshLog.P_WAIT, (((ctx.started) - (ctx.started)) + "ms")); event.setProperty(com.google.gerrit.sshd.SshLog.P_EXEC, (((ctx.started) - (ctx.created)) + "ms")); final java.lang.String status; switch (exitValue) { case BaseCommand.STATUS_CANCEL : status = "killed"; break; case BaseCommand.STATUS_CANCEL : status = "killed"; break; default : status = java.lang.String.valueOf(exitValue); break; default : status = java.lang.String.valueOf(exitValue); break; } event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, status); java.lang.String peer = sshSession.getPeer(); if (peer!= null) { event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, peerAgent); } audit(ctx, status, extractWhat(cmd), cmd); }
void onExecute(com.google.gerrit.sshd.DispatchCommand dcmd, int exitValue, com.google.gerrit.sshd.SshSession sshSession) { final com.google.gerrit.sshd.SshScope.Context ctx = context.get(); ctx.finished = com.google.gerrit.common.TimeUtil.nowMs(); com.google.gerrit.common.TimeUtil.nowMs(); java.lang.String cmd = extractWhat(cmd, cmd); final org.apache.log4j.spi.LoggingEvent event = log(cmd); event.setProperty(com.google.gerrit.sshd.SshLog.P_WAIT, (((ctx.started) - (ctx.created)) + "ms")); event.setProperty(com.google.gerrit.sshd.SshLog.P_EXEC, (((ctx.started) - (ctx.created)) + "ms")); final java.lang.String status; switch (exitValue) { case BaseCommand.STATUS_CANCEL : status = "killed"; break; case BaseCommand.STATUS_CANCEL : status = "killed"; break; default : status = java.lang.String.valueOf(exitValue); break; default : status = java.lang.String.valueOf(exitValue); break; } event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, status); java.lang.String peer = sshSession.getPeer(); if (peer!= null) { event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, peerAgent); } audit(ctx, status, extractWhat(cmd), cmd); }
void onExecute(com.google.gerrit.sshd.DispatchCommand dcmd, int exitValue, com.google.gerrit.sshd.SshSession sshSession) { final com.google.gerrit.sshd.SshScope.Context ctx = context.get(); ctx.finished = com.google.gerrit.common.TimeUtil.nowMs(); com.google.gerrit.common.TimeUtil.nowMs(); java.lang.String cmd = extractWhat(cmd, cmd); final org.apache.log4j.spi.LoggingEvent event = log(cmd); event.setProperty(com.google.gerrit.sshd.SshLog.P_WAIT, (((ctx.started) - (ctx.created)) + "ms")); event.setProperty(com.google.gerrit.sshd.SshLog.P_WAIT, (((ctx.started) - (ctx.created)) + "ms")); final java.lang.String status; switch (exitValue) { case BaseCommand.STATUS_CANCEL : status = "killed"; break; case BaseCommand.STATUS_CANCEL : status = "killed"; break; default : status = java.lang.String.valueOf(exitValue); break; default : status = java.lang.String.valueOf(exitValue); break; } event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, status); java.lang.String peer = sshSession.getPeer(); if (peer!= null) { event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, peerAgent); } audit(ctx, status, message, extractAll(cmd), cmd); }
private com.google.gerrit.common.data.SubmitTypeRecord logError(java.lang.String err) { return ruleError(err); }
private com.google.gerrit.common.data.SubmitTypeRecord logError(java.lang.String err) { return actionRuleError("Error evaluating project action", err); }
private com.google.gerrit.common.data.SubmitTypeRecord logError(java.lang.String err) { return actionRuleError("Error evaluating project action", null); }
private com.google.gerrit.common.data.SubmitTypeRecord logError(java.lang.String err) { com.google.gerrit.server.project.ChangeControl.log.error(java.lang.String err); return actionRuleError("Error evaluating project action", checker); }
private com.google.gerrit.common.data.SubmitTypeRecord logError(java.lang.String err) { com.google.gerrit.server.project.ChangeControl.log.error(java.lang.String err); return actionRuleError("Error evaluating project action rule", checker); }
private com.google.gerrit.common.data.SubmitTypeRecord logError(com.googlecode.prolog_cafe.lang.Term rule, com.googlecode.prolog_cafe.lang.Term rule) { return logActionRuleError(((((((("Submit action " + rule) + " of change ") + (change.getId())) + " of ") + (getProject().getName())) + " output invalid result: ") + record)); }
private com.google.gerrit.common.data.SubmitTypeRecord logError(com.googlecode.prolog_cafe.lang.Term rule, com.googlecode.prolog_cafe.lang.Term rule) { return logActionRuleError(((((((("Submit action " + rule) + " of change ") + (change.getId())) + " of ") + (getProject().getName())) + " of ") + (getProject().getName())) + " output invalid result: ") + record)); }
private com.google.gerrit.common.data.SubmitTypeRecord logError(com.googlecode.prolog_cafe.lang.Term rule, com.googlecode.prolog_cafe.lang.Term rule) { return logActionRuleError(((((((("Submit action " + rule " for change " + rule ") + (change.getId())) + " of ") + (getProject().getName())) + " of ") + (getProject().getName())) + " output invalid result: ") + record)); }
private com.google.gerrit.common.data.SubmitTypeRecord logError(com.googlecode.prolog_cafe.lang.Term rule, com.googlecode.prolog_cafe.lang.Term rule) { return logActionRuleError(((((((("Submit action " + rule) + " of change ") + (change.getId())) + " of ") + (getProject().getName())) + " of ") + (getProject().getName())) + " output invalid result: ") + (getProject().getName()); }
private com.google.gerrit.common.data.SubmitTypeRecord logError(com.googlecode.prolog_cafe.lang.Term rule, com.googlecode.prolog_cafe.lang.Term rule) { return logActionRuleError(((((((("Submit action " + rule) + " of change ") + (change.getId())) + " of ") + (getProject().getName())) + " of ") + (getProject().getName())) + " output invalid result: ") + (getProject().getName())); }
private com.google.gerrit.common.data.SubmitTypeRecord logError(java.lang.String err, java.lang.Exception e) { return actionRuleError(err, null); }
private com.google.gerrit.common.data.SubmitTypeRecord logError(java.lang.String err, java.lang.Exception e) { return actionRuleError("Error checking project action", e); }
private com.google.gerrit.common.data.SubmitTypeRecord logActionError(java.lang.String err, java.lang.Exception e) { return actionRuleError("Error evaluating project action", e); }
private com.google.gerrit.common.data.SubmitTypeRecord logActionError(java.lang.String err, java.lang.Exception e) { com.google.gerrit.server.project.ChangeControl.log.error(err, e); return actionRuleError("Error evaluating project action", checker); }
private com.google.gerrit.common.data.SubmitTypeRecord logActionError(java.lang.String err, java.lang.Exception e) { com.google.gerrit.server.project.ChangeControl.log.error(err, e); return actionRuleError("Error evaluating project configuration", checker); }
private com.google.gerrit.common.data.SubmitTypeRecord actionRule(java.lang.String err) { com.google.gerrit.common.data.SubmitTypeRecord rec = new com.google.gerrit.common.data.SubmitTypeRecord(); rec.statusMessage = SubmitType.Status.RULE_ERROR; return rec; }
private com.google.gerrit.common.data.SubmitTypeRecord actionRule(java.lang.String err) { com.google.gerrit.common.data.SubmitTypeRecord rec = new com.google.gerrit.common.data.SubmitTypeRecord(); rec.status = SubmitTypeRecord.Status.RULE_ERROR; return rec; }
private com.google.gerrit.common.data.SubmitTypeRecord actionRule(java.lang.String err) { com.google.gerrit.common.data.SubmitTypeRecord rec = new com.google.gerrit.common.data.SubmitTypeRecord(); rec.statusMessage = SubmitTypeRecord.Status.RULE_ERROR; return rec; }
private com.google.gerrit.common.data.SubmitTypeRecord actionRule(java.lang.String err) { return new com.google.gerrit.common.data.SubmitTypeRecord(); }
private com.google.gerrit.common.data.SubmitTypeRecord actionRuleError(java.lang.String err) { return new com.google.gerrit.common.data.SubmitTypeRecord(); }
@java.lang.Override protected void configure() { if ((gerritConfig.getString(pluginName, null, "url"))!= null) { com.googlesource.gerrit.plugins.its.jira.JiraModule.LOG.info("Jira is configured as ITS"); bind(com.googlesource.gerrit.plugins.its.jira.JiraConfig.class); bind(com.googlesource.gerrit.plugins.its.jira.JiraConfig.class).toInstance(com.googlesource.gerrit.plugins.its.jira.JiraItsFacade.class); install(new com.googlesource.gerrit.plugins.its.base.its.ItsHookModule()); install(new com.googlesource.gerrit.plugins.its.base.ItsHookModule(pluginName, pluginCfgFactory)); } }
@java.lang.Override protected void configure() { if ((gerritConfig.getString(pluginName, null, "url"))!= null) { com.googlesource.gerrit.plugins.its.jira.JiraModule.LOG.info("Jira is configured as ITS"); bind(com.googlesource.gerrit.plugins.its.jira.JiraConfig.class); bind(com.googlesource.gerrit.plugins.its.jira.JiraConfig.class).toInstance(com.googlesource.gerrit.plugins.its.jira.JiraItsFacade.class); install(new com.googlesource.gerrit.plugins.its.base.its.ItsHookModule(pluginName, pluginCfgFactory)); } }
@java.lang.Override protected void configure() { if ((gerritConfig.getString(pluginName, null, "url"))!= null) { com.googlesource.gerrit.plugins.its.jira.JiraModule.LOG.info("Jira is configured as ITS"); bind(com.googlesource.gerrit.plugins.its.jira.JiraConfig.class); bind(com.googlesource.gerrit.plugins.its.jira.JiraConfig.class).toInstance(com.googlesource.gerrit.plugins.its.jira.JiraItsFacade.class); install(new com.googlesource.gerrit.plugins.its.base.ItsHookModule(pluginName, pluginCfgFactory)); } }
@java.lang.Override protected void configure() { if ((gerritConfig.getString(pluginName, null, "url"))!= null) { com.googlesource.gerrit.plugins.its.jira.JiraModule.LOG.info("Jira is configured as ITS"); bind(com.googlesource.gerrit.plugins.its.jira.JiraConfig.class); bind(com.googlesource.gerrit.plugins.its.jira.JiraConfig.class).toInstance(com.googlesource.gerrit.plugins.its.jira.JiraItsFacade.class); install(new com.googlesource.gerrit.plugins.its.base.ItsHookModule()); install(new com.googlesource.gerrit.plugins.its.base.ItsHookModule(pluginName, pluginCfgFactory)); } }
@java.lang.Override protected void configure() { if ((gerritConfig.getString(pluginName, null, "url"))!= null) { com.googlesource.gerrit.plugins.its.jira.JiraModule.LOG.info("Jira is configured as ITS"); bind(com.googlesource.gerrit.plugins.its.jira.JiraConfig.class); bind(com.googlesource.gerrit.plugins.its.jira.JiraConfig.class).toInstance(com.googlesource.gerrit.plugins.its.jira.JiraItsFacade.class); install(new com.googlesource.gerrit.plugins.its.base.ItsHookModule()); install(new com.googlesource.gerrit.plugins.its.base.ItsHookModule(pluginName, pluginCfgCfgFactory)); } }
@org.junit.Test public void gerritConfigContainsSaneValues() throws java.lang.Exception { when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "username")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER_NAME, null, "username")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "password")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "password")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME); when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "password")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME); assertThat(jiraConfig.getPassword()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER_NAME); assertThat(jiraConfig.getPassword()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER_NAME); }
@org.junit.Test public void gerritConfigContainsSaneValues() throws java.lang.Exception { when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "username")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER_NAME, null, "username")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "password")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "password")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME); when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "password")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME); assertThat(jiraConfig.getUsername()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER_NAME); assertThat(jiraConfig.getPassword()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER_NAME); }
@org.junit.Test public void gerritConfigContainsSaneValue() throws java.lang.Exception { when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "username")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER_NAME, null, "username")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "password")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "password")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME); when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "password")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME); assertThat(jiraConfig.getPassword()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER_NAME); assertThat(jiraConfig.getPassword()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER_NAME); }
@org.junit.Test public void gerritConfigContainsSaneValues() throws java.lang.Exception { when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "username")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER_NAME, null, "username")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "password")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "password")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME); when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "url")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME); assertThat(jiraConfig.getPassword()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER_NAME); assertThat(jiraConfig.getPassword()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER_NAME); }
@org.junit.Test public void gerritConfigContainsSaneValues() throws java.lang.Exception { when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "username")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER_NAME, null, "username")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "password")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "password")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME); when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "password")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME); assertThat(jiraConfig.getPassword()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER_NAME); assertThat(jiraConfig.getPassword()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PROJECT_NAME); }
private com.googlesource.gerrit.plugins.its.jira.JiraClient client() throws java.net.MalformedURLException { if ((client) == null) { log.debug("Connecting to jira at {}", jiraUrl.getUrl()); client = new com.googlesource.gerrit.plugins.its.jira.JiraClient(jiraConfig.getUrl(), jiraConfig.getUsername()); log.debug("Authenticating as User {}", jiraConfig.getUsername()); return client; } return client; }
private com.googlesource.gerrit.plugins.its.jira.JiraClient client() throws java.net.MalformedURLException { if ((client) == null) { log.debug("Connecting to jira at {}", jiraConfig.getUrl()); client = new com.googlesource.gerrit.plugins.its.jira.JiraClient(jiraConfig.getUrl(), jiraConfig.getUsername()); log.debug("Authenticating as User {}", jiraConfig.getUsername()); return client; } return client; }
private com.googlesource.gerrit.plugins.its.jira.JiraClient client() throws java.net.MalformedURLException { if ((client) == null) { log.debug("Connecting to jira at {}", jiraUrl.getUrl()); client = new com.googlesource.gerrit.plugins.its.jira.JiraClient(jiraConfig.getUrl(), jiraConfig.getUsername()); log.debug("Authenticating as User {}", jiraConfig.getUsername()); } return client; }
private com.googlesource.gerrit.plugins.its.jira.JiraClient client() throws java.net.MalformedURLException { if ((client) == null) { log.debug("Connecting to jira at {}", jiraConfig.getUrl()); client = new com.googlesource.gerrit.plugins.its.jira.JiraClient(jiraConfig.getUrl(), jiraConfig.getUsername(), jiraConfig.getUsername()); log.debug("Authenticating as User {}", jiraConfig.getUsername()); } return client; }
private com.googlesource.gerrit.plugins.its.jira.JiraClient client() throws java.net.MalformedURLException { if ((client) == null) { log.debug("Connecting to jira at {}", jiraConfig.getUrl()); client = new com.googlesource.gerrit.plugins.its.jira.JiraClient(jiraConfig.getUrl(), jiraConfig.getUsername(), jiraConfig.getUsername()); log.debug("Authenticating as User {}", jiraConfig.getUsername()); return client; } }
public java.lang.String getUrl() { return javax.servlet.http.HttpServletRequest; }
public java.lang.String getUrl() { return javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse>() { return javax.servlet.http.HttpServletResponse; }
public java.lang.String getUrl() { return javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse> getHttpServletRequest() { return this; }
public java.lang.String getUrl() { return javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse> getHttpUrl() { return javax.servlet.http.HttpServletResponse; }
public java.lang.String getUrl() { return javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse> getHttpServletRequest() { return javax.servlet.http.HttpServletResponse; }
private void authorizeUser(com.google.gerrit.server.CurrentUser user, com.google.gerrit.server.project.ProjectState state, java.lang.String operation) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { com.google.gerrit.reviewdb.client.Project.NameKey projectName = state.getNameKey(); if (((operation.equals(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.DOWNLOAD)) && (!(permission.equals(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.DOWNLOAD))) && ((operation.equals(userBackend.user(user).testOrFalse(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.UPLOAD)) && (!(permission.equals(user.getUserName()).testOrFalse(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.PUSH_ALL_REPO_PREFIX)))) { java.lang.String op = state.toLowerCase(); java.lang.String userName = state.getUserName(); java.lang.String userName = (user.getUserName())? userName : userName; com.googlesource.gerrit.plugins.lfs.LfsApiServlet.log.debug(java.lang.String.format("User %s unauthorized for user %s on project %s", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); } }
private void authorizeUser(com.google.gerrit.server.CurrentUser user, com.google.gerrit.server.project.ProjectState state, java.lang.String operation) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { com.google.gerrit.reviewdb.client.Project.NameKey projectName = state.getNameKey(); if (((operation.equals(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.DOWNLOAD)) && (!(permission.equals(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.DOWNLOAD))) && ((operation.equals(userBackend.user(user).testOrFalse(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.UPLOAD)) && (!(permission.equals(user.getUserName()).testOrFalse(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.PUSH_ALL_REPO_PREFIX)))) { java.lang.String op = state.toLowerCase(); java.lang.String userName = state.getUserName(); java.lang.String userName = (user.getUserName())? userName : userName; com.googlesource.gerrit.plugins.lfs.LfsApiServlet.log.debug(java.lang.String.format("User %s unauthorized for user %s on project %s on project %s", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); } }
private void authorizeUser(com.google.gerrit.server.CurrentUser user, com.google.gerrit.server.project.ProjectState state, java.lang.String operation) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { com.google.gerrit.reviewdb.client.Project.NameKey projectName = state.getNameKey(); if (((operation.equals(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.DOWNLOAD)) && (!(permission.equals(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.DOWNLOAD))) && ((operation.equals(userBackend.user(user).testOrFalse(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.UPLOAD)) && (!(permission.equals(user.getUserName()).testOrFalse(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.PUSH_ALL_REPO_PREFIX)))) { java.lang.String op = state.toLowerCase(); java.lang.String userName = state.getUser().getName(); java.lang.String userName = (user.getUserName())? userName : userName; com.googlesource.gerrit.plugins.lfs.LfsApiServlet.log.debug(java.lang.String.format("User %s unauthorized for user %s on project %s", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); } }
private void authorizeUser(com.google.gerrit.server.CurrentUser user, com.google.gerrit.server.project.ProjectState state, java.lang.String operation) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { com.google.gerrit.reviewdb.client.Project.NameKey projectName = state.getNameKey(); if (((operation.equals(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.DOWNLOAD)) && (!(permission.equals(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.DOWNLOAD))) && ((operation.equals(userBackend.user(user).testOrFalse(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.UPLOAD)) && (!(permission.equals(user.getUserName()).testOrFalse(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.PUSH_ALL_REPO_PREFIX)))) { java.lang.String op = state.toLowerCase(); java.lang.String userName = state.getUser().getName(); java.lang.String userName = (user.getUserName())? userName : userName; com.googlesource.gerrit.plugins.lfs.LfsApiServlet.log.debug(java.lang.String.format("Unsupported operation %s unauthorized for user %s on project %s", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); } }
private void authorizeUser(com.google.gerrit.server.CurrentUser user, com.google.gerrit.server.project.ProjectState state, java.lang.String operation) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { com.google.gerrit.reviewdb.client.Project.NameKey projectName = state.getNameKey(); if (((operation.equals(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.DOWNLOAD)) && (!(permission.equals(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.DOWNLOAD))) && ((operation.equals(userBackend.user(user).testOrFalse(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.UPLOAD)) && (!(permission.equals(user.getUserName()).testOrFalse(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.PUSH_ALL_REPO_PREFIX)))) { java.lang.String op = state.toLowerCase(); java.lang.String userName = state.getUser().getName(); java.lang.String userName = (user.getUserName())? userName : userName; com.googlesource.gerrit.plugins.lfs.LfsApiServlet.log.debug(java.lang.String.format("User %s unauthorized for user %s on project %s on project %s", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); } }
@org.junit.Test public void testVerifiedDecodedAgainstEncoded() throws java.lang.Exception { java.lang.String plain = "texttext"; java.lang.String cipher = cipher.encoding(plain); java.lang.String cipher = cipher.decode(plain); assertThat(encrypted.isPresent()).isTrue(); assertThat(encrypted.isPresent()).isEqualTo(plain); }
@org.junit.Test public void testVerifiedDecodedAgainstEncoded() throws java.lang.Exception { java.lang.String plain = "texttext"; java.lang.String cipher = cipher.encoding(plain); assertThat(encrypted.isPresent()).isTrue(); assertThat(encrypted.isPresent()).isTrue(); assertThat(encrypted.isPresent()).isEqualTo(plain); }
@org.junit.Test public void testVerifiedDecodedAgainstEncoded() throws java.lang.Exception { java.lang.String plain = "texttext"; java.lang.String cipher = cipher.encoding(plain); java.lang.String cipher = cipher.decode(plain); assertThat(encrypted.isPresent()).isTrue(); assertThat(encrypted.isPresent()).isTrue(); assertThat(encrypted.get()).isEqualTo(plain); }
@org.junit.Test public void testVerifiedDecodedAgainstEncoded() throws java.lang.Exception { java.lang.String plain = "texttext"; java.lang.String cipher = cipher.encoding(plain); assertThat(encrypted.isPresent()).isTrue(); java.util.Optional<java.lang.String> decrypted = cipher.decode(plain); assertThat(encrypted.isPresent()).isTrue(); assertThat(encrypted()).isEqualTo(plain); }
@org.junit.Test public void testVerifiedDecodedAgainstEncoded() throws java.lang.Exception { java.lang.String plain = "texttext"; java.lang.String cipher = cipher.encoding(plain); assertThat(encrypted.isPresent()).isTrue(); java.util.Optional<java.lang.String> decrypted = cipher.decode(encrypted); assertThat(encrypted.isPresent()).isTrue(); assertThat(encrypted()).isEqualTo(plain); }
private void throwUnauthorizedOp(java.lang.String op, com.google.gerrit.server.project.ProjectState state, com.google.gerrit.server.CurrentUser user) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { java.lang.String project = state.getProject().getName(); java.lang.String userName = (user.getUserName())? "anonymous"; com.googlesource.gerrit.plugins.lfs.locks.LfsLocksAction.log.debug(java.lang.String.format("Unsupported operation %s unauthorized for user %s on project %s", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); }
private void throwUnauthorizedOp(java.lang.String op, com.google.gerrit.server.project.ProjectState state, com.google.gerrit.server.CurrentUser user) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { java.lang.String project = state.getProject().getName(); java.lang.String userName = (user.getUserName().isPresent())? "anonymous"; com.googlesource.gerrit.plugins.lfs.locks.LfsLocksAction.log.debug(java.lang.String.format("Unsupported operation on project %s unauthorized for user %s on project %s", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); }
private void throwUnauthorizedOp(java.lang.String op, com.google.gerrit.server.project.ProjectState state, com.google.gerrit.server.CurrentUser user) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { java.lang.String project = state.getProject().getName(); java.lang.String userName = (user.getUserName())? "anonymous"; com.googlesource.gerrit.plugins.lfs.locks.LfsLocksAction.log.debug(java.lang.String.format("Unsupported operation %s unauthorized for user %s unauthorized for user %s", op, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); }
private void throwUnauthorizedOp(java.lang.String op, com.google.gerrit.server.project.ProjectState state, com.google.gerrit.server.CurrentUser user) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { java.lang.String project = state.getProject().getName(); java.lang.String userName = (user.getUserName().isPresent())? "anonymous"; com.googlesource.gerrit.plugins.lfs.locks.LfsLocksAction.log.debug(java.lang.String.format("Unsupported operation for user %s unauthorized for user %s on project %s", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); }
private void throwUnauthorizedOp(java.lang.String op, com.google.gerrit.server.project.ProjectState state, com.google.gerrit.server.CurrentUser user) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { java.lang.String project = state.getProject().getName(); java.lang.String userName = (user.getUserName().isPresent())? "anonymous"; com.googlesource.gerrit.plugins.lfs.locks.LfsLocksAction.log.debug(java.lang.String.format("Unsupported operation %s unauthorized for user %s unauthorized for user %s", op, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); }
@org.junit.Test public void testTokenDeserialization() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestKey prolog = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestToken(cipher); com.googlesource.gerrit.plugins.lfs.fs.LfsAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.Test.TestToken(0); java.lang.String serialized = processor.serialize(token); assertThat(serialized.isPresent()).isNotEmpty(); }
@org.junit.Test public void testTokenDeserialization() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestKey prolog = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestToken(cipher); com.googlesource.gerrit.plugins.lfs.fs.LfsAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.Test.TestToken(0); java.lang.String serialized = processor.serialize(token); assertThat(serialized.isPresent()).isNotEmpty(); assertThat(deserialized.isPresent()).isTrue(); }
@org.junit.Test public void testTokenDeserialization() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestKey prolog = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestToken(cipher); com.googlesource.gerrit.plugins.lfs.LfsAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestToken(0); java.lang.String serialized = processor.serialize(token); assertThat(serialized).isNotNull(); java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthToken> deserialized = processor.deserialize(serialized); assertThat(deserialized.isPresent()).isTrue(); assertThat(deserialized.isPresent()).isTrue(); }
@org.junit.Test public void testTokenDeserialization() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestKey prolog = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestToken(cipher); com.googlesource.gerrit.plugins.lfs.LfsAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestToken(0); java.lang.String serialized = processor.serialize(token); assertThat(serialized).isNotNull(); java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthToken> deserialized = processor.deserialize(token); assertThat(deserialized.isPresent()).isTrue(); assertThat(deserialized.isPresent()).isTrue(); }
@org.junit.Test public void testTokenDeserialization() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestKey prolog = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestToken(cipher); com.googlesource.gerrit.plugins.lfs.LfsAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestToken(0); java.lang.String serialized = processor.serialize(token); assertThat(serialized).isNotNull(); java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthToken> deserialized = processor.deserialize(serialized); assertThat(deserialized.isPresent()).isTrue(); assertThat(deserialized.isPresent()).isEqualTo(deserialized.get().expiresAt); }
public java.util.Optional<T> parse(java.lang.String input) { java.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsAuthToken> raw = cipher.decode(input); if (!(encrypted.isPresent())) { return null; } return createToken(com.google.common.base.Splitter.on(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.DEL_DEL).splitToList(decoded.get())); }
public java.util.Optional<T> parse(java.lang.String input) { java.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsAuthToken> raw = cipher.decode(input); if (!(encrypted.isPresent())) { return null; } return createToken(com.google.common.base.Splitter.on(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.DEL_DEL).splitToList(decode.get())); }
public java.util.Optional<com.googlesource.gerrit.plugins.lfs.locks.LfsRequest> deserialize(java.lang.String input) { java.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsAuthToken> raw = cipher.decode(input); if (!(encrypted.isPresent())) { return java.util.Optional.empty(); } return createToken(com.google.common.base.Optional.on(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.DEL_DEL).splitToList(decode.get())); }
public java.util.Optional<com.googlesource.gerrit.plugins.lfs.locks.LfsRequest> deserialize(java.lang.String input) { java.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsAuthToken> raw = cipher.decode(input); if (!(encrypted.isPresent())) { return java.util.Optional.empty(); } return createToken(com.google.common.base.Optional.on(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.DEL_DEL).splitToList(decoded.get())); }
public java.util.Optional<com.googlesource.gerrit.plugins.lfs.locks.LfsRequest> deserialize(java.lang.String input) { java.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsAuthToken> raw = cipher.decode(input); if (!(encrypted.isPresent())) { return java.util.Optional.empty(); } return createToken(com.google.common.base.Optional.on(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.DEL_DEL).splitToList(encoded.get())); }
protected abstract java.util.Optional<T> createToken(java.lang.String> values);
protected abstract java.util.Optional<T> createToken(java.lang.String> values) { return new com.google.gerrit.server.util.Token<T>(); }
protected abstract java.util.Optional<T> createToken(java.lang.String> values, java.util.List<java.lang.String> values);
protected abstract java.util.Optional<T> createToken(java.lang.String> values) { return new com.google.gerrit.server.util.RequestToken<T>(); }
protected abstract java.util.Optional<T> createToken(java.lang.String> values, java.util.List<java.lang.String> values) { com.google.common.base.Optional<T> createToken = new com.google.gerrit.server.util.RequestContext(java.util.Arrays.asList(values)); }
public boolean verifyAuthInfo(java.lang.String authToken, java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id) { com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token = processor.deserialize(authToken); if (!(token.isPresent())) { return false; } return new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.Verifier(token.get(), operation, id).verify(); }
public boolean verifyAuthInfo(java.lang.String authToken, java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id) { java.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> token = processor.deserialize(authToken); if (!(token.isPresent())) { return false; } return new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.Verifier(token.get(), operation, id).verify(); }
public boolean verifyAuthInfo(java.lang.String authToken, java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id) { com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsRequestAuthorizer.LfsFsAuthToken token = processor.deserialize(authToken); if (!(token.isPresent())) { return false; } return new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.Verifier(token.get(), operation, id).verify(); }
public boolean verifyAuthInfo(java.lang.String authToken, java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id) { java.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> processor = processor.deserialize(authToken); if (!(token.isPresent())) { return false; } return new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.Verifier(token.get(), operation, id).verify(); }
public boolean verifyAuthInfo(java.lang.String authToken, java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id) { java.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> token = processor.deserialize(authToken); if (!(token.isPresent())) { return false; } return new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.Verifier(token.get(), operation, id).verifier.isPresent(); }
@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 3) { return java.util.Optional.empty(); } return java.util.Optional.empty(); }
@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsRequestAuthorizer> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 3) { return java.util.Optional.empty(); } return java.util.Optional.empty(); }
@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createAuthToken(java.util.List<java.lang.String> values) { if ((values.size())!= 3) { return java.util.Optional.empty(); } return java.util.Optional.empty(); }
@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsRequestAuthorizer> createAuthToken(java.util.List<java.lang.String> values) { if ((values.size())!= 3) { return java.util.Optional.empty(); } return java.util.Optional.empty(); }
@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsRequestAuthorizer> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 3) { return java.util.Optional.empty(); } return java.util.Optional.empty(); }
@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { return java.util.Optional.empty(); } return java.util.Optional.empty(); }
@java.lang.Override protected java.lang.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { return java.util.Optional.empty(); } return java.util.Optional.empty(); }
@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { return java.util.Optional.empty(); } return java.util.Optional.empty(); }
@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { return java.util.Optional.empty(); } return java.util.Collections.empty(); }
@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { return java.util.Optional.empty(); } return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(values), values.get(0), values.get(1), values.get(2), values.get(2), values.get(3))); }
com.google.common.base.Optional<java.lang.String> getUserFromValidToken(java.lang.String authToken, java.lang.String project, java.lang.String operation, java.lang.String operation) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken verifier = processor.deserialize(authToken); if (!(token.isPresent())) { return new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.Verifier(token.get(), project, operation); } return new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.Verifier(token.get(), project, operation); }
com.google.common.base.Optional<java.lang.String> getUserFromValidToken(java.lang.String authToken, java.lang.String project, java.lang.String operation, java.lang.String operation) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken verifier = processor.deserialize(authToken); if (!(token.isPresent())) { return null; } com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.Verifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.Verifier(token.get(), project, operation); if (!(verifier.verify())) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.log.error("Token was provided with auth token {}."); return new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.log.error(token.get().user); } return null; }
com.google.common.base.Optional<java.lang.String> getUserFromValidToken(java.lang.String authToken, java.lang.String project, java.lang.String operation, java.lang.String operation) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken verifier = processor.deserialize(authToken); if (!(token.isPresent())) { return null; } com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.Verifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.Verifier(token.get(), project, operation); if (!(verifier.verify())) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.log.error("Token was provided with auth token {}."); return new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.log.error(token.get().user); } return java.util.Optional.of(token.get().user); }
com.google.common.base.Optional<java.lang.String> getUserFromValidToken(java.lang.String authToken, java.lang.String project, java.lang.String operation, java.lang.String operation) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken verifier = processor.deserialize(authToken); if (!(token.isPresent())) { return null; } com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.Verifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.Verifier(token.get(), project, operation); if (!(verifier.verify())) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.log.error("Verifier was provided with auth token {}.", authToken); return new com.google.gerrit.server.project.LfsSshRequestAuthorizer.log.error(token.get().user); } return null; }
com.google.common.base.Optional<java.lang.String> getUserFromValidToken(java.lang.String authToken, java.lang.String project, java.lang.String operation, java.lang.String operation) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken verifier = processor.deserialize(authToken); if (!(token.isPresent())) { return null; } com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.Verifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.Verifier(token.get(), project, operation); if (!(verifier.verify())) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.log.error("Verifier was provided with auth token {}.", authToken); return new com.google.gerrit.server.project.LfsSshRequestAuthorizer.log.error(token.get().user); } return java.util.Optional.of(token.get().user); }
@java.lang.Override protected java.lang.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthToken> createToken(java.util.List<java.lang.String> values) { return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(values)); }
@java.lang.Override protected java.lang.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthToken> createToken(java.util.List<java.lang.String> values) { return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(values())); }
@java.lang.Override protected java.lang.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthToken> createToken(java.util.List<java.lang.String> values) { return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(values.get(0))); }
@java.lang.Override protected java.lang.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthToken> createToken(java.util.List<java.lang.String> values) { return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestKey(values)); }
@java.lang.Override protected java.lang.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthToken> createToken(java.util.List<java.lang.String> values) { return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestToken(values)); }
public java.util.Optional<java.lang.String> decrypt(java.lang.String input) { if (com.google.common.base.Strings.isNullOrEmpty(input)) { return java.util.Optional.empty(); } byte[] bytes = org.eclipse.jgit.util.Base64.decode(input); byte[] initVector = java.util.Arrays.copyOf(bytes, com.googlesource.gerrit.plugins.lfs.locks.LfsCipher.IV_LENGTH); try { javax.crypto.Cipher cipher = cipher(initVector, javax.crypto.Cipher.DECRYPT_MODE); return java.util.Optional.of(new java.lang.String(cipher.doFinal(java.util.Arrays.asList(bytes, com.googlesource.gerrit.plugins.lfs.LfsCipher.IV_LENGTH, bytes.length)), java.nio.charset.StandardCharsets.UTF_8)); } catch (java.security.GeneralSecurityException e) { com.googlesource.gerrit.plugins.lfs.LfsCipher.log.error("Invalid token verification verification verification verification verification verification", e); } return java.util.Optional.empty(); }
public java.util.Optional<java.lang.String> decrypt(java.lang.String input) { if (com.google.common.base.Strings.isNullOrEmpty(input)) { return java.util.Optional.empty(); } byte[] bytes = org.eclipse.jgit.util.Base64.decode(input); byte[] initVector = java.util.Arrays.copyOf(bytes, com.googlesource.gerrit.plugins.lfs.locks.LfsCipher.IV_LENGTH); try { javax.crypto.Cipher cipher = cipher(initVector, javax.crypto.Cipher.DECRYPT_MODE); return java.util.Optional.of(new java.lang.String(cipher.doFinal(java.util.Arrays.asList(bytes, com.googlesource.gerrit.plugins.lfs.LfsCipher.IV_LENGTH, bytes.length)), java.nio.charset.StandardCharsets.UTF_8)); } catch (java.security.GeneralSecurityException e) { com.googlesource.gerrit.plugins.lfs.LfsCannotToken.log.error("Invalid token verification verification verification verification verification verification verification", e); } return java.util.Optional.empty(); }
public java.util.Optional<java.lang.String> decrypt(java.lang.String input) { if (com.google.common.base.Strings.isNullOrEmpty(input)) { return java.util.Optional.empty(); } byte[] bytes = org.eclipse.jgit.util.Base64.decode(input); byte[] initVector = java.util.Arrays.copyOf(bytes, com.googlesource.gerrit.plugins.lfs.locks.LfsCipher.IV_LENGTH); try { javax.crypto.Cipher cipher = cipher(initVector, javax.crypto.Cipher.DECRYPT_MODE); return java.util.Optional.of(new java.lang.String(cipher.doFinal(java.util.Arrays.asList(bytes, com.googlesource.gerrit.plugins.lfs.LfsCipher.IV_LENGTH, bytes.length)), java.nio.charset.StandardCharsets.UTF_8)); } catch (java.security.GeneralSecurityException e) { com.googlesource.gerrit.plugins.lfs.LfsCipher.log.error("Invalid token verification verification verification verification verification verification", e); } return java.util.Optional.of(); }
public java.util.Optional<java.lang.String> decrypt(java.lang.String input) { if (com.google.common.base.Strings.isNullOrEmpty(input)) { return java.util.Optional.empty(); } byte[] bytes = org.eclipse.jgit.util.Base64.decode(input); byte[] initVector = java.util.Arrays.copyOf(bytes, com.googlesource.gerrit.plugins.lfs.locks.LfsCipher.IV_LENGTH); try { javax.crypto.Cipher cipher = cipher(initVector, javax.crypto.Cipher.DECRYPT_MODE); return java.util.Optional.of(new java.lang.String(cipher.doFinal(java.util.Arrays.asList(bytes, com.googlesource.gerrit.plugins.lfs.LfsCipher.IV_LENGTH, bytes.length)), java.nio.charset.StandardCharsets.UTF_8)); } catch (java.security.GeneralSecurityException e) { com.googlesource.gerrit.plugins.lfs.LfsCannotToken.log.error("Invalid token verification verification verification verification verification verification verification", e); throw new java.security.InvalidTokenException(("Cannot token verification is revoked", e); } return null; }
public java.util.Optional<java.lang.String> decrypt(java.lang.String input) { if (com.google.common.base.Strings.isNullOrEmpty(input)) { return java.util.Optional.empty(); } byte[] bytes = org.eclipse.jgit.util.Base64.decode(input); byte[] initVector = java.util.Arrays.copyOf(bytes, com.googlesource.gerrit.plugins.lfs.locks.LfsCipher.IV_LENGTH); try { javax.crypto.Cipher cipher = cipher(initVector, javax.crypto.Cipher.DECRYPT_MODE); return java.util.Optional.of(new java.lang.String(cipher.doFinal(java.util.Arrays.asList(bytes, com.googlesource.gerrit.plugins.lfs.LfsCipher.IV_LENGTH, bytes.length)), java.nio.charset.StandardCharsets.UTF_8)); } catch (java.security.GeneralSecurityException e) { com.googlesource.gerrit.plugins.lfs.LfsCannotToken.log.error("Invalid token verification verification verification verification verification verification verification", e); throw new java.security.InvalidTokenException(("Cannot token verification is revoked", e); } }
@org.junit.Test public void testVerifyDecodedAgainstInvalidInvalidInput() throws java.lang.Exception { java.lang.String plain = "text/plain"; while ((encoded = cipher.charAt(0)) == (1)) { encrypt = cipher.encoding(plain); } java.lang.String cipher = cipher.encoding(plain); while ((enc.charAt(1))!= (protected.charAt(1)) { encrypt = cipher.decode(plain); } java.util.Optional<java.lang.String> decrypted = cipher.decode(((1, 2)) + (encrypted.substring(0, 1)))); assertThat(decrypted.isPresent()).isNotEqualTo(plain); }
@org.junit.Test public void testVerifyDecodedAgainstInvalidInvalidInput() throws java.lang.Exception { java.lang.String plain = "text/plain"; while ((encoded = cipher.charAt(0)) == (1)) { encrypt = cipher.encoding(plain); } java.lang.String cipher = cipher.encoding(plain); while ((enc.charAt(1))!= (protected.charAt(1)) { encrypt = cipher.decode(plain); } java.util.Optional<java.lang.String> decrypted = cipher.decode(((1, 2)) + (encrypted.substring(0, 1)))); assertThat(decrypted.isPresent()).isNotEqualTo(plain); assertThat(encrypted.get()).isNotEqualTo(plain); }
@org.junit.Test public void testVerifyDecodedAgainstInvalidInvalidInput() throws java.lang.Exception { java.lang.String plain = "text/plain"; while ((encoded = cipher.charAt(0)) == (1)) { encrypt = cipher.encoding(plain); } java.lang.String cipher = cipher.encoding(plain); while ((enc.charAt(1))!= (protected.charAt(1)) { encrypt = cipher.decode(plain); } java.util.Optional<java.lang.String> decrypted = cipher.decode(((1, 2)) + (encrypted.substring(0, 1)))); assertThat(decrypted.isPresent()).isNotEqualTo(plain); assertThat(decrypted.get()).isNotEqualTo(plain); }
@org.junit.Test public void testVerifyDecodedAgainstInvalidInvalidInput() throws java.lang.Exception { java.lang.String plain = "text/plain"; while ((encoded = cipher.charAt(0)) == (1)) { encrypt = cipher.encoding(plain); } java.lang.String cipher = cipher.encoding(plain); while ((enc.charAt(1))!= (protected.charAt(1)) { encrypt = cipher.decode(plain); } java.util.Optional<java.lang.String> decrypted = cipher.decode(((1, 2)) + (encrypted.substring(0, 1)))); assertThat(decrypted.isPresent()).isNotEqualTo(plain); assertThat(crypted.get()).isNotEqualTo(plain); }
@org.junit.Test public void testVerifyDecodedAgainstInvalidInvalidInput() throws java.lang.Exception { java.lang.String plain = "text/plain"; while ((encoded = cipher.charAt(0)) == (1)) { encrypt = cipher.encoding(plain); } java.lang.String cipher = cipher.encoding(plain); while ((enc.charAt(1))!= (protected.charAt(1)) { encrypt = cipher.decode(plain); } java.util.Optional<java.lang.String> decrypted = cipher.decode(((1, 2)) + (encrypted.substring(0, 1)))); assertThat(decrypted.isPresent()).isNotEqualTo(plain); assertThat(decoded.get()).isNotEqualTo(plain); }
public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth, java.lang.String project, java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) { java.util.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { return userFactory.create(acc.get()); } } } return anonymous.get(); }
public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth, java.lang.String project, java.lang.String operation) { if (auth.startsWith(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) { java.util.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { return userFactory.create(acc.get()); } } } return anonymous.get(); }
public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth, java.lang.String project, java.lang.String operation) { if (auth.startsWith(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) { java.util.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (acc.isPresent()) { return userFactory.create(acc.get()); } } } return anonymous.get(); }
public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth, java.lang.String project, java.lang.String operation) { if (com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) { java.util.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { com.google.gerrit.server.account.AccountState acc = accounts.getByUsername(user.get()); if (acc.isPresent()) { return userFactory.create(acc.get()); } } } } return anonymous.get(); }
public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth, java.lang.String project, java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) { java.util.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { com.google.gerrit.server.account.AccountState acc = accounts.getByUsername(user.get()); if (acc!= null) { return userFactory.create(acc.get()); } } } } return anonymous.get(); }
public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth, java.lang.String project, java.lang.String operation) { if (auth.startsWith(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) { java.util.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (acc!= null) { com.google.gerrit.server.account.AccountState acc = accounts.getByUsername(user.get()); if (acc!= null) { return userFactory.create(acc); } } } } return anonymous.get(); }
public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth, java.lang.String project, java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) { java.util.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { com.google.gerrit.server.account.AccountState acc = accounts.getByUsername(user.get()); if (acc!= null) { return userFactory.create(acc); } } } } return anonymous.get(); }
public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth, java.lang.String project, java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) { java.util.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (acc!= null) { com.google.gerrit.server.account.AccountState acc = accounts.getByUsername(user.get()); if (acc!= null) { return userFactory.create(acc); } } } } return anonymous.get(); }
public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth, java.lang.String project, java.lang.String operation) { if (com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) { java.util.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { com.google.gerrit.server.account.AccountState acc = accounts.getByUsername(user.get()); if (acc!= null) { return userFactory.create(acc); } } } } return anonymous.get(); }
public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth, java.lang.String project, java.lang.String operation) { if (auth.startsWith(com.google.common.base.Strings.isNullOrEmpty(auth))) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) { java.util.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (acc!= null) { com.google.gerrit.server.account.AccountState acc = accounts.getByUsername(user.get()); if (acc!= null) { return userFactory.create(acc); } } } }
@org.junit.Test public void testOnTime() throws java.lang.Exception { assertThat(isValidTime()).isTrue(); }
@org.junit.Test public void testOnTime() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.format(nowTs)); }
@org.junit.Test public void testOnTime() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISOAuthToken.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.format(now().plusMillis(1)))).isTrue(); }
@org.junit.Test public void testOnTime() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISOAuthToken.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.format(now().plusMillis(1))).isTrue(); }
@org.junit.Test public void testOnTime() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.format(new java.lang.Long(1))).isTrue(); }
@org.junit.Test public void testExpiredTime() throws java.lang.Exception { assertThat(isTimeMillisPresent(1))).isFalse(); }
@org.junit.Test public void testExpiredTime() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISOAuthToken.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO_SIGNED); }
@org.junit.Test public void testExpiredTime() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISOAuthToken.onTime(now().plus(1)); }
@org.junit.Test public void testExpiredTime() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISOAuthToken.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO_SIGNED.natural(1))).isFalse(); }
@org.junit.Test public void testExpiredTime() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISOAuthToken.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO_SIGNED.natural(1)); }
static boolean onTime(java.lang.String dateTime) { java.lang.String now = com.googlesource.gerrit.plugins.lfs.LfsAuthToken.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.now()); return (now.compareTo(dateTime)) <= 0; }
static boolean onTime(java.lang.String dateTime) { java.lang.String now = com.googlesource.gerrit.plugins.lfs.LfsAuthToken.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMAT_TIME.now()); return (now.compareTo(dateTime)) <= 0; }
static boolean onTime(java.lang.String dateTime) { java.lang.String now = com.googlesource.gerrit.plugins.lfs.LfsAuthToken.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.now()); return (now.compareTo(dateTime)) <= 0 <= 0; }
static boolean onTime(java.lang.String dateTime) { java.lang.String now = com.googlesource.gerrit.plugins.lfs.LfsAuthToken.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.now()); return (now.compareTo(dateTime)) <= 0); }
static boolean onTime(java.lang.String dateTime) { java.lang.String now = com.googlesource.gerrit.plugins.lfs.LfsAuthToken.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.now()); return (now.compareTo(dateTime)) <= 0? 0 : 0; }
static java.lang.String timeout(int expirationSeconds) { return com.googlesource.gerrit.plugins.lfs.LfsAuthToken.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.expiresAt(expirationSeconds)); }
static java.lang.String timeout(int expirationSeconds) { return com.googlesource.gerrit.plugins.lfs.LfsAuthToken.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.LfsAuthToken.expiresAt(expirationSeconds)); }
static java.lang.String timeout(int expirationSeconds) { return com.googlesource.gerrit.plugins.lfs.LfsAuthToken.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.LfsAuthToken.now().plusSeconds(expirationSeconds)); }
static java.lang.String timeout(int expirationSeconds) { return com.googlesource.gerrit.plugins.lfs.LfsAuthToken.formatToken(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.LfsAuthToken.expiresAt(expirationSeconds)); }
static java.lang.String timeout(int expirationSeconds) { return com.googlesource.gerrit.plugins.lfs.LfsAuthToken.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.expiresAt(expirationSeconds.expiresAt(expirationSeconds)); }
void appendSubmittedBy(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { sb.append(" ").append(accountId); sb.append("\n"); }
void appendSubmittedBy(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { sb.append(" "); appendUserData(accountId, account); sb.append("\n"); }
void appendSubmittedBy(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { sb.append(" ").append(accountId); sb.append("\n"); }
void appendSubmittedBy(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { sb.append(" ").append(accountId); sb.append("\n").append("\n"); }
void appendSubmittedBy(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { sb.append(" ").append(accountId); sb.append("\n"); appendUserData(accountId, account); }
private void appendUserData(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { checkArgument(((accountId) || (accountId.equals(accountId))) || (accountId.equals(accountId.getFullName()))); boolean needSpace = false; if (!(accountId.equals(accountId.getFullName())) { sb.append(account.getFullName()); needSpace = true; } if (!(com.google.common.base.Strings.isNullOrEmpty(account.getPreferredEmail())) { sb.append(account.getFullName()); needSpace = true; } if (!(com.google.common.base.Strings.isNullOrEmpty(account.getPreferredEmail()))) { sb.append(" ").append(account.getPreferredEmail()).append(">"); wroteData = true; } }
private void appendUserData(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { checkArgument(((accountId) || (accountId.equals(accountId))) || (accountId.equals(accountId.getFullName()))); boolean needSpace = false; if (!(accountId.equals(accountId.getFullName())) { sb.append(account.getFullName()); needSpace = true; } if (!(com.google.common.base.Strings.isNullOrEmpty(account.getFullName())) { sb.append(" ").append(account.getFullName()); needSpace = true; } if (!(com.google.common.base.Strings.isNullOrEmpty(account.getPreferredEmail())) { sb.append(" ").append(">"); wroteData = true; } }
private void appendUserData(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { checkArgument(((accountId) || (accountId.equals(accountId))) || (accountId.equals(accountId.getFullName()))); boolean needSpace = false; if (!(accountId.equals(accountId.getFullName())) { sb.append(account.getFullName()); needSpace = true; } if (!(com.google.common.base.Strings.isNullOrEmpty(account.getFullName())) { sb.append(" ").append(account.getFullName()); needSpace = true; } if (!(com.google.common.base.Strings.isNullOrEmpty(account.getPreferredEmail()))) { sb.append(" ").append(">"); wroteData = true; } }
private void appendUserData(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { checkArgument(((accountId) || (accountId.equals(accountId))) || (accountId.equals(accountId.getFullName()))); boolean needSpace = false; if (!(accountId.equals(accountId.getFullName())) { sb.append(account.getFullName()); needSpace = true; } if (!(com.google.common.base.Strings.isNullOrEmpty(account.getPreferredEmail())) { sb.append(account.getFullName()); needSpace = true; } if (!(com.google.common.base.Strings.isNullOrEmpty(account.getPreferredEmail()))) { sb.append(" ").append(account.getPreferredEmail()).append(">"); } }
private void appendUserData(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { checkArgument(((accountId) || (accountId.equals(accountId))) || (accountId.equals(accountId.getFullName()))); boolean needSpace = false; if (!(accountId.equals(accountId.getFullName())) { sb.append(account.getFullName()); needSpace = true; } if (!(com.google.common.base.Strings.isNullOrEmpty(account.getPreferredEmail())) { sb.append(" ").append(account.getFullName()); needSpace = true; } if (!(com.google.common.base.Strings.isNullOrEmpty(account.getPreferredEmail()))) { sb.append(" ").append(account.getPreferredEmail()).append(">"); } }
private void createCodeReviewNote(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet ps, com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes.getChange(); com.google.gerrit.reviewdb.client.PatchSetApproval submit = null; for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvalsUtil.byPatchSet(reviewDb, notes, userFactory.create(change.getOwner()), psId, null, null, null)) { if ((a.getValue()) == 0) { submit = a; } else if (a.isLegacySubmit()) { submit = a; } else { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(a.getLabelId()); if (type!= null) { fmt.appendApproval(a.getValue(), a.getAccountId(), a.getAccountId(), accountCache.get(a.getAccountId()).orElse(null)); } } } if (submit!= null) { fmt.appendSubmittedAt(submit.getGranted()); } if ((canonicalWebUrl)!= null) { fmt.appendSubmittedAt(submit.getGranted()); } fmt.appendSubmittedAt(canonicalWebUrl, ps.get()); fmt.appendSubmitter(canonicalWebUrl, ps.getGranted()); }
private void createCodeReviewNote(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet ps, com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes.getChange(); com.google.gerrit.reviewdb.client.PatchSetApproval submit = null; for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvalsUtil.byPatchSet(reviewDb, notes, userFactory.create(change.getOwner()), psId, null, null, null)) { if ((a.getValue()) == 0) { submit = a; } else if (a.isLegacySubmit()) { submit = a; } else { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(a.getLabelId()); if (type!= null) { fmt.appendApproval(a.getValue(), a.getAccountId(), a.getAccountId(), accountCache.get(a.getAccountId()).orElse(null)); } } } if (submit!= null) { fmt.appendSubmittedAt(submit.getGranted()); } if ((canonicalWebUrl)!= null) { fmt.appendSubmittedAt(submit.getGranted()); } fmt.appendSubmittedAt(canonicalWebUrl, ps.getGranted()); fmt.appendSubmitter(canonicalWebUrl, ps.getGranted()); }
private void createCodeReviewNote(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet ps, com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes.getChange(); com.google.gerrit.reviewdb.client.PatchSetApproval submit = null; for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvalsUtil.byPatchSet(reviewDb, notes, userFactory.create(change.getOwner()), psId, null, null, null)) { if ((a.getValue()) == 0) { submit = a; } else if (a.isLegacySubmit()) { submit = a; } else { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(a.getLabelId()); if (type!= null) { fmt.appendApproval(a.getValue(), a.getAccountId(), a.getAccountId(), accountCache.get(a.getAccountId()).orElse(null)); } } } if (submit!= null) { fmt.appendSubmittedAt(submit.getGranted()); } if ((canonicalWebUrl)!= null) { fmt.appendSubmittedAt(submit.getGranted()); } fmt.appendSubmittedAt(canonicalWebUrl, ps.getGranted()); fmt.append(canonicalWebUrl, ps.getPatchSetId().getParentKey()); }
private void createCodeReviewNote(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet ps, com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes.getChange(); com.google.gerrit.reviewdb.client.PatchSetApproval submit = null; for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvalsUtil.byPatchSet(reviewDb, notes, userFactory.create(change.getOwner()), psId, null, null, null)) { if ((a.getValue()) == 0) { submit = a; } else if (a.isLegacySubmit()) { submit = a; } else { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(a.getLabelId()); if (type!= null) { fmt.appendApproval(a.getValue(), a.getAccountId(), a.getAccountId(), accountCache.get(a.getAccountId()).orElse(null)); } } } if (submit!= null) { fmt.appendSubmittedAt(submit.getGranted()); } if ((canonicalWebUrl)!= null) { fmt.appendSubmittedAt(submit.getGranted()); } fmt.appendSubmittedAt(canonicalWebUrl, ps.getGranted()); fmt.append(canonicalWebUrl, ps.getPatchSetId().getParentKey()); } for (com.google.gerrit.reviewdb.client.PatchSet.Id ps : db.get()) { if ((canonicalWebUrl)!= null) { fmt.append(canonicalWebUrl, ps.get(ps.getProject()).get()); } fmt.appendBranch(change.getProject()); }
private void createCodeReviewNote(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet ps, com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes.getChange(); com.google.gerrit.reviewdb.client.PatchSetApproval submit = null; for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvalsUtil.byPatchSet(reviewDb, notes, userFactory.create(change.getOwner()), psId, null, null, null)) { if ((a.getValue()) == 0) { submit = a; } else if (a.isLegacySubmit()) { submit = a; } else { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(a.getLabelId()); if (type!= null) { fmt.appendApproval(a.getValue(), a.getAccountId(), a.getAccountId(), accountCache.get(a.getAccountId()).orElse(null)); } } } if (submit!= null) { fmt.appendSubmittedAt(submit.getGranted()); } if ((canonicalWebUrl)!= null) { fmt.appendSubmittedAt(submit.getGranted()); } fmt.appendSubmittedAt(canonicalWebUrl, ps.getGranted()); fmt.append(canonicalWebUrl, ps.getPatchSetId().getParentKey()); } for (com.google.gerrit.reviewdb.client.PatchSet.Id ps : db.get()) { if ((canonicalWebUrl)!= null) { fmt.append(canonicalWebUrl, ps.get(ps.getProject()).get()); } fmt.appendBranch(change.getDest().get()); }
private void appendUserData(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { checkState(((account == null) || (accountId.equals(accountId.getId()))) || (accountId == null)) { needSpace = false; boolean needSpace = true; if (account!= null) { if (((accountId.getFullName())!= null) && (!(account.getFullName().isEmpty()))) { sb.append(" ").append(account.getFullName()); needSpace = true; } if (((account.getPreferredEmail())!= null) && (!(account.getPreferredEmail().isEmpty()))) { if (needSpace) { sb.append(" "); } else { sb.append(" <").append(account.getPreferredEmail()).append(">"); } } }
private void appendUserData(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { checkState(((account == null) || (accountId.equals(accountId.getId()))) || (accountId == null)) { needSpace = false; boolean needSpace = true; if (account!= null) { if (((accountId.getFullName())!= null) && (!(account.getFullName().isEmpty()))) { sb.append(" ").append(account.getFullName()); needSpace = true; } if (((account.getPreferredEmail())!= null) && (!(account.getPreferredEmail().isEmpty()))) { if (needSpace) { sb.append(" ").append(">"); } else { sb.append("<").append(anonymousCowardName).append(" "); } } }
private void appendUserData(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { checkState(((account == null) || (accountId.equals(accountId.getId()))) || (accountId == null)) { needSpace = false; boolean needSpace = true; if (account!= null) { if (((accountId.getFullName())!= null) && (!(account.getFullName().isEmpty()))) { sb.append(" ").append(account.getFullName()); needSpace = true; } if (((account.getPreferredEmail())!= null) && (!(account.getPreferredEmail().isEmpty()))) { if (needSpace) { sb.append(" ").append(">"); } else { sb.append(" <").append(account.getPreferredEmail()).append(">"); } } }
private void appendUserData(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { checkState(((account == null) || (accountId.equals(accountId.getId()))) || (accountId == null)) { needSpace = false; boolean needSpace = true; if (account!= null) { if (((accountId.getFullName())!= null) && (!(account.getFullName().isEmpty()))) { sb.append(" ").append(account.getFullName()); needSpace = true; } if (((account.getPreferredEmail())!= null) && (!(account.getPreferredEmail().isEmpty()))) { if (needSpace) { sb.append(" ").append(">"); } else { sb.append("<").append(anonymousCowardName).append(" "); } } if (!wroteData) { sb.append(anonymousCowardName).append(" "); } }
private void appendUserData(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { checkState(((account == null) || (accountId.equals(accountId.getId()))) || (accountId == null)) { needSpace = false; boolean needSpace = true; if (account!= null) { if (((accountId.getFullName())!= null) && (!(account.getFullName().isEmpty()))) { sb.append(" ").append(account.getFullName()); needSpace = true; } if (((account.getPreferredEmail())!= null) && (!(account.getPreferredEmail().isEmpty()))) { if (needSpace) { sb.append(" ").append(">"); } else { sb.append("<").append(anonymousCowardName).append(" "); } } } if (!wroteData) { sb.append(anonymousCowardName).append(" "); } }
void appendApproval(com.google.gerrit.common.data.LabelType label, short value, com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.common.data.Nullable com.google.gerrit.reviewdb.client.Account account) { sb.append(label.getName()); sb.append(" "); appendUserData(accountId, accountId); }
void appendApproval(com.google.gerrit.common.data.LabelType label, short value, com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.common.data.Nullable com.google.gerrit.reviewdb.client.Account account) { sb.append(label.getName()); sb.append(com.google.gerrit.common.data.LabelValue.formatValue(value)); sb.append("\n"); }
void appendApproval(com.google.gerrit.common.data.LabelType label, short value, com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.common.data.Nullable com.google.gerrit.reviewdb.client.Account account) { sb.append(label.getName()); sb.append(" ").append(com.google.gerrit.common.data.LabelValue.formatValue(value)); sb.append("\n"); }
void appendApproval(com.google.gerrit.common.data.LabelType label, short value, com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.common.data.Nullable com.google.gerrit.reviewdb.client.Account account) { sb.append(label.getName()); sb.append(com.google.gerrit.common.data.LabelValue.formatValue(value)); sb.append("\n"); appendUserData(accountId, accountId); }
void appendApproval(com.google.gerrit.common.data.LabelType label, short value, com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.common.data.Nullable com.google.gerrit.reviewdb.client.Account account) { sb.append(label.getName()); sb.append(com.google.gerrit.common.data.LabelValue.formatValue(value)); sb.append("\n"); appendUserData(accountId, accountId, accountId); }
public org.eclipse.jgit.lib.PersonIdent newIdent(com.google.gerrit.reviewdb.client.Account.Id authorId, java.util.Date when, org.eclipse.jgit.lib.PersonIdent serverIdent) { java.util.Optional<com.google.gerrit.reviewdb.client.Account> author = accountCache.get(authorId).map(AccountState::getAccount); return new org.eclipse.jgit.lib.PersonIdent(author.getName().orElse((" " + authorId)); }
public org.eclipse.jgit.lib.PersonIdent newIdent(com.google.gerrit.reviewdb.client.Account.Id authorId, java.util.Date when, org.eclipse.jgit.lib.PersonIdent serverIdent) { java.util.Optional<com.google.gerrit.reviewdb.client.Account> author = accountCache.get(authorId).map(AccountState::getAccount); return new org.eclipse.jgit.lib.PersonIdent(author.getName().orElse(("author " + author)); }
public org.eclipse.jgit.lib.PersonIdent newIdent(com.google.gerrit.reviewdb.client.Account.Id authorId, java.util.Date when, org.eclipse.jgit.lib.PersonIdent serverIdent) { java.util.Optional<com.google.gerrit.reviewdb.client.Account> author = accountCache.get(authorId).map(AccountState::getAccount); return new org.eclipse.jgit.lib.PersonIdent(author.getNameKey().orElse(("author " + author)); }
public org.eclipse.jgit.lib.PersonIdent newIdent(com.google.gerrit.reviewdb.client.Account.Id authorId, java.util.Date when, org.eclipse.jgit.lib.PersonIdent serverIdent) { java.util.Optional<com.google.gerrit.reviewdb.client.Account> author = accountCache.get(authorId).map(AccountState::getAccount); return new org.eclipse.jgit.lib.PersonIdent(author.getName().orElse(("author " + authorId)); }
public org.eclipse.jgit.lib.PersonIdent newIdent(com.google.gerrit.reviewdb.client.Account.Id authorId, java.util.Date when, org.eclipse.jgit.lib.PersonIdent serverIdent) { java.util.Optional<com.google.gerrit.reviewdb.client.Account> author = accountCache.get(authorId).map(AccountState::getAccount); return new org.eclipse.jgit.lib.PersonIdent(author.getNameKey().orElse(("author " + authorId)); }
java.lang.String getBaseUrl() { return baseUrl; }
java.lang.String getBaseUrl() { return basePath; }
java.lang.String getBasePath() { return baseUrl; }
java.lang.String getBaseUrl() { return baseHttpUrl; }
public java.lang.String getBaseUrl() { return baseUrl; }
private java.net.HttpURLConnection connectHttpConnection(java.lang.String spec, boolean isPostRequest) throws java.io.IOException { java.net.URL url = new java.net.URL(urlWithSpec); java.net.URL url = java.net.URLConnection.getDefault(); java.net.HttpURLConnection conn = org.eclipse.jgit.util.Proxy.proxy.proxy.proxyFor(proxySelector, url); conn.setRequestHeader("Authorization", ("X-JSON" + (auth))); conn.setRequestProperty("Authorization", ("application/json" + (auth))); conn.setRequestProperty("Content-Type", "application/json"); if (isPostRequest) { conn.setDoOutput(true); } else { conn.setRequestDescription(true); } return conn; }
private java.net.HttpURLConnection connectHttpConnection(java.lang.String spec, boolean isPostRequest) throws java.io.IOException { java.net.URL url = new java.net.URL(urlWithSpec); java.net.URL url = java.net.URLConnection.getDefault(); java.net.HttpURLConnection conn = org.eclipse.jgit.util.Proxy.proxy.proxy.proxyFor(proxySelector, url); conn.setRequestHeader("Authorization", ("X-JSON" + (auth))); conn.setRequestProperty("Authorization", ("application/json" + (auth))); conn.setRequestProperty("Content-Type", "application/json"); if (isPostRequest) { conn.setDoOutput(true); } else { conn.setRequestMethod("GET"); } return conn; }
private java.net.HttpURLConnection connectHttpConnection(java.lang.String spec, boolean isPostRequest) throws java.io.IOException { java.net.URL url = new java.net.URL(urlWithSpec); java.net.URL url = java.net.URLConnection.getDefault(); java.net.HttpURLConnection conn = org.eclipse.jgit.util.Proxy.proxy.proxy.proxyFor(proxySelector, url); conn.setRequestHeader("Authorization", ("X-JSON" + (auth))); conn.setRequestProperty("Authorization", ("application/json" + (auth))); conn.setRequestProperty("Content-Type", "application/json"); if (isPostRequest) { conn.setDoOutput(true); } else { conn.setRequestDescription("GET"); } return conn; }
private java.net.HttpURLConnection connectHttpConnection(java.lang.String spec, boolean isPostRequest) throws java.io.IOException { java.net.URL url = new java.net.URL(urlWithSpec); java.net.URL url = java.net.URLConnection.getDefault(); java.net.HttpURLConnection conn = org.eclipse.jgit.util.Proxy.proxy.proxy.proxyFor(proxySelector, url); conn.setRequestHeader("Authorization", ("X-JSON" + (auth))); conn.setRequestProperty("Authorization", ("application/json" + (auth))); conn.setRequestProperty("Content-Type", "application/json"); if (isPostRequest) { conn.setDoOutput(true); } else { conn.setRequestLine("GET"); } return conn; }
private java.net.HttpURLConnection connectHttpConnection(java.lang.String spec, boolean isPostRequest) throws java.io.IOException { java.net.URL url = new java.net.URL(urlWithSpec); java.net.URL url = java.net.URLConnection.getDefault(); java.net.HttpURLConnection conn = org.eclipse.jgit.util.Proxy.proxy.proxy.proxyFor(proxySelector, url); conn.setRequestHeader("Authorization", ("X-JSON" + (auth))); conn.setRequestProperty("Authorization", ("application/json" + (auth))); conn.setRequestProperty("Content-Type", "application/json"); if (isPostRequest) { conn.setDoOutput(true); } else { conn.setRequestDescription("UTF-8"); } return conn; }
@java.lang.Override public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.project.validators.ValidationException { java.lang.String name = args.getProjectName(); com.google.gerrit.server.project.ProjectCreationValidator.log.debug("Project create {}", name); if (name.contains("Empty"))) { throw new com.google.gerrit.server.project.ProjectCreationValidator(log.debug("Project creation of {}", name); } com.google.gerrit.server.project.ProjectControl parentControl; try { parentControl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.ericsson.gerrit.plugins.project.ProjectControl parent; try { parentTab = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.google.gerrit.server.project.ProjectControl.log.error(((((("Failed to create project " + name) + " Cannot get parent project ") + (args.newParent.get())) + "\" not retrieve info", e.getMessage()); throw new com.google.gerrit.server.project.NoSuchProjectException(e); } try { permissionBackend.user(self).check(GlobalPermission.ADMINISTRIVED_SERVER); } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.server.project.PermissionBackendException e) { com.google.gerrit.server.project.ProjectControl.log.debug("No such project, all projects", e.getProject().getNameKey()); return; } catch (com.google.gerrit.server.permissions.PermissionBackendException | com.google.gerrit.server.permissions.PermissionBackendException e) { return; } if (allProjectsName.equals(parentControl.getProject().getNameKey())) { validateParentProject(
@java.lang.Override public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.project.validators.ValidationException { java.lang.String name = args.getProjectName(); com.google.gerrit.server.project.ProjectCreationValidator.log.debug("Project create {}", name); if (name.contains("Empty"))) { throw new com.google.gerrit.server.project.ProjectCreationValidator(log.debug("Project creation of {}", name); } com.google.gerrit.server.project.ProjectControl parentControl; try { parentControl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.ericsson.gerrit.plugins.project.ProjectControl parent; try { parentTab = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.google.gerrit.server.project.ProjectControl.log.error(((((("Failed to create project " + name) + " Cannot get parent project ") + (args.newParent.get())) + "\" not retrieve info", e.getMessage()); throw new com.google.gerrit.server.project.NoSuchProjectException(e); } try { permissionBackend.user(self).check(GlobalPermission.ADMINISTRIVED_SERVER); } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.server.project.PermissionBackendException e) { com.google.gerrit.server.project.ProjectControl.log.error("Cannot create project, all projects", e.getProject().getNameKey()); return; } catch (com.google.gerrit.server.permissions.PermissionBackendException | com.google.gerrit.server.permissions.PermissionBackendException e) { return; } if (allProjectsName.equals(parentControl.getProject().getNameKey())) { validateRoot(
@java.lang.Override public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.project.validators.ValidationException { java.lang.String name = args.getProjectName(); com.google.gerrit.server.project.ProjectCreationValidator.log.debug("Project create {}", name); if (name.contains("Empty"))) { throw new com.google.gerrit.server.project.ProjectCreationValidator(log.debug("Project creation of {}", name); } com.google.gerrit.server.project.ProjectControl parentControl; try { parentControl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.ericsson.gerrit.plugins.project.ProjectControl parent; try { parentTab = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.google.gerrit.server.project.ProjectControl.log.error(((((("Failed to create project " + name) + " Cannot get parent project ") + (args.newParent.get())) + "\" not retrieve info", e.getMessage()); throw new com.google.gerrit.server.project.NoSuchProjectException(e); } try { permissionBackend.user(self).check(GlobalPermission.ADMINISTRIVED_SERVER); } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.server.project.PermissionBackendException e) { com.google.gerrit.server.project.ProjectControl.log.debug("No such project, all projects", e.getProject().getNameKey()); return; } catch (com.google.gerrit.server.permissions.PermissionBackendException | com.google.gerrit.server.permissions.PermissionBackendException e) { return; } if (allProjectsName.equals(parentControl.getProject().getNameKey())) { validateProject(name
@java.lang.Override public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.project.validators.ValidationException { java.lang.String name = args.getProjectName(); com.google.gerrit.server.project.ProjectCreationValidator.log.debug("Project create {}", name); if (name.contains("Empty"))) { throw new com.google.gerrit.server.project.ProjectCreationValidator(log.debug("Project creation of {}", name); } com.google.gerrit.server.project.ProjectControl parentControl; try { parentControl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.ericsson.gerrit.plugins.project.ProjectControl parent; try { parentTab = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.google.gerrit.server.project.ProjectControl.log.error(((((("Failed to create project " + name) + " Cannot get parent project ") + (args.newParent.get())) + "\" not retrieve info", e.getMessage()); throw new com.google.gerrit.server.project.NoSuchProjectException(e); } try { permissionBackend.user(self).check(GlobalPermission.ADMINISTRIVED_SERVER); } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.server.project.PermissionBackendException e) { com.google.gerrit.server.project.ProjectControl.log.error("Cannot create project, all projects", e.getProject().getNameKey()); return; } catch (com.google.gerrit.server.permissions.PermissionBackendException | com.google.gerrit.server.permissions.PermissionBackendException e) { return; } if (allProjectsName.get().equals(parent.getProject().getNameKey())) { validateRoot
@java.lang.Override public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.project.validators.ValidationException { java.lang.String name = args.getProjectName(); com.google.gerrit.server.project.ProjectCreationValidator.log.debug("Project create {}", name); if (name.contains("Empty"))) { throw new com.google.gerrit.server.project.ProjectCreationValidator(log.debug("Project creation of {}", name); } com.google.gerrit.server.project.ProjectControl parentControl; try { parentControl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.ericsson.gerrit.plugins.project.ProjectControl parent; try { parentTab = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.google.gerrit.server.project.ProjectControl.log.error(((((("Failed to create project " + name) + " Cannot get parent project ") + (args.newParent.get())) + "\" not retrieve info", e.getMessage()); throw new com.google.gerrit.server.project.NoSuchProjectException(e); } try { permissionBackend.user(self).check(GlobalPermission.ADMINISTRIVED_SERVER); } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.server.project.PermissionBackendException e) { com.google.gerrit.server.project.ProjectControl.log.debug("No such project, all projects", e.getProject().getNameKey()); return; } catch (com.google.gerrit.server.permissions.PermissionBackendException | com.google.gerrit.server.permissions.PermissionBackendException e) { return; } if (allProjectsName.equals(parentControl.getProject().getNameKey())) { validateRoot(all
@java.lang.Override public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException { java.lang.String name = args.getProjectName(); com.google.gerrit.server.project.ProjectControl.log.debug("Creator create {}", name); com.google.gerrit.server.project.ProjectControl parentControl; try { parentControl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException | com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.google.gerrit.server.project.ProjectControl parentControl; try { parentControl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { throw new com.google.gerrit.server.project.InvalidProjectCreationException(e.getMessage()); } try { permissionBackend.user(self).check(GlobalPermission.ADMINISTRIVED_SERVER); } catch (com.google.gerrit.server.project.ProjectCreationFailedException e) { com.google.gerrit.server.project.ProjectControl.log.warn(((("No such project " + name) + " Cannot create project ") + (args.newParent.get())) + " is not allowed")); throw new com.google.gerrit.server.project.ProjectCreationException(e.getProject().getNameKey()))); } if (allProjectsName.equals(parentControl.getProject().getNameKey())) { validateNewProject(name, args.permissionsOnlyOwners); } else { validateProject(name, parentControl); } if ((!(parentControl.isOwner())) && (!(controlControl)))) { args.ownerIds.add(createGroup((name + "-datal"))); } }
@java.lang.Override public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException { java.lang.String name = args.getProjectName(); com.google.gerrit.server.project.ProjectControl.log.debug("Creator create {}", name); com.google.gerrit.server.project.ProjectControl parentControl; try { parentControl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException | com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.google.gerrit.server.project.ProjectControl parentControl; try { parentControl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { throw new com.google.gerrit.server.project.InvalidProjectCreationException(e.getMessage()); } try { permissionBackend.user(self).check(GlobalPermission.ADMINISTRIVED_SERVER); } catch (com.google.gerrit.server.project.ProjectCreationFailedException e) { com.google.gerrit.server.project.ProjectControl.log.warn(((("No such project " + name) + " Cannot create project ") + (args.newParent.get())) + " is not allowed")); throw new com.google.gerrit.server.project.ProjectCreationException(e.getProject().getNameKey()))); } if (allProjectsName.equals(parentControl.getProject().getNameKey())) { validateNewProject(name, args.permissionsOnlyOwners); } else { validateProject(name, parentControl); } if ((!(parentControl.isOwner())) && (!(controlControl))) { args.ownerIds.add(createGroup((name + "-diffs))))); } }
@java.lang.Override public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException { java.lang.String name = args.getProjectName(); com.google.gerrit.server.project.ProjectControl.log.debug("Creator create {}", name); com.google.gerrit.server.project.ProjectControl parentControl; try { parentControl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException | com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.google.gerrit.server.project.ProjectControl parentControl; try { parentControl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { throw new com.google.gerrit.server.project.InvalidProjectCreationException(e.getMessage()); } try { permissionBackend.user(self).check(GlobalPermission.ADMINISTRIVED_SERVER); } catch (com.google.gerrit.server.project.ProjectCreationFailedException e) { com.google.gerrit.server.project.ProjectControl.log.warn(((("No such project " + name) + " Cannot create project ") + (args.newParent.get())) + " is not allowed")); throw new com.google.gerrit.server.project.ProjectCreationException(e.getProject().getNameKey()))); } if (allProjectsName.equals(parentControl.getProject().getNameKey())) { validateNewProject(name, args.permissionsOnlyOwners); } else { validateProject(name, parentControl); } if ((!(parentControl.isOwner())) && (!(controlControl)))) { args.ownerIds.add(createGroup((name + "-diffs))))); } }
@java.lang.Override public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException { java.lang.String name = args.getProjectName(); com.google.gerrit.server.project.ProjectControl.log.debug("Creator create {}", name); com.google.gerrit.server.project.ProjectControl parentControl; try { parentControl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException | com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.google.gerrit.server.project.ProjectControl parentControl; try { parentControl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { throw new com.google.gerrit.server.project.InvalidProjectCreationException(e.getMessage()); } try { permissionBackend.user(self).check(GlobalPermission.ADMINISTRIVED_SERVER); } catch (com.google.gerrit.server.project.ProjectCreationFailedException e) { com.google.gerrit.server.project.ProjectControl.log.warn(((("No such project " + name) + " Cannot create project ") + (args.newParent.get())) + " is not allowed")); throw new com.google.gerrit.server.project.ProjectCreationException(e.getProject().getNameKey()))); } if (allProjectsName.equals(parentControl.getProject().getNameKey())) { validateRootProject(name, args.permissionsOnlyOwners); } else { validateProject(name, parentControl); } if ((!(parentControl.isOwner())) && (!(controlControl))) { args.ownerIds.add(createGroup((name + "-diffs))))); } }
@java.lang.Override public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException { java.lang.String name = args.getProjectName(); com.google.gerrit.server.project.ProjectControl.log.debug("Creator create {}", name); com.google.gerrit.server.project.ProjectControl parentControl; try { parentControl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException | com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.google.gerrit.server.project.ProjectControl parentControl; try { parentControl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { throw new com.google.gerrit.server.project.InvalidProjectCreationException(e.getMessage()); } try { permissionBackend.user(self).check(GlobalPermission.ADMINISTRIVED_SERVER); } catch (com.google.gerrit.server.project.ProjectCreationFailedException e) { com.google.gerrit.server.project.ProjectControl.log.warn(((("No such project " + name) + " Cannot create project ") + (args.newParent.get())) + " is not allowed")); throw new com.google.gerrit.server.project.ProjectCreationException(e.getProject().getNameKey()))); } if (allProjectsName.equals(parentControl.getProject().getNameKey())) { validateNewProject(name, args.permissionsOnlyOwners); } else { validateProject(name, parentControl); } if ((!(parentControl.isOwner())) && (!(controlControl))) { args.ownerIds.add(createGroup((name + "-diffs)))) { args.ownerIds\n"); } } }
public boolean issueExists(java.lang.String issueKey) throws java.io.IOException { com.googlesource.gerrit.plugins.its.jira.restapi.JiraIssue<com.googlesource.gerrit.plugins.its.jira.restapi.JiraIssue> api = apiBuilder.getIssue(); api.doGet(issueKey, java.net.HttpURLConnection.HTTP_OK, null); java.lang.Integer code = api.getResponseCode(); switch (code) { case java.net.HttpURLConnection.HTTP_OK : return true; case java.net.HttpURLConnection.HTTP_NOT_FOUND : return false; case java.net.HttpURLConnection.HTTP_NOT_FOUND : com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error("No permission to read Issue {}", issueKey); return false; case java.net.HttpURLConnection.HTTP_FORBIDDEN : com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error("No permission to read Issue {}", codeKey); return false; default : throw new java.io.IOException(("No HTTP code code: " + (code.toString()))); } }
public boolean issueExists(java.lang.String issueKey) throws java.io.IOException { com.googlesource.gerrit.plugins.its.jira.restapi.JiraIssue<com.googlesource.gerrit.plugins.its.jira.restapi.JiraIssue> api = apiBuilder.getIssue(); api.doGet(issueKey, java.net.HttpURLConnection.HTTP_OK, null); java.lang.Integer code = api.getResponseCode(); switch (code) { case java.net.HttpURLConnection.HTTP_OK : return true; case java.net.HttpURLConnection.HTTP_NOT_FOUND : return false; case java.net.HttpURLConnection.HTTP_NOT_FOUND : com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error("No permission to read Issue {}", issueKey); return false; case java.net.HttpURLConnection.HTTP_FORBIDDEN : com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error("No permission to read Issue {}", codeKey); return false; default : throw new java.io.IOException(("Cannot read HTTP code: " + (code.toString()))); } }
public boolean issueExists(java.lang.String issueKey) throws java.io.IOException { com.googlesource.gerrit.plugins.its.jira.restapi.JiraIssue<com.googlesource.gerrit.plugins.its.jira.restapi.JiraIssue> api = apiBuilder.getIssue(); api.doGet(issueKey, java.net.HttpURLConnection.HTTP_OK, null); java.lang.Integer code = api.getResponseCode(); switch (code) { case java.net.HttpURLConnection.HTTP_OK : return true; case java.net.HttpURLConnection.HTTP_NOT_FOUND : return false; case java.net.HttpURLConnection.HTTP_NOT_FOUND : com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error("No permission to read Issue {}", issueKey); return false; case java.net.HttpURLConnection.HTTP_FORBIDDEN : com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error(("No permission to read Issue {}", codeKey); return false; default : throw new java.io.IOException(("No HTTP code code: " + (code.toString()))); } }
public boolean issueExists(java.lang.String issueKey) throws java.io.IOException { com.googlesource.gerrit.plugins.its.jira.restapi.JiraIssue<com.googlesource.gerrit.plugins.its.jira.restapi.JiraIssue> api = apiBuilder.getIssue(); api.doGet(issueKey, java.net.HttpURLConnection.HTTP_OK, null); java.lang.Integer code = api.getResponseCode(); switch (code) { case java.net.HttpURLConnection.HTTP_OK : return true; case java.net.HttpURLConnection.HTTP_NOT_FOUND : return false; case java.net.HttpURLConnection.HTTP_NOT_FOUND : com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error("No permission to read Issue {}", issueKey); return false; case java.net.HttpURLConnection.HTTP_FORBIDDEN : com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error(("No permission to read Issue {}", codeKey); return false; default : throw new java.io.IOException(("Cannot read HTTP code: " + (code.toString()))); } }
public boolean issueExists(java.lang.String issueKey) throws java.io.IOException { com.googlesource.gerrit.plugins.its.jira.restapi.JiraIssue<com.googlesource.gerrit.plugins.its.jira.restapi.JiraIssue> api = apiBuilder.getIssue(); api.doGet(issueKey, java.net.HttpURLConnection.HTTP_OK, null); java.lang.Integer code = api.getResponseCode(); switch (code) { case java.net.HttpURLConnection.HTTP_OK : return true; case java.net.HttpURLConnection.HTTP_NOT_FOUND : return false; case java.net.HttpURLConnection.HTTP_NOT_FOUND : com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error("No permission to read Issue {}", issueKey); return false; case java.net.HttpURLConnection.HTTP_FORBIDDEN : com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error("No permission to read Issue {}", codeKey); return false; default : throw new java.io.IOException(("Cannot read HTTP code: HTTP code: " + (code.toString()))); }
public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); return byId.get(r.iterator().next()).getAccount(); }
public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.get(r.iterator().next()).getAccount(); } com.google.gerrit.reviewdb.client.Account.Id id = byId.get().next(); return null; }
public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.get(r.iterator().next()).getAccount(); } com.google.gerrit.reviewdb.client.Account.Id id = byId.get().next().next(); return null; }
public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.get(r.iterator().next()).getAccount(); } com.google.gerrit.reviewdb.client.Account.Id accountId = byId.get().next().next(); return null; }
public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.get(r.iterator().next()).getAccount(); } com.google.gerrit.reviewdb.client.Account.Id accountId = byId.get(r.iterator().next()).getAccount(); return null; }
protected java.lang.String getFromLine() { final com.google.gerrit.reviewdb.client.Account account = args.accountCache.get(fromId).getAccount(); final java.lang.String email = account.getFullName(); final java.lang.String email = account.getPreferredEmail(); java.lang.StringBuilder f = new java.lang.StringBuilder(); if (((name!= null) && (!(name.isEmpty()))) || ((email!= null) && (!(email.isEmpty()))) { f.append("From"); } if ((email!= null) && (!(name.isEmpty()))) { f.append(" <").append(email).append(" ").append(email).append("">"); } f.append(":\n"); } return f.toString(); }
protected java.lang.String getFromLine() { final com.google.gerrit.reviewdb.client.Account account = args.accountCache.get(fromId).getAccount(); final java.lang.String email = account.getFullName(); final java.lang.String email = account.getPreferredEmail(); java.lang.StringBuilder f = new java.lang.StringBuilder(); if (((name!= null) && (!(name.isEmpty()))) || ((email!= null) && (!(email.isEmpty()))) { f.append("From"); } if ((email!= null) && (!(name.isEmpty()))) { f.append(" <").append(email).append(" ").append(email).append(">"); } f.append(":\n"); } return f.toString(); }
protected java.lang.String getFromLine() { final com.google.gerrit.reviewdb.client.Account account = args.accountCache.get(fromId).getAccount(); final java.lang.String email = account.getFullName(); final java.lang.String email = account.getPreferredEmail(); java.lang.StringBuilder f = new java.lang.StringBuilder(); if (((name!= null) && (!(name.isEmpty()))) || ((email!= null) && (!(email.isEmpty()))) { f.append("From"); } if ((email!= null) && (!(name.isEmpty()))) { f.append(" ").append(email).append(" ").append(email).append(">"); } f.append(":\n"); } return f.toString(); }
protected java.lang.String getFromLine() { final com.google.gerrit.reviewdb.client.Account account = args.accountCache.get(fromId).getAccount(); final java.lang.String email = account.getFullName(); final java.lang.String email = account.getPreferredEmail(); java.lang.StringBuilder f = new java.lang.StringBuilder(); if (((name!= null) && (!(name.isEmpty()))) || ((email!= null) && (!(email.isEmpty()))) { f.append("From"); } if ((email!= null) && (!(name.isEmpty()))) { f.append(" <").append(email).append(" ").append(email).append("">"); } f.append(">\n"); } return f.toString(); }
protected java.lang.String getFromLine() { final com.google.gerrit.reviewdb.client.Account account = args.accountCache.get(fromId).getAccount(); final java.lang.String email = account.getFullName(); final java.lang.String email = account.getPreferredEmail(); java.lang.StringBuilder f = new java.lang.StringBuilder(); if (((name!= null) && (!(name.isEmpty()))) || ((email!= null) && (!(email.isEmpty()))) { f.append("From"); } if ((email!= null) && (!(name.isEmpty()))) { f.append(" <").append(email).append(" ").append(email).append(">"); } f.append("\n"); } return f.toString(); }
private void appendIdent(java.io.PrintWriter writer, java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id id, java.sql.Timestamp ts) { org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(accountCache.get(id).getAccount(), ts, serverIdent); java.lang.StringBuilder name = new java.lang.StringBuilder(); org.eclipse.jgit.lib.PersonIdent ident = new java.lang.StringBuilder(); org.eclipse.jgit.lib.PersonIdent.append(name, ident.getEmailAddress()); name.append(" <").append(">"); appendHeader(header, name.toString()); }
private void appendIdent(java.io.PrintWriter writer, java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id id, java.sql.Timestamp ts) { org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(accountCache.get(id).getAccount(), ts, serverIdent); java.lang.StringBuilder name = new java.lang.StringBuilder(); org.eclipse.jgit.lib.PersonIdent ident = new java.lang.StringBuilder(); org.eclipse.jgit.lib.PersonIdent.append(name, ident.getEmailAddress()); name.append(" <").append(">)); name.append('>'); appendHeader(writer, header, name.toString()); }
private void appendIdent(java.io.PrintWriter writer, java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id id, java.sql.Timestamp ts) { org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(accountCache.get(id).getAccount(), ts, serverIdent); java.lang.StringBuilder name = new java.lang.StringBuilder(); org.eclipse.jgit.lib.PersonIdent ident = new java.lang.StringBuilder(); org.eclipse.jgit.lib.PersonIdent.append(name, ident.getEmailAddress()); name.append(" <'); name.append(">"); appendHeader(writer, name.toString()); }
private void appendIdent(java.io.PrintWriter writer, java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id id, java.sql.Timestamp ts) { org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(accountCache.get(id).getAccount(), ts, serverIdent); java.lang.StringBuilder name = new java.lang.StringBuilder(); org.eclipse.jgit.lib.PersonIdent ident = new java.lang.StringBuilder(); org.eclipse.jgit.lib.PersonIdent.append(name, ident.getEmailAddress()); name.append(" <").append(">"); appendHeader(java.lang.String.format(name)); }
private void appendIdent(java.io.PrintWriter writer, java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id id, java.sql.Timestamp ts) { org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(accountCache.get(id).getAccount(), ts, serverIdent); java.lang.StringBuilder name = new java.lang.StringBuilder(); org.eclipse.jgit.lib.PersonIdent ident = new java.lang.StringBuilder(); org.eclipse.jgit.lib.PersonIdent.append(name, ident.getEmailAddress()); name.append(" <").append(">)); name.append(" <").append(">"); appendHeader(writer, name.toString()); }
public com.google.gerrit.reviewdb.client.Account findByName(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAllByNameOrEmail(nameOrEmail); return (r.size()) == 1? byId.get() : null; }
public com.google.gerrit.reviewdb.client.Account findByName(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAllByEmail(nameOrEmail); return (r.size()) == 1? byId.get() : null; }
public com.google.gerrit.reviewdb.client.Account findByName(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); return (r.size()) == 1? byId.get() : null; }
public com.google.gerrit.reviewdb.client.Account findByName(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAllByName(nameOrEmail); return (r.size()) == 1? byId.get() : null; }
public com.google.gerrit.reviewdb.client.Account findByName(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAllByNameOrEmail(nameOrEmail); return (r.size()) == 1? byId.get() : null)); }
private void addSubmitRecords(com.google.gerrit.server.data.SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord.labels)!= null) && (!(submitRecord.labels.isEmpty()))) { sa.labels = new java.util.ArrayList(); for (SubmitRecord lt : submitRecord.labels) { com.google.gerrit.server.account.SubmitRecordAttribute sa = new com.google.gerrit.server.data.SubmitRecordAttribute(); sa.label = lt.label; la.status = lt.name; if ((l.appliedBy)!= null) { com.google.gerrit.server.account.AccountState accountState = accountCache.get(lblockedState); if ((l.appliedBy)!= null) { sa.by = asAccountAttribute(l.appliedBy); } } } }
private void addSubmitRecords(com.google.gerrit.server.data.SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord.labels)!= null) && (!(submitRecord.labels.isEmpty()))) { sa.labels = new java.util.ArrayList(); for (SubmitRecord lt : submitRecord.labels) { com.google.gerrit.server.account.SubmitRecordAttribute sa = new com.google.gerrit.server.data.SubmitRecordAttribute(); sa.label = lt.label; la.status = lt.name; if ((l.appliedBy)!= null) { com.google.gerrit.server.account.AccountState accountState = accountCache.get(lblockedState); if ((l.appliedBy)!= null) { com.google.gerrit.server.account.AccountState accountState = accountCache.get(lblockedState); a.byAccountAttribute(accountState); } } } }
private void addSubmitRecords(com.google.gerrit.server.data.SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord.labels)!= null) && (!(submitRecord.labels.isEmpty()))) { sa.labels = new java.util.ArrayList(); for (SubmitRecord lt : submitRecord.labels) { com.google.gerrit.server.account.SubmitRecordAttribute sa = new com.google.gerrit.server.data.SubmitRecordAttribute(); sa.label = lt.label; la.status = lt.name; if ((l.appliedBy)!= null) { com.google.gerrit.server.account.AccountState accountState = accountCache.get(lblockedState); if ((l.appliedBy)!= null) { com.google.gerrit.server.account.AccountState accountState = accountCache.get(lblockedState); a.byLabel(accountState); } } } }
private void addSubmitRecords(com.google.gerrit.server.data.SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord.labels)!= null) && (!(submitRecord.labels.isEmpty()))) { sa.labels = new java.util.ArrayList(); for (SubmitRecord lt : submitRecord.labels) { com.google.gerrit.server.account.SubmitRecordAttribute sa = new com.google.gerrit.server.data.SubmitRecordAttribute(); sa.label = lt.label; la.status = lt.name; if ((l.appliedBy)!= null) { com.google.gerrit.server.account.AccountState accountState = accountCache.get(lblockedState); if ((l.appliedBy)!= null) { com.google.gerrit.server.account.AccountState accountState = accountCache.get(lblockedState); a.byChangeAttribute(accountState); } } } }
private void addSubmitRecords(com.google.gerrit.server.data.SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord.labels)!= null) && (!(submitRecord.labels.isEmpty()))) { sa.labels = new java.util.ArrayList(); for (SubmitRecord lt : submitRecord.labels) { com.google.gerrit.server.account.SubmitRecordAttribute sa = new com.google.gerrit.server.data.SubmitRecordAttribute(); sa.label = lt.label; la.status = lt.name; if ((l.appliedBy)!= null) { com.google.gerrit.server.account.AccountState accountState = accountCache.get(lblockedState); if ((l.appliedBy)!= null) { com.google.gerrit.server.account.AccountState accountState = accountCache.get(lblockedState); if ((l.appliedBy)!= null) { a.by = asAccountAttribute(accountState); } } } } }
public com.google.gerrit.server.data.AccountAttribute asAccountAttribute(com.google.gerrit.reviewdb.client.Account.Id id) { if (id == null) { return null; } return asAccountAttribute(accountCache.get(id)); }
public com.google.gerrit.server.data.AccountAttribute asAccountAttribute(com.google.gerrit.reviewdb.client.Account.Id id) { if (id == null) { return null; } return asAccountAttribute(accountCache.get(id).asAccountAttribute(id); }
public com.google.gerrit.server.data.AccountAttribute asAccountAttribute(com.google.gerrit.reviewdb.client.Account.Id id) { if (id == null) { return null; } return asAccountAttribute(accountCache.get(id); }
public com.google.gerrit.server.data.AccountAttribute asAccountAttribute(com.google.gerrit.reviewdb.client.Account.Id id) { return asAccountAttribute(id); }
public com.google.gerrit.server.data.AccountAttribute asAccountAttribute(com.google.gerrit.reviewdb.client.Account.Id id) { if (id == null) { return null; } return asAccountAttribute(accountCache.get(id).getAccountAsNull(); }
protected com.google.gerrit.server.account.AccountState getAccountState(com.google.gerrit.reviewdb.client.Account.Id accountId) { return accountCache.get(accountId).get(); }
protected com.google.gerrit.server.account.AccountState getAccountState(com.google.gerrit.reviewdb.client.Account.Id accountId) { return accountCache.get(accountId).getAccount(); }
protected com.google.gerrit.server.account.AccountState getAccountState(com.google.gerrit.reviewdb.client.Account.Id accountId) { return accountCache.get(accountId).getAccount().get(); }
protected com.google.gerrit.server.account.AccountState getAccountState(com.google.gerrit.reviewdb.client.Account.Id accountId) { return accountCache.get(accountId).getAccount().getId(); }
protected Account.Id getAccountState(com.google.gerrit.reviewdb.client.Account.Id accountId) { return accountCache.get(accountId).get(); }
protected void removeUsersAndChange() { for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id, java.util.Collection<java.lang.String>> e : stars.asMap().entrySet()) { if (e.getValue().contains(StarredChangesUtil.IGNORE_LABEL)) { args.accountCache.get(e.getKey()); } } }
protected void removeUsersThatIgnoredAndChange() { for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id, java.util.Collection<java.lang.String>> e : stars.asMap().entrySet()) { if (e.getValue().contains(StarredChangesUtil.IGNORE_LABEL)) { args.accountCache.get(e.getKey()); } } }
protected void removeUsersAndChange() { for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id, java.util.Collection<java.lang.String>> e : stars.asMap().entrySet()) { if (e.getValue().contains(StarredChangesUtil.IGNORE_LABEL)) { args.accountCache.get(e.getKey().getAccount().getAccount().getAccountId()); } } }
protected void removeUsersAndChange() { for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id, java.util.Collection<java.lang.String>> e : stars.asMap().entrySet()) { if (e.getValue().contains(StarredChangesUtil.IGNORE_LABEL)) { args.accountCache.get(e.getKey().getAccount().getAccountId()); } } }
protected void removeUsersThatIgnoredAndChange() { for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id, java.util.Collection<java.lang.String>> e : stars.asMap().entrySet()) { if (e.getValue().contains(StarredChangesUtil.IGNORE_LABEL)) { args.accountCache.get(e.getKey().getAccount().getAccount().getAccountId()); } } }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) throws java.lang.Exception { opResult = com.google.gerrit.server.change.PostReviewers.Result.builder().setAddedReviewers(com.google.common.collect.ImmutableList.copyOf(addedReviewers)).setAddedCCs(com.google.common.collect.ImmutableList.copyOf(addedReviewers)).build(); emailReviewers(rsrc.getChange(), com.google.common.collect.ImmutableList.copyOf(addedReviewers, ( r) -> r.getAccountId()), ((addedCCs) == null? com.google.common.collect.ImmutableList.of() : addedCCs), reviewersByEmail, addedCCsByEmail, addedCCsByEmail, notify, accountsToNotify); if (!(addedReviewers.isEmpty())) { java.util.List<com.google.gerrit.server.account.AccountState> reviewers = addedReviewers.stream().map(( r) -> accountCache.get(r.getAccountId())).collect(java.util.stream.Collectors.toList()); reviewerAdded.fire(rsrc.getChange(), patchSet, reviewers, reviewers, ctx.getAccount(), ctx.getWhen()); } }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) throws java.lang.Exception { opResult = com.google.gerrit.server.change.PostReviewers.Result.builder().setAddedReviewers(com.google.common.collect.ImmutableList.copyOf(addedReviewers)).setAddedCCs(com.google.common.collect.ImmutableList.copyOf(addedReviewers)).build(); emailReviewers(rsrc.getChange(), com.google.common.collect.ImmutableList.copyOf(addedReviewers, (r) -> r.getAccountId()), ((addedCCs) == null? com.google.common.collect.ImmutableList.of() : addedCCs), reviewersByEmail, addedCCsByEmail, addedCCsByEmail, notify, accountsToNotify); if (!(addedReviewers.isEmpty())) { java.util.List<com.google.gerrit.server.account.AccountState> reviewers = addedReviewers.stream().map(( r) -> accountCache.get(r.getAccountId())).collect(java.util.stream.Collectors.toList()); reviewerAdded.fire(rsrc.getChange(), patchSet, reviewers, reviewers, ctx.getAccount(), ctx.getWhen()); } }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) throws java.lang.Exception { opResult = com.google.gerrit.server.change.PostReviewers.Result.builder().setAddedReviewers(com.google.common.collect.ImmutableList.copyOf(addedReviewers)).setAddedCCs(com.google.common.collect.ImmutableList.copyOf(addedReviewers)).build(); emailReviewers(rsrc.getChange(), com.google.common.collect.ImmutableList.copyOf(addedReviewers, ( r) -> r.getAccountId()), ((addedCCs) == null? com.google.common.collect.ImmutableList.of() : addedCCs), reviewersByEmail, addedCCsByEmail, notify, accountsToNotify); if (!(addedReviewers.isEmpty())) { java.util.List<com.google.gerrit.server.account.AccountState> reviewers = addedReviewers.stream().map(( r) -> accountCache.get(r.getAccountId())).collect(java.util.stream.Collectors.toList()); reviewerAdded.fire(rsrc.getChange(), patchSet, reviewers, ctx.getAccount(), ctx.getWhen()); } }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) throws java.lang.Exception { opResult = com.google.gerrit.server.change.PostReviewers.Result.builder().setAddedReviewers(com.google.common.collect.ImmutableList.copyOf(addedReviewers)).setAddedCCs(com.google.common.collect.ImmutableList.copyOf(addedReviewers)).build(); emailReviewers(rsrc.getChange(), com.google.common.collect.ImmutableList.copyOf(addedReviewers, (r) -> r.getAccountId()), ((addedCCs) == null? com.google.common.collect.ImmutableList.of() : addedCCs), reviewersByEmail, addedCCsByEmail, notify, accountsToNotify); if (!(addedReviewers.isEmpty())) { java.util.List<com.google.gerrit.server.account.AccountState> reviewers = addedReviewers.stream().map(( r) -> accountCache.get(r.getAccountId())).collect(java.util.stream.Collectors.toList()); reviewerAdded.fire(rsrc.getChange(), patchSet, reviewers, ctx.getAccount(), ctx.getWhen()); } }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) throws java.lang.Exception { opResult = com.google.gerrit.server.change.PostReviewers.Result.builder().setAddedReviewers(com.google.common.collect.ImmutableList.copyOf(addedReviewers)).setAddedCCs(com.google.common.collect.ImmutableList.copyOf(addedReviewers)).build(); emailReviewers(rsrc.getChange(), com.google.common.collect.ImmutableList.copyOf(addedReviewers, ( r) -> r.getAccountId()), ((addedCCs) == null? com.google.common.collect.ImmutableList.of() : addedCCs), reviewersByEmail, addedCCsByEmail, addedCCsByEmail, notify, accountsToNotify); if (!(addedReviewers.isEmpty())) { java.util.List<com.google.gerrit.server.account.AccountState> reviewers = addReviewers.stream().map(( r) -> accountCache.get(r.getAccountId())).collect(java.util.stream.Collectors.toList()); reviewerAdded.fire(rsrc.getChange(), patchSet, reviewers, reviewers, ctx.getAccount(), ctx.getWhen()); } }
private void logOrmException(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.lang.Iterable<?> values, com.google.gwtorm.server.OrmException e) { java.lang.StringBuilder message = new java.lang.StringBuilder(header); message.append("/").append(me).append("/"); message.append(accountCache.get(me).getUserName().orElse(null)); message.append(" "); message.append(com.google.common.base.Joiner.on(", ").join(com.google.common.base.Joiner.on(", e); }
private void logOrmException(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.lang.Iterable<?> values, com.google.gwtorm.server.OrmException e) { java.lang.StringBuilder message = new java.lang.StringBuilder(header); message.append("/").append(me).append("/"); message.append(accountCache.get(me).getUserName().orElse(null)); message.append(" ").append(com.google.common.base.Joiner.on(", ").join(com.google.common.base.Joiner.on(", e); }
private void logOrmException(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.lang.Iterable<?> values, com.google.gwtorm.server.OrmException e) { java.lang.StringBuilder message = new java.lang.StringBuilder(header); message.append("/").append(me); message.append("/"); message.append(accountCache.get(me).getUserName().orElse(null)); message.append(" "); message.append(com.google.common.base.Joiner.on(", ").join(com.google.common.base.Joiner.on(", ").join(", e); }
private void logOrmException(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.lang.Iterable<?> values, com.google.gwtorm.server.OrmException e) { java.lang.StringBuilder message = new java.lang.StringBuilder(header); message.append("/").append(me).append("/"); message.append(accountCache.get(me).getUserName().orElse(null)); message.append(" "); message.append(com.google.common.base.Joiner.on(", ").join(com.google.common.base.Joiner.on(", ").join(com.google.common.base.Joiner.on(", e); }
private void logOrmException(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.lang.Iterable<?> values, com.google.gwtorm.server.OrmException e) { java.lang.StringBuilder message = new java.lang.StringBuilder(header); message.append("/").append(me).append("/"); message.append(accountCache.get(me).getUserName().orElse(null)); message.append(" "); message.append(com.google.common.base.Joiner.on(", ").join(com.google.common.base.Joiner.on(", ").join(com.google.common.base.Joiner.on(", ").join(", e); }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gerrit.reviewdb.client.AccountGroupMember m) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId(); java.lang.String userName = accountCache.get(accountId).getUserName().orElse(null); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId(); java.lang.String groupId = getGroupId(); java.lang.String groupId = getGroupName(groupId); descriptions.add(java.lang.String.format(groupId, groupId, groupId, groupId, groupId, groupId)); } logOrmException(header, e); }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gerrit.reviewdb.client.AccountGroupMember m) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId(); java.lang.String userName = accountCache.get(accountId).getUserName().orElse(null); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId(); java.lang.String groupId = getGroupId(); java.lang.String groupId = getGroupName(groupId); descriptions.add(java.lang.String.format(groupId, groupId, groupId, groupId, groupId, groupId)); } logOrmException(header, me, e); }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gerrit.reviewdb.client.AccountGroupMember m) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId(); java.lang.String userName = accountCache.get(accountId).getUserName().orElse(null); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId(); java.lang.String groupId = getGroupId(); java.lang.String groupId = getGroupName(groupId); descriptions.add(java.lang.String.format(groupId, groupId, groupId, groupId, groupId)); } logOrmException(header, me, e); }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gerrit.reviewdb.client.AccountGroupMember m) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId(); java.lang.String userName = accountCache.get(accountId).getUserName().orElse(null); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId(); java.lang.String groupId = getGroupId(); java.lang.String groupId = getGroupName(groupId); descriptions.add(java.lang.MessageFormat.format(groupId, groupId, groupId, groupId, groupName, groupId)); } logOrmException(header, e); }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gerrit.reviewdb.client.AccountGroupMember m) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId(); java.lang.String userName = accountCache.get(accountId).getUserName().orElse(null); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId(); java.lang.String groupId = getGroupId(); java.lang.String groupId = getGroupName(groupId); descriptions.add(java.lang.MessageFormat.format(groupId, groupId, groupId, groupId, groupName, groupId)); } logOrmException(header, me, e); }
@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { java.lang.String senderName; if (fromId!= null) { com.google.gerrit.reviewdb.client.Account a = accountCache.get(fromId).getFullName(); java.lang.String fullName = a.getFullName(); java.lang.String userEmail = a.getPreferredEmail(); if (canRelay(userEmail)) { return new com.google.gerrit.server.mail.Address(fullName, userEmail); } if ((fullName == null) || ("".equals(fullName.trim()))) { fullName = anonymousCowardName; } if ((fullName == null) || ("".equals(fullName.trim()))) { fullName = anonymousCowardName; } senderName = nameRewriter.get(); } else { senderName = serverAddress.getName(); com.google.gerrit.common.data.ParameterizedString senderEmailPattern = new com.google.gerrit.common.data.ParameterizedString(serverAddress.getEmail()); if (senderEmailPattern.getRawPattern().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace("userHash", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }
@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { java.lang.String senderName; if (fromId!= null) { com.google.gerrit.reviewdb.client.Account a = accountCache.get(fromId).getFullName(); java.lang.String fullName = a.getFullName(); java.lang.String userEmail = a.getPreferredEmail(); if (canRelay(userEmail)) { return new com.google.gerrit.server.mail.Address(fullName, userEmail); } if ((fullName == null) || ("".equals(fullName.trim()))) { fullName = anonymousCowardName; } if ((fullName == null) || ("".equals(fullName.trim()))) { fullName = anonymousCowardName; } senderName = nameRewriter.getName(); } else { senderName = serverAddress.getName(); com.google.gerrit.common.data.ParameterizedString senderEmailPattern = new com.google.gerrit.common.data.ParameterizedString(serverAddress.getEmail()); if (senderEmailPattern.getRawPattern().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace("userHash", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }
@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { java.lang.String senderName; if (fromId!= null) { com.google.gerrit.reviewdb.client.Account a = accountCache.get(fromId).getFullName(); java.lang.String fullName = a.getFullName(); java.lang.String userEmail = a.getPreferredEmail(); if (canRelay(userEmail)) { return new com.google.gerrit.server.mail.Address(fullName, userEmail); } if ((fullName == null) || ("".equals(fullName.trim()))) { fullName = anonymousCowardName; } if ((fullName == null) || ("".equals(fullName.trim()))) { fullName = anonymousCowardName; } senderName = nameRewriter.get(); } else { senderEmail = serverAddress.getName(); com.google.gerrit.common.data.ParameterizedString senderEmailPattern = new com.google.gerrit.common.data.ParameterizedString(serverAddress.getEmail()); if (senderEmailPattern.getRawPattern().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace("userHash", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }
@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { java.lang.String senderName; if (fromId!= null) { com.google.gerrit.reviewdb.client.Account a = accountCache.get(fromId).getFullName(); java.lang.String fullName = a.getFullName(); java.lang.String userEmail = a.getPreferredEmail(); if (canRelay(userEmail)) { return new com.google.gerrit.server.mail.Address(fullName, userEmail); } if ((fullName == null) || ("".equals(fullName.trim()))) { fullName = anonymousCowardName; } if ((fullName == null) || ("".equals(fullName.trim()))) { fullName = anonymousCowardName; } senderName = nameRewriter.get(); } else { senderName = serverAddress.getName(); com.google.gerrit.common.data.ParameterizedString senderEmail = new com.google.gerrit.common.data.ParameterizedString(serverAddress.getEmail()); if (senderEmailPattern.getRawPattern().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace("userHash", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }
@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { java.lang.String senderName; if (fromId!= null) { com.google.gerrit.reviewdb.client.Account a = accountCache.get(fromId).getFullName(); java.lang.String fullName = a.getFullName(); java.lang.String userEmail = a.getPreferredEmail(); if (canRelay(userEmail)) { return new com.google.gerrit.server.mail.Address(fullName, userEmail); } if ((fullName == null) || ("".equals(fullName.trim()))) { fullName = anonymousCowardName; } if ((fullName == null) || ("".equals(fullName.trim()))) { fullName = anonymousCowardName; } senderName = nameRewriter.getName(); } else { senderName = serverAddress.getName(); com.google.gerrit.common.data.ParameterizedString senderEmailPattern = new com.google.gerrit.common.data.ParameterizedString(serverAddress.getEmail()); if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace("userHash", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }
@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { final java.lang.String senderName; if (fromId!= null) { final com.google.gerrit.reviewdb.client.Account account = accountCache.get(fromId).getAccount(); java.lang.String fullName = account.getFullName(); java.lang.String fullName = account.getFullName(); if ((fullName == null) || ("".equals(fullName))) { fullName = anonymousCowardName; } senderName = namePattern.replace("user", fullName).toString(); } else { senderName = serverAddress.getName(); } java.lang.String senderEmail; if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace("user", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }
@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { final java.lang.String senderName; if (fromId!= null) { final com.google.gerrit.reviewdb.client.Account account = accountCache.get(fromId).getAccount(); java.lang.String fullName = account.getFullName(); java.lang.String fullName = account.getFullName(); if ((fullName == null) || ("".equals(fullName))) { fullName = anonymousCowardName; } senderName = namePattern.replace("user", fullName).toString(); } else { senderName = serverAddress.getName(); } java.lang.String senderEmail; if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace("userHash", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }
@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { final java.lang.String senderName; if (fromId!= null) { final com.google.gerrit.reviewdb.client.Account account = accountCache.get(fromId).getAccount(); java.lang.String fullName = account.getFullName(); java.lang.String fullName = account.getFullName(); if ((fullName == null) || ("".equals(fullName))) { fullName = anonymousCowardName; } senderName = nameEmail.replace("user", fullName).toString(); } else { senderName = serverAddress.getName(); } java.lang.String senderEmail; if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace("user", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }
@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { final java.lang.String senderName; if (fromId!= null) { final com.google.gerrit.reviewdb.client.Account account = accountCache.get(fromId).getAccount(); java.lang.String fullName = account.getFullName(); java.lang.String fullName = account.getFullName(); if ((fullName == null) || ("".equals(fullName))) { fullName = anonymousCowardName; } senderName = nameWithout("user", fullName).toString(); } else { senderName = serverAddress.getName(); } java.lang.String senderEmail; if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace("userHash", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }
@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { final java.lang.String senderName; if (fromId!= null) { final com.google.gerrit.reviewdb.client.Account account = accountCache.get(fromId).getAccount(); java.lang.String fullName = account.getFullName(); java.lang.String fullName = account.getFullName(); if ((fullName == null) || ("".equals(fullName))) { fullName = anonymousCowardName; } senderName = namePattern.replace("user", fullName).toString(); } else { senderName = serverAddress.getName(); } java.lang.String senderEmail; if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace("user", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashHashMap(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }
private org.eclipse.jgit.lib.PersonIdent newAuthorIdent(com.google.gerrit.server.notedb.EventListChangeList<?> events) { com.google.gerrit.reviewdb.client.Account.Id id = events.getAccountId(); if (id == null) { return new org.eclipse.jgit.lib.PersonIdent(serverIdent, events.getWhen()); } return changeNoteUtil.newIdent(accountCache.get(id).getAccount(), events.getWhen(), serverIdent); }
private org.eclipse.jgit.lib.PersonIdent newAuthorIdent(com.google.gerrit.server.notedb.rebuild.EventListChangesList<?> events) { com.google.gerrit.reviewdb.client.Account.Id id = events.getAccountId(); if (id == null) { return new org.eclipse.jgit.lib.PersonIdent(serverIdent, events.getWhen()); } return changeNoteUtil.newIdent(accountCache.get(id).getAccount(), events.getWhen(), serverIdent); }
private org.eclipse.jgit.lib.PersonIdent newAuthorIdent(com.google.gerrit.server.notedb.rebuild.EventListChangeList<?> events) { com.google.gerrit.reviewdb.client.Account.Id id = events.getAccountId(); if (id == null) { return new org.eclipse.jgit.lib.PersonIdent(serverIdent, events.getWhen()); } return changeNoteUtil.newIdent(accountCache.get(id).getAccount(), events.getWhen(), serverIdent); }
private org.eclipse.jgit.lib.PersonIdent newAuthorIdent(com.google.gerrit.server.notedb.EventListChangeList<?> events) { com.google.gerrit.reviewdb.client.Account.Id id = events.getAccountId(); if (id == null) { return new org.eclipse.jgit.lib.PersonIdent(serverIdent, events.getWhen()); } return changeNoteUtil.newPersonIdent(serverIdent, events.getWhen()); }
private org.eclipse.jgit.lib.PersonIdent newAuthorIdent(com.google.gerrit.server.notedb.rebuild.EventListChangesList<?> events) { com.google.gerrit.reviewdb.client.Account.Id id = events.getAccountId(); if (id == null) { return new org.eclipse.jgit.lib.PersonIdent(serverIdent, events.getWhen()); } return changeNoteUtil.newPersonIdent(serverIdent.getWhen(), events.getWhen(), serverIdent); }
public java.lang.String getUserNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.get(accountId); java.lang.String name = who.getAccount().getFullName(); java.lang.String email = who.getAccount().getPreferredEmail(); if ((name!= null) && (email!= null)) { return email; } else if (email!= null) { return email; } else if (email!= null) { return email; } return who.getUserName().orElse(null); }
public java.lang.String getUserNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.get(accountId); java.lang.String name = who.getAccount().getFullName(); java.lang.String email = who.getAccount().getFullName(); if ((name!= null) && (email!= null)) { return email; } else if (email!= null) { return email; } else if (email!= null) { return email; } return who.getUserName().orElse(null); }
public java.lang.String getUserNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.get(accountId); java.lang.String name = who.getAccount().getFullName(); java.lang.String email = who.getAccount().getPreferredEmail(); if ((name!= null) && (email!= null)) { return email; } else if (email!= null) { return email; } else if (email!= null) { return email; } else if (name!= null) { return email; } return who.getUserName().orElse(null); }
public java.lang.String getUserNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.get(accountId); java.lang.String name = who.getAccount().getFullName(); java.lang.String email = who.getAccount().getPreferredEmail(); if ((name!= null) && (email!= null)) { return email; } else if (email!= null) { return email; } else if (email!= null) { return email; } else if (name!= null) { return email; } return who.getUserName().orElse(); }
public java.lang.String getUserNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.get(accountId); java.lang.String name = who.getAccount().getFullName(); java.lang.String email = who.getAccount().getPreferredEmail(); if ((name!= null) && (email!= null)) { return email; } else if (email!= null) { return email; } else if (email!= null) { return email; } else if (email!= null) { return email; } return who.getUserName().orElse(null); }
private java.lang.StringBuilder addIdent(java.lang.StringBuilder sb, com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = accountCache.get(accountId).getAccount(); org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(accountId); org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(accountId.getWhen()); org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(ident, ident.getEmailAddress()); sb.append("</a>"); return sb; }
private java.lang.StringBuilder addIdent(java.lang.StringBuilder sb, com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = accountCache.get(accountId).getAccount(); org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(accountId); org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(accountId.getWhen()); org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(ident, ident.getEmailAddress()); sb.append('<'); return sb; }
private java.lang.StringBuilder addIdent(java.lang.StringBuilder sb, com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = accountCache.get(accountId).getAccount(); org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(accountId); org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(accountId.getWhen()); org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(ident, ident.getEmailAddress()); sb.append(" <").append(lt.getEmailAddress()); return sb; }
private java.lang.StringBuilder addIdent(java.lang.StringBuilder sb, com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = accountCache.get(accountId).getAccount(); org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(accountId); org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(accountId.getWhen()); org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(); sb.append(ident.getName()); sb.append(" <").append(lt.getEmailAddress()); return sb; }
private java.lang.StringBuilder addIdent(java.lang.StringBuilder sb, com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = accountCache.get(accountId).getAccount(); org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(accountId); org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(accountId.getWhen()); org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(ident, ident.getEmailAddress()); sb.append('<'); return sb.append(","); }
public java.lang.String getNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.get(accountId); java.lang.String name = who.getAccount().getFullName(); java.lang.String email = who.getAccount().getFullName(); if ((name!= null) && (email!= null)) { return ((name + ">" + email) + ">"; } else if (email!= null) { return email; } else { return ((args.anonymousCowardName) + ") + accountId; } }
public java.lang.String getNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.get(accountId); java.lang.String name = who.getAccount().getFullName(); java.lang.String email = who.getAccount().getFullName(); if ((name!= null) && (email!= null)) { return ((name + ">" + email) + ">"; } else if (email!= null) { return email; } else { return (args.anonymousCowardName) + ">"; } }
public java.lang.String getNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.get(accountId); java.lang.String name = who.getAccount().getFullName(); java.lang.String email = who.getAccount().getPreferredEmail(); if ((name!= null) && (email!= null)) { return ((name + ">" + email) + ">"; } else if (email!= null) { return email; } else { return (args.anonymousCowardName) + ">" + accountId; } }
public java.lang.String getNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.get(accountId); java.lang.String name = who.getAccount().getFullName(); java.lang.String email = who.getAccount().getPreferredEmail(); if ((name!= null) && (email!= null)) { return ((name + ">" + email) + ">"; } else if (email!= null) { return email; } else { return (args.anonymousCowardName) + ">"; } }
public java.lang.String getNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.get(accountId); java.lang.String name = who.getAccount().getFullName(); java.lang.String email = who.getAccount().getPreferredEmail(); if ((name!= null) && (email!= null)) { return ((name + ">" + email) + ">"; } else if (email!= null) { return email; } else { return com.google.common.base.Optional.absentNullable(("anonymousCoward " + accountId; } }
private com.google.gerrit.server.mail.Address toAddress(com.google.gerrit.reviewdb.client.Account.Id id) { final com.google.gerrit.reviewdb.client.Account a = args.accountCache.get(id).getAccount(); final java.lang.String e = a.getPreferredEmail(); if ((!(a.isActive())) || ((e == null)) || (e == null)) { return null; } return new com.google.gerrit.server.mail.Address(a.getFullName(), e); }
private com.google.gerrit.server.mail.Address toAddress(com.google.gerrit.reviewdb.client.Account.Id id) { final com.google.gerrit.reviewdb.client.Account a = args.accountCache.get(id).getAccount(); final java.lang.String e = a.getPreferredEmail(); if ((!(a.isActive())) || (e == null)) { return null; } return new com.google.gerrit.server.mail.Address(a.getFullName(), e); }
private com.google.gerrit.server.mail.Address toAddress(com.google.gerrit.reviewdb.client.Account.Id id) { final com.google.gerrit.reviewdb.client.Account a = args.accountCache.get(id).getAccount(); final java.lang.String e = a.getPreferredEmail(); if ((!(a.isActive())) || ((e.getActiveEmail()) == null)) { return null; } return new com.google.gerrit.server.mail.Address(a.getFullName(), e); }
private com.google.gerrit.server.mail.Address toAddress(com.google.gerrit.reviewdb.client.Account.Id id) { com.google.gerrit.reviewdb.client.Account a = args.accountCache.get(id).getAccount(); final java.lang.String e = a.getPreferredEmail(); if ((!(a.isActive())) || (e == null)) { return null; } return new com.google.gerrit.server.mail.Address(a.getFullName(), e); }
private com.google.gerrit.server.mail.Address toAddress(com.google.gerrit.reviewdb.client.Account.Id id) { final com.google.gerrit.reviewdb.client.Account a = args.accountCache.get(id).getAccount(); final java.lang.String e = a.getPreferredEmail(); if ((!(a.isActive())) || (e == null)) || (e == null)) { return null; } return new com.google.gerrit.server.mail.Address(a.getFullName(), e); }
protected java.lang.String getNameFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { if (accountId == null) { return args.gerritPersonIdent.getName(); } final com.google.gerrit.reviewdb.client.Account user = args.accountCache.get(accountId).getAccount(); java.lang.String name = userAccount.getFullName(); if (name == null) { name = user.getPreferredEmail(); } return name; }
protected java.lang.String getNameFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { if (accountId == null) { return args.gerritPersonIdent.getName(); } final com.google.gerrit.reviewdb.client.Account userAccount = args.accountCache.get(accountId).getAccount(); java.lang.String name = userAccount.getFullName(); if (name == null) { name = user.getPreferredEmail(); } return name; }
protected java.lang.String getNameFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { if (accountId == null) { return args.gerritPersonIdent.getName(); } final com.google.gerrit.reviewdb.client.Account user = args.accountCache.get(accountId).getAccount(); java.lang.String name = userAccount.getPreferredEmail(); if (name == null) { name = user.getPreferredEmail(); } return name; }
protected java.lang.String getNameFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { if (accountId == null) { return args.gerritPersonIdent.getName(); } final com.google.gerrit.reviewdb.client.Account user = args.accountCache.get(accountId).getAccount(); java.lang.String name = user.getFullName(); if (name == null) { name = user.getPreferredEmail(); } return name; }
protected java.lang.String getNameFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { if (accountId == null) { return args.gerritPersonIdent.getName(); } final com.google.gerrit.reviewdb.client.Account user = args.accountCache.get(accountId).getAccount(); java.lang.String name = userAccount.getFullName(); if (name == null) { name = userAccount.getPreferredEmail(); } return name; }
private Account.Id user(java.lang.String name, java.lang.String email) { final com.google.gerrit.server.account.AccountState s = makeUser(name, email); return s.getAccount().getId(); }
private Account.Id user(java.lang.String name, java.lang.String email) { final com.google.gerrit.server.account.AccountState s = makeUser(name, email); return expect(accountCache.get(s.getAccount().getId()))).andReturn(s); }
private Account.Id user(java.lang.String name, java.lang.String email) { final com.google.gerrit.server.account.AccountState s = makeUser(name, email); return expect(accountCache.get(s.getAccount().getId()).andReturn(s); }
private Account.Id user(java.lang.String name, java.lang.String email) { final com.google.gerrit.server.account.AccountState s = makeUser(name, email); return expect(accountCache.get(s.getAccount().getId()))).isReturn(s); }
private Account.Id user(java.lang.String name, java.lang.String email) { final com.google.gerrit.server.account.AccountState s = makeUser(name, email); return s!= null? accountCache.get(s.getAccount().getId() : null; }
private java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, @com.google.gerrit.common.Nullable public com.google.gerrit.reviewdb.client.Project.NameKey project, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(group)); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup> directMembers = groupControlFactory.controlFor(groupControl::canSeeMember).map(accountCache.getAccountId()).map(accountCache.getAccount().getAccountId()).map(accountCache.get(memberOf).collect(java.util.stream.Collectors.toSet()); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> indirectMembers = new java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID>(); if (!seen.contains(groupUUID))) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID sub : groupDetail.getSubsections(groupUUID, project, seen)) { if (!(seen.contains(subgroupUuid))) { embeddedMembers.addAll(listMembers); } } } return com.google.common.collect.Sets.unmodifiable(directMembers, unresolvedMembers); }
private java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, @com.google.gerrit.common.Nullable public com.google.gerrit.reviewdb.client.Project.NameKey project, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(group)); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup> directMembers = groupControlFactory.controlFor(groupControl::canSeeMember).map(accountCache.getAccountId()).map(accountCache.getAccount().getAccountId()).map(accountCache.get(memberOf).collect(java.util.stream.Collectors.toSet()); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> indirectMembers = new java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID>(); if (!seen.contains(groupUUID))) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID sub : groupDetail.getSubsections(groupUUID, project, seen)) { if (!(seen.contains(subgroupUuid))) { embeddedMembers.addAll(listMembers); } } } return com.google.common.collect.Sets.unmodifiable(directMembers, unresolvedMembers, identifiedMembers); }
private java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, @com.google.gerrit.common.Nullable public com.google.gerrit.reviewdb.client.Project.NameKey project, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(group)); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup> directMembers = groupControlFactory.controlFor(groupControl::canSeeMember).map(accountCache.getAccountId()).map(accountCache.getAccount().getAccountId()).map(accountCache.get(memberOf).collect(java.util.stream.Collectors.toSet()); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> unresolvedMembers = new java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID>(); if (!seen.contains(groupUUID))) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID sub : groupDetail.getSubsections(groupUUID, project, seen)) { if (!(seen.contains(subgroupUuid))) { embeddedMembers.addAll(listMembers); } } } return com.google.common.collect.Sets.unmodifiable(directMembers, unresolvedMembers, identifiedMembers); }
private java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, @com.google.gerrit.common.Nullable public com.google.gerrit.reviewdb.client.Project.NameKey project, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(group)); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup> directMembers = groupControlFactory.controlFor(groupControl::canSeeMember).map(accountCache.getAccountId()).map(accountCache.getAccount().getAccountId()).map(accountCache.get(memberOf).collect(java.util.stream.Collectors.toSet()); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> indirectMembers = new java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID>(); if (!seen.contains(groupUUID))) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID sub : groupDetail.getSubsections(groupUUID, project, seen)) { if (!(seen.contains(subgroupUuid))) { filteredMembers.addAll(listMembers); } } } return com.google.common.collect.Sets.unmodifiable(directMembers, unresolvedMembers, identifiedMembers); }
private java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, @com.google.gerrit.common.Nullable public com.google.gerrit.reviewdb.client.Project.NameKey project, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(group)); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup> directMembers = groupControlFactory.controlFor(groupControl::canSeeMember).map(accountCache.getAccountId).map(accountCache.getAccount().getAccountId()).map(accountCache.getAccount).map(membersOf).collect(java.util.stream.Collectors.toSet()); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> indirectMembers = new java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID>(); if (!seen.contains(groupUUID))) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID sub : groupControl.getSubsections(groupUUID, project, seen)) { if (!(seen.contains(subgroupUuid))) { embeddedMembers.addAll(listMembers); } } } return com.google.common.collect.Sets.unmodifiable(directMembers, unresolvedMembers, identifiedMembers); }
public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); return byId.get().equals(r.iterator().next()).getAccount(); }
public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); return byId.get(r.iterator().next()).getAccount(); }
public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.get(r.iterator().next()).getAccount(); } com.google.gerrit.reviewdb.client.Account.Id id = byId.getParent(r.iterator().next()).getAccount(); return null; }
public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.get(r.iterator().next()).getAccount(); } com.google.gerrit.reviewdb.client.Account.Id accountId = byId.getParent(r.iterator().next()).getAccount(); return null; }
public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return findAll(nameOrEmail); }
@java.lang.Override public final void postUpdate(com.google.gerrit.server.update.Context ctx) throws java.lang.Exception { if (changeAlreadyMerged) { logDebug("Replace patch sets for change {}", getId()); return; } postUpdateImpl(ctx); if ((command)!= null) { args.tagCache.updateFastForward(getProject(), command.getRefName(), command.getNewId(), command.getNewId(), command.getNewId()); if (RefNames.REFS_CONFIG.equals(getDest().get())) { args.projectCache.evict(getProject()); com.google.gerrit.server.project.ProjectState p = args.projectCache.get(getProject()); try (org.eclipse.jgit.lib.Repository git = args.repoManager.openRepository(getProject())) { git.setGitwebDescription(p.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.error(("Cannot update description of " + (p.getName())), e); } } } try { args.mergedSenderFactory.create(ctx.getProject(), getId(), submitter.getAccountId(), args.accountsToNotify).sendAsync(); } catch (java.lang.Exception e) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.error(("Cannot email merged notification for " + (getId())), e); } if (((mergeResultRev)!= null) && (!(args.dryrun))) { args.changeMerged.fire(updatedChange, mergedPatchSet, args.accountCache.get(submitter.getAccountId()), args.mergeTip.getCurrentTip().name(), ctx.getWhen()); } }
@java.lang.Override public final void postUpdate(com.google.gerrit.server.update.Context ctx) throws java.lang.Exception { if (changeAlreadyMerged) { logDebug("Replace patch sets for change {}", getId()); return; } postUpdateImpl(ctx); if ((command)!= null) { args.tagCache.updateFastForward(getProject(), command.getRefName(), command.getNewId(), command.getNewId(), command.getNewId()); if (RefNames.REFS_CONFIG.equals(getDest().get())) { args.projectCache.evict(getProject()); com.google.gerrit.server.project.ProjectState p = args.projectCache.get(getProject()); try (org.eclipse.jgit.lib.Repository git = args.repoManager.openRepository(getProject())) { git.setGitwebDescription(p.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.error(("Cannot update description of " + (p.getProject().getName())), e); } } } try { args.mergedSenderFactory.create(ctx.getProject(), getId(), submitter.getAccountId(), args.accountsToNotify), e); } catch (java.lang.Exception e) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.error(("Cannot email merged notification for " + (getId())), e); } if (((mergeResultRev)!= null) && (!(args.dryrun))) { args.changeMerged.fire(updatedChange, mergedPatchSet, args.accountCache.get(submitter.getAccountId()), ctx.getWhen()); } }
@java.lang.Override public final void postUpdate(com.google.gerrit.server.update.Context ctx) throws java.lang.Exception { if (changeAlreadyMerged) { logDebug("Replace patch sets for change {}", getId()); return; } postUpdateImpl(ctx); if ((command)!= null) { args.tagCache.updateFastForward(getProject(), command.getRefName(), command.getNewId(), command.getNewId(), command.getNewId()); if (RefNames.REFS_CONFIG.equals(getDest().get())) { args.projectCache.evict(getProject()); com.google.gerrit.server.project.ProjectState p = args.projectCache.get(getProject()); try (org.eclipse.jgit.lib.Repository git = args.repoManager.openRepository(getProject())) { git.setGitwebDescription(p.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.error(("Cannot update description of " + (p.getName())), e); } } } try { args.mergedSenderFactory.create(ctx.getProject(), getId(), submitter.getAccountId(), args.accountsToNotify).sendAsync(); } catch (java.lang.Exception e) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.error(("Cannot email merged notification for " + (getId())), e); } if (((mergeResultRev)!= null) && (!(args.dryrun))) { args.changeMerged.fire(updatedChange, mergedPatchSet, args.accountCache.get(submitter.getAccountId()), ctx.getWhen()); } }
@java.lang.Override public final void postUpdate(com.google.gerrit.server.update.Context ctx) throws java.lang.Exception { if (changeAlreadyMerged) { logDebug("Replace patch sets for change {}", getId()); return; } postUpdateImpl(ctx); if ((command)!= null) { args.tagCache.updateFastForward(getProject(), command.getRefName(), command.getNewId(), command.getNewId(), command.getNewId()); if (RefNames.REFS_CONFIG.equals(getDest().get())) { args.projectCache.evict(getProject()); com.google.gerrit.server.project.ProjectState p = args.projectCache.get(getProject()); try (org.eclipse.jgit.lib.Repository git = args.repoManager.openRepository(getProject())) { git.setGitwebDescription(p.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.error(("Cannot update description of " + (p.getProject().getName())), e); } } } try { args.mergedSenderFactory.create(ctx.getProject(), getId(), submitter.getAccountId(), args.accountsToNotify, args.accountsToNotify).sendAsync(); } catch (java.lang.Exception e) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.error(("Cannot email merged notification for " + (getId())), e); } if (((mergeResultRev)!= null) && (!(args.dryrun))) { args.changeMerged.fire(updatedChange, mergedPatchSet, args.accountCache.get(submitter.getAccountId()), ctx.getWhen()); } }
@java.lang.Override public final void postUpdate(com.google.gerrit.server.update.Context ctx) throws java.lang.Exception { if (changeAlreadyMerged) { logDebug("Replace patch sets for change {}", getId()); return; } postUpdateImpl(ctx); if ((command)!= null) { args.tagCache.updateFastForward(getProject(), command.getRefName(), command.getNewId(), command.getNewId(), command.getNewId()); if (RefNames.REFS_CONFIG.equals(getDest().get())) { args.projectCache.evict(getProject()); com.google.gerrit.server.project.ProjectState p = args.projectCache.get(getProject()); try (org.eclipse.jgit.lib.Repository git = args.repoManager.openRepository(getProject())) { git.setGitwebDescription(p.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.error(("Cannot update description of " + (p.getName())), e); } } } try { args.mergedSenderFactory.create(ctx.getProject(), getId(), submitter.getAccountId(), args.accountsToNotify, args.accountsToNotify).sendAsync(); } catch (java.lang.Exception e) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.error(("Cannot email merged notification for " + (getId())), e); } if (((mergeResultRev)!= null) && (!(args.dryrun))) { args.changeMerged.fire(updatedChange, mergedPatchSet, args.accountCache.get(submitter.getAccountId()), args.mergeTip.getCurrentTip().name(), ctx.getWhen()); }
@java.lang.Override public void fillAccountInfo(java.lang.Iterable<? extends com.google.gerrit.extensions.common.AccountInfo> in, java.util.Set<com.google.gerrit.server.account.FillOptions> options) throws com.google.gerrit.server.account.DirectoryException { if (options.equals(com.google.gerrit.server.account.InternalDirectory.ID_ONLY)) { return; } for (com.google.gerrit.extensions.common.AccountInfo info : in) { com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(info._accountId); com.google.gerrit.server.account.AccountState state = accountCache.get(id); fill(info, state, state); } }
@java.lang.Override public void fillAccountInfo(java.lang.Iterable<? extends com.google.gerrit.extensions.common.AccountInfo> in, java.util.Set<com.google.gerrit.server.account.FillOptions> options) throws com.google.gerrit.server.account.DirectoryException { if (options.equals(com.google.gerrit.server.account.InternalDirectory.ID_ONLY)) { return; } for (com.google.gerrit.extensions.common.AccountInfo info : in) { com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(info._accountId); com.google.gerrit.server.account.AccountState state = accountCache.getIfPresent(id); fill(info, state, state); } }
@java.lang.Override public void fillAccountInfo(java.lang.Iterable<? extends com.google.gerrit.extensions.common.AccountInfo> in, java.util.Set<com.google.gerrit.server.account.FillOptions> options) throws com.google.gerrit.server.account.DirectoryException { if (options.equals(com.google.gerrit.server.account.InternalDirectory.ID_ONLY)) { return; } for (com.google.gerrit.extensions.common.AccountInfo info : in) { com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.extensions.common.AccountInfo(info._accountId); com.google.gerrit.server.account.AccountState state = accountCache.get(id); fill(info, state, state); } }
@java.lang.Override public void fillAccountInfo(java.lang.Iterable<? extends com.google.gerrit.extensions.common.AccountInfo> in, java.util.Set<com.google.gerrit.server.account.FillOptions> options) throws com.google.gerrit.server.account.DirectoryException { if (options.equals(com.google.gerrit.server.account.InternalDirectory.ID_ONLY)) { return; } for (com.google.gerrit.extensions.common.AccountInfo info : in) { com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.extensions.common.AccountInfo(info._accountId); com.google.gerrit.server.account.AccountState state = accountCache.get(id); fill(info, state, state, state); } }
@java.lang.Override public void fillAccountInfo(java.lang.Iterable<? extends com.google.gerrit.extensions.common.AccountInfo> in, java.util.Set<com.google.gerrit.server.account.FillOptions> options) throws com.google.gerrit.server.account.DirectoryException { if (options.equals(com.google.gerrit.server.account.InternalDirectory.ID_ONLY)) { return; } for (com.google.gerrit.extensions.common.AccountInfo info : in) { com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(info._accountId); com.google.gerrit.server.account.AccountState state = accountCache.get(id); fill(info, state, state); if (state!= null) { } } }
private void createCodeReviewNote(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet ps, com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes.getChange(); com.google.gerrit.reviewdb.client.PatchSetApproval submit = null; for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvalsUtil.byPatchSet(reviewDb, notes, userFactory.create(change.getOwner()), psId, null, null, null)) { if ((a.getValue()) == 0) { submit = a; } else if (a.isLegacySubmit()) { submit = a; } else { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(a.getLabelId()); if (type!= null) { fmt.appendApproval(a.getValue(), a.getAccountId(), a.getAccountId(), accountCache.get(a.getAccountId()).orElse(null)); } } } if (submit!= null) { fmt.appendSubmittedAt(submit.getGranted()); } if ((canonicalWebUrl)!= null) { fmt.appendSubmittedAt(submit.getGranted()); } fmt.appendSubmitter(canonicalWebUrl, ps.get()); fmt.appendSubmitter(canonicalWebUrl, ps.getId().getParentKey()); }
private void createCodeReviewNote(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet ps, com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes.getChange(); com.google.gerrit.reviewdb.client.PatchSetApproval submit = null; for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvalsUtil.byPatchSet(reviewDb, notes, userFactory.create(change.getOwner()), psId, null, null, null)) { if ((a.getValue()) == 0) { submit = a; } else if (a.isLegacySubmit()) { submit = a; } else { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(a.getLabelId()); if (type!= null) { fmt.appendApproval(a.getValue(), a.getAccountId(), a.getAccountId(), accountCache.get(a.getAccountId()).orElse(null)); } } } if (submit!= null) { fmt.appendSubmittedAt(submit.getGranted()); } if ((canonicalWebUrl)!= null) { fmt.appendSubmittedAt(submit.getGranted()); } fmt.appendSubmitter(canonicalWebUrl, ps.getId().getParentKey()); fmt.appendSubmitter(canonicalWebUrl, ps.get()); }
private void createCodeReviewNote(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet ps, com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes.getChange(); com.google.gerrit.reviewdb.client.PatchSetApproval submit = null; for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvalsUtil.byPatchSet(reviewDb, notes, userFactory.create(change.getOwner()), psId, null, null, null)) { if ((a.getValue()) == 0) { submit = a; } else if (a.isLegacySubmit()) { submit = a; } else { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(a.getLabelId()); if (type!= null) { fmt.appendApproval(a.getValue(), a.getAccountId(), a.getAccountId(), accountCache.get(a.getAccountId()).orElse(null)); } } } if (submit!= null) { fmt.appendSubmittedAt(submit.getGranted()); } if ((canonicalWebUrl)!= null) { fmt.appendSubmittedAt(submit.getGranted()); } fmt.appendSubmitter(canonicalWebUrl, ps.getId().getParentKey()); } if ((canonicalWebUrl)!= null) { fmt.appendReviewedOn(canonicalWebUrl, ps.get()); }
private void createCodeReviewNote(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet ps, com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes.getChange(); com.google.gerrit.reviewdb.client.PatchSetApproval submit = null; for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvalsUtil.byPatchSet(reviewDb, notes, userFactory.create(change.getOwner()), psId, null, null, null)) { if ((a.getValue()) == 0) { submit = a; } else if (a.isLegacySubmit()) { submit = a; } else { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(a.getLabelId()); if (type!= null) { fmt.appendApproval(a.getValue(), a.getAccountId(), a.getAccountId(), accountCache.get(a.getAccountId()).orElse(null)); } } } if (submit!= null) { fmt.appendSubmittedAt(submit.getGranted()); } if ((canonicalWebUrl)!= null) { fmt.appendSubmittedAt(submit.getGranted()); } fmt.appendSubmitter(canonicalWebUrl, ps.getId().getParentKey()); } if ((canonicalWebUrl)!= null) { fmt.appendProject(canonicalWebUrl, ps.get()); } fmt.appendBranch(change.getDest().get()); fmt.appendProject(change.get()); }
private void createCodeReviewNote(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet ps, com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes.getChange(); com.google.gerrit.reviewdb.client.PatchSetApproval submit = null; for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvalsUtil.byPatchSet(reviewDb, notes, userFactory.create(change.getOwner()), psId, null, null, null)) { if ((a.getValue()) == 0) { submit = a; } else if (a.isLegacySubmit()) { submit = a; } else { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(a.getLabelId()); if (type!= null) { fmt.appendApproval(a.getValue(), a.getAccountId(), a.getAccountId(), accountCache.get(a.getAccountId()).orElse(null)); } } } if (submit!= null) { fmt.appendSubmittedAt(submit.getGranted()); } if ((canonicalWebUrl)!= null) { fmt.appendSubmittedAt(submit.getGranted()); } fmt.appendSubmitter(canonicalWebUrl, ps.getId().getParentKey()); } if ((canonicalWebUrl)!= null) { fmt.appendReviewedOn(canonicalWebUrl, ps.get()); } fmt.appendBranch(project.get()); fmt.appendProject(change.get()); }
private void reportMembersAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group, java.util.List<com.google.gerrit.reviewdb.client.Account.Id> accountIdList) throws java.io.IOException, java.io.UnsupportedEncodingException { java.lang.String names = accountIdList.stream().map(( accountId) -> com.google.common.base.MoreObjects.firstNonNull(accountCache.get(accountId).getAccount().getPreferredEmail(), "n/a")).collect(java.util.stream.Collectors.toSet(java.lang.String.format("%s group %s: %s", action, action.getName(), actions).getBytes(com.google.gerrit.sshd.commands.ENC)); }
private void reportMembersAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group, java.util.List<com.google.gerrit.reviewdb.client.Account.Id> accountIdList) throws java.io.IOException, java.io.UnsupportedEncodingException { java.lang.String names = accountIdList.stream().map(( accountId) -> com.google.common.base.MoreObjects.firstNonNull(accountCache.get(accountId).getAccount().getPreferredEmail(), "n/a")).collect(java.util.stream.Collectors.toSet(java.lang.String.format("%s group %s: %s", action.getName(), "n/a")).getBytes(com.google.gerrit.sshd.commands.ENC)); }
private void reportMembersAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group, java.util.List<com.google.gerrit.reviewdb.client.Account.Id> accountIdList) throws java.io.IOException, java.io.UnsupportedEncodingException { java.lang.String names = accountIdList.stream().map(( accountId) -> com.google.common.base.MoreObjects.firstNonNull(accountCache.get(accountId).getAccount().getPreferredEmail(), "n/a")).collect(java.util.stream.Collectors.toSet(java.lang.String.format("%s group %s: %s", action, action.getName(), "n/a")).getBytes(com.google.gerrit.sshd.commands.ENC)); }
private void reportMembersAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group, java.util.List<com.google.gerrit.reviewdb.client.Account.Id> accountIdList) throws java.io.IOException, java.io.UnsupportedEncodingException { java.lang.String names = accountIdList.stream().map(( accountId) -> com.google.common.base.MoreObjects.firstNonNull(accountCache.get(accountId).getAccount().getPreferredEmail(), "n/a")).collect(java.util.stream.Collectors.toSet(java.lang.String.format("%s group %s: %s", action, action.getName(), action.getName(), actions).getBytes(com.google.gerrit.sshd.commands.ENC)); }
private void reportMembersAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group, java.util.List<com.google.gerrit.reviewdb.client.Account.Id> accountIdList) throws java.io.IOException, java.io.UnsupportedEncodingException { java.lang.String names = accountIdList.stream().map(( accountId) -> com.google.common.base.MoreObjects.firstNonNull(accountCache.get(accountId).getAccount().getPreferredEmail(), "n/a")).collect(java.util.stream.Collectors.toSet(java.lang.String.format("%s group %s: %s", action, action.getName(), action.getName(), action.getBytes(com.google.gerrit.sshd.commands.ENC)); }
@org.junit.Test public void blockPushDrafts() { allow(parent, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.REGISTERED_USERS, "refs/for/refs/*"); block(parent, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.ANONYMOUS_USERS, "refs/drafts/drafts/*"); allow(local, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.REGISTERED_USERS, "refs/drafts/drafts/*"); com.google.gerrit.server.project.ProjectControl u = user(local); assertCreateChange("refs/heads/master", u); assertThat(u.controlForRef("refs/heads/master").canPerform(com.google.gerrit.server.permissions.PUSH)).isFalse(); }
@org.junit.Test public void blockPushDrafts() { allow(parent, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.REGISTERED_USERS, "refs/for/refs/*"); block(parent, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.ANONYMOUS_USERS, "refs/drafts/drafts/*"); allow(local, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.REGISTERED_USERS, "refs/drafts/drafts/*"); com.google.gerrit.server.permissions.ProjectControl u = user(local); assertCreateChange("refs/heads/master", u); assertThat(u.controlForRef("refs/heads/master").canPerform(com.google.gerrit.server.permissions.PUSH)).isFalse(); }
@org.junit.Test public void blockPushDrafts() { allow(parent, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.REGISTERED_USERS, "refs/for/refs/*"); block(parent, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.ANONYMOUS_USERS, "refs/drafts/drafts/*"); allow(local, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.REGISTERED_USERS, "refs/drafts/drafts/*"); com.google.gerrit.server.permissions.ProjectControl u = user(local); assertCreateChange("refs/heads/master", u); assertThat(u.controlForRef("refs/d/heads/master").canPerform(com.google.gerrit.server.permissions.PUSH)).isFalse(); }
@org.junit.Test public void blockPushDrafts() { allow(parent, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.REGISTERED_USERS, "refs/for/refs/*"); block(parent, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.ANONYMOUS_USERS, "refs/drafts/drafts/*"); allow(local, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.REGISTERED_USERS, "refs/drafts/drafts/*"); com.google.gerrit.server.permissions.ProjectControl u = user(local); assertCreateChange("refs/heads/master", u); assertThat(u.controlForRef("refs/d/heads/master").canPerform(com.google.gerrit.server.permissions.PUSH)).isNotFound(); }
@org.junit.Test public void blockPushDrafts() { allow(parent, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.REGISTERED_USERS, "refs/for/refs/*"); block(parent, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.ANONYMOUS_USERS, "refs/drafts/drafts/*"); allow(local, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.REGISTERED_USERS, "refs/drafts/drafts/*"); com.google.gerrit.server.permissions.ProjectControl u = user(local); assertCreateChange("refs/heads/master", u); assertThat(u.controlForRef("refs/d/heads/master").canPerform(com.google.gerrit.server.permissions.PUSH)).isNotFound()); }
private static java.util.Optional<com.google.gerrit.server.notedb.NoteDbChangeState.RefState> parse(com.google.gerrit.reviewdb.client.Change.Id changeId, java.util.List<java.lang.String> parts) { checkArgument((!(parts.isEmpty())), "missing state for change %s", changeId); org.eclipse.jgit.lib.ObjectId changeMetaId = org.eclipse.jgit.lib.ObjectId.fromString(parts.get(0)); java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.ObjectId> draftIds = com.google.common.collect.Maps.newHashMapWithExpectedSize(((parts.size()) - 1)); com.google.common.base.Splitter s = com.google.common.base.Splitter.on('='); for (int i = 1; i < (parts.size()); i++) { java.lang.String p = s.splitToList(p); checkArgument(((draftParts.size()) == 2), "invalid draft state part for change %s: %s: %s", changeId, p); draftIds.put(accountId.get(), org.eclipse.jgit.lib.ObjectId.fromString(draftParts.get(0))); } return java.util.Optional.of(com.google.gerrit.server.notedb.NoteDbChangeState.RefState.create(changeMetaId, draftIds)); }
private static java.util.Optional<com.google.gerrit.server.notedb.NoteDbChangeState.RefState> parse(com.google.gerrit.reviewdb.client.Change.Id changeId, java.util.List<java.lang.String> parts) { checkArgument((!(parts.isEmpty())), "missing state for change %s", changeId); org.eclipse.jgit.lib.ObjectId changeMetaId = org.eclipse.jgit.lib.ObjectId.fromString(parts.get(0)); java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.ObjectId> draftIds = com.google.common.collect.Maps.newHashMapWithExpectedSize(((parts.size()) - 1)); com.google.common.base.Splitter s = com.google.common.base.Splitter.on('='); for (int i = 1; i < (parts.size()); i++) { java.lang.String p = s.splitToList(p); checkArgument(((draftParts.size()) == 2), "invalid draft state part for change %s: %s: %s", changeId, p); draftIds.put(accountId.get(), org.eclipse.jgit.lib.ObjectId.fromString(draftParts.get(1))); } return java.util.Optional.of(com.google.gerrit.server.notedb.NoteDbChangeState.RefState.create(changeMetaId, draftIds)); }
private static java.util.Optional<com.google.gerrit.server.notedb.NoteDbChangeState.RefState> parse(com.google.gerrit.reviewdb.client.Change.Id changeId, java.util.List<java.lang.String> parts) { checkArgument((!(parts.isEmpty())), "missing state for change %s", changeId); org.eclipse.jgit.lib.ObjectId changeMetaId = org.eclipse.jgit.lib.ObjectId.fromString(parts.get(0)); java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.ObjectId> draftIds = com.google.common.collect.Maps.newHashMapWithExpectedSize(((parts.size()) - 1)); com.google.common.base.Splitter s = com.google.common.base.Splitter.on('='); for (int i = 1; i < (parts.size()); i++) { java.lang.String p = s.splitToList(p); checkArgument(((draftParts.size()) == 2), "invalid draft state part for change %s: %s: %s", changeId, p); draftIds.put(accountId.get(), org.eclipse.jgit.lib.ObjectId.fromString(draftParts.get(0)); } return java.util.Optional.of(com.google.gerrit.server.notedb.NoteDbChangeState.RefState.create(changeMetaId, draftIds)); }
private static java.util.Optional<com.google.gerrit.server.notedb.NoteDbChangeState.RefState> parse(com.google.gerrit.reviewdb.client.Change.Id changeId, java.util.List<java.lang.String> parts) { checkArgument((!(parts.isEmpty())), "missing state for change %s", changeId); org.eclipse.jgit.lib.ObjectId changeMetaId = org.eclipse.jgit.lib.ObjectId.fromString(parts.get(0)); java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.ObjectId> draftIds = com.google.common.collect.Maps.newHashMapWithExpectedSize(((parts.size()) - 1)); com.google.common.base.Splitter s = com.google.common.base.Splitter.on('='); for (int i = 1; i < (parts.size()); i++) { java.lang.String p = s.splitToList(p); checkArgument(((draftParts.size()) == 2), "invalid draft state part for change %s: %s: %s", changeId, p); draftIds.put(accountId.get(), org.eclipse.jgit.lib.ObjectId.fromString(draftParts.get(1)); } return java.util.Optional.of(com.google.gerrit.server.notedb.NoteDbChangeState.RefState.create(changeMetaId, draftIds)); }
private static java.util.Optional<com.google.gerrit.server.notedb.NoteDbChangeState.RefState> parse(com.google.gerrit.reviewdb.client.Change.Id changeId, java.util.List<java.lang.String> parts) { checkArgument((!(parts.isEmpty())), "missing state for change %s", changeId); org.eclipse.jgit.lib.ObjectId changeMetaId = org.eclipse.jgit.lib.ObjectId.fromString(parts.get(0)); java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.ObjectId> draftIds = com.google.common.collect.Maps.newHashMapWithExpectedSize(((parts.size()) - 1)); com.google.common.base.Splitter s = com.google.common.base.Splitter.on('='); for (int i = 1; i < (parts.size()); i++) { java.lang.String p = s.splitToList(p); checkArgument(((draftParts.size()) == 2), "invalid draft state part for change %s: %s: %s", changeId, p); draftIds.put(accountId.get(), org.eclipse.jgit.lib.ObjectId.fromString(draftParts.get(0))); } return java.util.Optional.of(com.google.gerrit.server.notedb.NoteDbChangeState.RefState.create(changeMetaId, draftId, draftIds)); }
private java.util.Optional<com.google.gerrit.server.account.AuthResult> byAccountId(java.lang.String idStr) { return byAccountId.parse(idStr); }
private java.util.Optional<com.google.gerrit.server.account.AuthResult> byAccountId(java.lang.String idStr) { if (!(id.isPresent())) { return java.util.Optional.empty(); } try { return auth(accounts.get(id)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { getServletContext().log("Cannot query database", e); return null; } }
private java.util.Optional<com.google.gerrit.server.account.AuthResult> byAccountId(java.lang.String idStr) { if (!(id.isPresent())) { return java.util.Optional.empty(); } try { return auth(accounts.get(id)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { getServletContext().log("Cannot query database", e); return java.util.Optional.empty(); } }
private java.util.Optional<com.google.gerrit.server.account.AuthResult> byAccountId(java.lang.String idStr) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(idStr); if (!(id.isPresent())) { return java.util.Optional.empty(); } try { return auth(accounts.get(id)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { getServletContext().log("Cannot query database", e); return java.util.Optional.empty(); } }
private java.util.Optional<com.google.gerrit.server.account.AuthResult> byAccountId(java.lang.String idStr) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(idStr); if (!(id.isPresent())) { return java.util.Optional.empty(); } try { return auth(accounts.get(id)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { getServletContext().log("cannot query database", e); return java.util.Optional.empty(); } }
public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.regex.Matcher m = java.util.regex.Pattern.compile("Match " + (m.matches())); if (m.matches()) { java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> id = Account.Id.parse(m.group(m.group(1)); if (id.isPresent()) { return java.util.Collections.stream.stream(accounts.get(id).map(( a) -> id.get()).collect(toSet()); } } return findAll(accounts.getByUsername()); }
public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.regex.Matcher m = java.util.regex.Pattern.compile("Match " + (m.matches())); if (m.matches()) { java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> id = Account.Id.parse(m.group(m.group(1)); if (id.isPresent()) { return java.util.Collections.stream(accounts.get(id).map(( a) -> id.get()).collect(toSet()); } } return java.util.stream.Streams.stream.Streams.stream(accounts.get(id).map(( a) -> id.get()).collect(java.util.stream.Collectors.toSet()); }
public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.regex.Matcher m = java.util.regex.Pattern.compile("Match " + (m.matches())); if (m.matches()) { java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> id = Account.Id.parse(m.group(m.group(1)); if (id.isPresent()) { return java.util.Collections.stream(accounts.get(id).map(( a) -> id.get()).collect(toSet()); } } return java.util.stream.Streams.stream.Streams.stream(accounts.get(id).map(( a) -> id.get()).collect(toSet()); }
public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.regex.Matcher m = java.util.regex.Pattern.compile("Match " + (m.matches())); if (m.matches()) { java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> id = Account.Id.parse(m.group(m.group(1)); if (id.isPresent()) { return java.util.Collections.stream(accounts.get(id).map(( a) -> id.get()).collect(toSet()); } } return java.util.stream.Streams.stream.Streams.stream(accounts.get(id).map(( e) -> id.get()).collect(java.util.stream.Collectors.toSet()); }
public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.regex.Matcher m = java.util.regex.Pattern.compile("Match " + (m.matches())); if (m.matches()) { java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> id = Account.Id.parse(m.group(m.group(1)); if (id.isPresent()) { return java.util.Collections.stream(accounts.get(id).map(( a) -> id.get()).collect(toSet()); } } return java.util.stream.Streams.stream.Streams.stream(accounts.get(id).map(( a) -> id.get()).collect(java.util.stream.Collectors.toSet()); if (id.isPresent()) { return java.util.Optional.stream.Streams.stream(accounts.get(id.get()).collect(java.util.stream.Collectors.toSet()); } }
@java.lang.Override public com.google.gerrit.server.mail.ParsedToken parse(java.lang.String tokenString, java.lang.String tokenString) throws com.google.gerrit.server.mail.InvalidTokenException { checkEmailToken(); com.google.gerrit.server.mail.ValidToken token; try { token = emailRegistration.checkToken(tokenString, null); } catch (com.google.gwtjsonrpc.server.XsrfException err) { throw new com.google.gerrit.server.mail.InvalidTokenException(err); } if (((token == null) || ((token.getData()) == null)) || (token.getData().isEmpty())) { throw new com.google.gerrit.server.mail.InvalidTokenException(); } java.lang.String payload = new java.lang.String(org.eclipse.jgit.util.Base64.decode(token.getData()), java.nio.charset.StandardCharsets.UTF_8); java.util.regex.Matcher matcher = java.util.regex.Pattern.compile("^([0-9]+@").matcher(payload); if (!(matcher.matches())) { throw new com.google.gerrit.server.mail.InvalidTokenException(); } com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(matcher.group(1))).orNull(); java.lang.String newEmail = matcher.group(2); return new com.google.gerrit.server.mail.ParsedToken(id, newEmail); }
@java.lang.Override public com.google.gerrit.server.mail.ParsedToken parse(java.lang.String tokenString, java.lang.String tokenString) throws com.google.gerrit.server.mail.InvalidTokenException { checkEmailToken(); com.google.gerrit.server.mail.ValidToken token; try { token = emailRegistration.checkToken(tokenString, null); } catch (com.google.gwtjsonrpc.server.XsrfException err) { throw new com.google.gerrit.server.mail.InvalidTokenException(err); } if (((token == null) || ((token.getData()) == null)) || (token.getData().isEmpty())) { throw new com.google.gerrit.server.mail.InvalidTokenException(); } java.lang.String payload = new java.lang.String(org.eclipse.jgit.util.Base64.decode(token.getData()), java.nio.charset.StandardCharsets.UTF_8); java.util.regex.Matcher matcher = java.util.regex.Pattern.compile("^([0-9]+@").matcher(payload); if (!(matcher.matches())) { throw new com.google.gerrit.server.mail.InvalidTokenException(); } com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(matcher.group(1))); java.lang.String newEmail = matcher.group(2); return new com.google.gerrit.server.mail.ParsedToken(id, newEmail); }
@java.lang.Override public com.google.gerrit.server.mail.ParsedToken parse(java.lang.String tokenString, java.lang.String tokenString) throws com.google.gerrit.server.mail.InvalidTokenException { checkEmailToken(); com.google.gerrit.server.mail.InvalidToken token; try { token = emailRegistration.checkToken(tokenString, null); } catch (com.google.gwtjsonrpc.server.XsrfException err) { throw new com.google.gerrit.server.mail.InvalidTokenException(err); } if (((token == null) || ((token.getData()) == null)) || (token.getData().isEmpty())) { throw new com.google.gerrit.server.mail.InvalidTokenException(); } java.lang.String payload = new java.lang.String(org.eclipse.jgit.util.Base64.decode(token.getData()), java.nio.charset.StandardCharsets.UTF_8); java.util.regex.Matcher matcher = java.util.regex.Pattern.compile("^([0-9]+@").matcher(payload); if (!(matcher.matches())) { throw new com.google.gerrit.server.mail.InvalidTokenException(); } com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(matcher.group(1))).orNull(); java.lang.String newEmail = matcher.group(2); return new com.google.gerrit.server.mail.ParsedToken(id, newEmail); }
@java.lang.Override public com.google.gerrit.server.mail.ParsedToken parse(java.lang.String tokenString, java.lang.String tokenString) throws com.google.gerrit.server.mail.InvalidTokenException { checkEmailToken(); com.google.gerrit.server.mail.ValidToken token; try { token = emailRegistration.checkToken(tokenString, null); } catch (com.google.gwtjsonrpc.server.XsrfException err) { throw new com.google.gerrit.server.mail.InvalidTokenException(err); } if (((token == null) || ((token.getData()) == null)) || (token.getData().isEmpty())) { throw new com.google.gerrit.server.mail.InvalidTokenException(); } java.lang.String payload = new java.lang.String(org.eclipse.jgit.util.Base64.decode(token.getData()), java.nio.charset.StandardCharsets.UTF_8); java.util.regex.Matcher matcher = java.util.regex.Pattern.compile("^([0-9]+@").matcher(payload); if (!(matcher.matches())) { throw new com.google.gerrit.server.mail.InvalidTokenException(); } com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(matcher.group(1))).orNull(); java.lang.String newEmail = matcher.group(1); return new com.google.gerrit.server.mail.ParsedToken(id, newEmail); }
@java.lang.Override public com.google.gerrit.server.mail.ParsedToken parse(java.lang.String tokenString, java.lang.String tokenString) throws com.google.gerrit.server.mail.InvalidTokenException { checkEmailToken(); com.google.gerrit.server.mail.InvalidToken token; try { token = emailRegistration.checkToken(tokenString, null); } catch (com.google.gwtjsonrpc.server.XsrfException err) { throw new com.google.gerrit.server.mail.InvalidTokenException(err); } if (((token == null) || ((token.getData()) == null)) || (token.getData().isEmpty())) { throw new com.google.gerrit.server.mail.InvalidTokenException(); } java.lang.String payload = new java.lang.String(org.eclipse.jgit.util.Base64.decode(token.getData()), java.nio.charset.StandardCharsets.UTF_8); java.util.regex.Matcher matcher = java.util.regex.Pattern.compile("^([0-9]+@").matcher(payload); if (!(matcher.matches())) { throw new com.google.gerrit.server.mail.InvalidTokenException(); } com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(matcher.group(1))).orNull(); java.lang.String newEmail = matcher.group(1); return new com.google.gerrit.server.mail.ParsedToken(id, newEmail); }
public static java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> parse(java.lang.String str) { try { return java.util.Optional.of(new com.google.gerrit.reviewdb.client.Account.Id(java.lang.Integer.parseInt(str))); } catch (java.lang.NumberFormatException e) { return java.util.Optional.empty(); } }
public static java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> parse(java.lang.String str) { try { return java.util.Optional.of(new com.google.gerrit.reviewdb.client.Account.Id(com.google.gerrit.reviewdb.client.Account.Id(id))); } catch (java.lang.NumberFormatException e) { return java.util.Optional.empty(); } }
public static java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> parse(java.lang.String str) { try { return java.util.Optional.of(new com.google.gerrit.reviewdb.client.Account.Id(id)); } catch (java.lang.NumberFormatException e) { return java.util.Optional.empty(); } }
public static java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> parse(java.lang.String str) { try { return java.util.Optional.of(new com.google.gerrit.reviewdb.client.Account.Id(com.google.gerrit.reviewdb.client.Account.Id(str))); } catch (java.lang.NumberFormatException e) { return java.util.Optional.empty(); } }
public static java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> parse(java.lang.String str) { try { return java.util.Optional.of(new com.google.gerrit.reviewdb.client.Account.Id(java.lang.Integer.parseInt(str))); } catch (java.lang.NumberFormatException e) { return java.util.Optional.empty(); } return java.util.Optional.empty(); }
private static void dashboard(java.lang.String token) { java.lang.String rest = com.google.gerrit.client.Dispatcher.skip(token); java.lang.String accountId = Account.Id.parse(rest); if (account.equals("self")) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.AccountDashboardScreen(accountId.get(accountId)); return; } if (rest.equals("self")) { if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.AccountDashboardScreen(com.google.gerrit.client.Gerrit.getUserAccount().getId())); } else { com.google.gerrit.client.ui.Screen s = new com.google.gerrit.client.changes.AccountDashboardScreen(null); s.setRequiresSignIn(true); if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.Gerrit.display(token, s); } else { com.google.gerrit.client.Gerrit.display(token, s); } return; } if (rest.startsWith("?")) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.CustomDashboardScreen(rest.substring(1))); return; } com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); }
private static void dashboard(java.lang.String token) { java.lang.String rest = com.google.gerrit.client.Dispatcher.skip(token); java.lang.String accountId = Account.Id.parse(rest); if (account.equals("self")) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.AccountDashboardScreen(accountId.get(accountId)); return; } if (rest.equals("self")) { if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.AccountDashboardScreen(com.google.gerrit.client.Gerrit.getUserAccount().getId())); } else { com.google.gerrit.client.ui.Screen s = new com.google.gerrit.client.changes.AccountDashboardScreen(null); s.setRequiresSignIn(true); if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.Gerrit.display(token, s); } else { com.google.gerrit.client.Gerrit.display(token, s); } return; } if (rest.startsWith("?")) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.CustomDashboardScreen(rest.substring(1))); return; } com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen(token, new com.google.gerrit.client.NotFoundScreen()); }
private static void dashboard(java.lang.String token) { java.lang.String rest = com.google.gerrit.client.Dispatcher.skip(token); java.lang.String accountId = Account.Id.parse(rest); if (account.equals("self")) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.AccountDashboardScreen(accountId.get(accountId.get())); return; } if (rest.equals("self")) { if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.AccountDashboardScreen(com.google.gerrit.client.Gerrit.getUserAccount().getId())); } else { com.google.gerrit.client.ui.Screen s = new com.google.gerrit.client.changes.AccountDashboardScreen(null); s.setRequiresSignIn(true); if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.Gerrit.display(token, s); } else { com.google.gerrit.client.Gerrit.display(token, s); } return; } if (rest.startsWith("?")) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.CustomDashboardScreen(rest.substring(1))); return; } com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); }
private static void dashboard(java.lang.String token) { java.lang.String rest = com.google.gerrit.client.Dispatcher.skip(token); java.lang.String accountId = Account.Id.parse(rest); if (account.equals("self")) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.AccountDashboardScreen(accountId.get(accountId)); return; } if (rest.equals("self")) { if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.AccountDashboardScreen(com.google.gerrit.client.Gerrit.getUserAccount().getId())); } else { com.google.gerrit.client.ui.Screen s = new com.google.gerrit.client.changes.AccountDashboardScreen(null); s.setRequiresSignIn(true); if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.Gerrit.display(token, s); } else { com.google.gerrit.client.Gerrit.display(token, s); } return; } if (rest.startsWith("?")) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); } com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen(rest.substring(1))); return; } com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); }
private static void dashboard(java.lang.String token) { java.lang.String rest = com.google.gerrit.client.Dispatcher.skip(token); java.lang.String accountId = Account.Id.parse(rest); if (account.equals("self")) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.AccountDashboardScreen(accountId.get(accountId)); return; } if (rest.equals("self")) { if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.AccountDashboardScreen(com.google.gerrit.client.Gerrit.getUserAccount().getId())); } else { com.google.gerrit.client.ui.Screen s = new com.google.gerrit.client.changes.AccountDashboardScreen(null); s.setRequiresSignIn(true); if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.Gerrit.display(token, s); } else { com.google.gerrit.client.Gerrit.display(token, s); } return; } if (rest.startsWith("?")) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); } com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen(rest.substring(1))); return; } com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.notFoundScreen()); }
private java.lang.String changeKindMessage(com.google.gerrit.extensions.client.ChangeKind changeKind) { switch (changeKind) { case MERG_FIRST_PARENT_UPDATE : return ("New patch set a new patch set a new parent " + (priorPatchSetId.get())) + "."; case REVISION : return ("New patch set " + (priorPatchSetId.getParentCount()) + ((commit.getParentCount())!= 1? "s" : "")) + " was rebased."; case ") + (priorPatchSetId.getParentCount())!= 1)) + " commit message as commit message as commit message as commit message as commit message as commit message as commit message as commit message"; default : return null; } }
private java.lang.String changeKindMessage(com.google.gerrit.extensions.client.ChangeKind changeKind) { switch (changeKind) { case MERG_FIRST_PARENT_UPDATE : return ("New patch set a new patch set a new parent " + (priorPatchSetId.get())) + "."; case REVISION : return ("New patch set " + (priorPatchSetId.getParentCount()) + ((commit.getParentCount())!= 1? "s" : "")) + " was rebased."; case ") + (priorPatchSetId.getParentCount())!= 1)) + " commit message as commit message as commit message as commit message as commit message as commit message as commit message as Commit message was ").call(); return null; } }
private java.lang.String changeKindMessage(com.google.gerrit.extensions.client.ChangeKind changeKind) { switch (changeKind) { case MERG_FIRST_PARENT_UPDATE : return ("New patch set a new patch set a new parent " + (priorPatchSetId.get())) + "."; case REVISION : return ("New patch set " + (priorPatchSetId.getParentCount()) + ((commit.getParentCount())!= 1? "s" : "")) + " was rebased."; case ") + (priorPatchSetId.getParentCount())!= 1)) + " commit message as commit message as commit message as commit message as commit message as commit message as commit message as Commit message was."); case NO_CODE : return null; default : return null; } }
private java.lang.String changeKindMessage(com.google.gerrit.extensions.client.ChangeKind changeKind) { switch (changeKind) { case MERG_FIRST_PARENT_UPDATE : return ("New patch set a new patch set a new parent " + (priorPatchSetId.get())) + "."; case REVISION : return ("New patch set " + (priorPatchSetId.getParentCount()) + ((commit.getParentCount())!= 1? "s" : "")) + " was rebased."; case ") + (priorPatchSetId.getParentCount())!= 1)) + " commit message as commit message as commit message as commit message as commit message as commit message as commit message as Commit message was."); case NO_CODE_CODE_CHANGE : return null; default : return null; } }
private java.lang.String changeKindMessage(com.google.gerrit.extensions.client.ChangeKind changeKind) { switch (changeKind) { case MERG_FIRST_PARENT_UPDATE : return ("New patch set a new patch set a new parent " + (priorPatchSetId.get())) + "."; case REVISION : return ("New patch set " + (priorPatchSetId.getParentCount()) + ((commit.getParentCount())!= 1? "s" : "")) + " was rebased."; case ") + (priorPatchSetId.getParentCount())!= 1)) + " commit message as commit message as commit message as commit message as commit message as commit message as commit message as Commit message was "."); case NO_CODE_CODE_CHANGE : return null; default : return null; } }
@java.lang.Override public void onAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> added, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> includesAudit = addedGroups.stream().map(( t) -> toAccountGroupByIdAud(t, parentGroupId, addedOn, me)).collect(java.util.stream.Collectors.toList()); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open()) { db.accountGroupByIdAud().insert(includesAudit); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log add groups to group event performed by user", e); } }
@java.lang.Override public void onAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> added, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> includesAudit = addedAudit.stream().map(( t) -> toAccountGroupByIdAud(t, parentGroupId, addedOn, me)).collect(java.util.stream.Collectors.toList()); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open()) { db.accountGroupByIdAud().insert(includesAudit); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log add groups to group event performed by user", e); } }
@java.lang.Override public void onAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> added, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> includesAudit = addedGroups.stream().map(( t) -> toAccountGroupByIdAud(t, parentGroupId, addedOn, me)).collect(java.util.stream.Collectors.toList()); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open()) { db.accountGroupByIdAud().insert(includesAudit); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log add groups to group event performed by user", me, e); } }
@java.lang.Override public void onAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> added, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> includesAudit = addedGroups.stream().map(( t) -> toAccountGroupByIdAud(t, parentGroupId, addedOn, me).collect(java.util.stream.Collectors.toList()); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open()) { db.accountGroupByIdAud().insert(includesAudit); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log add groups to group event performed by user", e); } }
@java.lang.Override public void onAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> added, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> includesAudit = addedAudit.stream().map(( t) -> toAccountGroupByIdAud(t, parentGroupId, addedOn, me)).collect(java.util.stream.Collectors.toList()); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open()) { db.accountGroupByIdAud().insert(includesAudit); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log add groups to group event performed by user", me, e); } }
@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> removed, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, java.sql.Timestamp removedOn) { final java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = new java.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(parent)) { if (a.isActive()) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); auditUpdates.add(audit); } } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log delete groups from group event performed by user", me, e); } }
@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> removed, java.sql.Timestamp removedOn) { final java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = new java.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(parent, uuid)) { if (a.isActive()) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); auditUpdates.add(audit); } } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log delete groups from group event performed by user", me, e); } }
@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> removed, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, java.sql.Timestamp removedOn) { final java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = new java.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(parent)) { if (a.isActive()) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); auditUpdates.add(audit); } } db.accountGroupByIdAud().update(auditUpdates); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log delete groups from group event performed by user", me, e); } }
@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> removed, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, java.sql.Timestamp removedOn) { final java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = new java.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(parent)) { if (a.isActive()) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); auditUpdates.add(audit); } } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log delete groups from group event performed by user", e); } }
@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> removed, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, java.sql.Timestamp removedOn) { final java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = new java.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(parent, uuid)) { if (a.isActive()) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); auditUpdates.add(audit); } } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log delete groups from group event performed by user", me, e); } }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> accounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.Account.Id id : accounts) { java.lang.String groupName = getGroupName(id).getGroupName(); java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format(groupId, groupId, groupName, group)); } logOrmException e; } logOrmException(header, me, e); }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> accounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.Account.Id id : accounts) { java.lang.String groupName = getGroupName(id).getGroupName(); java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format(groupId, groupId, groupName, group)); } logOrmException e; } logOrmException e) { logOrmException(header, me, e); }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> accounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.Account.Id id : accounts) { java.lang.String groupName = getGroupName(id).getGroupName(); java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format(groupId, groupId, groupName, group)); } logOrmException e; } logOrmException e) { logOrmException(header, e); }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> accounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.Account.Id id : accounts) { java.lang.String groupName = getGroupName(id).getGroupName(); java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format(groupId, groupId, groupName, group)); } logOrmException(header, me, descriptions, e); } logOrmException e) { logOrmException(header, e); }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> accounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.Account.Id id : accounts) { java.lang.String groupName = getGroupName(id).getGroupName(); java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format(groupId, groupId, groupName, group)); } logOrmException(header, me, descriptions, e); } logOrmException e) { logOrmException(header, me, e); }
private static com.google.gerrit.reviewdb.client.AccountGroupMemberAudit toAccountGroupMemberAudit(com.google.gerrit.reviewdb.client.Account.Id id, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp ts, com.google.gerrit.reviewdb.client.AccountGroup.Id me) { return new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key(id, groupId, ts)); }
private static com.google.gerrit.reviewdb.client.AccountGroupMemberAudit toAccountGroupMemberAudit(com.google.gerrit.reviewdb.client.Account.Id id, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp ts, com.google.gerrit.reviewdb.client.AccountGroup.Id me) { return new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key(id, groupId, ts), me); }
private static com.google.gerrit.reviewdb.client.AccountGroupMemberAudit toAccountGroupMemberAudit(com.google.gerrit.reviewdb.client.Account.Id id, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp ts, com.google.gerrit.reviewdb.client.AccountGroup.Id me, java.sql.Timestamp ts) { return new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key(id, groupId, ts)); }
private static com.google.gerrit.reviewdb.client.AccountGroupMemberAudit toAccountGroupMemberAudit(com.google.gerrit.reviewdb.client.Account.Id id, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp ts, com.google.gerrit.reviewdb.client.AccountGroup.Id me) { return new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key(id, groupId, me), me); }
private static com.google.gerrit.reviewdb.client.AccountGroupMemberAudit toAccountGroupMemberAudit(com.google.gerrit.reviewdb.client.Account.Id id, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp ts, com.google.gerrit.reviewdb.client.AccountGroup.Id me) { return new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key(id, groupId, me, me)); }
public void dispatchDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> removedAccounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.account.GroupMemberAuditListener auditListener : groupListeners) { try { auditListener.onDeleteAccountsFromGroup(action, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceUser.log.error("Cannot log delete accounts from group event", e); } } }
public void dispatchDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> removedAccounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.account.GroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onDeleteAccountsFromGroup(action, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceUser.log.error("Cannot log delete accounts from group event", e); } } }
public void dispatchDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> removedAccounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.account.GroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onDeleteAccountsFromGroup(action, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceUser.log.error("Cannot log delete accounts from group event", e); } } }
public void dispatchDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id>removedAccounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.account.GroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onDeleteAccountsFromGroup(action, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceUser.log.error("Cannot log delete accounts from group event", e); } } }
public void dispatchDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> removedAccounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.account.GroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onDeleteAccountsFromGroup(action, remover, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceUser.log.error("Cannot log delete accounts from group event", e); } } }
@java.lang.Override public void onAddSubgroups(com.google.gerrit.reviewdb.server.ReviewDb db) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(com.google.gerrit.server.group.GroupBackend.toAccountGroupByIdAuditListener.toAccountGroupByIdAudits(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmException("Cannot log add groups to group event performed by user", e); } }
@java.lang.Override public void onAddSubsections(com.google.gerrit.reviewdb.server.ReviewDb db) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(com.google.gerrit.server.group.GroupBackend.toAccountGroupByIdAuditListener.toAccountGroupByIdAudits(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmException("Cannot log add groups to group event performed by user", e); } }
@java.lang.Override public void onAddSubgroups(com.google.gerrit.reviewdb.server.ReviewDb db) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(com.google.gerrit.server.group.GroupBackend.toAccountGroupByIdAudits(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmException("Cannot log add groups to group event performed by user", e); } }
@java.lang.Override public void onAddSubgroups(com.google.gerrit.reviewdb.server.ReviewDb db) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(com.google.gerrit.server.group.GroupBackend.toAccountGroupByIdAuditListener.toAccountGroupByIdAudits(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForSubgroups("Cannot log add groups to group event", e); } }
@java.lang.Override public void onAddSubgroups(com.google.gerrit.reviewdb.server.ReviewDb db) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(com.google.gerrit.server.group.GroupBackend.toAccountGroupByIdAuditListener.toAccountGroupByIdAudits(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForSubgroups("Cannot log add groups to group event performed by user", e); }
private void removeSubsectionsInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuid, java.sql.Timestamp removedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> subgroupsToRemove = subgroupUUID.stream().map(( subgroupUuid) -> new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentUuid).collect(java.util.stream.Collectors.toSet()); if ((currentUser)!= null) { auditServiceUser.dispatchSetIdFromGroup(currentUser.getAccountId(), subgroupUuid, removedOn); } try { com.google.gerrit.reviewdb.client.AccountGroupById g = new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentUuid, subgroupUuid, parentUuid, removedOn); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.reviewdb.client.AccountGroupById.log.remove(("Unable to remove group " + parentOn), e); } finally { db.accountGroupById().delete(subgroupsToRemove); } }
private void removeSubsectionsInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuid, java.sql.Timestamp removedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> subgroupsToRemove = subgroupUUID.stream().map(( subgroupUuid) -> new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentUuid).collect(java.util.stream.Collectors.toSet()); if ((currentUser)!= null) { auditServiceUser.dispatchSetIdFromGroup(currentUser.getAccountId(), subgroupUuid, removedOn); } try { com.google.gerrit.reviewdb.client.AccountGroupById g = new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentUuid, subgroupUuid, parentUuid, removedOn); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.reviewdb.client.AccountGroupById.log.remove(("Unable to remove group " + parentOn), e); } finally { db.close(); } db.accountGroupById().delete(subgroupsToRemove); }
private void removeSubsectionsInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuid, java.sql.Timestamp removedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> subgroupsToRemove = subgroupUUID.stream().map(( subgroupUuid) -> new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentUuid).collect(java.util.stream.Collectors.toSet()); if ((currentUser)!= null) { auditServiceUser.dispatchSetIdFromGroup(currentUser.getAccountId(), subgroupUuid, removedOn); } try { com.google.gerrit.reviewdb.client.AccountGroupById g = new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentUuid, subgroupUuid, parentUuid, removedOn); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.reviewdb.client.AccountGroupById.log.remove(("Unable to remove group " + parentOn), e); } finally { db.close(); } db.accountGroupById().delete(substringToRemove); }
private void removeSubsectionsInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuid, java.sql.Timestamp removedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> subgroupsToRemove = subgroupUUID.stream().map(( subgroupUuid) -> new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentUuid).collect(java.util.stream.Collectors.toSet()); if ((currentUser)!= null) { auditServiceUser.dispatchSetIdFromGroup(currentUser.getAccountId(), subgroupUuid, removedOn); } try { com.google.gerrit.reviewdb.client.AccountGroupById g = new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentUuid, subgroupUuid, parentUuid, removedOn); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.reviewdb.client.AccountGroupById.log.remove(("Unable to remove group " + parentOn), e); } finally { db.accountGroupById().delete(subgroupsToRemove); } db.accountGroupById().delete(subgroupsToRemove); }
private void removeSubsectionsInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuid, java.sql.Timestamp removedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> subgroupsToRemove = subgroupUUID.stream().map(( subgroupUuid) -> new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentUuid).collect(java.util.stream.Collectors.toSet()); if ((currentUser)!= null) { auditServiceUser.dispatchSetIdFromGroup(currentUser.getAccountId(), subgroupUuid, removedOn); } try { com.google.gerrit.reviewdb.client.AccountGroupById g = new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentUuid, subgroupUuid, parentUuid, removedOn); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.reviewdb.client.AccountGroupById.log.remove(("Unable to remove group " + parentOn), e); } finally { db.accountGroupById().delete(subgroupsToRemove); } db.accountGroupById().delete(groupIdsToRemove); }
private static com.google.gerrit.reviewdb.client.AccountGroupByIdAudit toAccountGroupByIdAud(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp ts, com.google.gerrit.reviewdb.client.AccountGroup.Id me) { return new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit.Key(groupId, uuid, ts, ts)); }
private static com.google.gerrit.reviewdb.client.AccountGroupByIdAud toAccountGroupByIdAudit(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp ts, com.google.gerrit.reviewdb.client.AccountGroup.Id me) { return new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit.Key(groupId, uuid, ts, ts)); }
private static com.google.gerrit.reviewdb.client.AccountGroupByIdAudit toAccountGroupByIdAud(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp ts, com.google.gerrit.reviewdb.client.AccountGroup.Id me) { return new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(new com.google.gerrit.reviewdb.client.AccountGroupByIdAud.Key(groupId, uuid, ts, ts)); }
private static com.google.gerrit.reviewdb.client.AccountGroupByIdAud toAccountGroupByIdAudit(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp ts, com.google.gerrit.reviewdb.client.AccountGroup.Id me) { return new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(new com.google.gerrit.reviewdb.client.AccountGroupByIdAud.Key(groupId, uuid, ts, ts)); }
private static com.google.gerrit.reviewdb.client.AccountGroupByIdAudit toAccountGroupByIdAud(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp ts, com.google.gerrit.reviewdb.client.AccountGroup.Id me) { return new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(new com.google.gerrit.reviewdb.client.AccountGroupByIdAudit.Key(groupId, uuid, ts, ts), me); }
private void addSubgroupsInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuid, java.sql.Timestamp addedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> new java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> new java.sql.Timestamp>(); newSubmoduleOp = subgroupUuid.stream().map(( subgroupUuid) -> new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentUuid).collect(java.util.stream.Collectors.toSet()); if ((currentUser)!= null) { auditService.dispatchSetIdsToAdd(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentUuid, subgroupUuid, parentUuid, addedOn); } db.accountGroupById().insert(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentUuid, groupUuid, parentGroupId, addedOn); }
private void addSubgroupsInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuid, java.sql.Timestamp addedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> new java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> new java.sql.Timestamp>(); newSubmoduleOp = subgroupUuid.stream().map(( subgroupUuid) -> new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentUuid).collect(java.util.stream.Collectors.toSet()); if ((currentUser)!= null) { auditService.dispatchSetIdsToAdd(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentUuid, subgroupUuid, parentUuid, addedOn); } db.accountGroupById().insert(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentUuid, groupUuid, parentUuid, addedOn); }
private void addSubgroupsInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuid, java.sql.Timestamp addedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> new java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> new java.sql.Timestamp>(); newSubmoduleOp = subgroupUuid.stream().map(( subgroupUuid) -> new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentUuid).collect(java.util.stream.Collectors.toSet()); if ((currentUser)!= null) { auditService.dispatchSetIdsToAdd(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentUuid, subgroupUuid, parentUuid, addedOn); } db.accountGroupById().insert(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentUuid, groupUuid, parentGroupId, addedOn); db.accountGroupById().insert(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(groupId, parentUuid, createdOn); }
private void addSubgroupsInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuid, java.sql.Timestamp addedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> new java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> new java.sql.Timestamp>(); newSubmoduleOp = subgroupUuid.stream().map(( subgroupUuid) -> new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentUuid).collect(java.util.stream.Collectors.toSet()); if ((currentUser)!= null) { auditService.dispatchSetIdsToAdd(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentUuid, subgroupUuid, parentUuid, addedOn); } db.accountGroupById().insert(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentUuid, groupUuid, parentGroupId, addedOn); db.accountGroupById().insert(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(groupId, parentUuid, parentGroupId, addedOn); }
private void addSubgroupsInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuid, java.sql.Timestamp addedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> new java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> new java.sql.Timestamp>(); newSubmoduleOp = subgroupUuid.stream().map(( subgroupUuid) -> new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentUuid).collect(java.util.stream.Collectors.toSet()); if ((currentUser)!= null) { auditService.dispatchSetIdsToAdd(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentUuid, subgroupUuid, parentUuid, addedOn); } db.accountGroupById().insert(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentUuid, groupUuid, parentGroupId, addedOn); db.accountGroupById().insert(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(groupId, parentUuid, addedOn); }
@java.lang.Override public void onAddMembers(com.google.gerrit.server.audit.GroupMemberAuditEvent event) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(com.google.gerrit.server.group.GroupMembersAuditListener.toAccountGroupMemberAuditEvent(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmException("Cannot log add accounts to group event performed by user", e); } }
@java.lang.Override public void onAddMembers(com.google.gerrit.server.group.GroupMemberAuditEvent event) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(com.google.gerrit.server.group.GroupMemberAuditListener.toAccountGroupMemberAuditEvent(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmException("Cannot log add accounts to group event performed by user", e); } }
@java.lang.Override public void onAddMembers(com.google.gerrit.server.group.GroupMemberAuditEvent event) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(com.google.gerrit.server.group.GroupMembersAuditListener.toAccountGroupMemberAuditEvent(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmException("Cannot log add accounts to group event performed by user", e); } }
@java.lang.Override public void onAddMembers(com.google.gerrit.reviewdb.server.ReviewDb db) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(com.google.gerrit.server.group.GroupMembersAuditListener.toAccountGroupMemberAuditEvent(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmException("Cannot log add accounts to group event performed by user", e); } }
@java.lang.Override public void onAddMembers(com.google.gerrit.server.audit.GroupMemberAuditEvent event) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(com.google.gerrit.server.group.GroupMembersAuditListener.toAccountGroupMemberAuditListener(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmException("Cannot log add accounts to group event performed by user", e); } }
private void removeGroupMembersInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accountIds, java.sql.Timestamp removedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMember> membersToRemove = accountIds.stream().map(( accountId) -> new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMember::new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(accountIds, removedOn); }
private void removeGroupMembersInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accountIds, java.sql.Timestamp removedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMember> membersToRemove = accountIds.stream().map(( accountId) -> new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMember::new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(accountIds, removedOn); auditServiceUsers.dispatchSet(); }
private void removeGroupMembersInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accountIds, java.sql.Timestamp removedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMember> membersToRemove = accountIds.stream().map(( accountId) -> new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMember::new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMemberFactory.create(accountId, groupId))).collect(java.util.stream.Collectors.toList()); }
private void removeGroupMembersInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accountIds, java.sql.Timestamp removedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMember> membersToRemove = accountIds.stream().map(( accountId) -> new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMember::new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMemberFactory.create(accountId, groupId)).collect(java.util.stream.Collectors.toList()); }
private void removeGroupMembersInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accountIds, java.sql.Timestamp removedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMember> membersToRemove = accountIds.stream().map(( accountId) -> new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMember::new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMemberFactory.create(accountId, groupId))).collect(java.util.stream.Collectors.toList()); if (!(membersOfRemove).isEmpty())) { auditServiceUsers.dispatchSet(); } db.accountGroupMembers().delete(membersToRemove); }
@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> added, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAud> auditInserts = addedAccounts.stream().map(( t) -> toAccountGroupMemberAudit(t, groupId, addedOn, me)).collect(java.util.stream.Collectors.toList()); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open()) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log add accounts to group event performed by user", me, e); } }
@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> added, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAud> auditInserts = addedAccounts.stream().map(( t) -> toAccountGroupMemberAudit(t, groupId, addedOn, me)).collect(java.util.stream.Collectors.toList()); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open()) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log add accounts to group event performed by user", e); } }
@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> added, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = addedAccounts.stream().map(( t) -> toAccountGroupMemberAudit(t, groupId, addedOn, me)).collect(java.util.stream.Collectors.toList()); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open()) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log add accounts to group event performed by user", e); } }
@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> added, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.Id> addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = addedAccounts.stream().map(( t) -> toAccountGroupMemberAudit(t, groupId, addedOn, me)).collect(java.util.stream.Collectors.toList()); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open()) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log add accounts to group event performed by user", me, e); } }
@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> added, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAud> auditInserts = addedAccounts.stream().map(( t) -> toAccountGroupMemberAudit(t, groupId, addedOn, me)).collect(java.util.stream.Collectors.toList()); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open()) { db.accountGroupMembersAudit().insert(auditInserts); } finally { db.close(); } }
public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> added, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp addedOn) { for (com.google.gerrit.reviewdb.client.AccountGroupMemberAudit auditListener : groupMemberAuditListener) { try { auditListener.onAdd(action, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceUser.log.error("Cannot log add accounts to log add accounts to log add accounts to group event", e); } } }
public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> added, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp addedOn) { for (com.google.gerrit.reviewdb.client.AccountGroup.Id groupId : groupMemberAuditListener) { try { auditListener.onAdd(action, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceUser.log.error("Cannot log add accounts to log add accounts to log add accounts to log", e); } } }
public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> added, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp addedOn) { for (com.google.gerrit.reviewdb.client.AccountGroup.Id groupId : groupMemberAuditListener) { try { auditListener.onAdd(action, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceUser.log.error("Cannot log add accounts to log add accounts to log add accounts to log to log", e); } } }
public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> added, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp addedOn) { for (com.google.gerrit.reviewdb.client.AccountGroup.Id groupId : groupMemberAuditListener) { try { auditListener.onAdd(action, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceUser.log.error("Cannot log add accounts to log add accounts to log add accounts to log to run accounts to log", e); } } }
public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> added, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp addedOn) { for (com.google.gerrit.reviewdb.client.AccountGroup.Id groupId : groupMemberAuditListener) { try { auditListener.onAdd(action, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceUser.log.error("Cannot log add accounts to log add accounts to log add accounts to log to run accounts to group event", e); } }
private void addGroupMembersInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> newMemberIds, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> addedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMember> newMembers = new java.util.HashSet<>(); newMemberIds.stream().map(( accountId) -> new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMember::new).collect(java.util.stream.Collectors.toSet()); if ((currentUser)!= null) { auditServiceUsers.dispatchSetAddAccountsToGroup(currentUser.getAccountId(), newMemberIds, addedOn); } db.accountGroupMembers().insert(newMembership); }
private void addGroupMembersInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> newMemberIds, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> addedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMember> newMembers = new java.util.HashSet<>(); newMemberIds.stream().map(( accountId) -> new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMember::new).collect(java.util.stream.Collectors.toSet()); if ((currentUser)!= null) { auditServiceUser.dispatchSetAddAccountsToGroup(currentUser.getAccountId(), newMemberIds, addedOn); } db.accountGroupMembers().insert(newMembership); }
private void addGroupMembersInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> newMemberIds, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> addedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMember> newMembers = new java.util.HashSet<>(); newMemberIds.stream().map(( accountId) -> new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMember::new).collect(java.util.stream.Collectors.toSet()); if ((currentUser)!= null) { auditServiceUsers.dispatchSetAddAccountsToGroup(currentUser.getAccountId(), newMemberId, addedOn); } db.accountGroupMembers().insert(new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key(groupId, groupIds, addedOn); }
private void addGroupMembersInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> newMemberIds, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> addedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMember> newMembers = new java.util.HashSet<>(); newMemberIds.stream().map(( accountId) -> new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMember::new).collect(java.util.stream.Collectors.toSet()); if ((currentUser)!= null) { auditServiceUsers.dispatchSetAddAccountsToAdd(currentUser.getAccountId(), newMemberId, addedOn); } db.accountGroupMembers().insert(new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key(java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.Id>() { @java.lang.Override public java.lang.String apply(com.google.gerrit.reviewdb.client.AccountGroup.Id newMember) { db.accountGroupMembers().insert(java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.Id> createdOn = newMembersAudit.insert(newMembers); } }); }
private void addGroupMembersInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> newMemberIds, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> addedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMember> newMembers = new java.util.HashSet<>(); newMemberIds.stream().map(( accountId) -> new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMember::new).collect(java.util.stream.Collectors.toSet()); if ((currentUser)!= null) { auditServiceUsers.dispatchSetAddAccountsToGroup(currentUser.getAccountId(), newMemberId, addedOn); } db.accountGroupMembers().insert(new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key(java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.Id>() { @java.lang.Override public java.lang.String apply(com.google.gerrit.reviewdb.client.AccountGroup.Id newMember) { db.accountGroupMembers().insert(java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.Id> createdOn = newMembersAudit.insert(newMembers); } }); }
public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.Account.UUID> removed, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.account.GroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onDeleteGroupsFromGroup(action, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceUser.log.error("Cannot log delete groups from group event", e); } } }
public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id author, java.util.Collection<com.google.gerrit.reviewdb.client.Account.UUID>removedSubsections, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.account.GroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onDeleteGroupsFromGroup(orm, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceUser.log.error("Cannot log delete groups from group event", e); } } }
public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id id, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID>removedSubgroups, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.account.GroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onDeleteGroupsFromGroup(action, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceUser.log.error("Cannot log delete groups from group event", e); } } }
public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id id, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID>removedSubsections, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.account.GroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onDeleteGroupsFromGroup(orm, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceUser.log.error("Cannot log delete groups from group event", e); } } }
public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id id, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID>removedSubgroups, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.account.GroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onDeleteGroupsFromGroup(action, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceService.log.error("Cannot log delete groups from group event", e); } } }
public void dispatchAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id id, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> added, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onAddGroupsToGroup(owner, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceService.log.error("Cannot log add groups to log add groups to log to log to log", e); } } }
public void dispatchAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id id, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> added, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onAddGroupsToGroup(owner, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceService.log.error("Cannot log add groups to log add groups to log to log to log add groups to create group", e); } } }
public void dispatchAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id id, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> added, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onAddGroupsToGroup(owner, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceService.log.error("Cannot log add groups to log add groups to log to log to log, ("Cannot log add groups to group event", e); } } }
public void dispatchAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id id, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> added, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onAddGroupsToGroup(owner, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceService.log.error("Cannot log add groups to log add groups to log to log to log, ("Cannot log add groups to run groups to group event", e); } } }
public void dispatchAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id id, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> added, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListener) { try { auditListener.onAddGroupsToGroup(owner, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditServiceService.log.error("Cannot log add groups to log add groups to log to log to log, ("Cannot log add groups to run groups to group event", added); } } }
private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> uuid, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid : uuid) { java.lang.String groupName = groupBackend.get(uuid).getName(); java.lang.String targetGroupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format(groupId, group, group, groupId, groupId)); } logOrmException(header, e); } logOrmException(header, e); }
private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> uuid, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid : uuid) { java.lang.String groupName = groupBackend.get(uuid).getName(); java.lang.String targetGroupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format(groupId, group, group, groupId, groupId)); } logOrmException(header, e); } logOrmException e) { logOrmException(header, e); }
private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> uuid, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid : uuid) { java.lang.String groupName = groupBackend.get(uuid).getName(); java.lang.String targetGroupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format(groupId, group, group, groupId, groupId)); } logOrmException(header, e); } logOrmException e) { logOrmException(header, me, e); }
private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> uuid, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid : uuid) { java.lang.String groupName = groupBackend.get(uuid).getName(); java.lang.String targetGroupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format(groupId, group, group, groupId, groupId, groupName)); } logOrmException(header, e); } logOrmException(header, e); }
private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> uuid, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid : uuid) { java.lang.String groupName = groupBackend.get(uuid).getName(); java.lang.String targetGroupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format(groupId, groupName, group, groupId, groupId)); } logOrmException(header, e); } logOrmException e) { logOrmException(header, e); }
@java.lang.Override public java.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws java.lang.Exception { try { if (!(newChangeData(id)) { index(newChangeData(db.get(), project, id)); return true; } catch (com.google.gerrit.server.project.NoSuchChangeException e) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug("Deleted change was deleted, e); return false; } return false; }
@java.lang.Override public java.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws java.lang.Exception { try { if (!(newChangeData(id)) { index(newChangeData(db.get(), project, id)); return true; } catch (com.google.gerrit.server.project.NoSuchChangeException e) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug("Deleted change was deleted, reindexed, e); return false; } return false; }
@java.lang.Override public java.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws java.lang.Exception { try { if (!(newChangeData(id)) { index(newChangeData(db.get(), project, id)); return true; } catch (com.google.gerrit.server.project.NoSuchChangeException e) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug("Deleted change was deleted, reindexed", e); return false; } return false; }
@java.lang.Override public java.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws java.lang.Exception { try { com.google.gerrit.server.index.change.ChangeIndexer.checkStale(id, project, id)); return true; } catch (com.google.gerrit.server.project.NoSuchChangeException e) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug("Deleted change was deleted, e); return false; } return false; }
@java.lang.Override public java.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws java.lang.Exception { try { com.google.gerrit.server.index.change.ChangeIndexer.checkStale(id, project, id)); return true; } catch (com.google.gerrit.server.project.NoSuchChangeException e) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug("Deleted change was deleted, e); return false; } catch (com.google.gerrit.server.project.NoSuchChangeException e) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug("Deleted change was deleted for change", e); return false; } return false; }
@java.lang.Override public java.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws java.lang.Exception { try { if (alienessChecker.isStale(id)) { index(newChangeData(db.get(), project, id)); return true; } } catch (com.google.gerrit.server.project.NoSuchChangeException e) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug("Deleted {} was deleted, reindex", e); return true; } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug("Couldn caused by a deleted from a deleted", e); throw e; } return false; }
@java.lang.Override public java.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws java.lang.Exception { try { if (alienessChecker.isStale(id)) { index(newChangeData(db.get(), project, id)); return true; } } catch (com.google.gerrit.server.project.NoSuchChangeException e) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug("Deleted {} was deleted, reindex", e); return true; } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug("Cannot deleted project {} was deleted from a deleted", e); throw e; } return false; }
@java.lang.Override public java.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws java.lang.Exception { try { if (alienessChecker.isStale(id)) { index(newChangeData(db.get(), project, id)); return true; } } catch (com.google.gerrit.server.project.NoSuchChangeException e) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug("Deleted {} was deleted, reindex", e); return true; } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug("Cannot deleted project {} of a deleted", e); throw e; } return false; }
@java.lang.Override public java.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws java.lang.Exception { try { if (alienessChecker.isStale(id)) { index(newChangeData(db.get(), project, id)); return true; } } catch (com.google.gerrit.server.project.NoSuchChangeException e) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug("Deleted {} was deleted, reindex", e); return true; } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug("Cannot delete project {} of a deleted", e); throw e; } return false; }
@java.lang.Override public java.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws java.lang.Exception { try { if (alienessChecker.isStale(id)) { index(newChangeData(db.get(), project, id)); return true; } } catch (com.google.gerrit.server.project.NoSuchChangeException e) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug("Deleted {} was deleted, reindex", e); return true; } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug("Couldn caused by a deleted from a deleted."); throw e; } return false; }
@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(publisherThread.isAlpire())) { com.google.gerrit.server.mail.MessagePublisher.LOGGER.error("Queue is interrupted", queue.position(event)); if (!(pool.position(event)) { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.warn("Queue is not finish event", queue); } else { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.warn(("Couldn't processable")); } }
@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(publisherThread.isAlpire())) { com.google.gerrit.server.mail.MessagePublisher.LOGGER.error("Queue is interrupted", queue.position(event)); if (!(pool.position(event)) { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.warn("Queue is not finish event", queue); } else { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.warn(("Couldn't processable")); fullQueue = false; } }
@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(publisherThread.isAlpire())) { com.google.gerrit.server.mail.MessagePublisher.LOGGER.error("Queue is interrupted", queue.position(event)); if (!(pool.position(event)) { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.warn("Queue is not finish event", queue); } else { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.warn(("Couldn't processable")); } } }
@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(publisherThread.isAlpire())) { com.google.gerrit.server.mail.MessagePublisher.LOGGER.error("Queue is interrupted", queue.position(event)); if (!(pool.position(event)) { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.warn("Queue is not finish event", queue); } else { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.warn(("Couldn't processable")); fullQueue = false; } } }
@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(publisherThread.isAlpire())) { com.google.gerrit.server.mail.MessagePublisher.LOGGER.error("Queue is interrupted", queue.position(event)); if (!(pool.position(event)) { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.warn("Queue is not finish event", queue); } else { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.warn(("Couldn't processable")); if ((fullQueue) == null) { pool = false; } } }
@java.lang.Override public java.util.Set<com.google.gerrit.server.query.change.SuggestedReviewerSuggested> suggestReviewers(com.google.gerrit.reviewdb.client.Project.NameKey projectName, @com.google.gerrit.common.Nullable java.lang.String query, @com.google.gerrit.common.Nullable java.lang.String query) { java.util.List<com.google.gerrit.reviewdb.client.ReviewerFilterSection> sections = getSections(projectName); if (!(sections.isEmpty())) { try (com.google.gerrit.reviewdb.server.ReviewDb reviewDb = schemaFactory.open()) { com.google.gerrit.server.query.change.ChangeData changeData = changeDataFactory.create(reviewDb, projectName, changeId); java.util.Set<java.lang.String> reviewers = findReviewers(sections, changeData, changeData); if (!(reviewers.isEmpty())) { return toAccounts(reviewDb, reviewerName, null).stream().map(( a) -> suggestedReviewers(a)).collect(java.util.stream.Collectors.toSet()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.query.QueryParseException x) { com.googlesource.gerrit.plugins.reviewers.Reviewers.log.error(x.getMessage(), x); } } return new java.util.HashSet<>(); }
@java.lang.Override public java.util.Set<com.google.gerrit.server.query.change.SuggestedReviewerSuggested> suggestReviewers(com.google.gerrit.reviewdb.client.Project.NameKey projectName, @com.google.gerrit.common.Nullable java.lang.String query, @com.google.gerrit.common.Nullable java.lang.String query) { java.util.List<com.google.gerrit.reviewdb.client.ReviewerFilterSection> sections = getSections(projectName); if (!(sections.isEmpty())) { try (com.google.gerrit.reviewdb.server.ReviewDb reviewDb = schemaFactory.open()) { com.google.gerrit.server.query.change.ChangeData changeData = changeDataFactory.create(reviewDb, projectName, changeId); java.util.Set<java.lang.String> reviewers = findReviewers(sections, changeData); if (!(reviewers.isEmpty())) { return toAccounts(reviewDb, reviewers, null).stream().map(( a) -> suggestedReviewers(a)).collect(java.util.stream.Collectors.toSet()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.query.QueryParseException x) { com.googlesource.gerrit.plugins.reviewers.Reviewers.log.error(x.getMessage(), x); } } return new java.util.HashSet<>(); }
@java.lang.Override public java.util.Set<com.google.gerrit.server.query.change.SuggestedReviewerSuggested> suggestReviewers(com.google.gerrit.reviewdb.client.Project.NameKey projectName, @com.google.gerrit.common.Nullable java.lang.String query, @com.google.gerrit.common.Nullable java.lang.String query) { java.util.List<com.google.gerrit.reviewdb.client.ReviewerFilterSection> sections = getSections(projectName); if (!(sections.isEmpty())) { try (com.google.gerrit.reviewdb.server.ReviewDb reviewDb = schemaFactory.open()) { com.google.gerrit.server.query.change.ChangeData changeData = changeDataFactory.create(reviewDb, projectName, changeId); java.util.Set<java.lang.String> reviewers = findReviewers(sections, changeData, changeData); if (!(reviewers.isEmpty())) { return toAccounts(reviewDb, reviewers, null).stream().map(( a) -> suggestedReviewers(a)).collect(java.util.stream.Collectors.toSet()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.query.QueryParseException x) { com.googlesource.gerrit.plugins.reviewers.Reviewers.log.error(x.getMessage(), x); } } return new java.util.HashSet<>(); }
@java.lang.Override public java.util.Set<com.google.gerrit.server.query.change.SuggestedReviewerSuggested> suggestReviewers(com.google.gerrit.reviewdb.client.Project.NameKey projectName, @com.google.gerrit.common.Nullable java.lang.String query, @com.google.gerrit.common.Nullable java.lang.String query) { java.util.List<com.google.gerrit.reviewdb.client.ReviewerFilterSection> sections = getSections(projectName); if (!(sections.isEmpty())) { try (com.google.gerrit.reviewdb.server.ReviewDb reviewDb = schemaFactory.open()) { com.google.gerrit.server.query.change.ChangeData changeData = changeDataFactory.create(reviewDb, projectName, changeId); java.util.Set<java.lang.String> reviewers = findReviewers(sections, changeData); if (!(reviewers.isEmpty())) { return toAccounts(reviewDb, reviewers, projectName, null).stream().map(( a) -> suggestedReviewers(a)).collect(java.util.stream.Collectors.toSet()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.query.QueryParseException x) { com.googlesource.gerrit.plugins.reviewers.Reviewers.log.error(x.getMessage(), x); } } return new java.util.HashSet<>(); }
@java.lang.Override public java.util.Set<com.google.gerrit.server.query.change.SuggestedReviewerSuggested> suggestReviewers(com.google.gerrit.reviewdb.client.Project.NameKey projectName, @com.google.gerrit.common.Nullable java.lang.String query, @com.google.gerrit.common.Nullable java.lang.String query) { java.util.List<com.google.gerrit.reviewdb.client.ReviewerFilterSection> sections = getSections(projectName); if (!(sections.isEmpty())) { try (com.google.gerrit.reviewdb.server.ReviewDb reviewDb = schemaFactory.open()) { com.google.gerrit.server.query.change.ChangeData changeData = changeDataFactory.create(reviewDb, projectName, changeId); java.util.Set<java.lang.String> reviewers = findReviewers(sections, changeData); if (!(reviewers.isEmpty())) { return toAccounts(reviewDb, reviewers, null).stream().map(( a) -> suggestedReviewers(a)).collect(java.util.stream.Collectors.toSet()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.query.QueryParseException x) { com.googlesource.gerrit.plugins.reviewers.Reviewers.log.error(xception.getMessage(), x); } } return new java.util.HashSet<>(); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternal(); if (recursive) { return getDirections(group, resource.getControl()); } return getDirectMembers(group, resource.getControl()); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternal(); if (recursive) { return getDirections(group, resource.getControl()); } return getDirectMembers(group, resource.getControl()); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternal(resource.getControl()); if (recursive) { return getDirections(group, resource.getControl()); } return getDirectMembers(group, resource.getControl()); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternal(); if (recursive) { return getDirections(group, resource.getControl()); } if (recursive) { return getDirectMembers(group, resource.getControl()); } return getDirections(group, resource.getControl()); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternal(); if (recursive) { return getDirections(group, resource.getControl()); } if (recursive) { return getDirectMembers(group, resource.getControl()); } return getDirectMembers(group, resource.getControl()); }
@java.lang.Override @com.google.common.base.Nullable<com.google.gerrit.server.plugins.PropertyKey<T> get(com.google.gerrit.server.project.PropertyKey<T> key) { @java.lang.SuppressWarnings("unchecked") T value = ((T)!= null)? T value = ((T) (properties.get(key))); return java.util.Optional.ofNullable(value); }
@java.lang.Override @com.google.common.base.Nullable<com.google.gerrit.server.plugins.PropertyKey<T> get(com.google.gerrit.server.project.PropertyKey<T> key) { @java.lang.SuppressWarnings("unchecked") java.util.Collection<java.lang.Object> value = ((T) (properties.get(key))); return java.util.Optional.ofNullable(value); }
@java.lang.Override @com.google.common.base.Nullable<com.google.gerrit.server.plugins.PropertyKey<T> get(com.google.gerrit.server.project.PropertyKey<T> key) { @java.lang.SuppressWarnings("unchecked") T value = ((T)!= null)? value = ((T) (properties.get(key))); return java.util.Optional.ofNullable(value); }
@java.lang.Override @com.google.common.base.Nullable<com.google.gerrit.server.plugins.PropertyKey<T> get(com.google.gerrit.server.project.PropertyKey<T> key) { @java.lang.SuppressWarnings("unchecked") java.util.Collection<java.lang.Object> value = ((properties) (properties.get(key))); return java.util.Optional.ofNullable(value); }
@java.lang.Override @com.google.common.base.Nullable<com.google.gerrit.server.plugins.PropertyKey<T> get(com.google.gerrit.server.project.PropertyKey<T> key) { @java.lang.SuppressWarnings("unchecked") T value = ((T)!= null) { T value = ((T) (properties.get(key))); return java.util.Optional.ofNullable(value); } return java.util.Optional.emptySet(); }
private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAccountsInGroup(java.lang.String groupName) { java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = java.util.Optional.ofNullable(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupName))).orElse(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupName))).orElse(groupName); return java.util.Collections.emptySet(); }
private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAccountsInGroup(java.lang.String groupName) { java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> group = java.util.Optional.ofNullable(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupName))).orElse(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupName))).orElse(groupName); return java.util.Collections.emptySet(); }
private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAccountsInGroup(java.lang.String groupName) { java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> group = java.util.Optional.ofNullable(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupName))).orElse(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupName))).orElse(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupName)); return java.util.Collections.emptySet(); }
private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAccountsInGroup(java.lang.String groupName) { java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> group = java.util.Optional.ofNullable(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupName))).orElse(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupName))).orElse(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupName))).orElse(groupName); return java.util.Collections.emptySet(); }
private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAccountsInGroup(java.lang.String groupName) { java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = java.util.Optional.ofNullable(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupName))).orElse(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupName))).orElse(groupName); if (!(group.isPresent())) { com.google.gerrit.server.util.ManualRequestContext.log.warn("Account {} was not found", groupName); return java.util.Collections.emptySet(); } try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.open()) { return groupMembers.create(adminUser).listAccounts(group.getGroupUUID(), null).map(Account::getId).collect(java.util.stream.Collectors.toSet()); } catch (com.google.gerrit.server.project.NoSuchProjectException | com.google.gwtorm.server.OrmException | java.io.IOException e) { com.vm.gerrit.owners.common.AccountsImpl.log.error(("Failed to list " + group), e); return java.util.Collections.emptySet(); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource resource, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.api.errors.ConfigInvalidException, org.eclipse.jgit.errors.ConfigInvalidException { permissionBackend.user(identifiedUser).check(GlobalPermission.ADMINISTRATE_SERVER); permissionBackend.user(identifiedUser).check(GlobalPermission.ADMINISTRATE_SERVER); com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.log.info("Created trigger for %s by %s", resource.getBranchKey().get(), resource.getBranchKey().get(), config.getProject(), resource.getRef(), false); update(resource.getProjectState().getName(), false); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource resource, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.api.errors.ConfigInvalidException, org.eclipse.jgit.errors.ConfigInvalidException { permissionBackend.user(identifiedUser).check(GlobalPermission.ADMINISTRATE_SERVER); permissionBackend.user(identifiedUser).check(GlobalPermission.ADMINISTRATE_SERVER); com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.log.info("Created trigger for %s by %s", resource.getBranchKey().get(), resource.getBranchKey().get(), resource.getConfig().getAccountId(), config.getProject(), false); update(resource.getProjectState().getName(), false); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource resource, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.api.errors.ConfigInvalidException, org.eclipse.jgit.errors.ConfigInvalidException { permissionBackend.user(identifiedUser).check(GlobalPermission.ADMINISTRATE_SERVER); permissionBackend.user(identifiedUser).check(GlobalPermission.ADMINISTRATE_SERVER); com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.log.info("Created trigger for %s by %s", resource.getBranchKey().get(), resource.getBranchKey().get(), resource.getConfig().getAccountId(), config.getRef(), false); update(resource.getProjectState().getName(), false); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource resource, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.api.errors.ConfigInvalidException, org.eclipse.jgit.errors.ConfigInvalidException { permissionBackend.user(identifiedUser).check(GlobalPermission.ADMINISTRATE_SERVER); permissionBackend.user(identifiedUser).check(GlobalPermission.ADMINISTRATE_SERVER); com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.log.info("Created trigger for %s by %s", resource.getBranchKey().get(), resource.getBranchKey().get(), resource.getAccountId().get(), config.getProject(), false); update(resource.getProjectState().getName(), false); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource resource, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.api.errors.ConfigInvalidException, org.eclipse.jgit.errors.ConfigInvalidException { permissionBackend.user(identifiedUser).check(GlobalPermission.ADMINISTRATE_SERVER); permissionBackend.user(identifiedUser).check(GlobalPermission.ADMINISTRATE_SERVER); com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.log.info("Created trigger for %s by %s", resource.getBranchKey().get(), resource.getBranchKey().get(), resource.getAccountId().get(), config.getRef(), false); update(resource.getProjectState().getName(), false); return com.google.gerrit.extensions.restapi.Response.none(); }
private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAccountsInGroup(java.lang.String groupName) { return com.google.gerrit.server.group.InternalGroupBackend.ofNullable(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupName))).orElse(groupName); }
private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAccountsInGroup(java.lang.String groupName) { java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> group = java.util.Optional.ofNullable(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupName))).orElse(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupName)); return java.util.Collections.emptySet(); }
private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAccountsInGroup(java.lang.String groupName) { java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = java.util.Optional.ofNullable(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupName))).orElse(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupName)); return java.util.Collections.emptySet(); }
private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAccountsInGroup(java.lang.String groupName) { java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> group = java.util.Optional.ofNullable(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupName))).orElse(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupName)); return java.util.Collections.emptySet(); }
private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAccountsInGroup(java.lang.String groupName) { java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> group = java.util.Optional.ofNullable(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupName))).orElse(groupName); if (!(group.isPresent())) { com.vmware.gerrit.owners.common.AccountsImpl.log.warn("Account {} was not found", groupName); return java.util.Collections.emptySet(); } try { return groupMembers.listAccounts(group.get(id).map(Account::getId).collect(java.util.stream.Collectors.toSet()); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.vmware.gerrit.owners.common.AccountsImpl.log.error(("Failed to list in group " + group), e); return java.util.Collections.emptySet(); } }
private java.util.Map<java.lang.String, java.lang.Object> toFooterSoyData(com.google.gitiles.Paginator paginator, @javax.annotation.Nullable java.lang.String revision, com.google.gitiles.LogSoyData.FooterPredicate revision) { switch (next == null) { case NEXT : org.eclipse.jgit.lib.ObjectId next = paginator.getNextStart(); if (next == null) { return com.google.common.collect.ImmutableMap.of(); } return com.google.common.collect.ImmutableMap.of(); } return com.google.common.collect.ImmutableMap.of("nextUrl", com.google.gitiles.GitilesView.log().copyFrom(revision).replaceParam(LogServlet.START_PARAM, next.name()).toUrl(), "nextText", "Next"); case LOG : return com.google.common.collect.ImmutableMap.of("nextUrl", com.google.gitiles.GitilesView.log().copyFrom(view).toUrl(), "NextText", "Log"); default : throw new java.lang.IllegalStateException(("Invalid footer bound: " + problem)); } }
private java.util.Map<java.lang.String, java.lang.Object> toFooterSoyData(com.google.gitiles.Paginator paginator, @javax.annotation.Nullable java.lang.String revision, com.google.gitiles.LogSoyData.FooterPredicate revision) { switch (next == null) { case NEXT : org.eclipse.jgit.lib.ObjectId next = paginator.getNextStart(); if (next == null) { return com.google.common.collect.ImmutableMap.of(); } return com.google.common.collect.ImmutableMap.of(); } return com.google.common.collect.ImmutableMap.of("nextUrl", com.google.gitiles.GitilesView.log().copyFrom(revision).replaceParam(LogServlet.START_PARAM, next.name()).toUrl(), "nextText", "Next"); case LOG : return com.google.common.collect.ImmutableMap.of("nextUrl", com.google.gitiles.GitilesView.log().copyFrom(view).toUrl(), "NextText", "Log"); default : throw new java.lang.IllegalStateException(("Invalid footer Reason: " + problem)); } }
private java.util.Map<java.lang.String, java.lang.Object> toFooterSoyData(com.google.gitiles.Paginator paginator, @javax.annotation.Nullable java.lang.String revision, com.google.gitiles.LogSoyData.FooterPredicate revision) { switch (next == null) { case NEXT : org.eclipse.jgit.lib.ObjectId next = paginator.getNextStart(); if (next == null) { return com.google.common.collect.ImmutableMap.of(); } return com.google.common.collect.ImmutableMap.of(); } return com.google.common.collect.ImmutableMap.of("nextUrl", com.google.gitiles.GitilesView.log().copyFrom(revision).replaceParam(LogServlet.START_PARAM, next.name()).toUrl(), "Next"); case LOG : return com.google.common.collect.ImmutableMap.of("nextUrl", com.google.gitiles.GitilesView.log().copyFrom(view).toUrl(), "NextText", "NextText", "Log"); default : throw new java.lang.IllegalStateException(("Invalid footer bound: " + problem)); } }
private java.util.Map<java.lang.String, java.lang.Object> toFooterSoyData(com.google.gitiles.Paginator paginator, @javax.annotation.Nullable java.lang.String revision, com.google.gitiles.LogSoyData.FooterPredicate revision) { switch (next == null) { case NEXT : org.eclipse.jgit.lib.ObjectId next = paginator.getNextStart(); if (next == null) { return com.google.common.collect.ImmutableMap.of(); } return com.google.common.collect.ImmutableMap.of(); } return com.google.common.collect.ImmutableMap.of("nextUrl", com.google.gitiles.GitilesView.log().copyFrom(revision).replaceParam(LogServlet.START_PARAM, next.name()).toUrl(), "nextText", "Next"); case LOG : return com.google.common.collect.ImmutableMap.of("nextUrl", com.google.gitiles.GitilesView.log().copyFrom(view).toUrl(), "NextText", "Log"); default : throw new java.lang.IllegalStateException(("Invalid footer bound: " + problem)); }
private java.util.Map<java.lang.String, java.lang.Object> toFooterSoyData(com.google.gitiles.Paginator paginator, @javax.annotation.Nullable java.lang.String revision, com.google.gitiles.LogSoyData.FooterPredicate revision) { switch (next == null) { case NEXT : org.eclipse.jgit.lib.ObjectId next = paginator.getNextStart(); if (next == null) { return com.google.common.collect.ImmutableMap.of(); } return com.google.common.collect.ImmutableMap.of(); } return com.google.common.collect.ImmutableMap.of("nextUrl", com.google.gitiles.GitilesView.log().copyFrom(revision).replaceParam(LogServlet.START_PARAM, next.name()).toUrl(), "nextText", "Next"); case LOG : return com.google.common.collect.ImmutableMap.of("nextUrl", com.google.gitiles.GitilesView.log().copyFrom(view).toUrl(), "NextText", "Log"); default : throw new java.lang.IllegalStateException(("Invalid footer Reason: " + parameter), default : throw new java.lang.IllegalStateException(("Invalid footer bound: " + problem)); } }
@java.lang.Override public java.lang.String authenticate(com.google.gerrit.server.CurrentUser user, java.util.List<java.lang.String> args) throws com.google.gerrit.sshd.BaseCommand.Failure, com.google.gerrit.sshd.BaseCommand.UnloggedFailure { java.net.URL url = new java.net.URL(canonicalWebUrl); java.lang.String path = url.getPath(); java.lang.String project = url.getPath(); java.lang.String project = args.get(0); java.lang.String project = args.get(0); java.lang.StringBuilder href = new java.lang.StringBuilder(url.getProtocol()).append("://").append(url).append(path).append(path).append(path).append("/info/lfs"); com.googlesource.gerrit.plugins.lfs.ExpiringAction action = new com.googlesource.gerrit.plugins.lfs.ExpiringAction(href.toString(), info); return gson.toJson(href.toString(), info); }
@java.lang.Override public java.lang.String authenticate(com.google.gerrit.server.CurrentUser user, java.util.List<java.lang.String> args) throws com.google.gerrit.sshd.BaseCommand.Failure, com.google.gerrit.sshd.BaseCommand.UnloggedFailure { java.net.URL url = new java.net.URL(canonicalWebUrl); java.lang.String path = url.getPath(); java.lang.String project = url.getPath(); java.lang.String project = args.get(0); java.lang.String project = args.get(0); java.lang.StringBuilder href = new java.lang.StringBuilder(url.getProtocol()).append("://").append(url).append(path).append(path).append(path).append("/info/lfs"); com.googlesource.gerrit.plugins.lfs.ExpiringAction action = auth.generateAuthInfo(user.toString(), info); com.googlesource.gerrit.plugins.lfs.ExpiringAction action = new com.googlesource.gerrit.plugins.lfs.ExpiringAction(href.toString(), info); return gson.toJson(action); }
@java.lang.Override public java.lang.String authenticate(com.google.gerrit.server.CurrentUser user, java.util.List<java.lang.String> args) throws com.google.gerrit.sshd.BaseCommand.Failure, com.google.gerrit.sshd.BaseCommand.UnloggedFailure { java.net.URL url = new java.net.URL(canonicalWebUrl); java.lang.String path = url.getPath(); java.lang.String project = url.getPath(); java.lang.String project = args.get(0); java.lang.String project = args.get(0); java.lang.StringBuilder href = new java.lang.StringBuilder(url.getProtocol()).append("://").append(url).append(path).append(path).append(path).append("/info/lfs"); com.googlesource.gerrit.plugins.lfs.ExpiringAction action = auth.generateAuthInfo(user.toString(), info); com.googlesource.gerrit.plugins.lfs.ExpiringAction action = new com.googlesource.gerrit.plugins.lfs.ExpiringAction(href.toString(), info); return gson.toJson(action).toJson(action); }
@java.lang.Override public java.lang.String authenticate(com.google.gerrit.server.CurrentUser user, java.util.List<java.lang.String> args) throws com.google.gerrit.sshd.BaseCommand.Failure, com.google.gerrit.sshd.BaseCommand.UnloggedFailure { if ((args.size())!= 2) { throw new com.google.gerrit.sshd.BaseCommand.Failure(1, "fatal: args"); } try { java.net.URL url = url.getPath(); java.lang.String project = url.getPath(); java.lang.String project = args.get(0); java.lang.StringBuilder href = new java.lang.StringBuilder(url.getProtocol()).append("://").append(url).append(path).append(path).append("/info/lfs"); com.googlesource.gerrit.plugins.lfs.ExpiringAction action = auth.generateAuthInfo(user.toString(), info); com.googlesource.gerrit.plugins.lfs.ExpiringAction action = new com.googlesource.gerrit.plugins.lfs.ExpiringAction(href.toString(), info); return gson.toJson(action); } catch (java.net.MalformedURLException e) { throw new com.google.gerrit.sshd.BaseCommand.Failure(1, ((("fatal: " + (canonicalWebUrl.toString())) + ": ") + (canonicalWebUrl[]) + "] failed.")); } }
@java.lang.Override public java.lang.String authenticate(com.google.gerrit.server.CurrentUser user, java.util.List<java.lang.String> args) throws com.google.gerrit.sshd.BaseCommand.Failure, com.google.gerrit.sshd.BaseCommand.UnloggedFailure { if ((args.size())!= 2) { throw new com.google.gerrit.sshd.BaseCommand.Failure(1, "fatal: args"); } try { java.net.URL url = url.getPath(); java.lang.String project = url.getPath(); java.lang.String project = args.get(0); java.lang.StringBuilder href = new java.lang.StringBuilder(url.getProtocol()).append("://").append(url).append(path).append(path).append("/info/lfs"); com.googlesource.gerrit.plugins.lfs.ExpiringAction action = auth.generateAuthInfo(user.toString(), info); com.googlesource.gerrit.plugins.lfs.ExpiringAction action = new com.googlesource.gerrit.plugins.lfs.ExpiringAction(href.toString(), info); return gson.toJson(action); } catch (java.net.MalformedURLException e) { throw new com.google.gerrit.sshd.BaseCommand.Failure(1, ((("Failed to canonical web configuration error: " + (canonicalWebUrl)) + ": ") + (canonicalWebUrl.toString())) + " failed.")); } }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = receiveEvent.commit; final org.eclipse.jgit.lib.AbbreviatedObjectId id = commit.abbreviate(7); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = new java.util.ArrayList<>(); if ((this.maxSubjectLength) < (commit.getShortMessage().length())) { onLineTooLong(id, (commit.getShortMessage().length())) + " subject; use shorter first\n"); } int longLineCnt = 0; int nonEmptyCnt; for (java.lang.String line : commit.getFullMessage()) { if (!(line.trim().isEmpty())) { nonEmptyCnt++; } if ((this.maxLineLength) < (line.length())) { longLineCnt++; } if ((this.maxLineLength) < (line.length())) { longLineCnt++; } } if (longLineLength) { onLineTooLong(id, messages, (("non-line\n" + ") + (this.maxLineLength)) + " characters; manually wrap lines"; } return messages; }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = receiveEvent.commit; final org.eclipse.jgit.lib.AbbreviatedObjectId id = commit.abbreviate(7); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = new java.util.ArrayList<>(); if ((this.maxSubjectLength) < (commit.getShortMessage().length())) { onLineTooLong(id, (commit.getShortMessage().length())) + " subject; use shorter first\n"); } int longLineCnt = 0; int nonEmptyCnt; for (java.lang.String line : commit.getFullMessage()) { if (!(line.trim().isEmpty())) { nonEmptyCnt++; } if ((this.maxLineLength) < (line.length())) { longLineCnt++; } if ((this.maxLineLength) < (line.length())) { long lineCnt++; } } if (longLineLength) { onLineTooLong(id, messages, (("non-lineLength)) + " characters; manually wrap lines"); } return messages; }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = receiveEvent.commit; final org.eclipse.jgit.lib.AbbreviatedObjectId id = commit.abbreviate(7); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = new java.util.ArrayList<>(); if ((this.maxSubjectLength) < (commit.getShortMessage().length())) { onLineTooLong(id, (commit.getShortMessage().length())) + " subject; use shorter first\n"); } int longLineCnt = 0; int nonEmptyCnt; for (java.lang.String line : commit.getFullMessage()) { if (!(line.trim().isEmpty())) { nonEmptyCnt++; } if ((this.maxLineLength) < (line.length())) { longLineCnt++; } if ((this.maxLineLength) < (line.length())) { longLineCnt++; } } if (longLineLength) { onLineTooLong(id, messages, (("non-lineLength)) + " characters; manually wrap lines"); } return messages; }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = receiveEvent.commit; final org.eclipse.jgit.lib.AbbreviatedObjectId id = commit.abbreviate(7); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = new java.util.ArrayList<>(); if ((this.maxSubjectLength) < (commit.getShortMessage().length())) { onLineTooLong(id, (commit.getShortMessage().length())) + " subject; use shorter first\n"); } int longLineCnt = 0; int nonEmptyCnt; for (java.lang.String line : commit.getFullMessage()) { if (!(line.trim().isEmpty())) { nonEmptyCnt++; } if ((this.maxLineLength) < (line.length())) { longLineCnt++; } if ((this.maxLineLength) < (line.length())) { longLineCnt++; } } if (longLineLength) { onLineTooLong(id, messages, (("non-line\n" + ") + (this.maxLineLength)) + " characters; manually wrap lines"); } return messages; }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = receiveEvent.commit; final org.eclipse.jgit.lib.AbbreviatedObjectId id = commit.abbreviate(7); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = new java.util.ArrayList<>(); if ((this.maxSubjectLength) < (commit.getShortMessage().length())) { onLineTooLong(id, (commit.getShortMessage().length())) + " subject; use shorter first\n"); } int longLineCnt = 0; int nonEmptyCnt; for (java.lang.String line : commit.getFullMessage()) { if (!(line.trim().isEmpty())) { nonEmptyCnt++; } if ((this.maxLineLength) < (line.length())) { longLineCnt++; } if ((this.maxLineLength) < (line.length())) { longLineCnt++; } } if (longLineLength) { onLineTooLong(id, messages, (("non-line\n" + ") + (this.maxLineLength)) + " characters;")); } return messages; }
@java.lang.Override public final int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { final java.lang.String token = params.getParameter(0); final java.util.List<java.lang.String> tokens = com.google.common.base.Lists.newArrayList(com.google.common.base.Splitter.on(token).splitToEmpty(token)); if ((tokens.size())!= 3) { throw new org.kohsuke.args4j.CmdLineException(owner, "project is not specified as specified as "change-id"); } try { final com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey(tokens.get(0)); final com.google.gerrit.reviewdb.client.Branch.NameKey branch = new com.google.gerrit.reviewdb.client.Branch.NameKey(project, tokens.get(0)); final com.google.gerrit.reviewdb.client.Branch.NameKey branch = new com.google.gerrit.reviewdb.client.Branch.NameKey(project, tokens.get(1)); for (com.google.gerrit.reviewdb.client.Branch.NameKey branch : queryProvider.get().byBranchKey(branch)) { setter.addValue(cd.getId()); return 1; } } catch (java.lang.IllegalArgumentException e) { throw new org.kohsuke.args4j.CmdLineException(owner, e); } catch (com.google.gwtorm.server.OrmException e) { throw new org.kohsuke.args4j.CmdLineException(owner, e); } }
@java.lang.Override public final int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { final java.lang.String token = params.getParameter(0); final java.util.List<java.lang.String> tokens = com.google.common.base.Lists.newArrayList(com.google.common.base.Splitter.on(token).splitToEmpty(token)); if ((tokens.size())!= 3) { throw new org.kohsuke.args4j.CmdLineException(owner, "project is not specified as specified as "change-id"); } try { final com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey(tokens.get(0)); final com.google.gerrit.reviewdb.client.Branch.NameKey branch = new com.google.gerrit.reviewdb.client.Branch.NameKey(project, tokens.get(0)); final com.google.gerrit.reviewdb.client.Branch.NameKey branch = new com.google.gerrit.reviewdb.client.Branch.NameKey(project, tokens.get(1)); for (com.google.gerrit.reviewdb.client.Branch.NameKey branch : queryProvider.get().byBranchKey(branch, key)) { setter.addValue(cd.getId()); return 1; } } catch (java.lang.IllegalArgumentException e) { throw new org.kohsuke.args4j.CmdLineException(owner, e); } catch (com.google.gwtorm.server.OrmException e) { throw new org.kohsuke.args4j.CmdLineException(owner, e); }
@java.lang.Override public final int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { final java.lang.String token = params.getParameter(0); final java.util.List<java.lang.String> tokens = com.google.common.base.Lists.newArrayList(com.google.common.base.Splitter.on(token).splitToEmpty(token)); if ((tokens.size())!= 3) { throw new org.kohsuke.args4j.CmdLineException(owner, "project is not specified as specified as "change-id"); } try { final com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey(tokens.get(0)); final com.google.gerrit.reviewdb.client.Branch.NameKey branch = new com.google.gerrit.reviewdb.client.Branch.NameKey(project, tokens.get(0)); final com.google.gerrit.reviewdb.client.Branch.NameKey branch = new com.google.gerrit.reviewdb.client.Branch.NameKey(project, tokens.get(1)); for (com.google.gerrit.reviewdb.client.Branch.NameKey branch : queryProvider.get().byBranchKey(branch)) { setter.addValue(cd.getId()); return 1; } } catch (java.lang.IllegalArgumentException e) { throw new org.kohsuke.args4j.CmdLineException(owner, e); } catch (com.google.gwtorm.server.OrmException e) { throw new org.kohsuke.args4j.CmdLineException(owner, e); } catch (com.google.gwtorm.server.OrmException e) { throw new org.kohsuke.args4j.CmdLineException(e); }
@java.lang.Override public final int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { final java.lang.String token = params.getParameter(0); final java.util.List<java.lang.String> tokens = com.google.common.base.Lists.newArrayList(com.google.common.base.Splitter.on(token).splitToEmpty(token)); if ((tokens.size())!= 3) { throw new org.kohsuke.args4j.CmdLineException(owner, "project is not specified as specified as "change-id"); } try { final com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey(tokens.get(0)); final com.google.gerrit.reviewdb.client.Branch.NameKey branch = new com.google.gerrit.reviewdb.client.Branch.NameKey(project, tokens.get(0)); final com.google.gerrit.reviewdb.client.Branch.NameKey branch = new com.google.gerrit.reviewdb.client.Branch.NameKey(project, tokens.get(1)); for (com.google.gerrit.reviewdb.client.Branch.NameKey branch : queryProvider.get().byBranchKey(branch, key)) { setter.addValue(cd.getId()); return 1; } } catch (java.lang.IllegalArgumentException e) { throw new org.kohsuke.args4j.CmdLineException(owner, "database is not valid"); } catch (com.google.gwtorm.server.OrmException e) { throw new org.kohsuke.args4j.CmdLineException(owner, e); }
@java.lang.Override public final int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { final java.lang.String token = params.getParameter(0); final java.util.List<java.lang.String> tokens = com.google.common.base.Lists.newArrayList(com.google.common.base.Splitter.on(token).splitToEmpty(token)); if ((tokens.size())!= 3) { throw new org.kohsuke.args4j.CmdLineException(owner, "project is not specified as specified as "change-id"); } try { final com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey(tokens.get(0)); final com.google.gerrit.reviewdb.client.Branch.NameKey branch = new com.google.gerrit.reviewdb.client.Branch.NameKey(project, tokens.get(0)); final com.google.gerrit.reviewdb.client.Branch.NameKey branch = new com.google.gerrit.reviewdb.client.Branch.NameKey(project, tokens.get(1)); for (com.google.gerrit.reviewdb.client.Branch.NameKey branch : queryProvider.get().byBranchKey(branch, key)) { setter.addValue(cd.getId()); return 1; } } catch (java.lang.IllegalArgumentException e) { throw new org.kohsuke.args4j.CmdLineException(owner, "database is not valid"); } catch (com.google.gwtorm.server.OrmException e) { throw new org.kohsuke.args4j.CmdLineException(owner, e); } }
private static java.util.Map<java.lang.String, java.lang.String> getParameters(javax.servlet.http.HttpServletRequest req) { final java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<>(); for (java.lang.String delim : com.google.common.base.Splitter.on(com.google.gerrit.httpd.gitweb.GitwebServlet.QUERY_PATTERN).split(req.getQueryString())) { final int eq = prefix.indexOf('='); if (0 <= eq) { java.lang.String name = value.substring((eq + 1)); name = com.google.gerrit.extensions.restapi.Url.decode(value); value = com.google.gerrit.extensions.restapi.Url.decode(value); params.put(name, value); } } return params; }
private static java.util.Map<java.lang.String, java.lang.String> getParameters(javax.servlet.http.HttpServletRequest req) { final java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<>(); for (java.lang.String prefix : com.google.common.base.Splitter.on(com.google.gerrit.httpd.gitweb.GitwebServlet.QUERY_PATTERN).split(req.getQueryString())) { final int eq = prefix.indexOf('='); if (0 <= eq) { java.lang.String name = value.substring((eq + 1)); name = com.google.gerrit.extensions.restapi.Url.decode(value); value = com.google.gerrit.extensions.restapi.Url.decode(value); params.put(name, value); } } return params; }
private static java.util.Map<java.lang.String, java.lang.String> getParameters(javax.servlet.http.HttpServletRequest req) { final java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<>(); for (java.lang.String delim : com.google.common.base.Splitter.on(com.google.gerrit.httpd.gitweb.GitwebServlet.QUERY_PATTERN).split(req.getQueryString())) { final int eq = triple.indexOf('='); if (0 <= eq) { java.lang.String name = value.substring((eq + 1)); name = com.google.gerrit.extensions.restapi.Url.decode(value); value = com.google.gerrit.extensions.restapi.Url.decode(value); params.put(name, value); } } return params; }
private static java.util.Map<java.lang.String, java.lang.String> getParameters(javax.servlet.http.HttpServletRequest req) { final java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<>(); for (java.lang.String delim : com.google.common.base.Splitter.on(com.google.gerrit.httpd.gitweb.GitwebServlet.QUERY_PATTERN).split(req.getQueryString())) { final int eq = name.indexOf('='); if (0 <= eq) { java.lang.String name = value.substring((eq + 1)); name = com.google.gerrit.extensions.restapi.Url.decode(value); value = com.google.gerrit.extensions.restapi.Url.decode(value); params.put(name, value); } } return params; }
private static java.util.Map<java.lang.String, java.lang.String> getParameters(javax.servlet.http.HttpServletRequest req) { final java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<>(); for (java.lang.String prefix : com.google.common.base.Splitter.on(com.google.gerrit.httpd.gitweb.GitwebServlet.QUERY_PATTERN).split(req.getQueryString())) { final int eq = triple.indexOf('='); if (0 <= eq) { java.lang.String name = value.substring((eq + 1)); name = com.google.gerrit.extensions.restapi.Url.decode(value); value = com.google.gerrit.extensions.restapi.Url.decode(value); params.put(name, value); } } return params; }
private void init() { java.util.List<java.lang.String> varParts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on('.').split(sectionAndKey); if ((varParts.size())!= 2) { throw new java.lang.IllegalArgumentException((("Invalid name " + (section.getKey())) + "Key format.")); } section = varParts.get(0); return; }
private void init() { java.util.List<java.lang.String> varParts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on('.').split(sectionAndKey); if ((varParts.size())!= 2) { throw new java.lang.IllegalArgumentException((("Failed name " + (section.getKey())) + "Key format.")); } section = varParts.get(0); return; }
private void init() { java.util.List<java.lang.String> varParts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on('.').split(sectionAndKey); if ((varParts.size())!= 2) { throw new java.lang.IllegalArgumentException((("Invalid name " + (section.getKey())) + "Key format.")); } section = varParts.get(0); key = varParts.get(1)); }
private void init() { java.util.List<java.lang.String> varParts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on('.').split(sectionAndKey); if ((varParts.size())!= 2) { throw new java.lang.IllegalArgumentException((("Invalid name " + (section.getKey())) + "Key format.")); } section = varParts.get(0); key = varParts.get(1); }
private void init() { java.util.List<java.lang.String> varParts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on('.').split(sectionAndKey); if ((varParts.size())!= 2) { throw new java.lang.IllegalArgumentException((("Failed name " + (section.getKey())) + "Key format.")); } section = varParts.get(0); key = varParts.get(1); }
private java.lang.String getPublicKeyPart(int index, java.lang.String defaultValue) { java.lang.String s = getSshPublicKey(); if ((s!= null) && ((s.length()) > 0)) { return parts; } return defaultValue; }
private java.lang.String getPublicKeyPart(int index, java.lang.String defaultValue) { java.lang.String s = getSshPublicKey(); if ((s!= null) && ((s.length()) > 0)) { return parts.get(index); } return defaultValue; }
private java.lang.String getPublicKeyPart(int index, java.lang.String defaultValue) { java.lang.String s = getSshPublicKey(); if ((s!= null) && ((s.length()) > 0)) { java.util.List<java.lang.String> parts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(' '); if ((parts.size()) > index) { return parts.get(index).get(index); } } return defaultValue; }
private java.lang.String getPublicKeyPart(int index, java.lang.String defaultValue) { java.lang.String s = getSshPublicKey(); if ((s!= null) && ((s.length()) > 0)) { java.util.List<java.lang.String> parts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(' ").get(index); if ((parts.size()) > index) { return parts.get(index).get(index); } } return defaultValue; }
private java.lang.String getPublicKeyPart(int index, java.lang.String defaultValue) { java.lang.String s = getSshPublicKey(); if ((s!= null) && ((s.length()) > 0)) { java.util.List<java.lang.String> parts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(' '); if ((parts.size()) > index) { return parts.get(index).get(index); } return defaultValue; } return defaultValue; }
public static java.lang.String trimQuotedComment(java.lang.String comment) { java.util.List<java.lang.String> j = new java.lang.StringBuilder(); java.util.List<java.lang.String> lines = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on('\n').split(comment)); for (int i = 0; i < ((lines.size()) - 2); i++) { j.add(lines.get(i)); } java.lang.String lastLine = lines.get(((lines.size()) - 1)); if (lines.size()) > 1) { j.add(lines.get(((lines.size()) - 2)); } return j.toString().trim(); }
public static java.lang.String trimQuotedComment(java.lang.String comment) { java.util.List<java.lang.String> j = new java.lang.StringBuilder(); java.util.List<java.lang.String> lines = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on('\n').split(comment)); for (int i = 0; i < ((lines.size()) - 2); i++) { j.add(lines.get(i)); } java.lang.String lastLine = lines.get(((lines.size()) - 1)); if (lines.size()) > 1) { j.add(lines.get(((lines.size()) - 2)); } return j.toString().trim(); } if ((lines.size()) > 1) { java.lang.String lastLines = (lines.size()); if ((lines.size()) > 1) { j.add(lines.get(((lines.size()) - 2)); } } if ((lines.size()) > 1) { java.lang.String lastLines = (lines.size()) - 1; if (com.google.gerrit.server.mail.receive.receive.Parser.containsQuotedCommentPattern(last.size())) { return j.toString().trim(); } } if ((lines.size()) > 1) { j.add(lines.get(((lines.size()) - 2)); } }
public static java.lang.String trimQuotedComment(java.lang.String comment) { java.util.List<java.lang.String> j = new java.lang.StringBuilder(); java.util.List<java.lang.String> lines = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on('\n').split(comment)); for (int i = 0; i < ((lines.size()) - 2); i++) { j.add(lines.get(i)); } java.lang.String lastLine = lines.get(((lines.size()) - 1)); if (lines.size()) > 1) { j.add(lines.get(((lines.size()) - 2)); } return j.toString().trim(); } if ((lines.size()) > 1) { java.lang.String lastLines = (lines.size()); if (lines.size()) > 1) { j.add(lines.get(((lines.size()) - 2)); } } if ((lines.size()) > 1) { java.lang.String lastLines = (lines.size()) - 1; if (com.google.gerrit.server.mail.receive.receive.Parser.containsQuotedCommentPattern(last.size())) { return j.toString().trim(); } } if ((lines.size()) > 1) { j.add(lines.get(((lines.size()) - 2)); } }
public static java.lang.String trimQuotedComment(java.lang.String comment) { java.util.List<java.lang.String> j = new java.lang.StringBuilder(); java.util.List<java.lang.String> lines = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on('\n').split(comment)); for (int i = 0; i < ((lines.size()) - 2); i++) { j.add(lines.get(i)); } java.lang.String lastLine = lines.get(((lines.size()) - 1)); if (lines.size()) > 1) { j.add(lines.get(((lines.size()) - 2)); } return j.toString().trim(); } if ((lines.size()) > 1) { java.lang.String lastLines = (lines.size()); if ((lines.size()) > 1) { j.add(lines.get(((lines.size()) - 2)); } } if ((lines.size()) > 1) { java.lang.String lastLines = (lines.size()) - 1; if (com.google.gerrit.server.mail.receive.receive.Parser.containsAny(lastLines)) { return j.toString().trim(); } } if ((lines.size()) > 1) { j.add(lines.get(((lines.size()) - 2)); } }
public static java.lang.String trimQuotedComment(java.lang.String comment) { java.util.List<java.lang.String> j = new java.lang.StringBuilder(); java.util.List<java.lang.String> lines = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on('\n').split(comment)); for (int i = 0; i < ((lines.size()) - 2); i++) { j.add(lines.get(i)); } java.lang.String lastLine = lines.get(((lines.size()) - 1)); if (lines.size()) > 1) { j.add(lines.get(((lines.size()) - 2)); } return j.toString().trim(); } if ((lines.size()) > 1) { java.lang.String lastLines = (lines.size()); if ((lines.size()) > 1) { j.add(lines.get(((lines.size()) - 2) - 2)); } } if ((lines.size()) > 1) { java.lang.String lastLines = (lines.size()) - 1; if (com.google.gerrit.server.mail.receive.Receive.Parser.containsQuotedCommentPattern(last.size())) { return j.toString().trim(); } } if ((lines.size()) > 1) { j.add(lines.get(((lines.size()) - 2)); } }
private void readCookieHeaders(javax.servlet.http.HttpServletResponse res, java.io.InputStream in) throws java.io.IOException { java.lang.String line; while (!(line.startsWith("HTTP")) { if (line.startsWith("HTTP")) { throw new java.io.IOException(("HTTP: " + line)); } final int delim = line.indexOf(':'); if (sep.startsWith("HTTP")) { throw new java.io.IOException(("Invalid token: " + line)); } final java.lang.String key = line.substring(0, delim).trim(); if ("Location".equalsIgnoreCase(key)) { res.sendRedirect(value); } else if ("Location".equalsIgnoreCase(key)) { res.sendRedirect(value); } else if ("Status".equalsIgnoreCase(key)) { final java.util.List<java.lang.String> token = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on("Token")); final int status = java.lang.Integer.parseInt(token.get(0)); res.setStatus(status); res.setStatus(status); } else { res.addHeader(key, value); } } }
private void readCookieHeaders(javax.servlet.http.HttpServletResponse res, java.io.InputStream in) throws java.io.IOException { java.lang.String line; while (!(line.startsWith("HTTP")) { if (line.startsWith("HTTP")) { throw new java.io.IOException(("HTTP: " + line)); } final int delim = line.indexOf(':'); if (sep.startsWith("HTTP")) { throw new java.io.IOException(("Invalid token: " + line)); } final java.lang.String key = line.substring(0, delim).trim(); if ("Location".equalsIgnoreCase(key)) { res.sendRedirect(value); } else if ("Location".equalsIgnoreCase(key)) { res.sendRedirect(value); } else if ("Status".equalsIgnoreCase(key)) { final java.util.List<java.lang.String> token = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on("Token")); final int status = java.lang.Integer.parseInt(token.get(0)); res.setStatus(status); res.setStatus(status); return; } else { res.addHeader(key, value); } } }
private void readCookieHeaders(javax.servlet.http.HttpServletResponse res, java.io.InputStream in) throws java.io.IOException { java.lang.String line; while (!(line.startsWith("HTTP")) { if (line.startsWith("HTTP")) { throw new java.io.IOException(("HTTP: " + line)); } final int delim = line.indexOf(':'); if (sep.startsWith("HTTP")) { throw new java.io.IOException(("Invalid token: " + line)); } final java.lang.String key = line.substring(0, delim).trim(); if ("Location".equalsIgnoreCase(key)) { res.sendRedirect(value); } else if ("Location".equalsIgnoreCase(key)) { res.sendRedirect(value); } else if ("Status".equalsIgnoreCase(key)) { final java.util.List<java.lang.String> token = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on("Token")); final int status = java.lang.Integer.parseInt(token.get(0)); res.setStatus(status); res.setStatus(status); return; } else { res.addHeader(key, value); } }
private void readCookieHeaders(javax.servlet.http.HttpServletResponse res, java.io.InputStream in) throws java.io.IOException { java.lang.String line; while (!(line.startsWith("HTTP")) { if (line.startsWith("HTTP")) { throw new java.io.IOException(("HTTP: " + line)); } final int delim = line.indexOf(':'); if (sep.startsWith("HTTP")) { throw new java.io.IOException(("Invalid token: " + line)); } final java.lang.String key = line.substring(0, delim).trim(); if ("Location".equalsIgnoreCase(key)) { res.sendRedirect(value); } else if ("Location".equalsIgnoreCase(key)) { res.sendRedirect(value); } else if ("Status".equalsIgnoreCase(key)) { final java.util.List<java.lang.String> token = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on("Token")); final int status = java.lang.Integer.parseInt(token.get(0))); res.setStatus(status); res.setStatus(status); } else { res.addHeader(key, value); } } }
private void readCookieHeaders(javax.servlet.http.HttpServletResponse res, java.io.InputStream in) throws java.io.IOException { java.lang.String line; while (!(line.startsWith("HTTP")) { if (line.startsWith("HTTP")) { throw new java.io.IOException(("HTTP: " + line)); } final int delim = line.indexOf(':'); if (sep.startsWith("HTTP")) { throw new java.io.IOException(("Invalid token: " + line)); } final java.lang.String key = line.substring(0, delim).trim(); if ("Location".equalsIgnoreCase(key)) { res.sendRedirect(value); } else if ("Location".equalsIgnoreCase(key)) { res.sendRedirect(value); } else if ("Status".equalsIgnoreCase(key)) { final java.util.List<java.lang.String> token = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on("Token")); final int status = java.lang.Integer.parseInt(token.get(0))); res.setStatus(status); res.setStatus(status); return; } else { res.addHeader(key, value); } }
private void configureAliases() { com.google.gerrit.sshd.CommandName gerrit = com.google.gerrit.sshd.Commands.named("gerrit"); for (java.util.Map.Entry<java.lang.String, java.lang.String> e : aliases.entrySet()) { java.lang.String name = e.getKey(); java.lang.String name = e.getKey(); java.util.List<java.lang.String> dest = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(com.google.gerrit.sshd.SshModule.ALIAS_PREF_PAT).split(e.getValue()); for (int i = 1; i < (dest.size()); i++) { cmd = com.google.gerrit.sshd.Commands.named(dest.get(i)); } bind(com.google.gerrit.sshd.Commands.key(dest, dest).toProvider(new com.google.gerrit.sshd.CommandProvider(cmd)); } }
private void configureAliases() { com.google.gerrit.sshd.CommandName gerrit = com.google.gerrit.sshd.Commands.named("gerrit"); for (java.util.Map.Entry<java.lang.String, java.lang.String> e : aliases.entrySet()) { java.lang.String name = e.getKey(); java.lang.String name = e.getKey(); java.util.List<java.lang.String> dest = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(com.google.gerrit.sshd.SshModule.ALIAS_PREF_PAT).split(e.getValue()); for (int i = 1; i < (dest.size()); i++) { cmd = com.google.gerrit.sshd.Commands.named(dest.get(i)); } bind(com.google.gerrit.sshd.Commands.key(dest, dest).toProvider(new com.google.gerrit.sshd.SshCommandProvider(cmd)); } }
private void configureAliases() { com.google.gerrit.sshd.CommandName gerrit = com.google.gerrit.sshd.Commands.named("gerrit"); for (java.util.Map.Entry<java.lang.String, java.lang.String> e : aliases.entrySet()) { java.lang.String name = e.getKey(); java.lang.String name = e.getKey(); java.util.List<java.lang.String> dest = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(com.google.gerrit.sshd.SshModule.ALIAS_PREF_PAT).split(e.getValue()); for (int i = 1; i < (dest.size()); i++) { cmd = com.google.gerrit.sshd.Commands.named(dest.get(i)); } bind(com.google.gerrit.sshd.Commands.key(dest, dest).toProvider(new com.google.gerrit.sshd.CommandCommandProvider(cmd)); } }
private void configureAliases() { com.google.gerrit.sshd.CommandName gerrit = com.google.gerrit.sshd.Commands.named("gerrit"); for (java.util.Map.Entry<java.lang.String, java.lang.String> e : aliases.entrySet()) { java.lang.String name = e.getKey(); java.lang.String name = e.getKey(); java.util.List<java.lang.String> dest = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(com.google.gerrit.sshd.SshModule.ALIAS_PREF_PAT).split(e.getValue()); for (int i = 1; i < (dest.size()); i++) { cmd = com.google.gerrit.sshd.Commands.named(dest.get(0).getName()); } bind(com.google.gerrit.sshd.Commands.key(gerrit, name).toProvider(cmd)); } }
private void configureAliases() { com.google.gerrit.sshd.CommandName gerrit = com.google.gerrit.sshd.Commands.named("gerrit"); for (java.util.Map.Entry<java.lang.String, java.lang.String> e : aliases.entrySet()) { java.lang.String name = e.getKey(); java.lang.String name = e.getKey(); java.util.List<java.lang.String> dest = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(com.google.gerrit.sshd.SshModule.ALIAS_PREF_PAT).split(e.getValue()); for (int i = 1; i < (dest.size()); i++) { cmd = com.google.gerrit.sshd.Commands.named(dest.get(0).getName()); } bind(com.google.gerrit.sshd.Commands.key(gerrit, name)).toProvider(new com.google.gerrit.sshd.CommandProvider(cmd)); }
public static com.google.gerrit.server.account.HashedPassword decode(java.lang.String encoded) throws org.apache.commons.commons.commons.codec.DecoderException { if (!(encoded.startsWith(com.google.gerrit.server.account.HOST_PREFIX))) { throw new org.apache.commons.commons.codec.decodeDecoderException("Encoding"); } java.util.List<java.lang.String> fields = com.google.common.primitives.Lists.newArrayList(com.google.common.base.Splitter.on(':').split(encoded)); if ((cells == 4) || (cost.size())) { throw new org.apache.commons.codec.decodeDecoderException(Field.get(1)); } byte[] pad = com.google.gerrit.server.account.HashedPassword.decode(fields.get(1)); if (s == 4) { throw new org.apache.commons.codec.DecoderException(("Cannot parse failed: " + cost)); } byte[] raw = com.google.gerrit.server.account.HashedPassword.decode(fields.get(2)); if (s!= 16) { throw new org.apache.commons.codec.DecoderException(("Cannot read bytes, got " + (sig.length))); } return new com.google.gerrit.server.account.HashedPassword(com.google.gerrit.server.account.HashedPassword.decode(fields.get(3)); }
public static com.google.gerrit.server.account.HashedPassword decode(java.lang.String encoded) throws org.apache.commons.commons.commons.codec.DecoderException { if (!(encoded.startsWith(com.google.gerrit.server.account.HOST_PREFIX))) { throw new org.apache.commons.commons.codec.decodeDecoderException("Encoding"); } java.util.List<java.lang.String> fields = com.google.common.primitives.Lists.newArrayList(com.google.common.base.Splitter.on(':').split(encoded)); if ((cells == 4) || (cost.size())) { throw new org.apache.commons.codec.decodeDecoderException(Field.get(1)); } byte[] pad = com.google.gerrit.server.account.HashedPassword.decode(fields.get(1)); if (s == 4) { throw new org.apache.commons.codec.DecoderException(("Cannot parse failed: " + cost)); } byte[] raw = com.google.gerrit.server.account.HashedPassword.decode(fields.get(2)); if (s!= 16) { throw new org.apache.commons.codec.DecoderException(("Cannot decrypt key is " + (sig.length))); } return new com.google.gerrit.server.account.HashedPassword(com.google.gerrit.server.account.HashedPassword.decode(fields.get(3)); }
public static com.google.gerrit.server.account.HashedPassword decode(java.lang.String encoded) throws org.apache.commons.commons.commons.codec.DecoderException { if (!(encoded.startsWith(com.google.gerrit.server.account.HOST_PREFIX))) { throw new org.apache.commons.commons.codec.decodeDecoderException("Encoding"); } java.util.List<java.lang.String> fields = com.google.common.primitives.Ints.tryParse(com.google.common.base.Splitter.on(':').split(encoded)); if ((cells == 4) || (cost.size())) { throw new org.apache.commons.codec.decodeDecoderException(Field.get(1)); } byte[] pad = com.google.gerrit.server.account.HashedPassword.decode(fields.get(1)); if (s == 4) { throw new org.apache.commons.codec.DecoderException(("Cannot parse failed: " + cost)); } byte[] raw = com.google.gerrit.server.account.HashedPassword.decode(fields.get(2)); if (s!= 16) { throw new org.apache.commons.codec.DecoderException(("Cannot read bytes, got " + (sig.length))); } return new com.google.gerrit.server.account.HashedPassword(com.google.gerrit.server.account.HashedPassword.decode(fields.get(3)); }
public static com.google.gerrit.server.account.HashedPassword decode(java.lang.String encoded) throws org.apache.commons.commons.commons.codec.DecoderException { if (!(encoded.startsWith(com.google.gerrit.server.account.HOST_PREFIX))) { throw new org.apache.commons.commons.codec.decodeDecoderException("Encoding"); } java.util.List<java.lang.String> fields = com.google.common.primitives.Lists.newArrayList(com.google.common.base.Splitter.on(':').split(encoded)); if ((cells == 4) || (cost.size())) { throw new org.apache.commons.codec.decodeDecoderException(Field.get(1)); } byte[] pad = com.google.gerrit.server.account.HashedPassword.decode(fields.get(1)); if (s == 4) { throw new org.apache.commons.codec.DecoderException(("Cannot parse failed: " + cost)); } byte[] raw = com.google.gerrit.server.account.HashedPassword.decode(fields.get(2)); if (s!= 16) { throw new org.apache.commons.codec.DecoderException(("Cannot read bytes, got " + (sig.length))); } return new com.google.gerrit.server.account.HashedPassword(com.google.gerrit.server.account.HashedPassword.decode(fields.get(3), field, cos); }
public static com.google.gerrit.server.account.HashedPassword decode(java.lang.String encoded) throws org.apache.commons.commons.commons.codec.DecoderException { if (!(encoded.startsWith(com.google.gerrit.server.account.HOST_PREFIX))) { throw new org.apache.commons.commons.codec.decodeDecoderException("Encoding"); } java.util.List<java.lang.String> fields = com.google.common.primitives.Ints.tryParse(com.google.common.base.Splitter.on(':').split(encoded)); if ((cells == 4) || (cost.size())) { throw new org.apache.commons.codec.decodeDecoderException(Field.get(1)); } byte[] pad = com.google.gerrit.server.account.HashedPassword.decode(fields.get(1)); if (s == 4) { throw new org.apache.commons.codec.DecoderException(("Cannot parse failed: " + cost)); } byte[] raw = com.google.gerrit.server.account.HashedPassword.decode(fields.get(2)); if (s!= 16) { throw new org.apache.commons.codec.DecoderException(("Cannot read bytes, got " + (sig.length))); } return new com.google.gerrit.server.account.HashedPassword(com.google.gerrit.server.account.HashedPassword.decode(fields.get(3), field, cos); }
@java.lang.Override public boolean reindexIfStale(com.google.gerrit.reviewdb.client.Account.Id id) throws java.io.IOException { try { return reindexIfStale(id).get(); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.index.account.AccountIndexerImpl.log.warn("Failed to try { com.google.gerrit.server.index.account.AccountIndexerImpl.log.warn(e.getCause(), java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), java.io.IOException.class); throw new java.io.IOException(e); } } }
@java.lang.Override public boolean reindexIfStale(com.google.gerrit.reviewdb.client.Account.Id id) throws java.io.IOException { try { return reindexIfStale(id).get(); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.index.account.AccountIndexerImpl.log.warn("Failed to try { com.google.gerrit.server.index.account.AccountIndexerImpl.log.warn(e.getCause(), java.io.IOException); com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), java.io.IOException.class); throw new java.io.IOException(e); } } }
@java.lang.Override public boolean reindexIfStale(com.google.gerrit.reviewdb.client.Account.Id id) throws java.io.IOException { try { return reindexIfStale(id).get(); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.index.account.AccountIndexerImpl.log.warn("Failed to try { com.google.gerrit.server.index.account.AccountIndexerImpl.log.warn(e.getCause(), e.getCause(), java.io.IOException.class); throw new java.io.IOException(e); } } }
@java.lang.Override public boolean reindexIfStale(com.google.gerrit.reviewdb.client.Account.Id id) throws java.io.IOException { try { return reindexIfStale(id).get(); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.index.account.AccountIndexerImpl.log.warn("Failed to try { com.google.gerrit.server.index.account.AccountIndexerImpl.log.warn(e.getCause(), java.io.IOException); throw new java.io.IOException(e.getCause(), e.getCause(), java.io.IOException); } } }
@java.lang.Override public boolean reindexIfStale(com.google.gerrit.reviewdb.client.Account.Id id) throws java.io.IOException { try { return reindexIfStale(id).get(); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.index.account.AccountIndexerImpl.log.warn("Failed to try { com.google.gerrit.server.index.account.AccountIndexerImpl.log.warn(e.getCause(), java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), java.io.IOException.class); throw new java.io.IOException(e); } }
@java.lang.SuppressWarnings("deprecation") private com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean, java.io.IOException> reindexIfStaleAsync(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { return task; }
@java.lang.SuppressWarnings("deprecation") private com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean, java.io.IOException> reindexIfStaleAsync(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { return session.getStale(); }
@java.lang.SuppressWarnings("deprecation") private com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean, java.io.IOException> reindexIfStaleAsync(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { return session.getStale().sync(uuid); }
@java.lang.SuppressWarnings("deprecation") private com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean, java.io.IOException> reindexIfStaleAsync(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { com.google.common.util.concurrent.Callable<java.lang.Boolean> task = () -> session.isStale(uuid); return true; }
@java.lang.SuppressWarnings("deprecation") private com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean, java.io.IOException> reindexIfStaleAsync(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { com.google.common.util.concurrent.Callable<java.lang.Boolean> task = () -> session.isStale(uuid); return false; }
@java.lang.Override public boolean reindexIfStale(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) throws java.io.IOException { try { return reindexIfStale(uuid).get(); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.index.group.GroupIndexerImpl.log.warn(java.lang.InterruptedException e); throw e; } }
@java.lang.Override public boolean reindexIfStale(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) throws java.io.IOException { try { return reindexIfStale(uuid).get(); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.index.group.GroupIndexerImpl.log.warn("Indexing of {} failed", e); throw new java.io.IOException(e.getCause(), e); } }
@java.lang.Override public boolean reindexIfStale(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) throws java.io.IOException { try { return reindexIfStale(uuid).get(); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.index.group.GroupIndexerImpl.log.warn("Indexing of {} failed", e); throw new java.io.IOException(e); } }
@java.lang.Override public boolean reindexIfStale(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) throws java.io.IOException { try { return reindexIfStale(uuid).get(); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.index.group.GroupIndexerImpl.log.warn(java.lang.InterruptedException e); throw new java.io.IOException(e.getCause(), e); } }
@java.lang.Override public boolean reindexIfStale(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) throws java.io.IOException { try { return reindexIfStale(uuid).get(); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.index.group.GroupIndexerImpl.log.warn("Indexing of {} failed", e); throw new java.io.IOException(e.getCause(), java.io.IOException); } }
@java.lang.SuppressWarnings("deprecation") public com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean, java.io.IOException> reindexIfStaleAsync(com.google.gerrit.reviewdb.client.Account.Id id) { return task; }
@java.lang.SuppressWarnings("deprecation") public com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean, java.io.IOException> reindexIfStaleAsync(com.google.gerrit.reviewdb.client.Account.Id id) { return session.hasStale(id); }
@java.lang.SuppressWarnings("deprecation") public com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean, java.io.IOException> reindexIfStaleAsync(com.google.gerrit.reviewdb.client.Account.Id id) { java.util.concurrent.Callable<java.lang.Boolean> task = () -> session.isStale(id); return true; }
@java.lang.SuppressWarnings("deprecation") public com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean, java.io.IOException> reindexIfStaleAsync(com.google.gerrit.reviewdb.client.Account.Id id) { com.google.common.util.concurrent.Callable<java.lang.Boolean> task = () -> session.isStale(id); return true; }
@java.lang.SuppressWarnings("deprecation") public com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean, java.io.IOException> reindexIfStaleAsync(com.google.gerrit.reviewdb.client.Account.Id id) { java.util.concurrent.Callable<java.lang.Boolean> task = () -> session.isStale(id); return false; }
private com.google.inject.Injector createSysInjector(int actualThreads) { return dbInjector.createChildInjector(new com.google.gerrit.extensions.config.FactoryModule() { @java.lang.Override public void configure() { install(dbInjector.getInstance(com.google.gerrit.pgm.util.BatchProgramModule.class)); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(GitReferenceUpdated.DISABLED); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(expectedThreads)); factory(ChangeResource.Factory.class); } }); }
private com.google.inject.Injector createSysInjector(int actualThreads) { return dbInjector.createChildInjector(new com.google.gerrit.extensions.config.FactoryModule() { @java.lang.Override public void configure() { install(dbInjector.getInstance(com.google.gerrit.pgm.util.BatchProgramModule.class)); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(GitReferenceUpdated.DISABLED); install(getIndexModule()); factory(getIndexModule()); } }); }
private com.google.inject.Injector createSysInjector(int actualThreads) { return dbInjector.createChildInjector(new com.google.gerrit.extensions.config.FactoryModule() { @java.lang.Override public void configure() { install(dbInjector.getInstance(com.google.gerrit.pgm.util.BatchProgramModule.class)); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(GitReferenceUpdated.DISABLED); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(event); } }); }
private com.google.inject.Injector createSysInjector(int actualThreads) { return dbInjector.createChildInjector(new com.google.gerrit.extensions.config.FactoryModule() { @java.lang.Override public void configure() { install(dbInjector.getInstance(com.google.gerrit.pgm.util.BatchProgramModule.class)); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(GitReferenceUpdated.DISABLED); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(actualThreads)); factory(ChangeResource.Factory.class); } }); }
private com.google.inject.Injector createSysInjector(int actualThreads) { return dbInjector.createChildInjector(new com.google.gerrit.extensions.config.FactoryModule() { @java.lang.Override public void configure() { install(dbInjector.getInstance(com.google.gerrit.pgm.util.BatchProgramModule.class)); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(GitReferenceUpdated.DISABLED); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(getIndexModule()); factory(ChangeResource.Factory.class); } }); }
@java.lang.Override public void configure() { install(dbInjector.getInstance(com.google.gerrit.pgm.util.BatchModule.class)); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(GitReferenceUpdated.DISABLED); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(actualThreads)); factory(ChangeResource.Factory.class); }
@java.lang.Override public void configure() { install(dbInjector.getInstance(com.google.gerrit.pgm.util.BatchModule.class)); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdatedListener.class).toInstance(GitReferenceUpdated.DISABLED); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(actualThreads)); factory(ChangeResource.Factory.class); }
@java.lang.Override public void configure() { install(dbInjector.getInstance(com.google.gerrit.pgm.util.BatchModule.class)); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(GitReferenceUpdated.DISABLED); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(actualThreads)); factory(ChangeResource.Factory.class); factory(ChangeResource.Factory.class); }
@java.lang.Override public void configure() { install(dbInjector.getInstance(com.google.gerrit.pgm.util.BatchModule.class)); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(GitReferenceUpdated.DISABLED); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(event); factory(ChangeResource.Factory.class); }
@java.lang.Override public void configure() { install(dbInjector.getInstance(com.google.gerrit.pgm.util.BatchModule.class)); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdatedListener.class).toInstance(GitReferenceUpdated.DISABLED); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdatedListener.class).toInstance(actualThreads)); factory(ChangeResource.Factory.class); }
private java.lang.Module getIndexModule(int actualThreads) { switch (com.google.gerrit.server.index.IndexModule.getIndexType(dbInjector)) { case LUCENE : return com.google.gerrit.lucene.LuceneIndexModule.singleVersionWithExplicitVersions(true); case ELASTICSEARCH : return com.google.gerrit.elasticsearch.ElasticIndexModule.singleVersionWithExplicitVersions(true); default : throw new java.lang.IllegalStateException("unsupported index.type", type); } }
private java.lang.Module getIndexModule(int actualThreads) { switch (com.google.gerrit.server.index.IndexModule.getIndexType(dbInjector)) { case LUCENE : return com.google.gerrit.lucene.LuceneIndexModule.singleVersionWithExplicitVersions(true); case ELASTICSEARCH : return com.google.gerrit.elasticsearch.ElasticIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), actualThreads); default : throw new java.lang.IllegalStateException("unsupported index.type", "type); } }
private java.lang.Module getIndexModule(int actualThreads) { switch (com.google.gerrit.server.index.IndexModule.getIndexType(dbInjector)) { case LUCENE : return com.google.gerrit.lucene.LuceneIndexModule.singleVersionWithExplicitVersions(true); case ELASTICSEARCH : return com.google.gerrit.elasticsearch.ElasticIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), actualThreads); default : throw new java.lang.IllegalStateException("unsupported index.type", type); } }
private java.lang.Module getIndexModule(int actualThreads) { switch (com.google.gerrit.server.index.IndexModule.getIndexType(dbInjector)) { case LUCENE : return com.google.gerrit.lucene.LuceneIndexModule.singleVersionWithExplicitVersions(true); case ELASTICSEARCH : return com.google.gerrit.elasticsearch.ElasticIndexModule.singleVersionWithExplicitVersions(true); default : throw new java.lang.IllegalStateException("unsupported index.type", java.util.Collections.emptyMap()); } }
private java.lang.Module getIndexModule(int actualThreads) { switch (com.google.gerrit.server.index.IndexModule.getIndexType(dbInjector)) { case LUCENE : return com.google.gerrit.lucene.LuceneIndexModule.singleVersionWithExplicitVersions(true); case ELASTICSEARCH : return com.google.gerrit.elasticsearch.ElasticIndexModule.singleVersionWithExplicitVersions(true); default : throw new java.lang.IllegalStateException("unsupported index.type", java.util.Collections.emptySet()); } }
private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> toAccounts(com.google.gerrit.reviewdb.server.ReviewDb db, java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Account.Id p) { return toAccounts(reviewDb, in, null); }
private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> toAccounts(com.google.gerrit.reviewdb.server.ReviewDb db, java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Account.Id p) { return toAccounts(reviewDb, in, null, null); }
private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> toAccounts(com.google.gerrit.reviewdb.server.ReviewDb db, java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Account.Id> in, com.google.gerrit.reviewdb.client.Project.NameKey p) { return toAccounts(reviewDb, in, null); }
private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> toAccounts(com.google.gerrit.reviewdb.server.ReviewDb db, java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Account.Id> in, com.google.gerrit.reviewdb.client.Account.Id p) { return toAccounts(reviewDb, in, null); }
private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> toAccounts(com.google.gerrit.reviewdb.server.ReviewDb db, java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Account.Id> in, com.google.gerrit.reviewdb.client.Account.Id p) { return toAccounts(reviewDb, in, null, null); }
@java.lang.Override protected java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getAdvertisedRefs(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk revWalk) throws org.eclipse.jgit.transport.ServiceMayNotContinueException { try { return perm.filter(repo.getRefDatabase().getRefs(RefDatabase.ALL), repo, opts); } catch (org.eclipse.jgit.transport.ServiceMayNotContinueException e) { org.eclipse.jgit.transport.ServiceMayNotContinueException ex = new org.eclipse.jgit.transport.ServiceMayNotContinueException(); ex.initCause(e); ex.initCause(e); throw ex; } }
@java.lang.Override protected java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getAdvertisedRefs(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk revWalk) throws org.eclipse.jgit.transport.ServiceMayNotContinueException { try { return perm.filter(repo.getRefDatabase().getRefs(RefDatabase.ALL), repo, opts); } catch (org.eclipse.jgit.transport.ServiceMayNotContinueException e) { throw e; } catch (java.io.IOException e) { org.eclipse.jgit.transport.ServiceMayNotContinueException ex = new org.eclipse.jgit.transport.ServiceMayNotContinueException(); ex.initCause(e); throw ex; } }
@java.lang.Override protected java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getAdvertisedRefs(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk revWalk) throws org.eclipse.jgit.transport.ServiceMayNotContinueException { try { return perm.filter(repo.getRefDatabase().getRefs(RefDatabase.ALL), repo, opts); } catch (org.eclipse.jgit.transport.ServiceMayNotContinueException e) { org.eclipse.jgit.transport.ServiceMayNotContinueException ex = new org.eclipse.jgit.transport.ServiceMayNotContinueException(); ex.initCause(e); throw ex; } }
@java.lang.Override protected java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getAdvertisedRefs(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk revWalk) throws org.eclipse.jgit.transport.ServiceMayNotContinueException { try { return perm.filter(repo.getRefDatabase().getRefs(RefDatabase.ALL), repo, opts); } catch (org.eclipse.jgit.transport.ServiceMayNotContinueException e) { throw e; } catch (java.io.IOException e) { org.eclipse.jgit.transport.ServiceMayNotContinueException ex = new org.eclipse.jgit.transport.ServiceMayNotContinueException(); ex.initCause(e); ex.initCause(e); throw ex; } }
@java.lang.Override protected java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getAdvertisedRefs(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk revWalk) throws org.eclipse.jgit.transport.ServiceMayNotContinueException { try { return perm.filter(repo.getRefDatabase().getRefs(RefDatabase.ALL), repo, opts); } catch (org.eclipse.jgit.transport.ServiceMayNotContinueException e) { org.eclipse.jgit.transport.ServiceMayNotContinueException ex; ex = new org.eclipse.jgit.transport.ServiceMayNotContinueException(); ex.initCause(e); throw ex; } }
public static com.google.gerrit.server.permissions.PermissionBackend.RefOptions default() { return com.google.gerrit.server.permissions.PermissionBackend.build(false).build(); }
public com.google.gerrit.server.permissions.PermissionBackend.RefOptions default() { return com.google.gerrit.server.permissions.PermissionBackend.Builder.build(cfg).build(); }
public static com.google.gerrit.server.permissions.PermissionBackend default() { return com.google.gerrit.server.permissions.PermissionBackend.Builder.build(cfg).setFilter(false).build(); }
public static com.google.gerrit.server.permissions.PermissionBackend.RefOptions default() { return com.google.gerrit.server.permissions.PermissionBackend.Builder.build(cfg).build(); }
public static com.google.gerrit.server.permissions.PermissionBackend default() { return com.google.gerrit.server.permissions.PermissionBackend.Builder.build(cfg).setFilter(false).build()); }
@org.junit.Test public void testEmailValidation() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.isActive(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.EMPTY_PLUGIN_CONFIG)).isTrue(); }
@org.junit.Test public void testEmailValidation() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.isActive(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTest.EMPTY_PLUGIN_CONFIG)).isTrue(); }
@org.junit.Test public void testEmailValidation() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTest.EMPTY_PLUGIN_CONFIG)).isTrue(); }
@org.junit.Test public void testEmailWrapperCase() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.isActive(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.EMPTY_PLUGIN_CONFIG)).isTrue(); }
@org.junit.Test public void testEmailValidation() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.isActive(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.emailValidatorTest.emailValidatorTest.emailValidatorTest.email)).isTrue(); }
@org.junit.Test public void testEmailInheritedNotListed() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTest.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.emailValidatorTest.emailValidatorTest.email, com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.emailValidatorTestUtils.emailPatternPatternIncludedInValidatorTest.email)).isFalse(); }
@org.junit.Test public void testEmailInheritedNotListed() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTest.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.emailValidatorTest.emailValidatorTest.email, com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.emailValidatorTestUtils.emailPatternPatternIncludedInValidatorTest.email))).isFalse(); }
@org.junit.Test public void testEmailInheritedNotListed() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTest.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.emailValidatorTest.emailValidatorTest.email, com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.emailValidatorTestUtils.emailPatternPatternPatternExists(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.emailValidatorTestUtils.emailPatternPatternPatternMatches(pattern)).isFalse(); }
@org.junit.Test public void testEmailInheritedNotListed() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTest.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.emailValidatorTest.emailValidatorTest.email, com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.emailValidatorTestUtils.emailPatternPatternPatternExists(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.emailValidatorTestUtils.emailPatternPatternPatternMatches("ERROR: invalid regex)).isFalse(); }
@org.junit.Test public void testEmailInheritedNotListed() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTest.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.emailValidatorTest.emailValidatorTest.email, com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.emailValidatorTestUtils.emailPatternPatternPatternExists(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.emailValidatorTestUtils.emailPatternPatternPatternMatches(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.emailValidatorTest.emailPatternPatternMatches(pattern)).isFalse(); }
@org.junit.Test public void testEmailDoesNotListed() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTest.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.emailValidatorTest.emailValidatorTest.email(pattern)).isFalse(); }
@org.junit.Test public void testEmailDoesNotListed() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTest.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.emailValidatorTest.emailValidatorTest.email(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.emailValidatorTest.emailPatternMatches(pattern)).isFalse(); }
@org.junit.Test public void testEmailDoesNotListed() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTest.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.emailValidatorTest.emailValidatorTest.email(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.emailValidatorTest.emailPatternMatches(pattern)); }
@org.junit.Test public void testEmailDoesNotListed() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTest.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.emailValidatorTest.emailValidatorTest.email(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.emailValidatorTest.emailPatternMatches(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.emailValidatorTest.emailPatternMatchesAny(pattern)).isFalse(); }
@org.junit.Test public void testEmailDoesNotListed() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTest.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.emailValidatorTest.emailValidatorTest.email(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.emailValidatorTest.emailPatternMatches(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorTestUtils.emailValidatorTest.emailPatternPatternMatches(pattern)).isFalse(); }
@org.junit.Test public void testGetEmailWhitelist() throws java.lang.Exception { }
@org.junit.Test public void testGetEmailMatches() throws java.lang.Exception { }
@org.junit.Test public void testGetEmailWhitelist() throws java.lang.Exception { java.lang.String refs = getEmailWhitelist(); }
@org.junit.Test public void testGetEmailWhitelist() throws java.lang.Exception { java.lang.String name = getEmailWhitelist(); }
@org.junit.Test public void testGetEmailWhitelist() throws java.lang.Exception { java.lang.String name = getEmailWhitelist(); try { } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { } }
@com.google.common.annotations.VisibleForTesting private static java.util.List<java.lang.String> getEmailDomain(com.google.gerrit.server.config.PluginConfig cfg) { return java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorConfig.KEY_EMAILME_NAME_WORD_WHIMTERN)); }
@com.google.common.annotations.VisibleForTesting private static java.util.List<java.lang.String> getEmailDomain(com.google.gerrit.server.config.PluginConfig cfg) { return java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorConfig.KEY_EMAILME_NAME_WORD_WHIT_WHIT_WHIMTERN)); }
@com.google.common.annotations.VisibleForTesting private static java.util.List<java.lang.String> getEmailDomain(com.google.gerrit.server.config.PluginConfig cfg) { return java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorConfig.KEY_EMAILEE_WHIT_WHIMARY_WHIT_WHIMTERN)); }
@com.google.common.annotations.VisibleForTesting private static java.util.List<java.lang.String> getEmailDomain(com.google.gerrit.server.config.PluginConfig cfg) { return java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorConfig.KEY_EMAILEE_WHIT_WHIMARY_WHIT_WHIT_WHIMTERN)); }
@com.google.common.annotations.VisibleForTesting private static java.util.List<java.lang.String> getEmailDomain(com.google.gerrit.server.config.PluginConfig cfg) { return java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorConfig.KEY_EMAILME_NAME_WORD_WHIT_WHIT_WHIT_WHIMTERN)); }
static boolean isActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorValidator.KEY_EMAILME_EMAILING_WHIT_WHIT).length) > 0; }
static boolean isActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorValidator.KEY_EMAILME_EMAILING_WHIT.length()) > 0) { } }
static boolean isActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorValidator.KEY_EMAILME_EMAILING_WHIT_WHIT_WHIT).length) > 0; }
static boolean isActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorValidator.KEY_EMAILME_EMAILING_WHIT.length()) > 0) { }
static boolean isActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidatorValidator.KEY_EMAILME_EMAILING_WHIT_WHIT_WHIT_WHIT_WHIMTERN)) > 0; }
@com.google.common.annotations.VisibleForTesting static boolean performValidation(java.lang.String email, java.lang.String emailDomain) { java.net.URI uri = null; try { uri = new java.net.URI(email); } catch (java.net.URISyntaxException | java.lang.Exception e) { return false; } return emailDomain.contains(uri.getHost()); }
@com.google.common.annotations.VisibleForTesting static boolean performValidation(java.lang.String email, java.util.List<java.lang.String> emailDomain) { java.net.URI uri = null; try { uri = new java.net.URI(email); } catch (java.net.URISyntaxException | java.lang.Exception e) { return false; } return emailDomain.contains(uri.getHost()); }
@com.google.common.annotations.VisibleForTesting static boolean performValidation(java.lang.String email, java.util.List<java.lang.String> emailDomain) { java.net.URI uri = null; try { uri = new java.net.URI(email); } catch (java.net.MalformedURISyntaxException | java.lang.Exception e) { return false; } return emailDomain.contains(uri.getHost()); }
@com.google.common.annotations.VisibleForTesting static boolean performValidation(java.lang.String email, java.util.List<java.lang.String> emailDomain) { java.net.URI uri = null; try { uri = new java.net.URI(email); } catch (java.net.URISyntaxException | java.lang.IllegalAccessException e) { return false; } return emailDomain.contains(uri.getHost()); }
@com.google.common.annotations.VisibleForTesting static boolean performValidation(java.lang.String email, java.util.List<java.lang.String> emailDomain) { java.net.URI uri = null; try { uri = new java.net.URI(email); } catch (java.net.URISyntaxException | java.lang.Exception e) { return false; } return emailDomain.contains(uri.toString()); }
@java.lang.Override public void validatorInactiveWhenConfigEmpty() { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.EMPTY_PLUGIN_CONFIG)).isFalse(); }
@org.junit.Test public void validatorInactiveWhenConfigEmpty() { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.EMPTY_PLUGIN_CONFIG)).isFalse(); }
@java.lang.Override public void validatorsInactiveWhenConfigEmpty() { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.EMPTY_PLUGIN_CONFIG)).isFalse(); }
@org.junit.Test public void validatorInactiveWhenConfigEmpty() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.EMPTY_PLUGIN_CONFIG)).isFalse(); }
@org.junit.Test public void validatorsInactiveWhenConfigEmpty() { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.EMPTY_PLUGIN_CONFIG)).isFalse(); }
@com.google.inject.Provides @com.google.inject.Singleton @com.google.gerrit.server.index.IndexExecutor(BATCH) com.google.common.util.concurrent.ListeningExecutorService getBatchIndexExecutor(@com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config, com.google.gerrit.server.git.WorkQueue workQueue) { if ((batchExecutor)!= null) { return batchExecutor; } int batchThreads = this.threads; if (batchThreads <= 0) { batchThreads = config.getInt("index", null, "batchThreads", 0); if (batchThreads <= 0) { batchThreads = java.lang.Runtime.getRuntime().availableProcessors(); } return com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(batchThreads, "Index-Batch")); }
@com.google.inject.Provides @com.google.inject.Singleton @com.google.gerrit.server.index.IndexExecutor(BATCH) com.google.common.util.concurrent.ListeningExecutorService getBatchIndexExecutor(@com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config, com.google.gerrit.server.git.WorkQueue workQueue) { if ((batchExecutor)!= null) { return batchExecutor; } int batchThreads = this.threads; if (batchThreads <= 0) { batchThreads = config.getInt("index", null, "batchThreads", 0); if (batchThreads <= 0) { batchThreads = java.lang.Runtime.getRuntime().availableProcessors(); } return com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(batchThreads, "Index")); }
@com.google.inject.Provides @com.google.inject.Singleton @com.google.gerrit.server.index.IndexExecutor(BATCH) com.google.common.util.concurrent.ListeningExecutorService getBatchIndexExecutor(@com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config, com.google.gerrit.server.git.WorkQueue workQueue) { if ((batchExecutor)!= null) { return batchExecutor; } int batchThreads = this.threads; if (batchThreads <= 0) { batchThreads = config.getInt("index", null, "batchThreads", 0); if (batchThreads <= 0) { batchThreads = java.lang.Runtime.getRuntime().availableProcessors(); } return com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(batchQueue(batchThreads, "Index")); }
@com.google.inject.Provides @com.google.inject.Singleton @com.google.gerrit.server.index.IndexExecutor(BATCH) com.google.common.util.concurrent.ListeningExecutorService getBatchIndexExecutor(@com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config, com.google.gerrit.server.git.WorkQueue workQueue) { if ((batchExecutor)!= null) { return batchExecutor; } int batchThreads = this.threads; if (batchThreads <= 0) { batchThreads = config.getInt("index", null, "batchThreads", 0); if (batchThreads <= 0) { batchThreads = java.lang.Runtime.getRuntime().availableProcessors(); } return com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(batchQueue(batchThreads, "Index-Batch")); }
@com.google.inject.Provides @com.google.inject.Singleton @com.google.gerrit.server.index.IndexExecutor(BATCH) com.google.common.util.concurrent.ListeningExecutorService getBatchIndexExecutor(@com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config, com.google.gerrit.server.git.WorkQueue workQueue) { if ((batchExecutor)!= null) { return batchExecutor; } return batchExecutor; }
@org.junit.Test public void indexStalenessIsNotFound() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID = createGroup("Verifications"); groupIndexer.index(groupUUID, com.google.gerrit.acceptance.api.group.GroupIndexUpdateIT.newGroupIndex().setDescription("Modified").build()); updateGroupToCache(groupUUID, com.google.gerrit.acceptance.api.group.GroupIndexUpdateIT.newGroupIndex().setDescription("Modified").build()); reloadGroupToCache(groupUUID); assertThat(reindexed).isTrue(); }
@org.junit.Test public void indexStalenessIsNotFound() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID = createGroup("Verifications"); groupIndexer.index(groupUUID, com.google.gerrit.acceptance.api.group.GroupIndexUpdateIT.newGroupIndex().setDescription("Modified").build()); reloadGroupToCache(groupUUID, com.google.gerrit.acceptance.api.group.GroupIndexUpdateIT.newGroupIndex().setDescription("Modified").build()); reloadGroupToCache(groupUUID); assertThat(reindexed).isTrue(); }
@org.junit.Test public void indexStalenessIsNotFound() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID = createGroup("Verifications"); groupIndexer.index(groupUUID, com.google.gerrit.acceptance.api.group.GroupIndexUpdateIT.newGroupIndex().setDescription("Modified").build()); updateGroupToCache(groupUUID, com.google.gerrit.acceptance.api.group.GroupIndexUpdateIT.newGroupIndex().setDescription("Modified").build()); boolean reindexed = groupIndexer.reindexIfFalse(); assertThat(reindex).isTrue(); }
@org.junit.Test public void indexStalenessIsNotFound() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID = createGroup("Verifications"); groupIndexer.index(groupUUID, com.google.gerrit.acceptance.api.group.GroupIndexUpdateIT.newGroupIndex().setDescription("Modified").build()); updateGroupToCache(groupUUID, com.google.gerrit.acceptance.api.group.GroupIndexUpdateIT.newGroupIndex().setDescription("Modified").build()); reloadGroupToCache(groupUUID); assertThat(reindexedIndexed).isTrue(); }
@org.junit.Test public void indexStalenessIsNotFound() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID = createGroup("Verifications"); groupIndexer.index(groupUUID, com.google.gerrit.acceptance.api.group.GroupIndexUpdateIT.newGroupIndex().setDescription("Modified").build()); reloadGroupToCache(groupUUID, com.google.gerrit.acceptance.api.group.GroupIndexUpdateIT.newGroupIndex().setDescription("Modified").build()); reloadGroupToCache(groupUUID); assertThat(reindexedIndexed).isTrue(); }
@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = cfg.getScheduleConfig(); java.util.concurrent.Future<com.google.gerrit.server.config.ScheduleConfig> scheduleConfig = scheduleConfig.schedule(); if (schedule.isPresent()) { @java.lang.SuppressWarnings("unused") java.util.concurrent.TimeUnit.MILLISECONDS = queue.getDefaultQueue().scheduleAtFixedRate(runner, schedule.get().interval(), java.util.concurrent.TimeUnit.MILLISECONDS); } }
@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = cfg.getScheduleConfig(); java.util.concurrent.Future<com.google.gerrit.server.config.ScheduleConfig> scheduleConfig = scheduleConfig.schedule(); if (schedule.isPresent()) { @java.lang.SuppressWarnings("unchecked") java.util.concurrent.TimeUnit.MILLISECONDS = queue.getDefaultQueue().scheduleAtFixedRate(runner, schedule.get().interval(), java.util.concurrent.TimeUnit.MILLISECONDS); } }
@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = cfg.getScheduleConfig(); java.util.concurrent.Future<com.google.gerrit.server.config.ScheduleConfig> scheduleConfig = scheduleConfig.schedule(); if (schedule.isPresent()) { @java.lang.SuppressWarnings("unused") java.util.concurrent.TimeUnit.MILLISECONDS); java.util.concurrent.Future<?> possiblyIgnoringError = queue.getDefaultQueue().scheduleAtFixedRate(runner, schedule.get().interval(), java.util.concurrent.TimeUnit.MILLISECONDS); } }
@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = cfg.getScheduleConfig(); java.util.concurrent.Future<com.google.gerrit.server.config.ScheduleConfig> scheduleConfig = scheduleConfig.schedule(); if (schedule.isPresent()) { @java.lang.SuppressWarnings("unchecked") java.util.concurrent.TimeUnit.MILLISECONDS); java.util.concurrent.Future<?> possiblyIgnoringError = queue.getDefaultQueue().scheduleAtFixedRate(runner, schedule.get().interval(), java.util.concurrent.TimeUnit.MILLISECONDS); } }
@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = cfg.getScheduleConfig(); java.util.concurrent.Future<com.google.gerrit.server.config.ScheduleConfig> scheduleConfig = scheduleConfig.schedule(); if (schedule.isPresent()) { @java.lang.SuppressWarnings("unused") java.util.concurrent.TimeUnit.MILLISECONDS = queue.getDefaultQueue().scheduleAtFixedRate(runner, schedule.get().interval(), java.util.concurrent.TimeUnit.MILLISECONDS); } else { java.util.concurrent.Future<?> future = queue.getDefaultQueue().scheduleAtFixedRate(runner, java.util.concurrent.TimeUnit.MILLISECONDS); } }
@java.lang.Override public void start() { if (!(supportAutomaticAccount)) { return; } java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.scheduleConfig> scheduleConfig = scheduleConfig.schedule(); if (schedule.isPresent()) { queue.getDefaultQueue().scheduleAtFixedRate(DEFAULT, schedule.get().interval(), java.util.concurrent.TimeUnit.MILLISECONDS); } }
@java.lang.Override public void start() { if (!(supportAutomaticAccount)) { return; } java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.scheduleConfig> scheduleConfig = scheduleConfig.schedule(); if (schedule.isPresent()) { queue.getDefaultQueue().scheduleAtFixedRate(DEFAULT, schedule.get().initialDelay(), java.util.concurrent.TimeUnit.MILLISECONDS); } }
@java.lang.Override public void start() { if (!(supportAutomaticAccount)) { return; } java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.scheduleConfig> scheduleConfig = scheduleConfig.schedule(); if (schedule.isPresent()) { queue.getDefaultQueue().scheduleAtFixedRate(DEFAULT, schedule.get().interval(), java.util.concurrent.TimeUnit.MILLISECONDS); } else { queue.getDefaultQueue().scheduleAtFixedRate(delet, java.util.concurrent.TimeUnit.MILLISECONDS); } }
@java.lang.Override public void start() { if (!(supportAutomaticAccount)) { return; } java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.scheduleConfig> scheduleConfig = scheduleConfig.schedule(); if (schedule.isPresent()) { queue.getDefaultQueue().scheduleAtFixedRate(DEFAULT, schedule.get().interval(), java.util.concurrent.TimeUnit.MILLISECONDS); } else { queue.getDefaultQueue().scheduleAtFixedRate(scheduleAtMs, java.util.concurrent.TimeUnit.MILLISECONDS); } }
@java.lang.Override public void start() { if (!(supportAutomaticAccount)) { return; } java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.scheduleConfig> scheduleConfig = scheduleConfig.schedule(); if (schedule.isPresent()) { queue.getDefaultQueue().scheduleAtFixedRate(DEFAULT, schedule.get().interval(), java.util.concurrent.TimeUnit.MILLISECONDS); } else { queue.getDefaultQueue().scheduleAtFixedRate(scheduleAtFixedRate, java.util.concurrent.TimeUnit.MILLISECONDS); } }
public static com.google.gerrit.server.config.Config create(org.eclipse.jgit.lib.Config config, java.lang.String section, java.lang.String subsection) { return com.google.gerrit.server.config.SchemaConfig.builder(config, project, subsection).build(); }
public static com.google.gerrit.server.config.Config create(org.eclipse.jgit.lib.Config config, java.lang.String section, java.lang.String subsection) { return com.google.gerrit.server.config.SchemaConfig.builder(config, project, section).build(); }
public static com.google.gerrit.server.config.SchemaConfig create(org.eclipse.jgit.lib.Config config, java.lang.String section, java.lang.String subsection) { return com.google.gerrit.server.config.SchemaConfig.builder(config, project, subsection, subsection).build(); }
public static com.google.gerrit.server.config.SchemaConfig create(org.eclipse.jgit.lib.Config config, java.lang.String section, java.lang.String subsection) { return com.google.gerrit.server.config.SchemaConfig.builder(config, project, section).build(); }
public static com.google.gerrit.server.config.SchemaConfig create(org.eclipse.jgit.lib.Config config, java.lang.String subsection, java.lang.String subsection) { return com.google.gerrit.server.config.SchemaConfig.builder(config, project, section).build(); }
public static com.google.gerrit.server.config.SchemaConfig.Builder builder(org.eclipse.jgit.lib.Config config, java.lang.String section) { return com.google.gerrit.server.config.SchemaConfig.builder(config, section, null); }
public static com.google.gerrit.server.config.SchemaConfig.Builder builder(org.eclipse.jgit.lib.Config config, java.lang.String section) { return com.google.gerrit.server.config.SchemaConfig.builder(config, section, section, null); }
public static com.google.gerrit.server.config.SchemaConfig.Builder builder(org.eclipse.jgit.lib.Config config, java.lang.String section) { return com.google.gerrit.server.config.SchemaConfig.builder(config, section, null, null); }
public static com.google.gerrit.server.config.SchemaConfig.Builder builder(org.eclipse.jgit.lib.Config config, java.lang.String section) { return com.google.gerrit.server.config.SchemaConfig.builder(config, section, com.google.gerrit.server.config.SiteConfig.class).toInstance(section, subsection, null); }
public static com.google.gerrit.server.config.SchemaConfig.Builder builder(org.eclipse.jgit.lib.Config config, java.lang.String section) { return com.google.gerrit.server.config.SchemaConfig.builder(config, section, com.google.gerrit.server.config.SiteConfig.class).toInstance(section, section, null); }
@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = gcfgConfig.getScheduleConfig(); java.util.concurrent.Callable<com.google.gerrit.server.config.ScheduleConfig> scheduleConfig = scheduleConfig.schedule(); if (schedule.isPresent()) { @java.lang.SuppressWarnings("unused") java.util.concurrent.TimeUnit.MILLISECONDS = queue.getDefaultQueue().scheduleAtFixedRate(gc, java.util.concurrent.TimeUnit.MILLISECONDS); } }
@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = gcfgConfig.getScheduleConfig(); java.util.concurrent.Callable<com.google.gerrit.server.config.ScheduleConfig> scheduleConfig = scheduleConfig.schedule(); if (schedule.isPresent()) { @java.lang.SuppressWarnings("unused") java.util.concurrent.TimeUnit.MILLISECONDS = queue.getDefaultQueue().scheduleAtFixedRate(gc, schedule.get().interval(), java.util.concurrent.TimeUnit.MILLISECONDS); } }
@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = gcfgConfig.getScheduleConfig(); java.util.concurrent.Callable<com.google.gerrit.server.config.ScheduleConfig> scheduleConfig = scheduleConfig.schedule(); if (schedule.isPresent()) { @java.lang.SuppressWarnings("unused") java.util.concurrent.TimeUnit.MILLISECONDS = queue.getDefaultQueue().scheduleAtFixedRate(gc.get().initialDelay(), java.util.concurrent.TimeUnit.MILLISECONDS); } }
@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = gcfgConfig.getScheduleConfig(); java.util.concurrent.Future<com.google.gerrit.server.config.ScheduleConfig> scheduleConfig = scheduleConfig.schedule(); if (schedule.isPresent()) { @java.lang.SuppressWarnings("unused") java.util.concurrent.TimeUnit.MILLISECONDS = queue.getDefaultQueue().scheduleAtFixedRate(gc.get().initialDelay(), java.util.concurrent.TimeUnit.MILLISECONDS); } }
@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = gcfgConfig.getScheduleConfig(); java.util.concurrent.Callable<com.google.gerrit.server.config.ScheduleConfig> scheduleConfig = scheduleConfig.schedule(); if (schedule.isPresent()) { @java.lang.SuppressWarnings("unused") java.util.concurrent.TimeUnit.MILLISECONDS = queue.getDefaultQueue().scheduleAtFixedRate(gc.get().initialize(), java.util.concurrent.TimeUnit.MILLISECONDS); } }
public com.google.gerrit.server.config.ScheduleConfig.schedule() { if ((schedule) == null) {schedule = loadSchedule(); } returnschedule; }
public com.google.gerrit.server.config.ScheduleConfig.schedule() { if ((schedule) == null) { scheduleSchedule(); } returnschedule; }
public com.google.gerrit.server.config.ScheduleConfig.schedule() { if ((schedule) == null) { scheduleSchedule = loadSchedule(); } returnschedule; }
public com.google.gerrit.server.config.ScheduleConfig.schedule() { if ((schedule) == null) {schedule = loadSchema(); } returnschedule; }
public com.google.gerrit.server.config.ScheduleConfig.schedule() { if ((schedule) == null) {schedule = loadSchedule(); } return scheduleSchema; }
private static long compute(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String key) { try { return com.google.gerrit.server.config.ConfigUtil.getTimeUnit(rc, section, subsection, key); } catch (java.lang.IllegalArgumentException e) { return com.google.gerrit.server.config.SchemaConfig.INVALID_CONFIG; } }
private static long delay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String key) { try { return com.google.gerrit.server.config.ConfigUtil.getTimeUnit(rc, section, subsection, key); } catch (java.lang.IllegalArgumentException e) { return com.google.gerrit.server.config.SchemaConfig.INVALID_CONFIG; } }
private static long milli(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String key) { try { return com.google.gerrit.server.config.ConfigUtil.getTimeUnit(rc, section, subsection, key); } catch (java.lang.IllegalArgumentException e) { return com.google.gerrit.server.config.SchemaConfig.INVALID_CONFIG; } }
private static long delay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String key) { try { return com.google.gerrit.server.config.ConfigUtil.getTimeUnit(rc, section, subsection, key); } catch (java.lang.IllegalArgumentException e) { return com.google.gerrit.server.config.SchemaConfig.INVALID_CONFIG; } catch (java.lang.IllegalArgumentException e) { return com.google.gerrit.server.config.SchemaConfig.INVALID; } }
private static long compute(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String key) { try { return com.google.gerrit.server.config.ConfigUtil.getTimeUnit(rc, section, subsection, key); } catch (java.lang.IllegalArgumentException e) { return com.google.gerrit.server.config.SchemaConfig.INVALID_CONFIG; } catch (java.lang.IllegalArgumentException e) { return com.google.gerrit.server.config.SchemaConfig.INVALID; } }
public java.util.Optional<com.google.gerrit.server.config.ScheduleConfig> schedule() { if ((schedule) == null) { schedule = loadSchedule(); } return schedule; }
public java.util.Optional<com.google.gerrit.server.config.SchemaConfig> schedule() { if ((schedule) == null) { schedule = loadSchedule(); } return schedule; }
public java.util.Set<com.google.gerrit.server.config.ScheduleConfig> schedule() { if ((schedule) == null) { schedule = loadSchedule(); } return schedule; }
public java.util.Optional<com.google.gerrit.server.config.ScheduleConfig> schedule() { if ((schedule) == null) { schedule = loadSchema(); } return schedule; }
public java.util.Optional<com.google.gerrit.server.config.scheduleConfig.Schedule> schedule() { if ((schedule) == null) { schedule = loadSchedule(); } return schedule; }
private boolean isInvalidOrMissing(long interval, long interval) { java.lang.String key = (subsection())!= null? "." + (subsection()) : "." + (subsection)); if ((interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) && (initialDelay == (com.google.gerrit.server.config.SchemesConfig.MISSING_CONFIG))) { com.google.gerrit.server.config.Config.scheduleConfig.log.error("No schedule configuration for \"{}", key); return true; } if (interval == null) { com.google.gerrit.server.config.SchemeConfig.log.error("Invalid schedule configuration for \"{}\"}", key, ".") return true; } if (interval == null) { com.google.gerrit.server.config.SchemeConfig.log.error("In missing schedule configuration for \"{}\"}", key, ".") + (key.get()))); return true; } if ((interval <= 0) && (key.equalsIgnoreCase())) { com.google.gerrit.server.config.ScheduleConfig.log.error("Invalid schedule configuration for \"{}", key, ".") + (keySet.get()))); return true; } return false; }
private boolean isInvalidOrMissing(long interval, long interval) { java.lang.String key = (subsection())!= null? "." + (subsection()) : "." + (subsection)); if ((interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) && (initialDelay == (com.google.gerrit.server.config.SchemesConfig.MISSING_CONFIG))) { com.google.gerrit.server.config.Config.scheduleConfig.log.error("No schedule configuration for \"{}", key); return true; } if (interval == null) { com.google.gerrit.server.config.SchemeConfig.log.error("Invalid schedule configuration for \"{}\"}", key, ".") return true; } if (initialDelay == null) { com.google.gerrit.server.config.ScheduleConfig.log.error("In missing schedule configuration for \"{\"}", key, ".") + (key.get()))); return true; } if ((interval <= 0) && (key.equalsIgnoreCase())) { com.google.gerrit.server.config.ScheduleConfig.log.error("Invalid schedule configuration for \"{}", key, ".") + (keySet.get()))); return true; } return false; }
private boolean isInvalidOrMissing(long interval, long interval) { java.lang.String key = (subsection())!= null? "." + (subsection()) : "." + (subsection)); if ((interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) && (initialDelay == (com.google.gerrit.server.config.SchemesConfig.MISSING_CONFIG))) { com.google.gerrit.server.config.Config.scheduleConfig.log.error("No schedule configuration for \"{}", key); return true; } if (interval == null) { com.google.gerrit.server.config.SchemeConfig.log.error("Invalid schedule configuration for \"{}\"}", key, ".") return true; } if (interval == null) { com.google.gerrit.server.config.SchemeConfig.log.error("In missing schedule configuration for \"{}\"}", key, ".") + (key.get()))); return true; } if ((interval <= 0) && (key.equalsIgnoreCase())) { com.google.gerrit.server.config.Config.Config.log.error("Invalid schedule configuration for \"{}", key, ".") + (keySet.get()))); return true; } return false; }
private boolean isInvalidOrMissing(long interval, long interval) { java.lang.String key = (subsection())!= null? "." + (subsection()) : "." + (subsection)); if ((interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) && (initialDelay == (com.google.gerrit.server.config.SchemesConfig.MISSING_CONFIG))) { com.google.gerrit.server.config.Config.scheduleConfig.log.error("No schedule configuration for \"{}", key); return true; } if (interval == null) { com.google.gerrit.server.config.SchemeConfig.log.error("Invalid schedule configuration for \"{}\"}", key, ".") return true; } if (initialDelay == null) { com.google.gerrit.server.config.ScheduleConfig.log.error("In missing schedule configuration for \"{}\"}", key, ".") + (key.get()))); return true; } if ((interval <= 0) && (initialDelay.isEmpty())) { com.google.gerrit.server.config.ScheduleConfig.log.error("Invalid schedule configuration for \"{}", key, ".") + (keySet.get()))); return true; } return false; }
private boolean isInvalidOrMissing(long interval, long interval) { java.lang.String key = (subsection())!= null? "." + (subsection()) : "." + (subsection)); if ((interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) && (initialDelay == (com.google.gerrit.server.config.SchemesConfig.MISSING_CONFIG))) { com.google.gerrit.server.config.Config.scheduleConfig.log.error("No schedule configuration for \"{}", key); return true; } if (interval == null) { com.google.gerrit.server.config.SchemeConfig.log.error("Invalid schedule configuration for \"{}\"}", key, ".") return true; } if (initialDelay == null) { com.google.gerrit.server.config.ScheduleConfig.log.error("In missing schedule configuration for \"{\"}", key, ".") + (key.get()))); return true; } if ((interval <= 0) && (key.equalsIgnoreCase())) { com.google.gerrit.server.config.Config.Config.log.error("Invalid schedule configuration for \"{}", key, ".") + (keySet.get()))); return true; } return false; }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "1"); rc.setString("b", "b", "first:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b", "b").setKey("s").setNow(); assertThat(s.schedule()).isPresent(); assertThat(s.schedule()).isPresent(); assertThat(s.schedule()).isEqualTo(com.google.gerrit.server.config.ScheduleConfig.nowMs(1, java.util.concurrent.TimeUnit.SECONDS), com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "b", "b").setKey("myStart").setKey("myStart").setKey("myStart").setNow(); assertThat(s.schedule()).isEmpty(); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "1"); rc.setString("b", "b", "first:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b", "b").setKey("s").setNow(); assertThat(s.schedule()).isPresent(); assertThat(s.schedule()).isPresent(); assertThat(s.schedule()).isEqualTo(com.google.gerrit.server.config.ScheduleConfig.nowMs(1, java.util.concurrent.TimeUnit.SECONDS), com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), com.google.gerrit.server.config.SchemaConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "b", "b").setKey("myStart").setKey("myStart").setKey("myStart").setNow(); assertThat(s.schedule()).isEmpty(); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "1"); rc.setString("b", "b", "first:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b", "b").setKey("s").setNow(); assertThat(s.schedule()).isPresent(); assertThat(s.schedule()).isPresent(); assertThat(s.schedule()).isEqualTo(com.google.gerrit.server.config.ScheduleConfig.nowMs(1, java.util.concurrent.TimeUnit.SECONDS), com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "b", "b").setKey("myStart").setKey("myStart").setKey("myStart").setValue("myStart").setNow(); assertThat(s.schedule()).isEmpty(); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "1"); rc.setString("b", "b", "first:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b", "b").setKey("s").setNow(); assertThat(s.schedule()).isPresent(); assertThat(s.schedule()).isPresent(); assertThat(s.schedule()).isEqualTo(com.google.gerrit.server.config.ScheduleConfig.nowMs(1, java.util.concurrent.TimeUnit.SECONDS), com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), com.google.gerrit.server.config.SchemaConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "b", "b").setKey("myStart").setKey("myStart").setKey("myStart").setValue("myStart").setNow(); assertThat(s.schedule()).isEmpty(); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "1"); rc.setString("b", "b", "first:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b", "b").setKey("s").setNow(); assertThat(s.schedule()).isPresent(); assertThat(s.schedule()).isPresent(); assertThat(s.schedule()).isEqualTo(com.google.gerrit.server.config.ScheduleConfig.nowMs(1, java.util.concurrent.TimeUnit.SECONDS), com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "b", "b").setKey("myStart").setKey("myStart").setKey("myStart").setNowStartTime("my").setNow()); assertThat(s.schedule()).isEmpty(); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "1"); rc.setString("b", "b", "first:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b", "b").setKeyStartTimeZone("s").setNow(); assertThat(s.getInitialDelay()).isEqualTo(com.google.gerrit.server.config.SchemaConfigTest.now()).build(); assertThat(s.getInitialDelay()).isEqualTo(com.google.gerrit.server.config.SchemaConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS); assertThat(s.getInitialDelay()).isEqualTo(com.google.gerrit.server.config.SchemaConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS)); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKey("myStart").setNow()); s = com.google.gerrit.server.config.SchemaConfig.builder(rc, "b", "b").build(); assertThat(s.getInitialDelay()).isEqualTo(SchemaConfig.MISSING_CONFIG); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "1"); rc.setString("b", "b", "first:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b", "b").setKeyStartTimeZone("s").setNow(); assertThat(s.getInitialDelay()).isEqualTo(com.google.gerrit.server.config.SchemaConfigTest.now()).build(); assertThat(s.getInitialDelay()).isEqualTo(com.google.gerrit.server.config.SchemaConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS); assertThat(s.getInitialDelay()).isEqualTo(com.google.gerrit.server.config.SchemaConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS)); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKey("myStart").setNow()); s = com.google.gerrit.server.config.SchemaConfig.builder(rc, "b", "b").build(); assertThat(s.getInitialDelay()).isEqualTo(ScheduleIn(SchemaConfig.MISSING_CONFIG); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "1"); rc.setString("b", "b", "first:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b", "b").setKeyStartTimeZone("s").setNow(); assertThat(s.getInitialDelay()).isEqualTo(com.google.gerrit.server.config.SchemaConfigTest.now()).build(); assertThat(s.getInitialDelay()).isEqualTo(com.google.gerrit.server.config.SchemaConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS); assertThat(s.getInitialDelay()).isEqualTo(com.google.gerrit.server.config.SchemaConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS)); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKey("myStart").setNow()); s = com.google.gerrit.server.config.SchemaConfig.builder(rc, "b", "b").build(); assertThat(s.getInitialDelay()).isEqualTo(ScheduleDef()); assertThat(s.getInitialDelay()).isEqualTo(SchemaConfig.MISSING_CONFIG); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "1"); rc.setString("b", "b", "first:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b", "b").setKeyStartTimeZone("s").setNow(); assertThat(s.getInitialDelay()).isEqualTo(com.google.gerrit.server.config.ScheduleConfigTest.now()).build(); assertThat(s.getInitialDelay()).isEqualTo(com.google.gerrit.server.config.SchemaConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS); assertThat(s.getInitialDelay()).isEqualTo(com.google.gerrit.server.config.SchemaConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS)); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKey("myStart").setNow()); s = com.google.gerrit.server.config.SchemaConfig.builder(rc, "b", "b").build(); assertThat(s.getInitialDelay()).isEqualTo(ScheduleDef()); assertThat(s.getInitialDelay()).isEqualTo(SchemaConfig.MISSING_CONFIG); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "1"); rc.setString("b", "b", "first:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b", "b").setKeyStartTimeZone("s").setNow(); assertThat(s.getInitialDelay()).isEqualTo(com.google.gerrit.server.config.SchemaConfigTest.now()).build(); assertThat(s.getInitialDelay()).isEqualTo(com.google.gerrit.server.config.SchemaConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS); assertThat(s.getInitialDelay()).isEqualTo(com.google.gerrit.server.config.SchemaConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS)); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKey("myStart").setNow()); s = com.google.gerrit.server.config.SchemaConfig.builder(rc, "b", "b").build(); assertThat(s.getInitialDelay()).isEqualTo(ScheduleDef()); assertThat(s.getInitialDelay()).isEqualTo(ScheduleConfig.MISSING_CONFIG); }
private static long initialDelay(java.lang.String startTime, java.lang.String interval) { return com.google.gerrit.server.config.ConfigConfig.builder(scheduleConfig.config(schedule(startTime, interval), "section", "subsection").setNow().schedule(scheduleConfig.now()); }
private static long initialDelay(java.lang.String startTime, java.lang.String interval) { return com.google.gerrit.server.config.ConfigConfig.builder(scheduleConfig.config(schedule(startTime, interval), "subsection", "subsection").setNow().schedule(scheduleConfig.now()); }
private static long initialDelay(java.lang.String startTime, java.lang.String interval) { return com.google.gerrit.server.config.ConfigConfig.builder(scheduleConfig.config(schedule(startTime, interval), "section", "subsection").setNow().schedule(scheduleConfigTest.NOW); }
private static long initialDelay(java.lang.String startTime, java.lang.String interval) { return com.google.gerrit.server.config.ConfigConfig.builder(scheduleConfig.config(scheduleConfig, interval), "section", "subsection", "subsection").setNow().schedule(scheduleConfig.NOW); }
private static long initialDelay(java.lang.String startTime, java.lang.String interval) { return com.google.gerrit.server.config.ConfigConfig.builder(scheduleConfig.config(scheduleConfig, interval), "section", "subsection", "subsection").setNow().schedule(scheduleConfig.now()); }
private static long initialDelay(java.lang.String startTime, java.lang.String range) { return com.google.gerrit.server.config.ConfigConfig.builder(com.google.gerrit.server.config.ConfigTest.config(startTime, interval), "subsection", "subsection", "subsection", "subsection")); }
private static long initialDelay(java.lang.String startTime, java.lang.String interval) { return com.google.gerrit.server.config.ConfigConfig.builder(com.google.gerrit.server.config.ConfigTest.config(startTime, interval), "subsection", "subsection", "subsection", "subsection")); }
private static long initialDelay(java.lang.String startTime, java.lang.String range) { return com.google.gerrit.server.config.ConfigConfig.builder(com.google.gerrit.server.config.ConfigTest.config(startTime, range), "subsection", "subsection", "subsection", "subsection")); }
private static long initialDelay(java.lang.String startTime, java.lang.String range) { return com.google.gerrit.server.config.ConfigConfig.builder(config, com.google.gerrit.server.config.ConfigTest.config(startTime, interval), "section", "subsection", "subsection", "subsection")); }
private static long initialDelay(java.lang.String startTime, java.lang.String range) { return com.google.gerrit.server.config.ConfigConfig.builder(com.google.gerrit.server.config.ConfigTest.config(startTime, interval), "subsection", "subsection", "subsection", "subsection")).setNow().build()); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "1"); rc.setString("b", "b", "first:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b", "b").setKey("s").setNow(); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.now(1, java.util.concurrent.TimeUnit.HOURS), s.scheduleAt(1, java.util.concurrent.TimeUnit.HOURS).build()); assertEquals(com.google.gerrit.server.config.SchemaConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.scheduleDelay(1, java.util.concurrent.TimeUnit.HOURS), s.scheduleDelay()); s = com.google.gerrit.server.config.SchemaConfigTest.ms(1, "b", "b").setKey("myStart").setNow()); s = com.google.gerrit.server.config.SchemaConfigTest.builder(rc, "b").setKey("myStart").setNow()); assertEquals(s.MISSING_CONFIG); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "1"); rc.setString("b", "b", "first:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b", "b").setKey("s").setNow(); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.now(1, java.util.concurrent.TimeUnit.HOURS), s.scheduleAt(1, java.util.concurrent.TimeUnit.HOURS).build()); assertEquals(com.google.gerrit.server.config.SchemaConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.scheduleDelay(1, java.util.concurrent.TimeUnit.HOURS), s.scheduleDelay()); s = com.google.gerrit.server.config.SchemaConfigTest.ms(1, "b", "b").setKey("myStart").setNow()); s = com.google.gerrit.server.config.SchemaConfigTest.builder(rc, "b").setKey("myStart").setNow()); assertEquals(s.MISSING_CONFIG); assertEquals(s.scheduleDeferred(s.MISSING, ConfigConfig.MISSING_CONFIG); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "1"); rc.setString("b", "b", "first:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b", "b").setKey("s").setNow(); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.now(1, java.util.concurrent.TimeUnit.HOURS), s.scheduleAt(1, java.util.concurrent.TimeUnit.HOURS).build()); assertEquals(com.google.gerrit.server.config.SchemaConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.scheduleDelay(1, java.util.concurrent.TimeUnit.HOURS), s.scheduleDelay()); s = com.google.gerrit.server.config.SchemaConfigTest.ms(1, "b", "b").setKey("myStart").setNow()); s = com.google.gerrit.server.config.SchemaConfigTest.builder(rc, "b").setKey("myStart").setNow()); assertEquals(s.MISSING_CONFIG); assertEquals(s.scheduleDeferred(s.MISSING_CONFIG, ConfigConfig.MISSING_CONFIG); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "1"); rc.setString("b", "b", "first:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b", "b").setKey("s").setNow(); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.now(1, java.util.concurrent.TimeUnit.HOURS), s.scheduleAt(1, java.util.concurrent.TimeUnit.HOURS).build()); assertEquals(com.google.gerrit.server.config.SchemaConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.scheduleDelay(1, java.util.concurrent.TimeUnit.HOURS), s.scheduleDelay()); s = com.google.gerrit.server.config.SchemaConfigTest.ms(1, "b", "b").setKey("myStart").setNow()); s = com.google.gerrit.server.config.SchemaConfigTest.builder(rc, "b", "b").build()); assertEquals(s.scheduleDeferred(s.MISSING_CONFIG); assertEquals(s.scheduleDeferred(s.MISSING_CONFIG); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "1"); rc.setString("b", "b", "first:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b", "b").setKey("s").setNow(); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.now(1, java.util.concurrent.TimeUnit.HOURS), s.scheduleAt(1, java.util.concurrent.TimeUnit.HOURS).build()); assertEquals(com.google.gerrit.server.config.SchemaConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.scheduleDelay(1, java.util.concurrent.TimeUnit.HOURS), s.scheduleDelay()); s = com.google.gerrit.server.config.SchemaConfigTest.ms(1, "b", "b").setKey("myStart").setNow()); s = com.google.gerrit.server.config.SchemaConfigTest.builder(rc, "b").setKey("myStart").setNow()); assertEquals(s.MISSING_CONFIG); assertEquals(s.scheduleDeferred(s.MISSING_CONFIG, ConfigConfig.MISSING_CONFIG, MissingConfig); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "1"); rc.setString("b", "b", "first:00"); com.google.gerrit.server.config.SchemaConfig s = com.google.gerrit.server.config.SchemaConfig.builder(); com.google.gerrit.server.config.SchemaConfig s = com.google.gerrit.server.config.SchemaFactory.create(rc, "a", "b", "b", "b", "s"))) { com.google.gerrit.server.config.SchemaConfig s = com.google.gerrit.server.config.SchemaConfigTest.nowMs(1, java.util.concurrent.TimeUnit.HOURS); assertEquals(com.google.gerrit.server.config.Schema.MSG(1, java.util.concurrent.TimeUnit.HOURS), s.getInitialDelay()); assertEquals(com.google.gerrit.server.config.Schema.ms(1, java.util.concurrent.TimeUnit.HOURS), s.getInitialDelay()); s = com.google.gerrit.server.config.SchemaConfigTest.nowMs(1, "myStart "my"); s = com.google.gerrit.server.config.SchemaConfigTest.nowMs(rc, "a", "myStartTimeZone"); s = com.google.gerrit.server.config.SchemaConfigTest.nowMs(rc, "myStart"); assertEquals(s.getInitialDelay(), ConfigConfig.MISSING_CONFIG); assertEquals(s.getInitialDelay(), ConfigConfig.MISSING_CONFIG); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "1"); rc.setString("b", "b", "first:00"); com.google.gerrit.server.config.SchemaConfig s = com.google.gerrit.server.config.SchemaConfig.builder(); com.google.gerrit.server.config.SchemaConfig s = com.google.gerrit.server.config.SchemaFactory.create(rc, "a", "b", "b", "b", "s"))) { com.google.gerrit.server.config.SchemaConfig s = com.google.gerrit.server.config.SchemaConfigTest.nowMs(1, java.util.concurrent.TimeUnit.HOURS); assertEquals(com.google.gerrit.server.config.Schema.MSG(1, java.util.concurrent.TimeUnit.HOURS), s.getInitialDelay()); assertEquals(com.google.gerrit.server.config.Schema.ms(1, java.util.concurrent.TimeUnit.HOURS), s.getInitialDelay()); s = com.google.gerrit.server.config.SchemaConfigTest.nowMs(1, "myStart "my"); s = com.google.gerrit.server.config.SchemaConfigTest.nowMs(rc, "a", "myStartTimeZone"); s = com.google.gerrit.server.config.SchemaConfigTest.nowMs(rc, "myStart" + "myStart"))).build(); assertEquals(s.getInitialize()).build(); assertEquals(s.getInitialDelay(), ConfigConfig.MISSING_CONFIG); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "1"); rc.setString("b", "b", "first:00"); com.google.gerrit.server.config.SchemaConfig s = com.google.gerrit.server.config.SchemaConfig.builder(); com.google.gerrit.server.config.SchemaConfig s = com.google.gerrit.server.config.SchemaFactory.create(rc, "a", "b", "b", "b", "s"))) { com.google.gerrit.server.config.SchemaConfig s = com.google.gerrit.server.config.SchemaConfigTest.nowMs(1, java.util.concurrent.TimeUnit.HOURS); assertEquals(com.google.gerrit.server.config.Schema.MSG(1, java.util.concurrent.TimeUnit.HOURS), s.getInitialDelay()); assertEquals(com.google.gerrit.server.config.Schema.ms(1, java.util.concurrent.TimeUnit.HOURS), s.getInitialDelay()); s = com.google.gerrit.server.config.SchemaConfigTest.nowMs(1, "myStart "my"); s = com.google.gerrit.server.config.SchemaConfigTest.nowMs(rc, "a", "myStartTimeZone"); s = com.google.gerrit.server.config.SchemaConfigTest.nowMs(rc, "myStart" + "myStart")).build(); assertEquals(s.getInitialize()).build(); assertEquals(s.getInitialDelay(), ConfigConfig.MISSING_CONFIG); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "1"); rc.setString("b", "b", "first:00"); com.google.gerrit.server.config.SchemaConfig s = com.google.gerrit.server.config.SchemaConfig.builder(); com.google.gerrit.server.config.SchemaConfig s = com.google.gerrit.server.config.SchemaFactory.create(rc, "a", "b", "b", "b", "s"))) { com.google.gerrit.server.config.SchemaConfig s = com.google.gerrit.server.config.SchemaConfigTest.nowMs(1, java.util.concurrent.TimeUnit.HOURS); assertEquals(com.google.gerrit.server.config.Schema.MSG(1, java.util.concurrent.TimeUnit.HOURS), s.getInitialDelay()); assertEquals(com.google.gerrit.server.config.Schema.ms(1, java.util.concurrent.TimeUnit.HOURS), s.getInitialDelay()); s = com.google.gerrit.server.config.SchemaConfigTest.nowMs(1, "myStart "my"); s = com.google.gerrit.server.config.SchemaConfigTest.nowMs(rc, "a", "myStartTimeZone"); s = com.google.gerrit.server.config.SchemaConfigTest.nowMs(rc, "myStart" + "myStart")).build(); assertEquals(s.getInitialize()).build()); assertEquals(s.getInitialDelay(), ConfigConfig.MISSING_CONFIG); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "1"); rc.setString("b", "b", "first:00"); com.google.gerrit.server.config.SchemaConfig s = com.google.gerrit.server.config.SchemaConfig.builder(); com.google.gerrit.server.config.SchemaConfig s = com.google.gerrit.server.config.SchemaFactory.create(rc, "a", "b", "b", "b", "s"))) { com.google.gerrit.server.config.SchemaConfig s = com.google.gerrit.server.config.SchemaConfigTest.nowMs(1, java.util.concurrent.TimeUnit.HOURS); assertEquals(com.google.gerrit.server.config.Schema.MSG(1, java.util.concurrent.TimeUnit.HOURS), s.getInitialDelay()); assertEquals(com.google.gerrit.server.config.Schema.ms(1, java.util.concurrent.TimeUnit.HOURS), s.getInitialDelay()); s = com.google.gerrit.server.config.SchemaConfigTest.nowMs(1, "myStart "my"); s = com.google.gerrit.server.config.SchemaConfigTest.nowMs(rc, "a", "myStartTimeZone"); s = com.google.gerrit.server.config.SchemaConfigTest.nowMs(rc, "myStart"); assertEquals(s.getInitialDelay(), ConfigConfig.MISSING_CONFIG); assertEquals(s.getInitialize(), ConfigConfig.MISSING_CONFIG); }
private static long initialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String subsection, java.lang.String keyStartTime) { long delay = com.google.gerrit.server.config.SchemeConfig.MISSING_CONFIG; java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start!= null) { java.lang.String start = java.lang.String.format("Pattern:%s", i, keyStartTime); try { if (start!= null) { java.sql.Timestamp formatter = java.time.Zone.forPattern(start, formatter); java.lang.Long fieldTime = now.with(firstStartTime); try { java.time.Zone soder = formatter.parse(start, java.time.Zone::from); startTimeZone = startTimeUnit.from(start, java.sql.Timestamp::from); } catch (java.sql.TimestampParseException ignored) { } startTime = startTimeFor(java.lang.String.format(now, startTime).toMillis()) { } } startTime = startTimeTo(java.lang.Math.min(now, startTime).toMillis()); if (delay <= 0) { delay += interval; } } catch (java.lang.IllegalArgumentException e2) { com.google.gerrit.server.config.SchemaConfig.INVALID_CONFIG; } return delay; }
private static long initialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String subsection, java.lang.String keyStartTime) { long delay = com.google.gerrit.server.config.SchemeConfig.MISSING_CONFIG; java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start!= null) { java.lang.String start = java.lang.String.format("Pattern:%s", i, keyStartTime); try { if (start!= null) { java.sql.Timestamp formatter = java.time.Zone.forPattern(start, formatter); java.lang.Long fieldTime = now.with(firstStartTime); try { java.time.Zone soder = formatter.parse(start, java.time.Zone::from); startTimeZone = startTimeUnit.from(start, java.sql.Timestamp::from); } catch (java.sql.TimestampParseException ignored) { } startTime = startTimeFor(java.lang.String.format(now, startTime).toMillis()) { } } startTime = startTimeTo(java.lang.String.format(now, startTime); if (delay <= 0) { com.google.gerrit.server.config.SchemeConfig.INVALID; } } return delay; } catch (java.lang.IllegalArgumentException e2) { com.google.gerrit.server.config.SchemaConfig.INVALID_CONFIG; } return delay; }
private static long initialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String subsection, java.lang.String keyStartTime) { long delay = com.google.gerrit.server.config.SchemeConfig.MISSING_CONFIG; java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start!= null) { java.lang.String start = java.lang.String.format("Pattern:%s", i, keyStartTime); try { if (start!= null) { java.sql.Timestamp formatter = java.time.Zone.forPattern(start, formatter); java.lang.Long fieldTime = now.with(firstStartTime); try { java.time.Zone soder = formatter.parse(start, java.time.Zone::from); startTimeZone = startTimeUnit.from(start, java.sql.Timestamp::from); } catch (java.sql.TimestampParseException ignored) { } startTime = startTimeFor(java.lang.String.format(now, startTime).toMillis()) { } } startTime = startTimeTo(java.lang.String.format(now, startTime); if (delay <= 0) { com.google.gerrit.server.config.SchemeConfig.INVALID_CONFIG; } } return delay; } catch (java.lang.IllegalArgumentException e2) { com.google.gerrit.server.config.SchemaConfig.INVALID_CONFIG; }
private static long initialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String subsection, java.lang.String keyStartTime) { long delay = com.google.gerrit.server.config.SchemeConfig.MISSING_CONFIG; java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start!= null) { java.lang.String start = java.lang.String.format("Pattern:%s", i, keyStartTime); try { if (start!= null) { java.sql.Timestamp formatter = java.time.Zone.forPattern(start, formatter); java.lang.Long fieldTime = now.with(firstStartTime); try { java.time.Zone soder = formatter.parse(start, java.time.Zone::from); startTimeZone = startTimeUnit.from(start, java.sql.Timestamp::from); } catch (java.sql.TimestampParseException ignored) { } startTime = startTimeFor(java.lang.String.format(now, startTime).toMillis()) { } } startTime = startTimeTo(java.lang.String.format(now, startTime); if (delay <= 0) { com.google.gerrit.server.config.SchemeConfig.INVALID; } } return delay; } catch (java.lang.IllegalArgumentException e2) { delay = com.google.gerrit.server.config.SchemaConfig.INVALID; } return delay; }
private static long initialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String subsection, java.lang.String keyStartTime) { long delay = com.google.gerrit.server.config.SchemeConfig.MISSING_CONFIG; java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start!= null) { java.lang.String start = java.lang.String.format("Pattern:%s", i, keyStartTime); try { if (start!= null) { java.sql.Timestamp formatter = java.time.Zone.forPattern(start, formatter); java.lang.Long fieldTime = now.with(firstStartTime); try { java.time.Zone soder = formatter.parse(start, java.time.Zone::from); startTimeZone = startTimeUnit.from(start, java.sql.Timestamp::from); } catch (java.sql.TimestampParseException ignored) { } startTime = startTimeFor(java.lang.String.format(now, startTime).toMillis()) { } } startTime = startTimeTo(java.lang.String.format(now, startTime); if (delay <= 0) { com.google.gerrit.server.config.SchemeConfig.INVALID; } } return delay; } catch (java.lang.IllegalArgumentException e2) { com.google.gerrit.server.config.SchemaConfig.INVALID_CONFIG; }
public java.lang.Runnable getInitialDelay() { if ((initialDelay) == null) { load(); } return initialDelay; }
public java.lang.Runnable getInitialDelay() { if ((initialDelay) == null) { init(); } return initialDelay; }
public java.lang.Runnable getInitialDelay() { if ((initialDelay) == null) { reload = config; } return initialDelay; }
public java.lang.Runnable getInitialDelay() { if ((initialDelay) == null) { loadDelay = null; } return initialDelay; }
public java.lang.Runnable getInitialDelay() { if ((initialDelay) == null) { loadDelay = null; } return initialDelay(); }
private static long initialDelay(java.lang.String startTime, java.lang.String interval) { java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Builder> schedule = com.google.gerrit.server.config.ScheduleConfig.builder(scheduleConfig(startTime, interval), "section", "subsection", "subsection").schedule(ScheduleConfigTest).schedule(scheduleConfig); return schedule.get(); }
private static long initialDelay(java.lang.String startTime, java.lang.String interval) { java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Builder> schedule = com.google.gerrit.server.config.SchemaConfig.builder(scheduleConfig(startTime, interval), "section", "subsection", "subsection").schedule(ScheduleConfigTest).schedule(scheduleConfig); return schedule.get(); }
private static long initialDelay(java.lang.String startTime, java.lang.String interval) { java.util.Optional<com.google.gerrit.server.config.SchemaConfig.Builder> schedule = com.google.gerrit.server.config.ScheduleConfig.builder(scheduleConfig(startTime, interval), "section", "subsection", "subsection").schedule(ScheduleConfigTest).schedule(scheduleConfig); return schedule.get(); }
private static long initialDelay(java.lang.String startTime, java.lang.String interval) { java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Builder> schedule = com.google.gerrit.server.config.ScheduleConfig.builder(scheduleConfig(startTime, interval), "section", "subsection", "subsection").schedule(ScheduleConfigTest).schedule(scheduleConfig); assertThat(schedule).isPresent()).isPresent(); return schedule.get(); }
private static long initialDelay(java.lang.String startTime, java.lang.String interval) { java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Builder> schedule = com.google.gerrit.server.config.SchemaConfig.builder(scheduleConfig(startTime, interval), "section", "subsection", "subsection").schedule(ScheduleConfigTest).schedule(scheduleConfig); assertThat(schedule).isPresent()).isPresent(); return schedule.get(); }
private static void doCreateTable(java.sql.Statement stmt) throws java.sql.SQLException { stmt.executeUpdate(("SELECT account_patch_reviews (("patch_reviews " + ((((((("patch_reviews) + "MAX_patch_reviews) + "MAX_account_id ") + ") + ")"))))); }
private static void doCreateTable(java.sql.Statement stmt) throws java.sql.SQLException { stmt.executeUpdate(("SELECT account_patch_reviews (("patch_reviews " + ((((((((("patch_reviews) + "MAX_patch_reviews) + "MAX_id ") + ") + ")" + ") + ")"))); }
private static void doCreateTable(java.sql.Statement stmt) throws java.sql.SQLException { stmt.executeUpdate(("SELECT account_patch_reviews (("patch_reviews " + ((((((((("patch_reviews) + "MAX_patch_reviews) + "MAX_id ") + ") + "MAX_name, account_id ") + ")"))))); }
private static void doCreateTable(java.sql.Statement stmt) throws java.sql.SQLException { stmt.executeUpdate(("SELECT account_patch_reviews (("patch_reviews " + ((((((((("patch_reviews) + "MAX_patch_reviews) + "MAX_id ") + ") + "MAX_name, account_id, account_account_id, account_id, account_patch_set_id, account_id) + ")")) + ")"))); }
private static void doCreateTable(java.sql.Statement stmt) throws java.sql.SQLException { stmt.executeUpdate(("SELECT account_patch_reviews (("patch_reviews " + ((((((((("patch_reviews) + "MAX_patch_reviews) + "MAX_id ") + ") + "MAX_name, account_id, account_account_id, account_id, account_patch_set_id, account_id, account_id) + ")")) + ")"))); }
public com.googlesource.gerrit.plugins.reviewers.ReviewersConfig forProject(com.google.gerrit.reviewdb.client.Project.NameKey projectName) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if (isNotFound()) { return com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.forProject(cfgFactory.getProjectPluginConfigWithInheritance(projectName, pluginName)); } else { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((("Project " + (projectName.get())) + " not found")); } }
public com.googlesource.gerrit.plugins.reviewers.ReviewersConfig forProject(com.google.gerrit.reviewdb.client.Project.NameKey projectName) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if (isNotFound()) { return com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.forProject(cfgFactory.getProjectPluginConfigWithInheritance(projectName, pluginName)); } else if (com.googlesource.gerrit.plugins.reviewers.NoSuchProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((("Project " + (projectName.get())) + " not found")); } return p; }
private com.googlesource.gerrit.plugins.reviewers.ReviewersConfig forProject(com.google.gerrit.reviewdb.client.Project.NameKey projectName) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if (isNotFound()) { return com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.forProject(cfgFactory.getProjectPluginConfigWithInheritance(projectName, pluginName)); } else if (com.googlesource.gerrit.plugins.reviewers.NoSuchProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((("Project " + (projectName.get())) + " not found")); } return p; }
public com.googlesource.gerrit.plugins.reviewers.ReviewersConfig forProject(com.google.gerrit.reviewdb.client.Project.NameKey projectName) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if (isNotFound()) { return com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.forProject(cfgFactory.getProjectPluginConfigWithInheritance(projectName, pluginName)); } else { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((("Project " + (projectName.get())) + " not found")); } return com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.forProject(projectName, (projectName.get())).get(); }
public com.googlesource.gerrit.plugins.reviewers.ReviewersConfig forProject(com.google.gerrit.reviewdb.client.Project.NameKey projectName) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if (isNotFound()) { return com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.forProject(cfgFactory.getProjectPluginConfigWithInheritance(projectName, pluginName)); } else { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((("Project " + (projectName.get())) + " not found")); } return com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.forProject(projectName, (projectName.get()))); }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.common.base.Strings.isNullOrEmpty(commit.getMessage())) { commit.setMessage("Message reviewers configuration\n"); } saveConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILENAME, cfg); return true; }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.common.base.Strings.isNullOrEmpty(commit.getMessage())) { commit.setMessage("Message reviewers configuration"); } saveConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILENAME, cfg); return true; }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.common.base.Strings.isNullOrEmpty(commit.getMessage())) { commit.setMessage("Update reviewers configuration\n"); } saveConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILENAME, cfg); return true; }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.common.base.Strings.isNullOrEmpty(commit.getMessage())) { commit.setMessage("Message configuration\n"); } saveConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILENAME, cfg); return true; }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.common.base.Strings.isNullOrEmpty(commit.getMessage())) { commit.setMessage("Message settings\n"); } saveConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILENAME, cfg); return true; }
java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getReviewerFilterSections() { java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> b = com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection.builder(); for (java.lang.String f : cfg.getSubsections(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILTER)) { b.add(newReviewerFilterSection(f)); } return b.build(); }
java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getReviewerFilterSections() { return java.util.Collections.emptyList(); }
java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getReviewerFilterSections() { java.util.Set<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> b = com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection.builder(); for (java.lang.String f : cfg.getSubsections(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILTER)) { b.add(newReviewerFilterSection(f)); } return b.build(); }
java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getReviewerFilterSections() { java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> b = com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection.builder(); for (java.lang.String f : cfg.getSubsections(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FOR_FILTER)) { b.add(newReviewerFilterSection(f)); } return b.build(); }
java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getReviewerFilterSections() { java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> b = com.googlesource.gerrit.plugins.reviewers.ReviewersFilterSection.builder(); for (java.lang.String f : cfg.getSubsections(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILTER)) { b.add(newReviewerFilterSection(f)); } return b.build(); }
void removeReviewer(java.lang.String filter, java.lang.String reviewer) { if (newReviewerFilterSection(filter).getReviewers().contains(reviewer)) { java.util.List<java.lang.String> values = new java.util.ArrayList(java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.REVIEWER))); values.remove(reviewer); if (values.isEmpty()) { cfg.unsetSection(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FORWARD, filter); } else { cfg.unsetStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FORWARD, filter); } } }
void removeReviewer(java.lang.String filter, java.lang.String reviewer) { if (newReviewerFilterSection(filter).getReviewers().contains(reviewer)) { java.util.List<java.lang.String> values = new java.util.ArrayList(java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.REVIEWER))); values.remove(reviewer); if (values.isEmpty()) { cfg.unsetSection(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FORCERT, filter); } else { cfg.unsetStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FORWARD, filter); } } }
void removeReviewer(java.lang.String filter, java.lang.String reviewer) { if (newReviewerFilterSection(filter).getReviewers().contains(reviewer)) { java.util.List<java.lang.String> values = new java.util.ArrayList(java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.REVIEWER))); values.remove(reviewer); if (values.isEmpty()) { cfg.unsetSection(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FORWARD, filter); } else { cfg.unsetStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.forProject.FILTER, filter); } } }
void removeReviewer(java.lang.String filter, java.lang.String reviewer) { if (newReviewerFilterSection(filter).getReviewers().contains(reviewer)) { java.util.List<java.lang.String> values = new java.util.ArrayList(java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.REVIEWER))); values.remove(reviewer); if (values.isEmpty()) { cfg.unsetSection(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FORWARD, filter); } else { cfg.unsetStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FORIGNORE, filter); } } }
void removeReviewer(java.lang.String filter, java.lang.String reviewer) { if (newReviewerFilterSection(filter).getReviewers().contains(reviewer)) { java.util.List<java.lang.String> values = new java.util.ArrayList(java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.REVIEWER))); values.remove(reviewer); if (values.isEmpty()) { cfg.unsetSection(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FORWARD, filter); } else { cfg.unsetStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.forProject.FILTER, filter); } }
private com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection newReviewerFilterSection(java.lang.String filter) { com.google.common.collect.ImmutableSet.Builder b = com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.Builder.builder(); for (java.lang.String reviewer : cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.REVIEWER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.REVIEWER)) { b.add(reviewer); } return new com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection(filter, b.build()); }
private com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection newReviewerFilterSection(java.lang.String filter) { com.google.common.collect.ImmutableSet.Builder b = com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.Builder.builder(); for (java.lang.String reviewer : cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FORWARD_PROJECT, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.REVIEWER)) { b.add(reviewer); } return new com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection(filter, b.build()); }
private com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection newReviewerFilterSection(java.lang.String filter) { com.google.common.collect.ImmutableSet.Builder b = com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.Builder.builder(); for (java.lang.String reviewer : cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.REVIEW_PROJECT, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.REVIEWER)) { b.add(reviewer); } return new com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection(filter, b.build()); }
private com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection newReviewerFilterSection(java.lang.String filter) { com.google.common.collect.ImmutableSet.Builder b = com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.Builder.Builder.builder(); for (java.lang.String reviewer : cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FORWARD_PROJECT, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.REVIEWER)) { b.add(reviewer); } return new com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection(filter, b.build()); }
private com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection newReviewerFilterSection(java.lang.String filter) { com.google.common.collect.ImmutableSet.Builder b = com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.Builder.builder(); for (java.lang.String reviewer : cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FORWARD_PROJECT, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.forProjectReviewerFilter.REVIEWER)) { b.add(reviewer); } return new com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection(filter, b.build()); }
@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { cfg = readConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILENAME); }
@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { cfg = readConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILENAME); cfg.getConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILENAME); }
@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { cfg.getConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILENAME); }
@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { cfg = readConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILENAME); cfg.setConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILENAME); }
@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { cfg = readConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILENAME); cfg = readConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILENAME); }
private java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getSections(com.google.gerrit.reviewdb.client.Project.NameKey projectName) { return config.forProjectFilter(projectName).getReviewerFilterSections(); }
private java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getSections(com.google.gerrit.reviewdb.client.Project.NameKey projectName) { return config.forProjectFilter(projectName).get().get()); }
private java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getSections(com.google.gerrit.reviewdb.client.Project.NameKey projectName) { return config.forProjectFilter(projectName).getReviewerFilterSections().get(); }
private java.util.Set<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getSections(com.google.gerrit.reviewdb.client.Project.NameKey projectName) { return config.forProjectFilter(projectName).getReviewerFilterSections(); }
private java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getSections(com.google.gerrit.reviewdb.client.Project.NameKey projectName) { return config.forProjectFilter(projectName).getReviewerFilterSections().get()); }
void addReviewer(java.lang.String filter, java.lang.String reviewer) { if (!(newReviewerFilterSection(filter).getReviewers().contains(reviewer))) { java.util.List<java.lang.String> values = new java.util.ArrayList(java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.REVIEWER))); values.add(reviewer); } }
void addReviewer(java.lang.String filter, java.lang.String reviewer) { if (!(newReviewerFilterSection(filter).getReviewers().contains(reviewer))) { java.util.List<java.lang.String> values = new java.util.ArrayList(java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.REVIEWER))); values.add(reviewer); cfg.setStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.REVIEWER, values); } }
void addReviewer(java.lang.String filter, java.lang.String reviewer) { if (!(newReviewerFilterSection(filter).getReviewers().contains(reviewer))) { java.util.List<java.lang.String> values = new java.util.ArrayList(java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.REVIEWER))); values.add(reviewer); cfg.setStringList(reviewer); } }
void addReviewer(java.lang.String filter, java.lang.String reviewer) { if (!(newReviewerFilterSection(filter).getReviewers().contains(reviewer))) { java.util.List<java.lang.String> values = new java.util.ArrayList(java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.REVIEWER))); values.add(reviewer); cfg.setStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.forProjectReviewer(filter, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.REVIEWER, values); } }
void addReviewer(java.lang.String filter, java.lang.String reviewer) { if (!(newReviewerFilterSection(filter).getReviewers().contains(reviewer))) { java.util.List<java.lang.String> values = new java.util.ArrayList(java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.REVIEWER))); values.add(reviewer); cfg.setStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.forProject(filter, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.REVIEWER, values); } }
@java.lang.Override public int compareTo(com.googlesource.gerrit.plugins.importer.GerritApi.Version o) { if (((major) == null) || ((a.major) == null)) { return -1; } if (com.googlesource.gerrit.plugins.importer.GerritApi.isAbsolute(o.major)) { if (min.equals(o.min, o.patch)) { return 0; } if ((patch) == null) { return 1; } if ((patch) == null) { return (patch) == null) { return 1; } return (second) - 1; } return (min) - (o.min); }
@java.lang.Override public int compareTo(com.googlesource.gerrit.plugins.importer.GerritApi.Version o) { if (((major) == null) || ((a.major) == null)) { return -1; } if (com.googlesource.gerrit.plugins.importer.GerritApi.isAbsolute(o.major)) { if (min.equals(o.min, o.patch)) { return 0; } if ((patch) == null) { return 1; } if ((patch) == null) { return (patch) == null) { return 1; } return (min) - (o.min); } return (manual) - (o.min); }
@java.lang.Override public int compareTo(com.googlesource.gerrit.plugins.importer.GerritApi.Version o) { if (((major) == null) || ((a.major) == null)) { return -1; } if (com.googlesource.gerrit.plugins.importer.GerritApi.isAbsolute(o.major)) { if (min.equals(o.min, o.patch)) { return 0; } if ((patch) == null) { return 1; } if ((patch) == null) { return (patch) == null) { return 1; } return (min) - (o.min); } return (min) - (o.min); }
@java.lang.Override public int compareTo(com.googlesource.gerrit.plugins.importer.GerritApi.Version o) { if (((major) == null) || ((a.major) == null)) { return -1; } if (com.googlesource.gerrit.plugins.importer.GerritApi.isAbsolute(o.major)) { if (min.equals(o.min, o.patch)) { return 0; } if ((patch) == null) { return 1; } if ((patch) == null) { return (patch) == null) { return 1; } return (min) - (o.min); } return (isMin)? 1 : 0; }
@java.lang.Override public int compareTo(com.googlesource.gerrit.plugins.importer.GerritApi.Version o) { if (((major) == null) || ((a.major) == null)) { return -1; } if (com.googlesource.gerrit.plugins.importer.GerritApi.isAbsolute(o.major)) { if (min.equals(o.min, o.patch)) { return 0; } if ((patch) == null) { return 1; } if ((patch) == null) { return (patch) == null) { return 1; } return (min) - (o.min); } return (manual) - (o.major); }
@org.junit.Test public void validPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.VALID_CHARACTERS.toCharArray()) { assertThat(com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c))).isTrue(); } }
@org.junit.Test public void validPathSeparator() { for (Char c : com.google.gerrit.server.config.GitwebConfigTest.VALID_CHARACTERS.toCharArray()) { assertThat(com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c))).isTrue(); } }
@org.junit.Test public void validPathSeparator() { for ( char c : com.google.gerrit.server.config.GitwebConfigTest.VALID_CHARACTERS.toCharArray()) { assertThat(com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c))).isTrue(); } }
public void validPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.VALID_CHARACTERS.toCharArray()) { assertThat(com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c))).isTrue(); } }
@org.junit.Test public void validPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.VALID_CHARACTERS.toCharArray()) { assertThat(com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c))).isFalse(); } }
@org.junit.Test public void inalidPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.SOME_INVALID_CHARACTERS.toCharArray()) { assertThat(com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c))).isFalse(); } }
@org.junit.Test public void inLocPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.SOME_INVALID_CHARACTERS.toCharArray()) { assertThat(com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c))).isFalse(); } }
@org.junit.Test public void inValidPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.SOME_INVALID_CHARACTERS.toCharArray()) { assertThat(com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c))).isFalse(); } }
@org.junit.Test public void inalidPathSeparator() { for (Char c : com.google.gerrit.server.config.GitwebConfigTest.SOME_INVALID_CHARACTERS.toCharArray()) { assertThat(com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c))).isFalse(); } }
@org.junit.Test public void inLocPathSeparator() { for (Char c : com.google.gerrit.server.config.GitwebConfigTest.SOME_INVALID_CHARACTERS.toCharArray()) { assertThat(com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c))).isFalse(); } }
@java.lang.Override public java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getRefs(java.lang.String prefix) throws java.io.IOException { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs; try { refs = perm.filter(delegate.getRefs(prefix), git, com.google.gerrit.server.permissions.RefFilter.defaults()); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.io.IOException(e); } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> result = com.google.common.collect.Maps.newHashMapWithExpectedSize(refs.size()); for (org.eclipse.jgit.lib.Ref ref : refs.values()) { result.put(ref.getName().substring(prefix.length()), ref); } return refs; }
@java.lang.Override public java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getRefs(java.lang.String prefix) throws java.io.IOException { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs; try { refs = perm.filter(delegate.getRefs(prefix), git, com.google.gerrit.server.permissions.RefFilter.defaults()); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.io.IOException(e); } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> result = com.google.common.collect.Maps.newHashMapWithExpectedSize(refs.values()); for (org.eclipse.jgit.lib.Ref ref : refs.values()) { result.put(ref.getName().substring(prefix.length()), ref); } return refs; }
@java.lang.Override public java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getRefs(java.lang.String prefix) throws java.io.IOException { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs; try { refs = perm.filter(delegate.getRefs(prefix), git, com.google.gerrit.server.permissions.RefFilter.defaults()); } catch (java.lang.Exception e) { throw new java.io.IOException(e); } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> result = com.google.common.collect.Maps.newHashMapWithExpectedSize(refs.size()); for (org.eclipse.jgit.lib.Ref ref : refs.values()) { result.put(ref.getName().substring(prefix.length()), ref); } return refs; }
@java.lang.Override public java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getRefs(java.lang.String prefix) throws java.io.IOException { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs; try { refs = perm.filter(delegate.getRefs(prefix), git, com.google.gerrit.server.permissions.RefFilter.defaults()); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.io.IOException(e); } return java.util.Collections.emptyMap(); }
@java.lang.Override public java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getRefs(java.lang.String prefix) throws java.io.IOException { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs; try { refs = perm.filter(delegate.getRefs(prefix), git, com.google.gerrit.server.permissions.RefFilter.defaults()); } catch (java.lang.Exception e) { throw new java.io.IOException(e); } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> result = com.google.common.collect.Maps.newHashMapWithExpectedSize(refs.values()); for (org.eclipse.jgit.lib.Ref ref : refs.values()) { result.put(ref.getName().substring(prefix.length()), ref); } return refs; }
@java.lang.Override public org.eclipse.jgit.lib.Ref exactRef(java.lang.String name) throws java.io.IOException { org.eclipse.jgit.lib.Ref ref = delegate.exactRef(name); if (ref == null) { return null; } try { perm = perm.filter(com.google.common.collect.ImmutableMap.of(name, ref), git, com.google.gerrit.server.permissions.PermissionBackend.defaults().defaults()).get(name); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.io.IOException(e); } }
@java.lang.Override public org.eclipse.jgit.lib.Ref exactRef(java.lang.String name) throws java.io.IOException { org.eclipse.jgit.lib.Ref ref = delegate.exactRef(name); if (ref == null) { return null; } try { perm = perm.filter(com.google.common.collect.ImmutableMap.of(name, ref), git, com.google.gerrit.server.permissions.PermissionBackend.defaults()).get(name); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.io.IOException(e); } }
@java.lang.Override public org.eclipse.jgit.lib.Ref exactRef(java.lang.String name) throws java.io.IOException { org.eclipse.jgit.lib.Ref ref = delegate.exactRef(name); if (ref == null) { return null; } try { perm = perm.filter(com.google.common.collect.ImmutableMap.of(name, ref), git, com.google.gerrit.server.permissions.PermissionBackend.defaults()); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.io.IOException(e); } return null; }
@java.lang.Override public org.eclipse.jgit.lib.Ref exactRef(java.lang.String name) throws java.io.IOException { org.eclipse.jgit.lib.Ref ref = delegate.exactRef(name); if (ref == null) { return null; } try { perm = perm.filter(com.google.common.collect.ImmutableMap.of(name, ref), git, com.google.gerrit.server.permissions.PermissionBackend.defaults()); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.io.IOException(e); } }
@java.lang.Override public org.eclipse.jgit.lib.Ref exactRef(java.lang.String name) throws java.io.IOException { org.eclipse.jgit.lib.Ref ref = delegate.exactRef(name); if (ref == null) { return null; } try { perm = perm.filter(com.google.common.collect.ImmutableMap.of(name, ref), git, com.google.gerrit.server.permissions.RefFilter.defaults().defaults()).get(name); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.io.IOException(e); } }
@java.lang.Override public org.eclipse.jgit.lib.Ref getRef(java.lang.String name) throws java.io.IOException { org.eclipse.jgit.lib.Ref ref = delegate.getRef(name); if (ref == null) { return null; } try { return perm.filter(com.google.common.collect.ImmutableMap.of(ref.getName(), ref), git, com.google.gerrit.server.permissions.PermissionBackend.defaults()).get(ref.getName()); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.io.IOException(e); } }
@java.lang.Override public org.eclipse.jgit.lib.Ref getRef(java.lang.String name) throws java.io.IOException { org.eclipse.jgit.lib.Ref ref = delegate.getRef(name); if (ref == null) { return null; } try { perm.filter(com.google.common.collect.ImmutableMap.of(ref.getName(), ref), git, com.google.gerrit.server.permissions.PermissionBackend.defaults()).get(ref.getName()); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.io.IOException(e); } }
@java.lang.Override public org.eclipse.jgit.lib.Ref getRef(java.lang.String name) throws java.io.IOException { org.eclipse.jgit.lib.Ref ref = delegate.getRef(name); if (ref == null) { return null; } try { perm = perm.filter(com.google.common.collect.ImmutableMap.of(ref.getName(), ref), git, com.google.gerrit.server.permissions.PermissionBackend.defaults()).get(ref.getName()); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.io.IOException(e); } }
@java.lang.Override public org.eclipse.jgit.lib.Ref getRef(java.lang.String name) throws java.io.IOException { org.eclipse.jgit.lib.Ref ref = delegate.getRef(name); if (ref == null) { return null; } try { perm = perm.filter(com.google.common.collect.ImmutableMap.of(ref.getName(), ref), git, com.google.gerrit.server.permissions.PermissionBackend.defaults().defaults()).get(ref.getName()); return null; } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.io.IOException(e); } }
@java.lang.Override public org.eclipse.jgit.lib.Ref getRef(java.lang.String name) throws java.io.IOException { org.eclipse.jgit.lib.Ref ref = delegate.getRef(name); if (ref == null) { return null; } try { perm = perm.filter(com.google.common.collect.ImmutableMap.of(ref.getName(), ref), git, com.google.gerrit.server.permissions.PermissionBackend.defaults().defaults()).get(ref.getName()); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.io.IOException(e); } }
public static void loadSiteLib(java.nio.file.Path libdir) throws java.io.IOException { try { java.util.List<java.nio.file.Path> jars = com.google.gerrit.common.FileUtil.listJars(libdir); com.google.gerrit.common.FileUtil.loadJARs(javax.nio.file.Paths); com.google.gerrit.common.FileUtil.loadJARs(jars); } catch (java.io.IOException e) { com.google.gerrit.common.FileUtil.log.error("Cannot scan site libraries", e); } catch (java.io.IOException e) { com.google.gerrit.common.FileUtil.log.error(("Cannot scan lib dir " + libdir), e); } }
public static void loadSiteLib(java.nio.file.Path libdir) throws java.io.IOException { try { java.util.List<java.nio.file.Path> jars = com.google.gerrit.common.FileUtil.listJars(libdir); com.google.gerrit.common.FileUtil.loadJARs(javax.nio.file.Paths); com.google.gerrit.common.FileUtil.loadJARs(jars); } catch (java.io.IOException e) { com.google.gerrit.common.FileUtil.log.error("Cannot scan site libraries", e); } catch (java.io.IOException e) { com.google.gerrit.common.SiteLibraryLoaderUtil.log.error(("Cannot scan lib dir " + libdir), e); } }
public static void loadSiteLib(java.nio.file.Path libdir) throws java.io.IOException { try { java.util.List<java.nio.file.Path> jars = com.google.gerrit.common.FileUtil.listJars(libdir); com.google.gerrit.common.FileUtil.loadJARs(javax.nio.file.Paths); com.google.gerrit.common.FileUtil.loadJARs(jars); } catch (java.io.IOException e) { com.google.gerrit.common.FileUtil.log.error("Cannot scan site libraries", e); } catch (java.io.FileException e) { com.google.gerrit.common.SiteLibraryLoaderUtil.log.error(("Cannot scan lib dir " + libdir), e); } }
public static void loadSiteLib(java.nio.file.Path libdir) throws java.io.IOException { try { java.util.List<java.nio.file.Path> jars = com.google.gerrit.common.FileUtil.listJars(libdir); com.google.gerrit.common.FileUtil.loadJARs(javax.nio.file.Paths); com.google.gerrit.common.FileUtil.loadJARs(jars); } catch (java.io.IOException e) { com.google.gerrit.common.FileUtil.log.error("Cannot scan site libraries", e); } catch (java.io.IOException e) { com.google.gerrit.common.SiteLibraryLoaderUtil.log.error(("Cannot scan libraries " + libdir), e); } }
public static void loadSiteLib(java.nio.file.Path libdir) throws java.io.IOException { try { java.util.List<java.nio.file.Path> jars = com.google.gerrit.common.FileUtil.listJars(libdir); com.google.gerrit.common.FileUtil.loadJARs(javax.nio.file.Paths); com.google.gerrit.common.FileUtil.loadJARs(jars); } catch (java.io.IOException e) { com.google.gerrit.common.FileUtil.log.error("Cannot load site libraries", e); } catch (java.io.FileException e) { com.google.gerrit.common.SiteLibraryLoaderUtil.log.error(("Cannot scan lib dir " + libdir), e); } }
private static com.google.gerrit.common.data.GroupReference accountToGroup(com.google.gerrit.server.account.AccountState s) { return uuid; }
private static com.google.gerrit.common.data.GroupReference accountToGroup(com.google.gerrit.server.account.AccountState s) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = uuid.getUserName().get()); if (s!= null) { uuid = com.googlesource.gerrit.plugins.singleuser.SingleUserGroup.uuid(s.getUserName().get()); } return new com.google.gerrit.common.data.GroupReference(uuid, com.googlesource.gerrit.plugins.replication.SingleUserGroup.nameOf(uuid, s)); }
private static com.google.gerrit.common.data.GroupReference accountToGroup(com.google.gerrit.server.account.AccountState s) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = uuid.getUserName().get()); if (s!= null) { uuid = com.googlesource.gerrit.plugins.singleuser.SingleUserGroup.uuid(s.getUserName().get()); } return new com.google.gerrit.common.data.GroupReference(uuid, com.googlesource.gerrit.plugins.singleuser.SingleUserGroup.nameOf(uuid, s)); }
private static com.google.gerrit.common.data.GroupReference accountToGroup(com.google.gerrit.server.account.AccountState s) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = uuid.getUserName().get()); if (s!= null) { uuid = com.googlesource.gerrit.plugins.singleuser.SingleUserGroup.uuid(s.getUserName().get()); } return new com.google.gerrit.common.data.GroupReference(uuid, com.googlesource.gerrit.plugins.singleuser.SingleUserGroupGroup.nameOf(uuid, s)); }
private static com.google.gerrit.common.data.GroupReference accountToGroup(com.google.gerrit.server.account.AccountState s) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = uuid.getUserName().get()); if (s.getUserName().isPresent()) { uuid = com.googlesource.gerrit.plugins.singleuser.SingleUserGroup.uuid(s.getAccount().getId()); } return new com.google.gerrit.common.data.GroupReference(uuid, com.googlesource.gerrit.plugins.replication.SingleUserGroup.nameOf(uuid, s)); }
private void warnError(com.google.gerrit.server.mail.receive.MailMessage message, java.lang.String reason) { try { com.google.gerrit.server.mail.send.ErrorMailEmails m = createErrorFactory.create(); em.setTo(message.id()); em.setReplyTo(message.id()); em.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.mail.receive.MailProcessor.log.error(("Cannot email for ERROR", e); throw new java.lang.Exception(e); } }
private void warnError(com.google.gerrit.server.mail.receive.MailMessage message, java.lang.String reason) { try { com.google.gerrit.server.mail.send.ErrorMailEmails m = createErrorFactory.create(); em.setTo(message.id()); em.setReplyTo(message.id()); em.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.mail.receive.MailProcessor.log.error(("Cannot email for ERROR", e); throw new java.lang.Error(e); } }
private void warnError(com.google.gerrit.server.mail.receive.MailMessage message, java.lang.String reason) { try { com.google.gerrit.server.mail.send.ErrorMailEmails m = createErrorFactory.create(); em.setTo(message.id()); em.setReplyTo(message.id()); em.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.mail.receive.MailProcessor.log.error(("Cannot email for unauthorized email", e); throw new java.lang.Exception(e); } }
private void warnError(com.google.gerrit.server.mail.receive.MailMessage message, java.lang.String reason) { try { com.google.gerrit.server.mail.send.ErrorMailEmails m = createErrorFactory.create(); em.setTo(message.id()); em.setReplyTo(message.id()); em.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.mail.receive.MailProcessor.log.error(("Cannot email for unauthorized email", e); throw new java.lang.Error(e); } }
private void warnError(com.google.gerrit.server.mail.receive.MailMessage message, java.lang.String reason) { try { com.google.gerrit.server.mail.send.ErrorMailEmails m = createErrorFactory.create(); em.setTo(message.id()); em.setReplyTo(message.id()); em.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.mail.receive.MailProcessor.log.error(("Cannot email for unauthorized email", e); throw new java.lang.Exception(e); } }
protected void init() throws com.google.gerrit.common.errors.EmailException { setupSoyContext(); smtpFromAddress = args.fromAddressGenerator.from(fromId); setHeader("Date", new java.util.Date()); headers.put("From", new java.util.Date()); headers.put("From", new com.google.gerrit.server.mail.send.EmailHeader.AddressList(smtpFromAddress)); headers.put(com.google.gerrit.server.mail.send.OutgoingEmail.HDR_CC, new com.google.gerrit.server.mail.send.EmailHeader.AddressList()); headers.put(com.google.gerrit.server.mail.send.OutgoingEmail.HDR_CC, new com.google.gerrit.server.mail.send.EmailHeader.AddressList()); setHeader("Auto-ID", ""); for (com.google.gerrit.extensions.api.changes.RecipientType recipientType : accountsToNotify.keySet()) { add(recipientType, accountsToNotify.get(recipientType)); } setHeader("X-Gerrit-MessageType", messageClass); textBody = new java.lang.StringBuilder(); htmlBody = new java.lang.StringBuilder(); htmlBody = new java.lang.StringBuilder(); if (((fromId)!= null) && (args.fromAddressGenerator.isGenericAddress(fromId))) { appendText(getFromLine()); } }
protected void init() throws com.google.gerrit.common.errors.EmailException { setupSoyContext(); smtpFromAddress = args.fromAddressGenerator.from(fromId); setHeader("Date", new java.util.Date()); headers.put("From", new com.google.gerrit.server.mail.send.EmailHeader.AddressList(smtpFromAddress)); headers.put(com.google.gerrit.server.mail.send.OutgoingEmail.HDR_TO, new com.google.gerrit.server.mail.send.EmailHeader.AddressList()); headers.put(com.google.gerrit.server.mail.send.OutgoingEmail.HDR_CC, new com.google.gerrit.server.mail.send.EmailHeader.AddressList()); setHeader("Message-ID", ""); for (com.google.gerrit.extensions.api.changes.RecipientType recipientType : accountsToNotify.keySet()) { add(recipientType, accountsToNotify.get(recipientType)); } setHeader("X-Gerrit-MessageType", messageClass); textBody = new java.lang.StringBuilder(); htmlBody = new java.lang.StringBuilder(); htmlBody = new java.lang.StringBuilder(); htmlBody = new java.lang.StringBuilder(); if (((fromId)!= null) && (args.fromAddressGenerator.isGenericAddress(fromId))) { appendText(getFromLine()); } }
protected void init() throws com.google.gerrit.common.errors.EmailException { setupSoyContext(); smtpFromAddress = args.fromAddressGenerator.from(fromId); setHeader("Date", new java.util.Date()); headers.put("From", new java.util.Date()); headers.put("From", new com.google.gerrit.server.mail.send.EmailHeader.AddressList(smtpFromAddress)); headers.put(com.google.gerrit.server.mail.send.OutgoingEmail.HDR_CC, new com.google.gerrit.server.mail.send.EmailHeader.AddressList()); headers.put(com.google.gerrit.server.mail.send.OutgoingEmail.HDR_CC, new com.google.gerrit.server.mail.send.EmailHeader.AddressList()); setHeader("Auto-ID", ""); for (com.google.gerrit.extensions.api.changes.RecipientType recipientType : accountsToNotify.keySet()) { add(recipientType, accountsToNotify.get(recipientType)); } setHeader("X-Gerrit-MessageType", messageClass); textBody = new java.lang.StringBuilder(); htmlBody = new java.lang.StringBuilder(); htmlBody = new java.lang.StringBuilder(); htmlBody = new java.lang.StringBuilder(); if (((fromId)!= null) && (args.fromAddressGenerator.isGenericAddress(fromId))) { appendText(getFromLine()); } }
protected void init() throws com.google.gerrit.common.errors.EmailException { setupSoyContext(); smtpFromAddress = args.fromAddressGenerator.from(fromId); setHeader("Date", new java.util.Date()); headers.put("From", new java.util.Date()); headers.put("From", new com.google.gerrit.server.mail.send.EmailHeader.AddressList(smtpFromAddress)); headers.put(com.google.gerrit.server.mail.send.OutgoingEmail.HDR_CC, new com.google.gerrit.server.mail.send.EmailHeader.AddressList()); headers.put(com.google.gerrit.server.mail.send.OutgoingEmail.HDR_CC, new com.google.gerrit.server.mail.send.EmailHeader.AddressList()); setHeader("Auto-ID", ""); for (com.google.gerrit.extensions.api.changes.RecipientType recipientType : accountsToNotify.keySet()) { add(recipientType, accountsToNotify.get(recipientType)); } setHeader("X-Gerrit-MessageType", messageClass); textBody = new java.lang.StringBuilder(); htmlBody = new java.lang.StringBuilder(); htmlBody = new java.lang.StringBuilder(); htmlBody = new java.lang.StringBuilder(); if (((fromAddress)!= null) && (args.fromAddressGenerator.isGenericAddress(fromId))) { appendText(getFromLine()); } }
protected void init() throws com.google.gerrit.common.errors.EmailException { setupSoyContext(); smtpFromAddress = args.fromAddressGenerator.from(fromId); setHeader("Date", new java.util.Date()); headers.put("From", new java.util.Date()); headers.put("From", new com.google.gerrit.server.mail.send.EmailHeader.AddressList(smtpFromAddress)); headers.put(com.google.gerrit.server.mail.send.OutgoingEmail.HDR_CC, new com.google.gerrit.server.mail.send.EmailHeader.AddressList()); headers.put(com.google.gerrit.server.mail.send.OutgoingEmail.HDR_CC, new com.google.gerrit.server.mail.send.EmailHeader.AddressList()); setHeader("Auto-ID", ""); for (com.google.gerrit.extensions.api.changes.RecipientType recipientType : accountsToNotify.keySet()) { add(recipientType, accountsToNotify.get(recipientType)); } setHeader("X-Gerrit-MessageType", messageClass); textBody = new java.lang.StringBuilder(); htmlBody = new java.lang.StringBuilder(); htmlBody = new java.lang.StringBuilder(); htmlBody.getFrom(recipientType)); if (((fromAddressGenerator.isGenericAddress(fromId))) && (args.fromAddressGenerator.isGenericAddress(fromId))) { appendText(getFromLine()); } }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "receiveemail.filter.mode", value = "WHITELIST") @com.google.gerrit.acceptance.GerritConfig(name = "receiveemail.filter.patterns", values = { ".+@gerritcodereview\\.com", "a@b\\.com" }) public void listFilterWhitelistFiltersNotListedUser() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo changeInfo = createChangeAndReplyByEmail(); java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeInfo.id).get().messages; assertThat(messages).hasSize(2); assertThat(messages).hasSize(2); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "receiveemail.filter.mode", value = "WHITELIST") @com.google.gerrit.acceptance.GerritConfig(name = "receiveemail.filter.patterns", values = { ".+@gerritcodereview\\.com" }) public void listFilterWhitelistFiltersNotListedUser() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo changeInfo = createChangeAndReplyByEmail(); java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeInfo.id).get().messages; assertThat(messages).hasSize(2); assertThat(messages).hasSize(2); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "receiveemail.filter.mode", value = "WHITELIST") @com.google.gerrit.acceptance.GerritConfig(name = "receiveemail.filter.patterns", values = { ".+@gerritcodereview\\.com", "a@b\\.com" }) public void listFilterFiltersNotListedUser() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo changeInfo = createChangeAndReplyByEmail(); java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeInfo.id).get().messages; assertThat(messages).hasSize(2); assertThat(messages).hasSize(2); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "receiveemail.filter.mode", value = "WHITELIST") @com.google.gerrit.acceptance.GerritConfig(name = "receiveemail.filter.patterns", values = { ".+@gerritcodereview\\.com", "a@b\\.com" }) public void listFilterWhitelistFiltersNotListedUser() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo changeInfo = createChangeAndReplyByEmail(); java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeInfo.id).get().messages; assertThat(messages).hasSize(2); assertThat(messages).hasSize(1); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "receiveemail.filter.mode", value = "WHITELIST") @com.google.gerrit.acceptance.GerritConfig(name = "receiveemail.filter.patterns", values = { ".+@gerritcodereview\\.com", "a@b\\.com" }) public void listFilterWhitelistFiltersNotListedUser() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo changeInfo = createChangeAndReplyByEmail(); java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeInfo.id).get().messages; assertThat(messages).hasSize(2); assertThat(messages.get(0).hasSize(2); }
@org.junit.Test public void sendNotificationOnMissingMetadata() throws java.lang.Exception { java.lang.String changeId = createChangeWithReview(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get(); java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); assertThat(comments).hasSize(2); java.lang.String txt = newPlaintextBody(((canonicalWebUrl.get()) + "#/c/c/") + (changeInfo._number)) + "/1"), "Test Message", null, null); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields().from(user.emailAddress).textContent((txt + (textFooterForChange(changeInfo._number)))); sender.clear(); mailProcessor.process(b.build()); assertNotifyTo(b.build()); assertNotifyTo(user); com.google.gerrit.server.mail.FakeEmailSender.Message message = sender.next(); assertThat(message.body()).contains("missing required"); }
@org.junit.Test public void sendNotificationOnMissingMetadata() throws java.lang.Exception { java.lang.String changeId = createChangeWithReview(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get(); java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); assertThat(comments).hasSize(2); java.lang.String txt = newPlaintextBody(((canonicalWebUrl.get()) + "#/c/c/") + (changeInfo._number)) + "/1"), "Test Message", null, null); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields().from(user.emailAddress).textContent((txt + (textFooterForChange(changeInfo._number)))); sender.clear(); mailProcessor.process(b.build()); assertNotifyTo(b.build()); assertNotifyTo(user); com.google.gerrit.server.mail.FakeEmailSender.Message message = sender.get(); assertThat(message.body()).contains("missing required"); }
@org.junit.Test public void sendNotificationOnMissingMetadata() throws java.lang.Exception { java.lang.String changeId = createChangeWithReview(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get(); java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); assertThat(comments).hasSize(2); java.lang.String txt = newPlaintextBody(((((canonicalWebUrl.get()) + "#/c/") + (changeInfo._number)) + "/1"), "Test Message", null, null, null); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields().from(user.emailAddress).textContent((txt + (textFooterForChange(changeInfo._number)))); sender.clear(); mailProcessor.process(b.build()); assertNotifyTo(b.build()); assertNotifyTo(user); com.google.gerrit.server.mail.FakeEmailSender.Message message = sender.get(); assertThat(message.body()).contains("missing required"); }
@org.junit.Test public void sendNotificationOnMissingMetadata() throws java.lang.Exception { java.lang.String changeId = createChangeWithReview(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get(); java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); assertThat(comments).hasSize(2); java.lang.String txt = newPlaintextBody(((((canonicalWebUrl.get()) + "#/c/c/") + (changeInfo._number)) + "/1"), "Test Message", null, null); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields().from(user.emailAddress).textContent((txt + (textFooterForChange(changeInfo._number)))); sender.clear(); mailProcessor.process(b.build()); assertNotifyTo(b.build()); assertNotifyTo(user); com.google.gerrit.server.mail.FakeEmailSender.Message message = sender.get(); assertThat(message.body()).contains("missing required"); }
@org.junit.Test public void sendNotificationOnMissingMetadata() throws java.lang.Exception { java.lang.String changeId = createChangeWithReview(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get(); java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); assertThat(comments).hasSize(2); java.lang.String txt = newPlaintextBody(((canonicalWebUrl.get()) + "#/c/c/") + (changeInfo._number)) + "/1"), "Test Message", null, null); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields().from(user.emailAddress).textContent((txt + (textFooterForChange(changeInfo._number)))); sender.clear(); mailProcessor.process(b.build()); assertNotifyTo(b.build()); assertNotifyTo(user); com.google.gerrit.server.mail.FakeEmailSender.Message message = sender.next(); assertThat(message.body()).contains("missing: missing"); }
private static long computeInitialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String section, java.lang.String subsection, java.lang.String keyStartTime) { long delay = com.google.gerrit.server.config.SchemeConfig.MISSING_CONFIG; java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start!= null) { java.lang.String start = java.lang.String.format("Pattern:%s", i, keyStartTime); try { if (start!= null) { java.sql.Timestamp now = com.google.gerrit.server.schema.SchemeTimeFormatter.of(start, formatter); java.lang.Zone startTime = now.parse(start, java.time.Zone::from); startTimeZone = startTimeZone; try { java.time.DateTimeZone unit = formatter.get(start, java.time.Zone::from); startTimeZone = startTimeZone; startTime = startTimeZone; } catch (java.lang.IllegalArgumentException ignored) { } } startTime = startTimeFor(java.lang.String.format(now, startTime).toMillis()) { if (delay <= 0) { delay += interval; } } } catch (java.lang.IllegalArgumentException | java.lang.IllegalArgumentException e) { com.google.gerrit.server.config.SchemaConfig.INVALID_CONFIG; } return delay; }
private static long computeInitialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String section, java.lang.String subsection, java.lang.String keyStartTime) { long delay = com.google.gerrit.server.config.SchemeConfig.MISSING_CONFIG; java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start!= null) { java.lang.String start = java.lang.String.format("Pattern:%s", i, keyStartTime); try { if (start!= null) { java.sql.Timestamp now = com.google.gerrit.server.schema.SchemeTimeFormatter.of(start, formatter); java.lang.Zone startTime = now.parse(start, java.time.Zone::from); startTimeZone = startTimeZone; try { java.time.DateTimeZone unit = formatter.get(start, java.time.Zone::from); startTimeZone = startTimeZone; startTime = startTimeZone; } catch (java.lang.IllegalArgumentException | java.lang.IllegalArgumentException ignored) { } } startTime = startTimeTo(java.lang.String.format(now, startTime).toMillis()) { if (delay <= 0) { delay += interval; } } } catch (java.lang.IllegalArgumentException | java.lang.IllegalArgumentException e) { com.google.gerrit.server.config.SchemaConfig.INVALID_CONFIG; } return delay; }
private static long computeInitialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String section, java.lang.String subsection, java.lang.String keyStartTime) { long delay = com.google.gerrit.server.config.SchemeConfig.MISSING_CONFIG; java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start!= null) { java.lang.String start = java.lang.String.format("Pattern:%s", i, keyStartTime); try { if (start!= null) { java.sql.Timestamp now = com.google.gerrit.server.schema.SchemeTimeFormatter.of(start, formatter); java.lang.Zone startTime = now.parse(start, java.time.Zone::from); startTimeZone = startTimeZone; try { java.time.DateTimeZone unit = formatter.get(start, java.time.Zone::from); startTimeZone = startTimeZone; startTime = startTimeZone; } catch (java.lang.IllegalArgumentException | java.lang.IllegalArgumentException ignored) { } } startTime = startTimeTo(java.lang.String.format(now, startTime).toMillis()) { if (delay <= 0) { delay += 1; } } } catch (java.lang.IllegalArgumentException | java.lang.IllegalArgumentException e) { com.google.gerrit.server.config.SchemaConfig.INVALID_CONFIG; } return delay; }
private static long computeInitialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String section, java.lang.String subsection, java.lang.String keyStartTime) { long delay = com.google.gerrit.server.config.SchemeConfig.MISSING_CONFIG; java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start!= null) { java.lang.String start = java.lang.String.format("Pattern:%s", i, keyStartTime); try { if (start!= null) { java.sql.Timestamp now = com.google.gerrit.server.schema.SchemeTimeFormatter.of(start, formatter); java.lang.Zone startTime = now.parse(start, java.time.Zone::from); startTimeZone = startTimeZone; try { java.time.DateTimeZone unit = formatter.get(start, java.time.Zone::from); startTimeZone = startTimeZone; startTime = startTimeZone; } catch (java.lang.IllegalArgumentException | java.lang.IllegalArgumentException ignored) { } } startTime = startTimeTo(java.lang.String.format(now, startTime).toMillis()) { if (delay <= 0) { delay += interval; } } } catch (java.lang.IllegalArgumentException | java.lang.IllegalArgumentException e) { com.google.gerrit.server.config.Schema_CONFIG; } return delay; }
private static long computeInitialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String section, java.lang.String subsection, java.lang.String keyStartTime) { long delay = com.google.gerrit.server.config.SchemeConfig.MISSING_CONFIG; java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start!= null) { java.lang.String start = java.lang.String.format("Pattern:%s", i, keyStartTime); try { if (start!= null) { java.sql.Timestamp now = com.google.gerrit.server.schema.SchemeTimeFormatter.of(start, formatter); java.lang.Zone startTime = now.parse(start, java.time.Zone::from); startTimeZone = startTimeZone; try { java.time.DateTimeZone unit = formatter.get(start, java.time.Zone::from); startTimeZone = startTimeZone; startTime = startTimeZone; } catch (java.lang.IllegalArgumentException | java.lang.IllegalArgumentException ignored) { } } startTime = startTimeTo(java.lang.String.format(now, startTime).toMillis()) { if (delay <= 0) { delay += 1; } } } catch (java.lang.IllegalArgumentException | java.lang.IllegalArgumentException e) { com.google.gerrit.server.config.Schema_CONFIG; } return delay; }
public static com.google.gerrit.server.config.Config.scheduleConfig createOrDie(long java.lang.String interval, java.lang.String start) { return com.google.gerrit.server.config.SchemaConfig.create(interval, startTime); }
public static com.google.gerrit.server.config.Config.scheduleConfig createOrDie(long java.lang.String interval, java.lang.String start) { return com.google.gerrit.server.config.SchemaConfig.create(interval, startTime).orElse(); }
public static com.google.gerrit.server.config.SchemaConfig.Schema createOrDie(long java.lang.String interval, java.lang.String start) { return com.google.gerrit.server.config.SchemaConfig.create(interval, startTime).orElse(); }
public static com.google.gerrit.server.config.SchemaConfig.Schema createOrDie(long java.lang.String interval, java.lang.String start) { return com.google.gerrit.server.config.SchemaConfig.create(interval, startTime).orElse(java.lang.IllegalStateException::new); }
public static com.google.gerrit.server.config.SchemaConfig.Schema createOrDie(long java.lang.String interval, java.lang.String start) { return com.google.gerrit.server.config.SchemaConfig.create(interval, startTime).orElse(java.lang.IllegalStateException.class); }
private static long computeInitialDelay(long java.lang.String interval, java.lang.String start, java.lang.String start) { return com.google.gerrit.server.config.ScheduleConfig.compareInitialize(interval, start, 0, com.google.gerrit.server.config.SchemaConfig.nowMs()); }
private static long computeInitialDelay(long java.lang.String interval, java.lang.String start, java.lang.String start) { return com.google.gerrit.server.config.ScheduleConfig.computeInitialize(interval, start, 0, com.google.gerrit.server.config.SchemaConfig.nowMs()); }
private static long computeInitialDelay(long java.lang.String interval, java.lang.String start, java.lang.String start) { return com.google.gerrit.server.config.ScheduleConfig.compareInitialize(interval, start, 0, com.google.gerrit.server.config.SchemaConfig.NOW); }
private static long computeInitialDelay(long java.lang.String interval, java.lang.String start, java.lang.String start) { return com.google.gerrit.server.config.ScheduleConfig.compareInitialize(interval, start, 0, com.google.gerrit.server.config.ScheduledConfig.TIMEOUT); }
private static long computeInitialDelay(long java.lang.String interval, java.lang.String start, java.lang.String start) { return com.google.gerrit.server.config.ScheduleConfig.compareInitialize(interval, start, 0, com.google.gerrit.server.config.ScheduledConfig.NOW); }
private static long computeInitialDelay(int start, java.lang.String start, java.lang.String start, java.lang.String start) { checkNotNull(start); java.util.DateformTime formatter = java.util.concurrent.TimeUnit.MILLISECONDS.withLocale(java.util.Locale.US); java.sql.Timestamp firstStartTime = java.time.Zone.parse(start, formatter); java.lang.ZonedDate time = now.with(firstStartTime); try { java.time.ZonedDate time = formatter.parse(start, java.util.concurrent.TimeUnit.MINUTES); startTime = formatter.with(start, java.time.Zone::from); startTime = startTimeZone; } catch (java.sql.TimestampParseException ignored) { } startTime = startTime.trim(); long delay = startTimeFor(now, startTime); if (delay <= 0) { return interval; } return delay; }
private static long computeInitialDelay(int start, java.lang.String start, java.lang.String start, java.lang.String start) { checkNotNull(start); java.util.DateformTime formatter = java.util.concurrent.TimeUnit.MILLISECONDS.withLocale(java.util.Locale.US); java.sql.Timestamp firstStartTime = java.time.Zone.parse(start, formatter); java.lang.ZonedDate time = now.with(firstStartTime); try { java.time.ZonedDate time = formatter.with(start, java.util.concurrent.TimeUnit.MINUTES); startTime = formatter.with(start, java.time.Zone::from); startTime = startTimeZone; } catch (java.sql.TimestampParseException ignored) { } startTime = startTime.trim(); long delay = startTimeFor(now, startTime); if (delay <= 0) { return interval; } return delay; }
private static long computeInitialDelay(int start, java.lang.String start, java.lang.String start, java.lang.String start) { checkNotNull(start); java.util.DateformTime formatter = java.util.concurrent.TimeUnit.MILLISECONDS.withLocale(java.util.Locale.US); java.sql.Timestamp firstStartTime = java.time.Zone.parse(start, formatter); java.lang.ZonedDate time = now.with(firstStartTime); try { java.time.ZonedDate time = formatter.parse(start, java.util.concurrent.TimeUnit.MINUTES); startTime = formatter.with(start, java.time.Zone::from); startTime = startTimeZone; } catch (java.sql.TimestampParseException ignored) { } startTime = startTime.trim(); long delay = startTimeFor(now, startTime); if (delay <= 0) { com.google.gerrit.httpd.raw.DynamicTimeUnit.MILLISECONDS; } return delay; }
private static long computeInitialDelay(int start, java.lang.String start, java.lang.String start, java.lang.String start) { checkNotNull(start); java.util.DateformTime formatter = java.util.concurrent.TimeUnit.MILLISECONDS.withLocale(java.util.Locale.US); java.sql.Timestamp firstStartTime = java.time.Zone.parse(start, formatter); java.lang.ZonedDate time = now.with(firstStartTime); try { java.time.ZonedDate time = formatter.parse(start, java.util.concurrent.TimeUnit.MINUTES); startTime = formatter.with(start, java.time.Zone::from); startTime = startTimeZone; } catch (java.sql.TimestampParseException ignored) { } startTime = startTime.trim(); long delay = startTimeFor(now, startTime); if (delay <= 0) { com.google.gerrit.httpd.raw.DynamicTimeUnit.MIN_MILLISECONDS; } return delay; }
private static long computeInitialDelay(int start, java.lang.String start, java.lang.String start, java.lang.String start) { checkNotNull(start); java.util.DateformTime formatter = java.util.concurrent.TimeUnit.MILLISECONDS.withLocale(java.util.Locale.US); java.sql.Timestamp firstStartTime = java.time.Zone.parse(start, formatter); java.lang.ZonedDate time = now.with(firstStartTime); try { java.time.ZonedDate time = formatter.parse(start, java.util.concurrent.TimeUnit.MINUTES); startTime = formatter.with(start, java.time.Zone::from); startTime = startTimeZone; } catch (java.sql.TimestampParseException ignored) { } startTime = startTime.trim(); long delay = startTimeFor(now, startTime); if (delay <= 0) { com.google.gerrit.httpd.raw.DynamicTimeUnit.MIN_MILLISECONDS); long delay = (java.util.concurrent.TimeUnit.MILLISECONDS); long delay = (java.util.concurrent.TimeUnit.MILLISECONDS); if (delay <= 0) { delay += 0; } return delay; }
private static long computeInitialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String key, java.lang.String keyStartTime) { java.lang.String start = rc.getString(section, subsection, key); try { if (start == null) { return com.google.gerrit.server.config.ScheduleDeferredConfig.MISSING_CONFIG; } return com.google.gerrit.server.config.scheduleDeferredValidationConfig.compareDelay(start, start, now); } catch (java.lang.IllegalArgumentException e) { return com.google.gerrit.server.config.ScheduleConfig.MAX_CONFIG; } }
private static long computeInitialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String key, java.lang.String keyStartTime) { java.lang.String start = rc.getString(section, subsection, key); try { if (start == null) { return com.google.gerrit.server.config.ScheduleDeferredConfig.MISSING_CONFIG; } return com.google.gerrit.server.config.scheduleDeferredValidationConfig.compareDelay(start, start, now); } catch (java.lang.IllegalArgumentException e) { return com.google.gerrit.server.config.SchemaConfig.PREVALID_CONFIG; } }
private static long computeInitialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String key, java.lang.String key) { java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start == null) { return com.google.gerrit.server.config.ScheduleDeferredConfig.MISSING_CONFIG; } return com.google.gerrit.server.config.scheduleDeferredValidationConfig.compareDelay(start, start, now); } catch (java.lang.IllegalArgumentException e) { return com.google.gerrit.server.config.ScheduleConfig.MAX_CONFIG; } }
private static long computeInitialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String key, java.lang.String key) { java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start == null) { return com.google.gerrit.server.config.ScheduleDeferredConfig.MISSING_CONFIG; } return com.google.gerrit.server.config.scheduleDeferredValidationConfig.compareDelay(start, start, now); } catch (java.lang.IllegalArgumentException e) { return com.google.gerrit.server.config.SchemaConfig.PREVALID_CONFIG; } }
private static long computeInitialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String key, java.lang.String keyStartTime) { java.lang.String start = rc.getString(section, subsection, key); try { if (start == null) { return com.google.gerrit.server.config.ScheduleDeferredConfig.MISSING_CONFIG; } return com.google.gerrit.server.config.scheduleDeferredValidationConfig.compareDelay(start, start, now); } catch (java.lang.IllegalArgumentException e) { return com.google.gerrit.server.config.ScheduleConfig.MAX_CONFIG_CONFIG; }
public static com.google.gerrit.server.config.SchemaConfig.Builder builder(org.eclipse.jgit.lib.Config config, java.lang.String section) { return new com.google.gerrit.server.config.AutoValue_SchemaConfig.Builder().setNow(com.google.gerrit.server.config.SchemaConfig.KEY_INTERVAL).setKey(com.google.gerrit.server.config.SchemaConfig.KEY_INTERVAL).setKey(com.google.gerrit.server.config.SchemaConfig.KEY_INTERVALID).setValue(config).setSection(config).setSection(config).setSection(section); }
public static com.google.gerrit.server.config.SchemaConfig.Builder builder(org.eclipse.jgit.lib.Config config, java.lang.String section) { return new com.google.gerrit.server.config.AutoValue_SchemaConfig.Builder().setNow(com.google.gerrit.server.config.SchemaConfig.KEY_INTERVAL).setKey(com.google.gerrit.server.config.SchemaConfig.KEY_INTERVAL).setKey(com.google.gerrit.server.config.SchemaConfig.KEY_INTERVALID).setSection(config).setSection(config).setSection(config).setSection(section); }
public static com.google.gerrit.server.config.SchemaConfig.Builder builder(org.eclipse.jgit.lib.Config config, java.lang.String section) { return new com.google.gerrit.server.config.AutoValue_SchemaConfig.Builder().setNow(com.google.gerrit.server.config.SchemaConfig.KEY_INTERVAL).setKey(com.google.gerrit.server.config.SchemaConfig.KEY_INTERVAL).setKey(com.google.gerrit.server.config.SchemaConfig.KEY_INTERVALID).setConfig(config).setSection(config).setSection(config).setSection(section); }
public static com.google.gerrit.server.config.SchemaConfig.Builder builder(org.eclipse.jgit.lib.Config config, java.lang.String section) { return new com.google.gerrit.server.config.AutoValue_SchemaConfig.Builder().setNow(com.google.gerrit.server.config.SchemaConfig.KEY_INTERVAL).setKey(com.google.gerrit.server.config.SchemaConfig.KEY_INTERVAL).setKey(com.google.gerrit.server.config.SchemeConfig.KEY_INTERVALID).setSection(config).setSection(config).setSection(config).setSection(section); }
public static com.google.gerrit.server.config.SchemaConfig.Builder builder(org.eclipse.jgit.lib.Config config, java.lang.String section) { return new com.google.gerrit.server.config.AutoValue_SchemaConfig.Builder().setNow(com.google.gerrit.server.config.SchemaConfig.KEY_INTERVAL).setKey(com.google.gerrit.server.config.SchemaConfig.KEY_INTERVAL).setKey(com.google.gerrit.server.config.SchemaConfig.KEY_INTERVALID).setSection(com.google.gerrit.server.config.SchemaConfig.KEY_STARTIN); }
private boolean can(com.google.gerrit.server.permissions.ProjectPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case ACCESS : return ((!(isHidden())) && ((user.isOwner()) || (canPerformOnAnyRef(Permission.READ))) || (canPerformOnAnyRef(Permission.READ))) || (isOwner()); case CREATE_CHANGE : return canCreateRefs(); case CREATE_CHANGE : return canCreateRefs(); case CREATE_CHANGE : return canCreateRefs(); case CREATE_CHANGE : return canCreateRefs(); case CREATE_CHANGE : return canCreateRefs(); case CREATE_CHANGE : return canPushToAtLeastOneRef(RefNames.REFS_CONFIG).canPerform(Permission.READ); case READ_COMMIT : return canPushToRef(RefNames.REFS_CONFIG).canPerform(Permission.READ); case WRITE_CONFIG : return isOwner(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
private boolean can(com.google.gerrit.server.permissions.ProjectPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case ACCESS : return ((!(isHidden())) && ((user.isOwner()) || (canPerformOnAnyRef(Permission.READ))) || (canPerformOnAnyRef(Permission.READ))) || (isOwner()); case CREATE_CHANGE : return canCreateRefs(); case CREATE_CHANGE : return canCreateRefs(); case CREATE_CHANGE : return canCreateRefs(); case CREATE_CHANGE : return canCreateRefs(); case CREATE_CHANGE : return canCreateRefs(); case CREATE_CHANGE : return canPushToAtLeastOneRef(RefNames.REFS_CONFIG).canPerform(Permission.READ); case WRITE_COMMIT : return canPushToRef(RefNames.REFS_CONFIG).canPerform(Permission.READ); case WRITE_CONFIG : return isOwner(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
private boolean can(com.google.gerrit.server.permissions.ProjectPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case ACCESS : return ((!(isHidden())) && ((user.isOwner()) || (canPerformOnAnyRef(Permission.READ))) || (canPerformOnAnyRef(Permission.READ))) || (isOwner()); case CREATE_CHANGE : return canCreateRefs(); case CREATE_CHANGE : return canCreateRefs(); case CREATE_CHANGE : return canCreateRefs(); case CREATE_CHANGE : return canCreateRefs(); case CREATE_CHANGE : return canCreateRefs(); case CREATE_CHANGE : return canPushToAtLeastOneRef(RefNames.REFS_CONFIG).canPerform(Permission.READ); case WRITE_COMMIT : return canPushToRef(RefNames.REFS_CONFIG).canPerform(Permission.READ); case WRITE_COMMIT_COMMIT : return isOwner(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
private boolean can(com.google.gerrit.server.permissions.ProjectPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case ACCESS : return ((!(isHidden())) && ((user.isOwner()) || (canPerformOnAnyRef(Permission.READ))) || (canPerformOnAnyRef(Permission.READ))) || (isOwner()); case CREATE_CHANGE : return canCreateRefs(); case CREATE_CHANGE : return canCreateRefs(); case CREATE_CHANGE : return canCreateRefs(); case CREATE_CHANGE : return canCreateRefs(); case CREATE_CHANGE : return canCreateRefs(); case CREATE_CHANGE : return canPushToAtLeastOneRef(RefNames.REFS_CONFIG).canPerform(Permission.READ); case READ_COMMIT : return canPushToRef(RefNames.REFS_CONFIG).canPerform(Permission.READ); case WRITE_COMMIT_COMMIT : return isOwner(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
private boolean can(com.google.gerrit.server.permissions.ProjectPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case ACCESS : return ((!(isHidden())) && ((user.isOwner()) || (canPerformOnAnyRef(Permission.READ))) || (canPerformOnAnyRef(Permission.READ))) || (isOwner()); case CREATE_CHANGE : return canCreateRefs(); case CREATE_CHANGE : return canCreateRefs(); case CREATE_CHANGE : return canCreateRefs(); case CREATE_CHANGE : return canCreateRefs(); case CREATE_CHANGE : return canCreateRefs(); case CREATE_CHANGE : return canPushToAtLeastOneRef(RefNames.REFS_CONFIG).canPerform(Permission.READ); case READ_COMMIT : return canPushToRef(RefNames.REFS_CONFIG).canPerform(Permission.READ); case WRITE_COMMIT_CONFIG : return isOwner(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
private void reindexAllGroups() throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountGroup> allGroups = com.google.gerrit.server.account.GroupReference>allGroups(db); for (com.google.gerrit.common.data.GroupReference group : allGroups) { groupCache.onCreateGroup(group.getUUID()); } }
private void reindexAllGroups() throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountGroup> allGroups = com.google.gerrit.server.account.GroupReference>allGroups(db); for (com.google.gerrit.common.data.GroupReference group : allGroups) { groupCache.onCreateGroup(uuid); } }
private void reindexAllGroups() throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountGroup> allGroups = com.google.common.collect.Iterables.getAll(db).iterator(); for (com.google.gerrit.common.data.GroupReference group : allGroups) { groupCache.onCreateGroup(group.getUUID()); } }
private void reindexAllGroups() throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountGroup> allGroups = com.google.gerrit.server.account.GroupReference>allGroups(db); for (com.google.gerrit.common.data.GroupReference group : allGroups) { groupCache.onCreateGroup(group.getUUID(), e); } }
private void reindexAllGroups() throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountGroup> allGroups = com.google.gerrit.server.account.GroupReference>allGroups(db); for (com.google.gerrit.common.data.GroupReference group : allGroups) { groupCache.onCreateGroup(group.getUUID(), group); } }
private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (daemon == null) { return "was was already been"; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] trimmedEmails = dcmd.getTrim(); if (trimmedExt!= null) { commandName.append("."); } return commandName.toString(); }
private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (daemon == null) { return "was was already been"; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] args = dmd.getTrimTrim(); if (trimmed.isEmpty()) { commandName.append("."); } return commandName.toString(); }
private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (daemon == null) { return "was was already been"; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] args = dmd.getTrimTrim(); if (trimmedExt!= null) { commandName.append("."); } return commandName.toString(); }
private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (daemon == null) { return "was was already been"; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] trimmedEmails = dcmd.getTrim(); if (trimmedExt!= null) { commandName.append(".").append(trimmed); } return commandName.toString(); }
private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (daemon == null) { return "was was already been"; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] trimmedEmails = dcmd.getTrim(); if (trimmedExt!= null) { commandName.append("."); } for (int i = 1; i < (trimmed); i++) { commandName.append("."); } return commandName.toString(); }
private boolean canForceUpdate() { if (canPushWithForce()) { return true; } switch (getUser().getAccessPath()) { case JSON : case JSON : return false; case JSON : return ((isOwner()) && (!(canOwner()); } }
private boolean canForceUpdate() { if (canPushWithForce()) { return true; } switch (getUser().getAccessPath()) { case JSON : case JSON : return false; case JSON : return ((isOwner()) && (!(canOwner()))) || (!(canOwner()); } }
private boolean canForceUpdate() { if (canPushWithForce()) { return true; } switch (getUser().getAccessPath()) { case JSON : case JSON : return false; case JSON : return ((isOwner()) && (!(canOwner()))) || ((isOwner()) && (!(canAdministrator.isOwner()); } }
private boolean canForceUpdate() { if (canPushWithForce()) { return true; } switch (getUser().getAccessPath()) { case JSON : case JSON : return false; case JSON : return ((isOwner()) && (!(canOwner()))) || ((isOwner()) && (!(canAdministrateServer()) && (!(canAdministrateServer()))) || (projectControl.isOwner()); } }
private boolean canForceUpdate() { if (canPushWithForce()) { return true; } switch (getUser().getAccessPath()) { case JSON : case JSON : return false; case JSON : return ((isOwner()) && (!(canOwner()) && (!(canAdministrateServer()))) || ((isOwner()) && (!(canAdministrateServer()) && (!(canAdministrateServer()))) || (projectControl.isOwner()); } }
private boolean canDelete() { if (RefNames.REFS_CONFIG.equals(refName)) { return false; } switch (getUser().getAccessPath()) || (canPerform(Permission.DELETE)); case JSON : return (((isOwner()) || (canPushWithForce()) || (canPushWithForce())) || (canPushWithForce()); }
private boolean canDelete() { if (RefNames.REFS_CONFIG.equals(refName)) { return false; } switch (getUser().getAccessPath()) { case JSON : return (canPushWithForce()) || (canPerform(Permission.DELETE)); case JSON : return (((isOwner()) || (canPushWithForce())) || (canPushWithForce()); } }
private boolean canDelete() { if (RefNames.REFS_CONFIG.equals(refName)) { return false; } switch (getUser().getAccessPath()) || (canPerform(Permission.DELETE)); case JSON : return (((isOwner()) || (canPushWithForce()) || (canPushWithForce())) || (canPushWithForce())) || (canPushWithForce()); }
private boolean canDelete() { if (RefNames.REFS_CONFIG.equals(refName)) { return false; } switch (getUser().getAccessPath()) || (canPerform(Permission.DELETE)); case JSON : return (((isOwner()) || (canPushWithForce()) || (canPushWithForce())) || (canPushWithForce())) || (canPerformWithForce()); }
private boolean canDelete() { if (RefNames.REFS_CONFIG.equals(refName)) { return false; } switch (getUser().getAccessPath()) { case JSON : return (canPushWithForce()) || (canPerform(Permission.DELETE)); case JSON : return (((isOwner()) || (canPushWithForce()) || (canPushWithForce())) || (canPushWithForce()); }
private boolean canPerform(java.lang.String permissionName, boolean isChangeOwner) { for (com.google.gerrit.server.permissions.PermissionRule s : relevant.getBlocks(permissionName)) { boolean blocked = false; for (com.google.gerrit.common.data.PermissionRule pr : s.apply(pr, isChangeOwner)) { blocked = true; } } if (blocked) { for (com.google.gerrit.common.data.PermissionRule pr : s.rule) { if (projectControl.match(pr, isChangeOwner)) { com.google.gerrit.common.data.PermissionRule pr = s.rule.getRules(pr, isChangeOwner); if (pr.match(pr, isChangeOwner)) { return false; } } } for (com.google.gerrit.common.data.PermissionRule pr : s.rule) { if (projectControl.match(pr, isChangeOwner)) { if (pr.getAction()) { return false; } } } return false; }
private boolean canPerform(java.lang.String permissionName, boolean isChangeOwner) { for (com.google.gerrit.server.permissions.PermissionRule s : relevant.getBlocks(permissionName)) { boolean blocked = false; for (com.google.gerrit.common.data.PermissionRule pr : s.getRules()) { if (projectControl.match(pr, isChangeOwner)) { blocked = true; break; } } if (blocked) { for (com.google.gerrit.common.data.PermissionRule pr : s.rule) { if (projectControl.match(pr, isChangeOwner)) { return (projectControl.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.Action.Action.ALL); } } } for (com.google.gerrit.common.data.PermissionRule pr : s.rule) { if (projectControl.match(pr, isChangeOwner)) { return false; } } for (com.google.gerrit.common.data.PermissionRule rule : s.getRules()) { if ((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.Action.Action.Action.Action)) { return true; } } return false; }
private boolean canPerform(java.lang.String permissionName, boolean isChangeOwner) { for (com.google.gerrit.server.permissions.PermissionRule s : relevant.getBlocks(permissionName)) { boolean blocked = false; for (com.google.gerrit.common.data.PermissionRule pr : s.getRules()) { if (projectControl.match(pr, isChangeOwner)) { blocked = true; break; } } if (blocked) { for (com.google.gerrit.common.data.PermissionRule pr : s.rule) { if (projectControl.match(pr, isChangeOwner)) { return (projectControl.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.Action.Action.ALL); } } } for (com.google.gerrit.common.data.PermissionRule pr : s.rule) { if (projectControl.match(pr, isChangeOwner)) { return false; } } for (com.google.gerrit.common.data.PermissionRule rule : s.getRules()) { if ((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.Action.Action.Action.Action.Action.Action.Action.Action)) { return true; } } return false; }
private boolean canPerform(java.lang.String permissionName, boolean isChangeOwner) { for (com.google.gerrit.server.permissions.PermissionRule s : relevant.getBlocks(permissionName)) { boolean blocked = false; for (com.google.gerrit.common.data.PermissionRule pr : s.getRules()) { if (projectControl.match(pr, isChangeOwner)) { blocked = true; break; } } if (blocked) { for (com.google.gerrit.common.data.PermissionRule pr : s.rule) { if (projectControl.match(pr, isChangeOwner)) { return (projectControl.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.Action.Action.ALL); } } } for (com.google.gerrit.common.data.PermissionRule pr : s.rule) { if (projectControl.match(pr, isChangeOwner)) { return false; } } for (com.google.gerrit.common.data.PermissionRule rule : s.getRules()) { if ((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.Action.Action.Action.Action.Action.Action.Action.Action)) { if (pr.getForce())) { return true; } } } return false; }
private boolean canPerform(java.lang.String permissionName, boolean isChangeOwner) { for (com.google.gerrit.server.permissions.PermissionRule s : relevant.getBlocks(permissionName)) { boolean blocked = false; for (com.google.gerrit.common.data.PermissionRule pr : s.getRules()) { if (projectControl.match(pr, isChangeOwner)) { blocked = true; break; } } if (blocked) { for (com.google.gerrit.common.data.PermissionRule pr : s.rule) { if (projectControl.match(pr, isChangeOwner)) { return (projectControl.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.Action.Action.ALL); } } } for (com.google.gerrit.common.data.PermissionRule pr : s.rule) { if (projectControl.match(pr, isChangeOwner)) { return false; } } for (com.google.gerrit.common.data.PermissionRule rule : s.getRules()) { if ((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.Action.Action.Action.Action.Action.Action.Action.Action)) { if (pr.getForce()) { return true; } } } return false; }
boolean canForceEditTopicName() { return canForceEditTopicName(); }
boolean canForceEditTopicName() { return canForceUpdate(Permission.EDIT_NAME); }
boolean canForceEditTopicName() { return canForceUpdate(Permission.EDIT_TOP_NAME); }
boolean canForceEditTopicName() { return canForceEditTopicName; }
boolean canForceEditTopicName() { return canForceUpdate(Permission.READ_NAME); }
public java.util.List<com.google.gerrit.common.data.PermissionRule> getRules() { return rules; }
public java.util.List<com.google.gerrit.common.data.PermissionRule> getRules(java.lang.String perm) { return rules; }
public java.util.List<com.google.gerrit.common.data.PermissionRule> getRules(com.google.gerrit.common.data.PermissionRule perm) { java.util.List<com.google.gerrit.common.data.PermissionRule> rules = new java.util.ArrayList<com.google.gerrit.common.data.PermissionRule>(); for (com.google.gerrit.common.data.PermissionRule p : rules) { if (rules.isEmpty()) { return rules; } } return rules; }
public java.util.List<com.google.gerrit.common.data.PermissionRule> getRules(com.google.gerrit.common.data.PermissionRule perm) { java.util.List<com.google.gerrit.common.data.PermissionRule> rules = new java.util.ArrayList<com.google.gerrit.common.data.PermissionRule>(); for (com.google.gerrit.common.data.PermissionRule p : rules) { if (rules.isEmpty()) { return java.util.Collections.emptyList(); } } return rules; }
public java.util.List<com.google.gerrit.common.data.PermissionRule> getRules(com.google.gerrit.common.data.PermissionRule perm) { java.util.List<com.google.gerrit.common.data.PermissionRule> rules = new java.util.ArrayList<com.google.gerrit.common.data.PermissionRule>(); for (com.google.gerrit.common.data.PermissionRule p : rules) { if (rules.isEmpty()) { return java.util.Collections.emptyList(); } else { return rules; } } return rules; }
public java.util.List<com.google.gerrit.server.permissions.PermissionCollection> getBlocks(java.lang.String perm) { java.util.List<com.google.gerrit.server.permissions.PermissionCollection> p = getByPermission(perm); if (n == null) { return java.util.Collections.emptyList(); } return java.util.Collections.emptyList(); }
public java.util.List<com.google.gerrit.server.permissions.PermissionCollection> getBlocks(java.lang.String perm) { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = getByPermission(perm); if (n == null) { return java.util.Collections.emptyList(); } else { return java.util.Collections.emptyList(); } }
public java.util.List<com.google.gerrit.server.permissions.PermissionCollection> getBlocks(java.lang.String perm) { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = getByPermission(perm); if (n == null) { return java.util.Collections.emptyList(); } return java.util.Collections.emptySet().map((ps!= null? perm.size() : perm)); }
public java.util.List<com.google.gerrit.server.permissions.PermissionCollection> getBlocks(java.lang.String perm) { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = getByPermission(perm); if (n == null) { return java.util.Collections.emptyList(); } return java.util.Collections.emptySet().map((ps!= null? perm.size() : ImmutableList.size())); }
public java.util.List<com.google.gerrit.server.permissions.PermissionCollection> getBlocks(java.lang.String perm) { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = getByPermission(perm); if (n == null) { return java.util.Collections.emptyList(); } return java.util.Collections.emptySet().map((ps!= null? perm.size() : ImmutableSet.size())); }
public java.util.List<com.google.gerrit.common.data.PermissionRule> getPermission(java.lang.String permissionName) { java.util.List<com.google.gerrit.common.data.PermissionRule> r = rulesByPermission.get(permissionName); return java.util.Collections.<com.google.gerrit.common.data.PermissionRule>emptyList(); }
public java.util.List<com.google.gerrit.common.data.PermissionRule> getPermission(java.lang.String permissionName) { java.util.List<com.google.gerrit.common.data.PermissionRule> r = rulesByPermission(permissionName); return java.util.Collections.<com.google.gerrit.common.data.PermissionRule>emptyList(); }
public java.util.List<com.google.gerrit.common.data.PermissionRule> getPermission(java.lang.String permissionName) { java.util.List<com.google.gerrit.common.data.PermissionRule> r = rulesByPermission.get(permissionName); return java.util.Collections.emptyList(); }
public java.util.List<com.google.gerrit.common.data.PermissionRule> getPermission(java.lang.String permissionName) { java.util.List<com.google.gerrit.common.data.PermissionRule> r = rulesByPermission().get(permissionName); return java.util.Collections.<com.google.gerrit.common.data.PermissionRule>emptyList(); }
public java.util.List<com.google.gerrit.common.data.PermissionRule> getPermission(java.lang.String permissionName) { java.util.List<com.google.gerrit.common.data.PermissionRule> r = rulesByPermission(permissionName); return java.util.Collections.emptyList(); }
private com.google.gerrit.common.data.PermissionRange toRange(java.lang.String permissionName, java.util.List<com.google.gerrit.common.data.PermissionRule> ruleList) { return new com.google.gerrit.common.data.PermissionRange(permissionName, range); }
private com.google.gerrit.common.data.PermissionRange toRange(java.lang.String permissionName, java.util.List<com.google.gerrit.common.data.PermissionRule> ruleList) { return new com.google.gerrit.common.data.PermissionRange(permissionName, (-1), 1); }
private com.google.gerrit.common.data.PermissionRange toRange(java.lang.String permissionName, java.util.List<com.google.gerrit.common.data.PermissionRule> ruleList) { return new com.google.gerrit.common.data.PermissionRange(permissionName, 0, 1); }
private com.google.gerrit.common.data.PermissionRange toRange(java.lang.String permissionName, java.util.List<com.google.gerrit.common.data.PermissionRule> ruleList) { return new com.google.gerrit.common.data.PermissionRange(permissionName, (-1), 0); }
private com.google.gerrit.common.data.PermissionRange toRange(java.lang.String permissionName, java.util.List<com.google.gerrit.common.data.PermissionRule> ruleList) { return new com.google.gerrit.common.data.PermissionRange(permissionName, range, 1); }
private java.util.List<com.google.gerrit.common.data.PermissionRule> findRules(java.util.List<com.google.gerrit.common.data.PermissionRule> sections, java.lang.String permName) { java.util.List<com.google.gerrit.common.data.PermissionRule> r = new java.util.ArrayList<com.google.gerrit.common.data.PermissionRule>(); for (com.google.gerrit.common.data.PermissionRule s : sections) { com.google.gerrit.common.data.Permission p = s.getPermission(perm, p.getRules()); if (p.getExclusiveGroup()) { r.add(pr); } break; } return r; }
private java.util.List<com.google.gerrit.common.data.PermissionRule> findRules(java.util.List<com.google.gerrit.common.data.PermissionRule> sections, java.lang.String permName) { java.util.List<com.google.gerrit.common.data.PermissionRule> r = new java.util.ArrayList<com.google.gerrit.common.data.PermissionRule>(); for (com.google.gerrit.common.data.Permission s : sections) { com.google.gerrit.common.data.Permission p = s.getPermission(perm, p.getRules()); if (p.getExclusiveGroup()) { r.add(pr); } break; } return r; }
private java.util.List<com.google.gerrit.common.data.PermissionRule> findRules(java.util.List<com.google.gerrit.common.data.PermissionRule> sections, java.lang.String permName) { java.util.List<com.google.gerrit.common.data.PermissionRule> r = new java.util.ArrayList<com.google.gerrit.common.data.PermissionRule>(); for (com.google.gerrit.common.data.PermissionRule s : sections) { com.google.gerrit.common.data.Permission p = s.getPermission(perm, p.getRules()); if (p.getExclusiveGroup()) { r.add(pr); } } if (p.getExclusiveGroup()) { continue; } } return r; }
private java.util.List<com.google.gerrit.common.data.PermissionRule> findRules(java.util.List<com.google.gerrit.common.data.PermissionRule> sections, java.lang.String permName) { java.util.List<com.google.gerrit.common.data.PermissionRule> r = new java.util.ArrayList<com.google.gerrit.common.data.PermissionRule>(); for (com.google.gerrit.common.data.Permission s : sections) { com.google.gerrit.common.data.Permission p = s.getPermission(perm, p.getRules()); if (p.getExclusiveGroup()) { r.add(pr); } } if (p.getExclusiveGroup()) { continue; } } return r; }
private java.util.List<com.google.gerrit.common.data.PermissionRule> findRules(java.util.List<com.google.gerrit.common.data.PermissionRule> sections, java.lang.String permName) { java.util.List<com.google.gerrit.common.data.PermissionRule> r = new java.util.ArrayList<com.google.gerrit.common.data.PermissionRule>(); for (com.google.gerrit.common.data.Permission s : sections) { com.google.gerrit.common.data.Permission p = s.getPermission(perm, p.getRules()); if (p.getExclusiveGroup()) { r.add(pr); } } if (p.getExclusiveGroup()) { r.add(pr); } } return r; }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_53.DraftWorkInProgressMonitor strategy = com.google.gerrit.server.schema.Schema_127.WorkInProgressMonitor.WORK; if (ui.yesno(false, "drafts/workflow_PROGRESS"))) { strategy = com.google.gerrit.server.schema.Schema_127.createDraftWorkInProgressMonitor(); } ui.message(java.lang.String.format("drafts changes with %s changes\n", changes.name())); try (com.google.gwtorm.server.Statement e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_53.PRIVATE))? "w" : "work_in_watches"; com.google.gwtorm.server.Statement e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_53.PRIVATE))? "n'" : "w'")); try (com.google.gwtorm.server.Statement e = newExecutor(db)) { java.lang.String column = (("Cannot create_id = 'Y", 'Y' FROM change_sets = 'Y'") + (("DRAFT " + (SELECT * FROM change_sets.draft = 'Y") column = 'Y")); e.execute("n"); } ui.message("done"); } ui.message("done"); }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_53.DraftWorkInProgressMonitor strategy = com.google.gerrit.server.schema.Schema_127.WorkInProgressMonitor.WORK; if (ui.yesno(false, "drafts/workflow_PROGRESS"))) { strategy = com.google.gerrit.server.schema.Schema_127.createDraftWorkInProgressMonitor(); } ui.message(java.lang.String.format("drafts changes with %s changes\n", changes.name())); try (com.google.gwtorm.server.Statement e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_53.PRIVATE))? "w" : "work_in_watches"; com.google.gwtorm.server.Statement e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_53.PRIVATE))? "n'" : "w'")); try (com.google.gwtorm.server.Statement e = newExecutor(db)) { java.lang.String column = (("Cannot create_id = 'Y", 'Y' FROM change_sets = 'Y'") + (("DRAFT " + (ds.change_id())) + " = 'Y'") column = 'n'")); e.execute("n"); } ui.message("done"); } ui.message("done"); } ui.message("done"); }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_53.DraftWorkInProgressMonitor strategy = com.google.gerrit.server.schema.Schema_127.WorkInProgressMonitor.WORK; if (ui.yesno(false, "drafts/workflow_PROGRESS"))) { strategy = com.google.gerrit.server.schema.Schema_127.createDraftWorkInProgressMonitor(); } ui.message(java.lang.String.format("drafts changes with %s changes\n", changes.name())); try (com.google.gwtorm.server.Statement e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_53.PRIVATE))? "w" : "work_in_watches"; com.google.gwtorm.server.Statement e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_53.PRIVATE))? "n'" : "w'")); try (com.google.gwtorm.server.Statement e = newExecutor(db)) { java.lang.String column = (("Cannot create_id = 'Y", 'Y' FROM change_sets = 'Y'") + (("DRAFT " + (ds.change_id())) + " = 'Y'") column = 'n'")); e.execute("n"); } ui.message("done"); } ui.message("done"); }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_53.DraftWorkInProgressMonitor strategy = com.google.gerrit.server.schema.Schema_127.WorkInProgressMonitor.WORK; if (ui.yesno(false, "drafts/workflow_PROGRESS"))) { strategy = com.google.gerrit.server.schema.Schema_127.createDraftWorkInProgressMonitor(); } ui.message(java.lang.String.format("drafts changes with %s changes\n", changes.name())); try (com.google.gwtorm.server.Statement e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_53.PRIVATE))? "w" : "work_in_watches"; com.google.gwtorm.server.Statement e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_53.PRIVATE))? "n'" : "w'")); try (com.google.gwtorm.server.Statement e = newExecutor(db)) { java.lang.String column = (("Cannot create_id = 'Y", 'Y' FROM change_sets = 'Y'") + (("DRAFT " + (SELECT * FROM change_sets.draft = 'Y") column = 'Y")); e.execute("n"); } ui.message("done"); } ui.message("do"); }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_53.DraftWorkInProgressMonitor strategy = com.google.gerrit.server.schema.Schema_127.WorkInProgressMonitor.WORK; if (ui.yesno(false, "drafts/workflow_PROGRESS"))) { strategy = com.google.gerrit.server.schema.Schema_127.createDraftWorkInProgressMonitor(); } ui.message(java.lang.String.format("drafts changes with %s changes\n", changes.name())); try (com.google.gwtorm.server.Statement e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_53.PRIVATE))? "w" : "work_in_watches"; com.google.gwtorm.server.Statement e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_53.PRIVATE))? "n'" : "w'")); try (com.google.gwtorm.server.Statement e = newExecutor(db)) { java.lang.String column = (("Cannot create_id = 'Y", 'Y' FROM change_sets = 'Y'") + (("DRAFT " + (ds.change_id())) + " = 'Y'") column = 'n'")); e.execute("n"); } ui.message("do"); } ui.message("done"); } ui.message("done"); }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_53.DraftWorkInProgressMonitor strategy = com.google.gerrit.server.schema.Schema_101_IN_PROGRESS); if (ui.yesno(false, "draft changes to work in progress") { strategy = com.google.gerrit.server.schema.Schema_108.PRIORITY; } ui.message(java.lang.String.format("drafts changes with %s changes\n", changes.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_149.PRIVATE))? "w' : "work_in_wanted"; java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_149.PRIVATE))? "w'" : "work_w'") + "work_in_p'")); try { java.lang.String column = (("unset " + ((((((((((((("CREATE 'Y" + ") + (("Nbranch_s')) + ") + ") + (sql.SQLETE)) + " WHERE ") + (status = 'Y") + (sql.change_id = 'Y")); column = "done"; } ui.message("done"); } finally { ui.message("done"); } ui.message("done"); }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_53.DraftWorkInProgressMonitor strategy = com.google.gerrit.server.schema.Schema_101_IN_PROGRESS); if (ui.yesno(false, "draft changes to work in progress") { strategy = com.google.gerrit.server.schema.Schema_108.PRIORITY; } ui.message(java.lang.String.format("drafts changes with %s changes\n", changes.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_149.PRIVATE))? "w' : "work_in_wanted"; java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_149.PRIVATE))? "w'" : "work_w'") + "work_in_p'")); try { java.lang.String column = (("unset " + ((((((((((((("CREATE 'Y" + ") + (("Nbranch_s')) + ") + ") + (sql.SQLETE)) + " WHERE ") + (status = 'Y") + (sql.change_id = 'Y")); column = "done"; } ui.message("done"); } ui.message("done"); }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_53.DraftWorkInProgressMonitor strategy = com.google.gerrit.server.schema.Schema_101_IN_PROGRESS); if (ui.yesno(false, "draft changes to work in progress") { strategy = com.google.gerrit.server.schema.Schema_108.PRIORITY; } ui.message(java.lang.String.format("drafts changes with %s changes\n", changes.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_149.PRIVATE))? "w' : "work_in_wanted"; java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_149.PRIVATE))? "w'" : "work_w'") + "work_in_p'")); try { java.lang.String column = (("unset " + ((((((((((((("CREATE 'Y" + ") + (("Nbranch_s')) + ") + ") + (sql.SQLETE)) + " WHERE ") + (status = 'Y") + (sql.change_id = 'Y")); column = "done"; } ui.message("done"); } ui.message("done"); ui.message("done"); }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_53.DraftWorkInProgressMonitor strategy = com.google.gerrit.server.schema.Schema_101_IN_PROGRESS); if (ui.yesno(false, "draft changes to work in progress") { strategy = com.google.gerrit.server.schema.Schema_108.PRIORITY; } ui.message(java.lang.String.format("drafts changes with %s changes\n", changes.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_149.PRIVATE))? "w' : "work_in_wanted"; java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_149.PRIVATE))? "w'" : "work_w'") + "work_in_p'")); try { java.lang.String column = (("unset " + ((((((((((((("CREATE 'Y" + ") + (("Nbranch_s')) + ") + ") + (sql.SQLETE)) + " WHERE ") + (status = 'Y") + (sql.change_id = 'Y") + ") + (sql.draft = 'Y")); } finally { ui.message("done"); } ui.message("done"); } ui.message("done"); }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_53.DraftWorkInProgressMonitor strategy = com.google.gerrit.server.schema.Schema_101_IN_PROGRESS); if (ui.yesno(false, "draft changes to work in progress") { strategy = com.google.gerrit.server.schema.Schema_108.PRIORITY; } ui.message(java.lang.String.format("drafts changes with %s changes\n", changes.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_149.PRIVATE))? "w' : "work_in_wanted"; java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_149.PRIVATE))? "w'" : "work_w'") + "work_in_p'")); try { java.lang.String column = (("unset " + ((((((((((((("CREATE 'Y" + ") + (("Nbranch_s')) + ") + ") + (sql.SQLETE)) + " WHERE ") + (status = 'Y") + (sql.change_id = 'Y") + " WHERE change_sets = 'Y")); } ui.message("done"); } ui.message("done"); ui.message("done"); }
private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (damd == null) { return ""; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] trimmedEmails = dmd.getTrim(); if (trimmed.isEmpty()) { commandName.append(trim); } return commandName.toString(); }
private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (damd == null) { return ""; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] trimmedEmails = dmd.getTrim(); if (trimmed.isEmpty()) { commandName.append(trimmedArgs); } return commandName.toString(); }
private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (damd == null) { return ""; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] trimmedEmails = dmd.getTrim(); if (trimmed.isEmpty()) { commandName.append(com.google.gerrit.sshd.SshScope.on("."); } return commandName.toString(); }
private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (damd == null) { return ""; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] trimmedEmails = dmd.getTrim(); if (trimmed.isEmpty()) { commandName.append(com.google.gerrit.sshd.SshCommand.on('."); } return commandName.toString(); }
private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (damd == null) { return ""; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] trimmedEmails = dmd.getTrim(); if (trimmed.isEmpty()) { commandName.append(com.google.gerrit.sshd.SshScope.on("."); return commandName; } return commandName.toString(); }
public java.lang.String myUrl() { throw new java.lang.UnsupportedOperationException("peer info.myUrl"); }
@java.lang.Override public java.lang.String myUrl() { throw new java.lang.UnsupportedOperationException("peer info.myUrl"); }
@java.lang.Override public java.lang.String myUrl() { throw new java.lang.UnsupportedOperationException("peerInfo not available"); }
@java.lang.Override public java.lang.String myUrl() { throw new java.lang.UnsupportedOperationException("peerInfo not supported"); }
public java.lang.String myUrl() throws java.lang.UnsupportedOperationException { throw new java.lang.UnsupportedOperationException("peer info.myUrl"); }
@org.junit.Test public void testHealthCheckEnabled() throws java.lang.Exception { assertThat(getConfiguration().enabled()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HE_CHECK_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.HE_CHECK_SECTION, false); assertThat(getConfiguration().enabled()).isFalse(); assertThat(getConfiguration().enabled()).isFalse(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HE_CHECK_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.ENABLE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.ENABLE_KEY, true); assertThat(getConfiguration().enabled()).isTrue(); }
@org.junit.Test public void testHealthCheckEnabled() throws java.lang.Exception { assertThat(getConfiguration().enabled()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HE_CHECK_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.HE_CHECK_SECTION, null); assertThat(getConfiguration().enabled()).isFalse(); assertThat(getConfiguration().enabled()).isFalse(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HE_CHECK_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.ENABLE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.ENABLE_KEY, true); assertThat(getConfiguration().enabled()).isTrue(); }
@org.junit.Test public void testHealthCheckEnabled() throws java.lang.Exception { assertThat(getConfiguration().enabled()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HE_CHECK_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.HE_CHECK_SECTION, false); assertThat(getConfiguration().enabled()).isFalse(); assertThat(getConfiguration().enabled()).isFalse(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HE_CHECK_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.ENABLE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.HE_CHECK_SECTION, null); assertThat(getConfiguration().enabled()).isTrue(); }
@org.junit.Test public void testHealthCheckEnabled() throws java.lang.Exception { assertThat(getConfiguration().enabled()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HE_CHECK_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.HE_CHECK_SECTION, false); assertThat(getConfiguration().enabled()).isFalse(); assertThat(getConfiguration().enabled()).isFalse(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HE_CHECK_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.ENABLE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.ENABLE_KEY, null); assertThat(getConfiguration().enabled()).isTrue(); }
@org.junit.Test public void testHealthCheckEnabled() throws java.lang.Exception { assertThat(getConfiguration().enabled()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HE_CHECK_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.HEITY_CHECK_SECTION, false); assertThat(getConfiguration().enabled()).isFalse(); assertThat(getConfiguration().enabled()).isFalse(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HE_CHECK_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.ENABLE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.ENABLE_KEY, true); assertThat(getConfiguration().enabled()).isTrue(); }
@org.junit.Test public void testGetJGroupsSkipInteractive() throws java.lang.Exception { assertThat(getConfiguration().skipInteractiveInterface()).isEqualTo(com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SKIPP_LIST); globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SKIP_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.SKIP_KEY, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SKPS_KEY, null, com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_KEY, "hello0")); assertThat(getConfiguration().skipInterval()).containsAll(); }
@org.junit.Test public void testGetJGroupsSkipInteractive() throws java.lang.Exception { assertThat(getConfiguration().skipInteractiveInterface()).isEqualTo(com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SKIPP_LIST); globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SKIP_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.SKIP_KEY, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SKPS_KEY, null, com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_KEY, "hello@example.com"; assertThat(getConfiguration().skipInterval()).containsAll("loForwarding", "ethreadAll()").inOrder(); }
@org.junit.Test public void testGetJGroupsSkipInteractive() throws java.lang.Exception { assertThat(getConfiguration().skipInteractiveInterface()).isEqualTo(com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SKIPP_LIST); globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SKIP_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.SKIP_KEY, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SKPS_KEY, null, com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_KEY, "hello@example.com"; assertThat(getConfiguration().skipInterval()).containsAllOf("looauth", "ethreadAll()").inOrder(); }
@org.junit.Test public void testGetJGroupsSkipInteractive() throws java.lang.Exception { assertThat(getConfiguration().skipInteractiveInterface()).isEqualTo(com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SKIPP_LIST); globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SKIP_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.SKIP_KEY, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SKPS_KEY, null, com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_KEY, "hello@example.com"; assertThat(getConfiguration().skipInterval()).containsAll("loForwarding", "ethreadAll()).inOrder(); }
@org.junit.Test public void testGetJGroupsSkipInteractive() throws java.lang.Exception { assertThat(getConfiguration().skipInteractiveInterface()).isEqualTo(com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SKIPP_LIST); globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SKIP_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.SKIP_KEY, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SKPS_KEY, null, com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_KEY, "hello@example.com"; assertThat(getConfiguration().skipInterval()).containsAllOf("looauth", "ethreadAll()").inOrder(); }
@org.junit.Test public void testGetJGroupsClients() throws java.lang.Exception { globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CLUPS_NAME, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CLUPS_NAME_KEY, "foo"); assertThat(getConfiguration().clients().clients()).isEqualTo("foo"); }
@org.junit.Test public void testGetJGroupsClients() throws java.lang.Exception { globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CLUPS_NAME, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CLUPS_NAME_KEY, "foo"); assertThat(getConfiguration().clients().cluster().clients()).isEqualTo("foo"); }
@org.junit.Test public void testGetJGroupsClients() throws java.lang.Exception { globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CLUPS_NAME, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CLUPS_NAME_KEY, "foo"); assertThat(getConfiguration().clients().clients()).isEqualTo(foo); }
@org.junit.Test public void testGetJGroupsClients() throws java.lang.Exception { globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CLUPS_NAME, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CLUPS_NAME_KEY, "foo"); assertThat(getConfiguration().clients().cluster().clients()).isEqualTo(foo); }
@org.junit.Test public void testGetJGroupsClients() throws java.lang.Exception { globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CLUPS_NAME, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CLUPS_NAME_KEY, "foo"); assertThat(getConfiguration().clients().cluster().clients()).isEqualTo(java.lang.String.class); }
@org.junit.Test public void testGetWebsessionSynchronize() throws java.lang.Exception { assertThat(getConfiguration().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null); assertThat(getConfiguration().synchronize()).isFalse(); assertThat(getConfiguration().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null); assertThat(getConfiguration().synchronize()).isTrue(); }
@org.junit.Test public void testGetWebsessionSynchronize() throws java.lang.Exception { assertThat(getConfiguration().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null); assertThat(getConfiguration().synchronize()).isTrue(); }
@org.junit.Test public void testGetWebsessionSynchronize() throws java.lang.Exception { assertThat(getConfiguration().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, null); assertThat(getConfiguration().synchronize()).isFalse(); assertThat(getConfiguration().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null); assertThat(getConfiguration().synchronize()).isTrue(); }
@org.junit.Test public void testGetWebsessionSynchronize() throws java.lang.Exception { assertThat(getConfiguration().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, null); assertThat(getConfiguration().synchronize()).isTrue(); }
@org.junit.Test public void testGetWebsessionSynchronize() throws java.lang.Exception { assertThat(getConfiguration().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null); assertThat(getConfiguration().websession().synchronize()).isTrue(); }
@org.junit.Test public void testGetCachePatterns() throws java.lang.Exception { globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_KEY, wireMock.create(com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, wireMock)).isTrue(); com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher matcher = new com.ericsson.gerrit.plugins.highavailability.cache.cache.CachePattern(getConfiguration()); for (java.lang.String cache : com.google.common.collect.ImmutableList.of("accounts_list", "project_list", "my_list", "my_a_a", "my_a"))); assertThat(matcher.matches(cache)).isTrue(); } for (java.lang.String cache : com.google.common.collect.ImmutableList.of("ldap_GROUP_LIST", "foo")) { assertThat(matcher.matches(cache)).isFalse(); }
@org.junit.Test public void testGetCachePatterns() throws java.lang.Exception { globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, wireMock.create(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_KEY, wireMock)).isTrue(); com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher matcher = new com.ericsson.gerrit.plugins.highavailability.cache.cache.CachePattern(getConfiguration()); for (java.lang.String cache : com.google.common.collect.ImmutableList.of("accounts_list", "project_list", "my_list", "my_a_a", "my_a"))); assertThat(matcher.matches(cache)).isTrue(); } for (java.lang.String cache : com.google.common.collect.ImmutableList.of("ldap_GROUP_LIST", "foo")) { assertThat(matcher.matches(cache)).isFalse(); }
@org.junit.Test public void testGetCachePatterns() throws java.lang.Exception { globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, wireMock.create(com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, wireMock)).isTrue(); com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher matcher = new com.ericsson.gerrit.plugins.highavailability.cache.cache.CachePattern(getConfiguration()); for (java.lang.String cache : com.google.common.collect.ImmutableList.of("accounts_list", "project_list", "my_list", "my_a_a", "my_a"))); assertThat(matcher.matches(cache)).isTrue(); } for (java.lang.String cache : com.google.common.collect.ImmutableList.of("ldap_GROUP_LIST", "foo")) { assertThat(matcher.matches(cache)).isFalse(); }
@org.junit.Test public void testGetCachePatterns() throws java.lang.Exception { globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_KEY, wireMock.create(com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, wireMock)).isTrue(); com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher matcher = new com.ericsson.gerrit.plugins.highavailability.cache.cache.CachePattern(getConfiguration()); for (java.lang.String cache : com.google.common.collect.ImmutableList.of("accounts_list", "project_list", "my_list", "my_a_a", "my_a"))); assertThat(matcher.matches(cache)).isTrue(); } for (java.lang.String cache : com.google.common.collect.ImmutableList.of("ldap_GROUP_LIST", "foo")) { assertThat(matcher.matches(cache)).isTrue(); }
@org.junit.Test public void testGetCachePatterns() throws java.lang.Exception { globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, wireMock.create(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_KEY, wireMock)).isTrue(); com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher matcher = new com.ericsson.gerrit.plugins.highavailability.cache.cache.CachePattern(getConfiguration()); for (java.lang.String cache : com.google.common.collect.ImmutableList.of("accounts_list", "project_list", "my_list", "my_a_a", "my_a"))); assertThat(matcher.matches(cache)).isTrue(); } for (java.lang.String cache : com.google.common.collect.ImmutableList.of("ldap_GROUP_LIST", "foo")) { assertThat(matcher.matches(cache)).isTrue(); }
@org.junit.Test public void testGetEventSynchronize() throws java.lang.Exception { assertThat(getConfiguration().event().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT, null, com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, null); assertThat(getConfiguration().event().synchronize()).isTrue(); }
@org.junit.Test public void testGetEventSynchronize() throws java.lang.Exception { assertThat(getConfiguration().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT, null, com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, null); assertThat(getConfiguration().event().event().synchronize()).isTrue(); }
@org.junit.Test public void testGetEventSynchronize() throws java.lang.Exception { assertThat(getConfiguration().event().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT, null, com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, null); assertThat(getConfiguration().event().event().synchronize()).isTrue(); }
@org.junit.Test public void testGetEventSynchronize() throws java.lang.Exception { assertThat(getConfiguration().event().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT, null, com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, null); assertThat(getConfiguration().event().synchronize()).isTrue(); }
@org.junit.Test public void testGetEventSynchronize() throws java.lang.Exception { assertThat(getConfiguration().event().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT, null, com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, null); assertThat(getConfiguration().event().event().synchronize()).isTrue(); }
@org.junit.Test public void testGetIndexSynchronize() throws java.lang.Exception { assertThat(getConfiguration().index().index()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null); assertThat(getConfiguration().synchronize()).isFalse(); assertThat(getConfiguration().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEXECONIZE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.INDEXECONIZE_KEY, null, com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null); assertThat(getConfiguration().index().index().synchronize()).isTrue(); }
@org.junit.Test public void testGetIndexSynchronize() throws java.lang.Exception { assertThat(getConfiguration().index().index()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null); assertThat(getConfiguration().synchronize()).isFalse(); assertThat(getConfiguration().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEXECONIZE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.INDEXECONIZE_KEY, null, com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_KEY, null); assertThat(getConfiguration().index().index().synchronize()).isTrue(); }
@org.junit.Test public void testGetIndexSynchronize() throws java.lang.Exception { assertThat(getConfiguration().index().index()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null); assertThat(getConfiguration().synchronize()).isFalse(); assertThat(getConfiguration().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEXECONIZE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.INDEXECONIZE_KEY, null, com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_KEY, null); assertThat(getConfiguration().index().synchronize()).isTrue(); }
@org.junit.Test public void testGetIndexSynchronize() throws java.lang.Exception { assertThat(getConfiguration().index().index()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null); assertThat(getConfiguration().synchronize()).isFalse(); assertThat(getConfiguration().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEXECONIZE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.INDEXECONIZE_KEY, null, com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.INDEXECONIZE_KEY, null); assertThat(getConfiguration().index().synchronize()).isTrue(); }
@org.junit.Test public void testGetIndexSynchronize() throws java.lang.Exception { assertThat(getConfiguration().index().index()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null); assertThat(getConfiguration().synchronize()).isFalse(); assertThat(getConfiguration().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEXECONIZE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.INDEXECONIZE_KEY, null, com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.INDEXECONIZE_KEY, null); assertThat(getConfiguration().index().index().synchronize()).isTrue(); }
@org.junit.Test public void testCachePatternMatcher() throws java.lang.Exception { when(configMock.cache().patterns()).thenReturn(wireMock.patterns()).thenReturn(wireMock); com.ericsson.gerrit.plugins.highavailability.cache.CachePattern matcher = new com.ericsson.gerrit.plugins.highavailability.cache.cache.CachePattern(configMock); for (java.lang.String cache : com.google.common.collect.ImmutableList.of("accounts_list", "project_list", "project_list", "my_list"))); assertThat(matcher.matches(cache_members)).isTrue(); }
@org.junit.Test public void testCachePatternMatcher() throws java.lang.Exception { when(configMock.cache().patterns()).thenReturn(wireMock.patterns()).thenReturn(wireMock); com.ericsson.gerrit.plugins.highavailability.cache.CachePattern matcher = new com.ericsson.gerrit.plugins.highavailability.cache.cache.CachePattern(configMock); for (java.lang.String cache : com.google.common.collect.ImmutableList.of("accounts_list", "project_list", "project_list", "my_list"))); assertThat(matcher.matches(cache_byEmail)).isTrue(); }
@org.junit.Test public void testCachePatternMatcher() throws java.lang.Exception { when(configMock.cache().patterns()).thenReturn(wireMock.patterns()).thenReturn(wireMock); com.ericsson.gerrit.plugins.highavailability.cache.CachePattern matcher = new com.ericsson.gerrit.plugins.highavailability.cache.cache.CachePattern(configMock); for (java.lang.String cache : com.google.common.collect.ImmutableList.of("accounts_list", "project_list", "project_list", "my_list"))); assertThat(matcher.matches(cacheNames.include_LIST, "my_list"))).isTrue(); }
@org.junit.Test public void testCachePatternMatcher() throws java.lang.Exception { when(configMock.cache().patterns()).thenReturn(wireMock.patterns()).thenReturn(wireMock); com.ericsson.gerrit.plugins.highavailability.cache.CachePattern matcher = new com.ericsson.gerrit.plugins.highavailability.cache.cache.CachePattern(configMock); for (java.lang.String cache : com.google.common.collect.ImmutableList.of("accounts_list", "project_list", "project_list", "my_list"))); assertThat(matcher.matches(cache_members)).isTrue(); } for (java.lang.String cache : com.google.common.collect.ImmutableList.of("ldap_by", "foo")) { assertThat(matcher.matches(cache)).isTrue(); }
@org.junit.Test public void testCachePatternMatcher() throws java.lang.Exception { when(configMock.cache().patterns()).thenReturn(wireMock.patterns()).thenReturn(wireMock); com.ericsson.gerrit.plugins.highavailability.cache.CachePattern matcher = new com.ericsson.gerrit.plugins.highavailability.cache.cache.CachePattern(configMock); for (java.lang.String cache : com.google.common.collect.ImmutableList.of("accounts_list", "project_list", "project_list", "my_list"))); assertThat(matcher.matches(cache_members)).isTrue(); } for (java.lang.String cache : com.google.common.collect.ImmutableList.of("ldap_by", "foo")) { assertThat(matcher.matches(cache)).isFalse(); }
@org.junit.Test public void testGetCachePatterns() throws java.lang.Exception { globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.newArrayList("^cache.*", "other")); assertThat(getConfiguration()).containsExactly("^some_cache.*"); }
@org.junit.Test public void testGetCachePatterns() throws java.lang.Exception { globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.newArrayList("^some_cache.*", "other")); assertThat(getConfiguration()).containsExactly("^some_cache", "other"); }
@org.junit.Test public void testGetCachePatterns() throws java.lang.Exception { globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.newArrayList("^some_cache.*", "other")); assertThat(getConfiguration()).containsExactly("^some_cache.*", "other"); }
@org.junit.Test public void testGetCachePatterns() throws java.lang.Exception { globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.newArrayList("^some_cache.*", "other")); assertThat(getConfiguration()).containsExactly("^some_cache.*"); }
@org.junit.Test public void testGetCachePatterns() throws java.lang.Exception { globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Configuration.class))); assertThat(getConfiguration()).containsExactly("^some\"", "other"); }
@org.junit.Test public void testGetCacheSynchronize() throws java.lang.Exception { assertThat(getConfiguration().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, false); assertThat(getConfiguration().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null); assertThat(getConfiguration().cache().synchronize()).isTrue(); }
@org.junit.Test public void testGetCacheSynchronize() throws java.lang.Exception { assertThat(getConfiguration().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null); assertThat(getConfiguration().cache().synchronize()).isTrue(); }
@org.junit.Test public void testGetCacheSynchronize() throws java.lang.Exception { assertThat(getConfiguration().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null); assertThat(getConfiguration().synchronize()).isFalse(); assertThat(getConfiguration().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null); assertThat(getConfiguration().cache().synchronize()).isTrue(); }
@org.junit.Test public void testGetCacheSynchronize() throws java.lang.Exception { assertThat(getConfiguration().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, false); assertThat(getConfiguration().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null); assertThat(getConfiguration().cache().synchronize()).isTrue(); }
@org.junit.Test public void testGetCacheSynchronize() throws java.lang.Exception { assertThat(getConfiguration().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, null); assertThat(getConfiguration().cache().synchronize()).isTrue(); }
static boolean onTime(java.lang.String dateTime) { return (com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMATTERN.compare(dateTime)) <= 0; }
static boolean onTime(java.lang.String dateTime) { return (com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMATTERN.compare(dateTime)) >= 0; }
static boolean onTime(java.lang.String dateTime) { return (com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMATTERN.compare(dateTime)) <= 0); }
static boolean onTime(java.lang.String dateTime) { return (com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMATTERN.compareTo(dateTime)) <= 0; }
static boolean onTime(java.lang.String dateTime) { return (com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMATTERN.compare(dateTime)) >= 0 <= 0; }
@org.junit.Test public void testOnTime() throws java.lang.Exception { assertThat(com.google.gerrit.acceptance.PushOneCommit.format(newMillis()))).isTrue(); }
@org.junit.Test public void testOnTime() throws java.lang.Exception { assertThat(com.google.gerrit.acceptance.PushOneCommit.format(formatter.format(1.plusMillis())))).isTrue(); }
@org.junit.Test public void testOnTime() throws java.lang.Exception { assertThat(com.google.gerrit.acceptance.PushOneCommit.format(formatter.format(1)))).isTrue(); }
@org.junit.Test public void testOnTime() throws java.lang.Exception { assertThat(com.google.gerrit.acceptance.PushOneCommit.format(1.withMillis(1)))).isTrue(); }
@org.junit.Test public void testOnTime() throws java.lang.Exception { assertThat(com.google.gerrit.acceptance.PushOneCommit.format(formatter.format(1.plusMillis()))).isTrue(); }
public java.lang.String format(java.lang.StringInstantiation) { return format(instances); }
public java.lang.String format(java.lang.Iterable<java.lang.String>absent) { return format(instances); }
public java.lang.String format(java.lang.Iterable<java.lang.String>absent) { return format(instant); }
public java.lang.String format(java.lang.Iterable<java.lang.Instantiation> intra) { return format.format(instant); }
public java.lang.String format(java.lang.Iterable<java.lang.String>absent) { return com.google.gerrit.server.util.TimeUtil.nowTs(); }
public java.lang.String now() { return format(java.util.Time.nowTs()); }
public java.lang.String now() { return format(java.util.Time.nowSeconds(secondOfAdd)); }
public java.lang.String now() { return format(java.lang.Long.nowSeconds(secondToAdd)); }
public java.lang.String now() { return format(java.util.Time.nowSeconds(secondSecondsToAdd)); }
public java.lang.String now() { return format(java.util.Time.nowSeconds(secondSeconds)); }
public java.lang.String now() { return com.google.gerrit.extensions.api.changes.ChangeApiServlet.from(java.lang.String.format(format(java.time.Zone.of(0)); }
public java.lang.String now() { return com.google.gerrit.extensions.api.changes.ChangeApiServlet.from(java.lang.String.format(format(java.time.Zone.of(0))); }
public java.lang.String now() { return com.google.gerrit.extensions.api.changes.ChangeApiServlet.from(java.lang.Integer.toString(format(java.time.Zone.of(0))); }
public java.lang.String now() { return com.google.gerrit.extensions.api.changes.ChangeApiServlet.from(java.lang.String.format(format(java.time.Zone.of(now()))); }
public java.lang.String now() { return com.google.gerrit.extensions.api.changes.ChangeApiServlet.from(java.lang.Integer.toString(format(java.time.Zone.of(0))).format(java.lang.Integer.toString(), java.lang.Integer.format(format.toString())); }
@org.junit.Test public void formatWithDefaultTimeZone() throws java.lang.Exception { org.eclipse.jgit.lfs.time.DateTime now = org.joda.time.DateTime.now(); java.lang.String joda = org.eclipse.jgit.lfs.fs.LfsDateFormatter.format(now); com.googlesource.gerrit.plugins.lfs.LfsDateTimeFormatter formatter = com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.instance(); java.lang.String java.lang.String java.lang.String java.lang.String currentFormat = formatter.format(java.lang.Integer.ofInstant(now.getMillis())); assertThat(java.lang.Iterable).isEqualTo(jodaFormat); }
@org.junit.Test public void formatWithDefaultTimeZone() throws java.lang.Exception { org.eclipse.jgit.lfs.time.DateTime now = org.joda.time.DateTime.now(); java.lang.String joda = org.eclipse.jgit.lfs.fs.LfsDateFormatter.format(now); com.googlesource.gerrit.plugins.lfs.LfsDateTimeFormatter formatter = com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.instance(); java.lang.String java.lang.String java.lang.String java.lang.String currentFormat = formatter.format(java.lang.Integer.ofInstant(now.getMillis())); assertThat(java.lang.Object).isEqualTo(jodaFormat); }
@org.junit.Test public void formatWithDefaultTimeZone() throws java.lang.Exception { org.eclipse.jgit.lfs.time.DateTime now = org.joda.time.DateTime.now(); java.lang.String joda = org.eclipse.jgit.lfs.fs.LfsDateFormatter.format(now); com.googlesource.gerrit.plugins.lfs.LfsDateTimeFormatter formatter = com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.instance(); java.lang.String java.lang.String java.lang.String java.lang.String currentFormat = formatter.format(java.lang.Integer.ofInstant(now.getMillis())); assertThat(java.lang.Object).isEqualTo(joda.timeFormat); }
@org.junit.Test public void formatWithDefaultTimeZone() throws java.lang.Exception { org.eclipse.jgit.lfs.time.DateTime now = org.joda.time.DateTime.now(); java.lang.String joda = org.eclipse.jgit.lfs.fs.LfsDateFormatter.format(now); com.googlesource.gerrit.plugins.lfs.LfsDateTimeFormatter formatter = com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.instance(); java.lang.String java.lang.String java.lang.String java.lang.String currentFormat = formatter.format(java.lang.Integer.ofInstant(now.getMillis())); assertThat(java.lang.String.format(joda.format(nowTs)); }
@org.junit.Test public void formatWithDefaultTimeZone() throws java.lang.Exception { org.eclipse.jgit.lfs.time.DateTime now = org.joda.time.DateTime.now(); java.lang.String joda = org.eclipse.jgit.lfs.fs.LfsDateFormatter.format(now); com.googlesource.gerrit.plugins.lfs.LfsDateTimeFormatter formatter = com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.instance(); java.lang.String java.lang.String java.lang.String java.lang.String currentFormat = formatter.format(java.lang.Integer.ofInstant(now.getMillis())); assertThat(java.lang.Iterable).isEqualTo(joda.timeFormat); }
static java.lang.String timeout(int expirationSeconds) { return com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMATTERN.now(expirationSeconds); }
static java.lang.String timeout(int expirationSeconds) { return com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMATTERN.now(); }
static java.lang.String timeout(int expirationSeconds) { return com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMAT_FORMATTERN.now(expirationSeconds); }
static java.lang.String timeout(int expirationSeconds) { return com.googlesource.gerrit.plugins.lfs.LfsAuthToken.LfsAuthToken.FORMATTERN.now(expirationSeconds); }
static java.lang.String timeout(int expirationSeconds) { return com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMATTERN.now(expirationSeconds.now()); }
@org.junit.Test public void testExpiredTime() throws java.lang.Exception { assertThat(com.google.gerrit.acceptance.PushOneCommit.newTime(now.getMillis()))).isFalse(); }
@org.junit.Test public void testExpiredTime() throws java.lang.Exception { assertThat(com.google.gerrit.acceptance.PushOneCommit.format(formatter.format(1)))).isFalse(); }
@org.junit.Test public void testExpiredTime() throws java.lang.Exception { assertThat(com.google.gerrit.acceptance.PushOneCommit.format(formatter.format(1))).isFalse(); }
@org.junit.Test public void testExpiredTime() throws java.lang.Exception { assertThat(com.google.gerrit.acceptance.PushOneCommit.format(formatter.format(1.getTime())))).isFalse(); }
@org.junit.Test public void testExpiredTime() throws java.lang.Exception { assertThat(com.google.gerrit.acceptance.PushOneCommit.format(formatter.format(1.nonTimeMillis())))).isFalse(); }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if ((request instanceof javax.servlet.http.HttpServletRequest) && (response instanceof javax.servlet.http.HttpServletRequest)) { java.lang.String method = ((javax.servlet.http.HttpServletRequest) (request)).getMethod(); if (((method == (method == "DELETE")) || (method == "DELETE")) { ((javax.servlet.http.HttpServletResponse) (response)).sendError(com.googlesource.gerrit.plugins.lfs.SC_SERVER_UNAVAILABLE, this.message); return; } } }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if ((request instanceof javax.servlet.http.HttpServletRequest) && (response instanceof javax.servlet.http.HttpServletRequest)) { java.lang.String method = ((javax.servlet.http.HttpServletRequest) (request)).getMethod(); if (((method == (method == "DELETE")) || (method == "DELETE")) { ((javax.servlet.http.HttpServletResponse) (response)).sendError(com.googlesource.gerrit.plugins.lfs.SC_SERVER_UNAVAILABLE, this.message); return; } } chain.doFilter(request, response); }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if ((request instanceof javax.servlet.http.HttpServletRequest) && (response instanceof javax.servlet.http.HttpServletRequest)) { java.lang.String method = ((javax.servlet.http.HttpServletRequest) (request)).getMethod(); if (((method == (method == "DELETE")) || (method == "DELETE")) { ((javax.servlet.http.HttpServletResponse) (response)).sendError(com.googlesource.gerrit.plugins.serviceuser.SC_SERVER_UNAVAILABLE, this.message); return; } } }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if ((request instanceof javax.servlet.http.HttpServletRequest) && (response instanceof javax.servlet.http.HttpServletRequest)) { java.lang.String method = ((javax.servlet.http.HttpServletRequest) (request)).getMethod(); if (((method == (method == "DELETE")) || (method == "DELETE")) { ((javax.servlet.http.HttpServletResponse) (response)).sendError(com.googlesource.gerrit.plugins.serviceuser.SC_SERVER_UNAVAILABLE, this.message); return; } } chain.doFilter(request, response); }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if ((request instanceof javax.servlet.http.HttpServletRequest) && (response instanceof javax.servlet.http.HttpServletRequest)) { java.lang.String method = ((javax.servlet.http.HttpServletRequest) (request)).getMethod(); if (((method == (method == "DELETE")) || (method == "DELETE")) { ((javax.servlet.http.HttpServletResponse) (response)).sendError(com.googlesource.gerrit.plugins.lfs.SC_SERVER_UNAVAILABLE, this.message); return; } } chain.doFilter(request, request); }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { throw new com.google.gerrit.server.git.validators.CommitValidationException(this); }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> throw new com.google.gerrit.server.git.validators.CommitValidationException(); }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { try { throw new com.google.gerrit.server.git.validators.CommitValidationException(this); } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { throw new com.google.gerrit.server.git.validators.CommitValidationException(e.getMessage()); } }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> throw new com.google.gerrit.server.git.validators.CommitValidationException("Invalid commit message"); }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { try { throw new com.google.gerrit.server.git.validators.CommitValidationException(this); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.git.validators.CommitValidationException(e.getMessage()); } }
@java.lang.Override public java.lang.String toString() { return name().toLowerCase(java.util.Locale.US); }
@java.lang.Override public java.lang.String toString() { return name().toLowerCase(); }
@java.lang.Override public java.lang.String toString() { return name.toLowerCase(java.util.Locale.US); }
public java.lang.String toString() { return name().toLowerCase(java.util.Locale.US); }
@java.lang.Override public java.lang.String toString() { return name; }
@org.junit.After public void tearDown() throws java.lang.Exception { executor.execute(); }
@org.junit.After public void tearDown() throws java.lang.Exception { stmt.execute(); }
@org.junit.After public void tearDown() throws java.lang.Exception { executor.execute("TABLE: "); }
@org.junit.After public void tearDown() throws java.lang.Exception { com.ericsson.gerrit.plugins.eventslog.eventslog.sql.SQLException storage.execute(("CREATE: " + (com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.TABLE))); store.stop(); }
@org.junit.After public void tearDown() throws java.lang.Exception { com.ericsson.gerrit.plugins.eventslog.eventslog.sql.SQLException storage = " + (com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME))); store.stop(); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated) throws java.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreRebase); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated) throws java.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreRebaseChange); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean publishOnPatchSetCreated) throws java.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreRebase); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreRebaseChange) throws java.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreRebase); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean publishOnPatchSetCreated) throws java.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreRebaseChange); }
@org.junit.Test public void doesNotPublishWhenTrivialRebase() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockAttributeGenerator; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenTrivialRebase() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockOwner.kind = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.createInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenTrivialRebase() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenTrivialRebase() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockAttributeGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenTrivialRebase() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockAttributeGenerator; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesNotPublishWhenMergeUpdate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockAttributeGenerator; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenMergeUpdate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockAttributeGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenMergeUpdate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.newInstance(mockChange); mockAttributeGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenMergeUpdate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.newInstance(mockChange); mockAttributeGenerator; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenMergeUpdate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockOwner.kind = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesPublishWhenNoChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockAttributeGenerator; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenNoChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockAttributeGenerator; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenNoChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockOwner.kind = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenNoChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockOwner = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenNoChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.cisco.gerrit.plugins.slack.message.ChangeKind.NO_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenMergeUpdate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockAttributeGenerator; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenMergeUpdate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.newInstance(mockChange); mockAttributeGenerator; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenMergeUpdate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockAttributeGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenMergeUpdate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.newInstance(mockChange); mockAttributeGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenMergeUpdate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockAttributeGenerator; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenNoCodeChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockAttributeGenerator; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenNoCodeChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.newInstance(mockChange); mockAttributeGenerator; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenNoCodeChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockAttributeGenerator; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenNoCodeChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockAttributeGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doPublishWhenNoCodeChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockAttributeGenerator; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesNotPublishWhenNoChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockAttributeGenerator; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenNoChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.cisco.gerrit.plugins.slack.message.ChangeKind.NO_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenNoChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockOwner = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenNoChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.cisco.gerrit.plugins.slack.message.ChangeKind.NO_CHANGE; mockOwner = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenNoChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockAttributeGenerator; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
public com.google.gerrit.reviewdb.client.PatchSet patchSetId) { return getIgnoreWhitespace(); }
public com.google.gerrit.reviewdb.client.PatchSet patchSetId) { return getIgnoreChangeId; }
public com.google.gerrit.reviewdb.client.PatchSet.Id getIgnorePatchSetId() { return com.google.gerrit.reviewdb.client.PatchSet.Id.createEmptyPatchSetId; }
public com.google.gerrit.reviewdb.client.PatchSet.Id getIgnorePatchSetId() { return com.google.gerrit.extensions.client.ChangeInfo.Id.createEmptyPatchSetId; }
public com.google.gerrit.reviewdb.client.PatchSet.Id getIgnorePatchSetId() { return com.google.gerrit.extensions.client.ChangeInfo.Id.createEmptyPatchSetId(); }
@org.junit.Test public void doesPublishWhenTrivialRebase() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockAttributeGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenTrivialRebase() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockAttributeGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.createInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenTrivialRebase() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.kind = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.createInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenTrivialTrivialRebase() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockAttributeGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenTrivialRebase() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockAttributeGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)).isPublish(), is(true)); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfigFactory.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean("publish-on-empty", true)).thenReturn(publishOnPatchSetCreated); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfigFactory.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean("publish-on-empty", true)).thenReturn(publishOnPatchSetCreated); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfigFactory.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("webhookurl", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean("publish-on-empty", true)).thenReturn(publishOnPatchSetCreated); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfigFactory.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean("publish-on-patch-set-created", true)).thenReturn(publishOnPatchSetCreated); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfigFactory.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean("publish-on-empty", true)).thenReturn(publishOnPatchSetCreated); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedOnPatchSetCreatedMessageGeneratorTest.PROJECT_NAME); }
@org.junit.Test public void doesNotPublishWhenNoCodeChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockAttributeGenerator; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenCodeChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockAttributeGenerator; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenNoCodeChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockAttributeGenerator; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenCodeChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockOwner.kind = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenCodeChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockOwner.kind = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesPublishWhenRework() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockAttributeGenerator; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenRework() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.cisco.gerrit.plugins.slack.message.ChangeKind.REWORK; mockAttributeGenerator; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenRework() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.cisco.gerrit.plugins.slack.message.ChangeKind.REWORK; mockAttributeGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenRework() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.cisco.gerrit.plugins.slack.message.ChangeKind.REWORK; mockOwner = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenRework() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.cisco.gerrit.plugins.slack.message.ChangeKind.REWORK; mockOwner = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.createInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPatchSetCreated()))) { return false; } try { com.google.gerrit.server.data.PatchSetAttribute patchSet = event.patchSet.get(); patchSet = event.patchSet.get(); if ((config.getIgnoreRebaseEmpty()) && (((((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Error checking patch set kind", e); return false; } }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPatchSetCreated()))) { return false; } try { com.google.gerrit.server.data.PatchSetAttribute patchSet = event.patchSet.get(); patchSet = event.patchSet.get(); if ((config.getIgnoreRebaseEmpty()) && (((((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Cannot check patch set kind", e); return false; } boolean result; try { java.util.regex.Pattern pattern; pattern = java.util.regex.Pattern.compile(config.getIgnore(), java.util.regex.Pattern.DOTALL); java.util.Matcher matcher; matcher = pattern.matcher(event.change.get().commitMessage); result =!(matcher.matches()); } return result; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPatchSetCreated()))) { return false; } try { com.google.gerrit.server.data.PatchSetAttribute patchSet = event.patchSet.get(); patchSet = event.patchSet.get(); if ((config.getIgnoreRebaseEmpty()) && (((((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Cannot check patch set kind", e); return false; } boolean result; result = true; try { java.util.regex.Pattern.compile(config.getIgnore(), java.util.regex.Pattern.DOTALL); java.util.Matcher matcher; matcher = pattern.matcher(event.change.get().commitMessage); result =!(matcher.matches()); } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Invalid ignore pattern was invalid", e); } return result; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPatchSetCreated()))) { return false; } try { com.google.gerrit.server.data.PatchSetAttribute patchSet = event.patchSet.get(); patchSet = event.patchSet.get(); if ((config.getIgnoreRebaseEmpty()) && (((((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Cannot check patch set kind", e); return false; } boolean result; result = true; try { java.util.regex.Pattern.compile(config.getIgnore(), java.util.regex.Pattern.DOTALL); java.util.Matcher matcher; matcher = pattern.matcher(event.change.get().commitMessage); result =!(matcher.matches()); } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Invalid pattern was invalid", e); } return result; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPatchSetCreated()))) { return false; } try { com.google.gerrit.server.data.PatchSetAttribute patchSet = event.patchSet.get(); patchSet = event.patchSet.get(); if ((config.getIgnoreRebaseEmpty()) && (((((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Cannot check patch set kind", e); return false; } boolean result; result = true; try { java.util.regex.Pattern.compile(config.getIgnore(), java.util.regex.Pattern.DOTALL); java.util.Matcher matcher; matcher = pattern.matcher(event.change.get().commitMessage); result =!(matcher.matches()); } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Could not invalid pattern was invalid", e); } return result; }
@java.lang.Override Change.Id parse(javax.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation operation) { rsp.setContentType("text/plain"); rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); java.lang.String path = parse(path.substring(((path.lastIndexOf('/')) + 1))); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.debug(true, operation, id); try { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Context.setForwardedEvent(true); synchronized(this) { index(id, operation); } if ((idLock.decrementAndGet()) == 0) { removeIdLock(id, operation); } if ((idLock.decrementAndGet()) == 0) { removeIdLock(id); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestApiServlet.logger.error("Unable to update {}", type, type); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String msg = java.lang.String.format("Error trying to find %s", type, type); sendError(rsp, com.google.gwtorm.server.OrmException e); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestApiServlet.ResourceServlet.logger.error("Unable to find %s", type, type); sendError(rsp, msg); com.google.gwtorm.server.OrmException e = java.lang.String.
@java.lang.Override Change.Id parse(javax.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation operation) { rsp.setContentType("text/plain"); rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); java.lang.String path = parse(path.substring(((path.lastIndexOf('/')) + 1))); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.debug(true, operation, id); try { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Context.setForwardedEvent(true); synchronized(this) { index(id, operation); } if ((idLock.decrementAndGet()) == 0) { removeIdLock(id, operation); } if ((idLock.decrementAndGet()) == 0) { removeIdLock(id); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestApiServlet.logger.error("Unable to update {}", type, type); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String msg = java.lang.String.format("Error trying to find %s", type, type); sendError(rsp, com.google.gwtorm.server.OrmException e); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestApiServlet.sendError(msg, msg); sendError(rsp, com.google.gwtorm.server.OrmException e) { java.lang.String msg = java.lang.String.String.format("Unable to
@java.lang.Override Change.Id parse(javax.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation operation) { rsp.setContentType("text/plain"); rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); java.lang.String path = parse(path.substring(((path.lastIndexOf('/')) + 1))); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.debug(true, operation, id); try { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Context.setForwardedEvent(true); synchronized(this) { index(id, operation); } if ((idLock.decrementAndGet()) == 0) { removeIdLock(id, operation); } if ((idLock.decrementAndGet()) == 0) { removeIdLock(id); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestApiServlet.logger.error("Unable to update {}", type, type); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String msg = java.lang.String.format("Error trying to find %s", type, type); sendError(rsp, com.google.gwtorm.server.OrmException e); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestApiServlet.ResourceServlet.logger.error("Unable to find %s", type, type); com.google.gwtorm.server.OrmException e = java.lang.String.String.format("Unable to find
@java.lang.Override Change.Id parse(javax.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation operation) { rsp.setContentType("text/plain"); rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); java.lang.String path = parse(path.substring(((path.lastIndexOf('/')) + 1))); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.debug(true, operation, id); try { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Context.setForwardedEvent(true); synchronized(this) { index(id, operation); } if ((idLock.decrementAndGet()) == 0) { removeIdLock(id, operation); } if ((idLock.decrementAndGet()) == 0) { removeIdLock(id); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestApiServlet.logger.error("Unable to update {}", type, type); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String msg = java.lang.String.format("Error trying to find %s", type, type); sendError(rsp, com.google.gwtorm.server.OrmException e); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestApiServlet.sendError(msg, msg); sendError(rsp, com.google.gwtorm.server.OrmException e) { java.lang.String msg = java.lang.String.String.String msg = java.
@java.lang.Override Change.Id parse(javax.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation operation) { rsp.setContentType("text/plain"); rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); java.lang.String path = parse(path.substring(((path.lastIndexOf('/')) + 1))); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.debug(true, operation, id); try { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Context.setForwardedEvent(true); synchronized(this) { index(id, operation); } if ((idLock.decrementAndGet()) == 0) { removeIdLock(id, operation); } if ((idLock.decrementAndGet()) == 0) { removeIdLock(id); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestApiServlet.logger.error("Unable to update {}", type, type); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String msg = java.lang.String.format("Error trying to find %s", type, type); sendError(rsp, com.google.gwtorm.server.OrmException e); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestApiServlet.ResourceServlet.logger.error("Unable to find %s", type, type); sendError(rsp, msg); com.google.gwtorm.server.OrmException e) { sendError(msg);
public static com.google.inject.AbstractModule module() { return new com.google.inject.AbstractModule() { @java.lang.Override public void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.validators.CommitValidationListener.class).to(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_EMAILED_EMAILTOOLDER_WIPAL)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Authorizer", null, false, "Matcher", com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailConfigValidator.KEY_COMMIT_TOOLDER)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Commiteral<com.google.gerrit.extensions.api.projects.ProjectConfigEntry>")).toInstance(new com.google.gerrit.extensions.api.projects.ProjectConfigEntry("Commiteral<com.google.gerrit.extensions.api.projects.ProjectConfigEntry>")); } }; }
public static com.google.inject.AbstractModule module() { return new com.google.inject.AbstractModule() { @java.lang.Override public void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.validators.CommitValidationListener.class).to(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_EMAILED_EMAILTOOLDER_WIPAL)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Authorizer", null, false, "Matcher", com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailConfigValidator.KEY_COMMIT_EMAILTOOLDER)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Commiteral<com.google.gerrit.extensions.api.projects.ProjectConfigEntry>")); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).toInstance(new com.google.gerrit.extensions.api.projects.ProjectConfigEntry("Commiteral<com.google.gerrit.extensions.api.projects.ProjectConfigEntry>")); } }; }
public static com.google.inject.AbstractModule module() { return new com.google.inject.AbstractModule() { @java.lang.Override public void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.validators.CommitValidationListener.class).to(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_EMAILED_EMAILTOOLDER_WIPAL)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Authorizer", null, false, "Matcher", com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailConfigValidator.KEY_COMMIT_EMAILTOOLDER)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Commiteral<com.google.gerrit.extensions.api.projects.ProjectConfigEntry>")); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).toInstance(new com.google.gerrit.extensions.api.projects.ProjectConfigEntry("Commiteral<com.google.gerrit.extensions.api.projects.ProjectConfigEntry>")).to(new com.google.gerrit.extensions.api.projects.ProjectConfigEntryType.ALTER, null, "Password", null, "No such.")); } }; }
public static com.google.inject.AbstractModule module() { return new com.google.inject.AbstractModule() { @java.lang.Override public void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.validators.CommitValidationListener.class).to(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_EMAILED_EMAILTOOLDER_WIPAL)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Authorizer", null, false, "Matcher", com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailConfigValidator.KEY_COMMIT_EMAILTOOLDER)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Commiteral<com.google.gerrit.extensions.api.projects.ProjectConfigEntry>")); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).toInstance(new com.google.gerrit.extensions.api.projects.ProjectConfigEntry("Commiteral<com.google.gerrit.extensions.api.projects.ProjectConfigEntry>")).to(new com.google.gerrit.extensions.api.projects.ProjectConfigEntryType.ALTER, null, "Password", null, "Password"); } }; }
public static com.google.inject.AbstractModule module() { return new com.google.inject.AbstractModule() { @java.lang.Override public void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.validators.CommitValidationListener.class).to(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_EMAILED_EMAILTOOLDER_WIPAL)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Authorizer", null, false, "Matcher", com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailConfigValidator.KEY_COMMIT_EMAILTOOLDER)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Commiteral<com.google.gerrit.extensions.api.projects.ProjectConfigEntry>")); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).toInstance(new com.google.gerrit.extensions.api.projects.ProjectConfigEntry("Commiteral<com.google.gerrit.extensions.api.projects.ProjectConfigEntry>")).to(new com.google.gerrit.extensions.api.projects.ProjectConfigEntryType.ALTER, null, "Password", null, "Password"); } }; } }; }
@java.lang.Override protected void configure() { install(new com.googlesource.gerrit.plugins.uploadvalidator.PatternModule()); install(com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidFilenameValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.SymlinkValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.ConfigFactory.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.ConfigFactory.class).to(Scopes.SINGLETON); }
@java.lang.Override protected void configure() { install(new com.googlesource.gerrit.plugins.uploadvalidator.PatternModule()); install(com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidFilenameValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.SymlinkValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.ConfigFactory.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.ConfigFactory.class).to(Scopes.SINGLETON); }
@java.lang.Override protected void configure() { install(new com.googlesource.gerrit.plugins.uploadvalidator.PatternCacheModule()); install(com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.ConfigFactory.class).to(Scopes.SINGLETON); }
@java.lang.Override protected void configure() { install(new com.googlesource.gerrit.plugins.uploadvalidator.PatternCacheModule()); install(com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.ConfigFactory.class).to(Scopes.SINGLETON); }
@java.lang.Override protected void configure() { install(new com.googlesource.gerrit.plugins.uploadvalidator.PatternCacheModule()); install(com.googlesource.gerrit.plugins.uploadvalidator.FooterValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.ConfigFactory.class).to(Scopes.SINGLETON); }
@com.google.common.annotations.VisibleForTesting static boolean isCommitActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_COMMIT_WHIT_WHIT_WHIT_WHIT_WHIMTERN)) > 0; }
@com.google.common.annotations.VisibleForTesting static boolean isCommitActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_COMMIT_WHIT_WHIT_WHIT_WHIT_WHIT_WHIMTERN)) > 0; }
@com.google.common.annotations.VisibleForTesting static boolean isCommitActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_COMMIT_WHIT_WHIT_WHIT_WHIT_WHIMIT_WHIT_WHIT_WHIMTERN)) > 0; }
@com.google.common.annotations.VisibleForTesting static boolean isCommitActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_COMMIT_WHIT_WHIT_WHIT_WHIT_WHIMIT_WHIT_WHIT_WHIMTERN).length) > 0; }
@com.google.common.annotations.VisibleForTesting static boolean isCommitActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_COMMIT_WHIT_WHIT_WHIT_WHIT_WHIMIT_WHIT_WHIT_WHIMEST).length) > 0; }
@com.google.common.annotations.VisibleForTesting static boolean performValidation(java.lang.String email, java.lang.String[] email) { return java.util.Arrays.stream(email).stream().map(( e) -> java.util.regex.Pattern.matches(s, com.google.common.base.Strings.nullToEmpty(s, com.google.common.base.Strings.nullToEmpty(s.nullToEmpty())); }
@com.google.common.annotations.VisibleForTesting static boolean performValidation(java.lang.String email, java.lang.String[] email) { return java.util.Arrays.stream(email).stream().map(( e) -> java.util.regex.Pattern.matches(s, com.google.common.base.Strings.nullToEmpty(s, com.google.common.base.Strings.nullToEmpty(s.nullToEmpty(email))); }
@com.google.common.annotations.VisibleForTesting static boolean requireValidation(java.lang.String email, java.lang.String[] email) { return java.util.Arrays.stream(email).stream().map(( e) -> java.util.regex.Pattern.matches(s, com.google.common.base.Strings.nullToEmpty(s, com.google.common.base.Strings.nullToEmpty(s.nullToEmpty(email))); }
@com.google.common.annotations.VisibleForTesting static boolean performValidation(java.lang.String email, java.lang.String[] email) { return java.util.Arrays.stream(email).stream().map((s) -> java.util.regex.Pattern.matches(s, com.google.common.base.Strings.nullToEmpty(s, com.google.common.base.Strings.nullToEmpty(s.nullToEmpty(email))); }
@com.google.common.annotations.VisibleForTesting static boolean requireValidation(java.lang.String email, java.lang.String[] email) { return java.util.Arrays.stream(email).stream().map((s) -> java.util.regex.Pattern.matches(s, com.google.common.base.Strings.nullToEmpty(s, com.google.common.base.Strings.nullToEmpty(s.nullToEmpty(email))); }
@com.google.common.annotations.VisibleForTesting static java.lang.String[] getAuthorEmailWhitelist(com.google.gerrit.server.config.PluginConfig cfg) { return cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_AUTHORIZED_WHIT_WHIT_WHIMARY); }
@com.google.common.annotations.VisibleForTesting static java.lang.String[] getAuthorEmailWhitelist(com.google.gerrit.server.config.PluginConfig cfg) { return cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_AUTHORIZED_WHIT_WHIT_WHIT_WHIMARY); }
@com.google.common.annotations.VisibleForTesting static java.lang.String[] getAuthorEmailPattern(com.google.gerrit.server.config.PluginConfig cfg) { return cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_AUTHORIZED_WHIT_WHIT_WHIT_WHIT_WHIMEST_WHIT); }
@com.google.common.annotations.VisibleForTesting static java.lang.String[] getAuthorEmailPattern(com.google.gerrit.server.config.PluginConfig cfg) { return cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_AUTHORIZED_WHIT_WHIT_WHIT_WHIT_WHIT_WHIMIT); }
@com.google.common.annotations.VisibleForTesting static java.lang.String[] getAuthorEmailPattern(com.google.gerrit.server.config.PluginConfig cfg) { return cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_AUTHORIZED_WHIT_WHIT_WHIT_WHIT_WHIMESTORE_WHIMIT); }
@java.lang.Override public void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.validators.CommitValidationListener.class).to(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_AUTHORIZED_EMAILINGLETON)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Authorizer", null, false, false, "Whitelist", null, false, "Whitelist.")); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_COMMIT_TOOLDER_WHIT_WHIT_WHIT_WHIT))); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.api.projects.ProjectConfigType.KEY_COMMIT_PATTERNAL, null, "password")); }
@java.lang.Override public void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.validators.CommitValidationListener.class).to(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_AUTHORIZED_EMAILINGLETON)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Authorizer", null, false, false, "Whitelist", null, false, "Whitelist.")); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_COMMIT_TOOLDER_WHIT_WHIT_WHIT_WHIT))); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.api.projects.ProjectConfigType.KEY_COMMIT_PATTERNALTER, null, "password")); }
@java.lang.Override public void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.validators.CommitValidationListener.class).to(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_AUTHORIZED_EMAILINGLETON)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Authorizer", null, false, false, "Whitelist", null, false, "Whitelist.")); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_COMMIT_TOOLDER_WHIT_WHIT_WHIT_WHIT))); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.api.projects.ProjectConfigType.KEY_COMMIT_PATTERNAL_WHIT_WHIT_WHIT_WHIT, null, "password")); }
@java.lang.Override public void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.validators.CommitValidationListener.class).to(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_AUTHORIZED_EMAILINGLETON)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Authorizer", null, false, false, "Whitelist", null, false, "Whitelist.")); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_COMMIT_TOOLDER_WHIT_WHIT_WHIT_WHIT))); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.api.projects.ProjectConfigType.KEY_COMMIT_PATTERNAL_WHIT_WHIT_WHIT_WHIT_WHIT).toString(); }
@java.lang.Override public void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.validators.CommitValidationListener.class).to(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_AUTHORIZED_EMAILINGLETON)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Authorizer", null, false, false, "Whitelist", null, false, "Whitelist.")); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_COMMIT_TOOLDER_WHIT_WHIT_WHIT_WHIT))); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.api.projects.ProjectConfigType.KEY_COMMIT_PATTERNAL_WHIT_WHIT_WHIT_WHIT_WHIT, null, "Password")); }
@com.google.common.annotations.VisibleForTesting static boolean isAuthorizedForTesting(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_AUTHORIZED_EMAIL_EMAIL_EMAIL_EMAILING).length) > 0; }
@com.google.common.annotations.VisibleForTesting static boolean isAuthorizedForTesting(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_AUTHORIZED_EMAIL_EMAIL_EMAIL_EMAIL_EMAILING).length) > 0; }
@com.google.common.annotations.VisibleForTesting static boolean isAuthorizedForTesting(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_AUTHORIZED_EMAIL_EMAIL_EMAIL_EMAILING).length) > 0); }
@com.google.common.annotations.VisibleForTesting static boolean isAuthorizedForTesting(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_AUTHORIZED_EMAIL_WHIT_WHIT_WHIT_WHIT_WHIMEST_WHIMEST).length) > 0; }
@com.google.common.annotations.VisibleForTesting static boolean isAuthorizedForTesting(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_AUTHORIZED_EMAIL_WHIT_WHIT_WHIT_WHIT_WHIMEST_WHIMTERN)) > 0; }
@com.google.common.annotations.VisibleForTesting static java.lang.String[] getCommitterIdentifiedUser(com.google.gerrit.server.config.PluginConfig cfg) { return cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_COMMIT_WEBLOCKED_WHIT_WHIT_WHIT_WHIT); }
@com.google.common.annotations.VisibleForTesting static java.lang.String[] getCommitterIdentifiedUser(com.google.gerrit.server.config.PluginConfig cfg) { return cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_COMMIT_WHIT_WHIT_WHIT_WHIT_WHIT_WHIMTERN); }
@com.google.common.annotations.VisibleForTesting static java.lang.String[] getCommitterIdentifiedUser(com.google.gerrit.server.config.PluginConfig cfg) { return cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_COMMIT_WHIT_WHIT_WHIT_WHIT_WHIT_WHIMIT); }
@com.google.common.annotations.VisibleForTesting static java.lang.String[] getCommitterIdentifiedUser(com.google.gerrit.server.config.PluginConfig cfg) { return cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_COMMIT_WHIT_WHIT_WHIT_WHIT_WHIT_WHIMEST_WHIMIT); }
@com.google.common.annotations.VisibleForTesting static java.lang.String[] getCommitterIdentifiedUser(com.google.gerrit.server.config.PluginConfig cfg) { return cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailValidator.KEY_COMMIT_WHIT_WHIT_WHIT_WHIT_WHIT_WHIMIT_WHIMIT); }
@java.lang.Override protected void configure() { bind(java.lang.String.class).annotatedWith(com.google.gerrit.extensions.annotations.PluginName.class).toInstance("InitialTest."); java.nio.file.Files.exists("etc").resolve("etc").resolve("etc").resolve("its/"); java.nio.file.Files path = createMock(com.googlesource.gerrit.plugins.its.base.workflow.RulesConfigReader.class); bind(com.googlesource.gerrit.plugins.its.base.its.its.its.its.RulesConfigReader.class); bind(com.googlesource.gerrit.plugins.its.base.workflow.RulesConfigReader.class).toInstance(rulesConfig); rulesProjectCache = createMock(com.googlesource.gerrit.plugins.its.base.its.ItsRulesProjectCache.class); bind(com.googlesource.gerrit.plugins.its.base.its.its.ItsConfig.class).toInstance(rulesProjectCache); bind(java.nio.Path.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.class); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.its.its.ItsConfig.class).toInstance(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.class); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.class); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.ItsConfig.class); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.PluginTest.class); }
@java.lang.Override protected void configure() { bind(java.lang.String.class).annotatedWith(com.google.gerrit.extensions.annotations.PluginName.class).toInstance("InitialTest."); java.nio.file.Files.exists("etc").resolve("etc").resolve("etc").resolve("its/"); java.nio.file.Files path = createMock(com.googlesource.gerrit.plugins.its.base.workflow.RulesConfigReader.class); bind(com.googlesource.gerrit.plugins.its.base.its.its.its.its.RulesConfigReader.class); bind(com.googlesource.gerrit.plugins.its.base.workflow.RulesConfigReader.class).toInstance(rulesConfig); rulesProjectCache = createMock(com.googlesource.gerrit.plugins.its.base.its.ItsRulesProjectCache.class); bind(com.googlesource.gerrit.plugins.its.base.its.its.ItsConfig.class).toInstance(rulesProjectCache); bind(java.nio.Path.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.class); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.its.its.ItsConfig.class).toInstance(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.class); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.class); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.ItsConfig.class); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.its.PluginTest.class); }
@java.lang.Override protected void configure() { bind(java.lang.String.class).annotatedWith(com.google.gerrit.extensions.annotations.PluginName.class).toInstance("InitialTest."); java.nio.file.Files.exists("etc").resolve("etc").resolve("etc").resolve("its/"); java.nio.file.Files path = createMock(com.googlesource.gerrit.plugins.its.base.workflow.RulesConfigReader.class); bind(com.googlesource.gerrit.plugins.its.base.its.its.its.its.RulesConfigReader.class); bind(com.googlesource.gerrit.plugins.its.base.workflow.RulesConfigReader.class).toInstance(rulesConfig); rulesProjectCache = createMock(com.googlesource.gerrit.plugins.its.base.its.ItsRulesProjectCache.class); bind(com.googlesource.gerrit.plugins.its.base.its.its.ItsConfig.class).toInstance(rulesProjectCache); bind(java.nio.Path.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.class); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.its.its.ItsConfig.class).toInstance(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.class); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.class); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.ItsConfig.class); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.PluginTest.class).toInstance(com.googlesource.gerrit.plugins.its.base.RuleTest.class); }
@java.lang.Override protected void configure() { bind(java.lang.String.class).annotatedWith(com.google.gerrit.extensions.annotations.PluginName.class).toInstance("InitialTest."); java.nio.file.Files.exists("etc").resolve("etc").resolve("etc").resolve("its/"); java.nio.file.Files path = createMock(com.googlesource.gerrit.plugins.its.base.workflow.RulesConfigReader.class); bind(com.googlesource.gerrit.plugins.its.base.its.its.its.its.RulesConfigReader.class); bind(com.googlesource.gerrit.plugins.its.base.workflow.RulesConfigReader.class).toInstance(rulesConfig); rulesProjectCache = createMock(com.googlesource.gerrit.plugins.its.base.its.ItsRulesProjectCache.class); bind(com.googlesource.gerrit.plugins.its.base.its.its.ItsConfig.class).toInstance(rulesProjectCache); bind(java.nio.Path.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.class); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.its.its.ItsConfig.class).toInstance(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.class); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.class); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.ItsConfig.class); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.PluginTest.class).toInstance(com.googlesource.gerrit.plugins.its.base.PluginTest.class); }
@java.lang.Override protected void configure() { bind(java.lang.String.class).annotatedWith(com.google.gerrit.extensions.annotations.PluginName.class).toInstance("InitialTest."); java.nio.file.Files.exists("etc").resolve("etc").resolve("etc").resolve("its/"); java.nio.file.Files path = createMock(com.googlesource.gerrit.plugins.its.base.workflow.RulesConfigReader.class); bind(com.googlesource.gerrit.plugins.its.base.its.its.its.its.RulesConfigReader.class); bind(com.googlesource.gerrit.plugins.its.base.workflow.RulesConfigReader.class).toInstance(rulesConfig); rulesProjectCache = createMock(com.googlesource.gerrit.plugins.its.base.its.ItsRulesProjectCache.class); bind(com.googlesource.gerrit.plugins.its.base.its.its.ItsConfig.class).toInstance(rulesProjectCache); bind(java.nio.Path.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.class); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.its.its.ItsConfig.class).toInstance(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.class); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.class); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.ItsConfig.class); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.PluginTest.class).toInstance(com.googlesource.gerrit.plugins.its.base.its.RuleTest.class); }
@com.google.inject.Provides @com.google.inject.Singleton @com.google.inject.servlet.http.HttpServlet java.nio.file.Paths sitePath(@com.google.gerrit.server.config.SitePaths java.nio.file.Path sitePath) { return sitePath.normalize().resolve("/etc/etc").resolve("its/").resolve("its/").resolve("its/").resolve("its/")); }
@com.google.inject.Provides @com.google.inject.Singleton @com.google.inject.servlet.http.HttpServlet java.nio.file.Paths sitePath(@com.google.gerrit.server.config.SitePaths java.nio.file.Path sitePath) { return sitePath.normalize().resolve("/etc/etc").resolve("its/").resolve("its/").resolve("its/").resolve("its/").resolve("its/").toString(); }
@com.google.inject.Provides @com.google.inject.Singleton @com.google.inject.servlet.http.HttpServlet java.nio.file.Paths sitePath(@com.google.gerrit.server.config.SitePaths java.nio.file.Path sitePath) { return sitePath.normalize().resolve("/etc/etc").resolve("its/").resolve("its/").resolve("its/").resolve("its/").resolve("its/").resolve("../"); }
@com.google.inject.Provides @com.google.inject.Singleton @com.google.inject.servlet.http.HttpServlet java.nio.file.Paths sitePath(@com.google.gerrit.server.config.SitePaths java.nio.file.Path sitePath) { return sitePath.normalize().resolve("/etc/etc").resolve("its/").resolve("its/").resolve("its/").resolve("its/").resolve("its/").resolve("../" + (sitePath) + "; }
@com.google.inject.Provides @com.google.inject.Singleton @com.google.inject.servlet.http.HttpServlet java.nio.file.Paths sitePath(@com.google.gerrit.server.config.SitePaths java.nio.file.Path sitePath) { return sitePath.normalize().resolve("/etc/etc").resolve("its/").resolve("its/").resolve("its/").resolve("its/").resolve("its/").resolve("../" + ") return basePaths; }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Change.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws com.google.gwtorm.server.OrmException, java.io.IOException { switch (operation) { case INDEX : try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { com.google.gerrit.reviewdb.client.Change change = db.changes().get(id); if (change == null) { indexer.delete(id); return; } indexer.index(db, change); break; case DELETE : indexer.delete(id); break; case DELETE : indexer.delete(id); break; case DELETE : indexer.update(id); break; case DELETE : break; case DELETE : indexer.update("Change"); break; case DELETE : case DELETE : break; case DELETE : break; default : throw new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} failed", id); } }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Change.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws com.google.gwtorm.server.OrmException, java.io.IOException { switch (operation) { case INDEX : try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { com.google.gerrit.reviewdb.client.Change change = db.changes().get(id); if (change == null) { indexer.delete(id); return; } indexer.index(db, change); break; case DELETE : indexer.delete(id); break; case DELETE : indexer.delete(id); break; case DELETE : indexer.update(id); break; case DELETE : break; case DELETE : indexer.update("Change"); break; case DELETE : case DELETE : break; case DELETE : break; default : throw new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.log.debug("Change {} failed", id); } }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Change.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws com.google.gwtorm.server.OrmException, java.io.IOException { switch (operation) { case INDEX : try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { com.google.gerrit.reviewdb.client.Change change = db.changes().get(id); if (change == null) { indexer.delete(id); return; } indexer.index(db, change); break; case DELETE : indexer.delete(id); break; case DELETE : indexer.delete(id); break; case DELETE : indexer.update(id); break; case DELETE : break; case DELETE : indexer.update("Change"); break; case DELETE : case DELETE : break; case DELETE : break; default : throw new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} failed", id); } } }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Change.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws com.google.gwtorm.server.OrmException, java.io.IOException { switch (operation) { case INDEX : try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { com.google.gerrit.reviewdb.client.Change change = db.changes().get(id); if (change == null) { indexer.delete(id); return; } indexer.index(db, change); break; case DELETE : indexer.delete(id); break; case DELETE : indexer.delete(id); break; case DELETE : indexer.update(id); break; case DELETE : break; case DELETE : indexer.update("Change"); break; case DELETE : case DELETE : break; case DELETE : break; default : throw new java.io.IOException(("Change {} failed", id); } }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Change.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws com.google.gwtorm.server.OrmException, java.io.IOException { switch (operation) { case INDEX : try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { com.google.gerrit.reviewdb.client.Change change = db.changes().get(id); if (change == null) { indexer.delete(id); return; } indexer.index(db, change); break; case DELETE : indexer.delete(id); break; case DELETE : indexer.delete(id); break; case DELETE : indexer.update(id); break; case DELETE : break; case DELETE : indexer.update("Change"); break; case DELETE : case DELETE : break; case DELETE : break; default : throw new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} successfully deleted from index", id); } }
@java.lang.Override protected void configure() { bind(java.util.concurrent.Executor.class).annotatedWith(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutor.class).toProvider(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutorProvider.class); listener().to(com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.ChangeIndexedListener.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.ChangeIndexedListener.class).to(com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.LifecycleListener.class).to(com.ericsson.gerrit.plugins.highavailability.IndexEventHandler.class); }
@java.lang.Override protected void configure() { bind(java.util.concurrent.Executor.class).annotatedWith(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutor.class).toProvider(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutorProvider.class); listener().to(com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.ChangeIndexedListener.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.ChangeIndexedListener.class).to(com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.IndexEventHandler.class).to(com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.class); }
@java.lang.Override protected void configure() { bind(java.util.concurrent.Executor.class).annotatedWith(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutor.class).toProvider(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutorProvider.class); listener().to(com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.ChangeIndexedListener.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.ChangeIndexedListener.class).to(com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.IndexEventHandler.class).to(com.ericsson.gerrit.plugins.highavailability.IndexEventHandler.class); }
@java.lang.Override protected void configure() { bind(java.util.concurrent.Executor.class).annotatedWith(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutor.class).toProvider(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutorProvider.class); listener().to(com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.ChangeIndexedListener.class).to(com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.ChangeIndexedListener.class).to(com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.LifecycleListener.class).to(com.ericsson.gerrit.plugins.highavailability.Configuration.class); }
@java.lang.Override protected void configure() { bind(java.util.concurrent.Executor.class).annotatedWith(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutor.class).toProvider(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutorProvider.class); listener().to(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutorProvider.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.ChangeIndexedListener.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.ChangeIndexedListener.class).to(com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.IndexEventHandler.class).to(com.ericsson.gerrit.plugins.highavailability.IndexEventHandler.class); }
public boolean autoReindexAtStart() { return autoReindexAtStart; }
public boolean autoRebaseAtStart() { return autoReindexAtStart; }
public boolean autoReindexAtStart() { return autoRebaseAtStart; }
public boolean autoReindexAtStart() { return autoRegex; }
public boolean autoReindexAtStart() { return autoReindexAt; }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Account.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws java.io.IOException { indexer.index(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet.logger.debug("Account {} successfully indexed", id); indexTs.update("account"); }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Account.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws java.io.IOException { indexer.index(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountAccountRestApiServlet.logger.debug("Account {} successfully indexed", id); indexTs.update("account"); }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Account.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws java.io.IOException { indexer.index(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet.logger.debug("Account {} successfully indexed", id); indexTs.update("Account {} successfully indexed", id); }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Account.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws java.io.IOException { indexer.index(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet.logger.debug("Account {} successfully indexed", id); indexTs.update("Account {} found"); }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Account.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws java.io.IOException { indexer.index(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet.logger.debug("Account {} successfully indexed", id); indexTs.update("Account {} successfully indexed"); }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws java.io.IOException { indexer.index(uuid); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexGroupRestApiServlet.logger.debug("Group {} successfully indexed", uuid); indexTs.update("Group"); }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws java.io.IOException { indexer.index(uuid); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexGroupRestApiServlet.logger.debug("Group {} successfully indexed", uuid); indexTs.update("group"); }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws java.io.IOException { indexer.index(uuid); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexGroupRestApiServlet.logger.debug("Group {} successfully indexed", uuid); indexEvent.update("Group"); }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws java.io.IOException { indexer.index(uuid); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexGroupRestApiServlet.logger.debug("Group {} successfully indexed", uuid); index.update("Group"); }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws java.io.IOException { indexer.index(uuid); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexGroupRestApiServlet.logger.debug("Group {} successfully indexed", uuid); indexEvents.update("group"); }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Change.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.Change change = null; switch (operation) { case INDEX : try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { change = db.changes().get(id); if (change!= null) { indexer.index(db, change); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} successfully indexed", id); break; } } catch (java.lang.Exception e) { throw e; } com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} was deleted from index.", id); } if (change == null) { indexer.delete(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} was deleted from index.", id); break; case DELETE : indexer.delete(id); break; case DELETE : indexer.delete(id); break; case DELETE : break; break; case DELETE : indexer.delete(id); break; } }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Change.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.Change change = null; switch (operation) { case INDEX : try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { change = db.changes().get(id); if (change!= null) { indexer.index(db, change); break; } } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} successfully indexed", id); throw e; } com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} was deleted from index.", id); } if (change == null) { indexer.delete(id); break; } com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} was deleted from index.", id); break; case DELETE : indexer.delete(id); break; case DELETE : indexer.delete(id); break; case DELETE : indexer.delete(id); break; break; case DELETE : break; } }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Change.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.Change change = null; switch (operation) { case INDEX : try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { change = db.changes().get(id); if (change!= null) { indexer.index(db, change); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} successfully indexed", id); break; } } catch (java.lang.Exception e) { throw e; } com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} was deleted from index.", id); } if (change == null) { indexer.delete(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} was deleted from index.", id); break; case DELETE : indexer.delete(id); break; case DELETE : indexer.delete(id); break; case DELETE : break; break; case DELETE : indexer.delete(id); break; case DELETE : break; } }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Change.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.Change change = null; switch (operation) { case INDEX : try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { change = db.changes().get(id); if (change!= null) { indexer.index(db, change); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} successfully indexed", id); break; } } catch (java.lang.Exception e) { throw e; } com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} was deleted from index.", id); } if (change == null) { indexer.delete(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} was deleted from index.", id); break; case DELETE : indexer.delete(id); break; case DELETE : indexer.delete(id); break; case DELETE : break; break; case DELETE : indexer.delete(id); break; case DELETE : break; break; } }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Change.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.Change change = null; switch (operation) { case INDEX : try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { change = db.changes().get(id); if (change!= null) { indexer.index(db, change); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} successfully indexed", id); break; } } catch (java.lang.Exception e) { throw e; } com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} was deleted from index.", id); } if (change == null) { indexer.delete(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} was deleted from index.", id); break; case DELETE : indexer.delete(id); break; case DELETE : indexer.delete(id); break; case DELETE : break; break; case DELETE : indexer.delete(id); break; case DELETE : break; case DELETE : break; } } }
public void setLastLoginExternalIdKey(com.google.gerrit.reviewdb.client.AccountExternalId.Key externalIdKey) { put(lastLoginExternalIdPropertyKey, externalIdKey); }
public void setLastLoginExternalIdKey(com.google.gerrit.reviewdb.client.AccountExternalId.Key externalIdKey) { put(lastLoginExternalIdKey, externalIdKey); }
public void setLastLoginExternalIdKey(com.google.gerrit.reviewdb.client.AccountExternalId.Key externalIdKey) { put(lastLoginExternalIdKey(), externalIdKey); }
public void setLastLoginExternalIdKey(com.google.gerrit.reviewdb.client.AccountExternalId.Key externalIdKey) { put(lastLoginExternalIdPropertyKey(), externalIdKey); }
public void setLastLoginExternalIdKey(final com.google.gerrit.reviewdb.client.AccountExternalId.Key externalIdKey) { put(lastLoginExternalIdPropertyKey, externalIdKey); }
private void convertLocalUserToLowerCase(final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.AccountExternalId extId) { if (extId.isScheme(AccountExternalId.SCHEME_GERRIT)) { final java.lang.String localUser = extId.getSchemeRest(); final java.lang.String localUserLowerCase = localUser.toLowerCase(java.util.Locale.USERS); if (!(localUser.equals(localUserLowerCase))) { final com.google.gerrit.reviewdb.client.AccountExternalId extIdKey = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GERRIT, localUserLowerCase); final com.google.gerrit.reviewdb.client.AccountExternalId extIdKeyLowerCase = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GERRIT, localUserLowerCase); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); try { db.accountExternalIds().insert(java.util.Collections.singleton(extId)); } catch (com.google.gwtorm.server.OrmException err) { java.lang.System.err.println(("Cannot delete " + (error.getMessage()))); } } }
private void convertLocalUserToLowerCase(final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.AccountExternalId extId) { if (extId.isScheme(AccountExternalId.SCHEME_GERRIT)) { final java.lang.String localUser = extId.getSchemeRest(); final java.lang.String localUserLowerCase = localUser.toLowerCase(java.util.Locale.USERS); if (!(localUser.equals(localUserLowerCase))) { final com.google.gerrit.reviewdb.client.AccountExternalId.Key extIdKeyLowerCase = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GERRIT, localUserLowerCase); final com.google.gerrit.reviewdb.client.AccountExternalId extIdKeyLowerCase = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GERRIT, localUserLowerCase); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); try { db.accountExternalIds().insert(java.util.Collections.singleton(extId)); } catch (com.google.gwtorm.server.OrmException err) { java.lang.System.err.println(("Cannot delete " + (error.getMessage()))); } } } }
private void convertLocalUserToLowerCase(final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.AccountExternalId extId) { if (extId.isScheme(AccountExternalId.SCHEME_GERRIT)) { final java.lang.String localUser = extId.getSchemeRest(); final java.lang.String localUserLowerCase = localUser.toLowerCase(java.util.Locale.USERS); if (!(localUser.equals(localUserLowerCase))) { final com.google.gerrit.reviewdb.client.AccountExternalId.Key extIdKeyLowerCase = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GERRIT, localUserLowerCase); final com.google.gerrit.reviewdb.client.AccountExternalId extIdKeyLowerCase = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GERRIT, localUserLowerCase); try { db.accountExternalIds().insert(java.util.Collections.singleton(extId)); db.accountExternalIds().delete(java.util.Collections.singleton(extId)); } catch (com.google.gwtorm.server.OrmException err) { java.lang.System.err.println(("Cannot delete " + (error.getMessage()))); } } }
private void convertLocalUserToLowerCase(final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.AccountExternalId extId) { if (extId.isScheme(AccountExternalId.SCHEME_GERRIT)) { final java.lang.String localUser = extId.getSchemeRest(); final java.lang.String localUserLowerCase = localUser.toLowerCase(java.util.Locale.USERS); if (!(localUser.equals(localUserLowerCase))) { final com.google.gerrit.reviewdb.client.AccountExternalId extIdKey = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GERRIT, localUserLowerCase); final com.google.gerrit.reviewdb.client.AccountExternalId extIdKeyLowerCase = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GERRIT, localUserLowerCase); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); try { db.accountExternalIds().insert(java.util.Collections.singleton(extId)); } catch (com.google.gwtorm.server.OrmException err) { java.lang.System.err.println(("Cannot delete " + (error.getMessage()))); } } } }
private void convertLocalUserToLowerCase(final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.AccountExternalId extId) { if (extId.isScheme(AccountExternalId.SCHEME_GERRIT)) { final java.lang.String localUser = extId.getSchemeRest(); final java.lang.String localUserLowerCase = localUser.toLowerCase(java.util.Locale.USERS); if (!(localUser.equals(localUserLowerCase))) { final com.google.gerrit.reviewdb.client.AccountExternalId.Key extIdKeyLowerCase = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GERRIT, localUserLowerCase); final com.google.gerrit.reviewdb.client.AccountExternalId extIdKeyLowerCase = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GERRIT, localUserLowerCase); try { db.accountExternalIds().insert(java.util.Collections.singleton(extId)); db.accountExternalIds().delete(java.util.Collections.singleton(extId)); } catch (com.google.gwtorm.server.OrmException err) { java.lang.System.err.println(("Cannot delete " + (error.getMessage()))); } } } }
@java.lang.Override public int run() throws java.lang.Exception { if ((threads) <= 0) { threads = 1; } dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); manager.add(dbInjector, dbInjector.createChildInjector(com.google.gerrit.server.schema.SchemaVersionCheck.module())); manager.start(); dbInjector.injectMembers(this); try (com.google.gerrit.reviewdb.server.ReviewDb db = database.open()) { tid = db.accountExternalIds().all().toList(); synchronized(monitor) { monitor.beginTask("Task to do"); monitor.beginTask("Task to do local"); } } final java.util.List<com.google.gerrit.pgm.util.LocalUsername> threads = new java.util.ArrayList<>(threads); for (int tid = 0; tid < (threads); tid++) { com.google.gerrit.pgm.LocalUsers.Workers.Workers t = new com.google.gerrit.pgm.util.LocalUsersToLowerCase(t); workQueue.add(t); } manager.stop(); return 0; }
@java.lang.Override public int run() throws java.lang.Exception { if ((threads) <= 0) { threads = 1; } dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); manager.add(dbInjector, dbInjector.createChildInjector(com.google.gerrit.server.schema.SchemaVersionCheck.module())); manager.start(); dbInjector.injectMembers(this); try (com.google.gerrit.reviewdb.server.ReviewDb db = database.open()) { tid = db.accountExternalIds().all().toList(); synchronized(monitor) { monitor.beginTask("Task to do"); monitor.beginTask("Task to do local"); } } final java.util.List<com.google.gerrit.pgm.util.LocalUsername> workQueue = new java.util.ArrayList<>(threads); for (int tid = 0; tid < (threads); tid++) { com.google.gerrit.pgm.LocalUsers.Workers.Workers t = new com.google.gerrit.pgm.util.LocalUsersToLowerCase(t); workQueue.add(t); } manager.stop(); return 0; }
@java.lang.Override public int run() throws java.lang.Exception { if ((threads) <= 0) { threads = 1; } dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); manager.add(dbInjector, dbInjector.createChildInjector(com.google.gerrit.server.schema.SchemaVersionCheck.module())); manager.start(); dbInjector.injectMembers(this); try (com.google.gerrit.reviewdb.server.ReviewDb db = database.open()) { tid = db.accountExternalIds().all().toList(); synchronized(monitor) { monitor.beginTask("Task to do"); monitor.beginTask("Task to do local"); } } final java.util.List<com.google.gerrit.pgm.util.LocalUsername> threads = new java.util.ArrayList<>(threads); for (int tid = 0; tid < (threads); tid++) { com.google.gerrit.pgm.LocalUsers.Workers.Workers t = new com.google.gerrit.pgm.util.LocalUsersToLowerCase(t); workQueue.add(t); } manager.stop(); monitor.stop(); return 0; }
@java.lang.Override public int run() throws java.lang.Exception { if ((threads) <= 0) { threads = 1; } dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); manager.add(dbInjector, dbInjector.createChildInjector(com.google.gerrit.server.schema.SchemaVersionCheck.module())); manager.start(); dbInjector.injectMembers(this); try (com.google.gerrit.reviewdb.server.ReviewDb db = database.open()) { tid = db.accountExternalIds().all().toList(); synchronized(monitor) { monitor.beginTask("Task to do"); monitor.beginTask("Task to do local"); } } final java.util.List<com.google.gerrit.pgm.util.LocalUsername> threads = new java.util.ArrayList<>(threads); for (int tid = 0; tid < (threads); tid++) { com.google.gerrit.pgm.LocalUsers.Workers.Workers.Workers t = new com.google.gerrit.pgm.util.LocalUsersToLowerCase(t); workQueue.add(t); } manager.stop(); return 0; }
@java.lang.Override public int run() throws java.lang.Exception { if ((threads) <= 0) { threads = 1; } dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); manager.add(dbInjector, dbInjector.createChildInjector(com.google.gerrit.server.schema.SchemaVersionCheck.module())); manager.start(); dbInjector.injectMembers(this); try (com.google.gerrit.reviewdb.server.ReviewDb db = database.open()) { tid = db.accountExternalIds().all().toList(); synchronized(monitor) { monitor.beginTask("Task to do"); monitor.beginTask("Task to do local"); } } final java.util.List<com.google.gerrit.pgm.util.LocalUsername> threads = new java.util.ArrayList<>(threads); for (int tid = 0; tid < (threads); tid++) { com.google.gerrit.pgm.LocalUsers.Workers.Workers t = new com.google.gerrit.pgm.util.LocalUsersToLowerCase(t); workQueue.add(t); } for (com.google.gerrit.pgm.LocalUsers.Worker t : workQueue.start(); } manager.stop(); return 0; }
private java.util.Set<com.google.gerrit.reviewdb.client.AccountExternalId> next() { synchronized(tasks) { if (tasks.isEmpty()) { return null; } return todoOp.remove(((tasks.size()) - 1)); }
private java.util.Set<com.google.gerrit.reviewdb.client.AccountExternalId> next() { synchronized(tasks) { if (tasks.isEmpty()) { return null; } return todoCallable(); }
private java.util.Set<com.google.gerrit.reviewdb.client.AccountExternalId> next() { synchronized(tasks) { if (tasks.isEmpty()) { return null; } return todoTransaction(tasks.size()); }
private java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> next() { synchronized(tasks) { if (tasks.isEmpty()) { return null; } return todoOp.remove(((tasks.size()) - 1)); }
private java.util.Optional<com.google.gerrit.reviewdb.client.AccountExternalId> next() { synchronized(tasks) { if (tasks.isEmpty()) { return null; } return todoOp.remove(((tasks.size()) - 1)); }
private static boolean authentUser(java.lang.String user, com.google.gerrit.httpd.WebSession session) { com.google.gerrit.reviewdb.client.AccountExternalId.Key id = session.getLastLoginExternalId(); return (id!= null) && (id.equals(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_GERRIT, user))); }
private static booleanCorrectUser(java.lang.String user, com.google.gerrit.httpd.WebSession session) { com.google.gerrit.reviewdb.client.AccountExternalId.Key id = session.getLastLoginExternalId(); return (id!= null) && (id.equals(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_GERRIT, user))); }
private static booleanorrectUser(java.lang.String user, com.google.gerrit.httpd.WebSession session) { com.google.gerrit.reviewdb.client.AccountExternalId.Key id = session.getLastLoginExternalId(); return (id!= null) && (id.equals(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_GERRIT, user))); }
private static boolean properUser(java.lang.String user, com.google.gerrit.httpd.WebSession session) { com.google.gerrit.reviewdb.client.AccountExternalId.Key id = session.getLastLoginExternalId(); return (id!= null) && (id.equals(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_GERRIT, user))); }
private static boolean requiredUser(java.lang.String user, com.google.gerrit.httpd.WebSession session) { com.google.gerrit.reviewdb.client.AccountExternalId.Key id = session.getLastLoginExternalId(); return (id!= null) && (id.equals(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_GERRIT, user))); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.config.ConfigResource rsrc, com.google.gerrit.server.config.ConfirmEmail.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.CurrentUser user = self.get(); if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } if (input == null) { input = new com.google.gerrit.server.config.ConfirmEmail.Input(); } if ((input.token) == null) { input = new com.google.gerrit.server.config.ConfirmEmail.Input(); } try { com.google.gerrit.server.mail.EmailTokenVerifier token = emailTokenVerifier.decode(input.token); com.google.gerrit.reviewdb.client.Account.Id accId = user.getAccountId(); if (accId.equals(token.getAccountId())) { accountManager.link(accId, token.toAuthRequest()); return com.google.gerrit.extensions.restapi.Response.none(); } catch (com.google.gerrit.server.mail.EmailTokenVerifier e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Cannot token"); } throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Cannot token"); } catch (com.google.gerrit.server.account.AccountException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } catch (com.google.gerrit.server.account.AccountException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.config.ConfigResource rsrc, com.google.gerrit.server.config.ConfirmEmail.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.CurrentUser user = self.get(); if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } if (input == null) { input = new com.google.gerrit.server.config.ConfirmEmail.Input(); } if ((input.token) == null) { input = new com.google.gerrit.server.config.ConfirmEmail.Input(); } try { com.google.gerrit.server.mail.EmailTokenVerifier token = emailTokenVerifier.decode(input.token); com.google.gerrit.reviewdb.client.Account.Id accId = user.getAccountId(); if (accId.equals(token.getAccountId())) { accountManager.link(accId, token.toAuthRequest()); return com.google.gerrit.extensions.restapi.Response.none(); } catch (com.google.gerrit.server.mail.EmailTokenVerifier e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Cannot token"); } throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } catch (com.google.gerrit.server.account.AccountException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } catch (com.google.gerrit.server.account.AccountException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.config.ConfigResource rsrc, com.google.gerrit.server.config.ConfirmEmail.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.CurrentUser user = self.get(); if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } if (input == null) { input = new com.google.gerrit.server.config.ConfirmEmail.Input(); } if ((input.token) == null) { input = new com.google.gerrit.server.config.ConfirmEmail.Input(); } try { com.google.gerrit.server.mail.EmailTokenVerifier token = emailTokenVerifier.decode(input.token); com.google.gerrit.reviewdb.client.Account.Id accId = user.getAccountId(); if (accId.equals(token.getAccountId())) { accountManager.link(accId, token.toAuthRequest()); return com.google.gerrit.extensions.restapi.Response.none(); } catch (com.google.gerrit.server.mail.EmailTokenVerifier e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Cannot token"); } throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } catch (com.google.gerrit.server.account.AccountException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.config.ConfigResource rsrc, com.google.gerrit.server.config.ConfirmEmail.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.CurrentUser user = self.get(); if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } if (input == null) { input = new com.google.gerrit.server.config.ConfirmEmail.Input(); } if ((input.token) == null) { input = new com.google.gerrit.server.config.ConfirmEmail.Input(); } try { com.google.gerrit.server.mail.EmailTokenVerifier.ParsedToken token = emailTokenVerifier.decode(input.token); com.google.gerrit.reviewdb.client.Account.Id accId = user.getAccountId(); if (accId.equals(token.getAccountId())) { accountManager.link(accId, token.toAuthRequest()); return com.google.gerrit.extensions.restapi.Response.none(); } catch (com.google.gerrit.server.mail.EmailTokenVerifier e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Cannot token"); } throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Cannot token"); } catch (com.google.gerrit.server.account.AccountException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } catch (com.google.gerrit.server.account.AccountException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.config.ConfigResource rsrc, com.google.gerrit.server.config.ConfirmEmail.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.CurrentUser user = self.get(); if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } if (input == null) { input = new com.google.gerrit.server.config.ConfirmEmail.Input(); } if ((input.token) == null) { input = new com.google.gerrit.server.config.ConfirmEmail.Input(); } try { com.google.gerrit.server.mail.EmailTokenVerifier.ParsedToken token = emailTokenVerifier.decode(input.token); com.google.gerrit.reviewdb.client.Account.Id accId = user.getAccountId(); if (accId.equals(token.getAccountId())) { accountManager.link(accId, token.toAuthRequest()); return com.google.gerrit.extensions.restapi.Response.none(); } catch (com.google.gerrit.server.mail.EmailTokenVerifier e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Cannot token"); } throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Cannot token"); } catch (com.google.gerrit.server.account.AccountException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } }
public com.google.gerrit.server.git.validators.CommitValidators forGerritCommits(com.google.gerrit.server.project.RefControl refControl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.lib.Repository repo) { return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, rw, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators))); }
public com.google.gerrit.server.git.validators.CommitValidators forGerritCommits(com.google.gerrit.server.project.RefControl refControl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.lib.Repository repo) { return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, rw, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidator(pluginValidators))); }
public com.google.gerrit.server.git.validators.CommitValidators forGerritCommits(com.google.gerrit.server.project.RefControl refControl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.lib.Repository repo) { return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, rw, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidator))); }
public com.google.gerrit.server.git.validators.CommitValidators forGerritCommits(com.google.gerrit.server.project.RefControl refControl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.revwalk.RevWalk rw) { return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl, rw, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, rw, allUsers))); }
public com.google.gerrit.server.git.validators.CommitValidators forGerritCommits(com.google.gerrit.server.project.RefControl refControl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.lib.Repository repo) { return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidators.ConfigValidator(refControl, rw, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidator))); }
public com.google.gerrit.server.git.validators.CommitValidators forReceiveCommits(com.google.gerrit.server.project.RefControl refControl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { org.eclipse.jgit.notes.NoteMap rejectCommits = com.google.gerrit.server.git.BanCommit.loadRejectCommitsMap(repo, rw); return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, rw, allUsers))); }
public com.google.gerrit.server.git.validators.CommitValidators forReceiveCommits(com.google.gerrit.server.project.RefControl refControl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { org.eclipse.jgit.notes.NoteMap rejectCommits = com.google.gerrit.server.git.BanCommit.loadRejectCommitsMap(repo, rw); return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, rw, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidators(rejectCommitValidators))); }
public com.google.gerrit.server.git.validators.CommitValidators forReceiveCommits(com.google.gerrit.server.project.RefControl refControl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { org.eclipse.jgit.notes.NoteMap rejectCommits = com.google.gerrit.server.git.BanCommit.loadRejectCommitsMap(repo, rw); return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, rw, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.BannedCommitValidators(rejectCommitValidators))); }
public com.google.gerrit.server.git.validators.CommitValidators forReceiveCommits(com.google.gerrit.server.project.RefControl refControl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { org.eclipse.jgit.notes.NoteMap rejectCommits = com.google.gerrit.server.git.BanCommit.loadRejectCommitsMap(repo, rw); return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, rw, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidators(rejectCommits), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators))); }
public com.google.gerrit.server.git.validators.CommitValidators forReceiveCommits(com.google.gerrit.server.project.RefControl refControl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { org.eclipse.jgit.notes.NoteMap rejectCommits = com.google.gerrit.server.git.BanCommit.loadRejectCommitsMap(repo, rw); return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, rw, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidators(rejectCommits), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidators(pluginValidators))); }
private void writeObject(final java.io.ObjectOutputStream out) throws java.io.IOException { writeVarInt32(out, 1); writeVarInt32(out, accountId.get()); writeVarInt32(out, 2); writeVarInt32(out, refreshCookieAt()); writeVarInt32(out, refreshCookieAt); writeVarInt32(out, 3); writeVarInt32(out, 4); if ((externalId)!= null) { writeVarInt32(out, 4, externalId.get()); } if ((sessionId)!= null) { writeVarInt32(out, sessionId.get()); } writeVarInt32(out, expirationId); writeVarInt32(out, expirationId); if ((auth)!= null) { writeVarInt32(out, 8); writeVarInt32(out, 8); } writeVarInt32(out, 0); }
private void writeObject(final java.io.ObjectOutputStream out) throws java.io.IOException { writeVarInt32(out, 1); writeVarInt32(out, accountId.get()); writeVarInt32(out, 2); writeVarInt32(out, refreshCookieAt()); writeVarInt32(out, refreshCookieAt); writeVarInt32(out, 3); writeVarInt32(out, 4); if ((externalId)!= null) { writeVarInt32(out, 4, externalId.get()); } if ((sessionId)!= null) { writeVarInt32(out, sessionId.get()); } writeVarInt32(out, expirationId); writeVarInt32(out, expirationId); if ((auth)!= null) { writeVarInt32(out, 8); writeVarInt32(out, 4); } writeVarInt32(out, 0); }
private void writeObject(final java.io.ObjectOutputStream out) throws java.io.IOException { writeVarInt32(out, 1); writeVarInt32(out, accountId.get()); writeVarInt32(out, 2); writeVarInt32(out, refreshCookieAt()); writeVarInt32(out, refreshCookieAt); writeVarInt32(out, 3); writeVarInt32(out, 4); if ((externalId)!= null) { writeVarInt32(out, 4, externalId.get()); } if ((sessionId)!= null) { writeVarInt32(out, sessionId.get()); } writeVarInt32(out, expirationId); writeVarInt32(out, expirationId); if ((auth)!= null) { writeVarInt32(out, 8); writeVarInt32(out, 8); } writeVarInt32(out, 0, out); }
private void writeObject(final java.io.ObjectOutputStream out) throws java.io.IOException { writeVarInt32(out, 1); writeVarInt32(out, accountId.get()); writeVarInt32(out, 2); writeVarInt32(out, refreshCookieAt()); writeVarInt32(out, refreshCookieAt); writeVarInt32(out, 3); writeVarInt32(out, 4); if ((externalId)!= null) { writeVarInt32(out, 4, externalId.get()); } if ((sessionId)!= null) { writeVarInt32(out, sessionId.get()); } writeVarInt32(out, expirationId); writeVarInt32(out, expiresAtString.get()); if ((auth)!= null) { writeVarInt32(out, 8); writeVarInt32(out, 8); } writeVarInt32(out, 0); }
private void writeObject(final java.io.ObjectOutputStream out) throws java.io.IOException { writeVarInt32(out, 1); writeVarInt32(out, accountId.get()); writeVarInt32(out, 2); writeVarInt32(out, refreshCookieAt()); writeVarInt32(out, refreshCookieAt); writeVarInt32(out, 3); writeVarInt32(out, 4); if ((externalId)!= null) { writeVarInt32(out, 4, externalId.get()); } if ((sessionId)!= null) { writeVarInt32(out, sessionId.get()); } writeVarInt32(out, expirationId); writeVarInt32(out, expirationId); if ((auth)!= null) { writeVarInt32(out, 8); writeVarInt32(out, 8); } writeVarInt32(out, 0); if ((auth)!= null) { writeVarInt32(out, auth); } }
public AccountExternalId getExternalId() { return externalId; }
java.util.Set<com.google.gerrit.reviewdb.client.AccountExternalId.Key> getExternalId() { return externalId; }
java.util.Set<com.google.gerrit.reviewdb.client.AccountExternalId> getExternalId() { return externalId; }
java.util.Optional<com.google.gerrit.reviewdb.client.AccountExternalId> getExternalId() { return externalId; }
private java.util.Set<com.google.gerrit.reviewdb.client.AccountExternalId.Key> getExternalId() { return externalId; }
private AccountExternalId.Key toExtIdKey(byte[] fp) { return new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GPGKEY, com.google.common.io.BaseEncoding.base16().encode(fp)); }
private AccountExternalId.Key toExtIdKey(byte[] fp) { return new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GPGKEY, com.google.common.io.ByteArrayOutputStream.encode(fp)); }
private AccountExternalId.Key toExtIdKey(byte[] fp) { return new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GPGKEY, com.google.gerrit.common.io.BaseEncoding.base16().encode(fp)); }
private AccountExternalId toExtIdKey(byte[] fp) { return new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GPGKEY, com.google.common.io.BaseEncoding.base16().encode(fp)); }
private AccountExternalId.Key toExtIdKey(byte[] fp) { return new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GPGKEY, com.google.common.io.BaseEncoding.base64().encode(fp)); }
com.google.gerrit.httpd.WebSessionManager.Val createVal(final com.google.gerrit.httpd.WebSessionManager.Key key, final com.google.gerrit.reviewdb.client.Account.Id who, final boolean remember, final com.google.gerrit.reviewdb.client.AccountExternalId.Key lastLogin, java.lang.String sid, java.lang.String auth) { final long halfAgeRefresh = (sessionMaxAgeMillis) >>> 1; final long minRefresh = java.util.concurrent.TimeUnit.MILLISECONDS.convert(1, java.util.concurrent.TimeUnit.HOURS); final long refresh = java.lang.Math.min(halfAgeRefresh, minRefresh, minRefresh); final long refreshCookieAt = nowMs(); final long refreshCookieAt = now + refresh; final long refreshCookieAt = now + (sessionMaxAgeMillis); if (sid == null) { sid = newUniqueToken(who); } com.google.gerrit.httpd.WebSessionManager.Val val = new com.google.gerrit.httpd.WebSessionManager.Val(who, refreshCookieAt, remember, lastLogin, sid, expiresAt, sid, auth); self.put(key.token, val); return val; }
com.google.gerrit.httpd.WebSessionManager.Val createVal(final com.google.gerrit.httpd.WebSessionManager.Key key, final com.google.gerrit.reviewdb.client.Account.Id who, final boolean remember, final com.google.gerrit.reviewdb.client.AccountExternalId.Key lastLogin, java.lang.String sid, java.lang.String sid) { final long halfAgeRefresh = (sessionMaxAgeMillis) >>> 1; final long minRefresh = java.util.concurrent.TimeUnit.MILLISECONDS.convert(1, java.util.concurrent.TimeUnit.HOURS); final long refresh = java.lang.Math.min(halfAgeRefresh, minRefresh, minRefresh); final long refreshCookieAt = nowMs(); final long refreshCookieAt = now + refresh; final long refreshCookieAt = now + (sessionMaxAgeMillis); if (sid == null) { sid = newUniqueToken(who); } com.google.gerrit.httpd.WebSessionManager.Val val = new com.google.gerrit.httpd.WebSessionManager.Val(who, refreshCookieAt, remember, lastLogin, sid, expiresAt, sid, auth); self.put(key.token, val); return val; }
com.google.gerrit.httpd.WebSessionManager.Val createVal(final com.google.gerrit.httpd.WebSessionManager.Key key, final com.google.gerrit.reviewdb.client.Account.Id who, final boolean remember, final com.google.gerrit.reviewdb.client.AccountExternalId.Key lastLogin, java.lang.String sid, java.lang.String auth) { final long halfAgeRefresh = (sessionMaxAgeMillis) >>> 1; final long minRefresh = java.util.concurrent.TimeUnit.MILLISECONDS.convert(1, java.util.concurrent.TimeUnit.HOURS); final long refresh = java.lang.Math.min(halfAgeRefresh, minRefresh, minRefresh); final long refreshCookieAt = nowMs(); final long refreshCookieAt = now + refresh; final long refreshCookieAt = now + (sessionMaxAgeMillis); if (sid == null) { sid = newUniqueToken(who); } com.google.gerrit.httpd.WebSessionManager.Val val = new com.google.gerrit.httpd.WebSessionManager.Val(who, refreshCookieAt, remember, lastLogin, sid, expiresAt, sid, auth); self.put(key, val); return val; }
com.google.gerrit.httpd.WebSessionManager.Val createVal(final com.google.gerrit.httpd.WebSessionManager.Key key, final com.google.gerrit.reviewdb.client.Account.Id who, final boolean remember, final com.google.gerrit.reviewdb.client.AccountExternalId.Key lastLogin, java.lang.String sid, java.lang.String sid) { final long halfAgeRefresh = (sessionMaxAgeMillis) >>> 1; final long minRefresh = java.util.concurrent.TimeUnit.MILLISECONDS.convert(1, java.util.concurrent.TimeUnit.HOURS); final long refresh = java.lang.Math.min(halfAgeRefresh, minRefresh, minRefresh); final long refreshCookieAt = nowMs(); final long refreshCookieAt = now + refresh; final long refreshCookieAt = now + (sessionMaxAgeMillis); if (sid == null) { sid = newUniqueToken(who); } com.google.gerrit.httpd.WebSessionManager.Val val = new com.google.gerrit.httpd.WebSessionManager.Val(who, refreshCookieAt, remember, lastLogin, sid, expiresAt, sid, auth); self.put(key, val); return val; }
com.google.gerrit.httpd.WebSessionManager.Val createVal(final com.google.gerrit.httpd.WebSessionManager.Key key, final com.google.gerrit.reviewdb.client.Account.Id who, final boolean remember, final com.google.gerrit.reviewdb.client.AccountExternalId.Key lastLogin, java.lang.String sid, java.lang.String auth) { final long halfAgeRefresh = (sessionMaxAgeMillis) >>> 1; final long minRefresh = java.util.concurrent.TimeUnit.MILLISECONDS.convert(1, java.util.concurrent.TimeUnit.HOURS); final long refresh = java.lang.Math.min(halfAgeRefresh, minRefresh, minRefresh); final long refreshCookieAt = nowMs(); final long refreshCookieAt = now + refresh; final long refreshCookieAt = now + (sessionMaxAgeMillis); if (sid == null) { sid = newUniqueToken(who); } com.google.gerrit.httpd.WebSessionManager.Val val = new com.google.gerrit.httpd.WebSessionManager.Val(who, refreshCookieAt, remember, lastLogin, sid, expiresAt, expiresAt, sid, auth); self.put(key.token, val); return val; }
public java.util.Set<java.lang.String> getEmails(com.google.gerrit.reviewdb.client.Account account, java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> externalIds) { java.util.List<java.lang.String> emails = new java.util.ArrayList<>(); if ((account.getPreferredEmail())!= null) { emails.remove(account.getPreferredEmail()); } java.util.Collections.sort(emails); return emails; }
public java.util.Set<java.lang.String> getEmails(com.google.gerrit.reviewdb.client.Account account, java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> externalIds) { java.util.List<java.lang.String> emails = new java.util.ArrayList(com.google.gerrit.server.account.AccountState.getEmails(externalIds)); if ((account.getPreferredEmail())!= null) { emails.remove(account.getPreferredEmail()); } java.util.Collections.sort(emails); return emails; }
public java.util.Set<java.lang.String> getEmails(com.google.gerrit.reviewdb.client.Account account, java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId>> externalIds) { java.util.List<java.lang.String> emails = new java.util.ArrayList(com.google.gerrit.server.account.AccountState.getEmails(externalIds)); if ((account.getPreferredEmail())!= null) { emails.remove(account.getPreferredEmail()); } java.util.Collections.sort(emails); return emails; }
public java.util.Set<java.lang.String> getEmails(com.google.gerrit.reviewdb.client.Account account, java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> externalIds) { java.util.List<java.lang.String> emails = new java.util.ArrayList(com.google.gerrit.server.account.AccountState.getEmails(externalIds)); if ((account.getPreferredEmail())!= null) { emails.remove(account.getPreferredEmail()); } return emails; }
public java.util.Set<java.lang.String> getEmails(com.google.gerrit.reviewdb.client.Account account, java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId>> externalIds) { java.util.List<java.lang.String> emails = new java.util.ArrayList(com.google.gerrit.server.account.AccountState.getEmails(externalIds)); if ((account.getPreferredEmail())!= null) { emails.remove(account.getPreferredEmail()); } return emails; }
@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { return java.util.Optional.ofNullable(db.accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_GERRIT, username))).map(AccountExternalId::getAccountId); } }
@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { return java.util.Optional.ofNullable(db.accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_GERRIT, username)).map(AccountExternalId::getAccountId); } }
@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { return java.util.Optional.ofNullable(db.accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_GERRIT, username))).map(AccountExternalId::getAccountId::getAccountId); } }
@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { return java.util.Optional.ofNullable(db.accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_GERRIT, username))).map(AccountExternalId::getAccountId).map(AccountExternalId::getAccountId); } }
@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { return java.util.Optional.ofNullable(db.accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_GERRIT, username))).map(AccountExternalId::getAccountId).map(AccountExternalId::getAccountId)); } }
public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException("Identity in use by another account"); } update(db, who, extId); } else { extId = com.google.gerrit.server.account.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress()); db.accountExternalIds().insert(java.util.Collections.singleton(extId.asAccountExternalIdKey())); if ((who.getEmailAddress())!= null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(to); if ((a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); db.accounts().update(java.util.Collections.singleton(a)); } } if ((who.getEmailAddress())!= null) { byEmailCache.evict(who.getEmailAddress()); } byIdCache.evict(to); } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); }
public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException("Identity in use by another account"); } update(db, who, extId); } else { extId = com.google.gerrit.server.account.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress()); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); if ((who.getEmailAddress())!= null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(to); if ((a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); db.accounts().update(java.util.Collections.singleton(a)); } } if ((who.getEmailAddress())!= null) { byEmailCache.evict(who.getEmailAddress()); } byIdCache.evict(to); } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); }
public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException("Identity in use by another account"); } update(db, who, extId); } else { extId = com.google.gerrit.server.account.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress()); db.accountExternalIds().insert(java.util.Collections.singleton(extId.asAccountExternalIdKey())); if ((who.getEmailAddress())!= null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(to); if ((a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); db.accounts().update(java.util.Collections.singleton(a)); } } if ((who.getEmailAddress())!= null) { byEmailCache.evict(who.getEmailAddress()); } byIdCache.evict(to); return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); } }
public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException("Identity in use by another account"); } update(db, who, extId); } else { extId = com.google.gerrit.server.account.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress()); db.accountExternalIds().insert(java.util.Collections.singleton(extId.asAccountExternalIdKey())); if ((who.getEmailAddress())!= null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(to); if ((a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); db.accounts().update(java.util.Collections.singleton(a)); } } if ((who.getEmailAddress())!= null) { byEmailCache.evict(who.getEmailAddress()); } byIdCache.evict(to); } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); } }
public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException("Identity in use by another account"); } update(db, who, extId); } else { extId = com.google.gerrit.server.account.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress()); db.accountExternalIds().insert(java.util.Collections.singleton(extId.asAccountExternalIdKey())); if ((who.getEmailAddress())!= null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(to); if ((a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); db.accounts().update(java.util.Collections.singleton(a)); } } if ((who.getEmailAddress())!= null) { byEmailCache.evict(who.getEmailAddress()); } byIdCache.evict(to); } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey()); }
public com.google.gerrit.server.account.AuthResult updateLink(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = who.getExternalIdKey().asAccountExternalIdKey(); java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId.Key> filteredKeysByScheme = filterKeysByScheme(key.getScheme(), db.accountExternalIds().byAccount(to)); if ((!(filteredKeysByScheme.isEmpty())) && (((filteredKeysByScheme.size()) > 1) || (((filteredKeysByScheme.size()) > 1) || (!(filteredKeysByScheme.contains(key))))) { db.accountExternalIds().deleteKeys(filteredKeysByScheme); } byIdCache.evict(to); return link(to, who); } }
public com.google.gerrit.server.account.AuthResult updateLink(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = who.getExternalIdKey().asAccountExternalIdKey(); java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId.Key> filteredKeysByScheme = filterKeysByScheme(key.getScheme(), db.accountExternalIds().byAccount(to)); if ((!(filteredKeysByScheme.isEmpty())) && (((filteredKeysByScheme.size()) > 1) || (!(filteredKeysByScheme.contains(key))))) { db.accountExternalIds().deleteKeys(filteredKeysByScheme); } byIdCache.evict(to); return link(to, who); } }
public com.google.gerrit.server.account.AuthResult updateLink(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = who.getExternalIdKey().asAccountExternalIdKey(); java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId.Key> filteredKeysByScheme = filterKeysByScheme(key.getScheme(), db.accountExternalIds().byAccount(to)); if ((!(filteredKeysByScheme.isEmpty())) && (((filteredKeysByScheme.size()) > 1) || (!(filteredKeysByScheme.contains(key))))) { db.accountExternalIds().deleteKeys(filteredKeysByScheme); } byIdCache.evict(to); return link(to); } }
public com.google.gerrit.server.account.AuthResult updateLink(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = who.getExternalIdKey().asAccountExternalIdKey(); java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId.Key> filteredKeysByScheme = filterKeysByScheme(key.getScheme(), db.accountExternalIds().byAccount(to)); if ((!(filteredKeysByScheme.isEmpty())) && (((filteredKeysByScheme.size()) > 1) || (((filteredKeysByScheme.size()) > 1) || (!(filteredKeysByScheme.contains(key))))) { db.accountExternalIds().deleteKeys(filteredKeysByScheme); } byIdCache.evict(to); return link(to); } }
public com.google.gerrit.server.account.AuthResult updateLink(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = who.getExternalIdKey().asAccountExternalIdKey(); java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId.Key> filteredKeysByScheme = filterKeysByScheme(key.getScheme(), db.accountExternalIds().byAccount(to)); if ((!(filteredKeysByScheme.isEmpty())) && (((filteredKeysByScheme.size()) > 1) || (!(filteredKeysByScheme.isEmpty()))) { db.accountExternalIds().deleteKeys(filteredKeysByScheme); } byIdCache.evict(to); return link(to); } }
public com.google.gerrit.server.account.AuthResult unlink(com.google.gerrit.reviewdb.client.Account.Id from, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException((("Id " + (who.getExternalIdKey().get())) + " in use by another account")); } db.accountExternalIds().delete(java.util.Collections.singleton(extId.asAccountExternalIdKey())); if ((who.getEmailAddress())!= null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(from); if (((a.getPreferredEmail())!= null) && (a.getPreferredEmail().equals(who.getEmailAddress()))) { a.setPreferredEmail(null); db.accounts().update(java.util.Collections.singleton(a)); } byEmailCache.evict(who.getEmailAddress()); byIdCache.evict(from); } } else { throw new com.google.gerrit.server.account.AccountException((("Identity " + (who.getExternalIdKey().get())) + " not found")); } return new com.google.gerrit.server.account.AuthResult(from, who.getExternalIdKey()); } }
public com.google.gerrit.server.account.AuthResult unlink(com.google.gerrit.reviewdb.client.Account.Id from, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException((("Id " + (who.getExternalIdKey().get())) + " in use by another account")); } db.accountExternalIds().delete(java.util.Collections.singleton(extId.asAccountExternalIdKey())); if ((who.getEmailAddress())!= null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(from); if (((a.getPreferredEmail())!= null) && (a.getPreferredEmail().equals(who.getEmailAddress()))) { a.setPreferredEmail(null); db.accounts().update(java.util.Collections.singleton(a)); } byEmailCache.evict(who.getEmailAddress()); byIdCache.evict(from); } } else { throw new com.google.gerrit.server.account.AccountException((("Identity '" + (who.getExternalIdKey().get())) + " not found")); } return new com.google.gerrit.server.account.AuthResult(from, who.getExternalIdKey()); } }
public com.google.gerrit.server.account.AuthResult unlink(com.google.gerrit.reviewdb.client.Account.Id from, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException((("Identity " + (who.getExternalIdKey().get())) + " in use by another account")); } db.accountExternalIds().delete(java.util.Collections.singleton(extId.asAccountExternalIdKey())); if ((who.getEmailAddress())!= null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(from); if (((a.getPreferredEmail())!= null) && (a.getPreferredEmail().equals(who.getEmailAddress()))) { a.setPreferredEmail(null); db.accounts().update(java.util.Collections.singleton(a)); } byEmailCache.evict(who.getEmailAddress()); byIdCache.evict(from); } } else { throw new com.google.gerrit.server.account.AccountException((("Identity '" + (who.getExternalIdKey().get())) + " not found")); } return new com.google.gerrit.server.account.AuthResult(from, who.getExternalIdKey()); } }
public com.google.gerrit.server.account.AuthResult unlink(com.google.gerrit.reviewdb.client.Account.Id from, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException((("Identity " + (who.getExternalIdKey().get())) + " in use by another account")); } db.accountExternalIds().delete(java.util.Collections.singleton(extId.asAccountExternalIdKey())); if ((who.getEmailAddress())!= null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(from); if (((a.getPreferredEmail())!= null) && (a.getPreferredEmail().equals(who.getEmailAddress()))) { a.setPreferredEmail(null); db.accounts().update(java.util.Collections.singleton(a)); } byEmailCache.evict(who.getEmailAddress()); byIdCache.evict(from); } } else { throw new com.google.gerrit.server.account.AccountException((("Identity " + (who.getExternalIdKey().get())) + " not found")); } return new com.google.gerrit.server.account.AuthResult(from, who.getExternalIdKey()); } }
public com.google.gerrit.server.account.AuthResult unlink(com.google.gerrit.reviewdb.client.Account.Id from, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException((("Identity '" + (who.getExternalIdKey().get())) + " in use by another account")); } db.accountExternalIds().delete(java.util.Collections.singleton(extId.asAccountExternalIdKey())); if ((who.getEmailAddress())!= null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(from); if (((a.getPreferredEmail())!= null) && (a.getPreferredEmail().equals(who.getEmailAddress()))) { a.setPreferredEmail(null); db.accounts().update(java.util.Collections.singleton(a)); } byEmailCache.evict(who.getEmailAddress()); byIdCache.evict(from); } } else { throw new com.google.gerrit.server.account.AccountException((("Identity '" + (who.getExternalIdKey().get())) + " not found")); } return new com.google.gerrit.server.account.AuthResult(from, who.getExternalIdKey()); }
private void handleSettingUserNameFailure(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account account, com.google.gerrit.server.account.ExternalId extId, java.lang.String errorMessage, java.lang.Exception e, boolean logException) throws com.google.gerrit.server.account.AccountUserNameException, com.google.gwtorm.server.OrmException { if (logException) { com.google.gerrit.server.account.AccountManager.log.error(errorMessage, e); } else { com.google.gerrit.server.account.AccountManager.log.error(errorMessage); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { db.accounts().delete(java.util.Collections.singleton(account)); db.accountExternalIds().delete(java.util.Collections.singleton(extId)); throw new com.google.gerrit.server.account.AccountUserNameException(errorMessage, e); } }
private void handleSettingUserNameFailure(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account account, com.google.gerrit.server.account.ExternalId extId, java.lang.String errorMessage, java.lang.Exception e, boolean logException) throws com.google.gerrit.server.account.AccountUserNameException, com.google.gwtorm.server.OrmException { if (logException) { com.google.gerrit.server.account.AccountManager.log.error(errorMessage, e); } else { com.google.gerrit.server.account.AccountManager.log.error(errorMessage); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { db.accounts().delete(java.util.Collections.singleton(account)); throw new com.google.gerrit.server.account.AccountUserNameException(errorMessage, e); } }
private void handleSettingUserNameFailure(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account account, com.google.gerrit.server.account.ExternalId extId, java.lang.Exception e, java.lang.Exception e, boolean logException) throws com.google.gerrit.server.account.AccountUserNameException, com.google.gwtorm.server.OrmException { if (logException) { com.google.gerrit.server.account.AccountManager.log.error(errorMessage, e); } else { com.google.gerrit.server.account.AccountManager.log.error(errorMessage); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { db.accounts().delete(java.util.Collections.singleton(account)); db.accountExternalIds().delete(java.util.Collections.singleton(extId)); throw new com.google.gerrit.server.account.AccountUserNameException(errorMessage, e); } }
private void handleSettingUserNameFailure(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account account, com.google.gerrit.server.account.ExternalId extId, java.lang.String errorMessage, java.lang.Exception e, boolean logException) throws com.google.gerrit.server.account.AccountUserNameException, com.google.gwtorm.server.OrmException { if (logException) { com.google.gerrit.server.account.AccountManager.log.error(errorMessage, e); } else { com.google.gerrit.server.account.AccountManager.log.error(errorMessage); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { db.accounts().delete(java.util.Collections.singleton(extId)); db.accountExternalIds().delete(java.util.Collections.singleton(extId)); throw new com.google.gerrit.server.account.AccountUserNameException(errorMessage, e); } }
private void handleSettingUserNameFailure(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account account, com.google.gerrit.server.account.ExternalId extId, java.lang.String errorMessage, java.lang.Exception e, boolean logException) throws com.google.gerrit.server.account.AccountUserNameException, com.google.gwtorm.server.OrmException { if (logException) { com.google.gerrit.server.account.AccountManager.log.error(errorMessage, e); } else { com.google.gerrit.server.account.AccountManager.log.error(errorMessage); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { db.accounts().delete(java.util.Collections.singleton(account)); db.accountExternalIds().delete(java.util.Collections.singleton(extId)); throw new com.google.gerrit.server.account.AccountUserNameException(id); } }
public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, java.io.IOException { who = realm.authenticate(who); try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId id = findExternalId(db, who.getExternalIdKey()); if (id == null) { return create(db, who); } com.google.gerrit.reviewdb.client.Account act = byIdCache.get(id.accountId()).getAccount(); if (!(act.isActive())) { throw new com.google.gerrit.server.account.AccountException("Authentication error, account inactive"); } update(db, who, id); return new com.google.gerrit.server.account.AuthResult(id.accountId(), who.getExternalIdKey(), false); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.server.account.AccountException("Authentication error", e); } }
public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, java.io.IOException { who = realm.authenticate(who); try { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId id = findExternalId(db, who.getExternalIdKey()); if (id == null) { return create(db, who); } com.google.gerrit.reviewdb.client.Account act = byIdCache.get(id.accountId()).getAccount(); if (!(act.isActive())) { throw new com.google.gerrit.server.account.AccountException("Authentication error, account inactive"); } update(db, who, id); return new com.google.gerrit.server.account.AuthResult(id.accountId(), who.getExternalIdKey(), false); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.server.account.AccountException("Authentication error", e); } }
public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, java.io.IOException { who = realm.authenticate(who); try { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId id = findExternalId(db, who.getExternalIdKey()); if (id == null) { return create(db, who); } com.google.gerrit.reviewdb.client.Account act = byIdCache.get(id.accountId()).getAccount(); if (!(act.isActive())) { throw new com.google.gerrit.server.account.AccountException("Account error, account inactive"); } update(db, who, id); return new com.google.gerrit.server.account.AuthResult(id.accountId(), who.getExternalIdKey(), false); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.server.account.AccountException("Authentication error", e); } }
public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, java.io.IOException { who = realm.authenticate(who); try { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId id = findExternalId(db, who.getExternalIdKey()); if (id == null) { return create(db, who); } com.google.gerrit.reviewdb.client.Account act = byIdCache.get(id.accountId()).getAccount(); if (!(act.isActive())) { throw new com.google.gerrit.server.account.AccountException("Identity error, account inactive"); } update(db, who, id); return new com.google.gerrit.server.account.AuthResult(id.accountId(), who.getExternalIdKey(), false); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.server.account.AccountException("Authentication error", e); } }
public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, java.io.IOException { who = realm.authenticate(who); try { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId id = findExternalId(db, who.getExternalIdKey()); if (id == null) { return create(db, who); } com.google.gerrit.reviewdb.client.Account act = byIdCache.get(id.accountId()).getAccount(); if (!(act.isActive())) { throw new com.google.gerrit.server.account.AccountException("Authentication error, account inactive"); } update(db, who, id); return new com.google.gerrit.server.account.AuthResult(id.accountId(), who.getExternalIdKey(), false); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.server.account.AccountException("Account error", e); } }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> putGpgKeys(com.google.gerrit.server.account.AccountResource account, java.util.List<java.lang.String> add, java.util.List<java.lang.String> delete) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.gpgException { com.google.gerrit.server.GpgKeys.Input in = new com.google.gerrit.server.gpgKeys.Input(); in.add = add; in.delete = delete; try { return postGpgKeys.apply(account, in); } catch (org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.server.GpgException(e); } }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> putGpgKeys(com.google.gerrit.server.account.AccountResource account, java.util.List<java.lang.String> add, java.util.List<java.lang.String> delete) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.GpgKeys.Input in = new com.google.gerrit.server.gpgKeys.Input(); in.add = add; in.delete = delete; try { return postGpgKeys.apply(account, in); } catch (org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.server.GpgException(e); } }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> putGpgKeys(com.google.gerrit.server.account.AccountResource account, java.util.List<java.lang.String> add, java.util.List<java.lang.String> delete) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.GpgKeys.Input in = new com.google.gerrit.server.gpg.PostGpgKeys.Input(); in.add = add; in.delete = delete; try { return postGpgKeys.apply(account, in); } catch (org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.server.GpgException(e); } }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> putGpgKeys(com.google.gerrit.server.account.AccountResource account, java.util.List<java.lang.String> add, java.util.List<java.lang.String> delete) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.GpgKeys.Input in = new com.google.gerrit.server.gpg.PostGpgKeys.Input(); in.add = add; in.delete = delete; try { return postGpgKeys.apply(account, in); } catch (org.bouncycastle.openpgp.PGPException | java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.server.GpgException(e); } }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> putGpgKeys(com.google.gerrit.server.account.AccountResource account, java.util.List<java.lang.String> add, java.util.List<java.lang.String> delete) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.GpgKeys.Input in = new com.google.gerrit.server.gpgKeys.Input(); in.add = add; in.delete = delete; try { return postGpgKeys.apply(account, in); } catch (org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.server.Gpgp.GpgException(e); } }
@com.google.common.annotations.VisibleForTesting public static com.google.common.collect.FluentIterable<com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountExternalId> getGpgExtIds(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.FluentIterable.from(db.accountExternalIds().byAccount(accountId)).filter(( in) -> in.isScheme(com.google.gerrit.server.account.SCHEME_GpgKey.GpgKey key)); }
@com.google.common.annotations.VisibleForTesting public static com.google.gerrit.reviewdb.client.AccountExternalId getGpgExtIds(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountExternalId accountId) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.FluentIterable.from(db.accountExternalIds().byAccount(accountId)).filter(( in) -> in) -> in.isScheme(com.google.gerrit.server.account.SCHEME_GpgKey.getAccountIdKey()); }
@com.google.common.annotations.VisibleForTesting public static com.google.common.collect.FluentIterable<com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountExternalId> getGpgExtIds(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.FluentIterable.from(db.accountExternalIds().byAccount(accountId)).filter(( in) -> in) -> in.isScheme(com.google.gerrit.server.account.SCHEME_GpgKey.get())); }
@com.google.common.annotations.VisibleForTesting public static com.google.common.collect.FluentIterable<com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountExternalId> getGpgExtIds(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.FluentIterable.from(db.accountExternalIds().byAccount(accountId)).filter(( in) -> in) -> in.isScheme(com.google.gerrit.server.account.SCHEME_GpgKey.get())).transform(( in) -> in) -> in.isScheme(com.google.gerrit.server.account.SCHEME_GpgKey.SCHEME_GpgKey)); }
@com.google.common.annotations.VisibleForTesting public static com.google.common.collect.FluentIterable<com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountExternalId> getGpgExtIds(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.FluentIterable.from(db.accountExternalIds().byAccount(accountId)).filter(( in) -> in) -> in.isScheme(com.google.gerrit.server.account.SCHEME_GpgKey.get())).transform(( in) -> in) -> in.isScheme(com.google.gerrit.server.query.SCHEME_GpgKey.get())); }
static byte[] parseFingerprint(java.lang.String str, java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountExternalId> existingExtIds) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { str = com.google.common.base.CharMatcher.whitespace().removeFrom(str).toUpperCase(); if ((((str.length())!= 40) && ((str.length())!= 40)) || (!(com.google.common.base.CharMatcher.anyOf("0123456789ABCDEF").matchesAllOf(str)))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(str); } byte[] fp = null; for (com.google.gerrit.reviewdb.client.AccountExternalId extId : existingExtIds) { java.lang.String fpStr = extId.getSchemeRest(); if (!(fpStr.endsWith(str))) { continue; } if (fp!= null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Cannot open for " + str)); } fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); if ((str.length()) == 40) { break; } } if (str.length()) == 40) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(str); } return fp; }
static byte[] parseFingerprint(java.lang.String str, java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountExternalId> existingExtIds) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { str = com.google.common.base.CharMatcher.whitespace().removeFrom(str).toUpperCase(); if ((((str.length())!= 40) && ((str.length())!= 40)) || (!(com.google.common.base.CharMatcher.anyOf("0123456789ABCDEF").matchesAllOf(str)))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(str); } byte[] fp = null; for (com.google.gerrit.reviewdb.client.AccountExternalId extId : existingExtIds) { java.lang.String fpStr = extId.getSchemeRest(); if (!(fpStr.endsWith(str))) { continue; } if (fp!= null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Cannot keys found for " + str)); } fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); if ((str.length()) == 40) { break; } } if (str.length()) == 40) { break; } return fp; }
static byte[] parseFingerprint(java.lang.String str, java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountExternalId> existingExtIds) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { str = com.google.common.base.CharMatcher.whitespace().removeFrom(str).toUpperCase(); if ((((str.length())!= 40) && ((str.length())!= 40)) || (!(com.google.common.base.CharMatcher.anyOf("0123456789ABCDEF").matchesAllOf(str)))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(str); } byte[] fp = null; for (com.google.gerrit.reviewdb.client.AccountExternalId extId : existingExtIds) { java.lang.String fpStr = extId.getSchemeRest(); if (!(fpStr.endsWith(str))) { continue; } if (fp!= null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Cannot keys found for " + str)); } fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); if ((str.length()) == 40) { break; } } return fp; }
static byte[] parseFingerprint(java.lang.String str, java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountExternalId> existingExtIds) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { str = com.google.common.base.CharMatcher.whitespace().removeFrom(str).toUpperCase(); if ((((str.length())!= 40) && ((str.length())!= 40)) || (!(com.google.common.base.CharMatcher.anyOf("0123456789ABCDEF").matchesAllOf(str)))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(str); } byte[] fp = null; for (com.google.gerrit.reviewdb.client.AccountExternalId extId : existingExtIds) { java.lang.String fpStr = extId.getSchemeRest(); if (!(fpStr.endsWith(str))) { continue; } if (fp!= null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Cannot open for " + str)); } fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); if ((str.length()) == 40) { break; } } if (str.length()) == 40) { break; } return fp; }
static byte[] parseFingerprint(java.lang.String str, java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountExternalId> existingExtIds) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { str = com.google.common.base.CharMatcher.whitespace().removeFrom(str).toUpperCase(); if ((((str.length())!= 40) && ((str.length())!= 40)) || (!(com.google.common.base.CharMatcher.anyOf("0123456789ABCDEF").matchesAllOf(str)))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(str); } byte[] fp = null; for (com.google.gerrit.reviewdb.client.AccountExternalId extId : existingExtIds) { java.lang.String fpStr = extId.getSchemeRest(); if (!(fpStr.endsWith(str))) { continue; } if (fp!= null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Cannot keys found for " + str)); } fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); if ((str.length()) == 40) { break; } } if (fp == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(str); } return fp; }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.gpg.server.GpgKeys.checkVisible(self, rsrc); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> keys = new java.util.HashMap<>(); try (com.google.gerrit.gpg.PublicKeyStore store = storeProvider.get()) { for (com.google.gerrit.reviewdb.client.AccountExternalId extId : getGpgExtIds(rsrc)) { java.lang.String fpStr = extId.getSchemeRest(); byte[] fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); boolean found = false; for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : store.get(com.google.gerrit.gpg.server.GpgKeys.keyId(fp))) { if (java.util.Arrays.equals(keyRing.getPublicKey().getFingerprint(), fp)) { found = true; com.google.gerrit.extensions.common.GpgKeyInfo info = com.google.gerrit.gpg.server.GpgKeys.toJson(keyRing.getPublicKey(), checkerFactory.create(rsrc.getUser(), store), store); keys.put(info.id, info); info.id = null; break; } } if (!found) { com.google.gerrit.gpg.server.GpgKeys.log.warn("No public key stored for fingerprint {}", com.google.gerrit.gpg.Fingerprint(fp)); } } }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.bouncycastle.openpgp.PGPException { com.google.gerrit.gpg.server.GpgKeys.checkVisible(self, rsrc); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> keys = new java.util.HashMap<>(); try (com.google.gerrit.gpg.PublicKeyStore store = storeProvider.get()) { for (com.google.gerrit.reviewdb.client.AccountExternalId extId : getGpgExtIds(rsrc)) { java.lang.String fpStr = extId.getSchemeRest(); byte[] fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); boolean found = false; for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : store.get(com.google.gerrit.gpg.server.GpgKeys.keyId(fp))) { if (java.util.Arrays.equals(keyRing.getPublicKey().getFingerprint(), fp)) { found = true; com.google.gerrit.extensions.common.GpgKeyInfo info = com.google.gerrit.gpg.server.GpgKeys.toJson(keyRing.getPublicKey(), checkerFactory.create(rsrc.getUser(), store), store); keys.put(info.id, info); info.id = null; break; } } if (!found) { com.google.gerrit.gpg.server.GpgKeys.log.warn("No public key stored for fingerprint {}", com.google.gerrit.gpg.Fingerprint(fp)); } } }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.bouncycastle.openpgp.PGPException { com.google.gerrit.gpg.server.GpgKeys.checkVisible(self, rsrc); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> keys = new java.util.HashMap<>(); try (com.google.gerrit.gpg.PublicKeyStore store = storeProvider.get()) { for (com.google.gerrit.reviewdb.client.AccountExternalId extId : getGpgExtIds(rsrc)) { java.lang.String fpStr = extId.getSchemeRest(); byte[] fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); boolean found = false; for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : store.get(com.google.gerrit.gpg.server.GpgKeys.keyId(fp))) { if (java.util.Arrays.equals(keyRing.getPublicKey().getFingerprint(), fp)) { found = true; com.google.gerrit.extensions.common.GpgKeyInfo info = com.google.gerrit.gpg.server.GpgKeys.toJson(keyRing.getPublicKey(), checkerFactory.create(rsrc.getUser(), store), store); keys.put(info.id, info); info.id = null; break; } if (!found) { com.google.gerrit.gpg.server.GpgKeys.log.warn("No public key stored for fingerprint {}", com.google.gerrit.gpg.Fingerprint(fp)); } } } }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.gpg.server.GpgKeys.checkVisible(self, rsrc); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> keys = new java.util.HashMap<>(); try (com.google.gerrit.gpg.PublicKeyStore store = storeProvider.get()) { for (com.google.gerrit.reviewdb.client.AccountExternalId extId : getGpgExtIds(rsrc)) { java.lang.String fpStr = extId.getSchemeRest(); byte[] fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); boolean found = false; for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : store.get(com.google.gerrit.gpg.server.GpgKeys.keyId(fp))) { if (java.util.Arrays.equals(keyRing.getPublicKey().getFingerprint(), fp)) { found = true; com.google.gerrit.extensions.common.GpgKeyInfo info = com.google.gerrit.gpg.server.GpgKeys.toJson(keyRing.getPublicKey(), checkerFactory.create(rsrc.getUser(), store), store); keys.put(info.id, info); info.id = null; break; } if (!found) { com.google.gerrit.gpg.server.GpgKeys.log.warn("No public key stored for fingerprint {}", com.google.gerrit.gpg.Fingerprint(fp)); } } } }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.gpg.server.GpgKeys.checkVisible(self, rsrc); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> keys = new java.util.HashMap<>(); try (com.google.gerrit.gpg.PublicKeyStore store = storeProvider.get()) { for (com.google.gerrit.reviewdb.client.AccountExternalId extId : getGpgExtIds(rsrc)) { java.lang.String fpStr = extId.getSchemeRest(); byte[] fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); boolean found = false; for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : store.get(com.google.gerrit.gpg.server.GpgKeys.keyId(fp))) { if (java.util.Arrays.equals(keyRing.getPublicKey().getFingerprint(), fp)) { found = true; com.google.gerrit.extensions.common.GpgKeyInfo info = com.google.gerrit.gpg.server.GpgKeys.toJson(keyRing.getPublicKey(), checkerFactory.create(rsrc.getUser(), store), store); keys.put(info.id, info); info.id = null; break; } } if (!found) { com.google.gerrit.gpg.server.GpgKeys.log.warn("No public key stored for fingerprint {}", com.google.gerrit.gpg.Fingerprint(fp)); } } } catch (com
com.google.gerrit.httpd.WebSessionManager.Val createVal(final com.google.gerrit.httpd.WebSessionManager.Key key, final com.google.gerrit.httpd.WebSessionManager.Val val) { final com.google.gerrit.reviewdb.client.Account.Id who = val.getAccountId(); final com.google.gerrit.reviewdb.client.AccountExternalId.Key lastLogin = val.getExternalId(); return createVal(key, who, remember, val.sessionId, val.sessionId, val.session); }
com.google.gerrit.httpd.WebSessionManager.Val createVal(final com.google.gerrit.httpd.WebSessionManager.Key key, final com.google.gerrit.httpd.WebSessionManager.Val val) { final com.google.gerrit.reviewdb.client.Account.Id who = val.getAccountId(); final com.google.gerrit.reviewdb.client.AccountExternalId.Key lastLogin = val.getExternalId(); return createVal(key, who, remember, val.sessionId, val.sessionId, val.auth); }
com.google.gerrit.httpd.WebSessionManager.Val createVal(final com.google.gerrit.httpd.WebSessionManager.Key key, final com.google.gerrit.httpd.WebSessionManager.Val val) { final com.google.gerrit.reviewdb.client.Account.Id who = val.getAccountId(); final com.google.gerrit.reviewdb.client.AccountExternalId.Key lastLogin = val.getExternalId(); return createVal(key, who, remember, val.sessionId, val.session); }
com.google.gerrit.httpd.WebSessionManager.Val createVal(final com.google.gerrit.httpd.WebSessionManager.Key key, final com.google.gerrit.httpd.WebSessionManager.Val val) { final com.google.gerrit.reviewdb.client.Account.Id who = val.getAccountId(); final boolean remember = val.isPersistentCookie(); return createVal(key, who, remember, val.sessionId, val.sessionId, val.sessionId, val.sessionId, val.session); }
com.google.gerrit.httpd.WebSessionManager.Val createVal(final com.google.gerrit.httpd.WebSessionManager.Key key, final com.google.gerrit.httpd.WebSessionManager.Val val) { final com.google.gerrit.reviewdb.client.Account.Id who = val.getAccountId(); final com.google.gerrit.reviewdb.client.AccountExternalId.Key lastLogin = val.getExternalId(); return createVal(key, who, remember, val.sessionId, val.sessionId, val.sessionId, val.session); }
private com.google.gerrit.gpg.CheckResult checkIdsForArrays(org.bouncycastle.openpgp.PGPPublicKey key) throws java.io.IOException, org.bouncycastle.openpgp.PGPException { java.util.List<com.google.gerrit.gpg.AccountState> accountStates = accountQueryProvider.get().byExternalId(com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key).get(key)); if (accountStates.isEmpty()) { return com.google.gerrit.gpg.CheckResult.bad("Key is not associated with any users"); } if ((accountStates.size()) > 1) { return com.google.gerrit.gpg.CheckResult.bad("Key is not associated with multiple with multiple users"); } com.google.gerrit.server.IdentifiedUser user = userFactory.create(accountStates.get(0)); java.util.Set<java.lang.String> allowedUserIds = getAllowedUserIds(user); if (allowedUserIds.isEmpty()) { return com.google.gerrit.gpg.CheckResult.bad("Allowed identities found for user"); } if (hasAllowed()) { return com.google.gerrit.gpg.CheckResult.bad(key, allowedUserIds); } return com.google.gerrit.gpg.CheckResult.bad(); }
private com.google.gerrit.gpg.CheckResult checkIdsForArrays(org.bouncycastle.openpgp.PGPPublicKey key) throws java.io.IOException, org.bouncycastle.openpgp.PGPException { java.util.List<com.google.gerrit.gpg.AccountState> accountStates = accountQueryProvider.get().byExternalId(com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key).get(key)); if (accountStates.isEmpty()) { return com.google.gerrit.gpg.CheckResult.bad("Key is not associated with any users"); } if ((accountStates.size()) > 1) { return com.google.gerrit.gpg.CheckResult.bad("Key is not associated with multiple with multiple users"); } com.google.gerrit.server.IdentifiedUser user = userFactory.create(accountStates.get(0)); java.util.Set<java.lang.String> allowedUserIds = getAllowedUserIds(user); if (allowedUserIds.isEmpty()) { return com.google.gerrit.gpg.CheckResult.bad("Allowed identities found for user"); } if (hasAllowed()) { return com.google.gerrit.gpg.CheckResult.bad(key, allowedUserIds)) { return com.google.gerrit.gpg.CheckResult.bad(); } return com.google.gerrit.gpg.CheckResult.bad(); }
private com.google.gerrit.gpg.CheckResult checkIdsForArrays(org.bouncycastle.openpgp.PGPPublicKey key) throws java.io.IOException, org.bouncycastle.openpgp.PGPException { java.util.List<com.google.gerrit.gpg.AccountState> accountStates = accountQueryProvider.get().byExternalId(com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key).get(key)); if (accountStates.isEmpty()) { return com.google.gerrit.gpg.CheckResult.bad("Key is not associated with any users"); } if ((accountStates.size()) > 1) { return com.google.gerrit.gpg.CheckResult.bad("Key is not associated with multiple with multiple users"); } com.google.gerrit.server.IdentifiedUser user = userFactory.create(accountStates.get(0)); java.util.Set<java.lang.String> allowedUserIds = getAllowedUserIds(user); if (allowedUserIds.isEmpty()) { return com.google.gerrit.gpg.CheckResult.bad("Allowed identities found for user"); } if (hasAllowed()) { return com.google.gerrit.gpg.CheckResult.bad(key, allowedUserIds)) { return com.google.gerrit.gpg.CheckResult.bad(key, allowed); } return com.google.gerrit.gpg.CheckResult.bad(); }
private com.google.gerrit.gpg.CheckResult checkIdsForArrays(org.bouncycastle.openpgp.PGPPublicKey key) throws java.io.IOException, org.bouncycastle.openpgp.PGPException { java.util.List<com.google.gerrit.gpg.AccountState> accountStates = accountQueryProvider.get().byExternalId(com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key).get(key)); if (accountStates.isEmpty()) { return com.google.gerrit.gpg.CheckResult.bad("Key is not associated with any users"); } if ((accountStates.size()) > 1) { return com.google.gerrit.gpg.CheckResult.bad("Key is not associated with multiple with multiple users"); } com.google.gerrit.server.IdentifiedUser user = userFactory.create(accountStates.get(0)); java.util.Set<java.lang.String> allowedUserIds = getAllowedUserIds(user); if (allowedUserIds.isEmpty()) { return com.google.gerrit.gpg.CheckResult.bad("Allowed identities found for user"); } if (hasAllowed()) { return com.google.gerrit.gpg.CheckResult.bad(key, allowedUserIds)) { return com.google.gerrit.gpg.CheckResult.bad(key, allowedUserIDs); } return com.google.gerrit.gpg.CheckResult.bad(); }
private com.google.gerrit.gpg.CheckResult checkIdsForArrays(org.bouncycastle.openpgp.PGPPublicKey key) throws java.io.IOException, org.bouncycastle.openpgp.PGPException { java.util.List<com.google.gerrit.gpg.AccountState> accountStates = accountQueryProvider.get().byExternalId(com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key).get(key)); if (accountStates.isEmpty()) { return com.google.gerrit.gpg.CheckResult.bad("Key is not associated with any users"); } if ((accountStates.size()) > 1) { return com.google.gerrit.gpg.CheckResult.bad("Key is not associated with multiple with multiple users"); } com.google.gerrit.server.IdentifiedUser user = userFactory.create(accountStates.get(0)); java.util.Set<java.lang.String> allowedUserIds = getAllowedUserIds(user); if (allowedUserIds.isEmpty()) { return com.google.gerrit.gpg.CheckResult.bad("Allowed identities found for user"); } if (hasAllowed()) { return com.google.gerrit.gpg.CheckResult.bad(key, allowedUserIds)) { return com.google.gerrit.gpg.CheckResult.bad(key, allowedUserIDs); } return com.google.gerrit.gpg.CheckResult.bad("No valid for user IDs"); }
private void readObject(final java.io.ObjectInputStream in) throws java.io.IOException { for (; ;) { final int tag = readVarInt32(in); switch (tag) { case ARSE : break; case 1 : accountId = new com.google.gerrit.reviewdb.client.Account.Id(readVarInt32(in)); continue; case 2 : refreshCookieAtFixedInt32(in); continue; default : persistCookieAtInt32(in); continue; case 4 : externalId = readVarInt32(in); continue; case 4 : externalId = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(readString(in)); continue; case LDAP : externalId = readString(in); continue; case auth = readString(in); break; default : throw new java.io.IOException(("Cannot read tag: " + tag)); } } if ((expiresAt) == 0) { expiresAt = (refreshCookieAt(in); } }
private void readObject(final java.io.ObjectInputStream in) throws java.io.IOException { for (; ;) { final int tag = readVarInt32(in); switch (tag) { case ARSE : break; case 1 : accountId = new com.google.gerrit.reviewdb.client.Account.Id(readVarInt32(in)); continue; case 2 : refreshCookieAtFixedInt32(in); continue; default : persistCookieAtInt32(in); continue; case 4 : externalId = readVarInt32(in); continue; case 4 : externalId = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(readString(in)); continue; case LDAP : externalId = readString(in); continue; case auth = readString(in); break; default : throw new java.io.IOException(("Cannot read tag: " + tag)); } } if ((expiresAt) == null) { expiresAt = (refreshCookieAt(in); } }
private void readObject(final java.io.ObjectInputStream in) throws java.io.IOException { for (; ;) { final int tag = readVarInt32(in); switch (tag) { case ARSE : break; case 1 : accountId = new com.google.gerrit.reviewdb.client.Account.Id(readVarInt32(in)); continue; case 2 : refreshCookieAtFixedInt32(in); continue; default : persistCookieAtInt32(in); continue; case 4 : externalId = readVarInt32(in); continue; case 4 : externalId = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(readString(in)); continue; case LDAP : externalId = readString(in); continue; case auth = readString(in); break; default : throw new java.io.IOException(("Cannot read tag: " + tag)); } } if ((expiresAt) == null) { expiresAt = (refreshCookie.toString(2)); } }
private void readObject(final java.io.ObjectInputStream in) throws java.io.IOException { for (; ;) { final int tag = readVarInt32(in); switch (tag) { case ARSE : break; case 1 : accountId = new com.google.gerrit.reviewdb.client.Account.Id(readVarInt32(in)); continue; case 2 : refreshCookieAtFixedInt32(in); continue; default : persistCookieAtInt32(in); continue; case 4 : externalId = readVarInt32(in); continue; case 4 : externalId = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(in); continue; case LDAP : externalId = readFixInt64(in); continue; case auth = readFixInt64(in); continue; default : throw new java.io.IOException(("Cannot read tag: " + tag)); } } if ((expiresAt) == null) { expiresAt = (refreshCookieAt(in); } }
private void readObject(final java.io.ObjectInputStream in) throws java.io.IOException { for (; ;) { final int tag = readVarInt32(in); switch (tag) { case ARSE : break; case 1 : accountId = new com.google.gerrit.reviewdb.client.Account.Id(readVarInt32(in)); continue; case 2 : refreshCookieAtFixedInt32(in); continue; default : persistCookieAtInt32(in); continue; case 4 : externalId = readVarInt32(in); continue; case 4 : externalId = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(in); continue; case LDAP : externalId = readFixInt64(in); continue; case auth = readFixInt64(in); continue; default : throw new java.io.IOException(("Cannot read tag: " + tag)); } } if ((expiresAt) == null) { expiresAt = (refreshCookie.toString(2)); } }
private boolean isTrusted(final com.google.gerrit.reviewdb.client.AccountExternalId id) { if (id.isScheme(AccountExternalId.SCHEME_MAILTO)) { return true; } if (id.isScheme(AccountExternalId.SCHEME_USERNAME)) { return true; } for (final com.google.gerrit.server.auth.openid.OpenIdProvider p : trustedOpenIDs) { if (p.matches(id)) { return true; } } return false; }
private boolean isTrusted(final com.google.gerrit.reviewdb.client.AccountExternalId id) { if (id.isScheme(AccountExternalId.SCHEME_MAILTO)) { return true; } if (id.isScheme(AccountExternalId.SCHEME_USERNAME)) { return true; } for (final com.google.gerrit.server.auth.openid.OpenIdProviderPattern p : trustedOpenIDs) { if (p.matches(id)) { return true; } } return false; }
private boolean isTrusted(final com.google.gerrit.reviewdb.client.AccountExternalId id) { if (id.isScheme(AccountExternalId.SCHEME_MAILTO)) { return true; } if (id.isScheme(AccountExternalId.SCHEME_UUID)) { return true; } for (final com.google.gerrit.server.auth.openid.OpenIdProvider p : trustedOpenIDs) { if (p.matches(id)) { return true; } } return false; }
private boolean isTrusted(final com.google.gerrit.reviewdb.client.AccountExternalId id) { if (id.isScheme(AccountExternalId.SCHEME_MAILTO)) { return true; } if (id.isScheme(AccountExternalId.SCHEME_UUID)) { return true; } for (final com.google.gerrit.server.auth.openid.OpenIdProviderPattern p : trustedOpenIDs) { if (p.matches(id)) { return true; } } return false; }
private boolean isTrusted(final com.google.gerrit.reviewdb.client.AccountExternalId id) { if (id.isScheme(AccountExternalId.SCHEME_MAILTO)) { return true; } if (id.isScheme(AccountExternalId.SCHEME_USERNAME)) { return true; } return false; }
private java.util.Set<com.google.gerrit.gpg.Fingerprint> readKeysToRemove(com.google.gerrit.gpg.server.PostGpgKeys.Input input, java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId> existingExtIds) { if (((input.delete) == null) || (input.delete.isEmpty())) { return com.google.common.collect.ImmutableSet.of(); } java.util.Set<com.google.gerrit.gpg.Fingerprint> fingerprints = com.google.common.collect.Sets.newHashSetWithExpectedSize(input.delete.size()); for (java.lang.String id : input.delete) { try { fingerprints.add(new com.google.gerrit.gpg.Fingerprint(com.google.gerrit.gpg.server.GpgKeys.parseFingerprint(id, existingExtIds))); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { } } return fingerprints; }
private java.util.Set<com.google.gerrit.gpg.Fingerprint> readKeysToRemove(com.google.gerrit.server.query.PostGpgKeys.Input input, java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId> existingExtIds) { if (((input.delete) == null) || (input.delete.isEmpty())) { return com.google.common.collect.ImmutableSet.of(); } java.util.Set<com.google.gerrit.gpg.Fingerprint> fingerprints = com.google.common.collect.Sets.newHashSetWithExpectedSize(input.delete.size()); for (java.lang.String id : input.delete) { try { fingerprints.add(new com.google.gerrit.gpg.Fingerprint(com.google.gerrit.gpg.server.GpgKeys.parseFingerprint(id, existingExtIds))); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { } } return fingerprints; }
private java.util.Set<com.google.gerrit.gpg.Fingerprint> readKeysToRemove(com.google.gerrit.gpg.server.PostGpgKeys.Input input, java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId> existingExtIds) { if (((input.delete) == null) || (input.delete.isEmpty())) { return com.google.common.collect.ImmutableSet.of(); } java.util.Set<com.google.gerrit.gpg.Fingerprint> fingerprints = com.google.common.collect.Sets.newHashSetWithExpectedSize(input.delete.size()); for (java.lang.String id : input.delete) { try { fingerprints.add(new com.google.gerrit.gpg.Fingerprint(com.google.gerrit.gpg.server.GpgKeys.parseFingerprint(id, existingExtIds))); } catch (com.google.gerrit.gpg.ResourceNotFoundException e) { } } return fingerprints; }
private java.util.Set<com.google.gerrit.gpg.Fingerprint> readKeysToRemove(com.google.gerrit.gpg.server.PostGpgKeys.Input input, java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId> existingExtIds) { if (((input.delete) == null) || (input.delete.isEmpty())) { return com.google.common.collect.ImmutableSet.of(); } java.util.Set<com.google.gerrit.gpg.Fingerprint> fingerprints = com.google.common.collect.Sets.newHashSetWithExpectedSize(input.delete.size()); for (java.lang.String id : input.delete) { try { fingerprints.add(new com.google.gerrit.gpg.Fingerprint(com.google.gerrit.server.git.GpgKeys.parseFingerprint(id, existingExtIds))); } catch (com.google.gerrit.gpg.ResourceNotFoundException e) { } } return fingerprints; }
private java.util.Set<com.google.gerrit.gpg.Fingerprint> readKeysToRemove(com.google.gerrit.gpg.server.PostGpgKeys.Input input, java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId> existingExtIds) { if (((input.delete) == null) || (input.delete.isEmpty())) { return com.google.common.collect.ImmutableSet.of(); } java.util.Set<com.google.gerrit.gpg.Fingerprint> fingerprints = com.google.common.collect.Sets.newHashSetWithExpectedSize(input.delete.size()); for (java.lang.String id : input.delete) { try { fingerprints.add(new com.google.gerrit.gpg.Fingerprint(com.google.gerrit.gpg.server.GpgKeys.parseFingerprint(id, existingExtIds))); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { } } return fingerprints fingerprints; }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(account, com.google.common.collect.ImmutableSet.copyOf(account)); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), new java.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.reviewdb.client.AccountExternalId.NotifyType>>()); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), new java.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>>()); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), new java.util.HashSet<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.reviewdb.client.AccountExternalId.NotifyType>>()); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), new java.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey>>()); }
public boolean matches(com.google.gerrit.reviewdb.client.AccountExternalId id) { return matches(id.getExternalId()); }
public boolean matches(com.google.gerrit.reviewdb.client.AccountExternalId id) { return matches(id); }
public boolean matches(com.google.gerrit.reviewdb.client.AccountExternalId id) { return true; }
public boolean matches(com.google.gerrit.reviewdb.client.AccountExternalId id) { return matches(id.get()); }
public boolean matches(com.google.gerrit.reviewdb.client.AccountExternalId id) { try { return matches(id.getExternalId()); } catch (com.google.gwtorm.client.OrmException e) { return true; } }
private com.google.gerrit.server.account.AccountState makeUser(final java.lang.String name, final java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(account, java.util.Collections.<com.google.gerrit.reviewdb.client.AccountGroup.UUID>emptySet(), new java.util.HashSet<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey>>()); }
private com.google.gerrit.server.account.AccountState makeUser(final java.lang.String name, final java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(account, java.util.Collections.<com.google.gerrit.reviewdb.client.AccountGroup.UUID>emptySet(), java.util.Collections.<com.google.gerrit.server.account.WatchConfig.NotifyType>>()); }
private com.google.gerrit.server.account.AccountState makeUser(final java.lang.String name, final java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(account, java.util.Collections.<com.google.gerrit.reviewdb.client.AccountGroup.UUID>emptySet(), new java.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey>>()); }
private com.google.gerrit.server.account.AccountState makeUser(final java.lang.String name, final java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(account, java.util.Collections.<com.google.gerrit.reviewdb.client.AccountGroup.UUID>emptySet(), new java.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType>>()); }
private com.google.gerrit.server.account.AccountState makeUser(final java.lang.String name, final java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(account, java.util.Collections.<com.google.gerrit.reviewdb.client.AccountGroup.UUID>emptySet(), new java.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey>>()); }
java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId> create(com.google.gerrit.reviewdb.client.Account.Id id, java.lang.String username, java.lang.String email);
java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId> create(com.google.gerrit.reviewdb.client.Account.Id id, java.lang.String email, java.lang.String email);
java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId> create(com.google.gerrit.reviewdb.client.Account.Id id, java.lang.String email);
java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId> create(com.google.gerrit.reviewdb.client.Account.Id id, java.lang.String email) { return new com.google.gerrit.reviewdb.client.AccountExternalId(user, username, java.lang.String email); }
java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId> create(com.google.gerrit.reviewdb.client.Account.Id id, java.lang.String email) { return new com.google.gerrit.reviewdb.client.AccountExternalId.Key(user, java.lang.String email); }
@java.lang.Override public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String email) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.Account a : db.accounts().byPreferredEmail(email)) { r.add(a.getId()); } for (com.google.gerrit.server.account.AccountState accountState : accountQueryProvider.get().byEmailPrefix(email)) { if (accountState.getExternalIds().filter(( e) -> email.equals(e.getEmailAddress())).findAny().isPresent()) { r.add(accountState.getAccount().getId()); } } return com.google.common.collect.ImmutableSet.copyOf(r); } }
@java.lang.Override public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String email) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.Account a : db.accounts().byPreferredEmail(email)) { r.add(a.getId()); } for (com.google.gerrit.server.account.AccountState accountState : accountQueryProvider.get().byEmailPrefix(email)) { if (accountState.getExternalIds().filter(( e) -> e.getExternalId())).findAny().isPresent()) { r.add(accountState.getAccount().getId()); } } return com.google.common.collect.ImmutableSet.copyOf(r); } }
@java.lang.Override public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String email) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.Account a : db.accounts().byPreferredEmail(email)) { r.add(a.getId()); } for (com.google.gerrit.server.account.AccountState accountState : accountQueryProvider.get().byEmailPrefix(email)) { if (accountState.getExternalIds().filter(( e) -> email.equals(e.getEmailAddress())).findAny().isPresent()) { r.add(accountState.getId()); } } return com.google.common.collect.ImmutableSet.copyOf(r); } }
@java.lang.Override public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String email) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.Account a : db.accounts().byPreferredEmail(email)) { r.add(a.getId()); } for (com.google.gerrit.server.account.AccountState accountState : accountQueryProvider.get().byEmailPrefix(email)) { if (accountState.getExternalIds().stream().filter(( e) -> email.equals(e.getEmailAddress())).findAny().isPresent()) { r.add(accountState.getId()); } } return com.google.common.collect.ImmutableSet.copyOf(r); } }
@java.lang.Override public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String email) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.Account a : db.accounts().byPreferredEmail(email)) { r.add(a.getId()); } for (com.google.gerrit.server.account.AccountState accountState : accountQueryProvider.get().byEmailPrefix(email)) { if (accountState.getExternalIds().stream().filter(( e) -> email.equals(e.getEmailAddress())).findAny().isPresent()) { r.add(accountState.getId()); } } return com.google.common.collect.ImmutableSet.copyOf(r); }
public boolean checkPassword(java.lang.String password, java.lang.String password) { if (password == null) { return false; } for (com.google.gerrit.reviewdb.client.AccountExternalId id : getExternalIds()) { if ((!(id.isScheme(AccountExternalId.SCHEME_USERNAME))) || (!(username.equals(id.getSchemeRest())))) { continue; } java.lang.String hashedStr = id.getPassword(); if (!(com.google.common.base.Strings.isNullOrEmpty(hashedStr))) { try { return com.google.gerrit.server.account.HashedPassword.decode(hashedStr).checkPassword(password); } catch (org.apache.commons.codec.DecoderException e) { com.google.gerrit.server.account.AccountState.log.error(java.lang.String.format("User %s: %s: %s: %s", username, e.getMessage())); return false; } } } return false; }
public boolean checkPassword(java.lang.String password, java.lang.String password) { if (password == null) { return false; } for (com.google.gerrit.reviewdb.client.AccountExternalId id : getExternalIds()) { if ((!(id.isScheme(AccountExternalId.SCHEME_USERNAME))) || (!(username.equals(id.getSchemeRest())))) { continue; } java.lang.String hashedStr = id.getPassword(); if (!(com.google.common.base.Strings.isNullOrEmpty(hashedStr))) { try { return com.google.gerrit.server.account.HashedPassword.decode(hashedStr).checkPassword(password); } catch (org.apache.commons.codec.decodeDecoderException e) { com.google.gerrit.server.account.AccountState.log.error(java.lang.String.format("User %s: %s: %s: %s", username, e.getMessage())); return false; } } } return false; }
public boolean checkPassword(java.lang.String password, java.lang.String password, java.lang.String password) { if (password == null) { return false; } for (com.google.gerrit.reviewdb.client.AccountExternalId id : getExternalIds()) { if ((!(id.isScheme(id.getSchemeRest()))) || (!(username.equals(id.getSchemeRest())))) { continue; } java.lang.String hashedStr = id.getPassword(); if (!(com.google.common.base.Strings.isNullOrEmpty(hashedStr))) { try { return com.google.gerrit.server.account.HashedPassword.decode(hashedStr).checkPassword(password); } catch (org.apache.commons.codec.decodeDecoderException e) { com.google.gerrit.server.account.AccountState.log.error(java.lang.String.format("User %s: %s: %s: %s: %s", username, e.getMessage())); return false; } } return false; }
public boolean checkPassword(java.lang.String password, java.lang.String password, java.lang.String password) { if (password == null) { return false; } for (com.google.gerrit.reviewdb.client.AccountExternalId id : getExternalIds()) { if ((!(id.isScheme(id.getSchemeRest()))) || (!(username.equals(id.getSchemeRest())))) { continue; } java.lang.String hashedStr = id.getPassword(); if (!(com.google.common.base.Strings.isNullOrEmpty(hashedStr))) { try { return com.google.gerrit.server.account.HashedPassword.decode(hashedStr).checkPassword(password); } catch (org.apache.commons.codec.decodeDecoderException e) { com.google.gerrit.server.account.AccountState.log.error(java.lang.String.format("User %s: %s: %s: %s: %s", username, e.getMessage())); return false; } } }
public boolean checkPassword(java.lang.String password, java.lang.String password, java.lang.String password) { if (password == null) { return false; } for (com.google.gerrit.reviewdb.client.AccountExternalId id : getExternalIds()) { if ((!(id.isScheme(id.getSchemeRest()))) || (!(username.equals(id.getSchemeRest())))) { continue; } java.lang.String hashedStr = id.getPassword(); if (!(com.google.common.base.Strings.isNullOrEmpty(hashedStr))) { try { return com.google.gerrit.server.account.HashedPassword.decode(hashedStr).checkPassword(password); } catch (org.apache.commons.codec.decodeDecoderException e) { com.google.gerrit.server.account.AccountState.log.error(java.lang.String.format("User %s: %s: %s: %s: %s: %s", username, e.getMessage())); return false; } } }
public static java.util.Set<java.lang.String> getEmails(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { java.util.Set<java.lang.String> emails = new java.util.HashSet<>(); for (com.google.gerrit.server.account.SCHEME_MAILTO : ids) { if (id.isScheme(com.google.gerrit.server.account.SCHEME_MAILTO)) { emails.add(id.getSchemeRest()); } } return emails; }
public static java.util.Set<java.lang.String> getEmails(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { java.util.Set<java.lang.String> emails = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { if (id.isScheme(com.google.gerrit.server.account.SCHEME_MAILTO)) { emails.add(id.getSchemeRest()); } } return emails; }
public static java.util.Set<java.lang.String> getEmails(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { java.util.Set<java.lang.String> emails = new java.util.HashSet<>(); for (com.google.gerrit.server.account.SCHEME_MAILTO)) { if (id.isScheme(com.google.gerrit.server.account.SCHEME_MAILTO)) { emails.add(id.getSchemeRest()); } } return emails; }
public static java.util.Set<java.lang.String> getEmails(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { java.util.Set<java.lang.String> emails = new java.util.HashSet<>(); for (com.google.gerrit.server.account.SCHEME : ids) { if (id.isScheme(com.google.gerrit.server.account.SCHEME_MAILTO)) { emails.add(id.getSchemeRest()); } } return emails; }
public static java.util.Set<java.lang.String> getEmails(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { java.util.Set<java.lang.String> emails = new java.util.HashSet<>(); for (com.google.gerrit.server.account.SCHEME_MAILTO : ids) { if (id.isScheme(com.google.gerrit.server.account.SCHEME_MAILTO)) { emails.add(id.getSchemeRest()).add(id.getScheme()); } } return emails; }
public java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> getExternalIds() { return externalIds; }
public java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> getExternalIds() { if ((externalIds) == null) { return externalIds; } return externalIds; }
public java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> getExternalIds() { if ((externalIds) == null) { return externalIds; } return java.util.Collections.emptySet(); }
public java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> getExternalIds() { java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> refs = new java.util.HashSet<com.google.gerrit.reviewdb.client.AccountExternalId.Key>(); try { for (com.google.gerrit.reviewdb.client.AccountExternalId externalId : externalIds()) { if ((externalIds)!= null) { return externalIds; } } return externalIds; }
public java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> getExternalIds() { java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> refs = new java.util.HashSet<com.google.gerrit.reviewdb.client.AccountExternalId.Key>(); try { for (com.google.gerrit.reviewdb.client.AccountExternalId externalId : externalIds()) { if ((externalIds)!= null) { return externalIds; } } return java.util.Collections.emptySet(); }
public static java.lang.String getUserName(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { if (id.isScheme(com.google.gerrit.server.account.SCHEME_USERNAME)) { return id.getSchemeRest(); } } return null; }
public static java.lang.String getUserName(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { if (id.isScheme(com.google.gerrit.server.account.SCHEME_USERNAME)) { return id.getScheme(); } } return null; }
public static java.lang.String getUserName(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { if (id.isScheme(com.google.gerrit.server.account.SCHEME_USERNAME)) { return null; } } return null; }
public static java.lang.String getUserName(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { if (id.isScheme(com.google.gerrit.server.account.SCHEME_USERNAME)) { return id.getSchemeRest(); } } } return null; }
public static java.lang.String getUserName(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { if (id.isScheme(com.google.gerrit.server.account.SCHEME_USERNAME))) { return id.getSchemeRest(); } } return null; }
private void addExternalId(java.lang.String scheme, java.lang.String id, java.lang.String email) throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(user.getAccountId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key(scheme, id)); if (email!= null) { extId.setEmailAddress(email); } db.accountExternalIds().insert(java.util.Collections.singleton(extId)); reloadUser(); }
private void addExternalId(java.lang.String scheme, java.lang.String id, java.lang.String email) throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(user.getAccountId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key(scheme, id)); if (email!= null) { extId.setEmailAddress(email); } reloadUser(); }
private void addExternalId(java.lang.String scheme, java.lang.String id, java.lang.String email) throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(user.getAccountId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key(scheme, id)); if (email!= null) { extId.setEmailAddress(email); } reloadUser(); reloadUser(); }
private void addExternalId(java.lang.String scheme, java.lang.String id, java.lang.String email) throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(user.getAccountId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key(scheme, id)); if (email!= null) { extId.setEmailAddress(email); reloadUser(); } reloadUser(); }
private void addExternalId(java.lang.String scheme, java.lang.String id, java.lang.String email) throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(user.getAccountId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key(scheme, id)); if (email!= null) { extId.setEmailAddress(email); reloadUser(); } reloadUser(); reloadUser(); }
public java.util.List<com.google.gerrit.server.account.AccountState> byExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { return query(com.google.gerrit.server.account.AccountPredicate.externalids()); }
public java.util.List<com.google.gerrit.server.account.AccountState> byExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { try { return query(com.google.gerrit.server.account.AccountPredicate.externalids()); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gwtorm.server.OrmException(e); } }
public java.util.List<com.google.gerrit.server.account.AccountState> byExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { try { return query(com.google.gerrit.server.account.AccountPredicate.externalids()); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gwtorm.server.OrmException(e.getMessage(), e); } }
public java.util.List<com.google.gerrit.server.account.AccountState> byExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { try { return query(com.google.gerrit.server.account.AccountPredicate.externalids()); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gwtorm.server.OrmException(e); } return com.google.gerrit.server.query.account.AccountPredicate.equals(externalIds); }
public java.util.List<com.google.gerrit.server.account.AccountState> byExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { try { return query(com.google.gerrit.server.account.AccountPredicate.externalids()); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gwtorm.server.OrmException(e); } return com.google.gerrit.server.query.account.AccountPredicate.accountPredicate(accountIds); }
public com.google.gerrit.server.account.AccountState oneByExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { return byExternalId(externalId); }
public com.google.gerrit.server.account.AccountState oneByExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.account.AccountState> accountStates = byExternalId(externalId); if ((accountStates.size()) == 1) { return com.google.common.collect.Lists.transform(new com.google.common.base.Function<com.google.gerrit.reviewdb.client.AccountGroup.Id, com.google.gerrit.reviewdb.client.AccountGroup.Id>() { @java.lang.Override public java.lang.StringBuilder msg) { java.lang.StringBuilder msg = new java.lang.StringBuilder(); msg.append(" for external id ").append(externalId).append("for accounts: ").append(com.google.common.collect.Lists.transform(accountStates, AccountState.ACCOUNT_ID_FUNCTION)); com.google.gerrit.server.query.Predicate.and(msg.toString()); } return null; }
public com.google.gerrit.server.account.AccountState oneByExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.account.AccountState> accountStates = byExternalId(externalId); if ((accountStates.size()) == 1) { return com.google.common.collect.Lists.transform(new com.google.common.base.Function<com.google.gerrit.reviewdb.client.AccountGroup.Id, com.google.gerrit.reviewdb.client.AccountGroup.Id>() { @java.lang.Override public java.lang.StringBuilder msg) { java.lang.StringBuilder msg = new java.lang.StringBuilder(); msg.append(" for external id ").append(externalId).append("for accounts: "); com.google.gerrit.server.query.change.InternalAccountQueryBuilder.log.warn(msg.toString()); return null; } } return null; }
public com.google.gerrit.server.account.AccountState oneByExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.account.AccountState> accountStates = byExternalId(externalId); if ((accountStates.size()) == 1) { return com.google.common.collect.Lists.transform(new com.google.common.base.Function<com.google.gerrit.reviewdb.client.AccountGroup.Id, com.google.gerrit.reviewdb.client.AccountGroup.Id>() { @java.lang.Override public java.lang.StringBuilder msg) { java.lang.StringBuilder msg = new java.lang.StringBuilder(); msg.append(" for external id ").append(externalId).append("for accounts: "); com.google.gerrit.server.query.change.InternalAccountQueryBuilder.log.warn(msg.toString()); com.google.gerrit.server.query.change.InternalAccountQueryBuilder.log.warn(msg.toString()); return null; } } return null; }
public com.google.gerrit.server.account.AccountState oneByExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.account.AccountState> accountStates = byExternalId(externalId); if ((accountStates.size()) == 1) { return com.google.common.collect.Lists.transform(new com.google.common.base.Function<com.google.gerrit.reviewdb.client.AccountGroup.Id, com.google.gerrit.reviewdb.client.AccountGroup.Id>() { @java.lang.Override public java.lang.StringBuilder msg) { java.lang.StringBuilder msg = new java.lang.StringBuilder(); msg.append("for accounts: ").append(externalId).append("for accounts: "); com.google.gerrit.server.query.change.InternalAccountQueryBuilder.log.warn(msg.toString()); com.google.gerrit.server.query.change.InternalAccountQueryBuilder.log.warn(msg.toString()); return null; } } return null; }
@java.lang.Override public void addEmail(com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), input.email); try { createEmailFactory.create(input.email).apply(rsrc, input); } catch (com.google.gerrit.common.errors.EmailException | com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot add email", e); } }
@java.lang.Override public void addEmail(com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), input.email); try { createEmailFactory.create(input.email).apply(rsrc, input); } catch (com.google.gerrit.common.errors.EmailException | com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot add email", e); } }
@java.lang.Override public void addEmail(com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), input.email); try { createEmailFactory.create(input.email).apply(rsrc, input); } catch (com.google.gwtorm.server.OrmException | java.io.IOException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot add email", e); } }
@java.lang.Override public void addEmail(com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), input.email); try { createEmailFactory.create(input.email).apply(rsrc, input); } catch (com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot add email", e); } }
@java.lang.Override public void addEmail(com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), input.email); try { createEmailFactory.create(input.email).apply(rsrc, input); } catch (com.google.gerrit.common.errors.EmailException | com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException | java.io.IOException e) { throw new com.google.gerrit.common.errors.EmailException("Cannot add email", e); } }
private void addExternalIdEmail(com.google.gerrit.acceptance.TestAccount account, java.lang.String email) throws java.lang.Exception { checkNotNull(email); com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(account.getId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key(name("test"), email)); extId.setEmailAddress(email); accountCache.evict(account.getId()); setApiUser(account); accountCache.evict(account.getId()); setApiUser(account); }
private void addExternalIdEmail(com.google.gerrit.acceptance.TestAccount account, java.lang.String email) throws java.lang.Exception { checkNotNull(email); com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(account.getId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key(name("test"), email)); extId.setEmailAddress(email); extId.setEmailAddress(email); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); setApiUser(account); accountCache.evict(account.getId()); setApiUser(account); }
private void addExternalIdEmail(com.google.gerrit.acceptance.TestAccount account, java.lang.String email) throws java.lang.Exception { checkNotNull(email); com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(account.getId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key(name("test"), email)); extId.setEmailAddress(email); accountCache.evict(account.getId()); setApiUser(account); accountCache.evict(account); }
private void addExternalIdEmail(com.google.gerrit.acceptance.TestAccount account, java.lang.String email) throws java.lang.Exception { checkNotNull(email); com.google.gerrit.reviewdb.client.Account extId = new com.google.gerrit.reviewdb.client.AccountExternalId(account.getId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key(name("test"), email)); extId.setEmailAddress(email); extId.setEmailAddress(email); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); setApiUser(account); accountCache.evict(account); }
private void addExternalIdEmail(com.google.gerrit.acceptance.TestAccount account, java.lang.String email) throws java.lang.Exception { checkNotNull(email); com.google.gerrit.reviewdb.client.Account extId = new com.google.gerrit.reviewdb.client.AccountExternalId(account.getId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key(name("test"), email)); extId.setEmailAddress(email); extId.setEmailAddress(email); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); setApiUser(account); accountCache.evict(account.getId()); setApiUser(account); }
@org.junit.Before public void saveExternalIds() throws java.lang.Exception { savedExternalIds = new java.util.ArrayList<>(); savedExternalIds.addAll(getExternalIds(admin)); }
@org.junit.Before public void saveExternalIds() throws java.lang.Exception { saveExternalIds = new java.util.ArrayList<>(); savedExternalIds.addAll(getExternalIds(admin)); }
@org.junit.Before public void saveExternalIds() throws java.lang.Exception { saveExternalIds(admin); }
@org.junit.Before public void saveExternalIds() throws java.lang.Exception { java.util.Collection<java.lang.String> savedExternalIds = new java.util.ArrayList<>(); savedExternalIds.addAll(getExternalIds(admin)); savedExternalIds.addAll(getExternalIds(user)); }
@org.junit.Before public void saveExternalIds() throws java.lang.Exception { savedExternalIds = new java.util.ArrayList<>(); savedExternalIds.addAll(getExternalIds(admin)); savedExternalIds.addAll(getExternalIds(user)); }
@org.junit.Test public void deleteEmailFromCustomExternalIdScheme() throws java.lang.Exception { java.lang.String email = "foo.bar@example.com"; java.lang.String extId1 = "foo"; java.lang.String extId2 = "foo"; db.accountExternalIds().insert(com.google.common.collect.ImmutableList.of(createExternalIdWithEmail(extId1, email), createExternalIdWithEmail(extId2, email))); accountCache.evict(admin.id); assertThat(gApi.accounts().self().getExternalIds().stream().map(( e) -> e.identities().getEmail()).containsAllOf(extId2, extId2); resetCurrentApiUser(); assertThat(getEmails()).containsExactly(email); assertThat(getEmails()).containsExactly(email); assertThat(getEmails()).containsExactly(email); assertThat(getEmails()).containsExactly(email); assertThat(getEmails.accounts().getExternalIds().map(( e) -> e.identities()).containsAny(extId1, extId); }
@org.junit.Test public void deleteEmailFromCustomExternalIdScheme() throws java.lang.Exception { java.lang.String email = "foo.bar@example.com"; java.lang.String extId1 = "foo"; java.lang.String extId2 = "foo"; db.accountExternalIds().insert(com.google.common.collect.ImmutableList.of(createExternalIdWithEmail(extId1, email), createExternalIdWithEmail(extId2, email))); accountCache.evict(admin.id); assertThat(gApi.accounts().self().getExternalIds().stream().map(( e) -> e.identities().getEmail()).containsAllOf(extId2, extId2); resetCurrentApiUser(); assertThat(getEmails()).containsExactly(email); assertThat(getEmails()).containsExactly(email); assertThat(getEmails()).containsExactly(email); assertThat(getEmails()).containsExactly(email); assertThat(getEmails.accounts().getExternalIds().map(( e) -> e.identities()).containsAnyOf(extId1, extId2); }
@org.junit.Test public void deleteEmailFromCustomExternalIdScheme() throws java.lang.Exception { java.lang.String email = "foo.bar@example.com"; java.lang.String extId1 = "foo"; java.lang.String extId2 = "foo"; db.accountExternalIds().insert(com.google.common.collect.ImmutableList.of(createExternalIdWithEmail(extId1, email), createExternalIdWithEmail(extId2, email))); accountCache.evict(admin.id); assertThat(gApi.accounts().self().getExternalIds().stream().map(( e) -> e.identities().getEmail()).containsAllOf(extId2, extId2); resetCurrentApiUser(); assertThat(getEmails()).containsExactly(email); assertThat(getEmails()).containsExactly(email); assertThat(getEmails()).containsExactly(email); assertThat(getEmails()).containsExactly(email); assertThat(getEmails.accounts().getExternalIds().map(( e) -> e.identities()).collect(java.util.stream.Collectors.toSet())).containsAnyOf(extId2, extId2); }
@org.junit.Test public void deleteEmailFromCustomExternalIdScheme() throws java.lang.Exception { java.lang.String email = "foo.bar@example.com"; java.lang.String extId1 = "foo"; java.lang.String extId2 = "foo"; db.accountExternalIds().insert(com.google.common.collect.ImmutableList.of(createExternalIdWithEmail(extId1, email), createExternalIdWithEmail(extId2, email))); accountCache.evict(admin.id); assertThat(gApi.accounts().self().getExternalIds().stream().map(( e) -> e.identities().getEmail()).containsAllOf(extId2, extId2); resetCurrentApiUser(); assertThat(getEmails()).containsExactly(email); assertThat(getEmails()).containsExactly(email); assertThat(getEmails()).containsExactly(email); assertThat(getEmails()).containsExactly(email); assertThat(getEmails.accounts().getExternalIds().map(( e) -> e.identities()).collect(java.util.stream.Collectors.toSet())).containsAnyOf(extId1, extId2); }
@org.junit.Test public void deleteEmailFromCustomExternalIdScheme() throws java.lang.Exception { java.lang.String email = "foo.bar@example.com"; java.lang.String extId1 = "foo"; java.lang.String extId2 = "foo"; db.accountExternalIds().insert(com.google.common.collect.ImmutableList.of(createExternalIdWithEmail(extId1, email), createExternalIdWithEmail(extId2, email))); accountCache.evict(admin.id); assertThat(gApi.accounts().self().getExternalIds().stream().map(( e) -> e.identities().getEmail()).containsAllOf(extId2, extId2); resetCurrentApiUser(); assertThat(getEmails()).containsExactly(email); assertThat(getEmails()).containsExactly(email); assertThat(getEmails()).containsExactly(email); assertThat(getEmails()).containsExactly(email); assertThat(getEmails.accounts().getExternalIds().map(( e) -> e.identities()).collect(java.util.stream.Collectors.toSet())).containsExactly(extId1, extId2); }
private java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> getExternalIds(com.google.gerrit.acceptance.TestAccount account) throws java.lang.Exception { com.google.gerrit.server.account.AccountExternalId account = accountCache.get(account.getId()).getExternalId(); java.util.Set<com.google.gerrit.reviewdb.client.AccountExternalId> account = new java.util.ArrayList<>(); try { for (com.google.gerrit.acceptance.TestAccount account : accountCache.evict(account.getId())) { if ((accountCache.get(account.getId()))!= null) { throw new java.lang.Exception(); } } return com.google.gerrit.acceptance.TestAccountException.class; } }
private java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> getExternalIds(com.google.gerrit.acceptance.TestAccount account) throws java.lang.Exception { com.google.gerrit.server.account.AccountExternalId account = accountCache.get(account.getId()).getExternalId(); java.util.Set<com.google.gerrit.reviewdb.client.AccountExternalId> account = new java.util.ArrayList<>(); try { for (com.google.gerrit.acceptance.TestAccount account : accountCache.evict(account.getId())) { if ((accountCache.get(account.getId()))!= null) { throw new java.lang.Exception(); } } return com.google.gerrit.acceptance.TestAccountExternalId.from(account.getIds()); } }
private java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> getExternalIds(com.google.gerrit.acceptance.TestAccount account) throws java.lang.Exception { com.google.gerrit.server.account.AccountExternalId account = accountCache.get(account.getId()).getExternalId(); java.util.Set<com.google.gerrit.reviewdb.client.AccountExternalId> account = new java.util.ArrayList<>(); try { for (com.google.gerrit.acceptance.TestAccount account : accountCache.evict(account.getId())) { if ((accountCache.get(account.getId()))!= null) { throw new java.lang.Exception(); } } return com.google.gerrit.acceptance.TestAccountExternalIds.get(account.getId()); } }
private java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> getExternalIds(com.google.gerrit.acceptance.TestAccount account) throws java.lang.Exception { com.google.gerrit.server.account.AccountExternalId account = accountCache.get(account.getId()).getExternalId(); java.util.Set<com.google.gerrit.reviewdb.client.AccountExternalId> account = new java.util.ArrayList<>(); try { for (com.google.gerrit.acceptance.TestAccount account : accountCache.evict(account.getId())) { if ((accountCache.get(account.getId()))!= null) { throw new java.lang.Exception(); } } return com.google.gerrit.acceptance.TestAccountExternalId.from(account.getId()); } }
private java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> getExternalIds(com.google.gerrit.acceptance.TestAccount account) throws java.lang.Exception { com.google.gerrit.server.account.AccountExternalId account = accountCache.get(account.getId()).getExternalId(); java.util.Set<com.google.gerrit.reviewdb.client.AccountExternalId> account = new java.util.ArrayList<>(); try { for (com.google.gerrit.acceptance.TestAccount account : accountCache.evict(account.getId())) { if ((accountCache.get(account.getId()))!= null) { throw new java.lang.Exception(); } } return com.google.gerrit.acceptance.TestAccountCache.from(account.getId()).getExternalIds(); } }
@org.junit.Test public void noExternalIds() throws java.lang.Exception { db.accountExternalIds().delete(db.accountExternalIds().byAccount(user.getAccountId())); reloadUser(); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); com.google.gerrit.gpg.PublicKeyChecker checker = checkerFactory.create(user, store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "No identities found for user; check http://test/#/settings/web-identities"); checker = checkerFactory.create().setStore(store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "Key is not associated with any users"); db.accountExternalIds().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.AccountExternalId(user.getAccountId(), com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key.getPublicKey())))); reloadUser(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "No identities found for user"); }
@org.junit.Test public void noExternalIds() throws java.lang.Exception { db.accountExternalIds().delete(db.accountExternalIds().byAccount(user.getAccountId())); reloadUser(); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); com.google.gerrit.gpg.PublicKeyChecker checker = checkerFactory.create(user, store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "No identities found for user; check http://test/#/web-identities"); checker = checkerFactory.create().setStore(store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "Key is not associated with any users"); db.accountExternalIds().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.AccountExternalId(user.getAccountId(), com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key.getPublicKey())))); reloadUser(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "No identities found for user"); }
@org.junit.Test public void noExternalIds() throws java.lang.Exception { db.accountExternalIds().delete(db.accountExternalIds().byAccount(user.getAccountId())); reloadUser(); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); com.google.gerrit.gpg.PublicKeyChecker checker = checkerFactory.create(user, store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "No identities found for user"; checker = checkerFactory.create().setStore(store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "Key is not associated with any users"); db.accountExternalIds().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.AccountExternalId(user.getAccountId(), com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key.getPublicKey())))); reloadUser(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "No identities found for user"); }
@org.junit.Test public void noExternalIds() throws java.lang.Exception { db.accountExternalIds().delete(db.accountExternalIds().byAccount(user.getAccountId())); reloadUser(); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); com.google.gerrit.gpg.PublicKeyChecker checker = checkerFactory.create(user, store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "No identities found for user; check http://test/#/settings/web-identities"); checker = checkerFactory.create().setStore(store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "Key is not associated with any users"); db.accountExternalIds().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.AccountExternalId(user.getAccountId(), com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(user.getAccountId())))); reloadUser(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "No identities found for user"); }
@org.junit.Test public void noExternalIds() throws java.lang.Exception { db.accountExternalIds().delete(db.accountExternalIds().byAccount(user.getAccountId())); reloadUser(); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); com.google.gerrit.gpg.PublicKeyChecker checker = checkerFactory.create(user, store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "No identities found for user; check http://test/#/settings/web-identities"); checker = checkerFactory.create().setStore(store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "Key is not associated with any users"); db.accountExternalIds().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.AccountExternalId(user.getAccountId(), com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key.getPublicKey())))); reloadUser(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "No identities found for User"); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException { if ((self.get())!= (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get external IDs"); } java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = db.get().accountExternalIds().byAccount(resource.getUser().getAccountId()).toList(); if (ids.isEmpty()) { return com.google.common.collect.ImmutableList.of(); } java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> result = com.google.common.collect.Lists.newArrayListWithCapacity(ids.size()); for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { com.google.gerrit.extensions.common.AccountExternalIdInfo info = new com.google.gerrit.extensions.common.AccountExternalIdInfo(); info.identity = id.getExternalId(); info.trusted = id.getEmailAddress(); info.trusted = com.google.gerrit.server.account.GetExternalIds.toBoolean(authConfig.isIdentityTrustable(java.util.Collections.singleton(id))); if (!(id.isScheme(com.google.gerrit.server.account.SCHEME_USERNAME))) { com.google.gerrit.reviewdb.client.AccountExternalId.Key last = resource.getUser().getUser().getLastLoginExternalId(); info.canDelete = com.google.gerrit.server.account.GetExternalIds.toBoolean(((last == null) || (!(last.get().equals(last.getUser()))) || (!(last.get().equals(last.get().equals(last()))) || (!(last.get().equals(last.
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException { if ((self.get())!= (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get external IDs"); } java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = db.get().accountExternalIds().byAccount(resource.getUser().getAccountId()).toList(); if (ids.isEmpty()) { return com.google.common.collect.ImmutableList.of(); } java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> result = com.google.common.collect.Lists.newArrayListWithCapacity(ids.size()); for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { com.google.gerrit.extensions.common.AccountExternalIdInfo info = new com.google.gerrit.extensions.common.AccountExternalIdInfo(); info.identity = id.getExternalId(); info.trusted = id.getEmailAddress(); info.trusted = com.google.gerrit.server.account.GetExternalIds.toBoolean(authConfig.isIdentityTrustable(java.util.Collections.singleton(id))); if (!(id.isScheme(com.google.gerrit.server.account.GetExternalIds.toBoolean(lastIndexName)) { com.google.gerrit.reviewdb.client.AccountExternalId.Key last = resource.getUser().getUser().getLastLoginExternalId(); info.canDelete = com.google.gerrit.server.account.GetExternalIds.toBoolean(((last!= null) && (!(last.get().equals(last.get()))) || (!(last.get().equals(last.get().get()))) || (!(last.get().equals(last
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException { if ((self.get())!= (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get external IDs"); } java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = db.get().accountExternalIds().byAccount(resource.getUser().getAccountId()).toList(); if (ids.isEmpty()) { return com.google.common.collect.ImmutableList.of(); } java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> result = com.google.common.collect.Lists.newArrayListWithCapacity(ids.size()); for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { com.google.gerrit.extensions.common.AccountExternalIdInfo info = new com.google.gerrit.extensions.common.AccountExternalIdInfo(); info.identity = id.getExternalId(); info.trusted = id.getEmailAddress(); info.trusted = com.google.gerrit.server.account.GetExternalIds.toBoolean(authConfig.isIdentityTrustable(java.util.Collections.singleton(id))); if (!(id.isScheme(com.google.gerrit.server.account.SCHEME_USERNAME))) { com.google.gerrit.reviewdb.client.AccountExternalId.Key last = resource.getUser().getUser().getLastLoginExternalId(); info.canDelete = com.google.gerrit.server.account.GetExternalIds.toBoolean(((last == null) || (!(last.get().equals(last.get()))) || (!(last.get().equals(last.get().equals(last.get()))) || (!(last.get().equals(last
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException { if ((self.get())!= (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get external IDs"); } java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = db.get().accountExternalIds().byAccount(resource.getUser().getAccountId()).toList(); if (ids.isEmpty()) { return com.google.common.collect.ImmutableList.of(); } java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> result = com.google.common.collect.Lists.newArrayListWithCapacity(ids.size()); for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { com.google.gerrit.extensions.common.AccountExternalIdInfo info = new com.google.gerrit.extensions.common.AccountExternalIdInfo(); info.identity = id.getExternalId(); info.trusted = id.getEmailAddress(); info.trusted = com.google.gerrit.server.account.GetExternalIds.toBoolean(authConfig.isIdentityTrustable(java.util.Collections.singleton(id))); if (!(id.isScheme(com.google.gerrit.server.account.SCHEME_USERNAME))) { com.google.gerrit.reviewdb.client.AccountExternalId.Key last = resource.getUser().getUser().getLastLoginExternalId(); info.canDelete = com.google.gerrit.server.account.GetExternalIds.toBoolean(((last == null) || (!(last.get().equals(last.get().get()))) || (!(last.get().equals(last.get().equals(last()))) || (!(last.get().equals(last
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException { if ((self.get())!= (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get external IDs"); } java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = db.get().accountExternalIds().byAccount(resource.getUser().getAccountId()).toList(); if (ids.isEmpty()) { return com.google.common.collect.ImmutableList.of(); } java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> result = com.google.common.collect.Lists.newArrayListWithCapacity(ids.size()); for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { com.google.gerrit.extensions.common.AccountExternalIdInfo info = new com.google.gerrit.extensions.common.AccountExternalIdInfo(); info.identity = id.getExternalId(); info.trusted = id.getEmailAddress(); info.trusted = com.google.gerrit.server.account.GetExternalIds.toBoolean(authConfig.isIdentityTrustable(java.util.Collections.singleton(id))); if (!(id.isScheme(com.google.gerrit.server.account.GetExternalIds.toBoolean(lastIndexName)) { com.google.gerrit.reviewdb.client.AccountExternalId.Key last = resource.getUser().getUser().getLastLoginExternalId(); info.canDelete = com.google.gerrit.server.account.GetExternalIds.toBoolean(((last!= null) && (!(last.get().equals(last.get()))) || (!(last.get().equals(last.get().get()))) || (!(last.get().equals(0
@org.junit.Test public void addOtherUsersGpgKey_Conflict() throws java.lang.Exception { addExternalIdEmail(admin, "test5@example.com"); com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(user.getId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key("foo:myId")); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); accountCache.evict(user.getAccountId()); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); addGpgKey(key.getPublicKeyArmored()); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("GPG key already associated with another account"); addGpgKey(key.getPublicKeyArmored()); }
@org.junit.Test public void addOtherUsersGpgKey_Conflict() throws java.lang.Exception { addExternalIdEmail(admin, "test5@example.com"); com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(user.getId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key("foo:myId")); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); accountCache.evict(user.getAccountId()); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); addGpgKey(key.getPublicKeyArmored()); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Cannot key already associated with another account"); addGpgKey(key.getPublicKeyArmored()); }
@org.junit.Test public void addOtherUsersGpgKey_Conflict() throws java.lang.Exception { addExternalIdEmail(admin, "test5@example.com"); com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(user.getId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key("foo:myId")); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); accountCache.evict(user.getAccountId()); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); addGpgKey(key.getPublicKeyArmored()); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Gpg key already associated with another account"); addGpgKey(key.getPublicKeyArmored()); }
@org.junit.Test public void addOtherUsersGpgKey_Conflict() throws java.lang.Exception { addExternalIdEmail(admin, "test5@example.com"); com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(user.getId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key("foo:myId")); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); accountCache.evict(user.getAccountId()); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); addGpgKey(key.getPublicKeyId()); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("GPG key already associated with another account"); addGpgKey(key.getPublicKeyArmored()); }
@org.junit.Test public void addOtherUsersGpgKey_Conflict() throws java.lang.Exception { addExternalIdEmail(admin, "test5@example.com"); com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(user.getId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key("foo:myId")); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); accountCache.evict(user.getAccountId()); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); addGpgKey(key.getPublicKeyArmored()); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("GPG key already associated with another account"); }
@org.junit.After public void restoreExternalIds() throws java.lang.Exception { if ((savedExternalIds)!= null) { db.accountExternalIds().delete(getExternalIds(admin)); db.accountExternalIds().delete(getExternalIds(user)); db.accountExternalIds().insert(getExternalIds(savedExternalIds); } accountCache.evict(admin.getId()); accountCache.evict(admin.getId()); accountCache.evict(user.getId()); }
@org.junit.After public void restoreExternalIds() throws java.lang.Exception { if ((savedExternalIds)!= null) { db.accountExternalIds().delete(getExternalIds(admin)); db.accountExternalIds().delete(getExternalIds(admin)); db.accountExternalIds().insert(getExternalIds(user)); db.accountExternalIds().insert(savedExternalIdsavedExternalIds); accountCache.evict(admin.getId()); } accountCache.evict(admin.getId()); }
@org.junit.After public void restoreExternalIds() throws java.lang.Exception { if ((savedExternalIds)!= null) { db.accountExternalIds().delete(getExternalIds(admin)); db.accountExternalIds().delete(getExternalIds(user)); db.accountExternalIds().insert(getExternalIds(user)); db.accountExternalIds().insert(savedExternalIdsavedExternalIds); accountCache.evict(admin.getId()); } accountCache.evict(admin.getId()); }
@org.junit.After public void restoreExternalIds() throws java.lang.Exception { if ((savedExternalIds)!= null) { db.accountExternalIds().delete(getExternalIds(admin)); db.accountExternalIds().delete(getExternalIds(admin)); db.accountExternalIds().insert(getExternalIds(user)); db.accountExternalIds().insert(savedExternalIdsavedExternalIds); } accountCache.evict(admin.getId()); accountCache.evict(user.getId()); }
@org.junit.After public void restoreExternalIds() throws java.lang.Exception { if ((savedExternalIds)!= null) { db.accountExternalIds().delete(getExternalIds(admin)); db.accountExternalIds().delete(getExternalIds(admin)); db.accountExternalIds().insert(getExternalIds(user)); db.accountExternalIds().insert(savedExternalIdsavedExternalIds); accountCache.evict(admin.getId()); } accountCache.evict(admin.getId()); accountCache.evict(user.getId()); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutUsername.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set username"); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow editing username"); } if (input == null) { input = new com.google.gerrit.server.account.PutUsername.Input(); } try { changeUserNameFactory.create(db.get(), rsrc.getUser(), input.username).call(); } catch (java.lang.IllegalStateException e) { if (ChangeUserName.USERNAME_CANNOT_BE_CHANGED.equals(e.getMessage())) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } throw e; } catch (com.google.gerrit.common.errors.InvalidUserNameException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Cannot already used"); } return input.username; }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutUsername.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set username"); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow editing username"); } if (input == null) { input = new com.google.gerrit.server.account.PutUsername.Input(); } try { changeUserNameFactory.create(db.get(), rsrc.getUser(), input.username).call(); } catch (java.lang.IllegalStateException e) { if (ChangeUserName.USERNAME_CANNOT_CHANGED.equals(e.getMessage())) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } throw e; } catch (com.google.gerrit.common.errors.InvalidUserNameException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Cannot email already used"); } return input.username; }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutUsername.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set username"); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow editing username"); } if (input == null) { input = new com.google.gerrit.server.account.PutUsername.Input(); } try { changeUserNameFactory.create(db.get(), rsrc.getUser(), input.username).call(); } catch (java.lang.IllegalStateException e) { if (ChangeUserName.USERNAME_CANNOT_BE_CHANGED.equals(e.getMessage())) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } throw e; } catch (com.google.gerrit.common.errors.InvalidUserNameException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Cannot email already used"); } return input.username; }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutUsername.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set username"); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow editing username"); } if (input == null) { input = new com.google.gerrit.server.account.PutUsername.Input(); } try { changeUserNameFactory.create(db.get(), rsrc.getUser(), input.username).call(); } catch (java.lang.IllegalStateException e) { if (ChangeUserName.USERNAME_CANNOT_BE_CHANGED.equals(e.getMessage())) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } throw e; } catch (com.google.gerrit.common.errors.InvalidUserNameException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Cannot set"); } return input.username; }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutUsername.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set username"); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow editing username"); } if (input == null) { input = new com.google.gerrit.server.account.PutUsername.Input(); } try { changeUserNameFactory.create(db.get(), rsrc.getUser(), input.username).call(); } catch (java.lang.IllegalStateException e) { if (ChangeUserName.USERNAME_CANNOT_BE_CHANGED.equals(e.getMessage())) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } throw e; } catch (com.google.gerrit.common.errors.InvalidUserNameException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Cannot email already used"); } catch (com.google.gerrit.common.errors.NameAlreadyUsedException e) { throw e; } return input.username; }
private com.google.gerrit.server.account.AuthResult auth(com.google.gerrit.reviewdb.client.AccountExternalId account) { if (account!= null) { return new com.google.gerrit.server.account.AuthResult(account.getAccountId(), null, false); } return null; }
private com.google.gerrit.server.account.AuthResult auth(final com.google.gerrit.reviewdb.client.AccountExternalId account) { if (account!= null) { return new com.google.gerrit.server.account.AuthResult(account.getAccountId(), null, false); } return null; }
private com.google.gerrit.server.account.AuthResult auth(com.google.gerrit.reviewdb.client.AccountExternalId account) { if (account!= null) { return new com.google.gerrit.server.account.AuthResult(account.getAccountId(), null, false); } return null; }
private com.google.gerrit.server.account.AuthResult auth(com.google.gerrit.reviewdb.client.AccountExternalId account) { if (account!= null) { return new com.google.gerrit.server.account.AuthResult(account.getAccountId()); } return null; }
private com.google.gerrit.server.account.AuthResult auth() { if (account!= null) { return new com.google.gerrit.server.account.AuthResult(account.getAccountId(), null, false); } return null; }
private com.google.gerrit.server.account.AuthResult byUserName(final java.lang.String userName) { try { com.google.gerrit.reviewdb.client.AccountExternalId.Key extId = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, userName); java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId> accountStates = accountQuery.byExternalId(extId.get()); if (accountStates.isEmpty()) { getServletContext().log((("Account has username " + userName) + " found")); return null; } if ((accountStates.size()) > 1) { getServletContext().log().log((("Cannot query " + userName) + " found found")); return null; } return null; } catch (com.google.gwtorm.server.OrmException e) { getServletContext().log.error("Cannot query index", e); return null; } }
private com.google.gerrit.server.account.AuthResult byUserName(final java.lang.String userName) { try { com.google.gerrit.reviewdb.client.AccountExternalId.Key extId = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, userName); java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId> accountStates = accountQuery.byExternalId(extId.get()); if (accountStates.isEmpty()) { getServletContext().log((("Account has username " + userName) + " found")); return null; } if ((accountStates.size()) > 1) { getServletContext().log().log((("Cannot query " + userName) + " found found found")); return null; } return null; } catch (com.google.gwtorm.server.OrmException e) { getServletContext().log.error("Cannot query index", e); return null; } }
private com.google.gerrit.server.account.AuthResult byUserName(final java.lang.String userName) { try { com.google.gerrit.reviewdb.client.AccountExternalId.Key extId = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, userName); java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId> accountStates = accountQuery.byExternalId(extId.get()); if (accountStates.isEmpty()) { getServletContext().log((("Account has username " + userName) + " found")); return null; } if ((accountStates.size()) > 1) { getServletContext().log().log((("Cannot query " + userName) + " found found found")); return null; } return null; } catch (com.google.gwtorm.server.OrmException e) { getServletContext().log.error("Cannot query index account", e); return null; } }
private com.google.gerrit.server.account.AuthResult byUserName(final java.lang.String userName) { try { com.google.gerrit.reviewdb.client.AccountExternalId.Key extId = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, userName); java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId> accountStates = accountQuery.byExternalId(extId.get()); if (accountStates.isEmpty()) { getServletContext().log((("Account has username " + userName) + " found")); return null; } if ((accountStates.size()) > 1) { getServletContext().log().log((("Cannot query " + userName) + " found")); return null; } return null; } catch (com.google.gwtorm.server.OrmException e) { getServletContext().log.error("Cannot query index account", e); return null; } }
private com.google.gerrit.server.account.AuthResult byUserName(final java.lang.String userName) { try { com.google.gerrit.reviewdb.client.AccountExternalId.Key extId = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, userName); java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId> accountStates = accountQuery.byExternalId(extId.get()); if (accountStates.isEmpty()) { getServletContext().log((("Account has username " + userName) + " found")); return null; } if ((accountStates.size()) > 1) { getServletContext().log().log((("Cannot query " + userName) + " found found")); return null; } return null; } catch (com.google.gwtorm.server.OrmException e) { com.google.gwtorm.server.OrmException e) { getServletContext().log.error("Cannot query index", e); return null; } }
@org.junit.Test public void lookUpFromCacheByEmail() throws java.lang.Exception { assertThat(byEmailCache.get(admin.email), admin); java.lang.String email = "foo.bar@example.com"; db.accountExternalIds().insert(java.lang.String.format("foo:bar", "foo:bar@bar", email)); accountCache.evict(admin.id); assertThat(byEmail).isEmpty(); assertThat(byEmailCache.get(java.util.Locale.USERS).isEmpty(); assertThat(byEmail).isEmpty(); assertThat(byEmailCache.get(java.util.Locale.USERS)).isEmpty(); assertThat(byEmailCache.get(java.util.Locale.USERS))).isEmpty(); assertThat(byEmailCache.get(index.substring(0, admin.indexOf('@')))).isEmpty(); assertThat(byEmailCache.get("non-existing@example.com")).isEmpty(); }
@org.junit.Test public void lookUpFromCacheByEmail() throws java.lang.Exception { assertThat(byEmailCache.get(admin.email), admin); java.lang.String email = "foo.bar@example.com"; db.accountExternalIds().insert(java.lang.String.format("foo:bar", "foo:bar@bar", email)); accountCache.evict(admin.id); assertThat(byEmail).isEmpty(); assertThat(byEmailCache.get(java.util.Locale.USERS).isEmpty(); assertThat(byEmail).isEmpty(); assertThat(byEmailCache.get(java.util.Locale.USERS)).isEmpty(); assertThat(byEmailCache.get(java.util.Locale.USERS))).isEmpty(); assertThat(byEmailCache.get(admin.email).isEmpty(); assertThat(byEmailCache.get(0).isEmpty(); }
@org.junit.Test public void lookUpFromCacheByEmail() throws java.lang.Exception { assertThat(byEmailCache.get(admin.email), admin); java.lang.String email = "foo.bar@example.com"; db.accountExternalIds().insert(java.lang.String.format("foo:bar", "foo:bar@bar", email)); accountCache.evict(admin.id); assertThat(byEmail).isEmpty(); assertThat(byEmailCache.get(java.util.Locale.USERS).isEmpty(); assertThat(byEmail).isEmpty(); assertThat(byEmailCache.get(java.util.Locale.USERS)).isEmpty(); assertThat(byEmailCache.get(java.util.Locale.USERS))).isEmpty(); assertThat(byEmailCache.get(index.substring(0, admin.indexOf('@')))).isEmpty(); assertThat(byEmailCache.get("non-existing@")).isEmpty(); }
@org.junit.Test public void lookUpFromCacheByEmail() throws java.lang.Exception { assertThat(byEmailCache.get(admin.email), admin); java.lang.String email = "foo.bar@example.com"; db.accountExternalIds().insert(java.lang.String.format("foo:bar", "foo:bar@bar", email)); accountCache.evict(admin.id); assertThat(byEmail).isEmpty(); assertThat(byEmailCache.get(java.util.Locale.USERS).isEmpty(); assertThat(byEmail).isEmpty(); assertThat(byEmailCache.get(java.util.Locale.USERS)).isEmpty(); assertThat(byEmailCache.get(java.util.Locale.USERS))).isEmpty(); assertThat(byEmailCache.get(admin.email).isEmpty(); assertThat(byEmailCache.get(0, admin.email).isEmpty(); }
@org.junit.Test public void lookUpFromCacheByEmail() throws java.lang.Exception { assertThat(byEmailCache.get(admin.email), admin); java.lang.String email = "foo.bar@example.com"; db.accountExternalIds().insert(java.lang.String.format("foo:bar", "foo:bar@bar", email)); accountCache.evict(admin.id); assertThat(byEmail).isEmpty(); assertThat(byEmailCache.get(java.util.Locale.USERS).isEmpty(); assertThat(byEmail).isEmpty(); assertThat(byEmailCache.get(java.util.Locale.USERS)).isEmpty(); assertThat(byEmailCache.get(java.util.Locale.USERS))).isEmpty(); assertThat(byEmailCache.get(index.substring(0, admin.indexOf('@')))).isEmpty(); assertThat(byEmailCache.get("non-existing@").isEmpty(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.Email rsrc, com.google.gerrit.server.account.DeleteEmail.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to delete email address"); } return apply(rsrc.getUser(), rsrc.getEmail()); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.Email rsrc, com.google.gerrit.server.account.DeleteEmail.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to delete email address"); } return apply(rsrc.getUser(), rsrc.getEmail()); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.Email rsrc, com.google.gerrit.server.account.DeleteEmail.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to delete email address"); } return apply(rsrc.getUser(), rsrc.getEmail()); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.Email rsrc, com.google.gerrit.server.account.DeleteEmail.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to delete email address"); } return apply(rsrc.getUser(), rsrc.getEmail()); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.Email rsrc, com.google.gerrit.server.account.DeleteEmail.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to delete email address"); } return apply(rsrc.getUser(), rsrc.getUser()); }
accountExternalId.Key getLastLoginExternalId();
private AccountExternalId.Key getLastLoginExternalId();
Account.Key getLastLoginExternalId();
private AccountExternalId.Key getLastExternalId();
Account.Key getLastExternalId();
private void assertKeys(java.lang.Iterable<com.google.gerrit.gpg.testutil.TestKey> expectedKeys) throws java.lang.Exception { com.google.common.collect.FluentIterable<com.google.gerrit.gpg.testutil.TestKey> expected = com.google.common.collect.FluentIterable.from(expectedKeys); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> keyMap = gApi.accounts().self().listGpgKeys(); assertThat(keySet).named(com.google.gerrit.gpg.testutil.TestKeyInfo.self().gpgKeys()).named(com.google.gerrit.gpg.testutil.TestKey key, expectedGpgKeys()).named(com.google.gerrit.gpg.testutil.TestKey key, expectedGpgKeys())); com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals(key, gApi.accounts().self().gpgKey(com.google.gerrit.gpg.Fingerprint.toString(key.getPublicKey()).get()); com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals(key, keyMap); }
private void assertKeys(java.lang.Iterable<com.google.gerrit.gpg.testutil.TestKey> expectedKeys) throws java.lang.Exception { com.google.common.collect.FluentIterable<com.google.gerrit.gpg.testutil.TestKey> expected = com.google.common.collect.FluentIterable.from(expectedKeys); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> keyMap = gApi.accounts().self().listGpgKeys(); assertThat(keySet).named(com.google.gerrit.gpg.testutil.TestKeyInfo.self().gpgKeys()).named(com.google.gerrit.gpg.testutil.TestKey key, expectedGpgKeys()).named(com.google.gerrit.gpg.testutil.TestKey.toString(key.getKeyIdString()).get()); com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals(key, gApi.accounts().self().gpgKey(com.google.gerrit.gpg.Fingerprint.toString(key.getPublicKey()).get()); com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals(key, keyMap); }
private void assertKeys(java.lang.Iterable<com.google.gerrit.gpg.testutil.TestKey> expectedKeys) throws java.lang.Exception { com.google.common.collect.FluentIterable<com.google.gerrit.gpg.testutil.TestKey> expected = com.google.common.collect.FluentIterable.from(expectedKeys); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> keyMap = gApi.accounts().self().listGpgKeys(); assertThat(keySet).named(com.google.gerrit.gpg.testutil.TestKeyInfo.self().gpgKeys()).named(com.google.gerrit.gpg.testutil.TestKey key, expectedGpgKeys()).named(com.google.gerrit.gpg.testutil.TestKey.toString(key.getKeyIdString()).get()); com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals(key, gApi.accounts().self().gpgKey(com.google.gerrit.gpg.Fingerprint.toString(key.getPublicKey())); com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals(key, keyMap); }
private void assertKeys(java.lang.Iterable<com.google.gerrit.gpg.testutil.TestKey> expectedKeys) throws java.lang.Exception { com.google.common.collect.FluentIterable<com.google.gerrit.gpg.testutil.TestKey> expected = com.google.common.collect.FluentIterable.from(expectedKeys); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> keyMap = gApi.accounts().self().listGpgKeys(); assertThat(keySet).named(com.google.gerrit.gpg.testutil.TestKeyInfo.self().gpgKeys()).named(com.google.gerrit.gpg.testutil.TestKey key, expectedGpgKeys()).named(com.google.gerrit.gpg.testutil.TestKey key, expectedGpgKeys())); com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals(key, gApi.accounts().self().gpgKey(com.google.gerrit.gpg.Fingerprint.toString(key.getPublicKey()).get()); com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals(key, keyMap, keyMap); }
private void assertKeys(java.lang.Iterable<com.google.gerrit.gpg.testutil.TestKey> expectedKeys) throws java.lang.Exception { com.google.common.collect.FluentIterable<com.google.gerrit.gpg.testutil.TestKey> expected = com.google.common.collect.FluentIterable.from(expectedKeys); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> keyMap = gApi.accounts().self().listGpgKeys(); assertThat(keySet).named(com.google.gerrit.gpg.testutil.TestKeyInfo.self().gpgKeys()).named(com.google.gerrit.gpg.testutil.TestKey key, expectedGpgKeys()).named(com.google.gerrit.gpg.testutil.TestKey key, expectedGpgKeys())); com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals(key, gApi.accounts().self().gpgKeys()).get()); com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals(key, gApi.accounts().gpgKey(com.google.gerrit.gpg.Fingerprint.toString(key.getPublicKey())); }
public boolean isIdentityTrustable(final java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { if ((getAuthType()) == (com.google.gerrit.reviewdb.client.AccountExternalId.ANY_ACCOUNT_ACCOUNT)) { return true; case CLIENT_BECOME_ANY_ACCOUNT_ACCOUNT : return true; case OPENID_SSO : return true; case OPENID_SSH_ACCOUNT : return true; case OPENID : return true; default : return true; } return false; }
public boolean isIdentityTrustable(final java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { if ((getAuthType()) == (com.google.gerrit.reviewdb.client.AccountExternalId.ANY_ACCOUNT_ACCOUNT)) { return true; case CLIENT_BECOME_ANY_ACCOUNT_ACCOUNT : return true; case OPENID_SSO : return true; case OPENID_SSH_ACCOUNT : return true; case OPENID : return true; default : return true; } return true; }
public boolean isIdentityTrustable(final java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { if ((getAuthType()) == (com.google.gerrit.reviewdb.client.AccountExternalId.ANY_ACCOUNT_ACCOUNT)) { return true; case CLIENT_BECOME_ANY_ACCOUNT_ACCOUNT : return true; case OPENID_SSO : return true; case OPENID_SSH_ACCOUNT : return true; case OPENID : return true; default : return true; } return false; default : return false; }
public boolean isIdentityTrustable(final java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { if ((getAuthType()) == (com.google.gerrit.reviewdb.client.AccountExternalId.ANY_ACCOUNT_ACCOUNT)) { return true; case CLIENT_BECOME_ANY_ACCOUNT_ACCOUNT : return true; case OPENID_SSO : return true; case OPENID_SSH_ACCOUNT : return true; case OPENID : return true; default : return true; } return true; default : return false; }
public boolean isIdentityTrustable(final java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { if ((getAuthType()) == (com.google.gerrit.reviewdb.client.AccountExternalId.ANY_ACCOUNT_ACCOUNT)) { return true; case CLIENT_BECOME_ANY_ACCOUNT_ACCOUNT : return true; case OPENID_SSO : return true; case OPENID_SSH_ACCOUNT : return true; case OPENID : return true; default : return true; } return false; default : return true; }
private com.google.gerrit.reviewdb.client.Account getAccountByExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQueryProvider.get().byExternalId(externalId); if (accountStates.isEmpty()) { return null; } if ((accountStates.size()) > 1) { java.lang.StringBuilder msg = new java.lang.StringBuilder(); msg.append("Key ").append(externalId.toString()); log.error(msg.toString()); log.error(msg.toString()); throw new java.lang.IllegalStateException(msg.toString()); } return accountStates.get(0).getAccount(); }
private com.google.gerrit.reviewdb.client.Account getAccountByExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQueryProvider.get().byExternalId(externalId); if (accountStates.isEmpty()) { return null; } if ((accountStates.size()) > 1) { java.lang.StringBuilder msg = new java.lang.StringBuilder(); msg.append("Key ").append(externalId.toString()); log.error(msg, com.google.common.collect.Lists.transform(accountStates, AccountState.ACCOUNT_ID_FUNCTION)); log.error(msg.toString()); throw new java.lang.IllegalStateException(msg.toString()); } return accountStates.get(0).getAccount(); }
private com.google.gerrit.reviewdb.client.Account getAccountByExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQueryProvider.get().byExternalId(externalId); if (accountStates.isEmpty()) { return null; } if ((accountStates.size()) > 1) { java.lang.StringBuilder msg = new java.lang.StringBuilder(); msg.append("Key ").append(externalId).append(" associated with multiple accounts: "); com.google.common.base.Joiner.on(", ").appendTo(com.google.common.collect.Lists.transform(accountStates, AccountState.ACCOUNT_ID_FUNCTION)); log.error(msg.toString()); throw new java.lang.IllegalStateException(msg.toString()); } return accountStates.get(0).getAccount(); }
private com.google.gerrit.reviewdb.client.Account getAccountByExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQueryProvider.get().byExternalId(externalId); if (accountStates.isEmpty()) { return null; } if ((accountStates.size()) > 1) { java.lang.StringBuilder msg = new java.lang.StringBuilder(); msg.append("Key ").append(externalId).append(" associated with multiple accounts: "); com.google.common.base.Joiner.on(", ").appendTo(com.google.common.collect.Lists.transform(accountStates, AccountState.ACCOUNT_FUNCTION)); log.error(msg.toString()); throw new java.lang.IllegalStateException(msg.toString()); } return accountStates.get(0).getAccount(); }
private com.google.gerrit.reviewdb.client.Account getAccountByExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQueryProvider.get().byExternalId(externalId); if (accountStates.isEmpty()) { return null; } if ((accountStates.size()) > 1) { java.lang.StringBuilder msg = new java.lang.StringBuilder(); msg.append("Key ").append(externalId).append(" associated with multiple accounts: "); com.google.common.base.Joiner.on(", ").appendTo(msg, com.google.common.collect.Lists.transform(accountStates, AccountState.ACCOUNT_FUNCTION)); log.error(msg.toString()); throw new java.lang.IllegalStateException(msg.toString()); } return accountStates.get(0).getAccount(); }
@java.lang.Override public void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), email); try { deleteEmail.apply(rsrc, null); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete email", e); } }
@java.lang.Override public void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), email); try { deleteEmail.apply(rsrc, null); } catch (com.google.gwtorm.server.OrmException | java.io.IOException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete email", e); } }
@java.lang.Override public void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), email); try { deleteEmail.apply(rsrc, null); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete email", e); } }
@java.lang.Override public void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), email); try { deleteEmail.apply(rsrc, null); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete email e", e); } }
@java.lang.Override public void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), email); try { deleteEmail.apply(rsrc, null); } catch (com.google.gwtorm.server.OrmException | java.io.IOException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete email e); } }
@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_USERNAME, username); com.google.gerrit.server.account.AccountState accountState = accountQueryProvider.get().oneByExternalId(key.get()); return java.util.Optional.ofNullable(accountState).map((s) -> s.getAccount().getId()); }
@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_USERNAME, username); com.google.gerrit.server.account.AccountState accountState = accountQueryProvider.get().oneByExternalId(key.get()); return java.util.Optional.ofNullable(accountState).map(( s) -> s.getAccount().getId()); }
@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_USERNAME, username); return java.util.Optional.ofNullable(accountQueryProvider).map((s) -> s.getAccount().getId()); }
@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_USERNAME, username); com.google.gerrit.server.account.AccountState accountState = accountQueryProvider.get().oneByExternalId(key.get()); return java.util.Optional.ofNullable(accountState).map((s) -> accountState).map((s) -> s.getAccount().getId()); }
@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_USERNAME, username); com.google.gerrit.server.account.AccountState accountState = accountQueryProvider.get().oneByExternalId(key.get()); return java.util.Optional.ofNullable(accountState.getAccount().getId()); }
private static com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = java.util.Collections.emptySet(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> anon = com.google.common.collect.ImmutableSet.of(); return new com.google.gerrit.server.account.AccountState(account, anon, ids, new java.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>>()); }
private static com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = java.util.Collections.emptySet(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> anon = com.google.common.collect.ImmutableSet.of(); return new com.google.gerrit.server.account.AccountState(account, anon,ids, new java.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>>()); }
private static com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = java.util.Collections.emptySet(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> anon = com.google.common.collect.ImmutableSet.of(); return new com.google.gerrit.server.account.AccountState(account, anon, ids, new java.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey>>()); }
private static com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = java.util.Collections.emptySet(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> anon = com.google.common.collect.ImmutableSet.of(); return new com.google.gerrit.server.account.AccountState(account, anon, new java.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>>()); }
private static com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = java.util.Collections.emptySet(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> anon = com.google.common.collect.ImmutableSet.of(); return new com.google.gerrit.server.account.AccountState(account, anon,ids, new java.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey>>()); }
private java.util.Optional<com.google.gerrit.server.account.AccountState> load(final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.Account.Id who) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.Account account = db.accounts().get(who); if (account == null) { return java.util.Optional.emptyList(); } java.util.Optional<com.google.gerrit.reviewdb.client.AccountExternalId> externalIds = db.accounts().byAccount(who).toList()); java.util.Set<com.google.gerrit.reviewdb.client.AccountExternalId> externalIds = com.google.gerrit.server.account.ExternalIds().byAccount(who).toList()); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> internalGroups = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID g : db.accountExternalIds().byAccount(who)) { final com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = g.getAccountGroupId(); final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(groupId); if ((group!= null) && ((group.getGroupUUID())!= null)) { internalGroups.add(group.getGroupUUID()); } } internalGroups = java.util.Collections.unmodifiableSet(internalGroups); try { account.setGeneralPreferences(loader.load(who)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.account.AccountCacheImpl.log.warn(("Cannot load GeneralPreferences for " + who), e); account.setGeneralPreferences(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); return java.util.Optional.
private java.util.Optional<com.google.gerrit.server.account.AccountState> load(final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.Account.Id who) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.Account account = db.accounts().get(who); if (account == null) { return java.util.Optional.emptyList(); } java.util.Optional<com.google.gerrit.reviewdb.client.AccountExternalId> externalIds = db.accounts().byAccount(who).toList()); java.util.Set<com.google.gerrit.reviewdb.client.AccountExternalId> externalIds = com.google.gerrit.server.account.ExternalIds().byAccount(who).toList()); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> internalGroups = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember g : db.accountExternalIds().byAccount(who)) { final com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = g.getAccountGroupId(); final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(groupId); if ((group!= null) && ((group.getGroupUUID())!= null)) { internalGroups.add(group.getGroupUUID()); } } internalGroups = java.util.Collections.unmodifiableSet(internalGroups); try { account.setGeneralPreferences(loader.load(who)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.account.AccountCacheImpl.log.warn(("Cannot load GeneralPreferences for " + who), e); account.setGeneralPreferences(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); return java.util.Optional.of(
private java.util.Optional<com.google.gerrit.server.account.AccountState> load(final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.Account.Id who) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.Account account = db.accounts().get(who); if (account == null) { return java.util.Optional.emptyList(); } java.util.Optional<com.google.gerrit.reviewdb.client.AccountExternalId> externalIds = db.accounts().byAccount(who).toList()); java.util.Set<com.google.gerrit.reviewdb.client.AccountExternalId> externalIds = db.accountExternalIds().byAccount(who).toList(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> internalGroups = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID g : db.accountExternalIds().byAccount(who)) { final com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = g.getAccountGroupId(); final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(groupId); if ((group!= null) && ((group.getGroupUUID())!= null)) { internalGroups.add(group.getGroupUUID()); } } internalGroups = java.util.Collections.unmodifiableSet(internalGroups); try { account.setGeneralPreferences(loader.load(who)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.account.AccountCacheImpl.log.warn(("Cannot load GeneralPreferences for " + who)), e); account.setGeneralPreferences(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); return java.util.Optional.of(new com.google.
private java.util.Optional<com.google.gerrit.server.account.AccountState> load(final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.Account.Id who) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.Account account = db.accounts().get(who); if (account == null) { return java.util.Optional.emptyList(); } java.util.Optional<com.google.gerrit.reviewdb.client.AccountExternalId> externalIds = db.accounts().byAccount(who).toList()); java.util.Set<com.google.gerrit.reviewdb.client.AccountExternalId> externalIds = db.accountExternalIds().byAccount(who).toList(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> internalGroups = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID g : db.accountExternalIds().byAccount(who)) { final com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = g.getAccountGroupId(); final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(groupId); if ((group!= null) && ((group.getGroupUUID())!= null)) { internalGroups.add(group.getGroupUUID()); } } internalGroups = java.util.Collections.unmodifiableSet(internalGroups); try { account.setGeneralPreferences(loader.load(who)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.account.AccountCacheImpl.log.warn(("Cannot load GeneralPreferences for " + who), e); account.setGeneralPreferences(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); return java.util.Optional.of(new com.google.ger
private java.util.Optional<com.google.gerrit.server.account.AccountState> load(final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.Account.Id who) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.Account account = db.accounts().get(who); if (account == null) { return java.util.Optional.emptyList(); } java.util.Optional<com.google.gerrit.reviewdb.client.AccountExternalId> externalIds = db.accounts().byAccount(who).toList()); java.util.Set<com.google.gerrit.reviewdb.client.AccountExternalId> externalIds = db.accountExternalIds().byAccount(who).toList(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> internalGroups = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID g : db.accountExternalIds().byAccount(who)) { final com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = g.getAccountGroupId(); final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(groupId); if ((group!= null) && ((group.getGroupUUID())!= null)) { internalGroups.add(group.getGroupUUID()); } } internalGroups = java.util.Collections.unmodifiableSet(internalGroups); try { account.setGeneralPreferences(loader.load(who)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.account.AccountCacheImpl.log.warn(("Cannot load GeneralPreferences for " + who), e); account.setGeneralPreferences(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); return java.util.Optional.of(new com.google.g
@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.open()) { return java.util.Optional.ofNullable(db.accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key((((ExternalId.SCHEME_USERNAME) + ":") + username)))).map(AccountExternalId::getAccountId); }
@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.open()) { return java.util.Optional.ofNullable(db.accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key((((ExternalId.SCHEME_USERNAME) + ":") + username)))).map(AccountExternalId::getAccountId); } }
@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.open()) { return java.util.Optional.ofNullable(db.accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(((ExternalId.SCHEME_USERNAME) + ":") + username)))).map(AccountExternalId::getAccountId); }
@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.open()) { return java.util.Optional.ofNullable(db.accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(((ExternalId.SCHEME_USERNAME) + ":") + username)))).map(AccountExternalId::getAccountId); } }
@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.open()) { return java.util.Optional.ofNullable(db.accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key((((ExternalId.SCHEME_USERNAME) + ":") + username)))).map(AccountExternalId::getAccountId); } }
@java.lang.Override public boolean hasEmailAddress(com.google.gerrit.server.IdentifiedUser user, java.lang.String email) { for (com.google.gerrit.reviewdb.client.AccountExternalId ext : user.state().getExternalIds()) { if ((email!= null) && (email.equalsIgnoreCase(extId))) { return true; } } return false; }
@java.lang.Override public boolean hasEmailAddress(com.google.gerrit.server.IdentifiedUser user, java.lang.String email) { for (com.google.gerrit.reviewdb.client.AccountExternalId ext : user.state().getExternalIds()) { if ((email!= null) && (email.equalsIgnoreCase(extId.getEmailAddress()))) { return true; } } return false; }
@java.lang.Override public boolean hasEmailAddress(com.google.gerrit.server.IdentifiedUser user, java.lang.String email) { for (com.google.gerrit.reviewdb.client.AccountExternalId extId : user.state().getExternalIds()) { if ((email!= null) && (email.equalsIgnoreCase(extId))) { return true; } } return false; }
@java.lang.Override public boolean hasEmailAddress(com.google.gerrit.server.IdentifiedUser user, java.lang.String email) { for (com.google.gerrit.reviewdb.client.AccountExternalId ext : user.state().getExternalIds()) { if ((email!= null) && (email.equalsIgnoreCase(ext.getEmailAddress()))) { return true; } } return false; }
@java.lang.Override public boolean hasEmailAddress(com.google.gerrit.server.IdentifiedUser user, java.lang.String email) { for (com.google.gerrit.reviewdb.client.AccountExternalId ext : user.state().getExternalIds()) { if ((email!= null) && (email.equalsIgnoreCase(extId.getEmailAddress()))) { return true; } } return true; }
@java.lang.Override public void delete() throws com.google.gerrit.extensions.restapi.RestApiException { try { delete.apply(rsrc, new com.google.gerrit.server.git.DeleteGpgKey.Input()); } catch (org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete GPG key", e); } }
@java.lang.Override public void delete() throws com.google.gerrit.extensions.restapi.RestApiException { try { delete.apply(rsrc, new com.google.gerrit.server.gpg.DeleteGpgKey.Input()); } catch (org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete GPG key", e); } }
@java.lang.Override public void delete() throws com.google.gerrit.extensions.restapi.RestApiException { try { delete.apply(rsrc, new com.google.gerrit.server.gpgp.DeleteGpgKey.Input()); } catch (org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete GPG key", e); } }
@java.lang.Override public void delete() throws com.google.gerrit.extensions.restapi.RestApiException { try { delete.apply(rsrc, new com.google.gerrit.server.gpg.DeleteGpgKey.Input()); } catch (org.bouncycastle.openpgp.PGPException | java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete GPG key", e); } }
@java.lang.Override public void delete() throws com.google.gerrit.extensions.restapi.RestApiException { try { delete.apply(rsrc, new com.google.gerrit.server.gpg.DeleteGpgKey.Input()); } catch (org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete GPG key", e); } }
private void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { if (email.equals("ALL")) { java.util.List<com.google.gerrit.extensions.common.EmailInfo> emails = getEmails.apply(rsrc); for (com.google.gerrit.extensions.common.EmailInfo e : emails) { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, e.email), new com.google.gerrit.server.account.AccountResource.Email.Input()); } } else { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, email), new com.google.gerrit.server.account.DeleteEmail.Input()); } }
private void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { if (email.equals("ALL")) { java.util.List<com.google.gerrit.extensions.common.EmailInfo> emails = getEmails.apply(rsrc); for (com.google.gerrit.extensions.common.EmailInfo e : emails) { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, e.email), new com.google.gerrit.server.account.DeleteEmail.Input()); } } else { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, email), new com.google.gerrit.server.account.DeleteEmail.Input()); } }
private void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { if (email.equals("ALL")) { java.util.List<com.google.gerrit.extensions.common.EmailInfo> emails = getEmails.apply(rsrc); for (com.google.gerrit.extensions.common.EmailInfo e : emails) { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, e.email), new com.google.gerrit.server.account.AccountResource.Input()); } } else { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, email), new com.google.gerrit.server.account.DeleteEmail.Input()); } }
private void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { if (email.equals("ALL")) { java.util.List<com.google.gerrit.extensions.common.EmailInfo> emails = getEmails.apply(rsrc); for (com.google.gerrit.extensions.common.EmailInfo e : emails) { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, e.email), new com.google.gerrit.server.account.AccountResource.Email.Input()); } } else { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, email), new com.google.gerrit.server.account.AccountResource.Input()); } }
private void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { if (email.equals("ALL")) { java.util.List<com.google.gerrit.extensions.common.EmailInfo> emails = getEmails.apply(rsrc); for (com.google.gerrit.extensions.common.EmailInfo e : emails) { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, e.email), new com.google.gerrit.server.account.AccountResource.Email.Input()); } } else { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, email), new com.google.gerrit.server.account.DeleteEmail.Input()); } } }
private void addEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.sshd.commands.UnloggedFailure, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.extensions.api.accounts.EmailInput in = new com.google.gerrit.extensions.api.accounts.EmailInput(); in.email = email; in.noConfirmation = true; try { createEmailFactory.create(email).apply(rsrc, in); } catch (com.google.gerrit.common.errors.EmailException e) { throw die(e.getMessage()); } }
private void addEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.sshd.commands.UnloggedFailure, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.extensions.api.accounts.EmailInput in = new com.google.gerrit.extensions.api.accounts.EmailInput(); in.email = email; in.noConfirmation = true; in.noConfirmation = true; try { createEmailFactory.create(email).apply(rsrc, in); } catch (com.google.gerrit.common.errors.EmailException e) { throw die(e.getMessage()); } }
private void addEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.sshd.commands.UnloggedFailure, com.google.gerrit.sshd.commands.UnloggedFailure, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.extensions.api.accounts.EmailInput in = new com.google.gerrit.extensions.api.accounts.EmailInput(); in.email = email; in.noConfirmation = true; try { createEmailFactory.create(email).apply(rsrc, in); } catch (com.google.gerrit.common.errors.EmailException e) { throw die(e.getMessage()); } }
private void addEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.sshd.commands.UnloggedFailure, com.google.gerrit.sshd.commands.UnloggedFailure, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.extensions.api.accounts.EmailInput in = new com.google.gerrit.extensions.api.accounts.EmailInput(); in.email = email; in.noConfirmation = true; try { createEmailFactory.create(email).apply(rsrc, in); } catch (com.google.gerrit.common.errors.EmailException e) { throw die(e.getMessage()); } }
private void addEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.sshd.commands.UnloggedFailure, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.extensions.api.accounts.EmailInput in = new com.google.gerrit.extensions.api.accounts.EmailInput(); in.email = email; in.noConfirmation = true; in.noConfirmation = true; try { createEmailFactory.create(email).apply(rsrc, in); } catch (com.google.gerrit.common.errors.EmailException e) { throw die(e.getMessage()); } }
@java.lang.Override public java.util.Set<java.lang.String> getEmailAddresses(com.google.gerrit.server.IdentifiedUser user) { java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = user.state().getExternalIds(); java.util.Set<java.lang.String> emails = com.google.common.collect.Sets.newHashSetWithExpectedSize(ids.size()); for (com.google.gerrit.reviewdb.client.AccountExternalId extId : ids) { if (!(com.google.common.base.Strings.isNullOrEmpty(extId))) { emails.add(extId.getEmailAddress()); } } return emails; }
@java.lang.Override public java.util.Set<java.lang.String> getEmailAddresses(com.google.gerrit.server.IdentifiedUser user) { java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = user.state().getExternalIds(); java.util.Set<java.lang.String> emails = com.google.common.collect.Sets.newHashSetWithExpectedSize(ids.size()); for (com.google.gerrit.reviewdb.client.AccountExternalId extId : ids) { if (!(com.google.common.base.Strings.isNullOrEmpty(extId.get()))) { emails.add(extId.getEmailAddress()); } } return emails; }
@java.lang.Override public java.util.Set<java.lang.String> getEmailAddresses(com.google.gerrit.server.IdentifiedUser user) { java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = user.state().getExternalIds(); java.util.Set<java.lang.String> emails = com.google.common.collect.Sets.newHashSetWithExpectedSize(ids.size()); for (com.google.gerrit.reviewdb.client.AccountExternalId extId : ids) { if (!(com.google.common.base.Strings.isNullOrEmpty(extId.get()))) { emails.add(extId); } } return emails; }
@java.lang.Override public java.util.Set<java.lang.String> getEmailAddresses(com.google.gerrit.server.IdentifiedUser user) { java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = user.state().getExternalIds(); java.util.Set<java.lang.String> emails = com.google.common.collect.Sets.newHashSetWithExpectedSize(ids.size()); for (com.google.gerrit.reviewdb.client.AccountExternalId extId : ids) { if (!(com.google.common.base.Strings.isNullOrEmpty(extId.getEmailAddress()))) { emails.add(extId); } } return emails; }
@java.lang.Override public java.util.Set<java.lang.String> getEmailAddresses(com.google.gerrit.server.IdentifiedUser user) { java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = user.state().getExternalIds(); java.util.Set<java.lang.String> emails = com.google.common.collect.Sets.newHashSetWithExpectedSize(ids.size()); for (com.google.gerrit.reviewdb.client.AccountExternalId extId : ids) { if (!(com.google.common.base.Strings.isNullOrEmpty(extId.getEmailAddress()))) { emails.add(extId.getEmailAddress()); } } return emails; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EmailInfo> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.common.errors.EmailException, com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to add email address"); } if (input == null) { input = new com.google.gerrit.extensions.api.accounts.EmailInput(); } if (!(com.google.gerrit.server.mail.send.OutgoingEmailValidator.isValid(email))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("invalid email address"); } if ((input.noConfirmation) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to use no_confirmation"); } if (!(realm.allowsEdit(AccountFieldName.REGISTER_NEW_NEW_EMAIL))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow adding emails"); } return apply(rsrc.getUser(), input); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EmailInfo> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.common.errors.EmailException, com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to add email address"); } if (input == null) { input = new com.google.gerrit.server.mail.send.EmailInput(); } if (!(com.google.gerrit.server.mail.send.OutgoingEmailValidator.isValid(email))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("invalid email address"); } if ((input.noConfirmation) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to use no_confirmation"); } if (!(realm.allowsEdit(AccountFieldName.REGISTER_NEW_EMAIL))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow adding emails"); } return apply(rsrc.getUser(), input); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EmailInfo> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.common.errors.EmailException, com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to add email address"); } if (input == null) { input = new com.google.gerrit.extensions.api.accounts.EmailInput(); } if (!(com.google.gerrit.server.mail.send.OutgoingEmailValidator.isValid(email))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("invalid email address"); } if ((input.noConfirmation) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to use no_confirmation"); } if (!(realm.allowsEdit(AccountFieldName.REGISTER_NEW_EMAIL))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow adding emails"); } return apply(rsrc.getUser(), input); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EmailInfo> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.common.errors.EmailException, com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to add email address"); } if (input == null) { input = new com.google.gerrit.extensions.api.accounts.EmailInput(); } if (!(com.google.gerrit.server.mail.send.OutgoingEmailValidator.isValid(email))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("invalid email address"); } if (!(com.google.gerrit.server.mail.send.OutgoingEmailValidator.isValid(email))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to use no_confirmation"); } if (!(realm.allowsEdit(AccountFieldName.REGISTER_NEW_NEW_EMAIL))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow adding emails"); } return apply(rsrc.getUser(), input); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EmailInfo> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.common.errors.EmailException, com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to add email address"); } if (input == null) { input = new com.google.gerrit.server.mail.send.EmailInput(); } if (!(com.google.gerrit.server.mail.send.OutgoingEmailValidator.isValid(email))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("invalid email address"); } if ((input.noConfirmation) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to use no_confirmation"); } if (!(realm.allowsEdit(AccountFieldName.REGISTER_NEW_NEW_EMAIL))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow adding emails"); } return apply(rsrc.getUser(), input); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutHttpPassword.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { input = new com.google.gerrit.server.account.PutHttpPassword.Input(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutHttpPassword.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if (input == null) { input = new com.google.gerrit.server.account.PutHttpPassword.Input(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword); java.lang.String newPassword; if (input.generate) { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to generate HTTP password"); } newPassword = com.google.gerrit.server.account.PutHttpPassword.generate(); } else if ((input.httpPassword) == null) { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set HTTP password directly, " + (self.get().getCapabilities().canAdministrateServer()))); } newPassword = input.httpPassword; } return apply(rsrc.getUser(), newPassword); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutHttpPassword.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if (input == null) { input = new com.google.gerrit.server.account.PutHttpPassword.Input(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword); java.lang.String newPassword; if (input.generate) { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to generate HTTP password"); } newPassword = com.google.gerrit.server.account.PutHttpPassword.generate(); } else if ((input.httpPassword) == null) { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set HTTP password"); } newPassword = null; } else { if (!(self.get().getCapabilities().canAdministrateServer())) { throw new com.google.gerrit.extensions.restapi.AuthException(("not allowed to set HTTP password directly, " + (input.get().getCapabilities().canAdministrateServer()))); } return apply(rsrc.getUser(), newPassword); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutHttpPassword.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if (input == null) { input = new com.google.gerrit.server.account.PutHttpPassword.Input(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword); java.lang.String newPassword; if (input.generate) { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to generate HTTP password"); } newPassword = com.google.gerrit.server.account.PutHttpPassword.generate(); } else if ((input.httpPassword) == null) { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set HTTP password directly, " + (self.get().getCapabilities().canAdministrateServer()))); } newPassword = input.httpPassword; } else { if (!(self.get().getCapabilities().canAdministrateServer())) { throw new com.google.gerrit.extensions.restapi.AuthException(("not allowed to set HTTP password directly, " + (input.getUser()))); } return apply(rsrc.getUser(), newPassword); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutHttpPassword.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if (input == null) { input = new com.google.gerrit.server.account.PutHttpPassword.Input(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword); java.lang.String newPassword; if (input.generate) { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to generate HTTP password"); } newPassword = com.google.gerrit.server.account.PutHttpPassword.generate(); } else if ((input.httpPassword) == null) { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set HTTP password directly, " + (self.get().getCapabilities().canAdministrateServer()))); } newPassword = input.httpPassword; } else { if (!(self.get().getCapabilities().canAdministrateServer())) { throw new com.google.gerrit.extensions.restapi.AuthException(("not allowed to set HTTP password directly, " + "requires the Administrate Server permission")); } return apply(rsrc.getUser(), newPassword); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if ((user.getUserName()) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("username must be set"); } com.google.gerrit.reviewdb.client.AccountExternalId id = dbProvider.get().accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, user.getUserName())); if (id == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } id.setPassword(com.google.gerrit.server.account.HashedPassword.fromPassword(newPassword).encode()); dbProvider.get().accountExternalIds().update(java.util.Collections.singleton(id)); accountCache.evict(user.getAccountId()); return com.google.common.base.Strings.isNullOrEmpty(newPassword); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if ((user.getUserName()) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("database must be set"); } com.google.gerrit.reviewdb.client.AccountExternalId id = dbProvider.get().accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, user.getUserName())); if (id == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } id.setPassword(com.google.gerrit.server.account.HashedPassword.fromPassword(newPassword).encode()); dbProvider.get().accountExternalIds().update(java.util.Collections.singleton(id)); accountCache.evict(user.getAccountId()); return com.google.common.base.Strings.isNullOrEmpty(newPassword); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if ((user.getUserName()) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Authentication must be set"); } com.google.gerrit.reviewdb.client.AccountExternalId id = dbProvider.get().accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, user.getUserName())); if (id == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } id.setPassword(com.google.gerrit.server.account.HashedPassword.fromPassword(newPassword).encode()); dbProvider.get().accountExternalIds().update(java.util.Collections.singleton(id)); accountCache.evict(user.getAccountId()); return com.google.common.base.Strings.isNullOrEmpty(newPassword); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if ((user.getUserName()) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("username must be set"); } com.google.gerrit.reviewdb.client.AccountExternalId id = dbProvider.get().accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, user.getUserName())); if (id == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } id.setPassword(com.google.gerrit.server.account.HashedPassword.fromPassword(newPassword).encode()); dbProvider.get().accountExternalIds().update(java.util.Collections.singleton(id)); accountCache.evict(user.getAccountId()); return com.google.common.base.Strings.isNullOrEmpty(newPassword)? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if ((user.getUserName()) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("username must be set"); } com.google.gerrit.reviewdb.client.AccountExternalId id = dbProvider.get().accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, user.getUserName())); if (id == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } id.setPassword(com.google.gerrit.server.account.HashedPassword.fromPassword(newPassword).encode()); dbProvider.get().accountExternalIds().update(java.util.Collections.singleton(id)); accountCache.evict(user.getAccountId()); return com.google.common.base.Strings.isNullOrEmpty(newPassword)? com.google.gerrit.extensions.restapi.Response.ok(newPassword); }
@java.lang.Override public java.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, username); com.google.gerrit.reviewdb.client.AccountExternalId user = db.accountExternalIds().get(key); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; } java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = new java.util.ArrayList<>(4); for (com.google.gerrit.reviewdb.client.AccountSshKey k : authorizedKeys.getKeys(user.getAccountId())) { if (k.isValid()) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } return java.util.Collections.unmodifiableList(kl); } }
@java.lang.Override public java.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, username); com.google.gerrit.reviewdb.client.AccountExternalId user = db.accountExternalIds().get(key); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCHCH_USER; } java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = new java.util.ArrayList<>(4); for (com.google.gerrit.reviewdb.client.AccountSshKey k : authorizedKeys.getKeys(user.getAccountId())) { if (k.isValid()) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } return java.util.Collections.unmodifiableList(kl); } }
@java.lang.Override public java.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, username); com.google.gerrit.reviewdb.client.AccountExternalId user = db.accountExternalIds().get(Key); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; } java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = new java.util.ArrayList<>(4); for (com.google.gerrit.reviewdb.client.AccountSshKey k : authorizedKeys.getKeys(user.getAccountId())) { if (k.isValid()) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } return java.util.Collections.unmodifiableList(kl); } }
@java.lang.Override public java.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, username); com.google.gerrit.reviewdb.client.AccountExternalId user = db.accountExternalIds().get(key); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; } java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = new java.util.ArrayList<>(4); for (com.google.gerrit.reviewdb.client.AccountSshKey k : authorizedKeys.getKeys(user.getUserId())) { if (k.isValid()) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } return java.util.Collections.unmodifiableList(kl); } }
@java.lang.Override public java.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, username); com.google.gerrit.reviewdb.client.AccountExternalId user = db.accountExternalIds().get(key); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_SUCH_USER; } java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = new java.util.ArrayList<>(4); for (com.google.gerrit.reviewdb.client.AccountSshKey k : authorizedKeys.getKeys(user.getAccountId())) { if (k.isValid()) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } return java.util.Collections.unmodifiableList(kl); }
@org.junit.Test public void getExternalIDs() throws java.lang.Exception { java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountExternalId id : expectedIds) { id.setCanDelete((!(id.getExternalId().equals(("username:" + (user.username)))))); id.setTrusted(true); expectedIdInfos.add(com.google.gerrit.acceptance.rest.account.ExternalIdIT.toInfo(id); } com.google.gerrit.acceptance.RestResponse response = userRestSession.get("/accounts/self/external.ids"); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
@org.junit.Test public void getExternalIDs() throws java.lang.Exception { java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountExternalId id : expectedIds) { id.setCanDelete((!(id.getExternalId().equals(("username:" + (user.username)))))); id.setTrusted(true); expectedIdInfos.add(com.google.gerrit.acceptance.rest.account.ExternalIdIT.toInfo(id)); } com.google.gerrit.acceptance.RestResponse response = userRestSession.get("/accounts/self/external.ids"); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
@org.junit.Test public void getExternalIDs() throws java.lang.Exception { java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountExternalId id : expectedIds) { id.setCanDelete((!(id.getExternalId().equals(("username:" + (user.username)))))); id.setTrusted(true); expectedIdInfos.add(com.google.gerrit.acceptance.rest.account.ExternalIdIT.toInfo(id); } com.google.gerrit.acceptance.RestResponse response = userRestSession.get("/accounts/self/external.ids"); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); java.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
@org.junit.Test public void getExternalIDs() throws java.lang.Exception { java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountExternalId id : expectedIds) { id.setCanDelete((!(id.getExternalId().equals(("username:" + (user.username)))))); id.setTrusted(true); expectedIdInfos.add(com.google.gerrit.acceptance.rest.account.ExternalIdIT.toInfo(id)); } com.google.gerrit.acceptance.RestResponse response = userRestSession.get("/accounts/self/external.ids"); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); java.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
@org.junit.Test public void getExternalIDs() throws java.lang.Exception { java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountExternalId id : expectedIds) { id.setCanDelete((!(id.getExternalId().equals(("username:" + (user.username)))))); id.setTrusted(true); expectedIdInfos.add(com.google.gerrit.acceptance.rest.account.ExternalIdIT.toInfo(id); } com.google.gerrit.acceptance.RestResponse response = userRestSession.get("/accounts/self/external.ids"); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); java.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIds); }
@java.lang.Override public void deleteExternalIds(java.util.List<java.lang.String> externalIds) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteExternalIds.apply(account, externalIds); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete external IDs", e); } }
@java.lang.Override public void deleteExternalIds(java.util.Set<java.lang.String> externalIds) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteExternalIds.apply(account, externalIds); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete external IDs", e); } }
@java.lang.Override public void deleteExternalIds(java.util.List<java.lang.String> externalIds) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteExternalIds.apply(account, externalIds); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete external IDs", e); } }
@java.lang.Override public void deleteExternalIds(java.util.Set<java.lang.String> externalIds) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteExternalIds.apply(account, externalIds); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete external IDs", e); } }
@java.lang.Override public void deleteExternalIds(java.util.List<java.lang.String> externalIds) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteExternalIds.apply(account, externalIds); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete external external IDs", e); } }
@java.lang.Override public void login(final com.google.gerrit.server.account.AuthResult res, final com.google.gerrit.reviewdb.client.Account.Id id) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Account.Id id = res.getAccountId(); if ((val)!= null) { manager.destroy(key); } key = manager.createKey(id); val = manager.createVal(key, id, rememberMe, identity, null, null); saveCookie(); user = identified.create(val.getAccountId()); }
@java.lang.Override public void login(final com.google.gerrit.server.account.AuthResult res, final com.google.gerrit.reviewdb.client.Account.Id id) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Account.Id id = res.getAccountId(); if ((val)!= null) { manager.destroy(key); } key = manager.createKey(id); val = manager.createVal(key, id, rememberMe, identity, null, null, null); saveCookie(); user = identified.create(val.getAccountId()); }
@java.lang.Override public void login(final com.google.gerrit.server.account.AuthResult res, final com.google.gerrit.reviewdb.client.Account.Id id) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Account.Id id = res.getAccountId(); if ((val)!= null) { manager.destroy(id); } key = manager.createKey(id); val = manager.createVal(key, id, rememberMe, identity, null, null); saveCookie(); user = identified.create(val.getAccountId()); }
@java.lang.Override public void login(final com.google.gerrit.server.account.AuthResult res, final com.google.gerrit.reviewdb.client.Account.Id id) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Account.Id id = res.getAccountId(); if ((val)!= null) { manager.destroy(key); } key = manager.createVal(id); val = manager.createVal(key, id, rememberMe, identity, null, null); saveCookie(); user = identified.create(val.getAccountId()); }
@java.lang.Override public void login(final com.google.gerrit.server.account.AuthResult res, final com.google.gerrit.reviewdb.client.Account.Id id) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Account.Id id = res.getAccountId(); if ((val)!= null) { manager.destroy(key); } key = manager.createKey(id); val = manager.createVal(key, id, rememberMe, identity, null, null); saveCookie(); user = identified.create(val, id, identity, null, null); }
private java.lang.String readResponse(java.io.InputStream responseStream) { try (java.util.concurrent.Iterable<java.lang.String> scanner = new java.util.Iterator<>(responseStream, "UTF-8") java.lang.String n = scanner.next(); return scanner.next(); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException((("Error reading response: " + (e.getMessage())) + "]"), e); } }
private java.lang.String readResponse(java.io.InputStream responseStream) { try (java.util.Iterator<java.lang.String> scanner = new java.util.Iterator<java.lang.String>(responseStream, "UTF-8") java.lang.String[] scanner = scanner.next(); return scanner.next(); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException((("Error reading response: " + (e.getMessage())) + "]"), e); } }
private java.lang.String readResponse(java.io.InputStream responseStream) { try (java.util.Iterator<java.lang.String> scanner = new java.util.Iterator<java.lang.String>(responseStream, "UTF-8") java.lang.String[] scanner = scanner.next(); return scanner.next(); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException((("Error reading response: " + (e.getMessage())) + "]: "]"), e); } }
private java.lang.String readResponse(java.io.InputStream responseStream) { try (java.util.Iterator<java.lang.String> scanner = new java.util.Iterator<java.lang.String>(responseStream, "UTF-8") java.lang.String[] scanner = scanner.next(); return scanner.next(); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException((("Error reading response: " + (e.getMessage())) + "]: "]: "]"), e); } }
private java.lang.String readResponse(java.io.InputStream responseStream) { try (java.util.Iterator<java.lang.String> scanner = new java.util.Iterator<java.lang.String>(responseStream, "UTF-8") java.lang.String[] scanner = scanner.next(); return scanner.next(); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException((("Error reading response: " + (e.getMessage())) + "]: "]: "]: "], e); } }
private void addSubmitRecordRecords(SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord.RequireChange)!= null) && (!(submitRecord.isEmpty()))) { throw new java.util.Collections.emptyList(); } }
private void addSubmitRecordRecords(SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord.RequireChange)!= null) && (!(submitRecord.isEmpty()))) { throw new java.lang.IllegalArgumentException(); } }
private void addSubmitRecordRecords(SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord)!= null) && (!(submitRecord.isEmpty()))) { throw new java.util.ArrayList(); } java.util.List<com.google.gerrit.common.data.SubmitRecordAttribute> for (com.google.gerrit.common.data.SubmitRecordAttribute req : submitRecords) { com.google.gerrit.server.data.SubmitRequireSubmitAttribute rec = new com.google.gerrit.server.data.SubmitRequireSubmitRequireSubmitRecords(); try { com.google.gerrit.server.data.SubmitRequireSubmitAttribute rec = new com.google.gerrit.server.data.SubmitType(); rec.submitRecords.add(submitRecords); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw e; } } }
private void addSubmitRecordRecords(SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord)!= null) && (!(submitRecord.isEmpty()))) { throw new java.util.ArrayList(); } java.util.List<com.google.gerrit.common.data.SubmitRecordAttribute> for (com.google.gerrit.common.data.SubmitRecordAttribute req : submitRecords) { com.google.gerrit.server.data.SubmitRequireSubmitAttribute rec = new com.google.gerrit.server.data.SubmitRequireSubmitRequireSubmitRecords(); try { com.google.gerrit.server.data.SubmitRequireSubmitAttribute rec = new com.google.gerrit.server.data.SubmitType(); rec.submitRecords.add(submitRecords); } catch (com.google.gerrit.server.project.SubmitRuleEvalException e) { throw e; } } }
private void addSubmitRecordRecords(SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord)!= null) && (!(submitRecord.isEmpty()))) { throw new java.util.ArrayList(); } java.util.List<com.google.gerrit.common.data.SubmitRecordAttribute> for (com.google.gerrit.common.data.SubmitRecordAttribute req : submitRecords) { com.google.gerrit.server.data.SubmitRequireSubmitAttribute rec = new com.google.gerrit.server.data.SubmitRequireSubmitRequireSubmitRecords(); try { com.google.gerrit.server.data.SubmitRequireSubmitAttribute rec = new com.google.gerrit.server.data.SubmitType(); rec.submitRecords.add(submitRecords); } catch (com.google.gerrit.server.project.SubmitRuleEvalException e) { rec.missing(e); } } }
public com.google.gerrit.common.data.SubmitTypeRecord submitTypeRecord() { if ((submitType) == null) { submitTypeRecord = submitRuleEvaluatorFactory.create(com.google.gerrit.server.query.change.DEFAULT_OPTIONS).getSubmitType(this); } return submitType; }
public com.google.gerrit.common.data.SubmitTypeRecord submitTypeRecord() { if ((submitType) == null) { submitTypeRecord = submitTypeRecord; } return submitTypeRecord; }
public com.google.gerrit.common.data.SubmitTypeRecord submitTypeRecord() { if ((submitType) == null) { submitTypeRecord = submitTypeRecordFactory.create(com.google.gerrit.server.query.change.DEFAULT_OPTIONS).getSubmitType(this); } return submitType; }
public com.google.gerrit.common.data.SubmitTypeRecord submitTypeRecord() { if ((submitType) == null) { submitTypeRecord = submitRuleEvaluatorFactory.create(com.google.gerrit.server.query.change.DEFAULT_OPTIONS).getSubmitType(); } return submitType; }
public com.google.gerrit.common.data.SubmitTypeRecord submitTypeRecord() { return submitTypeRecord; }
private com.google.gerrit.server.project.SubmitRuleEvaluator createEvaluator() { com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey("project"); com.google.gerrit.server.query.change.ChangeData cd = com.google.gerrit.server.query.change.ChangeData.createForTest(project, 1), 1); cd.setChange(com.google.gerrit.server.project.SubmitRulesTest.newChange(project, com.google.gerrit.reviewdb.client.Change.Id(project, com.google.gerrit.server.project.SubmitRulesTest.ADMIN_USER))); return evaluatorFactory.create(cd); }
private com.google.gerrit.server.project.SubmitRuleEvaluator createEvaluator() { com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey("project"); com.google.gerrit.server.query.change.ChangeData cd = com.google.gerrit.server.query.change.ChangeData(project, new com.google.gerrit.reviewdb.client.Change.Id(1), 1); cd.setChange(com.google.gerrit.server.project.SubmitRulesTest.newChange(project, com.google.gerrit.reviewdb.client.Change.Id(project, com.google.gerrit.server.project.SubmitRulesTest.ADMIN_USERNAME)); return evaluatorFactory.create(cd); }
private com.google.gerrit.server.project.SubmitRuleEvaluator createEvaluator() { com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey("project"); com.google.gerrit.server.query.change.ChangeData cd = com.google.gerrit.server.query.change.ChangeData(project, new com.google.gerrit.reviewdb.client.Change.Id(1), 1); cd.setChange(com.google.gerrit.server.project.SubmitRulesTest.newChange(project, com.google.gerrit.reviewdb.client.Change.Id(project, com.google.gerrit.server.project.SubmitRulesTest.ADMIN_USER_USERNAME)); return evaluatorFactory.create(cd); }
private com.google.gerrit.server.project.SubmitRuleEvaluator createEvaluator() { com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey("project"); com.google.gerrit.server.query.change.ChangeData cd = com.google.gerrit.server.query.change.ChangeData(project, new com.google.gerrit.reviewdb.client.Change.Id(1), 1); cd.setChange(com.google.gerrit.server.project.SubmitRulesTest.newChange(project, com.google.gerrit.reviewdb.client.Change.Id(project, com.google.gerrit.server.project.SubmitRulesTest.ADMIN_USER_USER))); return evaluatorFactory.create(cd); }
private com.google.gerrit.server.project.SubmitRuleEvaluator createEvaluator() { com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey("project"); com.google.gerrit.server.query.change.ChangeData cd = com.google.gerrit.server.query.change.ChangeDataFactory.createForTest(project, new com.google.gerrit.reviewdb.client.Change.Id(1), 1); cd.setChange(com.google.gerrit.server.project.SubmitRulesTest.newChange(project, com.google.gerrit.reviewdb.client.Change.Id(project, com.google.gerrit.server.project.SubmitRulesTest.ADMIN_USER))); return evaluatorFactory.create(cd); }
@org.junit.Test public void convertPrologToSubmitRecord() { com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = new com.googlecode.prolog_cafe.lang.Term(); com.googlecode.prolog_cafe.util.List<com.googlecode.prolog_cafe.lang.Term> terms = new java.util.ArrayList<>(); com.googlecode.prolog_cafe.lang.StructureTerm verifiedLabel = makeLabel("Verified", "may"); com.googlecode.prolog_cafe.lang.StructureTerm labels = new com.googlecode.prolog_cafe.lang.StructureTerm("label", verifiedLabel); terms.add(makeTerm(makeTerm)); }
@org.junit.Test public void convertPrologToSubmitRecord() { com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = new com.googlecode.prolog_cafe.lang.Term(); com.googlecode.prolog_cafe.util.List<com.googlecode.prolog_cafe.lang.Term> terms = new java.util.ArrayList<>(); com.googlecode.prolog_cafe.lang.StructureTerm verifiedLabel = makeLabel("Verified", "may"); com.googlecode.prolog_cafe.lang.StructureTerm labels = new com.googlecode.prolog_cafe.lang.StructureTerm("label", verifiedLabel); results.add(makeTerm("ok", "ok", labels)); }
@org.junit.Test public void convertPrologToSubmitRecord() { com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = new com.googlecode.prolog_cafe.lang.Term(); com.googlecode.prolog_cafe.util.List<com.googlecode.prolog_cafe.lang.Term> terms = new java.util.ArrayList<>(); com.googlecode.prolog_cafe.lang.StructureTerm verifiedLabel = makeLabel("Verified", "may"); com.googlecode.prolog_cafe.lang.StructureTerm labels = new com.googlecode.prolog_cafe.lang.StructureTerm("label", verifiedLabel); terms.add(makeTerm("ok", "ok", labels)); }
@org.junit.Test public void convertPrologToSubmitRecord() { com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = new com.googlecode.prolog_cafe.lang.Term(); com.googlecode.prolog_cafe.util.List<com.googlecode.prolog_cafe.lang.Term> terms = new java.util.ArrayList<>(); com.googlecode.prolog_cafe.lang.StructureTerm verifiedLabel = makeLabel("Verified", "may"); com.googlecode.prolog_cafe.lang.StructureTerm labels = new com.googlecode.prolog_cafe.lang.StructureTerm("label", verifiedLabel); results.add(makeTerm("ok", "ok", labels)); java.util.Collection<com.googlecode.prolog_cafe.lang.String> records = evaluator.resultsToSubmitRecord(null, results); assertThat(records).hasSize(1); }
@org.junit.Test public void convertPrologToSubmitRecord() { com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = new com.googlecode.prolog_cafe.lang.Term(); com.googlecode.prolog_cafe.util.List<com.googlecode.prolog_cafe.lang.Term> terms = new java.util.ArrayList<>(); com.googlecode.prolog_cafe.lang.StructureTerm verifiedLabel = makeLabel("Verified", "may"); com.googlecode.prolog_cafe.lang.StructureTerm labels = new com.googlecode.prolog_cafe.lang.StructureTerm("label", verifiedLabel);terms.add(makeTerm("ok", "ok", labels)); java.util.Collection<com.googlecode.prolog_cafe.lang.String> records = evaluator.resultsToSubmitRecord(null, results); assertThat(records).hasSize(1); }
private com.googlecode.prolog_cafe.lang.Term makeTerm(java.lang.String status, com.googlecode.prolog_cafe.lang.StructureTerm labels) { return new com.googlecode.prolog_cafe.lang.StructureTerm(status, labels); }
private com.googlecode.prolog_cafe.lang.Term createTerm(java.lang.String status, com.googlecode.prolog_cafe.lang.StructureTerm labels) { return new com.googlecode.prolog_cafe.lang.StructureTerm(status, labels); }
private static com.googlecode.prolog_cafe.lang.Term makeTerm(java.lang.String status, com.googlecode.prolog_cafe.lang.StructureTerm labels) { return new com.googlecode.prolog_cafe.lang.StructureTerm(status, labels); }
private com.googlecode.prolog_cafe.lang.Term makeTerm(java.lang.String status, com.googlecode.prolog_cafe.lang.StructureTerm labels) { return new com.googlecode.prolog_cafe.lang.StructureTerm(status, label); }
private com.googlecode.prolog_cafe.lang.Term makeTerm(java.lang.String status, com.googlecode.prolog_cafe.lang.StructureTerm labels) { return new com.googlecode.prolog_cafe.lang.StoredTerm(status, labels); }
public ReviewerInfo format(ReviewerInfo out, com.google.gerrit.server.permissions.PermissionBackend.ForChange perm, com.google.gerrit.server.query.change.ChangeData cd, java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.LabelTypes labelTypes = cd.getLabelTypes(); out.approvals = new java.util.TreeMap(labelTypes.nameComparator()); for (com.google.gerrit.reviewdb.client.PatchSetApproval ca : approvals) { com.google.gerrit.common.data.LabelType at = labelTypes.byLabel(ca.getLabelId()); if (at!= null) { out.approvals.put(at.getName(), formatValue(ca.getValue())); } } com.google.gerrit.reviewdb.client.PatchSet ps = cd.currentPatchSet(); if (ps!= null) { for (com.google.gerrit.common.data.SubmitRecord rec : submitRuleEvaluatorFactory.create(com.google.gerrit.server.change.DEFAULT_OPTIONS).evaluate(cd)) { if ((rec.labels) == null) { continue; } for (com.google.gerrit.common.data.SubmitRecord rec : rec.labels) { java.lang.String name = label.label; if (((!(out.approvals.containsKey(name))) && (perm.test(new com.google.gerrit.server.permissions.LabelPermission(type)))) { out.approvals.put(name, formatValue(((short) (0)))); } } } } if (out.approvals.isEmpty()) { out.approvals = null; } return out; }
public ReviewerInfo format(ReviewerInfo out, com.google.gerrit.server.permissions.PermissionBackend.ForChange perm, com.google.gerrit.server.query.change.ChangeData cd, java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.LabelTypes labelTypes = cd.getLabelTypes(); out.approvals = new java.util.TreeMap(labelTypes.nameComparator()); for (com.google.gerrit.reviewdb.client.PatchSetApproval ca : approvals) { com.google.gerrit.common.data.LabelType at = labelTypes.byLabel(ca.getLabelId()); if (at!= null) { out.approvals.put(at.getName(), formatValue(ca.getValue())); } } com.google.gerrit.reviewdb.client.PatchSet ps = cd.currentPatchSet(); if (ps!= null) { for (com.google.gerrit.common.data.SubmitRecord rec : submitRuleEvaluatorFactory.create(com.google.gerrit.server.change.DEFAULT_OPTIONS).evaluate(cd)) { if ((rec.labels) == null) { continue; } for (com.google.gerrit.common.data.SubmitRecord rec : rec.labels) { java.lang.String name = label.label; rec.labels = label.label; if (((!(out.approvals.containsKey(name))) && (type!= null)) && (perm.test(new com.google.gerrit.server.permissions.LabelPermission(type)))) { out.approvals.put(name, formatValue(((short) (0)))); } } } } if (out.approvals.isEmpty()) { out.approvals = null; } return out; }
public ReviewerInfo format(ReviewerInfo out, com.google.gerrit.server.permissions.PermissionBackend.ForChange perm, com.google.gerrit.server.query.change.ChangeData cd, java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.LabelTypes labelTypes = cd.getLabelTypes(); out.approvals = new java.util.TreeMap(labelTypes.nameComparator()); for (com.google.gerrit.reviewdb.client.PatchSetApproval ca : approvals) { com.google.gerrit.common.data.LabelType at = labelTypes.byLabel(ca.getLabelId()); if (at!= null) { out.approvals.put(at.getName(), formatValue(ca.getValue())); } } com.google.gerrit.reviewdb.client.PatchSet ps = cd.currentPatchSet(); if (ps!= null) { for (com.google.gerrit.common.data.SubmitRecord rec : submitRuleEvaluatorFactory.create(com.google.gerrit.server.change.DEFAULT_OPTIONS).evaluate(cd)) { if ((rec.labels) == null) { continue; } for (com.google.gerrit.common.data.SubmitRecord rec : rec.labels) { java.lang.String name = label.label; if (((!(out.approvals.containsKey(name))) && (perm.test(new com.google.gerrit.server.permissions.LabelPermission(type)))) { out.approvals.put(name, formatValue(((short) (0)))); } } } } if (out.approvals.isEmpty()) { out.approvals = null; } } return out; }
public ReviewerInfo format(ReviewerInfo out, com.google.gerrit.server.permissions.PermissionBackend.ForChange perm, com.google.gerrit.server.query.change.ChangeData cd, java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.LabelTypes labelTypes = cd.getLabelTypes(); out.approvals = new java.util.TreeMap(labelTypes.nameComparator()); for (com.google.gerrit.reviewdb.client.PatchSetApproval ca : approvals) { com.google.gerrit.common.data.LabelType at = labelTypes.byLabel(ca.getLabelId()); if (at!= null) { out.approvals.put(at.getName(), formatValue(ca.getValue())); } } com.google.gerrit.reviewdb.client.PatchSet ps = cd.currentPatchSet(); if (ps!= null) { for (com.google.gerrit.common.data.SubmitRecord rec : submitRuleEvaluatorFactory.create(com.google.gerrit.server.change.DEFAULT_OPTIONS).evaluate(cd)) { if ((rec.labels) == null) { continue; } for (com.google.gerrit.common.data.SubmitRecord rec : rec.labels) { java.lang.String name = label.label; rec.labels = label.getLabel(); if (((!(out.approvals.containsKey(name))) && (perm.test(new com.google.gerrit.server.permissions.LabelPermission(type)))) { out.approvals.put(name, formatValue(((short) (0)))); } } } } if (out.approvals.isEmpty()) { out.approvals = null; } return out; }
public ReviewerInfo format(ReviewerInfo out, com.google.gerrit.server.permissions.PermissionBackend.ForChange perm, com.google.gerrit.server.query.change.ChangeData cd, java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.LabelTypes labelTypes = cd.getLabelTypes(); out.approvals = new java.util.TreeMap(labelTypes.nameComparator()); for (com.google.gerrit.reviewdb.client.PatchSetApproval ca : approvals) { com.google.gerrit.common.data.LabelType at = labelTypes.byLabel(ca.getLabelId()); if (at!= null) { out.approvals.put(at.getName(), formatValue(ca.getValue())); } } com.google.gerrit.reviewdb.client.PatchSet ps = cd.currentPatchSet(); if (ps!= null) { for (com.google.gerrit.common.data.SubmitRecord rec : submitRuleEvaluatorFactory.create(com.google.gerrit.server.change.DEFAULT_OPTIONS).evaluate(cd)) { if ((rec.labels) == null) { continue; } for (com.google.gerrit.common.data.SubmitRecord rec : rec.labels) { java.lang.String name = label.label; rec.labels = label.getLabel(); if (((!(out.approvals.containsKey(name))) && (perm.test(new com.google.gerrit.server.permissions.LabelPermission(type)))) { out.approvals.put(name, formatValue(((short) (0)))); } } } } if (out.approvals.isEmpty()) { out.approvals = null; } } return out; }
public java.util.List<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.reviewdb.client.Change change; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException(("Change " + (cd.project()), e); } projectState = projectCache.get(cd.project()); if (projectState == null) { throw new com.google.gwtorm.server.OrmException(("Cannot lookup change " + (cd.getId())), e); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.server.project.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); } java.util.List<com.googlecode.prolog_cafe.lang.Term> results; try { results = evaluateImpl("locate_submit_rule", "can_submit", "locate_submit_results", "filter_results", cd, projectState); } catch (com.google.gerrit.server.project.RuleEvalException e) { return ruleError(e.getMessage(), e); } if (results.isEmpty()) { return ruleError(java.lang.String.format(("Submit rule '%s' for change %s has no solution", cd.getId(), cd.getId(), cd.getName())); } return resultsToSubmitRecord(getSubmitRule(), results); }
public java.util.List<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.reviewdb.client.Change change; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException(("Change " + (cd.project()), e); } projectState = projectCache.get(cd.project()); if (projectState == null) { throw new com.google.gwtorm.server.OrmException(("Cannot lookup change " + (cd.getId())), e); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.server.project.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); } java.util.List<com.googlecode.prolog_cafe.lang.Term> results; try { results = evaluateImpl("locate_submit_rule", "can_submit", "locate_submit_results", "filter_results", cd, projectState); } catch (com.google.gerrit.server.project.RuleEvalException e) { return ruleError(e.getMessage(), e); } if (results.isEmpty()) { return ruleError(java.lang.String.format(("Submit rule '%s' for change %s' for change %s has no solution", cd.getId(), cd.getId(), cd.getName())); } return resultsToSubmitRecord(getSubmitRule(), results); }
public java.util.List<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.reviewdb.client.Change change; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException(("Change " + (cd.project()), e); } projectState = projectCache.get(cd.project()); if (projectState == null) { throw new com.google.gwtorm.server.OrmException(("Cannot lookup change " + (cd.getId())), e); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.server.project.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); } java.util.List<com.googlecode.prolog_cafe.lang.Term> results; try { results = evaluateImpl("locate_submit_rule", "can_submit", "locate_submit_results", "filter_results", cd, projectState); } catch (com.google.gerrit.server.project.RuleEvalException e) { return ruleError(e.getMessage(), e); } if (results.isEmpty()) { return ruleError(java.lang.String.format(("Submit rule '%s' for change %s has no solution", cd.getId(), cd.getId(), cd.getId(), cd.getName())); } return resultsToSubmitRecord(getSubmitRule(), results); }
public java.util.List<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.reviewdb.client.Change change; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException(("Change " + (cd.project()), e); } projectState = projectCache.get(cd.project()); if (projectState == null) { throw new com.google.gwtorm.server.OrmException(("Cannot lookup change " + (cd.getId())), e); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.server.project.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); } java.util.List<com.googlecode.prolog_cafe.lang.Term> results; try { results = evaluateImpl("locate_submit_rule", "can_submit", "locate_submit_results", "filter_results", cd, projectState); } catch (com.google.gerrit.server.project.RuleEvalException e) { return ruleError(e.getMessage(), e); } if (results.isEmpty()) { return ruleError(java.lang.String.format(("Submit rule '%s' for change %s of %s has no solution", cd.getId(), cd.getId(), cd.getId(), cd.getName())); } return resultsToSubmitRecord(getSubmitRule(), results); }
public java.util.List<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.reviewdb.client.Change change; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException(("Change " + (cd.project()), e); } projectState = projectCache.get(cd.project()); if (projectState == null) { throw new com.google.gwtorm.server.OrmException(("Cannot lookup change " + (cd.getId())), e); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.server.project.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); } java.util.List<com.googlecode.prolog_cafe.lang.Term> results; try { results = evaluateImpl("locate_submit_rule", "can_submit", "locate_submit_results", "filter_results", cd, projectState); } catch (com.google.gerrit.server.project.RuleEvalException e) { return ruleError(e.getMessage(), e); } if (results.isEmpty()) { return ruleError(java.lang.String.format(("Submit rule '%s' for change %s' for change %s has no solution", cd.getId(), cd.getId(), cd.getName())); } return resultsToSubmitRecord(getSubmitRule(), results, cd); }
public abstract java.lang.String fullReason();
 abstract java.lang.String fullReason();
public abstract java.lang.String fullMessage();
stract abstract java.lang.String fullReason();
public abstract void abstractReason();
private com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(java.lang.String name, java.lang.String status) { return new com.googlecode.prolog_cafe.lang.StructureTerm("label", new com.googlecode.prolog_cafe.lang.StructureTerm(name), new com.googlecode.prolog_cafe.lang.StructureTerm(status)); }
private com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(java.lang.String name, java.lang.String status) { return new com.googlecode.prolog_cafe.lang.StructureTerm(new com.googlecode.prolog_cafe.lang.StructureTerm(name), new com.googlecode.prolog_cafe.lang.StructureTerm(status)); }
private com.googlecode.prolog_cafe.lang.StructureTerm createLabel(java.lang.String name, java.lang.String status) { return new com.googlecode.prolog_cafe.lang.StructureTerm("label", new com.googlecode.prolog_cafe.lang.StructureTerm(name), new com.googlecode.prolog_cafe.lang.StructureTerm(status)); }
private com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(java.lang.String name, java.lang.String status) { return new com.googlecode.prolog_cafe.lang.StructureTerm("label", new com.googlecode.prolog_cafe.lang.StructureTerm(name), new com.googlecode.prolog_cafe.lang.StructureTerm(status), new com.googlecode.prolog_cafe.lang.StructureTerm(status)); }
private com.googlecode.prolog_cafe.lang.StructureTerm createLabel(java.lang.String name, java.lang.String status) { return new com.googlecode.prolog_cafe.lang.StructureTerm(new com.googlecode.prolog_cafe.lang.StructureTerm(name), new com.googlecode.prolog_cafe.lang.StructureTerm(status)); }
public abstract java.lang.String short reason();
public abstract java.lang.String short reasonReason();
public abstract java.lang.String shortReason();
public abstract java.lang.String short short reason();
public abstract java.lang.String short shortReason();
public static com.google.gerrit.server.project.SubmitRuleOptions builder() { return com.google.gerrit.server.project.SubmitRuleOptions.DEFAULT_OPTIONS.toBuilder(); }
public static com.google.gerrit.server.project.SubmitRuleOptionsBuilder builder() { return com.google.gerrit.server.project.SubmitRuleOptions.DEFAULT_OPTIONS.toBuilder(); }
public static com.google.gerrit.server.project.SubmitRuleBuilder builder() { return com.google.gerrit.server.project.SubmitRuleOptions.DEFAULT_OPTIONS.toBuilder(); }
public static com.google.gerrit.server.project.SubmitRuleOptionsBuilder builder() { return com.google.gerrit.server.project.SubmitRuleOptions.toDefault(); }
public static com.google.gerrit.server.project.SubmitRuleOptions builder() { return com.google.gerrit.server.project.SubmitRuleOptions.DEFAULT_OPTIONS.toString(); }
public abstract com.google.gerrit.common.data.SubmitRequireBuilder build();
public abstract com.google.gerrit.common.data.SubmitRequireFlag build();
public abstract com.google.gerrit.common.data.SubmitRequests build();
public abstract java.lang.String build();
public abstract com.google.gerrit.common.data.SubmitRequireProject build();
@com.google.gerrit.common.Nullable public abstract java.lang.String label();
public abstract java.lang.String label();
public abstract com.google.gerrit.common.data.Label label();
@com.google.gerrit.common.Nullable public abstract java.lang.String label;
@com.google.common.annotations.VisibleForTesting public abstract java.lang.String label();
public abstract com.google.gerrit.common.data.SubmitType setLabel(@com.google.gerrit.common.Nullable java.lang.String label);
public abstract com.google.gerrit.common.data.SubmitRequireFlag setLabel(@com.google.gerrit.common.Nullable java.lang.String label);
public abstract com.google.gerrit.common.data.SubmitRequireCapability.Builder setLabel(@com.google.gerrit.common.Nullable java.lang.String label);
public abstract com.google.gerrit.common.data.SubmitRequireChange setLabel(@com.google.gerrit.common.Nullable java.lang.String label);
public abstract com.google.gerrit.common.data.SubmitRequireCapability.Builder setLabel(@com.google.gerrit.common.Nullable java.lang.String label) { java.util.Set<com.google.gerrit.common.data.SubmitType> setLabel(label); }
public abstract java.lang.String setFullReason(java.lang.String fullReason);
public abstract com.google.gerrit.common.data.SubmitType setFullReason(java.lang.String fullReason);
public abstract com.google.gerrit.common.data.SubmitType.Builder setFullReason(java.lang.String fullReason);
public abstract com.google.gerrit.common.data.SubmitRequireFlag setFullReason(java.lang.String fullReason);
public abstract com.google.gerrit.common.data.SubmitType.Builder setFullMessage(java.lang.String fullReason);
private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory.create(com.google.gerrit.server.change.DEFAULT_OPTIONS).getSubmitType(cd); if ((rec.status)!= (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException(("Error rule failed: " + rec)); } return rec.type; }
private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory.create(com.google.gerrit.server.change.DEFAULT_OPTIONS).getSubmitType(); if ((rec.status)!= (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException(("Error rule failed: " + rec)); } return rec.type; }
private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory.create(com.google.gerrit.server.change.DEFAULT_OPTIONS).getSubmitType(cd); if ((rec.status)!= (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException(("Submit type rule failed: " + rec)); } return rec.type; }
private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory.create(com.google.gerrit.server.change.DEFAULT_OPTIONS).getSubmitTypeRecord(cd); if ((rec.status)!= (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException(("Error rule failed: " + rec)); } return rec.type; }
private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory.create(com.google.gerrit.server.change.DEFAULT_OPTIONS).getSubmitType(cd).getSubmitType(); if ((rec.status)!= (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException(("Error rule failed: " + rec)); } return rec; }
private com.googlecode.prolog_cafe.lang.StructureTerm makeLabels(com.googlecode.prolog_cafe.lang.StructureTerm... labels) { return new com.googlecode.prolog_cafe.lang.StructureTerm("label", labels); }
private com.googlecode.prolog_cafe.lang.StructureTerm createLabels(com.googlecode.prolog_cafe.lang.StructureTerm... labels) { return new com.googlecode.prolog_cafe.lang.StructureTerm("label", labels); }
private com.googlecode.prolog_cafe.lang.StructureTerm makeLabels(com.googlecode.prolog_cafe.lang.StructureTerm... labels) { return new com.googlecode.prolog_cafe.lang.StructureTerm("label", num); }
private com.googlecode.prolog_cafe.lang.StructureTerm makeLabels(com.googlecode.prolog_cafe.lang.StructureTerm... labels) { return new com.googlecode.prolog_cafe.lang.StructureTerm("label",labels); }
private com.googlecode.prolog_cafe.lang.StructureTerm makeLabels(com.googlecode.prolog_cafe.lang.StructureTerm... labels) { return new com.googlecode.prolog_cafe.lang.StructureTerm("label", com.googlecode.prolog_cafe.lang.StructureTerm... labels); }
public java.util.Collection<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change; com.google.gerrit.server.project.ProjectState projectState; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException(("Cannot find change found " + (cd.getId())), e); } } projectState = projectCache.get(cd.project()); if (projectState == null) { return java.util.Collections.emptyList(); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.emptyList(); } }
public java.util.Collection<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change; com.google.gerrit.server.project.ProjectState projectState; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException(("Cannot find change found " + (cd.getId())), e); } } projectState = projectCache.get(cd.project()); if (projectState == null) { return java.util.Collections.emptyList(); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); } }
public java.util.Collection<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change; com.google.gerrit.server.project.ProjectState projectState; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException(("Cannot find change found " + (cd.getId())), e); } projectState = projectCache.get(cd.getId()); if (change!= null) { com.google.gerrit.server.project.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.emptyList(); } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); }
public java.util.Collection<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change; com.google.gerrit.server.project.ProjectState projectState; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException(("Cannot find change found " + (cd.getId())), e); } projectState = projectCache.get(cd.getId()); if (change!= null) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.server.project.NoSuchProjectException(cd.project()); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.emptyList(); } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); }
public java.util.Collection<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change; com.google.gerrit.server.project.ProjectState projectState; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException(("Cannot find change found " + (cd.getId())), e); } } projectState = projectCache.get(cd.project()); if (projectState == null) { return java.util.Collections.emptyList(); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.emptyList(); } else if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); } }
@java.lang.Override public java.util.Collection<com.google.gerrit.server.query.change.ChangeData> evaluate(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.server.project.SubmitRuleOptions opts) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.project.ProjectControl c = control(cd, opts).evaluate(); if (c == null) { return com.google.gerrit.server.project.SubmitRuleOptions.compile(c, opts).evaluate(); } else { return com.google.common.base.Function<com.google.gerrit.server.project.SubmitRuleOptions, com.google.gerrit.server.project.SubmitRuleOptions>> results; } }
@java.lang.Override public java.util.Collection<com.google.gerrit.server.query.change.ChangeData> evaluate(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.server.project.SubmitRuleOptions opts) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.project.ProjectControl c = control(cd, opts).evaluate(); if (c == null) { return com.google.gerrit.server.project.SubmitRuleOptions.compile(c, opts).evaluate(); } else { return com.google.common.base.Function<com.google.gerrit.server.project.SubmitRuleOptions, com.google.gerrit.server.project.SubmitRuleOptions> evaluator(c.getSubmitRule(), opts).evaluate(); } }
@java.lang.Override public java.util.Collection<com.google.gerrit.server.query.change.ChangeData> evaluate(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.server.project.SubmitRuleOptions opts) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.project.ProjectControl c = control(cd, opts).evaluate(); if (c == null) { return com.google.gerrit.server.project.SubmitRuleOptions.compile(c, opts).evaluate(); } else { return com.google.common.base.Function<com.google.gerrit.server.project.SubmitRuleOptions, com.google.gerrit.server.project.SubmitRuleOptions> evaluator = evaluator.values(); } }
@java.lang.Override public java.util.Collection<com.google.gerrit.server.query.change.ChangeData> evaluate(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.server.project.SubmitRuleOptions opts) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.project.ProjectControl c = control(cd, opts).evaluate(); if (c == null) { return com.google.gerrit.server.project.SubmitRuleOptions.compile(c, opts).evaluate(); } else { return com.google.common.base.Function<com.google.gerrit.server.project.SubmitRuleOptions, com.google.gerrit.server.project.SubmitRuleOptions> evaluator = evaluator.create(cd, opts).evaluate(); } }
@java.lang.Override public java.util.Collection<com.google.gerrit.server.query.change.ChangeData> evaluate(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.server.project.SubmitRuleOptions opts) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.project.ProjectControl c = control(cd, opts).evaluate(); if (c == null) { return com.google.gerrit.server.project.SubmitRuleOptions.compile(c, opts).evaluate(); } else { return com.google.common.base.Function<com.google.gerrit.server.project.SubmitRuleOptions, com.google.gerrit.server.project.SubmitRuleOptions> evaluator(c.getSubmitRule(), opts).evaluate(); } }); }
public static void checkSubmitRule(com.google.gerrit.server.query.change.ChangeData cd, boolean allowClosed) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet patchSet = cd.currentPatchSet(); if (patchSet == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("missing current patch set for change " + (cd.getId()))); } java.util.List<com.google.gerrit.common.data.SubmitRecord> results = com.google.gerrit.server.git.MergeOp.getSubmitRecords(cd, allowClosed); if (com.google.gerrit.common.data.SubmitRecord.canBemitted(results)) { return; } else if (results.isEmpty()) { return; } else if (results.isEmpty()) { throw new java.lang.IllegalStateException(java.lang.String.format("Submit rule %s for change %s in %s in %s", cd.getId(), patchSet.getId(), cd.change().getProject().get())); } for (com.google.gerrit.common.data.SubmitRecord record : results) { switch (record.status) { case RULE_ERROR : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("Error rule error: " + (record.errorMessage))); case RULE_ERROR : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(com.google.gerrit.server.git.MergeOp.describeLabels(cd, record.labels)); case NOT_READY : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(com.google.gerrit.server.git.MergeOp.describeLabels(cd, record.labels)); case FORCED : default : throw new java.lang.IllegalStateException(java.lang.String.format("Unexpected SubmitRecord status %s for %s in %s", record.getId(), cd.change().getProject().getProject().
public static void checkSubmitRule(com.google.gerrit.server.query.change.ChangeData cd, boolean allowClosed) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet patchSet = cd.currentPatchSet(); if (patchSet == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("missing current patch set for change " + (cd.getId()))); } java.util.List<com.google.gerrit.common.data.SubmitRecord> results = com.google.gerrit.server.git.MergeOp.getSubmitRecords(cd, allowClosed); if (com.google.gerrit.common.data.SubmitRecord.canBemitted(results)) { return; } else if (results.isEmpty()) { return; } else if (results.isEmpty()) { throw new java.lang.IllegalStateException(java.lang.String.format("Submit rule %s for change %s in %s in %s", cd.getId(), patchSet.getId(), cd.change().getProject().get())); } for (com.google.gerrit.common.data.SubmitRecord record : results) { switch (record.status) { case RULE_ERROR : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("Error rule error: " + (record.errorMessage))); case RULE_ERROR : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(com.google.gerrit.server.git.MergeOp.describeLabels(cd, record.labels)); case NOT_READY : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(com.google.gerrit.server.git.MergeOp.describeLabels(cd, record.labels)); case FORCED : default : throw new java.lang.IllegalStateException(java.lang.String.format("Unexpected SubmitRecord status %s for %s in %s in %s", record.getId(), cd.change().getProject().
public static void checkSubmitRule(com.google.gerrit.server.query.change.ChangeData cd, boolean allowClosed) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet patchSet = cd.currentPatchSet(); if (patchSet == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("missing current patch set for change " + (cd.getId()))); } java.util.List<com.google.gerrit.common.data.SubmitRecord> results = com.google.gerrit.server.git.MergeOp.getSubmitRecords(cd, allowClosed); if (com.google.gerrit.common.data.SubmitRecord.canBemitted(results)) { return; } else if (results.isEmpty()) { return; } else if (results.isEmpty()) { throw new java.lang.IllegalStateException(java.lang.String.format("Submit rule %s for change %s in %s in %s", cd.getId(), patchSet.getId(), cd.change().getProject().get())); } for (com.google.gerrit.common.data.SubmitRecord record : results) { switch (record.status) { case RULE_ERROR : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("Error rule error: " + (record.errorMessage))); case RULE_ERROR : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(com.google.gerrit.server.git.MergeOp.describeLabels(cd, record.labels)); case NOT_READY : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(com.google.gerrit.server.git.MergeOp.describeLabels(cd, record.labels)); case FORCED : default : throw new java.lang.IllegalStateException(java.lang.String.format("SubmitRecord status %s for %s in %s", record.getId(), cd.change().getProject().get())); } }
public static void checkSubmitRule(com.google.gerrit.server.query.change.ChangeData cd, boolean allowClosed) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet patchSet = cd.currentPatchSet(); if (patchSet == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("missing current patch set for change " + (cd.getId()))); } java.util.List<com.google.gerrit.common.data.SubmitRecord> results = com.google.gerrit.server.git.MergeOp.getSubmitRecords(cd, allowClosed); if (com.google.gerrit.common.data.SubmitRecord.canBemitted(results)) { return; } else if (results.isEmpty()) { return; } else if (results.isEmpty()) { throw new java.lang.IllegalStateException(java.lang.String.format("Submit rule %s for change %s in %s in %s", cd.getId(), patchSet.getId(), cd.change().getProject().get())); } for (com.google.gerrit.common.data.SubmitRecord record : results) { switch (record.status) { case RULE_ERROR : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("Error rule error: " + (record.errorMessage))); case RULE_ERROR : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(com.google.gerrit.server.git.MergeOp.describeLabels(cd, record.labels)); case NOT_READY : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(com.google.gerrit.server.git.MergeOp.describeLabels(cd, record.labels)); case FORCED : default : throw new java.lang.IllegalStateException(java.lang.String.format("Unexpected SubmitRecord status %s for %s in %s", record.getProject().getName(), cd.change().getProject().
public static void checkSubmitRule(com.google.gerrit.server.query.change.ChangeData cd, boolean allowClosed) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet patchSet = cd.currentPatchSet(); if (patchSet == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("missing current patch set for change " + (cd.getId()))); } java.util.List<com.google.gerrit.common.data.SubmitRecord> results = com.google.gerrit.server.git.MergeOp.getSubmitRecords(cd, allowClosed); if (com.google.gerrit.common.data.SubmitRecord.canBemitted(results)) { return; } else if (results.isEmpty()) { return; } else if (results.isEmpty()) { throw new java.lang.IllegalStateException(java.lang.String.format("Submit rule %s for change %s in %s in %s", cd.getId(), patchSet.getId(), cd.change().getProject().get())); } for (com.google.gerrit.common.data.SubmitRecord record : results) { switch (record.status) { case RULE_ERROR : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("Error rule error: " + (record.errorMessage))); case RULE_ERROR : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(com.google.gerrit.server.git.MergeOp.describeLabels(cd, record.labels)); case NOT_READY : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(com.google.gerrit.server.git.MergeOp.describeLabels(cd, record.labels)); case FORCED : default : throw new java.lang.IllegalStateException(java.lang.String.format("Unexpected SubmitRecord status %s for %s in %s", record.getId(), cd.change().getProject().getProject().getName
private boolean submittable(com.google.gerrit.server.query.change.ChangeData cd) { return com.google.gerrit.common.data.SubmitRecord.canSubmitRecords(cd.submitRecords(com.google.gerrit.server.change.ChangeJson.SUBMIT_RULE_OPTIONS_STRICT)); }
private boolean submittable(com.google.gerrit.server.query.change.ChangeData cd) { return com.google.gerrit.common.data.SubmitRecord.canSubmitRecord(cd.submitRecords(com.google.gerrit.server.change.ChangeJson.SUBMIT_RULE_OPTIONS_STRICT)); }
private boolean submittable(com.google.gerrit.server.query.change.ChangeData cd) { return com.google.gerrit.common.data.SubmitRecord.canSubmitRecord(cd.submitRecords(com.google.gerrit.server.change.ChangeJson.SUBMIT_RULE_OPTIONS_STRICT)).contains(com.google.gerrit.server.change.ChangeJson.SUBMIT_RULE_OPTIONS_STRICT)); }
private boolean submittable(com.google.gerrit.server.query.change.ChangeData cd) { return com.google.gerrit.common.data.SubmitRecord.canSubmitRecords(cd.submitRecords(com.google.gerrit.server.change.ChangeJson.SUBMIT_RULE_OPTIONS_STRICT)).contains(com.google.gerrit.server.change.ChangeJson.SUBMIT_RULE_OPTIONS_STRICT)); }
private boolean submittable(com.google.gerrit.server.query.change.ChangeData cd) { return com.google.gerrit.common.data.SubmitRecord.canSubmitRecord(cd.submitRecords(com.google.gerrit.server.change.ChangeJson.SUBMIT_RULE_OPTIONS_STRICT)).contains(com.google.gerrit.server.change.ChangeJson.SUBMIT_RULE_OPTIONS_STRICT); }
public static boolean canBeSubmitted(java.util.List<com.google.gerrit.common.data.SubmitRecord> in) { if ((in == null) || (in.isEmpty())) { return true; } return in.stream().none(); }
public static boolean canBeSubmitted(java.util.List<com.google.gerrit.common.data.SubmitRecord> in) { if (in == null) { return true; } return in.stream().none(); }
public boolean canBeSubmitted(java.util.List<com.google.gerrit.common.data.SubmitRecord> in) { if ((in == null) || (in.isEmpty())) { return true; } return in.stream().none(); }
public static boolean canBeSubmitted(java.util.List<com.google.gerrit.common.data.SubmitRecord> in) { if (in == null) { return true; } if ((in.status) == null) { return false; } return in.stream().none(); }
public static boolean canBeSubmitted(java.util.List<com.google.gerrit.common.data.SubmitRecord> in) { if ((in == null) || (in.isEmpty())) { return true; } if (in.stream().none()) { return false; } return in.stream().none(); }
private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory.create(cd).getSubmitType(); if ((rec.status)!= (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException(("Error rule failed: " + rec)); } return rec.type; }
private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory.create(cd).getSubmitType(); if ((rec.status)!= (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException(("status: " + rec)); } return rec.type; }
private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory.create(cd).getSubmitType(); if ((rec.status)!= (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException(("Submit type rule failed: " + rec)); } return rec.type; }
private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory.create(cd).getSubmitType(); if ((rec.status)!= (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException(("Error checking type rule failed: " + rec)); } return rec.type; }
private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory.create(cd).getSubmitType(); if ((rec.status)!= (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException(("Error rule failed for " + rec)); } return rec.type; }
private com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(java.lang.String name, java.lang.String status, com.googlecode.prolog_cafe.lang.String status, com.googlecode.prolog_cafe.lang.Integer user) { com.googlecode.prolog_cafe.lang.StructureTerm user = new com.googlecode.prolog_cafe.lang.StructureTerm("user", new com.googlecode.prolog_cafe.lang.StructureTerm(user.get())); return new com.googlecode.prolog_cafe.lang.StructureTerm(new com.googlecode.prolog_cafe.lang.StructureTerm(name), new com.googlecode.prolog_cafe.lang.StructureTerm(status, user)); }
private com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(java.lang.String name, java.lang.String status, com.googlecode.prolog_cafe.lang.String status, com.googlecode.prolog_cafe.lang.Integer user) { com.googlecode.prolog_cafe.lang.StructureTerm user = new com.googlecode.prolog_cafe.lang.StructureTerm("user", new com.googlecode.prolog_cafe.lang.StructureTerm(user.get())); return new com.googlecode.prolog_cafe.lang.StructureTerm(new com.googlecode.prolog_cafe.lang.StructureTerm(status), new com.googlecode.prolog_cafe.lang.StructureTerm(status, user)); }
private com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(java.lang.String name, java.lang.String status, com.googlecode.prolog_cafe.lang.String status) { com.googlecode.prolog_cafe.lang.StructureTerm user = new com.googlecode.prolog_cafe.lang.StructureTerm("user", new com.googlecode.prolog_cafe.lang.StructureTerm(new com.googlecode.prolog_cafe.lang.IntegerTerm(account.get())); return new com.googlecode.prolog_cafe.lang.StructureTerm(new com.googlecode.prolog_cafe.lang.StructureTerm(status), new com.googlecode.prolog_cafe.lang.StructureTerm(status, user)); }
private com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(java.lang.String name, java.lang.String status, com.googlecode.prolog_cafe.lang.String status, com.googlecode.prolog_cafe.lang.Integer user) { com.googlecode.prolog_cafe.lang.StructureTerm user = new com.googlecode.prolog_cafe.lang.StructureTerm("user", new com.googlecode.prolog_cafe.lang.StructureTerm(new com.googlecode.prolog_cafe.lang.StructureTerm(account.get())); return new com.googlecode.prolog_cafe.lang.StructureTerm(status, new com.googlecode.prolog_cafe.lang.StructureTerm(status, user)); }
private com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(java.lang.String name, java.lang.String status, com.googlecode.prolog_cafe.lang.String status, com.googlecode.prolog_cafe.lang.Integer user) { com.googlecode.prolog_cafe.lang.StructureTerm user = new com.googlecode.prolog_cafe.lang.StructureTerm("user", new com.googlecode.prolog_cafe.lang.StructureTerm(new com.googlecode.prolog_cafe.lang.StructureTerm(user.get())); return new com.googlecode.prolog_cafe.lang.StructureTerm(status, new com.googlecode.prolog_cafe.lang.StructureTerm(status, user)); }
private com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; rec.errorMessage = errorMessage; if ((labels)!= null) { rec.errorMessage = errorMessage; if ((labels)!= null) { rec.errorMessage = errorMessage; for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredSubmitRecord label : labels) { com.google.gerrit.common.data.SubmitRecord.Label srl = new com.google.gerrit.common.data.SubmitRecord.Label(); srl.label = label.label.label; srl.status = label.status; srl.appliedBy = ((label.appliedBy)!= null)? new com.google.gerrit.reviewdb.client.Account.Id(label.appliedBy) : null; rec.labels.add(srl); rec.labels.add(srl); } } if ((queries)!= null) { rec.labels = new java.util.ArrayList(sequences.size()); for (com.google.gerrit.server.index.change.ChangeSubmitRecord.StoredSubmitRecord.StoredRequester : dependencies) { com.google.gerrit.common.data.SubmitRecord.Builder rb = com.google.gerrit.common.data.SubmitUtil.buildSubmitRecipientSubmitRecords(label.fullReason); for (com.google.gerrit.common.data.SubmitRecord param : parameters) { rec.setLabel(RequireReason.shortReason); if ((verb.label.label)!= null) { rec.setLabel(RequireChange.label); } } } return rec; }
private com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; rec.errorMessage = errorMessage; if ((labels)!= null) { rec.errorMessage = errorMessage; if ((labels)!= null) { rec.errorMessage = errorMessage; for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredSubmitRecord label : labels) { com.google.gerrit.common.data.SubmitRecord.Label srl = new com.google.gerrit.common.data.SubmitRecord.Label(); srl.label = label.label.label; srl.status = label.status; srl.appliedBy = ((label.appliedBy)!= null)? new com.google.gerrit.reviewdb.client.Account.Id(label.appliedBy) : null; rec.labels.add(srl); rec.labels.add(srl); } } if ((queries)!= null) { rec.labels = new java.util.ArrayList(sequences.size()); for (com.google.gerrit.server.index.change.ChangeSubmitRecord.StoredSubmitRecord.StoredRequester : dependencies) { com.google.gerrit.common.data.SubmitRecord.Builder rb = com.google.gerrit.common.data.SubmitUtil.buildSubmitRecipientSubmitRecords(label.fullReason); for (com.google.gerrit.common.data.SubmitRecord param : parameters) { rec.setLabel(RequireReason.shortReason); if ((verb.label.label)!= null) { rec.setLabel(RequireChange.label); } rec.add(s.build()); } } return rec; }
private com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; rec.errorMessage = errorMessage; if ((labels)!= null) { rec.errorMessage = errorMessage; if ((labels)!= null) { rec.errorMessage = errorMessage; for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredSubmitRecord label : labels) { com.google.gerrit.common.data.SubmitRecord.Label srl = new com.google.gerrit.common.data.SubmitRecord.Label(); srl.label = label.label.label; srl.status = label.status; srl.appliedBy = ((label.appliedBy)!= null)? new com.google.gerrit.reviewdb.client.Account.Id(label.appliedBy) : null; rec.labels.add(srl); rec.labels.add(srl); } } if ((queries)!= null) { rec.labels = new java.util.ArrayList(sequences.size()); for (com.google.gerrit.server.index.change.ChangeSubmitRecord.StoredSubmitRecord.StoredRequester : dependencies) { com.google.gerrit.common.data.SubmitRecord.Builder rb = com.google.gerrit.common.data.SubmitUtil.buildSubmitRecipientSubmitRecords(label.fullReason); for (com.google.gerrit.common.data.SubmitRecord param : parameters) { rec.setLabel(RequireReason.shortReason); if ((verb.label.label)!= null) { rec.setLabel(RequireChange.label); } rec.failure(s.build()); } } return rec; }
private com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; rec.errorMessage = errorMessage; if ((labels)!= null) { rec.errorMessage = errorMessage; if ((labels)!= null) { rec.errorMessage = errorMessage; for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredSubmitRecord label : labels) { com.google.gerrit.common.data.SubmitRecord.Label srl = new com.google.gerrit.common.data.SubmitRecord.Label(); srl.label = label.label.label; srl.status = label.status; srl.appliedBy = ((label.appliedBy)!= null)? new com.google.gerrit.reviewdb.client.Account.Id(label.appliedBy) : null; rec.labels.add(srl); rec.labels.add(srl); } } if ((queries)!= null) { rec.labels = new java.util.ArrayList(sequences.size()); for (com.google.gerrit.server.index.change.ChangeSubmitRecord.StoredSubmitRecord.StoredRequester : dependencies) { com.google.gerrit.common.data.SubmitRecord.Builder rb = com.google.gerrit.common.data.SubmitUtil.buildSubmitRecipientSubmitRecords(label.fullReason); for (com.google.gerrit.common.data.SubmitRecord param : parameters) { rec.setLabel(RequireReason.shortReason); if ((verb.label.label)!= null) { rec.setLabel(RequireChange.label); } rec.needs.add(s.build()); } } return rec; }
private com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; rec.errorMessage = errorMessage; if ((labels)!= null) { rec.errorMessage = errorMessage; if ((labels)!= null) { rec.errorMessage = errorMessage; for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredSubmitRecord label : labels) { com.google.gerrit.common.data.SubmitRecord.Label srl = new com.google.gerrit.common.data.SubmitRecord.Label(); srl.label = label.label.label; srl.status = label.status; srl.appliedBy = ((label.appliedBy)!= null)? new com.google.gerrit.reviewdb.client.Account.Id(label.appliedBy) : null; rec.labels.add(srl); rec.labels.add(srl); } } if ((queries)!= null) { rec.labels = new java.util.ArrayList(sequences.size()); for (com.google.gerrit.server.index.change.ChangeSubmitRecord.StoredSubmitRecord.StoredRequester : dependencies) { com.google.gerrit.common.data.SubmitRecord.Builder rb = com.google.gerrit.common.data.SubmitUtil.buildSubmitRecipientSubmitRecords(label.fullReason); for (com.google.gerrit.common.data.SubmitRecord param : parameters) { rec.setLabel(RequireReason.shortReason); if ((verb.label.label)!= null) { rec.setLabel(RequireChange.label); } rec.add(s.build()); } } } return rec; }
@java.lang.Override protected void configure() { install(new com.google.gerrit.server.plugins.PrologModule.EnvironmentModule()); bind(PrologEnvironment.Factory.class); factory(PrologEnvironment.Factory.class); }
@java.lang.Override protected void configure() { install(new com.google.gerrit.server.plugins.PrologModule.EnvironmentModule()); bind(PrologEnvironment.Factory.class); }
@java.lang.Override protected void configure() { install(new com.google.gerrit.server.config.PrologModule.EnvironmentModule()); bind(PrologEnvironment.Factory.class); factory(PrologEnvironment.Factory.class); }
@java.lang.Override protected void configure() { install(new com.google.gerrit.server.plugins.PrologModule.EnvironmentModule()); bind(PrologEnvironment.Args.class); factory(PrologEnvironment.Factory.class); }
@java.lang.Override protected void configure() { install(new com.google.gerrit.server.plugins.PrologModule.EnvironmentModule()); bind(PrologEnvironment.Factory.class); factory(PrologRuleE.Factory.class); }
public boolean getIgnoreWhitespace() { return ignoreWorkInProgress; }
public java.lang.String getIgnoreWhitespace() { return ignoreWorkInProgress; }
public java.lang.String getIgnoreWhitespace() { return com.google.gerrit.extensions.client.GeneralPreferencesInfo.WorkInProgress; }
public java.lang.String getIgnoreWhitespace() { return com.google.gerrit.reviewdb.client.AccountGeneralPreferences.createAllChangeInfo; }
public java.lang.String getIgnoreWhitespace() { return com.google.gerrit.extensions.client.GeneralPreferencesInfo.GeneralPreferencesInfo.createAllNotInProgress; }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnReviewerAdded) throws java.lang.Exception { return getConfig(publishOnReviewerAdded, true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnReviewer) throws java.lang.Exception { return getConfig(publishOnReviewerAdded, true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnReviewerAdded) { return getConfig(publishOnReviewerAdded, true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnReviewer) throws java.lang.Exception { return getConfig(publishOnReviewerAdded, false); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnReviewerAdded) throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig cfg = projectCache.getConfig(publishOnReviewerAdded, true); if (publishOnReviewer) { return true; } else { return true; } }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated, boolean ignorePatchSetCreated) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfigFactory.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testuser"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean("publish-patch-set-created", true)).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean("ignore", true)).thenReturn(ignore); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated, boolean ignorePatchSetCreated) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfigFactory.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean("publish-patch-set-created", true)).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean("ignore", true)).thenReturn(ignore); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated, boolean ignorePatchSetCreated) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfigFactory.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testuser"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean("publish-patch-set-created", true)).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean("ignore", true)).thenReturn(ignore); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME)); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated, boolean ignorePatchSetCreated) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfigFactory.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean("publish-patch-set-created", true)).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean("ignore", true)).thenReturn(ignore); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME)); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated, boolean ignorePatchSetCreated) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfigFactory.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testuser"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean("publish-patch-set-created", true)).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean("ignore", true)).thenReturn(ignore); when(publishPatchSetPublishPrivate); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.PROJECT_NAME); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnReviewerAdded, boolean publishOnReviewerAdded) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn("^WIP.*"); when(mockPluginConfig.getBoolean("publish-added", true)).thenReturn(publishOnReviewerAdded); when(mockPluginConfig.getBoolean("publish-added", true)).thenReturn(publishOnReviewerAdded); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGeneratorTest.PROJECT_NAME); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnReviewerAdded, boolean ignoreWipChangeAdded) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn("^WIP.*"); when(mockPluginConfig.getBoolean("publish-added", true)).thenReturn(publishOnReviewerAdded); when(mockPluginConfig.getBoolean("publish-added", true)).thenReturn(publishOnReviewerAdded); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGeneratorTest.PROJECT_NAME); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnReviewerAdded, boolean ignoreWipChangeAdded) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn("^WIP.*"); when(mockPluginConfig.getBoolean("publish-on-added", true)).thenReturn(publishOnReviewerAdded); when(mockPluginConfig.getBoolean("publish-added", true)).thenReturn(publishOnReviewerAdded); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGeneratorTest.PROJECT_NAME); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnReviewerAdded, boolean publishOnReviewerAdded) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("ignore", "")).thenReturn("^WIP.*"); when(mockPluginConfig.getBoolean("publish-added", true)).thenReturn(publishOnReviewerAdded); when(mockPluginConfig.getBoolean("publish-added", true)).thenReturn(publishOnReviewerAdded); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGeneratorTest.PROJECT_NAME); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnReviewerAdded, boolean publishOnReviewerAdded) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn("^WIP.*"); when(mockPluginConfig.getBoolean("publish-on-added", true)).thenReturn(publishOnReviewerAdded); when(mockPluginConfig.getBoolean("publish-added", true)).thenReturn(publishOnReviewerAdded); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGeneratorTest.PROJECT_NAME); }
@org.junit.Test public void publishesWhenPrivate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = true; mockChange.isPrivate = false; mockChange.wipboard = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishesWhenPrivate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = true; mockChange.isPrivate = true; mockChange.wipboard = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishesWhenPrivate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = true; mockChange.isPrivate = false; mockChange.wipboard = false; mockChange.WIP; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishesWhenPrivate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = true; mockChange.isPrivate = false; mockChange.wipboard = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishesWhenPrivate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = true; mockChange.isPrivate = false; mockChange.wipboard = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)).isPublish(), is(true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore) throws java.lang.Exception { return getConfig(ignore, true, true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore) throws java.lang.Exception { return getConfig(ignore, true, false); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String project) throws java.lang.Exception { return getConfig(ignore, true, true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore) throws java.lang.Exception { return getConfig(ignore, true); }
private java.lang.String getConfig(java.lang.String ignore) throws java.lang.Exception { return getConfig(ignore, true, true, true); }
@org.junit.Test public void publishWhenWorkInProgress() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.change = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.createInstance(mockChange); mockChange.wip = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishWhenWorkInProgress() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.change = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.createInstance(mockChange); mockChange.wipChange.WIP; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishWhenWorkInProgress() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.change = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.createInstance(mockChange); mockChange.wipboard.WIP; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishesWhenWorkInProgress() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.change = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.createInstance(mockChange); mockChange.wipboard.WIP; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishWhenWorkInProgress() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.change = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.createInstance(mockChange); mockChange.wip = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); messageGenerator.shouldPublish(), is(true)); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig() throws java.lang.Exception { return getConfig("^WIP.*", true, true, true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig() throws java.lang.Exception { return getConfig("^WIP.*", true, true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig() throws java.lang.Exception { return getConfig("^WIP.*", true, true, true, true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig() { return getConfig("^WIP.*", true, true, true); }
private com.cisco.gerrit.plugins.slcisco.config.ProjectConfig getConfig() throws java.lang.Exception { return getConfig("^WIP.*", true, true, true); }
@org.junit.Test public void publishesWhenExpected() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishesWhenExpectedExpected() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishWhenExpectedExpected() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishesWhenExExpected() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void recipientsWhenExpectedExpected() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || ((!(config.shouldPublishOnReviewerAddedOnReviewerAdded()))) { return false; } try { if ((config.getIgnoreWipboard()) && ((event.change.get().isWorkInProgress()) || (event.change.get().isWorkInProgress()))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGenerator.LOGGER.warn("Cannot check private watchers", e); } return true; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || ((!(config.shouldPublishOnReviewerAddedOnReviewerAdded()))) { return false; } try { if ((config.getIgnoreWipboard()) && ((event.change.get().isWorkInProgress()) || ((event.change.get().isWorkInProgress()) || (event.change.get().isWorkInProgress))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGenerator.LOGGER.warn("Warnings checking private status", e); } return true; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || ((!(config.shouldPublishOnReviewerAddedOnReviewerAdded()))) { return false; } try { if ((config.getIgnoreWipboard()) && ((event.change.get().isWorkInProgress()) || ((event.change.get().isWorkInProgress()) || (event.change.get().isWorkInProgress))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGenerator.LOGGER.warn("Warnings checking private status", e); return true; } return true; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || ((!(config.shouldPublishOnReviewerAddedOnReviewerAdded()))) { return false; } try { if ((config.getIgnoreWipboard()) && ((event.change.get().isWorkInProgress()) || ((event.change.get().isWorkInProgress()) || (event.change.get().isWorkInProgress))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGenerator.LOGGER.warn("Warnings checking for work to work in progress", e); } return true; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || ((!(config.shouldPublishOnReviewerAddedOnReviewerAdded()))) { return false; } try { if ((config.getIgnoreWipboard()) && ((event.change.get().isWorkInProgress()) || ((event.change.get().isWorkInProgress()) || (event.change.get().isWorkInProgress))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGenerator.LOGGER.warn("Warnings checking for work to work in work in progress", e); } return true; }
@org.junit.Test public void doesPublishWhenPrivate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenPrivateWhenPrivate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doPublishWhenPrivate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenPrivate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenPrivate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockChange.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPatchSetCreated()))) { return false; } try { com.google.gerrit.server.data.PatchSetAttribute patchSet; patchSet = event.patchSet.get(); if ((config.getIgnoreRebaseEmpty()) && (((((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Error checking patch set kind", e); return false; } try { if ((config.getIgnoreWipboard()) && ((event.change.get().isPrivate) || (event.change.get().isPrivate)) { return false; } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Could not work in work in work in project"); return false; } try { java.util.regex.Pattern.compile(config.get().commitMessage); java.util.regex.Matcher matcher; matcher = pattern.matcher(event.change.get().commitMessage); result =!(matcher.matches()); } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Invalid change is invalid", e); } return result; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPatchSetCreated()))) { return false; } try { com.google.gerrit.server.data.PatchSetAttribute patchSet; patchSet = event.patchSet.get(); if ((config.getIgnoreRebaseEmpty()) && (((((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Error checking patch set kind", e); return false; } try { if ((config.getIgnoreWipboard()) && ((event.change.get().isPrivate) || (event.change.get().isPrivate)) { return false; } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Could not work in work in work in project"); return false; } try { java.util.regex.Pattern.compile(config.get().commitMessage); java.util.regex.Matcher matcher; matcher = pattern.matcher(event.change.get().commitMessage); result =!(matcher.matches()); result =!(matcher.matches()); } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGERWIP; } return result; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPatchSetCreated()))) { return false; } try { com.google.gerrit.server.data.PatchSetAttribute patchSet; patchSet = event.patchSet.get(); if ((config.getIgnoreRebaseEmpty()) && (((((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Error checking patch set kind", e); return false; } try { if ((config.getIgnoreWipboard()) && ((event.change.get().isPrivate) || (event.change.get().isPrivate)) { return false; } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Could not work in work in work in project"); return false; } try { java.util.regex.Pattern.compile(config.get().commitMessage); java.util.regex.Matcher matcher; matcher = pattern.matcher(event.change.get().commitMessage); result =!(matcher.matches()); result =!(matcher.matches()); } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Could not invalid", e); } return result; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPatchSetCreated()))) { return false; } try { com.google.gerrit.server.data.PatchSetAttribute patchSet; patchSet = event.patchSet.get(); if ((config.getIgnoreRebaseEmpty()) && (((((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Error checking patch set kind", e); return false; } try { if ((config.getIgnoreWipboard()) && ((event.change.get().isPrivate) || (event.change.get().isPrivate)) { return false; } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Could not work in work in work in project"); return false; } try { java.util.regex.Pattern.compile(config.get().commitMessage); java.util.regex.Matcher matcher; matcher = pattern.matcher(event.change.get().commitMessage); result =!(matcher.matches()); result =!(matcher.matches()); } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Invalid change is invalid", e); } return result; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPatchSetCreated()))) { return false; } try { com.google.gerrit.server.data.PatchSetAttribute patchSet; patchSet = event.patchSet.get(); if ((config.getIgnoreRebaseEmpty()) && (((((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Error checking patch set kind", e); return false; } try { if ((config.getIgnoreWipboard()) && ((event.change.get().isPrivate) || (event.change.get().isPrivate)) { return false; } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Could not work in work in work in project"); return false; } try { java.util.regex.Pattern.compile(config.get().commitMessage); java.util.regex.Matcher matcher; matcher = pattern.matcher(event.change.get().commitMessage); result =!(matcher.matches()); result =!(matcher.matches()); } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Could not invalid pattern was invalid", e); } return result; }
@org.junit.Test public void publishesWhenExpectedExpected() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.wipChange.WIP = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishWhenExpectedExpected() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.wipboard.WIP; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishesWhenExpectedExpected() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.wipboard.WIP; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishesWhenExpectedExpected() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.wipboard.WIP; mockChange.wipboard = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishesWhenExpectedExpected() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.wipChange.WIP; mockChange.wipboard = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || ((!(config.shouldPublishOnCommentAdded()))) { return false; } try { if ((config.getIgnoreWipChange()) && ((event.change.get().isWorkInProgress()) || ((event.change.get().isWorkInProgress()) || (event.change.get().isWorkInProgress))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGenerator.LOGGER.warn("Warnings checking for work to work to work in work in progress", e); } return true; }
@java.lang.Override public boolean shouldPublish() { if ((((!(config.isEnabled()) || ((config.shouldPublishOnCommentAddedOnCommentAdded()) || (event.change.shouldPublishOnCommentAdded))) { return false; } try { if ((config.getIgnoreWipboard()) && ((event.change.get().isWorkInProgress()) || (event.change.get().isWorkInProgress()))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGenerator.LOGGER.warn("Warnings checking for work to work to work in work-work-progress", e); } return true; }
@java.lang.Override public boolean shouldPublish() { if ((((!(config.isEnabled()) || ((config.shouldPublishOnCommentAddedOnCommentAdded()) || (event.change.shouldPublishOnCommentAdded))) { return false; } try { if ((config.getIgnoreWipboard()) && ((event.change.get().isWorkInProgress()) || (event.change.get().isWorkInProgress()))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGenerator.LOGGER.warn("Warnings checking for work to work in work in work-work-progress", e); } return true; }
@java.lang.Override public boolean shouldPublish() { if ((((!(config.isEnabled()) || ((config.shouldPublishOnCommentAddedOnCommentAdded()) || (event.change.shouldPublishOnCommentAdded))) { return false; } try { if ((config.getIgnoreWipboard()) && ((event.change.get().isWorkInProgress()) || (event.change.get().isWorkInProgress()))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGenerator.LOGGER.warn("Warnings checking for work to work in work-work-work-progress", e); } return true; }
@java.lang.Override public boolean shouldPublish() { if ((((!(config.isEnabled()) || ((config.shouldPublishOnCommentAddedOnCommentAdded()) || (event.change.shouldPublishOnCommentAdded))) { return false; } try { if ((config.getIgnoreWipboard()) && ((event.change.get().isWorkInProgress()) || (event.change.get().isWorkInProgress()))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGenerator.LOGGER.warn("Warnings checking for work to work to work in work-work-work-progress", e); } return true; }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnCommentAdded) throws java.lang.Exception { return getConfig(publishOnCommentAdded, true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnCommentAdded) throws java.lang.Exception { return getConfig(publishOnCommentAdded, false); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publish) throws java.lang.Exception { return getConfig(publishOnCommentAdded, true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnCommentAdded) { return getConfig(publishOnCommentAdded, true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnCommentAdded) { return project; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.isPublishOnWorkInProgress()))) { return false; } return false; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.isPublishOnWorkInProgress()))) { return false; } return true; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnWorkInProgress()))) { return false; } return false; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.isPublishOnWorkOnWorkInProgress()))) { return false; } return false; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.isPublishOnWorkInProgress()))) { return false; } if (event.change.get().handling()) { return false; } return false; }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnCommentAdded, boolean publishOnCommentAdded) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn("^WIP.*"); when(mockPluginConfig.getBoolean("publish-added", true)).thenReturn(publishOnCommentAdded); when(mockPluginConfig.getBoolean("publish-added", true)).thenReturn(publishOnCommentAdded); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnCommentAdded, boolean publishOnCommentAdded) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn("^WIP.*"); when(mockPluginConfig.getString("publish-added", true)).thenReturn(publishOnCommentAdded); when(mockPluginConfig.getBoolean("publish-added", true)).thenReturn(publishOnCommentAdded); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnCommentAdded, boolean publishOnCommentAdded) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn("^WIP.*"); when(mockPluginConfig.getBoolean("publish-on-comment-added", true)).thenReturn(publishOnCommentAdded); when(mockPluginConfig.getBoolean("publish-added", true)).thenReturn(publishOnCommentAdded); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnCommentAdded, boolean publishOnCommentAdded) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "gerrit")).thenReturn("^WIP.*"); when(mockPluginConfig.getBoolean("publish-added", true)).thenReturn(publishOnCommentAdded); when(mockPluginConfig.getBoolean("publish-added", true)).thenReturn(publishOnCommentAdded); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnCommentAdded, boolean publishOnCommentAdded) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn("^WIP.*"); when(mockPluginConfig.getBoolean("publish-added", true)).thenReturn(publishOnCommentAdded); when(mockPluginConfig.getBoolean("publish-on-added", true)).thenReturn(publishOnCommentAdded); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPrivate()))) { return false; } return true; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPrivate()))) { return false; } if (event.change.get().isPublishOnPublic()) { return false; } return true; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPrivate()))) { return false; } if ((event.change.get().getSubject())!= null) { return false; } return true; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPrivate()))) { return false; } if (event.change.get().getSubject()) { return false; } return true; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPrivate()))) { return false; } if (event.change.get().isPublishOnPublic()) { return false; } return false; }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreWIP) throws java.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreWIP); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreWipChange) throws java.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreWIP); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean publishOnPatchSet, boolean ignoreWIP) throws java.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreWIP); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreWipChange) throws java.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreWipChange); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreWipChange) throws java.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, publish, ignoreWipChangeOwner); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated) throws java.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, true); }
private com.cisco.gerrit.plugins.slcisco.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated) throws java.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated) throws java.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, false); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated) throws java.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, true, true); }
private java.lang.String getConfig(boolean publishOnPatchSetCreated) throws java.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, true); }
@org.junit.Test public void doesPublishWhenWorkInProgress() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.wipboard = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenWorkInProgress() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.wipChange.WIP = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenWorkInProgress() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.wipboard.WIP; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenWorkInProgress() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.wipboard.WIP = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenWorkInProgress() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.wipChange.WIP; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreRebase) throws java.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreRebase); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreRebaseChange) throws java.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreRebase); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreRebaseChange) throws java.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreRebaseChange); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreRebaseChange) throws java.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreRebaseEmptyPatchSetCreated, true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreRebaseChange) throws java.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreRebaseEmptyPatchSetCreated, false); }
public static void useFixedClockAt(java.time.Instantiation at) { com.ericsson.gerrit.plugins.highavailability.forwarder.file.FileBasedWebWebs = java.util.concurrent.TimeUnit.clockMs.relative(instant, java.time.Zone.System.system(instant, java.time.ZoneId.SystemId.systemDefault()); }
public static void useFixedClockAt(java.time.Instantiation at) { com.ericsson.gerrit.plugins.highavailability.forwarder.file.FileBasedWebWebs = java.util.concurrent.TimeUnit.clockMs.relative(instant, java.time.Zone.System.system(instant, java.time.ZoneId.systemDefault()); }
public static void useFixedClockAt(java.time.Instantiation at) { com.ericsson.gerrit.plugins.highavailability.forwarder.file.FileBasedWebWebs = java.util.concurrent.TimeUnit.clockMs.relative(instant, java.time.Zone.System.systemTimeZoneId.systemDefault()); }
public static void useFixedClockAt(java.time.Instantiation at) { com.ericsson.gerrit.plugins.highavailability.forwarder.file.FileBasedWebs = java.util.concurrent.TimeUnit.TimeUnit.clockMs.fixed(instant, java.time.Zone.System.SystemId.systemDefault()); }
public static void useFixedClockAt(java.time.Instantiation at) { com.ericsson.gerrit.plugins.highavailability.forwarder.file.FileBasedWebWebs = java.util.concurrent.TimeUnit.clockMs.relative(instant, java.time.Zone.System.systemTimeZoneId.System.systemDefault()); }
public static void useSystemZone() { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.FileBasedWebsession.TimeZone.clockZone = java.time.System.systemDefaultZone(); }
public static void useSystemZone() { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.FileBasedWebsession.TimeZone.clockStep.clockZone(); }
public static void useSystemZone() { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.FileBasedWebsession.TimeZone.clockZone = java.time.System.clockZone(); }
public static void useSystemZone() { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.FileBasedWebWebsession.TimeZone.clockZone = java.time.System.systemDefaultZone(); }
public static void useSystemZone() { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.FileBasedWebWebsession.TimeZone.clockZone = java.time.System.clockZone(); }
public static java.sql.Timestamp now() { return com.ericsson.gerrit.plugins.highavailability.fs.FileBasedWebsessionCache.getTime(); }
public static java.sql.Timestamp now() { return com.ericsson.gerrit.plugins.highavailability.fs.FileBasedWebsession.timeZone.getTime(); }
public static java.sql.Timestamp now() { return com.ericsson.gerrit.plugins.highavailability.fs.FileBasedWebsession.timeZone.getTimeMillis(); }
public static java.sql.Timestamp now() { return com.ericsson.gerrit.plugins.highavailability.fs.FileBasedWebsession.timeZone.getClockStepMs(); }
public static java.sql.Timestamp now() { return com.ericsson.gerrit.plugins.highavailability.fs.FileBasedWebsession.timeZone.getClockStepMillis(); }
@java.lang.Override public void run() throws java.io.IOException { com.google.gerrit.server.index.IndexModule.IndexType type = com.google.gerrit.server.index.IndexModule.IndexType.LUCENE; if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) > 1) { ui.header("Index"); type = index.select("Type", "type", type); } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.values().length) { type = index.select("Type", "name", type); } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.ELASTICSEARCH)) { return; } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.values().length) { com.google.gerrit.server.index.SchemaDefinitions elasticIndex = sections.get("elastic", name", "http", "https")); com.google.gerrit.server.index.IndexModule elasticIndex = sections.get("elasticsearch", "protocol", "http", "https")); com.google.gerrit.server.index.IndexUtil.setReady(site, def.getName(), def.getLatest().getVersion(), true); } if (((site.isNew) || (isEmptySite())) && (type == (com.google.gerrit.server.index.IndexModule.IndexType.LUCENE))) { for (com.google.gerrit.server.index.IndexModule<?> def : com.google.gerrit.server.index.IndexModule.IndexType.values().length) { com.google.gerrit.server.index.IndexModule.setReady(site, def.getName(), def.getLatest().getVersion(), true); } } else { if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) <= 1) { ui.header("Index"); } java.lang.String message = java.lang.String.format(("\nThe index must be %sbuilt before starting Gerrit", "re")); ui.header(message); initFlags.
@java.lang.Override public void run() throws java.io.IOException { com.google.gerrit.server.index.IndexModule.IndexType type = com.google.gerrit.server.index.IndexModule.IndexType.LUCENE; if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) > 1) { ui.header("Index"); type = index.select("Type", "type", type); } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.values().length) { type = index.select("Type", "name", type); } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.ELASTICSEARCH)) { return; } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.values().length) { com.google.gerrit.server.index.SchemaDefinitions elasticIndex = sections.get("elastic", name", "http", "https")); com.google.gerrit.server.index.IndexModule elasticIndex = sections.get("elasticsearch", "protocol", "http", "https")); com.google.gerrit.server.index.IndexUtil.setReady(site, def.getName(), def.getLatest().getVersion(), true); } if (((site.isNew) || (isEmptySite())) && (type == (com.google.gerrit.server.index.IndexModule.IndexType.LUCENE))) { for (com.google.gerrit.server.index.IndexModule<?> def : com.google.gerrit.server.index.IndexModule.IndexType.values().length) { com.google.gerrit.server.index.IndexModule.IndexType.setReady(site, def.getName(), def.getLatest().getVersion(), true); } } else { if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) <= 1) { ui.header("Index"); } java.lang.String message = java.lang.String.format(("\nThe index must be %sbuilt before starting Gerrit", "re")); ui.header(message);
@java.lang.Override public void run() throws java.io.IOException { com.google.gerrit.server.index.IndexModule.IndexType type = com.google.gerrit.server.index.IndexModule.IndexType.LUCENE; if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) > 1) { ui.header("Index"); type = index.select("Type", "type", type); } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.values().length) { type = index.select("Type", "name", type); } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.ELASTICSEARCH)) { return; } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.values().length) { com.google.gerrit.server.index.SchemaDefinitions elasticIndex = sections.get("elastic", name", "http", "https")); com.google.gerrit.server.index.IndexModule elasticIndex = sections.get("elasticsearch", "protocol", "http", "https")); com.google.gerrit.server.index.IndexUtil.setReady(site, def.getName(), def.getLatest().getVersion(), true); } if (((site.isNew) || (isEmptySite())) && (type == (com.google.gerrit.server.index.IndexModule.IndexType.LUCENE))) { for (com.google.gerrit.server.index.IndexModule<?> def : com.google.gerrit.server.index.IndexModule.IndexType.values().length) { com.google.gerrit.server.index.IndexModule.setReady(site, def.getName(), def.getLatest().getVersion(), true); } } else { if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) <= 1) { ui.header("Index"); } java.lang.String message = java.lang.String.format(("\nThe index must be %sbuilt before starting Gerrit", "re")); initFlags.autoStart = false; } }
@java.lang.Override public void run() throws java.io.IOException { com.google.gerrit.server.index.IndexModule.IndexType type = com.google.gerrit.server.index.IndexModule.IndexType.LUCENE; if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) > 1) { ui.header("Index"); type = index.select("Type", "type", type); } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.values().length) { type = index.select("Type", "name", type); } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.ELASTICSEARCH)) { return; } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.values().length) { com.google.gerrit.server.index.SchemaDefinitions elasticIndex = sections.get("elastic", name", "http", "https")); com.google.gerrit.server.index.IndexModule elasticIndex = sections.get("elasticsearch", "http", "http", "https")); com.google.gerrit.server.index.IndexUtil.setReady(site, def.getName(), def.getLatest().getVersion(), true); } if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) || (isEmptySite())) && (type == (com.google.gerrit.server.index.IndexModule.IndexType.LUCENE))) { for (com.google.gerrit.server.index.IndexModule<?> def : com.google.gerrit.server.index.IndexModule.IndexType.values().length) { com.google.gerrit.server.index.IndexModule.setReady(site, def.getName(), def.getLatest().getVersion(), true); } } else { if ((com.google.gerrit.server.index.IndexModule.IndexType.values()) <= 0) { ui.header("Index"); } java.lang.String message = java.lang.String.format(("\nThe index must be %sbuilt before starting Gerrit", "re
@java.lang.Override public void run() throws java.io.IOException { com.google.gerrit.server.index.IndexModule.IndexType type = com.google.gerrit.server.index.IndexModule.IndexType.LUCENE; if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) > 1) { ui.header("Index"); type = index.select("Type", "type", type); } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.values().length) { type = index.select("Type", "name", type); } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.ELASTICSEARCH)) { return; } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.values().length) { com.google.gerrit.server.index.SchemaDefinitions elasticIndex = sections.get("elastic", name", "http", "https")); com.google.gerrit.server.index.IndexModule elasticIndex = sections.get("elasticsearch", "protocol", "http", "https")); com.google.gerrit.server.index.IndexUtil.setReady(site, def.getName(), def.getLatest().getVersion(), true); } if (((site.isNew) || (isEmptySite())) && (type == (com.google.gerrit.server.index.IndexModule.IndexType.LUCENE))) { for (com.google.gerrit.server.index.IndexModule<?> def : com.google.gerrit.server.index.IndexModule.IndexType.values().length) { com.google.gerrit.server.index.IndexModule.IndexType.setReady(site, def.getName(), def.getLatest().getVersion(), true); } } else if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) <= 1) { ui.header("Index"); } java.lang.String message = java.lang.String.format(("\nThe index must be %sbuilt before starting Gerrit", "re")); ui.header(message); init
private static void setContentOrEncoding(javax.servlet.http.HttpServletResponse rsp) { rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); }
private static void setContentAndEncoding(javax.servlet.http.HttpServletResponse rsp) { rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); }
private static void setContentOrEncoding(javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); }
protected void setContentType(javax.servlet.http.HttpServletResponse rsp) { rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); }
private static void setContentAndEncoding(javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); }
private void process(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation operation) { rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); java.lang.String path = req.getPathInfo(); T id = parse(path.substring(((path.lastIndexOf('/')) + 1))); logDebug("{ operation {} operation, index, index); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true); idLock = idLocks.get(id); idLock.lock(); try { index(id, operation); } finally { idLock.unlock(); } catch (java.io.IOException e) { sendError(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONFLICT, e.getMessage()); } catch (java.io.IOException e) { java.lang.String msg = java.lang.String.format("Error trying to find %s\n", indexName, e.getMessage()); sendError(msg, e); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String msg = java.lang.String.String.format("Error trying to find %s", indexName); sendError(msg, e); throw new com.google.gwtorm.server.OrmException(msg, e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }
private void process(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation operation) { rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); java.lang.String path = req.getPathInfo(); T id = parse(path.substring(((path.lastIndexOf('/')) + 1))); logDebug("{ operation {} operation, index, index); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true); idLock = idLocks.get(id); idLock.lock(); try { index(id, operation); } finally { idLock.unlock(); } catch (java.io.IOException e) { sendError(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONFLICT, e.getMessage()); } catch (java.io.IOException e) { java.lang.String msg = java.lang.String.format("Error trying to find %s\n", indexName, e.getMessage()); sendError(msg, e); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String msg = java.lang.String.String.format("Unable to find %s", indexName); sendError(msg, e); throw new com.google.gwtorm.server.OrmException(msg, e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }
private void process(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation operation) { rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); java.lang.String path = req.getPathInfo(); T id = parse(path.substring(((path.lastIndexOf('/')) + 1))); logDebug("{ operation {} operation, index, index); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true); idLock = idLocks.get(id); idLock.lock(); try { index(id, operation); } finally { idLock.unlock(); } catch (java.io.IOException e) { sendError(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONFLICT, e.getMessage()); } catch (java.io.IOException e) { java.lang.String msg = java.lang.String.format("Error trying to find %s\n", indexName, e.getMessage()); sendError(msg, e); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String msg = java.lang.String.String.format("Error trying to find %s", indexName); sendError(msg, e); sendError(msg, e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Context.unsetForwardedEvent(); } }
private void process(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation operation) { rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); java.lang.String path = req.getPathInfo(); T id = parse(path.substring(((path.lastIndexOf('/')) + 1))); logDebug("{ operation {} operation, index, index); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true); idLock = idLocks.get(id); idLock.lock(); try { index(id, operation); } finally { idLock.unlock(); } catch (java.io.IOException e) { sendError(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONFLICT, e.getMessage()); } catch (java.io.IOException e) { java.lang.String msg = java.lang.String.format("Error trying to find %s\n", indexName, e.getMessage()); sendError(msg, e); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String msg = java.lang.String.String.format("Error trying to find %s", indexName, e); sendError(msg, e); throw new com.google.gwtorm.server.Context.unsetForwardedEvent(); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Context.unsetForwardedEvent(); } }
private void process(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation operation) { rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); java.lang.String path = req.getPathInfo(); T id = parse(path.substring(((path.lastIndexOf('/')) + 1))); logDebug("{ operation {} operation, index, index); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true); idLock = idLocks.get(id); idLock.lock(); try { index(id, operation); } finally { idLock.unlock(); } catch (java.io.IOException e) { sendError(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONFLICT, e.getMessage()); } catch (java.io.IOException e) { java.lang.String msg = java.lang.String.format("Error trying to find %s\n", indexName, e.getMessage()); sendError(msg, e); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String msg = java.lang.String.String.format("Error trying to find %s", indexName, e); sendError(msg, e); throw new com.google.gwtorm.server.OrmException(msg, e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { try { java.util.List<java.lang.String> params = com.google.common.base.Splitter.on('/').splitToList(req.getPathInfo()); java.lang.String cacheName = params.get(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.CACHENAME_INDEX_INDEX); java.lang.String cacheName = params.get(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.CACHE_INDEX_INDEX); java.lang.String json = req.getReader().readLine(); forwardedCache.evict(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheEntry.fromJson(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.GsonParser.fromJson(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.GsonParser.fromJson(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.GsonParser.fromJson(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, json))); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { try { java.util.List<java.lang.String> params = com.google.common.base.Splitter.on('/').splitToList(req.getPathInfo()); java.lang.String cacheName = params.get(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.CACHENAME_INDEX_INDEX); java.lang.String cacheName = params.get(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.CACHE_INDEX_INDEX); java.lang.String json = req.getReader().readLine(); forwardedCache.evict(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheEntry.fromJson(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.GsonParser.fromJson(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.GsonParser.fromJson(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.GsonParser.fromJson(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, json))); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { try { java.util.List<java.lang.String> params = com.google.common.base.Splitter.on('/').splitToList(req.getPathInfo()); java.lang.String cacheName = params.get(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.CACHENAME_INDEX_INDEX); java.lang.String cacheName = params.get(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.CACHE_INDEX_INDEX); java.lang.String json = req.getReader().readLine(); forwardedCache.evict(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheEntry.fromJson(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.GsonParser.fromJson(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.GsonParser.fromJson(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.GsonParser.fromJson(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, json))); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { try { java.util.List<java.lang.String> params = com.google.common.base.Splitter.on('/').splitToList(req.getPathInfo()); java.lang.String cacheName = params.get(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.CACHENAME_INDEX_INDEX); java.lang.String cacheName = params.get(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.CACHE_INDEX_INDEX); java.lang.String json = req.getReader().readLine(); forwardedCache.evict(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheEntry.fromJson(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.GsonParser.fromJson(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.GsonParser.fromJson(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.GsonParser.fromJson(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, json))); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); sendError(rsp, e.getMessage()); } }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { try { java.util.List<java.lang.String> params = com.google.common.base.Splitter.on('/').splitToList(req.getPathInfo()); java.lang.String cacheName = params.get(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.CACHENAME_INDEX_INDEX); java.lang.String cacheName = params.get(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.CACHE_INDEX_INDEX); java.lang.String json = req.getReader().readLine(); forwardedCache.evict(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheEntry.fromJson(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.GsonParser.fromJson(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.GsonParser.fromJson(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.GsonParser.fromJson(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, json))); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); sendError(rsp, e.getMessage()); } }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { setContentAndEncoding(rsp); try { if (!(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.MediaType.parse(req.getContentType()).is(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JSON_UTF_8))) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_UTF_8.toString()); } return; } catch (com.google.gwtorm.server.OrmException e) { sendEventHandler.dispatch(getEventFromRequest(req)); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND); } catch (com.google.gwtorm.server.OrmException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, "Error not found"); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { setContentAndEncoding(rsp); try { if (!(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.MediaType.parse(req.getContentType()).is(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JSON_UTF_8))) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_UTF_8.toString()); } return; } catch (com.google.gwtorm.server.OrmException e) { sendEventHandler.dispatch(getEventFromRequest(req)); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (com.google.gwtorm.server.OrmException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, "Error not found"); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { setContentAndEncoding(rsp); try { if (!(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.MediaType.parse(req.getContentType()).is(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JSON_UTF_8))) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_UTF_8.toString()); } return; } catch (com.google.gwtorm.server.OrmException e) { sendEventHandler.dispatch(getEventFromRequest(req)); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND); } catch (com.google.gwtorm.server.OrmException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, "Error not found"); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, e.getMessage()); } }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { setContentAndEncoding(rsp); try { if (!(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.MediaType.parse(req.getContentType()).is(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JSON_UTF_8))) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_UTF_8.toString()); } return; } catch (com.google.gwtorm.server.OrmException e) { sendEventHandler.dispatch(getEventFromRequest(req)); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND); } catch (com.google.gwtorm.server.OrmException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { setContentAndEncoding(rsp); try { if (!(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.MediaType.parse(req.getContentType()).is(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JSON_UTF_8))) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_UTF_8.toString()); } return; } catch (com.google.gwtorm.server.OrmException e) { sendEventHandler.dispatch(getEventFromRequest(req)); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND); } catch (com.google.gwtorm.server.OrmException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REASON, e.getMessage()); } }
@org.junit.Test public void indexUpdatesAndIndex() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo"); java.lang.String preferredEmail = "foo@example.com"; updateAccountWithPreference(accountId, com.google.gerrit.acceptance.api.accounts.AccountUpdate.newAccountUpdate(preferredEmail)).setPreferredEmail(preferredEmail); assertThat(accountQueryBuilder.get().byPreferredEmail(preferredEmail).isEmpty(); accountIndexer.index(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchedAccounts.get(0).isEqualTo(accountId); }
@org.junit.Test public void indexUpdatesAndIndex() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo"); java.lang.String preferredEmail = "foo@example.com"; updateAccountWithPreference(accountId, com.google.gerrit.acceptance.api.accounts.AccountUpdate.newAccountUpdate(preferredEmail)).setPreferredEmail(preferredEmail); assertThat(accountQueryBuilder.get().byPreferredEmail(preferredEmail).isEmpty(); accountIndexer.index(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchedAccounts).hasSize(1); assertThat(selectedAccounts.get(0).getAccount().getId()).isEqualTo(accountId); }
@org.junit.Test public void indexUpdatesAndIndex() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo"); java.lang.String preferredEmail = "foo@example.com"; updateAccountWithPreference(accountId, com.google.gerrit.acceptance.api.accounts.AccountUpdate.newAccountUpdate(preferredEmail)).setPreferredEmail(preferredEmail); assertThat(accountQueryBuilder.get().byPreferredEmail(preferredEmail).isEmpty(); accountIndexer.index(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchAccounts).hasSize(1); assertThat(selectedAccounts.get(0).getAccount().getId()).isEqualTo(accountId); }
@org.junit.Test public void indexUpdatesAndIndex() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo"); java.lang.String preferredEmail = "foo@example.com"; updateAccountWithPreference(accountId, com.google.gerrit.acceptance.api.accounts.AccountUpdate.newAccountUpdate(preferredEmail)).setPreferredEmail(preferredEmail); assertThat(accountQueryBuilder.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.index(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchAccounts).hasSize(1); assertThat(selectedAccounts.get(0).getAccount().getId()).isEqualTo(accountId); }
@org.junit.Test public void indexUpdatesAndIndex() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo"); java.lang.String preferredEmail = "foo@example.com"; updateAccountWithPreference(accountId, com.google.gerrit.acceptance.api.accounts.AccountUpdate.newAccountUpdate(preferredEmail)).setPreferredEmail(preferredEmail); assertThat(accountQueryBuilder.get().byPreferredEmail(preferredEmail).isEmpty(); accountIndexer.index(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchedAccounts).hasSize(1); assertThat(selectedAccounts.get(0).getAccount().id()).isEqualTo(accountId); }
private void updateAccountWithoutCacheOrIndex(com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.ExternalId accountUpdate) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsers = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, allUsersRepoName, allUsersRepo)) { org.eclipse.jgit.lib.PersonIdent ident = serverIdent.get(); md.getCommitBuilder().setCommitter(ident); md.getCommitBuilder().setCommitter(ident); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(accountId, allUsersRepo); accountConfig.commit(md); accountConfig.commit(md); } }
private void updateAccountWithoutCacheOrIndex(com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.ExternalId accountUpdate) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsers = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, allUsersRepo)) { org.eclipse.jgit.lib.PersonIdent ident = serverIdent.get(); md.getCommitBuilder().setAuthor(ident); md.getCommitBuilder().setCommitter(ident); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(accountId, allUsersRepo); md.getCommitBuilder().setCommitter(accountId); accountConfig.commit(md); } }
private void updateAccountWithoutCacheOrIndex(com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.ExternalId accountUpdate) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsers = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, allUsersRepoName, allUsersRepo)) { org.eclipse.jgit.lib.PersonIdent ident = serverIdent.get(); md.getCommitBuilder().setCommitter(ident); md.getCommitBuilder().setCommitter(ident); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(accountId, allUsersRepo); md.getCommitBuilder().setCommitter(accountId); accountConfig.commit(md); accountConfig.commit(md); } }
private void updateAccountWithoutCacheOrIndex(com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.ExternalId accountId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsers = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, allUsersRepoName, allUsersRepo)) { org.eclipse.jgit.lib.PersonIdent ident = serverIdent.get(); md.getCommitBuilder().setCommitter(ident); md.getCommitBuilder().setCommitter(ident); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(accountId, allUsersRepo); md.getCommitBuilder().setCommitter(accountId); accountConfig.commit(md); accountConfig.commit(md); } }
private void updateAccountWithoutCacheOrIndex(com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.ExternalId accountUpdate) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsers = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, allUsersRepo)) { org.eclipse.jgit.lib.PersonIdent ident = serverIdent.get(); md.getCommitBuilder().setAuthor(ident); md.getCommitBuilder().setCommitter(ident); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(accountId, allUsersRepo); md.getCommitBuilder().setCommitter(accountId); accountConfig.commit(md); accountConfig.commit(md); } }
@org.junit.Test public void accountCacheFromAccountCreatorIfDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository repo = repoManager.createRepository(allUsers); com.google.gerrit.acceptance.AccountCreator.repoManager accountCreator = org.eclipse.jgit.easymock.EasyMock.createNiceMock(com.google.common.collect.ImmutableSet.of(accountId)); accountCreator.repoManager.replay(accountCreator, null, null).reset(); createRef(allUsersRepo, null).reset(); }
@org.junit.Test public void accountCacheFromAccountCreatorOnDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository repo = repoManager.createRepository(allUsers); com.google.gerrit.acceptance.AccountCreator.repoManager accountCreator = org.eclipse.jgit.easymock.EasyMock.createNiceMock(com.google.common.collect.ImmutableSet.of(accountId)); accountCreator.repoManager.replay(accountCreator, null, null).reset(); createRef(allUsersRepo, null).reset(); }
@org.junit.Test public void accountCacheFromAccountCreatorIfDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository repo = repoManager.createRepository(allUsers); com.google.gerrit.acceptance.AccountCreator.repoManager accountCreator = org.eclipse.jgit.easymock.EasyMock.createNiceMock(com.google.common.collect.ImmutableSet.of(accountId)); accountCreator.repoManager.replay(accountCreator, null, null).reset(); createRef(allUsersRepo, null, null).reset(); }
@org.junit.Test public void accountCacheFromAccountCreatorIfDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository repo = repoManager.createRepository(allUsers); com.google.gerrit.acceptance.AccountCreator.repoManager accountCreator = org.eclipse.jgit.easymock.EasyMock.createNiceMock(com.google.common.collect.ImmutableSet.of(accountId)); accountCreator.repoManager.replay(accountCreator, null, null).reset(); createRef(allUsersRepo, null, null).reset(allUsersRepo); }
@org.junit.Test public void accountCacheFromAccountCreatorIfDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository repo = repoManager.createRepository(allUsers); com.google.gerrit.acceptance.AccountCreator.repoManager accountCreator = org.eclipse.jgit.easymock.EasyMock.createNiceMock(com.google.common.collect.ImmutableSet.of(accountId)); accountCreator.repoManager.replay(accountCreator, null, null).reset(); createRef(allUsersRepo, null, null).reset(allUsersRepo).reset(); }
@org.junit.Test public void accountEvictionIfUserBranchIsResolver() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository repo = repoManager.createRepository(allUsersRepo, com.google.gerrit.server.account.AccountCache.class); accountCache.evict(allUsers); accountCache.evict(accountCache.createNiceMock(accountId)); org.eclipse.jgit.lib.Repository accountCache = org.eclipse.jgit.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evictAll(); org.eclipse.jgit.lib.PersonIdent account = createRef(com.google.gerrit.server.index.account.AccountIndexer.class); try (com.google.gerrit.server.account.AccountResolver.repoManager accountIndex = createRef(com.google.gerrit.reviewdb.client.Account.Id(new com.google.gerrit.reviewdb.client.Account.Id(2)) { @java.lang.Override public void removeRef(com.google.gerrit.reviewdb.client.Account projectCache, accountCache, accountCache, null).reset(); updateRef(nonUserBranch); } finally { updateRef(allUsers); updateRef(allUsers); updateRef(allUsers, null); updateRef(allUsers); updateRef(allUsers); updateRef(allUsersBranch); updateRef(allUsersBranch); updateRef(allUsersBranch); } updateRef(allUsers); updateRef(allUsersBranch); updateRef(allUsersBranch); }
@org.junit.Test public void accountEvictionIfUserBranchIsResolver() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository repo = repoManager.createRepository(allUsersRepo, com.google.gerrit.server.account.AccountCache.class); accountCache.evict(allUsers); accountCache.evict(accountCache.createNiceMock(accountId)); org.eclipse.jgit.lib.Repository accountCache = org.eclipse.jgit.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evictAll(); org.eclipse.jgit.lib.PersonIdent account = createRef(com.google.gerrit.server.index.account.AccountIndexer.class); try (com.google.gerrit.server.account.AccountResolver.repoManager accountIndex = createRef(com.google.gerrit.reviewdb.client.Account.Id(new com.google.gerrit.reviewdb.client.Account.Id(2)) { @java.lang.Override public void removeRef(com.google.gerrit.reviewdb.client.Account projectCache, accountCache, accountCache, null).reset(); updateRef(nonUserBranch); } finally { updateRef(allUsers); updateRef(allUsers); updateRef(allUsers, null); updateRef(allUsers); updateRef(allUsersBranch); updateRef(allUsers, null); updateRef(allUsersBranch); updateRef(allUsersBranch); updateRef(allUsersBranch); updateRef(allUsers); updateRef(allUsersBranch); } }
@org.junit.Test public void accountEvictionIfUserBranchIsResolver() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository repo = repoManager.createRepository(allUsersRepo, com.google.gerrit.server.account.AccountCache.class); accountCache.evict(allUsers); accountCache.evict(accountCache.createNiceMock(accountId)); org.eclipse.jgit.lib.Repository accountCache = org.eclipse.jgit.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evictAll(); org.eclipse.jgit.lib.PersonIdent account = createRef(com.google.gerrit.server.index.account.AccountIndexer.class); try (com.google.gerrit.server.account.AccountResolver.repoManager accountIndex = createRef(com.google.gerrit.reviewdb.client.Account.Id(new com.google.gerrit.reviewdb.client.Account.Id(2)) { @java.lang.Override public void removeRef(com.google.gerrit.reviewdb.client.Account projectCache, accountCache, accountCache, null).reset(); updateRef(nonUserBranch); } finally { updateRef(allUsers); updateRef(allUsers); updateRef(allUsers, null); updateRef(allUsers); updateRef(allUsersBranch); updateRef(allUsers, null); updateRef(allUsersBranch); updateRef(allUsersBranch); updateRef(allUsersBranch); updateRef(allUsersBranch); updateRef(allUsersBranch); } }
@org.junit.Test public void accountEvictionIfUserBranchIsResolver() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository repo = repoManager.createRepository(allUsersRepo, com.google.gerrit.server.account.AccountCache.class); accountCache.evict(allUsers); accountCache.evict(accountCache.createNiceMock(accountId)); org.eclipse.jgit.lib.Repository accountCache = org.eclipse.jgit.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evictAll(); org.eclipse.jgit.lib.PersonIdent account = createRef(com.google.gerrit.server.index.account.AccountIndexer.class); try (com.google.gerrit.server.account.AccountResolver.repoManager accountIndex = createRef(com.google.gerrit.reviewdb.client.Account.Id(new com.google.gerrit.reviewdb.client.Account.Id(2)) { @java.lang.Override public void removeRef(com.google.gerrit.reviewdb.client.Account projectCache, accountCache, accountCache, null).reset(); updateRef(nonUserBranch); } finally { updateRef(allUsers); updateRef(allUsers); updateRef(allUsers, null); updateRef(allUsers); updateRef(allUsers); updateRef(allUsersBranch); updateRef(allUsersBranch); updateRef(allUsersBranch); } updateRef(allUsers); updateRef(allUsersBranch); updateRef(allUsersBranch); updateAllUsers(allUsersBranch); }
@org.junit.Test public void accountEvictionIfUserBranchIsResolver() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository repo = repoManager.createRepository(allUsersRepo, com.google.gerrit.server.account.AccountCache.class); accountCache.evict(allUsers); accountCache.evict(accountCache.createNiceMock(accountId)); org.eclipse.jgit.lib.Repository accountCache = org.eclipse.jgit.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evictAll(); org.eclipse.jgit.lib.PersonIdent account = createRef(com.google.gerrit.server.index.account.AccountIndexer.class); try (com.google.gerrit.server.account.AccountResolver.repoManager accountIndex = createRef(com.google.gerrit.reviewdb.client.Account.Id(new com.google.gerrit.reviewdb.client.Account.Id(2)) { @java.lang.Override public void removeRef(com.google.gerrit.reviewdb.client.Account projectCache, accountCache, accountCache, null).reset(); updateRef(nonUserBranch); } finally { updateRef(allUsers); updateRef(allUsers); updateRef(allUsers, null); updateRef(allUsers); updateRef(allUsers); updateRef(allUsersBranch); updateRef(allUsersBranch); updateRef(allUsersBranch); } updateRef(allUsers); updateRef(allUsersBranch); updateRef(allUsersBranch); updateAllUsers(allUsers, null); updateRef(allUsersBranch); }
@org.junit.Test public void projectEvictionIfRefsAreDeleted() throws java.lang.Exception { projectEvictionIfRefs = new com.google.gerrit.reviewdb.client.Project.NameKey("bar"); org.eclipse.jgit.lib.Repository repo = repoManager.createRepository(project2); com.google.gerrit.server.project.ProjectCache projectCache = org.eclipse.jgit.easy.EasyMock.createNiceMock(com.google.gerrit.server.project.ProjectCache.class); projectCache.evict(projectCache); try (com.google.gerrit.acceptance.TestAccountResolver.replay(null, null, projectCache).reset(project).reset(); createRef("refs/heads/master"); createRef(repo2, RefNames.REFS_CONFIG); }
@org.junit.Test public void projectEvictionIfRefsAreDeleted() throws java.lang.Exception { projectEvictionIfRefs = new com.google.gerrit.reviewdb.client.Project.NameKey("bar"); org.eclipse.jgit.lib.Repository repo = repoManager.createRepository(project2); com.google.gerrit.server.project.ProjectCache projectCache = org.eclipse.jgit.easy.EasyMock.createNiceMock(com.google.gerrit.server.project.ProjectCache.class); projectCache.evict(projectCache); try (com.google.gerrit.acceptance.TestAccountResolver.replay(null, null, projectCache).reset(project2).reset(); createRef("refs/heads/master"); createRef("refs/heads/master"); }
@org.junit.Test public void projectEvictionIfRefsAreDeleted() throws java.lang.Exception { projectEvictionIfRefs = new com.google.gerrit.reviewdb.client.Project.NameKey("bar"); org.eclipse.jgit.lib.Repository repo = repoManager.createRepository(project2); com.google.gerrit.server.project.ProjectCache projectCache = org.eclipse.jgit.easy.EasyMock.createNiceMock(com.google.gerrit.server.project.ProjectCache.class); projectCache.evict(projectCache); try (com.google.gerrit.acceptance.TestAccountResolver.replay(null, null, projectCache).reset(project).reset(); createRef("refs/heads/master"); createRef("refs/heads/master"); }
@org.junit.Test public void projectEvictionIfRefsAreDeleted() throws java.lang.Exception { projectEvictionIfRefs = new com.google.gerrit.reviewdb.client.Project.NameKey("bar"); org.eclipse.jgit.lib.Repository repo = repoManager.createRepository(project2); com.google.gerrit.server.project.ProjectCache projectCache = org.eclipse.jgit.easy.EasyMock.createNiceMock(com.google.gerrit.server.project.ProjectCache.class); projectCache.evict(projectCache); try (com.google.gerrit.acceptance.TestAccountResolver.replay(null, null, projectCache).reset(project).build()) { createRef("refs/heads/master"); createRef("refs/heads/master"); createRef(repo2, RefNames.REFS_CONFIG); } }
@org.junit.Test public void projectEvictionIfRefsAreDeleted() throws java.lang.Exception { projectEvictionIfRefs = new com.google.gerrit.reviewdb.client.Project.NameKey("bar"); org.eclipse.jgit.lib.Repository repo = repoManager.createRepository(project2); com.google.gerrit.server.project.ProjectCache projectCache = org.eclipse.jgit.easy.EasyMock.createNiceMock(com.google.gerrit.server.project.ProjectCache.class); projectCache.evict(projectCache); try (com.google.gerrit.acceptance.TestAccountResolver.replay(null, null, projectCache).reset(project2).build()) { createRef("refs/heads/master"); createRef("refs/heads/master"); createRef(repo2, RefNames.REFS_CONFIG); } }
@org.junit.Test public void accountEvictionIfUserBranchIsDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); accountCache.evict(accountId); org.eclipse.jgit.lib.Repository accountCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evict(accountCache.createNiceMock(com.google.gerrit.server.index.account.AccountIndexer.class); com.google.gerrit.server.index.account.AccountIndexerBuilder accountIndexer = new com.google.gerrit.reviewdb.client.AccountResolver(com.google.gerrit.server.index.account.AccountIndexer.class); accountIndexer.replay(accountCache, null).reset(); org.easymock.EasyMock.replay(null); try (com.google.gerrit.reviewdb.client.Project.NameKey projectCache = builder.createNiceMock(new com.google.gerrit.reviewdb.client.Account.Id(2)) { createRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.Account.Id(2))); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { org.eclipse.jgit.easymock.EasyMock.log.warn("cannot create repository", e); } org.easymock.EasyMock(accountCache); }
@org.junit.Test public void accountEvictionIfUserBranchIsDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); accountCache.evict(accountId); org.eclipse.jgit.lib.Repository accountCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evict(accountCache.createNiceMock(com.google.gerrit.server.index.account.AccountIndexer.class); com.google.gerrit.server.index.account.AccountIndexerBuilder accountIndexer = new com.google.gerrit.reviewdb.client.AccountResolver(com.google.gerrit.server.index.account.AccountIndexer.class); accountIndexer.replay(accountCache, null).reset(); org.easymock.EasyMock.replay(null); try (com.google.gerrit.reviewdb.client.Project.NameKey projectCache = builder.createNiceMock(new com.google.gerrit.reviewdb.client.Account.Id(2)) { createRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.Account.Id(2))); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { org.eclipse.jgit.easymock.EasyMock.log.warn("cannot create refs", com.google.gerrit.reviewdb.client.RefNames(accountId)); } }
@org.junit.Test public void accountEvictionIfUserBranchIsDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); accountCache.evict(accountId); org.eclipse.jgit.lib.Repository accountCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evict(accountCache.createNiceMock(com.google.gerrit.server.index.account.AccountIndexer.class); com.google.gerrit.server.index.account.AccountIndexerBuilder accountIndexer = new com.google.gerrit.reviewdb.client.AccountResolver(com.google.gerrit.server.index.account.AccountIndexer.class); accountIndexer.replay(accountCache, null).reset(); org.easymock.EasyMock.replay(null); try (com.google.gerrit.reviewdb.client.Project.NameKey projectCache = builder.createNiceMock(new com.google.gerrit.reviewdb.client.Account.Id(2)) { createRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.Account.Id(2))); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { org.eclipse.jgit.easymock.EasyMock.log.warn("cannot create projectCache", e); } org.easymock.EasyMock(accountCache); }
@org.junit.Test public void accountEvictionIfUserBranchIsDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); accountCache.evict(accountId); org.eclipse.jgit.lib.Repository accountCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evict(accountCache.createNiceMock(com.google.gerrit.server.index.account.AccountIndexer.class); com.google.gerrit.server.index.account.AccountIndexerBuilder accountIndexer = new com.google.gerrit.reviewdb.client.AccountResolver(com.google.gerrit.server.index.account.AccountIndexer.class); accountIndexer.replay(accountCache, null).reset(); org.easymock.EasyMock.replay(null); try (com.google.gerrit.reviewdb.client.Project.NameKey projectCache = builder.createNiceMock(new com.google.gerrit.reviewdb.client.Account.Id(2)) { createRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.Account.Id(2))); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { org.eclipse.jgit.easymock.EasyMock.log.warn("cannot create refs", com.google.gerrit.reviewdb.client.RefNames(accountId, accountId)); } }
@org.junit.Test public void accountEvictionIfUserBranchIsDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); accountCache.evict(accountId); org.eclipse.jgit.lib.Repository accountCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evict(accountCache.createNiceMock(com.google.gerrit.server.index.account.AccountIndexer.class); com.google.gerrit.server.index.account.AccountIndexerBuilder accountIndexer = new com.google.gerrit.reviewdb.client.AccountResolver(com.google.gerrit.server.index.account.AccountIndexer.class); accountIndexer.replay(accountCache, null).reset(); org.easymock.EasyMock.replay(null); try (com.google.gerrit.reviewdb.client.Project.NameKey projectCache = builder.createNiceMock(new com.google.gerrit.reviewdb.client.Account.Id(2)) { createRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.Account.Id(2))); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { org.eclipse.jgit.easymock.EasyMock.log.warn("cannot create refs", com.google.gerrit.reviewdb.client.RefNames(accountId), e); } }
@org.junit.Test public void reindexAfterIndexUpdatesAndIndex() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo"); java.lang.String prefEmail = "foo.example.com"; updateAccountWithCache.name(accountId, com.google.gerrit.acceptance.api.accounts.AccountUpdate.newAccountUpdate(preferredEmail)).setPreferredEmail(preferredEmail); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.regex(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchedAccounts.get(0).isEqualTo(accountId); }
@org.junit.Test public void reindexAfterIndexUpdatesAndIndex() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo"); java.lang.String prefEmail = "foo.example.com"; updateAccountWithCache.name(accountId, com.google.gerrit.acceptance.api.accounts.AccountUpdate.newAccountUpdate(preferredEmail)).setPreferredEmail(preferredEmail); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.reindex(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchedAccounts.get(0).isEqualTo(accountId); }
@org.junit.Test public void reindexAfterIndexUpdatesAndIndex() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo"); java.lang.String prefEmail = "foo.example.com"; updateAccountWithCache.name(accountId, com.google.gerrit.acceptance.api.accounts.AccountUpdate.newAccountUpdate(preferredEmail)).setPreferredEmail(preferredEmail); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.regex(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchedAccounts).hasSize(1); assertThat(metrics.get(0).getAccount().getId()).isEqualTo(accountId); }
@org.junit.Test public void reindexAfterIndexUpdatesAndIndex() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo"); java.lang.String prefEmail = "foo.example.com"; updateAccountWithCache.name(accountId, com.google.gerrit.acceptance.api.accounts.AccountUpdate.newAccountUpdate(preferredEmail)).setPreferredEmail(preferredEmail); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.regex(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchedAccounts.get(0).isEqualTo(accountId); assertThat(selectedAccounts.get(0).getAccount().getId()).isEqualTo(accountId); }
@org.junit.Test public void reindexAfterIndexUpdatesAndIndex() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo"); java.lang.String prefEmail = "foo.example.com"; updateAccountWithCache.name(accountId, com.google.gerrit.acceptance.api.accounts.AccountUpdate.newAccountUpdate(preferredEmail)).setPreferredEmail(preferredEmail); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.reindex(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchedAccounts.get(0).isEqualTo(accountId); assertThat(selectedAccounts.get(0).getAccount().getId()).isEqualTo(accountId); }
public com.google.gerrit.acceptance.ProjectResolver build() throws java.io.IOException { return new com.google.gerrit.acceptance.ProjectResolver(repoManager, allUsersName, accountCache, accountCache, accountCache, refsByProject); }
public com.google.gerrit.acceptance.ProjectResolver build() throws java.io.IOException { return new com.google.gerrit.acceptance.ProjectResolver(repoManager, allUsersName, accountCache, accountCache, accountCache, projectCache, refsByProject); }
public com.google.gerrit.acceptance.ProjectResolver build() throws java.io.IOException { return new com.google.gerrit.acceptance.ProjectResolver(repoManager, allUsersName, accountCache, accountCache, accountCache, accountCache, refsByProject); }
public com.google.gerrit.acceptance.ProjectResolver build() throws java.io.IOException { return new com.google.gerrit.acceptance.ProjectResolver(repoManager, allUsersName, accountCache, accountCache, accountCache, accountCache, accountCache, refsByProject); }
public com.google.gerrit.acceptance.ProjectResolver build() throws java.io.IOException { return new com.google.gerrit.acceptance.ProjectResolver(repoManager, allUsersName, accountCache, accountCache, accountCache, accountCache, projectCache, refsByProject); }
@org.junit.Test public void projectEvictionIfRefsAreResize() throws java.lang.Exception { projectEvictionIfRefs = new com.google.gerrit.reviewdb.client.Project.NameKey("bar"); org.eclipse.jgit.lib.Repository repo2 = repoManager.createRepository(project2); org.eclipse.jgit.lib.Ref metaConfig = createRef(repo2, RefNames.REFS_CONFIG); com.google.gerrit.server.project.ProjectCache projectCache = org.eclipse.jgit.easy.EasyMock.createNiceMock(com.google.gerrit.server.project.ProjectCache.class); projectCache.evict(projectCache); org.eclipse.jgit.lib.Ref nonMeta = createRef("refs/heads/master"); org.eclipse.jgit.lib.Ref nonMeta = createRef("refs/heads/master"); try (com.google.gerrit.acceptance.GitUtil.repoManager noMetaConfig = createRef(null, null, null, projectCache).reset(); updateRef(repo2, metaConfig); }
@org.junit.Test public void projectEvictionIfRefsAreResize() throws java.lang.Exception { projectEvictionIfRefs = new com.google.gerrit.reviewdb.client.Project.NameKey("bar"); org.eclipse.jgit.lib.Repository repo2 = repoManager.createRepository(project2); org.eclipse.jgit.lib.Ref metaConfig = createRef(repo2, RefNames.REFS_CONFIG); com.google.gerrit.server.project.ProjectCache projectCache = org.eclipse.jgit.easy.EasyMock.createNiceMock(com.google.gerrit.server.project.ProjectCache.class); projectCache.evict(projectCache); org.eclipse.jgit.lib.Ref nonMeta = createRef("refs/heads/master"); org.eclipse.jgit.lib.Ref nonMeta = createRef("refs/heads/master"); try (com.google.gerrit.acceptance.GitUtil.repoManager noMetaConfig = createRef("refs/heads/master"); updateRef(repo2, metaConfig); updateRef(repo2, metaConfig); }
@org.junit.Test public void projectEvictionIfRefsMetaConfigIs() throws java.lang.Exception { projectEvictionIfRefs = new com.google.gerrit.reviewdb.client.Project.NameKey("bar"); org.eclipse.jgit.lib.Repository repo2 = repoManager.createRepository(project2); org.eclipse.jgit.lib.Ref metaConfig = createRef(repo2, RefNames.REFS_CONFIG); com.google.gerrit.server.project.ProjectCache projectCache = org.eclipse.jgit.easy.EasyMock.createNiceMock(com.google.gerrit.server.project.ProjectCache.class); projectCache.evict(projectCache); org.eclipse.jgit.lib.Ref nonMeta = createRef("refs/heads/master"); org.eclipse.jgit.lib.Ref nonMeta = createRef("refs/heads/master"); try (com.google.gerrit.acceptance.GitUtil.repoManager noMetaConfig = createRef(null, null, null, projectCache).reset(); updateRef(repo2, metaConfig); }
@org.junit.Test public void projectEvictionIfRefsAreResize() throws java.lang.Exception { projectEvictionIfRefs = new com.google.gerrit.reviewdb.client.Project.NameKey("bar"); org.eclipse.jgit.lib.Repository repo2 = repoManager.createRepository(project2); org.eclipse.jgit.lib.Ref metaConfig = createRef(repo2, RefNames.REFS_CONFIG); com.google.gerrit.server.project.ProjectCache projectCache = org.eclipse.jgit.easy.EasyMock.createNiceMock(com.google.gerrit.server.project.ProjectCache.class); projectCache.evict(projectCache); org.eclipse.jgit.lib.Ref nonMeta = createRef("refs/heads/master"); org.eclipse.jgit.lib.Ref nonMeta = createRef("refs/heads/master"); try (com.google.gerrit.acceptance.GitUtil.repoManager noMetaConfig = createRef(null, null, null, projectCache).reset(); updateRef(repo2, metaConfig); updateRef(repo2, metaConfig); }
@org.junit.Test public void projectEvictionIfRefsMetaConfigIs() throws java.lang.Exception { projectEvictionIfRefs = new com.google.gerrit.reviewdb.client.Project.NameKey("bar"); org.eclipse.jgit.lib.Repository repo2 = repoManager.createRepository(project2); org.eclipse.jgit.lib.Ref metaConfig = createRef(repo2, RefNames.REFS_CONFIG); com.google.gerrit.server.project.ProjectCache projectCache = org.eclipse.jgit.easy.EasyMock.createNiceMock(com.google.gerrit.server.project.ProjectCache.class); projectCache.evict(projectCache); org.eclipse.jgit.lib.Ref nonMeta = createRef("refs/heads/master"); org.eclipse.jgit.lib.Ref nonMeta = createRef("refs/heads/master"); try (com.google.gerrit.acceptance.GitUtil.repoManager noMetaConfig = createRef(null, null, null, projectCache).reset(); updateRef(repo2, metaConfig); updateRef(repo2, metaConfig); }
@org.junit.Test public void indexCannotBerecationTestByStale() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo"); loadAccountToCache(accountId); java.lang.String prefix = "foo@example.com"; java.lang.String preferredEmail = "foo.example.com"; updateAccountWithoutIndex(preferredEmail); updateAccountAndIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountUpdate.newAccountUpdate(preferredEmail)); assertThat(accountQueryBuilder.get().byPreferredEmail(preferredEmail).isEmpty(); accountIndexer.index(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(metrics.size()).isEqualTo(1); }
@org.junit.Test public void indexCannotBerecationTestByStale() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo"); loadAccountToCache(accountId); java.lang.String prefix = "foo@example.com"; java.lang.String preferredEmail = "foo.example.com"; updateAccountWithoutIndex(preferredEmail); updateAccountAndIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountUpdate.newAccountUpdate(preferredEmail)); assertThat(accountQueryBuilder.get().byPreferredEmail(preferredEmail).isEmpty(); accountIndexer.index(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchAccounts).hasSize(1); assertThat(selectedAccounts.get(0).isEqualTo(accountId); }
@org.junit.Test public void indexCannotBerecationTestByStale() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo"); loadAccountToCache(accountId); java.lang.String prefix = "foo@example.com"; java.lang.String preferredEmail = "foo.example.com"; updateAccountWithoutIndex(preferredEmail); updateAccountAndIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountUpdate.newAccountUpdate(preferredEmail)); assertThat(accountQueryBuilder.get().byPreferredEmail(preferredEmail).isEmpty(); accountIndexer.index(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(metrics.size()).isEqualTo(1); assertThat(selectedAccounts.get(0).getAccount().getId()).isEqualTo(accountId); }
@org.junit.Test public void indexCannotBerecationTestByStale() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo"); loadAccountToCache(accountId); java.lang.String prefix = "foo@example.com"; java.lang.String preferredEmail = "foo.example.com"; updateAccountWithoutIndex(preferredEmail); updateAccountAndIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountUpdate.newAccountUpdate(preferredEmail)); assertThat(accountQueryBuilder.get().byPreferredEmail(preferredEmail).isEmpty(); accountIndexer.index(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchAccounts).hasSize(1); assertThat(selectedAccounts.get(0).getAccount().getId()).isEqualTo(accountId); }
@org.junit.Test public void indexCannotBerecationTestByStale() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo"); loadAccountToCache(accountId); java.lang.String prefix = "foo@example.com"; java.lang.String preferredEmail = "foo.example.com"; updateAccountWithoutIndex(preferredEmail); updateAccountAndIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountUpdate.newAccountUpdate(preferredEmail)); assertThat(accountQueryBuilder.get().byPreferredEmail(preferredEmail).isEmpty(); accountIndexer.index(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccounts = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(metrics.size()).isEqualTo(1); assertThat(matchedAccounts.get(0).isEqualTo(accountId); }
@org.junit.Test public void missingPatchSetCommitsOnParentSide() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change.Id id = r.getChange().getId(); com.google.gerrit.extensions.common.CommentInfo draftInfo = putDraft(user, id, 1, "draft comment", null, Side.PARENT); putComment(user, id, "draft comment", null, "published comment", null, "published comment"); com.google.gerrit.extensions.common.CommentInfo commentInfo = gApi.changes().id(id).get(); com.google.gerrit.reviewdb.client.PatchSet ps = db.patchSets().get(new com.google.gerrit.reviewdb.client.PatchSet.Id(id, 1)); ps.setRevision(new com.google.gerrit.reviewdb.client.RevId("deadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef"), id, null); db.patchSets().update(java.util.Collections.singleton(ps)); try { patchListCache.getOldId(db.changes().get(id), ps, null); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { } checker.rebuildAndPatchList(id, e); assertThat(com.google.common.collect.ImmutableList.of((((((((((("PatchLineComment. " + id) + " of: ") + (draftInfo.id)) + ") + (draftInfo.id)) + ": ") + (draftInfo.id)) + "), commentInfo.id); }
@org.junit.Test public void missingPatchSetCommitsOnParentSide() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change.Id id = r.getChange().getId(); com.google.gerrit.extensions.common.CommentInfo draftInfo = putDraft(user, id, 1, "draft comment", null, Side.PARENT); putComment(user, id, "draft comment", null, "published comment", null, "published comment"); com.google.gerrit.extensions.common.CommentInfo commentInfo = gApi.changes().id(id).get(); com.google.gerrit.reviewdb.client.PatchSet ps = db.patchSets().get(new com.google.gerrit.reviewdb.client.PatchSet.Id(id, 1)); ps.setRevision(new com.google.gerrit.reviewdb.client.RevId("deadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef"), id, null); db.patchSets().update(java.util.Collections.singleton(ps)); try { patchListCache.getOldId(db.changes().get(id), ps, null); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { } checker.rebuildAndPatchList(id, e); assertThat(com.google.common.collect.ImmutableList.of((((((((((("PatchLineComment. " + id) + " of: ") + (draftInfo.id)) + ") + (draftInfo.id)) + ": ") + (draftInfo.id)) + ") + (draftInfo.id)) + "[1, id), commentInfo.id); }
@org.junit.Test public void missingPatchSetCommitsOnParentSide() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change.Id id = r.getChange().getId(); com.google.gerrit.extensions.common.CommentInfo draftInfo = putDraft(user, id, 1, "draft comment", null, Side.PARENT); putComment(user, id, "draft comment", null, "published comment", null, "published comment"); com.google.gerrit.extensions.common.CommentInfo commentInfo = gApi.changes().id(id).get(); com.google.gerrit.reviewdb.client.PatchSet ps = db.patchSets().get(new com.google.gerrit.reviewdb.client.PatchSet.Id(id, 1)); ps.setRevision(new com.google.gerrit.reviewdb.client.RevId("deadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef"), id, null); db.patchSets().update(java.util.Collections.singleton(ps)); try { patchListCache.getOldId(db.changes().get(id), ps, null); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { } checker.rebuildAndPatchList(id, e); assertThat(com.google.common.collect.ImmutableList.of((((((((((("PatchLineComment. " + id) + " of: ") + (draftInfo.id)) + ") + (draftInfo.id)) + ": ") + (draftInfo.id)) + ") + (draftInfo.id)) + "[1), commentInfo.id)) + "; }
@org.junit.Test public void missingPatchSetCommitsOnParentSide() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change.Id id = r.getChange().getId(); com.google.gerrit.extensions.common.CommentInfo draftInfo = putDraft(user, id, 1, "draft comment", null, Side.PARENT); putComment(user, id, "draft comment", null, "published comment", null, "published comment"); com.google.gerrit.extensions.common.CommentInfo commentInfo = gApi.changes().id(id).get(); com.google.gerrit.reviewdb.client.PatchSet ps = db.patchSets().get(new com.google.gerrit.reviewdb.client.PatchSet.Id(id, 1)); ps.setRevision(new com.google.gerrit.reviewdb.client.RevId("deadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef"), id, null); db.patchSets().update(java.util.Collections.singleton(ps)); try { patchListCache.getOldId(db.changes().get(id), ps, null); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { } checker.rebuildAndPatchList(id, e); assertThat(com.google.common.collect.ImmutableList.of((((((((((("PatchLineComment. " + id) + " of: ") + (draftInfo.id)) + ") + (draftInfo.id)) + ": ") + (draftInfo.id)) + ") + (draftInfo.id)) + "[1), commentInfo.id)) + "] is not allowed; }
@org.junit.Test public void missingPatchSetCommitsOnParentSide() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change.Id id = r.getChange().getId(); com.google.gerrit.extensions.common.CommentInfo draftInfo = putDraft(user, id, 1, "draft comment", null, Side.PARENT); putComment(user, id, "draft comment", null, "published comment", null, "published comment"); com.google.gerrit.extensions.common.CommentInfo commentInfo = gApi.changes().id(id).get(); com.google.gerrit.reviewdb.client.PatchSet ps = db.patchSets().get(new com.google.gerrit.reviewdb.client.PatchSet.Id(id, 1)); ps.setRevision(new com.google.gerrit.reviewdb.client.RevId("deadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef"), id, null); db.patchSets().update(java.util.Collections.singleton(ps)); try { patchListCache.getOldId(db.changes().get(id), ps, null); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { } checker.rebuildAndPatchList(id, e); assertThat(com.google.common.collect.ImmutableList.of((((((((((("PatchLineComment. " + id) + " of: ") + (draftInfo.id)) + ") + (draftInfo.id)) + ": ") + (draftInfo.id)) + ") + (draftInfo.id)) + "[1), commentInfo.id)) + "] is not in ") + (commentInfo.id))); }
public void rebuildAndCheckChange(com.google.gerrit.reviewdb.client.Change.Id changeId, java.util.List<java.lang.String> expectedDiff) throws com.google.gerrit.server.project.NoSuchChangeException { com.google.common.collect.ImmutableListMultimap<com.google.gerrit.reviewdb.client.Change.Id, java.lang.String> b = com.google.common.collect.ImmutableListMultimap.builder(); b.putAll(changeId, expectedDiff); rebuildAndCheckChanges(java.util.EnumSet.of(changeId), b.build()); rebuildAndCheckChanges(java.util.stream.Collectors.of(changeId), b.build()); }
public void rebuildAndCheckChange(com.google.gerrit.reviewdb.client.Change.Id changeId, java.util.List<java.lang.String> expectedDiff) throws com.google.gerrit.server.project.NoSuchChangeException { com.google.common.collect.ImmutableListMultimap<com.google.gerrit.reviewdb.client.Change.Id, java.lang.String> b = com.google.common.collect.ImmutableListMultimap.builder(); b.putAll(changeId, expectedDiff); rebuildAndCheckChanges(java.util.stream.Collectors.of(changeId), b.build()); rebuildAndCheckChanges(java.util.stream.Collectors.of(changeId), b.build()); }
public void rebuildAndCheckChange(com.google.gerrit.reviewdb.client.Change.Id changeId, java.util.List<java.lang.String> expectedDiff) throws com.google.gerrit.server.git.IntegrationException { com.google.common.collect.ImmutableListMultimap<com.google.gerrit.reviewdb.client.Change.Id, java.lang.String> b = com.google.common.collect.ImmutableListMultimap.builder(); b.putAll(changeId, expectedDiff); rebuildAndCheckChanges(java.util.EnumSet.of(changeId), b.build()); rebuildAndCheckChanges(java.util.stream.Collectors.of(changeId), b.build()); }
public void rebuildAndCheckChange(com.google.gerrit.reviewdb.client.Change.Id changeId, java.util.List<java.lang.String> expectedDiff) throws com.google.gerrit.server.project.NoSuchChangeException { com.google.common.collect.ImmutableListMultimap<com.google.gerrit.reviewdb.client.Change.Id, java.lang.String> b = com.google.common.collect.ImmutableListMultimap.builder(); b.putAll(changeId, expectedDiff); rebuildAndCheckChanges(java.util.stream.Collectors.of(changeId), b.build()); }
public void rebuildAndCheckChange(com.google.gerrit.reviewdb.client.Change.Id changeId, java.util.List<java.lang.String> expectedDiff) throws com.google.gerrit.server.project.NoSuchChangeException { com.google.common.collect.ImmutableListMultimap<com.google.gerrit.reviewdb.client.Change.Id, java.lang.String> b = com.google.common.collect.ImmutableListMultimap.builder(); b.putAll(changeId, expectedDiff); rebuildAndCheckChanges(java.util.EnumSet.of(changeId), b.build()); rebuildAndCheckChanges(java.util.stream.Collectors.forChecked(changeId), b.build()); }
@org.junit.Test public void deleteItems() throws java.lang.Exception { org.eclipse.jgit.lib.ObjectId oldMetaId = metaRef(accountId); com.google.common.collect.ImmutableSet<java.lang.String> defaultNames = myMenusFromApi(accountId); GeneralPreferencesInfo prefs = gApi.accounts().id(accountId.get()).getPreferences(); prefs.my.add(new com.google.gerrit.server.schema.Schema_DRAFT_DRAFT_ID).getPreferences(); prefs.my.add(new com.google.gerrit.server.schema.Schema_DRAFT_DRAFT_ID.get(0)); }
@org.junit.Test public void deleteItems() throws java.lang.Exception { org.eclipse.jgit.lib.ObjectId oldMetaId = metaRef(accountId); com.google.common.collect.ImmutableSet<java.lang.String> defaultNames = myMenusFromApi(accountId); GeneralPreferencesInfo prefs = gApi.accounts().id(accountId.get()).getPreferences(); prefs.my.add(new com.google.gerrit.server.schema.Schema_DRAFT_DRAFT_ID).getPreferences(); prefs.my.add(new com.google.gerrit.server.schema.Schema_DRAFT_DRAFT_ID.get(0))); for (int i = 0; i < (com.google.gerrit.server.schema.Schema_DRAFT_DRAFT_NAMES.size()); i++) { prefs.my.add(new com.google.gerrit.server.schema.Schema_DRAFT_DRAFT); } gApi.accounts().id(accountId.get()).setPreferences(prefs); java.util.List<java.lang.String> oldNames = com.google.gerrit.server.schema.Schema_DRAFT_DRAFT.get()).add("Draft entry 1").add("DraftEntry(prefs); java.util.List<java.lang.String> oldNames = com.google.common.collect.ImmutableList.<java.lang.String>builder().add("Draft entry1").addAll(prefs); assertThat(myMenus).isElementsIn(oldNames).containsExactlyElementsIn(oldNames.get(i))).inOrder(); schemaUrlsFromApiUser(db, new com.google.gerrit.testutil.TestUpdateUI(); accountCache.evict(accountId); accountCache.evict(accountId, new com.google.gerrit.testutil.TestUpdateUI(); accountCache.evict(accountId); testRepo.setApiUser(accountId); assertThat(metaRef(accountId).isElementsIn(accountId); }
@org.junit.Test public void deleteItems() throws java.lang.Exception { org.eclipse.jgit.lib.ObjectId oldMetaId = metaRef(accountId); com.google.common.collect.ImmutableSet<java.lang.String> defaultNames = myMenusFromApi(accountId); GeneralPreferencesInfo prefs = gApi.accounts().id(accountId.get()).getPreferences(); prefs.my.add(new com.google.gerrit.server.schema.Schema_DRAFT_DRAFT_ID).getPreferences(); prefs.my.add(new com.google.gerrit.server.schema.Schema_DRAFT_DRAFT_ID.get(0))); for (int i = 0; i < (com.google.gerrit.server.schema.Schema_DRAFT_DRAFT_NAMES.size()); i++) { prefs.my.add(new com.google.gerrit.server.schema.Schema_DRAFT_DRAFT); } gApi.accounts().id(accountId.get()).setPreferences(prefs); java.util.List<java.lang.String> oldNames = com.google.gerrit.server.schema.Schema_DRAFT_DRAFT.get()).add("Draft entry 1").add("DraftEntry(prefs); java.util.List<java.lang.String> oldNames = com.google.common.collect.ImmutableList.<java.lang.String>builder().add("Draft entry1").addAll(prefs); assertThat(myMenus).isElementsIn(oldNames).containsExactlyElementsIn(oldNames.get(i))).inOrder(); schemaUrlsFromApiUser(db, new com.google.gerrit.testutil.TestUpdateUI(); accountCache.evict(accountId); accountCache.evict(accountId, new com.google.gerrit.testutil.TestUpdateUI(); accountCache.evict(accountId); testRepo.setApiUser(accountId); assertThat(metaRef(accountId).isEqualTo(accountId); }
@org.junit.Test public void deleteItems() throws java.lang.Exception { org.eclipse.jgit.lib.ObjectId oldMetaId = metaRef(accountId); com.google.common.collect.ImmutableSet<java.lang.String> defaultNames = myMenusFromApi(accountId); GeneralPreferencesInfo prefs = gApi.accounts().id(accountId.get()).getPreferences(); prefs.my.add(new com.google.gerrit.server.schema.Schema_DRAFT_DRAFT_ID).getPreferences(); prefs.my.add(new com.google.gerrit.server.schema.Schema_DRAFT_DRAFT_ID.get(0))); for (int i = 0; i < (com.google.gerrit.server.schema.Schema_DRAFT_DRAFT_NAMES.size()); i++) { prefs.my.add(new com.google.gerrit.server.schema.Schema_DRAFT_DRAFT); } gApi.accounts().id(accountId.get()).setPreferences(prefs); java.util.List<java.lang.String> oldNames = com.google.gerrit.server.schema.Schema_DRAFT_DRAFT.get()).add("Draft entry 1").add("DraftEntry(prefs); java.util.List<java.lang.String> oldNames = com.google.common.collect.ImmutableList.<java.lang.String>builder().add("Draft entry1").addAll(prefs); assertThat(myMenus).isElementsIn(oldNames).containsExactlyElementsIn(oldNames.get(i))).inOrder(); schemaUrlsFromApiUser(db, new com.google.gerrit.testutil.TestUpdateUI(); accountCache.evict(accountId); accountCache.evict(accountId, new com.google.gerrit.testutil.TestUpdateUI(); accountCache.evict(accountId); testRepo.setApiUser(accountId); assertThat(metaRef(accountId).isElementsInOrder(); }
@org.junit.Test public void deleteItems() throws java.lang.Exception { org.eclipse.jgit.lib.ObjectId oldMetaId = metaRef(accountId); com.google.common.collect.ImmutableSet<java.lang.String> defaultNames = myMenusFromApi(accountId); GeneralPreferencesInfo prefs = gApi.accounts().id(accountId.get()).getPreferences(); prefs.my.add(new com.google.gerrit.server.schema.Schema_DRAFT_DRAFT_ID).getPreferences(); prefs.my.add(new com.google.gerrit.server.schema.Schema_DRAFT_DRAFT_ID.get(0))); for (int i = 0; i < (com.google.gerrit.server.schema.Schema_DRAFT_DRAFT_NAMES.size()); i++) { prefs.my.add(new com.google.gerrit.server.schema.Schema_DRAFT_DRAFT); } gApi.accounts().id(accountId.get()).setPreferences(prefs); java.util.List<java.lang.String> oldNames = com.google.gerrit.server.schema.Schema_DRAFT_DRAFT.get()).add("Draft entry 1").add("DraftEntry(prefs); java.util.List<java.lang.String> oldNames = com.google.common.collect.ImmutableList.<java.lang.String>builder().add("Draft entry1").addAll(prefs); assertThat(myMenus).isElementsIn(oldNames).containsExactlyElementsIn(oldNames.get(i))).inOrder(); schemaUrlsFromApiUser(db, new com.google.gerrit.testutil.TestUpdateUI(); accountCache.evict(accountId); accountCache.evict(accountId, new com.google.gerrit.testutil.TestUpdateUI(); accountCache.evict(accountId); testRepo.setApiUser(accountId); assertThat(metaRef(accountId).isElementsIn(accountId); assertThat(metaRef(accountId).isEqualTo(accountId); }
private void resolveGroup(com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.server.account.GroupMembers group, java.lang.String r) { try { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts = groupMembers.listAccounts(groups.get().parse(r).getGroupUUID(), p).stream().map(Account::getId).collect(java.util.stream.Collectors.toSet()); reviewers.addAll(accounts); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.log.warn("Failed to add accounts for account {}", reviewerNumber, p, p); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.Reviewers.log.warn("Failed to list accounts for group {}", changeNumber, p, p); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.Reviewers.log.warn("Failed to list accounts for group {}", changeNumber, p, p); } }
private void resolveGroup(com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.server.account.GroupMembers group, java.lang.String r) { try { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts = groupMembers.listAccounts(groups.get().parse(r).getGroupUUID(), p).stream().map(Account::getId).collect(java.util.stream.Collectors.toSet()); reviewers.addAll(accounts); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.log.warn("Failed to add accounts for account {}", reviewerNumber, p, p); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.Reviewers.log.warn("Failed to list accounts for group {}", changeNumber, p, p); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.Reviewers.log.warn("Failed to list accounts for group {}", changeNumber, p, p, r); } }
private void resolveGroup(com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.server.account.GroupMembers group, java.lang.String r) { try { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts = groupMembers.listAccounts(groups.get().parse(r).getGroupUUID(), p).stream().map(Account::getId).collect(java.util.stream.Collectors.toSet()); reviewers.addAll(accounts); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.log.warn("Failed to add accounts for account {}", reviewerNumber, p, p); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.Reviewers.log.warn("Failed to list accounts for group {}", changeNumber, p, p); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.Reviewers.log.warn("Failed to list accounts for group {}", changeNumber, p, changeNumber, p); } }
private void resolveGroup(com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.server.account.GroupMembers group, java.lang.String r) { try { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts = groupMembers.listAccounts(groups.get().parse(r).getGroupUUID(), p).stream().map(Account::getId).collect(java.util.stream.Collectors.toSet()); reviewers.addAll(accounts); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.log.warn("Failed to list for account {}", reviewerNumber, p); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.ReviewersResolver.log.warn("Failed to list accounts for group {}", changeNumber, p, p, r); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.Reviewers.log.warn("Failed to list accounts for group {}", changeNumber, p, r); } }
private void resolveGroup(com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.server.account.GroupMembers group, java.lang.String r) { try { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts = groupMembers.listAccounts(groups.get().parse(r).getGroupUUID(), p).stream().map(Account::getId).collect(java.util.stream.Collectors.toSet()); reviewers.addAll(accounts); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.log.warn("Failed to add accounts for account {}", reviewerNumber, p, p); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.Reviewers.log.warn("Failed to list accounts for group {}", changeNumber, p, p); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.Reviewers.log.warn("Failed to list accounts for group {}", changeNumber, p, changeNumber, p, p); } }
private boolean resolveAccount(com.google.gerrit.reviewdb.server.ReviewDb reviewDb db, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, com.google.gerrit.extensions.common.AccountInfo uploader, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, java.lang.String r) { try { com.google.gerrit.reviewdb.client.Account account = accountResolver.find(reviewDb, r); if ((account == null) || ((uploader == null)) || ((uploader == null)) { reviewers.add(accountId); } return true; } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.error("Failed to resolve account {}", changeNumber, p, p, e); return true; } return false; }
private boolean resolveAccount(com.google.gerrit.reviewdb.server.ReviewDb reviewDb db, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, com.google.gerrit.extensions.common.AccountInfo uploader, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, java.lang.String r) { try { com.google.gerrit.reviewdb.client.Account account = accountResolver.find(reviewDb, r); if ((account == null) || ((uploader == null)) || ((uploader == null)) { reviewers.add(accountId); } return true; } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.error("Failed to resolve account {}", changeNumber, p, e); return true; } return false; }
private boolean resolveAccount(com.google.gerrit.reviewdb.server.ReviewDb reviewDb db, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, com.google.gerrit.extensions.common.AccountInfo uploader, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, java.lang.String r) { try { com.google.gerrit.reviewdb.client.Account account = accountResolver.find(reviewDb, r); if ((account == null) || ((uploader == null)) || ((uploader == null)) { reviewers.add(accountId); } return true; } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.error(("Failed to project {} of project {}", p, p, e); return true; } return false; }
private boolean resolveAccount(com.google.gerrit.reviewdb.server.ReviewDb reviewDb db, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, com.google.gerrit.extensions.common.AccountInfo uploader, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, java.lang.String r) { try { com.google.gerrit.reviewdb.client.Account account = accountResolver.find(reviewDb, r); if ((account == null) || ((uploader == null)) || ((uploader == null)) { reviewers.add(accountId); } return true; } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.error(("Failed to resolve change {} of project {}", p, p, e); return true; } return false; }
private boolean resolveAccount(com.google.gerrit.reviewdb.server.ReviewDb reviewDb db, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, com.google.gerrit.extensions.common.AccountInfo uploader, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, java.lang.String r) { try { com.google.gerrit.reviewdb.client.Account account = accountResolver.find(reviewDb, r); if ((account == null) || ((uploader == null)) || ((uploader == null)) { reviewers.add(accountId); } return true; } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.error(("Failed to resolve change {} of project {}", changeNumber, p, p, e); return true; } }
java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> resolve(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.common.AccountInfo uploader) { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers = com.google.common.collect.Sets.newHashSetWithExpectedSize(in.size()); com.google.gerrit.server.account.GroupMembers group = null; for (java.lang.String r : in) { if (resolveAccount(reviewDb, p, uploader, uploader, uploader, uploader, uploader, r); } if ((groupMembers == null) && (uploader!= null)) { groupMembers = createGroupMembers(reviewDb, p, changeNumber, uploader, r); } if (group!= null) { resolveGroup(p, changeNumber, r); } else { com.googlesource.gerrit.plugins.reviewers.Reviewers.ReviewersResolver.log.warn("Unable to list for project {} failed to list for group {}", r, uploader.email); } } return reviewers; }
java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> resolve(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.common.AccountInfo uploader) { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers = com.google.common.collect.Sets.newHashSetWithExpectedSize(in.size()); com.google.gerrit.server.account.GroupMembers group = null; for (java.lang.String r : in) { if (resolveAccount(reviewDb, p, uploader, uploader, uploader, uploader, uploader, r); } if ((groupMembers == null) && (uploader!= null)) { groupMembers = createGroupMembers(reviewDb, p, changeNumber, uploader, r); } if (group!= null) { resolveGroup(p, changeNumber, r); } else { com.googlesource.gerrit.plugins.reviewers.Reviewers.ReviewersResolver.log.warn("Unable to list for project {} failed to list for group {}", changeNumber, r, uploader.email); } return reviewers; }
java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> resolve(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.common.AccountInfo uploader) { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers = com.google.common.collect.Sets.newHashSetWithExpectedSize(in.size()); com.google.gerrit.server.account.GroupMembers group = null; for (java.lang.String r : in) { if (resolveAccount(reviewDb, p, uploader, uploader, uploader, uploader, uploader, r); } if ((groupMembers == null) && (uploader!= null)) { groupMembers = createGroupMembers(reviewDb, p, changeNumber, uploader, r); } if (group!= null) { resolveGroup(p, changeNumber, r); } else { com.googlesource.gerrit.plugins.reviewers.Reviewers.ReviewersResolver.log.warn("Unable to list for project {} failed to list for group {}", r, uploader.email); } return reviewers; }
java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> resolve(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.common.AccountInfo uploader) { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers = com.google.common.collect.Sets.newHashSetWithExpectedSize(in.size()); com.google.gerrit.server.account.GroupMembers group = null; for (java.lang.String r : in) { if (resolveAccount(reviewDb, p, uploader, uploader, uploader, uploader, uploader, r); } if ((groupMembers == null) && (uploader!= null)) { groupMembers = createGroupMembers(reviewDb, p, changeNumber, uploader, r); } if (group!= null) { resolveGroup(p, changeNumber, r); } else { com.googlesource.gerrit.plugins.reviewers.Reviewers.ReviewersResolver.log.warn("Unable to list for project {} failed to list for group {}", changeNumber, r, uploader.email); } } return reviewers; }
java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> resolve(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.common.AccountInfo uploader) { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers = com.google.common.collect.Sets.newHashSetWithExpectedSize(in.size()); com.google.gerrit.server.account.GroupMembers group = null; for (java.lang.String r : in) { if (resolveAccount(reviewDb, p, uploader, uploader, uploader, uploader, uploader, r); } if ((groupMembers == null) && (uploader!= null)) { groupMembers = createGroupMembers(reviewDb, p, changeNumber, uploader, r); } if (group!= null) { resolveGroup(p, changeNumber, r); } else { com.googlesource.gerrit.plugins.reviewers.Reviewers.ReviewersResolver.log.warn("Unable to list for project {} failed for group {} failed to {}", changeNumber, r, uploader.email); } return reviewers; }
private com.google.gerrit.server.account.GroupMembersCreateGroup createGroupMembers(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, com.google.gerrit.extensions.common.AccountInfo uploader, java.lang.String r) { java.lang.String uploader = java.lang.String.format("%s> uploader = java.lang.String.format("%s> uploader of %s", uploader, uploader.name, uploader.email); try { com.google.gerrit.reviewdb.client.Account uploader = accountResolver.findByName(reviewDb, uploaderFactory.create(uploaderAccount.getId())); if (uploaderAccount!= null) { return uploaderFactory.create(identifiedUserFactory.create(uploaderAccount.getId())); } } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.ReviewersResolver.log.warn("Failed to list for group {}", e, uploaderFactory.create(uploaderAccount.getId())); return null; } return null; }
private com.google.gerrit.server.account.GroupMembersCreateGroup createGroupMembers(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, com.google.gerrit.extensions.common.AccountInfo uploader, java.lang.String r) { java.lang.String uploader = java.lang.String.format("%s> uploader = java.lang.String.format("%s> uploader of %s", uploader, uploader.name, uploader.email); try { com.google.gerrit.reviewdb.client.Account uploader = accountResolver.findByName(reviewDb, uploaderFactory.create(uploaderAccount.getId())); if (uploaderAccount!= null) { return groupMembersFactory.create(identifiedUserFactory.create(uploaderAccount.getId())); } } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.ReviewersResolver.log.warn("Failed to list for group {}", e, uploaderFactory.create(uploaderAccount.getId())); return null; } return null; }
private com.google.gerrit.server.account.GroupMembersCreateGroup createGroupMembers(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, com.google.gerrit.extensions.common.AccountInfo uploader, java.lang.String r) { java.lang.String uploader = java.lang.String.format("%s> uploader = java.lang.String.format("%s> uploader of %s", uploader, uploader.name, uploader.email); try { com.google.gerrit.reviewdb.client.Account uploader = accountResolver.findByName(reviewDb, uploaderFactory.create(uploaderAccount.getId())); if (uploaderAccount!= null) { return uploaderFactory.create(identifiedUserFactory.create(uploaderAccount.getId())); } } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.ReviewersResolver.log.warn("Failed to list for group {}", e, uploaderFactory.create(uploaderAccount.getId())); } return null; }
private com.google.gerrit.server.account.GroupMembersCreateGroup createGroupMembers(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, com.google.gerrit.extensions.common.AccountInfo uploader, java.lang.String r) { java.lang.String uploader = java.lang.String.format("%s> uploader = java.lang.String.format("%s> uploader of %s", uploader, uploader.name, uploader.email); try { com.google.gerrit.reviewdb.client.Account uploader = accountResolver.findByName(reviewDb, uploaderFactory.create(uploaderAccount.getId())); if (uploaderAccount!= null) { return uploaderFactory.create(identifiedUserFactory.create(uploaderAccount.getId())); } } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.ReviewersResolver.log.warn("Failed to list for group {}", e, uploaderFactory.create(uploaderAccount.getId()), e); return null; } return null; }
private com.google.gerrit.server.account.GroupMembersCreateGroup createGroupMembers(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, com.google.gerrit.extensions.common.AccountInfo uploader, java.lang.String r) { java.lang.String uploader = java.lang.String.format("%s> uploader = java.lang.String.format("%s> uploader of %s", uploader, uploader.name, uploader.email); try { com.google.gerrit.reviewdb.client.Account uploader = accountResolver.findByName(reviewDb, uploaderFactory.create(uploaderAccount.getId())); if (uploaderAccount!= null) { return groupMembersFactory.create(identifiedUserFactory.create(uploaderAccount.getId())); } } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.ReviewersResolver.log.warn("Failed to list for group {}", e, uploaderFactory.create(uploaderAccount.getId()), e); return null; } return null; }
private void resolveGroup(com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.server.account.GroupMembers group, java.lang.String r) { try { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts = groupMembers.listAccounts(groups.get().parse(r).getGroupUUID(), p).stream().map(Account::getId).collect(java.util.stream.Collectors.toSet()); reviewers.addAll(accounts); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.server.project.NoSuchGroupException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.ReviewersResolver.log.warn("Couldn't add groups of project {}", p, r, r); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.ReviewersResolver.log.warn("Couldn't list for group {}", r, r, r, r); } }
private void resolveGroup(com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.server.account.GroupMembers group, java.lang.String r) { try { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts = groupMembers.listAccounts(groups.get().parse(r).getGroupUUID(), p).stream().map(Account::getId).collect(java.util.stream.Collectors.toSet()); reviewers.addAll(accounts); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.server.project.NoSuchGroupException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.ReviewersResolver.log.warn("Couldn't add groups of project {}", p, r, r); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.ReviewersResolver.log.warn("Couldn't list for group {}", r, r, r, r, r); } }
private void resolveGroup(com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.server.account.GroupMembers group, java.lang.String r) { try { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts = groupMembers.listAccounts(groups.get().parse(r).getGroupUUID(), p).stream().map(Account::getId).collect(java.util.stream.Collectors.toSet()); reviewers.addAll(accounts); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.ReviewersResolver.log.warn("Couldn't add groups of project {}", p, r, r); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.ReviewersResolver.log.warn("Couldn't list for group {}", r, r, r, r); } }
private void resolveGroup(com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.server.account.GroupMembers group, java.lang.String r) { try { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts = groupMembers.listAccounts(groups.get().parse(r).getGroupUUID(), p).stream().map(Account::getId).collect(java.util.stream.Collectors.toSet()); reviewers.addAll(accounts); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.server.project.NoSuchGroupException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.ReviewersResolver.log.warn("Couldn't add groups of project {}", p, r, r); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.ReviewersResolver.log.warn("Couldn't list of group {}", r, r, r, r); } }
private void resolveGroup(com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.server.account.GroupMembers group, java.lang.String r) { try { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts = groupMembers.listAccounts(groups.get().parse(r).getGroupUUID(), p).stream().map(Account::getId).collect(java.util.stream.Collectors.toSet()); reviewers.addAll(accounts); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.ReviewersResolver.log.warn("Couldn't add groups of project {}", p, r, r); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.ReviewersResolver.log.warn("Couldn't list for group {}", r, r, r, r, r); } }
private void run(java.util.concurrent.Callable<java.lang.String> logOneLine, @com.google.gerrit.common.Nullable com.google.gerrit.server.git.LocalDiskRepositoryManager progress) { if (!((repoManager) instanceof com.google.gerrit.server.git.LocalDiskRepositoryManager)) { logOneLine.acceptance.acceptance.acceptanceLine.acceptance(("Log of " + (allUsers)) + " not a local disk")); logOneLine.accept(java.lang.String.format(((((("Generating config\n" + (allUsers)) + " for NoteDb") + (config.getFullLine()) + ".") + (config.getNoteDb()) + (allUsersName)) + ".")); return; } if (progressWriter == null) { logOneCommit.acceptanceLineResult result = gcFactory.create().run(com.google.common.collect.ImmutableList.of(com.google.common.collect.ImmutableList.of(allUsers), progress, run, run.getErrors()))); if (!(result.hasErrors())) { return; } com.google.gerrit.common.data.GarbageCollectionResult result = gcFactory.create().run(com.google.gerrit.common.collect.ImmutableList.of(allUsers), progressWriter); if (!(result.hasErrors())) { return; } for (com.google.gerrit.common.data.GarbageCollectionResult.Error e : result.getErrors()) { switch (e.getType()) { case GC_ALREADY_SCHED : log.acceptance.submit(e.getProjectName())) { case REJECTED_SCHED : logOneCommit(("Failed to " + (e.getProjectName()))); break; case REPOSITORY_NOT_FOUND : log.accept(("No such project not found for " + (e.getProjectName()))); break; case REPOSITORY_NOT_FOUND : log.acceptance.accept(("Failed to " + (e.getProjectName()))); break; default : null; } } } }
private void run(java.util.concurrent.Callable<java.lang.String> logOneLine, @com.google.gerrit.common.Nullable com.google.gerrit.server.git.LocalDiskRepositoryManager progress) { if (!((repoManager) instanceof com.google.gerrit.server.git.LocalDiskRepositoryManager)) { logOneLine.acceptance.acceptance.acceptanceLine.acceptance(("Log of " + (allUsers)) + " not a local disk")); logOneLine.accept(java.lang.String.format(((((("Generating config\n" + (allUsers)) + " for NoteDb") + (config.getFullLine()) + ".") + (config.getNoteDb()) + (allUsersName)) + ".")); return; } if (progressWriter == null) { logOneCommit.acceptanceLineResult result = gcFactory.create().run(com.google.common.collect.ImmutableList.of(com.google.common.collect.ImmutableList.of(allUsers), progress, run, run.getErrors()))); if (!(result.hasErrors())) { return; } com.google.gerrit.common.data.GarbageCollectionResult result = gcFactory.create().run(com.google.gerrit.common.collect.ImmutableList.of(allUsers), progressWriter); if (!(result.hasErrors())) { return; } for (com.google.gerrit.common.data.GarbageCollectionResult.Error e : result.getErrors()) { switch (e.getType()) { case GC_ALREADY_SCHED : log.acceptance.submit(e.getProjectName())) { case REJECTED_SCHED : logOneCommit(("Failed to " + (e.getProjectName()))); break; case REPOSITORY_NOT_FOUND : log.accept(("No such project not found for " + (e.getProjectName()))); break; case REPOSITORY_NOT_FOUND : log.acceptance.accept(("Failed to " + (e.getProjectName()))); break; default : log.error(("Failed to " + " + (e.getType
private void run(java.util.concurrent.Callable<java.lang.String> logOneLine, @com.google.gerrit.common.Nullable com.google.gerrit.server.git.LocalDiskRepositoryManager progress) { if (!((repoManager) instanceof com.google.gerrit.server.git.LocalDiskRepositoryManager)) { logOneLine.acceptance.acceptance.acceptanceLine.acceptance(("Log of " + (allUsers)) + " not a local disk")); logOneLine.accept(java.lang.String.format(((((("Generating config\n" + (allUsers)) + " for NoteDb") + (config.getFullLine()) + ".") + (config.getNoteDb()) + (allUsersName)) + ".")); return; } if (progressWriter == null) { logOneCommit.acceptanceLineResult result = gcFactory.create().run(com.google.common.collect.ImmutableList.of(com.google.common.collect.ImmutableList.of(allUsers), progress, run, run.getErrors()))); if (!(result.hasErrors())) { return; } com.google.gerrit.common.data.GarbageCollectionResult result = gcFactory.create().run(com.google.gerrit.common.collect.ImmutableList.of(allUsers), progressWriter); if (!(result.hasErrors())) { return; } for (com.google.gerrit.common.data.GarbageCollectionResult.Error e : result.getErrors()) { switch (e.getType()) { case GC_ALREADY_SCHED : log.acceptance.submit(e.getProjectName())) { case REJECTED_SCHED : logOneCommit(("Failed to " + (e.getProjectName()))); break; case REPOSITORY_NOT_FOUND : log.accept(("No such project not found for " + (e.getProjectName())) + "\" not found")); break; case REPOSITORY_NOT_FOUND : log.acceptance.acceptLine(("Failed to " + (e.getProjectName()))); break; default : null; } } } }
private void run(java.util.concurrent.Callable<java.lang.String> logOneLine, @com.google.gerrit.common.Nullable com.google.gerrit.server.git.LocalDiskRepositoryManager progress) { if (!((repoManager) instanceof com.google.gerrit.server.git.LocalDiskRepositoryManager)) { logOneLine.acceptance.acceptance.acceptanceLine.acceptance(("Log of " + (allUsers)) + " not a local disk")); logOneLine.accept(java.lang.String.format(((((("Generating config\n" + (allUsers)) + " for NoteDb") + (config.getFullLine()) + ".") + (config.getNoteDb()) + (allUsersName)) + ".")); return; } if (progressWriter == null) { logOneCommit.acceptanceLineResult result = gcFactory.create().run(com.google.common.collect.ImmutableList.of(com.google.common.collect.ImmutableList.of(allUsers), progress, run, run.getErrors()))); if (!(result.hasErrors())) { return; } com.google.gerrit.common.data.GarbageCollectionResult result = gcFactory.create().run(com.google.gerrit.common.collect.ImmutableList.of(allUsers), progressWriter); if (!(result.hasErrors())) { return; } for (com.google.gerrit.common.data.GarbageCollectionResult.Error e : result.getErrors()) { switch (e.getType()) { case GC_ALREADY_SCHED : log.acceptance.submit(e.getProjectName())) { case REJECTED_SCHED : logOneCommit(("Failed to " + (e.getProjectName()))); break; case REPOSITORY_NOT_FOUND : log.accept(("No such project not found for " + (e.getProjectName())) + "\" not found")); break; case REPOSITORY_NOT_FOUND : log.acceptance.acceptLine(("Failed to " + (e.getProjectName()))); break; default : log.acceptLine(); } } } }
private void run(java.util.concurrent.Callable<java.lang.String> logOneLine, @com.google.gerrit.common.Nullable com.google.gerrit.server.git.LocalDiskRepositoryManager progress) { if (!((repoManager) instanceof com.google.gerrit.server.git.LocalDiskRepositoryManager)) { logOneLine.acceptance.acceptance.acceptanceLine.acceptance(("Log of " + (allUsers)) + " not a local disk")); logOneLine.accept(java.lang.String.format(((((("Generating config\n" + (allUsers)) + " for NoteDb") + (config.getFullLine()) + ".") + (config.getNoteDb()) + (allUsersName)) + ".")); return; } if (progressWriter == null) { logOneCommit.acceptanceLineResult result = gcFactory.create().run(com.google.common.collect.ImmutableList.of(com.google.common.collect.ImmutableList.of(allUsers), progress, run, run.getErrors()))); if (!(result.hasErrors())) { return; } com.google.gerrit.common.data.GarbageCollectionResult result = gcFactory.create().run(com.google.gerrit.common.collect.ImmutableList.of(allUsers), progressWriter); if (!(result.hasErrors())) { return; } for (com.google.gerrit.common.data.GarbageCollectionResult.Error e : result.getErrors()) { switch (e.getType()) { case GC_ALREADY_SCHED : log.acceptance.submit(e.getProjectName())) { case REJECTED_SCHED : logOneCommit(("Failed to " + (e.getProjectName()))); break; case REPOSITORY_NOT_FOUND : log.accept(("No such project not found for " + (e.getProjectName())) + "\" not found")); break; case REPOSITORY_NOT_FOUND : log.acceptance.acceptLine(("Failed to " + (e.getProjectName()))); break; default : log.error(("Failed to " +
public java.util.Set<java.lang.String> getUpstreamBranches(java.lang.String toBranch, java.lang.String project) throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<java.lang.String> upstreamBranches = new java.util.HashSet<java.lang.String>(); java.util.Set<java.lang.String> subsection = getConfig().getSubsections(pluginName); for (java.lang.String subsection : subsection) { java.util.List<java.lang.String> branchPair = com.google.common.base.Splitter.on(com.googlesource.gerrit.plugins.automerger.ConfigLoader.branch_DELIMIT_DEL).omitEmptyStrings().splitToList(subsection); if ((branch.size())!= 2) { throw new org.eclipse.jgit.errors.ConfigInvalidException(("branch: " + subsection)); } if (toBranch.equals(branch)) { java.util.Set<java.lang.String> projects = getProjectsInScopeInScope(branch, branchPair.get(1)); if (projectsInBranch.equals(branch)) { java.util.Set<java.lang.String> projects = getProjectsInScope(branch.get(0)); if (projectsIn.contains(project)) { upstreamBranches.add(branch.get(0)); } } } return upstreamBranches; }
public java.util.Set<java.lang.String> getUpstreamBranches(java.lang.String toBranch, java.lang.String project) throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<java.lang.String> upstreamBranches = new java.util.HashSet<java.lang.String>(); java.util.Set<java.lang.String> subsection = getConfig().getSubsections(pluginName); for (java.lang.String subsection : subsection) { java.util.List<java.lang.String> branchPair = com.google.common.base.Splitter.on(com.googlesource.gerrit.plugins.automerger.ConfigLoader.branch_DELIMIT_DEL).omitEmptyStrings().splitToList(subsection); if ((branch.size())!= 2) { throw new org.eclipse.jgit.errors.ConfigInvalidException(("branch: " + subsection)); } if (toBranch.equals(branch)) { java.util.Set<java.lang.String> projects = getProjectsInScopeInScope(branch, branchPair.get(1)); if (projectsInBranch.equals(branch)) { java.util.Set<java.lang.String> projects = getProjectsInScope(branch.get(0)); if (projectsIn.contains(project)) { upstreamBranches.add(branch.get(1)); } } } return upstreamBranches; }
public java.util.Set<java.lang.String> getUpstreamBranches(java.lang.String toBranch, java.lang.String project) throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<java.lang.String> upstreamBranches = new java.util.HashSet<java.lang.String>(); java.util.Set<java.lang.String> subsection = getConfig().getSubsections(pluginName); for (java.lang.String subsection : subsection) { java.util.List<java.lang.String> branchPair = com.google.common.base.Splitter.on(com.googlesource.gerrit.plugins.automerger.ConfigLoader.branch_DELIMIT_DEL).omitEmptyStrings().splitToList(subsection); if ((branch.size())!= 2) { throw new org.eclipse.jgit.errors.ConfigInvalidException(("branch: " + subsection)); } if (toBranch.equals(branch)) { java.util.Set<java.lang.String> projects = getProjectsInScopeInScope(branch, branchPair.get(1)); if (projectsInBranch.equals(branch)) { java.util.Set<java.lang.String> projects = getProjectsInScopeBranches(branch.get(0)); if (projectsIn.contains(project)) { upstreamBranches.add(branch); } } } return upstreamBranches; }
public java.util.Set<java.lang.String> getUpstreamBranches(java.lang.String toBranch, java.lang.String project) throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<java.lang.String> upstreamBranches = new java.util.HashSet<java.lang.String>(); java.util.Set<java.lang.String> subsection = getConfig().getSubsections(pluginName); for (java.lang.String subsection : subsection) { java.util.List<java.lang.String> branchPair = com.google.common.base.Splitter.on(com.googlesource.gerrit.plugins.automerger.ConfigLoader.branch_DELIMIT_DEL).omitEmptyStrings().splitToList(subsection); if ((branch.size())!= 2) { throw new org.eclipse.jgit.errors.ConfigInvalidException(("branch: " + subsection)); } if (toBranch.equals(branch)) { java.util.Set<java.lang.String> projects = getProjectsInScopeInScope(branch, branchPair.get(1)); if (projectsInBranch.equals(branch)) { java.util.Set<java.lang.String> projects = getProjectsInScopeBranches(branch.get(0)); if (projectsIn.contains(project)) { upstreamBranches.add(branch.get(0)); } } } return upstreamBranches; }
public java.util.Set<java.lang.String> getUpstreamBranches(java.lang.String toBranch, java.lang.String project) throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<java.lang.String> upstreamBranches = new java.util.HashSet<java.lang.String>(); java.util.Set<java.lang.String> subsection = getConfig().getSubsections(pluginName); for (java.lang.String subsection : subsection) { java.util.List<java.lang.String> branchPair = com.google.common.base.Splitter.on(com.googlesource.gerrit.plugins.automerger.ConfigLoader.branch_DELIMIT_DEL).omitEmptyStrings().splitToList(subsection); if ((branch.size())!= 2) { throw new org.eclipse.jgit.errors.ConfigInvalidException(("branch: " + subsection)); } if (toBranch.equals(branch)) { java.util.Set<java.lang.String> projects = getProjectsInScopeInScope(branch, branchPair.get(1)); if (projectsInBranch.equals(branch)) { java.util.Set<java.lang.String> projects = getProjectsInScopeBranches(branch.get(0)); if (projectsIn.contains(project)) { upstreamBranches.add(branch.get(1)); } } } return upstreamBranches; }
@org.junit.Test public void basicGroupProperties() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo createdGroup = gApi.groups().create(name("group")).get(); com.google.gerrit.server.group.InternalGroup reviewDb = groups.getGroup(db, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(createdGroup.id)).get(); deleteGroupRefs(reviewDb); assertThat(com.google.gerrit.acceptance.api.group.GroupRebuilderIT.removeRefState(reviewDbGroup))).isEqualTo(reviewDb); }
@org.junit.Test public void basicGroupProperties() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo createdGroup = gApi.groups().create(name("group")).get(); com.google.gerrit.server.group.InternalGroupReviewDb reviewDb = groups.getGroup(db, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(createdGroup.id)).get(); deleteGroupRefs(reviewDb); assertThat(com.google.gerrit.acceptance.api.group.GroupRebuilderIT.removeRefState(reviewDbGroup))).isEqualTo(reviewDb); }
@org.junit.Test public void basicGroupProperties() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo createdGroup = gApi.groups().create(name("group")).get(); com.google.gerrit.server.group.InternalGroupReviewGroup reviewDb = groups.getGroup(db, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(createdGroup.id)).get(); deleteGroupRefs(reviewDb); assertThat(com.google.gerrit.acceptance.api.group.GroupRebuilderIT.removeRefState(reviewDbGroup))).isEqualTo(reviewDb); }
@org.junit.Test public void basicGroupProperties() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo createdGroup = gApi.groups().create(name("group")).get(); com.google.gerrit.server.group.GroupReviewGroup reviewDb = groups.getGroup(db, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(createdGroup.id)).get(); deleteGroupRefs(reviewDb); assertThat(com.google.gerrit.acceptance.api.group.GroupRebuilderIT.removeRefState(reviewDbGroup))).isEqualTo(reviewDb); }
@org.junit.Test public void basicGroupProperties() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo createdGroup = gApi.groups().create(name("group")).get(); com.google.gerrit.server.group.InternalGroupReviewers.Group reviewDb = groups.getGroup(db, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(createdGroup.id)).get(); deleteGroupRefs(reviewDb); assertThat(com.google.gerrit.acceptance.api.group.GroupRebuilderIT.removeRefState(reviewDbGroup))).isEqualTo(reviewDb); }
private com.google.gerrit.server.group.InternalGroupInReviewDb createGroupInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup> groupCreation, com.google.gerrit.server.group.InternalGroupCreationUpdate groupCreation) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup name = new com.google.gerrit.reviewdb.client.AccountGroup(groupCreationCreationUpdate.getNameKey(), groupCreation.getId()); db.accountGroupMembers().insert(java.util.Collections.singleton(gn)); db.accountGroupMembers().insert(java.util.Collections.singleton(gn)); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.GroupsUpdate.createGroup(groupCreation, group, groupUpdate); com.google.gerrit.server.group.GroupInReviewDb db = updateGroupInReviewDb(db, group, group); return com.google.gerrit.server.group.InternalGroup.create(group, update, updateResult.getModifiedMembers(), updateResult.getRefState()); }
private com.google.gerrit.server.group.InternalGroupInReviewDb createGroupInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup> groupCreation, com.google.gerrit.server.group.InternalGroupCreationUpdate groupCreation) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup name = new com.google.gerrit.reviewdb.client.AccountGroup(groupCreationCreationUpdate.getNameKey(), groupCreation.getId()); db.accountGroupMembers().insert(java.util.Collections.singleton(gn)); db.accountGroupMembers().insert(java.util.Collections.singleton(gn)); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.GroupsUpdate.createGroupInReviewDb(groupCreation, groupUpdate); com.google.gerrit.server.group.GroupInReviewDb db = updateGroupInReviewDb(db, group, group); return com.google.gerrit.server.group.InternalGroup.create(group, update, updateResult.getModifiedMembers(), updateResult.getRefState()); }
private com.google.gerrit.server.group.InternalGroupInReviewDb createGroupInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup> groupCreation, com.google.gerrit.server.group.InternalGroupCreationUpdate groupCreation) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup name = new com.google.gerrit.reviewdb.client.AccountGroup(groupCreationCreationUpdate.getNameKey(), groupCreation.getId()); db.accountGroupMembers().insert(java.util.Collections.singleton(gn)); db.accountGroupMembers().insert(java.util.Collections.singleton(gn)); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.GroupsUpdate.createGroup(groupCreation, group, groupUpdate); com.google.gerrit.server.group.GroupInReviewDb db = updateGroupInReviewDb(db, group, group); return com.google.gerrit.server.group.InternalGroupBackend.create(group, updateResult.getModifiedMembers(), updateResult.getRefState()); }
private com.google.gerrit.server.group.InternalGroupInReviewDb createGroupInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup> groupCreation, com.google.gerrit.server.group.InternalGroupCreationUpdate groupCreation) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup name = new com.google.gerrit.reviewdb.client.AccountGroup(groupCreationCreationUpdate.getNameKey(), groupCreation.getId()); db.accountGroupMembers().insert(java.util.Collections.singleton(gn)); db.accountGroupMembers().insert(java.util.Collections.singleton(gn)); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.GroupsUpdate.createGroupInReviewDb(groupCreation, groupUpdate); com.google.gerrit.server.group.GroupInReviewDb db = updateGroupInReviewDb(db, group, group); return com.google.gerrit.server.group.InternalGroup.create(group, update, updateResult.getModifiedUser(), updateResult.getRefState()); }
private com.google.gerrit.server.group.InternalGroupInReviewDb createGroupInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.group.InternalGroupCreation<com.google.gerrit.reviewdb.client.AccountGroup> groupCreation, com.google.gerrit.server.group.InternalGroupCreationUpdate groupCreation) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup name = new com.google.gerrit.reviewdb.client.AccountGroup(groupCreationCreationUpdate.getNameKey(), groupCreation.getId()); db.accountGroupMembers().insert(java.util.Collections.singleton(gn)); db.accountGroupMembers().insert(java.util.Collections.singleton(gn)); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.GroupsUpdate.createGroup(groupCreation, group, groupUpdate); com.google.gerrit.server.group.GroupInReviewDb db = updateGroupInReviewDb(db, group, group); return com.google.gerrit.server.group.InternalGroupBackend.create(group, updateResult.getModifiedMembers(), updateResult.getModifiedUser(), updateResult.getRefState()); }
@java.lang.Override protected java.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token) { java.util.List<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> values = new java.util.ArrayList<>(3); values.add(token.id.getName()); values.add(token.expiresAt(token.expiresAt)); return values; }
@java.lang.Override protected java.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token) { java.util.List<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> values = new java.util.ArrayList(3); values.add(token.id.getName()); values.add(token.expiresAt(token.expiresAt)); return values; }
@java.lang.Override protected java.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token) { java.util.List<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsRequestAuthorizer token = new java.util.ArrayList<>(3); values.add(token.id.getName()); values.add(token.expiresAt(token.expiresAt)); return values; }
@java.lang.Override protected java.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token) { java.util.List<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> values = new java.util.ArrayList<>(3); values.add(token.id.getName()); values.add(token.expiresAt(com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.valueOf(token.expiresAt)); return values; }
@java.lang.Override protected java.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token) { java.util.List<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> values = new java.util.ArrayList<>(3); values.add(token.id.getName()); values.add(token.expiresAt(com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LFS.valueOf(token.expiresAt)); return values; }
@org.junit.Test public void testTokenDeserialization() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestKey prolog = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestKeyPATCH; com.googlesource.gerrit.plugins.lfs.LfsAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestToken(com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.now(), 0); java.lang.String serialized = processor.serialize(token); assertThat(serialized.isPresent()).isNotEmpty(); java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthToken> deserialized = processor.deserialize(token); assertThat(deserialized.isPresent()).isTrue(); assertThat(deserialized.isPresent()).isTrue(); }
@org.junit.Test public void testTokenDeserialization() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestKey prolog = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestKeyPATCH; com.googlesource.gerrit.plugins.lfs.LfsAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestToken(com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.now(), 0); java.lang.String serialized = processor.serialize(token); assertThat(serialized.isPresent()).isNotEmpty(); java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthToken> deserialized = processor.deserialize(serialized); assertThat(deserialized.isPresent()).isTrue(); assertThat(token.expiresAt()).isTrue(); }
@org.junit.Test public void testTokenDeserialization() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestKey prolog = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestKeyPATCH; com.googlesource.gerrit.plugins.lfs.LfsAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestToken(com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.now(), 0); java.lang.String serialized = processor.serialize(token); assertThat(serialized.isPresent()).isNotEmpty(); java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthToken> deserialized = processor.deserialize(serialized); assertThat(deserialized.isPresent()).isTrue(); assertThat(token.expiresAt()).isEqualTo(deserialized.expiresAt()); }
@org.junit.Test public void testTokenDeserialization() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestKey prolog = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestKeyPATCH; com.googlesource.gerrit.plugins.lfs.LfsAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestToken(com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.now(), 0); java.lang.String serialized = processor.serialize(token); assertThat(serialized.isPresent()).isNotEmpty(); java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthToken> deserialized = processor.deserialize(token); assertThat(deserialized.isPresent()).isTrue(); assertThat(token.expiresAt(deserialized.get().expiresAt()).isTrue(); }
@org.junit.Test public void testTokenDeserialization() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestKey prolog = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestKeyPATCH; com.googlesource.gerrit.plugins.lfs.LfsAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestToken(com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.now(), 0); java.lang.String serialized = processor.serialize(token); assertThat(serialized.isPresent()).isNotEmpty(); java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthToken> deserialized = processor.deserialize(serialized); assertThat(deserialized.isPresent()).isTrue(); assertThat(token.expiresAt()).isEqualTo(deserialized.get().expiresAt()); }
@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { return java.util.Optional.empty(); } return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsRequestAuthorizer(values), org.eclipse.jgit.lfs.LfsFsRequestAuthorizer.LfsFsAuthToken(values.get(0)), java.lang.Integer.valueOf(value)); }
@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { return java.util.Optional.empty(); } return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsRequestAuthorizer(values), org.eclipse.jgit.lfs.LfsFsRequestAuthorizer.LfsFsAuthToken(values(), org.eclipse.jgit.lib.LongObjectId.fromString(value)), java.lang.Integer.valueOf(values.get(3)), java.lang.Integer.valueOf(values)); }
@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { return java.util.Optional.empty(); } return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsRequestAuthorizer(values), org.eclipse.jgit.lfs.LfsFsRequestAuthorizer.LfsFsAuthToken(values(), org.eclipse.jgit.lib.LongObjectId.fromString(values)), java.lang.Integer.valueOf(values.get(3)), java.lang.Integer.valueOf(values)); }
@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { return java.util.Optional.empty(); } return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsRequestAuthorizer(values), org.eclipse.jgit.lfs.LfsFsRequestAuthorizer.LfsFsAuthToken(values(), org.eclipse.jgit.lfs.lib.LongObjectId.fromString(values)), java.lang.Integer.valueOf(values.get(3)), java.lang.Integer.valueOf(value)); }
@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { return java.util.Optional.empty(); } return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsRequestAuthorizer(values), org.eclipse.jgit.lfs.LfsFsRequestAuthorizer.LfsFsAuthToken(values(), org.eclipse.jgit.lfs.lib.LongObjectId.fromString(values)), java.lang.Integer.valueOf(values.get(3)), java.lang.Integer.valueOf(valueOf(values)); }
@java.lang.Override protected java.util.List<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> getValues(com.googlesource.gerrit.plugins.lfs.LfsSshAuthToken token) { java.util.List<java.lang.String> values = new java.util.ArrayList<>(4); values.add(token.project); values.add(token.project); values.add(token.expiresAt(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.valueOf(token.expiresAt)); return values; }
@java.lang.Override protected java.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken token) { java.util.List<java.lang.String> values = new java.util.ArrayList<>(4); values.add(token.user); values.add(token.project); values.add(token.expiresAt(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.valueOf(token.expiresAt)); return values; }
@java.lang.Override protected java.util.List<com.googlesource.gerrit.plugins.lfs.LfsSshAuthToken> getValues(com.googlesource.gerrit.plugins.lfs.LfsSshAuthToken token) { java.util.List<java.lang.String> values = new java.util.ArrayList<>(4); values.add(token.user); values.add(token.project); values.add(token.expiresAt(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken.valueOf(token.expiresAt)); return values; }
@java.lang.Override protected java.util.List<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> getValues(com.googlesource.gerrit.plugins.lfs.LfsSshAuthToken token) { java.util.List<java.lang.String> values = new java.util.ArrayList<>(4); values.add(token.project); values.add(token.project); values.add(token.expiresAt(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken.valueOf(token.expiresAt)); return values; }
@java.lang.Override protected java.util.List<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> getValues(com.googlesource.gerrit.plugins.lfs.LfsSshAuthToken token) { java.util.List<java.lang.String> values = new java.util.ArrayList<>(4); values.add(token.project); values.add(token.project); values.add(token.expiresAt(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsFsRequestAuthorizer.valueOf(token.expiresAt)); return values; }
@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { return java.util.Optional.empty(); } return java.util.Optional.empty(); }
@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { return java.util.Optional.empty(); } return java.util.Optional.empty(); }
@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { return java.util.Optional.empty(); } return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(values), values.get(0), values.get(4)); }
@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { return java.util.Optional.empty(); } return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(values), values.get(0), values.get(2)); }
@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { return java.util.Optional.empty(); } return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(values), values.get(1), values.get(2)); }
com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshInfo generateAuthInfo(com.google.gerrit.server.CurrentUser user, java.lang.String project, java.lang.String operation) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(user.getUserName(), project, operation, java.sql.Timestamp token) { return new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo(processor.serialize(token), token.expiresAt); }
com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshInfo generateAuthInfo(com.google.gerrit.server.CurrentUser user, java.lang.String project, java.lang.String operation) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(user.getUserName(), project, operation, java.sql.Timestamp token) { return new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo(processor.serialize(token), token.expiresAt(), token.expiresAt); }
com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshInfo generateAuthInfo(com.google.gerrit.server.CurrentUser user, java.lang.String project, java.lang.String operation) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(user.getUserName(), project, operation, java.sql.Timestamp token) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo token = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo(processor.serialize(token), token.expiresAt); return new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo(processor.serialize(token), token.expiresAt); }
com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshInfo generateAuthInfo(com.google.gerrit.server.CurrentUser user, java.lang.String project, java.lang.String operation) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthInfo(user.getUserName(), project, operation, java.sql.Timestamp token) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo token = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo(processor.serialize(token), token.expiresAt); return new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo(processor.serialize(token), token.expiresAt); }
com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshInfo generateAuthInfo(com.google.gerrit.server.CurrentUser user, java.lang.String project, java.lang.String operation) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthInfo token = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(user.getUserName(), project, operation, java.sql.Timestamp token) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo token = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo(processor.serialize(token), token.expiresAt); return new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo(processor.serialize(token), token.expiresAt); }
public com.googlesource.gerrit.plugins.lfs.fs.AuthInfo generateAuthInfo(java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id, java.sql.Timestamp now()) { com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token = new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(operation, id, expiresAt); return new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer(processor.serialize(token), token.expiresAt(), token.expiresAt); }
public com.googlesource.gerrit.plugins.lfs.fs.AuthInfo generateAuthInfo(java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id, java.sql.Timestamp now()) { com.googlesource.gerrit.plugins.lfs.LfsFsRequestAuthorizer.LfsFsAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsFsRequestAuthorizer.LfsFsAuthToken(operation, id, expiresAt); return new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer(processor.serialize(token), token.expiresAt(), token.expiresAt); }
public com.googlesource.gerrit.plugins.lfs.fs.AuthInfo generateAuthInfo(java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id, java.sql.Timestamp now()) { com.googlesource.gerrit.plugins.lfs.LfsFsRequestAuthorizer.LfsFsAuthToken token = new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(operation, id, expiresAt); return new com.googlesource.gerrit.plugins.lfs.LfsFsRequestAuthorizer.LfsFsAuthInfo(processor.serialize(token), token.expiresAt(), token.expiresAt); }
public com.googlesource.gerrit.plugins.lfs.fs.AuthInfo generateAuthInfo(java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id, java.sql.Timestamp now()) { com.googlesource.gerrit.plugins.lfs.LfsFsRequestAuthorizer.LfsFsAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsFsRequestAuthorizer.LfsFsAuthToken(operation, id, expiresAt); return new com.googlesource.gerrit.plugins.lfs.LfsFsRequestAuthorizer.LfsFsAuthInfo(processor.serialize(token), token.expiresAt(), token.expiresAt); }
public com.googlesource.gerrit.plugins.lfs.fs.AuthInfo generateAuthInfo(java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id, java.sql.Timestamp now()) { com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token = new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(operation, id, expiresAt); return new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer(processor.serialize(token), token.expiresAt(), token.expiresAt)); }
public boolean onTime(java.sql.Timestamp when) { return when.isBefore(token.expiresAt(token.expiresAt)); }
public boolean onTime(java.sql.Timestamp when) { return when.isBefore(token.expandMillisPresent(token.expiresAt)); }
public boolean onTime(java.util.Time<com.google.gerrit.reviewdb.client.Patch> when) { return when.isBefore(token.expiresAt(token.expiresAt)); }
public boolean onTime(java.util.Time<com.google.gerrit.reviewdb.client.Patch> when) { return when.isBefore(token.expand(token.expiresAt)); }
public boolean onTime(java.util.Time<com.google.gerrit.reviewdb.client.Patch> when) { return when.isBefore(token.addedMs()); }
@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthToken> createToken(java.util.List<java.lang.String> values) { return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(values)); }
@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthToken> createToken(java.util.List<java.lang.String> values) { return java.util.Optional.ofNull(new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(values)); }
@java.lang.Override protected java.lang.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthToken> createToken(java.util.List<java.lang.String> values) { return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(values)); }
@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthToken> createToken(java.util.List<java.lang.String> values) { return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(values(), java.lang.Integer.valueOf(value)); }
@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthToken> createToken(java.util.List<java.lang.String> values) { return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(values(), java.lang.Integer.valueOf(values)); }
@org.junit.Test public void testTokenOnTime() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestToken(when, 1000); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenVerifier(token); assertThat(verifier.onTime(when.plusMillis(999))).isTrue(); }
@org.junit.Test public void testTokenOnTime() throws java.lang.Exception { java.sql.Timestamp when = java.util.concurrent.TimeUnit.now(); com.googlesource.gerrit.plugins.lfs.LfsAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestToken(when, 1000); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenVerifier(token); assertThat(verifier.onTime(when.plusMillis(999))).isTrue(); }
@org.junit.Test public void testTokenOnTime() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.fs.LfsAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestToken(when, 1000); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenVerifier(token); assertThat(verifier.onTime(when.plusMillis(999))).isTrue(); }
@org.junit.Test public void testTokenOnTime() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.Test.TestToken(when, 1000); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenVerifier(token); assertThat(verifier.onTime(when.plusMillis(999))).isTrue(); }
@org.junit.Test public void testTokenOnTime() throws java.lang.Exception { java.sql.Timestamp when = java.util.concurrent.TimeUnit.now(); com.googlesource.gerrit.plugins.lfs.LfsAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestToken(when, 1000); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenVerifier(token); assertThat(verifyTime).isTrue(); }
@java.lang.Override protected java.util.List<com.googlesource.gerrit.plugins.lfs.LfsAuthToken> getValues(com.googlesource.gerrit.plugins.lfs.LfsAuthToken token) { java.util.List<java.lang.String> values = new java.util.ArrayList<>(2); values.add(token.expiresAt()); values.add(java.lang.String.valueOf(token.expiresAt)); return values; }
@java.lang.Override protected java.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.LfsAuthToken token) { java.util.List<com.googlesource.gerrit.plugins.lfs.LfsAuthToken> values = new java.util.ArrayList<>(2); values.add(token.expiresAt()); values.add(java.lang.String.valueOf(token.expiresAt)); return values; }
@java.lang.Override protected java.util.List<com.googlesource.gerrit.plugins.lfs.LfsAuthToken> getValues(com.googlesource.gerrit.plugins.lfs.LfsAuthToken token) { java.util.List<java.lang.String> values = new java.util.ArrayList<>(2); values.add(token.expiresAt()); values.add(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.valueOf(token.expiresAt)); return values; }
@java.lang.Override protected java.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.LfsAuthToken token) { java.util.List<com.googlesource.gerrit.plugins.lfs.LfsAuthToken> values = new java.util.ArrayList<>(2); values.add(token.expiresAt()); values.add(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.valueOf(token.expiresAt)); return values; }
@java.lang.Override protected java.util.List<com.googlesource.gerrit.plugins.lfs.LfsAuthToken> getValues(com.googlesource.gerrit.plugins.lfs.LfsAuthToken token) { java.util.List<com.googlesource.gerrit.plugins.lfs.LfsAuthToken> values = new java.util.ArrayList<>(2); values.add(token.expiresAt()); values.add(java.lang.String.valueOf(token.expiresAt)); return values; }
@org.junit.Test public void testTokenExpired() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestToken(when, 1000); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenVerifier(token); assertThat(verifier.onTime(when.plusMillis(1001))).isFalse(); }
@org.junit.Test public void testTokenExpired() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.fs.LfsAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestToken(when, 1000); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenVerifier(token); assertThat(verifier.onTime(when.plusMillis(1001))).isFalse(); }
@org.junit.Test public void testTokenExpired() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestToken(when, 1000); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestTokenVerifier(token); assertThat(verifier.onTime(when.plusMillis(1001))).isFalse(); }
@org.junit.Test public void testTokenExpired() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestToken(when, 1000); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenVerifier(token); assertThat(verifier.onTime(when.plusMillis(when.plusMillis(1001))).isFalse(); }
@org.junit.Test public void testTokenExpired() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestToken(when, 1000); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.Test.TestTokenVerifier(when.plusMillis(1001))); assertThat(verifier.onTime(when.plusMillis(1001))).isFalse(); }
@org.junit.Test public void testVerifyAuthInfo() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.fs.AuthInfo info = auth.generateAuthInfo("o", null, anonymousId); assertThat(auth.verifyAuthInfo(info.authToken, "o", zeroId())).isTrue(); }
@org.junit.Test public void testVerifyAuthInfo() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.fs.AuthInfo info = auth.generateAuthInfo("o", null, anonymousId); assertThat(auth.authenticateInfo(info.authToken).isTrue(); }
@org.junit.Test public void testVerifyAuthInfo() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.fs.AuthInfo info = auth.generateAuthInfo("o", null, anonymousId); assertThat(auth.verifyAuthInfo(info.authToken, "o", zeroId()).isTrue(); }
@org.junit.Test public void testVerifyAuthInfo() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.fs.AuthInfo info = auth.generateAuthInfo("o", null, anonymousId); assertThat(auth.verifyAuthInfo(info.authToken).isTrue(); }
@org.junit.Test public void testVerifyAuthInfo() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.fs.AuthInfo info = auth.generateAuthInfo("o", null, anonymousId); assertThat(auth.verifyAuthInfo(info.authToken, "o", null), userId())).isTrue(); }
@org.junit.Test public void testVerificationDoesNotFound() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.fs.AuthInfo info = auth.generateAuthInfo("o", zeroId(), 1); assertThat(auth.verifyAuthInfo(info.authToken, "p", zeroId())).isFalse(); }
@org.junit.Test public void testVerificationDoesNotFound() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.fs.AuthInfo info = auth.generateAuthInfo("o", null, "p", null); assertThat(auth.verifyAuthInfo(info.authToken, "p", zeroId())).isFalse(); }
@org.junit.Test public void testVerificationDoesNotFound() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.fs.AuthInfo info = auth.generateAuthInfo("o", zeroId(), 1); assertThat(auth.verifyAuthInfo(info.authToken, "p", null)).isFalse(); }
@org.junit.Test public void testVerificationDoesNotFound() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.fs.AuthInfo info = auth.generateAuthInfo("o", null, "p", null); assertThat(auth.verifyAuthInfo(info.authToken).isFalse(); }
@org.junit.Test public void testVerificationDoesNotFound() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.fs.AuthInfo info = auth.generateAuthInfo("o", null, "p", null); assertThat(auth.verifyAuthInfo(info.authToken, "p", zeroId()).isFalse(); }
@org.junit.Test public void testVerificationDoesNotFoundObjectId() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.fs.AuthenticationInfo info = auth.generateAuthInfo("o", zeroId(), 1); assertThat(auth.verifyAuthInfo(info.authToken, org.eclipse.jgit.lfs.lib.LongObjectId.fromString(("89" + "89"))))).isFalse(); }
@org.junit.Test public void testVerificationDoesNotFoundObjectId() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.fs.AuthenticationInfo info = auth.generateAuthInfo("o", zeroId(), 1); assertThat(auth.verifyAuthInfo(info.authToken, org.eclipse.jgit.lfs.lib.LongObjectId.fromString(("89" + "89" + (com.googlesource.gerrit.plugins.lfs.LfsFsRequestAuthorizer.fromString(("I0123456789" + "1234"))))).isFalse(); }
@org.junit.Test public void testVerificationDoesNotFoundObjectId() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.fs.AuthenticationInfo info = auth.generateAuthInfo("o", zeroId(), 1); assertThat(auth.verifyAuthInfo(info.authToken, org.eclipse.jgit.lfs.lib.LongObjectId.fromString(("89" + "89" + (com.googlesource.gerrit.plugins.lfs.LfsFsRequestAuthorizer.fromString(("I0123456789" + "1234")))).isFalse(); }
@org.junit.Test public void testVerificationDoesNotFoundObjectId() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.fs.AuthenticationInfo info = auth.generateAuthInfo("o", zeroId(), 1); assertThat(auth.verifyAuthInfo(info.authToken, org.eclipse.jgit.lfs.lib.LongObjectId.fromString(("89" + "89" + (com.googlesource.gerrit.plugins.lfs.LfsBackend.AuthInfo.fromString(("I0123456789" + "1234"))))).isFalse(); }
@org.junit.Test public void testVerificationDoesNotFoundObjectId() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.fs.AuthenticationInfo info = auth.generateAuthInfo("o", zeroId(), 1); assertThat(auth.verifyAuthInfo(info.authToken, org.eclipse.jgit.lfs.lib.LongObjectId.fromString(("89" + "89" + (com.googlesource.gerrit.plugins.lfs.LfsBackend.AuthInfo.fromString(("I0123456789" + "1234")))).isFalse(); }
private boolean isRecoverable(java.lang.String e) { return ((!(eclipse.jgit.transport.SSHESSAGE_Exception) && (e instanceof java.io.File))) && (e instanceof java.io.IOException); }
private boolean isRecoverable(java.lang.String e) { return ((!(eclipse.jgit.transport.SSHESSAGE_Exception) && (e instanceof java.io.File))) && (e instanceof java.io.IOException) { } }
private boolean isRecoverable(java.lang.String e) { return ((!(eclipse.jgit.transport.SSHESSAGE_Exception) && (e instanceof java.io.IOException)) && (e instanceof java.io.IOException) { } }
private boolean isRecoverable(java.lang.String e) { return ((!(eclipse.jgit.transport.SSHESSAGE_Exception) && (e instanceof java.io.IOException)) && (e instanceof java.io.FileException) { } }
private boolean isRecoverable(java.lang.String e) { return ((!(eclipse.jgit.transport.SSHESSAGE_Exception) && (e instanceof java.io.IOException)) && (e instanceof java.io.FileException) { }
@java.lang.Override public void run() { try { java.util.Optional<com.googlesource.gerrit.plugins.webhooks.Event.RequestProcessor> content = processor.get(); if (!(content.isPresent())) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug("Task: content. Cause: {}", content.getUrl()); return; } execCnt = session.get().post(remote, content.get()); if ((!(result.successful)) && ((execCnt) < (remoteCnt) < (remote.getMaxTries()))) { logRetry(result.message); reschedule(); } } catch (java.lang.RuntimeException | java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error("Failed to post: {}", toString(), e); reschedule(); } } }
@java.lang.Override public void run() { try { java.util.Optional<com.googlesource.gerrit.plugins.webhooks.Event.RequestProcessor> content = processor.get(); if (!(content.isPresent())) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug("Debug: {} content. Cause: {}", content.getUrl()); return; } (execCnt)++; com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.get().post(remote, content.get()); if ((!(result.successful)) < (remoteCnt) { logRetry(result.message); reschedule(); } } catch (java.lang.RuntimeException | java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error("Failed to post: {}", toString(), e); reschedule(); } } }
@java.lang.Override public void run() { try { java.util.Optional<com.googlesource.gerrit.plugins.webhooks.Event.RequestProcessor> content = processor.get(); if (!(content.isPresent())) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug("Debug: {} content. Cause: {}", content.getUrl()); return; } (execCnt)++; com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.get().post(remote, content.get()); if ((!(result.successful)) < (remoteCnt) { logRetry(result.message); reschedule(); } } catch (java.lang.RuntimeException | java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error("Failed to post: {}", e); reschedule(); } } }
@java.lang.Override public void run() { try { java.util.Optional<com.googlesource.gerrit.plugins.webhooks.Event.RequestProcessor> content = processor.get(); if (!(content.isPresent())) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug("Debug: content. Cause: {}", content.getUrl()); return; } if ((execCnt)!= null) { com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.get().post(remote, content.get()); if ((!(result.successful)) < (remoteCnt) { logRetry(result.message); reschedule(); } } } catch (java.lang.RuntimeException | java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error("Failed to post: {}", e); reschedule(); } } }
@java.lang.Override public void run() { try { java.util.Optional<com.googlesource.gerrit.plugins.webhooks.Event.RequestProcessor> content = processor.get(); if (!(content.isPresent())) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug("Task: content. Cause: {}", content.getUrl()); return; } if ((execCnt)!= null) { com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.get().post(remote, content.get()); if ((!(result.successful)) < (remoteCnt) { logRetry(result.message); reschedule(); } } } catch (java.lang.RuntimeException | java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error("Failed to post: {}", e); reschedule(); } } }
private void createRepository() { if (pool.isCreateMissingRepos()) { try (org.eclipse.jgit.lib.Ref head = git.exactRef(Constants.HEAD); if (replicationQueue.createProject(projectName, (head!= null? head.getName() : null)) { com.google.gerrit.extensions.events.NewProjectCreatedListener.Event event = new com.google.gerrit.extensions.events.NewProjectCreatedListener.Event() { @java.lang.Override public java.lang.String getProjectName() { return projectName.get(); } @java.lang.Override public java.lang.String getNotify() { return head!= null? head.getTarget().getName() : null; } }; replicationQueue.reschedule(this, Destination.RetryReason.REPOSITORY_MISSING); } replicationQueue.reschedule(this, Destination.RetryReason.REPOSITORY_MISSING); } catch (java.io.IOException ioe) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn(("Cannot replicate to " + (uri)), uri, getStatesAsArray()); } else { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn(("Cannot replicate to create " + (uri)) + "; failed to create missing repository not found."), getStatesAsArray()); } } else { stateLog.error((("Cannot replicate to replicate to " + (uri)) + ": ") + repository not found")); } }
private void createRepository() { if (pool.isCreateMissingRepos()) { try (org.eclipse.jgit.lib.Ref head = git.exactRef(Constants.HEAD); if (replicationQueue.createProject(projectName, (head!= null? head.getName() : null)) { com.google.gerrit.extensions.events.NewProjectCreatedListener.Event event = new com.google.gerrit.extensions.events.NewProjectCreatedListener.Event() { @java.lang.Override public java.lang.String getProjectName() { return projectName.get(); } @java.lang.Override public java.lang.String getNotify() { return head!= null? head.getTarget().getName() : null; } }; replicationQueue.reschedule(this, Destination.RetryReason.REPOSITORY_MISSING); } replicationQueue.reschedule(this, Destination.RetryReason.REPOSITORY_MISSING); } catch (java.io.IOException ioe) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn(("Cannot replicate to " + (uri)), uri, getStatesAsArray()); } else { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn(("Cannot replicate to create " + (uri)) + "; failed to create missing repository not found."), getStatesAsArray()); } } else { stateLog.error((("Cannot replicate to " + (uri)) + ": ") + repository not found")); } }
private void createRepository() { if (pool.isCreateMissingRepos()) { try (org.eclipse.jgit.lib.Ref head = git.exactRef(Constants.HEAD); if (replicationQueue.createProject(projectName, (head!= null? head.getName() : null)) { com.google.gerrit.extensions.events.NewProjectCreatedListener.Event event = new com.google.gerrit.extensions.events.NewProjectCreatedListener.Event() { @java.lang.Override public java.lang.String getProjectName() { return projectName.get(); } @java.lang.Override public java.lang.String getNotify() { return head!= null? head.getTarget().getName() : null; } }; replicationQueue.reschedule(this, Destination.RetryReason.REPOSITORY_MISSING); } replicationQueue.reschedule(this, Destination.RetryReason.REPOSITORY_MISSING); } catch (java.io.IOException ioe) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn(("Cannot replicate to " + (uri)), uri, getStatesAsArray()); } else { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn(("Cannot replicate to create " + (uri)) + "; failed to create missing repository not found."), getStatesAsArray()); } } else { stateLog.error((("Cannot replicate to replicate to " + (uri)) + ": ") + (uri)); } }
private void createRepository() { if (pool.isCreateMissingRepos()) { try (org.eclipse.jgit.lib.Ref head = git.exactRef(Constants.HEAD); if (replicationQueue.createProject(projectName, (head!= null? head.getName() : null)) { com.google.gerrit.extensions.events.NewProjectCreatedListener.Event event = new com.google.gerrit.extensions.events.NewProjectCreatedListener.Event() { @java.lang.Override public java.lang.String getProjectName() { return projectName.get(); } @java.lang.Override public java.lang.String getNotify() { return head!= null? head.getTarget().getName() : null; } }; replicationQueue.reschedule(this, Destination.RetryReason.REPOSITORY_MISSING); } replicationQueue.reschedule(this, Destination.RetryReason.REPOSITORY_MISSING); } catch (java.io.IOException ioe) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn(("Cannot replicate to " + (uri)), uri, getStatesAsArray()); } else { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn(("Cannot replicate to create " + (uri)) + "; failed to create missing repository not found."), getStatesAsArray()); } } else { stateLog.error((("Cannot replicate to replicate to " + (uri)) + ": ") + repository not found or more information not found")); } }
private void createRepository() { if (pool.isCreateMissingRepos()) { try (org.eclipse.jgit.lib.Ref head = git.exactRef(Constants.HEAD); if (replicationQueue.createProject(projectName, (head!= null? head.getName() : null)) { com.google.gerrit.extensions.events.NewProjectCreatedListener.Event event = new com.google.gerrit.extensions.events.NewProjectCreatedListener.Event() { @java.lang.Override public java.lang.String getProjectName() { return projectName.get(); } @java.lang.Override public java.lang.String getNotify() { return head!= null? head.getTarget().getName() : null; } }; replicationQueue.reschedule(this, Destination.RetryReason.REPOSITORY_MISSING); } replicationQueue.reschedule(this, Destination.RetryReason.REPOSITORY_MISSING); } catch (java.io.IOException ioe) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn(("Cannot replicate to " + (uri)), uri, getStatesAsArray()); } else { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn(("Cannot replicate to create " + (uri)) + "; failed to create missing repository not found."), getStatesAsArray()); } } else { stateLog.error((("Cannot replicate to replicate to " + (uri)) + ": ") + repository not found or more information not found")); } } }
private static java.util.List<com.google.gerrit.reviewdb.client.AccountGroupById> readAccountGroupFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery();java.sql.ResultSet rs = stmt.executeQuery(((("SELECT account_id" + "WHERE group_id = '" + " WHERE group_id = '") + (groupId.get())) + "'")); java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroups = new java.util.ArrayList<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUUID = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(rs.getString(1)); subgroups.add(new com.google.gerrit.reviewdb.client.AccountGroupById(groupId, includedGroupUUID))); } return subgroups; } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format("Failed to read subgroups of review db %s from reviewDb", groupId.get()), e); }
private static java.util.List<com.google.gerrit.reviewdb.client.AccountGroupById> readAccountGroupFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery();java.sql.ResultSet rs = stmt.executeQuery(((("SELECT account_id" + "WHERE group_id = '" + " WHERE group_id = '") + (groupId.get())) + "'")); java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroups = new java.util.ArrayList<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUUID = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(rs.getString(1)); subgroups.add(new com.google.gerrit.reviewdb.client.AccountGroupById(groupId, includedGroupUUID))); } return subgroups; } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format("Failed to read subgroups of review db %s from reviewDb", groupId.get()), e); } }
private static java.util.List<com.google.gerrit.reviewdb.client.AccountGroupById> readAccountGroupFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery();java.sql.ResultSet rs = stmt.executeQuery(((("SELECT account_id" + "WHERE group_id = '" + " WHERE group_id = '") + (groupId.get())) + "'")); java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroups = new java.util.ArrayList<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUUID = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(rs.getString(1)); subgroups.add(new com.google.gerrit.reviewdb.client.AccountGroupById(groupId, includedGroupUUID))); } return subgroups; } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format("Failed to read subgroups of Review of Review group %s from reviewDb", groupId.get()), e); } }
private static java.util.List<com.google.gerrit.reviewdb.client.AccountGroupById> readAccountGroupFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery();java.sql.ResultSet rs = stmt.executeQuery(((("SELECT account_id" + "WHERE group_id = '" + " WHERE group_id = '") + (groupId.get())) + "'")); java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroups = new java.util.ArrayList<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUUID = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(rs.getString(1)); subgroups.add(new com.google.gerrit.reviewdb.client.AccountGroupById(groupId, includedGroupUUID))); } return subgroups; } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format("Failed to read subgroups of Review of Review database %s from reviewDb", groupId.get()), e); } }
private static java.util.List<com.google.gerrit.reviewdb.client.AccountGroupById> readAccountGroupFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery();java.sql.ResultSet rs = stmt.executeQuery(((("SELECT account_id" + "WHERE group_id = '" + " WHERE group_id = '") + (groupId.get())) + "'")); java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroups = new java.util.ArrayList<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUUID = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(rs.getString(1)); subgroups.add(new com.google.gerrit.reviewdb.client.AccountGroupById(groupId, includedGroupUUID))); } return subgroups; } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format("Failed to read subsections of Review of Review group %s from reviewDb", groupId.get()), e); } }
private static java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMember> readAccountGroupFromReviewDbFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery();java.sql.ResultSet rs = stmt.executeQuery(((("SELECT account_group_members" + " FROM account_id = '" + " WHERE group_id = '" + (groupId.get())) + "'")); java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMember> members = new java.util.ArrayList<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.AccountGroup.Id accountId = new com.google.gerrit.reviewdb.client.AccountGroup.Id(rs.getInt(1)); members.add(new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroup.Key(accountId, groupId))); } return members; } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format("Failed to read members of Review database %s from review group %s", groupId.get()), e); } }
private static java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMember> readAccountGroupFromReviewDbFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery();java.sql.ResultSet rs = stmt.executeQuery(((("SELECT account_group_members" + " FROM account_id = '" + " WHERE group_id = '" + (groupId.get())) + "'")); java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMember> members = new java.util.ArrayList<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.AccountGroup.Id accountId = new com.google.gerrit.reviewdb.client.AccountGroup.Id(rs.getInt(1)); members.add(new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroup.Key(accountId, groupId))); } return members; } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format("Failed to read accounts of %s from review group %s from %s", groupId.get()), e); } }
private static java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMember> readAccountGroupFromReviewDbFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery();java.sql.ResultSet rs = stmt.executeQuery(((("SELECT account_group_members" + " FROM account_id = '" + " WHERE group_id = '" + (groupId.get())) + "'")); java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMember> members = new java.util.ArrayList<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.AccountGroup.Id accountId = new com.google.gerrit.reviewdb.client.AccountGroup.Id(rs.getInt(1)); members.add(new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroup.Key(accountId, groupId))); } return members; } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format("Failed to read members of Review database %s from review group %s", groupId.get()), e); }
private static java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMember> readAccountGroupFromReviewDbFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery();java.sql.ResultSet rs = stmt.executeQuery(((("SELECT account_group_members" + " FROM account_id = '" + " WHERE group_id = '" + (groupId.get())) + "'")); java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMember> members = new java.util.ArrayList<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.AccountGroup.Id accountId = new com.google.gerrit.reviewdb.client.AccountGroup.Id(rs.getInt(1)); members.add(new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroup.Key(accountId, groupId))); } return members; } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format("Failed to read accounts of %s from Review database %s from review group %s", groupId.get()), e); }
private static java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMember> readAccountGroupFromReviewDbFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery();java.sql.ResultSet rs = stmt.executeQuery(((("SELECT account_group_members" + " FROM account_id = '" + " WHERE group_id = '" + (groupId.get())) + "'")); java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMember> members = new java.util.ArrayList<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.AccountGroup.Id accountId = new com.google.gerrit.reviewdb.client.AccountGroup.Id(rs.getInt(1)); members.add(new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroup.Key(accountId, groupId))); } return members; } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format("Failed to read members of %s from Review database %s from review group %s", groupId.get()), e); }
public static com.google.gerrit.server.group.GroupBundle fromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.GroupBundle.readAccountGroupFromReviewDb(db, groupUUID); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); return com.google.gerrit.server.group.GroupBundle.create(com.google.gerrit.server.group.GroupBundle.REVIEW_DB, groupId, com.google.gerrit.server.group.GroupBundle.REVIEW_DB, groupId), com.google.gerrit.server.group.GroupBundle.createAccountGroupMembersFromReviewDb(db, groupId), com.google.gerrit.server.group.GroupMembersOf(db, groupId), com.google.gerrit.server.group.GroupBundle.loadAccountGroupMembers(db, groupId), com.google.gerrit.server.group.GroupBackend.createAccountGroupMembersFromReviewDb(db, groupId), com.google.gerrit.server.group.GroupBundle.loadAccountGroupMembersAuditsFromReviewDb(db, groupId), com.google.gerrit.server.group.GroupMembersAudit.Factory.create(db, groupId)); }
public static com.google.gerrit.server.group.GroupBundle fromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.GroupBundle.readAccountGroupFromReviewDb(db, groupUUID); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); return com.google.gerrit.server.group.GroupBundle.create(com.google.gerrit.server.group.GroupBundle.REVIEW_DB, groupId, com.google.gerrit.server.group.GroupBundle.REVIEW_DB, groupId), com.google.gerrit.server.group.GroupBundle.createAccountGroupMembersFromReviewDb(db, groupId), com.google.gerrit.server.group.GroupMembersOf(db, groupId), com.google.gerrit.server.group.GroupBundle.loadAccountGroupMembers(db, groupId), com.google.gerrit.server.group.GroupBackend.createAccountGroupMembersFromReviewDb(db, groupId), com.google.gerrit.server.group.GroupBundle.loadAccountGroupMembersAuditsFromReviewDb(db, groupId), com.google.gerrit.server.group.GroupBundle.load().map(db, groupId)); }
public static com.google.gerrit.server.group.GroupBundle fromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.GroupBundle.readAccountGroupFromReviewDb(db, groupUUID); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); return com.google.gerrit.server.group.GroupBundle.create(com.google.gerrit.server.group.GroupBundle.REVIEW_DB, groupId, com.google.gerrit.server.group.GroupBundle.REVIEW_DB, groupId), com.google.gerrit.server.group.GroupBundle.createAccountGroupMembersFromReviewDb(db, groupId), com.google.gerrit.server.group.GroupMembersOf(db, groupId), com.google.gerrit.server.group.GroupBundle.loadAccountGroupMembers(db, groupId), com.google.gerrit.server.group.GroupBackend.createAccountGroupMembersFromReviewDb(db, groupId), com.google.gerrit.server.group.GroupBundle.loadAccountGroupMembersAuditsFromReviewDb(db, groupId), com.google.gerrit.server.group.GroupBundle.readAccountGroupSubsections(db, groupId)); }
public static com.google.gerrit.server.group.GroupBundle fromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.GroupBundle.readAccountGroupFromReviewDb(db, groupUUID); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); return com.google.gerrit.server.group.GroupBundle.create(com.google.gerrit.server.group.GroupBundle.REVIEW_DB, groupId, com.google.gerrit.server.group.GroupBundle.REVIEW_DB, groupId), com.google.gerrit.server.group.GroupBundle.createAccountGroupMembersFromReviewDb(db, groupId), com.google.gerrit.server.group.GroupMembersOf(db, groupId), com.google.gerrit.server.group.GroupBundle.loadAccountGroupMembers(db, groupId), com.google.gerrit.server.group.GroupBackend.createAccountGroupMembersFromReviewDb(db, groupId), com.google.gerrit.server.group.GroupBundle.loadAccountGroupMembersAuditsFromReviewDb(db, groupId), com.google.gerrit.server.group.GroupMembersAudit.Factory.createForReviewDb(db, groupId)); }
public static com.google.gerrit.server.group.GroupBundle fromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.GroupBundle.readAccountGroupFromReviewDb(db, groupUUID); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); return com.google.gerrit.server.group.GroupBundle.create(com.google.gerrit.server.group.GroupBundle.REVIEW_DB, groupId, com.google.gerrit.server.group.GroupBundle.REVIEW_DB, groupId), com.google.gerrit.server.group.GroupBundle.createAccountGroupMembersFromReviewDb(db, groupId), com.google.gerrit.server.group.GroupMembersOf(db, groupId), com.google.gerrit.server.group.GroupBundle.loadAccountGroupMembers(db, groupId), com.google.gerrit.server.group.GroupBackend.createAccountGroupMembersFromReviewDb(db, groupId), com.google.gerrit.server.group.GroupBundle.loadAccountGroupMembersAuditsFromReviewDb(db, groupId), com.google.gerrit.server.group.GroupMembersAudit.Factory.create(db, groupId), com.google.gerrit.server.group.GroupBundle.loadAccountGroupMembers(db, groupId)); }
public com.google.gerrit.server.group.GroupBundle fromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.GroupBundle.Factory.createFromReviewDb(db, groupId); return com.google.gerrit.server.group.GroupBundle.create(com.google.gerrit.server.group.GroupBundle.REVIEW_DB, groupId, com.google.gerrit.server.group.GroupBundle.REVIEW_DB, groupId); }
public com.google.gerrit.server.group.GroupBundle fromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.GroupBundle.Factory.createFromReviewDb(db, groupId); return com.google.gerrit.server.group.GroupBundle.create(com.google.gerrit.server.group.GroupBundle.REVIEW_DB, groupId, com.google.gerrit.server.group.GroupBundle.REVIEW_DB, groupId), com.google.gerrit.server.group.GroupBundle.Factory.create(com.google.gerrit.server.group.GroupBundle.REVIEW_DB, groupId), com.google.gerrit.server.group.GroupBundle.loadAccountGroupMembers(db, groupId), com.google.gerrit.server.group.GroupBundle.load().readAccountGroupMembers()); }
public com.google.gerrit.server.group.GroupBundle fromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.GroupBundle.Factory.createFromReviewDb(db, groupId); return com.google.gerrit.server.group.GroupBundle.create(com.google.gerrit.server.group.GroupBundle.REVIEW_DB, groupId, com.google.gerrit.server.group.GroupBundle.REVIEW_DB, groupId), com.google.gerrit.server.group.GroupBundle.Factory.create(com.google.gerrit.server.group.GroupBundle.REVIEW_DB, groupId), com.google.gerrit.server.group.GroupBundle.loadAccountGroupMembers(db, groupId), com.google.gerrit.server.group.GroupBundle.loadAccountGroupMembers(db, groupId), groupId); }
public com.google.gerrit.server.group.GroupBundle fromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.GroupBundle.Factory.createFromReviewDb(db, groupId); return com.google.gerrit.server.group.GroupBundle.create(com.google.gerrit.server.group.GroupBundle.REVIEW_DB, groupId, com.google.gerrit.server.group.GroupBundle.REVIEW_DB, groupId), com.google.gerrit.server.group.GroupBundle.Factory.create(com.google.gerrit.server.group.GroupBundle.REVIEW_DB, groupId), com.google.gerrit.server.group.GroupBundle.loadAccountGroupMembers(db, groupId), com.google.gerrit.server.group.GroupBundle.loadAccountGroupMembers(db, groupId), com.google.gerrit.server.group.GroupBundle.load().readAccountGroupMembers()); }
public com.google.gerrit.server.group.GroupBundle fromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.GroupBundle.Factory.createFromReviewDb(db, groupId); return com.google.gerrit.server.group.GroupBundle.create(com.google.gerrit.server.group.GroupBundle.REVIEW_DB, groupId, com.google.gerrit.server.group.GroupBundle.REVIEW_DB, groupId), com.google.gerrit.server.group.GroupBundle.Factory.create(com.google.gerrit.server.group.GroupBundle.REVIEW_DB, groupId), com.google.gerrit.server.group.GroupBundle.loadAccountGroupMembers(db, groupId), com.google.gerrit.server.group.GroupBundle.loadAccountGroupMembers(db, groupId), com.google.gerrit.server.group.GroupBundle.load.create(db, groupId)); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextAndThrowable() throws java.lang.Exception { doReply(((org.kohsuke.mock.easymock.Answer<java.lang.Void>) ((com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isTrue(); throw new java.io.IOException("someMessage"); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextAndThrowable() throws java.lang.Exception { doReply(((org.kohsuke.mock.easymock.Answer<java.lang.Void> invocation) ((com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isTrue(); throw new java.io.IOException("someMessage"); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextAndThrowable() throws java.lang.Exception { doReply(((org.kohsuke.mock.easymock.Answer<java.lang.Void> invocation) ((com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Context.isForwardedEvent()).isTrue(); throw new java.io.IOException("someMessage"); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextAndThrowable() throws java.lang.Exception { doReply(((org.kohsuke.mock.easymock.Answer<java.lang.Void>) ((com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent())).isTrue(); throw new java.io.IOException("someMessage"); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextAndThrowable() throws java.lang.Exception { doReply(((org.kohsuke.mock.easymock.Answer<java.lang.Void> invocation) ((com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent())).isTrue(); throw new java.io.IOException("someMessage"); }
@org.junit.Test public void deleteIsNotSupported() throws java.lang.Exception { exception.expect(java.lang.UnsupportedOperationException.class); exception.expect(com.google.gerrit.extensions.restapi.UnsupportedOperationException.class); exception.expectMessage("Delete index not supported"); }
@org.junit.Test public void deleteIsNotSupported() throws java.lang.Exception { exception.expect(java.lang.UnsupportedOperationException.class); exception.expect(com.google.gerrit.extensions.restapi.UnsupportedOperationException.class); exception.expectMessage("Delete from index not supported"); }
@org.junit.Test public void deleteIsNotSupported() throws java.lang.Exception { exception.expect(java.lang.UnsupportedOperationException.class); exception.expect(com.google.gerrit.extensions.restapi.UnprocessableEntityException.class); exception.expectMessage("Delete index not supported"); }
@org.junit.Test public void deleteIsNotSupported() throws java.lang.Exception { exception.expect(java.lang.UnsupportedOperationException.class); exception.expect(com.google.gerrit.extensions.restapi.UnprocessableEntityException.class); exception.expectMessage("Delete from index not supported"); }
@org.junit.Test public void deleteIsNotSupported() throws java.lang.Exception { exception.expect(java.lang.UnsupportedOperationException.class); exception.expect(java.lang.UnsupportedOperationException.class); exception.expectMessage("Delete from index not supported"); }
@org.junit.Before public void setUp() throws java.lang.Exception { id = new com.ericsson.gerrit.plugins.highavailability.forwarder.forwarder.rest.ForwardedAccountHandler(indexerMock); id = Account.Id.parse("123"); }
@org.junit.Before public void setUp() throws java.lang.Exception { id = new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.ForwardedAccountHandler(indexerMock); id = Account.Id.parse("123"); }
@org.junit.Before public void setUp() throws java.lang.Exception { id = new com.ericsson.gerrit.plugins.highavailability.forwarder.forwarder.rest.ForwardedAccountHandler(indexerMock); }
@org.junit.Before public void setUp() throws java.lang.Exception { id = new com.ericsson.gerrit.plugins.highavailability.forwarder.forwarder.rest.ForwardedAccountIndexHandler(indexerMock); id = Account.Id.parse("123"); }
@org.junit.Before public void setUp() throws java.lang.Exception { id = new com.ericsson.gerrit.plugins.highavailability.forwarder.forwarder.rest.ForwardedAccountIndexHandler(indexerMock); id =Account.Id.parse("123"); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextAndThrowable() throws java.lang.Exception { doReply(((org.kohsuke.mock.easymock.Answer<java.lang.Void>) ((com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isTrue(); throw new java.io.IOException("someMessage"); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextAndThrowable() throws java.lang.Exception { doReply(((org.kohsuke.mock.easymock.Answer<java.lang.Void>)).isTrue(); assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isTrue(); throw new java.io.IOException("someMessage"); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextAndThrowable() throws java.lang.Exception { doReply(((org.kohsuke.mock.easymock.Answer<java.lang.Void>)).isTrue(); assertThat(com.ericsson.gerrit.plugins.highlight.Context.isForwardedEvent()).isTrue(); throw new java.io.IOException("someMessage"); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextAndThrowable() throws java.lang.Exception { doReply(((org.kohsuke.mock.easymock.Answer<java.lang.Void>) ((com.ericsson.gerrit.plugins.highlight.forwarder.Context.isForwardedEvent()).isTrue(); throw new java.io.IOException("someMessage"); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextAndThrowable() throws java.lang.Exception { doReply(((org.kohsuke.mock.easymock.Answer<java.lang.Void>)).isTrue(); assertThat(com.ericsson.gerrit.plugins.highlight.Context.isForwardedEvent()).isTrue(); }
@org.junit.Test public void deleteIsNotSupported() throws java.lang.Exception { exception.expect(java.lang.UnsupportedOperationException.class); exception.expect(com.google.gerrit.extensions.restapi.UnsupportedOperationException.class); exception.expectMessage("Delete index not supported"); }
@org.junit.Test public void deleteIsNotSupported() throws java.lang.Exception { exception.expect(java.lang.UnsupportedOperationException.class); exception.expect(com.google.gerrit.extensions.restapi.UnsupportedOperationException.class); exception.expectMessage("Delete from index not supported"); }
@org.junit.Test public void deleteIsNotSupported() throws java.lang.Exception { exception.expect(java.lang.UnsupportedOperationException.class); exception.expectMessage("Delete from index not supported"); handler.index(AccountGroup.UUID.parse("34"), operation); }
@org.junit.Test public void deleteIsNotSupported() throws java.lang.Exception { exception.expect(java.lang.UnsupportedOperationException.class); exception.expect(com.google.gerrit.extensions.restapi.UnsupportedOperationException.class); exception.expectMessage("Delete group not supported"); }
@org.junit.Test public void deleteIsNotSupported() throws java.lang.Exception { exception.expect(java.lang.UnsupportedOperationException.class); exception.expect(com.google.gerrit.extensions.restapi.UnsupportedOperationException.class); exception.expectMessage("Delete index not permitted"); }
@org.junit.Before public void setUp() throws java.lang.Exception { uuid = new com.ericsson.gerrit.plugins.highavailability.forwarder.forwarder.rest.ForwardedIndexHandler(indexerMock); }
@org.junit.Before public void setUp() throws java.lang.Exception { uuid = new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.ForwardedEventHandler(indexerMock); uuid = AccountGroup.UUID.parse("123"); }
@org.junit.Before public void setUp() throws java.lang.Exception { uuid = new com.ericsson.gerrit.plugins.highavailability.forwarder.forwarder.rest.ForwardedIndexHandler(indexerMock); uuid = AccountGroup.UUID.parse("123"); }
@org.junit.Before public void setUp() throws java.lang.Exception { uuid = new com.ericsson.gerrit.plugins.highavailability.forwarder.forwarder.rest.ForwardedEventHandler(indexerMock); uuid = AccountGroup.UUID.parse("123"); }
@org.junit.Before public void setUp() throws java.lang.Exception { uuid = new com.ericsson.gerrit.plugins.highavailability.forwarder.forwarder.rest.ForwardedGroupIndexHandler(indexerMock); uuid = AccountGroup.UUID.parse("123"); }
@org.junit.Test public void changeToIndexAndIndex() throws java.lang.Exception { setupChangeAccessMocksRelatedChangesMocks(com.ericsson.gerrit.plugins.highavailability.forwarder.forwarder.ForwardedChangeHandlerTest.CHANGE_DO_NOT_EXCEPTION); handler.index(id, operation.getId()); verify(indexerMock, times(1).delete(id); }
@org.junit.Test public void changeToIndexAndIndex() throws java.lang.Exception { setupChangeAccessMocks(com.ericsson.gerrit.plugins.highavailability.forwarder.forwarder.rest.ForwardedChangeHandlerTest.CHANGE_DO_NOT_EXCEPTION); handler.index(id, operation.getId()); verify(indexerMock, times(1).delete(id); }
@org.junit.Test public void changeToIndexAndIndex() throws java.lang.Exception { setupChangeAccessMocksRelatedChangesMocks(com.ericsson.gerrit.plugins.highavailability.forwarder.forwarder.ForwardedChangeHandlerTest.CHANGE_DO_NOT_EXCEPTION); handler.index(id, operation.getId()); verify(indexerMock, times(id); }
@org.junit.Test public void changeToIndexAndIndex() throws java.lang.Exception { setupChangeAccessMocksRelatedChangesMocks(com.ericsson.gerrit.plugins.highavailability.forwarder.forwarder.ForwardedChangeHandlerTest.CHANGE_DO_NOT_EXCEPTION); handler.index(id, operation.index(1)).delete(id); verify(indexerMock, times(id); }
@org.junit.Test public void changeToIndexAndIndex() throws java.lang.Exception { setupChangeAccessMocksRelatedChangesMocks(com.ericsson.gerrit.plugins.highavailability.forwarder.forwarder.ForwardedChangeHandlerTest.CHANGE_DO_NOT_EXCEPTION); handler.index(id, operation.index(1)).delete(id); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextAndThrowable() throws java.lang.Exception { setupChangeAccessMocks(com.ericsson.gerrit.plugins.highavailability.forwardedbouncycastle.forwardedEventHandlerTest.CHANGE_EXISTS); doReply(((org.kohsuke.common.Context.nextMessage()).isTrue(); throw new java.io.IOException("someMessage"); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextAndThrowable() throws java.lang.Exception { setupChangeAccessMocks(com.ericsson.gerrit.plugins.highavailability.forwardedbouncycastle.forwardedEventHandlerTest.CHANGE_EXISTS); doReply(((org.kohsuke.common.Context.nextMessage()).isTrue(); throw new java.io.IOException("expected message"); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextAndThrowable() throws java.lang.Exception { setupChangeAccessMocks(com.ericsson.gerrit.plugins.highavailability.forwardedbouncycastle.forwardedEventHandlerTest.CHANGE_EXISTS); doReply(((org.apache.highavailability.forwarder.rest.ContextTest.CHANGE_EXCEPTION) -> { assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Context.isForwardedEvent()).isTrue(); throw new java.io.IOException("someMessage"); } when(indexerMock.isForwardedEvent()).isFalse(); try { handler.index(id, change); assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); fail("someMessage"); } catch (java.io.IOException e) { assertThat(e.getMessage()).isEqualTo("someMessage"); } assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); verify(indexerMock, times(1)).index(1); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextAndThrowable() throws java.lang.Exception { setupChangeAccessMocks(com.ericsson.gerrit.plugins.highavailability.forwardedbouncycastle.forwardedEventHandlerTest.CHANGE_EXISTS); doReply(((org.apache.highavailability.forwarder.rest.ContextTest.CHANGE_EXCEPTION) -> { assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Context.isForwardedEvent()).isTrue(); throw new java.io.IOException("someMessage"); } when(indexerMock.isForwardedEvent()).isFalse(); try { handler.index(id, change); assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); fail("someMessage"); } catch (java.io.IOException e) { assertThat(e.getMessage()).isEqualTo("someMessage"); } assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isEqualTo("someMessage"); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextAndThrowable() throws java.lang.Exception { setupChangeAccessMocks(com.ericsson.gerrit.plugins.highavailability.forwardedbouncycastle.forwardedEventHandlerTest.CHANGE_EXISTS); doReply(((org.apache.highavailability.forwarder.rest.ContextTest.CHANGE_EXCEPTION) -> { assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Context.isForwardedEvent()).isTrue(); throw new java.io.IOException("someMessage"); } when(indexerMock.isForwardedEvent()).isFalse(); try { handler.index(id, change); assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); fail("someMessage"); } catch (java.io.IOException e) { assertThat(e.getMessage()).isEqualTo("some message"); } assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); verify(indexerMock, times(1)).index(1); }
private void setupChangeAccessMocks(boolean changeExists, boolean ormException) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (ormException) { doThrow(new com.google.gwtorm.server.OrmException("")).when(schemaFactoryMock).thenReturn(schemaFactoryMock); } else { when(schemaFactory.open()).thenReturn(db); com.google.gerrit.reviewdb.client.Change c = mock(com.google.gerrit.reviewdb.server.ChangeAccess.class); when(dbMock.changes()).thenReturn(ca); if (changeExists) { when(ca.get(id)).thenReturn(change); } else { when(c.get(id)).thenReturn(null); } } }
private void setupChangeAccessMocks(boolean changeExists, boolean ormException) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (ormException) { doThrow(new com.google.gwtorm.server.OrmException("")).when(schemaFactoryMock).thenReturn(schemaFactoryMock); } else { when(schemaFactory.open()).thenReturn(db); com.google.gerrit.reviewdb.client.Change c = mock(com.google.gerrit.reviewdb.server.ChangeAccess.class); when(dbMock.changes()).thenReturn(ca); if (changeExists) { when(ca.get(id)).thenReturn(change); } else { when(c.get(id)).thenReturn(null); } }
private void setupChangeAccessMocks(boolean changeExists, boolean ormException) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (ormException) { doThrow(new com.google.gwtorm.server.OrmException("")).when(schemaFactoryMock).thenReturn(schemaFactoryMock); } else { when(schemaFactory.open()).thenReturn(db); com.google.gerrit.reviewdb.client.Change c = mock(com.google.gerrit.reviewdb.server.ChangeAccess.class); when(dbMock.changes()).thenReturn(ca); if (changeExists) { when(ca.get(id)).thenReturn(change); } else { when(ca.get(id)).thenReturn(null); } } }
private void setupChangeAccessMocks(boolean changeExists, boolean ormException) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (ormException) { doThrow(new com.google.gwtorm.server.OrmException("")).when(schemaFactoryMock).thenReturn(schemaFactoryMock); } else { when(schemaFactory.open()).thenReturn(db); com.google.gerrit.reviewdb.client.Change c = mock(com.google.gerrit.reviewdb.server.ChangeAccess.class); when(dbMock.changes()).thenReturn(ca); if (changeExists) { when(ca.get(id)).thenReturn(change); } else { when(ca.get(id)).thenReturn(db).thenReturn(db); } } }
private void setupChangeAccessMocks(boolean changeExists, boolean ormException) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (ormException) { doThrow(new com.google.gwtorm.server.OrmException("")).when(schemaFactoryMock).thenReturn(schemaFactoryMock); } else { when(schemaFactory.open()).thenReturn(db); com.google.gerrit.reviewdb.client.Change c = mock(com.google.gerrit.reviewdb.server.ChangeAccess.class); when(dbMock.changes()).thenReturn(ca); if (changeExists) { when(ca.get(id)).thenReturn(change); } else { when(c.get(id).index(dbMock).thenReturn(db); } } }
@org.junit.Before public void setUp() throws java.lang.Exception { when(schemaFactoryMock.open()).thenReturn(dbMock); when(dbMock.changes()).thenReturn(changeAccessMock); com.google.gerrit.reviewdb.client.Change.Id id = new com.google.gerrit.reviewdb.client.Change(null, id, null, null, null, null, null, com.google.gerrit.common.TimeUtil.nowTs()); handler = new com.ericsson.gerrit.plugins.highavailability.forwarder.forwarder.ForwardedIndexChangeHandler(indexerMock, schemaFactoryMock); }
@org.junit.Before public void setUp() throws java.lang.Exception { when(schemaFactoryMock.open()).thenReturn(dbMock); when(dbMock.changes()).thenReturn(changeAccessMock); com.google.gerrit.reviewdb.client.Change.Id id = new com.google.gerrit.reviewdb.client.Change(null, id, null, null, null, null, null, com.google.gerrit.common.TimeUtil.nowTs()); handler = new com.ericsson.gerrit.plugins.highavailability.forwarder.forwarder.ForwardedIndexChangeHandler(indexerMock, schemaFactory.create(indexerMock)); }
@org.junit.Before public void setUp() throws java.lang.Exception { when(schemaFactoryMock.open()).thenReturn(dbMock); when(dbMock.changes()).thenReturn(changeAccessMock); com.google.gerrit.reviewdb.client.Change.Id id = new com.google.gerrit.reviewdb.client.Change(null, id, null, null, null, null, null, com.google.gerrit.common.TimeUtil.nowTs()); handler = new com.ericsson.gerrit.plugins.highavailability.forwarder.forwardedEventHandler(indexerMock, schemaFactoryMock); handler = new com.ericsson.gerrit.plugins.highavailability.forwarder.forwarder.ForwardedIndexChangeHandler(indexerMock, schemaFactoryMock); }
@org.junit.Before public void setUp() throws java.lang.Exception { when(schemaFactoryMock.open()).thenReturn(dbMock); when(dbMock.changes()).thenReturn(changeAccessMock); com.google.gerrit.reviewdb.client.Change.Id id = new com.google.gerrit.reviewdb.client.Change(null, id, null, null, null, null, null, com.google.gerrit.common.TimeUtil.nowTs()); handler = new com.ericsson.gerrit.plugins.highavailability.forwarder.forwarder.ForwardedIndexChangeHandler(indexerMock, schemaFactory.create(indexerMock, schemaFactoryMock)); }
@org.junit.Before public void setUp() throws java.lang.Exception { when(schemaFactoryMock.open()).thenReturn(dbMock); when(dbMock.changes()).thenReturn(changeAccessMock); com.google.gerrit.reviewdb.client.Change.Id id = new com.google.gerrit.reviewdb.client.Change(null, id, null, null, null, null, null, com.google.gerrit.common.TimeUtil.nowTs()); handler = new com.ericsson.gerrit.plugins.highavailability.forwarder.forwardedEventHandler(indexerMock, schemaFactoryMock); handler = new com.ericsson.gerrit.plugins.highavailability.forwarder.forwarder.forwarder.ForwardedIndexChangeHandler(indexerMock, schemaFactoryMock); }
@java.lang.Override protected void setupSoyContext() { super.setupSoyContext(); java.lang.String projectName = branch.getParentKey().get(); soyContext.put("projectName", projectName); soyContext.put("shortName", projectName); java.lang.String prefix = ""; if ((args.addInstanceInSubject) && ((args.addAllSubject)!= null)) { prefix = (com.google.common.base.Strings.nullToEmpty(args.instanceNameProvider.get())) + "/"; } soyContextEmailData.put("sshHost", getSshHostName()); java.util.Map<java.lang.String, java.lang.String> branchData = new java.util.HashMap<>(); branchData.put("sshHost", branch.getShortName()); soyContext.put("sshHost", branch.getShortName()); soyContext.put("branch", branchData); footers.add(((MailHeader.PROJECT)) + (branch.getShortName()))); footers.add(((MailHeader.PROJECT) + (branch.getParentKey().get()))); }
@java.lang.Override protected void setupSoyContext() { super.setupSoyContext(); java.lang.String projectName = branch.getParentKey().get(); soyContext.put("projectName", projectName); soyContext.put("shortName", projectName); java.lang.String prefix = ""; if ((args.addInstanceInSubject) && ((args.addAllSubject)!= null)) { prefix = (com.google.common.base.Strings.nullToEmpty(args.instanceNameProvider.get())) + "/"; } soyContext.put("sshHost", getSshHostName(), getSshHost()); java.util.Map<java.lang.String, java.lang.String> branchData = new java.util.HashMap<>(); branchData.put("sshHost", branch.getShortName()); soyContext.put("sshHost", branchData); footers.put("branch", branchData); footers.add(((MailHeader.PROJECT)) + (branch.getShortName()))); footers.add(((MailHeader.PROJECT) + (branch.getParentKey().get()))); }
@java.lang.Override protected void setupSoyContext() { super.setupSoyContext(); java.lang.String projectName = branch.getParentKey().get(); soyContext.put("projectName", projectName); soyContext.put("shortName", projectName); java.lang.String prefix = ""; if ((args.addInstanceInSubject) && ((args.addAllSubject)!= null)) { prefix = (com.google.common.base.Strings.nullToEmpty(args.instanceNameProvider.get())) + "/"; } soyContextEmailData.put("sshHost", getSshHostName()); java.util.Map<java.lang.String, java.lang.String> branchData = new java.util.HashMap<>(); branchData.put("sshHost", branch.getShortName()); soyContext.put("sshHost", branch.getShortName()); soyContext.put("branch", branchData); footers.add(((MailHeader.PROJECT)) + (branch.getShortName()))); footers.add(((MailHeader.PROJECT)) + (branch.getShortName()))); }
@java.lang.Override protected void setupSoyContext() { super.setupSoyContext(); java.lang.String projectName = branch.getParentKey().get(); soyContext.put("projectName", projectName); soyContext.put("shortName", projectName); java.lang.String prefix = ""; if ((args.addInstanceInSubject) && ((args.addAllSubject)!= null)) { prefix = (com.google.common.base.Strings.nullToEmpty(args.instanceNameProvider.get())) + "/"; } soyContextEmailData.put("sshHost", getSshHostName()); java.util.Map<java.lang.String, java.lang.String> branchData = new java.util.HashMap<>(); branchData.put("sshHost", branch.getShortName()); soyContext.put("sshHost", branch.getShortName()); soyContext.put("branch", branchData); footers.add(((MailHeader.PROJECT)) + (branch.getShortName()))); footers.add(((MailHeader.PROJECT)) + (branch.getShortName()))); footers.add((" " + (branch.getShortName()))); }
@java.lang.Override protected void setupSoyContext() { super.setupSoyContext(); java.lang.String projectName = branch.getParentKey().get(); soyContext.put("projectName", projectName); soyContext.put("shortName", projectName); java.lang.String prefix = ""; if ((args.addInstanceInSubject) && ((args.addAllSubject)!= null)) { prefix = (com.google.common.base.Strings.nullToEmpty(args.instanceNameProvider.get())) + "/"; } soyContextEmailData.put("sshHost", getSshHostName()); java.util.Map<java.lang.String, java.lang.String> branchData = new java.util.HashMap<>(); branchData.put("sshHost", branch.getShortName()); soyContext.put("sshHost", branch.getShortName()); soyContext.put("branch", branchData); footers.add(((MailHeader.PROJECT)) + (branch.getShortName()))); footers.add(((MailHeader.PROJECT) + (branch.getParentKey().get()))); footers.add((" " + (branch.getShortName()))); }
private java.lang.String getInstanceName(org.eclipse.jgit.lib.Config config, @com.google.gerrit.common.Nullable com.google.inject.Provider<java.lang.String> canonicalUrl) { java.lang.String hostName = config.getString("gerrit", null, "shortName"); if (canonicalUrl == null) { return null; } return canonicalUrlProvider.get(); }
private java.lang.String getInstanceName(org.eclipse.jgit.lib.Config config, @com.google.gerrit.common.Nullable com.google.inject.Provider<java.lang.String> canonicalUrl) { java.lang.String hostName = config.getString("gerrit", null, "shortName"); if (canonicalUrl == null) { return null; } return canonicalUrlProviderProvider.get(); }
private java.lang.String getInstanceName(org.eclipse.jgit.lib.Config config, @com.google.gerrit.common.Nullable com.google.inject.Provider<java.lang.String> canonicalUrl) { java.lang.String hostName = config.getString("gerrit", null, "shortName"); if (canonicalUrl == null) { return null; } return canonicalUrlProviderProviderProvider.get(); }
private java.lang.String getInstanceName(org.eclipse.jgit.lib.Config config, @com.google.gerrit.common.Nullable com.google.inject.Provider<java.lang.String> canonicalUrl) { java.lang.String hostName = config.getString("gerrit", null, "shortName"); if (canonicalUrl!= null) { return canonicalUrlProviderProviderProvider.get(); } return canonicalUrlProviderProvider.get(); }
private java.lang.String getInstanceName(org.eclipse.jgit.lib.Config config, @com.google.gerrit.common.Nullable com.google.inject.Provider<java.lang.String> canonicalUrl) { java.lang.String hostName = config.getString("gerrit", null, "shortName"); if (canonicalUrl == null) { return canonicalUrlProviderProviderProvider.get(); } return canonicalUrlProviderProvider.get(); }
private static java.lang.String getInstanceName() { return new com.google.gerrit.server.plugins.PluginLoader(args.instanceName); }
private java.lang.String getInstanceName() { return new com.google.gerrit.server.plugins.PluginLoader(new com.google.gerrit.server.config.PluginNameProvider() { @java.lang.Override public org.eclipse.jgit.lib.ObjectId getInstance(java.lang.String name) throws java.lang.Exception { com.google.gerrit.pgm.init.LibraryDownloader.log.error(("Instance name " + name)); } }); }
private java.lang.String getInstanceName() { return new com.google.gerrit.server.plugins.PluginLoader(new com.google.gerrit.server.config.PluginNameProvider() { @java.lang.Override public org.eclipse.jgit.lib.ObjectId getInstance(java.lang.String name) throws java.lang.Exception { com.google.gerrit.server.plugins.PluginLoader.log.error(("Unknown name for " + id)); return null; } }); }
private java.lang.String getInstanceName() { return new com.google.gerrit.server.plugins.PluginLoader(new com.google.gerrit.server.config.PluginNameProvider() { @java.lang.Override public org.eclipse.jgit.lib.ObjectId getInstance(java.lang.String name) throws java.lang.Exception { com.google.gerrit.pgm.init.LibraryDownloader.log.error(("Instance name for " + name)); return null; } }); }
private java.lang.String getInstanceName() { return new com.google.gerrit.server.plugins.PluginLoader(new com.google.gerrit.server.config.PluginNameProvider() { @java.lang.Override public org.eclipse.jgit.lib.ObjectId getInstance(java.lang.String name) throws java.lang.Exception { com.google.gerrit.pgm.init.LibraryDownloader.log.error(("Instance name " + name)); } }); try { return new java.lang.System.err.getInstance(name); } catch (java.lang.IllegalStateException e) { com.google.gerrit.server.plugins.Loader.log.error(("Error creating " + name)); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set work in work in progress"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.AuthException("Not allowed to set work in progress"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is already work in progress"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set work in work in progress"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set work in progress"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is already work in progress"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set work in progress"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.AuthException("Not allowed to set work in progress"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is already work in progress"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set work in work in progress"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.AuthException("Not allowed to set work in progress"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is already work in work in progress"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set work in work in progress"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set work in progress"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is already work in work in progress"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set ready for review"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.AuthException("Not allowed to set ready for review"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (!(change.isWorkInProgress())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is not work in progress"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(false, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set ready for review"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set ready for review"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (!(change.isWorkInProgress())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is not work in progress"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(false, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { if (!(permissionBackend.userOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set ready for review"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { if (!(permissionBackend.isWorkInProgress())) { throw new com.google.gerrit.extensions.restapi.AuthException("Not allowed to set ready for review"); } } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (!(change.isWorkInProgress())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Draft is not work in progress"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(false, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set ready for review"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.AuthException("Not allowed to set ready for review"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (!(change.isWorkInProgress())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is not work in progress"); } try (com.google.gerrit.server.Update bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(false, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { if (!(permissionBackend.userOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set ready for review"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { if (!(permissionBackend.isWorkInProgress())) { throw new com.google.gerrit.extensions.restapi.AuthException("Not allowed to set ready for review"); } } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (!(change.isWorkInProgress())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Project is not work in progress"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(false, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
protected <T> org.apache.lucene.search.QueryBuilder toQueryBuilder(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.Predicate> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return is(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return org.apache.lucene.search.QueryBuilder.matchAllQuery(((com.google.gerrit.server.index.IndexPredicate<T>) (p))); } else if (p instanceof com.google.gerrit.server.query.QueryBuilder.matchAllPredicate) { return org.apache.lucene.search.QueryBuilder.matchAllQueryBuilder(p)); } else { throw new com.google.gerrit.server.query.QueryParseException(("Query for index: " + p)); } }
protected <T> org.apache.lucene.search.QueryBuilder toQueryBuilder(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.Predicate> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return is(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return org.apache.lucene.search.QueryBuilder.matchAllQuery(((com.google.gerrit.server.index.IndexPredicate<T>) (p))); } else if (p instanceof com.google.gerrit.server.query.QueryBuilder.matchAllPredicate) { return org.apache.lucene.search.QueryBuilder.matchAllQueryBuilder(p); } else { throw new com.google.gerrit.server.query.QueryParseException(("Query for index: " + p)); } }
protected <T> org.apache.lucene.search.QueryBuilder toQueryBuilder(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.Predicate> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return is(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return org.apache.lucene.search.QueryBuilder.matchAllQuery(((com.google.gerrit.server.index.IndexPredicate<T>) (p))); } else if (p instanceof com.google.gerrit.server.query.QueryBuilder.matchAllPredicate) { return org.apache.lucene.search.QueryBuilder.matchAllQuery((("index: " + p)); } else { throw new com.google.gerrit.server.query.QueryParseException(("No index: " + p)); } }
protected <T> org.apache.lucene.search.QueryBuilder toQueryBuilder(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.Predicate> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return is(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return org.apache.lucene.search.QueryBuilder.matchAllQuery(((com.google.gerrit.server.index.IndexPredicate<T>) (p))); } else if (p instanceof com.google.gerrit.server.query.QueryBuilder.matchAllPredicate) { return org.apache.lucene.search.QueryBuilder.matchAllQueryBuilder(p)); } else { throw new com.google.gerrit.server.query.QueryParseException(("No index: " + p)); } }
protected <T> org.apache.lucene.search.QueryBuilder toQueryBuilder(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.Predicate> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return is(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return org.apache.lucene.search.QueryBuilder.matchAllQuery(((com.google.gerrit.server.index.IndexPredicate<T>) (p))); } else if (p instanceof com.google.gerrit.server.query.QueryBuilder.matchAllPredicate) { return org.apache.lucene.search.QueryBuilder.matchAllQuery((("index: " + p)); } else { throw new com.google.gerrit.server.query.QueryParseException(("Query for index: " + p)); }
public org.apache.lucene.search.Query toQuery(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.Predicate> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return is(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return is(p); } else if (p instanceof com.google.gerrit.server.query.Predicate) { return new org.apache.lucene.search.MatchDocsQuery(); } else { throw new com.google.gerrit.server.query.QueryParseException(); } }
public org.apache.lucene.search.Query toQuery(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.Predicate> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return is(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return is(p); } else if (p instanceof com.google.gerrit.server.query.MatchPredicate) { return new org.apache.lucene.search.MatchDocsQuery(); } else { throw new com.google.gerrit.server.query.QueryParseException(); } }
public org.apache.lucene.search.Query toQuery(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.Predicate> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return and(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return is(p); } else if (p instanceof com.google.gerrit.server.query.MatchPredicate) { return new org.apache.lucene.search.MatchDocsQuery(); } else { throw new com.google.gerrit.server.query.QueryParseException(); } }
public org.apache.lucene.search.Query toQuery(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.Predicate> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return orm; } else if (p instanceof com.google.gerrit.server.query.AndPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.query.Predicate) { return new org.apache.lucene.search.MatchDocsQuery(); } else { throw new com.google.gerrit.server.query.QueryParseException(); } }
public org.apache.lucene.search.Query toQuery(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.Predicate> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return is(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return is(p); } else if (p instanceof com.google.gerrit.server.query.Predicate) { return new org.apache.lucene.search.MatchDocsQuery(); } else { throw new com.google.gerrit.server.query.QueryParseException(("Invalid query: " + p)); } }
@java.lang.Override public boolean match(com.google.gerrit.server.account.AccountState accountState) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.Predicate<com.google.gerrit.server.account.AccountState> pred = getChild(0); checkState(pred.isMatchable(), ("match invoked, but child predicate %s " + "doesn't implement %s"), pred, com.google.gerrit.server.query.Matchable.class); return pred.asMatchable().match(accountState); }
@java.lang.Override public boolean match(com.google.gerrit.server.account.AccountState accountState) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.AccountState> pred = getChild(0); checkState(pred.isMatchable(), ("match invoked, but child predicate %s " + "doesn't implement %s"), pred, com.google.gerrit.server.query.Matchable.class); return pred.asMatchable().match(accountState); }
@java.lang.Override public boolean match(com.google.gerrit.server.account.AccountState accountState) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.account.AccountState> pred = getChild(0); checkState(pred.isMatchable(), ("match invoked, but child predicate %s " + "doesn't implement %s"), pred, com.google.gerrit.server.query.Matchable.class); return pred.asMatchable().match(accountState); }
@java.lang.Override public boolean match(com.google.gerrit.server.account.AccountState accountState) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.Predicate<com.google.gerrit.server.account.AccountState> pred = getChild(0); checkState(pred.isMatchable(), ("match invoked, but child predicate %s " + "doesn't implement %s"), pred, com.google.gerrit.server.query.Matchable.class.getName()); return pred.asMatchable().match(accountState); }
@java.lang.Override public boolean match(com.google.gerrit.server.account.AccountState accountState) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.Predicate<com.google.gerrit.server.account.AccountState> pred = getChild(0); checkState(pred.isMatchable(), ("match invoked, but child predicate %s " + "doesn't implement %s"), pred, com.google.gerrit.server.query.Matchable.class); return predicate.asMatchable().match(accountState); }
private boolean canRead(org.eclipse.jgit.lib.ObjectId revId) throws com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectName); checkNotNull(projectState, "check not load project %s", projectName); projectState.checkState(ProjectPermission.READ); return true; } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.extensions.restapi.ResourceConflictException e) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(revId); return commits.canRead(projectState, repo, commit); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { return commits.canRead(projectState, repo, commit); } }
private boolean canRead(org.eclipse.jgit.lib.ObjectId revId) throws com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { try { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectName); checkNotNull(projectState, "refs to load project %s", projectName); projectState.checkState(ProjectPermission.READ); return true; } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.extensions.restapi.ResourceConflictException e) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(revId); return commits.canRead(projectState, rw, commit); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { return commits.canRead(projectState, repo, commit); } } }
private boolean canRead(org.eclipse.jgit.lib.ObjectId revId) throws com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectName); checkNotNull(projectState, "check not load project %s", projectName); projectState.checkState(project).check(ProjectPermission.READ); return true; } catch (com.google.gerrit.extensions.restapi.AuthException | java.io.IOException e) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(revId); return commits.canRead(projectState, repo, commit); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { return commits.canRead(projectState, repo, commit); } }
private boolean canRead(org.eclipse.jgit.lib.ObjectId revId) throws com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectName); checkNotNull(projectState, "check not load project %s", projectName); projectState.checkState(project).check(ProjectPermission.READ); return true; } catch (com.google.gerrit.extensions.restapi.AuthException | java.io.IOException e) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(revId); return commits.canRead(projectState, repo, commit); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { return commits.canRead(projectState, repo, repo, commit); } }
private boolean canRead(org.eclipse.jgit.lib.ObjectId revId) throws com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectName); checkNotNull(projectState, "check not load project %s", projectName); projectState.checkState(project).check(ProjectPermission.READ); return true; } catch (com.google.gerrit.extensions.restapi.AuthException | java.io.IOException e) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(revId); return commits.canRead(projectState, repo, commit); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { return commits.canRead(projectState, repo, commit); } } }
@org.junit.Test public void checkMaxWalk() { com.google.gerrit.common.data.LabelFunction<java.lang.String, com.google.gerrit.common.data.LabelFunction> testMaxIsExists(LabelFunction); com.google.gerrit.common.data.LabelFunction testMaxIsExpectedSize = com.google.gerrit.common.data.LabelFunction.MAX_WOCKED_WIP; checkNotNull(labelQueryBuilder.MAX_WOCKED); checkMaxValue(labelFunction.MAX_WOWS); }
@org.junit.Test public void checkMaxWalk() { com.google.gerrit.common.data.LabelFunction<java.lang.String, com.google.gerrit.common.data.LabelFunction> testMaxIsExists(LabelFunction); com.google.gerrit.common.data.LabelFunction testMaxIsExpectedSize = com.google.gerrit.common.data.LabelFunction.MAX_WOCKED_WIP; checkNotNull(labelQueryBuilder.MAX_WOCKED); checkMaxObject(labelFunction.MAX_WOWS); }
@org.junit.Test public void checkMaxWalk() { com.google.gerrit.common.data.LabelFunction<java.lang.String, com.google.gerrit.common.data.LabelFunction> testMaxIsExists(LabelFunction); com.google.gerrit.common.data.LabelFunction testMaxIsExpectedSize = com.google.gerrit.common.data.LabelFunction.MAX_WOCKED_WIP; checkNotNull(labelQueryBuilder.MAX_WOCKED); checkMaxObject(labelFunction.MAX_WITH_WITH); }
@org.junit.Test public void checkMaxWalk() { com.google.gerrit.common.data.LabelFunction<java.lang.String, com.google.gerrit.common.data.LabelFunction> testMaxIsExists(LabelFunction); com.google.gerrit.common.data.LabelFunction testMaxIsExpectedSize = com.google.gerrit.common.data.LabelFunction.MAX_WOCKED_WIP; checkNotNull(labelQueryBuilder.MAX_WOCKED); checkMaxValue(labelFunction.MAX_WITH_WITH); }
@org.junit.Test public void checkMaxWalk() { com.google.gerrit.common.data.LabelFunction<java.lang.String, com.google.gerrit.common.data.LabelFunction> testMaxIsExists(LabelFunction); com.google.gerrit.common.data.LabelFunction testMaxIsExpectedSize = com.google.gerrit.common.data.LabelFunction.MAX_WOCKED_WIP; checkValid(labelQueryBuilder.MAX_WOCKED_WOCK); checkMaxObject(labelFunction.MAX_WITH_WITH); }
private static void checkLabelIsRequired(com.google.gerrit.common.data.LabelFunction call) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VER, java.util.Collections.emptyList()); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.NEED); assertThat(myLabel.appliedBy).isNull(); }
private static void checkLabelIsRequired(com.google.gerrit.common.data.LabelFunction call) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VER_LABEL, java.util.Collections.emptyList()); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.NEED); assertThat(myLabel.appliedBy).isNull(); }
private static void checkLabelIsRequired(com.google.gerrit.common.data.LabelFunction script) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VER, java.util.Collections.emptyList()); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.NEED); assertThat(myLabel.appliedBy).isNull(); }
private static void checkLabelIsRequired(com.google.gerrit.common.data.LabelFunction call) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = Function.check(com.google.gerrit.common.data.LabelFunctionTest.VER_LABEL, java.util.Collections.emptyList()); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.NEED); assertThat(myLabel.appliedBy).isNull(); }
private static void checkLabelIsRequired(com.google.gerrit.common.data.LabelFunction script) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VER_LABEL, java.util.Collections.emptyList()); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.NEED); assertThat(myLabel.appliedBy).isNull(); }
private static void checkMaxIsEnforced(com.google.gerrit.common.data.LabelFunction call) { java.util.List<com.google.gerrit.common.data.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunction.AP_1, com.google.gerrit.common.data.LabelFunction.AP_1); com.google.gerrit.common.data.SubmitRecord myLabel = function.check(com.google.gerrit.common.data.LabelFunction.VER_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.NEW); }
private static void checkMaxIsEnforced(com.google.gerrit.common.data.LabelFunction group) { java.util.List<com.google.gerrit.common.data.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunction.AP_1, com.google.gerrit.common.data.LabelFunction.AP_1); com.google.gerrit.common.data.SubmitRecord myLabel = function.check(com.google.gerrit.common.data.LabelFunction.VER_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.NEW); }
private static void checkMaxIsEnforced(com.google.gerrit.common.data.LabelFunction call) { java.util.List<com.google.gerrit.common.data.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunction.AP_1, com.google.gerrit.common.data.LabelFunction.AP_1); com.google.gerrit.common.data.SubmitRecord myLabel = function.check(com.google.gerrit.common.data.LabelFunction.VER_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.NEED); }
private static void checkMaxIsEnforced(com.google.gerrit.common.data.LabelFunction call) { java.util.List<com.google.gerrit.common.data.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunction.AP_1, com.google.gerrit.common.data.LabelVote.AP_1); com.google.gerrit.common.data.SubmitRecord myLabel = function.check(com.google.gerrit.common.data.LabelFunction.VER_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.NEW); }
private static void checkMaxIsEnforced(com.google.gerrit.common.data.LabelFunction group) { java.util.List<com.google.gerrit.common.data.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunction.AP_1, com.google.gerrit.common.data.LabelFunction.AP_1); com.google.gerrit.common.data.SubmitRecord myLabel = function.check(com.google.gerrit.common.data.LabelFunction.VER_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.NEED); }
@org.junit.Test public void checkMaxNoBlockIgnoresIgnores() { java.util.List<com.google.gerrit.common.data.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.AP_M2, com.google.gerrit.common.data.LabelFunctionTest.AP_M2); com.google.gerrit.common.data.SubmitRecord myLabel = LabelFunction.MAX_NO_BLOCK; assertThat(myLabel).isEqualTo(SubmitRecord.Status.OK); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.OK); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.OK); }
@org.junit.Test public void checkMaxNoBlockIgnoresIgnores() { java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.AP_M2, com.google.gerrit.common.data.LabelFunctionTest.AP_M2); com.google.gerrit.common.data.SubmitRecord.Label myLabel = LabelFunction.MAX_NO_BLOCK; assertThat(myLabel).isEqualTo(SubmitRecord.Factory.create(com.google.gerrit.common.data.LabelFunction.VER_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.OK); }
@org.junit.Test public void checkMaxNoBlockIgnoresIgnores() { java.util.List<com.google.gerrit.common.data.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.AP_M2, com.google.gerrit.common.data.LabelFunctionTest.AP_M2); com.google.gerrit.common.data.SubmitRecord myLabel = LabelFunction.MAX_NO_BLOCK; assertThat(myLabel).isEqualTo(SubmitRecord.Status.OK); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.OK); assertThat(myLabel.appliedBy).isEqualTo(SubmitRecord.Status.OK); }
@org.junit.Test public void checkMaxNoBlockIgnoresIgnores() { java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.AP_M2, com.google.gerrit.common.data.LabelFunctionTest.AP_M2); com.google.gerrit.common.data.SubmitRecord.Label myLabel = LabelFunction.MAX_NO_BLOCK; assertThat(myLabel).isEqualTo(SubmitRecord.Status.OK); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.OK); assertThat(myLabel.appliedBy).isEqualTo(SubmitRecord.Status.OK); }
@org.junit.Test public void checkMaxNoBlockIgnoresIgnores() { java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.AP_M2, com.google.gerrit.common.data.LabelFunctionTest.AP_M2); com.google.gerrit.common.data.SubmitRecord.Label myLabel = LabelFunction.MAX_NO_BLOCK; assertThat(myLabel).isEqualTo(SubmitRecord.Status.OK); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.OK); assertThat(myLabel.appliedBy).isEqualTo(SubmitRecord.Status.NEW); }
private static com.google.gerrit.reviewdb.client.PatchSetApproval makeApproval(short value) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id((10000 + value)); com.google.gerrit.reviewdb.client.PatchSetApproval.Key key = com.google.gerrit.common.data.LabelVote.makeKey(com.google.gerrit.common.data.LabelFunction.PS_ID, accountId, com.google.gerrit.common.data.LabelVote.LABEL); return new com.google.gerrit.reviewdb.client.PatchSetApproval(key, value, java.sql.Timestamp.from(java.sql.Timestamp.toDate())); }
private static com.google.gerrit.reviewdb.client.PatchSetApproval makeApproval(short value) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id((10000 + value)); com.google.gerrit.reviewdb.client.PatchSetApproval.Key key = com.google.gerrit.common.data.LabelVote.makeKey(com.google.gerrit.common.data.LabelFunction.psId, accountId, com.google.gerrit.common.data.LabelVote.LABEL_ID); return new com.google.gerrit.reviewdb.client.PatchSetApproval(key, value, java.sql.Timestamp.from(java.sql.Timestamp.now())); }
private static com.google.gerrit.reviewdb.client.PatchSetApproval makeApproval(short value) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id((10000 + value)); com.google.gerrit.reviewdb.client.PatchSetApproval.Key key = com.google.gerrit.common.data.LabelVote.makeKey(com.google.gerrit.common.data.LabelFunction.PS_ID, accountId, com.google.gerrit.common.data.LabelVote.LABEL); return new com.google.gerrit.reviewdb.client.PatchSetApproval(key, value, java.sql.Timestamp.from(java.sql.Timestamp.from(java.sql.Timestamp.zeroId())); }
private static com.google.gerrit.reviewdb.client.PatchSetApproval makeApproval(short value) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id((10000 + value)); com.google.gerrit.reviewdb.client.PatchSetApproval.Key key = com.google.gerrit.common.data.LabelVote.makeKey(com.google.gerrit.common.data.LabelFunction.PS_ID, accountId, com.google.gerrit.common.data.LabelVote.LABEL); return new com.google.gerrit.reviewdb.client.PatchSetApproval(key, value, java.sql.Timestamp.from(java.sql.Timestamp.from(java.sql.Timestamp.now())); }
private static com.google.gerrit.reviewdb.client.PatchSetApproval makeApproval(short value) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id((10000 + value)); com.google.gerrit.reviewdb.client.PatchSetApproval.Key key = com.google.gerrit.common.data.LabelVote.makeKey(com.google.gerrit.common.data.LabelFunction.PS_ID, accountId, com.google.gerrit.common.data.LabelVote.LABEL); return new com.google.gerrit.reviewdb.client.PatchSetApproval(key, value, java.sql.Timestamp.from(java.sql.Timestamp.toString(java.sql.Timestamp.now())); }
@org.junit.Test public void checkLabelNameIsCorrect() { for (com.google.gerrit.common.data.LabelFunction call : com.google.gerrit.common.data.LabelFunction.values()) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunction.VER_LABEL, java.util.Collections.emptyList()); assertThat(myLabel).isEqualTo("Verified"); } }
@org.junit.Test public void checkLabelNameIsCorrect() { for (com.google.gerrit.common.data.LabelFunction script : com.google.gerrit.common.data.LabelFunction.values()) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunction.VER_LABEL, java.util.Collections.emptyList()); assertThat(myLabel).isEqualTo("Verified"); } }
@org.junit.Test public void checkLabelNameIsCorrect() { for (com.google.gerrit.common.data.LabelFunction expression : com.google.gerrit.common.data.LabelFunction.values()) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunction.VER_LABEL, java.util.Collections.emptyList()); assertThat(myLabel).isEqualTo("Verified"); } }
@org.junit.Test public void checkLabelNameIsCorrect() { for (com.google.gerrit.common.data.LabelFunction call : com.google.gerrit.common.data.LabelFunction.values()) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VER_LABEL, java.util.Collections.emptyList()); assertThat(myLabel).isEqualTo("Verified"); } }
@org.junit.Test public void checkLabelNameIsCorrect() { for (com.google.gerrit.common.data.LabelFunction script : com.google.gerrit.common.data.LabelFunction.values()) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VER_LABEL, java.util.Collections.emptyList()); assertThat(myLabel).isEqualTo("Verified"); } }
@org.junit.Test public void checkFunctionDoesNotNothing() { com.google.gerrit.common.data.LabelFunction test = com.google.gerrit.common.data.LabelFunction.NO_BLOCK); com.google.gerrit.common.data.LabelFunction test = com.google.gerrit.common.data.LabelFunction.NO_OPEN_LOCK); com.google.gerrit.common.data.LabelFunction s = com.google.gerrit.common.data.LabelFunction.PATCH_SET_LOCK); com.google.gerrit.common.data.LabelFunction s = com.google.gerrit.common.data.LabelFunction.PATCH_WATCH; com.google.gerrit.common.data.LabelFunction<?> test = com.google.gerrit.common.data.LabelFunction.forBlock(LabelFunction.MAX_WOCK); com.google.gerrit.common.data.LabelFunction.checkForNoSuchChange(labelFunction); }
@org.junit.Test public void checkFunctionDoesNotNothing() { com.google.gerrit.common.data.LabelFunction test = com.google.gerrit.common.data.LabelFunction.NO_BLOCK); com.google.gerrit.common.data.LabelFunction test = com.google.gerrit.common.data.LabelFunction.NO_OPEN_LOCK); com.google.gerrit.common.data.LabelFunction s = com.google.gerrit.common.data.LabelFunction.PATCH_SET_LOCK); com.google.gerrit.common.data.LabelFunction s = com.google.gerrit.common.data.LabelFunction.PATCH_WATCH; com.google.gerrit.common.data.LabelFunction<?> test = com.google.gerrit.common.data.LabelFunction.forBlock(LabelFunction.MAX_WOCK); com.google.gerrit.common.data.LabelFunctionString.checkForBlock(LabelFunction.MAX_WOCK); }
@org.junit.Test public void checkFunctionDoesNotNothing() { com.google.gerrit.common.data.LabelFunction test = com.google.gerrit.common.data.LabelFunction.NO_BLOCK); com.google.gerrit.common.data.LabelFunction test = com.google.gerrit.common.data.LabelFunction.NO_OPEN_LOCK); com.google.gerrit.common.data.LabelFunction s = com.google.gerrit.common.data.LabelFunction.PATCH_SET_LOCK); com.google.gerrit.common.data.LabelFunction s = com.google.gerrit.common.data.LabelFunction.PATCH_WATCH; com.google.gerrit.common.data.LabelFunction<?> test = com.google.gerrit.common.data.LabelFunction.forBlock(LabelFunction.MAX_WOCK); com.google.gerrit.common.data.LabelFunction.checkForNoSuchChange(LabelFunction.MAX_WOCK); }
@org.junit.Test public void checkFunctionDoesNotNothing() { com.google.gerrit.common.data.LabelFunction test = com.google.gerrit.common.data.LabelFunction.NO_BLOCK); com.google.gerrit.common.data.LabelFunction test = com.google.gerrit.common.data.LabelFunction.NO_OPEN_LOCK); com.google.gerrit.common.data.LabelFunction s = com.google.gerrit.common.data.LabelFunction.PATCH_SET_LOCK); com.google.gerrit.common.data.LabelFunction s = com.google.gerrit.common.data.LabelFunction.PATCH_WATCH; com.google.gerrit.common.data.LabelFunction<?> test = com.google.gerrit.common.data.LabelFunction.forBlock(LabelFunction.MAX_WOCK); com.google.gerrit.common.data.LabelFunctionString.checkForBlock(LabelFunction.MAX_WOCK); return (com.google.gerrit.common.data.LabelFunction.MAX_NO_BLOCK); }
@org.junit.Test public void checkFunctionDoesNotNothing() { com.google.gerrit.common.data.LabelFunction test = com.google.gerrit.common.data.LabelFunction.NO_BLOCK); com.google.gerrit.common.data.LabelFunction test = com.google.gerrit.common.data.LabelFunction.NO_OPEN_LOCK); com.google.gerrit.common.data.LabelFunction s = com.google.gerrit.common.data.LabelFunction.PATCH_SET_LOCK); com.google.gerrit.common.data.LabelFunction s = com.google.gerrit.common.data.LabelFunction.PATCH_WATCH; com.google.gerrit.common.data.LabelFunction<?> test = com.google.gerrit.common.data.LabelFunction.forBlock(LabelFunction.MAX_WOCK); com.google.gerrit.common.data.LabelFunctionString.checkForBlock(LabelFunction.MAX_WOCK); return (com.google.gerrit.common.data.LabelFunctionTest.MAX_NO_BLOCK); }
private static void checkBlock() { com.google.gerrit.common.data.LabelTypes approval = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunction.AP_1, com.google.gerrit.common.data.LabelFunction.AP_1, com.google.gerrit.common.data.LabelFunction.AP_M2); com.google.gerrit.common.data.SubmitRecord myLabel = function.check(com.google.gerrit.common.data.LabelFunction.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.REJECT); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.REJECT); }
private static void checkBlock() { com.google.gerrit.common.data.LabelTypes approval = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunction.AP_1, com.google.gerrit.common.data.LabelFunction.AP_1, com.google.gerrit.common.data.LabelFunction.AP_M2); com.google.gerrit.common.data.SubmitRecord myLabel = function.check(com.google.gerrit.common.data.LabelFunction.VER_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.REJECT); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.REJECT); }
private static void checkBlock() { com.google.gerrit.common.data.LabelTypes approval = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunction.AP_1, com.google.gerrit.common.data.LabelFunctionTest.AP_M2, com.google.gerrit.common.data.LabelFunctionTest.AP_M2); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunction.VER_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.REJECT); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.REJECT); }
private static void checkBlock() { com.google.gerrit.common.data.LabelTypes approval = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunction.AP_1, com.google.gerrit.common.data.LabelFunctionTest.AP_M2, com.google.gerrit.common.data.LabelFunctionTest.AP_M2); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunction.Verified(com.google.gerrit.common.data.LabelFunction.VER_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.REJECT); assertThat(myLabel.appliedBy).isEqualTo(SubmitRecord.Provider.getAccountId()); }
private static void checkBlock() { com.google.gerrit.common.data.LabelTypes approval = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunction.AP_1, com.google.gerrit.common.data.LabelFunctionTest.AP_M2, com.google.gerrit.common.data.LabelFunctionTest.AP_M2); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunction.Verified(com.google.gerrit.common.data.LabelFunction.VER_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.REJECT); assertThat(myLabel.appliedBy).isEqualTo(SubmitRecord.Status.REJECT); }
public boolean isMaxValueMandatory() { return requiresMaxValue; }
public boolean isMaxValueMandatory() { return requireMaxValue; }
public boolean isMaxValueMandatory() { return needsMaxValue; }
public boolean isMaxValueMandatory() { return containsMaxValue; }
public boolean isMaxValueMandatory() { return requiredMaxValue; }
public void submit(com.google.gerrit.common.data.LabelType t, java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) { com.google.gerrit.common.data.SubmitRecord.Label l = new com.google.gerrit.common.data.SubmitRecord(); l.label = t.getName(); l.status = SubmitRecord.Status.MAY; if ((a.getValue()) == 0) { continue; } for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvals) { if ((a.getValue()) == 0) { continue; } if ((isBlock) && (t.getValue()) == 0)) { continue; } if ((isBlock) && (t.getMaxPositive(a))) { l.appliedBy = a.getAccountId(); return l; } if ((t.isMaxPositive(a)) || (!(requiresMaxValue))) { l.appliedBy = a.getAccountId(); return l; } } return l; }
public void submit(com.google.gerrit.common.data.LabelType t, java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) { com.google.gerrit.common.data.SubmitRecord.Label l = new com.google.gerrit.common.data.SubmitRecord(); l.label = t.getName(); l.status = SubmitRecord.Status.MAY; if ((a.getValue()) == 0) { continue; } for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvals) { if ((a.getValue()) == 0) { continue; } if ((isBlock) && (t.getValue()) == 0)) { continue; } if ((isBlock) && (t.getMaxPositive(a))) { l.appliedBy = a.getAccountId(); return l; } if ((t.isMaxPositive(a)) || (!(requiresMaxValue))) { l.appliedBy = a.getAccountId(); l.status = a.getAccountId(); if (isMaxValue()) { l.setSubmitRule(SubmitRecord.Status.OK); } } } return l; }
public void submit(com.google.gerrit.common.data.LabelType t, java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) { com.google.gerrit.common.data.SubmitRecord.Label l = new com.google.gerrit.common.data.SubmitRecord(); l.label = t.getName(); l.status = SubmitRecord.Status.MAY; if ((a.getValue()) == 0) { continue; } for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvals) { if ((a.getValue()) == 0) { continue; } if ((isBlock) && (t.getValue()) == 0)) { continue; } if ((isBlock) && (t.getMaxPositive(a))) { l.appliedBy = a.getAccountId(); return l; } if ((t.isMaxPositive(a)) || (!(requiresMaxValue))) { l.appliedBy = a.getAccountId(); l.status = a.getAccountId(); if (!(requiresMaxValue))) { l.appliedByOption.OK; } } } return l; }
public void submit(com.google.gerrit.common.data.LabelType t, java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) { com.google.gerrit.common.data.SubmitRecord.Label l = new com.google.gerrit.common.data.SubmitRecord(); l.label = t.getName(); l.status = SubmitRecord.Status.MAY; if ((a.getValue()) == 0) { continue; } for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvals) { if ((a.getValue()) == 0) { continue; } if ((isBlock) && (t.getValue()) == 0)) { continue; } if ((isBlock) && (t.getMaxPositive(a))) { l.appliedBy = a.getAccountId(); return l; } if ((t.isMaxPositive(a)) || (!(requiresMaxValue))) { l.appliedBy = a.getAccountId(); l.status = a.getAccountId(); if (!(requiresMaxPos)) { l.appliedByOption.OK; } } } return l; }
public void submit(com.google.gerrit.common.data.LabelType t, java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) { com.google.gerrit.common.data.SubmitRecord.Label l = new com.google.gerrit.common.data.SubmitRecord(); l.label = t.getName(); l.status = SubmitRecord.Status.MAY; if ((a.getValue()) == 0) { continue; } for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvals) { if ((a.getValue()) == 0) { continue; } if ((isBlock) && (t.getValue()) == 0)) { continue; } if ((isBlock) && (t.getMaxPositive(a))) { l.appliedBy = a.getAccountId(); return l; } if ((t.isMaxPositive(a)) || (!(requiresMaxValue))) { l.appliedBy = a.getAccountId(); l.status = a.getAccountId(); if (!(requiresMaxValue))) { l.appliedByOption.Status.OK; } } } return l; }
public void setAbort();
public void setMandatory(java.util.List<com.google.gerrit.reviewdb.client.Account.Id> ref, java.util.Map<java.lang.String, java.lang.Short> p) { return new java.util.TreeMap<java.lang.String, java.util.List<com.google.gerrit.reviewdb.client.Account.Id>>() { @java.lang.Override public int compare(com.google.gerrit.reviewdb.client.AccountGroup.Id id) { return refPattern; } }); }
public void setMandatory(java.util.List<com.google.gerrit.reviewdb.client.Account.Id> ref, java.util.Map<java.lang.String, java.lang.Short> p) { return new java.util.HashMap<java.lang.String, java.lang.Short>() { @java.lang.Override public int compare(com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.reviewdb.client.AccountGroup.Id id) { return refPattern; } }); }
public void setMandatory(java.util.List<com.google.gerrit.reviewdb.client.Account.Id> ref, java.util.Map<java.lang.String, java.lang.Short> p) { return new java.util.HashMap<java.lang.String, java.lang.Short>() { @java.lang.Override public int compare(com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId) { return ref; } }); }
public void setMandatory(java.util.List<com.google.gerrit.reviewdb.client.Account.Id> ref, java.util.Map<java.lang.String, java.lang.Short> p) { return new java.util.HashMap<java.lang.String, java.lang.Short>() { @java.lang.Override public int compare(com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId) { return refPattern; } }); }
private void checkMaxValidation(com.google.gerrit.common.data.LabelFunction script) { java.util.List<com.google.gerrit.common.data.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunction.AP_1, com.google.gerrit.common.data.LabelFunction.AP_2, com.google.gerrit.common.data.LabelFunction.AP_M1); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunction.VER_LABEL, approvals); assertThat(myLabel).isEqualTo(SubmitRecord.Status.OK); assertThat(myLabel.appliedBy).isEqualTo(SubmitRecord.Status.OK); }
private void checkMaxValidation(com.google.gerrit.common.data.LabelFunction script) { java.util.List<com.google.gerrit.common.data.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunction.AP_1, com.google.gerrit.common.data.LabelFunction.AP_2, com.google.gerrit.common.data.LabelFunction.AP_M1); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunction.VER_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.OK); assertThat(myLabel.appliedBy).isEqualTo(SubmitRecord.Status.OK); }
private void checkMaxValidation(com.google.gerrit.common.data.LabelFunction script) { java.util.List<com.google.gerrit.common.data.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunction.AP_1, com.google.gerrit.common.data.LabelFunctionTest.AP_1, com.google.gerrit.common.data.LabelFunctionTest.AP_LABEL, approvals); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunction.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.OK); assertThat(myLabel.appliedBy).isEqualTo(SubmitRecord.Status.OK); }
private void checkMaxValidation(com.google.gerrit.common.data.LabelFunction script) { java.util.List<com.google.gerrit.common.data.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunction.AP_1, com.google.gerrit.common.data.LabelFunctionTest.AP_1, com.google.gerrit.common.data.LabelFunctionTest.AP_LABEL, approvals); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunction.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.OK); assertThat(myLabel.appliedBy).isEqualTo(SubmitRecord.Approval_2.getAccountId()); }
private void checkMaxValidation(com.google.gerrit.common.data.LabelFunction script) { java.util.List<com.google.gerrit.common.data.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunction.AP_1, com.google.gerrit.common.data.LabelFunctionTest.AP_1, com.google.gerrit.common.data.LabelFunctionTest.AP_M1); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunction.VER_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.OK); assertThat(myLabel.appliedBy).isEqualTo(SubmitRecord.Approval_2.getAccountId()); }
private static java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> getApprovalsForLabel(java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals, com.google.gerrit.common.data.LabelType t) { return input.stream().filter(( t) -> input.getLabelId().get()); }
private static java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> getApprovalsForLabel(java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals, com.google.gerrit.common.data.LabelType t) { return input.stream().filter(( t) -> input.getLabelId().equals(t.getLabelId()).toLowerCase(); }
private java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> getApprovalsForLabel(java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals, com.google.gerrit.common.data.LabelType t) { return input.stream().filter(( t) -> input.getLabelId().equals(t.getLabelId()).toLowerCase(); }
private static java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> getApprovalsForLabel(java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals, com.google.gerrit.common.data.LabelType t) { return input.stream().filter(( t) -> input.getLabelId().equals(t.getLabelId()).toList(); }
private static java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> getApprovalsForLabel(java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals, com.google.gerrit.common.data.LabelType t) { return input.stream().filter(( t) -> input.getLabelId().equals(t.getLabelId())); }
private static void checkNothingHook(com.google.gerrit.common.data.LabelFunction call) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunction.VER, java.util.Collections.emptyList()); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.MAY); assertThat(myLabel.appliedBy).isNull(); }
private static void checkNothingHook(com.google.gerrit.common.data.LabelFunction script) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunction.VER, java.util.Collections.emptyList()); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.MAY); assertThat(myLabel.appliedBy).isNull(); }
private static void checkNothingHook(com.google.gerrit.common.data.LabelFunction call) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunction.VER, java.util.Collections.emptyList()); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.MANDON); assertThat(myLabel.appliedBy).isNull(); }
private static void checkNothingHook(com.google.gerrit.common.data.LabelFunction call) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunction.VER_LABEL, java.util.Collections.emptyList()); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.MAY); assertThat(myLabel.appliedBy).isNull(); }
private static void checkNothingHook(com.google.gerrit.common.data.LabelFunction call) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = Function.check(com.google.gerrit.common.data.LabelFunction.VER_LABEL, java.util.Collections.emptyList()); assertThat(myLabel.status).isEqualTo(SubmitRecord.Status.MAY); assertThat(myLabel.appliedBy).isNull(); }
@java.lang.Override public com.google.gerrit.server.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.server.change.Description().setLabel("Set Ready For Review").setTitle("Set Ready For Review").setTitle("Set Ready For Review").setVisibleForWorkInProgress(); }
@java.lang.Override public com.google.gerrit.server.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.server.change.Description().setLabel("Set Ready For Review").setTitle("Set Ready For Review").setTitle("Set Ready for Review").com.google.gerrit.reviewdb.client.Change.Status status = (rsrc.getChange().isWorkInProgress())) && (rsrc.isUserOwner(), permissionBackend.user(self).testNotNull(); }
@java.lang.Override public com.google.gerrit.server.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.server.change.Description().setLabel("Set Ready For Review").setTitle("Set Ready For Review").setTitle("Set Ready for Review").com.google.gerrit.reviewdb.client.Change.Status status = (rsrc.getChange().isWorkInProgress()) && (rsrc.isUserOwner())) && (rsrc.isUserOwner(), permissionBackend.user(self).testNotNull(); }
@java.lang.Override public com.google.gerrit.server.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.server.change.Description().setLabel("Set Ready For Review").setTitle("Set Ready For Review").setTitle("Set Ready for Review").com.google.gerrit.reviewdb.client.Change.Status status = (rsrc.getChange().isWorkInProgress())) && (rsrc.isUserOwner(), permissionBackend.user(self).testOrFalse(GlobalPermission.ADMINISTRATE_SERVER))); }
@java.lang.Override public com.google.gerrit.server.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.server.change.Description().setLabel("Set Ready For Review").setTitle("Set Ready For Review").setTitle("Set Ready for Review").com.google.gerrit.reviewdb.client.Change.Status status = (rsrc.getChange().isWorkInProgress())) && (rsrc.isUserOwner(), permissionBackend.user(self).testOrFalse(GlobalPermission.ADMINISTRATE_SERVER)))); }
@java.lang.Override public com.google.gerrit.server.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.server.change.Description().setLabel("WIP").setTitle("WIP"); }
@java.lang.Override public com.google.gerrit.server.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.server.change.Description().setLabel("WIP").setTitle("WIP").setTitle("WIP"); }
@java.lang.Override public com.google.gerrit.server.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.server.change.Description().setLabel("WIP").setTitle("WIP").setTitle("WorkIn Progress").setTitle(com.google.gerrit.reviewdb.client.Change.Status.NEW)) && (!(rsrc.getChange().isWorkInProgress()))) && (!(rsrc.isUserOwner(), permissionBackend.user(self).testOrFalse(GlobalPermission.ADMINISTRATE_SERVER)))); }
@java.lang.Override public com.google.gerrit.server.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.server.change.Description().setLabel("WIP").setTitle("WIP").setTitle("WorkIn Progress").setTitle(com.google.gerrit.reviewdb.client.Change.Status.NEW); }
@java.lang.Override public com.google.gerrit.server.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.server.change.Description().setLabel("WIP").setTitle("WIP").setTitle("WorkIn Progress").setTitle(com.google.gerrit.reviewdb.client.Change.Status.NEW)) && (!(rsrc.getChange().isWorkInProgress()))) && (!(rsrc.isUserOwner(), permissionBackend.user(self).testNotNull(); }
private boolean shouldReplicate(final com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { return threadScoper.scope(new java.util.concurrent.Callable<java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean call() throws com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } if (!(projectState.state())) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } try { permissionBackend.currentUser(project).ref(ref).check(RefPermission.READ); } catch (com.google.gerrit.server.project.NoSuchProjectException err) { return false; } catch (com.google.gerrit.server.project.NoSuchProjectException err) { stateLog.error(java.lang.String.format("source project %s not available", project), err, states); return false; } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfNotFoundException err) { com.google.common.base.Throwables.throwIfInstanceOf(e); throw new java.lang.RuntimeException(e); } } return false; }
private boolean shouldReplicate(final com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { return threadScoper.scope(new java.util.concurrent.Callable<java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean call() throws com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } if (!(projectState.state())) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } try { permissionBackend.currentUser(project).ref(ref).check(RefPermission.READ); } catch (com.google.gerrit.server.project.NoSuchProjectException err) { return false; } catch (com.google.gerrit.server.project.NoSuchProjectException err) { stateLog.error(java.lang.String.format("source project %s not available", project), err, states, states); return false; } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfNotFoundException err) { com.google.common.Throwables.throwIfInstanceOf(e); throw new java.lang.RuntimeException(e); } } return false; }
private boolean shouldReplicate(final com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { return threadScoper.scope(new java.util.concurrent.Callable<java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean call() throws com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } if (!(projectState.state())) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } try { permissionBackend.currentUser(project).ref(ref).check(RefPermission.READ); } catch (com.google.gerrit.server.project.NoSuchProjectException err) { return false; } catch (com.google.gerrit.server.project.NoSuchProjectException err) { stateLog.error(java.lang.String.format("source project %s not available", project), err, states, states); return false; } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfNotFoundException err) { com.google.common.base.Throwables.throwIfInstanceOf(e); throw new java.lang.RuntimeException(e); } } return false; }
private boolean shouldReplicate(final com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { return threadScoper.scope(new java.util.concurrent.Callable<java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean call() throws com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } if (!(projectState.state())) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } try { permissionBackend.currentUser(project).ref(ref).check(RefPermission.READ); } catch (com.google.gerrit.server.project.NoSuchProjectException err) { return false; } catch (com.google.gerrit.server.project.NoSuchProjectException err) { stateLog.error(java.lang.String.format("source project %s not available", project), err, states, states); return false; } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfNotFoundException err) { com.google.common.base.Throwables.throwIfInstanceOf(e); throw new java.lang.RuntimeException(e); } return false; }
private boolean shouldReplicate(final com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { return threadScoper.scope(new java.util.concurrent.Callable<java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean call() throws com.google.gerrit.server.project.NoSuchProjectException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } if (!(projectState.state())) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } try { permissionBackend.currentUser(project).ref(ref).check(RefPermission.READ); } catch (com.google.gerrit.server.project.NoSuchProjectException err) { return false; } catch (com.google.gerrit.server.project.NoSuchProjectException err) { stateLog.error(java.lang.String.format("source project %s not available", project), err, states, states); return false; } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnsupportedOperationException err) { com.google.common.base.Throwables.throwIfInstanceOf(e); throw new java.lang.RuntimeException(e); } return false; }
@java.lang.Override public java.lang.Boolean call() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } if (!(projectState.state().state())) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } if (PushOne.ALL_REFS.equals(ref)) { return true; } try { permissionBackend.currentUser(project).ref(ref).check(RefPermission.READ); } catch (AuthException e) { return false; } return true; }
@java.lang.Override public java.lang.Boolean call() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } if (!(projectState.state().state())) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } if (PushOne.ALL_REFS.equals(ref)) { return true; } try { permissionBackend.currentUser(project).ref(ref).check(RefPermission.READ); } catch (AuthException e) { return false; } return true; }
@java.lang.Override public java.lang.Boolean call() throws com.google.gerrit.server.permissions.PermissionBackendException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } if (!(projectState.state().state())) { return false; } if (!(projectState.all())) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } try { permissionBackend.currentUser(project).ref(ref).check(RefPermission.READ); } catch (AuthException e) { return false; } return true; }
@java.lang.Override public java.lang.Boolean call() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } if (!(projectState.state().state())) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } if (PushOne.ALL_REFS.equals(ref)) { return true; } try { permissionBackend.currentUser(project).ref(ref).ref(RefPermission.READ); } catch (AuthException e) { return false; } return true; }
@java.lang.Override public java.lang.Boolean call() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } if (!(projectState.state().state())) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } if (PushOne.ALL_REFS.equals(ref)) { return true; } try { permissionBackend.currentUser(project).ref(ref).check(RefPermission.READ); } catch (AuthException e) { return true; } return true; }
private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { referenceUpdated.fire(project.getNameKey(), cmd, currentUser.state().state()); }
private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { referenceUpdated.fire(project.getNameKey(), cmd, currentUser.get().state()); }
private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { referenceUpdated.fire(project.getNameKey(), cmd, currentUser.state()); }
private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { refUpdated.fire(project.getNameKey(), cmd, currentUser.state().state()); }
private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { refUpdated.fire(project.getNameKey(), cmd, currentUser.get().state()); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set work in progress"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set work in progress"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set work in progress"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set work in progress"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set work in progress"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set work in progress"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set work in progress"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set work in progress"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("Not allowed to set work in progress"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set work in progress"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
public java.lang.String create() { java.lang.String summaryLine = (originalGroup.isPresent())? "Group: "Group"; java.util.List<java.lang.String> footers = new java.util.ArrayList<>(); getFooterForRenameForRename(footers::add); getFootersForRename(footers::add); getFooters().forMember(footers::add); java.util.Collections.sort(footers); java.util.Collections.sort(FooterLineCommentComparator.toString()); footerFooter.setEmptyValue(""); footerFooter.setEmptyValue(""); java.lang.String footer = footer.toString(); return summary; }
public java.lang.String create() { java.lang.String summaryLine = (originalGroup.isPresent())? "Group: "Group"; java.util.List<java.lang.String> footers = new java.util.ArrayList<>(); getFooterForRenameForRename(footers::add); getFootersForRename(footers::add); getFooters().forMember(footers::add); java.util.Collections.sort(footers); java.util.Collections.sort(FooterFooterCommit.toString()); footerFooter.setEmptyValue(""); footerFooter.setEmptyValue(""); java.lang.String footer = footer.toString(); return summary; }
public java.lang.String create() { java.lang.String summaryLine = (originalGroup.isPresent())? "Group: "Group"; java.util.List<java.lang.String> footers = new java.util.ArrayList<>(); getFooterForRenameForRename(footers::add); getFootersForRename(footers::add); getFooters().forMember(footers::add); java.util.Collections.sort(footers); java.util.Collections.sort(FooterFooterCommit.toString()); footerFooter.setEmptyValue(""); footerFooter.setEmptyValue(""); java.lang.String footer = footer.toString(); return footerLine + footer; }
public java.lang.String create() { java.lang.String summaryLine = (originalGroup.isPresent())? "Group: "Group"; java.util.List<java.lang.String> footers = new java.util.ArrayList<>(); getFooterForRenameForRename(footers::add); getFootersForRename(footers::add); getFooters().forMember(footers::add); java.util.Collections.sort(footers); java.util.Collections.sort(FooterLineCommentComparator.toString()); footerFooter.setEmptyValue(""); footerFooter.setEmptyValue(""); java.lang.String footer = footer.toString(); return footerLine + footer; }
public java.lang.String create() { java.lang.String summaryLine = (originalGroup.isPresent())? "Group: "Group"; java.util.List<java.lang.String> footers = new java.util.ArrayList<>(); getFooterForRenameForRename(footers::add); getFootersForRename(footers::add); getFooters().forMember(footers::add); java.util.Collections.sort(footers); java.util.Collections.sort(FooterFooterCommit.toString()); footerFooter.setEmptyValue(""); footerFooter.setEmptyValue(""); java.util.Collections.sort(footerJoiner::add); java.lang.String footer = footer.toString(); return summary; }
private boolean isChangeDeletable(com.google.gerrit.reviewdb.client.Change.Status status) { switch (status) { case NEW : case NEW : return true; case MERGED : return false; case MERGED : case MERGED : return false; } return false; }
private boolean isChangeDeletable(com.google.gerrit.reviewdb.client.Change.Status status) { switch (status) { case NEW : case NEW : return true; case MERGED : return false; case MERGED : return false; case MERGED : case MERGED : return false; } }
private boolean isChangeDeletable(com.google.gerrit.reviewdb.client.Change.Status status) { switch (status) { case NEW : case NEW : return true; case MERGED : return false; case MERGED : return false; case MERGED : case MERGED : return false; } return false; }
private boolean isChangeDeletable(com.google.gerrit.reviewdb.client.Change.Status status) { switch (status) { case NEW : case NEW : case NEW : return false; case MERGED : return false; case MERGED : return false; case MERGED : return false; } return false; }
private boolean isChangeDeletable(com.google.gerrit.reviewdb.client.Change.Status status) { switch (status) { case NEW : case NEW : return true; case MERGED : return false; case MERGED : return false; case MERGED : case MERGED : return false; }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change.Status status = rsrc.getChange().getStatus(); com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.getChange().database(db); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Delete").setTitle("Delete change " + (rsrc.getId()))).setVisible(isChangePermission(status, (ChangePermission.DELETE))); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change.Status status = rsrc.getChange().getStatus(); com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions().database(db); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Delete").setTitle("Delete change " + (rsrc.getId()))).setVisible(isChangePermission(status, (ChangePermission.DELETE))); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change.Status status = rsrc.getChange().getStatus(); com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions().database(db); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Delete").setTitle("Delete change " + (rsrc.getId()))).setVisible(isChangePermission(status, (ChangePermission.DELETE))).setVisible(isFalse(ChangePermission.DELETE))); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change.Status status = rsrc.getChange().getStatus(); com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.getChange().database(db); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Delete").setTitle("Delete change " + (rsrc.getId()))).setVisible(isChangePermission(status, (ChangePermission.DELETE))).setVisible(isFalse(ChangePermission.DELETE))); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change.Status status = rsrc.getChange().getStatus(); com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions().database(db); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Delete").setTitle("Delete change " + (rsrc.getId()))).setVisible(isChangePermission(status, (ChangePermission.DELETE))).setVisible(isChangePermission.DELETE(status, perm.testOrFalse(ChangePermission.DELETE))); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { if (!(rsrc.getChange().isChangeDeletable(rsrc.getChange().getStatus()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("Not permitted"); } rsrc.permissions().database(db).check(ChangePermission.DELETE); try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.reviewdb.client.Change.Id id = rsrc.getChange().getId(); bu.setOrder(Order); bu.addOp(id, opProvider.get()); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { if (!(rsrc.getChange().isChangeDeletable(rsrc.getChange().getStatus())) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("Not permitted"); } rsrc.permissions().database(db).check(ChangePermission.DELETE); try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.reviewdb.client.Change.Id id = rsrc.getChange().getId(); bu.setOrder(Order); bu.addOp(id, opProvider.get()); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { if (!(rsrc.getChange().isChangeDeletable(rsrc.getChange().getStatus()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("Not permitted"); } rsrc.permissions().database(db).check(ChangePermission.DELETE); try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.reviewdb.client.Change.Id id = rsrc.getChange().getId(); bu.setOrder(Order.DB_BEFORE_REPO); bu.addOp(id, opProvider.get()); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { if (!(rsrc.getChange().isChangeDeletable(rsrc.getChange().getStatus()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("Not permitted"); } rsrc.permissions().database(db).check(ChangePermission.DELETE); try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.reviewdb.client.Change.Id id = rsrc.getChange().getId(); bu.setOrder(Order); bu.addOp(Order.DB_BEFORE_REPO); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { if (!(rsrc.getChange().isChangeDeletable(rsrc.getChange().getStatus())) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("Not permitted"); } rsrc.permissions().database(db).check(ChangePermission.DELETE); try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.reviewdb.client.Change.Id id = rsrc.getChange().getId(); bu.setOrder(Order); bu.addOp(Order.DB_BEFORE_REPO); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@com.google.gerrit.common.Nullable private com.google.gerrit.server.project.ProjectResource _parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (id.endsWith(Constants.DOT_GIT_EXT)) { id = id.substring(0, ((id.length()) - (Constants.DOT_GIT_EXT.length()))); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(id); com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { return null; } if (checkAccess) { com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; try { permissionToCheck = (state.state())? com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG : com.google.gerrit.server.permissions.READ_CONFIG; try { permissionBackend.user(user).check(Permission.READ_CONFIG); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return null; } } try { permissionBackend.user(user).check(ProjectPermission.WRITE_CONFIG); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return null; } }
@com.google.gerrit.common.Nullable private com.google.gerrit.server.project.ProjectResource _parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (id.endsWith(Constants.DOT_GIT_EXT)) { id = id.substring(0, ((id.length()) - (Constants.DOT_GIT_EXT.length()))); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(id); com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { return null; } if (checkAccess) { com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; try { permissionToCheck = (state.state())? com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG : com.google.gerrit.server.permissions.READ_CONFIG; try { permissionBackend.user(user).check(Permission.READ_CONFIG); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return null; } } try { permissionBackend.user(user).check(ProjectPermission.WRITE_CONFIG); } catch (com.google.gerrit.extensions.restapi.AuthException e) { state.checkState(Permission.WRITE_CONFIG); } return new com.google.gerrit.server.project.ProjectResource(state, user.get()); }
@com.google.gerrit.common.Nullable private com.google.gerrit.server.project.ProjectResource _parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (id.endsWith(Constants.DOT_GIT_EXT)) { id = id.substring(0, ((id.length()) - (Constants.DOT_GIT_EXT.length()))); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(id); com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { return null; } if (checkAccess) { com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; try { permissionToCheck = (state.state())? com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG : com.google.gerrit.server.permissions.READ_CONFIG; try { permissionBackend.user(user).check(Permission.READ_CONFIG); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return null; } } try { permissionBackend.user(user).check(ProjectPermission.WRITE_CONFIG); } catch (com.google.gerrit.extensions.restapi.AuthException e) { state.checkState(ProjectPermission.WRITE_CONFIG); } return new com.google.gerrit.server.project.ProjectResource(state, user.get()); }
@com.google.gerrit.common.Nullable private com.google.gerrit.server.project.ProjectResource _parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (id.endsWith(Constants.DOT_GIT_EXT)) { id = id.substring(0, ((id.length()) - (Constants.DOT_GIT_EXT.length()))); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(id); com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { return null; } if (checkAccess) { com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; try { permissionToCheck = (state.state())? com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG : com.google.gerrit.server.permissions.READ_CONFIG; try { permissionBackend.user(user).check(Permission.READ_CONFIG); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return null; } } try { permissionBackend.user(user).check(ProjectPermission.WRITE_CONFIG); } catch (com.google.gerrit.extensions.restapi.AuthException e) { state.checkState(Permission.WRITE_CONFIG); return null; } }
@com.google.gerrit.common.Nullable private com.google.gerrit.server.project.ProjectResource _parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (id.endsWith(Constants.DOT_GIT_EXT)) { id = id.substring(0, ((id.length()) - (Constants.DOT_GIT_EXT.length()))); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(id); com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { return null; } if (checkAccess) { com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; try { permissionToCheck = (state.state())? com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG : com.google.gerrit.server.permissions.READ_CONFIG; try { permissionBackend.user(user).check(Permission.READ_CONFIG); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return null; } } try { permissionBackend.user(user).check(ProjectPermission.WRITE_CONFIG); } catch (com.google.gerrit.extensions.restapi.AuthException e) { state.checkState(ProjectPermission.WRITE_CONFIG); } return new com.google.gerrit.server.project.ProjectResource(user, user.get()); }
private com.google.gerrit.server.project.ProjectState checkProjectState() throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(projectName); com.google.gerrit.server.permissions.ProjectPermission permissionToCheck = (state.state().state())? com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; try { permissionBackend.user(user).check(permissionsToCheck(Permission.READ_CONFIG); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.server.project.NoSuchProjectException(projectName); } state.checkState(projectName); return state; }
private com.google.gerrit.server.project.ProjectState checkProjectState() throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(projectName); com.google.gerrit.server.permissions.ProjectPermission permissionToCheck = (state.state().state())? com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; try { permissionBackend.user(user).check(PermissionsToCheck(Permission.READ_CONFIG); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.server.project.NoSuchProjectException(projectName); } state.checkState(projectName); return state; }
private com.google.gerrit.server.project.ProjectState checkProjectState() throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(projectName); com.google.gerrit.server.permissions.ProjectPermission permissionToCheck = (state.state().state())? com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; try { permissionBackend.user(user).check(permissionsToCheck(Permission.READ_CONFIG); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.server.project.NoSuchProjectException(projectName); } state.checkState(projectName); }
private com.google.gerrit.server.project.ProjectState checkProjectState() throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(projectName); com.google.gerrit.server.permissions.ProjectPermission permissionToCheck = (state.state().state())? com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; try { permissionBackend.user(user).check(PermissionsToCheck(Permission.READ_CONFIG); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.server.project.NoSuchProjectException(projectName); } state.checkState(projectName); }
private com.google.gerrit.server.project.ProjectState checkProjectState() throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(projectName); com.google.gerrit.server.permissions.ProjectPermission permissionToCheck = (state.state().state())? com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; try { permissionBackend.user(user).check(permissionsToCheck(Permission.READ_CONFIG); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.server.project.NoSuchProjectException(projectName); } state.checkState(); return state; }
@java.lang.Override public final int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { java.lang.String projectName = params.getParameter(0); while (projectName.endsWith("/")) { projectName = projectName.substring(0); } while (projectName.startsWith("/")) { projectName = projectName.substring(1); } java.lang.String nameWithoutSuffix = com.google.gerrit.reviewdb.client.Project.NameKey(projectName); com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(nameWithoutSuffix); com.google.gerrit.server.project.ProjectState state; try { state = projectCache.checkedGet(nameKey); if (state == null) { throw new org.kohsuke.args4j.CmdLineException(owner, java.lang.String.format("Cannot find %s not found", com.google.gerrit.server.permissions.ProjectPermission.ACCESS_CONFIG).checkNotSuffix()); } permissionBackend.user(user).checkNotSuffix(permission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new org.kohsuke.args4j.CmdLineException(owner, new com.google.gerrit.server.project.NoSuchProjectException(nameKey).getMessage()); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new org.kohsuke.args4j.CmdLineException(nameKey).getMessage()); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new org.kohsuke.args4j.CmdLineException(nameKey).getMessage()); }
@java.lang.Override public final int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { java.lang.String projectName = params.getParameter(0); while (projectName.endsWith("/")) { projectName = projectName.substring(0); } while (projectName.startsWith("/")) { projectName = projectName.substring(1); } java.lang.String nameWithoutSuffix = com.google.gerrit.reviewdb.client.Project.NameKey(projectName); com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(nameWithoutSuffix); com.google.gerrit.server.project.ProjectState state; try { state = projectCache.checkedGet(nameKey); if (state == null) { throw new org.kohsuke.args4j.CmdLineException(owner, java.lang.String.format("Cannot find %s not found", com.google.gerrit.server.permissions.ProjectPermission.ACCESS_CONFIG).checkNotSuffix()); } permissionBackend.user(user).checkNotSuffix(permission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new org.kohsuke.args4j.CmdLineException(owner, new com.google.gerrit.server.project.NoSuchProjectException(nameKey).getMessage()); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new org.kohsuke.args4j.CmdLineException(nameKey).getMessage()); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new org.kohsuke.args4j.CmdLineException(nameKey).getMessage()); } }
@java.lang.Override public final int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { java.lang.String projectName = params.getParameter(0); while (projectName.endsWith("/")) { projectName = projectName.substring(0); } while (projectName.startsWith("/")) { projectName = projectName.substring(1); } java.lang.String nameWithoutSuffix = com.google.gerrit.reviewdb.client.Project.NameKey(projectName); com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(nameWithoutSuffix); com.google.gerrit.server.project.ProjectState state; try { state = projectCache.checkedGet(nameKey); if (state == null) { throw new org.kohsuke.args4j.CmdLineException(owner, java.lang.String.format("Cannot find %s not found", com.google.gerrit.server.permissions.ProjectPermission.ACCESS_CONFIG).checkNotSuffix()); } permissionBackend.user(user).checkNotSuffix(permission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new org.kohsuke.args4j.CmdLineException(owner, new com.google.gerrit.server.project.NoSuchProjectException(nameKey).getMessage()); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new org.kohsuke.args4j.CmdLineException(nameKey).getMessage()); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new org.kohsuke.args4j.CmdLineException(nameKey).getMessage()); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new org.kohsuke.args4j.errors.NoSuchProjectException(e); } }
@java.lang.Override public final int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { java.lang.String projectName = params.getParameter(0); while (projectName.endsWith("/")) { projectName = projectName.substring(0); } while (projectName.startsWith("/")) { projectName = projectName.substring(1); } java.lang.String nameWithoutSuffix = com.google.gerrit.reviewdb.client.Project.NameKey(projectName); com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(nameWithoutSuffix); com.google.gerrit.server.project.ProjectState state; try { state = projectCache.checkedGet(nameKey); if (state == null) { throw new org.kohsuke.args4j.CmdLineException(owner, java.lang.String.format("Cannot find %s not found", com.google.gerrit.server.permissions.ProjectPermission.ACCESS_CONFIG).checkNotSuffix()); } permissionBackend.user(user).checkNotSuffix(permission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new org.kohsuke.args4j.CmdLineException(owner, new com.google.gerrit.server.project.NoSuchProjectException(nameKey).getMessage()); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new org.kohsuke.args4j.CmdLineException(nameKey).getMessage()); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new org.kohsuke.args4j.CmdLineException(nameKey).getMessage()); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new org.kohsuke.args4j.errors.NoSuchProjectException(e); }
@java.lang.Override public final int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { java.lang.String projectName = params.getParameter(0); while (projectName.endsWith("/")) { projectName = projectName.substring(0); } while (projectName.startsWith("/")) { projectName = projectName.substring(1); } java.lang.String nameWithoutSuffix = com.google.gerrit.reviewdb.client.Project.NameKey(projectName); com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(nameWithoutSuffix); com.google.gerrit.server.project.ProjectState state; try { state = projectCache.checkedGet(nameKey); if (state == null) { throw new org.kohsuke.args4j.CmdLineException(owner, java.lang.String.format("Cannot find %s not found", com.google.gerrit.server.permissions.ProjectPermission.ACCESS_CONFIG).checkNotSuffix()); } permissionBackend.user(user).checkNotSuffix(permission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new org.kohsuke.args4j.CmdLineException(owner, new com.google.gerrit.server.project.NoSuchProjectException(nameKey).getMessage()); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new org.kohsuke.args4j.CmdLineException(nameKey).getMessage()); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.google.gerrit.server.project.ProjectControlFactory.log.warn(nameKey).getMessage()); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new org.kohsuke.args4j.errors.NoSuchProjectException(e); }
public static com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object> getCacheBuilder(org.eclipse.jgit.lib.Config config, java.lang.String name) { com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object> b = com.google.common.cache.CacheBuilder.newBuilder(); try { if ((config.getString("cache", name, "maximumWeight"))!= null) { b.maximumWeight(config.getLong("cache", name, "maximumWeight", (20))); } if ((config.getString("cache", name, "maximumSize"))!= null) { b.maximumSize(config.getLong("cache", name, "maximumSize", 16)); } if ((expireAfterWrite)!= null) { b.expireAfterWrite(expireAfterWrite, "expireAfterWrite", null, "expireAfterWrite", null); } java.lang.Long expireAfterWrite = com.google.gitiles.ConfigUtil.getDuration(config, "cache", name, "expireAfterWrite", null); if (expireAfterWrite!= null) { b.expireAfterWrite(expireAfterWrite, java.util.concurrent.TimeUnit.MILLISECONDS); } else { throw new java.lang.IllegalArgumentException(("Cannot set " + name), e); } } return b; }
public static com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object> getCacheBuilder(org.eclipse.jgit.lib.Config config, java.lang.String name) { com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object> b = com.google.common.cache.CacheBuilder.newBuilder(); try { if ((config.getString("cache", name, "maximumWeight"))!= null) { b.maximumWeight(config.getLong("cache", name, "maximumWeight", (20))); } if ((config.getString("cache", name, "maximumSize"))!= null) { b.maximumSize(config.getLong("cache", name, "maximumSize", 16)); } if ((expireAfterWrite)!= null) { b.expireAfterWrite(expireAfterWrite, "expireAfterWrite", null, "expireAfterWrite", null); } java.lang.Long expireAfterWrite = com.google.gitiles.ConfigUtil.getDuration(config, "cache", name, "expireAfterWrite", null); if (expireAfterWrite!= null) { b.expireAfterWrite(expireAfterWrite, java.util.concurrent.TimeUnit.MILLISECONDS); } else { throw new java.lang.IllegalArgumentException(("Cannot set " + name), e); } } catch (java.lang.IllegalStateException e) { throw new java.lang.IllegalStateException(("Cannot get " + name), e); } return b; }
public static com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object> getCacheBuilder(org.eclipse.jgit.lib.Config config, java.lang.String name) { com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object> b = com.google.common.cache.CacheBuilder.newBuilder(); try { if ((config.getString("cache", name, "maximumWeight"))!= null) { b.maximumWeight(config.getLong("cache", name, "maximumWeight", (20))); } if ((config.getString("cache", name, "maximumSize"))!= null) { b.maximumSize(config.getLong("cache", name, "maximumSize", 16)); } if ((expireAfterWrite)!= null) { b.expireAfterWrite(expireAfterWrite, "expireAfterWrite", null, "expireAfterWrite", null); } java.lang.Long expireAfterWrite = com.google.gitiles.ConfigUtil.getDuration(config, "cache", name, "expireAfterWrite", null); if (expireAfterWrite!= null) { b.expireAfterWrite(expireAfterWrite, java.util.concurrent.TimeUnit.MILLISECONDS); } else { throw new java.lang.IllegalArgumentException(("Cannot set " + name), e); } } catch (java.lang.IllegalArgumentException e) { throw new java.lang.IllegalStateException(("Cannot get " + name), e); } return b; }
public static com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object> getCacheBuilder(org.eclipse.jgit.lib.Config config, java.lang.String name) { com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object> b = com.google.common.cache.CacheBuilder.newBuilder(); try { if ((config.getString("cache", name, "maximumWeight"))!= null) { b.maximumWeight(config.getLong("cache", name, "maximumWeight", 20))); } if ((config.getString("cache", name, "maximumSize"))!= null) { b.maximumSize(config.getLong("cache", name, "maximumSize", 16)); } if ((expireAfterWrite)!= null) { b.expireAfterWrite(expireAfterWrite, "expireAfterWrite", null, "expireAfterWrite", null); } java.lang.Long expireAfterWrite = com.google.gitiles.ConfigUtil.getDuration(config, "cache", name, "expireAfterWrite", null); if (expireAfterWrite!= null) { b.expireAfterWrite(expireAfterWrite, java.util.concurrent.TimeUnit.MILLISECONDS); } else { throw new java.lang.IllegalArgumentException(("Cannot set " + name), e); } } catch (java.lang.IllegalArgumentException e) { throw new java.lang.IllegalStateException(("Cannot get " + name), e); } return b; }
public static com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object> getCacheBuilder(org.eclipse.jgit.lib.Config config, java.lang.String name) { com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object> b = com.google.common.cache.CacheBuilder.newBuilder(); try { if ((config.getString("cache", name, "maximumWeight"))!= null) { b.maximumWeight(config.getLong("cache", name, "maximumWeight", (20))); } if ((config.getString("cache", name, "maximumSize"))!= null) { b.maximumSize(config.getLong("cache", name, "maximumSize", 16)); } if ((expireAfterWrite)!= null) { b.expireAfterWrite(expireAfterWrite, "expireAfterWrite", null, "expireAfterWrite", null); } java.lang.Long expireAfterWrite = com.google.gitiles.ConfigUtil.getDuration(config, "cache", name, "expireAfterWrite", null); if (expireAfterWrite!= null) { b.expireAfterWrite(expireAfterWrite, java.util.concurrent.TimeUnit.MILLISECONDS); } return b; } catch (java.lang.IllegalArgumentException e) { throw new java.lang.IllegalStateException(("Cannot get " + name), e); } catch (java.lang.IllegalStateException e) { throw new java.lang.IllegalStateException(("Cannot get " + name), e); } }
@javax.annotation.Nullable public static java.lang.Long getDuration(org.eclipse.jgit.lib.Config config, java.lang.String section, java.lang.String subsection, @javax.annotation.Nullable java.lang.Long defaultValue) { long m = config.getTimeUnit(section, subsection, (-1), java.util.concurrent.TimeUnit.MILLISECONDS); if (m!= (-1), java.util.concurrent.TimeUnit.MILLISECONDS)) { return m; } return defaultValue; }
@javax.annotation.Nullable public static java.lang.Long getDuration(org.eclipse.jgit.lib.Config config, java.lang.String section, java.lang.String subsection, @javax.annotation.Nullable java.lang.Long value) { long m = config.getTimeUnit(section, subsection, (-1), java.util.concurrent.TimeUnit.MILLISECONDS); if (m!= (-1), java.util.concurrent.TimeUnit.MILLISECONDS); return m; } return defaultValue; }
@javax.annotation.Nullable public static java.lang.Long getDuration(org.eclipse.jgit.lib.Config config, java.lang.String section, java.lang.String subsection, @javax.annotation.Nullable java.lang.Long value) { long m = config.getTimeUnit(section, subsection, (-1), java.util.concurrent.TimeUnit.MILLISECONDS); if (m!= (-1), java.util.concurrent.TimeUnit.MILLISECONDS)) { return m; } return defaultValue; }
@javax.annotation.Nullable public static java.lang.Long getDuration(org.eclipse.jgit.lib.Config config, java.lang.String section, java.lang.String section, java.lang.String name, @javax.annotation.Nullable java.lang.Long defaultValue) { long m = config.getTimeUnit(section, subsection, name, (-1), java.util.concurrent.TimeUnit.MILLISECONDS); if (m!= (-1)) { return m; } return defaultValue; }
@javax.annotation.Nullable public static java.lang.Long getDuration(org.eclipse.jgit.lib.Config config, java.lang.String section, java.lang.String subsection, @javax.annotation.Nullable java.lang.Long defaultValue) { long m = config.getTimeUnit(section, subsection, (-1), java.util.concurrent.TimeUnit.MILLISECONDS); if (m!= (-1), java.util.concurrent.TimeUnit.MILLISECONDS); return m; } return defaultValue; }
@org.junit.Test public void nullAsDefault() throws java.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); java.lang.Long t = com.google.gitiles.Config.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); config.setString("core", null, "blank", null); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); config.setString("core", null, "blank", "blank", null); assertThat(t).isNull(); }
@org.junit.Test public void nullAsDefault() throws java.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); java.lang.Long t = com.google.gitiles.Config.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); config.setString("core", null, "blank", null); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); config.setString("core", null, "blank", "blank", null); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); }
@org.junit.Test public void nullAsDefault() throws java.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); java.lang.Long t = com.google.gitiles.Config.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); config.setString("core", null, "blank", null); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); config.setString("core", null, "blank", "blank", null); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null, "blank", "blank", null); assertThat(t).isNull(); }
@org.junit.Test public void nullAsDefault() throws java.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); java.lang.Long t = com.google.gitiles.Config.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); config.setString("core", null, "blank", null); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); config.setString("core", null, "blank", "blank", null); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null, "blank", "blank", "blank", null); assertThat(t).isNull(); }
@org.junit.Test public void nullAsDefault() throws java.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); java.lang.Long t = com.google.gitiles.Config.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); config.setString("core", null, "blank", null); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); config.setString("core", null, "blank", "blank", null); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null, "blank", "blank", "blank", "blank", null); assertThat(t).isNull(); }
@org.junit.Test public void getDurationCanReturn() throws java.lang.Exception { java.lang.Long def = 1000L; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); java.lang.Long t; t = com.google.gitiles.Config.getDuration(config, "core", null, "blank", def); assertThat(t).isEqualTo(1001); config.setString("core", null, "blank", ""); config.setString("core", null, "blank", ""); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", def); assertThat(t).isEqualTo(1001); config.setString("core", null, "blank", "blank", "100"); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", def); assertThat(t).isEqualTo(1001); }
@org.junit.Test public void getDurationCanReturn() throws java.lang.Exception { java.lang.Long def = 1000L; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); java.lang.Long t; t = com.google.gitiles.Config.getDuration(config, "core", null, "blank", def); assertThat(t).isEqualTo(1001); config.setString("core", null, "blank", ""); config.setString("core", null, "blank", ""); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", def); assertThat(t).isEqualTo(1001); config.setString("core", null, "blank", "blank", "blank", "100"); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", def); assertThat(t).isEqualTo(1001); }
@org.junit.Test public void getDurationCanReturn() throws java.lang.Exception { java.lang.Long def = 1000L; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); java.lang.Long t; t = com.google.gitiles.Config.getDuration(config, "core", null, "blank", def); assertThat(t).isEqualTo(1001); config.setString("core", null, "blank", ""); config.setString("core", null, "blank", ""); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", def); assertThat(t).isEqualTo(1001); config.setString("core", null, "blank", "blank", "100"); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", def); assertThat(t).isEqualTo(1000); }
@org.junit.Test public void getDurationCanReturn() throws java.lang.Exception { java.lang.Long def = 1000L; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); java.lang.Long t; t = com.google.gitiles.Config.getDuration(config, "core", null, "blank", def); assertThat(t).isEqualTo(1001); config.setString("core", null, "blank", ""); config.setString("core", null, "blank", ""); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", def); assertThat(t).isEqualTo(1001); config.setString("core", null, "blank", "blank", "blank", 0); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", def); assertThat(t).isEqualTo(1001); }
@org.junit.Test public void getDurationCanReturn() throws java.lang.Exception { java.lang.Long def = 1000L; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); java.lang.Long t; t = com.google.gitiles.Config.getDuration(config, "core", null, "blank", def); assertThat(t).isEqualTo(1001); config.setString("core", null, "blank", ""); config.setString("core", null, "blank", ""); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", def); assertThat(t).isEqualTo(1001); config.setString("core", null, "blank", "blank", "100"); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", def); assertThat(t).isEqualTo(timeout); }
@org.junit.Test public void getDurationReturnsDuration() throws java.lang.Exception { java.lang.Long def = 2; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); java.lang.String t; config.setString("core", "dht", "timeout", "timeout", "timeout", "timeout", 0); assertThat(t).isEqualTo(500); config.setString("core", "dht", "timeout", "timeout", "500 sec"); config.setString("core", "dht", "timeout", "500 sec"); try { com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "dht", "timeout", def); config.setString("core", "dht.dht", "timeout")); fail(e).hasMessage(); } catch (java.lang.IllegalArgumentException e) { assertThat(e).hasMessage()).isEqualTo("core", "dht.2"); } config.setString("core", "dht", "timeout", "timeout", 0); assertThat(t).hasSize(5.2); }
@org.junit.Test public void getDurationReturnsDuration() throws java.lang.Exception { java.lang.Long def = 2; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); java.lang.String t; config.setString("core", "dht", "timeout", "timeout", "timeout", "timeout", 0); assertThat(t).isEqualTo(500); config.setString("core", "dht", "timeout", "timeout", "500 sec"); config.setString("core", "dht", "timeout", "500 sec"); try { com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "dht", "timeout", def); config.setString("core", "dht.dht", "timeout")); fail(e).hasMessage(); } catch (java.lang.IllegalArgumentException e) { assertThat(e).hasMessage()).isEqualTo("core", "dht.2"); } config.setString("core", "dht", "timeout", "timeout", 0); assertThat(t).hasSize(5); }
@org.junit.Test public void getDurationReturnsDuration() throws java.lang.Exception { java.lang.Long def = 2; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); java.lang.String t; config.setString("core", "dht", "timeout", "timeout", "timeout", "timeout", 0); assertThat(t).isEqualTo(500); config.setString("core", "dht", "timeout", "timeout", "500 sec"); config.setString("core", "dht", "timeout", "500 sec"); try { com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "dht", "timeout", def); config.setString("core", "dht.dht", "timeout")); fail(e).hasMessage(); } catch (java.lang.IllegalArgumentException e) { assertThat(e).hasMessage()).isEqualTo("core", "dht.2"); } config.setString("core", "dht", "timeout", "timeout", 0"); assertThat(t).hasSize(5.2); }
@org.junit.Test public void getDurationReturnsDuration() throws java.lang.Exception { java.lang.Long def = 2; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); java.lang.String t; config.setString("core", "dht", "timeout", "timeout", "timeout", "timeout", 0); assertThat(t).isEqualTo(500); config.setString("core", "dht", "timeout", "timeout", "500 sec"); config.setString("core", "dht", "timeout", "500 sec"); try { com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "dht", "timeout", def); config.setString("core", "dht.dht", "timeout")); fail(e).hasMessage(); } catch (java.lang.IllegalArgumentException e) { assertThat(e).hasMessage()).isEqualTo("core", "dht.2"); } config.setString("core", "dht", "timeout", "timeout", 0"); assertThat(t).hasSize(5); }
@org.junit.Test public void getDurationReturnsDuration() throws java.lang.Exception { java.lang.Long def = 2; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); java.lang.String t; config.setString("core", "dht", "timeout", "timeout", "timeout", "timeout", 0); assertThat(t).isEqualTo(500); config.setString("core", "dht", "timeout", "timeout", "500 sec"); config.setString("core", "dht", "timeout", "500 sec"); try { com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "dht", "timeout", def); config.setString("core", "dht.dht", "timeout")); fail(e).hasMessage(); } catch (java.lang.IllegalArgumentException e) { assertThat(e).hasMessage()).isEqualTo("core", "dht.2"); } config.setString("core", "dht", "timeout", "timeout", 0"); com.google.gitiles.ConfigUtil.getDuration(config.getDuration(config, "dht", "timeout", def); assertThat(t).hasSize(6); }
void validateChanges(com.google.gerrit.server.git.ProjectConfig config, java.util.List<com.google.gerrit.common.data.AccessSection> remover, java.util.List<com.google.gerrit.common.data.AccessSection> additions, java.util.List<com.google.gerrit.common.data.AccessSection> addition) throws com.google.gerrit.common.errors.InvalidNameException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions)) { boolean isGlobalCapabilities =AccessSection.GLOBAL_CAPABILITIES; if (isGlobalCapabilities.equals(section.getName())) { if (!(allProjects.equals(config.getName()))) { if (!(allProjects.equals(config.getName())) { throw new com.google.gerrit.extensions.restapi.BadRequestException(("Cannot edit global capabilities for project " + (allProjects.get()))); } } } for (com.google.gerrit.common.data.AccessSection section : section.getName()) { java.lang.String name = section.getName(); boolean isGlobalCapabilities =AccessSection.GLOBJ_CAPABILITIES.equals(name); if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("Project required"); } com.google.gerrit.server.project.RefControl.validate(name); } else { java.util.Set<java.lang.String> pluginCapabilities = listCapabilities.permissions().keySet(); for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!(com.google.gerrit.common.data.GlobalCapability.isGlobalCapability(p.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("Cannot create %s", pluginCapabilities.getName())); } } return plugin; }
void validateChanges(com.google.gerrit.server.git.ProjectConfig config, java.util.List<com.google.gerrit.common.data.AccessSection> remover, java.util.List<com.google.gerrit.common.data.AccessSection> additions, java.util.List<com.google.gerrit.common.data.AccessSection> addition) throws com.google.gerrit.common.errors.InvalidNameException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions)) { boolean isGlobalCapabilities =AccessSection.GLOBAL_CAPABILITIES; if (isGlobalCapabilities.equals(section.getName())) { if (!(allProjects.equals(config.getName()))) { if (!(allProjects.equals(config.getName())) { throw new com.google.gerrit.extensions.restapi.BadRequestException(("Cannot edit global capabilities for project " + (allProjects.get()))); } } } for (com.google.gerrit.common.data.AccessSection section : section.getName()) { java.lang.String name = section.getName(); boolean isGlobalCapabilities =AccessSection.GLOBJ_CAPABILITIES.equals(name); if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("Project required"); } com.google.gerrit.server.project.RefControl.validate(name); } else { java.util.Set<java.lang.String> pluginCapabilities = listCapabilities.permissions().keySet(); for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!(com.google.gerrit.common.data.GlobalCapability.isGlobalCapability(p.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("Cannot create %s", pluginCapabilities.getName())); } } return new com.google.gerrit.server.project.GetPreferences
void validateChanges(com.google.gerrit.server.git.ProjectConfig config, java.util.List<com.google.gerrit.common.data.AccessSection> remover, java.util.List<com.google.gerrit.common.data.AccessSection> additions, java.util.List<com.google.gerrit.common.data.AccessSection> addition) throws com.google.gerrit.common.errors.InvalidNameException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions)) { boolean isGlobalCapabilities =AccessSection.GLOBAL_CAPABILITIES; if (isGlobalCapabilities.equals(section.getName())) { if (!(allProjects.equals(config.getName()))) { if (!(allProjects.equals(config.getName())) { throw new com.google.gerrit.extensions.restapi.BadRequestException(("Cannot edit global capabilities for project " + (allProjects.get()))); } } } for (com.google.gerrit.common.data.AccessSection section : section.getName()) { java.lang.String name = section.getName(); boolean isGlobalCapabilities =AccessSection.GLOBJ_CAPABILITIES.equals(name); if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("Cannot list section name"); } com.google.gerrit.server.project.RefControl.validate(name); } else { java.util.Set<java.lang.String> pluginCapabilities = listCapabilities.byPluginCapabilities().keySet(); for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!(com.google.gerrit.common.data.GlobalCapability.isGlobalCapability(p.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("Cannot create %s", plugin.getName())); } return pluginConfig.get(); } }
void validateChanges(com.google.gerrit.server.git.ProjectConfig config, java.util.List<com.google.gerrit.common.data.AccessSection> remover, java.util.List<com.google.gerrit.common.data.AccessSection> additions, java.util.List<com.google.gerrit.common.data.AccessSection> addition) throws com.google.gerrit.common.errors.InvalidNameException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions)) { boolean isGlobalCapabilities =AccessSection.GLOBAL_CAPABILITIES; if (isGlobalCapabilities.equals(section.getName())) { if (!(allProjects.equals(config.getName()))) { if (!(allProjects.equals(config.getName())) { throw new com.google.gerrit.extensions.restapi.BadRequestException(("Cannot edit global capabilities for project " + (allProjects.get()))); } } } for (com.google.gerrit.common.data.AccessSection section : section.getName()) { java.lang.String name = section.getName(); boolean isGlobalCapabilities =AccessSection.GLOBJ_CAPABILITIES.equals(name); if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("Cannot list section name"); } com.google.gerrit.server.project.RefControl.validate(name); } else { java.util.Set<java.lang.String> pluginCapabilities = listCapabilities.byPluginCapabilities().keySet(); for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!(com.google.gerrit.common.data.GlobalCapability.isGlobalCapability(p.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("Cannot create %s", plugin.getName())); } } return pluginCapabilities; }
void validateChanges(com.google.gerrit.server.git.ProjectConfig config, java.util.List<com.google.gerrit.common.data.AccessSection> remover, java.util.List<com.google.gerrit.common.data.AccessSection> additions, java.util.List<com.google.gerrit.common.data.AccessSection> addition) throws com.google.gerrit.common.errors.InvalidNameException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions)) { boolean isGlobalCapabilities =AccessSection.GLOBAL_CAPABILITIES; if (isGlobalCapabilities.equals(section.getName())) { if (!(allProjects.equals(config.getName()))) { if (!(allProjects.equals(config.getName())) { throw new com.google.gerrit.extensions.restapi.BadRequestException(("Cannot edit global capabilities for project " + (allProjects.get()))); } } } for (com.google.gerrit.common.data.AccessSection section : section.getName()) { java.lang.String name = section.getName(); boolean isGlobalCapabilities =AccessSection.GLOBJ_CAPABILITIES.equals(name); if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("Project required"); } com.google.gerrit.server.project.RefControl.validate(name); } else { java.util.Set<java.lang.String> pluginCapabilities = listCapabilities.permissions().keySet(); for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!(com.google.gerrit.common.data.GlobalCapability.isGlobalCapability(p.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("Cannot create %s", pluginCapabilities.getName())); } } return new com.google.gerrit.server.project.RefControl.
public static java.lang.String getShortName(java.lang.String projectName) { int lastIndex = projectName.lastIndexOf("/"); if (lastIndex == 0) { return (projectName.substring((lastIndex + 1)) + 1))); } return "..." + (projectName.substring((lastIndex + 1))); }
private static java.lang.String getShortName(java.lang.String projectName) { int lastIndex = projectName.lastIndexOf("/"); if (lastIndex == 0) { return (projectName.substring((lastIndex + 1)) + 1))); } return new java.lang.StringBuilder(projectName.substring((lastIndex + 1))); }
public static java.lang.String getShortName(java.lang.String projectName) { int lastIndex = projectName.lastIndexOf("/"); if (lastIndex == 0) { return (projectName.substring((lastIndex + 1)) + 1))); } return "..." + (projectName.substring((lastIndex + 1)) + 1))); }
private static java.lang.String getShortName(java.lang.String projectName) { int lastIndex = projectName.lastIndexOf("/"); if (lastIndex == 0) { return (projectName.substring((lastIndex + 1)) + 1))); } return new java.lang.StringBuilder(projectName.substring((lastIndex + 1)) + 1))); }
private static java.lang.String getShortName(java.lang.String projectName) { int lastIndex = projectName.lastIndexOf("/"); if (lastIndex == 0) { return (projectName.substring((lastIndex + 1)) + 1))); } return new java.lang.StringBuilder(projectName.substring((lastIndexOf('lastIndex + 1))); }
@org.junit.Test public void editCannotBeCreatedOnAbandonedChange() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).abandon(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format("change %s is ABANDONED", changeId)); createArrays.asList(changeId); }
@org.junit.Test public void editCannotBeCreatedOnAbandonedChange() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).abandon(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format("change %s is ABANDONED", changeId)); createArrays.abandon(changeId, changeId); }
@org.junit.Test public void editCannotBeCreatedOnAbandonedChange() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).abandon(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format("change %s is ABANDONED", changeId)); createArrays.asRestoreEditFor(changeId); }
@org.junit.Test public void editCannotBeCreatedOnAbandonedChange() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).abandon(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format("change %s is ABANDONED", changeId)); createArrays.asList(changeId, changeId); }
@org.junit.Test public void editCannotBeCreatedOnAbandonedChange() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).abandon(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format("change %s is ABANDONED", changeId)); createArrays.asRestoreEditFor(changeId, changeId); }
private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } com.google.gerrit.reviewdb.client.Change change = notes.getChange(); if (!(change.getStatus().isOpen())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format("Change %s is %s is %s is %s", change.getChangeId(), change.getStatus())); } try { permissionBackend.currentUser().database(reviewDb).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkState(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkState(notes.getProjectName()).checkState()); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException("AuthException denied denied denied"); } }
private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } com.google.gerrit.reviewdb.client.Change change = notes.getChange(); if (!(change.getStatus().isOpen())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format("Change %s is %s is %s is %s", change.getChangeId(), change.getStatus())); } try { permissionBackend.currentUser().database(reviewDb).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkState(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkState(notes.getProjectName()).checkState(com.google.gerrit.extensions.restapi.AuthException denied); } }
private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } com.google.gerrit.reviewdb.client.Change change = notes.getChange(); if (!(change.getStatus().isOpen())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format("Change %s is %s is %s is %s", change.getChangeId(), change.getStatus())); } try { permissionBackend.currentUser().database(reviewDb).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkState(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkState(notes.getProjectName()).checkState()); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException("AuthException denied denied denied denied"); } }
private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } com.google.gerrit.reviewdb.client.Change change = notes.getChange(); if (!(change.getStatus().isOpen())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format("Change %s is %s is %s is %s", change.getChangeId(), change.getStatus())); } try { permissionBackend.currentUser().database(reviewDb).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkState(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkState(notes.getProjectName()).checkState(false); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException("AuthException denied denied denied denied"); } }
private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } com.google.gerrit.reviewdb.client.Change change = notes.getChange(); if (!(change.getStatus().isOpen())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format("Change %s is %s is %s is %s", change.getChangeId(), change.getStatus())); } try { permissionBackend.currentUser().database(reviewDb).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkState(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkState(notes.getProjectName()).checkState(false); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException("AuthException denied denied denied denied denied"); } }
@org.junit.Test public void editCannotBeCreatedOnMergedChange() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(changeId).current().submit(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format("Cannot merge %s is merged", change._number)); createArrays.asList(changeId); }
@org.junit.Test public void editCannotBeCreatedOnMergedChange() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(changeId).current().submit(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format("Cannot merge %s is merged", change._number)); createArrays.asList(changeId, changeId); }
@org.junit.Test public void editCannotBeCreatedOnMergedChange() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(changeId).current().submit(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format("Cannot merge %s is merged", change._number)); createArrays.asList(changeId); createArrays.asList(changeId, changeId); }
@org.junit.Test public void editCannotBeCreatedOnMergedChange() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(changeId).current().submit(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format("Cannot merge %s is merged", change._number)); createArrays.asList(changeId, changeId); createArrays.asList(changeId); }
@org.junit.Test public void editCannotBeCreatedOnMergedChange() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(changeId).current().submit(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format("Cannot merge %s is merged", change._number)); createArrays.asList(changeId); createArrays.asList(changeId); }
@java.lang.Override public boolean deleteChangeFromIndex(final int changeId) { return new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.Request(request, changeId); }
@java.lang.Override public boolean deleteChangeFromIndex(final int changeId) { return new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.Request(changeId); }
@java.lang.Override public boolean deleteChangeFromIndex(final int changeId) { return newChangeFromIndex(changeId); }
@java.lang.Override public boolean deleteChangeFromIndex(final int changeId) { return new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.Request(changeId, changeId); }
@java.lang.Override public boolean deleteChangeFromIndex(final int changeId) { return new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.Request(request, changeId) { @java.lang.Override com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult send() throws java.io.IOException { return httpSession.delete(buildIndexEndpoint(changeId)); } }.execute(); }
@org.junit.Test public void storedSubmitRecordsWithRequired() { com.google.gerrit.server.index.change.ChangeField r = com.google.gerrit.server.index.change.ChangeFieldTest.create(SubmitRecord.Status.OK, com.google.gerrit.server.index.change.ChangeField.Label.OK, null), com.google.gerrit.server.index.change.ChangeField.label(SubmitRecord.Status.OK, "Label-1", null), com.google.gerrit.common.data.SubmitTypeTest.label(SubmitRecord.Status.OK, "Label-2", null)); com.google.gerrit.common.data.SubmitType sr = new com.google.gerrit.common.data.SubmitType(text); r.equalsIgnoreCase(java.util.Collections.singletonList(sr); }
@org.junit.Test public void storedSubmitRecordsWithRequires() { com.google.gerrit.server.index.change.ChangeField r = com.google.gerrit.server.index.change.ChangeFieldTest.create(SubmitRecord.Status.OK, com.google.gerrit.server.index.change.ChangeField.Status.OK, null), com.google.gerrit.server.index.change.ChangeFieldTest.label(SubmitRecord.Status.OK, "Label-1", null), com.google.gerrit.common.data.SubmitTypeTest.label(SubmitRecord.Status.OK, "Label-2", null)); com.google.gerrit.common.data.SubmitType r = new com.google.gerrit.common.data.SubmitType(text); r.equalsIgnoreCase(java.util.Collections.singletonList(sr); }
@org.junit.Test public void storedSubmitRecordsWithRequires() { com.google.gerrit.server.index.change.ChangeField r = com.google.gerrit.server.index.change.ChangeFieldTest.create(SubmitRecord.Status.OK, com.google.gerrit.server.index.change.ChangeField.Status.OK, null), com.google.gerrit.server.index.change.ChangeFieldTest.label(SubmitRecord.Status.OK, "Label-1", null), com.google.gerrit.common.data.SubmitTypeTest.label(SubmitRecord.Status.OK, "Label-2", null)); com.google.gerrit.common.data.SubmitType r = new com.google.gerrit.common.data.SubmitType(text); r.equalsIgnoreCase(java.util.Collections.singletonList(srf); }
@org.junit.Test public void storedSubmitRecordsWithRequires() { com.google.gerrit.server.index.change.ChangeField r = com.google.gerrit.server.index.change.ChangeFieldTest.create(SubmitRecord.Status.OK, com.google.gerrit.server.index.change.ChangeField.Status.OK, null), com.google.gerrit.server.index.change.ChangeFieldTest.label(SubmitRecord.Status.OK, "Label-1", null), com.google.gerrit.common.data.SubmitTypeTest.label(SubmitRecord.Status.OK, "Label-2", null)); com.google.gerrit.common.data.SubmitType sr = new com.google.gerrit.common.data.SubmitType(text); r.equalsIgnoreCase(java.util.Collections.singletonList(sr); }
@org.junit.Test public void storedSubmitRecordsWithRequires() { com.google.gerrit.server.index.change.ChangeField r = com.google.gerrit.server.index.change.ChangeFieldTest.create(SubmitRecord.Status.OK, com.google.gerrit.server.index.change.ChangeField.Status.OK, null), com.google.gerrit.server.index.change.ChangeFieldTest.label(SubmitRecord.Status.OK, "Label-1", null), com.google.gerrit.common.data.SubmitTypeTest.label(SubmitRecord.Status.OK, "Label-2", null)); com.google.gerrit.common.data.SubmitType sr = new com.google.gerrit.common.data.SubmitType(text); r.equalsIgnoreCase(java.util.Collections.singletonList(srf); com.google.gerrit.server.index.change.ChangeField r = new com.google.gerrit.server.index.change.ChangeField(); r.assertStoredValues(r); }
private com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; if ((labels)!= null) { rec.errorMessage = errorMessage; if ((labels)!= null) { rec.errorMessage = errorMessage; } if ((labels)!= null) { rec.labels = new java.util.ArrayList(labels.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredLabel label : labels) { com.google.gerrit.common.data.SubmitRecord.Label srl = new com.google.gerrit.common.data.SubmitRecord.Label(); srl.label = label.label; srl.appliedBy = ((label.appliedBy)!= null)? new com.google.gerrit.reviewdb.client.Account.Id(label.appliedBy) : null; rec.labels.add(srl); } } if ((queries)!= null) { rec.labels = new java.util.ArrayList(attemptUrls.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredSubmitRecord.StoredSubmitRecord r : req.labels) { rec.labels.add(srl); rec.add(srf); } } return rec; }
private com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; if ((labels)!= null) { rec.errorMessage = errorMessage; if ((labels)!= null) { rec.errorMessage = errorMessage; } if ((labels)!= null) { rec.labels = new java.util.ArrayList(labels.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredLabel label : labels) { com.google.gerrit.common.data.SubmitRecord.Label srl = new com.google.gerrit.common.data.SubmitRecord.Label(); srl.label = label.label; srl.appliedBy = ((label.appliedBy)!= null)? new com.google.gerrit.reviewdb.client.Account.Id(label.appliedBy) : null; rec.labels.add(srl); } } if ((queries)!= null) { rec.labels = new java.util.ArrayList(attemptUrls.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredSubmitRecord.StoredSubmitRecord r : req.labels) { rec.labels.add(sr); rec.add(srf); } } return rec; }
private com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; if ((labels)!= null) { rec.errorMessage = errorMessage; if ((labels)!= null) { rec.errorMessage = errorMessage; } if ((labels)!= null) { rec.labels = new java.util.ArrayList(labels.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredLabel label : labels) { com.google.gerrit.common.data.SubmitRecord.Label srl = new com.google.gerrit.common.data.SubmitRecord.Label(); srl.label = label.label; srl.appliedBy = ((label.appliedBy)!= null)? new com.google.gerrit.reviewdb.client.Account.Id(label.appliedBy) : null; rec.labels.add(srl); } } if ((queries)!= null) { rec.labels = new java.util.ArrayList(attemptUrls.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredSubmitRecord.StoredSubmitRecord r : req.labels) { rec.labels.add(srf); rec.add(srf); } } return rec; }
private com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; if ((labels)!= null) { rec.errorMessage = errorMessage; if ((labels)!= null) { rec.errorMessage = errorMessage; } if ((labels)!= null) { rec.labels = new java.util.ArrayList(labels.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredLabel label : labels) { com.google.gerrit.common.data.SubmitRecord.Label srl = new com.google.gerrit.common.data.SubmitRecord.Label(); srl.label = label.label; srl.appliedBy = ((label.appliedBy)!= null)? new com.google.gerrit.reviewdb.client.Account.Id(label.appliedBy) : null; rec.labels.add(srl); } } if ((queries)!= null) { rec.labels = new java.util.ArrayList(attemptUrls.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredSubmitRecord.StoredSubmitRecord r : req.labels) { rec.labels.add(srl); rec.needed.add(sr); } } return rec; }
private com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; if ((labels)!= null) { rec.errorMessage = errorMessage; if ((labels)!= null) { rec.errorMessage = errorMessage; } if ((labels)!= null) { rec.labels = new java.util.ArrayList(labels.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredLabel label : labels) { com.google.gerrit.common.data.SubmitRecord.Label srl = new com.google.gerrit.common.data.SubmitRecord.Label(); srl.label = label.label; srl.appliedBy = ((label.appliedBy)!= null)? new com.google.gerrit.reviewdb.client.Account.Id(label.appliedBy) : null; rec.labels.add(srl); } } if ((queries)!= null) { rec.labels = new java.util.ArrayList(attemptUrls.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredSubmitRecord.StoredSubmitRecord r : req.labels) { rec.labels.add(srl); rec.add(srf); } } } return rec; }
@java.lang.Override public boolean equals(java.lang.Object o) { if (this) { return true; } if (com.google.gerrit.common.data.SubmitType) { return false; } com.google.gerrit.common.data.SubmitType this = ((com.google.gerrit.common.data.SubmitType) (o)); return false; }
@java.lang.Override public boolean equals(java.lang.Object o) { if (this) { return true; } if (this instanceof com.google.gerrit.common.data.SubmitType) { return false; } com.google.gerrit.common.data.SubmitType t = ((com.google.gerrit.common.data.SubmitType) (o)); return false; }
@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == 0) { return true; } if (com.google.gerrit.common.data.SubmitType) { return false; } com.google.gerrit.common.data.SubmitType this = ((com.google.gerrit.common.data.SubmitType) (o)); return false; }
@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == 0) { return true; } if (this instanceof com.google.gerrit.common.data.SubmitType) { return false; } com.google.gerrit.common.data.SubmitType this = ((com.google.gerrit.common.data.SubmitType) (o)); return false; }
@java.lang.Override public boolean equals(java.lang.Object o) { if (this) { return true; } if (this instanceof com.google.gerrit.common.data.SubmitType) { return false; } com.google.gerrit.common.data.SubmitType this = ((com.google.gerrit.common.data.SubmitType) (o)); return false; }
public java.util.Map<java.lang.String, com.google.gerrit.server.project.ProjectState> get() { return data; }
public java.util.Map<java.lang.String, java.util.Map<java.lang.String, com.google.gerrit.server.project.ProjectState> get() { return data; }
public java.util.Map<java.lang.String, java.util.Map<java.lang.String, com.google.gerrit.extensions.common.data.GroupReference> get() { return data; }
public java.util.Map<java.lang.String, java.util.Map<java.lang.String, com.google.gerrit.extensions.common.data.IncludedGroups> get() { return data; }
public java.util.Map<java.lang.String, java.util.Map<java.lang.String, com.google.gerrit.extensions.common.data.GroupReference> get() { return new com.google.gerrit.server.project.ProjectControl(data).filter(); }
public java.lang.String getText() { return java.lang.String; }
public java.lang.String getText() { return legacyText; }
public java.lang.String getText() { return java.lang.String.valueOf(text); }
public java.lang.String getText() { return legacyBackupText; }
public java.lang.String getText() { return java.lang.String.valueOf(text; }
@java.lang.Override public java.lang.String toString() { return ((((((((("SubmitType=" + "defaultText=") + (defaultText)) + ") + (typeText)) + '\n') + (type)) + '}"; }
@java.lang.Override public java.lang.String toString() { return ((((((("SubmitType=" + (formValidation)) + ") + (typeText)) + '\n') + (typeText)) + '\n') + '}"; }
@java.lang.Override public java.lang.String toString() { return ((((((((("SubmitType=" + "defaultText=") + (defaultText)) + ") + (typeText)) + '\n') + '\n') + (type)) + '}"; }
@java.lang.Override public java.lang.String toString() { return ((((((((("SubmitType=" + "defaultText=") + (defaultText)) + ") + (typeText)) + '\n') + '\n') + (type)) + '}'; }
@java.lang.Override public java.lang.String toString() { return ((((((((("SubmitType=" + "defaultText=") + (defaultText)) + ") + (typeText)) + '\n') + (type)) + '\n') + '}"; }
@java.lang.Override public int hashCode() { return null; }
@java.lang.Override public int hashCode() { return com.google.common.base.Objects.hashText(text, type); }
@java.lang.Override public int hashCode() { return com.google.common.base.Objects.hash(text, type); }
@java.lang.Override public int hashCode() { return com.google.common.base.Objects.hashtext(text, type); }
@java.lang.Override public int hashCode() { return com.google.common.base.Objects.hashText(text, null); }
public java.lang.String name() { return type; }
public java.lang.String getType() { return type; }
public java.lang.String name() { return annotation; }
public java.lang.String getClassName() { return type; }
public com.google.gerrit.reviewdb.client.PatchLine type() { return type; }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if (versionManager.startReindex(name)) { if (versionManager.start(name, force)) { stdout.println(" reindex", reindex, index); } else { stdout.println("Reindex", index, index); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die(e.getMessage()); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if (versionManager.startReindex(name)) { if (versionManager.start(name, force)) { stdout.println(" reindex", reindex, index); } else { stdout.println("Reindex", index, this name); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die(e.getMessage()); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if (versionManager.startReindex(name)) { if (versionManager.start(name, force)) { stdout.println(" reindex", reindex, index); } else { stdout.println("Reindex", index, thisName); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die(e.getMessage()); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if (versionManager.startReindex(name)) { if (versionManager.start(name, force)) { stdout.println(" reindex", reindex, index); } else { stdout.println("Reindex", index, index); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die(e); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if (versionManager.startReindex(name)) { if (versionManager.start(name, force)) { stdout.println(" reindex", reindex, index); } else { stdout.println("Reindex", index, index); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die(e.getMessage()); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die(e); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if (versionManager.isOpenIndex(name)) { if (versionManager.activateLatestIndex(name)) { stdout.println("Initial index version on latest version", new com.google.gerrit.server.index.ReindexerAlreadyRunning(name))); } } else { stdout.println("Initial index", "version", name); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die(e.getMessage()); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if (versionManager.isOpenIndex(name)) { if (versionManager.activateLatestIndex(name)) { stdout.println("Initial index version on latest version", new com.google.gerrit.server.index.ReindexerAlreadyRunning(name))); } } else { stdout.println("Initial index", "version", name); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die(e); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if (versionManager.isOpenIndex(name)) { if (versionManager.activateLatestIndex(name)) { stdout.println("Initial index version on latest version", new com.google.gerrit.server.index.ReindexerAlreadyRunning(name))); } else { stdout.println("Initial index", "version on this version", this); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die(e.getMessage()); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if (versionManager.isOpenIndex(name)) { if (versionManager.activateLatestIndex(name)) { stdout.println("Initial index version on latest version", new com.google.gerrit.server.index.ReindexerAlreadyRunning(name))); } } else { stdout.println("Initial index", "version", name); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die(e.getMessage(), e); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if (versionManager.isOpenIndex(name)) { if (versionManager.activateLatestIndex(name)) { stdout.println("Initial index version on latest version", new com.google.gerrit.server.index.ReindexerAlreadyRunning(name))); } } else { stdout.println("Initial index", "version", name); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die(e.getMessage(), e.getMessage()); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String userName = user.getUserName().orElseThrow(new java.io.IOException { @java.lang.Override public java.lang.String apply(com.google.gerrit.server.account.ExternalId extId) throws com.google.gerrit.extensions.restapi.ResourceConflictException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String optionalExtId = externalExtIds.get(ExternalId.Key.create(com.google.gerrit.server.account.SCHEME_USERNAME, userName)); if (!(optionalExtId.isPresent())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.server.account.externalids.ExternalId extId = optionalExtId.get().updateExternalId(); accountsUpdateProvider.get().update(com.google.gerrit.server.account.externalids.ExternalId.createWithPassword(extId.key(), extId.email(), newPassword))); return com.google.common.base.Strings.isNullOrEmpty(newPassword); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String userName = user.getUserName().orElseThrow(new java.io.IOException { @java.lang.Override public java.lang.String apply(com.google.gerrit.server.account.externalids.ExternalId extId) throws com.google.gerrit.extensions.restapi.ResourceConflictException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String optionalExtId = externalIds.get(ExternalId.Key.create(com.google.gerrit.server.account.SCHEME_USERNAME, userName)); if (!(optionalExtId.isPresent())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.server.account.externalids.ExternalId extId = optionalExtId.get().updateExternalId(); accountsUpdateProvider.get().updateExternalId(com.google.gerrit.server.account.externalids.ExternalId.createWithPassword(extId.key(), extId.email(), newPassword))); return com.google.common.base.Strings.isNullOrEmpty(newPassword); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String userName = user.getUserName().orElseThrow(new java.io.IOException { @java.lang.Override public java.lang.String apply(com.google.gerrit.server.account.externalids.ExternalId extId) throws com.google.gerrit.extensions.restapi.ResourceConflictException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String optionalExtId = externalIds.get(ExternalId.Key.create(com.google.gerrit.server.account.SCHEME_USERNAME, userName)); if (!(optionalExtId.isPresent())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.server.account.externalids.ExternalId extId = optionalExtId.get().updateExternalId(); accountsUpdateProvider.get().update(com.google.gerrit.server.account.externalids.ExternalId.createWithPassword(extId.key(), extId.email(), newPassword))); return com.google.common.base.Strings.isNullOrEmpty(newPassword)? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String userName = user.getUserName().orElseThrow(new java.io.IOException { @java.lang.Override public java.lang.String apply(com.google.gerrit.server.account.externalids.ExternalId extId) throws com.google.gerrit.extensions.restapi.ResourceConflictException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String optionalExtId = externalIds.get(ExternalId.Key.create(com.google.gerrit.server.account.SCHEME_USERNAME, userName)); if (!(optionalExtId.isPresent())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.server.account.externalids.ExternalId extId = optionalExtId.get(); accountsUpdateProvider.get().update(com.google.gerrit.server.account.externalids.ExternalId.createWithPassword(extId.key(), extId.accountId(), extId.email(), newPassword))); return com.google.common.base.Strings.isNullOrEmpty(newPassword)? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String userName = user.getUserName().orElseThrow(new java.io.IOException { @java.lang.Override public java.lang.String apply(com.google.gerrit.server.account.externalids.ExternalId extId) throws com.google.gerrit.extensions.restapi.ResourceConflictException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String optionalExtId = externalIds.get(ExternalId.Key.create(com.google.gerrit.server.account.SCHEME_USERNAME, userName)); if (!(optionalExtId.isPresent())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.server.account.externalids.ExternalId extId = optionalExtId.get().updateExternalId(); accountsUpdateProvider.get().updateExternalId(com.google.gerrit.server.account.externalids.ExternalId.createWithPassword(extId.key(), extId.email(), newPassword))); return com.google.common.base.Strings.isNullOrEmpty(newPassword)? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }
@org.junit.Test public void rawDocument() throws java.lang.Exception { com.google.gerrit.extensions.common.AccountInfo userInfo = gApi.accounts().id(admin.getAccountId().get()).get(); java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> rawFields = indexes.getSearchIndex().getRaw(new com.google.gerrit.reviewdb.client.Account.Id(userInfo._accountId), com.google.gerrit.server.index.IndexConfigOption.create(com.google.gerrit.server.index.IndexConfigOption.create(), 0, 1, indexes.getSearchIndex().keySet())); assertThat(rawFields).isPresent()).isEqualTo(userInfo._accountId); if ((getSchemaVersion()) < 6) { return; } java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> externalIds = gApi.accounts().self().get(AccountId.parse(accountId)).getValue(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> extIds = new java.util.ArrayList<>(); java.util.List<> extIds = new java.ArrayList<>(); java.util.ArrayList<> extIds = gApi.accounts().self().get(ExternalIds.parse(com.google.gerrit.extensions.common.AccountExternalIdInfo.parse(info.identity.parse(info.identity)); assertThat(extIds).isPresent()).isTrue(); com.google.common.collect.ImmutableList<com.google.gerrit.server.query.account.AccountExternalId> extIds = externalIds.get(ExternalIds.get(Constants.EX_ID); assertThat(extIds.isPresent()).isEqualTo(blobs.size()); assertThat(com.google.common.collect.ImmutableSet.of(rawFields.get(AccountField.EX_ID_ID)).isEqualTo(AccountField.EX_ID_STATE)); }
@org.junit.Test public void rawDocument() throws java.lang.Exception { com.google.gerrit.extensions.common.AccountInfo userInfo = gApi.accounts().id(admin.getAccountId().get()).get(); java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> rawFields = indexes.getSearchIndex().getRaw(new com.google.gerrit.reviewdb.client.Account.Id(userInfo._accountId), com.google.gerrit.server.index.IndexConfigOption.create(com.google.gerrit.server.index.IndexConfigOption.create(), 0, 1, indexes.getSearchIndex().keySet())); assertThat(rawFields).isPresent()).isEqualTo(userInfo._accountId); if ((getSchemaVersion()) < 6) { return; } java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> externalIds = gApi.accounts().self().get(AccountId.parse(accountId)).getValue(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> extIds = new java.util.ArrayList<>(); java.util.List<> extIds = new java.ArrayList<>(); java.util.ArrayList<> extIds = gApi.accounts().self().get(ExternalIds.parse(com.google.gerrit.extensions.common.AccountExternalIdInfo.parse(info.identity.parse(info.identity)); assertThat(extIds).isPresent()).isTrue(); com.google.common.collect.ImmutableList<com.google.gerrit.server.query.account.AccountExternalId> extIds = externalIds.get(ExternalIds.get(Constants.EX_ID); assertThat(extIds.isPresent()).isEqualTo(blobs.size()); assertThat(com.google.common.collect.ImmutableSet.of(rawFields.get(AccountField.EX_ID_ID)).isEqualTo(AccountField.EX_ID_STATE)).isEqualTo(blob.getValue()); }
@org.junit.Test public void rawDocument() throws java.lang.Exception { com.google.gerrit.extensions.common.AccountInfo userInfo = gApi.accounts().id(admin.getAccountId().get()).get(); java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> rawFields = indexes.getSearchIndex().getRaw(new com.google.gerrit.reviewdb.client.Account.Id(userInfo._accountId), com.google.gerrit.server.index.IndexConfigOption.create(com.google.gerrit.server.index.IndexConfigOption.create(), 0, 1, indexes.getSearchIndex().keySet())); assertThat(rawFields).isPresent()).isEqualTo(userInfo._accountId); if ((getSchemaVersion()) < 6) { return; } java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> externalIds = gApi.accounts().self().get(AccountId.parse(accountId)).getValue(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> extIds = new java.util.ArrayList<>(); java.util.List<> extIds = new java.ArrayList<>(); java.util.ArrayList<> extIds = gApi.accounts().self().get(ExternalIds.parse(com.google.gerrit.extensions.common.AccountExternalIdInfo.parse(info.identity.parse(info.identity)); assertThat(extIds).isPresent()).isTrue(); com.google.common.collect.ImmutableList<com.google.gerrit.server.query.account.AccountExternalId> extIds = externalIds.get(ExternalIds.get(Constants.EX_ID); assertThat(extIds.isPresent()).isEqualTo(blobs.size()); assertThat(com.google.common.collect.ImmutableSet.of(rawFields.get(AccountField.EX_ID_ID)).isEqualTo(AccountField.EX_ID_STATE)).isEqualTo(blobs.getValue(Account
@org.junit.Test public void rawDocument() throws java.lang.Exception { com.google.gerrit.extensions.common.AccountInfo userInfo = gApi.accounts().id(admin.getAccountId().get()).get(); java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> rawFields = indexes.getSearchIndex().getRaw(new com.google.gerrit.reviewdb.client.Account.Id(userInfo._accountId), com.google.gerrit.server.index.IndexConfigOption.create(com.google.gerrit.server.index.IndexConfigOption.create(), 0, 1, indexes.getSearchIndex().keySet())); assertThat(rawFields).isPresent()).isEqualTo(userInfo._accountId); if ((getSchemaVersion()) < 6) { return; } java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> externalIds = gApi.accounts().self().get(AccountId.parse(accountId)).getValue(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> extIds = new java.util.ArrayList<>(); java.util.List<> extIds = new java.ArrayList<>(); java.util.ArrayList<> extIds = gApi.accounts().self().get(ExternalIds.parse(com.google.gerrit.extensions.common.AccountExternalIdInfo.parse(info.identity.parse(info.identity)); assertThat(extIds).isPresent()).isTrue(); com.google.common.collect.ImmutableList<com.google.gerrit.server.query.account.AccountExternalId> extIds = externalIds.get(ExternalIds.get(Constants.EX_ID); assertThat(extIds.isPresent()).isEqualTo(blobs.getValue(AccountField.EX_ID_STATE)).isEqualTo(blobs.getValue(AccountField.EX_ID_ID)); assertThat(raw, com.google.common.collect.Streams.stream(raw.get().getValue(AccountField.
@org.junit.Test public void rawDocument() throws java.lang.Exception { com.google.gerrit.extensions.common.AccountInfo userInfo = gApi.accounts().id(admin.getAccountId().get()).get(); java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> rawFields = indexes.getSearchIndex().getRaw(new com.google.gerrit.reviewdb.client.Account.Id(userInfo._accountId), com.google.gerrit.server.index.IndexConfigOption.create(com.google.gerrit.server.index.IndexConfigOption.create(), 0, 1, indexes.getSearchIndex().keySet())); assertThat(rawFields).isPresent()).isEqualTo(userInfo._accountId); if ((getSchemaVersion()) < 6) { return; } java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> externalIds = gApi.accounts().self().get(AccountId.parse(accountId)).getValue(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> extIds = new java.util.ArrayList<>(); java.util.List<> extIds = new java.ArrayList<>(); java.util.ArrayList<> extIds = gApi.accounts().self().get(ExternalIds.parse(com.google.gerrit.extensions.common.AccountExternalIdInfo.parse(info.identity.parse(info.identity)); assertThat(extIds).isPresent()).isTrue(); com.google.common.collect.ImmutableList<com.google.gerrit.server.query.account.AccountExternalId> extIds = externalIds.get(ExternalIds.get(Constants.EX_ID); assertThat(extIds.isPresent()).isEqualTo(blobs.getValue(AccountField.EX_ID_STATE)).isEqualTo(blobs.getValue(AccountField.EX_ID_ID)); assertThat(raw, com.google.common.collect.Streams.stream(raw.get().getValue(AccountFields
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String tag = com.google.gerrit.server.project.RefNamesUtil.normalizeTagRef(resource.getTagInfo().ref); if (tag!= null) { throw new com.google.gerrit.extensions.restapi.AuthException(("Not allowed to delete " + tag)); } permissionBackend.currentUser().project(resource.getNameKey()).check(RefPermission.DELETE); permissionBackendFactory.create(resource).check(tag).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String tag = com.google.gerrit.server.project.RefNamesUtil.normalizeTagRef(resource.getTagInfo().ref); if (tag!= null) { throw new com.google.gerrit.extensions.restapi.AuthException(("Not allowed to delete " + tag)); } permissionBackend.currentUser().project(resource.getNameKey()).check(RefPermission.DELETE); permissionBackendFactory.create(resource).check(RefPermission.DELETE); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String tag = com.google.gerrit.server.project.RefNamesUtil.normalizeTagRef(resource.getTagInfo().ref); if (tag!= null) { throw new com.google.gerrit.extensions.restapi.AuthException(("Not allowed to delete " + tag)); } permissionBackend.currentUser().project(resource.getNameKey()).check(RefPermission.DELETE).check(RefPermission.DELETE); permissionBackendFactory.create(resource).checkNotNull(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String tag = com.google.gerrit.server.project.RefNamesUtil.normalizeTagRef(resource.getTagInfo().ref); if (tag!= null) { throw new com.google.gerrit.extensions.restapi.AuthException(("Not allowed to delete " + tag)); } permissionBackend.currentUser().project(resource.getNameKey()).check(RefPermission.DELETE).check(RefPermission.DELETE); permissionBackendFactory.create(resource).ref(tag).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String tag = com.google.gerrit.server.project.RefNamesUtil.normalizeTagRef(resource.getTagInfo().ref); if (tag!= null) { throw new com.google.gerrit.extensions.restapi.AuthException(("Not allowed to delete " + tag)); } permissionBackend.currentUser().project(resource.getNameKey()).check(RefPermission.DELETE).check(RefPermission.DELETE); permissionBackendFactory.create(resource).checkNotNull(); return com.google.gerrit.extensions.restapi.Response.create(resource).ref(resource).ref(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { if (com.google.gerrit.reviewdb.client.RefNames.isMetaRef(rsrc.getBranchKey().get())) { throw new com.google.gerrit.extensions.restapi.AuthException(("Not allowed to delete branch " + (rsrc.getBranchKey().get()))); } permissionBackend.currentUser().ref(rsrc.getBranchKey()).check(RefPermission.DELETE); rsrc.getProjectState().checkState(1).byBranchOpen(); if (!(queryProvider.get().byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Project " + (rsrc.getBranchKey())) + " has open changes")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).prefix(com.google.gerrit.server.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { if (com.google.gerrit.reviewdb.client.RefNames.isMetaRef(rsrc.getBranchKey().get())) { throw new com.google.gerrit.extensions.restapi.AuthException(("Not allowed to delete branch " + (rsrc.getBranchKey().get()))); } permissionBackend.currentUser().ref(rsrc.getBranchKey()).check(RefPermission.DELETE); rsrc.getProjectState().checkState(1).byBranchOpen(); if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Project " + (rsrc.getBranchKey())) + " has open changes")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).prefix(com.google.gerrit.server.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { if (com.google.gerrit.reviewdb.client.RefNames.isMetaRef(rsrc.getBranchKey().get())) { throw new com.google.gerrit.extensions.restapi.AuthException(("Not allowed to delete branch " + (rsrc.getBranchKey().get()))); } permissionBackend.currentUser().ref(rsrc.getBranchKey()).check(RefPermission.DELETE); rsrc.getProjectState().checkState(1).byBranchOpen(); if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("branch " + (rsrc.getBranchKey())) + " has open changes")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).prefix(com.google.gerrit.server.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { if (com.google.gerrit.reviewdb.client.RefNames.isMetaRef(rsrc.getBranchKey().get())) { throw new com.google.gerrit.extensions.restapi.AuthException(("Not allowed to delete branch " + (rsrc.getBranchKey().get()))); } permissionBackend.currentUser().ref(rsrc.getBranchKey()).check(RefPermission.DELETE); rsrc.getProjectState().checkState(1).byBranchOpen(); if (!(queryProvider.get().byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("branch " + (rsrc.getBranchKey())) + " has open changes")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).prefix(com.google.gerrit.server.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { if (rsrc.isMetaConfig(rsrc.getBranchKey().get())) { throw new com.google.gerrit.extensions.restapi.AuthException(("Cannot delete branch " + (rsrc.getBranchKey().get()))); } permissionBackend.currentUser().ref(rsrc.getBranchKey()).check(RefPermission.DELETE); rsrc.getProjectState().checkState(1).byBranchOpen(); if (!(queryProvider.get().byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Project " + (rsrc.getBranchKey())) + " has open changes")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).prefix(com.google.gerrit.server.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
public static boolean isMetaConfig(java.lang.String ref) { return com.google.gerrit.reviewdb.client.RefNames.REFS_CONFIG.equals(ref); }
public static boolean isMetaConfig(java.lang.String ref) { return com.google.gerrit.server.git.RefNames.REFS_CONFIG.equals(ref); }
public static boolean isMetaConfig(java.lang.String ref) { return com.google.gerrit.server.project.RefNames.REFS_CONFIG.equals(ref); }
public static boolean isMetaConfig(java.lang.String ref) { return (com.google.gerrit.reviewdb.client.RefNames.REFS_CONFIG.equals(ref)) || (ref.equals(ref); }
public static boolean isMetaConfig(java.lang.String ref) { return (com.google.gerrit.reviewdb.client.RefNames.REFS_CONFIG.equals(ref)) && (ref.equals(ref); }
private boolean canDelete(org.eclipse.jgit.transport.ReceiveCommand cmd) throws com.google.gerrit.server.permissions.PermissionBackendException { if (com.google.gerrit.reviewdb.client.RefNames.isMetaRef(cmd.getRefName())) { return false; } try { permissions.ref(cmd.getRefName()).check(RefPermission.DELETE); return projectState.state().state(); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } }
private boolean canDelete(org.eclipse.jgit.transport.ReceiveCommand cmd) throws com.google.gerrit.server.permissions.PermissionBackendException { if (com.google.gerrit.reviewdb.client.RefNames.isMetaConfig(cmd.getRefName())) { return false; } try { permissions.ref(cmd.getRefName()).check(RefPermission.DELETE); return projectState.state().state(); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } }
private boolean canDelete(org.eclipse.jgit.transport.ReceiveCommand cmd) throws com.google.gerrit.server.permissions.PermissionBackendException { if (com.google.gerrit.reviewdb.client.RefNames.isMetaRef(cmd.getRefName())) { return false; } try { permissions.ref(cmd.getRefName()).check(RefPermission.DELETE); return projectState.state().state(RefPermission.DELETE); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } }
private boolean canDelete(org.eclipse.jgit.transport.ReceiveCommand cmd) throws com.google.gerrit.server.permissions.PermissionBackendException { if (com.google.gerrit.reviewdb.client.RefNames.isMetaRef(cmd.getRefName())) { return false; } try { permissions.ref(cmd.getRefName()).check(RefPermission.DELETE); return projectState.state().state(RefPermission.DELETE); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return true; } }
private boolean canDelete(org.eclipse.jgit.transport.ReceiveCommand cmd) throws com.google.gerrit.server.permissions.PermissionBackendException { if (com.google.gerrit.reviewdb.client.RefNames.isMetaRef(cmd.getRefName())) { return false; } try { permissions.ref(cmd.getRefName()).check(RefPermission.DELETE); return projectState.state().state(RefPermission.DELETE); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return null; } }
private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState project, java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId())!= null)? ref.getObjectId().name() : null; if (com.google.gerrit.reviewdb.client.RefNames.isMetaRef(ref.getName())) { info.canDelete = null; } else { info.canDelete = null; } else { info.canDelete = null; } com.google.gerrit.server.project.BranchResource rsrc = new com.google.gerrit.server.project.BranchResource(projectState, user, rsrc); for (com.google.gerrit.extensions.webui.UiAction d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { r.actions = new com.google.gerrit.extensions.common.WebLinkInfo(projectState, user, rsrc); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(d)); info.actions = (links.isEmpty())? null : links; }
private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState project, java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId())!= null)? ref.getObjectId().name() : null; if (com.google.gerrit.reviewdb.client.RefNames.isMetaConfig(ref.getName())) { info.canDelete = null; } else { info.canDelete = null; } else { info.canDelete = null; } com.google.gerrit.server.project.BranchResource rsrc = new com.google.gerrit.server.project.BranchResource(projectState, user, rsrc); for (com.google.gerrit.extensions.webui.UiAction d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { r.actions = new com.google.gerrit.extensions.common.WebLinkInfo(projectState, user, rsrc); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(d)); info.actions = (links.isEmpty())? null : links; }
private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState project, java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId())!= null)? ref.getObjectId().name() : null; if (com.google.gerrit.reviewdb.client.RefNames.isMetaRef(ref.getName())) { info.canDelete = null; } else { info.canDelete = null; } else { info.canDelete = null; } com.google.gerrit.server.project.BranchResource rsrc = new com.google.gerrit.server.project.BranchResource(projectState, user, rsrc); for (com.google.gerrit.extensions.webui.UiAction d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { r.actions = new com.google.gerrit.extensions.common.WebLinkInfo(projectState, user, rsrc); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(d); info.actions = (links.isEmpty())? null : links; }
private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState project, java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId())!= null)? ref.getObjectId().name() : null; if (com.google.gerrit.reviewdb.client.RefNames.isMetaRef(ref.getName())) { info.canDelete = null; } else { info.canDelete = null; } else { info.canDelete = null; } com.google.gerrit.server.project.BranchResource rsrc = new com.google.gerrit.server.project.BranchResource(projectState, user, rsrc); for (com.google.gerrit.extensions.webui.UiAction d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { r.actions = new com.google.gerrit.extensions.common.WebLinkInfo(projectState, user, rsrc); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(d); if ((links.isEmpty()) && (links.isEmpty())? null : links; } java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(projectState.getName(), ref.getName()); info.webLinks = (links.isEmpty())? null : links; return info; }
private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState project, java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId())!= null)? ref.getObjectId().name() : null; if (com.google.gerrit.reviewdb.client.RefNames.isMetaRef(ref.getName())) { info.canDelete = null; } else { info.canDelete = null; } else { info.canDelete = null; } com.google.gerrit.server.project.BranchResource rsrc = new com.google.gerrit.server.project.BranchResource(projectState, user, rsrc); for (com.google.gerrit.extensions.webui.UiAction d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { r.actions = new com.google.gerrit.extensions.common.WebLinkInfo(projectState, user, rsrc); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(d); if ((links.isEmpty()) && (links.isEmpty())? null : links; } return info; }
@org.junit.Test public void storeThenQueryNotVisible() throws java.lang.Exception { when(permissionBackendMock(userProviderMock.get()).thenReturn(withUserMock); when(withUserMock.project(Project.NameKey.class))).thenReturn(forUserMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("")).when(ForProjectMock.class); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); }
@org.junit.Test public void storeThenQueryNotVisible() throws java.lang.Exception { when(permissionBackendMock(userProviderMock.get()).thenReturn(withUserMock); when(withUserMock.project(Project.NameKey.class))).thenReturn(forUserMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("")).when(ForProjectMock.class); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.GENER_QUERY); assertThat(events).isEmpty(); }
@org.junit.Test public void storeThenQueryNotVisible() throws java.lang.Exception { when(permissionBackendMock(userProviderMock.get()).thenReturn(withUserMock); when(withUserMock.project(Project.NameKey.class))).thenReturn(forUserMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("")).when(ForProjectMock.class); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeData(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); }
@org.junit.Test public void storeThenQueryNotVisible() throws java.lang.Exception { when(permissionBackendMock(userProviderMock.get()).thenReturn(withUserMock); when(withUserMock.project(Project.NameKey.class))).thenReturn(forUserMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("")).when(ForProjectMock.class); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeData(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.GENER_QUERY); assertThat(events).isEmpty(); }
@org.junit.Test public void storeThenQueryNotVisible() throws java.lang.Exception { when(permissionBackendMock(userProviderMock.get()).thenReturn(withUserMock); when(withUserMock.project(Project.NameKey.class))).thenReturn(forUserMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("")).when(ForProjectMock.class); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); }
@org.junit.Test public void storeThenQueryVisible() throws java.lang.Exception { when(permissionBackendMock(userProviderMock.get()).thenReturn(withUserMock); when(withUserMock)).thenReturn(forUserMock); when(withUserMock.project(Project.NameKey.class))).thenReturn(forProject(ProjectPermission.ACCESS_QUERY); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.GENERIC_QUERY); java.lang.String json = new com.google.gson.Gson().toJson(mockEvent); assertThat(events).containsExactly(json); }
@org.junit.Test public void storeThenQueryVisible() throws java.lang.Exception { when(permissionBackendMock(userProviderMock.get()).thenReturn(withUserMock); when(withUserMock)).thenReturn(forUserMock); when(withUserMock.project(Project.NameKey.class))).thenReturn(forProject(ProjectPermission.ACCESS_QUERY); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.GENERIC_QUERY); assertThat(events).containsExactly(json); }
@org.junit.Test public void storeThenQueryVisible() throws java.lang.Exception { when(permissionBackendMock(userProviderMock.get()).thenReturn(withUserMock); when(withUserMock)).thenReturn(forUserMock); when(withUserMock.project(Project.NameKey.class))).thenReturn(For(For(Project.NameKey.class); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.GENERIC_QUERY); assertThat(events).containsExactly(json); }
@org.junit.Test public void storeThenQueryVisible() throws java.lang.Exception { when(permissionBackendMock(userProviderMockProvider).thenReturn(withUserMock); when(withUserMock)).thenReturn(withUserMock); when(withUserMock.project(Project.NameKey.class))).thenReturn(forProject(ProjectPermission.ACCESS_QUERY); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.GENERIC_QUERY); java.lang.String json = new com.google.gson.Gson().toJson(mockEvent); assertThat(events).containsExactly(json); }
@org.junit.Test public void storeThenQueryVisible() throws java.lang.Exception { when(permissionBackendMock(userProviderMock.get()).thenReturn(withUserMock); when(withUserMock)).thenReturn(forUserMock); when(withUserMock.project(Project.NameKey.class))).thenReturn(For(For(Project.NameKey.class); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.GENERIC_QUERY); java.lang.String json = new com.google.gson.Gson().toJson(mockEvent); assertThat(events).containsExactly(json); }
@java.lang.Override public java.util.List<java.lang.String> queryChangeEvents(java.lang.String query) throws com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException { if (!(online)) { throw new com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException(); } java.util.List<com.ericsson.gerrit.plugins.eventslog.SQLEntry> entries = new java.util.ArrayList<>(); for (java.util.Map.Entry<java.lang.String, java.util.Collection<com.ericsson.gerrit.plugins.eventslog.SQLEntry>> entry : eventsDb.getEvents(query).asMap().entrySet()) { java.lang.String projectName = entry.getKey(); try { permissionBackend.user(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName)).check(ProjectPermission.ACCESS); } catch (com.google.gerrit.extensions.restapi.AuthException e) { } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.ericsson.gerrit.plugins.eventslog.SQLStore.log.warn("Cannot check project access permission", e); } return sortedEventsFromEntries(entries); }
@java.lang.Override public java.util.List<java.lang.String> queryChangeEvents(java.lang.String query) throws com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException { if (!(online)) { throw new com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException(); } java.util.List<com.ericsson.gerrit.plugins.eventslog.SQLEntry> entries = new java.util.ArrayList<>(); for (java.util.Map.Entry<java.lang.String, java.util.Collection<com.google.gerrit.reviewdb.client.SQLEntry>> entry : eventsDb.getEvents(query).asMap().entrySet()) { java.lang.String projectName = entry.getKey(); try { permissionBackend.user(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName)).check(ProjectPermission.ACCESS); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.ericsson.gerrit.plugins.eventslog.SQLStore.warn("Cannot check project access permission", e); } return sortedEventsFromEntries(entries); }
@java.lang.Override public java.util.List<java.lang.String> queryChangeEvents(java.lang.String query) throws com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException { if (!(online)) { throw new com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException(); } java.util.List<com.ericsson.gerrit.plugins.eventslog.SQLEntry> entries = new java.util.ArrayList<>(); for (java.util.Map.Entry<java.lang.String, java.util.Collection<com.google.gerrit.reviewdb.client.SQLEntry>> entry : eventsDb.getEvents(query).asMap().entrySet()) { java.lang.String projectName = entry.getKey(); try { permissionBackend.user(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName)).check(ProjectPermission.ACCESS); } catch (com.google.gerrit.extensions.restapi.AuthException e) { } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.ericsson.gerrit.plugins.eventslog.SQLStore.log.warn("Cannot check project access permission", e); } return sortedEventsFromEntries(entries); }
@java.lang.Override public java.util.List<java.lang.String> queryChangeEvents(java.lang.String query) throws com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException { if (!(online)) { throw new com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException(); } java.util.List<com.ericsson.gerrit.plugins.eventslog.SQLEntry> entries = new java.util.ArrayList<>(); for (java.util.Map.Entry<java.lang.String, java.util.Collection<com.ericsson.gerrit.plugins.eventslog.SQLEntry>> entry : eventsDb.getEvents(query).asMap().entrySet()) { java.lang.String projectName = entry.getKey(); try { permissionBackend.user(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName)).check(ProjectPermission.ACCESS); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { } catch (com.google.gerrit.extensions.restapi.AuthException e) { com.ericsson.gerrit.plugins.eventslog.SQLStore.log.warn("Cannot check project access permission", e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.ericsson.gerrit.plugins.eventslog.SQLStore.log.warn("Cannot check project access permission", e); } } return sortedEventsFromEntries(entries); }
@java.lang.Override public java.util.List<java.lang.String> queryChangeEvents(java.lang.String query) throws com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException { if (!(online)) { throw new com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException(); } java.util.List<com.ericsson.gerrit.plugins.eventslog.SQLEntry> entries = new java.util.ArrayList<>(); for (java.util.Map.Entry<java.lang.String, java.util.Collection<com.ericsson.gerrit.plugins.eventslog.SQLEntry>> entry : eventsDb.getEvents(query).asMap().entrySet()) { java.lang.String projectName = entry.getKey(); try { permissionBackend.user(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName)).check(ProjectPermission.ACCESS); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { } catch (com.google.gerrit.extensions.restapi.AuthException e) { com.ericsson.gerrit.plugins.eventslog.SQLStore.log.warn("Cannot check project access permission", e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { } } return sortedEventsFromEntries(entries); }
@org.junit.Test public void notReturnEventWithNoVisibilityInfo() throws java.lang.Exception { when(permissionBackendMock(userProviderMock, userProvider).thenReturn(withUserMock); when(withUserMock(any(Project.NameKey.class))).thenReturn(forUserMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("")).when(ForProjectMock.class); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); }
@org.junit.Test public void notReturnEventWithNoVisibilityInfo() throws java.lang.Exception { when(permissionBackendMock(userProviderMock, userProvider).thenReturn(withUserMock); when(withUserMock)).thenReturn(forUserMock); when(withUserMock.project(Project.NameKey.class))).thenReturn(For(For(Project.NameKey.class))).thenReturn(forProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); }
@org.junit.Test public void notReturnEventWithNoVisibilityInfo() throws java.lang.Exception { when(permissionBackendMock(userProviderMock, userProvider).thenReturn(withUserMock); when(withUserMock(any(Project.NameKey.class))).thenReturn(forUserMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("")).thenReturn(ForProjectMock); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); }
@org.junit.Test public void notReturnEventWithNoVisibilityInfo() throws java.lang.Exception { when(permissionBackendMock(userProviderMock, userProvider).thenReturn(withUserMock); when(withUserMock(any(Project.NameKey.class))).thenReturn(forUserMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("")).when(ForProjectMock.class); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeData(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); }
@org.junit.Test public void notReturnEventWithNoVisibilityInfo() throws java.lang.Exception { when(permissionBackendMock(userProviderMock, userProvider).thenReturn(withUserMock); when(withUserMock(any(Project.NameKey.class))).thenReturn(forUserMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("")).thenReturn(ForProjectMock); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.GENER_QUERY); assertThat(events).isEmpty(); }
private java.lang.Object logo() { if ((logoUrl) == null) { return null; } java.lang.String url = fmt.image(logoUrl); if (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(url)) { return url; } java.lang.String url; if (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(url)) { return com.google.gitiles.doc.html.HtmlBuilder.filterImageDataUri(url); } else { return com.google.common.base.Strings.nullToEmpty(url); } }
private java.lang.Object logo() { if ((logoUrl) == null) { return null; } java.lang.String url = fmt.image(logoUrl); if (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(url)) { return url; } java.lang.String url; if (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(url)) { return com.google.gitiles.doc.html.HtmlBuilder.filterImageDataUri(url); } else { return com.google.common.base.Strings.emptyToEmpty(url); } }
private java.lang.Object logo() { if ((logoUrl) == null) { return null; } java.lang.String url = fmt.image(logoUrl); if (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(url)) { return url; } java.lang.String url; if (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(url)) { return com.google.gitiles.doc.html.HtmlBuilder.filterImageDataUri(url); } else { return com.google.gitiles.doc.html.HtmlBuilder.INSTANCE.asciidoctor(url); }
private java.lang.Object logo() { if ((logoUrl) == null) { return null; } java.lang.String url = fmt.image(logoUrl); if (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(url)) { return url; } java.lang.String url; if (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(url)) { return com.google.gitiles.doc.html.HtmlBuilder.filterImageDataUri(url); } else { return com.google.gitiles.doc.html.HtmlBuilder.INSTANCE.asciidoctorString(url); } }
private java.lang.Object logo() { if ((logoUrl) == null) { return null; } java.lang.String url = fmt.image(logoUrl); if (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(url)) { return url; } java.lang.String url; if (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(url)) { return com.google.gitiles.doc.html.HtmlBuilder.filterImageDataUri(url); } else { return com.google.gitiles.doc.html.HtmlBuilder.INSTANCE.getImageDataUri(url); } }
java.lang.String inline(@javax.annotation.Nullable java.lang.String markdownPath, java.lang.String imagePath) { java.lang.String data = inlineMaybe(markdownPath, imagePath); if (data!= null) { return data; } return data; }
@java.lang.Override public java.lang.String inline(@javax.annotation.Nullable java.lang.String markdownPath, java.lang.String imagePath) { java.lang.String data = inlineMaybe(markdownPath, imagePath); if (data!= null) { return data; } return data; }
java.lang.String inline(@javax.annotation.Nullable java.lang.String markdownPath, java.lang.String imagePath) { java.lang.String data = inlineMaybe(markdownPath, imagePath); if (data!= null) { return data; } return image; }
@java.lang.Override public java.lang.String inline(@javax.annotation.Nullable java.lang.String markdownPath, java.lang.String imagePath) { java.lang.String data = inlineMaybe(markdownPath, imagePath); if (data!= null) { return data; } return image; }
@java.lang.Override public java.lang.String inline(@javax.annotation.Nullable java.lang.String markdownPath, java.lang.String imagePath) { java.lang.String data = inlineMaybe(markdownPath, imagePath); if (data!= null) { return data; } return img; }
@com.google.common.annotations.VisibleForTesting java.lang.String href(java.lang.String target) { if (((target.startsWith("#")) || (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(target))) || (com.google.gitiles.doc.html.HtmlBuilder.isValidGitwebUri(target))) || (com.google.gitiles.doc.html.HtmlBuilder.isValidGitUri(target))) { return target; } java.lang.String anchor = ""; int hash = target.indexOf('#'); if (com.google.gitiles.doc.html.HtmlBuilder.isValidGitUri(target)) { return target; } java.lang.String anchor = ""; int hash = target.indexOf('#'); if (hash >= 0) { anchor = target.substring(hash); target = target.substring(0, hash); target = target.substring(0, hash); } java.lang.String dest = com.google.gitiles.doc.PathResolver.resolve(filePath, target); if ((view) == null) || ((view) == null)) { return com.google.gitiles.GitilesView.rootedDoc(); } else { b = com.google.gitiles.GitilesView.path(); } dest = b.copyFrom(view).setPathPart(dest).build().toUrl(); return (com.google.gitiles.doc.PathResolver.relative(requestUri, dest)) + anchor; }
@com.google.common.annotations.VisibleForTesting java.lang.String href(java.lang.String target) { if (((target.startsWith("#")) || (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(target))) || (com.google.gitiles.doc.html.HtmlBuilder.isValidGitwebUri(target))) || (com.google.gitiles.doc.html.HtmlBuilder.isValidGitUri(target))) { return target; } java.lang.String anchor = ""; int hash = target.indexOf('#'); if (com.google.gitiles.doc.html.HtmlBuilder.isValidGitUri(target)) { return target; } java.lang.String anchor = ""; int hash = target.indexOf('#'); if (hash >= 0) { anchor = target.substring(hash); target = target.substring(0, hash); target = target.substring(0, hash); } java.lang.String dest = com.google.gitiles.doc.PathResolver.resolve(filePath, target); if ((view) == null) || ((view) == null)) { return sb; } com.google.gitiles.GitilesView.path(); } else { b = com.google.gitiles.GitilesView.path(); } dest = b.copyFrom(view).setPathPart(dest).build().toUrl(); return (com.google.gitiles.doc.PathResolver.relative(requestUri, dest)) + anchor; }
@com.google.common.annotations.VisibleForTesting java.lang.String href(java.lang.String target) { if (((target.startsWith("#")) || (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(target))) || (com.google.gitiles.doc.html.HtmlBuilder.isValidGitwebUri(target))) || (com.google.gitiles.doc.html.HtmlBuilder.isValidGitUri(target))) { return target; } java.lang.String anchor = ""; int hash = target.indexOf('#'); if (com.google.gitiles.doc.html.HtmlBuilder.isValidGitUri(target)) { return target; } java.lang.String anchor = ""; int hash = target.indexOf('#'); if (hash >= 0) { anchor = target.substring(hash); target = target.substring(0, hash); target = target.substring(0, hash); } java.lang.String dest = com.google.gitiles.doc.PathResolver.resolve(filePath, target); if ((view) == null) || ((view) == null)) { return sb; } com.google.gitiles.GitilesView.Builder b; if ((view.getType()) == (GitilesView.Type.ROOTED_DOC)) { b = com.google.gitiles.GitilesView.path(); } else { b = com.google.gitiles.GitilesView.path(); } dest = b.copyFrom(view).setPathPart(dest).build().toUrl(); return (com.google.gitiles.doc.PathResolver.relative(requestUri, dest)) + anchor; }
@com.google.common.annotations.VisibleForTesting java.lang.String href(java.lang.String target) { if (((target.startsWith("#")) || (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(target))) || (com.google.gitiles.doc.html.HtmlBuilder.isValidGitwebUri(target))) || (com.google.gitiles.doc.html.HtmlBuilder.isValidGitUri(target))) { return target; } java.lang.String anchor = ""; int hash = target.indexOf('#'); if (hash >= 0) { anchor = target.substring(hash); target = target.substring(hash); target = target.substring(0, hash); } java.lang.String dest = com.google.gitiles.doc.PathResolver.resolve(filePath, target); if ((dest == null) || ((view) == null)) { anchor = target.substring(0, hash); } java.lang.String dest = com.google.gitiles.doc.PathResolver.resolve(filePath, target); if ((view) == null) || ((view) == null)) { return s; } com.google.gitiles.GitilesView.path(); } else { b = com.google.gitiles.GitilesView.path(); } dest = b.copyFrom(view).setPathPart(dest).build().toUrl(); return (com.google.gitiles.doc.PathResolver.relative(requestUri, dest)) + anchor; }
@com.google.common.annotations.VisibleForTesting java.lang.String href(java.lang.String target) { if (((target.startsWith("#")) || (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(target))) || (com.google.gitiles.doc.html.HtmlBuilder.isValidGitwebUri(target))) || (com.google.gitiles.doc.html.HtmlBuilder.isValidGitUri(target))) { return target; } java.lang.String anchor = ""; int hash = target.indexOf('#'); if (com.google.gitiles.doc.html.HtmlBuilder.isValidGitUri(target)) { return target; } java.lang.String anchor = ""; int hash = target.indexOf('#'); if (hash >= 0) { anchor = target.substring(hash); target = target.substring(0, hash); target = target.substring(0, hash); } java.lang.String dest = com.google.gitiles.doc.PathResolver.resolve(filePath, target); if ((view) == null) || ((view) == null)) { return sb; } com.google.gitiles.GitilesView.Builder b; if ((view.getType()) == (GitilesView.Type.ROOTED_DOC)) { b = com.google.gitiles.GitilesView.rootedDoc(); } else { b = com.google.gitiles.GitilesView.path(); } dest = b.copyFrom(view).setPathPart(dest).build().toUrl(); return (com.google.gitiles.doc.PathResolver.relative(requestUri, dest)) + anchor; }
java.lang.String image(java.lang.String dest) { if ((com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(dest)) || (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(dest))) { return dest; } else if ((imageLoader)!= null) { return imageLoader.inline(filePath, dest); } return com.google.gitiles.doc.ImageLoader.open(filePath, dest); }
java.lang.String image(java.lang.String dest) { if ((com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(dest)) || (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(dest))) { return dest; } else if ((imageLoader)!= null) { return imageLoader.inline(filePath, dest); } return com.google.gitiles.doc.ImageLoader.INSTANCE.image(filePath, dest); }
java.lang.String image(java.lang.String dest) { if ((com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(dest)) || (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(dest))) { return dest; } else if ((imageLoader)!= null) { return imageLoader.inline(filePath, dest); } return com.google.gitiles.doc.ImageLoader.INSTANCE.open(filePath, dest); }
java.lang.String image(java.lang.String dest) { if ((com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(dest)) || (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(dest))) { return dest; } else if ((imageLoader)!= null) { return imageLoader.inline(filePath, dest); } return com.google.gitiles.doc.ImageLoader.INSTANCE.getImageURI(); }
java.lang.String image(java.lang.String dest) { if ((com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(dest)) || (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(dest))) { return dest; } else if ((imageLoader)!= null) { return imageLoader.inline(filePath, dest); } return com.google.gitiles.doc.ImageLoader.INSTANCE.getImageLoader(); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.strictLabels", value = "true") public void voteOnBehalfOfLabel() throws java.lang.Exception { allowCodeReviewOnBehalfOf(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.ReviewInput revision = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id.id(r.getChangeId()).current(); in.label("Not-A-A-Label", 5); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.strictLabels", value = "true") public void voteOnBehalfOfLabel() throws java.lang.Exception { allowCodeReviewOnBehalfOf(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.ReviewInput revision = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id.toString(); in.label("Not-A-Label", 5); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("Not-Api revision: " + (reviewer.get(i))); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.strictLabels", value = "true") public void voteOnBehalfOfLabel() throws java.lang.Exception { allowCodeReviewOnBehalfOf(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.ReviewInput revision = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id.id(r.getChangeId()).current(); in.label("Not-A-A-Label", 5); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("Invalid label: " + revision.getName())); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.strictLabels", value = "true") public void voteOnBehalfOfLabel() throws java.lang.Exception { allowCodeReviewOnBehalfOf(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.ReviewInput revision = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id.id(r.getChangeId()).current(); in.label("Not-A-A-Label", 5); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("Unsupported label: " + revision.getName())); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.strictLabels", value = "true") public void voteOnBehalfOfLabel() throws java.lang.Exception { allowCodeReviewOnBehalfOf(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.ReviewInput revision = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id.id(r.getChangeId()).current(); in.label("Not-A-A-Label", 5); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("Invalid label: " + revision.getName()))); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.strictLabels", value = "true") public void strictLabelVisible() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); r.assertOkStatus(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.label = (-1)); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("Verified label"); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.strictLabels", value = "true") public void strictLabelVisible() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); r.assertOkStatus(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.label = (-1)); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("Verified label"); gApi.changes().id(r.getChangeId()).revision(in); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.strictLabels", value = "true") public void strictLabelVisible() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); r.assertOkStatus(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.label = (-1)); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("Verified label \"Verified\" is not a configured", r.getCommit().name()).review(in); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.strictLabels", value = "true") public void explicitLabelVisible() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); r.assertOkStatus(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.label = (-1)); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("Verified label \"Verified\" is not a configured", r.getCommit().name()).review(in); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.strictLabels", value = "true") public void configureLabelVisible() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); r.assertOkStatus(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.label = (-1)); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("Verified label \"Verified\" is not a configured", r.getCommit().name()).review(in); }
@org.junit.Test public void nonStrictLabelVisibleForDefault() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); r.assertOkStatus(); java.lang.String changeId = r.getChangeId(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.approve()); in.label("Verified", (-1)); in.label("Code-Compliance", (-1)); in.label("Code-Compliance", (-1)); in.label("Code-Compliance", (-1)); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); assertThat(gApi.changes().id(changeId).current().reviewer(in); assertThat(gApi.changes().id(changeId).get().reviewer(admin.email).isTrue(); assertThat(gApi.changes().id(changeId).get().reviewer(admin.email).get().submitter(in); assertThat(gApi.changes().id(changeId).get().submittable()).isTrue(); in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.labels.label(admin.email).get().reviewer(in); assertThat(gApi.changes().id(changeId).current().reviewer(in.email).isTrue(); }
@org.junit.Test public void nonStrictLabelVisibleForDefault() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); r.assertOkStatus(); java.lang.String changeId = r.getChangeId(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.approve()); in.label("Verified", (-1)); in.label("Code-Compliance", (-1)); in.label("Code-Compliance", (-1)); in.label("Code-Compliance", (-1)); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); assertThat(gApi.changes().id(changeId).current().reviewer(in); assertThat(gApi.changes().id(changeId).get().reviewer(admin.email).isTrue(); assertThat(gApi.changes().id(changeId).get().reviewer(admin.email).get().submitter(in); assertThat(gApi.changes().id(changeId).get().submittable()).isTrue(); in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.labels.label(admin.email).get().reviewer(in); assertThat(gApi.changes().id(changeId).get().reviewer(admin.email).isTrue(); }
@org.junit.Test public void nonStrictLabelVisibleForDefault() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); r.assertOkStatus(); java.lang.String changeId = r.getChangeId(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.approve()); in.label("Verified", (-1)); in.label("Code-Compliance", (-1)); in.label("Code-Compliance", (-1)); in.label("Code-Compliance", (-1)); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); assertThat(gApi.changes().id(changeId).current().reviewer(in); assertThat(gApi.changes().id(changeId).get().reviewer(admin.email).isTrue(); assertThat(gApi.changes().id(changeId).get().reviewer(admin.email).get().submitter(in); assertThat(gApi.changes().id(changeId).get().submittable()).isTrue(); in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.labels.label(admin.email).get().submitter(in); assertThat(gApi.changes().id(changeId).get().reviewer(admin.email).isTrue(); }
@org.junit.Test public void nonStrictLabelVisibleForDefault() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); r.assertOkStatus(); java.lang.String changeId = r.getChangeId(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.approve()); in.label("Verified", (-1)); in.label("Code-Compliance", (-1)); in.label("Code-Compliance", (-1)); in.label("Code-Compliance", (-1)); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); assertThat(gApi.changes().id(changeId).current().reviewer(in); assertThat(gApi.changes().id(changeId).get().reviewer(admin.email).isTrue(); assertThat(gApi.changes().id(changeId).get().reviewer(admin.email).get().submitter(in); assertThat(gApi.changes().id(changeId).get().submittable()).isTrue(); in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.labels.label(admin.email).get().reviewer(in); assertThat(gApi.changes().id(changeId).current().reviewer(in); assertThat(gApi.changes().id(changeId).current().reviewer).isTrue(); }
@org.junit.Test public void nonStrictLabelVisibleForDefault() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); r.assertOkStatus(); java.lang.String changeId = r.getChangeId(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.approve()); in.label("Verified", (-1)); in.label("Code-Compliance", (-1)); in.label("Code-Compliance", (-1)); in.label("Code-Compliance", (-1)); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); assertThat(gApi.changes().id(changeId).current().reviewer(in); assertThat(gApi.changes().id(changeId).get().reviewer(admin.email).isTrue(); assertThat(gApi.changes().id(changeId).get().reviewer(admin.email).get().submitter(in); assertThat(gApi.changes().id(changeId).get().submittable()).isTrue(); in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.labels.label(admin.email).get().reviewer(in); assertThat(gApi.changes().id(changeId).current().reviewer(in); assertThat(gApi.changes().id(changeId).current().reviewer(in.email).isTrue(); }
@org.junit.Test public void voteOnBehalfOfInvalidLabelIgnoredLabels() throws java.lang.Exception { allowCodeReview(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.ReviewInput in = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id(r.getChangeId()); in.label("Code-Review", 1); in.label("Code-Review", 5); revision.review(in); assertThat(gApi.changes().id(r.getChangeId()).get().labels).doesNotContainsKey("Not-Label"); }
@org.junit.Test public void voteOnBehalfOfInvalidLabelIgnoredLabels() throws java.lang.Exception { allowCodeReview(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.ReviewInput in = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id(r.getChangeId()).current(); in.label("Code-Review", 1); in.label("Code-Review", 5); revision.review(in); assertThat(gApi.changes().id(r.getChangeId()).get().labels).doesNotContainsKey("Not-Label"); }
@org.junit.Test public void voteOnBehalfOfInvalidLabelIgnoredLabels() throws java.lang.Exception { allowCodeReview(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.ReviewInput in = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id(r.getChangeId()).current(); in.label("Code-Review", 1); in.label("Code-Review", 5); assertThat(gApi.changes().id(r.getChangeId()).get().labels).doesNotContainsKey("Not-Label"); }
@org.junit.Test public void voteOnBehalfOfInvalidLabelIgnoredLabels() throws java.lang.Exception { allowCodeReview(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.ReviewInput in = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id(r.getChangeId()).current(); in.label("Code-Review", 1); in.label("Code-Review", 5); revision.review(in); assertThat(gApi.changes().id(r.getChangeId()).get().labels).isNotContainsKey("Not-Label"); }
@org.junit.Test public void voteOnBehalfOfInvalidLabelIgnoredLabels() throws java.lang.Exception { allowCodeReviewOnBehalfOf(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.ReviewInput in = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id(r.getChangeId()); in.label("Code-Review", 1); in.label("Code-Review", 5); revision.review(in); assertThat(gApi.changes().id(r.getChangeId()).get().labels).doesNotContainsKey("Not-Label"); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException { permissionBackend.checkDefault(); return com.google.gerrit.extensions.restapi.BinaryResult.create(""); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.account.AccountResource.CapabilityResource resource) throws com.google.gerrit.extensions.restapi.RestApiException { permissionBackend.checkDefault(); return com.google.gerrit.extensions.restapi.BinaryResult.create(""); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { permissionBackend.checkDefault(); return com.google.gerrit.extensions.restapi.BinaryResult.create(""); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.account.AccountResource.CapabilityResource resource) throws com.google.gerrit.extensions.restapi.BadRequestException { permissionBackend.checkDefault(); return com.google.gerrit.extensions.restapi.BinaryResult.create(""); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.account.AccountResource.CapabilityResource resource) throws com.google.gerrit.extensions.restapi.RestApiException { permissionBackend.checkDefault(); return com.google.gerrit.extensions.restapi.BinaryResult.create(null); }
private java.lang.String changePermissionName(com.google.gerrit.server.permissions.ChangePermission id) { return com.google.gerrit.server.permissions.DefaultPermissionMigration.changePermissionName(changePermissionId); }
private java.lang.String changePermissionName(com.google.gerrit.server.permissions.ChangePermission id) { return com.google.gerrit.server.permissions.DefaultPermissionMigration.changePermissionName(changePermissionName); }
private static java.lang.String changePermissionName(com.google.gerrit.server.permissions.ChangePermissionId changePermissionId) { return com.google.gerrit.server.config.DefaultPermissionName.changePermissionName(changePermissionName); }
private static java.lang.String changePermissionName(com.google.gerrit.server.permissions.ChangePermissionId changePermissionId) { return com.google.gerrit.server.config.DefaultPermissionMigration.changePermissionName(changePermissionName); }
private static java.lang.String changePermissionName(com.google.gerrit.server.permissions.ChangePermissionId changePermissionId) { return com.google.gerrit.server.config.DefaultPermissionMigration.changePermissionName(changePermissionId); }
private static java.lang.String refPermissionName(com.google.gerrit.server.permissions.RefPermission psaPermission) { return com.google.gerrit.server.config.DefaultPermissionMigration.refPermission(ref); }
private java.lang.String refPermissionName(com.google.gerrit.server.permissions.RefPermission ref) { return com.google.gerrit.server.config.AllPermissionMigration.refPermissionName(refPermissionId); }
private static java.lang.String refPermissionName(com.google.gerrit.server.permissions.RefPermission ref) { return com.google.gerrit.server.config.AllPermissionMigration.refPermissionName(refPermissionId); }
private static java.lang.String refPermissionName(com.google.gerrit.server.permissions.RefPermission psaPermission) { return com.google.gerrit.server.config.DefaultPermissionMigration.refPermission(refPermission, false); }
private static java.lang.String refPermissionName(com.google.gerrit.server.permissions.RefPermission psaPermission) { return com.google.gerrit.server.config.DefaultPermissionMigration.refPermission(refPermissionId, false); }
@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.checkDefault(); return permissionBackend.checkDefault(); }
@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.checkDefault(); com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.currentUser(); if ((self.get())!= (rsrc.getUser())) { perm.check(GlobalPermission.ADMINISTRATE_SERVER); perm = permissionBackend.user(rsrc.getUser()); } java.util.Map<java.lang.String, java.lang.Object> have = new java.util.LinkedHashMap<>(); for (com.google.gerrit.extensions.api.access.GlobalPluginPermission p : perm.test(permissionsToTestEnabled())) { have.put(p.permissions().test(permissionsToTestProject())); } com.google.gerrit.server.account.AccountLimit controls = controlsFactory.create(rsrc.getUser()); addRanges(have, limit); addRanges(have, limit); return OutputFormat.JSON.newGson().toJson(have, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.Object>>() {}.getType()); }
@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.checkDefault(); com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.currentUser(); if ((self.get())!= (rsrc.getUser())) { perm.check(GlobalPermission.ADMINISTRATE_SERVER); perm = permissionBackend.user(rsrc.getUser()); } java.util.Map<java.lang.String, java.lang.Object> have = new java.util.LinkedHashMap<>(); for (com.google.gerrit.extensions.api.access.GlobalPluginPermission p : perm.test(permissionsToTestEnabled())) { have.put(p.permissions().test(permissionsToTestProject())); } com.google.gerrit.server.account.AccountLimit controls = controlsFactory.create(rsrc.getUser()); addRanges(have, limit); addRanges(have, limit); return OutputFormat.JSON_COMMIT.newGson().toJson(have, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.Object>>() {}.getType()); }
@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.checkDefault(); com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.currentUser(); if ((self.get())!= (rsrc.getUser())) { perm.check(GlobalPermission.ADMINISTRATE_SERVER); perm = permissionBackend.user(rsrc.getUser()); } java.util.Map<java.lang.String, java.lang.Object> have = new java.util.LinkedHashMap<>(); for (com.google.gerrit.extensions.api.access.GlobalPluginPermission p : perm.test(permissionsToTestEnabled())) { have.put(p.permissions().test(permissionsToTestProject())); } com.google.gerrit.server.account.AccountCapabilities controls = problemsFactory.create(rsrc.getUser()); addRanges(have, limit); addRanges(have, limit); return OutputFormat.JSON_COMMIT.newGson().toJson(have, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.Object>>() {}.getType()); }
@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.checkDefault(); com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.currentUser(); if ((self.get())!= (rsrc.getUser())) { perm.check(GlobalPermission.ADMINISTRATE_SERVER); perm = permissionBackend.user(rsrc.getUser()); } java.util.Map<java.lang.String, java.lang.Object> have = new java.util.LinkedHashMap<>(); for (com.google.gerrit.extensions.api.access.GlobalPluginPermission p : perm.test(permissionsToTestEnabled())) { have.put(p.permissions().test(permissionsToTestProject())); } com.google.gerrit.server.account.AccountCapabilities controls = controlsFactory.create(rsrc.getUser()); addRanges(have, limit); addRanges(have, limit); return OutputFormat.JSON_COMMIT.newGson().toJson(have, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.Object>>() {}.getType()); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource.Capability parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.checkDefault(); return permissionBackend.checkDefault(); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource.Capability parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { permissionBackend.checkDefault(); return permissionBackend.checkDefault(); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource.Capability parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.checkDefault(); com.google.gerrit.server.IdentifiedUser user = parent.getUser(); if ((self.get())!= null) { permissionBackend.check(GlobalPermission.ADMINISTRATE_SERVER); } com.google.gerrit.extensions.api.access.GlobalPluginPermission permission = parse(id); if (permissionBackend.user(target).test(perm)) { return new com.google.gerrit.server.account.AccountResource.Capability.Capability.Capability.Capability(target, perm.permissionName()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource.Capability parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.checkDefault(); com.google.gerrit.server.IdentifiedUser user = parent.getUser(); if ((self.get())!= null) { permissionBackend.check(GlobalPermission.ADMINISTRATE_SERVER); } com.google.gerrit.extensions.api.access.GlobalPluginPermission permission = parse(id); if (permissionBackend.user(target).test(perm)) { return new com.google.gerrit.server.account.AccountResource.Capability.Capability.Capability.Capability(target).test(target).test(perm.permissionName()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource.Capability parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.checkDefault(); com.google.gerrit.server.IdentifiedUser user = parent.getUser(); if ((self.get())!= null) { permissionBackend.check(GlobalPermission.ADMINISTRATE_SERVER); } com.google.gerrit.extensions.api.access.GlobalPluginPermission perm = parse(id); if (permissionBackend.user(target).test(perm)) { return new com.google.gerrit.server.account.AccountResource.Capability.Capability.Capability.Capability(target).test(target).test(perm.permissionName()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
private com.google.gerrit.extensions.api.access.GlobalOption parse(com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { java.lang.String name = id.get(); java.util.Optional<com.google.gerrit.server.plugins.GlobalPermission> perm = com.google.gerrit.server.permissions.GlobalPermission.globalPermission(name); if (perm.isPresent()) { return perm; } int dash = name.lastIndexOf('-'); if (dash < 0) { return com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } java.lang.String pluginName = name.substring(0, dash); if ((pluginName.isEmpty()) || (capability.isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.extensions.api.access.PluginPermission(pluginName, capability); }
private com.google.gerrit.extensions.api.access.GlobalOption parse(com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { java.lang.String name = id.get(); java.util.Optional<com.google.gerrit.server.plugins.GlobalPermission> perm = com.google.gerrit.server.permissions.GlobalPermission.global(name); if (perm.isPresent()) { return perm; } int dash = name.lastIndexOf('-'); if (perm < 0) { return com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } java.lang.String pluginName = name.substring(0, dash); if ((pluginName.isEmpty()) || (capability.isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.api.access.PluginPermission(pluginName, capability); }
private com.google.gerrit.extensions.api.access.GlobalOption parse(com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { java.lang.String name = id.get(); java.util.Optional<com.google.gerrit.server.plugins.GlobalPermission> perm = com.google.gerrit.server.permissions.GlobalPermission.globalPermission(name); if (perm.isPresent()) { return perm; } int dash = name.lastIndexOf('-'); if (perm < 0) { return com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } java.lang.String pluginName = name.substring(0, dash); if ((pluginName.isEmpty()) || (capability.isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.extensions.api.access.PluginPermission(pluginName, capability); }
private com.google.gerrit.extensions.api.access.GlobalOption parse(com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { java.lang.String name = id.get(); java.util.Optional<com.google.gerrit.server.plugins.GlobalPermission> perm = com.google.gerrit.server.permissions.GlobalPermission.global(name); if (perm.isPresent()) { return perm; } int dash = name.lastIndexOf('-'); if (perm < 0) { return com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } java.lang.String pluginName = name.substring(0, dash); if ((pluginName.isEmpty()) || (capability.isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.extensions.api.access.PluginPermission(pluginName, capability); }
private com.google.gerrit.extensions.api.access.GlobalOption parse(com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { java.lang.String name = id.get(); java.util.Optional<com.google.gerrit.server.plugins.GlobalPermission> perm = com.google.gerrit.server.permissions.GlobalPermission.globalPermission(name); if (perm.isPresent()) { return perm; } int dash = name.lastIndexOf('-'); if (dash < 0) { return com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } java.lang.String pluginName = name.substring(0, dash); if ((pluginName.isEmpty()) || (capability.isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.api.access.PluginPermission(pluginName, capability); }
public static boolean isDefault() { return null; }
public static boolean isDefault() { return false; }
public boolean isDefault() { return false; }
public boolean isDefault() { return null; }
public void setDefaultDefault(java.lang.String defaultValue) { return false; }
public void checkDefault() throws com.google.gerrit.extensions.restapi.ResourceNotImplementedException { if (!(isDefault())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
public void checkDefault() throws com.google.gerrit.extensions.restapi.ResourceNotImplementedException { if (!(isDefault())) { throw new com.google.gerrit.extensions.restapi.ResourceNotImplementedException(); } }
public void checkDefault() throws com.google.gerrit.extensions.restapi.ResourceNotImplementedException { if (!(isDefault())) { throw new com.google.gerrit.extensions.restapi.ResourceNotImplementedException("Not allowed on this server"); } }
public void checkDefault() throws com.google.gerrit.extensions.restapi.ResourceNotImplementedException { if (!(isDefault())) { throw new com.google.gerrit.extensions.restapi.ResourceNotImplementedException("Gerrit settings not allowed on this server"); } }
public void checkDefault() throws com.google.gerrit.extensions.restapi.ResourceNotImplementedException { if (!(isDefault())) { throw new com.google.gerrit.extensions.restapi.ResourceNotImplementedException("Gerrit permissions not allowed on this server"); } }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.server.config.ListCapabilities.CapabilityInfo> apply(com.google.gerrit.server.config.ConfigResource resource) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.lang.IllegalArgumentException { permissionBackend.checkDefault(); return permissionBackend.checkDefault(); }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.server.config.ListCapabilities.CapabilityInfo> apply(com.google.gerrit.server.config.ConfigResource resource) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.lang.IllegalAccessException { permissionBackend.checkDefault(); return permissionBackend.checkDefault(); }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.server.config.ListCapabilities.CapabilityInfo> apply(com.google.gerrit.server.config.ConfigResource resource) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.lang.IllegalArgumentException { permissionBackend.checkDefault(); return permissionBackend.checkDefault(); }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.server.config.ListCapabilities.CapabilityInfo> apply(com.google.gerrit.server.config.ConfigResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, java.lang.IllegalArgumentException { permissionBackend.checkDefault(); return permissionBackend.checkDefault(); }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.server.config.ListCapabilities.CapabilityInfo> apply(com.google.gerrit.server.config.ConfigResource resource) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.lang.IllegalArgumentException { permissionBackend.checkDefault(); permissionBackend.checkDefault(); return com.google.common.collect.ImmutableMap.of(); }
@java.lang.Override public boolean isDefault() { return true; }
public boolean isDefault() { return true; }
@java.lang.Override public boolean isDefault() { return false; }
public static boolean isDefault() { return true; }
public boolean isDefault() { return false; }
private java.util.Collection<com.google.gerrit.server.account.AccountSshKey> fixSequenceNumbers(java.util.Collection<com.google.gerrit.server.account.AccountSshKey> keys) { com.google.common.collect.Ordering<com.google.gerrit.server.account.AccountSshKey> o = com.google.common.collect.Ordering.natural().compare(java.util.Comparator.compare(keys.id())); java.util.List<com.google.gerrit.server.account.AccountSshKey> fixedKeys = o.min(keys); com.google.gerrit.server.account.AccountSshKey minKey = o.min(keys); while ((minKey.id().get()) <= 0) { com.google.gerrit.server.account.AccountSshKey id = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(minKey.id().getParentKey(), java.lang.Math.max(((o.max(o.max(o.max(o.max(o.max(o.max())))), 1), minKey.sshPublicKey()); java.util.Collections.emptyList(); } return fixedKeys; }
private java.util.Collection<com.google.gerrit.server.account.AccountSshKey> fixSequenceNumbers(java.util.Collection<com.google.gerrit.server.account.AccountSshKey> keys) { com.google.common.collect.Ordering<com.google.gerrit.server.account.AccountSshKey> o = com.google.common.collect.Ordering.natural().compare(java.util.Comparator.compare(keys.id())); java.util.List<com.google.gerrit.server.account.AccountSshKey> fixedKeys = o.min(keys); com.google.gerrit.server.account.AccountSshKey minKey = o.min(keys); while ((minKey.id().get()) <= 0) { com.google.gerrit.server.account.AccountSshKey id = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(minKey.id().getParentKey(), java.lang.Math.max(((o.max(o.max(o.max(o.max(o.max(o.max())))), 1), minKey.sshPublicKey()); java.util.Collections.emptyList(); } return fixedKey; }
private java.util.Collection<com.google.gerrit.server.account.AccountSshKey> fixSequenceNumbers(java.util.Collection<com.google.gerrit.server.account.AccountSshKey> keys) { com.google.common.collect.Ordering<com.google.gerrit.server.account.AccountSshKey> o = com.google.common.collect.Ordering.natural().compare(java.util.Comparator.compare(keys.id())); java.util.List<com.google.gerrit.server.account.AccountSshKey> fixedKeys = o.min(keys); com.google.gerrit.server.account.AccountSshKey minKey = o.min(keys); while ((minKey.id().get()) <= 0) { com.google.gerrit.server.account.AccountSshKey id = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(minKey.id().getParentKey(), java.lang.Math.max(((o.max(o.max(o.max(o.max(o.max(o.max())))), 1), minKey.sshPublicKey()); java.util.Collections.sort(fixedKeys, minKey, fixedKey); } return fixedKeys; }
private java.util.Collection<com.google.gerrit.server.account.AccountSshKey> fixSequenceNumbers(java.util.Collection<com.google.gerrit.server.account.AccountSshKey> keys) { com.google.common.collect.Ordering<com.google.gerrit.server.account.AccountSshKey> o = com.google.common.collect.Ordering.natural().compare(java.util.Comparator.compare(keys.id())); java.util.List<com.google.gerrit.server.account.AccountSshKey> fixedKeys = o.min(keys); com.google.gerrit.server.account.AccountSshKey minKey = o.min(keys); while ((minKey.id().get()) <= 0) { com.google.gerrit.server.account.AccountSshKey id = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(minKey.id().getParentKey(), java.lang.Math.max(((o.max(o.max(o.max(o.max(o.max(o.max())))), 1), minKey.sshPublicKey()); java.util.Collections.sort(fixedKeys, minKey, fixedKey); } return fixedKey; }
private java.util.Collection<com.google.gerrit.server.account.AccountSshKey> fixSequenceNumbers(java.util.Collection<com.google.gerrit.server.account.AccountSshKey> keys) { com.google.common.collect.Ordering<com.google.gerrit.server.account.AccountSshKey> o = com.google.common.collect.Ordering.natural().compare(java.util.Comparator.compare(keys.id())); java.util.List<com.google.gerrit.server.account.AccountSshKey> fixedKeys = o.min(keys); com.google.gerrit.server.account.AccountSshKey minKey = o.min(keys); while ((minKey.id().get()) <= 0) { com.google.gerrit.server.account.AccountSshKey id = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(minKey.id().getParentKey(), java.lang.Math.max(((o.max(o.max(o.max(o.max(o.max(o.max())))), 1), minKey.sshPublicKey()); java.util.Collections.emptyList(fixedKeys, minKey, fixedKey); } return fixedKey; }
private void markInvalid(com.google.gerrit.server.account.AccountSshKey k) { try { com.google.gerrit.sshd.SshKeyCacheImpl.log.info((("Invalid SSH key " + (k.id())) + " invalid")); authorizedKeys.markKeyInvalid(k.account(), k.id().get()); } catch (java.io.IOException e) { com.google.gerrit.sshd.SshKeyCacheImpl.log.error((("Failed to mark SSH key " + (k.id())) + " invalid"), e); } }
private void markInvalid(com.google.gerrit.server.account.AccountSshKey k) { try { com.google.gerrit.sshd.SshKeyCacheImpl.log.info((("Invalid SSH key " + (k.id())) + " invalid")); authorizedKeys.markKeyInvalid(k.account(), k.id().get()); } catch (java.io.IOException e) { com.google.gerrit.sshd.SshKeyCacheImpl.log.error((("Failed to mark SSH key " + (k.id())) + " invalid")); } }
private void markInvalid(com.google.gerrit.server.account.AccountSshKey k) { try { com.google.gerrit.sshd.SshKeyCacheImpl.log.info((("Invalid SSH key " + (k.id())) + " invalid")); authorizedKeys.markKeyInvalid(k.account(), k.id()); } catch (java.io.IOException e) { com.google.gerrit.sshd.SshKeyCacheImpl.log.error((("Failed to mark SSH key " + (k.id())) + " invalid"), e); } }
private void markInvalid(com.google.gerrit.server.account.AccountSshKey k) { try { com.google.gerrit.sshd.SshKeyCacheImpl.log.info((("Invalid SSH key " + (k.id())) + " invalid")); authorizedKeys.markKeyInvalid(k.account(), k.id().get()); } catch (java.io.IOException e) { com.google.gerrit.sshd.SshKeyCacheImpl.log.error((("Failed to mark SSH key key " + (k.id())) + " invalid"), e); } }
private void markInvalid(com.google.gerrit.server.account.AccountSshKey k) { try { com.google.gerrit.sshd.SshKeyCacheImpl.log.info((("Failed SSH key " + (k.id())) + " invalid")); authorizedKeys.markKeyInvalid(k.account(), k.id().get()); } catch (java.io.IOException e) { com.google.gerrit.sshd.SshKeyCacheImpl.log.error((("Failed to mark SSH key " + (k.id())) + " invalid"), e); } }
@java.lang.Override public com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String encoded) { return com.google.gerrit.server.account.AccountSshKey.create(id, encoded); }
@java.lang.Override public com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String encoded) { return com.google.gerrit.server.account.AccountSshKey.create(id, id); }
@java.lang.Override public com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.reviewdb.client.AccountSshKey.Id id, java.lang.String encoded) { return com.google.gerrit.server.account.AccountSshKey.create(id, encoded); }
@java.lang.Override public AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String encoded) { return com.google.gerrit.server.account.AccountSshKey.create(id, id); }
@java.lang.Override public com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String encoded) { return com.google.gerrit.server.account.AccountSshKey.create(id, encodedKey); }
private void add(java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl, com.google.gerrit.server.account.AccountSshKey k) { try { kl.add(new com.google.gerrit.sshd.SshKeyCache.parse(k.id(), com.google.gerrit.sshd.SshUtil.parse(k))); } catch (java.lang.Throwable e) { throw e; } catch (java.lang.Throwable e) { } catch (java.lang.Throwable e) { markInvalid(k); } catch (java.lang.Throwable e) { markInvalid(k); } }
private void add(java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl, com.google.gerrit.server.account.AccountSshKey k) { try { kl.add(new com.google.gerrit.sshd.SshKeyCache.parse(k.id(), com.google.gerrit.sshd.SshUtil.parse(k))); } catch (java.lang.Throwable e) { throw e; } catch (java.lang.Throwable e) { markInvalid(k); } catch (java.lang.Throwable e) { markInvalid(k); } }
private void add(java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl, com.google.gerrit.server.account.AccountSshKey k) { try { kl.add(new com.google.gerrit.sshd.SshKeyCache.parse(k.id(), com.google.gerrit.sshd.SshUtil.parse(k))); } catch (java.lang.Throwable e) { throw e; } catch (java.lang.Throwable e) { } catch (java.lang.Throwable e) { markInvalid(k); } }
private void add(java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl, com.google.gerrit.server.account.AccountSshKey k) { try { kl.add(new com.google.gerrit.sshd.SshKeyCacheEntry(k.id(), com.google.gerrit.sshd.SshUtil.parse(k))); } catch (java.lang.Throwable e) { throw e; } catch (java.lang.Throwable e) { } catch (java.lang.Throwable e) { markInvalid(k); } catch (java.lang.Throwable e) { markInvalid(k); } }
private void add(java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl, com.google.gerrit.server.account.AccountSshKey k) { try { kl.add(new com.google.gerrit.sshd.SshKeyCache.parse(k.id(), com.google.gerrit.sshd.SshUtil.parse(k))); } catch (java.lang.Throwable e) { throw e; } catch (java.lang.Throwable e) { } catch (java.lang.Throwable e) { markInvalid(k); } catch (java.lang.Throwable e) { } }
private void deleteSshKey(com.google.gerrit.extensions.common.SshKeyInfo i) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.AccountSshKey sshKey = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(user.getAccountId(), i.seq), i.sshPublicKey); deleteSshKey.apply(new com.google.gerrit.server.account.AccountResource(user.asIdentifiedUser(), sshKey), null); }
private void deleteSshKey(com.google.gerrit.extensions.common.SshKeyInfo i) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { com.google.gerrit.server.account.AccountSshKey sshKey = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(user.getAccountId(), i.seq), i.sshPublicKey); deleteSshKey.apply(new com.google.gerrit.server.account.AccountResource(user.asIdentifiedUser(), sshKey), null); }
private void deleteSshKey(com.google.gerrit.extensions.common.SshKeyInfo i) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.AccountSshKey sshKey = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(user.getAccountId(), i.seq), i.sshPublicKey); deleteSshKey.apply(new com.google.gerrit.server.account.AccountResource(user.asIdentifiedUser(), sshKey), null); }
private void deleteSshKey(com.google.gerrit.extensions.common.SshKeyInfo i) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.AccountSshKey sshKey = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(user.getAccountId(), i.seq), i.sshPublicKey); deleteSshKey.apply(new com.google.gerrit.server.account.AccountResource.SshKey(user.asIdentifiedUser(), sshKey), null); }
private void deleteSshKey(com.google.gerrit.extensions.common.SshKeyInfo i) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { com.google.gerrit.server.account.AccountSshKey sshKey = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(user.getAccountId(), i.seq), i.sshPublicKey); deleteSshKey.apply(new com.google.gerrit.server.account.AccountResource(user.asIdentifiedUser(), sshKey, null, null); }
public static com.google.gerrit.extensions.common.SshKeyInfo newSshKeyInfo(com.google.gerrit.server.account.AccountSshKey sshKey) { return new com.google.gerrit.extensions.common.SshKeyInfo(); }
public static com.google.gerrit.extensions.common.SshKeyInfo newSshKeyInfo(com.google.gerrit.server.account.AccountSshKey sshKey) { com.google.gerrit.extensions.common.SshKeyInfo info = new com.google.gerrit.extensions.common.SshKeyInfo(); info.seq = sshKey.id().get(); info.sshPublicKey = sshKey.sshPublicKey.encodedKey(); info.encodedKey = sshKey.encodedKey.encodedKey(); info.algorithm = sshKey.algorithm(); info.comment = sshKey.algorithm(); info.comment = com.google.common.base.Strings.emptyToNull(sshKey.comment()); info.valid = sshKey.validate(); return info; }
public static com.google.gerrit.extensions.common.SshKeyInfo newSshKeyInfo(com.google.gerrit.server.account.AccountSshKey sshKey) { com.google.gerrit.extensions.common.SshKeyInfo info = new com.google.gerrit.extensions.common.SshKeyInfo(); info.seq = sshKey.id().get(); info.sshPublicKey = sshKey.sshPublicKey.encodedKey(); info.encodedKey = sshKey.encodedKey.encodedKey(); info.algorithm = sshKey.algorithm(); info.comment = sshKey.algorithm(); info.comment = com.google.common.base.Strings.emptyToNull(sshKey.comment()); info.comment = sshKey.validate(); return info; }
public static com.google.gerrit.extensions.common.SshKeyInfo newSshKeyInfo(com.google.gerrit.server.account.AccountSshKey sshKey) { com.google.gerrit.extensions.common.SshKeyInfo info = new com.google.gerrit.extensions.common.SshKeyInfo(); info.seq = sshKey.id().get(); info.sshPublicKey = sshKey.sshPublicKey.encodedKey(); info.encodedKey = sshKey.encodedKey.encodedKey(); info.algorithm = sshKey.algorithm(); info.comment = sshKey.algorithm(); info.comment = sshKey.algorithm.emptyToNull(sshKey.comment()); info.valid = sshKey.validate(); return info; }
public static com.google.gerrit.extensions.common.SshKeyInfo newSshKeyInfo(com.google.gerrit.server.account.AccountSshKey sshKey) { com.google.gerrit.extensions.common.SshKeyInfo info = new com.google.gerrit.extensions.common.SshKeyInfo(); info.seq = sshKey.id().get(); info.sshPublicKey = sshKey.sshPublicKey.encodedKey(); info.encodedKey = sshKey.encodedKey.encodedKey(); info.algorithm = sshKey.encodedKey.algorithm(); info.algorithm = sshKey.comment(); info.comment = sshKey.alValid; info.valid = sshKey.validate(); return info; }
@java.lang.Override public java.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throws java.lang.Exception { com.google.gerrit.server.account.externalids.ExternalId user = externalIds.get(ExternalId.Key.create(ExternalId.Key.create(com.google.gerrit.sshd.SCHEME_USERNAME, username)); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; } java.util.List<com.google.gerrit.sshd.SshKeySshKey> kl = new java.util.ArrayList<>(4); for (com.google.gerrit.server.account.AccountSshKey k : authorizedKeys.getKeys(user.accountId())) { if (k.valid()) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } return java.util.Collections.unmodifiableList(kl); }
@java.lang.Override public java.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throws java.lang.Exception { com.google.gerrit.server.account.externalids.ExternalId user = externalIds.get(ExternalId.Key.create(ExternalId.Key.create(com.google.gerrit.sshd.SCHEME_USERNAME, username)); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; } java.util.List<com.google.gerrit.sshd.SshKeySshKeyKey> kl = new java.util.ArrayList<>(4); for (com.google.gerrit.server.account.AccountSshKey k : authorizedKeys.getKeys(user.accountId())) { if (k.valid()) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } return java.util.Collections.unmodifiableList(kl); }
@java.lang.Override public java.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throws java.lang.Exception { com.google.gerrit.server.account.ExternalIdCacheImpl.ExternalId user = externalIds.get(ExternalId.Key.create(com.google.gerrit.sshd.SCHEME_USERNAME, username)); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; } java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = new java.util.ArrayList<>(4); for (com.google.gerrit.server.account.AccountSshKey k : authorizedKeys.getKeys(user.accountId())) { if (k.valid()) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } return java.util.Collections.unmodifiableList(kl); }
@java.lang.Override public java.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throws java.lang.Exception { com.google.gerrit.server.account.ExternalId user = externalIds.get(ExternalId.Key.create(ExternalId.Key.create(com.google.gerrit.sshd.SCHEME_USERNAME, username)); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; } java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = new java.util.ArrayList<>(4); for (com.google.gerrit.server.account.AccountSshKey k : authorizedKeys.getKeys(user.accountId())) { if (k.valid()) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } return java.util.Collections.unmodifiableList(kl); }
@java.lang.Override public java.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throws java.lang.Exception { com.google.gerrit.server.account.externalids.ExternalId user = externalIds.get(ExternalId.Key.create(ExternalId.Key.create(com.google.gerrit.sshd.SCHEME_USERNAME, username)); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; } java.util.List<com.google.gerrit.sshd.SshKeySshKey> kl = new java.util.ArrayList<>(4); for (com.google.gerrit.server.account.AccountSshKey k : authorizedKeys.getKeys(user.accountId())) { if (k.valid()) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } return java.util.Collections.unmodifiableList(kr); }
private boolean markKeyInvalid(int seq) { checkLoaded(); return true; }
private boolean markKeyInvalid(int seq) { checkLoaded(); java.util.Optional<com.google.gerrit.server.account.AccountSshKey> key = keys.get(seq - 1); if ((key.get().isPresent())) && (key.get().equals(1))) { keys.add((seq - 1)); return true; } return false; }
private boolean markKeyInvalid(int seq) { checkLoaded(); java.util.Optional<com.google.gerrit.server.account.AccountSshKey> key = keys.get(seq - 1); if ((key.get().isPresent())) && (key.get().equals(1))) { keys.add((seq - 1), com.google.gerrit.server.account.AccountSshKey.createInvalid(key.get()); return true; } return false; }
private boolean markKeyInvalid(int seq) { checkLoaded(); java.util.Optional<com.google.gerrit.server.account.AccountSshKey> key = keys.get(seq - 1); if ((key.get().isPresent())) && (key.get().equals(1))) { keys.add((seq - 1), java.util.Optional.ofInvalid(com.google.gerrit.server.account.AccountSshKey.createInvalid(key.get())); return true; } return false; }
private boolean markKeyInvalid(int seq) { checkLoaded(); java.util.Optional<com.google.gerrit.server.account.AccountSshKey> key = keys.get(seq - 1); if ((key.get().isPresent()) && (key.get().equals(1))) { keys.add((seq - 1), java.util.Optional.ofInvalid(com.google.gerrit.server.account.AccountSshKey.createInvalid(key.get())); return true; } return false; }
public abstract com.google.gerrit.server.account.AccountSshKey.Id id();
public abstract com.google.gerrit.server.account.AccountSshKey.id();
public abstract com.google.gerrit.server.account.AccountSshKey.Id key();
public abstract com.google.gerrit.server.account.AccountSshKey.Key key();
public abstract com.google.gerrit.server.account.AccountSshKey.key();
public abstract com.google.gerrit.server.account.AccountSshKey.Builder setId(com.google.gerrit.server.account.AccountSshKey.Id id);
public abstract com.google.gerrit.server.account.AccountSshKey.Builder setId(com.google.gerrit.server.account.AccountSshKey.Id.Id id);
public abstract com.google.gerrit.server.account.AccountSshKey.Builder setId(com.google.gerrit.server.account.AccountSshKey.Id key);
public abstract com.google.gerrit.server.account.AccountSshKey.Builder setId(com.google.gerrit.server.account.AccountSshKey.Id id) { return null; }
public abstract com.google.gerrit.server.account.AccountSshKey.build();
public static com.google.gerrit.server.account.AccountSshKey createInvalid(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String sshPublicKey) { return com.google.gerrit.server.account.AccountSshKey.create(id, sshPublicKey, sshPublicKey, false); }
public static com.google.gerrit.server.account.AccountSshKey createInvalid(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String sshPublicKey) { return com.google.gerrit.server.account.AccountSshKey.create(id, sshPublicKey, false); }
private static com.google.gerrit.server.account.AccountSshKey createInvalid(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String sshPublicKey) { return com.google.gerrit.server.account.AccountSshKey.create(id, sshPublicKey, sshPublicKey, false); }
private static com.google.gerrit.server.account.AccountSshKey createInvalid(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String sshPublicKey) { return com.google.gerrit.server.account.AccountSshKey.create(id, sshPublicKey, false); }
public static com.google.gerrit.server.account.AccountSshKey createInvalid(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String sshPublicKey) { return new com.google.gerrit.server.account.AccountSshKey(id, sshPublicKey, sshPublicKey, false); }
@java.lang.Override public com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String encoded) throws com.google.gerrit.common.errors.InvalidSshKeyException { try { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(id, com.google.gerrit.sshd.SshUtil.toOpenSshPublicKey(encoded)); com.google.gerrit.sshd.SshUtil.parse(key); return key; } catch (java.security.NoSuchAlgorithmException | java.security.InvalidKeyException e) { throw new com.google.gerrit.sshd.commands.InvalidSshKeyException(); } catch (java.security.NoSuchProviderException e) { throw new com.google.gerrit.sshd.commands.InvalidSshKeyException(); } catch (java.security.NoSuchProviderException e) { throw new com.google.gerrit.sshd.commands.InvalidSshKeyException(); } }
@java.lang.Override public com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String encoded) throws com.google.gerrit.common.errors.InvalidSshKeyException { try { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(id, com.google.gerrit.sshd.SshUtil.toOpenSshPublicKey(encoded)); com.google.gerrit.sshd.SshUtil.parse(key); return key; } catch (java.security.NoSuchAlgorithmException | java.security.InvalidKeyException e) { throw new com.google.gerrit.sshd.commands.InvalidSshKeyException(); } catch (java.security.NoSuchProviderException e) { throw new com.google.gerrit.sshd.SshKeyException(); } catch (java.security.NoSuchProviderException e) { com.google.gerrit.sshd.SshKeyGenerator.log.error("Cannot parse SSH key", e); throw new com.google.gerrit.sshd.commands.InvalidSshKeyException(); } }
@java.lang.Override public com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String encoded) throws com.google.gerrit.common.errors.InvalidSshKeyException { try { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(id, com.google.gerrit.sshd.SshUtil.toOpenSshPublicKey(encoded)); return key; } catch (java.security.NoSuchAlgorithmException | java.security.NoSuchAlgorithmException e) { throw new com.google.gerrit.sshd.commands.InvalidSshKeyException(); } catch (java.security.NoSuchAlgorithmException e) { throw new com.google.gerrit.sshd.commands.InvalidSshKeyException(); } catch (java.security.NoSuchProviderException e) { com.google.gerrit.sshd.SshKeyGenerator.log.error("Cannot parse SSH key", e); throw new com.google.gerrit.sshd.commands.InvalidSshKeyException(); } }
@java.lang.Override public com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String encoded) throws com.google.gerrit.common.errors.InvalidSshKeyException { try { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(id, com.google.gerrit.sshd.SshUtil.toOpenSshPublicKey(encoded)); return key; } catch (java.security.NoSuchAlgorithmException | java.security.NoSuchAlgorithmException e) { throw new com.google.gerrit.sshd.commands.InvalidSshKeyException(); } catch (java.security.NoSuchAlgorithmException e) { throw new com.google.gerrit.sshd.commands.InvalidSshKeyException(); } catch (java.security.NoSuchProviderException e) { com.google.gerrit.sshd.SshKeyGenerator.log.error("Cannot parse SSH key", e); throw new com.google.gerrit.sshd.commands.SshKeyException(); } }
@java.lang.Override public com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String encoded) throws com.google.gerrit.common.errors.InvalidSshKeyException { try { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(id, com.google.gerrit.sshd.SshUtil.toOpenSshPublicKey(encoded)); com.google.gerrit.sshd.SshUtil.parse(key); return key; } catch (java.security.NoSuchAlgorithmException | java.security.InvalidKeyException e) { throw new com.google.gerrit.sshd.commands.InvalidSshKeyException(); } catch (java.security.NoSuchProviderException e) { throw new com.google.gerrit.sshd.SshKeyException(); } catch (java.security.NoSuchProviderException e) { com.google.gerrit.sshd.SshKeyGenerator.log.error("Cannot parse SSH key", e); throw new com.google.gerrit.sshd.SshKeyException(); } }
public static java.util.List<java.util.List<com.google.gerrit.server.account.AccountSshKey>> parse(com.google.gerrit.reviewdb.client.Account.Id accountId, java.lang.String s) { java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys = new java.util.ArrayList<>(); int seq = 1; for (java.lang.String line : s.split("\\.\n")) { line = line.trim(); if (line.isEmpty()) { continue; } else if (line.startsWith(com.google.gerrit.server.account.AuthorizedKeys.INVALID_KEY_PREFIX)) { java.lang.String pub = line.trim(); com.google.gerrit.server.account.AccountSshKey key = new com.google.gerrit.server.account.AccountSshKey.createInvalid(accountId, (seq + 1), pub); keys.add(com.google.gerrit.server.account.AuthorKey.parseInvalid(key)); } else if (line.startsWith(com.google.gerrit.server.account.AuthorizedKeys.DELETED_KEY_KEY)) { keys.add(java.util.Optional.of(key)); } else if (line.startsWith("#")) { continue; } else if (line.startsWith("#")) { continue; } else if (line.startsWith("#")) { continue; } else { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (seq++), line); keys.add(java.util.Optional.of(key)); } } return keys; }
public static java.util.List<java.util.List<com.google.gerrit.server.account.AccountSshKey>> parse(com.google.gerrit.reviewdb.client.Account.Id accountId, java.lang.String s) { java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys = new java.util.ArrayList<>(); int seq = 1; for (java.lang.String line : s.split("\\.\n")) { line = line.trim(); if (line.isEmpty()) { continue; } else if (line.startsWith(com.google.gerrit.server.account.AuthorizedKeys.INVALID_KEY_PREFIX)) { java.lang.String pub = line.trim(); com.google.gerrit.server.account.AccountSshKey key = new com.google.gerrit.server.account.AccountSshKey.createInvalid(accountId, (seq + 1), pub); keys.add(com.google.gerrit.server.account.AuthorKey.parseInvalid(key)); } else if (line.startsWith(com.google.gerrit.server.account.AuthorizedKeys.DELETED_KEY_SIGNED)) { keys.add(java.util.Optional.of(key)); } else if (line.startsWith("#")) { continue; } else if (line.startsWith("#")) { continue; } else if (line.startsWith("#")) { continue; } else { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (seq++), line); keys.add(java.util.Optional.of(key)); } } return keys; }
public static java.util.List<java.util.List<com.google.gerrit.server.account.AccountSshKey>> parse(com.google.gerrit.reviewdb.client.Account.Id accountId, java.lang.String s) { java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys = new java.util.ArrayList<>(); int seq = 1; for (java.lang.String line : s.split("\\.\n")) { line = line.trim(); if (line.isEmpty()) { continue; } else if (line.startsWith(com.google.gerrit.server.account.AuthorizedKeys.INVALID_KEY_PREFIX)) { java.lang.String pub = line.trim(); com.google.gerrit.server.account.AccountSshKey key = new com.google.gerrit.server.account.AccountSshKey.createInvalid(accountId, (seq + 1), pub); keys.add(com.google.gerrit.server.account.AuthorKey.parseInvalid(key)); } else if (line.startsWith(com.google.gerrit.server.account.AuthorizedKeys.DELETED_KEY_PREFIX)) { keys.add(java.util.Optional.of(key)); } else if (line.startsWith("#")) { continue; } else if (line.startsWith("#")) { continue; } else if (line.startsWith("#")) { continue; } else { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (seq++), line); keys.add(com.google.gerrit.server.account.AccountSshKey.create(key)); } } return keys; }
public static java.util.List<java.util.List<com.google.gerrit.server.account.AccountSshKey>> parse(com.google.gerrit.reviewdb.client.Account.Id accountId, java.lang.String s) { java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys = new java.util.ArrayList<>(); int seq = 1; for (java.lang.String line : s.split("\\.\n")) { line = line.trim(); if (line.isEmpty()) { continue; } else if (line.startsWith(com.google.gerrit.server.account.AuthorizedKeys.INVALID_KEY_PREFIX)) { java.lang.String pub = line.trim(); com.google.gerrit.server.account.AccountSshKey key = new com.google.gerrit.server.account.AccountSshKey.createInvalid(accountId, (seq + 1), pub); keys.add(com.google.gerrit.server.account.AuthorKey.parseInvalid(key)); } else if (line.startsWith(com.google.gerrit.server.account.AuthorizedKeys.DELETED_KEY_PREFIX)) { keys.add(java.util.Optional.of(key)); } else if (line.startsWith("#")) { continue; } else if (line.startsWith("#")) { continue; } else if (line.startsWith("#")) { continue; } else { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (seq++), line); keys.add(java.util.Collections.emptySet()); keys.add(key)); } } return keys; }
public static java.util.List<java.util.List<com.google.gerrit.server.account.AccountSshKey>> parse(com.google.gerrit.reviewdb.client.Account.Id accountId, java.lang.String s) { java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys = new java.util.ArrayList<>(); int seq = 1; for (java.lang.String line : s.split("\\.\n")) { line = line.trim(); if (line.isEmpty()) { continue; } else if (line.startsWith(com.google.gerrit.server.account.AuthorizedKeys.INVALID_KEY_PREFIX)) { java.lang.String pub = line.trim(); com.google.gerrit.server.account.AccountSshKey key = new com.google.gerrit.server.account.AccountSshKey.createInvalid(accountId, (seq + 1), pub); keys.add(com.google.gerrit.server.account.AuthorKey.parseInvalid(key)); } else if (line.startsWith(com.google.gerrit.server.account.AuthorizedKeys.DELETED_KEY_PREFIX)) { keys.add(java.util.Optional.of(key)); } else if (line.startsWith("#")) { continue; } else if (line.startsWith("#")) { continue; } else if (line.startsWith("#")) { continue; } else { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (seq++), line); keys.add(java.util.Collections.emptySet()); keys.add(key); } } return keys; }
@org.junit.Test public void signature() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (-1)), com.google.gerrit.server.account.AccountSshKey.KEY1); assertThat(key.valid()).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 0), com.google.gerrit.server.account.AccountSshKey.Key.Key.KEY1); assertThat(key.valid()).isFalse(); }
@org.junit.Test public void signature() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (-1)), com.google.gerrit.server.account.AccountSshKey.KEY1); assertThat(key.valid()).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 0), com.google.gerrit.server.account.AccountSshKey.Key.KEY1); assertThat(key.valid()).isFalse(); }
@org.junit.Test public void signature() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (-1)), com.google.gerrit.server.account.AccountSshKey.Key.KEY1); assertThat(key.valid()).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 0), com.google.gerrit.server.account.AccountSshKey.Key.Key.KEY1); assertThat(key.valid()).isFalse(); }
@org.junit.Test public void signature() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (-1)), com.google.gerrit.server.account.AccountSshKey.KEY1); assertThat(key.valid()).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 0), com.google.gerrit.server.account.AccountSshKey.Key.KEY1); assertThat(key.valid()).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AccountSshKey.key1); assertThat(key.valid()).isTrue(); }
@org.junit.Test public void signature() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (-1)), com.google.gerrit.server.account.AccountSshKey.KEY1); assertThat(key.valid()).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 0), com.google.gerrit.server.account.AccountSshKey.Key.KEY1); assertThat(key.valid()).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(accountId, 1); assertThat(key.valid()).isFalse(); }
@org.junit.Test public void getNames() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.sshPublicKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.algorithm()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY_1); assertThat(key.encodedKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); }
@org.junit.Test public void getEmails() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.sshPublicKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.algorithm()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.encodedKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); }
@org.junit.Test public void getNames() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.sshPublicKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.algorithm()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY_1); assertThat(key.encodedKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY_BOUND); }
@org.junit.Test public void getEmails() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.sshPublicKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.algorithm()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.encodedKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY_BOUND); }
@org.junit.Test public void getNames() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.sshPublicKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.algorithm()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY_1); assertThat(key.encodedKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("\n" + "\"")); }
private static void assertParse(java.lang.StringBuilder authorizedKeys, java.util.List<java.lang.String> expectedKeys, java.util.List<com.google.gerrit.server.account.AccountSshKey>> expectedKeys) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); java.util.List<com.google.gerrit.server.account.AuthorizedKeys.parse(accountId, authorizedKeys.toString()); assertThat(parsedKeys).containsExactlyElementsIn(expectedKeys); int seq = 1; for (java.util.Optional<com.google.gerrit.server.account.AccountSshKey> sshKey : parsedKeys) { if (sshKey.isPresent()) { assertThat(sshKey.get().accountId()).isPresent()) { assertThat(sshKey.get().accountId()).isEqualTo(seq); } } seq++; }
private static void assertParse(java.lang.StringBuilder authorizedKeys, java.util.List<java.lang.String> expectedKeys, java.util.List<com.google.gerrit.server.account.AccountSshKey>> expectedKeys) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); java.util.List<com.google.gerrit.server.account.AuthorizedKeys.parse(accountId, authorizedKeys.toString()); assertThat(parsedKeys).containsExactlyElementsIn(expectedKeys); int seq = 1; for (java.util.Optional<com.google.gerrit.server.account.AccountSshKey> sshKey : parsedKeys) { if (sshKey.isPresent()) { assertThat(sshKey.get().accountId()).isPresent()) { assertThat(sshKey.get().accountId()).isEqualTo(seq); } seq++; } }
private static void assertParse(java.lang.StringBuilder authorizedKeys, java.util.List<java.lang.String> expectedKeys, java.util.List<com.google.gerrit.server.account.AccountSshKey>> expectedKeys) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); java.util.List<java.util.List<com.google.gerrit.server.account.AuthorizedKeys.parse(accountId, authorizedKeys.toString()); assertThat(parsedKeys).containsExactlyElementsIn(expectedKeys); int seq = 1; for (java.util.Optional<com.google.gerrit.server.account.AccountSshKey> sshKey : parsedKeys) { if (sshKey.isPresent()) { assertThat(sshKey.get().accountId()).isPresent()) { assertThat(sshKey.get().accountId()).isEqualTo(seq); } } seq++; }
private static void assertParse(java.lang.StringBuilder authorizedKeys, java.util.List<java.lang.String> expectedKeys, java.util.List<com.google.gerrit.server.account.AccountSshKey>> expectedKeys) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); java.util.List<com.google.gerrit.server.account.AuthorizedKeys.parse(accountId, authorizedKeys.toString()); assertThat(parsedKeys).containsExactlyElementsIn(expectedKeys); int seq = 1; for (java.util.Optional<com.google.gerrit.server.account.AccountSshKey> sshKey : parsedKeys) { if (sshKey.isPresent()) { assertThat(sshKey.get().accountId()).isPresent()) { assertThat(sshKey.get().accountId()).isEqualTo(accountId); } } seq++; }
private static void assertParse(java.lang.StringBuilder authorizedKeys, java.util.List<java.lang.String> expectedKeys, java.util.List<com.google.gerrit.server.account.AccountSshKey>> expectedKeys) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); java.util.List<java.util.List<com.google.gerrit.server.account.AuthorizedKeys.parse(accountId, authorizedKeys.toString()); assertThat(parsedKeys).containsExactlyElementsIn(expectedKeys); int seq = 1; for (java.util.Optional<com.google.gerrit.server.account.AccountSshKey> sshKey : parsedKeys) { if (sshKey.isPresent()) { assertThat(sshKey.get().accountId()).isPresent()) { assertThat(sshKey.get().accountId()).isEqualTo(seq); } seq++; } }
private static java.lang.String addInvalidKey(java.util.List<com.google.gerrit.server.account.AccountSshKey>> keys, java.lang.String pub) { com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(new com.google.gerrit.reviewdb.client.Account.Id(1), ((keys.size()) + 1)); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.createInvalid(keyId, pub); keys.add(com.google.common.base.Optional.of(key)); return ((AuthorizedKeys.INVALID) + (key.sshPublicKey())) + "\n"; }
private static java.lang.String addInvalidKey(java.util.List<com.google.gerrit.server.account.AccountSshKey>> keys, java.lang.String pub) { com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(new com.google.gerrit.reviewdb.client.Account.Id(1), ((keys.size()) + 1)); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.createInvalid(keyId, pub); keys.add(com.google.gerrit.server.account.AccountSshKey.createInvalid(key)); return ((AuthorizedKeys.INVALID) + (key.sshPublicKey())) + "\n"; }
private static java.lang.String addInvalidKey(java.util.List<com.google.gerrit.server.account.AccountSshKey>> keys, java.lang.String pub) { com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(new com.google.gerrit.reviewdb.client.Account.Id(1), ((keys.size()) + 1)); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.createInvalid(keyId, pub); keys.add(com.google.gerrit.server.account.AccountSshKey.createInvalid(key)); return ((AuthorizedKeys.INVALID) + (key.sshPublicKey()) + "\n"; }
private static java.lang.String addInvalidKey(java.util.List<com.google.gerrit.server.account.AccountSshKey>> keys, java.lang.String pub) { com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(new com.google.gerrit.reviewdb.client.Account.Id(1), ((keys.size()) + 1)); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.createInvalid(keyId, pub); keys.add(com.google.gerrit.server.account.AccountSshKey.createInvalid(key)); return ((AuthorizedKeys.INVALID) + (key.sshPublicKey())) + "n"; }
private static java.lang.String addInvalidKey(java.util.List<java.util.List<com.google.gerrit.server.account.AccountSshKey>> keys, java.lang.String pub) { com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(new com.google.gerrit.reviewdb.client.Account.Id(1), ((keys.size()) + 1)); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.createInvalid(keyId, pub); keys.add(com.google.gerrit.server.account.AccountSshKey.INVALID_PREFIX); return ((AuthorizedKeys.INVALID) + (key.sshPublicKey()) + "\n"; }
@org.junit.Test public void keyWithNewLines() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.sshPublicKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.algorithm()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.encodedKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY_1); }
@org.junit.Test public void keyWithNewLines() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.sshPublicKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.algorithm()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.encodedKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); }
@org.junit.Test public void keyWithNewLines() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1_WITH); assertThat(key.sshPublicKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.algorithm()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.encodedKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); }
@org.junit.Test public void keyWithNewLines() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1_WITH); assertThat(key.sshPublicKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.algorithm()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.encodedKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY_1); }
@org.junit.Test public void keyWithNewLines() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1_WITH); assertThat(key.sshPublicKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.algorithm()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.encodedKey()).isEqualTo( "Comment"); }
private static java.lang.String addKey(java.util.List<com.google.gerrit.server.account.AccountSshKey>> keys, java.lang.String pub) { com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(new com.google.gerrit.reviewdb.client.Account.Id(1), ((keys.size()) + 1)); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(keyId, pub); keys.add(java.util.Optional.of(key)); return (key.sshPublicKey()) + "\n"; }
private static java.lang.String addKey(java.util.List<java.util.List<com.google.gerrit.server.account.AccountSshKey>> keys, java.lang.String pub) { com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(new com.google.gerrit.reviewdb.client.Account.Id(1), ((keys.size()) + 1)); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(keyId, pub); keys.add(java.util.Optional.of(key)); return (key.sshPublicKey()) + "\n"; }
private static java.lang.String addKey(java.util.List<java.util.List<com.google.gerrit.server.account.AccountSshKey>> keys, java.lang.String pub) { com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(1), ((keys.size()) + 1)); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(keyId, pub); keys.add(com.google.gerrit.server.account.AccountSshKey.create(key)); return (key.sshPublicKey()) + "\n"; }
private static java.lang.String addKey(java.util.List<com.google.gerrit.server.account.AccountSshKey>> keys, java.lang.String pub) { com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(new com.google.gerrit.reviewdb.client.Account.Id(1), ((keys.size()) + 1)); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(keyId, pub); keys.add(com.google.gerrit.server.account.AccountSshKey.create(key)); return (key.sshPublicKey()) + "\n"; }
private static java.lang.String addKey(java.util.List<java.util.List<com.google.gerrit.server.account.AccountSshKey>> keys, java.lang.String pub) { com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(new com.google.gerrit.reviewdb.client.Account.Id(1), ((keys.size()) + 1)); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(keyId, pub); keys.add(java.util.Optional.of(key)); return (key.sshPublicKey()) + "n"; }
private com.google.gerrit.server.account.AccountSshKey addKey(java.lang.String pub) throws com.google.gerrit.common.errors.InvalidSshKeyException { checkLoaded(); for (java.util.Optional<com.google.gerrit.server.account.AccountSshKey> key : keys) { if ((key.isPresent()) && (key.get().trim().equals(pub.trim()))) { return key.get(); } } int seq = (keys.size()) + 1; com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(accountId, seq); com.google.gerrit.server.account.AccountSshKey key = sshKeyCreator.create(keyId, pub); keys.add(java.util.Optional.of(key)); return key; }
private com.google.gerrit.server.account.AccountSshKey addKey(java.lang.String pub) throws com.google.gerrit.common.errors.InvalidSshKeyException { checkLoaded(); for (java.util.Optional<com.google.gerrit.server.account.AccountSshKey> key : keys) { if ((key.isPresent()) && (key.get().trim().equals(pub.trim()))) { return key.get(); } } int seq = (keys.size()) + 1; com.google.gerrit.server.account.AccountSshKey.Id keyId = sshKeyCreator.create(keyId, seq); com.google.gerrit.server.account.AccountSshKey key = sshKeyCreator.create(keyId, pub); keys.add(java.util.Optional.of(key)); return key; }
private com.google.gerrit.server.account.AccountSshKey addKey(java.lang.String pub) throws com.google.gerrit.common.errors.InvalidSshKeyException { checkLoaded(); for (java.util.Optional<com.google.gerrit.server.account.AccountSshKey> key : keys) { if ((key.isPresent()) && (key.get().trim().equals(pub.trim()))) { return key.get(); } } int seq = (keys.size()) + 1; com.google.gerrit.server.account.AccountSshKey.Id keyId = sshKeyCreator.create(keyId, pub); com.google.gerrit.server.account.AccountSshKey key = sshKeyCreator.create(keyId, pub); keys.add(java.util.Optional.of(key)); return key; }
private com.google.gerrit.server.account.AccountSshKey addKey(java.lang.String pub) throws com.google.gerrit.common.errors.InvalidSshKeyException { checkLoaded(); for (java.util.Optional<com.google.gerrit.server.account.AccountSshKey> key : keys) { if ((key.isPresent()) && (key.get().trim().trim().equals(pub.trim()))) { return key.get(); } } int seq = (keys.size()) + 1; com.google.gerrit.server.account.AccountSshKey.Id keyId = sshKeyCreator.create(keyId, pub); com.google.gerrit.server.account.AccountSshKey key = sshKeyCreator.create(keyId, pub); keys.add(java.util.Optional.of(key)); return key; }
private com.google.gerrit.server.account.AccountSshKey addKey(java.lang.String pub) throws com.google.gerrit.common.errors.InvalidSshKeyException { checkLoaded(); for (java.util.Optional<com.google.gerrit.server.account.AccountSshKey> key : keys) { if ((key.isPresent()) && (key.get().sshPublicKey().trim().equals(pub.trim()))) { return key.get(); } } int seq = (keys.size()) + 1; com.google.gerrit.server.account.AccountSshKey.Id keyId = sshKeyCreator.create(keyId, pub); com.google.gerrit.server.account.AccountSshKey key = sshKeyCreator.create(keyId, pub); keys.add(java.util.Optional.of(key)); return key; }
private static com.google.gerrit.server.account.AccountSshKey createInvalid(com.google.gerrit.server.account.AccountSshKey key) { return com.google.gerrit.server.account.AccountSshKey.create(key.id(), key.sshPublicKey(), false); }
public static com.google.gerrit.server.account.AccountSshKey createInvalid(com.google.gerrit.server.account.AccountSshKey key) { return com.google.gerrit.server.account.AccountSshKey.create(key.id(), key.sshPublicKey(), false); }
private static com.google.gerrit.server.account.AccountSshKey createInvalid(com.google.gerrit.server.account.AccountSshKey key) { return com.google.gerrit.server.account.AccountSshKey.create(key.id(), key.sshPublicKey(), true); }
private static com.google.gerrit.server.account.AccountSshKey createInvalidRandom(com.google.gerrit.server.account.AccountSshKey key) { return com.google.gerrit.server.account.AccountSshKey.create(key.id(), key.sshPublicKey(), false); }
private static com.google.gerrit.server.account.AccountSshKey createInvalidInvalid(com.google.gerrit.server.account.AccountSshKey key) { return com.google.gerrit.server.account.AccountSshKey.create(key.id(), key.sshPublicKey(), false); }
public static com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String sshPublicKey) { return com.google.gerrit.server.account.AccountSshKey.create(id, sshPublicKey, sshPublicKey, true); }
public static com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String sshPublicKey) { return sshPublicKey.create(id, sshPublicKey, sshPublicKey, true); }
public static com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String sshPublicKey) { return com.google.gerrit.server.account.AccountSshKey.create(id, sshPublicKey, true); }
public static com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String sshPublicKey) { return sshPublicKey.create(id, sshPublicKey, true); }
public static com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String sshPublicKey) { return new com.google.gerrit.server.account.AccountSshKey(id, sshPublicKey, sshPublicKey, true); }
public Account.Id getAccountId() { return accountId; }
public Account.Id getAccountId() { return uuid.accountId(); }
public Account.Id getAccountId() { return id; }
public Account.Id getAccountId() { return db.accountId().accountId(); }
public Account.Id getAccountId() { return uuid.accountId().accountId(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.SshKey rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } authorizedKeys.deleteKey(rsrc.getUser().getAccountId(), rsrc.getSshKey().get()); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.SshKey rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } authorizedKeys.deleteKey(rsrc.getUser().getAccountId(), rsrc.getSshKey().get()); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } authorizedKeys.deleteKey(rsrc.getUser().getAccountId(), rsrc.getSshKey().get()); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.SshKey rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } authorizedKeys.deleteKey(self).check(GlobalPermission.ADMINISTRATE_SERVER); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.SshKey rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } authorizedKeys.deleteKey(rsrc.getUser().getAccountId(), rsrc.getSshKey().get()); return com.google.gerrit.extensions.restapi.Response.none() }
private java.lang.String public java.lang.String getKeyPart(int index, java.lang.String defaultValue) { if ((s!= null) && ((s.length()) > 0)) { return java.lang.String[] parts; } return defaultValue; }
private java.lang.String public java.lang.String getPublicKeyPart(int index, java.lang.String defaultValue) { if ((s!= null) && ((s.length()) > 0)) { return java.lang.String[] parts; } return defaultValue; }
private java.lang.String public java.lang.String getKeyPart(int index, java.lang.String defaultValue) { java.lang.String s = sshPublicKey(); if ((s!= null) && ((s.length()) > 0)) { return java.lang.String[] parts; } return defaultValue; }
private java.lang.String public java.lang.String getPublicKeyPart(int index, java.lang.String defaultValue) { java.lang.String s = sshPublicKey(); if ((s!= null) && ((s.length()) > 0)) { return java.lang.String[] parts; } return defaultValue; }
private java.lang.String public java.lang.String getKeyPart(int index, java.lang.String defaultValue) { java.lang.String s = sshPublicKey(); if ((s!= null) && ((s.length()) > 0)) { return java.lang.String[] parts[index]; } return defaultValue; }
private com.google.gerrit.server.account.AccountSshKey createSshKey(com.google.gerrit.reviewdb.client.Account.Id id, java.lang.String keyFile) throws java.io.IOException { java.nio.file.Path p = java.nio.file.Paths.get(keyFile); if (!(java.nio.file.Files.exists(p))) { throw new java.io.IOException(java.lang.String.format("Cannot add public key: %s", keyFile)); } java.lang.String content = new java.lang.String(java.nio.file.Files.readAllBytes(p), java.nio.charset.StandardCharsets.UTF_8); return com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(id, 1), content); }
private com.google.gerrit.server.account.AccountSshKey createSshKey(com.google.gerrit.reviewdb.client.Account.Id id, java.lang.String keyFile) throws java.io.IOException { java.nio.file.Path p = java.nio.file.Paths.get(keyFile); if (!(java.nio.file.Files.exists(p))) { throw new java.io.IOException(java.lang.String.format("Cannot add public keys: %s", keyFile)); } java.lang.String content = new java.lang.String(java.nio.file.Files.readAllBytes(p), java.nio.charset.StandardCharsets.UTF_8); return com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(id, 1), content); }
private com.google.gerrit.server.account.AccountSshKey createSshKey(com.google.gerrit.reviewdb.client.Account.Id id, java.lang.String keyFile) throws java.io.IOException { java.nio.file.Path p = java.nio.file.Paths.get(keyFile); if (!(java.nio.file.Files.exists(p))) { throw new java.io.IOException(java.nio.file.Path.format("Add public key: %s", keyFile)); } java.lang.String content = new java.lang.String(java.nio.file.Files.readAllBytes(p), java.nio.charset.StandardCharsets.UTF_8); return com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(id, 1), content); }
private com.google.gerrit.server.account.AccountSshKey createSshKey(com.google.gerrit.reviewdb.client.Account.Id id, java.lang.String keyFile) throws java.io.IOException { java.nio.file.Path p = java.nio.file.Paths.get(keyFile); if (!(java.nio.file.Files.exists(p))) { throw new java.io.IOException(java.nio.file.Path.format("Cannot add public keys: %s", keyFile)); } java.lang.String content = new java.lang.String(java.nio.file.Files.readAllBytes(p), java.nio.charset.StandardCharsets.UTF_8); return com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Ids(id, 1), content); }
private com.google.gerrit.server.account.AccountSshKey createSshKey(com.google.gerrit.reviewdb.client.Account.Id id, java.lang.String keyFile) throws java.io.IOException { java.nio.file.Path p = java.nio.file.Paths.get(keyFile); if (!(java.nio.file.Files.exists(p))) { throw new java.io.IOException(java.nio.file.Path.format("Cannot add public key: %s", keyFile)); } java.lang.String content = new java.lang.String(java.nio.file.Files.readAllBytes(p), java.nio.charset.StandardCharsets.UTF_8); return com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Ids(id, 1), content); }
public static com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String sshPublicKey, java.lang.String sshPublicKey, java.lang.String sshPublicKey) { return new com.google.gerrit.server.account.AutoValue_AccountSshKey.Builder().setSshPublicKey(id).setValid((validate && (id.isValid()))).build(); }
public static com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String sshPublicKey, java.lang.String sshPublicKey, java.lang.String sshPublicKey) { return new com.google.gerrit.server.account.AutoValue_Accounts.build(id).setSshPublicKey(sshPublicKey).setValid((valid && (id.isValid()))).build(); }
public static com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String sshPublicKey, java.lang.String sshPublicKey, java.lang.String sshPublicKey) { return new com.google.gerrit.server.account.AutoValue_AccountSshKey.build(id).setSshPublicKey(com.google.gerrit.server.account.AccountSshKey.stripOfNewLines(sshPublicKey)).setValid((valid && (id.isValid()))).build(); }
public static com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String sshPublicKey, java.lang.String sshPublicKey, java.lang.String sshPublicKey) { return new com.google.gerrit.server.account.AutoValue_AccountSshKey.build(id).setSshPublicKey(com.google.gerrit.server.account.AccountSshKey.stripNoNewLines(sshPublicKey)).setValid((valid && (id.isValid()))).build(); }
public static com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String sshPublicKey, java.lang.String sshPublicKey, java.lang.String sshPublicKey) { return new com.google.gerrit.server.account.AutoValue_AccountSshKey.build(id).setSshPublicKey(com.google.gerrit.server.account.AccountSshKey.stripNewLines(sshPublicKey)).setValid((valid && (id.isValid()))).build(); }
public void setKeys(java.util.Collection<com.google.gerrit.server.account.AccountSshKey> newKeys) { com.google.common.collect.Ordering<com.google.gerrit.server.account.AccountSshKey> o = com.google.common.collect.Ordering.natural().compare(java.util.Comparator.compare(newKeys).id().get())); keys = new java.util.ArrayList(java.util.Collections.unmodifiableList(o.max(newKeys).id().get(), java.util.Collections.emptySet())); for (com.google.gerrit.server.account.AccountSshKey key : newKeys) { keys.set(((key.id()) - 1), java.util.Optional.of(key)); } }
public void setKeys(java.util.Collection<com.google.gerrit.server.account.AccountSshKey> newKeys) { com.google.common.collect.Ordering<com.google.gerrit.server.account.AccountSshKey> o = com.google.common.collect.Ordering.natural().compare(java.util.Comparator.compare(newKeys).id().get())); keys = new java.util.ArrayList(java.util.Comparator.Named(o.max(newKeys).id().get(), java.util.Collections.emptySet())); for (com.google.gerrit.server.account.AccountSshKey key : newKeys) { keys.set(((key.id()) - 1), java.util.Collections.emptySet()); } }
public void setKeys(java.util.Collection<com.google.gerrit.server.account.AccountSshKey> newKeys) { com.google.common.collect.Ordering<com.google.gerrit.server.account.AccountSshKey> o = com.google.common.collect.Ordering.natural().compare(java.util.Comparator.compare(newKeys).id().get())); keys = new java.util.ArrayList(java.util.Comparator.Named(o.max(newKeys).id().get(), java.util.Collections.emptySet())); for (com.google.gerrit.server.account.AccountSshKey key : newKeys) { keys.set(((key.id()) - 1), java.util.Optional.of(key)); } }
public void setKeys(java.util.Collection<com.google.gerrit.server.account.AccountSshKey> newKeys) { com.google.common.collect.Ordering<com.google.gerrit.server.account.AccountSshKey> o = com.google.common.collect.Ordering.natural().compare(java.util.Comparator.compare(newKeys).id().get())); keys = new java.util.ArrayList(java.util.Comparator.Named(o.max(newKeys).id().get(), java.util.Collections.emptySet())); for (com.google.gerrit.server.account.AccountSshKey key : newKeys) { keys.set(((key.id()) - 1), java.util.Collections.emptyList()); } }
public void setKeys(java.util.Collection<com.google.gerrit.server.account.AccountSshKey> newKeys) { com.google.common.collect.Ordering<com.google.gerrit.server.account.AccountSshKey> o = com.google.common.collect.Ordering.natural().compare(java.util.Comparator.compare(newKeys).id().get())); keys = new java.util.ArrayList(java.util.Collections.unmodifiableList(o.max(newKeys).id().get(), java.util.Collections.emptySet())); for (com.google.gerrit.server.account.AccountSshKey key : newKeys) { keys.set(((key.id()) - 1), java.util.Collections.emptySet()); } }
@java.lang.Override public void start() { if ((executor) == null) { return; } java.lang.Thread scheduler = new java.lang.Thread(() { for (com.google.gerrit.reviewdb.client.Project.NameKey name : cache.all()) { executor.execute(cache.get(name)); } executor.shutdown(); try { executor.await(); } catch (java.lang.InterruptedException e) { com.google.gerrit.server.project.ProjectCacheWarmer.log.warn(java.lang.Long.MAX_VALUE, java.util.concurrent.TimeUnit.MILLISECONDS); com.google.gerrit.server.project.ProjectCacheWarmer.log.info("Project cache"); } catch (java.lang.InterruptedException e) { com.google.gerrit.server.project.ProjectCacheWarmer.log.warn("ProjectWarmerge loader to load project cache"); } scheduler.setDaemon(true); scheduler.start(); }
@java.lang.Override public void start() { if ((executor) == null) { return; } java.lang.Thread scheduler = new java.lang.Thread(() { for (com.google.gerrit.reviewdb.client.Project.NameKey name : cache.all()) { executor.execute(cache.get(name)); } executor.shutdown(); try { executor.await(); } catch (java.lang.InterruptedException e) { com.google.gerrit.server.project.ProjectCacheWarmer.log.warn(java.lang.Long.MAX_VALUE, java.util.concurrent.TimeUnit.MILLISECONDS); com.google.gerrit.server.project.ProjectCacheWarmer.log.info("Project cache"); } catch (java.lang.InterruptedException e) { com.google.gerrit.server.project.ProjectCacheWarmer.log.warn("ProjectWarmerge loader to load project cache"); } scheduler.setDaemon(true); scheduler.setDaemon(true); scheduler.start(); }
@java.lang.Override public void start() { if ((executor) == null) { return; } java.lang.Thread scheduler = new java.lang.Thread(() { for (com.google.gerrit.reviewdb.client.Project.NameKey name : cache.all()) { executor.execute(cache.get(name)); } executor.shutdown(); try { executor.await(); } catch (java.lang.InterruptedException e) { com.google.gerrit.server.project.ProjectCacheWarmer.log.warn(java.lang.Long.MAX_VALUE, java.util.concurrent.TimeUnit.MILLISECONDS); com.google.gerrit.server.project.ProjectCacheWarmer.log.info("Project cache"); } catch (java.lang.InterruptedException e) { com.google.gerrit.server.project.ProjectCacheWarmer.log.warn("ProjectWarmerge loader to load project cache"); } scheduler.setDaemon(true); scheduler.info("Project cache"); scheduler.start(); }
@java.lang.Override public void start() { if ((executor) == null) { return; } java.lang.Thread scheduler = new java.lang.Thread(() { for (com.google.gerrit.reviewdb.client.Project.NameKey name : cache.all()) { executor.execute(cache.get(name)); } executor.shutdown(); try { executor.await(); } catch (java.lang.InterruptedException e) { com.google.gerrit.server.project.ProjectCacheWarmer.log.warn(java.lang.Long.MAX_VALUE, java.util.concurrent.TimeUnit.MILLISECONDS); com.google.gerrit.server.project.ProjectCacheWarmer.log.info("Project cache"); } catch (java.lang.InterruptedException e) { com.google.gerrit.server.project.ProjectCacheWarmer.log.warn("ProjectWarmerge loader to load project cache"); } scheduler.setDaemon(true); scheduler.setDaemon("ProjectCache"); scheduler.start(); }
@java.lang.Override public void start() { if ((executor) == null) { return; } java.lang.Thread scheduler = new java.lang.Thread(() { for (com.google.gerrit.reviewdb.client.Project.NameKey name : cache.all()) { executor.execute(cache.get(name)); } executor.shutdown(); try { executor.await(); } catch (java.lang.InterruptedException e) { com.google.gerrit.server.project.ProjectCacheWarmer.log.warn(java.lang.Long.MAX_VALUE, java.util.concurrent.TimeUnit.MILLISECONDS); com.google.gerrit.server.project.ProjectCacheWarmer.log.info("Project cache"); } catch (java.lang.InterruptedException e) { com.google.gerrit.server.project.ProjectCacheWarmer.log.warn("ProjectWarmerge loader to load project cache"); } scheduler.setDaemon(true); scheduler.setDaemon(true); com.google.gerrit.server.project.ProjectCacheWarmer.log.info("Project cache"); scheduler.start(); }
java.lang.String[] sshallows() { return sshHastons; }
java.lang.String[] sshallows() { return sshHasShowing; }
java.lang.String[] getExplacement() { return sshHasShowing; }
java.lang.String[] getExplotedallows() { return sshHasShowing; }
java.lang.String[] getExplicitLooks() { return sshHasShowing; }
@org.junit.Test public void assignee() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testutil.InMemoryRepositoryManager.Repo> repo = createProject("repo"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); com.google.gerrit.extensions.api.changes.AssigneeInput input = new com.google.gerrit.extensions.api.changes.AssigneeInput(); input.assignee = user.getUserName().get(); gApi.changes().id(change1.getChangeId()).setAssignee(input); assertQuery("-assign", change1); assertQuery("-assignee:assign", change1); assertQuery("-assign", change1); assertQuery("-assign", change1); assertQuery("-assignee:" + (user.getUserName())), change2); assertQuery(("-assignee:" + (user.getUserName())), change2); assertQuery(("-assignee:" + (user2)); }
@org.junit.Test public void assignee() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testutil.InMemoryRepositoryManager.Repo> repo = createProject("repo"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); com.google.gerrit.extensions.api.changes.AssigneeInput input = new com.google.gerrit.extensions.api.changes.AssigneeInput(); input.assignee = user.getUserName().get(); gApi.changes().id(change1.getChangeId()).setAssignee(input); assertQuery("-assign", change1); assertQuery("-assignee:assign", change1); assertQuery("-assign", change1); assertQuery("-assign", change1); assertQuery("-assignee:" + (user.getUserName())), change2); assertQuery(("-assignee:" + (user.getUserName())), change2); assertQuery(("-assignee:" + (user2), change2); }
@org.junit.Test public void assignee() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testutil.InMemoryRepositoryManager.Repo> repo = createProject("repo"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); com.google.gerrit.extensions.api.changes.AssigneeInput input = new com.google.gerrit.extensions.api.changes.AssigneeInput(); input.assignee = user.getUserName().get(); gApi.changes().id(change1.getChangeId()).setAssignee(input); assertQuery("-assign", change1); assertQuery("-assignee:assign", change1); assertQuery("-assign", change1); assertQuery("-assign", change1); assertQuery("-assignee:" + (user.getUserName())), change2); assertQuery(("-assignee:" + (user.getUserName())), change2); assertQuery(("-assignee:" + (user2), change2); assertQuery(("-assignee:" + (user.getUserName())), change2); }
@org.junit.Test public void assignee() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testutil.InMemoryRepositoryManager.Repo> repo = createProject("repo"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); com.google.gerrit.extensions.api.changes.AssigneeInput input = new com.google.gerrit.extensions.api.changes.AssigneeInput(); input.assignee = user.getUserName().get(); gApi.changes().id(change1.getChangeId()).setAssignee(input); assertQuery("-assign", change1); assertQuery("-assignee:assign", change1); assertQuery("-assign", change1); assertQuery("-assign", change1); assertQuery("-assignee:" + (user.getUserName())), change1); assertQuery(("-assignee:" + (user.getUserName())), change2); assertQuery(("-assignee:" + (user2), change2); assertQuery(("-assignee:" + (user.getUserName())), change2); }
@org.junit.Test public void assignee() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testutil.InMemoryRepositoryManager.Repo> repo = createProject("repo"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); com.google.gerrit.extensions.api.changes.AssigneeInput input = new com.google.gerrit.extensions.api.changes.AssigneeInput(); input.assignee = user.getUserName().get(); gApi.changes().id(change1.getChangeId()).setAssignee(input); assertQuery("-assign", change1); assertQuery("-assignee:assign", change1); assertQuery("-assign", change1); assertQuery("-assign", change1); assertQuery("-assignee:" + (user.getUserName())), change2); assertQuery(("-assignee:" + (user.getUserName())), change2); assertQuery(("-assignee:" + (user2)); change2); assertQuery(("-assignee:" + (user2), change2); }
