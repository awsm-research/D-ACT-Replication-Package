@java.lang.Override public void getIccSlotsStatus(android.os.Message result) { if ((mIccSlotStatus)!= null) { resultSuccess(result, mIccSlotStatus); } else { resultFail(result, null, new com.android.internal.telephony.CommandException(CommandException.Error.REQUEST_NOT_SUPPORTED)); } }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSanity() { assertNotNull(mUiccControllerUT.getUiccCard(0)); assertNull(mUiccControllerUT.getIccRecords(0, UiccController.APP_FAM_3GPP)); assertNull(mUiccControllerUT.getIccRecords(0, UiccController.APP_FAM_3GPP2)); assertNull(mUiccControllerUT.getIccRecords(0, UiccController.APP_FAM_IMS)); assertNull(mUiccControllerUT.getIccFileHandler(0, UiccController.APP_FAM_3GPP)); assertNull(mUiccControllerUT.getIccFileHandler(0, UiccController.APP_FAM_3GPP2)); assertNull(mUiccControllerUT.getIccFileHandler(0, UiccController.APP_FAM_IMS)); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { super.setUp(this.getClass().getSimpleName()); doReturn(com.android.internal.telephony.uicc.UiccControllerTest.PHONE_COUNT).when(mTelephonyManager).getPhoneCount(); doReturn(com.android.internal.telephony.uicc.UiccControllerTest.PHONE_COUNT).when(mTelephonyManager).getSimCount(); replaceInstance(com.android.internal.telephony.uicc.UiccController.class, "mInstance", null, null); mIccCardStatus.mApplications = new com.android.internal.telephony.uicc.IccCardApplicationStatus[]{ }; mIccCardStatus.mCdmaSubscriptionAppIndex = mIccCardStatus.mImsSubscriptionAppIndex = mIccCardStatus.mGsmUmtsSubscriptionAppIndex = -1; mSimulatedCommands.setIccCardStatus(mIccCardStatus); mIccCardStatus.physicalSlotIndex = UiccController.INVALID_SLOT_ID; mUiccControllerHandlerThread = new com.android.internal.telephony.uicc.UiccControllerTest.UiccControllerHandlerThread(TAG); mUiccControllerHandlerThread.start(); waitUntilReady(); com.android.internal.telephony.TelephonyTestUtils.waitForMs(100); }
@java.lang.Override public void getIccSlotsStatus(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy!= null) { riljLog("getIccSlotsStatus"); android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { riljLog("getIccSlotsStatus"); } if (result!= null) { riljLog(result!= null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_SLOT_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.getSimSlotsStatus(rr.mSerial); } catch (android.os.RemoteException |java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getIccSlotStatus", e); } } }
private void downloadData(android.os.Bundle extras, android.content.Context context) { if (extras == null) return;java.lang.String url; url = extras.getString(com.android.tests.connectivity.uid.ConnectivityTestActivity.URL); android.util.Log.e(com.android.tests.connectivity.uid.ConnectivityTestActivity.TAG, ("URL IS: " + url)); checkAndGrantRuntimePermissions(context); httpDownloadFile(url); }
public void onResume() { super.onResume(); boolean conn = checkNow(this.getApplicationContext()); android.content.Intent returnIntent = new android.content.Intent(); returnIntent.putExtra(com.android.tests.connectivity.uid.ConnectivityTestActivity.RESULT, conn); setResult(com.android.tests.connectivity.uid.RESULT_OK, returnIntent); android.os.Bundle extras = getIntent().getExtras(); downloadData(extras, this.getApplicationContext()); finish(); }
private boolean isRunningInVR() { final android.content.Context context = android.support.test.InstrumentationRegistry.getTargetContext(); if (((context.getResources().getConfiguration().uiMode) & (android.content.res.Configuration.UI_MODE_TYPE_MASK)) == (android.content.res.Configuration.UI_MODE_TYPE_VR_HEADSET)) { return true; } return false; }
protected boolean supportsKeyguard() throws com.android.tradefed.device.DeviceNotAvailableException { return (isHandheld()) && (!(isUiModeLockedToVrHeadset())); }
private void testChangeFontScale(java.lang.String activityName, boolean relaunch) throwsjava.lang.Exception { launchActivity(activityName); finaljava.lang.String[] waitForActivitiesVisible = newjava.lang.String[]{ activityName }; mAmWmState.computeState(mDevice, waitForActivitiesVisible); setFontScale(1.0F); mAmWmState.computeState(mDevice, waitForActivitiesVisible); final int densityDpi = getGlobalDensityDpi(activityName); for (float fontScale = 0.85F; fontScale <= 1.3F; fontScale += 0.15F) { logSeparator = clearLogcat(); setFontScale(fontScale); mAmWmState.computeState(mDevice, waitForActivitiesVisible); assertRelaunchOrConfigChanged(activityName, (relaunch? 1 : 0), (relaunch? 0 : 1), logSeparator); assertExpectedFontPixelSize(activityName, android.server.cts.ActivityManagerConfigChangeTests.scaledPixelsToPixels(android.server.cts.ActivityManagerConfigChangeTests.EXPECTED_FONT_SIZE_SP, fontScale, densityDpi), logSeparator); } }
private int getGlobalDensityDpi(java.lang.String activityName,java.lang.String logSeparator) throwsjava.lang.Exception { finaljava.lang.String[] lines = getDeviceLogsForComponent(activityName, logSeparator); for (int i = (lines.length) - 1; i >= 0; i--) { finaljava.lang.String line = lines[i]; finaljava.util.regex.Matcher matcher = android.server.cts.ActivityManagerConfigChangeTests.sDeviceDensityPattern.matcher(line); if (matcher.matches()) { returnjava.lang.Integer.parseInt(matcher.group(2)); } } fail(("No fontActivityDpi reported from activity " + activityName)); return -1; }
@android.platform.test.annotations.Presubmit public void testFullscreenAppOrientationRequests() throwsjava.lang.Exception {java.lang.String logSeparator = clearLogcat(); launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME); mAmWmState.assertVisibility(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, true); android.server.cts.ReportedSizes initialReportedSizes = getLastReportedSizesForActivity(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, logSeparator); assertEquals("This activity should be in portrait", 1, initialReportedSizes.orientation); logSeparator = clearLogcat(); launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.LANDSCAPE_ACTIVITY_NAME); mAmWmState.assertVisibility(android.server.cts.ActivityManagerAppConfigurationTests.LANDSCAPE_ACTIVITY_NAME, true); initialReportedSizes = getLastReportedSizesForActivity(android.server.cts.ActivityManagerAppConfigurationTests.LANDSCAPE_ACTIVITY_NAME, logSeparator); assertEquals("This activity should be in landscape", 2, initialReportedSizes.orientation); logSeparator = clearLogcat(); launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME); mAmWmState.assertVisibility(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, true); initialReportedSizes = getLastReportedSizesForActivity(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, logSeparator); assertEquals("This activity should be in portrait", 1, initialReportedSizes.orientation); logSeparator = clearLogcat(); }
public void test_23831() throwsjava.lang.Exception { byte[] bytes = new byte[]{ ((byte) (245)), ((byte) (169)), ((byte) (234)), ((byte) (33)) };java.lang.String expected = "ï¿1⁄2ï¿1⁄2ï¿1⁄2!" + ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((), "Â "UTF-8 "UTF-8
public void testAssistantStackZOrder() throwsjava.lang.Exception { if ((!(supportsPip())) || (!(supportsSplitScreenMultiWindow()))) return; launchActivity(android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_ENTER_PIP, "true"); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.PINNED_STACK_ID); mAmWmState.assertContainsStack("Must contain pinned stack.", android.server.cts.PINNED_STACK_ID); launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_DISPLAY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsStack("Must contain fullscreen stack.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertContainsStack("Must contain docked stack.", android.server.cts.DOCKED_STACK_ID); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_FROM_SESSION); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); assertAssistantStackExists(); mAmWmState.assertFrontStack("This stack should be on top.", android.server.cts.PINNED_STACK_ID); mAmWmState.assertFocusedStack("This stack should be focused.", android.server.cts.ASSISTANT_STACK_ID); disableAssistant(); }
public void setUp() throwsjava.lang.Exception { super.setUp(); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_FROM_SESSION); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerState.ActivityStack assistantStack = mAmWmState.getAmState().getStackById(android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_DISPLAY = assistantStack.mDisplayId; disableAssistant(); }
public void testAssistantStackFinishToPreviousApp() throwsjava.lang.Exception { launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_DISPLAY); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_FINISH_SELF, "true"); disableAssistant(); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.waitForActivityState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerState.STATE_RESUMED); mAmWmState.assertFocusedActivity("should be resumed", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); mAmWmState.assertFrontStack("Front stack should be on top.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertFocusedStack("Focused stack should be focused.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); }
public void testAssistantStackLaunchNewTaskWithDockedStack() throwsjava.lang.Exception { if (!(supportsSplitScreenMultiWindow())) { return; } launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_DISPLAY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsStack("Must contain fullscreen stack.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertContainsStack("Must contain docked stack.", android.server.cts.DOCKED_STACK_ID); enableAssistant(); assertAssistantStackCanLaunchAndReturnFromNewTask(); disableAssistant(); }
public void testSetVrThreadAPISuccess() throwsjava.lang.Throwable { setIntent(1, 1, 0, 0); android.content.ComponentName requestedComponent = new android.content.ComponentName(mContext, com.android.cts.verifier.vr.MockVrListenerService.class); Settings.Secure.putString(mContext.getContentResolver(), android.vr.cts.VrSetFIFOThreadTest.ENABLED_VR_LISTENERS, requestedComponent.flattenToString()); mActivity = getActivity(); assertTrue(mActivity.waitForFrameDrawn()); if (mActivity.getPackageManager().hasSystemFeature(PackageManager.FEATURE_VR_MODE_HIGH_PERFORMANCE)) { int vr_thread = 0; int policy = 0; mActivity.setVrModeEnabled(true, requestedComponent); vr_thread =java.lang.Process.myTid(); mActivityManager = ((android.app.ActivityManager) (mContext.getSystemService(Context.ACTIVITY_SERVICE))); mActivityManager.setVrThread(vr_thread); policy = ((int) (java.lang.Process.getThreadScheduler(vr_thread))); android.util.Log.e(android.vr.cts.VrSetFIFOThreadTest.TAG, ("setVrThread policy: " + policy)); assertEquals(((android.vr.cts.VrSetFIFOThreadTest.SCHED_FIFO) | (android.vr.cts.VrSetFIFOThreadTest.SCHED_RESET_ON_FORK)), policy); } }
public void testSetVrThreadAPIFailure() throwsjava.lang.Throwable { setIntent(1, 1, 0, 0); android.content.ComponentName requestedComponent = new android.content.ComponentName(mContext, com.android.cts.verifier.vr.MockVrListenerService.class); Settings.Secure.putString(mContext.getContentResolver(), android.vr.cts.VrSetFIFOThreadTest.ENABLED_VR_LISTENERS, requestedComponent.flattenToString()); mActivity = getActivity(); assertTrue(mActivity.waitForFrameDrawn()); if (mActivity.getPackageManager().hasSystemFeature(PackageManager.FEATURE_VR_MODE_HIGH_PERFORMANCE)) { int vr_thread = 0; int policy = 0; mActivity.setVrModeEnabled(false, requestedComponent); vr_thread =java.lang.Process.myTid(); mActivityManager = ((android.app.ActivityManager) (mContext.getSystemService(Context.ACTIVITY_SERVICE))); mActivityManager.setVrThread(vr_thread); policy = ((int) (java.lang.Process.getThreadScheduler(vr_thread))); android.util.Log.e(android.vr.cts.VrSetFIFOThreadTest.TAG, ("setVrThread policy: " + policy)); assertEquals(android.vr.cts.VrSetFIFOThreadTest.SCHED_OTHER, policy); } }
@java.lang.Override public void setUp() throwsjava.lang.Exception { super.setUp(); mContext = getInstrumentation().getTargetContext(); mOldVrListener = Settings.Secure.getString(mContext.getContentResolver(), android.vr.cts.VrSetFIFOThreadTest.ENABLED_VR_LISTENERS); mIsVrHeadset = ("1".equals(android.os.SystemProperties.get(android.vr.cts.VrSetFIFOThreadTest.VR_STANDALONE_PROPERTY, "0")))? true : false; }
@com.googlecode.android_scripting.rpc.Rpc(description = "Get network stats for UID") public long connectivityQueryDetailsForUidRxBytes(java.lang.String subscriberId,java.lang.Long startTime,java.lang.Long endTime,java.lang.Integer uid,java.lang.Integer connType) throws android.os.RemoteException,java.lang.SecurityException { long rxBytes = 0; android.app.usage.NetworkStats netStats = mNetStatsManager.queryDetailsForUid(connType, subscriberId, startTime, endTime, uid); android.app.usage.NetworkStats.Bucket bucket = new android.app.usage.NetworkStats.Bucket(); while ((netStats.hasNextBucket()) && (netStats.getNextBucket(bucket))) rxBytes += bucket.getRxBytes(); netStats.close(); return rxBytes; }
@com.googlecode.android_scripting.rpc.Rpc(description = "Get network stats for UID") public long connectivityQueryDetailsForUid(java.lang.String subscriberId,java.lang.Long startTime,java.lang.Long endTime,java.lang.Integer uid,java.lang.Integer connType) throws android.os.RemoteException,java.lang.SecurityException { android.app.usage.NetworkStats netStats = mNetStatsManager.queryDetailsForUid(connType, subscriberId, startTime, endTime, uid); long totalData = 0; android.app.usage.NetworkStats.Bucket bucket = new android.app.usage.NetworkStats.Bucket(); while ((netStats.hasNextBucket()) && (netStats.getNextBucket(bucket))) totalData += (bucket.getTxBytes()) + (bucket.getRxBytes()); netStats.close(); return totalData; }
@com.googlecode.android_scripting.rpc.Rpc(description = "Launch activity for result with intent") public android.content.Intent launchForResultWithIntent(@com.googlecode.android_scripting.rpc.RpcParameter(name = "intent") android.content.Intent intent, @com.googlecode.android_scripting.rpc.RpcParameter(name = "extras") @com.googlecode.android_scripting.rpc.RpcOptional org.json.JSONObject extras) throws org.json.JSONException { if (extras!= null) mAndroidFacade.putExtrasFromJsonObject(extras, intent); return mAndroidFacade.startActivityForResult(intent); }
private boolean verifyWithDomainNamePattern(java.lang.String hostname,java.lang.String pattern) { libcore.java x.net.ssl.DefaultHostnameVerifierTest.StubSSLSession session = new libcore.java x.net.ssl.DefaultHostnameVerifierTest.StubSSLSession(); session.peerCertificates = newjava.security.cert.Certificate[]{ new libcore.java x.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate((("cn=\"" + pattern) + "\"")) }; boolean resultWhenPatternInCn = verifier.verify(hostname, session); session.peerCertificates = newjava x.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate("ou=test").addSubjectAlternativeName(libcore.java x.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME, pattern); boolean resultWhenPatternInSubjectAltName = verifier.verify(hostname, session); assertFalse("Verify should ignore CN.", resultWhenPatternInCn); return resultWhenPatternInSubjectAltName; }
@java.lang.Override void test() { if ((status) == (READY)) { com.android.cts.verifier.notifications.MockListener.MockListener.snooze(mContext); status = RETEST; } else { com.android.cts.verifier.notifications.MockListener.MockListener.probeListenerStatus(mContext, new com.android.cts.verifier.notifications.MockListener.MockListener.StatusCatcher() { @java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if ((mNm.getEffectsSuppressor()) == null) { logFail(); status = PASS; } else { logFail(); status = RETEST; delay(); } } next(); } }); } delay(); }
@java.lang.Override void test() { com.android.cts.verifier.notifications.MockListener.MockListener.probeListenerStatus(mContext, new com.android.cts.verifier.notifications.MockListener.MockListener.StatusCatcher() { @java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if ((mNm.getEffectsSuppressor()) == null) { logFail(); status = PASS; } else { status = FAIL; } } next(); } }); delay(); }
@java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if ((mNm.getEffectsSuppressor()) == null) { status = PASS; } else { status = FAIL; } } next(); }
@java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if ((mNm.getEffectsSuppressor()) == null) { logFail(); status = PASS; } else { logFail(); status = RETEST; delay(); } } next(); }
protected boolean getLockedRecordsLoaded() { return ((mRecordsToLoad) == 0) && (mLockedRecordsReqReason) == (com.android.internal.telephony.uicc.IccRecords.LOCKED_RECORDS_REQ_REASON_PIN_LOCKED); }
private void onLockedAllRecordsLoaded() { setSimLanguageFromEF(); if ((mLockedRecordsReqReason) == (LOCKED_RECORDS_REQ_REASON_PIN_LOCKED)) { mLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } else { mNetworkLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } }
private void onLocked(int msg) { if (DBG) log("onLocked: fetch EF_LI, EF_PL and EF_ICCID in locked state"); mLockedRecordsReqReason = (msg == (com.android.internal.telephony.uicc.SIMRecords.EVENT_APP_LOCKED))? LOCKED_RECORDS_REQ_REASON_PIN_LOCKED : LOCKED_RECORDS_REQ_REASON_NETWORK_LOCKED; loadEfLiAndEfPl(); mFh.loadEFTransparent(com.android.internal.telephony.uicc.EF_ICCID, obtainMessage(com.android.internal.telephony.uicc.SIMRecords.EVENT_GET_ICCID_DONE)); (mRecordsToLoad)++; }
protected boolean getNetworkLockedRecordsLoaded() { return ((mRecordsToLoad) == 0) && ((mLockedRecordsReqReason)!= (com.android.internal.telephony.uicc.IccRecords.LOCKED_RECORDS_REQ_REASON_NETWORK_LOCKED)); }
private void onLocked(int msg) { if (DBG) log("onLocked: fetch EF_ICCID in locked state"); mLockedRecordsReqReason = (msg == (com.android.internal.telephony.uicc.RuimRecords.EVENT_APP_LOCKED))? LOCKED_RECORDS_REQ_REASON_PIN_LOCKED : LOCKED_RECORDS_REQ_REASON_NETWORK_LOCKED; mFh.loadEFTransparent(com.android.internal.telephony.uicc.EF_ICCID, obtainMessage(com.android.internal.telephony.uicc.RuimRecords.EVENT_GET_ICCID_DONE)); (mRecordsToLoad)++; }
private void onLockedAllRecordsLoaded() { if (com.android.internal.telephony.uicc.IsimUiccRecords.DBG) log("record locked; record load complete"); if ((mLockedRecordsReqReason) == (LOCKED_RECORDS_REQ_REASON_PIN_LOCKED)) { mLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } else { mNetworkLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } }
private void onLockedAllRecordsLoaded() { if ((mLockedRecordsReqReason) == (LOCKED_RECORDS_REQ_REASON_PIN_LOCKED)) { mLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } else { mNetworkLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } }
@com.android.internal.annotations.VisibleForTesting public void setEmergencyCall(boolean flag) { mIsEmergencyCall = flag; }
@java.lang.Override public void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, android.os.Message result) { com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance().setupDataCall(radioTechnology, dataProfile, isRoaming, allowRoaming, result); if ((mDcResponse) == null) { try { mDcResponse = new android.telephony.data.DataCallResponse(0, (-1), 1, 2, "IP", "rmnet_data7",java.util.Arrays.asList(new android.net.LinkAddress(android.net.NetworkUtils.numericToInetAddress("12.34.56.78"), 0)),java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress("98.76.54.32")),java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress("11.22.33.44")), null, 1440); } catch (java.lang.Exception e) { } } if (mDcSuccess) { resultSuccess(result, mDcResponse); } else { resultFail(result, mDcResponse, newjava.lang.RuntimeException("Setup data call failed!")); } }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetLinkPropertiesInvalidAddress() throwsjava.lang.Exception { android.telephony.data.DataCallResponse response = new android.telephony.data.DataCallResponse(0, (-1), 1, 2, "IP", com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_IFNAME,java.util.Arrays.asList(new android.net.LinkAddress(android.net.NetworkUtils.numericToInetAddress("224.224.224.224"), 0)),java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_DNS)),java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_GATEWAY)),java.util.Arrays.asList(com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_PCSCF_ADDRESS), 1440); android.net.LinkProperties linkProperties = new android.net.LinkProperties(); assertEquals(SetupResult.ERR_UnacceptableParameter, setLinkProperties(response, linkProperties)); }
public void notifyCellularDataStateChanged(com.android.internal.telephony.Phone sender, boolean state);
public void notifyCellularDataChangedForPhoneId(int phoneId, int subId, boolean cdi) { if (!(checkNotifyPermission("notifyCellularDataChanged()"))) { return; } if (com.android.server.TelephonyRegistry.VDBG) { com.android.server.TelephonyRegistry.log(((("notifyCellularDataChangedForSubscriberPhoneID: subId=" + phoneId) + " cdi=") + cdi)); } synchronized(mRecords) { if (validatePhoneId(phoneId)) { mMessageWaiting[phoneId] = cdi; for (com.android.server.TelephonyRegistry.Record r : mRecords) { if ((r.matchPhoneStateListenerEvent(PhoneStateListener.LISTEN_CELLULAR_DATA_INDICATOR)) && (idMatch(r.subId, subId, phoneId))) { try { r.callback.onCellularDataIndicatorChanged(cdi); } catch (android.os.RemoteException ex) { mRemoveList.add(r.binder); } } } } handleRemoveListLocked(); } }
@java.lang.Override public void notifyCellularDataStateChanged(com.android.internal.telephony.Phone sender, boolean state) { try { mRegistry.notifyCellularDataChangedForPhoneId(sender.getPhoneId(), sender.getSubId(), state); } catch (android.os.RemoteException ex) { } }
private void onSetUserDataEnabled(boolean enabled) { synchronized(mDataEnabledSettings) { if ((mDataEnabledSettings.isUserDataEnabled())!= enabled) { mDataEnabledSettings.setUserDataEnabled(enabled); if ((android.telephony.TelephonyManager.getDefault().getSimCount()) == 1) { Settings.Global.putInt(mResolver, Settings.Global.MOBILE_DATA, (enabled? 1 : 0)); } else { int phoneSubId = mPhone.getSubId(); Settings.Global.putInt(mResolver, ((Settings.Global.MOBILE_DATA) + phoneSubId), (enabled? 1 : 0)); } if ((!(getDataRoamingEnabled())) && (mPhone.getServiceState().getDataRoaming())) { if (enabled) { notifyOffApnsOfAvailability(Phone.REASON_ROAMING_ON); } else { notifyOffApnsOfAvailability(Phone.REASON_DATA_DISABLED); } } if (enabled) { reevaluateDataConnections(); onTrySetupData(Phone.REASON_DATA_ENABLED); } else { onCleanUpAllConnections(Phone.REASON_DATA_SPECIFIC_DISABLED); } } }
public void notifyCellularDataStateChanged(boolean state) { mNotifier.notifyCellularDataStateChanged(this, state); }
public void onCellularDataIndicatorChanged(boolean enabled) { send(android.telephony.PhoneStateListener.LISTEN_CELLULAR_DATA_INDICATOR, 0, 0, enabled); }
public void onCellularDataIndicatorChanged(boolean enabled) { }
@java.lang.Override public void removeNetwork(int netId) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.CONNECTIVITY_INTERNAL, com.android.server.NetworkManagementService.TAG); try { mNetdService.removeNetwork(netId); } catch (android.os.ServiceSpecificException e) { android.util.Log.w(com.android.server.NetworkManagementService.TAG, (("removeNetwork(" + netId) + ", e ") + e)); throw e; } catch (android.os.RemoteException e) { android.util.Log.w(com.android.server.NetworkManagementService.TAG, (("removeNetwork(" + netId) + ", e ") + e)); throw e.asRuntimeException(); } }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { finaljava.lang.String action = intent.getAction(); finaljava.lang.String iccState = intent.getStringExtra(IccCardConstants.INTENT_KEY_ICC_STATE); if (TelephonyIntents.ACTION_SIM_STATE_CHANGED.equals(action)) { if (IccCardConstants.INTENT_VALUE_ICC_LOADED.equals(iccState)) { sendEmptyMessage(com.android.internal.telephony.CarrierActionAgent.CARRIER_ACTION_RESET);java.lang.String mobileData = Settings.Global.MOBILE_DATA; if ((android.telephony.TelephonyManager.getDefault().getSimCount())!= 1) { mobileData = mobileData + (mPhone.getSubId()); } mSettingsObserver.observe(Settings.Global.getUriFor(mobileData), com.android.internal.telephony.CarrierActionAgent.EVENT_MOBILE_DATA_SETTINGS_CHANGED); mSettingsObserver.observe(Settings.Global.getUriFor(Settings.Global.AIRPLANE_MODE_ON), com.android.internal.telephony.CarrierActionAgent.EVENT_APM_SETTINGS_CHANGED); mSettingsObserver.observe(Telephony.Carriers.CONTENT_URI, com.android.internal.telephony.CarrierActionAgent.EVENT_APN_SETTINGS_CHANGED); } else if (IccCardConstants.INTENT_VALUE_ICC_ABSENT.equals(iccState)) { sendEmptyMessage(com.android.internal.telephony.CarrierActionAgent.CARRIER_ACTION_RESET); mSettingsObserver.unobserve(); } } }
@org.junit.Test public void testMacAddrTypes() { android.net.MacAddressTest.AddrTypeTestCase[] testcases = new android.net.MacAddressTest.AddrTypeTestCase[]{ android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 0), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 1, 2, 3, 4, 5), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 1, 2, 3, 4, 5, 6, 7), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNICAST, 160, 176, 192, 208, 224, 240), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_BROADCAST, 255, 255, 255, 255), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 1, 2, 3, 4, 5, 6), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 11, 22, 33, 44, 55, 66), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 33, 33, 170, 187, 204, 221) }; for (android.net.MacAddressTest.AddrTypeTestCase t : testcases) { int got = android.net.MacAddress.macAddressType(t.addr);java.lang.String msg =java.lang.String.format("Expected type of %s to be %s, but got %s",java.util.Arrays.toString(t.addr), t.expectedType, got); assertEquals(msg, t.expectedType, got); if (got!= (MacAddress.TYPE_UNKNOWN)) { assertEquals(got, android.net.MacAddress.fromBytes(t.addr).getAddressType()); } } }
@android.net.MacAddress.MacAddressType public int getAddressType() { if (equals(android.net.MacAddress.ALL_ZEROS_ADDRESS)) { return android.net.MacAddress.TYPE_BROADCAST; } if (isMulticastAddress()) { return android.net.MacAddress.TYPE_MULTICAST; } return android.net.MacAddress.TYPE_UNICAST; }
void expectAvailableCallbacks(com.android.server.ConnectivityServiceTest.MockNetworkAgent agent, boolean expectSuspended, int timeoutMs) { expectAvailableCallbacks(agent, expectSuspended, false, timeoutMs); }
void expectAvailableCallbacks(com.android.server.ConnectivityServiceTest.MockNetworkAgent agent, boolean expectSuspended, boolean requireUnvalidated, int timeoutMs) { expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.AVAILABLE, agent, timeoutMs); if (expectSuspended) { expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.SUSPENDED, agent, timeoutMs); } if (requireUnvalidated) { expectCapabilitiesWithout(com.android.server.NET_CAPABILITY_VALIDATED, agent); } else { expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.NETWORK_CAPABILITIES, agent, timeoutMs); } expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.LINK_PROPERTIES, agent, timeoutMs); }
private boolean areAllRecordsLoaded() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app!= null) { com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if ((ir == null) || (!(ir.isLoaded()))) { return false; } } } return (mUiccApplications[0])!= null; }
private void registerUiccCardEvents() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app!= null) { app.registerForReady(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_APP_READY, null); app.registerForNetworkLocked(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_NETWORK_LOCKED, null); com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if (ir!= null) { ir.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORDS_LOADED, null); ir.registerForLockedRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_LOCKED, null); ir.registerForRecordsEvents(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_RECORD_EVENTS, null); } } } }
private boolean areAllApplicationsReady() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if ((app!= null) && (!(app.isReady()))) { return false; } } return (mUiccApplications[0])!= null; }
private void unregisterUiccCardEvents() { if ((mUiccCard)!= null) mUiccCard.unregisterForCarrierPrivilegeRulesLoaded(this); for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app!= null) { app.unregisterForReady(this); app.unregisterForNetworkLocked(this); com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if (ir!= null) { ir.unregisterForRecordsLoaded(this); ir.unregisterForLockedRecordsLoaded(this); ir.unregisterForRecordsEvents(this); } } } }
@java.lang.Override public void writeToParcel(android.os.Parcel out, int flags) { out.writeString(profileFile); if ((profileFd)!= null) { profileFd.writeToParcel(out, flags); } else { out.writeInt(0); } out.writeInt(samplingInterval); out.writeInt((autoStopProfiler? 1 : 0)); out.writeInt((streamingOutput? 1 : 0)); out.writeString(agent); out.writeBoolean(bindTimeAgentAttach); }
@java.lang.Override void onStart() { if (com.android.bips.discovery.MdnsDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MdnsDiscovery.TAG, ("onStart() " + (mServiceName))); com.android.bips.discovery.MdnsDiscovery.NsdServiceListener serviceListener = new com.android.bips.discovery.MdnsDiscovery.NsdServiceListener() { @java.lang.Override public void onStartDiscoveryFailed(java.lang.String s, int i) { } }; android.net.nsd.NsdManager nsdManager = mNsdResolveQueue.getNsdManager(); nsdManager.discoverServices(mServiceName, NsdManager.PROTOCOL_DNS_SD, serviceListener); mToStop.add(new android.util.concurrent.Callable<android.net.nsd.NsdManager.StopService>() { @java.lang.Override public android.net.nsd.NsdManager.StopService(java.lang.String s) { } }); }
public com.android.bips.util.Stoppable start(com.android.bips.discovery.Discovery.Listener listener) { mListeners.add(listener); if (!(mListeners.isEmpty())) { mHandler.post(() -> { if (!(mListeners.contains(listener))) return; new com.android.bips.discovery.ArrayList<>(mPrinters.values()).forEach(listener::onPrinterFound); }); } start(); return () -> { mListeners.remove(listener); if (mListeners.isEmpty()) { stop(); } };
public com.android.bips.util.Stoppable delay(int delay,java.lang.Runnable toRun) { mMainHandler.postDelayed(toRun, delay); return () -> mMainHandler.removeCallbacks(toRun); }
@java.lang.Override public void onConnectionComplete(com.android.bips.discovery.DiscoveredPrinter printer) { if (printer!= null) { mPrintService.getMainHandler().post(() -> { mValidating.stop(); mPrintService.getP2pDiscovery().addValidPrinter(printer); mFragment.getActivity().finish(); }); dismiss(); } else { fail(); } }
@java.lang.Override public void onResolveFailed(final android.net.nsd.NsdServiceInfo info, final int errorCode) { mToStop.remove(this); mResolve = null; }
java.print.PrinterInfo createPrinterInfo(boolean knownGood) { if ((mCapabilities) == null) { if (com.android.bips.p2p.P2pUtils.isP2p(mDiscoveredPrinter)) { android.print.PrinterInfo.Builder builder = new android.print.PrinterInfo.Builder(mPrinterId, mDiscoveredPrinter.name, android.print.PrinterInfo.STATUS_IDLE).setIconResourceId(R.drawable.ic_printer).setDescription(mPrintService.getDescription(mDiscoveredPrinter)); return builder.build(); } else if (!knownGood) { return null; } } else if (!(mCapabilities.isSupported)) { return null; } com.android.bips.discovery.DiscoveredPrinter printer = mPrintService.getDiscovery().getPrinter(mDiscoveredPrinter.getUri()); if (printer == null) return null; boolean idle = (mFound) && ((mCapabilities)!= null); android.print.PrinterInfo.Builder builder = new android.print.PrinterInfo.Builder(mPrinterId, printer.name, (idle? android.print.PrinterInfo.STATUS_IDLE : android.print.PrinterInfo.STATUS_UNAVAILABLE)).setIconResourceId(R.drawable.ic_printer).setDescription(mPrintService.getDescription(printer)); if ((mCapabilities)!= null) { android.print.PrinterCapabilitiesInfo.Builder capabilitiesBuilder = new android.print.PrinterCapabilitiesInfo.Builder(mPrinterId); mCapabilities.buildCapabilities(mPrintService, capabilitiesBuilder); builder.setCapabilities(capabilitiesBuilder.build()); } return builder.build(); }
private com.android.bips.discovery.DiscoveredPrinter first(android.net.Uri printerUri) { for (com.android.bips.discovery.Discovery discovery : getChildren()) { com.android.bips.discovery.DiscoveredPrinter found = discovery.getPrinter(printerUri); if (found!= null) return found; } return null; }
public com.android.bips.util.Stoppable receiveBroadcasts(android.content.BroadcastReceiver receiver,java.lang.String... actions) { return new com.android.bips.util.StoppableReceiver(this, receiver, actions); }
private void stopAndClearAll() { for (com.android.bips.util.Stoppable started : mStarted) { started.stop(); } mStarted.clear(); allPrintersLost(); }
private void finish(boolean success,java.lang.String error) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, ((("Finish: success=" + success) + " error=") + error)); if ((mDiscovery)!= null) mDiscovery.stop(); if ((mDiscoveryTimeout)!= null) mDiscoveryTimeout.stop(); if ((mConnection)!= null) mConnection.stop(); mPrintService.unlockWifi(); mBackend.closeDocument(); if (success) { mPrintJob.start(); mPrintJob.complete(); } else if ((mState) == (com.android.bips.LocalPrintJob.STATE_CANCEL)) { mPrintJob.cancel(); } else { mPrintJob.fail(error); } mState = com.android.bips.LocalPrintJob.STATE_DONE; mCompleteConsumer.accept(this); }
void start(java.util.function.Consumer<com.android.bips.LocalPrintJob> callback) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, ("start " + (mPrintJob))); if ((mState)!= (com.android.bips.LocalPrintJob.STATE_INIT)) { android.util.Log.w(com.android.bips.LocalPrintJob.TAG, ("failed to start state " + (mState))); return; } mPrintJob.start(); mPrintService.lockWifi(); mState = com.android.bips.LocalPrintJob.STATE_DISCOVERY; mCompleteConsumer = callback; mDiscovery = mPrintService.getDiscovery().start(this); mDiscoveryTimeout = mPrintService.delay(com.android.bips.LocalPrintJob.DISCOVERY_TIMEOUT, () -> { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, "discover timeout"); if ((mState) == (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) { finish(false, mPrintService.getString(R.string.printer_offline)); } }); }
public void removeSavedPrinter(android.net.Uri printerPath) { getChildren().stream().filter(( child) -> child!= (this)).forEach(( child) -> child.removeSavedPrinter(printerPath)); }
@java.lang.Overridejava.util.Collection<com.android.bips.discovery.Discovery> getChildren() { return mDiscoveries.stream().flatMap(( child) -> child.getChildren().stream()).collect(java.util.stream.Collectors.toList()); }
publicjava.lang.String getDescription(DiscoveredPrinter printer) { if ((com.android.bips.p2p.P2pUtils.isP2p(printer)) || (com.android.bips.p2p.P2pUtils.isOnConnectedInterface(this, printer))) { return getString(R.string.wifi_direct); }java.lang.String host = printer.path.getHost().replaceAll(":[0-9]+", ""); if (!(android.text.TextUtils.isEmpty(printer.location))) { return getString(R.string.printer_description, host, printer.location); } else { return host; } }
@java.lang.Override void onStop() { if (com.android.bips.discovery.MdnsDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MdnsDiscovery.TAG, ("stop " + (mServiceName))); mToStop.forEach( Stoppable::stop); mToStop.clear(); }
@java.lang.Override void onStart() { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, "onStart"); mCapabilitiesCache = getPrintService().getCapabilitiesCache(); mWifiMonitor = new com.android.bips.util.WifiMonitor(getPrintService(), ( isConnected) -> { if (isConnected) { for (com.android.bips.discovery.DiscoveredPrinter printer : getSavedPrinters()) { mCapabilitiesCache.request(printer, false, ( capabilities) -> { printerFound(printer); } } else { allPrintersLost(); } }); }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) {java.lang.String action = intent.getAction(); if (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) { int state = intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE, (-1));java.lang.Boolean enableState = state == (android.net.wifi.p2p.WifiP2pManager.WIFI_P2P_STATE_ENABLED); if (com.android.bips.p2p.P2pDiscoveryProcedure.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pDiscoveryProcedure.TAG, ("WIFI_P2P_STATE_CHANGED_ACTION: enabled=" + enableState)); if (enableState) { mP2pManager.stopPeerDiscovery(mChannel, null); mP2pManager.discoverPeers(mChannel, null); } } else if (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) { android.net.wifi.p2p.WifiP2pDeviceList list = intent.getParcelableExtra(WifiP2pManager.EXTRA_P2P_DEVICE_LIST);java.util.Collection<android.net.wifi.p2p.WifiP2pDevice> newPeers = list.getDeviceList(); updatePeers(newPeers); if (newPeers.isEmpty()) { mP2pManager.stopPeerDiscovery(mChannel, null); mP2pManager.discoverPeers(mChannel, null); } } }
@java.lang.Override void onStop() { if (com.android.bips.discovery.P2pDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.P2pDiscovery.TAG, "onStop()"); if ((mPeerDiscovery)!= null) { mPeerDiscovery.stop(); mPeerDiscovery = null; allPrintersLost(); } }
public void addValidPrinter(com.android.bips.discovery.DiscoveredPrinter printer) { if (addSavedPrinter(printer)) { printerFound(printer); if (isStarted()) startPeerDiscovery(); } }
private staticjava.net.NetworkInterface toNetworkInterface(java.lang.String name) { if (name == null) return null; try { returnjava.net.NetworkInterface.getByName(name); } catch (java.net.SocketException e) { return null; } }
private staticjava.net.Inet4Address toInet4Address(android.net.Uri path) { if (!(com.android.bips.p2p.P2pUtils.IPV4_PATTERN.matcher(path.getHost()).find())) return null; try { return ((java.net.Inet4Address) (java.net.InetAddress.getByName(path.getHost()))); } catch (java.net.UnknownHostException ignored) { } return null; }
public static booleanInterfaceInterface(java.net.NetworkInterface iface,java.net.Inet4Address address) { long addressLong = com.android.bips.p2p.P2pUtils.toLong(address); for (java.net.InterfaceAddress ifaceAddress : iface.getInterfaceAddresses()) { if (!((ifaceAddress.getAddress()) instanceofjava.net.Inet4Address)) continue;java.net.Inet4Address networkAddress = ((java.net.Inet4Address) (ifaceAddress.getAddress()));java.util.BitSet bitSet = newjava.util.BitSet(32); bitSet.set((32 - (ifaceAddress.getNetworkPrefixLength())), 32); long netMask = bitSet.toLongArray()[0]; if (((com.android.bips.p2p.P2pUtils.toLong(networkAddress)) & netMask) == (addressLong & netMask)) { return true; } } return false; }
@java.lang.Override public void stop() { if (com.android.bips.p2p.P2pDiscoveryProcedure.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pDiscoveryProcedure.TAG, "stop()"); mBroadcasts.stop(); mP2pManager.stopPeerDiscovery(mChannel, null); }
publicjava.util.Collection<com.android.bips.discovery.DiscoveredPrinter> getSavedPrinters() { return getChildren().stream().filter(( child) -> child!= (this)).flatMap(( child) -> child.getSavedPrinters().stream()).collect(java.util.stream.Collectors.toList()); }
private WifiP2pDevice getDevice(java.util.Collection<WifiP2pDevice> peers,java.lang.String address) { for (WifiP2pDevice found : peers) { if (found.deviceAddress.equals(address)) return found; } return null; }
private void updatePeers(java.util.Collection<android.net.wifi.p2p.WifiP2pDevice> newPeers) {java.util.List<android.net.wifi.p2p.WifiP2pDevice> oldPeers = newjava.util.ArrayList(mPeers); mPeers.clear(); for (android.net.wifi.p2p.WifiP2pDevice peer : newPeers) { if (com.android.bips.p2p.P2pDiscoveryProcedure.PRINTER_PATTERN.matcher(peer.primaryDeviceType).find()) { mPeers.add(peer); } }java.util.Set<java.lang.String> foundAddresses = newjava.util.HashSet<>(); for (android.net.wifi.p2p.WifiP2pDevice peer : mPeers) { foundAddresses.add(peer.deviceAddress); android.net.wifi.p2p.WifiP2pDevice old = getDevice(oldPeers, peer.deviceAddress); if ((old == null) || (!(old.equals(peer)))) { mListeners.forEach(( listener) -> listener.onPeerFound(peer)); } } for (android.net.wifi.p2p.WifiP2pDevice oldPeer : oldPeers) { if (!(foundAddresses.contains(oldPeer.deviceAddress))) { mListeners.forEach(( listener) -> listener.onPeerLost(oldPeer)); } } }
@java.lang.Override public void onResume() { super.onResume(); if (com.android.bips.ui.FindP2pPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.FindP2pPrintersFragment.TAG, "onResume"); getActivity().setTitle(R.string.wifi_direct_printers); getContext().bindService(new android.content.Intent(getContext(), com.android.bips.BuiltInPrintService.class), this, Context.BIND_AUTO_CREATE); }
void handleCapabilities(android.net.Uri printerPath, com.android.bips.jni.LocalPrinterCapabilities capabilities) { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, (("handleCapabilities " + printerPath) + " cap=") + capabilities)); if (capabilities == null) { if (mRequests.isEmpty()) { mFinalCallback.onNotFound(); } return; } mRequests.forEach(mCapabilitiesCache::cancel); mRequests.clear(); android.net.Uri uuid = (android.text.TextUtils.isEmpty(capabilities.uuid))? null : android.net.Uri.parse(capabilities.uuid);java.lang.String name = (android.text.TextUtils.isEmpty(capabilities.name))? printerPath.getHost() : capabilities.name; com.android.bips.discovery.DiscoveredPrinter resolvedPrinter = new com.android.bips.discovery.DiscoveredPrinter(uuid, name, printerPath, capabilities.location); if (capabilities.isSupported) { if (addSavedPrinter(resolvedPrinter)) { printerFound(resolvedPrinter); } } mFinalCallback.onFound(resolvedPrinter, capabilities.isSupported); }
@java.lang.Override public void onPeerFound(android.net.wifi.p2p.WifiP2pDevice peer) { if (com.android.bips.ui.FindP2pPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.FindP2pPrintersFragment.TAG, ("onPeerFound: " + (com.android.bips.p2p.P2pMonitor.toString(peer)))); if ((mPrintService) == null) return; com.android.bips.ui.mPrintService printerService = com.android.bips.discovery.P2pDiscovery.toPrinter(peer); for (DiscoveredPrinter prior : mPrintService.getP2pDiscovery().getSavedPrinters()) { if (prior.path.equals(printer.path)) return; } com.android.bips.ui.PrinterPreference pref = getPrinterPreference(printerService.getUri()); if (pref!= null) { pref.updatePrinter(printer); } else { pref = new com.android.bips.ui.PrinterPreference(getContext(), mPrintService, printerService, true); pref.setOnPreferenceClickListener(( preference) -> { if (com.android.bips.ui.DEBUG) android.util.Log.d(com.android.bips.ui.TAG, ("add " + (com.android.bips.discovery.P2pDiscovery.toPrinter(peer)))); new <com.android.bips.ui.mPrintService>com.android.bips.ui.AddP2pPrinterDialog(this, peer).show(); return true; }); mAvailableCategory.addPreference(pref); } }
@java.lang.Override public void onServiceConnected(android.content.ComponentName componentName, android.os.IBinder iBinder) { if (com.android.bips.ui.FindP2pPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.FindP2pPrintersFragment.TAG, "onServiceConnected"); mPrintService = com.android.bips.BuiltInPrintService.getInstance(); if ((mPrintService) == null) return; if ((getContext().checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION))!= (android.content.pm.PackageManager.PERMISSION_GRANTED)) { getActivity().requestPermissions(newjava.lang.String[]{ Manifest.permission.ACCESS_COARSE_LOCATION }, com.android.bips.ui.FindP2pPrintersFragment.REQUEST_PERMISSION); } else { startP2pDiscovery(); } }
private void startP2pDiscovery() { if (((mPrintService)!= null) && ((mPeerDiscovery) == null)) { mPeerDiscovery = mPrintService.getP2pMonitor().discover(new com.android.bips.ui.FindP2pPrintersFragment.P2pListener()); } }
@java.lang.Override public void onPeerLost(android.net.wifi.p2p.WifiP2pDevice peer) { if (com.android.bips.ui.FindP2pPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.FindP2pPrintersFragment.TAG, ("onPeerLost: " + (com.android.bips.p2p.P2pMonitor.toString(peer)))); if ((mPrintService) == null) return; com.android.bips.discovery.DiscoveredPrinter printer = com.android.bips.discovery.P2pDiscovery.toPrinter(peer); com.android.bips.ui.PrinterPreference pref = getPrintPreference(printer.path); if (pref!= null) { mAvailableCategory.removePreference(pref); } }
@java.lang.Override public void onPause() { super.onPause(); if (com.android.bips.ui.FindP2pPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.FindP2pPrintersFragment.TAG, "onPause"); if ((mPeerDiscovery)!= null) { mPeerDiscovery.stop(); mPeerDiscovery = null; } getContext().unbindService(this); mPrintService = null; }
public synchronized void unlock() { if (!(mLocked)) throw newjava.lang.IllegalArgumentException("not locked"); mLocked = false; notifyAll(); }
voidAllPrintersLost() {java.util.ArrayList<java.lang.String> printersLost = newjava.util.ArrayList<java.lang.String>(mPrinters.values()); printersLost.clear(); mPrinters.values().forEach(this::printerLost); }
public com.android.bips.util.Stoppable resolve(android.net.nsd.NsdServiceInfo serviceInfo, android.net.nsd.NsdManager.ResolveListener listener) { if (com.android.bips.discovery.NsdResolveQueue.DEBUG) { android.util.Log.d(com.android.bips.discovery.NsdResolveQueue.TAG, (("start resolve of " + (serviceInfo.getServiceName())) + " to queue size=") + (mResolveRequests.size()))); } com.android.bips.discovery.NsdResolveQueue.NsdResolveRequest request = new com.android.bips.discovery.NsdResolveQueue.NsdResolveRequest(mNsdManager, serviceInfo, listener); mResolveRequests.addLast(request); if ((mResolveRequests.size()) == 1) { resolveNextRequest(); } return () -> { if ((mResolveRequests.contains(request)) && ((mResolveRequests.get(0))!= request)) { mResolveRequests.remove(request); } }; }
@java.lang.Override public void stop() { if (com.android.bips.util.WifiMonitor.DEBUG) android.util.Log.d(com.android.bips.util.WifiMonitor.TAG, "stop"); if ((mBroadcasts)!= null) mBroadcasts.stop(); mListener = null; }
void addListener(com.android.bips.p2p.P2pPeerListener listener) { mListeners.add(listener); if (!(mPeers.isEmpty())) { new android.os.Handler(android.os.Looper.getMainLooper()).post(() -> { if (mListeners.contains(listener)) { mPeers.forEach(listener::onPeerFound); } }); } }
@java.lang.Override public void onServiceFound(final android.net.nsd.NsdServiceInfo info) { if (com.android.bips.discovery.MdnsDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MdnsDiscovery.TAG, ((("onServiceFound: " + (mServiceName)) + " name=") + (info.getServiceName()))); getHandler().post(() -> com.android.bips.discovery.mToStop.add(new com.android.bips.discovery.Resolver(info))); }
@java.lang.Override void onStop() { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, "onStop"); mWifiMonitor.stop(); allPrintersLost(); }
@java.lang.Override public void onServiceResolved(final android.net.nsd.NsdServiceInfo info) { mToStop.remove(this); mResolve = null; if (!(isStarted())) return; com.android.bips.discovery.DiscoveredPrinter printer = com.android.bips.discovery.MdnsDiscovery.toNetworkPrinter(info); if (com.android.bips.discovery.MdnsDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MdnsDiscovery.TAG, (("Service " + (info.getServiceName())) + " resolved to ") + printer)); if (printer == null) return; printerFound(printer); }
@java.lang.Override void onStart() { if (com.android.bips.discovery.MultiDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MultiDiscovery.TAG, "onStart()"); for (com.android.bips.discovery.Discovery discovery : mDiscoveries) { discovery.start(mChildListener); } }
private void load() { if (!(mCacheFile.exists())) return; try (android.util.JsonReader reader = new android.util.JsonReader(newjava.io.FileReader(mCacheFile))) { reader.beginObject(); while (reader.hasNext()) { switch (reader.nextName()) { case com.android.bips.LocalDiscoverySessionInfo.NAME_KNOWN_GOOD : mKnownGood.addAll(loadPrinterIds(reader)); break; case com.android.bips.LocalDiscoverySessionInfo.NAME_PRIORITY : mPriority.addAll(loadPrinterIds(reader)); break; default : reader.skipValue(); break; } } reader.endObject(); } catch (java.io.IOException e) { android.util.Log.w(com.android.bips.LocalDiscoverySessionInfo.TAG, ("Failed to read info from " + (com.android.bips.LocalDiscoverySessionInfo.CACHE_FILE)), e); } }
@java.lang.Override public void onStopPrinterDiscovery() { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, "onStopPrinterDiscovery()"); mDiscover.stop(); android.print.PrintManager printManager = mPrintService.getSystemService(android.print.PrintManager.class); printManager.removePrintServicesChangeListener(this); printManager.removePrintServiceRecommendationsChangeListener(this); if ((mExpirePrinters)!= null) { mExpirePrinters.stop(); mExpirePrinters = null; } }
@java.lang.Override public void onCapabilities(com.android.bips.jni.LocalPrinterCapabilities capabilities) { if ((mSession.isDestroyed()) || (!(mSession.isKnown(mPrinterId)))) return; if (capabilities == null) { if (com.android.bips.LocalPrinter.DEBUG) android.util.Log.d(com.android.bips.LocalPrinter.TAG, ("No capabilities so removing printer " + (this))); mSession.removePrinters(java.util.Collections.singletonList(mPrinterId)); } else { mCapabilities = capabilities; mSession.handlePrinter(this); } }
private void startTracking() { mTracking = true; if ((mTrackingConnection)!= null) return; if ((com.android.bips.p2p.P2pUtils.isP2p(mDiscoveredPrinter)) || (com.android.bips.p2p.P2pUtils.isOnConnectedInterface(mPrintService, mDiscoveredPrinter))) { com.android.bips.discovery.ConnectionListener listener = new com.android.bips.discovery.ConnectionListener() { @java.lang.Override public void onConnectionComplete(com.android.bips.discovery.DiscoveredPrinter printer) { if (com.android.bips.LocalPrinter.DEBUG) android.util.Log.d(com.android.bips.LocalPrinter.TAG, ("connection complete " + printer)); if (printer == null) { mTrackingConnection = null; } } @java.lang.Override public void onConnectionDelayed(boolean delayed) { if (com.android.bips.LocalPrinter.DEBUG) android.util.Log.d(com.android.bips.LocalPrinter.TAG, ("connection delayed=" + delayed)); if (delayed) { android.widget.Toast.makeText(mPrintService, R.string.connect_hint_text, Toast.LENGTH_LONG).show(); } } }; mTrackingConnection = com.android.bips.p2p.P2pPrinterConnection.connectPrinter(mPrintService, mDiscoveredPrinter, listener); } }
public void stopAll() { if ((mConnection)!= null) { mConnection.stop(); mConnection = null; mConnectedInterface = null; } if ((mPeerDiscovery)!= null) { mPeerDiscovery.stop(); mPeerDiscovery = null; } }
void handlePrinter(com.android.bips.LocalPrinter localPrinter) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, ("handlePrinter record " + localPrinter)); boolean knownGood = mInfo.isKnownGood(localPrinter.getPrinterId()); android.print.PrinterInfo info = localPrinter.createPrinterInfo(knownGood); if (info == null) return; if (((info.getStatus()) == (android.print.PrinterInfo.STATUS_IDLE)) && ((localPrinter.getUuid())!= null)) { mInfo.setKnownGood(localPrinter.getPrinterId()); } for (android.print.PrinterInfo knownInfo : getPrinters()) { if ((knownInfo.getId().equals(info.getId())) && ((info.getCapabilities()) == null)) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, ("handlePrinter: update with no caps " + localPrinter)); return; } } if (com.android.bips.LocalDiscoverySession.DEBUG) { android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, (((("handlePrinter: reporting " + localPrinter) + " caps=") + ((info.getCapabilities())!= null)) + " status=") + (info.getStatus())) + " summary=") + (info.getDescription())); } if (!(isHandledByOtherService(localPrinter))) { addPrinters(java.util.Collections.singletonList(info)); } }
private void monitorExpiredPrinters() { if (((mExpirePrinters) == null) && (!(mPrinters.isEmpty()))) { mExpirePrinters = mPrintService.delay(com.android.bips.LocalDiscoverySession.PRINTER_EXPIRATION_MILLIS, () -> { mExpirePrinters = null; boolean allFound = true; List<android.print.PrinterId> idsToRemove = new com.android.bips.ArrayList<>(); for (com.android.bips.LocalPrinter localPrinter : mPrinters.values()) { if (localPrinter.isExpired()) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, ("removePrinter(" + localPrinter)); idsToRemove.add(localPrinter.getPrinterId()); } if (!(localPrinter.isFound())) allFound = false; } idsToRemove.forEach(mPrinters::remove); removePrinters(idsToRemove); if (!allFound) { monitorExpiredPrinters(); } }); } }
@java.lang.Override public void onStartPrinterStateTracking(final android.print.PrinterId printerId) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, ("onPrinterStateTracking: " + printerId)); com.android.bips.LocalPrinter localPrinter = mPrinters.get(printerId); mTrackingIds.add(printerId); if ((localPrinter == null) || (!(localPrinter.isFound()))) return; localPrinter.track(); }
@java.lang.Override public void onPrinterLost(com.android.bips.discovery.DiscoveredPrinter lostPrinter) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, ("onPrinterLost: " + lostPrinter)); android.print.PrinterId printerId = lostPrinter.getId(mPrintService); com.android.bips.LocalPrinter localPrinter = mPrinters.get(printerId); if (localPrinter == null) return; localPrinter.notFound(); handlePrinter(localPrinter); monitorExpiredPrinters(); }
@java.lang.Override public void stop() { if ((mReceiver)!= null) { mReceiver.onStop(); mContext.unregisterReceiver(this); } }
@java.lang.Override public void onStartPrinterDiscovery(java.util.List<android.print.PrinterId> priorityList) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, ("onStartPrinterDiscovery: " + priorityList)); mPrinters.values().forEach(LocalPrinter::notFound); monitorExpiredPrinters(); mDiscover = mPrintService.getDiscovery().start(this); mPrintManager.addPrintServicesChangeListener(this, null); onPrintServicesChanged(); mPrintManager.addPrintServiceRecommendationsChangeListener(this, null); onPrintServiceRecommendationsChanged(); }
@java.lang.Override public void onConnectionDelayed(boolean delayed) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, ("onConnectionDelayed " + delayed)); if ((mState)!= (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) return; if (delayed) { mPrintJob.block(mPrintService.getString(R.string.connect_hint_text)); } else { mPrintJob.start(); } }
public void cancel(com.android.bips.ipp.CapabilitiesCache.OnLocalPrinterCapabilities onLocalPrinterCapabilities) {java.util.List<android.net.Uri> toDrop = newjava.util.ArrayList<>(); for (java.util.Map.Entry<android.net.Uri, com.android.bips.ipp.CapabilitiesCache.Request> entry : mRequests.entrySet()) { com.android.bips.ipp.CapabilitiesCache.Request request = entry.getValue(); request.mCallbacks.remove(onLocalPrinterCapabilities); if (request.mCallbacks.isEmpty()) { toDrop.add(entry.getKey()); request.stop(); } } toDrop.forEach(mRequests::remove); }
@java.lang.Override protected com.android.bips.jni.LocalPrinterCapabilities doInBackground(java.lang.Void... dummy) { long start =java.lang.System.currentTimeMillis(); com.android.bips.jni.LocalPrinterCapabilities printerCaps = new com.android.bips.jni.LocalPrinterCapabilities(); try { printerCaps.inetAddress =java.net.InetAddress.getByName(mUri.getHost()); } catch (java.net.UnknownHostException e) { return null; } boolean online = isDeviceOnline(mUri); if (com.android.bips.ipp.GetCapabilitiesTask.DEBUG) { android.util.Log.d(com.android.bips.ipp.GetCapabilitiesTask.TAG, (((((("Local uri=" + (mUri)) + " online=") + online) + " (") + ((java.lang.System.currentTimeMillis()) - start)) + "ms)")); } if ((!online) || (isCancelled())) return null; try { com.android.bips.ipp.GetCapabilitiesTask.sLock.lock(); } catch (java.lang.InterruptedException e) { return null; } int status = -1; start =java.lang.System.currentTimeMillis(); try { if (isCancelled()) return null; status = mBackend.nativeGetCapabilities(com.android.bips.ipp.Backend.getIp(mUri.getHost()), mUri.getPort(), mUri.getPath(), mUri.getScheme(), mTimeout, printerCaps); } finally { com.android.bips.ipp.GetCapabilitiesTask.sLock.unlock(); } if (com.android.bips.ipp.GetCapabilitiesTask.DEBUG) { android.util.Log.d(com.android.bips.ipp.GetCapabilitiesTask.TAG, (((((("Local uri=" + (mUri)) + " status=") + status) + " (") + ((java.lang.System.currentTimeMillis()) - start)) + "ms)")); } return status == (com.android.bips.jni.BackendConstants.STATUS_OK)? printerCaps : null; }
public void request(com.android.bips.discovery.DiscoveredPrinter printer, boolean highPriority, com.android.bips.ipp.CapabilitiesCache.OnLocalPrinterCapabilities onLocalPrinterCapabilities) { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, (("request printer=" + printer) + " high=") + highPriority)); com.android.bips.jni.LocalPrinterCapabilities capabilities = get(printer); if ((capabilities!= null) && ((capabilities.nativeData)!= null)) { onLocalPrinterCapabilities.onCapabilities(capabilities); return; } if (com.android.bips.p2p.P2pUtils.isOnConnectedInterface(mService, printer)) { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, ("request to P2P evict list: " + printer)); mToEvictP2p.add(printer.path); } else { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, ("request to WLAN evict list: " + printer)); mToEvict.add(printer.path); } com.android.bips.ipp.CapabilitiesCache.Request request = mRequests.computeIfAbsent(printer.path, ( uri) -> new com.android.bips.ipp.Request(printer, (highPriority? com.android.bips.ipp.CapabilitiesCache.SECOND_PASS_TIMEOUT : com.android.bips.ipp.CapabilitiesCache.FIRST_PASS_TIMEOUT))); if (highPriority) request.mHighPriority = true; request.mCallbacks.add(onLocalPrinterCapabilities); startNextRequest(); }
@java.lang.Override public void onConnectionComplete(com.android.bips.discovery.DiscoveredPrinter printer) { if ((mState)!= (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) return; if (printer == null) { finish(false, mPrintService.getString(R.string.failed_printer_connection)); } else if (printer.isBlocked()) { mPrintJob.start(); } }
void stop();
@java.lang.Override public void close() { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, "stop()"); mStopped = true; mWifiMonitor.stop(); mP2pMonitor.stop(); }
@java.lang.Override public void stop() { if ((mResolve)!= null) { mResolve.stop(); } }
@java.lang.Override void onStart() { if ((mStartDelay) == 0) { mDiscovery = mChild.start(mChildListener); } else { mDelayedStart = getPrintService().delay(mStartDelay, () -> { if (!(isStarted())) return; mDiscovery = mChild.start(mChildListener); }); } }
@java.lang.Override public void stop() { if ((mQuery)!= null) { mQuery.cancel(true); mQuery = null; } }
private void startNextRequest() { final com.android.bips.ipp.CapabilitiesCache.Request request = getNextRequest(); if (request == null) return; request.mQuery = mBackend.getCapabilities(request.mPrinter.path, request.mTimeout, request.mHighPriority, ( capabilities) -> { com.android.bips.discovery.DiscoveredPrinter printer = request.mPrinter; if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, (("startNextRequest for " + printer) + " cap=") + capabilities)); if (mStopped) return; mRequests.remove(printer.path); android.net.Uri capUuid = null; if (capabilities!= null) { if (!(android.text.TextUtils.isEmpty(capabilities.uuid))) { capUuid = android.net.Uri.parse(capabilities.uuid); } if ((printer.uuid!= null) && (!(printer.uuid.equals(capUuid)))) { android.util.Log.w(com.android.bips.ipp.CapabilitiesCache.TAG, (("device mismatch for " + printer) + " rejecting capabilities")); capabilities = null; } } if (capabilities == null) { if (request.mTimeout == (com.android.bips.ipp.CapabilitiesCache.FIRST_PASS_TIMEOUT)) { request.mTimeout = com.android.bips.ipp.CapabilitiesCache.SECOND_PASS_TIMEOUT; request.mQuery = null; mRequests.put(printer.path, request); startNextRequest(); return; } else { remove(printer.path); } } else { put(printer.path, capabilities); } com.android.bips.jni.LocalPrinterCapabilities result = capabilities; request.mCallbacks.forEach(( callback) -> callback.onCapabilities(result)); startNextRequest(); });
private void startPeerDiscovery() { if ((mPeerDiscovery)!= null) return; if (getSavedPrinters().isEmpty()) return; mPeerDiscovery = getPrintService().getP2pMonitor().discover(this); }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.net.NetworkInfo info = intent.getParcelableExtra(WifiP2pManager.EXTRA_NETWORK_INFO); if (!(info.isConnected())) { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, ("Evicting P2P " + (mToEvictP2p))); mToEvictP2p.forEach(this::remove); mToEvictP2p.clear(); } }
private void handleCapabilities(com.android.bips.jni.LocalPrinterCapabilities capabilities) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, ((("Capabilities for " + (mPath)) + " are ") + capabilities)); if ((mState)!= (com.android.bips.LocalPrintJob.STATE_CAPABILITIES)) return; if (capabilities == null) { finish(false, mPrintService.getString(R.string.printer_offline)); } else { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, ("Starting backend print of " + (mPrintJob))); if ((mDiscoveryTimeout)!= null) mDiscoveryTimeout.stop(); mState = com.android.bips.LocalPrintJob.STATE_DELIVERING; mPrintJob.start(); mBackend.print(mPath, mPrintJob, capabilities, this::handleJobStatus); } }
@java.lang.Override public void onPrinterFound(com.android.bips.discovery.DiscoveredPrinter discoveredPrinter) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, ("onPrinterFound " + discoveredPrinter)); if (isDestroyed()) { android.util.Log.w(com.android.bips.LocalDiscoverySession.TAG, "onPrinterFound ignoring"); return; } android.print.PrinterId printerId = discoveredPrinter.getId(mPrintService); com.android.bips.LocalPrinter localPrinter = mPrinters.computeIfAbsent(printerId, ( id) -> new com.android.bips.LocalPrinter(mPrintService, this, discoveredPrinter)); localPrinter.found(discoveredPrinter); if (mTrackingIds.contains(printerId)) localPrinter.track(); }
void stopTracking() { if ((mTrackingConnection)!= null) { mTrackingConnection.stop(); mTrackingConnection = null; } }
@java.lang.Override public void stop() { if (com.android.bips.p2p.P2pConnectionProcedure.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pConnectionProcedure.TAG, ("stop() for " + (mPeer.deviceAddress))); mListeners.clear(); mConnectionMonitor.stop(); if ((mDetectDelayed)!= null) mDetectDelayed.stop(); if ((mChannel)!= null) { mP2pManager.cancelConnect(mChannel, null); mP2pManager.removeGroup(mChannel, null); mChannel = null; } }
@android.annotation.SuppressLint("InflateParams") @java.lang.Override protected void onCreate(android.os.Bundle savedInstanceState) { setView(getLayoutInflater().inflate(R.layout.manual_printer_add, null)); setTitle(getContext().getString(R.string.connecting_to, mPeer.deviceName)); setButton(AlertDialog.BUTTON_NEGATIVE, getContext().getString(android.R.string.cancel), ((com.android.bips.ui.OnClickListener) (null))); super.onCreate(savedInstanceState); findViewById(R.id.labelHostname).setVisibility(View.GONE); findViewById(R.id.hostname).setVisibility(View.GONE); findViewById(R.id.progress).setVisibility(View.VISIBLE); setOnDismissListener(( d) -> mValidating.stop()); mValidating = com.android.bips.p2p.P2pPrinterConnection.connectPrinter(mPrintService, mPeer, this); }
public static com.android.bips.util.Stoppable connectPrinter(com.android.bips.BuiltInPrintService service, android.net.wifi.p2p.WifiP2pDevice peer, com.android.bips.discovery.ConnectionListener listener) { return new com.android.bips.p2p.P2pPrinterConnection(service, peer, listener); }
@java.lang.Override public void onPrinterFound(com.android.bips.discovery.DiscoveredPrinter printer) { if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, (("onPrinterFound(" + printer) + ")")); if ((mListener) == null) return;java.net.Inet4Address printerAddress; try { printerAddress = ((java.net.Inet4Address) (java.net.Inet4Address.getByName(printer.path.getHost()))); } catch (java.net.UnknownHostException e) { return; } if (((mInterface)!= null) && (com.android.bips.p2p.P2pUtils.isOnInterface(mInterface, printerAddress))) { mMdnsDiscovery.stop(); mMdnsDiscoveryTimeout.stop(); mService.getCapabilitiesCache().request(printer, true, ( capabilities) -> onCapabilities(printer, capabilities)); } }
public static com.android.bips.util.Stoppable connectPrinter(com.android.bips.BuiltInPrintService service, com.android.bips.discovery.DiscoveredPrinter discoveredPrinter, com.android.bips.discovery.ConnectionListener listener) { if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, (("connectPrinter(" + discoveredPrinter) + ")")); if (com.android.bips.p2p.P2pUtils.isOnConnectedInterface(service, discoveredPrinter)) { android.net.wifi.p2p.WifiP2pDevice peer = service.getP2pMonitor().getConnection().getPeer(); return new com.android.bips.p2p.P2pPrinterConnection(service, peer, listener); } return new com.android.bips.util.Stoppable() { finaljava.lang.String mAddress = discoveredPrinter.path.getHost().replaceAll("-", ":"); com.android.bips.util.Stoppable mConnectOp = null; com.android.bips.util.Stoppable mDiscoverOp = service.getP2pMonitor().discover(new com.android.bips.p2p.P2pPeerListener() { @java.lang.Override public void onPeerFound(android.net.wifi.p2p.WifiP2pDevice peer) { if (peer.deviceAddress.equals(mAddress)) { mDiscoverOp.stop(); mConnectOp = new com.android.bips.p2p.P2pPrinterConnection(service, peer, listener); } } @java.lang.Override public void onPeerLost(android.net.wifi.p2p.WifiP2pDevice peer) { } }); @java.lang.Override public void stop() { if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, ("stop connection to " + (mConnectOp!= null)))); mDiscoverOp.stop(); mConnectOp = null; } }; }
@java.lang.Override public void onConnectionOpen(java.lang.String networkInterface, android.net.wifi.p2p.WifiP2pInfo info) { if ((mListener) == null) return; try { mInterface =java.net.NetworkInterface.getByName(networkInterface); } catch (java.net.SocketException ignored) { } if ((mInterface) == null) { if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, ("Failed to get interface from " + networkInterface)); mListener.onConnectionComplete(null); stop(); return; } if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, ("Connected on network interface " + (mInterface))); mMdnsDiscoveryTimeout = mService.delay(com.android.bips.p2p.P2pPrinterConnection.TIMEOUT_DISCOVERY, () -> { mMdnsDiscovery.stop(); if ((mListener)!= null) mListener.onConnectionComplete(null); stop(); }); mMdnsDiscovery = mService.getMdnsDiscovery().start(this); }
@java.lang.Override public void onConnectionDelayed(boolean delayed) { if ((mListener) == null) return; mListener.onConnectionDelayed(delayed); }
@java.lang.Override public void stop() { if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, "stop()"); if ((mMdnsDiscovery)!= null) mMdnsDiscovery.stop(); if ((mMdnsDiscoveryTimeout)!= null) mMdnsDiscoveryTimeout.stop(); if ((mConnection)!= null) mConnection.stop(); mListener = null; }
@java.lang.Override public void onConnectionClosed() { if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, ("closed/failed connection to " + (com.android.bips.p2p.P2pMonitor.toString(mPeer)))); if ((mListener)!= null) { mListener.onConnectionComplete(null); } stop(); }
private void onCapabilities(com.android.bips.discovery.DiscoveredPrinter printer, com.android.bips.jni.LocalPrinterCapabilities capabilities) { if ((mListener) == null) return; if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, ((("Printer " + printer) + " caps=") + capabilities)); if (capabilities == null) { mListener.onConnectionComplete(null); stop(); } else { com.android.bips.discovery.DiscoveredPrinter p2pPrinter = new com.android.bips.discovery.DiscoveredPrinter(printer.uuid, printer.name, com.android.bips.discovery.P2pDiscovery.toPath(mPeer), printer.location); mListener.onConnectionComplete(p2pPrinter); } }
private void updateSavedPrinters() { int savedCount = mPrintService.getDiscovery().getSavedPrinters().size(); if (savedCount == 0) { if ((getPreferenceScreen().findPreference(mSavedPrintersCategory.getKey()))!= null) { getPreferenceScreen().removePreference(mSavedPrintersCategory); } } else { if ((getPreferenceScreen().findPreference(mSavedPrintersCategory.getKey())) == null) { getPreferenceScreen().addPreference(mSavedPrintersCategory); } mSavedPrintersCategory.removeAll(); mPrintService.getDiscovery().getSavedPrinters().forEach(( printer) -> { if (com.android.bips.ui.AddPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.AddPrintersFragment.TAG, ("Adding saved printer " + printer)); com.android.bips.ui.PrinterPreference pref = new com.android.bips.ui.PrinterPreference(getContext(), mPrintService, printer, false); pref.setOrder(com.android.bips.ui.AddPrintersFragment.ORDER_SAVED); pref.setOnPreferenceClickListener(( preference) -> { showRemovalDialog(printer); return true; }); mSavedPrintersCategory.addPreference(pref); }); } }
@java.lang.Override public void onResume() { super.onResume(); getActivity().setTitle(R.string.title_activity_add_printer); if (com.android.bips.ui.AddPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.AddPrintersFragment.TAG, "onResume"); getContext().bindService(new android.content.Intent(getContext(), com.android.bips.BuiltInPrintService.class), this, Context.BIND_AUTO_CREATE); }
private void showRemovalDialog(com.android.bips.discovery.DiscoveredPrinter printer) { new android.app.AlertDialog.Builder(getContext()).setTitle(printer.name).setMessage(mPrintService.getDescription(printer)).setPositiveButton(android.R.string.cancel, null).setNeutralButton(R.string.forget, ( dialog, which) -> { mPrintService.getDiscovery().removeSavedPrinter(printer.path); updateSavedPrinters(); }).show(); }
@java.lang.Override public void onPause() { super.onPause(); if (com.android.bips.ui.AddPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.AddPrintersFragment.TAG, "onPause"); getContext().unbindService(this); }
@java.lang.Override public void removeSavedPrinter(android.net.Uri printerPath) { mSavedPrinters.stream().filter(( printer) -> printer.path.equals(printerPath)).findFirst().ifPresent(printer -> { mSavedPrinters.remove(printer); save(); }); }
@java.lang.Override public void onPeerFound(android.net.wifi.p2p.WifiP2pDevice peer) { com.android.bips.discovery.DiscoveredPrinter printer = com.android.bips.discovery.P2pDiscovery.toPrinter(peer); if (com.android.bips.discovery.P2pDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.P2pDiscovery.TAG, ("onPeerFound " + printer)); getSavedPrinters().forEach(( saved) -> { if (saved.path.equals(printer.path)) { printerFound(saved); } }); }
@java.lang.Override public void onPrinterFound(com.android.bips.discovery.DiscoveredPrinter printer) { if ((mState)!= (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) return; if (!(printer.getId(mPrintService).equals(mPrintJob.getInfo().getPrinterId()))) return; if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, ((("onPrinterFound " + (printer.name)) + " state=") + (mState))); if (com.android.bips.p2p.P2pUtils.isP2p(printer)) { mConnection = com.android.bips.p2p.P2pPrinterConnection.connectPrinter(mPrintService, printer, this); return; } if ((com.android.bips.p2p.P2pUtils.isOnConnectedInterface(mPrintService, printer)) && ((mConnection) == null)) { mConnection = com.android.bips.p2p.P2pPrinterConnection.connectPrinter(mPrintService, printer, this); } if ((mDiscovery)!= null) mDiscovery.stop(); mState = com.android.bips.LocalPrintJob.STATE_CAPABILITIES; mPath = printer.path; mPrintService.getCapabilitiesCache().request(printer, true, this::handleCapabilities); }
privatejava.util.List<com.android.bips.discovery.DiscoveredPrinter> load() {java.util.List<com.android.bips.discovery.DiscoveredPrinter> printers = newjava.util.ArrayList<>(); if (!(mCacheFile.exists())) return printers; try (android.util.JsonReader reader = new android.util.JsonReader(newjava.io.BufferedReader(newjava.io.FileReader(mCacheFile)))) { reader.beginObject(); while (reader.hasNext()) {java.lang.String itemName = reader.nextName(); if (com.android.bips.discovery.SavedDiscovery.PRINTER_LIST_NAMES.contains(itemName)) { reader.beginArray(); while (reader.hasNext()) { printers.add(new com.android.bips.discovery.DiscoveredPrinter(reader)); } reader.endArray(); } } reader.endObject(); } catch (java.lang.IllegalStateException |java.io.IOException ignored) { android.util.Log.w(com.android.bips.discovery.SavedDiscovery.TAG, ("Error while loading from " + (mCacheFile)), ignored); } if (com.android.bips.discovery.SavedDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.SavedDiscovery.TAG, ((("Loaded size=" + (printers.size())) + " from ") + (mCacheFile))); return printers; }
@java.lang.Override void onStop() { if ((mDelayedStart)!= null) mDelayedStart.stop(); if ((mDiscovery)!= null) mDiscovery.stop(); mPending.clear(); }
public com.android.bips.util.Stoppable discover(com.android.bips.p2p.P2pPeerListener listener) { if (com.android.bips.p2p.P2pMonitor.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pMonitor.TAG, "discover()"); if ((mP2pManager) == null) { return com.android.bips.p2p.P2pMonitor.STOPPED; } if ((mPeerDiscovery) == null) { mPeerDiscovery = new com.android.bips.p2p.P2pDiscoveryProcedure(mService, mP2pManager, listener); } else { mPeerDiscovery.addListener(listener); } return () -> { if (com.android.bips.p2p.P2pMonitor.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pMonitor.TAG, "discover.stop()"); if ((mPeerDiscovery)!= null) { mPeerDiscovery.removeListener(listener); if (mPeerDiscovery.getListeners().isEmpty()) { mPeerDiscovery.stop(); mPeerDiscovery = null; } } }; }
private boolean isConnectedToPeer(android.net.wifi.p2p.WifiP2pGroup group) { WifiP2pDevice owner = group.getOwner(); if ((owner!= null) && (owner.deviceAddress.equals(mPeer.deviceAddress))) return true; for (WifiP2pDevice client : group.getClientList()) { if (client.deviceAddress.equals(mPeer.deviceAddress)) return true; } return false; }
private com.android.bips.discovery.DiscoveredPrinter find(android.net.Uri printerUri) { return mSavedPrinters.stream().filter(( printer) -> printer.getUri().equals(printerUri)).findFirst().orElse(null); }
boolean addSavedPrinter(com.android.bips.discovery.DiscoveredPrinter printer) { android.net.Uri printerUri = printer.getUri(); com.android.bips.discovery.DiscoveredPrinter old = find(printerUri); if (old!= null) { if (printer.equals(old)) return false; mSavedPrinters.remove(old); } mSavedPrinters.add(0, printer); save(); return true; }
private void applyTransportModeTransform(android.os.ParcelFileDescriptor pfd, int direction, android.net.IpSecTransform transform) { try { mService.applyTransportModeTransform(pfd, direction, transform.getResourceId()); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
private void checkIpSecConfig(android.net.IpSecConfig config) { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); switch (config.getEncapType()) { case android.net.IpSecTransform.ENCAP_NONE : break; case android.net.IpSecTransform.ENCAP_ESPINUDP : case android.net.IpSecTransform.ENCAP_ESPINUDP_NON_IKE : userRecord.mEncapSocketRecords.getResourceOrThrow(config.getEncapSocketResourceId()); int port = config.getEncapRemotePort(); if ((port <= 0) || (port > 65535)) { throw newjava.lang.IllegalArgumentException(("Invalid remote UDP port: " + port)); } break; default : throw newjava.lang.IllegalArgumentException(("Invalid Encap Type: " + (config.getEncapType()))); } com.android.server.IpSecService.EncryptionAlgorithm crypt = config.getEncryption(); android.net.IpSecAlgorithm auth = config.getAuthentication(); android.net.IpSecAlgorithm authenticatedEncryption = config.getAuthenticatedEncryption(); if (((authenticatedEncryption == null) && (crypt == null)) && (auth == null)) { throw newjava.lang.IllegalArgumentException("No Encryption or Authentication algorithms specified"); } else if ((authenticatedEncryption!= null) && ((auth!= null) || (crypt!= null))) { throw newjava.lang.IllegalArgumentException(("Encryption or Authentication is mutually exclusive with other " + " Authentication or Encryption algorithms")); } com.android.server.IpSecService.SpiRecord s = userRecord.mSpiRecords.getResourceOrThrow(config.getSpiResourceId()); if (android.text.TextUtils.isEmpty(config.getDestinationAddress())) { config.setDestinationAddress(s.getDestinationAddress()); } if (!(config.getDestinationAddress().equals(s.getDestinationAddress())))) { throw newjava.lang.IllegalArgumentException("Invalid remote addresseses."); } switch (config.getMode()) { case android.net.IpSecTransform.MODE_TRANSPORT : case android.net.IpSecTransform.MODE_TUNNEL : break; default : throw newjava.lang.IllegalArgumentException(("Invalid IpSecTransform.mode: " + (config.getMode()))); } }
private static android.net.IpSecTransform buildIpSecTransform(android.content.Context mContext, android.net.IpSecManager.SecurityParameterIndex spi, android.net.IpSecManager.UdpEncapsulationSocket encapSocket,java.net.InetAddress remoteAddr) throwsjava.lang.Exception {java.lang.String localAddr = (remoteAddr instanceofjava.net.Inet4Address)? android.net.cts.IpSecManagerTest.IPV4_LOOPBACK : android.net.cts.IpSecManagerTest.IPV6_LOOPBACK; return new android.net.IpSecTransform.Builder(mContext).setSpi(Spi).setEncryption(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY)).setAuthentication(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.AUTH_KEY, ((android.net.cts.IpSecManagerTest.AUTH_KEY.length) * 4))).setIpv4Encapsulation(encapSocket, encapSocket.getPort()).buildTransportModeTransform(java.net.InetAddress.getByName(localAddr)); }
public void testCreateTransform() throwsjava.lang.Exception {java.net.InetAddress localAddr =java.net.InetAddress.getByName(android.net.cts.IpSecManagerTest.IPV4_LOOPBACK); android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(localAddr); android.net.IpSecTransform transform = new android.net.IpSecTransform.Builder(mContext).setSpi(spi).setEncryption(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY)).setAuthentication(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.AUTH_KEY, ((android.net.cts.IpSecManagerTest.AUTH_KEY.length) * 8))).buildTransportModeTransform(localAddr);java.net.DatagramSocket localSocket = newjava.net.DatagramSocket(0); int localPort = localSocket.getLocalPort(); localSocket.setSoTimeout(500); android.os.ParcelFileDescriptor pin = android.os.ParcelFileDescriptor.fromDatagramSocket(localSocket);java.io.FileDescriptor udpSocket = pin.getFileDescriptor(); mISM.applyTransportModeTransform(udpSocket, IpSecManager.DIRECTION_IN, transform); mISM.applyTransportModeTransform(udpSocket, IpSecManager.DIRECTION_OUT, transform); byte[] data = newjava.lang.String("Hello, test data ever!").getBytes("UTF-8"); byte[] in = new byte[data.length]; android.system.Os.sendto(udpSocket, data, 0, data.length, 0, localAddr, localPort); android.system.Os.read(udpSocket, in, 0, in.length); assertTrue("Returned data did not match.",java.util.Arrays.equals(data, in)); mISM.removeTransportModeTransforms(udpSocket, transform); android.system.Os.close(udpSocket); transform.close(); }
@org.junit.Test public void testCreateTransportModeTransformAead() throwsjava.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); ipSecConfig.setAuthenticatedEncryption(com.android.server.IpSecServiceParameterizedTest.AEAD_ALGO); ipSecConfig.setAuthenticatedEncryption(com.android.server.IpSecServiceParameterizedTest.AEAD_ALGO); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI), eq(""), eq(new byte[]{ }), eq(0), eq(""), eq(new byte[]{ }), eq(0), eq(IpSecAlgorithm.AUTH_CRYPT_AES_GCM), eq(com.android.server.IpSecServiceParameterizedTest.AEAD_KEY), anyInt(), anyInt(), anyInt(), anyInt()); }
public void checkTransform(int protocol,java.lang.String localAddress, android.net.IpSecAlgorithm crypt, android.net.IpSecAlgorithm auth, boolean doUdpEncap, int sendCount, boolean useJavaSockets) throwsjava.lang.Exception { android.net.cts.IpSecManagerTest.StatsChecker.initStatsChecker();java.net.InetAddress local =java.net.InetAddress.getByName(localAddress); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket();android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(local)) { android.net.IpSecTransform.Builder transformBuilder = new android.net.IpSecTransform.Builder(mContext).setSpi(spi).setEncryption(crypt).setAuthentication(auth); if (doUdpEncap) { transformBuilder = transformBuilder.setIpv4Encapsulation(encapSocket, encapSocket.getPort()); } int ipHdrLen = (local instanceofjava.net.Inet6Address)? android.net.cts.IpSecManagerTest.IP6_HDRLEN : android.net.cts.IpSecManagerTest.IP4_HDRLEN; int transportHdrLen = 0; int udpEncapLen = (doUdpEncap)? android.net.cts.IpSecManagerTest.UDP_HDRLEN : 0; try (android.net.IpSecTransform.Builder transform = transformBuilder.buildTransportModeTransform(java.net.InetAddress.getByName(localAddress))) { if (protocol == (IPPROTO_TCP)) { transportHdrLen = android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS; checkTcp(transform, local, sendCount, useJavaSockets); } else if (protocol == (IPPROTO_UDP)) { transportHdrLen = android.net.cts.IpSecManagerTest.UDP_HDRLEN; checkUnconnectedUdp(transform, local, sendCount, useJavaSockets); } else { throw newjava.lang.IllegalArgumentException(protocol, ipHdrLen, transportHdrLen); } } } checkUnconnectedUdp(protocol, transportHdrLen, sendCount,
public android.net.IpSecTransform.Builder setEncryption(android.net.IpSecAlgorithm algo) { mConfig.setEncryption(algo); return this; }
public android.net.IpSecTransform buildTransportModeTransform(java.net.InetAddress sourceAddress) throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException,java.io.IOException { mConfig.setMode(android.net.IpSecTransform.MODE_TRANSPORT); mConfig.setSourceAddress(sourceAddress.getHostAddress()); return new android.net.IpSecTransform(mContext, mConfig).activate(); }
public android.net.IpSecTransform.Builder setAuthentication(android.net.IpSecAlgorithm algo) { mConfig.setAuthentication(algo); return this; }
public com.android.ims.internal.IImsRegistration getImsRegistration(int slotId, int feature) throws android.os.RemoteException { com.android.internal.telephony.ims.ImsServiceController controller = getImsServiceController(slotId, feature); if (controller!= null) { return controller.getRegistration(slotId); } return null; }
@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testRegistrationCallbackSendCurrentState() throws android.os.RemoteException { android.telephony.ims.stub.ImsRegistrationImplBase.Callback mCallback2 = spy(new android.telephony.ims.stub.ImsRegistrationImplBase.Callback()); mRegistration.onRegistered(ImsRegistrationImplBase.REGISTRATION_TECH_LTE); mRegBinder.addRegistrationCallback(mCallback2); verify(mCallback2).onRegistered(eq(ImsRegistrationImplBase.REGISTRATION_TECH_LTE)); }
public void addRegistrationCallback(android.telephony.ims.stub.ImsRegistrationImplBase.Callback cb) throws com.android.ims.ImsException { if (cb == null) { throw newjava.lang.NullPointerException("listener can't be null"); } synchronized(mHasRegisteredLock) { if (!(mHasRegisteredForProxy)) { try { checkAndThrowExceptionIfServiceUnavailable(); mImsServiceProxy.getRegistration().addRegistrationCallback(mRegistrationCallback.getBinder()); com.android.ims.ImsManager.log("RegistrationCallback registered."); mHasRegisteredForProxy = true; } catch (android.os.RemoteException e) { throw new com.android.ims.ImsException("addRegistrationListener()", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN); } } } synchronized(mRegistrationCallbacks) { com.android.ims.ImsManager.log(("Local registration callback added: " + cb)); mRegistrationCallbacks.add(cb); } }
@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testRegistrationCallbackSendCurrentStateDisconnected() throws android.os.RemoteException { android.telephony.ims.stub.ImsRegistrationImplBase.Callback mCallback2 = spy(new android.telephony.ims.stub.ImsRegistrationImplBase.Callback()); com.android.ims.ImsReasonInfo info = new com.android.ims.ImsReasonInfo(com.android.ims.ImsReasonInfo.CODE_LOCAL_NETWORK_NO_LTE_COVERAGE, 0); mRegistration.onDeregistered(info); mRegBinder.addRegistrationCallback(mCallback2); verify(mCallback).onDeregistered(eq(info)); verify(mCallback2).onDeregistered(eq(info)); }
@android.telephony.ims.stub.ImsRegistrationImplBase.ImsRegistrationTech private int getConnectionType() { synchronized(mLock) { return mConnectionType; } }
private void updateNewCallbackWithState(com.android.ims.internal.IImsRegistrationCallback c) throws android.os.RemoteException { int state; com.android.ims.ImsReasonInfo disconnectInfo; synchronized(mLock) { state = mRegistrationState; disconnectInfo = mLastDisconnectCause; } switch (state) { case android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_STATE_NOT_REGISTERED : { c.onDeregistered(disconnectInfo); break; } case android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_STATE_REGISTERING : { c.onRegistering(getConnectionType()); break; } case android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_STATE_REGISTERED : { c.onRegistered(getConnectionType()); break; } } }
public final void onRegistering(@android.telephony.ims.stub.ImsRegistrationImplBase.ImsRegistrationTech int imsRadioTech) { onImsProgressing(imsRadioTech); }
@java.lang.Override public void onTechnologyChangeFailed(int imsRadioTech, com.android.ims.ImsReasonInfo imsReasonInfo) { this.onTechnologyChangeFailed(imsRadioTech, imsReasonInfo); }
public final void onRegistered(@android.telephony.ims.stub.ImsRegistrationImplBase.ImsRegistrationTech int imsRadioTech) { onImsConnected(imsRadioTech); }
private void createImsService() { if (!(mConfigDynamicBind)) { android.telephony.Rlog.i(com.android.ims.ImsManager.TAG, "Creating ImsService using ServiceManager"); mImsServiceProxy = com.android.ims.ImsServiceProxyCompat.create(mPhoneId, mDeathRecipient); } else { android.telephony.Rlog.i(com.android.ims.ImsManager.TAG, "Creating ImsService using ImsResolver"); mImsServiceProxy = com.android.ims.ImsServiceProxy.create(mContext, mPhoneId); } synchronized(mHasRegisteredLock) { mHasRegisteredForProxy = false; } }
public void removeRegistrationListener(android.telephony.ims.Stub.ImsRegistrationImplBase.Callback cb) throws com.android.ims.ImsException { if (cb == null) { throw newjava.lang.NullPointerException("Callback can't be null"); } synchronized(mRegistrationCallbacks) { com.android.ims.ImsManager.log(("Registration callback removed: " + cb)); mRegistrationCallbacks.remove(cb); } }
@java.lang.Override public void onRegistering(int imsRadioTech) { synchronized(mRegistrationCallbacks) { mRegistrationCallbacks.forEach(( l) -> l.onRegistering(imsRadioTech)); } }
public final void onDeregistered(com.android.ims.ImsReasonInfo info) { onImsDisconnected(info); }
@java.lang.Override public void imsFeatureCreated(int slotId, int feature) throws android.os.RemoteException { synchronized(mLock) { if (((!(mIsAvailable)) && ((mSlotId) == slotId)) && (feature == (mSupportedFeature))) { android.util.Log.i(com.android.ims.ImsServiceProxy.LOG_TAG, (("Ims enabled on slotId: " + slotId) + " for feature: ") + feature)); mIsAvailable = true; } } }
@java.lang.Override public void imsStatusChanged(int slotId, int feature, int status) throws android.os.RemoteException { synchronized(mLock) { android.util.Log.i(com.android.ims.ImsServiceProxy.LOG_TAG, (((((" imsStatusChanged slot: " + slotId) + " feature: ") + feature) + " status: ") + status)); if (((mSlotId) == slotId) && (feature == (mSupportedFeature))) { mFeatureStatusCached = status; if ((mStatusCallback)!= null) { mStatusCallback.notifyStatusChanged(); } } } }
public static com.android.ims.ImsServiceProxy create(android.content.Context context, int slotId) { com.android.ims.ImsServiceProxy serviceProxy = new com.android.ims.ImsServiceProxy(context, slotId, android.telephony.ims.feature.ImsFeature.MMTEL); com.android.ims.internal.IImsMMTelFeature b = com.android.ims.ImsServiceProxy.getTelephonyManager(context).getImsMMTelFeatureAndListen(slotId, serviceProxy.getListener()); if (b!= null) { serviceProxy.setBinder(b.asBinder()); serviceProxy.getFeatureStatus(); } else { android.telephony.Rlog.w(com.android.ims.ImsServiceProxy.LOG_TAG, ("getServiceProxy: b is null! Phone Id: " + slotId)); } return serviceProxy; }
@java.lang.Override public void imsFeatureRemoved(int slotId, int feature) throws android.os.RemoteException { synchronized(mLock) { if (((mIsAvailable) && ((mSlotId) == slotId)) && (feature == (mSupportedFeature))) { android.util.Log.i(com.android.ims.ImsServiceProxy.LOG_TAG, (("ImsServiceProxy disabled on slotId: " + slotId) + " for feature: ") + feature)); mIsAvailable = false; } } }
public void addRegistrationListener(int serviceClass, com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { addRegistrationCallback(listener); }
public int getFeatureStatus() { synchronized(mLock) { if ((isBinderAlive()) && ((mFeatureStatusCached)!= null)) { android.util.Log.i(com.android.ims.ImsServiceProxy.LOG_TAG, ("getFeatureStatus() - returning cached: " + (mFeatureStatusCached))); return mFeatureStatusCached; } }java.lang.Integer status = retrieveFeatureStatus(); synchronized(mLock) { if (status == null) { return android.telephony.ims.feature.ImsFeature.STATE_NOT_AVAILABLE; } mFeatureStatusCached = status; } android.util.Log.i(com.android.ims.ImsServiceProxy.LOG_TAG, ("getFeatureStatus() - returning " + status)); return status; }
public int open(int serviceClass, android.app.PendingIntent incomingCallPendingIntent, com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable(); if (incomingCallPendingIntent == null) { throw newjava.lang.NullPointerException("incomingCallPendingIntent can be null"); } if (listener == null) { throw newjava.lang.NullPointerException("listener can be null"); } int result = 0; try { result = mImsServiceProxy.startSession(incomingCallPendingIntent, new com.android.ims.ImsManager.ImsRegistrationListenerBase()); addRegistrationCallback(listener); com.android.ims.ImsManager.log("ImsManager Session started and registration listener added."); } catch (android.os.RemoteException e) { throw new com.android.ims.ImsException("open()", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN); } if (result <= 0) { throw new com.android.ims.ImsException("open()", (result * (-1))); } return result; }
public com.android.ims.internal.IImsRegistration getRegistration() { return com.android.ims.ImsServiceProxy.getTelephonyManager(mContext).getImsRegistration(mSlotId, ImsFeature.MMTEL); }
@java.lang.Override public void onRegistered(int imsRadioTech) { synchronized(mRegistrationCallbacks) { mRegistrationCallbacks.forEach(( l) -> l.onRegistered(imsRadioTech)); } }
public final void onTechnologyChangeFailed(@android.telephony.ims.stub.ImsRegistrationImplBase.ImsRegistrationTech int imsRadioTech, com.android.ims.ImsReasonInfo info) { onRegistrationChangeFailed(imsRadioTech, info); }
@java.lang.Override public void onTechnologyChangeFailed(int targetRadioTech, com.android.ims.ImsReasonInfo imsReasonInfo) { if (com.android.ims.ImsManager.DBG) com.android.ims.ImsManager.log(((("onTechnologyChangeFailed :: targetAccessTech=" + targetRadioTech) + " imsReasonInfo=") + imsReasonInfo)); synchronized(mRegistrationCallbacks) { mRegistrationCallbacks.forEach(( l) -> l.onTechnologyChangeFailed(targetRadioTech, imsReasonInfo)); } }
@java.lang.Override public void onDeregistered(com.android.ims.ImsReasonInfo imsReasonInfo) { synchronized(mRegistrationCallbacks) { mRegistrationCallbacks.forEach(( l) -> l.onDeregistered(imsReasonInfo)); } }
public void addRegistrationListener(com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { addRegistrationCallback(listener); }
@java.lang.Override public void onRegistered(int imsRadioTech) { this.onRegistered(imsRadioTech); }
javajava.lang.String getIccStateIntentString(com.android.internal.telephony.IccCardConstants.State state) { switch (state) { case ABSENT : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_ABSENT; case PIN_REQUIRED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case PUK_REQUIRED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case NETWORK_LOCKED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case READY : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_READY; case NOT_READY : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_NOT_READY; case PERM_DISABLED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case CARD_IO_ERROR : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR; case CARD_RESTRICTED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_CARD_RESTRICTED; case LOADED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOADED; default : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_UNKNOWN; } }
@java.lang.Override public boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket socket) { if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, ((("onConnect BluetoothSocket : " + socket) + " :device : ") + device)); } com.android.bluetooth.BluetoothObexTransport transport = new com.android.bluetooth.BluetoothObexTransport(socket); android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.opp.BluetoothOppService.MSG_INCOMING_BTOPP_CONNECTION); msg.obj = transport; msg.sendToTarget(); return true; }
@java.lang.Override public void onClose() { if (com.android.bluetooth.opp.BluetoothOppObexServerSession.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppObexServerSession.TAG, "onClose"); } releaseWakeLocks(); if ((mServerSocket)!= null) { if (com.android.bluetooth.opp.BluetoothOppObexServerSession.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppObexServerSession.TAG, "prepareForNewConnect"); } ((com.android.bluetooth.opp.BluetoothOppService) (mContext)).mAcceptNewConnect = true; } com.android.bluetooth.opp.BluetoothOppUtility.cancelNotification(mContext); if ((mCallback)!= null) { android.os.Message msg = android.os.Message.obtain(mCallback); msg.what = BluetoothOppObexSession.MSG_SESSION_COMPLETE; msg.obj = mInfo; msg.sendToTarget(); } }
public synchronized void startSocketListeners() { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, "Bluetooth Service startSocketListeners"); } if ((mServerSession)!= null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, "ServerSession exists - shutting it down..."); } mServerSession.close(); mServerSession = null; } if ((mObserver)!= null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, "Observer exists - shutting it down..."); } mObserver.deinit(); mObserver = null; } closeConnectionSocket(); if ((mServerSockets)!= null) { mServerSockets.close(); mServerSockets = null; } if ((mServerSockets) == null) { android.util.Log.e(mTag, "Failed to start the listeners"); return; } removeSdpRecord(); mSdpHandle = createMasSdpRecord(mServerSockets.getRfcommChannel(), mServerSockets.getL2capPsm()); if (com.android.bluetooth.map.BluetoothMapMasInstance.V) { android.util.Log.d(mTag, ((((("Creating new SDP record for MAS instance: " + (mMasInstanceId)) + " Object reference: ") + (this)) + " handle: ") + (mSdpHandle))); } updateDbIdentifier(); }
private synchronized boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket conSocket) { if (com.android.bluetooth.ObexServerSockets.D) { android.util.Log.d(mTag, ("onConnect socket: " + conSocket)); } if (mConHandler.onConnect(device, conSocket)) { return true; } return false; }
private void createServerSession(java x.obex.ObexTransport transport) { mServerSession = new com.android.bluetooth.opp.BluetoothOppObexServerSession(this, transport, mServerSocket); mServerSession.preStart(); if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, (("Creating ServerSession " + (mServerSession.toString())) + " for incoming connection ") + (transport.toString()))); } }
@java.lang.Override public synchronized boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket socket) { boolean isValid = mMapService.onConnect(device, this); if (isValid) { mRemoteDevice = device; mConnSocket = socket; mAcceptNewConnect = false; } return isValid; }
@java.lang.Override public void getRat(java.lang.String callingPackage, com.android.internal.telephony.euicc.IGetRatCallback callback) { checkCallingPackage(callingPackage); }
private void onInBandRing(int inBand, byte[] address) { com.android.bluetooth.hfpclient.StackEvent event = new com.android.bluetooth.hfpclient.StackEvent(StackEvent.EVENT_TYPE_IN_BAND_RINGTONE); event.valueInt = inBand; event.device = getDevice(address); if (com.android.bluetooth.hfpclient.NativeInterface.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.NativeInterface.TAG, ((("onInBandRing: address " + address) + " event ") + event)); } com.android.bluetooth.hfpclient.HeadsetClientService service = com.android.bluetooth.hfpclient.HeadsetClientService.getHeadsetClientService(); if (service!= null) { service.messageFromNative(event); } else { android.util.Log.w(com.android.bluetooth.hfpclient.NativeInterface.TAG, ("onInBandRing: Ignoring message because service not available: " + event)); } }
public void setDnsConfigurationForNetwork(int netId,java.util.Collection<java.net.InetAddress> servers,java.lang.String domains, boolean isDefaultNetwork) { updateParametersSettings(); updatePrivateDnsSettings(); final boolean useTls = com.android.server.connectivity.DnsManager.shouldUseTls(mPrivateDnsMode); final com.android.server.connectivity.DnsManager.ResolvedPrivateDnsHostname resolvedName = (useTls)? mPrivateDnsMap.get(netId) : null; finaljava.lang.String[] serverStrs = android.net.NetworkUtils.makeStrings(servers); finaljava.lang.String[] domainStrs = (domains == null)? newjava.lang.String[0] : domains.split(","); final int[] params = new int[]{ mSampleValidity, mSuccessThreshold, mMinSamples, mMaxSamples }; finaljava.lang.String tlsHostname = (resolvedName!= null)? resolvedName.hostname : ""; try { mNMS.setDnsConfigurationForNetwork(netId, serverStrs, domainStrs, params, useTls, tlsHostname); } catch (java.lang.Exception e) { android.util.Slog.e(com.android.server.connectivity.DnsManager.TAG, ("Error setting DNS configuration: " + e)); return; } if (isDefaultNetwork) setDefaultDnsSystemProperties(servers); flushVmDnsCache(); }
public staticjava.lang.String getPrivateDnsStrictModeHostname(android.content.ContentResolver cr) { finaljava.lang.String mode = com.android.server.connectivity.DnsManager.getStringSetting(cr, android.provider.Settings.Global.PRIVATE_DNS_MODE); if ((android.text.TextUtils.isEmpty(mode)) || (!(mode.startsWith(android.net.ConnectivityManager.PRIVATE_DNS_MODE_PROVIDER_HOSTNAME)))) { return null; } return com.android.server.connectivity.DnsManager.getStringSetting(cr, android.provider.Settings.Global.PRIVATE_DNS_SPECIFIER); }
public void updatePrivateDns(android.net.Network network, com.android.server.connectivity.DnsManager.ResolvedPrivateDnsHostname resolvedName) { android.util.Slog.w(com.android.server.connectivity.DnsManager.TAG, (((("updatePrivateDns(" + network) + ", ") + resolvedName) + ")")); mPrivateDnsMap.put(network.netId, resolvedName); }
public static com.android.server.connectivity.DnsManager.ResolvedPrivateDnsHostname tryBlockingResolveOf(android.net.Network network,java.lang.String name) { final android.system.StructAddrinfo hints = new android.system.StructAddrinfo(); hints.ai_flags = 0; hints.ai_family = android.system.OsConstants.AF_UNSPEC; hints.ai_socktype = android.system.OsConstants.SOCK_DGRAM; try { finaljava.net.InetAddress[] ips = Libcore.os.android_getaddrinfo(name, hints, network.netId); if ((ips!= null) && ((ips.length) > 0)) { return new com.android.server.connectivity.DnsManager.ResolvedPrivateDnsHostname(name, ips); } } catch (android.system.GaiException ignored) { } return null; }
privatejava.lang.String getStringSetting(java.lang.String which) { return com.android.server.connectivity.DnsManager.getStringSetting(mContentResolver, which); }
private void maybeResolvePrivateDnsHostname() { finaljava.lang.String hostname = com.android.server.connectivity.DnsManager.getPrivateDnsStrictModeHostname(mContext.getContentResolver()); if (android.text.TextUtils.isEmpty(hostname)) { mPrivateDns = null; return; } mPrivateDns = com.android.server.connectivity.DnsManager.tryBlockingResolveOf(mNetwork, hostname); }
@java.lang.Override public void enter() { maybeLogEvaluationResult(networkEventType(validationStage(), com.android.server.connectivity.NetworkMonitor.EvaluationResult.VALIDATED)); mConnectivityServiceHandler.sendMessage(obtainMessage(com.android.server.connectivity.NetworkMonitor.EVENT_NETWORK_TESTED, com.android.server.connectivity.NetworkMonitor.NETWORK_TEST_RESULT_VALID, mNetId, mPrivateDns)); (mValidations)++; }
private void updateAccessPointsDelayed() { if ((((getActivity())!= null) && (!(mIsRestricted))) && (mWifiManager.isWifiEnabled())) { getView().removeCallbacks(mUpdateAccessPointsRunnable); setProgressBarVisible(true); getView().postDelayed(mUpdateAccessPointsRunnable, 300); } }
javajava publicjava.lang.String describeFirstNonRequestableCapability() { if (hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED)) return "NET_CAPABILITY_VALIDATED"; if (hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_CAPTIVE_PORTAL)) return "NET_CAPABILITY_CAPTIVE_PORTAL"; if (hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_FOREGROUND)) return "NET_CAPABILITY_FOREGROUND"; if (hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_UNCONGESTED)) return "NET_CAPABILITY_UNCONGESTED"; if (((mNetworkCapabilities) & (android.net.NetworkCapabilities.NON_REQUESTABLE_CAPABILITIES))!= 0) { return "Non-requestable capabilities " + (java.lang.Long.toHexString(mNetworkCapabilities)); } if (((mLinkUpBandwidthKbps)!= 0) || ((mLinkDownBandwidthKbps)!= 0)) return "bandwidth"; if (hasSignalStrength()) return "signalStrength"; return null; }
private static void checkRegisterNativeAllocation() throwsjava.lang.Exception { long maxMem =java.lang.Runtime.getRuntime().maxMemory(); int size = ((int) (maxMem / 32)); int allocation_count = 256;java.lang.ref.ReferenceQueue<java.lang.Object> queue = newjava.lang.ref.ReferenceQueue<java.lang.Object>();java.lang.ref.PhantomReference ref = newjava.lang.ref.PhantomReference(newjava.lang.Object(), queue); long total = 0; for (int i = 0; (!(ref.isEnqueued())) && (i < allocation_count); ++i) { Main.runtime.registerNativeAllocation(size); total += size; } if ((queue.remove(1000)) == null) { throw newjava.lang.RuntimeException("GC failed to run"); } while (total > 0) { Main.runtime.registerNativeFree(size); total -= size; } }
public static void main(java.lang.String[] args) throwsjava.lang.Exception { for (int i = 0; i < 4; ++i) { Main.checkRegisterNativeAllocation(); } synchronized(Main.deadlockLock) { while (!(Main.aboutToDeadlock)) { Main.checkRegisterNativeAllocation(); } Main.checkRegisterNativeAllocation(); }java.lang.System.out.println("RegisterNativeAllocation complete"); }
private static void clearDexDir(java.io.File dexDir) {java.io.File[] files = dexDir.listFiles(newjava.io.FileFilter() { @java.lang.Override public boolean accept(java.io.File pathname) { return!(pathname.getName().equals(android.support.multidex.MultiDexExtractor.LOCK_FILENAME)); } }); if (files == null) { android.util.Log.w(android.support.multidex.MultiDexExtractor.TAG, (("Failed to list secondary dex dir content (" + (dexDir.getPath())) + ").")); return; } for (java.io.File oldFile : files) { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, (("Failed to delete old file '" + (oldFile.getPath())) + "' of size ") + (oldFile.length()))); if (!(oldFile.delete())) { android.util.Log.w(android.support.multidex.MultiDexExtractor.TAG, ("Failed to delete old file '" + (oldFile.getPath()))); } else { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ("Failed to delete old file '" + (oldFile.getPath()))); } } }
javajava.util.List<? extendsjava.io.File> load(android.content.Context context,java.lang.String prefsKeyPrefix, boolean forceReload) throwsjava.io.IOException { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, (((((("MultiDexExtractor.load(" + (sourceApk.getPath())) + " ") + forceReload) + " ") + prefsKeyPrefix) + ")"));java.util.List<android.support.multidex.MultiDexExtractor.ExtractedDex> files; if ((!forceReload) && (!(android.support.multidex.MultiDexExtractor.isModified(context, sourceApk, sourceCrc, prefsKeyPrefix)))) { try { files = loadExistingExtractions(context, prefsKeyPrefix); } catch (java.io.IOException ioe) { android.util.Log.w(android.support.multidex.MultiDexExtractor.TAG, ("Failed to reload existing extracted secondary dex files, " + " falling back to fresh extraction")); files = android.support.multidex.MultiDexExtractor.performExtractions(sourceApk, dexDir); android.support.multidex.MultiDexExtractor.putStoredApkInfo(context, prefsKeyPrefix, android.support.multidex.MultiDexExtractor.getTimeStamp(sourceApk), sourceCrc, files); } } else { if (forceReload) { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, "force reload must be performed."); } else { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, "force reload must be performed."); } files = android.support.multidex.MultiDexExtractor.performExtractions(sourceApk, dexDir); android.support.multidex.MultiDexExtractor.putStoredApkInfo(context, prefsKeyPrefix, android.support.multidex.MultiDexExtractor.getTimeStamp(sourceApk), sourceCrc, files); } return files; }
@android.annotation.RequiresPermission(Manifest.permission.BLUETOOTH) public android.bluetooth.BluetoothSocket createL2capCocSocket(int transport, int psm) throwsjava.io.IOException { if (!(isBluetoothEnabled())) { android.util.Log.e(android.bluetooth.BluetoothDevice.TAG, "createL2capCocSocket: Bluetooth is not enabled"); throw newjava.io.IOException(); } if (android.bluetooth.BluetoothDevice.DBG) android.util.Log.d(android.bluetooth.BluetoothDevice.TAG, ((("createL2capCocSocket: transport=" + transport) + ", psm=") + psm)); return null; }
@android.annotation.RequiresPermission(Manifest.permission.BLUETOOTH) public android.bluetooth.BluetoothServerSocket listenUsingL2capCoc(int transport) throwsjava.io.IOException { if (android.bluetooth.BluetoothAdapter.DBG) android.util.Log.d(android.bluetooth.BluetoothAdapter.TAG, (("listenUsingL2capCoc(): transport=" + transport) + ", no uuid")); return null; }
@android.annotation.RequiresPermission(Manifest.permission.BLUETOOTH) public android.bluetooth.BluetoothServerSocket listenUsingInsecureL2capCoc(int transport) throwsjava.io.IOException { if (android.bluetooth.BluetoothAdapter.DBG) { android.util.Log.d(android.bluetooth.BluetoothAdapter.TAG, (("listenUsingInsecureL2capCoc(): transport=" + transport) + ", no uuid")); } return null; }
@android.annotation.RequiresPermission(Manifest.permission.BLUETOOTH) public android.bluetooth.BluetoothSocket createInsecureL2capCocSocket(int transport, int psm) throwsjava.io.IOException { if (!(isBluetoothEnabled())) { android.util.Log.e(android.bluetooth.BluetoothDevice.TAG, "createInsecureL2capCocSocket: Bluetooth is not enabled"); throw newjava.io.IOException(); } if (android.bluetooth.BluetoothDevice.DBG) { android.util.Log.d(android.bluetooth.BluetoothDevice.TAG, ((("createInsecureL2capCocSocket: transport=" + transport) + ", psm=") + psm)); } return null; }
@com.googlecode.android_scripting.rpc.Rpc(description = "Start a thread initiate an L2CAP CoC connection over Bluetooth.") public void bluetoothSocketConnBeginConnectThreadPsm(@com.googlecode.android_scripting.rpc.RpcParameter(name = "address", description = "The mac address of the device to connect to.")java.lang.String address, @com.googlecode.android_scripting.rpc.RpcParameter(name = "isBle", description = "Use transport BLE?") @com.googlecode.android_scripting.rpc.RpcDefault("0")java.lang.Boolean isBle, @com.googlecode.android_scripting.rpc.RpcParameter(name = "psmValue") @com.googlecode.android_scripting.rpc.RpcDefault(com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.DEFAULT_PSM)java.lang.Integer psmValue, @com.googlecode.android_scripting.rpc.RpcParameter(name = "securedConn") @com.googlecode.android_scripting.rpc.RpcDefault("0")java.lang.Boolean securedConn) throwsjava.io.IOException { android.bluetooth.BluetoothDevice mDevice; mDevice = mBluetoothAdapter.getRemoteDevice(address); com.googlecode.android_scripting.Log.d(((((((("Bluetooth Coc connecting to " + address) + " isBle=") + isBle) + " psmValue=") + psmValue) + " securedConn=") + securedConn)); com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.ConnectThread connectThread = new com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.ConnectThread(mDevice, psmValue, isBle, securedConn); connectThread.start(); mConnectThread = connectThread; }
@com.googlecode.android_scripting.rpc.Rpc(description = "Start a thread to accept an Coc connection over Bluetooth.") public void bluetoothSocketConnBeginAcceptThreadPsm(@com.googlecode.android_scripting.rpc.RpcParameter(name = "psmValue") @com.googlecode.android_scripting.rpc.RpcDefault(com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.DEFAULT_PSM))java.lang.Integer psmValue, @com.googlecode.android_scripting.rpc.RpcParameter(name = "timeout", description = "long to wait for a new connection, is wait for ever"), @com.googlecode.android_scripting.rpc.RpcDefault("0")java.lang.Integer timeout, @com.googlecode.android_scripting.rpc.RpcParameter(name = "isBle", description = "Use transport BLE?") @com.googlecode.android_scripting.rpc.RpcDefault("0")java.lang.Boolean isBle, @com.googlecode.android_scripting.rpc.RpcParameter(name = "securedConn", description = "Use secured connection?") @com.googlecode.android_scripting.rpc.RpcDefault("0")java.lang.Boolean securedConn) throwsjava.io.IOException { com.googlecode.android_scripting.Log.d(("BluetoothSocketConnBeginAcceptThread: PSM value=" + psmValue)); com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.AcceptThread acceptThread = new com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.AcceptThread(psmValue.intValue(), timeout.intValue(), isBle, securedConn); acceptThread.start(); mAcceptThread = acceptThread; }
publicjava.lang.Runnable registerNativeAllocation(java.lang.Object referent, libcore.util.NativeAllocationRegistry.Allocator allocator) { if (referent == null) { throw newjava.lang.IllegalArgumentException("referent is null"); } libcore.util.NativeAllocationRegistry.registerNativeAllocation(this.size); libcore.util.NativeAllocationRegistry.CleanerThunk thunk = new libcore.util.NativeAllocationRegistry.CleanerThunk(); sun.misc.Cleaner cleaner = sun.misc.Cleaner.create(referent, thunk); long nativePtr = allocator.allocate(); if (nativePtr == 0) { cleaner.clean(); return null; } thunk.setNativePtr(nativePtr); return result; }
publicjava.lang.Runnable registerNativeAllocation(java.lang.Object referent, long nativePtr) { if (referent == null) { throw newjava.lang.IllegalArgumentException("referent is null"); } if (nativePtr == 0) { throw newjava.lang.IllegalArgumentException("nativePtr is null"); } try { libcore.util.NativeAllocationRegistry.registerNativeAllocation(this.size); } catch (java.lang.OutOfMemoryError oome) { libcore.util.NativeAllocationRegistry.applyFreeFunction(freeFunction, nativePtr); throw oome; } sun.misc.Cleaner cleaner = sun.misc.Cleaner.create(referent, thunk); libcore.util.NativeAllocationRegistry.CleanerRunner result = new libcore.util.NativeAllocationRegistry.CleanerRunner(cleaner); thunk.setNativePtr(nativePtr); return result; }
public static void main(java.lang.String[] args) { Main.testSimpleUse(); Main.testTwoUses(); Main.testFieldStores(Main.doThrow); Main.testFieldStoreCycle(); Main.testArrayStores(); Main.testOnlyStoreUses(); Main.testNoUse(); Main.testPhiInput(); Main.testVolatileStore(); Main.doThrow = true; try { Main.testInstanceSideEffects(); } catch (java.lang.Error e) {java.lang.System.out.println(e.getMessage()); } try { Main.testStaticSideEffects(); } catch (java.lang.Error e) {java.lang.System.out.println(e.getMessage()); } try { Main.testArrayStore(); } catch (java.lang.Error e) {java.lang.System.out.println(e.getMessage()); } }
public static void $noinline$testStoreStore(boolean doThrow, boolean flag) { Main m = new Main(); m.intField = 42; m.intField2 = 43; if (doThrow) { throw newjava.lang.Error(m.$opt$noinline$toString()); } }
void setAudioStatus(boolean mute, int volume) { if ((!(isTvDeviceEnabled())) || (!(tv().isSystemAudioActivated()))) { return; } android.media.AudioManager audioManager = getAudioManager(); boolean muted = audioManager.isStreamMute(AudioManager.STREAM_MUSIC); if (mute) { if (!muted) { audioManager.setStreamMute(AudioManager.STREAM_MUSIC, true); } } else { if (muted) { audioManager.setStreamMute(AudioManager.STREAM_MUSIC, false); } }
private void handleSetOsdName(com.android.server.hdmi.HdmiCecMessage cmd) { com.android.internal.util.Preconditions.checkState(((mProcessedDeviceCount) < (mDevices.size()))); com.android.server.hdmi.DeviceDiscoveryAction.DeviceInfo current = mDevices.get(mProcessedDeviceCount); if ((current.mLogicalAddress)!= (cmd.getSource())) { android.util.Slog.w(com.android.server.hdmi.DeviceDiscoveryAction.TAG, ((("Invalid address[expected: " + (current.mLogicalAddress)) + " actual: ") + (cmd.getSource()))); return; }java.lang.String displayName = null; try { displayName = newjava.lang.String(cmd.getParams(),java.io.UTF_8); } catch (java.io.UnsupportedEncodingException e) { android.util.Slog.w(com.android.server.hdmi.DeviceDiscoveryAction.TAG, ("Failed to decode display name: " + (cmd.toString()))); displayName = com.android.server.hdmi.HdmiUtils.getDefaultDeviceName(current.mLogicalAddress); } if ((cmd.getOpcode()) == (Constants.MESSAGE_FEATURE_ABORT)) { displayName = com.android.server.hdmi.HdmiUtils.getDefaultDeviceName(current.mLogicalAddress); } current.mDisplayName = displayName; increaseProcessedDeviceCount(); checkAndProceedStage(); }
@com.googlecode.android_scripting.rpc.Rpc(description = "Return the SIM power state for the slot slot.") public void telephonyGetSimStateForSlotId(@com.googlecode.android_scripting.rpc.RpcParameter(name = "slotId")java.lang.Integer slotId, @com.googlecode.android_scripting.rpc.RpcParameter(name = "state")java.lang.Integer state) { mTelephonyManager.setSimPowerStateForSlot(slotId, state); }
public android.net.NetworkStats addValues(android.net.NetworkStats.Entry entry) { if ((size) >= (capacity)) { final int newLength = ((java.lang.Math.max(size, 10)) * 3) / 2; iface =java.util.Arrays.copyOf(iface, newLength); uid =java.util.Arrays.copyOf(uid, newLength); set =java.util.Arrays.copyOf(set, newLength); tag =java.util.Arrays.copyOf(tag, newLength); defaultNetwork =java.util.Arrays.copyOf(defaultNetwork, newLength); metered =java.util.Arrays.copyOf(metered, newLength); roaming =java.util.Arrays.copyOf(roaming, newLength); rxBytes =java.util.Arrays.copyOf(rxBytes, newLength); rxPackets =java.util.Arrays.copyOf(rxPackets, newLength); txBytes =java.util.Arrays.copyOf(txBytes, newLength); txPackets =java.util.Arrays.copyOf(txPackets, newLength); operations =java.util.Arrays.copyOf(operations, newLength); capacity = newLength; } iface[size] = entry.iface; uid[size] = entry.uid; set[size] = entry.set; tag[size] = entry.tag; defaultNetwork[size] = entry.defaultNetwork; metered[size] = entry.metered; roaming[size] = entry.roaming; rxBytes[size] = entry.rxBytes; rxPackets[size] = entry.rxPackets; txBytes[size] = entry.txBytes; txPackets[size] = entry.txPackets; operations[size] = entry.operations; (size)++; return this; }
@java.lang.Deprecated public android.net.NetworkStats combineValues(java.lang.String iface, int uid, int tag, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations) { return combineValues(iface, uid, android.net.NetworkStats.SET_DEFAULT, tag, android.net.NetworkStats.DEFAULT_NETWORK_ALL, rxBytes, rxPackets, txBytes, txPackets, operations); }
@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats addIfaceValues(java.lang.String iface, long rxBytes, long rxPackets, long txBytes, long txPackets) { return addValues(iface, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, rxBytes, rxPackets, txBytes, txPackets, 0L); }
public android.net.NetworkStats groupedByUid() { final android.net.NetworkStats stats = new android.net.NetworkStats(elapsedRealtime, 10); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); entry.iface = android.net.NetworkStats.IFACE_ALL; entry.set = android.net.NetworkStats.SET_ALL; entry.tag = android.net.NetworkStats.TAG_NONE; entry.defaultNetwork = android.net.NetworkStats.DEFAULT_NETWORK_ALL; entry.metered = android.net.NetworkStats.METERED_ALL; entry.roaming = android.net.NetworkStats.ROAMING_ALL; for (int i = 0; i < (size); i++) { if ((tag[i])!= (android.net.NetworkStats.TAG_NONE)) continue; entry.uid = uid[i]; entry.rxBytes = rxBytes[i]; entry.rxPackets = rxPackets[i]; entry.txBytes = txBytes[i]; entry.txPackets = txPackets[i]; entry.operations = operations[i]; stats.combineValues(entry); } return stats; }
@java.lang.Override public int hashCode() { returnjava.util.Objects.hash(uid, set, tag, defaultNetwork, metered, roaming, iface); }
public android.net.NetworkStats combineValues(android.net.NetworkStats.Entry entry) { final int i = findIndex(entry.iface, entry.uid, entry.set, entry.tag, entry.defaultNetwork, entry.metered, entry.roaming); if (i == (-1)) { addValues(entry); } else { rxBytes[i] += entry.rxBytes; rxPackets[i] += entry.rxPackets; txBytes[i] += entry.txBytes; txPackets[i] += entry.txPackets; operations[i] += entry.operations; } return this; }
private void deductTrafficFromVpnApp(int tunUid,java.lang.String underlyingIface, android.net.NetworkStats.Entry moved) { moved.uid = tunUid; moved.set = android.net.NetworkStats.SET_DBG_VPN_OUT; moved.tag = android.net.NetworkStats.TAG_NONE; moved.iface = underlyingIface; moved.defaultNetwork = android.net.NetworkStats.DEFAULT_NETWORK_ALL; moved.metered = android.net.NetworkStats.METERED_ALL; moved.roaming = android.net.NetworkStats.ROAMING_ALL; combineValues(moved); int idxVpnBackground = findIndex(underlyingIface, tunUid, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.DEFAULT_NETWORK_YES, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO); if (idxVpnBackground!= (-1)) { android.net.NetworkStats.tunSubtract(idxVpnBackground, this, moved); } int idxVpnForeground = findIndex(underlyingIface, tunUid, android.net.NetworkStats.SET_FOREGROUND, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.DEFAULT_NETWORK_YES, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO); if (idxVpnForeground!= (-1)) { android.net.NetworkStats.tunSubtract(idxVpnForeground, this, moved); } }
@com.android.internal.annotations.VisibleForTesting public int findIndexHinted(java.lang.String iface, int uid, int set, int tag, int defaultNetwork, int metered, int roaming, int hintIndex) { for (int offset = 0; offset < (size); offset++) { final int halfOffset = offset / 2; final int i; if ((offset % 2) == 0) { i = (hintIndex + halfOffset) % (size); } else { i = ((((size) + hintIndex) - halfOffset) - 1) % (size); } if ((((((uid == (this.uid[i])) && (set == (this.set[i]))) && (tag == (this.tag[i]))) && (defaultNetwork == (this.defaultNetwork[i]))) && (metered == (this.metered[i]))) && (roaming == (this.roaming[i]))) && (java.util.Objects.equals(iface, this.iface[i]))) { return i; } } return -1; }
public void spliceOperationsFrom(android.net.NetworkStats stats) { for (int i = 0; i < (size); i++) { final int j = stats.findIndex(iface[i], uid[i], set[i], tag[i], defaultNetwork[i], metered[i], roaming[i]); if (j == (-1)) { operations[i] = 0; } else { operations[i] = stats.operations[j]; } } }
public android.net.NetworkStats groupedByIface() { final android.net.NetworkStats stats = new android.net.NetworkStats(elapsedRealtime, 10); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); entry.uid = android.net.NetworkStats.UID_ALL; entry.set = android.net.NetworkStats.SET_ALL; entry.tag = android.net.NetworkStats.TAG_NONE; entry.defaultNetwork = android.net.NetworkStats.DEFAULT_NETWORK_ALL; entry.metered = android.net.NetworkStats.METERED_ALL; entry.roaming = android.net.NetworkStats.ROAMING_ALL; entry.operations = 0L; for (int i = 0; i < (size); i++) { if ((tag[i])!= (android.net.NetworkStats.TAG_NONE)) continue; entry.iface = iface[i]; entry.rxBytes = rxBytes[i]; entry.rxPackets = rxPackets[i]; entry.txBytes = txBytes[i]; entry.txPackets = txPackets[i]; stats.combineValues(entry); } return stats; }
public void dump(java.lang.String prefix,java.io.PrintWriter pw) { pw.print(prefix); pw.print(" elapsedRealtime="); pw.println(elapsedRealtime); for (int i = 0; i < (size); i++) { pw.print(prefix); pw.print(" ["); pw.print(i); pw.print("]"); pw.print(" iface="); pw.print(iface[i]); pw.print(" uid="); pw.print(uid[i]); pw.print(" set="); pw.print(android.net.NetworkStats.setToString(set[i])); pw.print(" tag="); pw.print(android.net.NetworkStats.tagToString(tag[i])); pw.print(" defaultNetwork="); pw.print(android.net.NetworkStats.defaultNetworkToString(defaultNetwork[i])); pw.print(" metered="); pw.print(android.net.NetworkStats.meteredToString(metered[i])); pw.print(" roaming="); pw.print(android.net.NetworkStats.roamingToString(roaming[i])); pw.print(" rxBytes="); pw.print(rxBytes[i]); pw.print(" rxPackets="); pw.print(rxPackets[i]); pw.print(" txBytes="); pw.print(txBytes[i]); pw.print(" txPackets="); pw.print(txPackets[i]); pw.print(" operations="); pw.println(operations[i]); } }
private android.net.NetworkStats.Entry getTotal(android.net.NetworkStats.Entry recycle,java.util.HashSet<java.lang.String> limitIface, int limitUid, boolean includeTags) { final android.net.NetworkStats.Entry entry = (recycle!= null)? recycle : new android.net.NetworkStats.Entry(); entry.iface = android.net.NetworkStats.IFACE_ALL; entry.uid = limitUid; entry.set = android.net.NetworkStats.SET_ALL; entry.tag = android.net.NetworkStats.TAG_NONE; entry.defaultNetwork = android.net.NetworkStats.DEFAULT_NETWORK; entry.metered = android.net.NetworkStats.METERED_ALL; entry.roaming = android.net.NetworkStats.ROAMING_ALL; entry.rxBytes = 0; entry.rxPackets = 0; entry.txBytes = 0; entry.txPackets = 0; entry.operations = 0; for (int i = 0; i < (size); i++) { final boolean matchesUid = (limitUid == (android.net.NetworkStats.UID_ALL)) || (limitUid == (uid[i])); final boolean matchesIface = (limitIface == null) || (limitIface.contains(iface[i])); if (matchesUid && matchesIface) { if (((tag[i])!= (android.net.NetworkStats.TAG_NONE)) && (!includeTags)) continue; entry.rxBytes += rxBytes[i]; entry.rxPackets += rxPackets[i]; entry.txBytes += txBytes[i]; entry.txPackets += txPackets[i]; entry.operations += operations[i]; } } return entry; }
@java.lang.Override publicjava.lang.String toString() { finaljava.lang.StringBuilder builder = newjava.lang.StringBuilder(); builder.append("iface=").append(iface); builder.append(" uid=").append(uid); builder.append(" set=").append(set); builder.append(" tag=").append(tag); builder.append(" defaultNetwork=").append(defaultNetwork); builder.append(" metered=").append(metered); builder.append(" roaming=").append(roaming); builder.append(" rxBytes=").append(rxBytes); builder.append(" rxPackets=").append(txBytes); builder.append(" txPackets=").append(txPackets); builder.append(" operations=").append(operations); return builder.toString(); }
@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats addValues(java.lang.String iface, int uid, int set, int tag, int defaultNetwork, int metered, int roaming, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations) { return addValues(new android.net.NetworkStats.Entry(iface, uid, set, tag, defaultNetwork, metered, roaming, rxBytes, rxPackets, txBytes, txPackets, operations)); }
public android.net.NetworkStats.Entry getValues(int i, android.net.NetworkStats.Entry recycle) { final android.net.NetworkStats.Entry entry = (recycle!= null)? recycle : new android.net.NetworkStats.Entry(); entry.iface = iface[i]; entry.uid = uid[i]; entry.set = set[i]; entry.tag = tag[i]; entry.defaultNetwork = defaultNetwork[i]; entry.metered = metered[i]; entry.roaming = roaming[i]; entry.rxBytes = rxBytes[i]; entry.rxPackets = rxPackets[i]; entry.txBytes = txBytes[i]; entry.txPackets = txPackets[i]; entry.operations = operations[i]; return entry; }
public android.net.NetworkStats combineValues(java.lang.String iface, int uid, int set, int tag, int defaultNetwork, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations) { return combineValues(new android.net.NetworkStats.Entry(iface, uid, set, tag, defaultNetwork, rxBytes, rxPackets, txBytes, txPackets, operations)); }
private void makeDefault(NetworkAgentInfo newNetwork) { if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log(("MakeDefault to new default network: " + newNetwork)); setupDataActivityTracking(newNetwork); try { mNetd.setDefaultNetId(newNetwork.network.netId); } catch (java.lang.Exception e) { com.android.server.ConnectivityService.loge(("Error setting default network : " + e)); } android.net.LinkProperties lp = newNetwork.linkProperties; notifyDefaultNetworkForNetworkStats(lp); notifyLockdownVpn(newNetwork); handleApplyDefaultProxy(lp.getHttpProxy()); updateTcpBufferSizes(newNetwork); mDnsManager.setDefaultDnsSystemProperties(newNetwork.linkProperties.getDnsServers()); }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o instanceof android.net.NetworkStats.Entry) { final android.net.NetworkStats.Entry e = ((android.net.NetworkStats.Entry) (o)); return (((((((((((((((((((((((((((((((((((((((uid) == (e.uid)) && ((set) == (e.set))) && ((tag) == (e.tag))) && ((defaultNetwork) == (e.defaultNetwork))) && ((metered) == (e.metered))) && ((roaming) == (e.roaming))) && ((rxBytes) == (e.rxBytes))) && ((rxPackets) == (e.rxPackets))) && ((txBytes) == (e.txBytes))) && ((txPackets) == (e.txPackets))) && ((operations) == (e.operations))) && (iface.equals(e.iface)); } return false; }
public int findIndex(java.lang.String iface, int uid, int set, int tag, int defaultNetwork, int metered, int roaming) { for (int i = 0; i < (size); i++) { if ((((((uid == (this.uid[i])) && (set == (this.set[i]))) && (tag == (this.tag[i]))) && (defaultNetwork == (this.defaultNetwork[i]))) && (metered == (this.metered[i]))) && (roaming == (this.roaming[i]))) && (java.util.Objects.equals(iface, this.iface[i]))) { return i; } } return -1; }
public static void noteStackedIface(java.lang.String stackedIface,java.lang.String baseIface) { synchronized(com.android.internal.net.NetworkStatsFactory.sConnectivityServiceLock) { if (baseIface!= null) { com.android.internal.net.NetworkStatsFactory.sStackedIfaces.put(stackedIface, baseIface); } else { com.android.internal.net.NetworkStatsFactory.sStackedIfaces.remove(stackedIface); } } }
@java.lang.Override public int compareTo(com.android.server.net.NetworkStatsCollection.Key another) { int res = 0; if (((ident)!= null) && ((another.ident)!= null)) { res = ident.compareTo(another.ident); } if (res == 0) { res =java.lang.Integer.compare(uid, another.uid); } if (res == 0) { res =java.lang.Integer.compare(set, another.set); } if (res == 0) { res =java.lang.Integer.compare(tag, another.tag); } return res; }
private long getTotalBytesForNetworkUid(android.net.NetworkTemplate template, int uid) { try { android.net.NetworkStatsHistory history = mCollection.getHistory(template, null, uid, NetworkStats.SET_ALL, NetworkStats.TAG_NONE, NetworkStats.DEFAULT_NETWORK_ALL, NetworkStatsHistory.FIELD_ALL,java.lang.Long.MIN_VALUE,java.lang.Long.MAX_VALUE, mAccessLevel, mCallingUid); return history.getTotalBytes(); } catch (java.lang.SecurityException e) { if (com.android.server.net.NetworkStatsObservers.LOGV) { android.util.Slog.w(com.android.server.net.NetworkStatsObservers.TAG, ((("NetworkStatsObserver " + (mCallingUid)) + " may have lost access to uid ") + uid)); } return 0; } }
@java.lang.Deprecated public void recordData(long start, long end, long rxBytes, long txBytes) { recordData(start, end, new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, rxBytes, 0L, txBytes, 0L, 0L)); }
@java.lang.Deprecated public void generateRandom(long start, long end, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations,java.util.Random r) { ensureBuckets(start, end); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, 0L, 0L, 0L, 0L); while (((((rxBytes > 1024) || (rxPackets > 128)) || (txBytes > 1024)) || (txPackets > 128)) || (operations > 32)) { final long curStart = android.net.NetworkStatsHistory.randomLong(r, start, end); final long curEnd = curStart + (android.net.NetworkStatsHistory.randomLong(r, 0, ((end - curStart) / 2))); entry.rxBytes = android.net.NetworkStatsHistory.randomLong(r, 0, rxBytes); entry.rxPackets = android.net.NetworkStatsHistory.randomLong(r, 0, rxPackets); entry.txBytes = android.net.NetworkStatsHistory.randomLong(r, 0, txBytes); entry.txPackets = android.net.NetworkStatsHistory.randomLong(r, 0, txPackets); entry.operations = android.net.NetworkStatsHistory.randomLong(r, 0, operations); rxBytes -= entry.rxBytes; rxPackets -= entry.rxPackets; txBytes -= entry.txBytes; txPackets -= entry.txPackets; operations -= entry.operations; recordData(curStart, curEnd, entry); } }
public void recordHistory(android.net.NetworkStatsHistory input, long start, long end) { final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, 0L, 0L, 0L, 0L, 0L); for (int i = 0; i < (input.bucketCount); i++) { final long bucketStart = input.bucketStart[i]; final long bucketEnd = bucketStart + (input.bucketDuration); if ((bucketStart < start) || (bucketEnd > end)) continue; entry.rxBytes = android.net.NetworkStatsHistory.getLong(input.rxBytes, i, 0L); entry.rxPackets = android.net.NetworkStatsHistory.getLong(input.rxPackets, i, 0L); entry.txBytes = android.net.NetworkStatsHistory.getLong(input.txBytes, i, 0L); entry.txPackets = android.net.NetworkStatsHistory.getLong(input.txPackets, i, 0L); entry.operations = android.net.NetworkStatsHistory.getLong(input.operations, i, 0L); recordData(bucketStart, bucketEnd, entry); } }
private android.net.NetworkStats internalGetSummaryForNetwork(android.net.NetworkTemplate template, int flags, long start, long end, @com.android.server.net.NetworkStatsAccess.Level int accessLevel, int callingUid) { final android.net.NetworkStatsHistory history = internalGetHistoryForNetwork(template, flags, android.net.NetworkStatsHistory.FIELD_ALL, accessLevel, callingUid); final long now =java.lang.System.currentTimeMillis(); final android.net.NetworkStatsHistory.Entry entry = history.getValues(start, end, now, null); final android.net.NetworkStats stats = new android.net.NetworkStats((end - start), 1); stats.addValues(new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_ALL, android.net.NetworkStats.DEFAULT_NETWORK, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.METERED_ALL, android.net.NetworkStats.ROAMING_ALL, entry.rxBytes, entry.rxPackets, entry.txBytes, entry.txPackets, entry.operations)); return stats; }
@java.lang.Override public android.net.NetworkStatsHistory getHistoryForUid(android.net.NetworkTemplate template, int uid, int set, int tag, int fields) { if (tag == (android.net.NetworkStats.TAG_NONE)) { return getUidTagComplete().getHistory(template, null, uid, set, tag, fields,java.lang.Long.MIN_VALUE,java.lang.Long.MAX_VALUE, mAccessLevel, mCallingUid); } else { return getUidTagComplete().getHistory(template, null, uid, set, tag, fields,java.lang.Long.MIN_VALUE,java.lang.Long.MAX_VALUE, mAccessLevel, mCallingUid); } }
@java.lang.Override public android.net.NetworkStatsHistory getHistoryIntervalForUid(android.net.NetworkTemplate template, int uid, int set, int tag, int fields, long start, long end) { if (tag == (android.net.NetworkStats.TAG_NONE)) { return getUidTagComplete().getHistory(template, null, uid, set, tag, android.net.NetworkStats.DEFAULT_NETWORK_ALL, fields, start, end, mAccessLevel, mCallingUid); } else if (uid == (android.os.Binder.getCallingUid())) { return getUidTagComplete().getHistory(template, null, uid, set, tag, android.net.NetworkStats.DEFAULT_NETWORK_ALL, fields, start, end, mAccessLevel, mCallingUid); } else { throw newjava.lang.SecurityException((("Package '" + (mCallingPackage)) + "' cannot access tag information from a different uid")); } }
@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats addValues(java.lang.String iface, int uid, int set, int tag, int defaultNetwork, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations) { return addValues(new android.net.NetworkStats.Entry(iface, uid, set, tag, defaultNetwork, rxBytes, rxPackets, txBytes, txPackets, operations)); }
private android.net.NetworkStatsHistory internalGetHistoryForNetwork(android.net.NetworkTemplate template, int flags, int fields, @com.android.server.net.NetworkStatsAccess.Level int accessLevel, int callingUid) { final android.telephony.SubscriptionPlan augmentPlan = resolveSubscriptionPlan(template, flags); synchronized(mStatsLock) { return mXtStatsCached.getHistory(template, augmentPlan, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_ALL, android.net.NetworkStats.DEFAULT_NETWORK_ALL, android.net.NetworkStats.TAG_NONE, fields,java.lang.Long.MIN_VALUE,java.lang.Long.MAX_VALUE, accessLevel, callingUid); } }
public void writeToProto(android.util.proto.ProtoOutputStream proto, long tag) { final long start = proto.start(tag); proto.write(NetworkIdentityProto.TYPE, mType); if ((mSubscriberId)!= null) { proto.write(NetworkIdentityProto.SUBSCRIBER_ID, android.net.NetworkIdentity.scrubSubscriberId(mSubscriberId)); } proto.write(NetworkIdentityProto.NETWORK_ID, mNetworkId); proto.write(NetworkIdentityProto.ROAMING, mRoaming); proto.write(NetworkIdentityProto.METERED, mMetered); proto.write(NetworkIdentityProto.DEFAULT_NETWORK, mDefaultNetwork); proto.end(start); }
@java.lang.Override public void incrementOperationCount(int uid, int tag, int operationCount) { if ((android.os.Binder.getCallingUid())!= uid) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.UPDATE_DEVICE_STATS, com.android.server.net.NetworkStatsService.TAG); } if (operationCount < 0) { throw newjava.lang.IllegalArgumentException("Operation count can only be incremented"); } if (tag == (android.net.NetworkStats.TAG_NONE)) { throw newjava.lang.IllegalArgumentException("Operation count must have specific tag"); } synchronized(mStatsLock) { final int set = mActiveUidCounterSet.get(uid, android.net.NetworkStats.SET_DEFAULT); mUidOperations.combineValues(mActiveIface, uid, set, tag, android.net.NetworkStats.DEFAULT_NETWORK_YES, 0L, 0L, 0L, operationCount); mUidOperations.combineValues(mActiveIface, uid, set, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.DEFAULT_NETWORK_YES, 0L, 0L, 0L, operationCount); } }
@java.lang.Override public boolean equals(java.lang.Object obj) { if (obj instanceof com.android.server.net.NetworkStatsCollection.Key) { final com.android.server.net.NetworkStatsCollection.Key key = ((com.android.server.net.NetworkStatsCollection.Key) (obj)); return ((((uid) == (key.uid)) && ((set) == (key.set))) && ((tag) == (key.tag))) && ((defaultNetwork) == (key.defaultNetwork))) && (java.util.Objects.equals(ident, key.ident)); } return false; }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(elapsedRealtime); dest.writeInt(size); dest.writeInt(capacity); dest.writeStringArray(iface); dest.writeIntArray(uid); dest.writeIntArray(set); dest.writeIntArray(tag); dest.writeIntArray(defaultNetwork); dest.writeIntArray(metered); dest.writeIntArray(roaming); dest.writeLongArray(rxBytes); dest.writeLongArray(rxPackets); dest.writeLongArray(txBytes); dest.writeLongArray(txPackets); dest.writeLongArray(operations); }
public void dump(com.android.internal.util.IndentingPrintWriter pw) { for (com.android.server.net.NetworkStatsCollection.Key key : getSortedKeys()) { pw.print("ident="); pw.print(key.ident.toString()); pw.print(" uid="); pw.print(key.uid); pw.print(" set="); pw.print(android.net.NetworkStats.setToString(key.set)); pw.print(" tag="); pw.print(android.net.NetworkStats.tagToString(key.tag)); pw.print(" defaultNetwork="); pw.println(android.net.NetworkStats.defaultNetworkToString(key.defaultNetwork)); final android.net.NetworkStatsHistory history = mStats.get(key); pw.increaseIndent(); history.dump(pw, true); pw.decreaseIndent(); } }
public void recordData(com.android.server.net.NetworkIdentitySet ident, int uid, int set, int tag, int defaultNetwork, long start, long end, android.net.NetworkStats.Entry entry) { final android.net.NetworkStatsHistory history = findOrCreateHistory(ident, uid, set, tag, defaultNetwork); history.recordData(start, end, entry); noteRecordedHistory(history.getStart(), history.getEnd(), ((entry.rxBytes) + (entry.txBytes))); }
@java.lang.Deprecated public void readLegacyNetwork(java.io.File file) throwsjava.io.IOException { final android.util.AtomicFile inputFile = new android.util.AtomicFile(file);java.io.DataInputStream in = null; try { in = newjava.io.DataInputStream(newjava.io.BufferedInputStream(inputFile.openRead())); final int magic = in.readInt(); if (magic!= (com.android.server.net.NetworkStatsCollection.FILE_MAGIC)) { throw newjava.net.ProtocolException(("Bad magic: " + magic)); } final int version = in.readInt(); switch (version) { case com.android.server.net.NetworkStatsCollection.VERSION_NETWORK_INIT : { final int size = in.readInt(); for (int i = 0; i < size; i++) { final com.android.server.net.NetworkIdentitySet ident = new com.android.server.net.NetworkIdentitySet(in); final android.net.NetworkStatsHistory history = new android.net.NetworkStatsHistory(in); final com.android.server.net.NetworkStatsCollection.Key key = new com.android.server.net.NetworkStatsCollection.Key(ident, UID_ALL, SET_ALL, TAG_NONE, DEFAULT_NETWORK_ALL); recordHistory(key, history); } break; } default : { throw newjava.net.ProtocolException(("Unsupported version: " + version)); } } } catch (java.io.FileNotFoundException e) { } finally { libcore.io.IoUtils.closeQuietly(in); } }
private android.net.NetworkStatsHistory findOrCreateHistory(com.android.server.net.NetworkIdentitySet ident, int uid, int set, int tag, int defaultNetwork) { final com.android.server.net.NetworkStatsCollection.Key key = new com.android.server.net.NetworkStatsCollection.Key(ident, uid, set, tag, defaultNetwork); final android.net.NetworkStatsHistory existing = mStats.get(key); android.net.NetworkStatsHistory updated = null; if (existing == null) { updated = new android.net.NetworkStatsHistory(mBucketDuration, 10); } else if ((existing.getBucketDuration())!= (mBucketDuration)) { updated = new android.net.NetworkStatsHistory(existing, mBucketDuration); } if (updated!= null) { mStats.put(key, updated); return updated; } else { return existing; } }
private void dumpCheckin(java.io.PrintWriter pw, long start, long end, android.net.NetworkTemplate groupTemplate,java.lang.String groupPrefix) { final android.util.ArrayMap<com.android.server.net.NetworkStatsCollection.Key, android.net.NetworkStatsHistory> grouped = new android.util.ArrayMap(); for (int i = 0; i < (mStats.size()); i++) { final com.android.server.net.NetworkStatsCollection.Key key = mStats.keyAt(i); final android.net.NetworkStatsHistory value = mStats.valueAt(i); if (!(com.android.server.net.NetworkStatsCollection.templateMatches(groupTemplate, key.ident))) continue; if ((key.set) >= (android.net.NetworkStats.SET_DEBUG_START)) continue; final com.android.server.net.NetworkStatsCollection.Key groupKey = new com.android.server.net.NetworkStatsCollection.Key(null, key.uid, key.set, key.tag, key.defaultNetwork); android.net.NetworkStatsHistory groupHistory = grouped.get(groupKey); if (groupHistory == null) { groupHistory = new android.net.NetworkStatsHistory(value.getBucketDuration()); grouped.put(groupKey, groupHistory); } groupHistory.recordHistory(value, start, end); } for (int i = 0; i < (grouped.size()); i++) { final com.android.server.net.NetworkStatsCollection.Key key = grouped.keyAt(i); final android.net.NetworkStatsHistory value = grouped.valueAt(i); if ((value.size()) == 0) continue; pw.print("c,"); pw.print(groupPrefix); pw.print(','); pw.print(key.uid); pw.print(','); pw.print(android.net.NetworkStats.setToCheckinString(key.set)); pw.print(','); pw.print(groupPrefix); pw.print(','); pw.print(key.tag); pw.println(); value.dumpCheckin(pw); } }
public void write(java.io.DataOutputStream out) throwsjava.io.IOException { finaljava.util.HashMap<com.android.server.net.NetworkIdentitySet,java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key>> keysByIdent = com.google.android.collect.Maps.newHashMap(); for (com.android.server.net.NetworkStatsCollection.Key key : mStats.keySet()) {java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> keys = keysByIdent.get(key.ident); if (keys == null) { keys = com.google.android.collect.Lists.newArrayList(); keysByIdent.put(key.ident, keys); } keys.add(key); } out.writeInt(com.android.server.net.NetworkStatsCollection.FILE_MAGIC); out.writeInt(com.android.server.net.NetworkStatsCollection.VERSION_WITH_DEFAULT_NETWORK); out.writeInt(keysByIdent.size()); for (com.android.server.net.NetworkIdentitySet ident : keysByIdent.keySet()) { finaljava.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> keys = keysByIdent.get(ident); ident.writeToStream(out); out.writeInt(keys.size()); for (com.android.server.net.NetworkStatsCollection.Key key : keys) { final android.net.NetworkStatsHistory history = mStats.get(key); out.writeInt(key.uid); out.writeInt(key.set); out.writeInt(key.tag); history.writeToStream(out); } } out.flush(); }
public void removeUids(int[] uids) { finaljava.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> knownKeys = com.google.android.collect.Lists.newArrayList(); knownKeys.addAll(mStats.keySet()); for (com.android.server.net.NetworkStatsCollection.Key key : knownKeys) { if (com.android.internal.util.ArrayUtils.contains(uids, key.uid)) { if ((key.tag) == (TAG_NONE)) { final android.net.NetworkStatsHistory uidHistory = mStats.get(key); final android.net.NetworkStatsHistory removedHistory = findOrCreateHistory(key.ident, com.android.server.net.UID_REMOVED, com.android.server.net.SET_DEFAULT, com.android.server.net.TAG_NONE, com.android.server.net.DEFAULT_NETWORK_ALL); removedHistory.recordEntireHistory(uidHistory); } mStats.remove(key); mDirty = true; } } }
public android.net.NetworkStats getSummary(android.net.NetworkTemplate template, long start, long end, @com.android.server.net.NetworkStatsAccess.Level int accessLevel, int callerUid) { final long now =java.lang.System.currentTimeMillis(); final android.net.NetworkStats stats = new android.net.NetworkStats((end - start), 24); if (start == end) return stats; final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); android.net.NetworkStatsHistory.Entry historyEntry = null; for (int i = 0; i < (mStats.size()); i++) { final com.android.server.net.NetworkStatsCollection.Key key = mStats.keyAt(i); if (((com.android.server.net.NetworkStatsCollection.templateMatches(template, key.ident)) && (com.android.server.net.NetworkStatsAccess.isAccessibleToUser(key.uid, callerUid, accessLevel))) && ((key.set) < (android.net.NetworkStats.SET_DEBUG_START))) { final android.net.NetworkStatsHistory value = mStats.valueAt(i); historyEntry = value.getValues(start, end, now, historyEntry); entry.iface = IFACE_ALL; entry.uid = key.uid; entry.set = key.set; entry.tag = key.tag; entry.defaultNetwork = key.defaultNetwork; entry.metered = (key.ident.isAnyMemberMetered())? METERED_YES : METERED_NO; entry.roaming = (key.ident.isAnyMemberRoaming())? ROAMING_YES : ROAMING_NO; entry.rxBytes = historyEntry.rxBytes; entry.rxPackets = historyEntry.rxPackets; entry.txBytes = historyEntry.txBytes; entry.txPackets = historyEntry.txPackets; entry.operations = historyEntry.operations; if (!(entry.isEmpty())) { stats.combineValues(entry); } } } return stats; }
public void read(java.io.DataInputStream in) throwsjava.io.IOException { final int magic = in.readInt(); if (magic!= (com.android.server.net.NetworkStatsCollection.FILE_MAGIC)) { throw newjava.net.ProtocolException(("Bad magic: " + magic)); } final int version = in.readInt(); switch (version) { case com.android.server.net.NetworkStatsCollection.VERSION_UNIFIED_INIT : case com.android.server.net.NetworkStatsCollection.VERSION_WITH_DEFAULT_NETWORK : { final int identSize = in.readInt(); for (int i = 0; i < identSize; i++) { final com.android.server.net.NetworkIdentitySet ident = new com.android.server.net.NetworkIdentitySet(in); final int size = in.readInt(); for (int j = 0; j < size; j++) { final int uid = in.readInt(); final int set = in.readInt(); final int tag = in.readInt(); final int defaultNetwork = (version >= (com.android.server.net.NetworkStatsCollection.VERSION_WITH_DEFAULT_NETWORK))? in.readInt() : DEFAULT_NETWORK_YES; final com.android.server.net.NetworkStatsCollection.Key key = new com.android.server.net.NetworkStatsCollection.Key(ident, uid, set, tag, defaultNetwork); final android.net.NetworkStatsHistory history = new android.net.NetworkStatsHistory(in); recordHistory(key, history); } } break; } default : { throw newjava.net.ProtocolException(("Unknown version: " + version)); } } }
protected void executeDeviceTestClassNoRestrictBackground(java.lang.String className) throwsjava.lang.Exception { boolean originalRestriction = ensureRestrictBackgroundPolicyOff(); executeDeviceTestClass(className); restoreRestrictBackgroundPolicyTo(originalRestriction); }
public void initialize(int gsmSignalStrength, int gsmBitErrorRate, int cdmaDbm, int cdmaEcio, int evdoDbm, int evdoEcio, int evdoSnr, boolean gsm) { initialize(gsmSignalStrength, gsmBitErrorRate, cdmaDbm, cdmaEcio, evdoDbm, evdoEcio, evdoSnr, 99, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, 0, gsm, false, android.telephony.SignalStrength.DEFAULT_LTE_RSRP_THRESHOLDS); }
public void initialize(int gsmSignalStrength, int gsmBitErrorRate, int cdmaDbm, int cdmaEcio, int evdoDbm, int evdoEcio, int evdoSnr, int lteSignalStrength, int lteRsrp, int lteRsrq, int lteRssnr, int lteCqi, int lteRsrpBoost, boolean gsm, boolean useOnlyRsrpForLteLevel) { mGsmSignalStrength = gsmSignalStrength; mGsmBitErrorRate = gsmBitErrorRate; mCdmaDbm = cdmaDbm; mCdmaEcio = cdmaEcio; mEvdoDbm = evdoDbm; mEvdoEcio = evdoEcio; mEvdoSnr = evdoSnr; mLteSignalStrength = lteSignalStrength; mLteRsrp = lteRsrp; mLteRsrq = lteRsrq; mLteRssnr = lteRssnr; mLteCqi = lteCqi; mLteRsrpBoost = lteRsrpBoost; mTdScdmaRscp = android.telephony.SignalStrength.INVALID; isGsm = gsm; mUseOnlyRsrpForLteLevel = useOnlyRsrpForLteLevel; setLteRsrpThresholds(lteRsrpThresholds); if (android.telephony.SignalStrength.DBG) android.telephony.SignalStrength.log(("initialize " + (toString()))); }
@org.junit.Test public void testEnableDisableInterleaved() throwsjava.util.concurrent.TimeoutException { for (java.lang.Class profile : mProfiles) { setProfileState(profile, BluetoothAdapter.STATE_ON); setProfileState(profile, BluetoothAdapter.STATE_OFF); } int waitTime = com.android.bluetooth.btservice.ProfileServiceTest.ASYNC_CALL_TIMEOUT_MILLIS; for (java.lang.Class profile : mProfiles) { verify(mMockAdapterService, timeout(waitTime)).onProfileServiceStateChanged(eq(profile.getName()), eq(BluetoothAdapter.STATE_ON)); waitTime = 0; } waitTime = com.android.bluetooth.btservice.ProfileServiceTest.ASYNC_CALL_TIMEOUT_MILLIS; for (java.lang.Class profile : mProfiles) { verify(mMockAdapterService, timeout(waitTime)).onProfileServiceStateChanged(eq(profile.getName()), eq(BluetoothAdapter.STATE_OFF)); waitTime = 0; } }
private void updateButtonState() {java.lang.String hostname = mHostnameView.getText().toString();java.util.regex.Matcher uriMatcher = com.android.bips.ui.AddManualPrinterDialog.PRINTER_URI_PATTERN.matcher(hostname); mAddButton.setEnabled(uriMatcher.matches()); }
public void addManualPrinter(java.lang.String uriString, com.android.bips.discovery.ManualDiscovery.PrinterAddCallback callback) { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, ("addManualPrinter " + uriString)); android.net.Uri printerUri = android.net.Uri.parse(("ipp://" + uriString)); int givenPort = printerUri.getPort();java.lang.String givenPath = printerUri.getPath();java.lang.String hostname = printerUri.getHost();java.util.Set<android.net.Uri> uris = newjava.util.LinkedHashSet<>(); for (android.net.Uri uri : com.android.bips.discovery.ManualDiscovery.IPP_URIS) {java.lang.String authority = (hostname + ":") + (givenPort == (-1)? uri.getPort() : givenPort);java.lang.String path = (android.text.TextUtils.isEmpty(givenPath))? uri.getPath() : givenPath; uris.add(uri.buildUpon().encodedAuthority(authority).path(path).build()); } new com.android.bips.discovery.ManualDiscovery.CapabilitiesFinder(uris, callback); }
@java.lang.Override publicjava.lang.String toString() {java.lang.String iccIdToPrint = android.telephony.SubscriptionInfo.givePrintableIccid(mIccId); return ((((((((((((((((((((((((((((( "{id=" + (mId)) + ", iccId=") + iccIdToPrint) + ", displayName=") + (mDisplayName)) + ", carrierName=") + (mCarrierName)) + ", nameSource=") + (mNameSource)) + ", iconTint=") + (mIconTint)) + ", dataRoaming=") + (mDataRoaming)) + ", mcc=") + (mMcc)) + ", mnc=") + (mMnc)) + ", isEmbedded=") + (mIsEmbedded)) + ", accessRules=") + (java.util.Arrays.toString(mAccessRules)) + ", cardId=") + (mCardId)) + "}"; }
publicjava.lang.String getCardId() { return (this.mCardId) == null? "" : this.mCardId; }
public void update(android.content.Context c, com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.uicc.IccCardStatus ics) { synchronized(mLock) { com.android.internal.telephony.uicc.IccCardStatus.CardState oldState = mCardState; mCardState = ics.mCardState; mContext = c; mCi = ci; mIccid = ics.iccid; mCardId = ics.iccid; if ((mCardState)!= (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT)) { if ((mUiccProfile) == null) { mUiccProfile = new com.android.internal.telephony.uicc.UiccProfile(mContext, mCi, ics, mPhoneId, this); } else { mUiccProfile.update(mContext, mCi, ics); } } else { throw newjava.lang.RuntimeException("Card state is absent when updating!"); } } }
@com.android.internal.annotations.VisibleForTesting(visibility = VisibleForTesting.Visibility.PACKAGE) public android.net.Uri insertEmptySubInfoRecord(java.lang.String iccId, int slotIndex) { android.content.ContentResolver resolver = mContext.getContentResolver(); android.content.ContentValues value = new android.content.ContentValues(); value.put(SubscriptionManager.ICC_ID, iccId); int color = getUnusedColor(mContext.getOpPackageName()); value.put(SubscriptionManager.COLOR, color); value.put(SubscriptionManager.SIM_SLOT_INDEX, slotIndex); value.put(SubscriptionManager.CARRIER_NAME, "");java.lang.String cardId = com.android.internal.telephony.uicc.UiccController.getInstance().getUiccCardForPhone(slotIndex).getCardId(); if (cardId!= null) { value.put(SubscriptionManager.CARD_ID, cardId); } else { value.put(SubscriptionManager.CARD_ID, iccId); } android.net.Uri uri = resolver.insert(SubscriptionManager.CONTENT_URI, value); refreshCachedActiveSubscriptionInfoList(); return uri; }
private void handleSimLocked(int slotId,java.lang.String reason) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId])!= null) && (com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId].equals(com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM))) { logd((("SIM" + (slotId + 1)) + " is a hot plug in")); com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = null; }java.lang.String iccId = com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]; if (iccId == null) { com.android.internal.telephony.uicc.IccRecords records = com.android.internal.telephony.SubscriptionInfoUpdater.mPhone[slotId].getIccCard().getIccRecords(); if ((stripIccIdSuffix(records.getFullIccId())) == null) { logd("Got IccID null"); return; } com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = stripIccIdSuffix(records.getFullIccId()); } else { logd(((("Querying IccId its already set sIccid[" + slotId) + "]=") + iccId)); } if (isAllIccIdQueryDone()) { updateSubscriptionInfoByIccId(); } updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED, reason); broadcastSimCardStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_PRESENT, reason); broadcastSimApplicationStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED, reason); }
private void handleSimAbsent(int slotId) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId])!= null) && (!(com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId].equals(com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM)))) { logd((("SIM" + (slotId + 1)) + " hot plug out")); } com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM; if (isAllIccIdQueryDone()) { updateSubscriptionInfoByIccId(); } updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_ABSENT); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_ABSENT, null); broadcastSimCardStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_ABSENT, null); broadcastSimApplicationStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_NOT_READY, null); }
private void broadcastSimApplicationStateChanged(int phoneId,java.lang.String state,java.lang.String reason) { if (!(com.android.internal.telephony.SubscriptionInfoUpdater.sSimApplicationState[phoneId].equals(state))) { com.android.internal.telephony.SubscriptionInfoUpdater.sSimApplicationState[phoneId] = state; android.content.Intent i = new android.content.Intent(android.content.Intent.ACTION_SIM_APPLICATION_STATE_CHANGED); i.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); i.putExtra(IccCardConstants.INTENT_KEY_ICC_STATE, state); i.putExtra(IccCardConstants.INTENT_KEY_LOCKED_REASON, reason); android.telephony.SubscriptionManager.putPhoneIdAndSubIdExtra(i, phoneId); logd(((((("Broadcasting intent ACTION_SIM_APPLICATION_STATE_CHANGED " + state) + " reason ") + reason) + " for phone: ") + phoneId)); com.android.internal.telephony.IntentBroadcaster.getInstance().broadcastStickyIntent(i, UserHandle.USER_ALL); } }
private void broadcastSimCardStateChanged(int phoneId,java.lang.String state) { if (!(com.android.internal.telephony.SubscriptionInfoUpdater.sSimCardState[phoneId].equals(state))) { com.android.internal.telephony.SubscriptionInfoUpdater.sSimCardState[phoneId] = state; android.content.Intent i = new android.content.Intent(android.content.Intent.ACTION_SIM_CARD_STATE_CHANGED); i.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); i.putExtra(IccCardConstants.INTENT_KEY_ICC_STATE, state); android.telephony.SubscriptionManager.putPhoneIdAndSubIdExtra(i, phoneId); logd(((("Broadcasting intent ACTION_SIM_CARD_STATE_CHANGED " + state) + " for phone: ") + phoneId)); android.app.ActivityManager.broadcastStickyIntent(i, UserHandle.USER_ALL); } }
private void handleSimError(int slotId) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId])!= null) && (!(com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId].equals(com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM)))) { logd((("SIM" + (slotId + 1)) + " Error")); } com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM; if (isAllIccIdQueryDone()) { updateSubscriptionInfoByIccId(); } updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR, IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR); broadcastSimCardStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR, IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR); broadcastSimApplicationStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_NOT_READY, null); }
public long splice(java.io.FileDescriptor fdIn, libcore.util.MutableLong offIn,java.io.FileDescriptor fdOut, libcore.util.MutableLong offOut, long len, int flags) throws android.system.ErrnoException;
public static long splice(java.io.FileDescriptor fdIn, android.system.Int64Ref offIn,java.io.FileDescriptor fdOut, android.system.Int64Ref offOut, long len, int flags) throws android.system.ErrnoException { libcore.util.MutableLong internalOffIn = (offIn == null)? null : new libcore.util.MutableLong(offIn.value); libcore.util.MutableLong internalOffOut = (offOut == null)? null : new libcore.util.MutableLong(offOut.value); try { return Libcore.os.splice(fdIn, internalOffIn, fdOut, internalOffOut, len, flags); } finally { if (offIn!= null) { offIn.value = internalOffIn.value; } if (offOut!= null) { offOut.value = internalOffOut.value; } } }
public long splice(java.io.FileDescriptor fdIn, libcore.util.MutableLong offIn,java.io.FileDescriptor fdOut, libcore.util.MutableLong offOut, long len, int flags) throws android.system.ErrnoException { return os.splice(fdIn, offIn, fdOut, offOut, len, flags); }
public native long splice(java.io.FileDescriptor fdIn, libcore.util.MutableLong offIn,java.io.FileDescriptor fdOut, libcore.util.MutableLong offOut, long len, int flags) throws android.system.ErrnoException;
@java.lang.Override public void setUp() throwsjava.lang.Exception { super.setUp(); android.os.Bundle bundle = new android.os.Bundle(); bundle.putLong(com.android.documentsui.StubProvider.EXTRA_SIZE, 500L); mDocsHelper.configure(null, bundle); initTestFiles(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(TestNotificationService.ACTION_OPERATION_RESULT); context.registerReceiver(mReceiver, filter); context.sendBroadcast(new android.content.Intent(com.android.documentsui.services.TestNotificationService.ACTION_CHANGE_CANCEL_MODE)); mOperationExecuted = false; mErrorReason = "Unexpected response from Notification"; mCountDownLatch = newjava.util.concurrent.CountDownLatch(1); }
private boolean scanCompleteStatus() { return (((mNetworkScanStatus) == (android.telephony.cts.TelephonyManagerTest.EVENT_NETWORK_SCAN_COMPLETED)) && ((mScanResults)!= null)) || ((mNetworkScanStatus) == (android.telephony.cts.TelephonyManagerTest.EVENT_NETWORK_SCAN_ERROR)); }
@org.junit.After public void tearDown() throwsjava.lang.Exception { if ((mListener)!= null) { mTelephonyManager.listen(mListener, PhoneStateListener.LISTEN_NONE); } mTestHandlerThread.quit(); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { mTelephonyManager = ((android.telephony.TelephonyManager) (android.telephony.cts.TelephonyManagerTest.getContext().getSystemService(Context.TELEPHONY_SERVICE))); android.telephony.cts.TelephonyManagerTest.mCm = ((android.net.ConnectivityManager) (android.telephony.cts.TelephonyManagerTest.getContext().getSystemService(Context.CONNECTIVITY_SERVICE))); mPackageManager = android.telephony.cts.TelephonyManagerTest.getContext().getPackageManager(); mNetworkScanStatus = android.telephony.cts.TelephonyManagerTest.EVENT_NETWORK_SCAN_COMPLETED; mTestHandlerThread = new android.telephony.cts.TelephonyManagerTest.NetworkScanHandlerThread(android.telephony.cts.TelephonyManagerTest.TAG); mTestHandlerThread.start(); }
@org.junit.Test public void testRequestNetworkScan() throwsjava.lang.InterruptedException { if (!(mTelephonyManager.hasCarrierPrivileges())) { android.util.Log.d(android.telephony.cts.TelephonyManagerTest.TAG, "Skipping test that requires carrier privileges."); return; } int ranGsm = RadioNetworkConstants.RadioAccessNetworks.GERAN; int[] gsmBands = new int[]{ RadioNetworkConstants.GeranBands.BAND_T380, RadioNetworkConstants.GeranBands.BAND_T410 }; int[] gsmChannels = new int[]{ 1, 2, 3, 4 }; android.telephony.RadioAccessSpecifier gsm = new android.telephony.RadioAccessSpecifier(ranGsm, gsmBands, gsmChannels); int ranLte = RadioNetworkConstants.RadioAccessNetworks.EUTRAN; int[] lteBands = new int[]{ RadioNetworkConstants.EutranBands.BAND_10, RadioNetworkConstants.EutranBands.BAND_11 }; int[] lteChannels = new int[]{ 5, 6, 7, 8 }; android.telephony.RadioAccessSpecifier lte = new android.telephony.RadioAccessSpecifier(ranLte, lteBands, lteChannels); android.telephony.RadioAccessSpecifier[] radioAccessSpecifier = new android.telephony.RadioAccessSpecifier[]{ gsm, lte }; mNetworkScanRequest = new android.telephony.NetworkScanRequest(android.telephony.NetworkScanRequest.SCAN_TYPE_ONE_SHOT, radioAccessSpecifier, 5, 60, true, 10, null); mNetworkScanCallback = new android.telephony.cts.TelephonyManagerTest.NetworkScanCallbackImpl(); android.os.Message startNetworkScan = mHandler.obtainMessage(android.telephony.cts.TelephonyManagerTest.EVENT_NETWORK_SCAN_START); startNetworkScan.sendToTarget();java.lang.Thread.sleep(android.telephony.cts.TelephonyManagerTest.MAX_INIT_WAIT_MS); android.util.Log.d(android.telephony.cts.TelephonyManagerTest.TAG, ("mScanStatus: " + (mScanStatus))); assertTrue(("ScanStatus not scanComplete or scanError is not scanComplete or scanError is not scanComplete or
@org.junit.Test public void testDeleteTransportModeTransform() throwsjava.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransform(ipSecConfig, new android.os.Binder()); mIpSecService.deleteTransportModeTransform(createTransformResp.resourceId); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI)); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); assertEquals(0, userRecord.mTransformQuotaTracker.mCurrent); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail("IllegalArgumentException on attempt to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }
@org.junit.BeforeClass public static void prepareAgent3() throwsjava.lang.Exception { android.jvmti.attaching.cts.AttachingTest.sAgentFile3 = android.jvmti.attaching.cts.AttachingTest.copyAgentToFile("jvmtiattachingtestagent3"); }
@org.junit.BeforeClass public static void prepareAgent() throwsjava.lang.Exception { android.jvmti.attaching.cts.AttachingTest.sAgentFile = android.jvmti.attaching.cts.AttachingTest.copyAgentToFile("jvmtiattachingtestagent"); }
public com.android.internal.telephony.uicc.UiccSlot getUiccSlotForCardId(java.lang.String cardId) { synchronized(com.android.internal.telephony.uicc.UiccController.mLock) { for (com.android.internal.telephony.uicc.UiccSlot uiccSlot : mUiccSlots) { if (uiccSlot!= null) { com.android.internal.telephony.uicc.UiccCard uiccCard = uiccSlot.getUiccCard(); if (uiccCard!= null) { if (false) { return uiccSlot; } } } } for (com.android.internal.telephony.uicc.UiccSlot uiccSlot : mUiccSlots) { if ((uiccSlot!= null) && (cardId.equals(uiccSlot.getIccId()))) { return uiccSlot; } } return null; } }
@org.junit.Test public void testCreateTwoTransportModeTransformsWithSameSpis() throwsjava.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); try { mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); fail("IpSecService should have thrown an error for reuse of SPI"); } catch (java.lang.IllegalArgumentException expected) { } }
@org.junit.Before public void setUp() { org.mockito.MockitoAnnotations.initMocks(this); mHeadsetService = mock(android.bluetooth.BluetoothHeadsetService.class); mA2dpService = mock(android.bluetooth.BluetoothA2dpService.class); android.bluetooth.BluetoothHeadsetService.HEADSET_SERVICE_FACTORY = new android.bluetooth.BluetoothHeadsetService.Builder(); android.bluetooth.BluetoothA2dpService.HEADSET_SERVICE_FACTORY = new android.bluetooth.BluetoothA2dpService.Builder(); android.bluetooth.BluetoothHeadsetService.A2DP_SERVICE_FACTORY = new android.bluetooth.BluetoothHeadsetService.A2DP_Service.Builder(); android.bluetooth.BluetoothHeadsetService.A2DP_SERVICE_FACTORY = new android.bluetooth.BluetoothHeadsetService.A2DP_Service.Builder(); android.bluetooth.BluetoothHeadsetService.A2DP_SERVICE_FACTORY = new android.bluetooth.BluetoothHeadsetService.A2DP_Service.Builder(); android.bluetooth.BluetoothHeadsetService.A2DP_SERVICE_FACTORY = new android.bluetooth.BluetoothHeadsetService.A2DP_Service.Builder(); android.bluetooth.BluetoothHeadsetService.A2DP_SERVICE_FACTORY = new android.bluetooth.BluetoothHeadsetService.A2DP_Service.Builder(); android.bluetooth.BluetoothA2dpService.A2DP_SERVICE_FACTORY = new android.bluetooth.BluetoothA2dpService.A2DP_Service.Builder(); android.bluetooth.BluetoothHeadsetService.A2DP_SERVICE_FACTORY.setHeadsetService(mA2dpService); android.bluetooth.BluetoothHeadsetService.A2DP_SERVICE_FACTORY.setHeadsetService(mA2dpService); android.bluetooth.BluetoothHeadsetService.A2DP_SERVICE_FACTORY.setHeadsetService(mA2dpService); android.bluetooth.BluetoothHeadsetService.A2DP_SERVICE_FACTORY.setHeadsetService(mHeadsetService); android.bluetooth.BluetoothHeadsetService.A2DP_SERVICE_FACTORY.setA2DP_SERVICE_FACTORY = new android.bluetooth.BluetoothHeadsetService.A2DP_Service.
@java.lang.Override public void onDestroy() { debugLog("onDestroy()"); mProfileObserver.stop(); }
public void deactivateDataCall(int cid, int reason, android.telephony.data.DataServiceCallback callback) { callback.onDeactivateDataCallComplete(DataServiceCallback.RESULT_ERROR_UNSUPPORTED); }
public void setupDataCall(int accessNetworkType, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, int reason, android.net.LinkProperties linkProperties, android.telephony.data.DataServiceCallback callback) { callback.onSetupDataCallComplete(DataServiceCallback.RESULT_ERROR_UNSUPPORTED, null); }
@java.lang.Override public int hashCode() { int primeNum = 31; return ((((((((((((mGsmSignalStrength) * primeNum) + ((mGsmBitErrorRate) * primeNum)) + ((mCdmaDbm) * primeNum)) + ((mCdmaEcio) * primeNum)) + ((mEvdoDbm) * primeNum)) + ((mEvdoEcio) * primeNum)) + ((mEvdoSnr) * primeNum)) + ((mLteSignalStrength) * primeNum)) + ((mLteRsrp) * primeNum)) + ((mLteRsrq) * primeNum)) + ((mLteRssnr) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mTdScdmaRscp) * primeNum)) + (mUseOnlyRsrpForLteLevel? 1 : 0); }
public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mGsmSignalStrength); out.writeInt(mGsmBitErrorRate); out.writeInt(mCdmaDbm); out.writeInt(mCdmaEcio); out.writeInt(mEvdoDbm); out.writeInt(mEvdoEcio); out.writeInt(mEvdoSnr); out.writeInt(mLteSignalStrength); out.writeInt(mLteRsrp); out.writeInt(mLteRsrq); out.writeInt(mLteRssnr); out.writeInt(mLteCqi); out.writeInt(mUseOnlyRsrpForLteLevel); }
private void assertParcelingIsLossless(com.android.internal.telephony.SignalStrength ssi) throwsjava.lang.Exception { android.os.Parcel p = android.os.Parcel.obtain(); ssi.writeToParcel(p, 0); p.setDataPosition(0); com.android.internal.telephony.SignalStrength sso = SignalStrength.CREATOR.createFromParcel(p); assertTrue(sso.equals(ssi)); }
@org.junit.Test public void testDefaults() throwsjava.lang.Exception { com.android.internal.telephony.SignalStrength s = new com.android.internal.telephony.SignalStrength(); assertEquals((-1), s.getCdmaDbm()); assertEquals((-1), s.getCdmaEcio()); assertEquals((-1), s.getEvdoDbm()); assertEquals((-1), s.getEvdoEcio()); assertEquals((-1), s.getEvdoSnr()); assertEquals((-1), s.getGsmBitErrorRate()); assertEquals(99, s.getGsmSignalStrength()); assertEquals(true, s.isGsm()); }
private void setFromNotifierBundle(android.os.Bundle m) { mGsmSignalStrength = m.getInt("GsmSignalStrength"); mGsmBitErrorRate = m.getInt("GsmBitErrorRate"); mCdmaDbm = m.getInt("CdmaDbm"); mCdmaEcio = m.getInt("CdmaEcio"); mEvdoDbm = m.getInt("EvdoDbm"); mEvdoEcio = m.getInt("EvdoEcio"); mEvdoSnr = m.getInt("EvdoSnr"); mLteSignalStrength = m.getInt("LteSignalStrength"); mLteRsrp = m.getInt("LteRsrp"); mLteRsrq = m.getInt("LteRsrq"); mLteRssnr = m.getInt("LteRssnr"); mLteCqi = m.getInt("LteCqi"); mLteRsrpBoost = m.getInt("LteRsrpBoost"); mTdScdmaRscp = m.getInt("TdScdmaRscp"); mIsGsm = m.getBoolean("IsGsm"); mUseOnlyRsrpForLteLevel = m.getBoolean("UseOnlyRsrpForLteLevel"); }
public void fillInNotifierBundle(android.os.Bundle m) { m.putInt("GsmSignalStrength", mGsmSignalStrength); m.putInt("GsmBitErrorRate", mGsmBitErrorRate); m.putInt("CdmaDbm", mCdmaDbm); m.putInt("CdmaEcio", mCdmaEcio); m.putInt("EvdoDbm", mEvdoDbm); m.putInt("EvdoEcio", mEvdoEcio); m.putInt("EvdoSnr", mEvdoSnr); m.putInt("LteSignalStrength", mLteSignalStrength); m.putInt("LteRsrp", mLteRsrp); m.putInt("LteRsrq", mLteRsrq); m.putInt("LteRssnr", mLteRssnr); m.putInt("LteCqi", mLteCqi); m.putInt("TdScdma", mTdScdmaRscp); m.putBoolean("IsGsm", mIsGsm); m.putBoolean("UseOnlyRsrpForLteLevel", mUseOnlyRsrpForLteLevel); }
protected void copyFrom(android.telephony.SignalStrength s) { mGsmSignalStrength = s.mGsmSignalStrength; mGsmBitErrorRate = s.mGsmBitErrorRate; mCdmaDbm = s.mCdmaDbm; mCdmaEcio = s.mCdmaEcio; mEvdoDbm = s.mEvdoDbm; mEvdoEcio = s.mEvdoEcio; mEvdoSnr = s.mEvdoSnr; mLteSignalStrength = s.mLteSignalStrength; mLteRsrp = s.mLteRsrp; mLteRsrq = s.mLteRsrq; mLteRssnr = s.mLteRssnr; mLteCqi = s.mLteCqi; mTdScdmaRscp = s.mTdScdmaRscp; mLteRsrpBoost = s.mLteRsrpBoost; mIsGsm = s.mIsGsm; mUseOnlyRsrpForLteLevel = s.mUseOnlyRsrpForLteLevel; }
@java.lang.Override public boolean equals(java.lang.Object o) { android.telephony.SignalStrength s; try { s = ((android.telephony.SignalStrength) (o)); } catch (java.lang.ClassCastException ex) { return false; } if (o == null) { return false; } return ((((((((((((((((mGsmSignalStrength) == (s.mGsmSignalStrength)) && ((mGsmBitErrorRate) == (s.mGsmBitErrorRate))) && ((mCdmaDbm) == (s.mCdmaDbm))) && ((mCdmaEcio) == (s.mCdmaEcio))) && ((mEvdoDbm) == (s.mEvdoDbm))) && ((mEvdoEcio) == (s.mEvdoEcio))) && ((mEvdoSnr) == (s.mEvdoSnr))) && ((mLteSignalStrength) == (s.mLteSignalStrength))) && ((mLteRsrp) == (s.mLteRsrp))) && ((mLteRsrq) == (s.mLteRsrq))) && ((mLteRssnr) == (s.mLteRssnr))) && ((mLteCqi) == (s.mLteCqi))) && ((mLteRsrpBoost) == (s.mLteRsrpBoost))) && ((mTdScdmaRscp) == (s.mTdScdmaRscp))) && ((mUseOnlyRsrpForLteLevel) == (s.mUseOnlyRsrpForLteLevel)); }
@org.junit.Test public void testParcelUnparcel() throwsjava.lang.Exception { assertParcelingIsLossless(new com.android.internal.telephony.SignalStrength()); com.android.internal.telephony.SignalStrength s = new com.android.internal.telephony.SignalStrength(20, 5, (-95), 10, (-98), (-5), (-2), 45, (-105), (-110), (-115), 13, (-90), 2, false, true); assertParcelingIsLossless(s); }
@java.lang.Override publicjava.lang.String toString() { return ((((((((((((((((((((((((((((((((("SignalStrength:" + + (mGsmSignalStrength)) + ", (mGsmBitErrorRate)) + ", (mCdmaDbm)) + ", (mCdmaEcio)) + ", (mEvdoDbm)) + ", (mEvdoEcio)) + ", (mEvdoSnr)) + ", (mLteSignalStrength)) + ", (mLteRsrp)) + ", (mLteRsrq)) + ", (mLteRssnr)) + ", (mLteRsrpBoost)) + ", (mTdScdmaRscp)) + ", (mUseOnlyRsrpForLteLevel? "gsm|lte" : "cdma")) + ", (mUseOnlyRsrpForLteLevel? "use_only_rsrp_for_lte_level" : "use_rsrp_and_rssnr_for_lte_level")); }
public int getAsuLevel() { int asuLevel = 0; if (isGsm) { if ((mTdScdmaRsrp) == (android.telephony.SignalStrength.INVALID)) { asuLevel = getGsmAsuLevel(); } else { asuLevel = getTdScdmaAsuLevel(); } } else { int cdmaAsuLevel = getCdmaAsuLevel(); int evdoAsuLevel = getEvdoAsuLevel(); if (evdoAsuLevel == 0) { asuLevel = cdmaAsuLevel; } else if (cdmaAsuLevel == 0) { asuLevel = evdoAsuLevel; } else { asuLevel = (cdmaAsuLevel < evdoAsuLevel)? cdmaAsuLevel : evdoAsuLevel; } } if (android.telephony.SignalStrength.DBG) android.telephony.SignalStrength.log(("getAsuLevel=" + asuLevel)); return asuLevel; }
public void updateSubscriptionNickname(int subscriptionId,java.lang.String nickname, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.updateSubscriptionNickname(subscriptionId, nickname, callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void switchToSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.switchToSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void deleteSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.deleteSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void continueOperation(android.content.Intent resolutionIntent, android.os.Bundle resolutionExtras) { if (!(isEnabled())) { android.app.PendingIntent callbackIntent = resolutionIntent.getParcelableExtra(android.telephony.euicc.EuiccManager.EXTRA_EMBEDDED_SUBSCRIPTION_RESOLUTION_CALLBACK_INTENT); if (callbackIntent!= null) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); } return; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.continueOperation(resolutionIntent, resolutionExtras); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void eraseSubscriptions(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.eraseSubscriptions(callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void downloadSubscription(android.telephony.euicc.DownloadableSubscription subscription, boolean switchAfterDownload, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.downloadSubscription(subscription, switchAfterDownload, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void getDownloadableSubscriptionMetadata(android.telephony.euicc.DownloadableSubscription subscription, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.getDownloadableSubscriptionMetadata(subscription, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@android.annotation.Nullable public android.telephony.euicc.EuiccInfo getEuiccInfo() { if (!(isEnabled())) { return null; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) { return null; } try { return controller.getEuiccInfo(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@com.android.internal.telephony.euicc.IEuiccController getIEuiccController() { return IEuiccController.Stub.asInterface(android.os.ServiceManager.getService("econtroller")); }
public void getDefaultDownloadableSubscriptionList(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.getDefaultDownloadableSubscriptionList(mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@android.annotation.SystemApi public int getOtaStatus() { if (!(isEnabled())) { return android.telephony.euicc.EuiccManager.EUICC_OTA_STATUS_UNAVAILABLE; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) { return android.telephony.euicc.EuiccManager.EUICC_OTA_STATUS_UNAVAILABLE; } try { return controller.getOtaStatus(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@android.annotation.Nullable publicjava.lang.String getEid() { if (!(isEnabled())) { return null; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) { return null; } try { return controller.getEid(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void retainSubscriptionsForFactoryReset(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.retainSubscriptionsForFactoryReset(callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
private staticjava.lang.String requestToString(int request) { switch (request) { case com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_SLOT_STATUS : return "GET_SLOT_STATUS"; default : return "<unknown request>"; } }
@java.lang.Override public void setSystemProperty(java.lang.String property,java.lang.String value) { if (getUnitTestMode()) { return; } if ((isPhoneTypeGsm()) || (isPhoneTypeCdmaLte())) { android.telephony.TelephonyManager.setTelephonyProperty(mPhoneId, property, value); } else { super.setSystemProperty(property, value); } }
@java.lang.Override public boolean updateCurrentCarrierInProvider() { if ((isPhoneTypeGsm()) || (isPhoneTypeCdmaLte())) { long currentDds = android.telephony.SubscriptionManager.getDefaultDataSubscriptionId();java.lang.String operatorNumeric = getOperatorNumeric(); logd(((((("updateCurrentCarrierInProvider: mSubId = " + (getSubId())) + " currentDds = ") + currentDds) + " operatorNumeric = ") + operatorNumeric)); if ((!(android.text.TextUtils.isEmpty(operatorNumeric))) && ((getSubId()) == currentDds)) { try { android.net.Uri uri = android.net.Uri.withAppendedPath(Telephony.Carriers.CONTENT_URI, "current"); android.content.ContentValues map = new android.content.ContentValues(); map.put(Telephony.Carriers.NUMERIC, operatorNumeric); mContext.getContentResolver().insert(uri, map); return true; } catch (android.database.SQLException e) { android.telephony.Rlog.e(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, "Couldn't store current operator", e); } } return false; } else { return true; } }
@java.lang.Override publicjava.lang.String getSystemProperty(java.lang.String property,java.lang.String defValue) { if ((isPhoneTypeGsm()) || (isPhoneTypeCdmaLte())) { if (getUnitTestMode()) { return null; } return android.telephony.TelephonyManager.getTelephonyProperty(mPhoneId, property, defValue); } else { return super.getSystemProperty(property, defValue); } }
public android.net.NetworkStats readNetworkStatsSummaryDev() throwsjava.io.IOException { if (!(mStatsXtIfaceAll.exists())) return readNetworkStatsIfaceDev(); final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(newjava.io.FileInputStream(mStatsXtIfaceAll)); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = UID_ALL; entry.set = SET_ALL; entry.tag = TAG_NONE; final boolean active = (reader.nextInt())!= 0; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if (active) { entry.rxBytes += reader.nextLong(); entry.rxPackets += reader.nextLong(); entry.txBytes += reader.nextLong(); entry.txPackets += reader.nextLong(); } stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException |java.lang.NumberFormatException e) { throw newjava.net.ProtocolException("Error parsing stats", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }
@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats readNetworkStatsIfaceDev() throwsjava.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(newjava.io.FileInputStream(mStatsIfaceDev)); reader.finishLine(); reader.finishLine(); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = UID_ALL; entry.set = SET_ALL; entry.tag = TAG_NONE; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); for (int i = 0; i < 6; i++) { reader.nextLong(); } entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException |java.lang.NumberFormatException e) { throw newjava.net.ProtocolException("problem parsing stats", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }
public android.net.NetworkStats readNetworkStatsSummaryXt() throwsjava.io.IOException { if (!(mStatsXtIfaceFmt.exists())) return readNetworkStatsIfaceDev(); final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(newjava.io.FileInputStream(mStatsXtIfaceFmt))); reader.finishLine(); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = UID_ALL; entry.set = SET_ALL; entry.tag = TAG_NONE; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException |java.lang.NumberFormatException e) { throw newjava.net.ProtocolException("Error parsing stats", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }
@java.lang.Override public android.net.NetworkCapabilities createFromParcel(android.os.Parcel in) { android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities(); netCap.mNetworkCapabilities = in.readLong(); netCap.mTransportTypes = in.readLong(); netCap.mLinkUpBandwidthKbps = in.readInt(); netCap.mLinkDownBandwidthKbps = in.readInt(); netCap.mNetworkSpecifier = in.readParcelable(null); netCap.mSignalStrength = in.readInt(); return netCap; }
@java.lang.Override public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt((allowBypass? 1 : 0)); out.writeInt((explicitlySelected? 1 : 0)); out.writeInt((acceptUnvalidated? 1 : 0)); out.writeString(subscriberId); out.writeInt((provisioningNotificationDisabled? 1 : 0)); out.writeInt(managerUid); }
@java.lang.Override public int hashCode() { return ((((((((mNetworkCapabilities) & -1)) + (((int) ((mNetworkCapabilities) >> 32)) * 3)) + (((int) ((mTransportTypes) & -1)) * 5)) + (((int) ((mTransportTypes) >> 32)) * 7)) + ((mLinkUpBandwidthKbps) * 11)) + ((mLinkDownBandwidthKbps) * 13)) + ((java.util.Objects.hashCode(mNetworkSpecifier)) * 17)) + ((mSignalStrength) * 19) + ((java.util.Objects.hashCode(mAllowedUids)) * 23)); }
public boolean allowsUid(int uid) { if (null == (mAllowedUids)) return true; for (android.net.UidRange range : mAllowedUids) { if (range.contains(uid)) { return true; } } return false; }
private void updateUids(com.android.server.connectivity.NetworkAgentInfo nai, android.net.NetworkCapabilities prevNc, android.net.NetworkCapabilities newNc) { finaljava.util.Set<android.net.UidRange> prevRanges = (null == prevNc)? null : prevNc.getUids(); finaljava.util.Set<android.net.UidRange> newRanges = (null == newNc)? null : newNc.getUids(); finaljava.util.ArrayList<android.net.UidRange> removedRanges; finaljava.util.ArrayList<android.net.UidRange> addedRanges; if (null == prevRanges) { if (null == newRanges) { return; } removedRanges = null; addedRanges = newjava.util.ArrayList(newRanges); } else if (null == newNc) { removedRanges = newjava.util.ArrayList(prevRanges); addedRanges = null; } else { removedRanges = newjava.util.ArrayList(); addedRanges = newjava.util.ArrayList(); for (final android.net.UidRange prevRange : prevRanges) { if (!(newRanges.contains(prevRange))) { removedRanges.add(prevRange); } } for (final android.net.UidRange newRange : newRanges) { if (!(prevRanges.contains(newRange))) { addedRanges.add(newRange); } } } try { if ((null!= removedRanges) && (!(removedRanges.isEmpty()))) { final android.net.UidRange[] removedRangesArray = new android.net.UidRange[removedRanges.size()]; removedRanges.toArray(removedRangesArray); mNetd.removeVpnUidRanges(nai.network.netId, removedRangesArray); } if ((null!= addedRanges) && (!(addedRanges.isEmpty()))) { final android.net.UidRange[] addedRangesArray = new android.net.UidRange[addedRanges.size()]; addedRanges.toArray(addedRangesArray); mNetd.addVpnUidRanges(nai.network.netId, addedRangesArray); } } catch (java.lang.Exception e) { com.android.server.connectivity.ConnectivityService.logeUids(e); } }
publicjava.util.Set<android.net.UidRange> getAllowedUids() { return null == (mAllowedUids)? null : new android.util.ArraySet(mAllowedUids); }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(mNetworkCapabilities); dest.writeLong(mTransportTypes); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mLinkDownBandwidthKbps); dest.writeParcelable(((android.os.Parcelable) (mNetworkSpecifier)), flags); dest.writeInt(mSignalStrength); dest.writeArraySet(new android.util.ArraySet(mAllowedUids)); }
private void prepareInternal(java.lang.String newPackage) { long token = android.os.Binder.clearCallingIdentity(); try { if ((mInterface)!= null) { mStatusIntent = null; agentDisconnect(); jniReset(mInterface); mInterface = null; mNetworkCapabilities.setAllowedUids(null); } if ((mConnection)!= null) { try { mConnection.mService.transact(IBinder.LAST_CALL_TRANSACTION, android.os.Parcel.obtain(), null, IBinder.FLAG_ONEWAY); } catch (java.lang.Exception e) { } mContext.unbindService(mConnection); mConnection = null; } else if ((mLegacyVpnRunner)!= null) { mLegacyVpnRunner.exit(); mLegacyVpnRunner = null; } try { mNetd.denyProtect(mOwnerUID); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, (("Failed to disallow UID " + (mOwnerUID)) + " to call protect() ") + e)); } android.util.Log.i(com.android.server.connectivity.Vpn.TAG, (("Prepare from " + (mPackage)) + " to ") + newPackage)); mPackage = newPackage; mOwnerUID = getAppUid(newPackage, mUserHandle); try { mNetd.allowProtect(mOwnerUID); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, (("Failed to allow UID " + (mOwnerUID)) + " to call protect() ") + e)); } mConfig = null; updateState(DetailedState.IDLE, "prepare"); setVpnForcedLocked(mLockdown); } finally { android.os.Binder.restoreCallingIdentity(token); } }
public void onUserAdded(int userHandle) { android.content.pm.UserInfo user = android.os.UserManager.get(mContext).getUserInfo(userHandle); if ((user.isRestricted()) && ((user.restrictedProfileParentId) == (mUserHandle))) { synchronized(this) { finaljava.util.Set<android.net.UidRange> existingRanges = mNetworkCapabilities.getAllowedUids(); if (existingRanges!= null) { try { addUserToRanges(existingRanges, userHandle, mConfig.allowedApplications, mConfig.disallowedApplications); mNetworkCapabilities.setAllowedUids(existingRanges); if ((mNetworkAgent)!= null) { finaljava.util.List<android.net.UidRange> ranges = com.android.server.connectivity.Vpn.uidRangesForUser(userHandle, mNetworkCapabilities.getAllowedUids()); mNetworkAgent.addUidRanges(ranges.toArray(new android.net.UidRange[ranges.size()])); } } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, "Failed to add restricted user to owner", e); } } setVpnForcedLocked(mLockdown); } }
public void onUserRemoved(int userHandle) { android.content.pm.UserInfo user = android.os.UserManager.get(mContext).getUserInfo(userHandle); if ((user.isRestricted()) && ((user.restrictedProfileParentId) == (mUserHandle))) { synchronized(this) { finaljava.util.Set<android.net.UidRange> existingRanges = mNetworkCapabilities.getAllowedUids(); if (existingRanges!= null) { try { finaljava.util.List<android.net.UidRange> removedRanges = com.android.server.connectivity.Vpn.uidRangesForUser(userHandle, existingRanges); if ((mNetworkAgent)!= null) { mNetworkAgent.removeUidRanges(removedRanges.toArray(new android.net.UidRange[removedRanges.size()])); } existingRanges.removeAll(removedRanges); mNetworkCapabilities.setAllowedUids(existingRanges); setVpnForcedLocked(mLockdown); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, "Failed to remove restricted user to owner", e); } } setVpnForcedLocked(mLockdown); } } }
@java.lang.Override public void interfaceRemoved(java.lang.String interfaze) { synchronized(this) { if ((interfaze.equals(mInterface)) && ((jniCheck(interfaze)) == 0)) { mStatusIntent = null; mNetworkCapabilities.setAllowedUids(null); mConfig = null; mInterface = null; if ((mConnection)!= null) { mContext.unbindService(mConnection); mConnection = null; agentDisconnect(); } else if ((mLegacyVpnRunner)!= null) { mLegacyVpnRunner.exit(); mLegacyVpnRunner = null; } } }
public synchronized boolean appliesToUid(int uid) { if (!(isRunningLocked())) { return false; } return mNetworkCapabilities.allowUid(uid); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj == null) || ((obj instanceof android.net.NetworkCapabilities) == false)) return false; android.net.NetworkCapabilities that = ((android.net.NetworkCapabilities) (obj)); return ((((equalsNetCapabilities(that)) && (equalsTransportTypes(that))) && (equalsLinkBandwidths(that))) && (equalsSignalStrength(that))) && (equalsSpecifier(that)) && (equalsAllowedUids(that)); }
public static com.android.server.connectivity.KeepalivePacketData nattKeepalivePacket(java.net.InetAddress srcAddress, int srcPort,java.net.InetAddress dstAddress, int dstPort) throws com.android.server.connectivity.KeepalivePacketData.InvalidPacketException { if ((!(srcAddress instanceofjava.net.Inet4Address)) || (!(dstAddress instanceofjava.net.Inet4Address))) { throw new com.android.server.connectivity.KeepalivePacketData.InvalidPacketException(ERROR_INVALID_IP_ADDRESS); } if (dstPort!= (NATT_PORT)) { throw new com.android.server.connectivity.KeepalivePacketData.InvalidPacketException(ERROR_INVALID_PORT); }java.nio.ByteBuffer buf =java.nio.ByteBuffer.allocate(length); buf.order(java.nio.ByteOrder.BIG_ENDIAN); buf.putShort(((short) (17664))); buf.putShort(((short) (length))); buf.putInt(0); buf.put(((byte) (64))); buf.put(((byte) (OsConstants.IPPROTO_UDP))); int ipChecksumOffset = buf.position(); buf.putShort(((short) (0))); buf.put(srcAddress.getAddress()); buf.put(dstAddress.getAddress()); buf.putShort(((short) (srcPort))); buf.putShort(((short) (dstPort))); buf.putShort(((short) (length - 20))); int udpChecksumOffset = buf.position(); buf.putShort(((short) (0))); buf.put(((byte) (255))); buf.putShort(ipChecksumOffset, android.net.util.IpUtils.ipChecksum(buf, 0)); buf.putShort(udpChecksumOffset, android.net.util.IpUtils.udpChecksum(buf, 0, ConnectivityConstants.IPV4_HEADER_LENGTH)); return new com.android.server.connectivity.KeepalivePacketData(srcAddress, srcPort, dstAddress, dstPort, buf.array()); }
private void combineAllowedUids(android.net.NetworkCapabilities nc) { if ((null == (nc.mAllowedUids)) || (null == (mAllowedUids))) { mAllowedUids = null; return; } mAllowedUids.addAll(nc.mAllowedUids); }
private boolean satisfiedByNetworkCapabilities(android.net.NetworkCapabilities nc, boolean onlyImmutable) { return (((((nc!= null) && (satisfiedByNetCapabilities(nc, onlyImmutable))) && (onlyImmutable || (satisfiedByLinkBandwidths(nc)))) && (satisfiedBySpecifier(nc))) && (onlyImmutable || (satisfiedBySignalStrength(nc))) && (onlyImmutable || (satisfiedByAllowedUids(nc))) && (satisfiedByAllowedUids(nc)); }
private void agentConnect() { android.net.LinkProperties lp = makeLinkProperties(); if ((lp.hasIPv4DefaultRoute()) || (lp.hasIPv6DefaultRoute())) { mNetworkCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } else { mNetworkCapabilities.removeCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } mNetworkInfo.setDetailedState(DetailedState.CONNECTING, null, null); android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (mConfig.allowBypass) && (!(mLockdown)); mNetworkCapabilities.setUids(createUserAndRestrictedProfilesRanges(mUserHandle, mConfig.allowedApplications, mConfig.disallowedApplications)); long token = android.os.Binder.clearCallingIdentity(); try { mNetworkAgent = new android.net.NetworkAgent(mLooper, mContext, com.android.server.connectivity.Vpn.NETWORKTYPE, mNetworkInfo, mNetworkCapabilities, lp, 0, networkMisc) { @java.lang.Override public void unwanted() { } }; } finally { android.os.Binder.restoreCallingIdentity(token); } mNetworkInfo.setIsAvailable(true); updateState(DetailedState.CONNECTED, "agentConnect"); }
private void agentConnect() { android.net.LinkProperties lp = makeLinkProperties(); if ((lp.hasIPv4DefaultRoute()) || (lp.hasIPv6DefaultRoute())) { mNetworkCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } else { mNetworkCapabilities.removeCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } mNetworkInfo.setDetailedState(DetailedState.CONNECTING, null, null); android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (mConfig.allowBypass) && (!(mLockdown)); mNetworkCapabilities.setUids(createUserAndRestrictedProfilesRanges(mUserHandle, mConfig.allowedApplications, mConfig.disallowedApplications)); long token = android.os.Binder.clearCallingIdentity(); try { mNetworkAgent = new android.net.NetworkAgent(mLooper, mContext, com.android.server.connectivity.Vpn.NETWORKTYPE, mNetworkInfo, mNetworkCapabilities, lp, com.android.server.connectivity.Vpn.VPN_DEFAULT_SCORE, networkMisc); android.util.Log.d(com.android.server.connectivity.Vpn.TAG, "AgentConnect: agentConnect: " + (mNetworkInfo.getVpnUid()))); } finally { android.os.Binder.restoreCallingIdentity(token); } mNetworkInfo.setIsAvailable(true); updateState(DetailedState.CONNECTED, "agentConnect"); }
private void agentConnect() { android.net.LinkProperties lp = makeLinkProperties(); if ((lp.hasIPv4DefaultRoute()) || (lp.hasIPv6DefaultRoute())) { mNetworkCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } else { mNetworkCapabilities.removeCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } mNetworkInfo.setDetailedState(DetailedState.CONNECTING, null, null); android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (mConfig.allowBypass) && (!(mLockdown)); mNetworkCapabilities.setAllowedUids(createUserAndRestrictedProfilesRanges(mUserHandle, mConfig.allowedApplications, mConfig.disallowedApplications)); long token = android.os.Binder.clearCallingIdentity(); try { mNetworkAgent = new android.net.NetworkAgent(mLooper, mContext, com.android.server.connectivity.Vpn.NETWORKTYPE, mNetworkInfo, mNetworkCapabilities, lp, 0, networkMisc) { @java.lang.Override public void unwanted() { } }; } finally { android.os.Binder.restoreCallingIdentity(token); } mNetworkInfo.setIsAvailable(true); updateState(DetailedState.CONNECTED, "agentConnect"); }
@java.lang.Override public android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, int timeoutMs, android.os.IBinder binder, int legacyType) { final android.net.NetworkRequest.Type type = (networkCapabilities == null)? NetworkRequest.Type.TRACK_DEFAULT : NetworkRequest.Type.REQUEST; if (type == (NetworkRequest.Type.TRACK_DEFAULT)) { networkCapabilities = new android.net.NetworkCapabilities(mDefaultRequest.networkCapabilities); enforceAccessPermission(); } else { networkCapabilities = new android.net.NetworkCapabilities(networkCapabilities); enforceNetworkRequestPermissions(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); } ensureRequestableCapabilities(networkCapabilities); networkCapabilities.setSingleUid(android.os.Binder.getCallingUid()); if (timeoutMs < 0) { throw newjava.lang.IllegalArgumentException("Invalid timeout specified"); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, legacyType, nextNetworkRequestId(), type); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log(("requestNetwork for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_REQUEST, nri)); if (timeoutMs > 0) { mHandler.sendMessageDelayed(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_TIMEOUT_NETWORK_REQUEST, nri), timeoutMs); } return networkRequest; }
@java.lang.Override public void pendingListenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.app.PendingIntent operation) { checkNotNull(operation, "operation cannot be null."); if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(new android.net.NetworkCapabilities(networkCapabilities), TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(networkRequest, operation); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log(("Sending broadcast for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); }
@java.lang.Override public android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int userId) { enforceAccessPermission();java.util.HashMap<android.net.Network, android.net.NetworkCapabilities> result = newjava.util.HashMap<android.net.Network, android.net.NetworkCapabilities>(); com.android.server.connectivity.NetworkAgentInfo nai = getDefaultNetwork(); android.net.NetworkCapabilities nc = getNetworkCapabilitiesInternal(nai); if (nc!= null) { result.put(nai.network, nc); } synchronized(mVpns) { if (!(mLockdownEnabled)) { com.android.server.connectivity.Vpn vpn = mVpns.get(userId); if (vpn!= null) { android.net.Network[] networks = vpn.getUnderlyingNetworks(); if (networks!= null) { for (android.net.Network network : networks) { nai = getNetworkAgentInfoForNetwork(network); nc = getNetworkCapabilitiesInternal(nai); nc.setSingleUid(userId); if (nc!= null) { result.put(network, nc); } } } } } } android.net.NetworkCapabilities[] out = new android.net.NetworkCapabilities[result.size()]; out = result.values().toArray(out); return out; }
public boolean satisfiedByAllowedUids(android.net.NetworkCapabilities nc) { if (null == (mAllowedUids)) return true; if (null == (nc.mAllowedUids)) return false; for (android.net.UidRange requiredRange : nc.mAllowedUids) { if (!(allowsUidRange(requiredRange))) { return false; } } return true; }
public android.net.NetworkCapabilities setAllowedUids(java.util.Set<android.net.UidRange> allowedUids) { if (null == allowedUids) { mAllowedUids = null; } else { mAllowedUids = new android.util.ArraySet(allowedUids); } return this; }
private android.net.NetworkRequest createDefaultInternetRequestForTransport(int transportType, android.net.NetworkRequest.Type type) { android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities(); netCap.addCapability(com.android.server.NET_CAPABILITY_INTERNET); netCap.addCapability(com.android.server.NET_CAPABILITY_NOT_RESTRICTED); if (transportType > (-1)) { netCap.addTransportType(transportType); } netCap.removeCapability(NetworkCapabilities.NET_CAPABILITY_VPN); return new android.net.NetworkRequest(netCap, TYPE_NONE, nextNetworkRequestId(), type); }
@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, android.os.IBinder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); if (!(android.net.ConnectivityManager.checkChangePermission(mContext))) { nc.addCapability(com.android.server.NET_CAPABILITY_FOREGROUND); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log(("register for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); return networkRequest; }
@java.lang.Override public android.net.NetworkMisc createFromParcel(android.os.Parcel in) { android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (in.readInt())!= 0; networkMisc.explicitlySelected = (in.readInt())!= 0; networkMisc.acceptUnvalidated = (in.readInt())!= 0; networkMisc.subscriberId = in.readString(); networkMisc.provisioningNotificationDisabled = (in.readInt())!= 0; networkMisc.managerUid = in.readInt(); return networkMisc; }
@java.lang.Override publicjava.lang.String toString() { int[] types = getTransportTypes();java.lang.String transports = ((types.length) > 0)? "java Transports: " + (android.net.NetworkCapabilities.transportNamesOf(types)) : ""; types = getCapabilities();java.lang.String capabilities = ((types.length) > 0)? "CAPABILITY: "; for (int i = 0; i < (types.length);) { capabilities += android.net.NetworkCapabilities.capabilityNameOf(types[i]); if ((++i) < (types.length)) capabilities += "&"; }java.lang.String upBand = ((mLinkUpBandwidthKbps) > 0)? ("LinkUpBandwidth>= " + (mLinkUpBandwidthKbps)) + "Kbps" : "";java.lang.String dnBand = ((mLinkDownBandwidthKbps) > 0)? ("LinkDnBandwidth>= " + (mLinkDownBandwidthKbps)) + "Kbps" : "";java.lang.String specifier = ((mNetworkSpecifier) == null)? "" : ("Network Specifier: <" + (mNetworkSpecifier)) + ">";java.lang.String signalStrength = (hasSignalStrength())? "SignalStrength: " + (mSignalStrength) : "";java.lang.String allowedUids = (null!= (mAllowedUids))? ("Allowed UIDs: <" + (mAllowedUids)) + ">" : ""; return ((((((("Transport " + transports) + "[" + capabilities) + "], ") + upBand) + dnBand) + specifier) + signalStrength) + allowedUids) + "]"; }
@com.android.internal.annotations.VisibleForTesting public boolean allowsUidRange(android.net.UidRange requiredRange) { if (null == (mAllowedUids)) return true; for (android.net.UidRange allowedRange : mAllowedUids) { if (allowedRange.containsRange(requiredRange)) { return true; } } return false; }
public void combineCapabilities(android.net.NetworkCapabilities nc) { combineNetCapabilities(nc); combineTransportTypes(nc); combineLinkBandwidths(nc); combineSpecifiers(nc); combineSignalStrength(nc); combineAllowedUids(nc); }
@com.android.internal.annotations.VisibleForTesting public boolean equalsAllowedUids(android.net.NetworkCapabilities nc) {java.util.Set<android.net.UidRange> comparedUids = nc.mAllowedUids; if (null == comparedUids) return null == (mAllowedUids); if (null == (mAllowedUids)) return false; finaljava.util.Set<android.net.UidRange> allowedUids = new android.util.ArraySet(mAllowedUids); for (android.net.UidRange range : comparedUids) { if (!(allowedUids.contains(range))) { return false; } allowedUids.remove(range); } return allowedUids.isEmpty(); }
@org.junit.Test public void testParcelNetworkCapabilities() { finaljava.util.Set<android.net.UidRange> uids = new android.util.ArraySet(); uids.add(new android.net.UidRange(50, 100)); uids.add(new android.net.UidRange(3000, 4000)); final android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET).setAllowedUids(uids).addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_EIMS).addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED); assertEqualsThroughMarshalling(netCap); }
public void switchSlots(int[] physicalSlots) { switch(physicalSlots.length); }
public int getCardId() { return com.android.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.
public void switchSlots(int[] physicalSlots) { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony == null) { return; } telephony.switchSlots(physicalSlots); } catch (android.os.RemoteException e) { com.android.internal.telephony.Log.e(com.android.internal.telephony.ITelephonyManager.TAG, ("Unable to switch slot to slot " + (physicalSlots))); } }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeByte(((byte) (isActive? 1 : 0))); dest.writeByte(((byte) (isEuicc? 1 : 0))); dest.writeInt(cardId); dest.writeInt(cardStateInfo); }
public int getCardId() { return cardId; }
@java.lang.Override public void switchSlots(int[] physicalSlots) { com.android.internal.telephony.uicc.UiccController.getInstance().switchSlots(physicalSlots); }
@java.lang.Override public android.telephony.UiccSlotInfo[] getUiccSlotsInfo() { com.android.internal.telephony.uicc.UiccSlot[] slots = com.android.internal.telephony.uicc.UiccController.getInstance().getUiccSlots(); if (slots == null) return null; android.telephony.UiccSlotInfo[] infos = new android.telephony.UiccSlotInfo[slots.length]; for (int i = 0; i < (slots.length); i++) { com.android.internal.telephony.uicc.UiccSlot slot = slots[i]; int cardId = com.android.internal.telephony.uicc.UiccController.getInstance().getUiccCard(i).getCardId(); int cardState = 0; switch (slot.getCardState()) { case CARDSTATE_ABSENT : cardState = android.telephony.UiccSlotInfo.CARD_STATE_INFO_ABSENT; break; case CARDSTATE_PRESENT : cardState = android.telephony.UiccSlotInfo.CARD_STATE_INFO_PRESENT; break; case CARDSTATE_ERROR : cardState = android.telephony.UiccSlotInfo.CARD_STATE_INFO_ERROR; break; case CARDSTATE_RESTRICTED : cardState = android.telephony.UiccSlotInfo.CARD_STATE_INFO_RESTRICTED; break; default : break; } infos[i] = new android.telephony.UiccSlotInfo.Builder().setIsActive(slot.isActive()).setIsEuicc(slot.isEuicc()).setCardId(cardId).setCardState(cardState).build(); } return infos; }
public android.telephony.UiccSlotInfo[] getUiccSlotsInfo() { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony == null) { return null; } return telephony.getUiccSlotsInfo(); } catch (android.os.RemoteException e) { return null; } }
@java.lang.Override public int hashCode() { int result = 1; result = (31 * result) + (isActive? 1 : 0); result = (31 * result) + (isEuicc? 1 : 0); result = (31 * result) + (cardId); result = (31 * result) + (cardStateInfo); return result; }
@org.junit.Test public void testTransportModeTransformBinderDeath() throwsjava.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); refcountedRecord.binderDied(); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT), anyInt(), anyInt()); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN), anyInt(), anyInt()); assertEquals(0, userRecord.mTransformQuotaTracker.mCurrent); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail("Expected IllegalArgumentException on attempt to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }
@java.lang.Override public void freeUnderlyingResources() { for (int direction : com.android.server.IpSecService.DIRECTIONS) { int spi = mSpis[direction].getSpi(); try { mSrvConfig.getNetdInstance().ipSecDeleteSecurityAssociation(mResourceId, direction, mConfig.getLocalAddress(), mConfig.getRemoteAddress(), spi, 0, 0); } catch (android.os.ServiceSpecificException e) { } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, ("Unable to delete SA with ID: " + (mResourceId))); } } getResourceTracker().give(); }
@org.junit.Test public void testCreateTransportModeTransform() throwsjava.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT), anyInt(), anyInt(), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceParameterizedTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceParameterizedTest.CRYPT_KEY), anyInt(), eq(""), eq(new byte[]{ }), eq(0), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN), anyInt(), anyInt(), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceParameterizedTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceParameterizedTest.CRYPT_KEY), anyInt(), eq(""), eq(new byte[]{ }), eq(0), anyInt(), anyInt(), anyInt()); }
@org.junit.Test public void testDeleteTransportModeTransform() throwsjava.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); mIpSecService.deleteTransportModeTransform(createTransformResp.resourceId); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT), anyInt(), anyInt()); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN), anyInt(), anyInt()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); assertEquals(0, userRecord.mTransformQuotaTracker.mCurrent); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail("Expected IllegalArgumentException on attempt to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }
@org.junit.Test public void testSecurityParameterIndexBinderDeath() throwsjava.lang.Exception { when(mMockNetd.ipSecAllocateSpi(anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), eq(mRemoteAddr), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT))).thenReturn(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT); IpSecSpiResponse spiResp = mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, mRemoteAddr, com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT, new android.os.Binder()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mSpiRecords.getRefcountedResourceOrThrow(spiResp.resourceId); refcountedRecord.binderDied(); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(spiResp.resourceId), anyInt(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT), anyInt(), anyInt()); assertEquals(0, userRecord.mSpiQuotaTracker.mCurrent); try { userRecord.mSpiRecords.getRefcountedResourceOrThrow(spiResp.resourceId); fail("Expected IllegalArgumentException on attempt to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }
@java.lang.Override public void freeUnderlyingResources() { if (mOwnedByTransform) { android.util.Log.d(com.android.server.IpSecService.TAG, (("Cannot release Spi " + (mSpi)) + " Currently locked by a Transform")); return; } try { mSrvConfig.getNetdInstance().ipSecDeleteSecurityAssociation(mResourceId, mDirection, mLocalAddress, mRemoteAddress, mSpi, 0, 0); } catch (android.os.ServiceSpecificException e) { } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, ("Unable to delete SPI reservation with ID: " + (mResourceId))); } mSpi = android.net.IpSecManager.INVALID_SECURITY_PARAMETER_INDEX; getResourceTracker().give(); }
@org.junit.Test public void testCreateTransportModeTransformAead() throwsjava.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); ipSecConfig.setAuthenticatedEncryption(IpSecTransform.DIRECTION_OUT, com.android.server.IpSecServiceParameterizedTest.AEAD_ALGO); ipSecConfig.setAuthenticatedEncryption(IpSecTransform.DIRECTION_IN, com.android.server.IpSecServiceParameterizedTest.AEAD_ALGO); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT), anyInt(), anyInt(), eq(""), eq(new byte[]{ }), eq(0), eq(""), eq(new byte[]{ }), eq(0), eq(IpSecAlgorithm.AUTH_CRYPT_AES_GCM), eq(com.android.server.IpSecServiceParameterizedTest.AEAD_KEY), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN), anyInt(), anyInt(), eq(""), eq(new byte[]{ }), eq(0), eq(""), eq(new byte[]{ }), eq(0), eq(IpSecAlgorithm.AUTH_CRYPT_AES_GCM), eq(com.android.server.IpSecServiceParameterizedTest.AEAD_KEY), anyInt(), anyInt(), anyInt()); }
@org.junit.Test public void testReleaseSecurityParameterIndex() throwsjava.lang.Exception { when(mMockNetd.ipSecAllocateSpi(anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), eq(mRemoteAddr), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT))).thenReturn(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT); android.net.IpSecSpiResponse spiResp = mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, mRemoteAddr, com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT, new android.os.Binder()); mIpSecService.releaseSecurityParameterIndex(spiResp.resourceId); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(spiResp.resourceId), anyInt(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT), anyInt(), anyInt()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); assertEquals(0, userRecord.mSpiQuotaTracker.mCurrent); try { userRecord.mSpiRecords.getRefcountedResourceOrThrow(spiResp.resourceId); fail("Expected IllegalArgumentException on attempt to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }
public com.android.server.IpSecTunnelInterfaceResponse createTunnelInterface(com.android.server.Network underlyingNetwork,java.lang.String localAddr,java.lang.String remoteAddr) { checkNotNull(binder, "Null Binder passed to openUdpEncapsulationSocket"); checkNotNull(underlyingNetwork, "No underlying network was specified"); checkNotNull(localAddr, "No local address was specified"); checkNotNull(remoteAddr, "No remote address was specified"); com.android.server.IpSecService.checkInetAddress(localAddr); com.android.server.IpSecService.checkInetAddress(remoteAddr); com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); final int resourceId = (mNextResourceId)++; final int ikey = mReserveKeyTracker.reserve(); final int okey = mReserveKeyTracker.reserve(); try { if (!(userRecord.mTunnelQuotaTracker.isAvailable())) { return new android.net.IpSecTransformResponse(IpSecManager.Status.RESOURCE_UNAVAILABLE); }java.lang.String intfName = ""; userRecord.mTunnelInterfaceRecords.put(resourceId, new com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.TunnelInterfaceRecord>(new com.android.server.IpSecService.TunnelInterfaceRecord(resourceId, intfName, underlyingNetwork, localAddr, remoteAddr, ikey, okey), binder)); return new android.net.IpSecTransformResponse(IpSecManager.Status.OK, resourceId); } catch (java.io.IOException | android.system.ErrnoException e) { libcore.io.IoUtils.closeQuietly(sockFd); } return new android.net.IpSecTransformResponse(IpSecManager.Status.RESOURCE_UNAVAILABLE); }
@java.lang.Override public void freeUnderlyingResources() { try { mSrvConfig.getNetdInstance().removeVirtualTunnelInterface(mInterfaceName); } catch (android.os.ServiceSpecificException e) { } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, ((("Failed to delete VTI with interface name: " + (mInterfaceName)) + " and id: ") + (mResourceId))); } getResourceTracker().give(); }
@java.lang.Override public synchronized void destroyTunnelInterface(int resourceId) throws android.os.RemoteException { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); releaseResource(userRecord.mTunnelInterfaceRecords, resourceId); }
public int getIKey() { return mKeys[android.net.IpSecManager.DIRECTION_IN]; }
synchronized void release(int i) { if ((i < 0) || (i >= ((mRangeStart) + (numBits)))) { throw newjava.lang.IllegalArgumentException(); } mBitSet.clear((i - (mRangeStart))); }
public int getOKey() { return mKeys[android.net.IpSecManager.DIRECTION_OUT]; }
@java.lang.Override public synchronized void applyTunnelModeTransform(int direction, int transformResourceId, int tunnelResourceId) throws android.os.RemoteException { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.checkDirection(direction); com.android.server.IpSecService.TransformRecord transformInfo = userRecord.mTransformRecords.getResourceOrThrow(transformResourceId); com.android.server.IpSecService.TunnelInterfaceRecord tunIntfInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); android.net.IpSecConfig c = transformInfo.getConfig(); com.android.internal.util.Preconditions.checkArgument(((c.getMode()) == (IpSecmanager.MODE_TUNNEL)), "Transform mode was not Tunnel mode; cannot be applied to a tunnel interface"); try { mSrvConfig.getNetdInstance().ipSecApplyTunnelModeTransform(direction, c.getSourceAddress(), c.getDestinationAddress(), transformInfo.getSpiRecord().getSpi(), tunIntfInfo.getIKey(), tunIntfInfo.getOKey(), tunIntfInfo.getUnderlyingNetwork()); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (EINVAL)) { throw newjava.lang.IllegalArgumentException(e.toString()); } else { throw e; } } }
@java.lang.Override public synchronized void applyTransportModeTransform(android.os.ParcelFileDescriptor socket, int direction, int resourceId) throws android.os.RemoteException { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.checkDirection(direction); com.android.server.IpSecService.TransformRecord info = userRecord.mTransformRecords.getResourceOrThrow(resourceId); if (((info.pid)!= (getCallingPid())) || ((info.uid)!= (getCallingUid()))) { throw newjava.lang.SecurityException("As the owner of an IpSec Transform may apply it!"); } android.net.IpSecConfig c = info.getConfig(); com.android.internal.util.Preconditions.checkArgument(((c.getMode()) == (IpSecmanager.MODE_TRANSPORT)), "IPSec mode was not Transport mode; cannot be applied to a socket"); try { mSrvConfig.getNetdInstance().ipSecApplyTransportModeTransform(socket.getFileDescriptor(), resourceId, direction, c.getSourceAddress(), c.getDestinationAddress(), info.getSpiRecord().getSpi()); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (EINVAL)) { throw newjava.lang.IllegalArgumentException(e.toString()); } else { throw e; } } }
synchronized int reserve() { int current = mNextIndex; for (int i = 0; i < (mSize); i++, current = (++current) % (mSize)) { if (!(mBitSet.get(current))) { mBitSet.set(current); mNextIndex = (current + 1) % (mSize); return (mRangeStart) + current; } } throw newjava.lang.IllegalStateException("Out of VTI interfaces"); }
publicjava.util.List<java.lang.String> getLocalAddresses() { return mLocalAddresses; }
@java.lang.Override public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(status); out.writeInt(resourceId); }
public com.android.server.Network getUnderlyingNetwork() { return mUnderlyingNetwork; }
@java.lang.Override publicjava.lang.String toString() { return newjava.lang.StringBuilder().append("{super=").append(super.toString()).append(", mInterfaceName=").append(mInterfaceName).append(", mUnderlyingNetwork=").append(mUnderlyingNetwork).append(", mLocalAddresses=").append(mLocalAddresses).append(", mRemoteAddress=").append(mRemoteAddress).append("}").toString(); }
public void currentRadioConfig(int indicationType, android.hardware.radio.V1_2.RadioConfig radioConfig) { }
void onDeviceStateChanged(com.android.bluetooth.hfp.HeadsetDeviceState deviceState) { broadCastMessageToStateMachines(HeadsetStateMachine.DEVICE_STATE_CHANGED, deviceState); }
boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { return false; } int connectionState = stateMachine.getConnectionState(); if ((connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } stateMachine.sendMessage(HeadsetStateMachine.VOICE_RECOGNITION_STOP, device); return true; }
private boolean bindResponse(int indId, boolean indStatus) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachines.values()) { int connectionState = stateMachine.getConnectionState(); if ((connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { continue; } if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, ("Sending for " + (stateMachine.getDevice()))); } stateMachine.sendMessage(HeadsetStateMachine.BIND_RESPONSE, indId, (indStatus? 1 : 0)); return true; } }
boolean disconnectAudio(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); synchronized(mStateMachines) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (("disconnectAudio: device " + device) + " was never connected/connecting")); return false; } if ((stateMachine.getAudioState())!= (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ("disconnectAudio, audio is not connected for " + device)); return false; } stateMachine.sendMessage(HeadsetStateMachine.DISCONNECT_AUDIO, device); } return true; }
java android.bluetooth.BluetoothDevice getCurrentAudioDevice() { synchronized(mStateMachines) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachines.values()) { if ((stateMachine.getAudioState()) == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) { return stateMachine.getDevice(); } } return null; } }
void disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, ("Disconnect device=" + device)); synchronized(mStateMachines) { com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (("device " + device) + " not ever connected/connecting")); return; } int connectionState = stateMachine.getConnectionState(); if ((connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (("device " + device) + " not connected/connecting, connectionState=" + connectionState)); return; } stateMachine.sendMessage(HeadsetStateMachine.DISCONNECT, device); } }
@java.lang.Override protected synchronized boolean start() { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, "start()"); mStateMachinesThread = new android.os.HandlerThread("HeadsetService.StateMachines"); mStateMachinesThread.start(); mSystemInterface = new com.android.bluetooth.hfp.HeadsetSystemInterface(this); mSystemInterface.init(); mNativeInterface = com.android.bluetooth.hfp.HeadsetNativeInterface.getInstance(); mNativeInterface.init(com.android.bluetooth.hfp.HeadsetService.MAX_HEADSET_CONNECTIONS, android.bluetooth.BluetoothHeadset.isInbandRingingSupported(this)); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(Intent.ACTION_BATTERY_CHANGED); filter.addAction(AudioManager.VOLUME_CHANGED_ACTION); filter.addAction(BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY); registerReceiver(mHeadsetReceiver, filter); com.android.bluetooth.hfp.HeadsetService.setHeadsetService(this); mStarted = true; return true; }
boolean disableWBS() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); synchronized(mStateMachines) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachines.values()) { if ((stateMachine.getConnectionState())!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, ("Bluetooth device is not connected " + (stateMachine.getDevice()))); } continue; } if ((stateMachine.getAudioState()) == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) { if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, ("Bluetooth audio is already connected " + (stateMachine.getDevice()))); } continue; } stateMachine.sendMessage(HeadsetStateMachine.DISABLE_WBS, stateMachine.getDevice()); } return true; }
privatejava.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission");java.util.ArrayList<android.bluetooth.BluetoothDevice> devices = newjava.util.ArrayList<>(); if (states == null) { return devices; } for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachines.values()) { int currentState = stateMachine.getConnectionState(); for (int state : states) { if (currentState == state) { devices.add(stateMachine.getDevice()); break; } } } return devices; }
boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice device) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (("device " + device) + " was never connected/connecting")); return false; } int connectionState = stateMachine.getConnectionState(); if ((connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (("device " + device) + " is neither connected/connecting to the device")); return false; } stateMachine.sendMessage(HeadsetStateMachine.VIRTUAL_CALL_STOP, device); return true; }
boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice device) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (("device " + device) + " was never connected/connecting")); return false; } stateMachine.sendMessage(HeadsetStateMachine.VIRTUAL_CALL_START, device); return true; }
@android.annotation.Nullable private android.bluetooth.BluetoothDevice getLastConnectedDevice() { android.bluetooth.BluetoothDevice lastConnectedDeivce = null; long lastConnectionTimestampMillis =java.lang.Long.MIN_VALUE; synchronized(mStateMachines) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachines.values()) { if ((stateMachine.getConnectionState()) == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { long timestampMillis = stateMachine.getConnectionTimestampMillis(); if (timestampMillis > lastConnectionTimestampMillis) { lastConnectedDeivce = stateMachine.getDevice(); lastConnectionTimestampMillis = timestampMillis; } } } return lastConnectedDeivce; }
com com com com com com com com com com com com com com
synchronized void messageFromNative(com.android.bluetooth.hfp.HeadsetStackEvent stackEvent) { if ((stackEvent.device) == null) { android.util.Log.wtfStack(com.android.bluetooth.hfp.HeadsetService.TAG, ("device is null, event: " + stackEvent)); return; } synchronized(mStateMachines) { com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(stackEvent.device); if (stateMachine == null) { if ((stackEvent.device) == null) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, "device is null"); return; } if ((stackEvent.type) == (HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED)) { stateMachine = com.android.bluetooth.hfp.HeadsetStateMachine.make(mStateMachinesThread.getLooper(), this, mNativeInterface, mSystemInterface); mStateMachines.put(stackEvent.device, stateMachine); } else { android.util.Log.wtfStack(com.android.bluetooth.hfp.HeadsetService.TAG, ("Machine not found for stack event: " + stackEvent)); return; } } stateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, stackEvent); }
int state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state state
java com.android.bluetooth.BluetoothDevice getDevice() { return mCurrentDevice; }
com com com com com
private boolean isScoAcceptable() { return (mAudioRouteAllowed) && (((mVoiceRecognitionStarted) || (isInCall())) || ((android.bluetooth.BluetoothHeadset.isInbandRingingSupported(mService)) && (isRinging()))); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); when(mSystemInterface.getHeadsetPhoneState()).thenReturn(mPhoneState); when(mSystemInterface.getAudioManager()).thenReturn(mAudioManager); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice("00:01:02:03:04:05"); mNativeInterface = spy(com.android.bluetooth.hfp.HeadsetNativeInterface.getInstance()); doNothing().when(mNativeInterface).init(anyInt(), anyBoolean()); doReturn(true).when(mNativeInterface).connectHfp(mTestDevice); doReturn(true).when(mNativeInterface).disconnectHfp(mTestDevice); doReturn(true).when(mNativeInterface).connectAudio(mTestDevice); doReturn(true).when(mNativeInterface).disconnectAudio(mTestDevice); when(mHeadsetService.bindService(any(android.content.Intent.class), any(android.content.ServiceConnection.class), anyInt())).thenReturn(true); when(mHeadsetService.getResources()).thenReturn(android.support.test.InstrumentationRegistry.getTargetContext().getResources()); when(mHeadsetService.getPackageManager()).thenReturn(android.support.test.InstrumentationRegistry.getContext().getPackageManager()); when(mHeadsetService.getPriority(any(android.bluetooth.BluetoothDevice.class))).thenReturn(BluetoothProfile.PRIORITY_ON); when(mHeadsetService.getForceScoAudio()).thenReturn(true); mHandlerThread = new android.os.HandlerThread("HeadsetStateMachineTestHandlerThread"); mHandlerThread.start(); HeadsetStateMachine.sConnectTimeoutMillis = com.android.bluetooth.hfp.HeadsetStateMachineTest.CONNECT_TIMEOUT_TEST_MILLIS; mHeadsetStateMachine = com.android.bluetooth.hfp.HeadsetStateMachine.make(mHandlerThread.getLooper(), mHeadsetService, mNativeInterface, mSystemInterface); }
boolean connectAudio(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "connectAudio: device is null"); return false; } synchronized(mStateMachines) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (("connectAudio: device " + device) + " was never connected/connecting")); return false; } if ((stateMachine.getConnectionState())!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "connectAudio: profile not connected"); return false; } if ((stateMachine.getAudioState())!= (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ("connectAudio: audio is not idle, current state " + (stateMachine.getAudioState()))); return false; } stateMachine.sendMessage(HeadsetStateMachine.CONNECT_AUDIO, device); return true; }
@java.lang.Override protected synchronized boolean stop() { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, "stop()"); if (!(mStarted)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "stop() called before start()"); return true; } mStarted = false; unregisterReceiver(mHeadsetReceiver); synchronized(mStateMachines) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachines.values()) { com.android.bluetooth.hfp.HeadsetStateMachine.destroy(stateMachine); } mStateMachines.clear(); } mNativeInterface.cleanup(); mSystemInterface.stop(); mStateMachinesThread.quitSafely(); mStateMachinesThread = null; com.android.bluetooth.hfp.HeadsetService.setHeadsetService(null); return true; }
void disconnect() { if (BluetoothHeadsetDevice) { setBtScoActiveDevice(mBluetoothHeadsetDevice); } }
private boolean handleBtScoActiveDeviceChange(android.bluetooth.BluetoothDevice btDevice, boolean isActive) { if (btDevice == null) { return true; }java.lang.String address = btDevice.getAddress(); android.bluetooth.BluetoothClass btClass = btDevice.getBluetoothClass(); int outDevice = android.media.AudioSystem.DEVICE_OUT_BLUETOOTH_SCO; int inDevice = android.media.AudioSystem.DEVICE_IN_BLUETOOTH_SCO_HEADSET; if (btClass!= null) { switch (btClass.getDeviceClass()) { case BluetoothClass.Device.AUDIO_VIDEO_WEARABLE_HEADSET : case BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE : outDevice = android.media.AudioSystem.DEVICE_OUT_BLUETOOTH_SCO_HEADSET; break; case BluetoothClass.Device.AUDIO_VIDEO_CAR_AUDIO : outDevice = android.media.AudioSystem.DEVICE_OUT_BLUETOOTH_SCO_CARKIT; break; } } if (!(android.bluetooth.BluetoothAdapter.checkBluetoothAddress(address))) { address = ""; }java.lang.String btDeviceName = btDevice.getName(); return (handleDeviceConnection(isActive, outDevice, address, btDeviceName)) && (handleDeviceConnection(isActive, inDevice, address, btDeviceName)); }
boolean startVoiceRecognition(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { return false; } int connectionState = stateMachine.getConnectionState(); if ((connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } stateMachine.sendMessage(HeadsetStateMachine.VOICE_RECOGNITION_START, device); return true; }
private void clccResponse(int index, int direction, int status, int mode, boolean mpty,java.lang.String number, int type) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.HeadsetService.MODIFY_PHONE_STATE, null); broadCastMessageToStateMachines(HeadsetStateMachine.SEND_CCLC_RESPONSE, new com.android.bluetooth.hfp.HeadsetClccResponse(index, direction, status, mode, mpty, number, type)); }
javajava void connectAudio() { final android.bluetooth.BluetoothDevice device = getLastConnectedDevice(); if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "No device is connected"); return false; } return connectAudio(device); }
boolean enableWBS() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); synchronized(mStateMachines) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachines.values()) { if ((stateMachine.getConnectionState())!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, ("Bluetooth device is not connected " + (stateMachine.getDevice()))); } continue; } if ((stateMachine.getAudioState()) == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) { if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, ("Bluetooth audio is already connected " + (stateMachine.getDevice()))); } continue; } stateMachine.sendMessage(HeadsetStateMachine.ENABLE_WBS, stateMachine.getDevice()); } return true; }
javajava.lang.String disconnectAudio() { final android.bluetooth.BluetoothDevice device = getCurrentAudioDevice(); if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "Disconnecting no audio device is connected"); return false; } return disconnectAudio(device); }
public boolean getAudioRouteAllowed() { return mAudioRouteAllowed; }
boolean isAudioOn() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachines.values()) { if ((stateMachine.getAudioState())!= (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) { return true; } } return false; }
void setBtScoActiveDevice(android.bluetooth.BluetoothDevice btDevice) { android.util.Log.d(com.android.server.audio.AudioService.TAG, (("setBtScoActiveDevice(" + btDevice) + ")")); synchronized(mScoClients) { final android.bluetooth.BluetoothDevice previousActiveDevice = mBluetoothHeadsetDevice; if (!(java.util.Objects.equals(btDevice, previousActiveDevice))) { if (!(handleBtScoActiveDeviceChange(previousActiveDevice, false))) { android.util.Log.w(com.android.server.audio.AudioService.TAG, ("setBtScoActiveDevice() failed to remove previous device " + previousActiveDevice)); return; } if (!(handleBtScoActiveDeviceChange(btDevice, true))) { android.util.Log.w(com.android.server.audio.AudioService.TAG, ("setBtScoActiveDevice() failed to add new device " + btDevice)); return; } mBluetoothHeadsetDevice = btDevice; if ((mBluetoothHeadsetDevice) == null) { resetBluetoothSco(); } android.util.Log.d(com.android.server.audio.AudioService.TAG, (("setBtScoActiveDevice(" + btDevice) + ") done set")); } } android.util.Log.d(com.android.server.audio.AudioService.TAG, (("setBtScoActiveDevice(" + btDevice) + ") done")); }
private void phoneStateChanged(int numActive, int numHeld, int callState,java.lang.String number, int type) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.HeadsetService.MODIFY_PHONE_STATE, null); broadCastMessageToStateMachines(HeadsetStateMachine.CALL_STATE_CHANGED, new com.android.bluetooth.hfp.HeadsetCallState(numActive, numHeld, callState, number, type)); }
@java.lang.Override public void freeUnderlyingResources() { try { mSrvConfig.getNetdInstance().teardownVirtualTunnelInterface(mInterfaceName); } catch (android.os.ServiceSpecificException e) { } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, ((("Failed to delete VTI with interface name: " + (mInterfaceName)) + " and id: ") + (mResourceId))); } getResourceTracker().give(); mReserveKeyTracker.release(mKeys); }
@java.lang.Override public synchronized void applyTunnelModeTransform(int direction, int transformResourceId, int tunnelResourceId) throws android.os.RemoteException { com.android.server.IpSecService.checkDirection(direction); com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TransformRecord transformInfo = userRecord.mTransformRecords.getResourceOrThrow(transformResourceId); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); android.net.IpSecConfig c = transformInfo.getConfig(); com.android.internal.util.Preconditions.checkArgument(((c.getMode()) == (android.net.IpSecTransform.MODE_TUNNEL)), "Transform mode was not Tunnel mode; cannot be applied to a tunnel interface"); int[] keys = tunnelInterfaceInfo.getKeys(); try { mSrvConfig.getNetdInstance().ipSecApplyTunnelModeTransform(direction, c.getSourceAddress(), c.getDestinationAddress(), transformInfo.getSpiRecord().getSpi(), keys[direction]); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (EINVAL)) { throw newjava.lang.IllegalArgumentException(e.toString()); } else { throw e; } } }
int getDexFlags(android.content.pm.ApplicationInfo info,java.lang.String compilerFilter, com.android.server.pm.dex.DexoptOptions options) { int flags = info.flags; boolean debuggable = (flags & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE))!= 0; boolean isProfileGuidedFilter = dalvik.system.DexFile.isProfileGuidedCompilerFilter(compilerFilter); boolean isPublic = (!(info.isForwardLocked())) && (!isProfileGuidedFilter); int profileFlag = (isProfileGuidedFilter)? com.android.server.pm.Installer.DEXOPT_PROFILE_GUIDED : 0; int dexFlags = ((((isPublic? com.android.server.pm.Installer.DEXOPT_PUBLIC : 0) | (debuggable? com.android.server.pm.Installer.DEXOPT_DEBUGGABLE : 0)) | profileFlag) | (options.isBootComplete()? com.android.server.pm.Installer.DEXOPT_BOOTCOMPLETE : 0)) | (options.isDexoptIdleBackgroundJob()? com.android.server.pm.Installer.DEXOPT_IDLE_BACKGROUND_JOB : 0) | (info.isSystemApp()); return adjustDexoptFlags(dexFlags); }
private void broadcastConfigChangedIntent(int phoneId) { android.content.Intent intent = new android.content.Intent(android.telephony.CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED); intent.addFlags(((android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT) | (android.content.Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND))); android.telephony.SubscriptionManager.putPhoneIdAndSubIdExtra(intent, phoneId); intent.putExtra(CarrierConfigManager.EXTRA_PHONE_ID, phoneId); android.app.ActivityManager.broadcastStickyIntent(intent, UserHandle.USER_ALL); mHasSentConfigChange[phoneId] = true; }
@org.junit.Before public void setUp() { mEuiccCard = new com.android.internal.telephony.uicc.euicc.EuiccCardImplV2(new com.android.euicc.data.EuiccSpecVersion(2, 0, 0), mMockTm); }
private static com.android.internal.telephony.uicc.euicc.OperatorId buildOperatorId(com.android.internal.telephony.uicc.asn1.Asn1Node node) throws com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException, com.android.internal.telephony.uicc.asn1.TagNotFoundException { byte[] gid1 = null; if (node.hasChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_1)) { gid1 = node.getChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_1).asBytes(); } byte[] gid2 = null; if (node.hasChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_2)) { gid2 = node.getChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_2).asBytes(); } return new com.android.internal.telephony.uicc.euicc.OperatorId(node.getChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_0).asBytes(), gid1, gid2); }
private int mockLogicalChannelResponses(java.lang.String response,java.lang.String... extraResponses) { int channel = com.android.euicc.telephony.UiccChannelMocker.mockOpenLogicalChannelResponse(mMockTm, IccOpenLogicalChannelResponse.STATUS_NO_ERROR, "9000"); com.android.euicc.telephony.UiccChannelMocker.mockSendToLogicalChannel(mMockTm, channel, response, extraResponses); com.android.euicc.telephony.UiccChannelMocker.mockCloseLogicalChannel(mMockTm, channel); return channel; }
public void prepareDownload(@android.annotation.Nullable byte[] hashCc, com.android.internal.telephony.uicc.asn1.Asn1Node smdpSigned2, com.android.internal.telephony.uicc.asn1.Asn1Node smdpSignature2, com.android.internal.telephony.uicc.asn1.Asn1Node smdpCertificate, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<com.android.internal.telephony.uicc.asn1.Asn1Node> callback, android.os.Handler handler) { }
@org.junit.Test public void testGetAllProfiles() throws com.android.euicc.telephony.UiccChannelException, com.android.internal.telephony.uicc.EuiccCardException { int channel = mockLogicalChannelResponses("BF2D14A012E3105A0A896700000000004523019F7001019000"); com.android.euicc.data.EuiccProfile[] profiles = mEuiccCard.getAllProfiles(); assertEquals(1, profiles.length); assertEquals("98760000000000543210", profiles[0].getIccid()); assertEquals(ProfileState.ENABLED, profiles[0].getState()); verifyStoreData(channel, "BF2D0D5C0B5A909192B79F709599BF76"); }
public void getEuiccInfo1(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<com.android.internal.telephony.uicc.asn1.Asn1Node> callback, android.os.Handler handler) { }
public void authenticateServer(java.lang.String matchingId, com.android.internal.telephony.uicc.asn1.Asn1Node serverSigned1, com.android.internal.telephony.uicc.asn1.Asn1Node serverSignature1, com.android.internal.telephony.uicc.asn1.Asn1Node serverCertificate, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<com.android.internal.telephony.uicc.asn1.Asn1Node> callback, android.os.Handler handler) { }
public void cancelSession(byte[] transactionId, @android.telephony.euicc.EuiccCardManager.CancelReason int reason, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<com.android.internal.telephony.uicc.asn1.Asn1Node> callback, android.os.Handler handler) { }
private void verifyStoreData(int channel,java.lang.String command) { verify(mMockTm, times(1)).iccTransmitApduLogicalChannel(channel, (128 | channel), 226, 145, 0, ((command.length()) / 2), command); }
public void getEuiccInfo2(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<com.android.internal.telephony.uicc.asn1.Asn1Node> callback, android.os.Handler handler) { }
public staticjava.lang.String stripTrailingFs(byte[] iccId) {java.lang.String iccIdString = com.android.internal.telephony.uicc.euicc.Asn1Converter.bcdBytesToString(iccId); if (iccIdString.endsWith("F")) { iccIdString = iccIdString.substring(0, iccIdString.indexOf('F')); } return iccIdString; }
public void loadBoundProfilePackage(com.android.internal.telephony.uicc.asn1.Asn1Node boundProfilePackage, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<com.android.internal.telephony.uicc.asn1.Asn1Node> callback, android.os.Handler handler) { }
@org.junit.Test public void testFSuffix() throws com.android.euicc.telephony.UiccChannelException, com.android.internal.telephony.uicc.EuiccCardException { int channel = mockLogicalChannelResponses("BF2D14A012E3105A0A896700000000004523FF9F7001019000"); com.android.euicc.data.EuiccProfile[] profiles = mEuiccCard.getAllProfiles(); assertEquals(1, profiles.length); assertEquals("987600000000005432", profiles[0].getIccid()); assertEquals(ProfileState.ENABLED, profiles[0].getState()); verifyStoreData(channel, "BF2D0D5C0B5A909192B79F709599BF76"); }
private boolean areAllRecordsLoaded() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if ((app!= null) && (isSupportedApplication(app))) { com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if ((ir == null) || (!(ir.isLoaded()))) { log("isAllRecordsLoaded outside loop, return false"); return false; } } } log(("isAllRecordsLoaded outside loop, return " + ((mUiccApplications[0])!= null))); return (mUiccApplications[0])!= null; }
private void updateExternalState() { if ((mUiccCard.getCardState()) == (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ERROR)) { setExternalState(IccCardConstants.State.CARD_IO_ERROR); return; } if ((mUiccCard.getCardState()) == (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_RESTRICTED)) { setExternalState(IccCardConstants.State.CARD_RESTRICTED); return; } if ((mUiccApplication) == null) { setExternalState(IccCardConstants.State.NOT_READY); return; } switch (mUiccApplication.getState()) { case APPSTATE_UNKNOWN : setExternalState(IccCardConstants.State.NOT_READY); break; case APPSTATE_SUBSCRIPTION_PERSO : if ((mUiccApplication.getPersoSubState()) == (IccCardApplicationStatus.PersoSubState.PERSOSUBSTATE_SIM_NETWORK)) { setExternalState(IccCardConstants.State.NETWORK_LOCKED); } break; case APPSTATE_READY : setExternalState(IccCardConstants.State.READY); break; } }
public com.android.internal.telephony.uicc.UiccProfile getUiccProfileForPhone(int phoneId) { synchronized(com.android.internal.telephony.uicc.UiccController.mLock) { com.android.internal.telephony.uicc.UiccCard uiccCard = getUiccCardForPhone(phoneId); return uiccCard!= null? uiccCard.getUiccProfile() : null; } }
@java.lang.Override public void handleMessage(android.os.Message msg) { switch (msg.what) { default : loge(("Unknown Event " + (msg.what))); } }
private void setCurrentAppType(boolean isGsm) { log("setCurrentAppType"); synchronized(mLock) { boolean isLteOnCdmaMode = (android.telephony.TelephonyManager.getLteOnCdmaModeStatic()) == (com.android.internal.telephony.PhoneConstants.LTE_ON_CDMA_TRUE); if (isGsm || isLteOnCdmaMode) { mCurrentAppType = UiccController.APP_FAM_3GPP; } else { mCurrentAppType = UiccController.APP_FAM_3GPP2; } }
private void registerAllAppEvents() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app!= null) { log("registerForReady registering for EVENT_APP_READY"); app.registerForReady(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_APP_READY, null); com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if (ir!= null) { log("registerForRecordsLoaded registering for EVENT_RECORDS_LOADED"); ir.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORDS_LOADED, null); ir.registerForRecordsEvents(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_RECORD_EVENTS, null); } } } }
public void update(android.content.Context c, com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.uicc.IccCardStatus ics) { synchronized(mLock) { mCardState = ics.mCardState; mContext = c; mCi = ci; mIccid = ics.iccid; updateCardId(); if ((mCardState)!= (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT)) { if ((mUiccProfile) == null) { mUiccProfile = new com.android.internal.telephony.uicc.UiccProfile(mContext, mCi, ics, mPhoneId, this); } else { mUiccProfile.update(mContext, mCi, ics); } } else { throw newjava.lang.RuntimeException("Card state is absent when updating!"); } } }
private boolean areAllApplicationsReady() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (((app!= null) && (isSupportedApplication(app))) && (!(app.isReady()))) { log("isAllApplicationsReady outside loop, return false"); return false; } } log(("isAllApplicationsReady outside loop, return " + ((mUiccApplications[0])!= null))); return (mUiccApplications[0])!= null; }
@org.junit.Test(expected = com.android.internal.telephony.uicc.euicc.EuiccCardErrorException.class) public void testRetrieveNotification_Error() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF2B038101019000"); try { mEuiccCard.retrieveNotification(5); } catch (com.android.internal.telephony.uicc.euicc.EuiccCardErrorException e) { assertEquals(1, e.getErrorCode()); verifyStoreData(channel, "BF2B05A003800105"); throw e; } }
private android.telephony.euicc.EuiccNotification createNotification(com.android.internal.telephony.uicc.asn1.Asn1Node node) throws com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException, com.android.internal.telephony.uicc.asn1.TagNotFoundException { com.android.internal.telephony.uicc.asn1.Asn1Node metadataNode; if ((node.getTag()) == (TAG_NOTIFICATION_METADATA)) { metadataNode = node; } else if ((node.getTag()) == (TAG_PROFILE_INSTALLATION_RESULT)) { metadataNode = node.getChild(com.android.internal.telephony.uicc.euicc.TAG_PROFILE_INSTALLATION_RESULT_DATA, com.android.internal.telephony.uicc.euicc.TAG_NOTIFICATION_METADATA); } else { metadataNode = node.getChild(com.android.internal.telephony.uicc.euicc.TAG_NOTIFICATION_METADATA); } return new android.telephony.euicc.EuiccNotification(metadataNode.getChild(com.android.internal.telephony.uicc.euicc.TAG_SEQ).asInteger(), metadataNode.getChild(com.android.internal.telephony.uicc.euicc.TAG_TARGET_ADDR).asString(), metadataNode.getChild(com.android.internal.telephony.uicc.euicc.TAG_EVENT).asBits(), ((node.getTag()) == (TAG_NOTIFICATION_METADATA)? null : node.toBytes())); }
@org.junit.Test(expected = com.android.internal.telephony.uicc.euicc.EuiccCardErrorException.class) public void testCancelSession_Error() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF41038101039000"); try { mEuiccCard.cancelSession(com.android.internal.telephony.uicc.euicc.Asn1Converter.hexToBytes("A1B2C3"), EuiccCard.CancelReason.POSTPONED); } catch (com.android.internal.telephony.uicc.euicc.EuiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, "BF41088003A1B2C3810101"); throw e; } }
@org.junit.Test public void testRemoveNotificationFromList() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF30038001009000"); mEuiccCard.removeNotificationFromList(5); verifyStoreData(channel, "BF3003800105"); }
@org.junit.Test(expected = com.android.internal.telephony.uicc.euicc.EuiccCardErrorException.class) public void testSwitchToProfile_Error() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF2D14A012E3105A0A896700000000004523019F7001009000", "BF31038001039000"); try { mEuiccCard.switchToProfile("98760000000000543210", true); } catch (com.android.internal.telephony.uicc.euicc.EuiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, "BF3111A00C5A0A896700000000004523018101FF"); throw e; } }
@org.junit.Test public void testswitchToProfile_SimRefresh() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF2D14A012E3105A0A896700000000004523019F7001009000", "6106", "6f00"); mEuiccCard.switchToProfile("98760000000000543210", true); verifyStoreData(channel, "BF3111A00C5A0A896700000000004523018101FF"); }
@org.junit.Test public void testRetrieveNotificationList_Empty() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF2B038101019000"); com.android.internal.telephony.uicc.euicc.EuiccNotification[] result = mEuiccCard.retrieveNotificationList(((EuiccNotification.Event.DELETE) | (EuiccNotification.Event.DISABLE))); assertArrayEquals(new com.android.internal.telephony.uicc.euicc.EuiccNotification[0], result); verifyStoreData(channel, "BF2B06A00481020430"); }
@org.junit.Test public void testGetSmdsAddress() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF3C148008534D44502E434F4D8108736D64732E636F6D9000"); assertEquals("smds.com", mEuiccCard.getSmdsAddress()); verifyStoreData(channel, "BF3C00"); }
@org.junit.Test public void testResetMemory_SimRefresh() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("6106", "6f00"); mEuiccCard.resetMemory(EuiccCard.ResetOption.DELETE_FIELD_LOADED_TEST_PROFILES); verifyStoreData(channel, "BF340482020640"); }
@org.junit.Test public void testListNotifications() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(("BF282BA029" + (("BF2F118001010C08736D64702E636F6D81020410" + "BF2F128001020C09736D6470322E636F6D81020420") + "9000"))); com.android.internal.telephony.uicc.euicc.EuiccNotification[] result = mEuiccCard.listNotifications(((EuiccNotification.Event.DELETE) | (EuiccNotification.Event.DISABLE))); assertArrayEquals(new com.android.internal.telephony.uicc.euicc.EuiccNotification[]{ new com.android.internal.telephony.uicc.euicc.EuiccNotification(1, "smdp.com", EuiccNotification.Event.DELETE, null), new com.android.internal.telephony.uicc.euicc.EuiccNotification(2, "smdp2.com", EuiccNotification.Event.DISABLE, null) }, result); verifyStoreData(channel, "BF280481020430"); }
@org.junit.Test public void testSetNickname() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF29038001009000"); mEuiccCard.setNickname("98760000000000543210", "new nickname"); verifyStoreData(channel, "BF291A5A0A89670000000000452301900C6E6577206E69636B6E616D65"); }
@org.junit.Test public void testGetEuiccChallenge() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF2E0580030102039000"); assertArrayEquals(new byte[]{ 1, 2, 3 }, mEuiccCard.getEuiccChallenge()); verifyStoreData(channel, "BF2E00"); }
@org.junit.Test(expected = com.android.internal.telephony.uicc.euicc.EuiccCardErrorException.class) public void testAuthenticateServer_Error() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF38038101039000"); when(mMockTm.getDeviceId()).thenReturn("987654321012345"); try { mEuiccCard.authenticateServer("A1B2C3-X4Y5Z6", com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(160).build(), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(161).build(), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(162).build(), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(163).build()); } catch (com.android.internal.telephony.uicc.euicc.EuiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, ("BF382D" + (((((("A000" + "A100") + "A200") + "A300") + "A023") + "800D4131423243332D583459355A36") + "A112800489674523") + "A100") + "82088967452301214305"))); throw e; } }
@org.junit.Test public void testResetMemory() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF34038001009000"); mEuiccCard.resetMemory(EuiccCard.ResetOption.DELETE_FIELD_LOADED_TEST_PROFILES); verifyStoreData(channel, "BF340482020640"); }
@org.junit.Test public void testGetEuiccInfo2() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF22030102039000"); assertEquals("BF2203010203", mEuiccCard.getEuiccInfo2().toHex()); verifyStoreData(channel, "BF2200"); }
@org.junit.Test(expected = com.android.internal.telephony.uicc.euicc.EuiccCardErrorException.class) public void testListNotifications_Error() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF28038101039000"); try { mEuiccCard.listNotifications(((EuiccNotification.Event.DELETE) | (EuiccNotification.Event.DISABLE))); } catch (com.android.internal.telephony.uicc.euicc.EuiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, "BF280481020430"); throw e; } }
@org.junit.Test public void testGetRat() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(("BF4347" + (((((((((((("A021" + "800206C0") + "A118") + "B70A800312F3458103010203") + "B70A800312F3458203040506") + "820108") + "A022") + "80020780") + "A118") + "B70A800312E3458103010203") + "B70A8003EEEE458203040506") + "82020780") + "9000"))); com.android.internal.telephony.uicc.euicc.EuiccRat rat = mEuiccCard.getRat(); assertEquals((-1), rat.findIndex(PolicyRule.DO_NOT_DELETE, new com.android.internal.telephony.uicc.euicc.OperatorId(new byte[]{ 18, ((byte) (243)), 69 }, null, null))); assertEquals(1, rat.findIndex(PolicyRule.DO_NOT_DISABLE, new com.android.internal.telephony.uicc.euicc.OperatorId(new byte[]{ 35, 103, 69 }, null, new byte[]{ 4, 5, 6 }))); assertFalse(rat.hasPolicyRuleFlag(0, EuiccRat.PolicyRuleFlag.CONSENT_REQUIRED)); assertTrue(rat.hasPolicyRuleFlag(1, EuiccRat.PolicyRuleFlag.CONSENT_REQUIRED)); verifyStoreData(channel, "BF4300"); }
@org.junit.Test public void testSwitchToProfile() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF2D14A012E3105A0A896700000000004523019F7001009000", "BF31038001009000"); com.android.internal.telephony.uicc.euicc.EuiccProfile profile = mEuiccCard.switchToProfile("98760000000000543210", true); assertEquals(profile.getIccid(), "98760000000000543210"); verifyStoreData(channel, "BF3111A00C5A0A896700000000004523018101FF"); }
@org.junit.Test(expected = com.android.internal.telephony.uicc.euicc.EuiccCardErrorException.class) public void testLoadBoundProfilePackage_Error() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("9000", "9000", "9000", "9000", "9000", "9000", "BF370ABF2707A205A1038101039000"); try { mEuiccCard.loadBoundProfilePackage(com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(48950).addChild(com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(48931)).addChild(com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(160).addChildAsBytes(135, new byte[]{ 1, 2, 3 })).addChild(com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(161).addChildAsBytes(136, new byte[]{ 4, 5, 6 })).addChild(com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(162)).addChild(com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(163).addChildAsBytes(134, new byte[]{ 7, 8, 9 }).addChildAsBytes(134, new byte[]{ 10, 11, 12 })).build()); } catch (com.android.internal.telephony.uicc.euicc.EuiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, "BF361FBF2300"); verifyStoreData(channel, "A0058703010203"); verifyStoreData(channel, "A1058030506"); verifyStoreData(channel, "A2003070"); verifyStoreData(channel, "A3070"); verifyStoreData(channel, "A3070"); } }
@org.junit.Test public void testPrepareDownload() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF2102A0009000"); com.android.internal.telephony.uicc.euicc.Asn1Node result = mEuiccCard.prepareDownload(com.android.internal.telephony.uicc.euicc.Asn1Converter.hexToBytes("4131423243332D583459355A36"), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(160).build(), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(161).build(), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(162).build()); assertEquals("BF2102A000", result.toHex()); verifyStoreData(channel, ("BF2115" + ((("A000" + "A100") + "040D4131423243332D583459355A36") + "A200"))); }
@org.junit.Test public void testDeleteProfile() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(("BF2D26A024" + (("E3105A0A896700000000004523019F700100" + "E3105A0A896700000000004523029F700101") + "9000")), "BF33038001009000"); mEuiccCard.deleteProfile("98760000000000543210"); verifyStoreData(channel, "BF330C5A0A89670000000000452301"); }
@org.junit.Test public void testRetrieveNotification() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(("BF2B18A016" + ("3014BF2F118001010C08736D64702E636F6D81020410" + "9000"))); com.android.internal.telephony.uicc.euicc.EuiccNotification result = mEuiccCard.retrieveNotification(5); assertEquals(new com.android.internal.telephony.uicc.euicc.EuiccNotification(1, "smdp.com", EuiccNotification.Event.DELETE, com.android.internal.telephony.uicc.euicc.Asn1Converter.hexToBytes("3014BF2F118001010C08736D64702E636F6D81020410")), result); verifyStoreData(channel, "BF2B05A003800105"); }
@org.junit.Test public void testGetEid() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF3E065A041A2B3C4D9000"); assertEquals("1A2B3C4D", mEuiccCard.getEid()); verifyStoreData(channel, "BF3E035C015A"); }
@org.junit.Test(expected = com.android.internal.telephony.uicc.euicc.EuiccCardErrorException.class) public void testPrepareDownload_Error() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF2105A1030201039000"); try { mEuiccCard.prepareDownload(com.android.internal.telephony.uicc.euicc.Asn1Converter.hexToBytes("4131423243332D583459355A36"), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(160).build(), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(161).build(), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(162).build()); } catch (com.android.internal.telephony.uicc.euicc.EuiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, ("BF2115" + ((("A000" + "A100") + "040D4131423243332D583459355A36") + "A200"))); throw e; } }
@org.junit.Test public void testSetDefaultSmdpAddress() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF3C148008534D44502E434F4D8108736D64732E636F6D9000", "BF3F038001009000"); assertEquals("SMDP.COM", mEuiccCard.getDefaultSmdpAddress()); verifyStoreData(channel, "BF3C00"); mEuiccCard.setDefaultSmdpAddress("smdp.gsma.com"); assertEquals("smdp.gsma.com", mEuiccCard.getDefaultSmdpAddress()); verifyStoreData(channel, "BF3F0F800D736D64702E67736D612E636F6D"); }
@org.junit.Test public void testAuthenticateServer() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF3802A0009000"); when(mMockTm.getDeviceId()).thenReturn("987654321012345"); com.android.internal.telephony.uicc.Asn1Node result = mEuiccCard.authenticateServer("A1B2C3-X4Y5Z6", com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(160).build(), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(161).build(), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(162).build(), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(163).build()); assertEquals("BF3802A000", result.toHex()); verifyStoreData(channel, ("BF382D" + (((((((("A000" + "A100") + "A200") + "A300") + "A023") + "800D4131423243332D583459355A36") + "A112800489674523") + "A100") + "82088967452301214305"))); }
@org.junit.Test public void testGetEuiccInfo1() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF20030102039000"); assertEquals("BF2003010203", mEuiccCard.getEuiccInfo1().toHex()); verifyStoreData(channel, "BF2000"); }
@org.junit.Test public void testLoadBoundProfilePackage() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("9000", "9000", "9000", "9000", "9000", "9000", "9000", "BF37009000"); com.android.internal.telephony.uicc.euicc.Asn1Node result = mEuiccCard.loadBoundProfilePackage(com.android.internal.telephony.uicc.Asn1Node.newBuilder(48950).addChild(com.android.internal.telephony.uicc.Asn1Node.newBuilder(48931)).addChild(com.android.internal.telephony.uicc.Asn1Node.newBuilder(160).addChildAsBytes(135, new byte[]{ 1, 2, 3 })).addChild(com.android.internal.telephony.uicc.Asn1Node.newBuilder(161).addChildAsBytes(136, new byte[]{ 4, 5, 6 })).addChild(com.android.internal.telephony.uicc.Asn1Node.newBuilder(162)).addChild(com.android.internal.telephony.uicc.Asn1Node.newBuilder(163).addChildAsBytes(134, new byte[]{ 7, 8, 9 }).addChildAsBytes(134, new byte[]{ 10, 11, 12 })).build()); assertEquals("BF3700", result.toHex()); verifyStoreData(channel, "BF361FBF2300"); verifyStoreData(channel, "A0058703010203"); verifyStoreData(channel, "A105"); verifyStoreData(channel, "8803040506"); verifyStoreData(channel, "A200"); verifyStoreData(channel, "A30A"); verifyStoreData(channel, "8603070809"); verifyStoreData(channel, "86030A0B"); }
@org.junit.Test public void testRetrieveNotificationList() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(("BF2B2FA02D" + (("3014BF2F118001010C08736D64702E636F6D81020410" + "3015BF2F128001020C09736D6470322E636F6D81020420") + "9000"))); com.android.internal.telephony.uicc.EuiccNotification[] result = mEuiccCard.retrieveNotificationList(((EuiccNotification.Event.DELETE) | (EuiccNotification.Event.DISABLE))); assertArrayEquals(new com.android.internal.telephony.uicc.euicc.EuiccNotification[]{ new com.android.internal.telephony.uicc.euicc.EuiccNotification(1, "smdp.com", EuiccNotification.Event.DELETE, com.android.internal.telephony.uicc.euicc.Asn1Converter.hexToBytes("3014BF2F118001010C08736D64702E636F6D81020410")), new com.android.internal.telephony.uicc.euicc.EuiccNotification(2, "smdp2.com", EuiccNotification.Event.DISABLE, com.android.internal.telephony.uicc.euicc.Asn1Converter.hexToBytes("3015BF2F128001020C09736D6470322E636F6D81020420")) }, result); verifyStoreData(channel, "BF2B06A00481020430"); }
public void removeNotificationFromList(int seqNumber, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.Void> callback, android.os.Handler handler) {java.lang.String command = com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.euicc.TAG_REMOVE_NOTIFICATION_FROM_LIST).addChildAsInteger(com.android.internal.telephony.uicc.euicc.TAG_CTX_0, seqNumber).build().toHex();java.lang.String response; try (com.android.internal.telephony.uicc.euicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.euicc.UiccLogicalChannel.openIsdR(mTm)) { response = ch.execStoreData(command); } int result = com.android.internal.telephony.uicc.euicc.EuiccCard.parseSimpleResult(response); switch (result) { case RemoveNotificationFromListCode.OK : case RemoveNotificationFromListCode.NOTHING_TO_DELETE : break; default : throw new com.android.internal.telephony.uicc.euicc.EuiccCardErrorException(OperationCode.REMOVE_NOTIFICATION_FROM_LIST, result); } }
public void resetMemory(@android.telephony.euicc.EuiccCardManager.ResetOption int options, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.Void> callback, android.os.Handler handler) {java.lang.String command = com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.euicc.TAG_EUICC_MEMORY_RESET).addChildAsBits(com.android.internal.telephony.uicc.euicc.TAG_CTX_2, options).build().toHex();java.lang.String response; int result; try (com.android.internal.telephony.uicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.euicc.UiccLogicalChannel.openIsdR(mTm)) { response = ch.execStoreData(command); result = com.android.internal.telephony.uicc.euicc.EuiccCard.parseSimpleResult(response); } catch (com.android.internal.telephony.uicc.UiccChannelException e) { if ((e.getApduStatus()) == (com.android.internal.telephony.uicc.EuiccCard.APDU_ERROR_SIM_REFRESH)) { com.android.internal.telephony.uicc.EuiccLog.get().i("Device is refreshed after resetting memory, no response got."); result = ResetMemoryCode.OK; } else { throw e; } } switch (result) { case ResetMemoryCode.OK : mProfiles = null; mEnabledIccid = null; mDefaultSmdpAddress = null; break; case ResetMemoryCode.NOTHING_TO_DELETE : break; default : throw new com.android.internal.telephony.uicc.euicc.EuiccCardErrorException(ResetMemoryCode.RESET_MEMORY, result, handler); } }
public void getSmdsAddress(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.String> callback, android.os.Handler handler) { if ((mSmdsAddress) == null) { getDefaultSmdpAddress(); } return mSmdsAddress; }
public void getEuiccChallenge(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) {java.lang.String response; try (com.android.internal.telephony.uicc.euicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.euicc.UiccLogicalChannel.openIsdR(mTm)) { response = ch.execStoreData(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.euicc.TAG_GET_EUICC_CHALLENGE).build().toHex()); } com.android.internal.telephony.uicc.asn1.Asn1Node node = com.android.internal.telephony.uicc.euicc.EuiccCard.parseResponse(response); try { return node.getChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_0).asBytes(); } catch (com.android.internal.telephony.uicc.asn1.TagNotFoundException | com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException e) { throw new com.android.internal.telephony.uicc.euicc.EuiccCardInvalidResponseException(("Couldn't parse response: " + response), e); } }
@org.junit.Test public void testCancelSession() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF41009000"); com.android.internal.telephony.uicc.euicc.Asn1Node result = mEuiccCard.cancelSession(com.android.internal.telephony.uicc.euicc.Asn1Converter.hexToBytes("A1B2C3"), EuiccCard.CancelReason.POSTPONED); assertEquals("BF4100", result.toHex()); verifyStoreData(channel, "BF41088003A1B2C3810101"); }
public void cancelSession(byte[] transactionId, @android.telephony.euicc.EuiccCardManager.CancelReason int reason, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) {java.lang.String command = com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.euicc.TAG_CANCEL_SESSION).addChildAsBytes(com.android.internal.telephony.uicc.euicc.TAG_CTX_0, transactionId).addChildAsInteger(com.android.internal.telephony.uicc.euicc.TAG_CTX_1, reason).build().toHex();java.lang.String response; try (com.android.internal.telephony.uicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.UiccLogicalChannel.openIsdR(mTm)) { response = ch.execStoreData(command); } catch (com.android.internal.telephony.uicc.asn1.Asn1Exception e) { throw new com.android.internal.telephony.uicc.EuiccCardErrorException(OperationCode.CANCEL_SESSION, com.android.internal.telephony.uicc.euicc.TAG_CTX_1).convertResponse(e); } catch (com.android.internal.telephony.uicc.asn1.TagNotFoundException | com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException e) { throw new com.android.internal.telephony.uicc.EuiccCardErrorException(OperationCode.CANCEL_SESSION, com.android.internal.telephony.uicc.euicc.TAG_CTX_1).convertResponse(e); } catch (com.android.internal.telephony.uicc.asn1.TagNotFoundException | com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException e) { throw new com.android.internal.telephony.uicc.EuiccCardInvalidResponse
public void getEuiccInfo1(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<com.android.internal.telephony.uicc.asn1.Asn1Node> callback, android.os.Handler handler) {java.lang.String response; try (com.android.internal.telephony.uicc.euicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.euicc.UiccLogicalChannel.openIsdR(mTm)) { response = ch.execStoreData(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.euicc.TAG_GET_EUICC_INFO_1).build().toHex()); } catch (java.lang.Exception e) { com.android.internal.telephony.uicc.euicc.EuiccCard.parseResponse(response); } }
public void setDefaultSmdpAddress(java.lang.String defaultSmdpAddress, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.Void> callback, android.os.Handler handler) {java.lang.String command = com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.euicc.TAG_SET_DEFAULT_SMDP_ADDRESS).addChildAsString(com.android.internal.telephony.uicc.euicc.TAG_CTX_0, defaultSmdpAddress).build().toHex();java.lang.String response; try (com.android.internal.telephony.uicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.euicc.UiccLogicalChannel.openIsdR(mTm)) { response = ch.execStoreData(command); } int result = com.android.internal.telephony.uicc.euicc.EuiccCard.parseSimpleResult(response); switch (result) { case SetDefaultSmdpAddressCode.OK : break; default : throw new com.android.internal.telephony.uicc.euicc.EuiccCardErrorException(OperationCode.SET_DEFAULT_SMDP_ADDRESS, result); } mDefaultSmdpAddress = defaultSmdpAddress; }
@org.junit.Test(expected = com.android.internal.telephony.uicc.euicc.EuiccCardErrorException.class) public void testDeleteProfile_Error() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(("BF2D26A024" + (("E3105A0A896700000000004523019F700100" + "E3105A0A896700000000004523029F700101") + "9000")), "BF33038001039000"); try { mEuiccCard.deleteProfile("98760000000000543210"); } catch (com.android.internal.telephony.uicc.euicc.EuiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, "BF330C5A0A89670000000000452301"); throw e; } }
public void getDefaultSmdpAddress(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.String> callback, android.os.Handler handler) { if (((mDefaultSmdpAddress) == null) || ((mSmdsAddress) == null)) {java.lang.String response; try (com.android.internal.telephony.uicc.euicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.euicc.UiccLogicalChannel.openIsdR(mTm)) { response = ch.execStoreData(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.euicc.TAG_GET_CONFIGURED_ADDRESSES).build().toHex()); } try { com.android.internal.telephony.uicc.asn1.Asn1Node root = com.android.internal.telephony.uicc.euicc.EuiccCard.parseResponse(response); mDefaultSmdpAddress = root.getChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_0).asString(); mSmdsAddress = root.getChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_1).asString(); } catch (com.android.internal.telephony.uicc.asn1.TagNotFoundException | com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException e) { throw new com.android.internal.telephony.uicc.euicc.EuiccCardInvalidResponseException(("Couldn parse response: " + response), e); } } }
public void getEuiccInfo2(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<com.android.internal.telephony.uicc.asn1.Asn1Node> callback, android.os.Handler handler) {java.lang.String response; try (com.android.internal.telephony.uicc.euicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.euicc.UiccLogicalChannel.openIsdR(mTm)) { response = ch.execStoreData(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.euicc.TAG_GET_EUICC_INFO_2).build().toHex()); } catch (java.lang.Exception e) { com.android.internal.telephony.uicc.euicc.EuiccCard.parseResponse(response); } }
@org.junit.Test(expected = com.android.internal.telephony.uicc.euicc.EuiccCardErrorException.class) public void testRetrieveNotificationList_Error() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF2B038101039000"); try { mEuiccCard.retrieveNotificationList(((EuiccNotification.Event.DELETE) | (EuiccNotification.Event.DISABLE))); } catch (com.android.internal.telephony.uicc.euicc.EuiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, "BF2B06A00481020430"); throw e; } }
public void getEid(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.String> callback, android.os.Handler handler) { if ((mEid) == null) {java.lang.String response; try (com.android.internal.telephony.uicc.euicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.euicc.UiccLogicalChannel.openIsdR(mTm)) {java.lang.String command = com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.euicc.TAG_GET_EID).addChildAsBytes(com.android.internal.telephony.uicc.TAG_TAG_LIST, new byte[]{ TAG_EID }).build().toHex(); response = ch.execStoreData(command); } com.android.internal.telephony.uicc.asn1.Asn1Node eidAsn1Node = com.android.internal.telephony.uicc.euicc.EuiccCard.parseResponse(response); try { mEid = com.android.internal.telephony.uicc.euicc.Asn1Converter.bytesToHex(eidAsn1Node.getChild(com.android.internal.telephony.uicc.TAG_EID).asBytes()); } catch (com.android.internal.telephony.uicc.asn1.TagNotFoundException | com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException e) { throw new com.android.internal.telephony.uicc.EuiccCardInvalidResponseException(("Failed to get EID: response = " + response), e); } } return mEid; }
@org.junit.Test public void testGetDefaultSmdpAddress() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF3C148008534D44502E434F4D8108736D64732E636F6D9000"); assertEquals("SMDP.COM", mEuiccCard.getDefaultSmdpAddress()); verifyStoreData(channel, "BF3C00"); }
public void close() { android.util.Log.d(android.net.IpSecTransform.TAG, ("Closing Transform with Id " + (mResourceId))); if ((mResourceId) == (android.net.IpSecManager.INVALID_RESOURCE_ID)) { mCloseGuard.close(); return; } try { android.net.IIpSecService svc = getIpSecService(); svc.deleteTransportModeTransform(mResourceId); } catch (android.os.RemoteException e) { throw e.rethrowAsRuntimeException(); } finally { mResourceId = android.net.IpSecManager.INVALID_RESOURCE_ID; mCloseGuard.close(); } }
@java.lang.Override public void onError(int error) { synchronized(this) { mKeepalive = null; } if ((mUserKeepaliveCallback)!= null) mUserKeepaliveCallback.onError(error); }
void stopNattKeepalive() { if ((mKeepalive) == null) { android.util.Log.e(android.net.IpSecTransform.TAG, "No active keepalive to stop"); return; } mKeepalive.stop(); }
@java.lang.Override public void onStarted() { if (mUserKeepaliveCallback!= null) { mUserKeepaliveCallback.onStarted(); } }
@java.lang.Override public void onStopped() { synchronized(this) { mKeepalive = null; } if ((mUserKeepaliveCallback)!= null) mUserKeepaliveCallback.onStopped(); }
void startNattKeepalive(java.io.FileDescriptor socket, android.net.ConnectivityManager.PacketKeepaliveCallback userCallback, int intervalSeconds) throwsjava.io.IOException { if ((mConfig.getMode())!= (android.net.IpSecTransform.MODE_TRANSPORT)) { throw newjava.lang.IllegalArgumentException("IpSec keepalive cannot be used in Tunnel mode"); } if ((mResourceId) == (android.net.IpSecManager.INVALID_RESOURCE_ID)) { throw newjava.lang.IllegalStateException("IpSec keepalive cannot be started for an inactive transform"); } synchronized(mKeepaliveCallback) { if ((mKeepaliveCallback)!= null) { throw newjava.lang.IllegalStateException("Keepalive already active"); }java.net.InetSocketAddress localAddr = null; try { localAddr = ((java.net.InetSocketAddress) (android.system.Os.getsockname(socket))); } catch (android.system.ErrnoException e) { throw e.rethrowAsIOException(); } mUserKeepaliveCallback = userCallback; android.net.ConnectivityManager cm = ((android.net.ConnectivityManager) (mContext.getSystemService(Context.CONNECTIVITY_SERVICE))); mKeepalive = cm.startNattKeepalive(mConfig.getNetwork(), intervalSeconds, mKeepaliveCallback, localAddr.getAddress(), localAddr.getPort(), android.net.NetworkUtils.numericToInetAddress(mConfig.getRemoteAddress())); } }
private android.net.IpSecTransform activate() throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException,java.io.IOException { synchronized(this) { try { android.net.IIpSecService svc = getIpSecService(); android.net.IpSecTransformResponse result = svc.createTransportModeTransform(mConfig, new android.os.Binder()); int status = result.status; checkResultStatus(status); mResourceId = result.resourceId; android.util.Log.d(android.net.IpSecTransform.TAG, ("Active Transform with Id " + (mResourceId))); mCloseGuard.open("build"); } catch (android.os.RemoteException e) { throw e.rethrowAsRuntimeException(); } } return this; }
public int getDuplexMode() { return android.telephony.ServiceState.DUPLEX_MODE_UNKNOWN; }
public int[] getCellBandwidths() { return new int[0]; }
public void setChannelNumber(int channelNumber) { mChannelNumber = channelNumber; }
public void setCellBandwidths(int[] bandwidths) { mCellBandwidths = bandwidths; }
public int getChannelNumber() { return 0; }
@android.test.suitebuilder.annotation.SmallTest public void testParcel() { android.telephony.ServiceState ss = new android.telephony.ServiceState(); ss.setVoiceRegState(ServiceState.STATE_IN_SERVICE); ss.setDataRegState(ServiceState.STATE_OUT_OF_SERVICE); ss.setVoiceRoamingType(ServiceState.ROAMING_TYPE_INTERNATIONAL); ss.setDataRoamingType(ServiceState.ROAMING_TYPE_UNKNOWN); ss.setOperatorName("long", "short", "numeric"); ss.setIsManualSelection(true); ss.setRilVoiceRadioTechnology(ServiceState.RIL_RADIO_TECHNOLOGY_1xRTT); ss.setRilDataRadioTechnology(ServiceState.RIL_RADIO_TECHNOLOGY_EVDO_0); ss.setCssIndicator(1); ss.setSystemAndNetworkId(2, 3); ss.setCdmaRoamingIndicator(4); ss.setCdmaDefaultRoamingIndicator(5); ss.setCdmaEriIconIndex(6); ss.setCdmaEriIconMode(7); ss.setEmergencyOnly(true); ss.setDataRoamingFromRegistration(true); ss.setChannelNumber(2100); ss.setCellBandwidths(new int[]{ 3, 4, 10 }); android.os.Parcel p = android.os.Parcel.obtain(); ss.writeToParcel(p, 0); p.setDataPosition(0); android.telephony.ServiceState newSs = new android.telephony.ServiceState(p); assertEquals(ss, newSs); }
public int getCellConnectionStatus() { return mCellConnectionStatus; }
public void setCellConnectionStatus(int cellConnectionStatus) { mCellConnectionStatus = cellConnectionStatus; }
private int getResultCode(java.lang.Throwable e) { if ((e.getCause()) instanceof com.android.internal.telephony.euicc.EuiccCardErrorException) { com.android.internal.telephony.euicc.EuiccCardErrorException exception = ((com.android.internal.telephony.euicc.EuiccCardErrorException) (e.getCause())); int resultCode = ((exception.getOperationCode()) << (com.android.internal.telephony.euicc.EuiccCardController.EUICC_CARD_ERROR_CODE_OPERATION_BITS_SHIFT)) + (exception.getErrorCode()); return resultCode; } return android.telephony.euicc.EuiccCardManager.RESULT_UNKNOWN; }
@java.lang.Override public void onResult(android.service.euicc.EuiccProfileInfo[] profiles) { callback.onComplete(EuiccCardManager.RESULT_OK, profiles); }
@java.lang.Override public void getAllProfiles(java.lang.String callingPackage, com.android.internal.telephony.uicc.IGetAllProfilesCallback callback) { checkCallingPackage(callingPackage); com.android.internal.telephony.uicc.async.AsyncResultCallback<android.service.euicc.EuiccProfileInfo[]> cardCb = new com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<android.service.euicc.EuiccProfileInfo[]>() { @java.lang.Override public void onResult(android.service.euicc.EuiccProfileInfo[] profiles) { callback.onComplete(EuiccCardManager.RESULT_OK, profiles); } @java.lang.Override public void onException(java.lang.Throwable e) { callback.onComplete(getResultCode(e), null); } }; com.android.internal.telephony.uicc.UiccController.getInstance().getEuiccCard().getAllProfiles(cardCb, mEuiccHandler); }
public com.android.internal.telephony.uicc.UiccCard getEuiccCard(int slotIndex) { return null; }
@java.lang.Override public void onException(java.lang.Throwable e) { callback.onComplete(getResultCode(e), null); }
public void testJvmtiAgentAppInternal() throwsjava.lang.Exception { runJvmtiAgentLoadTest((com.android.tradefed.device.ITestDevice device,java.lang.String pkg,java.lang.String apk,java.lang.String abiName) -> { try {java.lang.String setAgentAppCmd = (("cmd activity set-agent-app " + pkg) + " ") + (android.jvmti.cts.JvmtiAttachingHostTest.AGENT);java.lang.String setAgentAppReply = device.executeShellCommand(setAgentAppCmd); if ((setAgentAppReply!= null) && (!(setAgentAppReply.trim().isEmpty()))) { com.android.tradefed.log.LogUtil.CLog.e(setAgentAppReply); } } catch (java.lang.Exception e) { throw newjava.lang.RuntimeException("Failed running set-agent-app", e); } try { android.jvmti.cts.JvmtiAttachingHostTest.runAttachTestCmd(device, pkg, ""); } catch (java.lang.Exception e) { throw newjava.lang.RuntimeException("Failed agent-app attaching", e); } }); }
public void testJvmtiAgentAppExternal() throwsjava.lang.Exception { runJvmtiAgentLoadTest((com.android.tradefed.device.ITestDevice device,java.lang.String pkg,java.lang.String apk,java.lang.String abiName) -> { try {java.lang.String pwd = device.executeShellCommand((("run-as " + pkg) + " pwd")); if (pwd == null) { throw newjava.lang.RuntimeException("pwd failed"); } pwd = pwd.trim(); if (pwd.isEmpty()) { throw newjava.lang.RuntimeException("pwd failed"); }java.lang.String libInDataData = (android.jvmti.cts.JvmtiAttachingHostTest.AGENT.substring(0, ((android.jvmti.cts.JvmtiAttachingHostTest.AGENT.length()) - (".so".length())))) + "2.so";java.lang.String agentInDataData = installLibToDataData(device, pkg, abiName, apk, pwd, android.jvmti.cts.JvmtiAttachingHostTest.AGENT, libInDataData);java.lang.String setAgentAppCmd = (("cmd activity set-agent-app " + pkg) + " ") + agentInDataData;java.lang.String setAgentAppReply = device.executeShellCommand(setAgentAppCmd); if ((setAgentAppReply!= null) && (!(setAgentAppReply.trim().isEmpty()))) { com.android.tradefed.log.LogUtil.CLog.e(setAgentAppReply); } } catch (java.lang.Exception e) { throw newjava.lang.RuntimeException("Failed running set-agent-app", e); } try { android.jvmti.cts.JvmtiAttachingHostTest.runAttachTestCmd(device, pkg, ""); } catch (java.lang.Exception e) { throw newjava.lang.RuntimeException("Failed agent-app attaching", e); } }); }
private static void runAttachTestCmd(com.android.tradefed.device.ITestDevice device,java.lang.String pkg,java.lang.String agentParams) throwsjava.lang.Exception {java.lang.String attachCmd = (("adb activity start -S -W " + agentParams) + " -n ") + pkg) + "/android.jvmti.JvmtiActivity";java.lang.String attachReply = device.executeShellCommand(attachCmd); if ((attachReply!= null) && (!(attachReply.trim().isEmpty()))) { com.android.tradefed.log.LogUtil.CLog.e(attachReply); } }
@java.lang.Override public void setAgentApp(java.lang.String packageName,java.lang.String agent) { synchronized(this) { if ((checkCallingPermission(android.Manifest.permission.SET_ACTIVITY_WATCHER))!= (android.content.pm.PackageManager.PERMISSION_GRANTED)) { throw newjava.lang.SecurityException(("Requires permission " + (android.Manifest.permission.SET_ACTIVITY_WATCHER))); } stopProfilerLocked(null, 0); setProfileAppUnchecked(packageName, new android.app.ProfilerInfo(null, null, 0, false, false, agent, true)); mProfileProc = null; } }
int runSetAgentApp(java.io.PrintWriter pw) throws android.os.RemoteException {java.lang.String pkg = getNextArgRequired();java.lang.String agent = getNextArgRequired(); mInterface.setAgentApp(pkg, agent); return 0; }
void setProfileApp(android.content.pm.ApplicationInfo app,java.lang.String processName, android.app.ProfilerInfo profilerInfo) { synchronized(this) { boolean isDebuggable = "1".equals(android.os.SystemProperties.get(com.android.server.am.ActivityManagerService.SYSTEM_DEBUGGABLE, "0")); if (!isDebuggable) { if (((app.flags) & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE)) == 0) { throw newjava.lang.SecurityException(("Package not debuggable: " + (app.packageName))); } } setProfileAppUnchecked(processName, profilerInfo); } }
private void restoreDefaultAPN(int subId) { android.database.sqlite.SQLiteDatabase db = getWritableDatabase();java.lang.String where = getWhereClauseForRestoreDefaultApn(db, subId); com.android.providers.telephony.TelephonyProvider.log(("restoreDefaultAPN: where: " + where)); if (android.text.TextUtils.isEmpty(where)) { com.android.providers.telephony.TelephonyProvider.loge("Cannot get where clause to restore APN"); where = com.android.providers.telephony.TelephonyProvider.IS_NOT_OWNED_BY_DPC; } try { db.delete(com.android.providers.telephony.TelephonyProvider.CARRIERS_TABLE, where, null); } catch (android.database.SQLException e) { com.android.providers.telephony.TelephonyProvider.loge(("SQLException exception when deleting to restore: " + e)); } android.content.SharedPreferences spApnId = getContext().getSharedPreferences(com.android.providers.telephony.TelephonyProvider.PREF_FILE_APN, Context.MODE_PRIVATE); android.content.SharedPreferences.Editor editorApnId = spApnId.edit(); editorApnId.clear(); editorApnId.apply(); android.content.SharedPreferences spApn = getContext().getSharedPreferences(com.android.providers.telephony.TelephonyProvider.PREF_FILE_FULL_APN, Context.MODE_PRIVATE); android.content.SharedPreferences.Editor editorApn = spApn.edit(); editorApn.clear(); editorApn.apply(); if (com.android.providers.telephony.TelephonyProvider.apnSourceServiceExists(getContext())) { restoreApnsWithService(); } else { initDatabaseWithDatabaseHelper(db); } }
void disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH_ADMIN permission"); synchronized(mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
@java.lang.Override public boolean onConnect(android.bluetooth.BluetoothDevice remoteDevice, android.bluetooth.BluetoothSocket socket) { if ((remoteDevice == null) || (socket == null)) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, (("onConnect: Unexpected null. remoteDevice=" + remoteDevice) + " socket=") + socket)); return false; } com.android.bluetooth.pbap.PbapStateMachine newStateMachine = com.android.bluetooth.pbap.PbapStateMachine.make(this, mHandlerThread.getLooper(), remoteDevice, socket, this, mSessionStatusHandler, mNextNotificationId); mPbapStateMachineMap.put(remoteDevice, newStateMachine); mServerSockets.prepareForNewConnect(); return true; }
javajava.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM, "Need BLUETOOTH permission");java.util.List<android.bluetooth.BluetoothDevice> devices = newjava.util.ArrayList<>(); if ((mPbapStateMachineMap) == null) { return devices; } for (int state : states) { for (android.bluetooth.BluetoothDevice device : mPbapStateMachineMap.keySet()) { if (state == (mPbapStateMachineMap.get(device).getConnectionState())) { devices.add(device); } } } return devices; }
private void cleanUpServerSocket() { com.android.bluetooth.pbap.PbapStateMachine stateMachine = mPbapStateMachineMap.get(mPbapStateMachineMap.KEY_STATE_MAINTAIN); stateMachine.sendMessage(PbapStateMachine.DISCONNECT); cleanUpSdpRecord(); if ((mServerSockets)!= null) { mServerSockets.shutdown(false); mServerSockets = null; } }
javajava.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if ((mPbapStateMachineMap) == null) { return newjava.util.ArrayList<>(); } return newjava.util.ArrayList<>(mPbapStateMachineMap.values().iterator().next()); }
com com com com com
public void addTcpStatsResult(int sent, int lost) { pendingSummary.tcpLossRate.count(lost, sent); }
@java.lang.Override publicjava.lang.String toString() {java.util.StringJoiner j = newjava.util.StringJoiner(" ", "{", "}"); j.add(("netId=" + (netId))); for (int t : com.android.internal.util.BitUtils.unpackBits(transports)) { j.add(android.net.NetworkCapabilities.transportNameOf(t)); } j.add(java.lang.String.format(" avg=%dms max=%dms err=%.1f%% tot=%d", ((int) (dnsLatencies.average())), ((int) (dnsLatencies.max)), (100 * (dnsErrorRate.average())), dnsErrorRate.count)); j.add(java.lang.String.format(" avg=%dms max=%dms err=%.1f%% tot=%d", ((int) (connectLatencies.average())), ((int) (connectLatencies.max)), (100 * (connectErrorRate.average())), connectErrorRate.count)); j.add(java.lang.String.format(" avg_loss=%.1f%% total_sent=%d total_lost=%d", ((int) (tcpLossRate.average())), tcpLossRate.count, ((int) (tcpLossRate.sum)))); return j.toString(); }
@java.lang.Override public synchronized void onTcpSocketStatsEvent(int[] networkIds, int[] packetSentCounters, int[] packetLostCounters) { if (((networkIds.length)!= (packetSentCounters.length)) || ((networkIds.length)!= (packetLostCounters.length))) { android.util.Log.e(com.android.server.connectivity.NetdEventListenerService.TAG, "Invalid data FIXME"); return; } long timestamp =java.lang.System.currentTimeMillis(); for (int i = 0; i < (networkIds.length); i++) { int netId = networkIds[i]; int sent = packetSentCounters[i]; int lost = packetLostCounters[i]; getMetricsForNetwork(timestamp, netId).addTcpStatsResult(sent, lost); } if (com.android.server.connectivity.NetdEventListenerService.DBG) {java.util.StringJoiner j = newjava.util.StringJoiner(", "); for (int i = 0; i < (networkIds.length); i++) { int netId = networkIds[i]; int sent = packetSentCounters[i]; int lost = packetLostCounters[i]; j.add(java.lang.String.format("{netId=%d, sent=%d, lost=%d}", netId, sent, lost)); } android.util.Log.d(com.android.server.connectivity.NetdEventListenerService.TAG, ("TcpSocketStatsEvent: " + (j.toString()))); } }
public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeInt(mMaxDataCalls); }
public android.telephony.NetworkRegistrationState.DataSpecificStates getDataSpecificStates() { return mDataSpecificStates; }
public android.telephony.NetworkRegistrationState.VoiceSpecificStates getVoiceSpecificStates() { return mVoiceSpecificStates; }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeInt(mTransportType); dest.writeInt(mDomain); dest.writeInt(mRegState); dest.writeInt(mAccessNetworkTechnology); dest.writeInt(mReasonForDenial); dest.writeBoolean(mEmergencyOnly); dest.writeIntArray(mAvailableServices); dest.writeParcelable(mCellIdentity, 0); if ((mVoiceSpecificStates)!= null) { dest.writeBoolean(true); mVoiceSpecificStates.writeToParcel(dest, flags); } else { dest.writeBoolean(false); } if ((mDataSpecificStates)!= null) { dest.writeBoolean(true); mDataSpecificStates.writeToParcel(dest, flags); } else { dest.writeBoolean(false); } }
public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeBoolean(mCssSupported); dest.writeInt(mRoamingIndicator); dest.writeInt(mSystemIsInPrl); dest.writeInt(mDefaultRoamingIndicator); }
@java.lang.Override public android.os.IBinder onBind(android.content.Intent intent) { if ((intent == null) || (!(android.telephony.data.DataService.DATA_SERVICE_INTERFACE.equals(intent.getAction())))) { loge(("Invalid intent " + intent)); return null; } if ((mBinder)!= null) { return mBinder; } mHandler.obtainMessage(android.telephony.data.DataService.DATA_SERVICE_INTERNAL_REQUEST_INITIALIZE_SERVICE).sendToTarget(); mBinder = new android.telephony.data.DataService.IDataServiceWrapper(); return mBinder; }
@java.lang.Override public boolean onUnbind(android.content.Intent intent) { onDestroy(); return false; }
@java.lang.Override public void onDestroy() { if (mCleaningUp) { log("AdapterService already started... Skipping cleanup()..."); return; } mCleaningUp = true; cleanup(); if ((mAdapterService)!= null) { mAdapterService.removeProfile(this); } super.onDestroy(); mAdapter = null; }
private void doStart() { if ((mAdapter) == null) { android.util.Log.w(mName, "Cannot start profile service: device does not have BT"); return; } mAdapterService = com.android.bluetooth.btservice.AdapterService.getAdapterService(); if ((mAdapterService) == null) { android.util.Log.w(com.android.bluetooth.btservice.ProfileService.TAG, "Could not add this profile because AdapterService is null."); return; } mAdapterService.addProfile(this); mProfileStarted = start(); if (!(mProfileStarted)) { android.util.Log.e(mName, "Error starting profile. start() returned false."); return; } mAdapterService.onProfileServiceStateChanged(getClass().getName(), BluetoothAdapter.STATE_ON); }
protected boolean isAvailable() { return (mProfileStarted) && (!(mCleaningUp)); }
private void doStop() { if (!(mProfileStarted)) { android.util.Log.w(mName, "onStop() called but the profile is not running."); } mProfileStarted = false; if (!(stop())) { android.util.Log.e(mName, "Unable to stop profile"); } if ((mAdapterService)!= null) { mAdapterService.onProfileServiceStateChanged(getClass().getName(), BluetoothAdapter.STATE_OFF); } stopSelf(); }
@java.lang.Override public void onCreate() { if (com.android.bluetooth.btservice.ProfileService.DBG) { log("onCreate"); } super.onCreate(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mBinder = initBinder(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(Intent.ACTION_USER_SWITCHED); filter.addAction(Intent.ACTION_USER_UNLOCKED); android.content.BroadcastReceiver userSwitchedReceiver = new android.content.BroadcastReceiver() { @java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { finaljava.lang.String action = intent.getAction(); final int userId = intent.getIntExtra(Intent.EXTRA_USER_HANDLE, UserHandle.USER_NULL); if (userId == (android.os.UserHandle.USER_NULL)) { android.util.Log.e(mName, "Receiver received an invalid EXTRA_USER_HANDLE"); return; } if (Intent.ACTION_USER_SWITCHED.equals(action)) { android.util.Log.d(mName, ("User switched to userId " + userId)); setCurrentUser(userId); } else if (Intent.ACTION_USER_UNLOCKED.equals(intent.getAction())) { android.util.Log.d(mName, ("User unlocked userId " + userId)); setUserUnlocked(userId); } } }; getApplicationContext().registerReceiver(userSwitchedReceiver, filter); int currentUserId = android.app.ActivityManager.getCurrentUser(); setCurrentUser(currentUserId); android.os.UserManager userManager = android.os.UserManager.get(getApplicationContext()); if (userManager.isUserUnlocked(currentUserId)) { setUserUnlocked(currentUserId); } create(); }
public android.bluetooth.BluetoothCodecStatus getCodecStatus() { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, "getCodecStatus()"); } synchronized(mStateMachines) { for (com.android.bluetooth.a2dp.A2dpStateMachine sm : mStateMachines.values()) { if (sm.isConnected()) { return sm.getCodecStatus(); } } return mLocalCodecStatus; } }
private void broadcastConnectionState(int newState, int prevState) { if (com.android.bluetooth.a2dp.A2dpStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ((((("Connection state " + (mDevice)) + ": ") + (com.android.bluetooth.a2dp.A2dpStateMachine.profileStateToString(prevState))) + "->") + (com.android.bluetooth.a2dp.A2dpStateMachine.profileStateToString(newState)))); } mAudioManager.setBluetoothA2dpDeviceConnectionState(mDevice, newState, BluetoothProfile.A2DP); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothA2dp.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, newState); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mDevice); intent.addFlags(((android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT) | (android.content.Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND))); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }
void disconnect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ("disconnect " + device)); } enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine sm = mStateMachines.get(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ("disconnect disconnect request for " + device) + " : no state machine"); return; } int connectionState = sm.getConnectionState(); if ((connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return; } sm.sendMessage(A2dpStateMachine.DISCONNECT); return true; } }
private void processCodecConfigEvent(android.bluetooth.BluetoothCodecStatus newCodecStatus) { android.bluetooth.BluetoothCodecConfig prevCodecConfig = null; synchronized(this) { if ((mCodecStatus)!= null) { prevCodecConfig = mCodecStatus.getCodecConfig(); } mCodecStatus = newCodecStatus; } if (com.android.bluetooth.a2dp.A2dpStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (("Codec Config: " + prevCodecConfig) + "->") + (newCodecStatus.getCodecConfig()))); for (android.bluetooth.BluetoothCodecConfig codecConfig : newCodecStatus.getCodecsLocalCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("New Codec Local Capability: " + codecConfig)); } for (android.bluetooth.BluetoothCodecConfig codecConfig : newCodecStatus.getCodecsSelectableCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("New Codec Selectable Capability: " + codecConfig)); } } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothA2dp.ACTION_CODEC_CONFIG_CHANGED); intent.putExtra(BluetoothCodecStatus.EXTRA_CODEC_STATUS, mCodecStatus); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); if ((!(newCodecStatus.getCodecConfig().sameAudioFeedingParameters(prevCodecConfig))) && ((getCurrentState()) == (mConnected))) { intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mDevice); mAudioManager.handleBluetoothA2dpDeviceConfigChange(mDevice); } mService.sendBroadcast(intent, A2dpService.BLUETOOTH_PERM); }
@java.lang.Override public void enter() { android.util.Log.i(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ((("Enter Disconnected(" + (mDevice)) + "): ") + (com.android.bluetooth.a2dp.A2dpStateMachine.messageWhatToString(getCurrentMessage().what)))); mConnectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; removeMessages(com.android.bluetooth.a2dp.A2dpStateMachine.CONNECT_TIMEOUT); if ((mLastConnectionState)!= (-1)) { broadcastConnectionState(mConnectionState, mLastConnectionState); } }
booleanToConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnectConnect
@java.lang.Override public void dump(java.lang.StringBuilder sb) { super.dump(sb); for (com.android.bluetooth.a2dp.A2dpStateMachine sm : mStateMachines.values()) { sm.dump(sb); } if ((mAvrcp)!= null) { mAvrcp.dump(sb); } }
@org.junit.Test public void testIncomingPriorityReject() { when(mA2dpService.getPriority(any(android.bluetooth.BluetoothDevice.class))).thenReturn(BluetoothProfile.PRIORITY_OFF); com.android.bluetooth.a2dp.A2dpStackEvent connStCh = new com.android.bluetooth.a2dp.A2dpStackEvent(A2dpStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED); connStCh.valueInt = A2dpStackEvent.CONNECTION_STATE_CONNECTED; connStCh.device = mTestDevice; mA2dpStateMachine.sendMessage(A2dpStateMachine.STACK_EVENT, connStCh); verify(mA2dpService, after(com.android.bluetooth.a2dp.A2dpStateMachineTest.TIMEOUT_MS).never()).sendBroadcast(any(android.content.Intent.class), anyString()); org.hamcrest.core.IsInstanceOf.assertInstanceOf(mA2dpStateMachine.getCurrentState(), org.hamcrest.core.IsInstanceOf. instanceOf(A2dpStateMachine.Disconnected.class)); }
@org.junit.Test public void testDefaultDisconnectedState() { org.junit.Assert.assertEquals(mA2dpStateMachine.getConnectionState(), BluetoothProfile.STATE_DISCONNECTED); }
@org.junit.Test public void testOutgoingTimeout() { when(mA2dpService.getPriority(any(android.bluetooth.BluetoothDevice.class))).thenReturn(BluetoothProfile.PRIORITY_ON); when(mA2dpNativeInterface.connectA2dp(any(android.bluetooth.BluetoothDevice.class))).thenReturn(true); when(mA2dpNativeInterface.disconnectA2dp(any(android.bluetooth.BluetoothDevice.class))).thenReturn(true); mA2dpStateMachine.sendMessage(A2dpStateMachine.CONNECT, mTestDevice); org.mockito.ArgumentCaptor<android.content.Intent> intentArgument1 = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); verify(mA2dpService, timeout(((A2dpStateMachine.sConnectTimeoutMs) * 2)).times(1)).sendBroadcast(intentArgument1.capture(), anyString()); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, intentArgument1.getValue().getIntExtra(BluetoothProfile.EXTRA_STATE, (-1))); org.junit.Assert.assertEquals(mA2dpStateMachine.getCurrentState(), org.hamcrest.core.IsInstanceOf.instanceOf(A2dpStateMachine.Connecting.class)); org.junit.Assert.assertEquals(mA2dpStateMachine.getCurrentState(), org.hamcrest.core.IsInstanceOf.instanceOf(A2dpStateMachine.Disconnected.class))); }
public void setCodecConfigPreference(android.bluetooth.BluetoothCodecConfig codecConfig) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ("setCodecConfigPreference: " + (java.util.Objects.toString(codecConfig)))); } mA2dpCodecConfig.setCodecConfigPreference(codecConfig); }
public void disableOptionalCodecs() { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, "disableOptionalCodecs()"); } mA2dpCodecConfig.disableOptionalCodecs(); }
public void dump(java.lang.StringBuilder sb) { com.android.bluetooth.btservice.ProfileService.println(sb, ("Device: " + (mDevice))); com.android.bluetooth.btservice.ProfileService.println(sb, ("StateMachine: " + (this.toString())))); com.android.bluetooth.btservice.ProfileService.println(sb, ("IsPlaying: " + (mIsPlaying))); synchronized(this) { if ((mCodecStatus)!= null) { com.android.bluetooth.btservice.ProfileService.println(sb, ("CodecConfig: " + (mCodecStatus.getCodecConfig()))); } } }
public void enableOptionalCodecs() { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, "enableOptionalCodecs()"); } mA2dpCodecConfig.enableOptionalCodecs(); }
@java.lang.Override protected boolean cleanup() { if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, "cleanup()"); } if ((mBondStateChangedReceiver)!= null) { unregisterReceiver(mBondStateChangedReceiver); mBondStateChangedReceiver = null; } if ((mConnectionStateChangedReceiver)!= null) { unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedReceiver = null; } for (java.util.Iterator<java.util.Map.Entry<android.bluetooth.BluetoothDevice, com.android.bluetooth.a2dp.A2dpStateMachine>> it = mStateMachines.entrySet().iterator(); it.hasNext();) { com.android.bluetooth.a2dp.A2dpStateMachine sm = it.next().getValue(); sm.cleanup(); it.remove(); } mA2dpNativeInterface.cleanup(); if ((mAvrcp)!= null) { mAvrcp.cleanup(); mAvrcp = null; } com.android.bluetooth.a2dp.A2dpService.clearA2dpService(); return true; }
void messageFromNative(com.android.bluetooth.a2dp.A2dpStackEvent stackEvent) { if (mStateStateStateStateStateStateStateStateStateStateStateState) { android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. android. ); } else { return; } com.android.bluetooth.a2dp.A2dpStateMachine sm = getStateMachine(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ("Cannot process stack event: no state machine: " + stackEvent)); return; } sm.sendMessage(A2dpStateMachine.STACK_EVENT, stackEvent); }
private void processConnectionEvent(int state) { switch (state) { case A2dpStackEvent.CONNECTION_STATE_DISCONNECTED : android.util.Log.i(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Disconnected: " + (mDevice))); transitionTo(mDisconnected); break; case A2dpStackEvent.CONNECTION_STATE_CONNECTED : android.util.Log.w(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Disconnecting interrupted: device is connected: " + (mDevice))); transitionTo(mConnected); break; case A2dpStackEvent.CONNECTION_STATE_CONNECTING : android.util.Log.i(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Disconnecting interrupted: try to reconnect: " + (mDevice))); transitionTo(mConnecting); break; case A2dpStackEvent.CONNECTION_STATE_DISCONNECTING : break; default : android.util.Log.e(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Incorrect state: " + state)); break; } }
private com.android.bluetooth.a2dp.A2dpStateMachine getStateMachine(android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, "getStateMachine failed: device cannot be null"); return null; } synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine sm = mStateMachines.get(device); if (sm!= null) { return sm; } if ((mStateMachines.size()) > (com.android.bluetooth.a2dp.A2dpService.MAX_A2DP_STATE_MACHINES)) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ("Maximum number of A2DP state machines reached: " + (com.android.bluetooth.a2dp.A2dpService.MAX_A2DP_STATE_MACHINES))); return null; } if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ("Creating a new state machine for " + device)); } sm = com.android.bluetooth.a2dp.A2dpStateMachine.make(device, this, this, mA2dpNativeInterface, mStateMachinesThread.getLooper()); mStateMachines.put(device, sm); return sm; } }
public boolean connect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ("connect " + device)); } enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if ((getPriority(device)) == (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { return false; } android.os.ParcelUuid[] featureUuids = device.getUuids(); if ((android.bluetooth.BluetoothUuid.containsAnyUuid(featureUuids, com.android.bluetooth.a2dp.A2DP_SOURCE_UUID)) && (!(android.bluetooth.BluetoothUuid.containsAllUuids(featureUuids, com.android.bluetooth.a2dp.A2DP_SOURCE_SINK_UUIDS)))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, "device does not have A2DP Sink UUID"); return false; } synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine smConnect = getStateMachine(device); if (smConnect == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("connect to " + device) + " : no state machine")); return false; } int connectionState = smConnect.getConnectionState(); if ((connectionState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) || (connectionState == (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } for (com.android.bluetooth.a2dp.A2dpStateMachine smDisconnect : mStateMachines.values()) { if (!(smDisconnect.getDevice().equals(device))) { smDisconnect.sendMessage(A2dpStateMachine.DISCONNECT); } } smConnect.sendMessage(A2dpStateMachine.CONNECT); return true; }
@java.lang.Override public void getDataCallList(int slotId, android.telephony.data.IDataServiceCallback callback) { mHandler.obtainMessage(android.telephony.data.DataService.DATA_SERVICE_REQUEST_GET_DATA_CALL_LIST, slotId, 0, callback).sendToTarget(); }
public static void doTest() throwsjava.lang.Exception { art.Redefinition.enableCommonRetransformation(true); art.Redefinition.doCommonClassRetransformation(art.Test983.Transform.class); art.Redefinition.doCommonClassRetransformation(java.lang.Object.class); art.Redefinition.doCommonClassRetransformation(java.lang.ClassLoader.class); art.Redefinition.enableCommonRetransformation(false); }
public static void run() throwsjava.lang.Exception { art.Test983.doTest(); }
com com com com com com com com com com com com com com com com com com com com com com com com com
public void testParseUtcLong() throwsjava.lang.Exception {java.lang.String roundTripFormat = "yyyyMMdd HH:mm:ss.SSSS zzzz"; libcore.java.text.SimpleDateFormatTest.doUtcParsingTest(java.util.Locale.ENGLISH, roundTripFormat); libcore.java.text.SimpleDateFormatTest.doUtcParsingTest(java.util.Locale.SIMPLIFIED_CHINESE, roundTripFormat); }
public void testParseUtcShort() throwsjava.lang.Exception {java.lang.String roundTripFormat = "yyyyMMdd HH:mm:ss.SSSS z"; libcore.java.text.SimpleDateFormatTest.doUtcParsingTest(java.util.Locale.ENGLISH, roundTripFormat); libcore.java.text.SimpleDateFormatTest.doUtcParsingTest(java.util.Locale.SIMPLIFIED_CHINESE, roundTripFormat); }
private static void doUtcParsingTest(java.util.Locale locale,java.lang.String roundTripFormat) throwsjava.lang.Exception {java.util.TimeZone nonUtcZone =java.util.TimeZone.getTimeZone("America/Los_Angeles");java.text.DateFormat formatter = newjava.text.SimpleDateFormat(roundTripFormat, locale);java.text.DateFormat parser = newjava.text.SimpleDateFormat(roundTripFormat, locale); for (java.lang.String timeZoneId : libcore.java.text.SimpleDateFormatTest.UTC_ZONE_IDS) {java.util.TimeZone timeZone =java.util.TimeZone.getTimeZone(timeZoneId); assertEquals(timeZoneId, timeZone.getID());java.util.Date dateToFormat = newjava.util.Date(); formatter.setTimeZone(timeZone);java.lang.String dateTimeString = formatter.format(dateToFormat); parser.setTimeZone(nonUtcZone);java.util.Date parsedDate = parser.parse(dateTimeString); assertEquals(dateToFormat, parsedDate); } }
public void stopNattKeepalive(int sessionHandle, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy == null) { android.telephony.Rlog.e(com.android.internal.telephony.RIL.RILJ_LOG_TAG, "Radio Proxy object is null!"); return; } android.hardware.radio.V1_1.IRadio radioProxy11 = android.hardware.radio.V1_1.IRadio.castFrom(radioProxy); if (radioProxy11 == null) { if (result!= null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } return; } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_STOP_KEEPALIVE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy11.stopKeepalive(rr.mSerial, sessionHandle); } catch (android.os.RemoteException |java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "stopNattKeepalive", e); } }
@java.lang.Override public com.android.internal.telephony.dataconnection.KeepaliveStatus createFromParcel(android.os.Parcel source) { return new com.android.internal.telephony.dataconnection.KeepaliveStatus(source.readInt(), source.readInt(), source.readInt()); }
private int checkSourceAddress() { for (java.net.InetAddress address : mNai.linkProperties.getAddresses()) { if (address.equals(mPacket.srcAddress)) { return SUCCESS; } } return ERROR_INVALID_IP_ADDRESS; }
public byte[] getNattKeepalivePacket() throws android.net.KeepalivePacketData.InvalidPacketException { if ((!((srcAddress) instanceofjava.net.Inet4Address)) || (!((dstAddress) instanceofjava.net.Inet4Address))) { throw new android.net.KeepalivePacketData.InvalidPacketException(ERROR_INVALID_IP_ADDRESS); } if ((dstPort)!= (NATT_PORT)) { throw new android.net.KeepalivePacketData.InvalidPacketException(ERROR_INVALID_PORT); } int length = ((android.net.KeepalivePacketData.IPV4_HEADER_LENGTH) + (android.net.KeepalivePacketData.UDP_HEADER_LENGTH)) + 1;java.nio.ByteBuffer buf =java.nio.ByteBuffer.allocate(length); buf.order(java.nio.ByteOrder.BIG_ENDIAN); buf.putShort(((short) (17664))); buf.putShort(((short) (length))); buf.putInt(0); buf.put(((byte) (64))); buf.put(((byte) (OsConstants.IPPROTO_UDP))); int ipChecksumOffset = buf.position(); buf.putShort(((short) (0))); buf.put(this.srcAddress.getAddress()); buf.put(this.dstAddress.getAddress()); buf.putShort(((short) (this.srcPort))); buf.putShort(((short) (this.dstPort))); buf.putShort(((short) (length - 20))); int udpChecksumOffset = buf.position(); buf.putShort(((short) (0))); buf.put(((byte) (255))); buf.putShort(ipChecksumOffset, android.net.util.IpUtils.ipChecksum(buf, 0)); buf.putShort(udpChecksumOffset, android.net.util.IpUtils.udpChecksum(buf, 0, android.net.KeepalivePacketData.IPV4_HEADER_LENGTH)); return buf.array(); }
java private int isValid() { synchronized(mNai) { int error = checkInterval(); if (error == (SUCCESS)) error = checkNetworkConnected(); if (error == (SUCCESS)) error = checkSourceAddress(); return error; } }
int startWifiIPPacketOffload(int slot, android.net.KeepalivePacketData packetData, int intervalSeconds) { byte byte = packetData.getNattKeepalivePacket(); byte[] dstMac = null; try { packet = packetData.getNattKeepalivePacket(); dstMac = getDstMacForKeepalive(packetData); } catch (android.net.KeepalivePacketData e) { return e.error; } int ret = mWifiNative.startSendingOffloadedPacket(slot, dstMac, packet, packetData.protocol, (intervalSeconds * 1000)); if (ret!= 0) { loge(((("startWifiIPPacketOffload(" + slot) + ") ") + intervalSeconds) + " hardware error ") + ret)); return ConnectivityManager.PacketKeepalive.ERROR_HARDWARE_ERROR; } else { return ConnectivityManager.PacketKeepalive.SUCCESS; } }
publicjava.lang.String toString() { return newjava.lang.StringBuffer(" [").append(" network=").append(mNai.network).append(" isStarted=").append(isStarted).append(" mPacket.srcPort=").append(android.net.util.IpUtils.addressAndPortToString(mPacket.dstAddress, mPacket.dstPort)).append(" interval=").append(mInterval).append(" uid=").append(mUid).append(" pid=").append(mPid).append(" ]"); }
public void startNattKeepalive(com.android.server.connectivity.NetworkAgentInfo nai, int intervalSeconds, android.os.Messenger messenger, android.os.IBinder binder,java.lang.String srcAddrString, int srcPort,java.lang.String dstAddrString, int dstPort) { if (nai == null) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, com.android.server.connectivity.ERROR_INVALID_NETWORK); return; }java.net.InetAddress srcAddress;java.net.InetAddress dstAddress; try { srcAddress = android.net.NetworkUtils.numericToInetAddress(srcAddrString); dstAddress = android.net.NetworkUtils.numericToInetAddress(dstAddrString); } catch (java.lang.IllegalArgumentException e) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, com.android.server.connectivity.ERROR_INVALID_IP_ADDRESS); return; } android.net.KeepalivePacketData packet; try { packet = new android.net.KeepalivePacketData(srcAddress, srcPort, dstAddress, NATT_PORT); } catch (android.net.KeepalivePacketData e) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, e.error); return; } com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo ki = new com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo(messenger, binder, nai, packet, intervalSeconds); android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, ("startKeepalive: " + (ki.toString()))); mConnectivityHandler.obtainMessage(NetworkAgent.CMD_KEEPALIVE, ki); }
private int checkNetworkConnected() { if (!(mNai.networkInfo.isConnectedOrConnecting())) { android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, "Network not connected"); return ERROR_INVALID_NETWORK; } return SUCCESS; }
public void startKeepaliveResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, android.hardware.radio.V1_1.KeepaliveStatus keepaliveStatus) { com.android.internal.telephony.RILRequest rr = mRil.processResponse(responseInfo); if (rr == null) { return; } if ((responseInfo.error) == (android.hardware.radio.V1_0.RadioError.NONE)) { com.android.internal.telephony.dataconnection.KeepaliveStatus ret = new com.android.internal.telephony.dataconnection.KeepaliveStatus(keepaliveStatus.sessionHandle, keepaliveStatus.code); com.android.internal.telephony.RadioResponse.sendMessageResponse(rr.mResult, ret); mRil.processResponseDone(rr, responseInfo, ret); } else { } }
public void writeToParcel(android.os.Parcel out, int flags) { out.writeParcelable(protocol, srcAddress.getAddress()); out.writeParcelable(dstAddress.getAddress()); out.writeParcelable(srcPort, dstPort); }
public void update(com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.uicc.IccSlotStatus iss) { log("update"); synchronized(mLock) { mCi = ci; if ((iss.slotState) == (IccSlotStatus.SlotState.SLOTSTATE_INACTIVE)) { if (mActive) { mActive = false; onRadioStateUnavailable(); } parseAtr(iss.atr); mCardState = iss.cardState; mIccId = iss.iccid; } else if ((!(mActive)) && ((iss.slotState) == (IccSlotStatus.SlotState.SLOTSTATE_ACTIVE))) { mActive = true; } } }
public void onRadioStateUnavailable() { if ((mUiccCard)!= null) { mUiccCard.dispose(); } mUiccCard = null; com.android.internal.telephony.uicc.UiccProfile.broadcastInternalIccStateChangedIntent(IccCardConstants.INTENT_VALUE_ICC_UNKNOWN, null, mPhoneId); mCardState = com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT; mLastRadioState = com.android.internal.telephony.CommandsInterface.RadioState.RADIO_UNAVAILABLE; }
@org.junit.Test public void testRecoverFromZipCorruptionStressTest() throwsjava.lang.Exception {java.lang.Thread startServices = newjava.lang.Thread() { @java.lang.Override public void run() { startServices(); } }; startServices.start(); for (int i = 0; i < 7; i++) {java.lang.Thread.sleep(1000); tamperAllExctractedZips(); } startServices.join(); try { waitServicesCompletion(); } catch (java.util.concurrent.TimeoutException e) { } killServices(); checkRecover(); }
@org.junit.Before public void setup() throwsjava.lang.Exception { android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, "setup");java.io.File applicationDataDir = newjava.io.File(android.support.test.InstrumentationRegistry.getTargetContext().getApplicationInfo().dataDir); com.android.framework.multidexlegacytestservices.test2.ServicesTests.clearDirContent(applicationDataDir); targetFilesDir = android.support.test.InstrumentationRegistry.getTargetContext().getFilesDir(); android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, "setup done"); }
privatejava.lang.String getServicesCompletionStatus() { for (int i = com.android.framework.multidexlegacytestservices.test2.ServicesTests.MIN_SERVICE; i <= (com.android.framework.multidexlegacytestservices.test2.ServicesTests.MAX_SERVICE); i++) {java.io.File resultFile = newjava.io.File(targetFilesDir, ("Service" + i)); if (!(resultFile.isFile())) { return ("Service" + i) + " never completed."; } if ((resultFile.length())!= 8) { return ("Service" + i) + " was restarted."; } } return com.android.framework.multidexlegacytestservices.test2.ServicesTests.COMPLETION_SUCCESS; }
privatejava.lang.String getServiceCompletionStatus(int serviceId) {java.io.File resultFile = newjava.io.File(targetFilesDir, ("Service" + serviceId)); if (!(resultFile.isFile())) { return ("Service" + serviceId) + " never completed."; } if ((resultFile.length())!= 8) { return ("Service" + serviceId) + " was restarted."; } return com.android.framework.multidexlegacytestservices.test2.ServicesTests.COMPLETION_SUCCESS; }
privatejava.io.File getSecondaryFolder() {java.io.File dir = newjava.io.File(newjava.io.File(android.support.test.InstrumentationRegistry.getTargetContext().getApplicationInfo().dataDir, "code_cache"), "secondary-dexes"); junit.framework.Assert.assertTrue(dir.isDirectory()); return dir; }
private void tamperAllExctractedZips() throwsjava.io.IOException { android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, "Tamper extracted zip files by overwriting all content by \'\\0\'s."); byte[] zeros = new byte[4 * 1024]; for (java.io.File zip : getSecondaryFolder().listFiles(new com.android.framework.multidexlegacytestservices.test2.ServicesTests.ExtensionFilter(".zip"))) { long fileLength = zip.length(); junit.framework.Assert.assertTrue((fileLength > (com.android.framework.multidexlegacytestservices.test2.ServicesTests.ENDHDR))); zip.setWritable(true);java.io.RandomAccessFile raf = newjava.io.RandomAccessFile(zip, "rw"); try { int index = 0; while (index < fileLength) { int length = ((int) (java.lang.Math.min(zeros.length, (fileLength - index)))); raf.write(zeros, 0, length); index += length; } } finally { raf.close(); } } }
@org.junit.Test public void testRecoverFromZipCorruption() throwsjava.lang.Exception { int serviceId = 1; initServicesWorkFiles(); startService(serviceId); waitServicesCompletion(serviceId); tamperAllExctractedZips(); killServices(); checkRecover(); }
private void tamperAllOdex() throwsjava.io.IOException { android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, ("Tamper extracted zip files by overwriting all content but the central directory" + " by \'\\0\'s.")); byte[] zeros = new byte[4 * 1024]; int savedSizeForOdexHeader = 80; for (java.io.File odex : getSecondaryFolder().listFiles(new com.android.framework.multidexlegacytestservices.test2.ServicesTests.ExtensionFilter(".dex"))) { long fileLength = odex.length(); junit.framework.Assert.assertTrue((fileLength > ((zeros.length) + savedSizeForOdexHeader))); odex.setWritable(true);java.io.RandomAccessFile raf = newjava.io.RandomAccessFile(odex, "rw"); try { raf.seek(savedSizeForOdexHeader); raf.write(zeros, 0, zeros.length); } finally { raf.close(); } } }
@org.junit.Test public void testRecoverFromDexCorruptionStressTest() throwsjava.lang.Exception {java.lang.Thread startServices = newjava.lang.Thread() { @java.lang.Override public void run() { startServices(); } }; startServices.start(); for (int i = 0; i < 7; i++) {java.lang.Thread.sleep(1000); tamperAllOdex(); } startServices.join(); try { waitServicesCompletion(); } catch (java.util.concurrent.TimeoutException e) { } killServices(); checkRecover(); }
private void checkRecover() throwsjava.util.concurrent.TimeoutException { int serviceId = 1; initServicesWorkFiles(); startService(serviceId); waitServicesCompletion(serviceId);java.lang.String completionStatus = getServiceCompletionStatus(serviceId); if (completionStatus!= (com.android.framework.multidexlegacytestservices.test2.ServicesTests.COMPLETION_SUCCESS)) { junit.framework.Assert.fail(completionStatus); } }
public void open(java.lang.String closer) { if (closer == null) { throw newjava.lang.NullPointerException("closer == null"); } if (!(dalvik.system.CloseGuard.enabled)) { closerNameOrAllocationInfo = closer; return; }java.lang.String message = ("Closing termination method '" + closer) + "' not called";java.lang.Throwable stack = newjava.lang.Throwable(message); closerNameOrAllocationInfo = stack; if ((dalvik.system.CloseGuard.currentTracker)!= null) { dalvik.system.CloseGuard.currentTracker.open(stack); } }
public static void setReporter(dalvik.system.CloseGuard.Reporter reporter) { if (reporter == null) { throw newjava.lang.NullPointerException("reporter == null"); } mReporter = reporter; }
public void close() { if (((dalvik.system.CloseGuard.currentTracker)!= null) && ((closerNameOrAllocationInfo) instanceofjava.lang.Throwable)) { dalvik.system.CloseGuard.currentTracker.close(closerNameOrAllocationInfo); } closerNameOrAllocationInfo = null; }
public void warnIfOpen() { if ((closerNameOrAllocationInfo)!= null) {java.lang.String message;java.lang.Throwable stack; if ((closerNameOrAllocationInfo) instanceofjava.lang.String) { message = ("Closer resource failed to call " + ((java.lang.String) (closerNameOrAllocationInfo))) + " stack = ") + (dalvik.system.CloseGuard.UNKNOWN_ALLOCATION); } else { message = "Closer resource was acquired at attached stack trace but never released."; stack = ((java.lang.Throwable) (closerNameOrAllocationInfo)); } message += " See thejava.io.Closeable for information on avoiding resource leaks."); dalvik.system.CloseGuard.reporter.report(message, stack); } }
public static boolean isEnabled() { return dalvik.system.CloseGuard.enabled; }
public static void setEnabled(boolean enabled) { mEnabled = enabled; }
@org.junit.Test public void testMessageFromNative_deviceDisconnectedUnknown() { mCurrentDevice = getTestDevice(0); com.android.bluetooth.hfp.HeadsetStackEvent connectingEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(connectingEvent); verifyNoMoreInteractions(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory); }
void messageFromNative(com.android.bluetooth.hfp.HeadsetEvent stackEvent) {java.util.Objects.requireNonNull(stackEvent.device, ("device should never be null, event: " + stackEvent)); synchronized(mStateMachines) { com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(stackEvent.device); if (stateMachine == null) { if ((stackEvent.type)!= (HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED)) { throw newjava.lang.IllegalArgumentException(("Machine not found for stack event: " + stackEvent)); } switch (stackEvent.valueInt) { case HeadsetHalConstants.CONNECTION_STATE_CONNECTED : case HeadsetHalConstants.CONNECTION_STATE_CONNECTING : { stateMachine = com.android.bluetooth.hfp.HeadsetObjectsFactory.getInstance().makeStateMachine(stackEvent.device, mStateMachinesThread.getLooper(), this, mNativeInterface, mSystemInterface); mStateMachines.put(stackEvent.device, stateMachine); break; } default : android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, ("Attempting to connect for unknown device, ignore connection events other than connecting/connected, " + stackEvent)); return; } stateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, stackEvent); } }
@org.junit.Test public void testMessageFromNative_deviceConnected() { mCurrentDevice = getTestDevice(0); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_CONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(connectedEvent); verify(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory).makeStateMachine(mCurrentDevice, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mNativeInterface, mSystemInterface); verify(mStateMachines.get(mCurrentDevice)).sendMessage(HeadsetStateMachine.STACK_EVENT, connectedEvent); when(mStateMachines.get(mCurrentDevice).getDevice()).thenReturn(mCurrentDevice); when(mStateMachines.get(mCurrentDevice).getConnectionState()).thenReturn(BluetoothProfile.STATE_CONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTED, mHeadsetService.getConnectionState(mCurrentDevice)); org.junit.Assert.assertEquals(java.util.Collections.singletonList(mCurrentDevice), mHeadsetService.getConnectedDevices()); com.android.bluetooth.hfp.HeadsetStackEvent disconnectEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(disconnectEvent); verify(mStateMachines.get(mCurrentDevice)).sendMessage(HeadsetStateMachine.STACK_EVENT, disconnectEvent); when(mStateMachines.get(mCurrentDevice).getConnectionState()).thenReturn(BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, mHeadsetService.getConnectionState(mCurrentDevice)); org.junit.Assert.assertEquals(java.util.Collections.EMPTY_LIST, mHeadsetService.getConnectedDevices()); }
@org.junit.Test public void testMessageFromNative_deviceConnectingUnknown() { mCurrentDevice = getTestDevice(0); com.android.bluetooth.hfp.HeadsetStackEvent connectingEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_CONNECTING, mCurrentDevice); mHeadsetService.messageFromNative(connectingEvent); verify(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory).makeStateMachine(mCurrentDevice, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mNativeInterface, mSystemInterface); verify(mStateMachines.get(mCurrentDevice)).sendMessage(HeadsetStateMachine.STACK_EVENT, connectingEvent); }
@java.lang.Override public void tearDown() throwsjava.lang.Exception { mJobScheduler.cancel(android.jobscheduler.cts.ConnectivityConstraintTest.CONNECTIVITY_JOB_ID); if ((mWifiManager.isWifiEnabled()) == (mInitialWiFiState)) { return; } android.net.NetworkInfo.State expectedState = (mInitialWiFiState)? NetworkInfo.State.CONNECTED : NetworkInfo.State.DISCONNECTED; android.jobscheduler.cts.ConnectivityConstraintTest.ConnectivityActionReceiver receiver = new android.jobscheduler.cts.ConnectivityConstraintTest.ConnectivityActionReceiver(android.net.ConnectivityManager.TYPE_WIFI, expectedState); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION); mContext.registerReceiver(receiver, filter); assertTrue(mWifiManager.setWifiEnabled(mInitialWiFiState)); receiver.waitForStateChange(); assertTrue("Failed to restore previous WiFi state", ((mWifiManager.isWifiEnabled()) == (mInitialWiFiState))); mContext.unregisterReceiver(receiver); }
@java.lang.Override public void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, int reason, android.net.LinkProperties linkProperties, android.os.Message result) { com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance().setupDataCall(radioTechnology, dataProfile, isRoaming, allowRoaming, reason, linkProperties, result); if ((mDcResponse) == null) { try { mDcResponse = new android.telephony.data.DataCallResponse(0, (-1), 1, 2, "IP", "rmnet_data7",java.util.Arrays.asList(new android.net.LinkAddress("12.34.56.78/32")),java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress("98.76.54.32")),java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress("11.22.33.44")), null, 1440); } catch (java.lang.Exception e) { } } if (mDcSuccess) { resultSuccess(result, mDcResponse); } else { resultFail(result, mDcResponse, newjava.lang.RuntimeException("Setup data call failed!")); } }
public void writeRilDeactivateDataCall(int phoneId, int rilSerial, int cid, int reason) { com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall deactivateDataCall = new com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall(); deactivateDataCall.cid = cid; if (reason == (android.telephony.data.DataService.REQUEST_REASON_NORMAL)) { } else { deactivateDataCall.reason = reason + 1; } addTelephonyEvent(new com.android.internal.telephony.metrics.TelephonyEventBuilder(phoneId).setDeactivateDataCall(deactivateDataCall).build()); }
void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, int reason, android.net.LinkProperties linkProperties, android.os.Message result);
protected boolean isGsmCdmaConnection() { com.android.internal.telephony.Phone phone = getPhone(); if (phone!= null) { switch (phone.getPhoneType()) { case com.android.internal.telephony.PhoneConstants.PHONE_TYPE_GSM : case com.android.internal.telephony.PhoneConstants.PHONE_TYPE_CDMA : case com.android.internal.telephony.PhoneConstants.PHONE_TYPE_CDMA_LTE : return true; default : return false; } } return false; }
@java.lang.Override public void onResume() { super.onResume(); if (mFirstResume) { if ((mIcicle) == null) { if (com.android.phone.GsmUmtsCallBarringOptions.DBG) android.util.Log.d(com.android.phone.GsmUmtsCallBarringOptions.LOG_TAG, "start to init "); resetPwChangeState(); mPreferences.get(mInitIndex).init(this, false, mPhone); } else { if (com.android.phone.GsmUmtsCallBarringOptions.DBG) android.util.Log.d(com.android.phone.GsmUmtsCallBarringOptions.LOG_TAG, "restore stored states"); mInitIndex = mPreferences.size(); for (com.android.phone.CallBarringEditPreference pref : mPreferences) { android.os.Bundle bundle = mIcicle.getParcelable(pref.getKey()); pref.handleCallBarringResult(bundle.getBoolean(com.android.phone.GsmUmtsCallBarringOptions.KEY_STATUS)); pref.init(this, true, mPhone); } mPwChangeState = mIcicle.getInt(com.android.phone.GsmUmtsCallBarringOptions.PW_CHANGE_STATE_KEY); mOldPassword = mIcicle.getString(com.android.phone.GsmUmtsCallBarringOptions.OLD_PW_KEY); mNewPassword = mIcicle.getString(com.android.phone.GsmUmtsCallBarringOptions.NEW_PW_KEY); mButtonChangePW.setDialogMessage(mIcicle.getString(com.android.phone.GsmUmtsCallBarringOptions.DIALOG_MESSAGE_KEY)); mButtonChangePW.setText(mIcicle.getString(com.android.phone.GsmUmtsCallBarringOptions.DIALOG_PW_ENTRY_KEY)); } mFirstResume = false; mIcicle = null; } }
private boolean validatePassword(java.lang.String password) { if ((password == null) || ((password.length())!= (com.android.phone.GsmUmtsCallBarringOptions.PW_LENGTH))) { return false; } else { return true; } }
@java.lang.Override protected void onPrepareDialogBuilder(android.app.AlertDialog.Builder builder) { builder.setPositiveButton(null, null); if (isActivated) { builder.setNeutralButton(mDisableText, this); } else { builder.setNeutralButton(mEnableText, this); } }
public void setCallBarringOption(java.lang.String facility, boolean lockState,java.lang.String password, int serviceClass, android.os.Message onComplete) { if (isPhoneTypeGsm()) { mCi.setFacilityLock(facility, lockState, password, serviceClass, onComplete); } else { loge("setCallBarringOption: not possible in CDMA"); } }
public void getCallBarringOption(java.lang.String facility,java.lang.String password, int serviceClass, android.os.Message onComplete) { if (isPhoneTypeGsm()) { mCi.queryFacilityLock(facility, password, serviceClass, onComplete); } else { loge("getCallBarringOption: not possible in CDMA"); } }
@java.lang.Override protected void onDialogClosed(boolean positiveResult) { super.onDialogClosed(positiveResult); if (com.android.phone.CallBarringEditPreference.DBG) android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, ((("mButtonClicked=" + (mButtonClicked)) + ", positiveResult=") + positiveResult)); if ((this.mButtonClicked)!= (android.content.DialogInterface.BUTTON_NEGATIVE)) { mPassword = getEditText().getText().toString(); if (((mPassword) == null) || ((mPassword.length())!= (com.android.phone.CallBarringEditPreference.PW_LENGTH))) { android.widget.Toast.makeText(mContext, mContext.getString(R.string.call_barring_right_pwd_number), Toast.LENGTH_SHORT).show(); return; } if (com.android.phone.CallBarringEditPreference.DBG) android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, ("onDialogClosed: mPassword=" + (mPassword))); ((com.android.internal.telephony.GsmCdmaPhone) (mPhone)).setCallBarringOption(mFacility, (!(isActivated)), mPassword, 0, mHandler.obtainMessage(com.android.phone.CallBarringEditPreference.MyHandler.MESSAGE_SET_CALL_BARRING)); if ((mTcpListener)!= null) { mTcpListener.onStarted(this, false); } } }
private void handleSetCallBarringResponse(android.os.Message msg) { android.os.AsyncResult ar = ((android.os.AsyncResult) (msg.obj)); if (((ar.exception)!= null) || ((ar.userObj) instanceofjava.lang.Throwable)) { if (com.android.phone.CallBarringEditPreference.DBG) android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, ("handleSetCallBarringResponse: ar.exception=" + (ar.exception))); } if (com.android.phone.CallBarringEditPreference.DBG) android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, "handleSetCallBarringResponse: re get"); ((com.android.internal.telephony.GsmCdmaPhone) (mPhone)).getCallBarringOption(mFacility, "", 0, obtainMessage(com.android.phone.CallBarringEditPreference.MyHandler.MESSAGE_GET_CALL_BARRING, 0, com.android.phone.CallBarringEditPreference.MyHandler.MESSAGE_SET_CALL_BARRING, ar.exception)); }
private final void resetPwChangeState() { mPwChangeState = com.android.phone.GsmUmtsCallBarringOptions.PW_CHANGE_OLD; displayPwChangeDialog(0, false); mOldPassword = ""; mNewPassword = ""; }
private final void displayPwChangeDialog() { displayPwChangeDialog(0, true); }
private final void resetCallBarringPrefState(boolean bEnable) { for (com.android.phone.CallBarringEditPreference pref : mPreferences) { pref.isActivated = bEnable; pref.updateSummaryText(); } }
public void onPinEntered(com.android.phone.settings.fdn.EditPinPreference preference, boolean positiveResult) { if (preference == (mButtonChangePW)) { updatePWChangeState(positiveResult); } else if (preference == (mButtonDeaAll)) { deactivateAllBarring(positiveResult); } }
private final void displayPwChangeDialog(int strId, boolean shouldDisplay) { int msgId = 0; switch (mPwChangeState) { case com.android.phone.GsmUmtsCallBarringOptions.PW_CHANGE_OLD : msgId = R.string.call_barring_old_pwd; break; case com.android.phone.GsmUmtsCallBarringOptions.PW_CHANGE_NEW : msgId = R.string.call_barring_new_pwd; break; case com.android.phone.GsmUmtsCallBarringOptions.PW_CHANGE_REENTER : msgId = R.string.call_barring_confirm_pwd; break; default : break; } if (strId!= 0) { mButtonChangePW.setDialogMessage((((getText(msgId)) + "\n") + (getText(strId)))); } else { mButtonChangePW.setDialogMessage(msgId); } if (shouldDisplay) { mButtonChangePW.showPinDialog(); } }
void handleCallBarringResult(boolean status) { isActivated = status; if (com.android.phone.CallBarringEditPreference.DBG) android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, ("handleCallBarringResult done, isActivated=" + status)); }
private final void displayMessage(int strId) { android.widget.Toast.makeText(this, getString(strId), Toast.LENGTH_SHORT).show(); }
@java.lang.Override public boolean shouldDisableDependents() { boolean shouldDisable = isActivated; return shouldDisable; }
void init(com.android.phone.TimeConsumingPreferenceListener listener, boolean skipReading, com.android.internal.telephony.Phone phone) { if (com.android.phone.CallBarringEditPreference.DBG) { android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, ("Getting callBarringEditPreference phone id = " + (phone.getPhoneId()))); } mPhone = phone; mTcpListener = listener; if (!skipReading) { ((com.android.internal.telephony.GsmCdmaPhone) (mPhone)).getCallBarringOption(mFacility, "", 0, mHandler.obtainMessage(com.android.phone.CallBarringEditPreference.MyHandler.MESSAGE_GET_CALL_BARRING)); if ((mTcpListener)!= null) { mTcpListener.onStarted(this, true); } } }
@java.lang.Override protected void onSaveInstanceState(android.os.Bundle outState) { super.onSaveInstanceState(outState); for (com.android.phone.CallBarringEditPreference pref : mPreferences) { android.os.Bundle bundle = new android.os.Bundle(); bundle.putBoolean(com.android.phone.GsmUmtsCallBarringOptions.KEY_STATUS, pref.isActivated); outState.putParcelable(pref.getKey(), bundle); } outState.putInt(com.android.phone.GsmUmtsCallBarringOptions.PW_CHANGE_STATE_KEY, mPwChangeState); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.OLD_PW_KEY, mOldPassword); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.NEW_PW_KEY, mNewPassword); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.DIALOG_MESSAGE_KEY, mButtonChangePW.getDialogMessage().toString()); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.DIALOG_PW_ENTRY_KEY, mButtonChangePW.getText()); }
public static void init(android.preference.PreferenceScreen prefScreen, com.android.phone.SubscriptionInfoHelper subInfoHelper) { android.preference.Preference callForwardingPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.CALL_FORWARDING_KEY); callForwardingPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsCallForwardOptions.class)); android.preference.Preference additionalGsmSettingsPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.ADDITIONAL_GSM_SETTINGS_KEY); additionalGsmSettingsPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsAdditionalCallOptions.class)); android.preference.Preference callBarringPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.CALL_BARRING_KEY); android.telephony.CarrierConfigManager configManager = ((android.telephony.CarrierConfigManager) (prefScreen.getContext().getSystemService(Context.CARRIER_CONFIG_SERVICE))); android.os.PersistableBundle b = configManager.getConfig(); if ((b!= null) && (b.getBoolean(CarrierConfigManager.KEY_SHOW_CALL_BARRING_UI_BOOL))) { callBarringPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsCallBarringOptions.class)); } else { prefScreen.removePreference(callBarringPref); } }
@java.lang.Override protected void onBindView(android.view.View view) { super.onBindView(view); android.widget.TextView summaryView = ((android.widget.TextView) (view.findViewById(android.R.id.summary))); if (summaryView!= null) {java.lang.CharSequence sum; int vis; if (isActivated) { sum = ((mSummaryOn) == null)? getSummary() : mSummaryOn; } else { sum = ((mSummaryOff) == null)? getSummary() : mSummaryOff; } if (sum!= null) { summaryView.setText(sum); vis = android.view.View.VISIBLE; } else { vis = android.view.View.GONE; } if (vis!= (summaryView.getVisibility())) { summaryView.setVisibility(vis); } } }
@java.lang.Override protected void onBindDialogView(android.view.View view) { super.onBindDialogView(view); mButtonClicked = android.content.DialogInterface.BUTTON_NEGATIVE; final android.widget.EditText editText = ((android.widget.EditText) (view.findViewById(android.R.id.edit))); if (editText!= null) { editText.setSingleLine(true); editText.setTransformationMethod(android.text.method.PasswordTransformationMethod.getInstance()); editText.setKeyListener(android.text.method.DigitsKeyListener.getInstance()); } }
private void deactivateAllBarring(boolean positiveResult) { if (!positiveResult) { return; }java.lang.String password = mButtonDeaAll.getText(); if ((password == null) || ((password.length())!= (com.android.phone.GsmUmtsCallBarringOptions.PW_LENGTH))) { mButtonDeaAll.setText(""); displayMessage(R.string.call_barring_right_pwd_number); return; } mButtonDeaAll.setText(""); android.os.Message onComplete = myHandler.obtainMessage(com.android.phone.GsmUmtsCallBarringOptions.EVENT_DEACT_ALL_COMPLETE); ((com.android.internal.telephony.GsmCdmaPhone) (mPhone)).setCallBarringOption(CommandsInterface.CB_FACILITY_BA_ALL, false, password, 0, onComplete); this.onStarted(mButtonDeaAll, false); }
private void startCallRecordingTone(android.content.Context context) { if ((mRecordingTonePlayer)!= null) { return; } android.media.AudioDeviceInfo telephonyDevice = getTelephonyDevice(mAudioManager); if (telephonyDevice!= null) { android.telecom.Log.i(this, "startCallRecordingTone: playing call recording tone to remote end."); mRecordingTonePlayer = android.media.MediaPlayer.create(context, R.raw.record); mRecordingTonePlayer.setLooping(true); mRecordingTonePlayer.setPreferredDevice(telephonyDevice); mRecordingTonePlayer.setVolume(0.1F); mRecordingTonePlayer.start(); } else { android.telecom.Log.w(this, "startCallRecordingTone: can't find telephony audio device."); } }
@java.lang.Override public void onRecordingConfigChanged(java.util.List<android.media.AudioRecordingConfiguration> configs) { handleRecordingConfigurationChange(configs); maybeStartCallAudioTone(); maybeStopCallAudioTone(); }
@java.lang.Override @org.junit.Before public void setUp() throwsjava.lang.Exception { super.setUp(); org.mockito.MockitoAnnotations.initMocks(this); mCallRecordingTonePlayer = new com.android.server.telecom.CallRecordingTonePlayer(mComponentContextFixture.getTestDouble().getApplicationContext(), mAudioManager); when(mAudioManager.getActiveRecordingConfigurations()).thenReturn(null); }
private void addCall(com.android.server.telecom.Call toAdd) { boolean isFirstCall = mCalls.isEmpty(); mCalls.add(toAdd); if (isFirstCall) { handleRecordingConfigurationChange(mAudioManager.getActiveRecordingConfigurations()); mAudioManager.registerAudioRecordingCallback(mAudioRecordingCallback, null); } maybeStartCallAudioTone(); }
private static boolean isCurrentProfile(@android.annotation.NonNull android.content.Context context, int uid) { final int currentUser = android.app.ActivityManager.getCurrentUser(); final int callingUserId = android.os.UserHandle.getUserId(uid); if (callingUserId == currentUser) { return true; } else {java.util.List<android.content.pm.UserInfo> userProfiles = context.getSystemService(android.os.UserManager.class).getProfiles(currentUser); for (android.content.pm.UserInfo user : userProfiles) { if ((user.id) == callingUserId) { return true; } } } return false; }
public static boolean canAccessCellLocation(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNulljava.lang.String pkgName, int uid, int pid) throwsjava.lang.SecurityException { android.os.Trace.beginSection("TelephonyLocationCheck"); try { if ((context.checkPermission(Manifest.permission.ACCESS_COARSE_LOCATION, pid, uid)) == (android.content.pm.PackageManager.PERMISSION_DENIED)) { return false; } final int opCode = android.app.AppOpsManager.permissionToOpCode(Manifest.permission.ACCESS_COARSE_LOCATION); if ((opCode!= (android.app.AppOpsManager.OP_NONE)) && ((context.getSystemService(android.app.AppOpsManager.class).noteOp(opCode, uid, pkgName))!= (android.app.AppOpsManager.MODE_ALLOWED))) { return false; } if ((!(android.telephony.LocationAccessPolicy.isLocationModeEnabled(context, android.os.UserHandle.getUserId(uid)))) && (!(android.telephony.LocationAccessPolicy.isLegacyForeground(context, pkgName, uid)))) { return false; } return (android.telephony.LocationAccessPolicy.isCurrentProfile(context, uid)) || (android.telephony.LocationAccessPolicy.checkInteractAcrossUsersFull(context)); } finally { android.os.Trace.endSection(); } }
private static boolean isLegacyForeground(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNulljava.lang.String pkgName, int uid) { return (android.telephony.LocationAccessPolicy.isLegacyVersion(context, pkgName)) && (android.telephony.LocationAccessPolicy.isForegroundApp(context, uid)); }
@java.lang.Override protected void dump(java.io.FileDescriptor fd,java.io.PrintWriter writer,java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println("No dump in APP SERVICES, see bluetooth_manager section."); writer.println(" --print argument for dumpsys direct from AdapterService."); return; } verboseLog(("arguments, check for protobuf output: " + (android.text.TextUtils.join( args)))); if (args[0].equals( "--proto-bin")) { dumpMetrics(fd); return; } writer.println("Bonded devices:"); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println(((((" " + (device.getAddress())) + " [") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + "] ") + (device.getName()))); }java.lang.StringBuilder sb = newjava.lang.StringBuilder(); synchronized(mProfiles) { for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dump(sb); } } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }
private void dumpMetrics(java.io.FileDescriptor fd) { com.android.bluetooth.btservice.BluetoothProto.BluetoothLog metrics = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); metrics.setNumBondedDevices(getBondedDevices().length); for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dumpProto(metrics); } byte[] nativeMetricsBytes = dumpMetricsNative(); android.util.Log.i(com.android.bluetooth.btservice.TAG, ("Dumping native metrics size is " + (nativeMetricsBytes.length))); try { metrics.mergeFrom(nativeMetricsBytes); } catch (com.google.protobuf.micro.InvalidProtocolBufferMicroException ex) { android.util.Log.w(com.android.bluetooth.btservice.TAG, ("Error parsing metrics Protobuf: " + (ex.getMessage()))); return; } byte[] metricsBytes = android.util.Base64.encode(metrics.toByteArray(), Base64.DEFAULT); android.util.Log.i(com.android.bluetooth.btservice.TAG, ("Dumping combined metrics size is " + (metricsBytes.length))); try (java.io.FileOutputStream protoOut = newjava.io.FileOutputStream(fd)) { protoOut.write(metricsBytes); } catch (java.io.IOException e) { errorLog("Failed to write Java protobuf to file descriptor."); } }
public static long getMobileRxPackets() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { long stat = android.net.TrafficStats.UNSUPPORTED; stat = android.net.TrafficStats.getRxPackets(iface); if (stat!= (android.net.TrafficStats.UNSUPPORTED)) { total += stat; } } return total; }
public static long getMobileRxBytes() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { long stat = android.net.TrafficStats.UNSUPPORTED; stat = android.net.TrafficStats.getRxBytes(iface); if (stat!= (android.net.TrafficStats.UNSUPPORTED)) { total += stat; } } return total; }
public static long getMobileTxBytes() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { long stat = android.net.TrafficStats.UNSUPPORTED; stat = android.net.TrafficStats.getTxBytes(iface); if (stat!= (android.net.TrafficStats.UNSUPPORTED)) { total += stat; } } return total; }
public static long getMobileTxPackets() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { long stat = android.net.TrafficStats.getTxPackets(iface); if (stat!= (android.net.TrafficStats.UNSUPPORTED)) { total += stat; } } return total; }
privatejava.util.ArrayList<java.lang.String> getSEAccessAllowedPackages() { if (((mSEService) == null) || (mNfcEventInstalledPackages.isEmpty())) { return null; }java.lang.String[] readers = null; try { readers = mSEService.getReaders(); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.nfc.NfcService.TAG, ("Error in getReaders() " + e)); return null; } if ((readers == null) || ((readers.length) == 0)) { return null; } boolean[] nfcAccessFinal = null;java.lang.String[] installedPackages = newjava.lang.String[mNfcEventInstalledPackages.size()]; android.se.omapi.ISecureElementCallback callback = new android.se.omapi.ISecureElementCallback.Stub() {}; for (java.lang.String reader : readers) { try { boolean[] accessList = mSEService.isNFCEventAllowed(reader, null, mNfcEventInstalledPackages.toArray(installedPackages), callback); if (accessList == null) { continue; } if (nfcAccessFinal == null) { nfcAccessFinal = accessList; } for (int i = 0; i < (accessList.length); i++) { if (accessList[i]) { nfcAccessFinal[i] = true; } } } catch (android.os.RemoteException e) { android.util.Log.e(com.android.nfc.NfcService.TAG, ("Error in isNFCEventAllowed() " + e)); } } if (nfcAccessFinal == null) { return null; }java.util.ArrayList<java.lang.String> packages = newjava.util.ArrayList<java.lang.String>(); for (int i = 0; i < (nfcAccessFinal.length); i++) { if (nfcAccessFinal[i]) { packages.add(mNfcEventInstalledPackages.get(i).packageName); } } return packages; }
public void sendNfcTransactionEvent(byte[] aid, byte[] data,java.lang.String reader) { if (((mSEService) == null) || (mNfcEventInstalledPackages.isEmpty())) { return; } android.se.omapi.ISecureElementCallback callback = new android.se.omapi.ISecureElementCallback.Stub() {};java.lang.String[] installedPackages = newjava.lang.String[mNfcEventInstalledPackages.size()]; try { boolean[] nfcAccess = mSEService.isNFCEventAllowed(reader, aid, mNfcEventInstalledPackages.toArray(installedPackages), callback); if (nfcAccess == null) { return; }java.util.ArrayList<java.lang.String> packages = newjava.util.ArrayList<java.lang.String>(); android.content.Intent intent = new android.content.Intent(com.android.nfc.NfcService.ACTION_TRANSACTION_EVT); intent.addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES); intent.putExtra(com.android.nfc.NfcService.EXTRA_AID, aid); intent.putExtra(com.android.nfc.NfcService.EXTRA_DATA, data); intent.putExtra(com.android.nfc.NfcService.EXTRA_SE_NAME, reader); for (int i = 0; i < (nfcAccess.length); i++) { if (nfcAccess[i]) { intent.setPackage(mNfcEventInstalledPackages.get(i).packageName); mContext.sendBroadcast(intent); } } } catch (android.os.RemoteException e) { android.util.Log.e(com.android.nfc.NfcService.TAG, ("Error in isNFCEventAllowed() " + e)); } }
private void sendNfcEeAccessProtectedBroadcast(android.content.Intent intent) { intent.addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES); mNfcDispatcher.resumeAppSwitches();java.util.ArrayList<java.lang.String> matchingPackages = newjava.util.ArrayList<java.lang.String>();java.util.ArrayList<java.lang.String> preferredPackages = newjava.util.ArrayList<java.lang.String>(); synchronized(this) {java.util.ArrayList<java.lang.String> SEPackages = getSEAccessAllowedPackages(); if ((SEPackages!= null) && (!(SEPackages.isEmpty()))) { for (java.lang.String packageName : SEPackages) { intent.setPackage(packageName); mContext.sendBroadcast(intent); } } for (android.content.pm.PackageInfo pkg : mInstalledPackages) { if ((pkg!= null) && ((pkg.applicationInfo)!= null)) { if ((SEPackages!= null) && (SEPackages.contains(pkg))) { continue; } if (mNfceeAccessControl.check(pkg.applicationInfo)) { matchingPackages.add(pkg.packageName); if (((mCardEmulationManager)!= null) && (mCardEmulationManager.packageHasPreferredService(pkg.packageName))) { preferredPackages.add(pkg.packageName); } } } } if ((preferredPackages.size()) > 0) { for (java.lang.String packageName : preferredPackages) { intent.setPackage(packageName); mContext.sendBroadcast(intent); } } else { for (java.lang.String packageName : matchingPackages) { intent.setPackage(packageName); mContext.sendBroadcast(intent); } } } }
void updatePackageCache() { android.content.pm.PackageManager pm = mContext.getPackageManager();java.util.List<android.content.pm.PackageInfo> packages = pm.getInstalledPackagesAsUser(0, UserHandle.USER_SYSTEM);java.util.List<android.content.pm.PackageInfo> packagesNfcEvents = pm.getPackagesHoldingPermissions(newjava.lang.String[]{ android.Manifest.permission.NFC_TRANSACTION_EVENT }, PackageManager.GET_ACTIVITIES); synchronized(this) { mInstalledPackages = packages; mNfcEventInstalledPackages = packagesNfcEvents; } }
@java.lang.Override publicjava.lang.String toString() { return ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
void onIpLayerStarted(android.net.LinkProperties linkProperties) { if ((mNetworkAgent)!= null) { android.util.Log.e(com.android.server.ethernet.EthernetNetworkFactory.TAG, "IllLayer have a NetworkAgent - aborting new request"); stop(); return; } mLinkProperties = linkProperties; mNetworkInfo.setDetailedState(DetailedState.CONNECTED, null, mHwAddress); mNetworkAgent = new android.net.NetworkAgent(mHandler.getLooper(), mContext, com.android.server.ethernet.EthernetNetworkFactory.NETWORK_TYPE, mNetworkInfo, mCapabilities, mLinkProperties, com.android.server.ethernet.EthernetNetworkFactory.NETWORK_SCORE) { public void unwanted() { if ((this) == (mNetworkAgent)) { stop(); } else if ((mNetworkAgent)!= null) { android.util.Log.d(com.android.server.ethernet.EthernetNetworkFactory.TAG, ("IllLayer unwanted as we have a more modern " + "instance")); } } }; }
private void start() { if (com.android.server.ethernet.EthernetNetworkFactory.DBG) { android.util.Log.d(com.android.server.ethernet.EthernetNetworkFactory.TAG,java.lang.String.format("Starting IpManager(%s): mNetworkInfo=%s", name, mNetworkInfo)); } if ((mIpManager)!= null) stop(); mNetworkInfo.setDetailedState(DetailedState.OBTAINING_IPADDR, null, mHwAddress); mIpManager = new android.net.ip.IpManager(mContext, name, mIpManagerCallback); if ((com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState.sTcpBufferSizes) == null) { com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState.sTcpBufferSizes = mContext.getResources().getString(com.android.internal.R.string.config_ethernet_tcp_buffers); } com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState.provisionIpManager(mIpManager, mIpConfig, com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState.sTcpBufferSizes); }
private com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState networkForRequest(NetworkRequest request) {java.lang.String requestedIface = null; android.net.NetworkSpecifier specifier = request.networkCapabilities.getNetworkSpecifier(); if (specifier instanceof android.net.StringNetworkSpecifier) { requestedIface = ((android.net.StringNetworkSpecifier) (specifier)).specifier; } com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState network = null; if (!(android.text.TextUtils.isEmpty(requestedIface))) { com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState n = mTrackingInterfaces.get(requestedIface); network = (n.statisified(request.networkCapabilities))? n : null; } else { for (com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState n : mTrackingInterfaces.values()) { if (n.statisified(request.networkCapabilities)) { network = n; break; } } } return network; }
void addInterface(java.lang.String ifaceName,java.lang.String hwAddress, android.net.NetworkCapabilities capabilities, android.net.IpConfiguration ipConfiguration) { if (mTrackingInterfaces.containsKey(ifaceName)) { return; } if (com.android.server.ethernet.EthernetNetworkFactory.DBG) { android.util.Log.d(com.android.server.ethernet.EthernetNetworkFactory.TAG, ((("addInterface, iface: " + ifaceName) + ", capabilities: ") + capabilities)); } com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState iface = new com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState(ifaceName, hwAddress, mHandler, mContext, capabilities); iface.setIpConfig(ipConfiguration); mTrackingInterfaces.put(ifaceName, iface); }
public boolean write(java.lang.String iface, android.net.IpConfiguration config) { boolean modified; synchronized(mSync) { if (config == null) { modified = (mIpConfigurations.remove(iface))!= null; } else { android.net.IpConfiguration oldConfig = mIpConfigurations.put(iface, config); modified =!(config.equals(oldConfig)); } if (modified) { mStore.writeIpConfigurations(com.android.server.ethernet.EthernetConfigStore.ipConfigFile, mIpConfigurations); } } return modified; }
void removeInterface(java.lang.String interfaceName) { com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState iface = mTrackingInterfaces.remove(interfaceName); if (iface!= null) { iface.stop(); } }
void() { mIpManager.onDisconnect(this); mIpManager = null; }
private static void provisionIpManager(android.net.ip.IpManager mgr, android.net.IpConfiguration config,java.lang.String tcpBufferSizes) { if (((config.getProxySettings()) == (android.net.IpConfiguration.ProxySettings.STATIC)) || ((config.getProxySettings()) == (android.net.IpConfiguration.ProxySettings.PAC))) { mgr.setHttpProxy(config.getHttpProxy()); } if (!(android.text.TextUtils.isEmpty(tcpBufferSizes))) { mgr.setTcpBufferSizes(tcpBufferSizes); } final android.net.ip.IpManager.ProvisioningConfiguration provisioningConfiguration; if ((config.getIpAssignment()) == (android.net.IpConfiguration.IpAssignment.STATIC)) { provisioningConfiguration = android.net.ip.IpManager.buildProvisioningConfiguration().withStaticConfiguration(config.getStaticIpConfiguration()).build(); } else { provisioningConfiguration = android.net.ip.IpManager.buildProvisioningConfiguration().withProvisioningTimeoutMs(0).build(); } mgr.startProvisioning(provisioningConfiguration); }
booleanCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilitiesCapabilities
void dump(java.io.FileDescriptor fd, com.android.internal.util.IndentingPrintWriter pw,java.lang.String[] args) { try { postAndWaitForRunnable(() -> { pw.println(getClass().getSimpleName()); pw.println(("Ethernet interface name filter: " + (mIfaceMatch))); pw.println(("Listeners: " + (mListeners.getRegisteredCallbackCount()))); pw.println("IP Configurations:"); pw.increaseIndent(); for (java.lang.String iface : mIpConfigurations.keySet()) { pw.println(((iface + ": ") + (mIpConfigurations.get(iface)))); } pw.decreaseIndent(); pw.println(); pw.println("Network Capabilities:"); pw.increaseIndent(); for (java.lang.String iface : mNetworkCapabilities.keySet()) { pw.println(((iface + ": ") + (mNetworkCapabilities.get(iface)))); } pw.decreaseIndent(); pw.println(); mFactory.dump(fd, pw, args); }); } catch (java.lang.InterruptedException e) { throw newjava.lang.IllegalStateException("dump() interrupted"); } }
public android.net.IpConfiguration getIpConfigurationForDefaultInterface() { synchronized(mSync) { return mIpConfigurationForDefaultInterface; } }
public void load() {java.lang.String[] ifaces = mEthernetManager.getAvailableInterfaces(); if ((ifaces!= null) && ((ifaces.length) > 0)) { mInterfaceName = ifaces[0]; mIpConfiguration = mEthernetManager.getConfiguration(mInterfaceName); } }
void(java.io.FileDescriptor fd, com.android.internal.util.IndentingPrintWriter pw,java.lang.String[] args) { pw.println(getClass().getSimpleName()); pw.println("Tracking interfaces:"); for (java.lang.String iface : mTrackingInterfaces.keySet()) { pw.println(((iface + ":") + (mTrackingInterfaces.get(iface))); } pw.decreaseIndent(); }
@java.lang.Deprecated public void writeIpAndProxyConfigurationsToFile(java.lang.String filePath, final android.util.SparseArray<android.net.IpConfiguration> networks) { mWriter.write(filePath, new com.android.server.net.DelayedDiskWrite.Writer() { public void onWriteCalled(java.io.DataOutputStream out) throwsjava.io.IOException { out.writeInt(com.android.server.net.IpConfigStore.IPCONFIG_FILE_VERSION); for (int i = 0; i < (networks.size()); i++) { com.android.server.net.IpConfigStore.writeConfig(out,java.lang.String.valueOf(networks.keyAt(i))); networks.valueAt(i); } } }); }
public android.util.ArrayMap<java.lang.String, android.net.IpConfiguration> getIpConfigurations() { synchronized(mSync) { return mIpConfigurations; } }
private void parseEthernetConfig(java.lang.String configString) {java.lang.String[] tokens = configString.split(";");java.lang.String name = tokens[0]; android.net.NetworkCapabilities nc = com.android.server.ethernet.EthernetTracker.createNetworkCapabilities(((tokens.length) > 1? tokens[1] : null)); mNetworkCapabilities.put(name, nc); if (((tokens.length) > 2) && (!(android.text.TextUtils.isEmpty(tokens[2])))) { android.net.IpConfiguration ipConfig = com.android.server.ethernet.EthernetTracker.createStaticIpConfiguration(tokens[2]); mIpConfigurations.put(name, ipConfig); } }
private static android.net.NetworkCapabilities createNetworkCapabilities(@android.annotation.Nullablejava.lang.String commaSeparatedCapabilities) { android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(); nc.clearAll(); nc.addTransportType(NetworkCapabilities.TRANSPORT_ETHERNET); nc.setLinkUpstreamBandwidthKbps((100 * 1000)); nc.setLinkDownstreamBandwidthKbps((100 * 1000)); if (!(android.text.TextUtils.isEmpty(commaSeparatedCapabilities))) { for (java.lang.String strNetworkCapability : commaSeparatedCapabilities.split(",")) { if (!(android.text.TextUtils.isEmpty(strNetworkCapability))) { nc.addCapability(java.lang.Integer.valueOf(strNetworkCapability)); } } } return nc; }
private void updateInterfaceState(java.lang.String iface, boolean up) { boolean modified = mFactory.updateInterfaceLinkState(iface, up); if (modified) { boolean restricted = isRestrictedInterface(iface); int n = mListeners.beginBroadcast(); for (int i = 0; i < n; i++) { try { if (restricted) { com.android.server.ethernet.EthernetTracker.ListenerInfo listenerInfo = ((com.android.server.ethernet.EthernetTracker.ListenerInfo) (mListeners.getBroadcastCookie(i))); if (!(listenerInfo.canUseRestrictedNetworks)) continue; } mListeners.getBroadcastItem(i).onAvailabilityChanged(iface, up); } catch (android.os.RemoteException e) { } } mListeners.finishBroadcast(); } }
private void postAndWaitForRunnable(java.lang.Runnable r) throwsjava.lang.InterruptedException {java.util.concurrent.CountDownLatch latch = newjava.util.concurrent.CountDownLatch(1); mHandler.post(() -> { try { r.run(); } finally { latch.countDown(); } }); latch.await(); }
private static android.net.NetworkCapabilities createDefaultNetworkCapabilities() { android.net.NetworkCapabilities nc = com.android.server.ethernet.EthernetTracker.createNetworkCapabilities(null); nc.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); nc.addCapability(NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); return nc; }
@java.lang.Override public void interfaceLinkStateChanged(java.lang.String iface, boolean up) { if (com.android.server.ethernet.EthernetTracker.DBG) android.util.Log.i(com.android.server.ethernet.EthernetTracker.TAG, ((("interfaceLinkStateChanged, iface: " + iface) + ", up: ") + up)); mHandler.post(() -> updateInterfaceState(iface, up)); }
void updateIpConfiguration(java.lang.String iface, android.net.IpConfiguration ipConfiguration) { if (com.android.server.ethernet.EthernetTracker.DBG) android.util.Log.i(com.android.server.ethernet.EthernetTracker.TAG, ((("updateIpConfiguration, iface: " + iface) + ", cfg: ") + ipConfiguration)); mConfigStore.write(iface, ipConfiguration); mIpConfigurations.put(iface, ipConfiguration); mHandler.post(() -> mFactory.updateIpConfiguration(iface, ipConfiguration)); }
private void addInterface(java.lang.String iface) { android.net.InterfaceConfiguration config = null; try { mNMService.setInterfaceUp(iface); config = mNMService.getInterfaceConfig(iface); } catch (android.os.RemoteException |java.lang.IllegalStateException e) { android.util.Log.e(com.android.server.ethernet.EthernetTracker.TAG, ("Error upping interface " + iface), e); } if (config == null) { android.util.Log.e(com.android.server.ethernet.EthernetTracker.TAG, (("Null interface config for " + iface) + ". Bailing out.")); return; } android.net.NetworkCapabilities nc = mNetworkCapabilities.get(iface); if (nc == null) { nc = com.android.server.ethernet.EthernetTracker.createDefaultNetworkCapabilities(); } android.net.IpConfiguration ipConfiguration = mIpConfigurations.get(iface); if (ipConfiguration == null) { ipConfiguration = com.android.server.ethernet.EthernetTracker.createDefaultIpConfiguration(); } android.util.Log.d(com.android.server.ethernet.EthernetTracker.TAG, ("Started tracking interface " + iface)); mFactory.addInterface(iface, config.getHardwareAddress(), nc, ipConfiguration); if (config.hasFlag("running")) { updateInterfaceState(iface, true); } }
private boolean areAllApplicationsReady() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (((app!= null) && (isSupportedApplication(app))) && (!(app.isReady()))) { if (com.android.internal.telephony.uicc.UiccProfile.VDBG) log("areAllApplicationsReady outside loop"); return false; } } if (com.android.internal.telephony.uicc.UiccProfile.VDBG) { log(("areAllApplicationsReady outside loop, return " + ((mUiccApplications[0])!= null))); } return (mUiccCard) instanceof com.android.internal.telephony.uicc.euicc.EuiccCard) || ((mUiccApplications[0])!= null); }
private boolean areAllRecordsLoaded() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if ((app!= null) && (isSupportedApplication(app))) { com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if ((ir == null) || (!(ir.isLoaded()))) { if (com.android.internal.telephony.uicc.UiccProfile.VDBG) log("areAllRecordsLoaded outside loop"); return false; } } } return (mUiccCard) instanceof com.android.internal.telephony.uicc.euicc.EuiccCard || ((mUiccApplications[0])!= null); }
@com.googlecode.android_scripting.rpc.Rpc(description = "Request an LE connection parameters update.") public boolean gattClientRequestLeConnectionParameters(@com.googlecode.android_scripting.rpc.RpcParameter(name = "index")java.lang.Integer index, @com.googlecode.android_scripting.rpc.RpcParameter(name = "minConnectionInterval")java.lang.Integer minConnectionInterval, @com.googlecode.android_scripting.rpc.RpcParameter(name = "maxConnectionInterval")java.lang.Integer maxConnectionInterval, @com.googlecode.android_scripting.rpc.RpcParameter(name = "slaveLatency")java.lang.Integer slaveLatency, @com.googlecode.android_scripting.rpc.RpcParameter(name = "supervisionTimeout")java.lang.Integer supervisionTimeout) throwsjava.lang.Exception { boolean result = false; if ((mBluetoothGattList.get(index))!= null) { result = mBluetoothGattList.get(index).requestLeConnectionParameters(minConnectionInterval, maxConnectionInterval, slaveLatency, supervisionTimeout); } else { throw newjava.lang.Exception(("Invalid index input:" + index)); } return result; }
@java.lang.Override public void rawLeConnectionParametersUpdate(int clientIf,java.lang.String address, int minConnectionInterval, int maxConnectionInterval, int slaveLatency, int supervisionTimeout) { com.android.bluetooth.gatt.GattService service = getService(); if (service == null) { return; } service.rawLeConnectionParametersUpdate(clientIf, address, minConnectionInterval, maxConnectionInterval, slaveLatency, supervisionTimeout); }
void rawLeConnectionParametersUpdate(int clientIf,java.lang.String address, int minInterval, int maxInterval, int slaveLatency, int supervisionTimeout) { enforceCallingOrSelfPermission(com.android.bluetooth.gatt.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (com.android.bluetooth.gatt.GattService.DBG) { android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ((((((((("rawLeConnectionParametersUpdate() - address=" + address) + ", intervals=") + minInterval) + "/") + maxInterval) + ", latency=") + slaveLatency) + ", timeout=") + supervisionTimeout)); } gattConnectionParameterUpdateNative(clientIf, address, minInterval, maxInterval, slaveLatency, supervisionTimeout); }
private void broadcastConnectionState(android.bluetooth.BluetoothDevice device, int newState) {java.lang.Integer prevStateInteger = mInputDevices.get(device); int prevState = (prevStateInteger == null)? android.bluetooth.BluetoothHidHost.STATE_DISCONNECTED : prevStateInteger; if (prevState == newState) { android.util.Log.w(com.android.bluetooth.hid.HidHostService.TAG, ("Unknown state change: " + newState)); return; } mInputDevices.put(device, newState); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHidHost.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, newState); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); sendBroadcastAsUser(intent, UserHandle.ALL, com.android.bluetooth.hid.BLUETOOTH_PERM); }
private boolean supportsConditionProviders() { android.app.ActivityManager am = ((android.app.ActivityManager) (mContext.getSystemService(Context.ACTIVITY_SERVICE))); return (mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_WATCH)) || (mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_WATCH_PACKAGES)) || (mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_WATCH_PACKAGES)); }
@org.junit.Test public void testGetProvisionedValues() throwsjava.lang.Exception { com.android.ims.ImsManager imsManager = initializeProvisionedValues(); assertEquals(true, imsManager.isWfcProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getProvisionedValue(eq(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED)); assertEquals(true, imsManager.isVtProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getProvisionedValue(eq(ImsConfig.ConfigConstants.LVC_SETTING_ENABLED)); assertEquals(true, imsManager.isVolteProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getProvisionedValue(eq(ImsConfig.ConfigConstants.VLT_SETTING_ENABLED)); assertEquals(true, imsManager.isWfcProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getProvisionedValue(eq(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED)); assertEquals(true, imsManager.isVtProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getProvisionedValue(eq(ImsConfig.ConfigConstants.LVC_SETTING_ENABLED)); assertEquals(true, imsManager.isVolteProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getProvisionedValue(eq(ImsConfig.ConfigConstants.VLT_SETTING_ENABLED)); }
public final void onSmsStatusReportReceived(int messageRef,java.lang.String format, byte[] pdu) { synchronized(mLock) { if ((mListener) == null) { throw newjava.lang.IllegalStateException("ImsSmsImplBase not ready."); } try { mListener.onSmsStatusReportReceived(messageRef, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.Stub.IME_TAG, ("Could not process sms status report: " + (e.getMessage()))); acknowledgeSmsReport(messageRef, android.telephony.ims.Stub.IME_STATUS_REPORT_STATUS_ERROR); } } }
public void acknowledgeSms(int messageRef, @android.telephony.ims.Stub.ImsSmsImplBase.DeliverStatusResult int result) { }
public final void onSmsReceived(java.lang.String format, byte[] pdu) throwsjava.lang.IllegalStateException { synchronized(mLock) { if ((mListener) == null) { throw newjava.lang.IllegalStateException("ImsSmsService not ready."); } try { mListener.onSmsReceived(format, pdu); acknowledgeSms((-1), android.telephony.ims.stub.ImsSmsImplBase.DELIVER_STATUS_OK); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, ("Could not deliver sms: " + (e.getMessage()))); acknowledgeSms((-1), android.telephony.ims.stub.ImsSmsImplBase.DELIVER_STATUS_ERROR); } } }
private void setDefaultValues() { mBundle.putBoolean(CarrierConfigManager.KEY_EDITABLE_ENHANCED_4G_LTE_BOOL, com.android.internal.telephony.ims.ImsManagerTest.ENHANCED_4G_ENABLE_DEFAULT_VAL); mBundle.putBoolean(CarrierConfigManager.KEY_CARRIER_DEFAULT_WFC_IMS_ENABLED_BOOL, com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ENABLE_DEFAULT_VAL); mBundle.putBoolean(CarrierConfigManager.KEY_CARRIER_DEFAULT_WFC_IMS_ROAMING_ENABLED_BOOL, com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ROAMING_ENABLE_DEFAULT_VAL); mBundle.putInt(CarrierConfigManager.KEY_CARRIER_DEFAULT_WFC_IMS_MODE_INT, com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_MODE_DEFAULT_VAL); mBundle.putInt(CarrierConfigManager.KEY_CARRIER_DEFAULT_WFC_IMS_ROAMING_MODE_INT, com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ROAMING_MODE_DEFAULT_VAL); mBundle.putBoolean(CarrierConfigManager.KEY_CARRIER_VOLTE_PROVISIONING_REQUIRED_BOOL, true); }
private void acknowledgeSms(int messageRef, @android.telephony.ims.Stub.ImsSmsImplBase.DeliverStatusResult int result) { getSmsImplementation().acknowledgeSms(messageRef, result); }
@org.junit.Test public void testSetProvisionedValues() throwsjava.lang.Exception { com.android.ims.ImsManager imsManager = initializeProvisionedValues(); assertEquals(true, imsManager.isWfcProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getProvisionedValue(eq(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED)); imsManager.getConfigInterface().setProvisionedValue(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED, ImsConfig.FeatureValueConstants.OFF); assertEquals(0, ((int) (mProvisionedIntVals.get(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED)))); assertEquals(false, imsManager.isWfcProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).setProvisionedValue(eq(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED), eq(0)); verify(mImsConfigImplBaseMock, times(1)).getProvisionedValue(eq(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED)); }
@java.lang.Override public void onCreate() { android.util.Log.i(com.android.phone.testapps.imstestapp.TestImsService.LOG_TAG, "onCreate"); mImsRegistration = com.android.phone.testapps.imstestapp.TestImsRegistrationImpl.getInstance(); mTestMmTelFeature = com.android.phone.testapps.imstestapp.TestMmTelFeatureImpl.getInstance(); mTestRcsFeature = new com.android.phone.testapps.imstestapp.TestRcsFeatureImpl(); mTestImsConfig = new com.android.phone.testapps.imstestapp.TestImsConfigImpl(); com.android.phone.testapps.imstestapp.TestImsService.mInstance = this; }
@org.junit.Before public void setUp() throwsjava.lang.Exception { super.setUp("SubscriptionControllerTest"); mPhoneId = mPhone.getPhoneId(); mBundle = mContextFixture.getCarrierConfigBundle(); doReturn(mSubId).when(mSubscriptionController).getSubId(mPhoneId); doReturn(mSubscriptionController).when(mBinder).queryLocalInterface(anyString()); mServiceManagerMockedServices.put("isub", mBinder); mImsManagerInstances.remove(mPhoneId); }
private void acknowledgeSmsReport(int messageRef, @android.telephony.ims.Stub.ImsSmsImplBase.StatusReportResult int result) { getSmsImplementation().acknowledgeSmsReport(messageRef, result); }
@java.lang.Override public android.telephony.ims.aidl.IImsConfig getConfig(int slotIndex) throws android.os.RemoteException { android.telephony.ims.stub.ImsConfigImplBase c = this.getConfig(slotIndex); return c!= null? c.getBinder() : null; }
@java.lang.Override public int setConfig(int item, int value) { return ImsConfig.OperationStatusConstants.SUCCESS; }
@java.lang.Override public int setConfig(int item,java.lang.String value) { return ImsConfig.OperationStatusConstants.SUCCESS; }
@java.lang.Override public int getConfigInt(int item) { return ImsConfig.FeatureValueConstants.ON; }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testGetDefaultValues() { doReturn("-1").when(mSubscriptionController).getSubscriptionProperty(anyInt(), anyString(), anyString()); setDefaultValues(); com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance(mContext, mPhoneId); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ENABLE_DEFAULT_VAL, imsManager.isWfcEnabledByUser()); verify(mSubscriptionController, times(1)).getSubscriptionProperty(anyInt(), eq(SubscriptionManager.WFC_IMS_ENABLED), anyString()); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.ENHANCED_4G_ENABLE_DEFAULT_VAL, imsManager.isEnhanced4gLteModeSettingEnabledByUser()); verify(mSubscriptionController, times(1)).getSubscriptionProperty(anyInt(), eq(SubscriptionManager.ENHANCED_4G_MODE_ENABLED), anyString()); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_MODE_DEFAULT_VAL, imsManager.getWfcMode(false)); verify(mSubscriptionController, times(1)).getSubscriptionProperty(anyInt(), eq(SubscriptionManager.WFC_IMS_MODE), anyString()); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ROAMING_MODE_DEFAULT_VAL, imsManager.getWfcMode(true)); verify(mSubscriptionController, times(1)).getSubscriptionProperty(anyInt(), eq(SubscriptionManager.WFC_IMS_ROAMING_MODE), anyString()); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.VT_IMS_ENABLE_DEFAULT_VAL, imsManager.isVtEnabledByUser()); verify(mSubscriptionController, times(1)).getSubscriptionProperty(anyInt(), eq(SubscriptionManager.VT_IMS_ENABLED), anyString()); }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetValues() { com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance(mContext, mPhoneId); imsManager.setWfcMode(ImsConfig.WfcModeFeatureValueConstants.CELLULAR_PREFERRED); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.WFC_IMS_MODE), eq("1")); imsManager.setWfcMode(ImsConfig.WfcModeFeatureValueConstants.CELLULAR_PREFERRED, true); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.WFC_IMS_ROAMING_MODE), eq("1")); imsManager.setVtSetting(false); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.VT_IMS_ENABLED), eq("0")); imsManager.setEnhanced4gLteModeSetting(true); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.ENHANCED_4G_MODE_ENABLED), eq("1")); imsManager.setWfcSetting(true); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.WFC_IMS_ENABLED), eq("1")); }
public void sendSms(int messageRef,java.lang.String format,java.lang.String smsc, boolean isRetry, byte[] pdu) { try { onSendSmsResult(messageRef, android.telephony.ims.stub.ImsSmsImplBase.SEND_STATUS_ERROR, SmsManager.RESULT_ERROR_GENERIC_FAILURE); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, ("Could not send sms: " + (e.getMessage()))); } }
public void acknowledgeSmsReport(int messageRef, @android.telephony.ims.Stub.ImsSmsImplBase.StatusReportResult int result) { }
public final void onSendSmsResult(int messageRef, @android.telephony.ims.Stub.ImsSmsImplBase.SendStatusResult int status, int reason) throws android.os.RemoteException,java.lang.IllegalStateException { synchronized(mLock) { if ((mListener) == null) { throw newjava.lang.IllegalStateException("Listener not ready."); } mListener.onSendSmsResult(messageRef, status, reason); } }
public void startMonitoringImsService() { if ((getPhoneType()) == (PhoneConstants.PHONE_TYPE_SIP)) { return; } synchronized(com.android.internal.telephony.Phone.lockForRadioTechnologyChange) { android.content.IntentFilter filter = new android.content.IntentFilter(); com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance(mContext, getPhoneId()); if ((imsManager!= null) && (!(imsManager.isDynamicBinding()))) { filter.addAction(ImsManager.ACTION_IMS_SERVICE_UP); filter.addAction(ImsManager.ACTION_IMS_SERVICE_DOWN); } mContext.registerReceiver(mImsIntentReceiver, filter); if (imsManager!= null) { if ((imsManager.isDynamicBinding()) || (imsManager.isServiceAvailable())) { mImsServiceReady = true; updateImsPhone(); } } } }
@com.android.internal.telephony.ims.ImsServiceController.ServiceInterface getServiceInterface() { return com.android.internal.telephony.ims.ImsServiceController.SERVICE_INTERFACE; }
@java.lang.Override protectedjava.lang.String getServiceInterface() { return com.android.internal.telephony.ims.ImsServiceControllerCompat.SERVICE_INTERFACE; }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testDontBindWhenNullCarrierPackage() throws android.os.RemoteException { setupResolver(1);java.util.List<android.content.pm.ResolveInfo> info = newjava.util.ArrayList<>();java.util.Set<java.lang.String> features = newjava.util.HashSet<>(); features.add(ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE); features.add(ImsResolver.METADATA_MMTEL_FEATURE); features.add(ImsResolver.METADATA_RCS_FEATURE); info.add(getResolveInfo(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, features, true)); when(mMockPM.queryIntentServicesAsUser(any(), anyInt(), anyInt())).thenReturn(info); com.android.internal.telephony.ims.ImsServiceController controller = mock(com.android.internal.telephony.ims.ImsServiceController.class); mTestImsResolver.setImsServiceControllerFactory(new com.android.internal.telephony.ims.ImsResolver.ImsServiceControllerFactory() { @java.lang.Override publicjava.lang.String getServiceInterface() { return ImsServiceController.SERVICE_INTERFACE; } @java.lang.Override public com.android.internal.telephony.ims.ImsServiceController create(android.content.Context context, android.content.ComponentName componentName, com.android.internal.telephony.ims.ImsServiceController.ImsServiceControllerCallbacks callbacks) { when(controller.getComponentName()).thenReturn(componentName); return controller; } }); setConfigCarrierString(0, null); mTestImsResolver.populateCacheAndStartBind(); waitForHandlerAction(mTestImsResolver.getHandler(), com.android.internal.telephony.ims.ImsResolverTest.TEST_TIMEOUT); verify(controller, never()).bind(any()); verify(controller, never()).unbind(); }
public final android.telephony.ims.aidl.IImsConfig getBinder() { return mBinder; }
@java.lang.Override public void removeImsConfigCallback(android.telephony.ims.aidl.IImsConfigCallback c) throws android.os.RemoteException { this.removeImsConfigCallback(c, null); }
private void stopListeningForCalls() { try { resetImsCapabilities(); if ((mImsManager)!= null) { mImsManager.getConfigInterface().removeConfigCallback(mConfigCallback); mImsManager.close(); } catch (com.android.ims.ImsException e) { } }
private void setImsServiceControllerFactory(com.android.internal.telephony.ims.ImsServiceController deviceController, com.android.internal.telephony.ims.ImsServiceController carrierController1, com.android.internal.telephony.ims.ImsServiceController carrierController2) { mTestImsResolver.setImsServiceControllerFactory(new com.android.internal.telephony.ims.ImsResolver.ImsServiceControllerFactory() { @java.lang.Override publicjava.lang.String getServiceInterface() { return ImsServiceController.SERVICE_INTERFACE; } @java.lang.Override public com.android.internal.telephony.ims.ImsServiceController create(android.content.Context context, android.content.ComponentName componentName, com.android.internal.telephony.ims.ImsServiceController.ImsServiceControllerCallbacks callbacks) { if (com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(deviceController.getComponentName()).thenReturn(componentName); return deviceController; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(carrierController1.getComponentName()).thenReturn(componentName); return carrierController1; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_2_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(carrierController2.getComponentName()).thenReturn(componentName); return carrierController2; } return null; } }); }
private void setImsServiceControllerFactory(com.android.internal.telephony.ims.ImsServiceController deviceController, com.android.internal.telephony.ims.ImsServiceController carrierController) { mTestImsResolver.setImsServiceControllerFactory(new com.android.internal.telephony.ims.ImsResolver.ImsServiceControllerFactory() { @java.lang.Override publicjava.lang.String getServiceInterface() { return ImsServiceController.SERVICE_INTERFACE; } @java.lang.Override public com.android.internal.telephony.ims.ImsServiceController create(android.content.Context context, android.content.ComponentName componentName, com.android.internal.telephony.ims.ImsServiceController.ImsServiceControllerCallbacks callbacks) { if (com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(deviceController.getComponentName()).thenReturn(componentName); return deviceController; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(carrierController.getComponentName()).thenReturn(componentName); return carrierController; } return null; } }); }
@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) return true; if ((o == null) || ((getClass())!= (o.getClass()))) return false; com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo that = ((com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo) (o)); if ((name)!= null?!(name.equals(that.name)) : (that.name)!= null) return false; if ((supportedFeatures)!= null?!(supportedFeatures.equals(that.supportedFeatures)) : (that.supportedFeatures)!= null) return false; return (controllerFactory)!= null? controllerFactory.equals(that.controllerFactory) : (that.controllerFactory) == null; }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.telephony.Rlog.d(com.android.internal.telephony.Phone.LOG_TAG, ("onReceive: action " + (intent.getAction()))); if (intent.hasExtra(ImsManager.EXTRA_PHONE_ID)) { int extraPhoneId = intent.getIntExtra(ImsManager.EXTRA_PHONE_ID, SubscriptionManager.INVALID_PHONE_INDEX); android.telephony.Rlog.d(com.android.internal.telephony.Phone.LOG_TAG, ("onReceive: extraPhoneId = " + extraPhoneId)); if ((extraPhoneId == (android.telephony.SubscriptionManager.INVALID_PHONE_INDEX)) || (extraPhoneId!= (getPhoneId()))) { return; } } synchronized(com.android.internal.telephony.Phone.lockForRadioTechnologyChange) { if (intent.getAction().equals(ImsManager.ACTION_IMS_SERVICE_UP)) { mImsServiceReady = true; updateImsPhone(); com.android.ims.ImsManager.getInstance(mContext, mPhoneId).updateImsServiceConfig(false); } else if (intent.getAction().equals(ImsManager.ACTION_IMS_SERVICE_DOWN)) { mImsServiceReady = false; updateImsPhone(); } } }
private void startListeningForCalls() throws com.android.ims.ImsException { mImsServiceRetryCount = 0; mImsManager.open(mMmTelFeatureListener); mImsManager.addRegistrationCallback(mImsRegistrationCallback); mImsManager.addCapabilitiesCallback(mImsCapabilityCallback); mImsManager.setCapabilitiesCallback(mImsConfigListener); mImsManager.getConfigInterface().addConfigCallback(mConfigCallback); getEcbmInterface().setEcbmStateListener(mPhone.getImsEcbmStateListener()); if (mPhone.isInEcm()) { mPhone.exitEmergencyCallbackMode(); } int mPreferredTtyMode = Settings.Secure.getInt(mPhone.getContext().getContentResolver(), Settings.Secure.PREFERRED_TTY_MODE, Phone.TTY_MODE_OFF); mImsManager.setUiTTYMode(mPhone.getContext(), mPreferredTtyMode, null); com.android.ims.ImsMultiEndpoint multiEndpoint = getMultiEndpointInterface(); if (multiEndpoint!= null) { multiEndpoint.setExternalCallStateListener(mPhone.getExternalCallTracker().getExternalCallStateListener()); } mUtInterface = getUtInterface(); if ((mUtInterface)!= null) { mUtInterface.registerForSuppServiceIndication(this, com.android.internal.telephony.imsphone.ImsPhoneCallTracker.EVENT_SUPP_SERVICE_INDICATION, null); } if (mCarrierConfigLoaded) { mImsManager.updateImsServiceConfig(true); } }
@java.lang.Override public android.telephony.ims.feature.MmTelFeature onCreateEmergencyMMTelImsFeature(int slotIndex) { return null; }
@java.lang.Override publicjava.lang.String getServiceInterface() { return mServiceInterface; }
@java.lang.Override publicjava.lang.String getServiceInterface() { return ImsServiceController.SERVICE_INTERFACE; }
@java.lang.Override public void addImsConfigCallback(android.telephony.ims.aidl.IImsConfigCallback c) throws android.os.RemoteException { this.addImsConfigCallback(c, null); }
@java.lang.Override public int setConfigInt(int item, int value) throws android.os.RemoteException { returnjava.lang.Integer.MIN_VALUE; }
@java.lang.Override public int setConfigString(int item,java.lang.String value) throws android.os.RemoteException { returnjava.lang.Integer.MIN_VALUE; }
@java.lang.Override public int getConfigInt(int item) throws android.os.RemoteException { returnjava.lang.Integer.MIN_VALUE; }
@java.lang.Override publicjava.lang.String getConfigString(int item) throws android.os.RemoteException { return null; }
private com.android.ims.ImsManager initializeProvisionedValues() { try { when(mImsConfigImplBaseMock.getProvisionedValue(anyInt())).thenAnswer(( invocation) -> { return getProvisionedInt(((java.lang.Integer) (invocation.getArguments()[0]))); }); when(mImsConfigImplBaseMock.setProvisionedValue(anyInt(), anyInt())).thenAnswer(( invocation) -> { mProvisionedIntVals.put(((java.lang.Integer) (invocation.getArguments()[0])), ((java.lang.Integer) (invocation.getArguments()[1]))); return ImsConfig.OperationStatusConstants.SUCCESS; }); when(mImsConfigImplBaseMock.getProvisionedStringValue(anyInt())).thenAnswer(( invocation) -> { return getProvisionedString(((java.lang.Integer) (invocation.getArguments()[0]))); }); when(mImsConfigImplBaseMock.setProvisionedStringValue(anyInt(), anyString())).thenAnswer(( invocation) -> { mProvisionedStringVals.put(((java.lang.Integer) (invocation.getArguments()[0])), ((java.lang.String) (invocation.getArguments()[1]))); return ImsConfig.OperationStatusConstants.SUCCESS; }); } catch (android.os.RemoteException ex) { fail(("initializeProvisionedValues failed with " + ex)); } mImsConfigStub = new android.telephony.ims.stub.ImsConfigImplBase.ImsConfigStub(mImsConfigImplBaseMock); doReturn(mImsConfigStub).when(mImsConfigImplBaseMock).getIImsConfig(); mImsConfig = new com.android.ims.ImsConfig(mImsConfigStub, mContext); com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance(mContext, mPhoneId); try { replaceInstance(com.android.ims.ImsManager.class, "mConfig", imsManager, mImsConfig); } catch (java.lang.Exception ex) { fail(("failed with " + ex)); } return imsManager; }
@java.lang.Override public android.telephony.ims.feature.MmTelFeature onCreateMMTelImsFeature(int slotIndex) { return mSpyMMTelFeature; }
@android.support.test.filters.FlakyTest @org.junit.Test public void testBindService() {java.util.HashSet<android.util.Pair<java.lang.Integer,java.lang.Integer>> testFeatures = newjava.util.HashSet<>(); testFeatures.add(new android.util.Pair(1, 1)); testFeatures.add(new android.util.Pair(1, 2)); org.mockito.ArgumentCaptor<android.content.Intent> intentCaptor = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); junit.framework.Assert.assertTrue(mTestImsServiceController.bind(testFeatures)); int expectedFlags = ((android.content.Context.BIND_AUTO_CREATE) | (android.content.Context.BIND_FOREGROUND_SERVICE)) | (android.content.Context.BIND_IMPORTANT); verify(mContext).bindService(intentCaptor.capture(), any(), eq(expectedFlags)); android.content.Intent testIntent = intentCaptor.getValue(); junit.framework.Assert.assertEquals(ImsServiceController.SERVICE_INTERFACE, testIntent.getAction()); junit.framework.Assert.assertEquals(mTestComponentName, testIntent.getComponent()); }
private void launchNotificationOnKeyguard(int slotId,java.lang.String message) { android.app.Notification.Builder builder = new android.app.Notification.Builder(this, com.android.stk.StkAppService.STK_NOTIFICATION_CHANNEL_ID); builder.setStyle(new android.app.Notification.BigTextStyle(builder).bigText(message)); builder.setContentText(message); com.android.internal.telephony.cat.Menu menu = getMainMenu(slotId); if ((menu == null) || (android.text.TextUtils.isEmpty(menu.title))) { builder.setContentTitle(getResources().getString(R.string.app_name)); } else { builder.setContentTitle(menu.title); } builder.setSmallIcon(com.android.internal.R.drawable.stat_notify_sim_toolkit); builder.setOngoing(true); builder.setOnlyAlertOnce(true); builder.setColor(getResources().getColor(com.android.internal.R.color.system_notification_accent_color)); mNotificationManager.notify(getNotificationId(com.android.stk.StkAppService.NOTIFICATION_ON_KEYGUARD, slotId), builder.build()); }
private void launchInputActivity(int slotId) { android.content.Intent newIntent = new android.content.Intent(android.content.Intent.ACTION_VIEW);java.lang.String targetActivity = com.android.stk.StkAppService.STK_INPUT_ACTIVITY_NAME;java.lang.String uriString = (com.android.stk.StkAppService.STK_INPUT_URI) + (java.lang.System.currentTimeMillis()); android.net.Uri uriData = android.net.Uri.parse(uriString); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, ("launchInputActivity slotId: " + slotId)); newIntent.setFlags(((android.content.Intent.FLAG_ACTIVITY_NEW_TASK) | (getFlagActivityNoUserAction(com.android.stk.StkAppService.InitiatedByUserAction.unknown, slotId)))); newIntent.setClassName(com.android.stk.StkAppService.PACKAGE_NAME, targetActivity); newIntent.putExtra("INPUT", mStkContext[slotId].mCurrentCmd.geInput()); newIntent.putExtra(com.android.stk.StkAppService.SLOT_ID, slotId); newIntent.setData(uriData); mContext.startActivity(newIntent); }
private void cancelNotificationOnKeyguard(int slotIndex) { if ((mUserPresentReceiver)!= null) { unregisterReceiver(mUserPresentReceiver); mUserPresentReceiver = null; mNotificationManager.cancel(getNotificationId(com.android.stk.StkAppService.NOTIFICATION_ON_KEYGUARD, slotIndex)); } }
private void launchTextDialog(int slotId) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, ("launchTextDialog slotId: " + slotId)); android.content.Intent newIntent = new android.content.Intent();java.lang.String targetActivity = com.android.stk.StkAppService.STK_DIALOG_ACTIVITY_NAME; int action = getFlagActivityNoUserAction(com.android.stk.StkAppService.InitiatedByUserAction.unknown, slotId);java.lang.String uriString = (com.android.stk.StkAppService.STK_DIALOG_URI) + (java.lang.System.currentTimeMillis()); android.net.Uri uriData = android.net.Uri.parse(uriString); if (newIntent!= null) { newIntent.setClassName(com.android.stk.StkAppService.PACKAGE_NAME, targetActivity); newIntent.setFlags((((android.content.Intent.FLAG_ACTIVITY_NEW_TASK) | (android.content.Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS)) | (getFlagActivityNoUserAction(com.android.stk.StkAppService.InitiatedByUserAction.unknown, slotId)))); newIntent.setData(uriData); newIntent.putExtra("TEXT", mStkContext[slotId].mCurrentCmd.geTextMessage()); newIntent.putExtra(com.android.stk.StkAppService.SLOT_ID, slotId); com.android.internal.telephony.cat.TextMessage textMessage = mStkContext[slotId].mCurrentCmd.geTextMessage(); notifyUserIfNecessary(slotId, (textMessage!= null? textMessage.text : null)); startActivity(newIntent); if (!(mStkContext[slotId].mCurrentCmd.geTextMessage().responseNeeded)) { sendResponse(com.android.stk.StkAppService.RES_ID_CONFIRM, slotId, true); } } }
public int getCarrierPrivilegeStatus(android.content.pm.PackageManager packageManager,java.lang.String packageName) { try { if (!(hasCarrierPrivilegeRules())) { int state = mState.get(); if (state == (com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.STATE_LOADING)) { return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED; } else if (state == (com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.STATE_ERROR)) { return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_ERROR_LOADING_RULES; } return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_NO_ACCESS; } android.content.pm.PackageInfo pInfo = packageManager.getPackageInfo(packageName, ((android.content.pm.PackageManager.GET_SIGNATURES) | (android.content.pm.PackageManager.MATCH_DISABLED_UNTIL_USED_COMPONENTS))); return getCarrierPrivilegeStatus(pInfo); } catch (android.content.pm.PackageManager ex) { } return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_NO_ACCESS; }
@org.junit.After public void tearDown() throwsjava.lang.Exception { stopService(); mTargetContext.unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedQueue.clear(); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); }
@org.junit.After public void tearDown() throwsjava.lang.Exception { com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.hfpclient.HeadsetClientService.class); mService = null; mAdapter = null; com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); }
@org.junit.After public void tearDown() throwsjava.lang.Exception { com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.hfp.HeadsetService.class); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); mStateMachines.clear(); mCurrentDevice = null;java.lang.reflect.Method method = com.android.bluetooth.hfp.HeadsetObjectsFactory.class.getDeclaredMethod("setInstanceForTesting", com.android.bluetooth.hfp.HeadsetObjectsFactory.class); method.setAccessible(true); method.invoke(null, ((com.android.bluetooth.hfp.HeadsetObjectsFactory) (null))); mObjectsFactory = null; com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); mAdapterService = null; }
@org.junit.Test public void testInitialize() { android.util.Log.i(com.android.bluetooth.hdp.HealthServiceTest.TAG, "testInitialize()"); assertTrue("Initialization test passed", mHealthService.isInitialized()); }
@org.junit.After public void tearDown() throwsjava.lang.Exception { com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.hdp.HealthService.class); mAdapter = null; com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); }
@org.junit.After public void tearDown() throwsjava.lang.Exception { com.android.bluetooth.hfp.HeadsetObjectsFactory.getInstance().destroyStateMachine(mHeadsetStateMachine); mHandlerThread.quit(); com.android.bluetooth.hfp.HeadsetObjectsFactory.getInstance().clearAdapterService(mAdapterService); mAdapterService = null; }
@org.junit.Before public void setUp() throwsjava.lang.Exception { mTargetContext = android.support.test.InstrumentationRegistry.getTargetContext(); org.junit.Assume.assumeTrue("Ignore test when HealthService is not enabled", mTargetContext.getResources().getBoolean(R.bool.profile_supported_hdp)); org.mockito.MockitoAnnotations.initMocks(this); com.android.bluetooth.TestUtils.setAdapterService(mAdapterService); com.android.bluetooth.TestUtils.startService(mServiceRule, com.android.bluetooth.hdp.HealthService.class); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); org.junit.Assert.assertNotNull(mAdapter); }
@org.junit.Test public void testInitialize() { android.util.Log.i(com.android.bluetooth.mapclient.MapClientTest.TAG, "MapClient test passed"); }
@org.junit.After public void tearDown() throwsjava.lang.Exception { mA2dpStateMachine.doQuit(); mHandlerThread.quit(); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); com.android.bluetooth.TestUtils.setAdapterService(mAdapterService); mTargetContext = android.support.test.InstrumentationRegistry.getTargetContext(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice("00:01:02:03:04:05"); mHandlerThread = new android.os.HandlerThread("A2dpStateMachineTestHandlerThread"); mHandlerThread.start(); mA2dpStateMachine = new com.android.bluetooth.a2dp.A2dpStateMachine(mTestDevice, mA2dpService, mTargetContext, mA2dpNativeInterface, mHandlerThread.getLooper()); mA2dpStateMachine.sConnectTimeoutMs = 1000; mA2dpStateMachine.start(); }
@org.junit.After public void tearDown() throwsjava.lang.Exception { mHidDeviceService.stop(); mHidDeviceService.cleanup(); mHidDeviceService = null; mTargetContext.unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedQueue.clear(); mCallbackQueue.clear(); com.android.bluetooth.hid.HidDeviceTest.setHidDeviceNativeInterfaceInstance(null); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); mAdapterService = null; }
@org.junit.After public void tearDown() throwsjava.lang.Exception { mHandlerThread.quitSafely(); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); mAdapterService = null; }
@org.junit.Before public void setUp() throwsjava.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); com.android.bluetooth.TestUtils.setAdapterService(mAdapterService); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice("00:01:02:03:04:05"); mHandlerThread = new android.os.HandlerThread("PbapTestHandlerThread"); mHandlerThread.start(); mHandler = new android.os.Handler(mHandlerThread.getLooper()); mBluetoothPbapService = mock(com.android.bluetooth.pbap.BluetoothPbapService.class); doNothing().when(mBluetoothPbapService).checkOrGetPhonebookPermission(any()); mPbapStateMachine = com.android.bluetooth.pbap.PbapStateMachine.make(mBluetoothPbapService, mHandlerThread.getLooper(), mTestDevice, mSocket, mBluetoothPbapService, mHandler, com.android.bluetooth.pbap.PbapStateMachineTest.TEST_NOTIFICATION_ID); }
@org.junit.After public void tearDown() throwsjava.lang.Exception { com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.mapclient.MapClientService.class); mService = com.android.bluetooth.mapclient.MapClientService.getMapClientService(); org.junit.Assert.assertNull(mService); mAdapter = null; com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); mAdapterService = null; }
@org.junit.After public void tearDown() throwsjava.lang.Exception { com.android.bluetooth.TestUtils.stopService(mBluetoothDevice, com.android.bluetooth.hfp.HeadsetService.class); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); reset(mObjectsFactory, mAdapterService); mCurrentDevice = null;java.lang.reflect.Method method = com.android.bluetooth.hfp.HeadsetObjectsFactory.class.getDeclaredMethod("setInstanceForTesting", com.android.bluetooth.hfp.HeadsetObjectsFactory.class); method.setAccessible(true); method.invoke(null, ((com.android.bluetooth.hfp.HeadsetObjectsFactory) (null))); mObjectsFactory = null; com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); }
@java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { mServiceBinder = ((android.telephony.INetworkService.Stub) (service)); mDeathRecipient = new com.android.internal.telephony.NetworkRegistrationManager.RegManagerDeathRecipient(name); try { mServiceBinder.linkToDeath(mDeathRecipient); mServiceBinder.createNetworkServiceProvider(mPhone.getPhoneId()); mServiceBinder.registerForNetworkRegistrationStateChanged(mPhone.getPhoneId(), new com.android.internal.telephony.NetworkRegistrationManager.NetworkRegStateCallback(null)); } catch (android.os.RemoteException exception) { mDeathRecipient.binderDied(); android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, ("RemoteException " + exception)); } }
private boolean bindService() { android.content.Intent intent = new android.content.Intent(android.telephony.NetworkService.NETWORK_SERVICE_INTERFACE); intent.setPackage(getPackageName()); return mPhone.getContext().bindService(intent, new com.android.internal.telephony.NetworkRegistrationManager.NetworkServiceConnection(), Context.BIND_AUTO_CREATE); }
public void registerForNetworkRegistrationStateChanged(android.os.Handler h, int what,java.lang.Object obj) { android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, "registerForNetworkRegistrationStateChanged"); android.os.Registrant r = new android.os.Registrant(h, what, obj); mRegStateChangeRegistrants.addUnique(h, what, obj); }
@java.lang.Override public void binderDied() { android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, (((("NetworkService(" + (mComponentName)) + " transport type ") + (mTransportType)) + ") died.")); }
@java.lang.Override public void onNetworkStateChanged() { android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, "onNetworkStateChanged"); mRegStateChangeRegistrants.notifyRegistrants(); }
privatejava.lang.String getPackageName() {java.lang.String packageName; int resourceId;java.lang.String carrierConfig; switch (mTransportType) { case android.telephony.AccessNetworkConstants.TransportType.WWAN : resourceId = com.android.internal.R.string.config_wwan_network_service_package; carrierConfig = android.telephony.CarrierConfigManager.KEY_CARRIER_NETWORK_SERVICE_WWAN_PACKAGE_OVERRIDE_STRING; break; case android.telephony.AccessNetworkConstants.TransportType.WLAN : resourceId = com.android.internal.R.string.config_wlan_network_service_package; carrierConfig = android.telephony.CarrierConfigManager.KEY_CARRIER_NETWORK_SERVICE_WLAN_PACKAGE_OVERRIDE_STRING; break; default : throw newjava.lang.IllegalStateException(("Transport type not WWAN or WLAN.", "Unknown transport type=" + (mTransportType))); } packageName = mPhone.getContext().getResources().getString(resourceId); android.os.PersistableBundle b = mCarrierConfigManager.getConfigForSubId(mPhone.getSubId()); if (b!= null) { packageName = b.getString(carrierConfig, packageName); } android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, ((("Binding to packageName " + packageName) + " for transport type") + (mTransportType))); return packageName; }
public void getNetworkRegistrationState(int domain, android.os.Message onCompleteMessage) { if (onCompleteMessage == null) return; android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, ("getNetworkRegistrationState domain " + domain)); if (!(isServiceConnected())) { onCompleteMessage.obj = new android.os.AsyncResult(onCompleteMessage.obj, null, newjava.lang.IllegalStateException("Service not connected.")); onCompleteMessage.sendToTarget(); return; } try { mServiceBinder.getNetworkRegistrationState(mPhone.getPhoneId(), domain, new com.android.internal.telephony.NetworkRegistrationManager.NetworkRegStateCallback(onCompleteMessage)); } catch (android.os.RemoteException e) { android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, ("getNetworkRegistrationState RemoteException " + e)); onCompleteMessage.obj = new android.os.AsyncResult(onCompleteMessage.obj, null, e); onCompleteMessage.sendToTarget(); } }
@java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, ("onServiceDisconnected " + name)); if ((mServiceBinder)!= null) { mServiceBinder.unlinkToDeath(mDeathRecipient, 0); } }
private void update() { boolean tracingOn = com.android.traceur.AtraceUtils.isTracingOn(); getQsTile().setIcon(android.graphics.drawable.Icon.createWithResource(this, R.drawable.stat_sys_adb)); getQsTile().setState((tracingOn? android.service.quicksettings.Tile.STATE_ACTIVE : android.service.quicksettings.Tile.STATE_INACTIVE)); getQsTile().setLabel(getString(tracingOn? R.string.save_and_share_trace : R.string.record_trace))); getQsTile().updateTile(); }
public void pollState(boolean modemTriggered) { mPollingContext = new int[1]; mPollingContext[0] = 0; log(("pollState: modemTriggered=" + modemTriggered)); switch (mCi.getRadioState()) { case RADIO_UNAVAILABLE : mNewSS.setStateOutOfService(); mNewCellLoc.setStateInvalid(); setSignalStrengthDefaultValues(); mNitzState.handleNetworkUnavailable(); pollStateDone(); break; case RADIO_OFF : mNewSS.setStateOff(); mNewCellLoc.setStateInvalid(); setSignalStrengthDefaultValues(); mNitzState.handleNetworkUnavailable(); if ((mDeviceShuttingDown) || ((!modemTriggered) && ((android.telephony.ServiceState.RIL_RADIO_TECHNOLOGY_IWLAN)!= (mSS.getRilDataRadioTechnology())))) { pollStateDone(); break; } default : (mPollingContext[0])++; mCi.getOperator(obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_STATE_OPERATOR, mPollingContext)); (mPollingContext[0])++; mWwanRegStateManager.getNetworkRegistrationState(NetworkRegistrationState.DOMAIN_PS, obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_STATE_GPRS, mPollingContext)); (mPollingContext[0])++; mWwanRegStateManager.getNetworkRegistrationState(NetworkRegistrationState.DOMAIN_CS, obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_STATE_REGISTRATION, mPollingContext)); if (mPhone.isPhoneTypeGsm()) { (mPollingContext[0])++; mCi.getNetworkSelectionMode(obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_STATE_NETWORK_SELECTION_MODE, mPollingContext)); } break; } }
private int getLteEarfcn(android.telephony.CellIdentity cellIdentity) { int lteEarfcn = com.android.internal.telephony.ServiceStateTracker.INVALID_LTE_EARFCN; switch (cellIdentity.getType()) { case android.hardware.radio.V1_0.CellInfoType.LTE : { lteEarfcn = ((android.telephony.CellIdentityLte) (cellIdentity)).getEarfcn(); break; } default : { break; } } return lteEarfcn; }
private void notifySentMessageStatus(java.lang.String handle, com.android.bluetooth.mapclient.EventReport.Type status) { if (com.android.bluetooth.mapclient.MceStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.mapclient.MceStateMachine.TAG, (("Notifying a status for " + handle) + " Status = ") + status)); } android.app.PendingIntent intentToSend = null;java.lang.String shortHandle = handle.substring(2); if (status == (EventReport.Type.SENDING_FAILURE)) { intentToSend = mSentReceiptRequested.remove(mSentMessageLog.get(shortHandle)); } else if (status == (EventReport.Type.DELIVERY_SUCCESS)) { intentToSend = mDeliveryReceiptRequested.remove(mSentMessageLog.get(shortHandle)); } if (intentToSend!= null) { try { if (com.android.bluetooth.mapclient.MceStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.mapclient.MceStateMachine.TAG, ("Sending " + intentToSend)); } intentToSend.send(); } catch (android.app.PendingIntent e) { android.util.Log.w(com.android.bluetooth.mapclient.MceStateMachine.TAG, ("Send Request Canceled " + e)); } } else { android.util.Log.e(com.android.bluetooth.mapclient.MceStateMachine.TAG, (("Notifying a notification on message with handle = " + handle) + " but it is NOT found in mSentMessageLog! where did it go?")); } }
@java.lang.Override protectedjava.lang.String getLogRecString(android.os.Message msg) { if ((msg.what) == (com.android.bluetooth.hfp.HeadsetStateMachine.STACK_EVENT)) { com.android.bluetooth.hfp.HeadsetStackEvent event = ((com.android.bluetooth.hfp.HeadsetStackEvent) (msg.obj)); return ((com.android.bluetooth.hfp.HeadsetStateMachine.getMessageName(msg.what)) + ": ") + event; } else { return ((((com.android.bluetooth.hfp.HeadsetStateMachine.getMessageName(msg.what)) + ": arg1=") + (msg.arg1)) + ", arg2=") + (msg.arg2); } }
@android.annotation.NonNull public static android.net.MacAddress createRandomUnicastAddress() {java.security.SecureRandom r = newjava.security.SecureRandom(); long addr = (r.nextLong()) & (android.net.MacAddress.VALID_LONG_MASK); addr = addr | (android.net.MacAddress.LOCALLY_ASSIGNED_MASK); addr = addr & ( ~(android.net.MacAddress.MULTICAST_MASK)); return new android.net.MacAddress(addr); }
public void registerForEidReady(android.os.Handler h, int what,java.lang.Object obj) { android.os.Registrant r = new android.os.Registrant(h, what, obj); mSimStateLoadedRegistrants.add(r); }
@java.lang.Override public void onException(java.lang.Throwable e) { com.android.internal.telephony.uicc.euicc.EuiccCard.loge("Failed loading eid"); }
@java.lang.Override public void onResult(java.lang.String result) { mEid = result; mSimStateLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); }
public void unregisterForEidReady(android.os.Handler h) { mSimStateLoadedRegistrants.remove(h); }
private void loadEidAndNotifyRegistrants() { android.os.Handler euiccMainThreadHandler = new android.os.Handler(); com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.String> cardCb = new com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.String>() { @java.lang.Override public void onResult(java.lang.String result) { mEid = result; mSimStateLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } @java.lang.Override public void onException(java.lang.Throwable e) { com.android.internal.telephony.uicc.euicc.EuiccCard.loge("Failed loading eid"); } }; getEid(cardCb, euiccMainThreadHandler); }
private boolean parseAtrString(java.lang.String atr) { if (((atr.length()) % 2)!= 0) { com.android.internal.telephony.uicc.AnswerToReset.loge((("The length of input ATR string '" + (atr.length())) + "' is not even.")); return false; } if ((atr.length()) < 4) { com.android.internal.telephony.uicc.AnswerToReset.loge("The ATR string must at least contains TS and T0."); return false; } byte[] atrBytes = com.android.internal.telephony.uicc.IccUtils.hexStringToBytes(atr); if (atrBytes == null) { return false; } int index = parseConventionByte(atrBytes, 0); if (index == (-1)) { return false; } index = parseFormatByte(atrBytes, index); if (index == (-1)) { return false; } index = parseInterfaceBytes(atrBytes, index); if (index == (-1)) { return false; } index = parseHistoricalBytes(atrBytes, index); if (index == (-1)) { return false; } index = parseCheckBytes(atrBytes, index); if (index == (-1)) { return false; } if (index!= (atrBytes.length)) { com.android.internal.telephony.uicc.AnswerToReset.loge("More bytes after the check byte."); return false; } com.android.internal.telephony.uicc.AnswerToReset.log(((("parsed the ATR string '" + atr) + "' into ") + (toString()))); checkIsEuiccSupported(); return true; }
void deflect(com.android.server.telecom.Call call,java.lang.String number) { finaljava.lang.String callId = mCallIdMapper.getCallId(call); if ((callId!= null) && (isServiceValid("deflect"))) { try { logOutgoing("deflect %s %s", callId, number); mServiceInterface.deflect(callId, number, android.telecom.Log.getExternalSession()); } catch (android.os.RemoteException e) { } }
@java.lang.Override public void deflectCall(java.lang.String callId,java.lang.String deflectNumber) { try { android.telecom.Log.startSession(LogUtils.Sessions.ICA_DEFLECT_CALL, mOwnerComponentName); long token = android.os.Binder.clearCallingIdentity(); try { synchronized(mLock) { android.telecom.Log.i(this, "deflectCall(%s,%s)", callId, deflectNumber); com.android.server.telecom.Call call = mCallIdMapper.getCall(callId); if (call!= null) { mCallsManager.deflectCall(call, deflectNumber); } else { android.telecom.Log.w(this, "deflectCall, unknown call id: %s", callId); } } } finally { android.os.Binder.restoreCallingIdentity(token); } } finally { android.telecom.Log.endSession(); } }
@com.android.internal.annotations.VisibleForTesting public void deflect(java.lang.String number) { if (isRinging("deflect")) { if ((mConnectionService)!= null) { mConnectionService.deflect(this, number); } else { android.telecom.Log.e(this, newjava.lang.NullPointerException(), "deflect call failed due to null CS callId=%s", getId()); } android.telecom.Log.addEvent(this, LogUtils.Events.REQUEST_DEFLECT); } }
public void deflectCall(java.lang.String callId,java.lang.String deflectNumber) { try { mAdapter.deflectCall(callId, deflectNumber); } catch (android.os.RemoteException e) { } }
@java.lang.Override public void deflect(java.lang.String callId,java.lang.String number, android.telecom.Logging.Session.Info info) throws android.os.RemoteException { }
@com.android.internal.annotations.VisibleForTesting public void deflectCall(com.android.server.telecom.Call call,java.lang.String number) { if (!(mCalls.contains(call))) { android.telecom.Log.i(this, "Request to deflect a non-existent call %s", call); } else { call.deflect(number); } }
@java.lang.Override public void onDeflect(java.lang.String number) { com.android.services.telephony.Log.v(this, "onDeflect"); if (((mOriginalConnection)!= null) && (isValidRingingCall())) { try { mOriginalConnection.deflect(number); } catch (com.android.internal.telephony.CallStateException e) { com.android.services.telephony.Log.e(this, e, "Failed to deflect call."); } } }
private void deflect(java.lang.String callId,java.lang.String number) { android.telecom.Log.d(this, "deflect %s - %s", callId, number); findConnectionForAction(callId, "deflect").onDeflect(number); }
public void onDeflect(java.lang.String number) { }
@java.lang.Override public void deflect(java.lang.String deflectNumber) throws android.os.RemoteException { android.util.Log.d(com.android.bluetooth.bluetooth.BluetoothP2P.TAG, ("Calling deflect() with deflectNumber: " + deflectNumber)); try { android.util.Log.d(com.android.bluetooth.bluetooth.bluetooth.BluetoothP2P.TAG, ("Calling deflect() with deflectNumber: " + deflectNumber)); android.util.Log.d(com.android.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth.bluetooth
public void deflect(java.lang.String number) { mInCallAdapter.deflectCall(mTelecomCallId, number); }
public void deflect(java.lang.String number) throws com.android.ims.ImsException { logi(((("deflect :: session=" + (mSession)) + ", number=") + number)); synchronized(mLockObj) { if ((mSession) == null) { throw new com.android.ims.ImsException("No call to deflect", ImsReasonInfo.CODE_LOCAL_CALL_TERMINATED); } try { mSession.deflect(number); } catch (java.lang.Throwable t) { loge("deflect :: ", t); throw new com.android.ims.ImsException("deflect()", t, 0); } }
@java.lang.Override public void deflect(java.lang.String callId,java.lang.String number, android.telecom.Logging.Session.Info sessionInfo) { android.telecom.Log.startSession(sessionInfo, android.telecom.ConnectionService.SESSION_DEFLECT); try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = number; args.arg3 = android.telecom.Log.createSubsession(); mHandler.obtainMessage(android.telecom.ConnectionService.MSG_DEFLECT, args).sendToTarget(); } finally { android.telecom.Log.endSession(); } }
public byte[] getSelectResponse() { return (mSelectResponse.length) == 0; }
public void selectDefaultApplication() { try { select(null); synchronized(mLock) { mDefaultApplicationSelectedOnBasicChannel = true; } } catch (java.util.NoSuchElementException e) { if ((getAccessControlEnforcer())!= null) { try { select(mAccessControlEnforcer.getDefaultAccessControlAid()); synchronized(mLock) { mDefaultApplicationSelectedOnBasicChannel = true; } } catch (java.lang.Exception ignore) { } } } catch (android.os.RemoteException ignore) { } }
private void testTransitionSelection(boolean testOpen, boolean testNewTask, boolean bottomWallpaper, boolean topWallpaper, boolean topTranslucent, boolean testSlowStop,java.lang.String expectedTransit) throwsjava.lang.Exception {java.lang.String bottomStartCmd = getAmStartCmd(android.server.cts.ActivityManagerTransitionSelectionTests.BOTTOM_ACTIVITY_NAME); if (bottomWallpaper) { bottomStartCmd += " --ez USE_WALLPAPER true"; } if (testSlowStop) { bottomStartCmd += " --ei STOP_DELAY 3000"; } executeShellCommand(bottomStartCmd); finaljava.lang.String topActivityName = (topTranslucent)? android.server.cts.ActivityManagerTransitionSelectionTests.TRANSLUCENT_TOP_ACTIVITY_NAME : android.server.cts.ActivityManagerTransitionSelectionTests.TOP_ACTIVITY_NAME; finaljava.lang.String[] bottomActivityArray = newjava.lang.String[]{ android.server.cts.ActivityManagerTransitionSelectionTests.BOTTOM_ACTIVITY_NAME }; finaljava.lang.String[] topActivityArray = newjava.lang.String[]{ topActivityName }; mAmWmState.computeState(mDevice, bottomActivityArray);java.lang.String topStartCmd = getAmStartCmd(topActivityName); if (testNewTask) { topStartCmd += " -f 0x18000000" } if (topWallpaper) { topStartCmd += " --ez USE_WALLPAPER true"; } if (!testOpen) { topStartCmd += " --ei FINISH_DELAY 1000"; } executeShellCommand(topStartCmd);java.lang.Thread.sleep(5000); if (testOpen) { mAmWmState.computeState(mDevice, topActivityArray); } else { mAmWmState.computeState(mDevice, bottomActivityArray); } assertEquals("Got wrong transition", expectedTransit, mAmWmState.getWmState().getLastTransition()); }
private void toggleFontScale() throwsjava.lang.Throwable { com.android.compatibility.common.util.SystemUtil.runShellCommand(getInstrumentation(), android.app.cts.ApplicationTest.ERASE_FONT_SCALE_CMD); getInstrumentation().waitForIdleSync(); com.android.compatibility.common.util.SystemUtil.runShellCommand(getInstrumentation(), android.app.cts.ApplicationTest.PUT_FONT_SCALE_CMD); getInstrumentation().waitForIdleSync(); com.android.compatibility.common.util.SystemUtil.runShellCommand(getInstrumentation(), android.app.cts.ApplicationTest.ERASE_FONT_SCALE_CMD); getInstrumentation().waitForIdleSync(); }
public void testApplication() throwsjava.lang.Throwable { final android.app.Instrumentation instrumentation = getInstrumentation(); final android.content.Context targetContext = instrumentation.getTargetContext(); final android.content.Intent intent = new android.content.Intent(targetContext, android.app.stubs.MockApplicationActivity.class); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); final android.app.Activity activity = instrumentation.startActivitySync(intent); final android.app.stubs.MockApplication mockApp = ((android.app.stubs.MockApplication) (activity.getApplication())); assertTrue(mockApp.isConstructorCalled); assertTrue(mockApp.isOnCreateCalled); toggleFontScale(); assertTrue(mockApp.isOnConfigurationChangedCalled); }
private staticjava.lang.String filterHashes(java.lang.String t) { for (; ;) { int index = t.indexOf("<0x"); if (index < 0) { break; } int endIndex = t.indexOf(">", index); if (endIndex < 0) { break; } t = ((t.substring(0, (index + 1))) + "HASH") + (t.substring(endIndex)); } return t; }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSuppServiceNotification() { com.android.services.telephony.TestTelephonyConnection c = new com.android.services.telephony.TestTelephonyConnection(); com.android.internal.telephony.Phone phone = c.getPhone(); c.setOriginalConnection(c.getOriginalConnection()); org.mockito.ArgumentCaptor<android.os.Handler> handlerCaptor = org.mockito.ArgumentCaptor.forClass(android.os.Handler.class); org.mockito.ArgumentCaptor<java.lang.Integer> messageCaptor = org.mockito.ArgumentCaptor.forClass(java.lang.Integer.class); verify(phone).registerForSuppServiceNotification(handlerCaptor.capture(), messageCaptor.capture(), any()); android.os.Handler handler = handlerCaptor.getValue(); int message = messageCaptor.getValue(); android.os.AsyncResult result = getSuppServiceNotification(SuppServiceNotification.NOTIFICATION_TYPE_MO, SuppServiceNotification.MO_CODE_CALL_FORWARDED); handler.obtainMessage(message, result).sendToTarget(); waitForHandlerAction(handler, com.android.services.telephony.TelephonyConnectionServiceTest.TIMEOUT_MS); junit.framework.Assert.assertEquals(c.getLastConnectionEvent(), TelephonyManager.EVENT_CALL_FORWARDED); result = getSuppServiceNotification(SuppServiceNotification.NOTIFICATION_TYPE_MO, SuppServiceNotification.MO_CODE_CALL_IS_WAITING); handler.obtainMessage(message, result).sendToTarget(); waitForHandlerAction(handler, com.android.services.telephony.TelephonyConnectionServiceTest.TIMEOUT_MS); junit.framework.Assert.assertEquals(c.getLastConnectionEvent(), TelephonyManager.EVENT_CALL_IS_WAITING); }
private void handleSuppServiceNotification(com.android.internal.telephony.gsm.SuppServiceNotification ssn) { com.android.services.telephony.Log.i(this, "handleSuppServiceNotification: type=%d, code=%d", ssn.notificationType, ssn.code); if ((ssn.notificationType) == (com.android.internal.telephony.gsm.SuppServiceNotification.NOTIFICATION_TYPE_MO)) { switch (ssn.code) { case com.android.internal.telephony.gsm.SuppServiceNotification.MO_CODE_CALL_FORWARDED : sendConnectionEvent(TelephonyManager.EVENT_CALL_FORWARDED, null); break; case com.android.internal.telephony.gsm.SuppServiceNotification.MO_CODE_CALL_IS_WAITING : sendConnectionEvent(TelephonyManager.EVENT_CALL_IS_WAITING, null); break; } } else if ((ssn.notificationType) == (com.android.internal.telephony.gsm.SuppServiceNotification.NOTIFICATION_TYPE_MT)) { } }
publicjava.lang.String getLastConnectionEvent() { return mLastConnectionEvent; }
@java.lang.Override public void sendConnectionEvent(java.lang.String event, android.os.Bundle extras) { mLastConnectionEvent = event; }
public void waitForGc() { allowCollection(); do { try {java.lang.Thread.sleep(10); } catch (java.lang.Exception e) { }java.lang.System.gc();java.lang.System.runFinalization();java.lang.System.gc(); } while (isLive()); reset(); }
public boolean isUp() throwsjava.net.SocketException { return ((getFlags()) & (IFF_UP)); }
protected void setOperatorIdd(java.lang.String operatorNumeric) {java.lang.String idd = mHbpcdUtils.getIddByMcc(java.lang.Integer.parseInt(operatorNumeric.substring(0, 3))); if ((idd!= null) && (!(idd.isEmpty()))) { android.system.SystemProperties.set(TelephonyProperties.PROPERTY_OPERATOR_IDP_STRING, idd); } else { android.system.SystemProperties.set(TelephonyProperties.PROPERTY_OPERATOR_IDP_STRING, "+"); } }
com.android.bluetooth.a2dp.A2dpStateMachine make(android.bluetooth.BluetoothDevice device, com.android.bluetooth.a2dp.A2dpService a2dpService, android.content.Context context, com.android.bluetooth.a2dp.A2dpNativeInterface a2dpNativeInterface, android.os.Looper looper) { if (com.android.bluetooth.a2dp.A2dpStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Creating Bluetooth for device " + device)); } com.android.bluetooth.a2dp.A2dpStateMachine a2dpSm = new com.android.bluetooth.a2dp.A2dpStateMachine(device, a2dpService, context, a2dpNativeInterface, looper); a2dpSm.start(); return a2dpSm; }
public void testNetworkBlocked() throwsjava.lang.Exception { assertEquals(com.android.cts.deviceandprofileowner.VPN_PACKAGE, mDevicePolicyManager.getAlwaysOnVpnPackage(com.android.cts.deviceandprofileowner.ADMIN_RECEIVER_COMPONENT)); for (int i = 0; (i < (MAX_NUMBER_OF_ATTEMPT)) && (com.android.cts.deviceandprofileowner.vpn.VpnTestHelper.isNetworkVpn(mContext)); ++i) {java.lang.Thread.sleep(1000); } assertFalse(com.android.cts.deviceandprofileowner.vpn.VpnTestHelper.isNetworkVpn(mContext)); try { com.android.cts.deviceandprofileowner.vpn.VpnTestHelper.tryPosixConnect(com.android.cts.deviceandprofileowner.TEST_ADDRESS); fail("tryPosixConnect doesn't throw Exception during network lockdown"); } catch (android.system.ErrnoException e) { assertTrue((((e.errno) == (android.system.OsConstants.ENETUNREACH)) || ((e.errno) == (android.system.OsConstants.EACCES)))); } }
public void waitForGc(int numberOfExpectedFinalizations) { if (numberOfExpectedFinalizations > (mList.size())) { throw newjava.lang.IllegalArgumentException(("Expected condition will never be met")); } do {java.lang.System.runFinalization();java.lang.Runtime.getRuntime().gc(); try {java.lang.Thread.sleep(10); } catch (java.lang.Exception e) { } } while (isLive(numberOfExpectedFinalizations)); try { while ((mQueue.poll())!= null); } catch (java.lang.Exception e) { } mList.clear(); }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.os.UserHandle userHandle = intent.getParcelableExtra(com.android.cts.deviceowner.EXTRA_USER_HANDLE); android.util.Log.d(com.android.cts.deviceowner.CreateAndManageUserTest.TAG, ((("Receiver receiver received " + intent) + " with userHandle ") + userHandle)); mQueue.add(userHandle); }
public void deleteProfile(java.lang.String cardId,java.lang.String iccid, @android.annotation.CallbackExecutorjava.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().deleteProfile(mContext.getOpPackageName(), cardId, iccid, new com.android.internal.telephony.euicc.IDeleteProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling deleteProfile", e); throw e.rethrowFromSystemServer(); } }
public void disableProfile(java.lang.String cardId,java.lang.String iccid, boolean refresh, @android.annotation.CallbackExecutorjava.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().disableProfile(mContext.getOpPackageName(), cardId, iccid, refresh, new com.android.internal.telephony.euicc.IDisableProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling disableProfile", e); throw e.rethrowFromSystemServer(); } }
public void requestRulesAuthTable(java.lang.String cardId, @android.annotation.CallbackExecutorjava.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccRulesAuthTable> callback) { try { getIEuiccCardController().getRulesAuthTable(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetRulesAuthTableCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccRulesAuthTable rat) { executor.execute(() -> callback.onComplete(resultCode, rat)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling getRulesAuthTable", e); throw e.rethrowFromSystemServer(); } }
public void requestEuiccInfo2(java.lang.String cardId, @android.annotation.CallbackExecutorjava.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccInfo2(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetEuiccInfo2Callback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] info) { executor.execute(() -> callback.onComplete(resultCode, info)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling getEuiccInfo2", e); throw e.rethrowFromSystemServer(); } }
public void cancelSession(java.lang.String cardId, byte[] transactionId, @android.telephony.euicc.EuiccCardManager.CancelReason int reason, @android.annotation.CallbackExecutorjava.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().cancelSession(mContext.getOpPackageName(), cardId, transactionId, reason, new com.android.internal.telephony.euicc.ICancelSessionCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { executor.execute(() -> callback.onComplete(resultCode, response)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling cancelSession", e); throw e.rethrowFromSystemServer(); } }
public void requestSmdsAddress(java.lang.String cardId, @android.annotation.CallbackExecutorjava.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.String> callback) { try { getIEuiccCardController().getSmdsAddress(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetSmdsAddressCallback.Stub() { @java.lang.Override public void onComplete(int resultCode,java.lang.String address) { executor.execute(() -> callback.onComplete(resultCode, address)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling getSmdsAddress", e); throw e.rethrowFromSystemServer(); } }
public void authenticateServer(java.lang.String cardId,java.lang.String matchingId, byte[] serverSigned1, byte[] serverSignature1, byte[] euiccCiPkIdToBeUsed, byte[] serverCertificate, @android.annotation.CallbackExecutorjava.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().authenticateServer(mContext.getOpPackageName(), cardId, matchingId, serverSigned1, serverSignature1, euiccCiPkIdToBeUsed, serverCertificate, new com.android.internal.telephony.euicc.IAuthenticateServerCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { executor.execute(() -> callback.onComplete(resultCode, response)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling authenticateServer", e); throw e.rethrowFromSystemServer(); } }
public void requestEuiccChallenge(java.lang.String cardId, @android.annotation.CallbackExecutorjava.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccChallenge(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetEuiccChallengeCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] challenge) { executor.execute(() -> callback.onComplete(resultCode, challenge)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling getEuiccChallenge", e); throw e.rethrowFromSystemServer(); } }
public void removeNotificationFromList(java.lang.String cardId, int seqNumber, @android.annotation.CallbackExecutorjava.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().removeNotificationFromList(mContext.getOpPackageName(), cardId, seqNumber, new com.android.internal.telephony.euicc.IRemoveNotificationFromListCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling removeNotificationFromList", e); throw e.rethrowFromSystemServer(); } }
public void resetMemory(java.lang.String cardId, @android.telephony.euicc.EuiccCardManager.ResetOption int options, @android.annotation.CallbackExecutorjava.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().resetMemory(mContext.getOpPackageName(), cardId, options, new com.android.internal.telephony.euicc.IResetMemoryCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling resetMemory", e); throw e.rethrowFromSystemServer(); } }
public void setNickname(java.lang.String cardId,java.lang.String iccid,java.lang.String nickname, @android.annotation.CallbackExecutorjava.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().setNickname(mContext.getOpPackageName(), cardId, iccid, nickname, new com.android.internal.telephony.euicc.ISetNicknameCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling setNickname", e); throw e.rethrowFromSystemServer(); } }
public void requestProfile(java.lang.String cardId,java.lang.String iccid, @android.annotation.CallbackExecutorjava.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<android.service.euicc.EuiccProfileInfo> callback) { try { getIEuiccCardController().getProfile(mContext.getOpPackageName(), cardId, iccid, new com.android.internal.telephony.euicc.IGetProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.service.euicc.EuiccProfileInfo profile) { executor.execute(() -> callback.onComplete(resultCode, profile)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling getProfile", e); throw e.rethrowFromSystemServer(); } }
public void prepareDownload(java.lang.String cardId, @android.annotation.Nullable byte[] hashCc, byte[] smdpSigned2, byte[] smdpSignature2, byte[] smdpCertificate, @android.annotation.CallbackExecutorjava.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().prepareDownload(mContext.getOpPackageName(), cardId, hashCc, smdpSigned2, smdpSignature2, smdpCertificate, new com.android.internal.telephony.euicc.IPrepareDownloadCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { executor.execute(() -> callback.onComplete(resultCode, response)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling prepareDownload", e); throw e.rethrowFromSystemServer(); } }
public void retrieveNotificationList(java.lang.String cardId, @android.telephony.euicc.EuiccNotification.Event int events, @android.annotation.CallbackExecutorjava.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccNotification[]> callback) { try { getIEuiccCardController().retrieveNotificationList(mContext.getOpPackageName(), cardId, events, new com.android.internal.telephony.euicc.IRetrieveNotificationListCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccNotification[] notifications) { executor.execute(() -> callback.onComplete(resultCode, notifications)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling retrieveNotificationList", e); throw e.rethrowFromSystemServer(); } }
public void listNotifications(java.lang.String cardId, @android.telephony.euicc.EuiccNotification.Event int events, @android.annotation.CallbackExecutorjava.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccNotification[]> callback) { try { getIEuiccCardController().listNotifications(mContext.getOpPackageName(), cardId, events, new com.android.internal.telephony.euicc.IListNotificationsCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccNotification[] notifications) { executor.execute(() -> callback.onComplete(resultCode, notifications)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling listNotifications", e); throw e.rethrowFromSystemServer(); } }
public void retrieveNotification(java.lang.String cardId, int seqNumber, @android.annotation.CallbackExecutorjava.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccNotification> callback) { try { getIEuiccCardController().retrieveNotification(mContext.getOpPackageName(), cardId, seqNumber, new com.android.internal.telephony.euicc.IRetrieveNotificationCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccNotification notification) { executor.execute(() -> callback.onComplete(resultCode, notification)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling retrieveNotification", e); throw e.rethrowFromSystemServer(); } }
public void requestDefaultSmdpAddress(java.lang.String cardId, @android.annotation.CallbackExecutorjava.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.String> callback) { try { getIEuiccCardController().getDefaultSmdpAddress(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetDefaultSmdpAddressCallback.Stub() { @java.lang.Override public void onComplete(int resultCode,java.lang.String address) { executor.execute(() -> callback.onComplete(resultCode, address)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling getDefaultSmdpAddress", e); throw e.rethrowFromSystemServer(); } }
public void loadBoundProfilePackage(java.lang.String cardId, byte[] boundProfilePackage, @android.annotation.CallbackExecutorjava.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().loadBoundProfilePackage(mContext.getOpPackageName(), cardId, boundProfilePackage, new com.android.internal.telephony.euicc.ILoadBoundProfilePackageCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { executor.execute(() -> callback.onComplete(resultCode, response)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling loadBoundProfilePackage", e); throw e.rethrowFromSystemServer(); } }
public void requestEuiccInfo1(@com.android.annotations.NonNulljava.lang.String cardId, @android.annotation.CallbackExecutorjava.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccInfo1(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetEuiccInfo1Callback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] info) { executor.execute(() -> callback.onComplete(resultCode, info)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling getEuiccInfo1", e); throw e.rethrowFromSystemServer(); } }
public void requestAllProfiles(java.lang.String cardId, @android.annotation.CallbackExecutorjava.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<android.service.euicc.EuiccProfileInfo[]> callback) { try { getIEuiccCardController().getAllProfiles(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetAllProfilesCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.service.euicc.EuiccProfileInfo[] profiles) { executor.execute(() -> callback.onComplete(resultCode, profiles)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling getAllProfiles", e); throw e.rethrowFromSystemServer(); } }
public void setDefaultSmdpAddress(java.lang.String cardId,java.lang.String defaultSmdpAddress, @android.annotation.CallbackExecutorjava.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().setDefaultSmdpAddress(mContext.getOpPackageName(), cardId, defaultSmdpAddress, new com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling setDefaultSmdpAddress", e); throw e.rethrowFromSystemServer(); } }
public void switchToProfile(java.lang.String cardId,java.lang.String iccid, boolean refresh, @android.annotation.CallbackExecutorjava.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<android.service.euicc.EuiccProfileInfo> callback) { try { getIEuiccCardController().switchToProfile(mContext.getOpPackageName(), cardId, iccid, refresh, new com.android.internal.telephony.euicc.ISwitchToProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.service.euicc.EuiccProfileInfo profile) { executor.execute(() -> callback.onComplete(resultCode, profile)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling switchToProfile", e); throw e.rethrowFromSystemServer(); } }
public final long getConnectElapsedTime() { return mConnectionStartElapsedRealTime; }
private void verifyNoConnectionStateIntent(int timeoutMs, android.bluetooth.BluetoothDevice device, int newState, int prevState) { android.content.Intent intent = waitForNoIntent(timeoutMs, mConnectionStateChangedQueue); org.junit.Assert.assertNull(intent); }
private void generateUnexpectedMessageFromNative(android.bluetooth.BluetoothDevice device, int newConnectionState, int oldConnectionState) { com.android.bluetooth.a2dp.A2dpStackEvent stackEvent = new com.android.bluetooth.a2dp.A2dpStackEvent(A2dpStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED); stackEvent.device = device; stackEvent.valueInt = newConnectionState; mA2dpService.messageFromNative(stackEvent); verifyNoConnectionStateIntent(com.android.bluetooth.a2dp.A2dpServiceTest.TIMEOUT_MS, device, newConnectionState, oldConnectionState); }
void messageFromNative(com.android.bluetooth.a2dp.A2dpStackEvent stackEvent) {java.util.Objects.requireNonNull(stackEvent.device, ("device should never be null, event: " + stackEvent)); synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine sm = null; android.bluetooth.BluetoothDevice device = stackEvent.device; if ((stackEvent.type) == (A2dpStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED)) { switch (stackEvent.valueInt) { case A2dpStackEvent.CONNECTION_STATE_CONNECTED : case A2dpStackEvent.CONNECTION_STATE_CONNECTING : if (!(canConnectToDevice(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ("Cannot connect to " + device) + " : too many connected devices")); return; } sm = getOrCreateStateMachine(device); break; default : sm = mStateMachines.get(device); break; } } if (sm == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ("Cannot process stack event: no state machine: " + stackEvent)); return; } sm.sendMessage(A2dpStateMachine.STACK_EVENT, stackEvent); }
private void processConnectionEvent(int state) { switch (state) { case A2dpStackEvent.CONNECTION_STATE_DISCONNECTED : android.util.Log.i(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("disconnected from " + (mDevice))); transitionTo(mDisconnected); break; case A2dpStackEvent.CONNECTION_STATE_CONNECTED : android.util.Log.w(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("connecting from " + (mDevice))); transitionTo(mConnected); break; case A2dpStackEvent.CONNECTION_STATE_CONNECTING : android.util.Log.w(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("connecting from " + (mDevice))); transitionTo(mConnecting); break; default : android.util.Log.e(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ((("Connection State Device: " + (mDevice)) + " bad state: ") + state)); break; } }
public static android.bluetooth.BluetoothDevice getTestDevice(int id) { org.junit.Assert.assertTrue((id <= 255)); android.bluetooth.BluetoothAdapter bluetoothAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); org.junit.Assert.assertNotNull(bluetoothAdapter); android.bluetooth.BluetoothDevice testDevice = bluetoothAdapter.getRemoteDevice(java.lang.String.format("00:01:02:03:04:%02X", id)); org.junit.Assert.assertNotNull(testDevice); return testDevice; }
public boolean connect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ("connect(" + device)); } if ((getPriority(device)) == (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("connect to " + device) + " : PRIORITY_OFF")); return false; } if (!(android.bluetooth.BluetoothUuid.isUuidPresent(mAdapterService.getRemoteUuids(device), BluetoothUuid.AudioSink))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("connect to " + device) + " : Remote does not have A2DP Sink UUID")); return false; } synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine smConnect = getOrCreateStateMachine(device); if (smConnect == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("connect to " + device) + " : no state machine")); return false; } smConnect.sendMessage(A2dpStateMachine.CONNECT); return true; } }
publicjava.util.List<java.lang.String> lookupCountryCodeForZoneId(java.lang.String zoneId) {java.util.List<java.lang.String> isoCodes = newjava.util.ArrayList<>(2); for (libcore.util.CountryTimeZones countryTimeZones : countryTimeZonesList) { if (countryTimeZones.getTimeZoneIds().contains(zoneId)) { isoCodes.add(countryTimeZones.getCountryIso()); } } returnjava.util.Collections.unmodifiableList(isoCodes); }
public libcore.util.CountryZonesFinder getCountryZonesLookup() { libcore.util.TimeZoneFinder.CountryZonesLookupExtractor extractor = new libcore.util.TimeZoneFinder.CountryZonesLookupExtractor(); try { processXml(extractor); return extractor.getCountryZonesLookup(); } catch (org.xmlpull.v1.XmlPullParserException |java.io.IOException e) {java.lang.System.logW("Error reading country zones ", e); return null; } }
publicjava.util.List<java.lang.String> getCountryIsoCodes() {java.util.List<java.lang.String> isoCodes = newjava.util.ArrayList(countryTimeZonesList.size()); for (libcore.util.CountryTimeZones countryTimeZones : countryTimeZonesList) { isoCodes.add(countryTimeZones.getCountryIso()); } returnjava.util.Collections.unmodifiableList(isoCodes); }
void assertContainsSuitableStackOnDisplay(java.lang.String msg, int displayId) { assertTrue(msg, mAmState.containsSuitableStackOnDisplay(displayId)); }
public void setUp() throwsjava.lang.Exception { super.setUp(); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerState.ActivityStack assistantStack = mAmWmState.getAmState().getStackById(android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId = 0; removeStacks(android.server.cts.ASSISTANT_STACK_ID); disableAssistant(); }
public void testAssistantStackZOrder() throwsjava.lang.Exception { if (((!(supportsPip())) || (!(supportsSplitScreenMultiWindow()))) || (!(assistantRunsOnPrimaryDisplay()))) return; launchActivity(android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_ENTER_PIP, "true"); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.PINNED_STACK_ID); mAmWmState.assertContainsStack("Must contain pinned stack.", android.server.cts.PINNED_STACK_ID); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsSuitableStackOnDisplay("Must contain fullscreen stack.", android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId); mAmWmState.assertContainsStack("Must contain docked stack.", android.server.cts.DOCKED_STACK_ID); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_FROM_SESSION); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); assertAssistantStackExists(); mAmWmState.assertFrontStack("This stack should be on top.", android.server.cts.PINNED_STACK_ID); mAmWmState.assertFocusedStack("This stack should be focused.", android.server.cts.ASSISTANT_STACK_ID); disableAssistant(); }
public void testAssistantStackFinishToPreviousApp() throwsjava.lang.Exception { launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_FINISH_SELF, "true"); disableAssistant(); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.waitForActivityState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerState.STATE_RESUMED); mAmWmState.assertFocusedActivity("This should be resumed", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); mAmWmState.assertSuitableStackContainsActivity("This should go on a suitable fullscreen-type stack.", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); }
void assertSuitableStackContainsActivity(java.lang.String msg,java.lang.String activityName) throwsjava.lang.Exception { final int stackId = mAmState.getTaskByActivityName(activityName).mStackId; assertTrue(mAmState.isSuitableStack(stackId)); assertFrontStack(msg, stackId); assertFocusedStack(msg, stackId); }
public void testAssistantStackLaunchNewTaskWithDockedStack() throwsjava.lang.Exception { if ((!(supportsSplitScreenMultiWindow())) || (!(assistantRunsOnPrimaryDisplay()))) return; launchActivity(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsStack("Must contain fullscreen stack.", android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId); mAmWmState.assertContainsStack("Must contain docked stack.", android.server.cts.DOCKED_STACK_ID); enableAssistant(); assertAssistantStackCanLaunchAndReturnFromNewTask(); disableAssistant(); }
private void assertAssistantStackCanLaunchAndReturnFromNewTask() throwsjava.lang.Exception { enableAssistant(); launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK, android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_LAUNCH_NEW_TASK, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_ASSISTANT_DISPLAY_ID,java.lang.Integer.toString(android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId)); disableAssistant(); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertFocusedActivity("should be resumed", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); mAmWmState.assertSuitableStackContainsActivity("should go on a suitable fullscreen-type stack.", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); executeShellCommand(("pm broadcast -a " + (android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY_ACTION_FINISH_SELF))); mAmWmState.waitForFocusedStack(mDevice, android.server.cts.ASSISTANT_STACK_ID); mAmWmState.assertFrontStack("front stack should be on top.", android.server.cts.ASSISTANT_STACK_ID); mAmWmState.assertFocusedStack("focused stack should be focused.", android.server.cts.ASSISTANT_STACK_ID); }
boolean doBind() { android.content.Intent intent = new android.content.Intent(android.bluetooth.IBluetoothHearingAid.class.getName()); intent.setComponent(mComponent); if ((mConnection) == null) { android.util.Log.e(android.bluetooth.BluetoothHearingAid.TAG, "Connection is null"); return false; } if ((mConnection.getState())!= (android.bluetooth.BluetoothHearingAid.STATE_CONNECTED)) { android.util.Log.e(android.bluetooth.BluetoothHearingAid.TAG, "Connection is not yet ready"); return false; } return true; }
public int getDrawableResource(android.bluetooth.BluetoothClass btClass) { return R.drawable.ic_bt_headphones_a2dp; }
public boolean connect(android.bluetooth.BluetoothDevice device) { if ((mService) == null) return false;java.util.List<android.bluetooth.BluetoothDevice> sinks = getConnectedDevices(); if (sinks!= null) { for (android.bluetooth.BluetoothDevice sink : sinks) { if (sink.equals(device)) { android.util.Log.w(com.android.settingslib.bluetooth.HearingAidProfile.TAG, (("Connecting to device " + device) + " : disconnect skipped")); continue; } mService.disconnect(sink); } } return mService.connect(device); }
@java.lang.Override public android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int userId) { enforceAccessPermission();java.util.HashMap<android.net.Network, android.net.NetworkCapabilities> result = newjava.util.HashMap<android.net.Network, android.net.NetworkCapabilities>(); com.android.server.connectivity.NetworkAgentInfo nai = getDefaultNetwork(); android.net.NetworkCapabilities nc = getNetworkCapabilitiesInternal(nai); if (nc!= null) { result.put(nai.network, nc); } synchronized(mVpns) { if (!(mLockdownEnabled)) { com.android.server.connectivity.Vpn vpn = mVpns.get(userId); if (vpn!= null) { android.net.Network[] networks = vpn.getUnderlyingNetworks(); if (networks!= null) { for (android.net.Network network : networks) { nai = getNetworkAgentInfoForNetwork(network); nc = getNetworkCapabilitiesInternal(nai); if (nc!= null) { nc.setUids(null); result.put(network, nc); } } } } } } android.net.NetworkCapabilities[] out = new android.net.NetworkCapabilities[result.size()]; out = result.values().toArray(out); return out; }
@java.lang.Override public void onAvailable(android.net.Network network, android.net.NetworkCapabilities networkCapabilities, android.net.LinkProperties linkProperties) { setLastCallback(com.android.server.ConnectivityServiceTest.CallbackState.AVAILABLE, network, networkCapabilities); super.onAvailable(network, networkCapabilities, linkProperties); }
private static void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkRequest(nri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType!= (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.putParcelable(bundle, networkAgent.network); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_LOSING : { msg.arg1 = arg1; break; } case android.net.ConnectivityManager.CALLBACK_CAP_CHANGED : { final android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkAgent.networkCapabilities); nc.setUids(null); com.android.server.ConnectivityService.putParcelable(bundle, nc); break; } case android.net.ConnectivityManager.CALLBACK_IP_CHANGED : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } } msg.what = notificationType; msg.setData(bundle); try { if (com.android.server.ConnectivityService.VDBG) {java.lang.String notification = android.net.ConnectivityManager.getCallbackName(notificationType); com.android.server.ConnectivityService.log(((("Callback notification '" + notification) + " for ") + (nri.request))); } nri.messenger.send(msg); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge(("Caught trying to send a callback msg for " + (nri.request))); } }
private static void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkRequest(nri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType!= (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.putParcelable(bundle, networkAgent.network); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_AVAILABLE : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkCapabilities(networkAgent.networkCapabilities)); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } case android.net.ConnectivityManager.CALLBACK_LOSING : { msg.arg1 = arg1; break; } case android.net.ConnectivityManager.CALLBACK_CAP_CHANGED : { final android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkAgent.networkCapabilities); nc.setUids(null); com.android.server.ConnectivityService.putParcelable(bundle, nc); break; } case android.net.ConnectivityManager.CALLBACK_IP_CHANGED : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } } msg.what = notificationType; msg.setData(bundle); try { if (com.android.server.ConnectivityService.VDBG) {java.lang.String notification = android.net.ConnectivityManager.getCallbackName(notificationType); com.android.server.ConnectivityService.log(((("Callback notification " + notification) + " for ") + (nri.request))); } nri.messenger.sendRemoteException(msg); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.logRemoteException(e
@org.junit.Test public void testPackageSizeWithPartialPackageLite() throws android.content.pm.PackageParser.PackageParserException,java.io.IOException {java.io.File base = copyApkToToTmpDir("install_split_base", R.raw.install_split_base);java.io.File dm = createDexMetadataFile("install_split_base.apk"); try (java.io.FileInputStream is = newjava.io.FileInputStream(base)) { android.content.pm.PackageParser.ApkLite baseApk = android.content.pm.PackageParser.parseApkLite(is.getFD(), base.getAbsolutePath(), 0); android.content.pm.PackageParser.PackageLite pkgLite = new android.content.pm.PackageParser.PackageLite(null, baseApk, null, null, null, null, null, null); org.junit.Assert.assertEquals(dm.length(), android.content.pm.dex.DexMetadataHelper.getPackageDexMetadataSize(pkgLite)); } }
public void addNetworkRegistrationState(android.telephony.NetworkRegistrationState regStates) { if (regStates == null) return; synchronized(mNetworkRegistrationStates) { for (int i = 0; i < (mNetworkRegistrationStates.size()); i++) { android.telephony.NetworkRegistrationState curRegStates = mNetworkRegistrationStates.get(i); if (((curRegStates.getTransportType()) == (regStates.getTransportType())) && ((curRegStates.getDomain()) == (regStates.getDomain()))) { mNetworkRegistrationStates.remove(i); break; } } mNetworkRegistrationStates.add(regStates); } }
private void testExplicitPositionMatchParent() { doLayoutParamTest((android.view.WindowManager.LayoutParams params) -> { params.width = WindowManager.LayoutParams.MATCH_PARENT; params.height = WindowManager.LayoutParams.MATCH_PARENT; params.x = (mOutsets.left) - (mOutsets.right); params.y = (mOutsets.bottom) - (mOutsets.top); }); }
protected void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); android.view.View content = new android.view.View(this); setContentView(content); content.setOnApplyWindowInsetsListener(this); }
private void testExplicitPositionMatchParentNoLimits() { doLayoutParamTest((android.view.WindowManager.LayoutParams params) -> { params.width = WindowManager.LayoutParams.MATCH_PARENT; params.height = WindowManager.LayoutParams.MATCH_PARENT; params.gravity = (android.view.Gravity.LEFT) | (android.view.Gravity.TOP); params.flags |= WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS; params.width = (mOutsets.left) - (mOutsets.right); params.height = (mOutsets.bottom) - (mOutsets.top); }); }
@java.lang.Override protected void cleanup() { com.android.bluetooth.pan.PanService.setPanService(null); if (mNativeAvailable) { cleanupNative(); mNativeAvailable = false; } if ((mPanDevices)!= null) { for (android.bluetooth.BluetoothDevice device : mPanDevices.keySet()) { com.android.bluetooth.pan.PanService.BluetoothPanDevice panDevice = mPanDevices.get(device); android.util.Log.d(com.android.bluetooth.pan.PanService.TAG, ((("cleanupPanDevice " + panDevice) + " device address : ") + device)); if ((panDevice!= null) && ((panDevice.mState)!= (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { handlePanDeviceStateChange(device, mPanIfName, BluetoothProfile.STATE_DISCONNECTED, panDevice.mLocalRole, panDevice.mRemoteRole); break; } } mPanDevices.clear(); } }
staticjava.text.NumberFormat getInstance(java.util.Locale desiredLocale, int choice) {java.lang.String[] numberPatterns = newjava.lang.String[4]; libcore.icu.LocaleData data = libcore.icu.LocaleData.get(desiredLocale); numberPatterns[java.text.NumberFormat.NUMBERSTYLE] = data.numberPattern; numberPatterns[java.text.NumberFormat.CURRENCYSTYLE] = data.currencyPattern; numberPatterns[java.text.NumberFormat.PERCENTSTYLE] = data.percentPattern; numberPatterns[java.text.NumberFormat.INTEGERSTYLE] = data.integerPattern;java.text.DecimalFormatSymbols symbols =java.text.DecimalFormatSymbols.getInstance(desiredLocale); int entry = (choice == (java.text.NumberFormat.INTEGERSTYLE))?java.text.NumberFormat.NUMBERSTYLE : choice;java.text.DecimalFormat numberFormat = newjava.text.DecimalFormat(numberPatterns[entry], symbols); if (choice == (java.text.NumberFormat.INTEGERSTYLE)) { numberFormat.setMaximumFractionDigits(0); numberFormat.setDecimalSeparatorAlwaysShown(false); numberFormat.setParseIntegerOnly(true); } else if (choice == (java.text.NumberFormat.CURRENCYSTYLE)) { numberFormat.adjustForCurrencyDefaultFractionDigits(); } return numberFormat; }
@java.lang.Override public boolean setPriority(android.bluetooth.BluetoothDevice device, int priority) { com.android.bluetooth.map.BluetoothMapService service = getService(); if (service == null) { return false; } service.setPriority(device, priority); return true; }
@java.lang.Override protected boolean start() { if (com.android.bluetooth.map.BluetoothMapService.DEBUG) { android.util.Log.d(com.android.bluetooth.map.BluetoothMapService.TAG, "start()"); } if (mServiceStarted) { android.util.Log.w(com.android.bluetooth.map.BluetoothMapService.TAG, "Service already started, ignoring"); return false; } android.os.HandlerThread thread = new android.os.HandlerThread("BluetoothMapHandler"); thread.start(); android.os.Looper looper = thread.getLooper(); mSessionStatusHandler = new com.android.bluetooth.map.BluetoothMapService.MapServiceMessageHandler(looper); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY); filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED); filter.addAction(BluetoothDevice.ACTION_SDP_RECORD); filter.addAction(com.android.bluetooth.map.BluetoothMapService.ACTION_SHOW_MAPS_SETTINGS); filter.addAction(com.android.bluetooth.map.BluetoothMapService.USER_CONFIRM_TIMEOUT_ACTION); android.content.IntentFilter filterMessageSent = new android.content.IntentFilter(); filterMessageSent.addDataType("message/*"); }
private synchronized void closeService() { if (com.android.bluetooth.map.BluetoothMapService.DEBUG) { android.util.Log.d(com.android.bluetooth.map.BluetoothMapService.TAG, "closeService in"); } if ((mBluetoothMnsObexClient)!= null) { mBluetoothMnsObexClient.shutdown(); mBluetoothMnsObexClient = null; } if ((mMasInstances.size()) > 0) { for (int i = 0, c = mMasInstances.size(); i < c; i++) { mMasInstances.valueAt(i).shutdown(); } mMasInstances.clear(); } mIsWaitingAuthorization = false; mPermission = android.bluetooth.BluetoothDevice.ACCESS_UNKNOWN; setState(BluetoothMap.STATE_DISCONNECTED); if ((mWakeLock)!= null) { mWakeLock.release(); if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.map.BluetoothMapService.TAG, "Release Wake Lock"); } mWakeLock = null; } com.android.bluetooth.map.BluetoothMapService.sRemoteDevice = null; if ((mSessionStatusHandler) == null) { return; } mSessionStatusHandler.removeCallbacksAndMessages(null); android.os.Looper looper = mSessionStatusHandler.getLooper(); if (looper!= null) { looper.quit(); if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.i(com.android.bluetooth.map.BluetoothMapService.TAG, looper); } } mSessionStatusHandler = null; if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.map.BluetoothMapService.TAG, "CloseService out"); } }
void setPriority(android.bluetooth.BluetoothDevice device, int priority) { Settings.Global.putInt(getContentResolver(), Settings.Global.getBluetoothMapPriorityKey(device.getAddress()), priority); if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.map.BluetoothMapService.TAG, (("Priority priority " + device) + " = ") + priority)); } }
@java.lang.Override public void onClick() { boolean tracingOn = com.android.traceur.AtraceUtils.isTracingOn(); android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(this); prefs.edit().putBoolean(getString(R.string.pref_key_tracing_on), (!tracingOn)).apply(); if (tracingOn) { android.widget.Toast.makeText(getApplicationContext(), getString(R.string.stopping_trace), Toast.LENGTH_SHORT).show(); com.android.traceur.AtraceUtils.atraceDumpAndSendInBackground(this); } else { android.widget.Toast.makeText(getApplicationContext(), getString(R.string.starting_trace), Toast.LENGTH_SHORT).show(); } com.android.traceur.Receiver.updateTracing(this, true); com.android.traceur.QsService.requestListeningState(this); update(); }
@java.lang.Override public boolean onPreferenceClick(android.support.v7.preference.Preference preference) { com.android.traceur.AtraceUtils.atraceDumpAndSendInBackground(getContext()); return true; }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) { com.android.traceur.Receiver.updateTracing(context, false); com.android.traceur.QsService.requestListeningState(context); } else if (com.android.traceur.Receiver.FORCE_UPDATE_ACTION.equals(intent.getAction())) { com.android.traceur.Receiver.updateTracing(context, true); } else if (com.android.traceur.Receiver.DUMP_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); if (com.android.traceur.AtraceUtils.isTracingOn()) { com.android.traceur.AtraceUtils.atraceDumpAndSendInBackground(context); } else { context.startActivity(new android.content.Intent(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } } else if (com.android.traceur.Receiver.OPEN_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); context.startActivity(new android.content.Intent(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } }
public static void atraceDumpAndSendInBackground(final android.content.Context context) { new android.os.AsyncTask<java.lang.Void,java.lang.Void,java.lang.Void>() { @java.lang.Override protectedjava.lang.Void doInBackground(java.lang.Void... params) {java.lang.String format = "yyyy-MM-dd-HH-mm-ss";java.lang.String now = newjava.text.SimpleDateFormat(format,java.util.Locale.US).format(newjava.util.Date());java.io.File file = newjava.io.File(com.android.traceur.AtraceUtils.TRACE_DIRECTORY,java.lang.String.format("trace-%s-%s-%s.ctrace", Build.BOARD, Build.ID, now)); com.android.traceur.FileSender.postCaptureNotification(context, file); com.android.traceur.AtraceUtils.atraceDump(file); com.android.traceur.FileSender.postNotification(context, file); return null; } }.execute(); }
@java.lang.Override protected boolean stop() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "stop()"); } mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.SHUTDOWN).sendToTarget(); mHandlerThread.quitSafely(); if ((mContactChangeObserver) == null) { android.util.Log.i(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Cannot unregister when receiver it is not registered"); return true; } unregisterReceiver(mPbapReceiver); getContentResolver().unregisterContentObserver(mContactChangeObserver); mContactChangeObserver = null; return true; }
@android.support.annotation.VisibleForTesting void checkOrGetPhonebookPermission(com.android.bluetooth.pbap.PbapStateMachine stateMachine) { android.bluetooth.BluetoothDevice device = stateMachine.getRemoteDevice(); int permission = device.getPhonebookAccessPermission(); if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("permission = " + permission)); } if (permission == (android.bluetooth.BluetoothDevice.ACCESS_ALLOWED)) { stateMachine.sendMessage(PbapStateMachine.AUTHORIZED); } else if (permission == (android.bluetooth.BluetoothDevice.ACCESS_REJECTED)) { stateMachine.sendMessage(PbapStateMachine.REJECTED); } else { android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_CONNECTION_ACCESS_REQUEST); intent.setClassName(com.android.bluetooth.pbap.BluetoothPbapService.ACCESS_AUTHORITY_PACKAGE, com.android.bluetooth.pbap.BluetoothPbapService.ACCESS_AUTHORITY_CLASS); intent.putExtra(BluetoothDevice.EXTRA_ACCESS_REQUEST_TYPE, BluetoothDevice.REQUEST_TYPE_PHONEBOOK_ACCESS); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.putExtra(BluetoothDevice.EXTRA_PACKAGE_NAME, this.getPackageName()); this.sendOrderedBroadcast(intent, com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM); if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("request for authorization for connection from: " + device)); } android.os.Message msg = mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.USER_TIMEOUT, stateMachine); mSessionStatusHandler.sendMessageDelayed(msg, com.android.bluetooth.pbap.BluetoothPbapService.USER_TIMEOUT_VALUE_VALUE_VALUE); } }
public boolean isVideoTelephonyAvailable(int subId) { try { return getITelephony().isVideoTelephonyAvailable(subId); } catch (android.os.RemoteException ex) { return false; } catch (java.lang.NullPointerException ex) { return false; } }
public boolean isWifiCallingAvailable() { return isWifiCallingAvailable(SubscriptionManager.DEFAULT_SUBSCRIPTION_ID); }
public boolean isWifiCallingAvailable(int subId) { try { return getITelephony().isWifiCallingAvailable(subId); } catch (android.os.RemoteException ex) { return false; } catch (java.lang.NullPointerException ex) { return false; } }
public boolean isVolteAvailable() { return isVolteAvailable(SubscriptionManager.DEFAULT_SUBSCRIPTION_ID); }
public boolean isImsRegistered() { return isImsRegistered(SubscriptionManager.DEFAULT_SUBSCRIPTION_ID); }
public boolean isVolteAvailable(int subId) { try { return getITelephony().isVolteAvailable(subId); } catch (android.os.RemoteException |java.lang.NullPointerException ex) { return false; } }
public boolean isVideoTelephonyAvailable() { return isVideoTelephonyAvailable(SubscriptionManager.DEFAULT_SUBSCRIPTION_ID); }
@android.telephony.ims.stub.ImsRegistrationImplBase.ImsRegistrationTech public int getImsRegTechnologyForMmTel(int subId) { try { return getITelephony().getImsRegTechnologyForMmTel(subId); } catch (android.os.RemoteException ex) { return android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_NONE; } }
@java.lang.Override public void onCallStateChanged(int state,java.lang.String incomingNumber) { if (com.android.phone.MobileNetworkSettings.MobileNetworkFragment.DBG) com.android.phone.MobileNetworkSettings.MobileNetworkFragment.log(("onCallStateChanged state=" + state)); boolean enabled = (mTelephonyManager.getCallState()) == (android.telephony.TelephonyManager.CALL_STATE_IDLE)); android.preference.Preference pref = getPreferenceScreen().findPreference(com.android.phone.MobileNetworkSettings.MobileNetworkFragment.BUTTON_4G_LTE_KEY); if (pref!= null) pref.setEnabled((enabled && (hasActiveSubscriptions()))); updateVideoCallState(); }
private void stopService() throwsjava.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.a2dp.A2dpService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(stopIntent); org.mockito.ArgumentCaptor<com.android.bluetooth.a2dp.A2dpService> argumentCaptor = org.mockito.ArgumentCaptor.forClass(com.android.bluetooth.a2dp.A2dpService.class); verify(mAdapterService, timeout(com.android.bluetooth.a2dp.A2dpServiceTest.TIMEOUT_MS)).onProfileServiceStateChanged(argumentCaptor.capture(), eq(BluetoothAdapter.STATE_ON)); org.junit.Assert.assertEquals(argumentCaptor.getValue().getClass().getName(), com.android.bluetooth.a2dp.A2dpService.class.getName()); org.junit.Assert.assertEquals(argumentCaptor.getValue(), mA2dpService); mA2dpService = com.android.bluetooth.a2dp.A2dpService.getA2dpService(); org.junit.Assert.assertNull(mA2dpService); }
private void startService() throwsjava.util.concurrent.TimeoutException { android.content.Intent startIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.a2dp.A2dpService.class); startIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); startIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_ON); mServiceRule.startService(startIntent); org.mockito.ArgumentCaptor<com.android.bluetooth.a2dp.A2dpService> argumentCaptor = org.mockito.ArgumentCaptor.forClass(com.android.bluetooth.a2dp.A2dpService.class); verify(mAdapterService, timeout(com.android.bluetooth.a2dp.A2dpServiceTest.TIMEOUT_MS)).onProfileServiceStateChanged(argumentCaptor.capture(), eq(BluetoothAdapter.STATE_ON)); mA2dpService = com.android.bluetooth.a2dp.A2dpService.getA2dpService(); org.junit.Assert.assertNotNull(mA2dpService); org.junit.Assert.assertEquals(argumentCaptor.getValue(), mA2dpService); }
@org.junit.After public void tearDown() throwsjava.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.hfp.HeadsetService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(stopIntent); org.mockito.ArgumentCaptor<com.android.bluetooth.hfp.HeadsetService> argument = org.mockito.ArgumentCaptor.forClass(com.android.bluetooth.hfp.HeadsetService.class); verify(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.sAdapterService, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(argument.capture(), eq(BluetoothAdapter.STATE_OFF)); org.junit.Assert.assertEquals(argument.getValue(), mHeadsetService); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); reset(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.sObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.sAdapterService); mCurrentDevice = null; }
@org.junit.Test public void testRepeatedEnableDisableSingly() throwsjava.util.concurrent.TimeoutException { for (java.lang.Class profile : mProfiles) { setProfileState(profile, BluetoothAdapter.STATE_ON); org.mockito.ArgumentCaptor<com.android.bluetooth.btservice.ProfileService> start = org.mockito.ArgumentCaptor.forClass(com.android.bluetooth.btservice.ProfileService.class); verify(mMockAdapterService, timeout(com.android.bluetooth.btservice.ProfileServiceTest.PROFILE_START_MILLIS).times((i + 1))).onProfileServiceStateChanged(start.capture(), eq(BluetoothAdapter.STATE_ON)); setProfileState(profile, BluetoothAdapter.STATE_OFF); org.mockito.ArgumentCaptor<com.android.bluetooth.btservice.ProfileService> stop = org.mockito.ArgumentCaptor.forClass(com.android.bluetooth.btservice.ProfileService.class); verify(mMockAdapterService, timeout(com.android.bluetooth.btservice.ProfileServiceTest.PROFILE_START_MILLIS).times((2 * (i + 1)))).onProfileServiceStateChanged(stop.capture(), eq(BluetoothAdapter.STATE_OFF)); org.junit.Assert.assertEquals(start.getValue(), stop.getValue()); } }
@org.junit.After public void tearDown() throwsjava.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.hfp.HeadsetService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(stopIntent); org.mockito.ArgumentCaptor<com.android.bluetooth.hfp.HeadsetService> argument = org.mockito.ArgumentCaptor.forClass(com.android.bluetooth.hfp.HeadsetService.class); verify(com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService, timeout(com.android.bluetooth.hfp.HeadsetServiceTest.ASYNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(argument.capture(), eq(BluetoothAdapter.STATE_OFF)); org.junit.Assert.assertEquals(argument.getValue(), mHeadsetService); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); reset(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService); mStateMachines.clear(); mCurrentDevice = null; }
public void removeProfile(com.android.bluetooth.btservice.ProfileService profile) { android.os.Message m = mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_STATE_CHANGED); m.obj = profile; m.arg1 = com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_UNREGISTERED; mHandler.sendMessage(m); }
public void addProfile(com.android.bluetooth.btservice.ProfileService profile) { android.os.Message m = mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_STATE_CHANGED); m.obj = profile; m.arg1 = com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_REGISTERED; mHandler.sendMessage(m); }
void stopProfileServices() {java.lang.Class[] supportedProfileServices = com.android.bluetooth.btservice.Config.getSupportedProfiles(); if ((mRunningProfiles.size()) > 0) { setAllProfileServiceStates(supportedProfileServices, BluetoothAdapter.STATE_OFF); } debugLog("stopProfileServices() - No profiles services to stop or already stopped."); }
public void onProfileServiceStateChanged(android.bluetooth.btservice.ProfileService profile, int state) { if ((state!= (android.bluetooth.BluetoothAdapter.STATE_ON)) && (state!= (android.bluetooth.BluetoothAdapter.STATE_OFF))) { android.util.Log.e(com.android.bluetooth.btservice.AdapterService.TAG, ("onProfileServiceStateChanged: Unhandled " + (android.bluetooth.BluetoothAdapter.nameForState(state)))); return; } android.os.Message m = mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_STATE_CHANGED); m.obj = profile; m.arg1 = state; mHandler.sendMessage(m); }
@java.lang.Override protected void dump(java.io.FileDescriptor fd,java.io.PrintWriter writer,java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println("No dump in APP SERVICES, see bluetooth_manager section."); writer.println("--print argument for dumpsys direct from AdapterService."); return; } verboseLog(("--print arguments, check for protobuf output: " + (android.text.TextUtils.join( args)))); if (args[0].startsWith("--proto")) { if (args[0].equals("--proto-bin")) { dumpMetrics(fd); } else if (args[0].equals("--proto-java -bin")) { com.android.bluetooth.btservice.BluetoothProto.BluetoothLog metrics = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); byte[] metricsBytes = android.util.Base64.encode(metrics.toByteArray(), Base64.DEFAULT); android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ("Didn't dump, empty metrics size is " + (metricsBytes.length))); try (java.io.FileOutputStream protoOut = newjava.io.FileOutputStream(fd)) { protoOut.write(metricsBytes); } catch (java.io.IOException e) { errorLog("Failed to write Java protobuf to file descriptor."); } } return; } writer.println("Registered devices:"); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println(((((" " + (device.getAddress())) + " [") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + "] ") + (device.getName()))); }java.lang.StringBuilder sb = newjava.lang.StringBuilder(); for (com.android.bluetooth.btservice.ProfileService profile : mRegisteredProfiles) { profile.dump(sb); } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }
javajava.lang.String registerServerSocket(java.lang.String socketName) { if ((mServerSocket) == null) { int fileDesc; finaljava.lang.String fullSocketName = (com.android.internal.os.ZygoteServer.ANDROID_SOCKET_PREFIX) + socketName; try {java.lang.String env =java.lang.System.getenv(fullSocketName); fileDesc =java.lang.Integer.parseInt(env); } catch (java.lang.RuntimeException ex) { throw newjava.lang.RuntimeException((fullSocketName + " unset or invalid"), ex); } try {java.io.FileDescriptor fd = newjava.io.FileDescriptor(); fd.setInt$(fileDesc); mServerSocket = new android.net.LocalServerSocket(fd); mCloseSocketFd = true; } catch (java.io.IOException ex) { throw newjava.lang.RuntimeException((("Error binding to local socket '" + fileDesc) + "'"), ex); } } }
public static finaljava.lang.Runnable childZygoteInit(int targetSdkVersion,java.lang.String[] argv,java.lang.ClassLoader classLoader) { final com.android.internal.os.RuntimeInit.Arguments args = new com.android.internal.os.RuntimeInit.Arguments(argv); return com.android.internal.os.RuntimeInit.findStaticMain(args.startClass, args.startArgs, classLoader); }
public android.os.ZygoteProcess.ChildZygoteProcess startChildZygote(finaljava.lang.String processClass, finaljava.lang.String niceName, int uid, int gid, int[] gids, int runtimeFlags, int targetSdkVersion,java.lang.String seInfo,java.lang.String abi,java.lang.String instructionSet,java.lang.String invokeWith) { final android.net.LocalSocketAddress serverAddress = new android.net.LocalSocketAddress(((processClass + "/") + (java.util.UUID.randomUUID().toString()))); finaljava.lang.String[] extraArgs = newjava.lang.String[]{ (com.android.internal.os.Zygote.CHILD_ZYGOTE_SOCKET_NAME_ARG) + (serverAddress.getName()) }; android.os.Process.ProcessStartResult result; try { result = startViaZygote(processClass, niceName, uid, gid, gids, runtimeFlags, 0, targetSdkVersion, seInfo, abi, instructionSet, null, invokeWith, true, extraArgs); } catch (android.os.ZygoteStartFailedEx ex) { throw newjava.lang.RuntimeException("Starting child-zygote through Zygote failed", ex); } android.os.ZygoteProcess zp = new android.os.ZygoteProcess(serverAddress, null); return new android.os.ZygoteProcess.ChildZygoteProcess(zp, result); }
void setServerSocket(android.net.LocalServerSocket socket) { if ((mServerSocket)!= null) { throw newjava.lang.IllegalStateException("Server socket already specified"); } mServerSocket = socket; mCloseSocketFd = false; }
@java.lang.Override public vogar.commands.VmCommandBuilder newVmCommandBuilder(vogar.Action action,java.io.File workingDirectory) {java.util.List<java.lang.String> vmCommand = newjava.util.ArrayList<java.lang.String>(); com.google.common.collect.Iterables.addAll(vmCommand, run.invokeWith()); vmCommand.add(run.vmCommand); vogar.commands.VmCommandBuilder vmCommandBuilder = new vogar.commands.VmCommandBuilder(run.log).env("ANDROID_DATA", run.getAndroidDataPath()).workingDirectory(workingDirectory).vmCommand(vmCommand).vmArgs(("-Duser.home=" + (run.deviceUserHome))).maxLength(4096); if ((run.debugPort)!= null) { vmCommandBuilder.vmArgs("-Xcompiler-option", "--debuggable", "-XjdwpProvider:internal", (("-XjdwpOptions:transport=dt_socket,address=" + (run.debugPort)) + ",server=y,suspend=y")); } if ((modeId) == (vogar.ModeId.APP_PROCESS)) { return vmCommandBuilder.vmArgs(action.getUserDir().getPath()).classpathViaProperty(true); } vmCommandBuilder.vmArgs(("-Duser.name=" + (deviceUserNameSupplier.get()))).vmArgs("-Duser.language=en").vmArgs("-Duser.region=US"); if ((!(run.benchmark)) && (run.checkJni)) { vmCommandBuilder.vmArgs("-Xcheck:jni"); } vmCommandBuilder.vmArgs("-Xjnigreflimit:2000"); return vmCommandBuilder; }
public void runInstrument() throwsjava.lang.Exception { com.android.commands.am.Instrument instrument = new com.android.commands.am.Instrument(mAm, mPm);java.lang.String opt; while ((opt = nextOption())!= null) { if (opt.equals("-p")) { instrument.profileFile = nextArgRequired(); } else if (opt.equals("-w")) { instrument.wait = true; } else if (opt.equals("-r")) { instrument.rawMode = true; } else if (opt.equals("-m")) { instrument.proto = true; } else if (opt.equals("-e")) { finaljava.lang.String argKey = nextArgRequired(); finaljava.lang.String argValue = nextArgRequired(); instrument.args.putString(argKey, argValue); } else if ((opt.equals("--no_window_animation")) || (opt.equals("--no-window-animation"))) { instrument.noWindowAnimation = true; } else if (opt.equals("--no-hidden-api-checks")) { instrument.noHiddenApiChecks = true; } else if (opt.equals("--user")) { instrument.userId = parseUserArg(nextArgRequired()); } else if (opt.equals("--abi")) { instrument.abi = nextArgRequired(); } else {java.lang.System.err.println(("Unknown option: " + opt)); return; } } if ((instrument.userId) == (android.os.UserHandle.USER_ALL)) {java.lang.System.err.println("Can't start instrumentation with user 'all'"); return; } instrument.componentNameArg = nextArgRequired(); instrument.run(); }
final com.android.server.am.ProcessRecord addAppLocked(android.content.pm.ApplicationInfo info,java.lang.String customProcess, boolean isolated, boolean noHiddenApiChecks,java.lang.String abiOverride) { com.android.server.am.ProcessRecord app; if (!isolated) { app = getProcessRecordLocked((customProcess!= null? customProcess : info.processName), info.uid, true); } else { app = null; } if (app == null) { app = newProcessRecordLocked(info, customProcess, isolated, 0); updateLruProcessLocked(app, false, null); updateOomAdjLocked(); } try { android.app.AppGlobals.getPackageManager().setPackageStoppedState(info.packageName, false, android.os.UserHandle.getUserId(app.uid)); } catch (android.os.RemoteException e) { } catch (java.lang.IllegalArgumentException e) { android.util.Slog.w(com.android.server.am.ActivityManagerService.TAG, ((("Failed trying to unstop package " + (info.packageName)) + ": ") + e)); } if (((info.flags) & (com.android.server.am.ActivityManagerService.PERSISTENT_MASK)) == (com.android.server.am.ActivityManagerService.PERSISTENT_MASK)) { app.persistent = true; app.maxAdj = ProcessList.PERSISTENT_PROC_ADJ; } if (((app.thread) == null) && ((mPersistentStartingProcesses.indexOf(app)) < 0)) { mPersistentStartingProcesses.add(app); startProcessLocked(app, "added application", (customProcess!= null? customProcess : app.processName), abiOverride, null, null); } return app; }
private final void startProcessLocked(com.android.server.am.ProcessRecord app,java.lang.String hostingType,java.lang.String hostingNameStr) { startProcessLocked(app, hostingType, hostingNameStr, false, null, null, null); }
@java.lang.Override public void handleSetListening(boolean listening) { if ((getAdapter()) == null) return; if (listening) { mController.addCallback(mSignalCallback); } else { mController.removeCallback(mSignalCallback); } }
private void loge(java.lang.String s) { android.telephony.Rlog.e(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, (("[GsmCdmaPhone][" + (getPhoneId())) + "] ") + s)); }
private void loge(java.lang.String s) { android.telephony.Rlog.e(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ((("[ImsPhone][" + (getPhoneId())) + "] ") + s)); }
public void onMMIDone(com.android.internal.telephony.imsphone.ImsPhoneMmiCode mmi) { logd(("onMMIDone: mmi=" + mmi)); if ((mPendingMMIs.remove(mmi)) || (mmi.isUssdRequest())) { android.os.ResultReceiver receiverCallback = mmi.getUssdCallbackReceiver(); if (receiverCallback!= null) { int returnCode = ((mmi.getState()) == (MmiCode.State.COMPLETE))? android.telephony.TelephonyManager.USSD_RETURN_SUCCESS : android.telephony.TelephonyManager.USSD_RETURN_FAILURE; sendUssdResponse(mmi.getDialString(), mmi.getMessage(), returnCode, receiverCallback); } else { logv("onMMIDone: notifyRegistrants"); mMmiCompleteRegistrants.notifyRegistrants(new android.os.AsyncResult(null, mmi, null)); } } }
private void logd(java.lang.String s) { android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ((("[ImsPhone][" + (getPhoneId())) + "] ") + s)); }
private com.android.internal.telephony.CommandException getCommandException(int code,java.lang.String errorString) { logd(((("getCommandException: code=" + code) + " errorString=") + errorString)); com.android.internal.telephony.CommandException.Error error = CommandException.Error.GENERIC_FAILURE; switch (code) { case com.android.ims.ImsReasonInfo.CODE_UT_NOT_SUPPORTED : error = CommandException.Error.REQUEST_NOT_SUPPORTED; break; case com.android.ims.ImsReasonInfo.CODE_UT_CB_PASSWORD_MISMATCH : error = CommandException.Error.PASSWORD_INCORRECT; break; case com.android.ims.ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE : error = CommandException.Error.RADIO_NOT_AVAILABLE; break; case com.android.ims.ImsReasonInfo.CODE_FDN_BLOCKED : error = CommandException.Error.FDN_CHECK_FAILURE; break; } return new com.android.internal.telephony.CommandException(error, errorString); }
public void getCallBarring(java.lang.String facility, android.os.Message onComplete) { if (com.android.internal.telephony.imsphone.ImsPhone.DBG) logd(("getCallBarring facility=" + facility)); android.os.Message resp; resp = obtainMessage(com.android.internal.telephony.imsphone.ImsPhone.EVENT_GET_CALL_BARRING_DONE, onComplete); try { com.android.ims.ImsUtInterface ut = mCT.getUtInterface(); ut.queryCallBarring(getCBTypeFromFacility(facility), resp); } catch (com.android.ims.ImsException e) { sendErrorResponse(onComplete, e); } }
private void logi(java.lang.String s) { android.telephony.Rlog.i(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ((("[ImsPhone][" + (getPhoneId())) + "] ") + s)); }
public void setCallBarring(java.lang.String facility, boolean lockState,java.lang.String password, android.os.Message onComplete) { if (com.android.internal.telephony.imsphone.ImsPhone.DBG) logd(((("setCallBarring: facility=" + facility) + " lockState=") + lockState)); android.os.Message resp; resp = obtainMessage(com.android.internal.telephony.imsphone.ImsPhone.EVENT_SET_CALL_BARRING_DONE, onComplete); int action; if (lockState) { action = com.android.internal.telephony.CommandsInterface.CF_ACTION_ENABLE; } else { action = com.android.internal.telephony.CommandsInterface.CF_ACTION_DISABLE; } try { com.android.ims.ImsUtInterface ut = mCT.getUtInterface(); ut.updateCallBarring(getCBTypeFromFacility(facility), action, resp, null); } catch (com.android.ims.ImsException e) { sendErrorResponse( onComplete, e); } }
@java.lang.Override public boolean handleUssdRequest(java.lang.String ussdRequest, android.os.ResultReceiver wrappedCallback) throws com.android.internal.telephony.CallStateException { if ((mPendingMMIs.size()) > 0) { logi(("handleUssdRequest: queue full: " + (android.telephony.Rlog.pii(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ussdRequest)))); sendUssdResponse(ussdRequest, null, TelephonyManager.USSD_RETURN_FAILURE, wrappedCallback); return true; } try { dialInternal(ussdRequest, VideoProfile.STATE_AUDIO_ONLY, null, wrappedCallback); } catch (com.android.internal.telephony.CallStateException cse) { if (com.android.internal.telephony.imsphone.CS_FALLBACK.equals(cse.getMessage())) { throw cse; } else { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ("Could not execute USSD " + cse)); sendUssdResponse(ussdRequest, null, TelephonyManager.USSD_RETURN_FAILURE, wrappedCallback); } } catch (java.lang.Exception e) { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ("Could not execute USSD " + e)); sendUssdResponse(ussdRequest, null, TelephonyManager.USSD_RETURN_FAILURE, wrappedCallback); return false; } return true; }
private void logv(java.lang.String s) { android.telephony.Rlog.v(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ((("[ImsPhone][" + (getPhoneId())) + "] ") + s)); }
protected void loge(java.lang.String msg) { android.telephony.Rlog.e(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, (("[ImsPhoneCallTracker][" + (mPhone.getPhoneId())) + "] " + msg)); }
@java.lang.Override protected void log(java.lang.String msg) { android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, (("[ImsPhoneCallTracker][" + (mPhone.getPhoneId())) + "] " + msg)); }
private void logd(java.lang.String s) { android.telephony.Rlog.d(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, (("[GsmCdmaPhone][" + (getPhoneId())) + "] ") + s)); }
private void logi(java.lang.String s) { android.telephony.Rlog.i(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, (("[GsmCdmaPhone][" + (getPhoneId())) + "] ") + s)); }
protected void log(java.lang.String s) { android.telephony.Rlog.d(com.android.internal.telephony.ServiceStateTracker.LOG_TAG, ((("[ServiceStateTracker][" + (mPhone.getPhoneId())) + "] ") + s)); }
protected void loge(java.lang.String s) { android.telephony.Rlog.e(com.android.internal.telephony.ServiceStateTracker.LOG_TAG, ((("[ServiceStateTracker][" + (mPhone.getPhoneId())) + "] ") + s)); }
private void updateRoamingState(boolean newRoaming) { if ((mCT.getState()) == (PhoneConstants.State.IDLE)) { if (com.android.internal.telephony.imsphone.ImsPhone.DBG) logd(("updateRoamingState now: " + newRoaming)); mRoaming = newRoaming; com.android.ims.ImsManager.setWfcMode(mContext, com.android.ims.ImsManager.getWfcMode(mContext, newRoaming), newRoaming); } else { if (com.android.internal.telephony.imsphone.ImsPhone.DBG) logd(("updateRoamingState postponed: " + newRoaming)); mCT.registerForVoiceCallEnded(this, com.android.internal.telephony.imsphone.ImsPhone.EVENT_VOICE_CALL_ENDED, null); } }
@java.lang.Override protected void log(java.lang.String msg) { android.telephony.Rlog.d(com.android.internal.telephony.GsmCdmaCallTracker.LOG_TAG, (("[GsmCdmaCallTracker][" + (mPhone.getPhoneId())) + "] " + msg)); }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) { boolean isTracingPrefOn = prefs.getBoolean(context.getString(R.string.pref_key_tracing_on), false); com.android.traceur.Receiver.updateTracing(context, isTracingPrefOn); com.android.traceur.QsService.requestListeningState(context); } else if (com.android.traceur.Receiver.DUMP_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); if (com.android.traceur.AtraceUtils.isTracingOn()) { com.android.traceur.AtraceUtils.atraceDumpAndSend(context); } else { context.startActivity(new android.content.Intent(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } } else if (com.android.traceur.Receiver.OPEN_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); context.startActivity(new android.content.Intent(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } }
public staticjava.lang.String getActiveUnavailableTags(android.content.Context context, android.content.SharedPreferences prefs) {java.util.Set<java.lang.String> tags = prefs.getStringSet(context.getString(R.string.pref_key_tags), com.android.traceur.Receiver.getDefaultTagList());java.lang.StringBuilder sb = newjava.lang.StringBuilder((10 * (tags.size())));java.util.TreeMap<java.lang.String,java.lang.String> available = com.android.traceur.AtraceUtils.atraceListCategories(); for (java.lang.String s : tags) { if (available.containsKey(s)) continue; if ((sb.length()) > 0) { sb.append(' '); } sb.append(s); }java.lang.String s = sb.toString(); com.android.traceur.Log.v(com.android.traceur.Receiver.TAG, ("ActiveUnavailableTags: \"" + s) + "\"")); return s; }
public staticjava.lang.String getActiveTags(android.content.Context context, android.content.SharedPreferences prefs, boolean onlyAvailable) {java.util.Set<java.lang.String> tags = prefs.getStringSet(context.getString(R.string.pref_key_tags), com.android.traceur.Receiver.getDefaultTagList());java.lang.StringBuilder sb = newjava.lang.StringBuilder((10 * (tags.size())));java.util.TreeMap<java.lang.String,java.lang.String> available = (onlyAvailable)? com.android.traceur.AtraceUtils.atraceListCategories() : null; for (java.lang.String s : tags) { if (onlyAvailable && (!(available.containsKey(s)))) continue; if ((sb.length()) > 0) { sb.append(' '); } sb.append(s); }java.lang.String s = sb.toString(); com.android.traceur.Log.v(com.android.traceur.Receiver.TAG, (((("getActiveTags(onlyAvailable=" + onlyAvailable) + " = \"") + s) + "\"")); return s; }
public static android.os.ZygoteProcess getProcess() { synchronized(android.webkit.WebViewZygote.sLock) { if ((android.webkit.WebViewZygote.sZygote)!= null) return android.webkit.WebViewZygote.sZygote; android.webkit.WebViewZygote.connectToZygoteIfNeededLocked(); return android.webkit.WebViewZygote.sZygote; } }
public static void onWebViewProviderChanged(android.content.pm.PackageInfo packageInfo,java.lang.String cacheKey) { synchronized(android.webkit.WebViewZygote.sLock) { android.webkit.WebViewZygote.sPackage = packageInfo; android.webkit.WebViewZygote.sPackageCacheKey = cacheKey; if (!(android.webkit.WebViewZygote.sMultiprocessEnabled)) { return; } android.webkit.WebViewZygote.stopZygoteLocked(); } }
@com.android.internal.annotations.GuardedBy("sLock") private static void stopZygoteLocked() { if ((android.webkit.WebViewZygote.sZygote)!= null) { android.webkit.WebViewZygote.sZygote.zygote.close();java.lang.Process.killProcess(android.webkit.WebViewZygote.sZygote.startResult.pid); android.webkit.WebViewZygote.sZygote = null; } }
@com.googlecode.android_scripting.rpc.Rpc(description = "Get private DNS specifier", returns = "DNS hostname set in strict mode") publicjava.lang.String getPrivateDnsSpecifier() { if ((getPrivateDnsMode())!= (ConnectivityConstants.PrivateDnsModeStrict)) return null; return android.provider.Settings.Global.getString(mService.getContentResolver(), android.provider.Settings.Global.PRIVATE_DNS_SPECIFIER); }
public static void clearSavedTraces() {java.lang.String cmd = ("rm " + (com.android.traceur.AtraceUtils.TRACE_DIRECTORY)) + "trace-*.ctrace"; android.util.Log.v(com.android.traceur.AtraceUtils.TAG, ("Clearing trace directory: " + cmd)); try {java.lang.Process rm = com.android.traceur.AtraceUtils.exec(cmd); if ((rm.waitFor())!= 0) { android.util.Log.e(com.android.traceur.AtraceUtils.TAG, ("clearSavedTraces failed with: " + (rm.exitValue()))); } } catch (java.lang.Exception e) { throw newjava.lang.RuntimeException(e); } }
@android.annotation.Nullable public static android.telephony.MbmsDownloadSession create(@android.annotation.NonNull android.content.Context context, int subscriptionId, @android.annotation.NonNulljava.util.concurrent.Executor executor, @android.annotation.NonNull final android.telephony.mbms.MbmsDownloadSessionCallback callback) { if (!(android.telephony.MbmsDownloadSession.sIsInitialized.compareAndSet(false, true))) { throw newjava.lang.IllegalStateException("Must have two active instances"); } android.telephony.MbmsDownloadSession session = new android.telephony.MbmsDownloadSession(context, callback, subscriptionId, executor); final int result = session.bindAndInitialize(); if (result!= (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.MbmsDownloadSession.sIsInitialized.set(false); executor.execute(newjava.lang.Runnable() { @java.lang.Override public void run() { callback.onError(result, null); } }); return null; } return session; }
@android.annotation.Nullable public static android.telephony.MbmsStreamingSession create(@android.annotation.NonNull android.content.Context context, int subscriptionId, @android.annotation.NonNulljava.util.concurrent.Executor executor, @android.annotation.NonNull final android.telephony.mbms.MbmsStreamingSessionCallback callback) { if (!(android.telephony.MbmsStreamingSession.sIsInitialized.compareAndSet(false, true))) { throw newjava.lang.IllegalStateException("Cannot create two instances of MbmsStreamingSession"); } android.telephony.MbmsStreamingSession session = new android.telephony.MbmsStreamingSession(context, callback, subscriptionId, executor); final int result = session.bindAndInitialize(); if (result!= (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.MbmsStreamingSession.sIsInitialized.set(false); executor.execute(newjava.lang.Runnable() { @java.lang.Override public void run() { callback.onError(result, null); } }); return null; } return session; }
public static android.telephony.MbmsDownloadSession create(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull android.util.concurrent.Executor executor, @android.annotation.NonNull android.telephony.mbms.MbmsDownloadSessionCallback callback) { return android.telephony.MbmsDownloadSession.create(context, android.telephony.SubscriptionManager.getDefaultSubscriptionId(), executor, callback); }
public static android.telephony.mbms.DownloadRequest.Builder fromDownloadRequest(android.telephony.mbms.DownloadRequest other) { android.telephony.mbms.DownloadRequest.Builder result = new android.telephony.mbms.DownloadRequest.Builder(other.sourceUri).setServiceId(other.fileServiceId).setSubscriptionId(other.subscriptionId); result.appIntent = other.serializedResultIntentForApp; return result; }
public static android.telephony.MbmsStreamingSession create(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull android.util.concurrent.Executor executor, @android.annotation.NonNull android.telephony.mbms.MbmsStreamingSessionCallback callback) { return android.telephony.MbmsStreamingSession.create(context, android.telephony.SubscriptionManager.getDefaultSubscriptionId(), executor, callback); }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (intent.getAction().equals(CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED)) { if (com.android.internal.telephony.ServiceStateTracker.VDBG) log("EVENT_CARRIER_CONFIG_CHANGED"); sendMessage(obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_CARRIER_CONFIG_CHANGED)); return; } if (!(mPhone.isPhoneTypeGsm())) { loge((("Invalid intent " + intent) + " received on CDMA phone")); return; } if (intent.getAction().equals(Intent.ACTION_LOCALE_CHANGED)) { updateSpnDisplay(); } else if (intent.getAction().equals(com.android.internal.telephony.ServiceStateTracker.ACTION_RADIO_OFF)) { mAlarmSwitch = false; com.android.internal.telephony.dataconnection.DcTracker dcTracker = mPhone.mDcTracker; powerOffRadioSafely(dcTracker); } }
public void addProfile(com.android.bluetooth.btservice.ProfileService profile) { android.os.Message m = mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_REGISTERED, profile); mHandler.sendMessage(m); }
public void removeProfile(com.android.bluetooth.btservice.ProfileService profile) { android.os.Message m = mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_UNREGISTERED, profile); mHandler.sendMessage(m); }
public com.android.documentsui.base.RootInfo getRootOneshot(java.lang.String authority,java.lang.String rootId, boolean forceRefresh) { synchronized(mLock) { com.android.documentsui.base.RootInfo root = (forceRefresh)? null : getRootLocked(authority, rootId); if (root == null) { mRoots.clear(); mRoots.addAll(authority, loadRootsForAuthority(mContext.getContentResolver(), authority, forceRefresh)); root = getRootLocked(authority, rootId); } return root; } }
public boolean isAllowedToUseHiddenApi() { return (isSystemApp()) || (com.android.server.SystemConfig.getInstance().getHiddenApiWhitelistedApps().contains(packageName)); }
public staticjava.lang.invoke.MethodHandle varHandleExactInvoker(java.lang.invoke.VarHandle.AccessMode accessMode,java.lang.invoke.MethodType type) { returnjava.lang.invoke.MethodHandles.varHandleInvoker(accessMode, type); }
public staticjava.lang.invoke.MethodHandle varHandleInvoker(java.lang.invoke.VarHandle.AccessMode accessMode,java.lang.invoke.MethodType type) {java.lang.reflect.Method method; try { method = refc.getDeclaredMethod(accessMode.methodName(),java.lang.Object[].class); } catch (java.lang.NoSuchMethodException e) { throw newjava.lang.IllegalStateException(("No method for AccessMode " + accessMode), e); }java.lang.invoke.MethodType methodType = type.insertParameterTypes(0,java.lang.invoke.VarHandle.class); return newjava.lang.invoke.MethodHandleImpl(method.getArtMethod(), INVOKE_VAR_HANDLE, methodType); }
void toggleMute() { if (mCallsManager.hasEmergencyCall()) { android.telecom.Log.v(this, "send toggleMute for emergency call"); return; } mCallAudioRouteStateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.TOGGLE_MUTE); }
@com.android.internal.annotations.VisibleForTesting public boolean onMediaButton(int type) { if (hasAnyCalls()) { com.android.server.telecom.Call ringingCall = getFirstCallWithState(CallState.RINGING); if ((HeadsetMediaButton.SHORT_PRESS) == type) { if (ringingCall == null) { com.android.server.telecom.Call callToHangup = getFirstCallWithState(CallState.RINGING, CallState.DIALING, CallState.PULLING, CallState.ACTIVE, CallState.ON_HOLD); android.telecom.Log.addEvent(callToHangup, LogUtils.Events.INFO, "Media btn short press - end call."); if (callToHangup!= null) { disconnectCall(callToHangup); return true; } } else { ringingCall.answer(VideoProfile.STATE_AUDIO_ONLY); return true; } } else if ((HeadsetMediaButton.LONG_PRESS) == type) { if (ringingCall!= null) { android.telecom.Log.addEvent(getForegroundCall(), LogUtils.Events.INFO, "Media btn long press - reject"); ringingCall.reject(false, null); } else { android.telecom.Log.addEvent(getForegroundCall(), LogUtils.Events.INFO, "Media btn long press - mute"); mCallAudioManager.toggleMute(); } return true; } } return false; }
privatejava.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> createV3SignerConfig(boolean apkSigningBlockPaddingSupported) throwsjava.security.InvalidKeyException { return createSigningBLockSignerConfigs(apkSigningBlockPaddingSupported, ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V3); }
public com.android.apksig.DefaultApkSignerEngine.SignerConfig.Builder setApkSignerLineage(com.android.apksig.ApkSignerLineage apkSignerLineage) { throw new sun.reflect.generics.reflectiveObjects.NotImplementedException(); }
public com.android.apksig.ApkSigner.Builder setOldSignerConfig(com.android.apksig.ApkSigner.SignerConfig oldSigner) { checkInitializedWithoutEngine(); if (!(mV3SigningEnabled)) { throw newjava.lang.IllegalArgumentException(("An old signer can only be specified when using " + "APK Signature Scheme v3. Please enable that first")); } mOldSignerConfig = oldSigner; return this; }
public com.android.apksig.ApkSigner.SignerConfig build() { return new com.android.apksig.ApkSigner.SignerConfig(mName, mPrivateKey, mCertificates, mMinSdkVersion, mMaxSdkVersion, mApkSignerLineage); }
public com.android.apksig.ApkSigner.Builder setV3SigningEnabled(boolean enabled) { checkInitializedWithoutEngine(); if ((enabled && ((mSignerConfigs)!= null)) && ((mSignerConfigs.size()) > 1)) { throw newjava.lang.IllegalArgumentException(("APK Signature Scheme v3 cannot be used with " + "multiple signers.")); } mV3SigningEnabled = enabled; return this; }
private static byte[] generateAdditionalAttributes(com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig signerConfig) { if ((signerConfig.apkSignerLineage) == null) { return new byte[0]; } throw new sun.reflect.generics.reflectiveObjects.NotImplementedException(); }
public com.android.apksig.ApkSigner build() { return new com.android.apksig.ApkSigner(mSignerConfigs, mOldSignerConfig, mMinSdkVersion, mV1SigningEnabled, mV2SigningEnabled, mV3SigningEnabled, mDebuggableApkPermitted, mOtherSignersSignaturesPreserved, mCreatedBy, mSignerEngine, mInputApkFile, mInputApkDataSource, mOutputApkFile, mOutputApkDataSink, mOutputApkDataSource); }
public com.android.apksig.ApkSignerLineage build() { return new com.android.apksig.ApkSignerLineage(); }
private static com.android.apksig.internal.util.Pair<byte[],java.lang.Integer> generateApkSignatureSchemeV3Block(java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> signerConfigs,java.util.Map<com.android.apksig.internal.apk.ContentDigestAlgorithm, byte[]> contentDigests) throwsjava.security.InvalidKeyException,java.security.NoSuchAlgorithmException,java.security.SignatureException { if ((signerConfigs.size()) > 1) { throw newjava.lang.IllegalArgumentException(("APK Signature Scheme v3 cannot be used with " + "multiple signers")); }java.util.List<byte[]> signerBlocks = newjava.util.ArrayList(signerConfigs.size()); int signerNumber = 0; for (com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig signerConfig : signerConfigs) { signerNumber++; byte[] signerBlock; try { signerBlock = com.android.apksig.internal.apk.v3.V3SchemeSigner.generateSignerBlock(signerConfig, contentDigests); } catch (java.security.InvalidKeyException e) { throw newjava.security.InvalidKeyException((("Signer #" + signerNumber) + " failed"), e); } catch (java.security.SignatureException e) { throw newjava.security.SignatureException((("Signer #" + signerNumber) + " failed"), e); } signerBlocks.add(signerBlock); } return com.android.apksig.internal.util.Pair.of(com.android.apksig.internal.apk.ApkSigningBlockUtils.encodeAsSequenceOfLengthPrefixedElements(new byte[][]{ com.android.apksig.internal.apk.ApkSigningBlockUtils.encodeAsSequenceOfLengthPrefixedElements(signerBlocks) }), com.android.apksig.internal.apk.v3.V3SchemeSigner.APK_SIGNATURE_SCHEME_V3_BLOCK_ID); }
private ApkSigningBlockUtils.SignerConfig createSigningBLockSignerConfig(com.android.apksig.DefaultApkSignerEngine.SignerConfig signerConfig, boolean apkSigningBlockPaddingSupported, int schemeId) throwsjava.security.InvalidKeyException {java.util.List<java.security.cert.X509Certificate> certificates = signerConfig.getCertificates();java.security.PublicKey publicKey = certificates.get(0).getPublicKey(); com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig newSignerConfig = new com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig(); newSignerConfig.privateKey = signerConfig.getPrivateKey(); newSignerConfig.certificates = certificates; newSignerConfig.minSdkVersion = signerConfig.getMinSdkVersion(); newSignerConfig.maxSdkVersion = signerConfig.getMaxSdkVersion(); newSignerConfig.apkSignerLineage = signerConfig.getApkSignerLineage(); switch (schemeId) { case com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V2 : newSignerConfig.signatureAlgorithms = com.android.apksig.internal.apk.v2.V2SchemeSigner.getSuggestedSignatureAlgorithms(publicKey, mMinSdkVersion, apkSigningBlockPaddingSupported); break; case com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V3 : newSignerConfig.signatureAlgorithms = com.android.apksig.internal.apk.v3.V3SchemeSigner.getSuggestedSignatureAlgorithms(publicKey, mMinSdkVersion, apkSigningBlockPaddingSupported); break; default : throw newjava.lang.IllegalArgumentException("Unknown APK Signature Scheme ID requested"); } return newSignerConfig; }
private void checkSigningBlockDoneIfEnabled() { if ((mV2SignaturePending) || (!(mV3SignaturePending))) { return; } if ((mAddSigningBlockRequest) == null) { throw newjava.lang.IllegalStateException("APK Signing BLock not yet generated."); } if (!(mAddSigningBlockRequest.isDone())) { throw newjava.lang.IllegalStateException((("Invalid Signing Block addition of signature (s) requested by " + "outputZipSections() hasn't been fulfilled yet")); } mAddSigningBlockRequest = null; mV2SignaturePending = false; mV3SignaturePending = false; }
public com.android.apksig.DefaultApkSignerEngine.SignerConfig build() { return new com.android.apksig.DefaultApkSignerEngine.SignerConfig(mName, mPrivateKey, mCertificates, mMinSdkVersion, mMaxSdkVersion, mApkSignerLineage); }
privatejava.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> createV2SignerConfigs(boolean apkSigningBlockPaddingSupported) throwsjava.security.InvalidKeyException { if ((mOldSignerConfig)!= null) {java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> signerConfig = newjava.util.ArrayList<>(2); signerConfig.add(createSigningBLockSignerConfig(mOldSignerConfig, apkSigningBlockPaddingSupported, ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V2)); return signerConfig; } else { return createSigningBLockSignerConfigs(apkSigningBlockPaddingSupported, ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V2); } }
privatejava.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> createSigningBLockSignerConfigs(boolean apkSigningBlockPaddingSupported, int schemeId) throwsjava.security.InvalidKeyException {java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> signerConfigs = newjava.util.ArrayList<>(mSignerConfigs.size()); for (int i = 0; i < (mSignerConfigs.size()); i++) { com.android.apksig.DefaultApkSignerEngine.SignerConfig signerConfig = mSignerConfigs.get(i); signerConfigs.add(createSigningBLockSignerConfig(signerConfig, apkSigningBlockPaddingSupported, schemeId)); } return signerConfigs; }
private synchronized void msgGetPlayStatusNative() { android.util.Log.d(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, "msgGetPlayStatusNative"); if ((mA2dpDevice) == null) { android.util.Log.e(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, "MediaBrowser disconnected ignoring."); return; } mAvrcpCtrlSrvc.getPlaybackState(mA2dpDevice, false); }
@java.lang.Override public synchronized void onLoadChildren(finaljava.lang.String parentMediaId, final com.android.bluetooth.a2dpsink.mbs.Result<java.util.List<android.media.browse.MediaBrowser.MediaItem>> result) { if ((mAvrcpCtrlSrvc) == null) { android.util.Log.e(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, "AvrcpCtrlSrvc not yet connected."); result.sendResult(java.util.Collections.emptyList()); return; } if (com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.DBG) android.util.Log.d(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, ("onLoadChildren: parentMediaId=" + parentMediaId)); if (!(mAvrcpCtrlSrvc.getChildren(mA2dpDevice, parentMediaId, 0, 255))) { result.sendResult(java.util.Collections.emptyList()); return; } synchronized(this) { mParentIdToRequestMap.put(parentMediaId, result); } result.detach(); }
private synchronized void msgPassThru(int cmd) { android.util.Log.d(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, ("msgPassThru: " + cmd)); if ((mA2dpDevice) == null) { android.util.Log.e(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, "A2DP disconnected ignoring."); return; } mAvrcpCtrlSrvc.sendPassThroughCmd(mA2dpDevice, cmd, AvrcpControllerService.KEY_STATE_PRESSED); mAvrcpCtrlSrvc.sendPassThroughCmd(mA2dpDevice, cmd, AvrcpControllerService.KEY_STATE_RELEASED); }
private void clearImsUceService() { synchronized(mSyncObj) { try { if ((mImsUceManager)!= null) { mImsUceManager.destroyPresenceService(mStackPresenceServiceHandle); } } catch (android.os.RemoteException e) { logger.warn(" Couldn clean up stack service"); } mImsUceManager = null; mStackService = null; mStackPresService = null; } }
private void updateBluetoothEnableAvdtpDelayReportOptions() { updateSwitchPreference(mBluetoothEnableAvdtpDelayReport, android.os.SystemProperties.getBoolean(com.android.settings.development.DevelopmentSettings.BLUETOOTH_ENABLE_AVDTP_DELAY_REPORTS, false)); }
private void writeBluetoothEnableAvdtpDelayReportOptions() { android.os.SystemProperties.set(com.android.settings.development.DevelopmentSettings.BLUETOOTH_ENABLE_AVDTP_DELAY_REPORTS, (mBluetoothEnableAvdtpDelayReport.isChecked()? "true" : "false")); }
@java.lang.Override public void run() { mCallbackHandler = new android.os.Handler(mLooper, this); while (true) { try { listenToSocket(); } catch (java.lang.Exception e) { loge(("Exception in NativeDaemonConnector: " + e)); android.os.SystemClock.sleep(5000); }java.lang.String shutdownAct = android.os.SystemProperties.get(ShutdownThread.SHUTDOWN_ACTION_PROPERTY, ""); if ((shutdownAct!= null) && ((shutdownAct.length()) > 0)) { break; } } }
@java.lang.Override public void connectionUnavailable() { android.telephony.Rlog.d(com.android.internal.telephony.ImsSmsDispatcher.TAG, "ImsSmsDispatcher.connectionUnavailable"); mIsImsServiceUp = false; }
public void disconnect() { removeMessages(com.android.ims.ImsManager.Connector.EVENT_GET_IMS_SERVICE); synchronized(mLock) { if ((mImsManager)!= null) { mImsManager.removeNotifyStatusChangedCallback(mNotifyStatusChangedCallback); } } notifyNotReady(); }
public void connect() { mRetryCount = 0; sendEmptyMessage(com.android.ims.ImsManager.Connector.EVENT_GET_IMS_SERVICE); }
private void retryGetImsService() { synchronized(mLock) { mImsManager.removeNotifyStatusChangedCallback(mNotifyStatusChangedCallback); mImsManager = null; } com.android.ims.ImsManager.loge("Connector: Retrying getting ImsService..."); removeMessages(com.android.ims.ImsManager.Connector.EVENT_GET_IMS_SERVICE); sendEmptyMessageDelayed(com.android.ims.ImsManager.Connector.EVENT_GET_IMS_SERVICE, mRetryTimeout.get()); }
@java.lang.Override public void connectionReady(com.android.ims.ImsManager manager) throws com.android.ims. ImsException { android.telephony.Rlog.d(com.android.internal.telephony.ImsSmsDispatcher.TAG, "connection ready."); setListeners(); mIsImsServiceUp = true; }
@org.junit.Test public void dialogAsksForPairCodeOnUserEntryVariant() { when(controller.getDialogType()).thenReturn(BluetoothPairingController.USER_ENTRY_DIALOG); when(controller.getDeviceVariantMessageId()).thenReturn(BluetoothPairingController.INVALID_DIALOG_TYPE); when(controller.getDeviceVariantMessageHintId()).thenReturn(BluetoothPairingController.INVALID_DIALOG_TYPE); android.content.Context context = spy(org.robolectric.shadows.ShadowApplication.getInstance().getApplicationContext()); android.view.inputmethod.InputMethodManager imm = mock(android.view.inputmethod.InputMethodManager.class); doReturn(imm).when(context).getSystemService(Context.INPUT_METHOD_SERVICE); com.android.settings.bluetooth.BluetoothPairingDialogFragment frag = spy(new com.android.settings.bluetooth.BluetoothPairingDialogFragment()); when(frag.getContext()).thenReturn(context); setupFragment(frag); android.app.AlertDialog alertDialog = frag.getmDialog(); android.view.View view = alertDialog.findViewById(R.id.text); assertThat(view.getVisibility()).isEqualTo(View.VISIBLE); assertThat(view.isFocused()).isTrue(); assertThat(imm.isActive()).isTrue(); verify(imm).showSoftInput(view, InputMethodManager.SHOW_IMPLICIT); }
@org.junit.Test public void testShowBothEstimates_summariesAreBothModified() { doReturn(new android.widget.TextView(mRealContext)).when(mBatteryLayoutPref).findViewById(R.id.summary2); doReturn(new android.widget.TextView(mRealContext)).when(mBatteryLayoutPref).findViewById(R.id.summary1); mFragment.onLongClick(new android.view.View(mRealContext)); android.widget.TextView summary1 = mFragment.mBatteryLayoutPref.findViewById(R.id.summary1); android.widget.TextView summary2 = mFragment.mBatteryLayoutPref.findViewById(R.id.summary2); org.robolectric.Robolectric.flushBackgroundThreadScheduler(); assertThat(summary2.getText().toString()).contains(com.android.settings.fuelgauge.PowerUsageSummaryTest.NEW_ML_EST_SUFFIX); assertThat(summary1.getText().toString()).contains(com.android.settings.fuelgauge.PowerUsageSummaryTest.OLD_EST_SUFFIX); }
@com.android.settings.applications.Ignore("b/73892555") @org.junit.Test public void testCollectPipApps() { android.content.pm.PackageInfo primaryP1 = createPackage("Calculator", true); android.content.pm.PackageInfo primaryP2 = createPackage("Clock", false); android.content.pm.PackageInfo profileP1 = createPackage("Calculator", false); android.content.pm.PackageInfo profileP2 = createPackage("Clock", true); mPrimaryUserPackages.add(primaryP1); mPrimaryUserPackages.add(primaryP2); mProfileUserPackages.add(profileP1); mProfileUserPackages.add(profileP2);java.util.ArrayList<android.util.Pair<android.content.pm.ApplicationInfo,java.lang.Integer>> apps = mFragment.collectPipApps(com.android.settings.applications.PictureInPictureSettingsTest.PRIMARY_USER_ID); assertThat(containsPackages(apps, primaryP1, profileP2)).isTrue(); assertThat(containsPackages(apps, primaryP2, profileP1)).isFalse(); }
void enforceValidConnectionStateTransition() { boolean result = false; if ((this) == (mWaitingForAuth)) { result = (((mPrevState) == null) || ((mPrevState) == (mFinished))) || ((mPrevState) == (mConnected)); } else if ((this) == (mFinished)) { result = (mPrevState) == (mConnected); } else if ((this) == (mConnected)) { result = (mPrevState) == (mFinished); } if (!result) { throw newjava.lang.IllegalStateException(((((("Invalid state transition from " + (mPrevState)) + " to ") + (this)) + " for device ") + (mRemoteDevice))); } }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSendImsCdmaTest() throwsjava.lang.Exception { switchImsSmsFormat(PhoneConstants.PHONE_TYPE_CDMA); mImsSmsDispatcher.sendText("111", "222", com.android.internal.telephony.TAG, null, null, null, null, false, (-1), false, (-1)); verify(mSimulatedCommandsVerifier).sendImsCdmaSms(((byte[]) (any())), eq(0), eq(0), any(android.os.Message.class)); }
@java.lang.Override protected com.android.internal.telephony.gsm.SmsTracker getNewSubmitPduTracker(java.lang.String destinationAddress,java.lang.String scAddress,java.lang.String message, com.android.internal.telephony.SmsHeader smsHeader, int encoding, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean lastPart,java.util.concurrent.atomic.AtomicInteger unsentPartCount,java.util.concurrent.atomic.AtomicBoolean anyPartFailed, android.net.Uri messageUri,java.lang.String fullMessageText, int priority, boolean expectMore, int validityPeriod) { com.android.internal.telephony.gsm.SmsMessage.SubmitPdu pdu = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu(scAddress, destinationAddress, message, (deliveryIntent!= null), com.android.internal.telephony.SmsHeader.toByteArray(smsHeader), encoding, smsHeader.languageTable, smsHeader.languageShiftTable, validityPeriod); if (pdu!= null) {java.util.HashMap map = getSmsTrackerMap(destinationAddress, scAddress, message, pdu); return getSmsTracker(map, sentIntent, deliveryIntent, getFormat(), unsentPartCount, anyPartFailed, messageUri, smsHeader, ( (!lastPart) || expectMore), fullMessageText, true, false, priority, validityPeriod); } else { android.telephony.Rlog.e(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, "getSubmitPdu() returned null"); return null; } }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSendImsGmsTestWithOutDesAddr() throwsjava.lang.Exception { switchImsSmsFormat(PhoneConstants.PHONE_TYPE_GSM); mImsSmsDispatcher.sendText(null, "222", com.android.internal.telephony.TAG, null, null, null, null, false, (-1), false, (-1)); verify(mSimulatedCommandsVerifier, times(0)).sendImsGsmSms(anyString(), anyString(), anyInt(), anyInt(), any(android.os.Message.class)); }
@com.android.internal.annotations.VisibleForTesting @java.lang.Override public void sendText(java.lang.String destAddr,java.lang.String scAddr,java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, android.net.Uri messageUri,java.lang.String callingPkg, boolean persistMessage, int priority, boolean expectMore, int validityPeriod) { com.android.internal.telephony.gsm.SmsMessage.SubmitPdu pdu = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu(scAddr, destAddr, text, (deliveryIntent!= null) && (pdu!= null));java.util.HashMap map = getSmsTrackerMap(destAddr, scAddr, text, pdu); com.android.internal.telephony.gsm.SmsTracker tracker = getSmsTracker(map, sentIntent, deliveryIntent, getFormat(), messageUri, false, text, true, persistMessage, priority, validityPeriod);java.lang.String carrierPackage = getCarrierAppPackageName(); if (carrierPackage!= null) { android.telephony.Rlog.d(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, "Sending carrier package."); com.android.internal.telephony.gsm.TextSmsSender smsSender = new com.android.internal.telephony.gsm.TextSmsSender(tracker); smsSender.sendSmsByCarrierApp(carrierPackage, new com.android.internal.telephony.gsm.SmsSenderCallback(smsSender)); } else { android.telephony.Rlog.e(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, "No carrier package."); sendRawPdu(tracker); } }
@java.lang.Override protected com.android.internal.telephony.cdma.SmsTracker getNewSubmitPduTracker(java.lang.String destinationAddress,java.lang.String scAddress,java.lang.String message, com.android.internal.telephony.SmsHeader smsHeader, int encoding, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean lastPart,java.util.concurrent.atomic.AtomicInteger unsentPartCount,java.util.concurrent.atomic.AtomicBoolean anyPartFailed, android.net.Uri messageUri,java.lang.String fullMessageText, int priority, boolean expectMore, int validityPeriod) { com.android.internal.telephony.cdma.sms.UserData uData = new com.android.internal.telephony.cdma.sms.UserData(); uData.payloadStr = message; uData.userDataHeader = smsHeader; if (encoding == (com.android.internal.telephony.SmsConstants.ENCODING_7BIT)) { uData.msgEncoding = com.android.internal.telephony.cdma.sms.UserData.ENCODING_GSM_7BIT_ALPHABET; } else { uData.msgEncoding = com.android.internal.telephony.cdma.sms.UserData.ENCODING_UNICODE_16; } uData.msgEncodingSet = true; com.android.internal.telephony.cdma.SmsMessage.SubmitPdu submitPdu = com.android.internal.telephony.cdma.SmsMessage.getSubmitPdu(destinationAddress, uData, ((deliveryIntent!= null) && lastPart) || (payloadStr.isEmpty()));java.util.HashMap map = getSmsTrackerMap(destinationAddress, scAddress, message, submitPdu); return getSmsTracker(map, sentIntent, deliveryIntent, getFormat(), unsentPartCount, anyPartFailed, messageUri, smsHeader, ((!lastPart) || expectMore), fullMessageText, true, true, priority, validityPeriod); }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest @android.test.FlakyTest @org.junit.Ignore public void testSendImsGmsTest() throwsjava.lang.Exception { switchImsSmsFormat(PhoneConstants.PHONE_TYPE_GSM); mImsSmsDispatcher.sendText("111", "222", com.android.internal.telephony.TAG, null, null, null, null, false, (-1), false, (-1)); verify(mSimulatedCommandsVerifier).sendImsGsmSms(eq("038122f2"), eq("0100038111f1000014c9f67cda9c12d37378983e4697e5d4f29c0e"), eq(0), eq(0), any(android.os.Message.class)); }
public void sendStoredText(java.lang.String callingPkg, android.net.Uri messageUri,java.lang.String scAddress, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent) { mPhone.getContext().enforceCallingPermission(Manifest.permission.SEND_SMS, "Send SMS message"); if (android.telephony.Rlog.isLoggable("SMS", Log.VERBOSE)) { log(((((((("sendStoredText scAddr=" + scAddress) + " messageUri=") + messageUri) + " sentIntent=") + sentIntent) + " deliveryIntent=") + deliveryIntent)); } if ((mAppOps.noteOp(AppOpsManager.OP_SEND_SMS, android.os.Binder.getCallingUid(), callingPkg))!= (android.app.AppOpsManager.MODE_ALLOWED)) { return; } final android.content.ContentResolver resolver = mPhone.getContext().getContentResolver(); if (!(isFailedOrDraft(resolver, messageUri))) { android.util.Log.e(com.android.internal.telephony.IccSmsInterfaceManager.LOG_TAG, "sendStoredText: not FAILED or DRAFT message"); returnUnspecifiedFailure(sentIntent); return; } finaljava.lang.String[] textAndAddress = loadTextAndAddress(resolver, messageUri); if (textAndAddress == null) { android.util.Log.e(com.android.internal.telephony.IccSmsInterfaceManager.LOG_TAG, "sendStoredText: can not load text"); returnUnspecifiedFailure(sentIntent); return; } textAndAddress[1] = filterDestAddress(textAndAddress[1]); mDispatcher.sendText(textAndAddress[1], scAddress, textAndAddress[0], sentIntent, deliveryIntent, messageUri, callingPkg, true, com.android.internal.telephony.IccSmsInterfaceManager.SMS_MESSAGE_PRIORITY_NOT_SPECIFIED, false, com.android.internal.telephony.IccSmsInterfaceManager.SMS_MESSAGE_PERIOD_NOT_SPECIFIED); }
public void sendMultipartText(java.lang.String callingPackage,java.lang.String destAddr,java.lang.String scAddr,java.util.List<java.lang.String> parts,java.util.List<android.app.PendingIntent> sentIntents,java.util.List<android.app.PendingIntent> deliveryIntents, boolean persistMessageForNonDefaultSmsApp) { sendMultipartTextWithOptions(callingPackage, destAddr, destAddr, scAddr, parts, sentIntents, deliveryIntents, persistMessageForNonDefaultSmsApp, com.android.internal.telephony.IccSmsInterfaceManager.SMS_MESSAGE_PRIORITY_NOT_SPECIFIED, false, com.android.internal.telephony.IccSmsInterfaceManager.SMS_MESSAGE_PERIOD_NOT_SPECIFIED); }
private void sendTextInternal(java.lang.String callingPackage,java.lang.String destAddr,java.lang.String scAddr,java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean persistMessageForNonDefaultSmsApp, int priority, boolean expectMore, int validityPeriod) { if (android.telephony.Rlog.isLoggable("SMS", Log.VERBOSE)) { log((((((((((((((((((("sendText: destAddr=" + destAddr) + ", scAddr=") + scAddr) + ", text=") + text) + ", sentIntent=") + sentIntent) + ", deliveryIntent=") + deliveryIntent) + ", priority=") + priority) + ", expectMore=") + expectMore) + ", validityPeriod=") + validityPeriod)); } if ((mAppOps.noteOp(AppOpsManager.OP_SEND_SMS, android.os.Binder.getCallingUid(), callingPackage))!= (android.app.AppOpsManager.MODE_ALLOWED)) { return; } if (!persistMessageForNonDefaultSmsApp) { enforcePrivilegedAppPermissions(); } destAddr = filterDestAddress(destAddr); mDispatcher.sendText(destAddr, scAddr, text, sentIntent, deliveryIntent, null, callingPackage, persistMessageForNonDefaultSmsApp, priority, expectMore, validityPeriod); }
protected abstract void sendText(java.lang.String destAddr,java.lang.String scAddr,java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, android.net.Uri messageUri,java.lang.String callingPkg, boolean persistMessage, int priority, boolean expectMore, int validityPeriod);
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) { com.android.traceur.Receiver.updateTracing(context); com.android.traceur.Receiver.updateQuickswitch(context); } else if (com.android.traceur.Receiver.STOP_ACTION.equals(intent.getAction())) { prefs.edit().putBoolean(context.getString(R.string.pref_key_tracing_on), false).apply(); com.android.traceur.Receiver.updateTracing(context); } else if (com.android.traceur.Receiver.OPEN_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); context.startActivity(new android.content.Intent(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } }
@java.lang.Override publicjava.lang.String toString() { return (((((((((((((((((((((((((((((("DataProfile=" + (mProfileId)) + "/") + (mProtocol)) + "/") + (mAuthType)) + "/") + (mUser).equals(Build.TYPE))? "***/***/***" : (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((),,, "/") + "/") + (mUser)") + "") + (mUserName)) + "") + (mPassword))")") + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) + "") + (mUser) +
public final void onSmsStatusReportReceived(int token, int messageRef,java.lang.String format, byte[] pdu) throwsjava.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw newjava.lang.RuntimeException("ImsSmsImplBase not ready."); } try { mListener.onSmsStatusReportReceived(token, messageRef, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, ("Could not process sms status report: " + (e.getMessage()))); acknowledgeSmsReport(token, messageRef, android.telephony.ims.stub.STATUS_REPORT_STATUS_ERROR); } } }
public final void onSmsReceived(int token,java.lang.String format, byte[] pdu) throwsjava.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw newjava.lang.RuntimeException("ImsSmsImplBase not ready."); } try { mListener.onSmsReceived(token, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, ("Could not deliver sms: " + (e.getMessage()))); acknowledgeSms(token, 0, android.telephony.ims.stub.DELIVER_STATUS_ERROR_GENERIC); } }
private static byte[] readWithLimit(java.io.InputStream in) throwsjava.io.IOException {java.io.ByteArrayOutputStream bytes = newjava.io.ByteArrayOutputStream(); byte[] buffer = new byte[1024]; int bytesRead = 0; int count; while ((count = in.read(buffer))!= (-1)) { bytes.write(buffer, 0, count); bytesRead += count; if (bytesRead >= (com.android.certinstaller.CertInstallerMain.MAXIMUM_CERT_SIZE)) { throw newjava.io.IOException("Certificate file exceeded maximum size."); } } return bytes.toByteArray(); }
@java.lang.Override protected void dump(java.io.FileDescriptor fd,java.io.PrintWriter writer,java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println("No dump in APP SERVICES, see bluetooth_manager section."); writer.println(" --print argument for dumpsys direct from AdapterService."); return; } verboseLog(("Dump arguments, check for protobuf output: " + (android.text.TextUtils.join( args)))); if (args[0].equals("--proto-bin")) { dumpMetrics(fd); return; } writer.println(("MaxConnectedAudioDevices: " + (getMaxConnectedAudioDevices()))); writer.println("Bluetooth devices:"); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println(((((" " + (device.getAddress())) + " [") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + "] ") + (device.getName()))); }java.lang.StringBuilder sb = newjava.lang.StringBuilder(); for (com.android.bluetooth.btservice.ProfileService profile : mRegisteredProfiles) { profile.dump(sb); } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }
@java.lang.Override public void run() { logWriter.println(("Main started: " + (name))); try {java.lang.String line = ""; while ((!(doExit)) || (br.ready() )) { try { line = br.readLine(); if (line == null) break; logWriter.println((((name) + ": ") + line)); } catch (java.lang.IllegalStateException e) { } } logWriter.println(("Main completed: " + (name))); } catch (java.io.IOException e) { logWriter.printError(e); } }
public static com.google.g.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.
private staticjava.lang.Boolean parseBooleanAttribute(java.lang.String attributeValue) { if (attributeValue == null) { return null; } boolean isTrue = libcore.util.TimeZoneFinder.TRUE_ATTRIBUTE_VALUE.equals(attributeValue); if (!(isTrue || (libcore.util.TimeZoneFinder.FALSE_ATTRIBUTE_VALUE.equals(attributeValue)))) { return null; } return isTrue; }
private int parseIdFromInsertedUri(android.net.Uri uri) { int id = -1; if (uri!= null) { id =java.lang.Integer.parseInt(uri.getLastPathSegment()); } return id; }
public static byte[] encodeSigningCertificateLineage(java.util.List<com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode> signingCertificateLineage) {java.util.List<byte[]> nodes = newjava.util.ArrayList<>(); for (com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode node : signingCertificateLineage) { nodes.add(com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.encodeSigningCertificateNode(node)); } byte[] encodedSigningCertificateLineage = com.android.apksig.internal.apk.ApkSigningBlockUtils.encodeAsSequenceOfLengthPrefixedElements(nodes); return com.android.apksig.internal.apk.ApkSigningBlockUtils.encodeAsLengthPrefixedElement(encodedSigningCertificateLineage); }
public static byte[] encodeSigningCertificateNode(com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode node) { int parentSigAlgorithmId = 0; if ((node.parentSigAlgorithm)!= null) { parentSigAlgorithmId = node.parentSigAlgorithm.getId(); } int sigAlgorithmId = 0; if ((node.sigAlgorithm)!= null) { sigAlgorithmId = node.sigAlgorithm.getId(); } byte[] prefixedSignedData = com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.encodeSignedData(node.signingCert, parentSigAlgorithmId); byte[] prefixedSignature = com.android.apksig.internal.apk.ApkSigningBlockUtils.encodeAsLengthPrefixedElement(node.signature); int payloadSize = ((prefixedSignedData.length) + 4) + (prefixedSignature.length);java.nio.ByteBuffer result =java.nio.ByteBuffer.allocate(payloadSize); result.order(java.nio.ByteOrder.LITTLE_ENDIAN); result.put(prefixedSignedData); result.putInt(sigAlgorithmId); result.put(prefixedSignature); return result.array(); }
public com.android.apksig.SigningCertificateLineage build() { return new com.android.apksig.SigningCertificateLineage(mInputSigningCertificateLineage, mMinimumSdkVersion); }
public void spawnFirstDescendant(com.android.apksig.SigningCertificateLineage.SignerConfig parent, int flags) { if ((mLineage) == null) { mLineage = newjava.util.ArrayList(); } if ((mLineage.size()) > 0) { throw newjava.lang.IllegalStateException("SigningCertificateLineage already has its first node"); } com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode firstNode = new com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode(parent.getCertificate(), null, null, new byte[0], flags); mLineage.add(firstNode); }
public void spawnDescendant(com.android.apksig.SigningCertificateLineage.SignerConfig parent, com.android.apksig.SigningCertificateLineage.SignerConfig child) throwsjava.security.InvalidKeyException,java.security.NoSuchAlgorithmException,java.security.SignatureException,java.security.cert.CertificateEncodingException { int flags = calculateDefaultFlags(); spawnDescendant(parent, flags, child, flags); }
privatejava.util.List<com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode> read(java.nio.ByteBuffer inputByteBuffer, int version) throwsjava.io.IOException { switch (version) { case com.android.apksig.SigningCertificateLineage.FIRST_VERSION : mVersion = com.android.apksig.SigningCertificateLineage.FIRST_VERSION; return com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.readSigningCertificateLineage(inputByteBuffer); default : throw newjava.lang.IllegalArgumentException("Improper SigningCertificateLineage format: unrecognized version."); } }
public com.android.apksig.SigningCertificateLineage.Builder setMinimumSdkVersion(int minimumSdkVersion) { mMinimumSdkVersion = minimumSdkVersion; return this; }
private int calculateDefaultFlags() { throw newjava.lang.UnsupportedOperationException("Default flag values not yet implemented"); }
publicjava.nio.ByteBuffer write() { byte[] encodedLineage = com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.encodeSigningCertificateLineage(mSigningLineage); int payloadSize = (4 + 4) + (encodedLineage.length);java.nio.ByteBuffer result =java.nio.ByteBuffer.allocate(payloadSize); result.order(java.nio.ByteOrder.LITTLE_ENDIAN); result.putInt(com.android.apksig.SigningCertificateLineage.MAGIC); result.putInt(mVersion); result.put(encodedLineage); return result; }
private static byte[] generateAdditionalAttributes(SignerConfig signerConfig) { if ((signerConfig.mSigningCertificateLineage) == null) { return new byte[0]; } byte[] por = signerConfig.mSigningCertificateLineage.generateV3SignerAttribute(); return com.android.apksig.internal.apk.ApkSigningBlockUtils.encodeAsLengthPrefixedElement(por); }
privatejava.util.List<com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode> read(java.nio.ByteBuffer inputByteBuffer) throwsjava.io.IOException { com.android.apksig.internal.apk.ApkSigningBlockUtils.checkByteOrderLittleEndian(inputByteBuffer); if ((inputByteBuffer.remaining()) < 8) { throw newjava.lang.IllegalArgumentException("Improper SigningCertificateLineage format: insufficient data for header."); } if ((inputByteBuffer.getInt())!= (com.android.apksig.SigningCertificateLineage.MAGIC)) { throw newjava.lang.IllegalArgumentException("Improper SigningCertificateLineage format: MAGIC header mismatch."); } return read(inputByteBuffer, inputByteBuffer.getInt()); }
public com.android.apksig.SigningCertificateLineage.Builder setInputSigningCertificateLineage(java.nio.ByteBuffer inputSigningCertificateLineage) { mInputSigningCertificateLineage = inputSigningCertificateLineage; return this; }
private boolean shouldNumberBePlacedOnIms(boolean isEmergency,java.lang.String number) { int processCallResult; try { if ((mImsManager)!= null) { processCallResult = mImsManager.shouldProcessCall(isEmergency, newjava.lang.String[]{ number }); android.telephony.Rlog.i(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ((("shouldProcessCall: number: " + (android.telephony.Rlog.pii(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, number))) + ", result: ") + processCallResult)); } else { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, "ImsManager unavailable, shouldProcessCall returning false."); return false; } } catch (com.android.ims.ImsException e) { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, "ImsService unavailable, shouldProcessCall returning false."); return false; } if (processCallResult == (android.telephony.ims.feature.MmTelFeature.PROCESS_CALL_IMS)) { return true; } else if (processCallResult == (android.telephony.ims.feature.MmTelFeature.PROCESS_CALL_CSFB)) { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, "shouldProcessCall: place over CSFB instead."); return false; } else { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, "shouldProcessCall returned unknown result."); return false; } }
@java.lang.Override public android.net.NetworkCapabilities createFromParcel(android.os.Parcel in) { android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities(); netCap.mNetworkCapabilities = in.readLong(); netCap.mTransportTypes = in.readLong(); netCap.mLinkUpBandwidthKbps = in.readInt(); netCap.mLinkDownBandwidthKbps = in.readInt(); netCap.mNetworkSpecifier = in.readParcelable(null); netCap.mSignalStrength = in.readInt(); netCap.mUids = ((android.util.ArraySet<android.net.UidRange>) (in.readArraySet(null))); return netCap; }
public android.net.NetworkCapabilities addCapability(@android.net.NetworkCapabilities.NetCapability int capability) { if ((capability < (android.net.NetworkCapabilities.MIN_NET_CAPABILITY)) || (capability > (android.net.NetworkCapabilities.MAX_NET_CAPABILITY))) { throw newjava.lang.IllegalArgumentException("Capability out of range"); } mNetworkCapabilities |= 1 << capability; return this; }
private boolean satisfiedByNetCapabilities(android.net.NetworkCapabilities nc, boolean onlyImmutable) { long networkCapabilities = this.mNetworkCapabilities; if (onlyImmutable) { networkCapabilities = networkCapabilities & (~(android.net.NetworkCapabilities.MUTABLE_CAPABILITIES)); } if (((mUnwantedNetworkCapabilities) & (nc.mNetworkCapabilities)) > 0) { return false; } return ((nc.mNetworkCapabilities) & networkCapabilities) == networkCapabilities; }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(mNetworkCapabilities); dest.writeLong(mTransportTypes); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mLinkDownBandwidthKbps); dest.writeParcelable(((android.os.Parcelable) (mNetworkSpecifier)), flags); dest.writeInt(mSignalStrength); dest.writeArraySet(mUids); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj == null) || ((obj instanceof android.net.NetworkCapabilities) == false)) return false; android.net.NetworkCapabilities that = ((android.net.NetworkCapabilities) (obj)); return ((((((equalsNetCapabilities(that)) && (equalsTransportTypes(that))) && (equalsLinkBandwidths(that))) && (equalsSignalStrength(that))) && (equalsSpecifier(that))) && (equalsUids(that)) && (java.util.Objects.equals(mUnwantedNetworkCapabilities, that.mUnwantedNetworkCapabilities)); }
public void clearAll() { mNetworkCapabilities = mTransportTypes = 0; mLinkUpBandwidthKbps = mLinkDownBandwidthKbps = android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED; mNetworkSpecifier = null; mSignalStrength = android.net.NetworkCapabilities.SIGNAL_STRENGTH_UNSPECIFIED; mUids = null; mEstablishingVpnAppUid = android.net.NetworkCapabilities.INVALID_UID; mUnwantedNetworkCapabilities = 0; }
@java.lang.Override public int hashCode() { returnjava.util.Objects.hash(mNetworkCapabilities, mTransportTypes, mLinkDownBandwidthKbps, mLinkUpBandwidthKbps, mNetworkSpecifier, mSignalStrength, mUids, mUnwantedNetworkCapabilities); }
@org.junit.Test public void testOemPaid() { android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(); nc.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET); android.net.NetworkCapabilities request = new android.net.NetworkCapabilities(); assertTrue(request.satisfiedByNetworkCapabilities(nc)); nc.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID); assertFalse(request.satisfiedByNetworkCapabilities(nc)); request.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID); assertTrue(request.satisfiedByNetworkCapabilities(nc)); }
@org.junit.Test public final void testTapLink_changeOrientationThenTapBack() throwsjava.lang.Exception { sUiBot.setScreenOrientation(UiBot.PORTRAIT); try { saveUiRestoredAfterTappingLinkTest(android.autofillservice.cts.CustomDescriptionWithLinkTestCase.PostSaveLinkTappedAction.ROTATE_THEN_TAP_BACK_BUTTON); } finally { android.autofillservice.cts.Helper.runShellCommand("density reset"); sUiBot.setScreenOrientation(UiBot.PORTRAIT); } }
@java.lang.Override protected synchronized boolean start() { if (com.android.bluetooth.hfpclient.HeadsetClientService.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, "start()"); } com.android.bluetooth.hfpclient.NativeInterface.initializeNative(); mAudioManager = ((android.media.AudioManager) (getSystemService(Context.AUDIO_SERVICE))); mSmFactory = new com.android.bluetooth.hfpclient.HeadsetClientStateMachineFactory(); mStateMachineMap.clear(); android.content.IntentFilter filter = new android.content.IntentFilter(android.media.AudioManager.VOLUME_CHANGED_ACTION); try { registerReceiver(mBroadcastReceiver, filter); } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, "Failed to register broadcat receiver", e); } mNativeInterface = new com.android.bluetooth.hfpclient.NativeInterface(); android.content.Intent startIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.class); startService(startIntent); mSmThread = new android.os.HandlerThread("HeadsetClient.SM"); mSmThread.start(); return true; }
public void currentPhysicalChannelConfigs(int indicationType,java.util.ArrayList<android.hardware.radio.V1_2.PhysicalChannelConfig> configs) {java.util.List<android.telephony.PhysicalChannelConfig> response = com.android.internal.telephony.RIL.convertHalPhysicalChannelConfigs(configs); mRil.mPhysicalChannelConfigurationRegistrants.notifyRegistrants(new android.os.AsyncResult(null, response, null)); }
public void notifyPhysicalChannelConfigurationForSubscriber(int subId,java.util.List<android.telephony.PhysicalChannelConfig> configs) { if (!(checkNotifyPermission("notifyPhysicalChannelConfiguration()"))) { return; } if (com.android.server.TelephonyRegistry.VDBG) { com.android.server.TelephonyRegistry.log(((("notifyPhysicalChannelConfiguration: subId=" + subId) + " configs=") + configs)); } synchronized(mRecords) { int phoneId = android.telephony.SubscriptionManager.getPhoneId(subId); if (validatePhoneId(phoneId)) { mPhysicalChannelConfigs.set(phoneId, configs); for (com.android.server.TelephonyRegistry.Record r : mRecords) { if ((r.matchPhoneStateListenerEvent(PhoneStateListener.LISTEN_PHYSICAL_CHANNEL_CONFIGURATION)) && (idMatch(r.subId, subId, phoneId))) { try { if (com.android.server.TelephonyRegistry.DBG_LOC) { com.android.server.TelephonyRegistry.log(((("notifyPhysicalChannelConfiguration: mPhysicalChannelConfigu=" + configs) + " r=") + r)); } r.callback.onPhysicalChannelConfigurationChanged(configs); } catch (android.os.RemoteException ex) { mRemoveList.add(r.binder); } } } } handleRemoveListLocked(); }
staticjava.util.List<android.telephony.PhysicalChannelConfig> convertHalPhysicalChannelConfigs(java.util.List<android.hardware.radio.V1_2.PhysicalChannelConfig> records) {java.util.List<android.telephony.PhysicalChannelConfig> configs = newjava.util.ArrayList<>(); for (android.hardware.radio.V1_2.PhysicalChannelConfig r : records) { configs.add(new android.telephony.PhysicalChannelConfig(r.status, r.cellBandwidthDownlink)); } return configs; }
@java.lang.Override publicjava.lang.String toString() { int[] types = getTransportTypes();java.lang.String transports = ((types.length) > 0)? "java Transports: " + (android.net.NetworkCapabilities.transportNamesOf(types)) : ""; types = getCapabilities();java.lang.String capabilities = ((types.length) > 0)? " Capabilities: "; for (int i = 0; i < (types.length);) { capabilities += android.net.NetworkCapabilities.capabilityNameOf(types[i]); if ((++i) < (types.length)) capabilities += "&"; }java.lang.String upBand = ((mLinkUpBandwidthKbps) > 0)? (" LinkUpBandwidth>= " + (mLinkUpBandwidthKbps)) + "Kbps" : "";java.lang.String dnBand = ((mLinkDownBandwidthKbps) > 0)? (" LinkDnBandwidth>= " + (mLinkDownBandwidthKbps)) + "Kbps" : "";java.lang.String specifier = ((mNetworkSpecifier) == null)? "" : ("Network Specifier: <" + (mNetworkSpecifier)) + ">";java.lang.String signalStrength = (hasSignalStrength())? "SignalStrength: " + (mSignalStrength) : ""; finaljava.lang.String uids; if (null == (mUids)) { uids = ""; } else if ((1 == (mUids.size())) && (mUids.valueAt(0).isSingleUid())) { uids = "Uid: " + (mUids.valueAt(0).start); } else { uids = ("No Uids: <" + (mUids)) + ">" + (mEstablishingVpnAppUid); } return (((((((((("[" + transports) + ">" + upBand) + ">" + specifier) + ">" + signalStrength) + ">" + uids) + "]") + establishingAppUid) + "]")); }
public boolean isSingleUid() { return (start) == (stop); }
public staticjava.lang.String formatDateRange(android.icu.util.ULocale icuLocale, android.icu.util.TimeZone icuTimeZone, long startMs, long endMs, int flags) { android.icu.util.Calendar startCalendar = libcore.icu.DateUtilsBridge.createIcuCalendar(icuTimeZone, icuLocale, startMs); android.icu.util.Calendar endCalendar; if (startMs == endMs) { endCalendar = startCalendar; } else { endCalendar = libcore.icu.DateUtilsBridge.createIcuCalendar(icuTimeZone, icuLocale, endMs); } boolean startsAtMidnight = libcore.icu.DateIntervalFormat.isMidnight(startCalendar); boolean endsAtMidnight = libcore.icu.DateIntervalFormat.isMidnight(endCalendar); boolean showTime = (flags & (DateUtilsBridge.FORMAT_SHOW_TIME))!= 0; boolean endsDayAfterStart = (libcore.icu.DateUtilsBridge.dayDistance(startCalendar, endCalendar)) == 1; if (((startMs!= endMs) && endsAtMidnight) && ((showTime || endsDayAfterStart))) { endCalendar.add(Calendar.DAY_OF_MONTH, (-1)); }java.lang.String skeleton = libcore.icu.DateUtilsBridge.toSkeleton(startCalendar, endCalendar, flags); synchronized(libcore.icu.DateIntervalFormat.CACHED_FORMATTERS) { android.icu.text.DateIntervalFormat formatter = libcore.icu.DateIntervalFormat.getFormatter(skeleton, icuLocale, icuTimeZone); return formatter.format(startCalendar, endCalendar, newjava.lang.StringBuffer(), newjava.text.FieldPosition(0)).toString(); } }
private void initBluetoothMaxConnectedAudioDevicesPreference() {java.lang.CharSequence[] entries = mBluetoothSelectMaxConnectedAudioDevices.getEntries();java.lang.String[] entriesWithDefault = getResources().getStringArray(R.array.bluetooth_max_connected_audio_devices_with_default); if ((entries.length)!= (entriesWithDefault.length)) { throw newjava.lang.IllegalStateException(((("bluetooth_max_connected_audio_devices.length=" + (entries.length)) + "!= bluetooth_max_connected_audio_devices_with_default.length=") + (entriesWithDefault.length))); }java.lang.String defaultValue =java.lang.String.valueOf(getResources().getInteger(com.android.internal.R.integer.config_bluetooth_max_connected_audio_devices)); int defaultIndex = mBluetoothSelectMaxConnectedAudioDevices.findIndexOfValue(defaultValue); if (defaultIndex < 0) { throw newjava.lang.IllegalStateException((("Cannot find defaultValue " + defaultValue) + " in bluetooth_max_connected_audio_devices array")); } entries[defaultIndex] = entriesWithDefault[defaultIndex]; mBluetoothSelectMaxConnectedAudioDevices.setEntries(entries);java.lang.String overlayedValue = android.os.SystemProperties.get(com.android.settings.development.DevelopmentSettings.BLUETOOTH_MAX_CONNECTED_AUDIO_DEVICES_PROPERTY, defaultValue); int overlayedIndex = mBluetoothSelectMaxConnectedAudioDevices.findIndexOfValue(overlayedValue); mBluetoothSelectMaxConnectedAudioDevices.setValueIndex(overlayedIndex); mBluetoothSelectMaxConnectedAudioDevices.setSummary(entries[overlayedIndex]); }
private void writeBluetoothMaxConnectedAudioDevices(java.lang.Object newValueObj) {java.lang.String newValue = newValueObj.toString(); int index = mBluetoothSelectMaxConnectedAudioDevices.findIndexOfValue(newValue); if (index < 0) { throw newjava.lang.IllegalArgumentException(((("Value '" + newValue) + "' not found in Bluetooth max " + "connected audio devices preference")); } android.os.SystemProperties.set(com.android.settings.development.DevelopmentSettings.BLUETOOTH_MAX_CONNECTED_AUDIO_DEVICES_PROPERTY, newValue); mBluetoothSelectMaxConnectedAudioDevices.setValueIndex(index);java.lang.CharSequence[] entries = mBluetoothSelectMaxConnectedAudioDevices.getEntries(); mBluetoothSelectMaxConnectedAudioDevices.setSummary(entries[0]); }
private void resetDangerousOptions() { mDontPokeProperties = true; for (int i = 0; i < (mResetSwitchPrefs.size()); i++) { android.support.v14.preference.SwitchPreference cb = mResetSwitchPrefs.get(i); if (cb.isChecked()) { cb.setChecked(false); onPreferenceTreeClick(cb); } } mBugReportInPowerController.resetPreference(); mEnableAdbController.resetPreference(); com.android.settings.development.DevelopmentSettings.resetDebuggerOptions(); writeLogpersistOption(null, true); writeLogdSizeOption(null); writeAnimationScaleOption(0, mWindowAnimationScale, null); writeAnimationScaleOption(1, mTransitionAnimationScale, null); writeAnimationScaleOption(2, mAnimatorDurationScale, null); if (usingDevelopmentColorSpace()) { writeSimulateColorSpace((-1)); } writeOverlayDisplayDevicesOptions(null); writeAppProcessLimitOptions(null); writeBluetoothMaxConnectedAudioDevices(com.android.internal.R.integer.config_bluetooth_max_connected_audio_devices); mHaveDebugSettings = false; updateAllOptions(); mDontPokeProperties = false; pokeSystemProperties(); }
private static boolean isLocationModeEnabled(@android.annotation.NonNull android.content.Context context, @android.annotation.UserIdInt int userId) { int locationMode = Settings.Secure.getIntForUser(context.getContentResolver(), Settings.Secure.LOCATION_MODE, Settings.Secure.LOCATION_MODE_OFF, userId); return locationMode!= (Settings.Secure.LOCATION_MODE_OFF); }
public static boolean canAccessCellLocation(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNulljava.lang.String pkgName, int uid, int pid) throwsjava.lang.SecurityException { android.os.Trace.beginSection("TelephonyLocationCheck"); try { if (uid == (PHONE_UID)) { return true; } if ((context.checkPermission(Manifest.permission.ACCESS_COARSE_LOCATION, pid, uid)) == (android.content.pm.PackageManager.PERMISSION_DENIED)) { return false; } final int opCode = android.app.AppOpsManager.permissionToOpCode(Manifest.permission.ACCESS_COARSE_LOCATION); if ((opCode!= (android.app.AppOpsManager.OP_NONE)) && ((context.getSystemService(android.app.AppOpsManager.class).noteOp(opCode, uid, pkgName))!= (android.app.AppOpsManager.MODE_ALLOWED))) { return false; } if (!(android.telephony.LocationAccessPolicy.isLocationModeEnabled(context, android.os.UserHandle.getUserId(uid)))) { return false; } return (android.telephony.LocationAccessPolicy.isCurrentProfile(context, uid)) || (android.telephony.LocationAccessPolicy.checkInteractAcrossUsersFull(context)); } finally { android.os.Trace.endSection(); } }
@java.lang.Override public int compare(android.net.IpPrefix prefix1, android.net.IpPrefix prefix2) { final int p1len = prefix1.getPrefixLength(); final int p2len = prefix2.getPrefixLength(); if (p1len < p2len) return -1; if (p2len < p1len) return 1; final byte[] a1 = prefix1.address; final byte[] a2 = prefix2.address; final int len = ((a1.length) < (a2.length))? a1.length : a2.length; for (int i = 0; i < len; ++i) { if ((a1[i]) < (a2[i])) return -1; if ((a1[i]) > (a2[i])) return 1; } if ((a2.length) < len) return 1; if ((a1.length) < len) return -1; return 0; }
@com.android.internal.annotations.VisibleForTesting static boolean providesRoutesToMostDestinations(android.net.LinkProperties lp) { finaljava.util.Comparator<android.net.IpPrefix> prefixLengthComparator = android.net.IpPrefix.lengthComparator();java.util.TreeSet<android.net.IpPrefix> ipV4Prefixes = newjava.util.TreeSet(prefixLengthComparator);java.util.TreeSet<android.net.IpPrefix> ipV6Prefixes = newjava.util.TreeSet(prefixLengthComparator); for (final android.net.RouteInfo route : lp.getAllRoutes()) { android.net.IpPrefix destination = route.getDestination(); if (destination.isIPv4()) { ipV4Prefixes.add(destination); } else { ipV6Prefixes.add(destination); } } if ((android.net.NetworkUtils.routedIPv4AddressCount(ipV4Prefixes)) > (com.android.server.connectivity.Vpn.MOST_IPV4_ADDRESSES_COUNT)) { return true; } return (android.net.NetworkUtils.routedIPv6AddressCount(ipV6Prefixes).compareTo(com.android.server.connectivity.Vpn.MOST_IPV6_ADDRESSES_COUNT)) >= 0; }
public staticjava.math.BigInteger routedIPv6AddressCount(finaljava.util.TreeSet<android.net.IpPrefix> prefixes) {java.math.BigInteger routedIPCount =java.math.BigInteger.ZERO; for (final android.net.IpPrefix prefix : android.net.NetworkUtils.deduplicatePrefixSet(prefixes)) { int rank = 128 - (prefix.getPrefixLength()); routedIPCount = routedIPCount.add(java.math.BigInteger.ONE.shiftLeft(rank)); } return routedIPCount; }
public static long routedIPv4AddressCount(finaljava.util.TreeSet<android.net.IpPrefix> prefixes) { long routedIPCount = 0; for (final android.net.IpPrefix prefix : android.net.NetworkUtils.deduplicatePrefixSet(prefixes)) { int rank = 32 - (prefix.getPrefixLength()); routedIPCount += 1L << rank; } return routedIPCount; }
public staticjava.util.Comparator<android.net.IpPrefix> lengthComparator() { return newjava.util.Comparator<android.net.IpPrefix>() { @java.lang.Override public int compare(android.net.IpPrefix prefix1, android.net.IpPrefix prefix2) { final int p1len = prefix1.getPrefixLength(); final int p2len = prefix2.getPrefixLength(); if (p1len < p2len) return -1; if (p2len < p1len) return 1; final byte[] a1 = prefix1.address; final byte[] a2 = prefix2.address; final int len = ((a1.length) < (a2.length))? a1.length : a2.length; for (int i = 0; i < len; ++i) { if ((a1[i]) < (a2[i])) return -1; if ((a1[i]) > (a2[i])) return 1; } if ((a2.length) < len) return 1; if ((a1.length) < len) return -1; return 0; } }; }
@java.lang.Override public void pendingListenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.app.PendingIntent operation) { checkNotNull(operation, "operation cannot be null."); if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } ensureValidNetworkSpecifier(networkCapabilities); final android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(networkRequest, operation); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log(("Sending broadcast for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); }
@java.lang.Override public android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities networkCapabilities, android.app.PendingIntent operation) { checkNotNull(operation, "operation cannot be null."); networkCapabilities = new android.net.NetworkCapabilities(networkCapabilities); enforceNetworkRequestPermissions(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); ensureRequestableCapabilities(networkCapabilities); ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.REQUEST); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(networkRequest, operation); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log(("register for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_REQUEST_WITH_INTENT, nri)); return networkRequest; }
private void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkRequest(nri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType!= (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.putParcelable(bundle, networkAgent.network); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_AVAILABLE : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkCapabilities(networkAgent.networkCapabilities)); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } case android.net.ConnectivityManager.CALLBACK_LOSING : { msg.arg1 = arg1; break; } case android.net.ConnectivityManager.CALLBACK_CAP_CHANGED : { final android.net.NetworkCapabilities nc = networkCapabilitiesWithoutUidsUnlessAllowed(networkAgent.networkCapabilities); com.android.server.ConnectivityService.putParcelable(bundle, nc); break; } case android.net.ConnectivityManager.CALLBACK_IP_CHANGED : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } } msg.what = notificationType; msg.setData(bundle); try { if (com.android.server.ConnectivityService.VDBG) {java.lang.String notification = android.net.ConnectivityManager.getCallbackName(notificationType); com.android.server.ConnectivityService.log(((("Callback notification " + notification) + " for ") + (nri.request))); } nri.messenger.send(msg); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge(nri.request, "Error trying to send a callback for
@java.lang.Override public android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, int timeoutMs, android.os.IBinder binder, int legacyType) { final android.net.NetworkRequest.Type type = (networkCapabilities == null)? NetworkRequest.Type.TRACK_DEFAULT : NetworkRequest.Type.REQUEST; if (type == (NetworkRequest.Type.TRACK_DEFAULT)) { networkCapabilities = new android.net.NetworkCapabilities(mDefaultRequest.networkCapabilities); networkCapabilities.removeCapability(com.android.server.NET_CAPABILITY_NOT_VPN); enforceAccessPermission(); } else { networkCapabilities = new android.net.NetworkCapabilities(networkCapabilities); enforceNetworkRequestPermissions(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); } ensureRequestableCapabilities(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, legacyType, nextNetworkRequestId(), type); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log(("requestNetwork for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_REQUEST, nri)); if (timeoutMs > 0) { mHandler.sendMessageDelayed(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_TIMEOUT_NETWORK_REQUEST, nri), timeoutMs); } return networkRequest; }
private android.net.NetworkCapabilities networkCapabilitiesWithoutUidsUnlessAllowed(android.net.NetworkCapabilities nc) { return new android.net.NetworkCapabilities(nc).setUids(null); }
private android.net.NetworkCapabilities getNetworkCapabilitiesInternal(com.android.server.connectivity.NetworkAgentInfo nai) { if (nai!= null) { synchronized(nai) { if ((nai.networkCapabilities)!= null) { return networkCapabilitiesWithoutUidsUnlessAllowed(nai.networkCapabilities); } } } return null; }
@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, android.os.IBinder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); restrictRequestUidsToSetAccessibleToCaller(nc); if (!(android.net.ConnectivityManager.checkChangePermission(mContext))) { nc.addCapability(com.android.server.NET_CAPABILITY_FOREGROUND); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log(("register for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); return networkRequest; }
private void restrictRequestUidsToSetAccessibleToCaller(android.net.NetworkCapabilities nc) { if (checkSettingsPermission()) { nc.setUids(new android.util.ArraySet<android.net.UidRange>()); } else { nc.setSingleUid(android.os.Binder.getCallingUid()); } }
public void combineCapabilities(android.net.NetworkCapabilities nc) { combineNetCapabilities(nc); combineUnwantedNetCapabilities(nc); combineTransportTypes(nc); combineLinkBandwidths(nc); combineSpecifiers(nc); combineSignalStrength(nc); combineUids(nc); }
private void checkCapabilityRange(@android.net.NetworkCapabilities.NetCapability int capability) { if ((capability < (android.net.NetworkCapabilities.MIN_NET_CAPABILITY)) || (capability > (android.net.NetworkCapabilities.MAX_NET_CAPABILITY))) { throw newjava.lang.IllegalArgumentException("NetworkCapability out of range"); } }
public void addUnwantedCapability(@android.net.NetworkCapabilities.NetCapability int capability) { checkCapabilityRange(capability); mUnwantedNetworkCapabilities |= 1 << capability; removeCapability(capability); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj == null) || ((obj instanceof android.net.NetworkCapabilities) == false)) return false; android.net.NetworkCapabilities that = ((android.net.NetworkCapabilities) (obj)); return (((((equalsNetCapabilities(that)) && (equalsUnwantedNetCapabilities(that))) && (equalsTransportTypes(that))) && (equalsLinkBandwidths(that))) && (equalsSignalStrength(that))) && (equalsSpecifier(that))) && (equalsUids(that)); }
public void removeUnwantedCapability(@android.net.NetworkCapabilities.NetCapability int capability) { checkCapabilityRange(capability); mUnwantedNetworkCapabilities &= ~(1 << capability); }
private boolean satisfiedByNetCapabilities(android.net.NetworkCapabilities nc, boolean onlyImmutable) { long requestedCapabilities = mNetworkCapabilities; long requestedUnwantedCapabilities = mUnwantedNetworkCapabilities; long providedCapabilities = nc.mNetworkCapabilities; if (onlyImmutable) { requestedCapabilities &= ~(android.net.NetworkCapabilities.MUTABLE_CAPABILITIES); requestedUnwantedCapabilities &= ~(android.net.NetworkCapabilities.MUTABLE_CAPABILITIES); providedCapabilities &= ~(android.net.NetworkCapabilities.MUTABLE_CAPABILITIES); } return ((providedCapabilities & requestedCapabilities) == requestedCapabilities) && ((requestedUnwantedCapabilities & providedCapabilities) == 0); }
private void combineUnwantedNetCapabilities(android.net.NetworkCapabilities nc) { this.mUnwantedNetworkCapabilities |= nc.mUnwantedNetworkCapabilities; }
public android.net.NetworkCapabilities removeCapability(@android.net.NetworkCapabilities.NetCapability int capability) { mNetworkCapabilities &= ~(1 << capability); return this; }
public android.net.NetworkCapabilities addCapability(@android.net.NetworkCapabilities.NetCapability int capability) { mNetworkCapabilities |= 1 << capability; return this; }
@org.junit.Test public void testUnwantedCapabilities() { android.net.NetworkCapabilities network = new android.net.NetworkCapabilities(); android.net.NetworkCapabilities request = new android.net.NetworkCapabilities(); assertTrue(((("Request: " + request) + ", Network:") + network), request.satisfiedByNetworkCapabilities(network)); request.addUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_WIFI_P2P); request.addUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED); assertTrue(request.satisfiedByNetworkCapabilities(network)); assertTrue(network.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); request.addUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertFalse(request.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.satisfiedByNetworkCapabilities(network)); network.removeCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.satisfiedByNetworkCapabilities(network)); request.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertFalse(request.hasUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.satisfiedByNetworkCapabilities(network)); network.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.satisfiedByNetworkCapabilities(network)); }
private boolean equalsUnwantedNetCapabilities(android.net.NetworkCapabilities nc) { return (nc.mUnwantedNetworkCapabilities) == (this.mUnwantedNetworkCapabilities); }
public boolean hasUnwantedCapability(@android.net.NetworkCapabilities.NetCapability int capability) { if ((capability < (android.net.NetworkCapabilities.MIN_NET_CAPABILITY)) || (capability > (android.net.NetworkCapabilities.MAX_NET_CAPABILITY))) { return false; } return ((mUnwantedNetworkCapabilities) & (1 << capability))!= 0; }
public void setCapabilities(@android.net.NetworkCapabilities.NetCapability int[] capabilities) { mNetworkCapabilities = com.android.internal.util.BitUtils.packBits(capabilities); mUnwantedNetworkCapabilities &= ~((mNetworkCapabilities) & (mUnwantedNetworkCapabilities)); }
@java.lang.Override publicjava.lang.String toString() { return newjava.lang.StringBuilder().append("{downlinkBandwidth=").append(downlinkBandwidth).append(", uplinkBandwidth=").append(uplinkBandwidth).append(", confidence=").append(confidence).append(", status=").append(status).toString(); }
private static void writeToParcelForCdma(android.os.Parcel p, int ni, int si, int bsi, int lon, int lat,java.lang.String al,java.lang.String as, int dbm, int ecio, int eDbm, int eEcio, int eSnr) { new android.telephony.CellInfoCdma(new android.telephony.CellIdentityCdma(ni, si, bsi, lon, lat, al, as), new android.telephony.CellSignalStrengthCdma(dbm, ecio, eDbm, eEcio, eSnr)); }
private void registerBroadcastReceiver() { if ((mBroadcastReceiver) == null) { mBroadcastReceiver = new android.content.BroadcastReceiver() { @java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (Intent.ACTION_LOCALE_CHANGED.equals(intent.getAction())) { android.os.Message message = mServiceHandler.obtainMessage(); message.arg1 = com.android.stk.StkAppService.OP_LOCALE_CHANGED; mServiceHandler.sendMessage(message); } } }; registerReceiver(mBroadcastReceiver, new android.content.IntentFilter(android.content.Intent.ACTION_LOCALE_CHANGED)); }
@java.lang.Override public void onDestroy() { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, "onDestroy()"); unregisterProcessObserver(); com.android.stk.StkAppService.sInstance = null; waitForLooper(); mServiceLooper.quit(); }
private void unregisterEvent(int event, int slotIndex) { unregisterProcessObserver(AppInterface.CommandType.SET_UP_EVENT_LIST, slotIndex); }
private void unregisterBroadcastReceiver() { if ((mBroadcastReceiver)!= null) { unregisterReceiver(mBroadcastReceiver); mBroadcastReceiver = null; } }
private void registerEvents(int slotId) { if ((mStkContext[slotId].mSetupEventListSettings) == null) { return; } for (int event : mStkContext[slotId].mSetupEventListSettings.eventList) { switch (event) { case IDLE_SCREEN_AVAILABLE_EVENT : registerProcessObserver(); break; case LANGUAGE_SELECTION_EVENT : registerBroadcastReceiver(); break; default : break; } } }
public static void main(java.lang.String[] params) throwsjava.lang.Exception { if ((((params.length) == 0) || ("--help".equals(params[0]))) || ("-h".equals(params[0]))) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if ("--version".equals(params[0])) {java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; }java.lang.String cmd = params[0]; try { if ("sign".equals(cmd)) { com.android.apksigner.ApkSignerTool.sign(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("verify".equals(cmd)) { com.android.apksigner.ApkSignerTool.verify(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("rotate".equals(cmd)) { com.android.apksigner.ApkSignerTool.rotate(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("help".equals(cmd)) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if ("version".equals(cmd)) { com.android.apksigner.ApkSignerTool.verify(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else { throw new com.android.apksigner.ApkSignerTool.ParameterException((("Unsupported command: " + cmd) + " See --help for supported commands")); } } catch (com.android.apksigner.ApkSignerTool.ParameterException | com.android.apksigner.OptionsParser e) {java.lang.System.err.println(e.getMessage());java.lang.System.exit(1); return; } }
publicjava.lang.String putOption() { mIndex = mPutBackIndex; mLastOptionOriginalForm = mPutBackLastOptionOriginalForm; mLastOptionValue = mPutBackLastOptionValue; returnjava.lang.String.format("%1$s", mIndex, mLastOptionOriginalForm, mLastOptionValue); }
private com.android.internal.telephony.CarrierIdentifier.CarrierMatchingRule makeCarrierMatchingRule(android.database.Cursor cursor) { return new com.android.internal.telephony.CarrierIdentifier.CarrierMatchingRule(cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.MCCMNC)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.IMSI_PREFIX_XPATTERN)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.ICCID_PREFIX)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.GID1)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.GID2)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.PLMN)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.SPN)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.APN)), cursor.getInt(cursor.getColumnIndexOrThrow(CarrierId.CARRIER_ID)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.NAME))); }
int updateDatabaseFromPb(android.database.sqlite.SQLiteDatabase db) { android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, "update database from pb file"); int rows = 0; com.android.internal.telephony.nano.CarrierIdProto.CarrierList carrierList = getUpdateCarrierList(); if (carrierList == null) return rows; android.content.ContentValues cv;java.util.List<android.content.ContentValues> cvs; try { db.beginTransaction(); db.delete(com.android.providers.telephony.CarrierIdProvider.CARRIER_ID_TABLE, null, null); for (com.android.internal.telephony.nano.CarrierIdProto.CarrierId id : carrierList.carrierId) { for (com.android.internal.telephony.nano.CarrierIdProto.CarrierAttribute attr : id.carrierAttribute) { cv = new android.content.ContentValues(); cv.put(CarrierId.CARRIER_ID, id.canonicalId); cv.put(CarrierId.NAME, id.carrierName); cvs = newjava.util.ArrayList(); convertCarrierAttrToContentValues(cv, cvs, attr, 0); for (android.content.ContentValues contentVal : cvs) { if ((db.insertWithOnConflict(com.android.providers.telephony.CarrierIdProvider.CARRIER_ID_TABLE, null, contentVal, SQLiteDatabase.CONFLICT_IGNORE)) > 0) { rows++; } else { android.util.Log.e(com.android.providers.telephony.CarrierIdProvider.TAG, (("Carrier insertion failure, row: " + rows) + " id: ") + (id.canonicalId))); } } } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, "update database from pb. inserted = " + rows)); if (rows > 0) { getContext().getContentResolver().notifyChange(com.android.providers.telephony.CarrierIdProvider.CONTENT_URI, null); } setAppliedVersion(carrierList.version); db.setSuccessful(); } finally { db.endTransaction(); } return rows; }
@com.android.internal.annotations.VisibleForTesting public staticjava.lang.String getStringForCarrierIdTableCreation(java.lang.String tableName) { return (((((((((((((((((((((("CREATE TABLE " + tableName) + "(" + (com.android.providers.telephony.CarrierId.COLUMN_MCCMNC)) + "(" + (com.android.providers.telephony.CarrierId.COLUMN_GID1)) + " TEXT, ") + (com.android.providers.telephony.CarrierId.COLUMN_GID2)) + " TEXT, ") + (com.android.providers.telephony.CarrierId.COLUMN_PLMN)) + " TEXT, ") + (com.android.providers.telephony.CarrierId.COLUMN_IMSI_PREFIX_XPATTERN)) + " TEXT, ") + (com.android.providers.telephony.CarrierId.COLUMN_APN)) + " TEXT, ") + (com.android.providers.telephony.CarrierId.COLUMN_ICCID_PREFIX)) + " TEXT, ") + (android.provider.Telephony.CarrierId.COLUMN_NAME)) + " TEXT, ") + (com.android.providers.telephony.CarrierId.COLUMN_CARRIER_ID)) + " INTEGER DEFAULT -1, " + (android.text.TextUtils.join(com.android.providers.telephony.CarrierIdProvider.CARRIERS_ID_UNIQUE_FIELDS))) + "));"; }
private int updateCarrierIdForCurrentSubscription(android.net.Uri uri, android.content.ContentValues cv) { int subId; try { subId =java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { throw newjava.lang.IllegalArgumentException(("Bad subid in provided uri " + uri)); } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, ("updateCarrierIdForCurrentSubscription: " + subId)); if (subId == (android.telephony.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) { subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); } if (!(com.android.internal.telephony.SubscriptionController.getInstance().isActiveSubId(subId))) { finaljava.util.List activeSubscriptions =java.util.Arrays.asList(com.android.internal.telephony.SubscriptionController.getInstance().getActiveSubIdList()); int count = 0; for (int subscription : mCurrentSubscriptionMap.keySet()) { if (!(activeSubscriptions.contains(subscription))) { count++; android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, ("removeSubscription: " + subscription)); mCurrentSubscriptionMap.remove(subscription); getContext().getContentResolver().notifyChange(CarrierId.CONTENT_URI, null); } } return count; } else { mCurrentSubscriptionMap.put(subId, new android.util.Pair(cv.getAsInteger(CarrierId.CARRIER_ID), cv.getAsString(CarrierId.NAME))); getContext().getContentResolver().notifyChange(CarrierId.CONTENT_URI, null); return 1; } }
private static android.content.ContentValues createCarrierInfoInternal() { android.content.ContentValues contentValues = new android.content.ContentValues(); contentValues.put(CarrierId.All.MCCMNC, com.android.providers.telephony.CarrierIdProviderTest.dummy_mccmnc); contentValues.put(CarrierId.All.GID1, com.android.providers.telephony.CarrierIdProviderTest.dummy_gid1); contentValues.put(CarrierId.All.GID2, com.android.providers.telephony.CarrierIdProviderTest.dummy_gid2); contentValues.put(CarrierId.All.PLMN, com.android.providers.telephony.CarrierIdProviderTest.dummy_plmn); contentValues.put(CarrierId.All.IMSI_PREFIX_XPATTERN, com.android.providers.telephony.CarrierIdProviderTest.dummy_imsi_prefix); contentValues.put(CarrierId.All.SPN, com.android.providers.telephony.CarrierIdProviderTest.dummy_spn); contentValues.put(CarrierId.All.APN, com.android.providers.telephony.CarrierIdProviderTest.dummy_apn); contentValues.put(CarrierId.All.ICCID_PREFIX, com.android.providers.telephony.CarrierIdProviderTest.dummy_iccid_prefix); contentValues.put(CarrierId.NAME, com.android.providers.telephony.CarrierIdProviderTest.dummy_name); contentValues.put(CarrierId.CARRIER_ID, com.android.providers.telephony.CarrierIdProviderTest.dummy_cid); return contentValues; }
@org.junit.Test(expected =java.lang.IllegalArgumentException.class) public void testUpdateCurrentSubscription_WrongURI() { try { android.content.ContentValues cv = new android.content.ContentValues(); cv.put(CarrierId.CARRIER_ID, com.android.providers.telephony.CarrierIdProviderTest.dummy_cid); cv.put(CarrierId.NAME, com.android.providers.telephony.CarrierIdProviderTest.dummy_name); doReturn(1).when(mSubController).getDefaultSubId(); doReturn(true).when(mSubController).isActiveSubId(eq(1)); mContext.getContentResolver().update(CarrierId.CONTENT_URI, cv, null, null); org.junit.Assert.fail("should throw an exception for wrong uri"); } catch (java.lang.IllegalArgumentException ex) { assertFalse(mContentObserver.changed); } }
private android.database.Cursor queryCarrierIdForCurrentSubscription(android.net.Uri uri,java.lang.String[] projectionIn) { int subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); if (!(android.text.TextUtils.isEmpty(uri.getLastPathSegment()))) { try { subId =java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { throw newjava.lang.IllegalArgumentException(("Bad subid in provided uri " + uri)); } } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, ("queryCarrierIdForCurrentSubscription: " + subId)); if (subId == (android.telephony.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) { subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); } if (!(mCurrentSubscriptionMap.containsKey(subId))) { return new android.database.MatrixCursor(projectionIn, 0); } final android.database.MatrixCursor c = new android.database.MatrixCursor(projectionIn, 1); final android.database.MatrixCursor.RowBuilder row = c.newRow(); for (int i = 0; i < (c.getColumnCount()); i++) { finaljava.lang.String columnName = c.getColumnName(i); if (CarrierId.CARRIER_ID.equals(columnName)) { row.add(mCurrentSubscriptionMap.get(subId).first); } else if (CarrierId.NAME.equals(columnName)) { row.add(mCurrentSubscriptionMap.get(subId).second); } else { throw newjava.lang.IllegalArgumentException(("Bad column " + (projectionIn[i]))); } } return c; }
@org.junit.Test(expected =java.lang.IllegalArgumentException.class) public void testQueryWithWrongURI() { try { mContext.getContentResolver().query(android.net.Uri.withAppendedPath(CarrierId.CONTENT_URI, "invalid"), newjava.lang.String[]{ android.provider.Telephony.CarrierId.CARRIER_ID, android.provider.Telephony.CarrierId.NAME }, null, null); org.junit.Assert.fail("should throw an exception for wrong uri"); } catch (java.lang.IllegalArgumentException ex) { } }
@org.junit.Test(expected =java.lang.IllegalArgumentException.class) public void testQueryCurrrentSubscription_wrongProjection() { mContext.getContentResolver().query(CarrierId.CONTENT_URI, newjava.lang.String[]{ android.provider.Telephony.CarrierId.CARRIER_ID, android.provider.Telephony.CarrierId.NAME, android.provider.Telephony.CarrierId.All.MCCMNC }, null, null); }
private void updateCarrierIdAndName(int cid,java.lang.String name) { boolean update = false; if (!(com.android.internal.telephony.CarrierIdentifier.equals(name, mCarrierName, true))) { com.android.internal.telephony.CarrierIdentifier.logd(((("updateCarrierIdAndName: from: " + (mCarrierName)) + " to: ") + name)); mCarrierName = name; update = true; } if (cid!= (mCarrierId)) { com.android.internal.telephony.CarrierIdentifier.logd(((("updateCarrierIdAndName: cid: " + (mCarrierId)) + " to: ") + cid)); mCarrierId = cid; update = true; } if (update) { mCarrierIdLocalLog.log(((("updateCarrierIdAndName: cid: " + (mCarrierId)) + " name: ") + (mCarrierName))); final android.content.Intent intent = new android.content.Intent(android.telephony.TelephonyManager.ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGED); intent.putExtra(TelephonyManager.EXTRA_CARRIER_ID, mCarrierId); intent.putExtra(TelephonyManager.EXTRA_CARRIER_NAME, mCarrierName); intent.putExtra(TelephonyManager.EXTRA_SUBSCRIPTION_ID, mPhone.getSubId()); mContext.sendBroadcast(intent); android.content.ContentValues cv = new android.content.ContentValues(); cv.put(CarrierId.CARRIER_ID, mCarrierId); cv.put(CarrierId.NAME, mCarrierName); mContext.getContentResolver().update(android.net.Uri.withAppendedPath(CarrierId.CONTENT_URI,java.lang.Integer.toString(mPhone.getSubId())), cv, null, null); } }
private boolean checkListenerPermission(int events,java.lang.String callingPackage,java.lang.String message) { if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_LOCATION))!= 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); if ((mAppOps.noteOp(AppOpsManager.OP_COARSE_LOCATION, android.os.Binder.getCallingUid(), callingPackage))!= (android.app.AppOpsManager.MODE_ALLOWED)) { return false; } } if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_INFO))!= 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); if ((mAppOps.noteOp(AppOpsManager.OP_COARSE_LOCATION, android.os.Binder.getCallingUid(), callingPackage))!= (android.app.AppOpsManager.MODE_ALLOWED)) { return false; } } if ((events & (com.android.server.TelephonyRegistry.ENFORCE_PHONE_STATE_PERMISSION_MASK))!= 0) { if (!(com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState(mContext, callingPackage, message))) { return false; } } if ((events & (com.android.server.TelephonyRegistry.PRECISE_PHONE_STATE_PERMISSION_MASK))!= 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRECISE_PHONE_STATE, null); } return true; }
@org.junit.Test public void testQueryDetails_NoSubscriberId() throws android.os.RemoteException { final long startTime = 1; final long endTime = 100; final int uid1 = 10001; final int uid2 = 10002; android.net.NetworkStatsHistory emptyHistory = new android.net.NetworkStatsHistory(10, 0); when(mService.openSessionForUsageStats(anyInt(), anyString())).thenReturn(mStatsSession); when(mStatsSession.getRelevantUids()).thenReturn(new int[]{ uid1, uid2 }); when(mStatsSession.getHistoryIntervalForUid(any(android.net.NetworkTemplate.class), anyInt(), eq(android.app.usage.android.net.NetworkStats.SET_ALL), eq(android.app.usage.android.net.NetworkStats.TAG_NONE), eq(NetworkStatsHistory.FIELD_ALL), eq(startTime), eq(endTime))).thenReturn((org.mockito.invocation.InvocationOnMock inv) -> { android.net.NetworkTemplate template = inv.getArgument(0); assertEquals(NetworkTemplate.MATCH_MOBILE_WILDCARD, template.getMatchRule()); return emptyHistory; }); android.app.usage.NetworkStats stats = mManager.queryDetails(ConnectivityManager.TYPE_MOBILE, null, startTime, endTime); junit.framework.Assert.assertFalse(stats.hasNextBucket()); }
public android.graphics.Bitmap takeScreenshot(android.uirendering.cts.testinfrastructure.ActivityTestBase.TestPositionInfo testPositionInfo) { android.graphics.Bitmap source = getInstrumentation().getUiAutomation().takeScreenshot(); return android.graphics.Bitmap.createBitmap(testPositionInfo.screenOffset.x, testPositionInfo.screenOffset.y, android.uirendering.cts.testinfrastructure.ActivityTestBase.TEST_WIDTH, android.uirendering.cts.testinfrastructure.ActivityTestBase.TEST_HEIGHT); }
@java.lang.Override publicjava.lang.String toString() { return (((((((((((((((((((((((((((((((((((((((((((((((("SignalStrength:" + + (mGsmSignalStrength)) + ", (mGsmBitErrorRate)) + ", (mUmtsRscp)) + ", (mCdmaDbm)) + ", (mCdmaEcio)) + ", (mEvdoDbm)) + ", (mEvdoEcio)) + ", (mEvdoSnr)) + ", (mLteSignalStrength)) + ", (mLteRsrp)) + ", (mLteRsrq)) + ", (mLteRssnr)) + ", (mLteRsrpBoost)) + ", (mTdScdmaRscp)) + ", (isGsm? "gsm|lte" : "cdma")) + ", (mUseOnlyRsrpForLteLevel? "use_only_rsrp_for_lte_level" : "use_rsrp_and_rssnr_for_lte_level")))) + ", (java.util.Arrays.toString(mUmtsRscpThresholds)) + ", (mUseOnlyRsrpForLteLevel? "use_only_rsrp_for_lte_level" : "use_rsrp_and_rssnr_for_lte_level")))) + ", (mUseOnlyRsrpForLteLevel? "use_only_rsrp_for_lte_level" : "use_rsrp_and_rssnr_for_lte_level")); }
public void setUmtsRscpThresholds(int[] umtsRscpThresholds) { if ((umtsRscpThresholds == null) || ((umtsRscpThresholds.length)!= (android.telephony.SignalStrength.UMTS_RSCP_THRESHOLDS_NUM))) { android.util.Log.wtf(android.telephony.SignalStrength.LOG_TAG, "setUmtsRscpThresholds - umtsRscpThresholds is invalid."); return; }java.lang.System.arraycopy(umtsRscpThresholds, 0, mUmtsRscpThresholds, 0, android.telephony.SignalStrength.UMTS_RSCP_THRESHOLDS_NUM); }
public void initialize(int gsmSignalStrength, int gsmBitErrorRate, int cdmaDbm, int cdmaEcio, int evdoDbm, int evdoEcio, int evdoSnr, boolean gsm) { initialize(gsmSignalStrength, gsmBitErrorRate, android.telephony.SignalStrength.INVALID, cdmaDbm, cdmaEcio, evdoDbm, evdoEcio, evdoSnr, 99, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, 0, gsm, false); }
public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mGsmSignalStrength); out.writeInt(mGsmBitErrorRate); out.writeInt(mUmtsRscp); out.writeInt(mCdmaDbm); out.writeInt(mCdmaEcio); out.writeInt(mEvdoDbm); out.writeInt(mEvdoEcio); out.writeInt(mEvdoSnr); out.writeInt(mLteSignalStrength); out.writeInt(mLteRsrp); out.writeInt(mLteRsrq); out.writeInt(mLteRssnr); out.writeInt(mLteCqi); out.writeInt(mTdScdmaRscp); out.writeInt((isGsm? 1 : 0)); out.writeInt((mUseOnlyRsrpForLteLevel? 1 : 0)); for (int i = 0; i < (android.telephony.SignalStrength.UMTS_RSCP_THRESHOLDS_NUM); i++) { out.writeInt(mUmtsRscpThresholds[i]); } }
public static android.telephony.SignalStrength makeSignalStrengthFromRilParcel(android.os.Parcel in) { if (android.telephony.SignalStrength.DBG) android.telephony.SignalStrength.log(("getSize of signalstrength parcel: " + (in.dataSize()))); android.telephony.SignalStrength ss = new android.telephony.SignalStrength(); ss.mGsmSignalStrength = in.readInt(); ss.mGsmBitErrorRate = in.readInt(); ss.mUmtsRscp = in.readInt(); ss.mCdmaDbm = in.readInt(); ss.mCdmaEcio = in.readInt(); ss.mEvdoDbm = in.readInt(); ss.mEvdoEcio = in.readInt(); ss.mEvdoSnr = in.readInt(); ss.mLteSignalStrength = in.readInt(); ss.mLteRsrp = in.readInt(); ss.mLteRsrq = in.readInt(); ss.mLteRssnr = in.readInt(); ss.mLteCqi = in.readInt(); ss.mTdScdmaRscp = in.readInt(); for (int i = 0; i < (android.telephony.SignalStrength.UMTS_RSCP_THRESHOLDS_NUM); i++) { ss.mUmtsRscpThresholds[i] = in.readInt(); } return ss; }
public void initialize(int gsmSignalStrength, int gsmBitErrorRate, int cdmaDbm, int cdmaEcio, int evdoDbm, int evdoEcio, int evdoSnr, int lteSignalStrength, int lteRsrp, int lteRsrq, int lteRssnr, int lteCqi, int lteRsrpBoost, boolean gsm, boolean useOnlyRsrpForLteLevel) { mGsmSignalStrength = gsmSignalStrength; mGsmBitErrorRate = gsmBitErrorRate; mCdmaDbm = cdmaDbm; mCdmaEcio = cdmaEcio; mEvdoDbm = evdoDbm; mEvdoEcio = evdoEcio; mEvdoSnr = evdoSnr; mLteSignalStrength = lteSignalStrength; mLteRsrp = lteRsrp; mLteRsrq = lteRsrq; mLteRssnr = lteRssnr; mLteCqi = lteCqi; mLteRsrpBoost = lteRsrpBoost; mTdScdmaRscp = android.telephony.SignalStrength.INVALID; isGsm = gsm; mUseOnlyRsrpForLteLevel = useOnlyRsrpForLteLevel; setUmtsRscpThresholds(getDefauUmtsRscpThresholds()); if (android.telephony.SignalStrength.DBG) android.telephony.SignalStrength.log(("initialize: " + (toString()))); }
static android.telephony.SignalStrength convertHalSignalStrength_1_2(android.hardware.radio.V1_2.SignalStrength signalStrength) { return new android.telephony.SignalStrength(signalStrength.gw.signalStrength, signalStrength.gw.bitErrorRate, signalStrength.gw.rscp, signalStrength.cdma.dbm, signalStrength.cdma.ecio, signalStrength.evdo.dbm, signalStrength.evdo.ecio, signalStrength.evdo.signalNoiseRatio, signalStrength.lte.signalStrength, signalStrength.lte.rsrp, signalStrength.lte.rsrq, signalStrength.lte.rssnr, signalStrength.lte.cqi, signalStrength.tdScdma.rscp, false); }
private void responseSignalStrength_1_2(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, android.hardware.radio.V1_2.SignalStrength sigStrength) { com.android.internal.telephony.RILRequest rr = mRil.processResponse(responseInfo); if (rr!= null) { android.telephony.SignalStrength ret = com.android.internal.telephony.RIL.convertHalSignalStrength_1_2(sigStrength); if ((responseInfo.error) == (android.hardware.radio.V1_0.RadioError.NONE)) { com.android.internal.telephony.RadioResponse.sendMessageResponse(rr.mResult, ret); } mRil.processResponseDone(rr, responseInfo, ret); } }
public void getSignalStrengthResponse_1_2(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, android.hardware.radio.V1_2.SignalStrength sigStrength) { responseSignalStrength_1_2(responseInfo, sigStrength); }
void copyFrom(android.telephony.SignalStrength s) { mGsmSignalStrength = s.mGsmSignalStrength; mGsmBitErrorRate = s.mGsmBitErrorRate; mCdmaDbm = s.mCdmaDbm; mCdmaEcio = s.mCdmaEcio; mEvdoDbm = s.mEvdoDbm; mEvdoEcio = s.mEvdoEcio; mEvdoSnr = s.mEvdoSnr; mLteSignalStrength = s.mLteSignalStrength; mLteRsrp = s.mLteRsrp; mLteRsrq = s.mLteRsrq; mLteRssnr = s.mLteRssnr; mLteCqi = s.mLteCqi; mLteRsrpBoost = s.mLteRsrpBoost; mTdScdmaRscp = s.mTdScdmaRscp; isGsm = s.isGsm; mUseOnlyRsrpForLteLevel = s.mUseOnlyRsrpForLteLevel; setUmtsRscpThresholds(s.mUmtsRscpThresholds); }
private int[] getUmtsRscpThresholds() { return getCarrierConfig().getIntArray(CarrierConfigManager.KEY_UMTS_RSCP_THRESHOLDS_INT_ARRAY); }
private int[] getDefauUmtsRscpThresholds() { return android.telephony.CarrierConfigManager.getDefaultConfig().getIntArray(CarrierConfigManager.KEY_UMTS_RSCP_THRESHOLDS_INT_ARRAY); }
@java.lang.Override public int hashCode() { int primeNum = 31; return ((((((((((((((((mGsmSignalStrength) * primeNum) + ((mGsmBitErrorRate) * primeNum)) + ((mUmtsRscp) * primeNum)) + ((mCdmaDbm) * primeNum)) + ((mCdmaEcio) * primeNum)) + ((mEvdoDbm) * primeNum)) + ((mEvdoEcio) * primeNum)) + ((mEvdoSnr) * primeNum)) + ((mLteSignalStrength) * primeNum)) + ((mLteRsrp) * primeNum)) + ((mLteRssnr) * primeNum)) + ((mLteCqi) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mTdScdmaRscp) * primeNum)) + (isGsm? 1 : 0)) + (mUseOnlyRsrpForLteLevel? 1 : 0)); }
@java.lang.Override void test() { if ((status) == (READY)) { com.android.cts.verifier.notifications.MockListener.MockListener.getInstance().requestListenerHints(MockListener.HINT_HOST_DISABLE_CALL_EFFECTS); status = RETEST; } else { int result = com.android.cts.verifier.notifications.MockListener.MockListener.getInstance().getCurrentListenerHints(); if (result == (com.android.cts.verifier.notifications.MockListener.MockListener.HINT_HOST_DISABLE_CALL_EFFECTS)) { status = PASS; next(); } else { logFail(); status = FAIL; } } }
@java.lang.Override void test() { if ((status) == (READY)) { com.android.cts.verifier.notifications.MockListener.MockListener.getInstance().requestUnbind(); status = RETEST; } else { if (((mNm.getEffectsSuppressor()) == null) && (!(com.android.cts.verifier.notifications.MockListener.MockListener.getInstance().isConnected))) { status = PASS; } else { if ((--(mRetries)) > 0) { status = RETEST; } else { logFail(); status = FAIL; } } next(); } }
@java.lang.Override void test() { if ((mNm.getEffectsSuppressor()) == null) { status = PASS; } else { status = FAIL; } }
@java.lang.Override void setUp() { mNm.setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_PRIORITY); android.app.NotificationManager.Policy policy = mNm.getNotificationPolicy(); policy = new android.app.NotificationManager.Policy(policy.priorityCategories, policy.priorityCallSenders, NotificationManager.Policy.PRIORITY_SENDERS_STARRED); mNm.setNotificationPolicy(policy); createChannels(); sendNotifications(com.android.cts.verifier.notifications.AttentionManagementVerifierActivity.MODE_URI, false, false); status = READY; }
private void dumpMetrics(java.io.FileDescriptor fd) { com.android.bluetooth.BluetoothMetricsProto.BluetoothLog.Builder metricsBuilder = BluetoothMetricsProto.BluetoothLog.newBuilder(); metricsBuilder.setNumBondedDevices(getBondedDevices().length); for (com.android.bluetooth.btservice.ProfileService profile : mRegisteredProfiles) { profile.dumpProto(metricsBuilder); } byte[] nativeMetricsBytes = dumpMetricsNative(); debugLog(("dumping native metrics size is " + (nativeMetricsBytes.length))); if ((nativeMetricsBytes.length) > 0) { try { metricsBuilder.mergeFrom(nativeMetricsBytes); } catch (com.google.protobuf. InvalidProtocolBufferException ex) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ("problem parsing metrics protobuf, " + (ex.getMessage()))); return; } } byte[] metricsBytes = android.util.Base64.encode(metricsBuilder.build(), Base64.DEFAULT); debugLog(("dumping combined metrics size is " + (metricsBytes.length))); try (java.io.FileOutputStream protoOut = newjava.io.FileOutputStream(fd)) { protoOut.write(metricsBytes); } catch (java.io.IOException e) { errorLog(("error writing combined protobuf to fd, " + (e.getMessage()))); } }
synchronized void recordScanStart(android.bluetooth.le.ScanSettings settings, boolean filtered, int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan existingScan = getScanFromScannerId(scannerId); if (existingScan!= null) { return; } (this.mScansStarted)++; startTime = android.os.SystemClock.elapsedRealtime(); com.android.bluetooth.gatt.AppScanStats.LastScan scan = new com.android.bluetooth.gatt.AppScanStats.LastScan(startTime, 0, false, false, filtered, scannerId); if (settings!= null) { scan.opportunistic = (settings.getScanMode()) == (android.bluetooth.le.ScanSettings.SCAN_MODE_OPPORTUNISTIC); scan.background = ((settings.getCallbackType()) & (android.bluetooth.le.ScanSettings.CALLBACK_TYPE_FIRST_MATCH))!= 0; } com.android.bluetooth.BluetoothMetricsProto.ScanEvent scanEvent = BluetoothMetricsProto.ScanEvent.newBuilder().setScanEventType(BluetoothMetricsProto.ScanEvent.ScanEventType.SCAN_EVENT_START).setScanTechnologyType(BluetoothMetricsProto.ScanEvent.ScanTechnologyType.SCAN_TECH_TYPE_LE).setEventTimeMillis(java.lang.System.currentTimeMillis()).setInitiator(truncateAppName(appName)).build(); mGattService.addScanEvent(scanEvent); mSessionNumScanResults = 0; if (!(isScanning())) { mScanStartTime = startTime; } try { boolean isUnoptimized =!(((scan.filtered) || (scan.background)) || (scan.opportunistic)); mBatteryStats.noteBleScanStarted(workSource, isUnoptimized); } catch (android.os.RemoteException e) { } mOngoingScans.put(scannerId, scan); }
void recordScanStop(int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan scan = getScanFromScannerId(scannerId); if (scan == null) { return; } (this.mScansStopped)++; stopTime = android.os.SystemClock.elapsedRealtime(); long scanDuration = (stopTime) - (scan.timestamp); scan.duration = scanDuration; if (scan.isSuspended) { long suspendDuration = (stopTime) - (scan.suspendStartTime); scan.suspendDuration += suspendDuration; mTotalSuspendTime += suspendDuration; } mOngoingScans.remove(scannerId); if ((mLastScans.size()) >= (com.android.bluetooth.gatt.AppScanStats.NUM_SCAN_DURATIONS_KEPT)) { mLastScans.remove(0); } mLastScans.add(scan); com.android.bluetooth.BluetoothMetricsProto.ScanEvent scanEvent = BluetoothMetricsProto.ScanEvent.newBuilder().setScanEventType(BluetoothMetricsProto.ScanEvent.ScanEventType.SCAN_EVENT_STOP).setScanTechnologyType(BluetoothMetricsProto.ScanEvent.ScanTechnologyType.SCAN_TECH_TYPE_LE).setEventTimeMillis(java.lang.System.currentTimeMillis()).setInitiator(truncateAppName(appName)).setNumberResults(mSessionNumScanResults).build(); mGattService.addScanEvent(scanEvent); mSessionNumScanResults = 0 ; if (!(isScanning())) { long totalDuration = (stopTime) - (mScanStartTime); mTotalScanTime += totalDuration; mMinScanTime =java.lang.Math.min(totalDuration, mMinScanTime); mMaxScanTime =java.lang.Math.max(totalDuration, mMaxScanTime); } try { boolean isUnoptimized =!(((scan.filtered) || (scan.background)) || (scan.opportunistic)); mBatteryStats.noteBleScanResults(workSource, ((scan.results) % 100)); mBatteryStats.noteBleScanStopped(workSource, isUnoptimized); } catch (android.os.RemoteException e) { } }
private void calculateMatch() { if ((mIsPeripheralAttached) && ((mSelectedProfile)!= null)) { com.android.cts.verifier.audio.peripheralprofile.ProfileButtonAttributes mButtonAttributes = mSelectedProfile.getButtonAttributes(); boolean match = mButtonAttributes!= null; boolean interceptedVolume = getResources().getBoolean(android.content.res.Resources.getSystem().getIdentifier("config_handleVolumeKeysInWindowManager", "bool", "android")); if (match && ((mButtonAttributes.mHasBtnA)!= (mHasBtnA))) { match = false; } if (match && ((mButtonAttributes.mHasBtnB)!= (mHasBtnB))) { match = false; } if (match && ((mButtonAttributes.mHasBtnC)!= (mHasBtnC))) { match = false; } android.util.Log.i(com.android.cts.verifier.audio.USBAudioPeripheralButtonsActivity.TAG, ("match:" + match)); getPassButton().setEnabled(match); } else { getPassButton().setEnabled(false); } }
public void testAlwaysOnVpnDisabled() throwsjava.lang.Exception { for (int i = 0; (i < 60) && ((mDevicePolicyManager.getAlwaysOnVpnPackage(com.android.cts.deviceandprofileowner.ADMIN_RECEIVER_COMPONENT))!= null); i++) {java.lang.Thread.sleep(1000); } assertNull(mDevicePolicyManager.getAlwaysOnVpnPackage(com.android.cts.deviceandprofileowner.ADMIN_RECEIVER_COMPONENT)); assertFalse(com.android.cts.deviceandprofileowner.vpn.VpnTestHelper.isNetworkVpn(mContext)); }
private synchronized boolean[] internal_isNfcEventAllowed(byte[] aid,java.lang.String[] packageNames, boolean checkRefreshTag) { if (checkRefreshTag) { try { updateAccessRuleIfNeed(false); } catch (java.io.IOException ignore) { } } int i = 0; boolean[] nfcEventFlags = new boolean[packageNames.length]; for (java.lang.String packageName : packageNames) { try {java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { nfcEventFlags[i] = false; } else { com.android.se.security.ChannelAccess channelAccess = getAccessRule(aid, appCerts); nfcEventFlags[i] = (channelAccess.getNFCEventAccess()) == (com.android.se.security.ChannelAccess.ACCESS.ALLOWED); } } catch (java.lang.Exception e) { android.util.Log.w(mTag, ("Invalid Access Rules for NFC: " + (e.getLocalizedMessage()))); nfcEventFlags[i] = false; } i++; } return nfcEventFlags; }
private void updateAccessRuleIfNeed(boolean distinguishTemporaryError) throwsjava.io.IOException { if ((mUseAra) && ((mAraController)!= null)) { try { mAraController.initialize(); mUseArf = false; mFullAccess = false; } catch (java.lang.Exception e) { if (distinguishTemporaryError) { if (e instanceofjava.io.IOException) { throw e; } } throw newjava.security.AccessControlException(("No ARA applet found in " + (mTerminal.getName()))); } } else if ((mUseArf) && ((mArfController)!= null)) { try { mArfController.initialize(); } catch (java.lang.Exception e) { if (distinguishTemporaryError) { if (e instanceofjava.io.IOException) { throw e; } } android.util.Log.e(mTag, e.getMessage()); } } }
private synchronized com.android.se.security.ChannelAccess internal_setUpChannelAccess(byte[] aid,java.lang.String packageName, boolean checkRefreshTag) throwsjava.security.AccessControlException { if ((packageName == null) || (packageName.isEmpty())) { throw newjava.security.AccessControlException("Package names must be specified"); } try {java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { throw newjava.security.AccessControlException("APPCerts certificates are invalid or do not exist."); } if (checkRefreshTag) { updateAccessRuleIfNeed(aid, appCerts); } return getAccessRule(aid, appCerts); } catch (java.io.IOException e) { throw e; } catch (java.lang.Throwable exp) { throw newjava.security.AccessControlException(exp.getMessage()); } }
public com.android.se.Channel openLogicalChannelWithoutChannelAccess(byte[] aid) throwsjava.io.IOException { try { return openLogicalChannel(null, aid, ((byte) (0)), null, null, 0); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (android.se.omapi.SEService.IO_ERROR)) { throw newjava.io.IOException(e.getMessage()); } throw e; } catch (android.os.RemoteException e) { throw newjava.io.IOException(e.getMessage()); } }
public com.android.se.security.ChannelAccess setUpChannelAccess(byte[] aid,java.lang.String packageName, boolean checkRefreshTag, int pid) { if ((mAccessControlEnforcer) == null) { android.util.Log.e(mTag, "Control Enforcer not properly set up"); } mAccessControlEnforcer.setPackageManager(mContext.getPackageManager()); synchronized(mLock) { try { com.android.se.security.ChannelAccess channelAccess = mAccessControlEnforcer.setUpChannelAccess(aid, packageName, checkRefreshTag); channelAccess.setCallingPid(pid); return channelAccess; } catch (java.io.IOException e) { throw new android.os.ServiceSpecificException(android.se.omapi.SEService.IO_ERROR, e.getMessage()); } catch (java.lang.Exception e) { throw newjava.lang.SecurityException(("Exception in setUpChannelAccess() " + e)); } } }
public byte[] exchangeAPDU(com.android.se.security.arf.pkcs15.EF ef, byte[] cmd) throws com.android.se.security.arf.SecureElementException,java.io.IOException { try { return mArfChannel.transmit(cmd); } catch (android.os.RemoteException e) { throw newjava.io.IOException(e.getMessage()); } catch (java.lang.Exception e) { if (e instanceof android.os.ServiceSpecificException) { if ((((android.os.ServiceSpecificException) (e)).errorCode) == (android.se.omapi.SEService.IO_ERROR)) { throw newjava.io.IOException(e.getMessage()); } } throw new com.android.se.security.arf.SecureElementException(("Element access error: " + (e.getLocalizedMessage()))); } }
private com.android.se.security.ResponseApdu send(com.android.se.security.CommandApdu cmdApdu) throwsjava.io.IOException { try { byte[] response = mChannel.transmit(cmdApdu.toBytes()); return new com.android.se.security.ResponseApdu(response); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (android.se.omapi.SEService.IO_ERROR)) { throw newjava.io.IOException(e.getMessage()); } throw e; } catch (android.os. RemoteException e) { throw newjava.io.IOException(e.getMessage()); } }
public com.android.se.Channel openLogicalArfChannel(byte[] aid) throwsjava.io.IOException { try { mArfChannel = mTerminalHandle.openLogicalChannelWithoutChannelAccess(aid); if ((mArfChannel) == null) { throw newjava.util.MissingResourceException("No channel was available", ""); } setUpChannelAccess(mArfChannel); return mArfChannel; } catch (java.io.IOException e) { throw e; } catch (java.lang.Exception e) { if (e instanceofjava.util.MissingResourceException) { android.util.Log.e(mTag, ("No channels left to access ARF: " + (e.getMessage()))); throw ((java.util.MissingResourceException) (e)); } else { android.util.Log.e(mTag, ("Error opening logical channel " + (e.getLocalizedMessage()))); } mArfChannel = null; return null; } }
private synchronized boolean[] internal_isNfcEventAllowed(byte[] aid,java.lang.String[] packageNames, boolean checkRefreshTag) { if (checkRefreshTag) { try { updateAccessRuleIfNeed(false); } catch (java.io.IOException ignore) { } } int i = 0; boolean[] nfcEventFlags = new boolean[packageNames.length]; for (java.lang.String packageName : packageNames) { try {java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { nfcEventFlags[i] = false; } else { com.android.se.security.ChannelAccess channelAccess = getAccessRule(aid, appCerts); nfcEventFlags[i] = (channelAccess.getNFCEventAccess()) == (com.android.se.security.ChannelAccess.ACCESS.ALLOWED); } } catch (java.lang.Exception e) { android.util.Log.w(mTag, ("Invalid Access Rules for NFC: " + (e.getLocalizedMessage()))); nfcEventFlags[i] = false; } i++; } return nfcEventFlags; }
private synchronized com.android.se.security.ChannelAccess internal_setUpChannelAccess(byte[] aid,java.lang.String packageName, boolean checkRefreshTag) throwsjava.io.IOException { if ((packageName == null) || (packageName.isEmpty())) { throw newjava.security.AccessControlException("Package names must be specified"); } try {java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { throw newjava.security.AccessControlException("APPCerts certificates are invalid or do not exist."); } if (checkRefreshTag) { updateAccessRuleIfNeed(true); } return getAccessRule(aid, appCerts); } catch (java.io.IOException e) { throw e; } catch (java.util.MissingResourceException e) { throw e; } catch (java.lang.Throwable exp) { throw newjava.security.AccessControlException(exp.getMessage()); } }
private void updateAccessRuleIfNeed(boolean distinguishTemporaryError) throwsjava.io.IOException { if ((mUseAra) && ((mAraController)!= null)) { try { mAraController.initialize(); mUseArf = false; mFullAccess = false; } catch (java.lang.Exception e) { if (distinguishTemporaryError) { if (e instanceofjava.io.IOException) { throw e; } else if (e instanceofjava.util.MissingResourceException) { throw e; } } throw newjava.security.AccessControlException(("No ARA applet found in " + (mTerminal.getName()))); } }
private byte[] transmitInternal(byte[] cmd) throws android.os.RemoteException {java.util.ArrayList<java.lang.Byte> response = mSEHal.transmit(byteArrayToArrayList(cmd)); if (response.isEmpty()) { throw new android.os.ServiceSpecificException(android.se.omapi.SEService.IO_ERROR, "No response in transmit()"); } byte[] rsp = arrayListToByteArray(response); if (DEBUG) { android.util.Log.i(mTag, ("transmit : " + (com.android.se.internal.ByteArrayConverter.byteArrayToHexString(cmd)))); android.util.Log.i(mTag, ("transmit : " + (com.android.se.internal.ByteArrayConverter.byteArrayToHexString(rsp)))); } return rsp; }
@java.lang.Override public void enter() { sendMessageDelayed(com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT, com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT_DELAY); mAdapterService.startCoreServices(); }
void startCoreServices() { debugLog("startCoreServices()");java.lang.Class[] supportedProfileServices = com.android.bluetooth.btservice.Config.getSupportedProfiles(); if (((supportedProfileServices.length) == 1) && (((mRunningProfiles.size()) == 1) && (com.android.bluetooth.gatt.GattService.class.getSimpleName().equals(mRunningProfiles.get(0).getName())))) { mAdapterStateMachine.sendMessage(AdapterState.BREDR_STARTED); } else { setAllProfileServiceStates(supportedProfileServices, BluetoothAdapter.STATE_ON); } }
void stopGattProfileService() { mAdapterProperties.onBleDisable(); if ((mRunningProfiles.size()) == 0) { debugLog("stopGattProfileService() - No profiles services to stop."); mAdapterStateMachine.sendMessage(AdapterState.BLE_STOPPED); } setProfileServiceState(com.android.bluetooth.gatt.GattService.class, BluetoothAdapter.STATE_OFF); }
boolean stopGattProfileService() { mAdapterProperties.onBleDisable(); if ((mRunningProfiles.size()) == 0) { debugLog("stopGATTProfileService() - No profiles services to stop."); mAdapterStateMachine.sendMessage(AdapterState.BLE_STOPPED); } setProfileServiceState(com.android.bluetooth.gatt.GattService.class, BluetoothAdapter.STATE_OFF); return true; }
boolean enableNativeFromStateMachine() { boolean isGuest = android.os.UserManager.get(this).isGuestUser(); android.util.Log.d("ATST", ("enableNativeUser() - isGuest = " + isGuest)); return enableNative(isGuest); }
public void onBrEdrDown() { mAdapterStateMachine.sendMessage(AdapterState.BLE_TURN_OFF); }
void stateChangeCallback(int status) { if (status == (AbstractionLayer.BT_STATE_OFF)) { mAdapterStateMachine.sendMessage(AdapterState.DISABLED_NATIVE); } else if (status == (AbstractionLayer.BT_STATE_ON)) { mAdapterStateMachine.sendMessage(AdapterState.ENABLED_NATIVE); } else { android.util.Log.e("TAG", (("Incorrect status " + status) + " in stateChangeCallback")); } }
@java.lang.Override public boolean processMessage(android.os.Message msg) { switch (msg.what) { case com.android.bluetooth.btservice.AdapterState.BLE_STARTED : mAdapterService.enableNativeFromStateMachine(); break; case com.android.bluetooth.btservice.AdapterState.ENABLED_NATIVE : transitionTo(mBleOnState); break; case com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT : errorLog(messageString(msg.what))); transitionTo(mOffState); break; default : infoLog(("Unknown message - " + (messageString(msg.what)))); return false; } return true; }
javajava.lang.String messageString(int message) { switch (message) { case com.android.bluetooth.btservice.AdapterState.BLE_TURN_ON : return "BLE_TURN_ON"; case com.android.bluetooth.btservice.AdapterState.USER_TURN_ON : return "USER_TURN_ON"; case com.android.bluetooth.btservice.AdapterState.BREDR_STARTED : return "BREDR_STARTED"; case com.android.bluetooth.btservice.AdapterState.ENABLED_NATIVE : return "ENABLED_NATIVE"; case com.android.bluetooth.btservice.AdapterState.BLE_STARTED : return "BLE_STARTED"; case com.android.bluetooth.btservice.AdapterState.USER_TURN_OFF : return "USER_TURN_OFF"; case com.android.bluetooth.btservice.AdapterState.BLE_TURN_OFF : return "BLE_TURN_OFF"; case com.android.bluetooth.btservice.AdapterState.DISABLED_NATIVE : return "DISABLED_NATIVE"; case com.android.bluetooth.btservice.AdapterState.BLE_STOPPED : return "BLE_STOPPED"; case com.android.bluetooth.btservice.AdapterState.BREDR_STOPPED : return "BREDR_STOPPED"; case com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT : return "BLE_START_TIMEOUT"; case com.android.bluetooth.btservice.AdapterState.BLE_STOP_TIMEOUT : return "BLE_STOP_TIMEOUT"; case com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT : return "BREDR_START_TIMEOUT"; case com.android.bluetooth.btservice.AdapterState.BREDR_STOP_TIMEOUT : return "BREDR_STOP_TIMEOUT"; default : return (messageString(message)) + ")" ; } }
@java.lang.Override public void exit() { removeMessages(com.android.bluetooth.btservice.AdapterState.BREDR_STOP_TIMEOUT); }
@java.lang.Override public void exit() { removeMessages(com.android.bluetooth.btservice.AdapterState.BLE_STOP_TIMEOUT); }
@java.lang.Override public boolean processMessage(android.os.Message msg) { switch (msg.what) { case com.android.bluetooth.btservice.AdapterState.BLE_STOPPED : transitionTo(mOffState); break; case com.android.bluetooth.btservice.AdapterState.DISABLED_NATIVE : mAdapterService.stopGattProfileService(); break; case com.android.bluetooth.btservice.AdapterState.BLE_STOP_TIMEOUT : errorLog(messageString(msg.what)); transitionTo(mOffState); break; default : infoLog(("Unhandled message - " + (messageString(msg.what)))); return false; } return true; }
@java.lang.Override public void exit() { removeMessages(com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT); }
@java.lang.Override public void enter() { mAdapterService.updateUuids(); mAdapterService.setBluetoothClassFromConfig(); }
@java.lang.Override public void enter() { sendMessageDelayed(com.android.bluetooth.btservice.AdapterState.BLE_STOP_TIMEOUT, com.android.bluetooth.btservice.AdapterState.BLE_STOP_TIMEOUT_DELAY); mAdapterService.disableNative(); }
@java.lang.Override public boolean processMessage(android.os.Message msg) { switch (msg.what) { case com.android.bluetooth.btservice.AdapterState.BREDR_STARTED : transitionTo(mOnState); break; case com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT : errorLog(messageString(msg.what)); transitionTo(mBleOnState); break; default : infoLog(("Unhandled message - " + (messageString(msg.what)))); return false; } return true; }
@java.lang.Override public void enter() { mAdapterService.bleOnProcessStart(); sendMessageDelayed(com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT, com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT_DELAY); }
private com.android.bluetooth.hearingaid.HearingAidStateMachine getOrCreateStateMachine(android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, "getOrCreateStateMachine failed: device cannot be null"); return null; } synchronized(mStateMachines) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm!= null) { return sm; } if ((mStateMachines.size()) > (com.android.bluetooth.hearingaid.HearingAidService.MAX_HearingAid_STATE_MACHINES)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ("Maximum number of HearingAid state machines reached: " + (com.android.bluetooth.hearingaid.HearingAidService.MAX_HearingAid_STATE_MACHINES))); return null; } if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ("Creating a new state machine for " + device)); } sm = com.android.bluetooth.hearingaid.HearingAidStateMachine.make(device, this, mHearingAidNativeInterface, mStateMachinesThread.getLooper()); mStateMachines.put(device, sm); return sm; } }
@java.lang.Override public void exit() { if (com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, ((("Exit Disconnected(" + (mDevice)) + "): ") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); } mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; }
public void doQuit() { if (com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, ("doQuit for device " + (mDevice))); } quitNow(); }
@java.lang.Override public void enter() { android.util.Log.i(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, ((("Enter Disconnected(" + (mDevice)) + "): ") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); mConnectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; removeDeferredMessages(com.android.bluetooth.hearingaid.HearingAidStateMachine.DISCONNECT); removeMessages(com.android.bluetooth.hearingaid.HearingAidStateMachine.CONNECT_TIMEOUT); if ((mLastConnectionState)!= (-1)) { broadcastConnectionState(mConnectionState, mLastConnectionState); if (mIsPlaying) { android.util.Log.i(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, ("Disconnected: stopped playing: " + (mDevice))); mIsPlaying = false; broadcastAudioState(BluetoothHearingAid.STATE_NOT_PLAYING, BluetoothHearingAid.STATE_PLAYING); } } }
@java.lang.Override public void exit() { if (com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, ((("Exit Connected(" + (mDevice)) + "): ") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); } mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTED; }
static com.android.bluetooth.hearingaid.HearingAidStateMachine make(android.bluetooth.BluetoothDevice device, com.android.bluetooth.hearingaid.HearingAidService svc, com.android.bluetooth.hearingaid.HearingAidNativeInterface hearingAidNativeInterface, android.os.Looper looper) { android.util.Log.i(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, ("make for device " + device)); com.android.bluetooth.hearingaid.HearingAidStateMachine HearingAidSm = new com.android.bluetooth.hearingaid.HearingAidStateMachine(device, svc, hearingAidNativeInterface, looper); HearingAidSm.start(); return HearingAidSm; }
private void broadcastConnectionState(int newState, int prevState) { if (com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, ((((("Connection state " + (mDevice)) + ": ") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.profileStateToString(prevState))) + "->") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.profileStateToString(newState)))); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, newState); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mDevice); intent.addFlags(((android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT) | (android.content.Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND))); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }
@java.lang.Override public void exit() { if (com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, ((("Exit Disconnecting(" + (mDevice)) + "): ") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); } mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTING; removeMessages(com.android.bluetooth.hearingaid.HearingAidStateMachine.CONNECT_TIMEOUT); }
@java.lang.Override public void exit() { if (com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, ((("Exit Connecting(" + (mDevice)) + "): ") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); } mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTING; removeMessages(com.android.bluetooth.hearingaid.HearingAidStateMachine.CONNECT_TIMEOUT); }
private staticjava.lang.String audioStateToString(int state) { switch (state) { case android.bluetooth.BluetoothHearingAid.STATE_PLAYING : return "PLAYING"; case android.bluetooth.BluetoothHearingAid.STATE_NOT_PLAYING : return "NOT_PLAYING"; default : break; } returnjava.lang.Integer.toString(state); }
public void cleanup() { if (com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, ("cleanup for device " + (mDevice))); } }
@org.junit.Before public void setUp() throwsjava.lang.Exception { mTargetContext = android.support.test.InstrumentationRegistry.getTargetContext(); org.junit.Assume.assumeTrue("Ignore test when HearingAidService is not enabled", mTargetContext.getResources().getBoolean(R.bool.profile_supported_hearing_aid)); org.mockito.MockitoAnnotations.initMocks(this); com.android.bluetooth.TestUtils.setAdapterService(mAdapterService); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice("00:01:02:03:04:05"); mHandlerThread = new android.os.HandlerThread("HearingAidStateMachineTestHandlerThread"); mHandlerThread.start(); mHearingAidStateMachine = new com.android.bluetooth.hearingaid.HearingAidStateMachine(mTestDevice, mHearingAidService, mHearingAidNativeInterface, mHandlerThread.getLooper()); mHearingAidStateMachine.sConnectTimeoutMs = 1000; mHearingAidStateMachine.start(); }
@java.lang.Override public void enter() { android.util.Log.i(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, ((("Enter Connected(" + (mDevice)) + "): ") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); mConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTED; removeDeferredMessages(com.android.bluetooth.hearingaid.HearingAidStateMachine.CONNECT); broadcastConnectionState(mConnectionState, mLastConnectionState); broadcastAudioState(BluetoothHearingAid.STATE_NOT_PLAYING, BluetoothHearingAid.STATE_PLAYING); }
private synchronized void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { return; } if ((toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && ((getConnectedDevices().size()) == 1)) { setActiveDevice(device); } if ((toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) && ((getConnectedDevices().size()) == 0)) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { removeStateMachine(device); } } }
@java.lang.Override protected boolean start() { android.util.Log.i(com.android.bluetooth.hearingaid.HearingAidService.TAG, "start()"); if ((mHearingAidService)!= null) { throw newjava.lang.IllegalStateException("start() called twice"); } mAdapter =java.util.Objects.requireNonNull(android.bluetooth.BluetoothAdapter.getDefaultAdapter(), "BluetoothAdapter cannot be null when HearingAidService starts"); mAdapterService =java.util.Objects.requireNonNull(com.android.bluetooth.btservice.AdapterService.getAdapterService(), "BluetoothAdapterService cannot be null when HearingAidService starts"); mHearingAidNativeInterface =java.util.Objects.requireNonNull(com.android.bluetooth.hearingaid.HearingAidNativeInterface.getInstance(), "BluetoothAdapter cannot be null when HearingAidService starts"); mStateMachines.clear(); mStateMachinesThread = new android.os.HandlerThread("HearingAidService.StateMachines"); mStateMachinesThread.start(); mHearingAidNativeInterface.init(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED); mBondStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.BondStateChangedReceiver(); registerReceiver(mBondStateChangedReceiver, filter); filter = new android.content.IntentFilter(); filter.addAction(BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED); mConnectionStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.ConnectionStateChangedReceiver(); registerReceiver(mConnectionStateChangedReceiver, filter); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(this); setActiveDevice(null); return true; }
javajava.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_PERM, "Need BLUETOOTH permission"); synchronized(mStateMachines) {java.util.List<android.bluetooth.BluetoothDevice> devices = newjava.util.ArrayList<android.bluetooth.BluetoothDevice>();java.util.Set<android.bluetooth.BluetoothDevice> bondedDevices = mAdapter.getBondedDevices(); for (android.bluetooth.BluetoothDevice device : bondedDevices) { android.os.ParcelUuid[] featureUuids = device.getUuids(); if (!(android.bluetooth.BluetoothUuid.isUuidPresent(featureUuids, BluetoothUuid.AudioSink))) { continue; } int connectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm!= null) { connectionState = sm.getConnectionState(); } for (int i = 0; i < (states.length); i++) { if (connectionState == (states[i])) { devices.add(device); } } } return devices; } }
@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public boolean okToConnect(android.bluetooth.BluetoothDevice device) { if (!(connectionAllowedCheckMaxDevices(device))) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (("connecting to " + device) + " : too many connected devices")); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); if ((priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE))) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((((("connecting to " + device) + " : priority=") + priority) + " bondState=") + bondState)); return false; } if (priority <= (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((((("connecting to " + device) + " : priority=") + priority) + " bondState=") + bondState)); return false; } return true; }
@java.lang.Override protected boolean stop() { android.util.Log.i(com.android.bluetooth.hearingaid.HearingAidService.TAG, "stop()"); if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) == null) { android.util.Log.w(com.android.bluetooth.hearingaid.HearingAidService.TAG, "stop() called before start()"); return true; } setActiveDevice(null); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(null); unregisterReceiver(mBondStateChangedReceiver); mBondStateChangedReceiver = null; unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedReceiver = null; mHearingAidNativeInterface.cleanup(); mHearingAidNativeInterface = null; synchronized(mStateMachines) { for (com.android.bluetooth.hearingaid.HearingAidStateMachine sm : mStateMachines.values()) { sm.doQuit(); sm.cleanup(); } mStateMachines.clear(); } if ((mStateMachinesThread)!= null) { mStateMachinesThread.quitSafely(); mStateMachinesThread = null; } mAdapterService = null; mAdapter = null; return true; }
public synchronized boolean setActiveDevice(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (device!= null) { com.android.bluetooth.a2dp.A2dpService a2dpService = com.android.bluetooth.a2dp.A2dpService.getA2dpService(); a2dpService.setActiveDevice(null); } mActiveDevice = device; return true; }
@java.lang.Override public void setVolume(int volume) { volume = ((volume * 512) / 100) - 128; com.android.bluetooth.hearingaid.HearingAidNativeInterface.setVolume(volume); }
boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ("disconnect " + device)); } int customerId = mDeviceMap.get(device); for (android.bluetooth.BluetoothDevice storedDevice : mDeviceMap.keySet()) { if ((mDeviceMap.get(storedDevice))!= customerId) { continue; } synchronized(mStateMachines) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ("disconnect disconnect request for " + device) + " : no state machine"); continue; } sm.sendMessage(HearingAidStateMachine.DISCONNECT); } } return true; }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (!(BluetoothDevice.ACTION_BOND_STATE_CHANGED.equals(intent.getAction()))) { return; } int state = intent.getIntExtra(BluetoothDevice.EXTRA_BOND_STATE, BluetoothDevice.ERROR); android.bluetooth.BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (("Bluetooth state changed for device: " + device) + " state: ") + state)); } if (state!= (android.bluetooth.BluetoothDevice.BOND_NONE)) { return; } synchronized(mStateMachines) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm == null) { return; } if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ("Removing state machine for device: " + device)); } sm.doQuit(); sm.cleanup(); mStateMachines.remove(device); } }
@java.lang.Override protected void cleanup() { android.util.Log.i(com.android.bluetooth.hearingaid.HearingAidService.TAG, "cleanup()"); }
@java.lang.Override protected void create() { android.util.Log.i(com.android.bluetooth.hearingaid.HearingAidService.TAG, "create()"); }
static android.telephony.SignalStrength convertHalSignalStrength(android.hardware.radio.V1_0.SignalStrength signalStrength) { int tdscdmaRsrp_1_2 = 255; if (((signalStrength.tdScdma.rscp) >= 25) && ((signalStrength.tdScdma.rscp) <= 120)) { tdscdmaRsrp_1_2 = 120 - (signalStrength.tdScdma.rscp); } return new android.telephony.SignalStrength(signalStrength.gw.signalStrength, signalStrength.gw.bitErrorRate, signalStrength.cdma.dbm, signalStrength.cdma.ecio, signalStrength.evdo.dbm, signalStrength.evdo.ecio, signalStrength.evdo.signalNoiseRatio, signalStrength.lte.signalStrength, signalStrength.lte.rsrp, signalStrength.lte.rsrq, signalStrength.lte.rssnr, signalStrength.lte.cqi, tdscdmaRsrp_1_2); }
static android.telephony.SignalStrength convertHalSignalStrength_1_2(android.hardware.radio.V1_2.SignalStrength signalStrength) { return new android.telephony.SignalStrength(signalStrength.gsm.signalStrength, signalStrength.gsm.bitErrorRate, signalStrength.cdma.dbm, signalStrength.cdma.ecio, signalStrength.evdo.dbm, signalStrength.evdo.ecio, signalStrength.evdo.signalNoiseRatio, signalStrength.lte.signalStrength, signalStrength.lte.rsrp, signalStrength.lte.rsrq, signalStrength.lte.rssnr, signalStrength.lte.cqi, tdscdmaRsrp_1_2); }
public android.telephony.SignalStrength getTdScdmaSignalStrength_1_0(int tdscdmaNegDbm) { android.hardware.radio.V1_0.SignalStrength halSs = new android.hardware.radio.V1_0.SignalStrength(); halSs.lte.signalStrength = com.android.internal.telephony.RILTest.SIGNAL_STRENGTH; halSs.lte.rsrp = com.android.internal.telephony.RILTest.RSRP; halSs.lte.rsrq = com.android.internal.telephony.RILTest.RSRQ; halSs.lte.rssnr = com.android.internal.telephony.RILTest.RSSNR; halSs.gw.signalStrength = com.android.internal.telephony.RILTest.SIGNAL_STRENGTH; halSs.gw.bitErrorRate = com.android.internal.telephony.RILTest.BIT_ERROR_RATE; halSs.cdma.dbm = com.android.internal.telephony.RILTest.DBM; halSs.cdma.ecio = com.android.internal.telephony.RILTest.ECIO; halSs.evdo.dbm = com.android.internal.telephony.RILTest.DBM; halSs.evdo.ecio = com.android.internal.telephony.RILTest.ECIO; halSs.evdo.signalNoiseRatio = com.android.internal.telephony.RILTest.SIGNAL_NOICE_RATIO; halSs.tdScdma.rscp = tdscdmaNegDbm; return com.android.internal.telephony.RIL.convertHalSignalStrength(halSs); }
public android.telephony.SignalStrength getTdScdmaSignalStrength_1_2(int tdscdmaAsu) { android.hardware.radio.V1_2.SignalStrength halSs = new android.hardware.radio.V1_2.SignalStrength(); halSs.lte.signalStrength = com.android.internal.telephony.RILTest.SIGNAL_STRENGTH; halSs.lte.rsrp = com.android.internal.telephony.RILTest.RSRP; halSs.lte.rsrq = com.android.internal.telephony.RILTest.RSRQ; halSs.lte.rssnr = com.android.internal.telephony.RILTest.RSSNR; halSs.gsm.signalStrength = com.android.internal.telephony.RILTest.SIGNAL_STRENGTH; halSs.gsm.bitErrorRate = com.android.internal.telephony.RILTest.BIT_ERROR_RATE; halSs.cdma.dbm = com.android.internal.telephony.RILTest.DBM; halSs.cdma.ecio = com.android.internal.telephony.RILTest.ECIO; halSs.evdo.dbm = com.android.internal.telephony.RILTest.DBM; halSs.evdo.ecio = com.android.internal.telephony.RILTest.ECIO; halSs.evdo.signalNoiseRatio = com.android.internal.telephony.RILTest.SIGNAL_NOICE_RATIO; halSs.tdScdma.rscp = tdscdmaAsu; return com.android.internal.telephony.RIL.convertHalSignalStrength_1_2(halSs); }
private static void arraycopy(float[] src, int srcPos, float[] dst, int dstPos, int length) { if (src == null) { throw newjava.lang.NullPointerException("src == null"); } if (dst == null) { throw newjava.lang.NullPointerException("dst == null"); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw newjava.lang.ArrayIndexOutOfBoundsException(((((((((("src.length=" + (src.length)) + ", srcPos=") + srcPos) + ", dst.length=") + (dst.length)) + ", dstPos=") + dstPos) + ", length=") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_FLOAT_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else {java.lang.System.arraycopyFloatUnchecked(src, srcPos, dst, dstPos, length); } }
private static void arraycopy(long[] src, int srcPos, long[] dst, int dstPos, int length) { if (src == null) { throw newjava.lang.NullPointerException("src == null"); } if (dst == null) { throw newjava.lang.NullPointerException("dst == null"); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw newjava.lang.ArrayIndexOutOfBoundsException(((((((((("src.length=" + (src.length)) + ", srcPos=") + srcPos) + ", dst.length=") + (dst.length)) + ", dstPos=") + dstPos) + ", length=") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_LONG_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else {java.lang.System.arraycopyLongUnchecked(src, srcPos, dst, dstPos, length); } }
private static void arraycopy(char[] src, int srcPos, char[] dst, int dstPos, int length) { if (src == null) { throw newjava.lang.NullPointerException("src == null"); } if (dst == null) { throw newjava.lang.NullPointerException("dst == null"); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw newjava.lang.ArrayIndexOutOfBoundsException(((((((((("src.length=" + (src.length)) + ", srcPos=") + srcPos) + ", dst.length=") + (dst.length)) + ", dstPos=") + dstPos) + ", length=") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_CHAR_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else {java.lang.System.arraycopyCharUnchecked(src, srcPos, dst, dstPos, length); } }
private static void arraycopy(byte[] src, int srcPos, byte[] dst, int dstPos, int length) { if (src == null) { throw newjava.lang.NullPointerException("src == null"); } if (dst == null) { throw newjava.lang.NullPointerException("dst == null"); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw newjava.lang.ArrayIndexOutOfBoundsException(((((((((("src.length=" + (src.length)) + ", srcPos=") + srcPos) + ", dst.length=") + (dst.length)) + ", dstPos=") + dstPos) + ", length=") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_BYTE_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else {java.lang.System.arraycopyByteUnchecked(src, srcPos, dst, dstPos, length); } }
private static void arraycopy(double[] src, int srcPos, double[] dst, int dstPos, int length) { if (src == null) { throw newjava.lang.NullPointerException("src == null"); } if (dst == null) { throw newjava.lang.NullPointerException("dst == null"); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw newjava.lang.ArrayIndexOutOfBoundsException(((((((((("src.length=" + (src.length)) + ", srcPos=") + srcPos) + ", dst.length=") + (dst.length)) + ", dstPos=") + dstPos) + ", length=") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_DOUBLE_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else {java.lang.System.arraycopyDoubleUnchecked(src, srcPos, dst, dstPos, length); } }
private static void arraycopy(boolean[] src, int srcPos, boolean[] dst, int dstPos, int length) { if (src == null) { throw newjava.lang.NullPointerException("src == null"); } if (dst == null) { throw newjava.lang.NullPointerException("dst == null"); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw newjava.lang.ArrayIndexOutOfBoundsException(((((((((("src.length=" + (src.length)) + ", srcPos=") + srcPos) + ", dst.length=") + (dst.length)) + ", dstPos=") + dstPos) + ", length=") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_BOOLEAN_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else {java.lang.System.arraycopyBooleanUnchecked(src, srcPos, dst, dstPos, length); } }
private static void arraycopy(short[] src, int srcPos, short[] dst, int dstPos, int length) { if (src == null) { throw newjava.lang.NullPointerException("src == null"); } if (dst == null) { throw newjava.lang.NullPointerException("dst == null"); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw newjava.lang.ArrayIndexOutOfBoundsException(((((((((("src.length=" + (src.length)) + ", srcPos=") + srcPos) + ", dst.length=") + (dst.length)) + ", dstPos=") + dstPos) + ", length=") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_SHORT_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else {java.lang.System.arraycopyShortUnchecked(src, srcPos, dst, dstPos, length); } }
private static void arraycopy(int[] src, int srcPos, int[] dst, int dstPos, int length) { if (src == null) { throw newjava.lang.NullPointerException("src == null"); } if (dst == null) { throw newjava.lang.NullPointerException("dst == null"); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw newjava.lang.ArrayIndexOutOfBoundsException(((((((((("src.length=" + (src.length)) + ", srcPos=") + srcPos) + ", dst.length=") + (dst.length)) + ", dstPos=") + dstPos) + ", length=") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_INT_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else {java.lang.System.arraycopyIntUnchecked(src, srcPos, dst, dstPos, length); } }
int getDexFlags(android.content.pm.ApplicationInfo info,java.lang.String compilerFilter, com.android.server.pm.dex.DexoptOptions options) { int flags = info.flags; boolean debuggable = (flags & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE))!= 0; boolean isProfileGuidedFilter = dalvik.system.DexFile.isProfileGuidedCompilerFilter(compilerFilter); boolean isPublic = (!(info.isForwardLocked())) && ((!isProfileGuidedFilter) || (options.isDexoptInstallWithDexMetadata())); int profileFlag = (isProfileGuidedFilter)? com.android.server.pm.Installer.DEXOPT_PROFILE_GUIDED : 0; int hiddenApiFlag = (info.isAllowedToUseHiddenApi())? 0 : com.android.server.pm.Installer.DEXOPT_ENABLE_HIDDEN_API_CHECKS; final int compilationReason = options.getCompilationReason(); final boolean generateCompactDex = ((compilationReason!= (PackageManagerService.REASON_FIRST_BOOT)) && (compilationReason!= (PackageManagerService.REASON_BOOT))) && (compilationReason!= (PackageManagerService.REASON_INSTALL)); int dexFlags = ((((isPublic? com.android.server.pm.Installer.DEXOPT_PUBLIC : 0) | (debuggable? com.android.server.pm.Installer.DEXOPT_DEBUGGABLE : 0)) | profileFlag) | (options.isBootComplete()? com.android.server.pm.Installer.DEXOPT_BOOTCOMPLETE : 0)) | (options.isDexoptIdleBackgroundJob()? com.android.server.pm.Installer.DEXOPT_IDLE_BACKGROUND_JOB : 0)) | (generateCompactDex? com.android.server.pm.Installer.DEXOPT_GENERATE_COMPACT_DEX : 0)) | hiddenApiFlag; return adjustDexoptFlags(dexFlags); }
public static boolean updateBandwidths(int[] bandwidths, android.telephony.ServiceState serviceState) { if (bandwidths == null) { return false; } int ssAggregateBandwidth = 0; int[] ssBandwidths = serviceState.getCellBandwidths(); if (ssBandwidths!= null) { for (int bw : ssBandwidths) { ssAggregateBandwidth += bw; } } int newAggregateBandwidth = 0; for (int bw : bandwidths) { newAggregateBandwidth += bw; } if (newAggregateBandwidth > ssAggregateBandwidth) { serviceState.setCellBandwidths(bandwidths); return true; } return false; }
public void ratchet(android.telephony.ServiceState oldSS, android.telephony.ServiceState newSS) { int newVoiceRat = ratchetRat(oldSS.getRilVoiceRadioTechnology(), newSS.getRilVoiceRadioTechnology()); int newDataRat = ratchetRat(oldSS.getRilDataRadioTechnology(), newSS.getRilDataRadioTechnology()); boolean newUsingCA = (oldSS.isUsingCarrierAggregation()) || (newSS.isUsingCarrierAggregation()); if (isSameRatFamily(oldSS, newSS)) { com.android.internal.telephony.RatRatcheter.updateBandwidths(oldSS.getCellBandwidths(), newSS); } newSS.setRilVoiceRadioTechnology(newVoiceRat); newSS.setRilDataRadioTechnology(newDataRat); newSS.setIsUsingCarrierAggregation(newUsingCA); }
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "14578821") public void testVideoCapture() throwsjava.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); if ((testFramework.getApi()) >= 24) { boolean videoTestSuccess = useCamera(instrumentation, "Video"); org.junit.Assert.assertTrue("New video was not deleted from the gallery", videoTestSuccess); } }
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "14578821") public void testPhotoCapture() throwsjava.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); final android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); if ((testFramework.getApi()) >= 24) { boolean photoTestSuccess = useCamera(instrumentation, "Camera"); org.junit.Assert.assertTrue("Photo captured, photo was not deleted from the gallery", photoTestSuccess); } }
private void launchInputActivity(int slotId) { android.content.Intent newIntent = new android.content.Intent(android.content.Intent.ACTION_VIEW);java.lang.String targetActivity = com.android.stk.StkAppService.STK_INPUT_ACTIVITY_NAME;java.lang.String uriString = (com.android.stk.StkAppService.STK_INPUT_URI) + (java.lang.System.currentTimeMillis()); android.net.Uri uriData = android.net.Uri.parse(uriString); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, ("launchInputActivity slotId: " + slotId)); newIntent.setFlags(((android.content.Intent.FLAG_ACTIVITY_NEW_TASK) | (getFlagActivityNoUserAction(com.android.stk.StkAppService.InitiatedByUserAction.unknown, slotId)))); newIntent.setClassName(com.android.stk.StkAppService.PACKAGE_NAME, targetActivity); newIntent.putExtra("INPUT", mStkContext[slotId].mCurrentCmd.geInput()); newIntent.putExtra(com.android.stk.StkAppService.SLOT_ID, slotId); newIntent.setData(uriData); startActivity(newIntent); }
@java.lang.Override protected void onRestoreInstanceState(android.os.Bundle savedInstanceState) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ("onRestoreInstanceState " + (mSlotId))); mState = savedInstanceState.getInt(com.android.stk.StkMenuActivity.STATE_KEY); mStkMenu = savedInstanceState.getParcelable(com.android.stk.StkMenuActivity.MENU_KEY); mAcceptUsersInput = savedInstanceState.getBoolean(com.android.stk.StkMenuActivity.ACCEPT_USERS_INPUT_KEY); mIsResponseSent = savedInstanceState.getBoolean(com.android.stk.StkMenuActivity.RESPONSE_SENT_KEY); }
@java.lang.Override public void onCreate(android.os.Bundle savedInstanceState) { super.onCreate(savedInstanceState); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "onCreate"); android.app.ActionBar actionBar = getActionBar(); actionBar.setCustomView(R.layout.stk_title); actionBar.setDisplayShowCustomEnabled(true); setContentView(R.layout.stk_menu_list); mInstance = this; mTitleTextView = ((android.widget.TextView) (findViewById(R.id.title_text))); mTitleIconView = ((android.widget.ImageView) (findViewById(R.id.title_icon))); mProgressView = ((android.widget.ProgressBar) (findViewById(R.id.progress_bar))); mContext = getBaseContext(); mAcceptUsersInput = true; getListView().setOnCreateContextMenuListener(this); if ((appService) == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "onCreate() - appService is null"); finish(); return; } initFromIntent(getIntent()); }
@java.lang.Override public void onDestroy() { getListView().setOnCreateContextMenuListener(null); super.onDestroy(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, (("onDestroy" + ",") + (mState))); if ((appService) == null) { return; } if ((((mState) == (com.android.stk.StkMenuActivity.STATE_SECONDARY)) && (!(mIsResponseSent))) && (!(appService.isMenuPending(mSlotId)))) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "onDestroy() - Send End Session"); sendResponse(StkAppService.RES_ID_END_SESSION); } if ((mState) == (com.android.stk.StkMenuActivity.STATE_MAIN)) { if ((appService)!= null) { appService.getStkContext(mSlotId).setMainActivityInstance(null); } else { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "onDestroy() - null appService."); } } }
private void updateBoundCarrierServices(int subId) { int slotId = mSubscriptionManagerProxy.getSlotIndex(subId);java.lang.String newPackageName = "com.google.android.ims"; if ((slotId!= (android.telephony.SubscriptionManager.INVALID_SIM_SLOT_INDEX)) && (slotId < (mNumSlots))) {java.lang.String oldPackageName = mCarrierServices[slotId]; mCarrierServices[slotId] = newPackageName; if (!(android.text.TextUtils.equals(newPackageName, oldPackageName))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, "ImsResolver Config updated, binding new ImsService"); unbindImsService(getImsServiceInfoFromCache(oldPackageName)); bindNewImsService(getImsServiceInfoFromCache(newPackageName)); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } } }
@java.lang.Override public void onCustomSlowCall(java.lang.String name) { if (((checksList)!= null) && (checksList.contains(libcore.dalvik.system.BlockGuardTest.RecordingPolicy.Check.CUSTOM_SLOW_CALL))) { addViolation(("onCustomSlowCall/" + name)); } }
public void testSystemGc() throwsjava.lang.Exception { recorder.clear();java.lang.System.gc(); recorder.expectAndClear("onCustomSlowCall/System.gc()"); }
public static void gc() { dalvik.system.BlockGuard.getThreadPolicy().onCustomSlowCall("System.gc()"); boolean shouldRunGC; synchronized(java.lang.System.LOCK) { shouldRunGC =java.lang.System.justRanFinalization; if (shouldRunGC) {java.lang.System.justRanFinalization = false; } else {java.lang.System.runGC = true; } } if (shouldRunGC) {java.lang.Runtime.getRuntime().gc(); } }
public void test_classLoader_exceptionDuringLoading() throwsjava.lang.Exception { finaljava.io.File jar = libcore.dalvik.system.PathClassLoaderTest.extractResourceJar("loading-test"); final dalvik.system.PathClassLoader pcl = new dalvik.system.PathClassLoader(jar.getAbsolutePath(),java.lang.Object.class.getClassLoader()); dalvik.system.BlockGuard.Policy policy = dalvik.system.BlockGuard.getThreadPolicy(); dalvik.system.BlockGuard.setThreadPolicy(new dalvik.system.BlockGuard.Policy() { @java.lang.Override public void onWriteToDisk() { throw newjava.lang.RuntimeException("onWriteToDisk"); } @java.lang.Override public void onReadFromDisk() { throw newjava.lang.RuntimeException("onReadFromDisk"); } @java.lang.Override public void onNetwork() { throw newjava.lang.RuntimeException("onNetwork"); } @java.lang.Override public void onUnbufferedIO() { throw newjava.lang.RuntimeException("onUnbufferedIO"); } @java.lang.Override public void onCustomSlowCall(java.lang.String name) { throw newjava.lang.RuntimeException(("onCustomSlowCall " + name)); } @java.lang.Override public int getPolicyMask() { return 0; } }); try { try { pcl.getResource("test/Resource1.txt"); fail(); } catch (java.lang.RuntimeException expected) { } } finally { dalvik.system.BlockGuard.setThreadPolicy(policy); } assertNotNull(pcl.getResource("test/Resource1.txt")); }
@java.lang.Override public void onCustomSlowCall(java.lang.String name) { throw newjava.lang.RuntimeException(("onCustomSlowCall: " + name)); }
public void testHashCodeAndEqualsDoesNotPerformNetworkIo() throwsjava.lang.Exception { final dalvik.system.BlockGuard.Policy oldPolicy = dalvik.system.BlockGuard.getThreadPolicy(); dalvik.system.BlockGuard.setThreadPolicy(new dalvik.system.BlockGuard.Policy() { @java.lang.Override public void onWriteToDisk() { fail("Blockguard.Policy.onWriteToDisk"); } @java.lang.Override public void onReadFromDisk() { fail("Blockguard.Policy.onReadFromDisk"); } @java.lang.Override public void onNetwork() { fail("Blockguard.Policy.onNetwork"); } @java.lang.Override public void onUnbufferedIO() { fail("Blockguard.Policy.onUnbufferedIO"); } @java.lang.Override public void onCustomSlowCall(java.lang.String name) { fail(("onCustomSlowCall " + name)); } @java.lang.Override public int getPolicyMask() { return 0; } }); try {java.net.URL url = newjava.net.URL("http://www.google.com/");java.net.URL url2 = newjava.net.URL("http://www.nest.com/"); url.equals(url2); url2.hashCode(); } finally { dalvik.system.BlockGuard.setThreadPolicy(oldPolicy); } }
public void onCustomSlowCall(java.lang.String name) { }
@java.lang.Override public void onCustomSlowCall(java.lang.String name) { fail(("Blockguard.Policy.onCustomSlowCall: " + name)); }
void onCustomSlowCall(java.lang.String name);
private void updatePreferredNetworkUIFromDb() { final int phoneSubId = mPhone.getSubId(); int settingsNetworkMode = getPreferredNetworkModeForSubId(phoneSubId); if (com.android.phone.MobileNetworkSettings.MobileNetworkFragment.DBG) { com.android.phone.MobileNetworkSettings.MobileNetworkFragment.log(("updatePreferredNetworkUIFromDb: settingsNetworkMode = " + settingsNetworkMode)); } UpdatePreferredNetworkModeSummary(settingsNetworkMode); UpdateEnabledNetworksValueAndSummary(settingsNetworkMode); mButtonPreferredNetworkMode.setValue(java.lang.Integer.toString(settingsNetworkMode)); }
@java.lang.Override public boolean setPreferredNetworkType(int subId, int networkType) { enforceModifyPermissionOrCarrierPrivilege(subId); if (com.android.phone.PhoneInterfaceManager.DBG) com.android.phone.PhoneInterfaceManager.log(((("setPreferredNetworkType subId " + subId) + " type ") + networkType));java.lang.Boolean success = ((java.lang.Boolean) (sendRequest(com.android.phone.PhoneInterfaceManager.CMD_SET_PREFERRED_NETWORK_TYPE, networkType, subId))); if (com.android.phone.PhoneInterfaceManager.DBG) com.android.phone.PhoneInterfaceManager.log(("setPreferredNetworkType " + (success? "ok" : "fail"))); if (success) { Settings.Global.putInt(mPhone.getContext().getContentResolver(), ((Settings.Global.PREFERRED_NETWORK_MODE) + subId), networkType); android.telephony.TelephonyManager.putIntAtIndex(mPhone.getContext().getContentResolver(), android.provider.Settings.Global.PREFERRED_NETWORK_MODE, mSubscriptionController.getPhoneId(subId), networkType); } return success; }
@java.lang.Override public void factoryReset(int subId) { enforceConnectivityInternalPermission(); if (mUserManager.hasUserRestriction(UserManager.DISALLOW_NETWORK_RESET)) { return; } final long identity = android.os.Binder.clearCallingIdentity(); try { if ((android.telephony.SubscriptionManager.isUsableSubIdValue(subId)) && (!(mUserManager.hasUserRestriction(UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS)))) { setDataEnabled(subId, true); setNetworkSelectionModeAutomatic(subId);java.lang.String defaultNetwork = android.telephony.TelephonyManager.getTelephonyProperty(mSubscriptionController.getPhoneId(subId), "ro.telephony.default_network", null); int networkType = (!(android.text.TextUtils.isEmpty(defaultNetwork)))?java.lang.Integer.parseInt(defaultNetwork) : com.android.internal.telephony.Phone.PREFERRED_NT_MODE; setPreferredNetworkType(subId, networkType); mPhone.setDataRoamingEnabled(false); } } finally { android.os.Binder.restoreCallingIdentity(identity); } }
public static int calculatePreferredNetworkType(android.content.Context context, int phoneSubId) { int phoneId = com.android.internal.telephony.SubscriptionController.getInstance().getPhoneId(phoneSubId); int phoneIdNetworkType = RILConstants.PREFERRED_NETWORK_MODE; try { phoneIdNetworkType = android.telephony.TelephonyManager.getIntAtIndex(context.getContentResolver(), Settings.Global.PREFERRED_NETWORK_MODE, phoneId); } catch (android.provider.Settings.SettingNotFoundException snfe) { android.telephony.Rlog.e(com.android.internal.telephony.PhoneFactory.LOG_TAG, "Phone Exception Reading Valuefor phoneID"); } int networkType = phoneIdNetworkType; android.telephony.Rlog.d(com.android.internal.telephony.PhoneFactory.LOG_TAG, (("calculatePreferredNetworkType phoneId = " + phoneId) + " phoneIdNetworkType = ") + phoneIdNetworkType)); if (com.android.internal.telephony.SubscriptionController.getInstance().isActiveSubId(phoneSubId)) { networkType = android.provider.Settings.Global.getInt(context.getContentResolver(), ((android.provider.Settings.Global.PREFERRED_NETWORK_MODE) + phoneSubId), phoneIdNetworkType); } else { android.telephony.Rlog.d(com.android.internal.telephony.PhoneFactory.LOG_TAG, (("calculatePreferredNetworkType phoneSubId = " + phoneSubId) + " is not a active SubId")); } android.telephony.Rlog.d(com.android.internal.telephony.PhoneFactory.LOG_TAG, ((("calculatePreferredNetworkType phoneSubId = " + phoneSubId) + " networkType = ") + networkType)); return networkType; }
private void recoverBluetoothServiceFromError(boolean clearBle) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, "recoverBluetoothServiceFromError"); try { mBluetoothLock.readLock().lock(); if ((mBluetooth)!= null) { mBluetooth.unregisterCallback(mBluetoothCallback); } } catch (android.os.RemoteException re) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, "Unable to unregister re"); } finally { mBluetoothLock.readLock().unlock(); } android.os.SystemClock.sleep(500); addActiveLog(com.android.server.BluetoothManagerService.REASON_START_CRASH, android.app.ActivityThread.currentPackageName(), false); handleDisable(); waitForOnOff(false, true); sendBluetoothServiceDownCallback(); try { mBluetoothLock.writeLock().lock(); if ((mBluetooth)!= null) { mBluetooth = null; mContext.unbindService(mConnection); } mBluetoothGatt = null; } finally { mBluetoothLock.writeLock().unlock(); } mHandler.removeMessages(com.android.server.BluetoothManagerService.MESSAGE_BLUETOOTH_STATE_CHANGE); mState = android.bluetooth.BluetoothAdapter.STATE_OFF; if (clearBle) { clearBleApps(); } mEnable = false; if (((mErrorRecoveryRetryCounter)++) < (com.android.server.BluetoothManagerService.MAX_ERROR_RESTART_RETRIES)) { android.os.Message restartMsg = mHandler.obtainMessage(com.android.server.BluetoothManagerService.MESSAGE_RESTART_BLUETOOTH_SERVICE); mHandler.sendMessageDelayed(restartMsg, com.android.server.BluetoothManagerService.ERROR_RESTART_TIME_MS); } else { } }
public boolean enable(java.lang.String packageName) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid(); final boolean callerSystem = (android.os.UserHandle.getAppId(callingUid)) == (SYSTEM_UID); if (isBluetoothDisallowed()) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "enable(): not enabling - bluetooth disallowed"); } return false; } if (!callerSystem) { if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG, "enable(): not allowed for non-active and non system user"); return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (((!(isEnabled())) && (mPermissionReviewRequired)) && (startConsentUiIfNeeded(packageName, callingUid, BluetoothAdapter.ACTION_REQUEST_ENABLE))) { return false; } } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ((((((("enable(" + packageName) + " mBluetooth = ") + (mBluetooth)) + " mBinding = ") + (mBinding)) + " mState = ") + (android.bluetooth.BluetoothAdapter.nameForState(mState)))); } synchronized(mReceiver) { mQuietEnableExternal = false; mEnableExternal = true; sendEnableMsg(false, com.android.server.BluetoothManagerService.REASON_PACKAGE, packageName); } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "enable(): returning"); } return true; }
@java.lang.Override public void onChange(boolean unused) { synchronized(this) { if (isBluetoothPersistedStateOn()) { if (isAirplaneModeOn()) { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_ON_AIRPLANE); } else { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_ON_BLUETOOTH); } } int st = android.bluetooth.BluetoothAdapter.STATE_OFF; try { mBluetoothLock.readLock().lock(); if ((mBluetooth)!= null) { st = mBluetooth.getState(); } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, "Unable to call getState", e); return; } finally { mBluetoothLock.readLock().unlock(); } android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ("Airplane Mode change - current state: " + (android.bluetooth.BluetoothAdapter.nameForState(st)))); if (isAirplaneModeOn()) { clearBleApps(); if (st == (android.bluetooth.BluetoothAdapter.STATE_BLE_ON)) { try { mBluetoothLock.readLock().lock(); if ((mBluetooth)!= null) { mBluetooth.onBrEdrDown(); mEnable = false; mEnableExternal = false; } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, "Unable to call onBrEdrDown", e); } finally { mBluetoothLock.readLock().unlock(); } } else if (st == (android.bluetooth.BluetoothAdapter.STATE_ON)) { sendDisableMsg(com.android.server.BluetoothManagerService.REASON_AIRPLANE_MODE, android.app.ActivityThread.currentPackageName()); } } else if (mEnableExternal) { sendEnableMsg(mQuietEnableExternal, com.android.server.BluetoothManagerService.REASON_AIRPLANE_MODE, android.app.ActivityThread.currentPackageName()); } }
public boolean enableNoAutoConnect(java.lang.String packageName) { if (isBluetoothDisallowed()) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "enableNoAutoConnect not enabling - bluetooth disallowed"); } return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ((("enableNoAutoConnect: mBluetooth = " + (mBluetooth)) + " mBinding = ") + (mBinding))); } int callingAppId = android.os.UserHandle.getAppId(android.os.Binder.getCallingUid()); if (callingAppId!= (NFC_UID)) { throw newjava.lang.SecurityException("Need permission to enable Bluetooth quietly"); } synchronized(mReceiver) { mQuietEnableExternal = true; mEnableExternal = true; sendEnableMsg(true, com.android.server.BluetoothManagerService.REASON_PACKAGE, packageName); } return true; }
public boolean disable(java.lang.String packageName, boolean persist) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid(); final boolean callerSystem = (android.os.UserHandle.getAppId(callingUid)) == (SYSTEM_UID); if (!callerSystem) { if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG, "disable() not allowed for non-active and non system user"); return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (((isEnabled()) && (mPermissionReviewRequired)) && (startConsentUiIfNeeded(packageName, callingUid, BluetoothAdapter.ACTION_REQUEST_DISABLE))) { return false; } } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ((("disable() mBluetooth = " + (mBluetooth)) + " mBinding = ") + (mBinding))); } synchronized(mReceiver) { if (persist) { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_OFF); } mEnableExternal = false; sendDisableMsg(com.android.server.BluetoothManagerService.REASON_PACKAGE, packageName); } return true; }
@java.lang.Override public void onUserRestrictionsChanged(int userId, android.os.Bundle newRestrictions, android.os.Bundle prevRestrictions) { if (com.android.server.pm.UserRestrictionsUtils.restrictionsChanged(prevRestrictions, newRestrictions, UserManager.DISALLOW_BLUETOOTH_SHARING)) { updateOppLauncherComponentState(userId, newRestrictions.getBoolean(UserManager.DISALLOW_BLUETOOTH_SHARING)); } if ((userId == (android.os.UserHandle.USER_SYSTEM)) && (com.android.server.pm.UserRestrictionsUtils.restrictionsChanged(prevRestrictions, newRestrictions, UserManager.DISALLOW_BLUETOOTH))) { if ((userId == (android.os.UserHandle.USER_SYSTEM)) && (newRestrictions.getBoolean(UserManager.DISALLOW_BLUETOOTH))) { updateOppLauncherComponentState(userId, true); sendDisableMsg(com.android.server.BluetoothManagerService.REASON_DISALLOWED, android.app.ActivityThread.currentPackageName()); } else { updateOppLauncherComponentState(userId, newRestrictions.getBoolean(UserManager.DISALLOW_BLUETOOTH_SHARING)); } } }
private staticjava.lang.String getReasonString(int reason) { switch (reason) { case com.android.server.BluetoothManagerService.REASON_PACKAGE : return "REASON_PACKAGE"; case com.android.server.BluetoothManagerService.REASON_AIRPLANE_MODE : return "REASON_AIRPLANE_MODE"; case com.android.server.BluetoothManagerService.REASON_DISALLOWED : return "REASON_DISALLOWED"; case com.android.server.BluetoothManagerService.REASON_RESTARTED : return "REASON_RESTARTED"; case com.android.server.BluetoothManagerService.REASON_START_CRASH : return "REASON_START_CRASH"; case com.android.server.BluetoothManagerService.REASON_SYSTEM_BOOT : return "REASON_SYSTEM_BOOT"; case com.android.server.BluetoothManagerService.REASON_UNEXPECTED : return "REASON_UNEXPECTED"; case com.android.server.BluetoothManagerService.REASON_USER_SWITCH : return "REASON_USER_SWITCH"; case com.android.server.BluetoothManagerService.REASON_RESTORE_USER_SETTING : return "REASON_RESTORE_USER_SETTING"; default : return ("REASON_UNKNOWN[" + reason) + "]"; } }
public void handleOnBootPhase() { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "Bluetooth boot completed"); } android.os.UserManagerInternal userManagerInternal = com.android.server.LocalServices.getService(android.os.UserManagerInternal.class); userManagerInternal.addUserRestrictionsListener(mUserRestrictionsListener); final boolean isBluetoothDisallowed = isBluetoothDisallowed(); if (isBluetoothDisallowed) { return; } if ((mEnableExternal) && (isBluetoothPersistedStateOnBluetooth())) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "Enable Bluetooth."); } sendEnableMsg(mQuietEnableExternal, com.android.server.BluetoothManagerService.REASON_SYSTEM_BOOT, android.app.ActivityThread.currentPackageName()); } else if (!(isNameAndAddressSet())) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "Get adapter name and address"); } android.os.Message getMsg = mHandler.obtainMessage(com.android.server.BluetoothManagerService.MESSAGE_GET_NAME_AND_ADDRESS); mHandler.sendMessage(getMsg); } }
publicjava.lang.String toString() { return (((timeToLog(mTimestamp)) + (mEnable? Enabled : Disabled)) + " due to " + (com.android.server.BluetoothManagerService.getReasonString(mReason))) + " by ") + (mPackageName); }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o == null) return false; if (!(o instanceof com.android.bluetooth.avrcp.MediaData)) return false; final com.android.bluetooth.avrcp.MediaData u = ((com.android.bluetooth.avrcp.MediaData) (o)); if (!(java.util.Objects.equals(metadata, u.metadata))) { return false; } if (!(java.util.Objects.equals(queue, u.queue))) { return false; } if (!(com.android.bluetooth.avrcp.MediaPlayerWrapper.playstateEquals(state, u.state))) { return false; } return true; }
@org.junit.Test public void testIsReady() { com.android.bluetooth.avrcp.MediaPlayerWrapper wrapper = com.android.bluetooth.avrcp.MediaPlayerWrapper.wrap(mMockController, mThread.getLooper()); org.junit.Assert.assertTrue(wrapper.isReady()); doReturn(null).when(mMockController).getPlaybackState(); org.junit.Assert.assertFalse(wrapper.isReady()); doReturn(mTestState.build()).when(mMockController).getPlaybackState(); org.junit.Assert.assertTrue(wrapper.isReady()); doReturn(null).when(mMockController).getMetadata(); org.junit.Assert.assertFalse(wrapper.isReady()); doReturn(mTestMetadata.build()).when(mMockController).getMetadata(); org.junit.Assert.assertTrue(wrapper.isReady()); mTestMetadata.putString(MediaMetadata.METADATA_KEY_TITLE, null); doReturn(mTestMetadata.build()).when(mMockController).getMetadata(); org.junit.Assert.assertFalse(wrapper.isReady()); }
void updateMediaController(com.android.bluetooth.avrcp.MediaController newController) { if (newController == (mMediaController)) return; synchronized(mCallbackLock) { if (((mRegisteredCallback) == null) || ((mControllerCallbacks) == null)) { return; } } mControllerCallbacks.cleanup(); mMediaController = newController; mControllerCallbacks = new com.android.bluetooth.avrcp.MediaPlayerWrapper.MediaControllerListener(mLooper); if (com.android.bluetooth.avrcp.MediaPlayerWrapper.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (("Controller for " + (mPackageName)) + " was updated.")); }
boolean isReady() { if ((getPlaybackState()) == null) { d("getPlaybackState() is null"); return false; } if ((getMetadata()) == null) { d("getMetadata() Metadata is null"); return false; } if ((getMetadata().getString(MediaMetadata.METADATA_KEY_TITLE)) == null) { d("getMetadata() is missing title"); return false; } return true; }
@java.lang.Deprecated public android.net.NetworkInfo.DetailedState getDetailedState() { synchronized(this) { return mDetailedState; } }
@java.lang.Deprecated public boolean isConnected() { synchronized(this) { return (mState) == (android.net.NetworkInfo.State.CONNECTED); } }
private staticjava.lang.invoke.CallSite linkerMethod2(java.lang.invoke.MethodHandles.Lookup lookup,java.lang.String methodName,java.lang.invoke.MethodType methodType, int extraInt,java.lang.String... extraArityArgs) throwsjava.lang.Throwable {java.lang.System.out.print("linkerMethod2(");java.lang.System.out.print(lookup.lookupClass());java.lang.System.out.print(", ");java.lang.System.out.print(methodName);java.lang.System.out.print(", ");java.lang.System.out.print(methodType);java.lang.System.out.print(", ");java.lang.System.out.print(extraInt); for (java.lang.String arg : extraArityArgs) {java.lang.System.out.print(", ");java.lang.System.out.print(arg); }java.lang.System.out.println(")");java.lang.invoke.MethodHandle mh = lookup.findStatic(lookup.lookupClass(), methodName, methodType); return newjava.lang.invoke.ConstantCallSite(mh); }
@annotations.CalledByIndy(bootstrapMethod = @annotations.BootstrapMethod(enclosingType = TestVariableArityLinkerMethod.class, name = "linkerMethod2", parameterTypes = {java.lang.invoke.MethodHandles.Lookup.class,java.lang.String.class,java.lang.invoke.MethodType.class, int.class,java.lang.String[].class }), fieldOrMethodName = "methodZ", constantArgumentsForBootstrapMethod = { @annotations.Constant(intValue = 103) }) private static void methodZ() {java.lang.System.out.println("methodZ"); }
@annotations.CalledByIndy(bootstrapMethod = @annotations.BootstrapMethod(enclosingType = TestVariableArityLinkerMethod.class, name = "linkerMethod", parameterTypes = {java.lang.invoke.MethodHandles.Lookup.class,java.lang.String.class,java.lang.invoke.MethodType.class,java.lang.String[].class }), fieldOrMethodName = "methodC") private static void methodC() {java.lang.System.out.println("methodC"); }
@annotations.CalledByIndy(bootstrapMethod = @annotations.BootstrapMethod(enclosingType = TestVariableArityLinkerMethod.class, name = "linkerMethod", parameterTypes = {java.lang.invoke.MethodHandles.Lookup.class,java.lang.String.class,java.lang.invoke.MethodType.class,java.lang.String[].class }), fieldOrMethodName = "methodA", constantArgumentsForBootstrapMethod = { @annotations.Constant(stringValue = "Aachen"), @annotations.Constant(stringValue = "Aalborg"), @annotations.Constant(stringValue = "Aalto") }) private static void methodA() {java.lang.System.out.println("methodA"); }
private staticjava.lang.invoke.CallSite linkerMethod(java.lang.invoke.MethodHandles.Lookup lookup,java.lang.String methodName,java.lang.invoke.MethodType methodType,java.lang.String... arityArgs) throwsjava.lang.Throwable {java.lang.System.out.print("linkerMethod(");java.lang.System.out.print(lookup.lookupClass());java.lang.System.out.print(", ");java.lang.System.out.print(methodName);java.lang.System.out.print(", ");java.lang.System.out.print(methodType); for (java.lang.String arg : arityArgs) {java.lang.System.out.print(", ");java.lang.System.out.print(arg); }java.lang.System.out.println(")");java.lang.invoke.MethodHandle mh = lookup.findStatic(lookup.lookupClass(), methodName, methodType); return newjava.lang.invoke.ConstantCallSite(mh); }
static void Test() { for (int i = 0; i < 2; ++i) { TestVariableArityLinkerMethod.methodA(); TestVariableArityLinkerMethod.methodB(); TestVariableArityLinkerMethod.methodC(); } for (int i = 0; i < 2; ++i) { TestVariableArityLinkerMethod.methodX(); TestVariableArityLinkerMethod.methodY(); TestVariableArityLinkerMethod.methodZ(); } }
@annotations.CalledByIndy(bootstrapMethod = @annotations.BootstrapMethod(enclosingType = TestVariableArityLinkerMethod.class, name = "linkerMethod2", parameterTypes = {java.lang.invoke.MethodHandles.Lookup.class,java.lang.String.class,java.lang.invoke.MethodType.class, int.class,java.lang.String[].class }), fieldOrMethodName = "methodY", constantArgumentsForBootstrapMethod = { @annotations.Constant(intValue = 102), @annotations.Constant(stringValue = "zonic") }) private static void methodY() {java.lang.System.out.println("methodY"); }
@annotations.CalledByIndy(bootstrapMethod = @annotations.BootstrapMethod(enclosingType = TestVariableArityLinkerMethod.class, name = "linkerMethod", parameterTypes = {java.lang.invoke.MethodHandles.Lookup.class,java.lang.String.class,java.lang.invoke.MethodType.class,java.lang.String[].class }), fieldOrMethodName = "methodB", constantArgumentsForBootstrapMethod = { @annotations.Constant(stringValue = "barium") }) private static void methodB() {java.lang.System.out.println("methodB"); }
@annotations.CalledByIndy(bootstrapMethod = @annotations.BootstrapMethod(enclosingType = TestVariableArityLinkerMethod.class, name = "linkerMethod2", parameterTypes = {java.lang.invoke.MethodHandles.Lookup.class,java.lang.String.class,java.lang.invoke.MethodType.class, int.class,java.lang.String[].class }), fieldOrMethodName = "methodX", constantArgumentsForBootstrapMethod = { @annotations.Constant(intValue = 101), @annotations.Constant(stringValue = "zoo"), @annotations.Constant(stringValue = "zoogene"), @annotations.Constant(stringValue = "zoogenic") }) private static void methodX() {java.lang.System.out.println("methodX"); }
@java.lang.Override public void onCreate(android.os.Bundle savedInstanceState) { super.onCreate(savedInstanceState); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkInputActivity.LOG_TAG, (("onCreate() - mIsResponseSent[") + (mIsResponseSent)) + "]")); if ((appService) == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkInputActivity.LOG_TAG, "onCreate() - appService is null"); finish(); return; } android.app.ActionBar actionBar = null; if (getResources().getBoolean(R.bool.show_menu_title_only_on_menu)) { actionBar = getActionBar(); if (actionBar!= null) { actionBar.hide(); } } setContentView(R.layout.stk_input); if (actionBar!= null) { mMoreOptions = findViewById(R.id.more); mMoreOptions.setVisibility(View.VISIBLE); mMoreOptions.setOnClickListener(this); } mTextIn = ((android.widget.EditText) (this.findViewById(R.id.in_text))); mPromptView = ((android.widget.TextView) (this.findViewById(R.id.prompt))); mInstance = this; android.widget.Button okButton = ((android.widget.Button) (findViewById(R.id.button_ok))); android.widget.Button yesButton = ((android.widget.Button) (findViewById(R.id.button_yes))); android.widget.Button noButton = ((android.widget.Button) (findViewById(R.id.button_no))); okButton.setOnClickListener(this); yesButton.setOnClickListener(this); noButton.setOnClickListener(this); mYesNoLayout = findViewById(R.id.yes_no_layout); mNormalLayout = findViewById(R.id.normal_layout); initFromIntent(getIntent()); mContext = getBaseContext(); mAcceptUsersInput = true; }
@android.telephony.ServiceState.DuplexMode public int getDuplexMode() { if (!(android.telephony.ServiceState.isLte(mRilDataRadioTechnology))) { return android.telephony.ServiceState.DUPLEX_MODE_UNKNOWN; } int band = android.telephony.ChannelUtils.getOperatingBandForEarfcn(mChannelNumber); if (band >= (android.telephony.AccessNetworkConstants.EutranBand.BAND_65)) { return android.telephony.ServiceState.DUPLEX_MODE_FDD; } else if (band >= (android.telephony.AccessNetworkConstants.EutranBand.BAND_33)) { return android.telephony.ServiceState.DUPLEX_MODE_TDD; } else if (band >= (android.telephony.AccessNetworkConstants.EutranBand.BAND_1)) { return android.telephony.ServiceState.DUPLEX_MODE_FDD; } return android.telephony.ServiceState.DUPLEX_MODE_UNKNOWN; }
private void updateChannelNumber() { android.telephony.CellInfo primaryCellInfo = null; for (android.telephony.CellInfo cellInfo : mLastCellInfoList) { if ((cellInfo.getCellConnectionStatus()) == (android.telephony.CellInfo.CONNECTION_PRIMARY_SERVING)) { primaryCellInfo = cellInfo; break; } } if (primaryCellInfo instanceof android.telephony.CellInfoGsm) { android.telephony.CellInfoGsm cellInfoGsm = ((android.telephony.CellInfoGsm) (primaryCellInfo)); int channelNumber = cellInfoGsm.getCellIdentity().getArfcn(); mNewSS.setChannelNumber(channelNumber); if (com.android.internal.telephony.ServiceStateTracker.VDBG) { log(("Setting channel number, ARFCN: " + channelNumber)); } } else if (primaryCellInfo instanceof android.telephony.CellInfoLte) { android.telephony.CellInfoLte cellInfoLte = ((android.telephony.CellInfoLte) (primaryCellInfo)); int channelNumber = cellInfoLte.getCellIdentity().getEarfcn(); mNewSS.setChannelNumber(channelNumber); if (com.android.internal.telephony.ServiceStateTracker.VDBG) { log(("Setting channel number, EARFCN: " + channelNumber)); } } else { if (com.android.internal.telephony.ServiceStateTracker.DBG) { log("Could not set ServiceState channel number"); } } }
private void assertResultNotEmpty(android.app.usage.NetworkStats result) { assertTrue((result!= null)); android.app.usage.NetworkStats.Bucket bucket = new android.app.usage.NetworkStats.Bucket(); long totalTxPackets = 0; long totalRxPackets = 0; long totalTxBytes = 0; long totalRxBytes = 0; while (result.hasNextBucket()) { assertTrue(result.getNextBucket(bucket)); assertTimestamps(bucket); assertEquals(bucket.getState(), NetworkStats.Bucket.STATE_ALL); assertEquals(bucket.getMetered(), NetworkStats.Bucket.METERED_ALL); assertEquals(bucket.getDefaultNetwork(), NetworkStats.Bucket.DEFAULT_NETWORK_ALL); if ((bucket.getUid()) == (java.lang.Process.myUid())) { totalTxPackets += bucket.getTxPackets(); totalRxPackets += bucket.getRxPackets(); totalTxBytes += bucket.getTxBytes(); totalRxBytes += bucket.getRxBytes(); } } assertFalse(result.getNextBucket(bucket)); assertTrue(("No Rx bytes usage for uid " + (java.lang.Process.myUid())), (totalRxBytes > 0)); assertTrue(("No Rx packets usage for uid " + (java.lang.Process.myUid())), (totalRxPackets > 0)); assertTrue(("No Tx bytes usage for uid " + (java.lang.Process.myUid())), (totalTxBytes > 0)); assertTrue(("No Tx packets usage for uid " + (java.lang.Process.myUid())), (totalTxPackets > 0)); }
public void testAppDetails() throwsjava.lang.Exception { for (int i = 0; i < (mNetworkInterfacesToTest.length); ++i) { if (!(shouldTestThisNetworkType(i, ((android.app.usage.cts.NetworkUsageStatsTest.MINUTE) * 120)))) { continue; } setAppOpsMode(AppOpsManager.OPSTR_GET_USAGE_STATS, "allow"); android.app.usage.NetworkStats result = null; try { result = mNsm.queryDetails(mNetworkInterfacesToTest[i].getNetworkType(), getSubscriberId(i), mStartTime, mEndTime); assertResultNotEmpty(result); } catch (android.os.RemoteException |java.lang.SecurityException e) { fail(("testAppDetails fails with exception: " + (e.toString()))); } finally { if (result!= null) { result.close(); } } setAppOpsMode(AppOpsManager.OPSTR_GET_USAGE_STATS, "deny"); try { result = mNsm.queryDetails(mNetworkInterfacesToTest[i].getNetworkType(), getSubscriberId(i), mStartTime, mEndTime); fail("testAppDetails fails: no exception thrown."); } catch (android.os.RemoteException e) { fail(("testAppDetails fails with exception: " + (e.toString()))); } catch (java.lang.SecurityException e) { } } }
private static void ensureInitialized(java.lang.Class<?> c) { c.getName(); }
private void maybeAddedImsService(java.lang.String packageName) { android.util.Log.d(com.android.internal.telephony.ims.ImsResolver.TAG, ("maybeAddedImsService: packageName: " + packageName));java.util.List<com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo> infos = getImsServiceInfo(packageName);java.util.List<com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo> newlyAddedInfos = newjava.util.ArrayList<>(); for (com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info : infos) {java.util.Optional<com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo> match = getInfoByComponentName(mInstalledServicesCache, info.name); if (match.isPresent()) { if (info.featureFromMetadata) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ("New features in cached ImsService: " + (info.name))); android.util.Log.d(com.android.internal.telephony.ims.ImsResolver.TAG, (("Replace features - Old features: " + (match.get())) + " new features: ") + info)); match.get().replaceFeatures(info.getSupportedFeatures()); updateImsServiceFeatures(info); } else { } } else { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ("Added newly added ImsService to cache: " + (info.name))); mInstalledServicesCache.add(info); if (info.featureFromMetadata) { newlyAddedInfos.add(info); } else { } } } for (com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info : newlyAddedInfos) { if (isActiveCarrierService(info)) { bindNewImsService(info); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } else if (isDeviceService(info)) { bindNewImsService(info); } }
private void bindNewImsService(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info) { if (info == null) { return; }java.util.HashSet<android.util.Pair<java.lang.Integer,java.lang.Integer>> features = calculateFeaturesToCreate(info); if ((features.size()) > 0) { com.android.internal.telephony.ims.ImsServiceController controller = info.controllerFactory.create(mContext, info.name, this); android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, (("Bind ImsService: " + (controller.getComponentName())) + " with features: ") + features)); controller.bind(features); mActiveControllers.add(controller); } }
@java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { }
void addFeatureForAllSlots(int feature) { for (int i = 0; i < (mNumSlots); i++) { mSupportedFeatures.add(new android.util.Pair(i, feature)); } }
@java.lang.Override public int hashCode() { int result = ((name)!= null)? name.hashCode() : 0; result = (31 * result) + (mSupportedFeatures.hashCode()); result = (31 * result) + ((controllerFactory)!= null? controllerFactory.hashCode() : 0); return result; }
@java.lang.Override publicjava.lang.String toString() {java.lang.StringBuilder res = newjava.lang.StringBuilder(); res.append("[ImsServiceInfo] name="); res.append(name); res.append(", supportedFeatures=[ "); for (android.util.Pair<java.lang.Integer,java.lang.Integer> feature : mSupportedFeatures) { res.append("("); res.append(feature.first); res.append(","); res.append(feature.second); res.append(") "); } res.append("], supportsEmergency="); res.append(supportsEmergencyMmTel); return res.toString(); }
private void updateBoundCarrierServices(int subId) { int slotId = mSubscriptionManagerProxy.getSlotIndex(subId);java.lang.String newPackageName = mCarrierConfigManager.getConfigForSubId(subId).getString(CarrierConfigManager.KEY_CONFIG_IMS_PACKAGE_OVERRIDE_STRING, null); if ((slotId!= (android.telephony.SubscriptionManager.INVALID_SIM_SLOT_INDEX)) && (slotId < (mNumSlots))) {java.lang.String oldPackageName = mCarrierServices[slotId]; mCarrierServices[slotId] = newPackageName; if (!(android.text.TextUtils.equals(newPackageName, oldPackageName))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, "Carrier Config updated, binding new ImsService"); unbindImsService(getImsServiceInfoFromCache(oldPackageName)); com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo newInfo = getImsServiceInfoFromCache(newPackageName); if (newInfo.featureFromMetadata) { bindNewImsService(newInfo); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } else { } } } }
void replaceFeatures(java.util.HashSet<android.util.Pair<java.lang.Integer,java.lang.Integer>> mNewFeatures) { mSupportedFeatures.clear(); mSupportedFeatures.addAll(mNewFeatures); }
javajavajava.util.HashSet<android.util.Pair<java.lang.Integer,java.lang.Integer>> getSupportedFeatures() { return mSupportedFeatures; }
javajava.util.HashSet<android.util.Pair<java.lang.Integer,java.lang.Integer>> calculateFeaturesToCreate(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info) {java.util.HashSet<android.util.Pair<java.lang.Integer,java.lang.Integer>> imsFeaturesBySlot = newjava.util.HashSet<>(); int slotId = getSlotForActiveCarrierService(info); if (slotId!= (android.telephony.SubscriptionManager.INVALID_SUBSCRIPTION_ID)) { imsFeaturesBySlot.addAll(info.getSupportedFeatures().stream().filter(feature) -> slotId == feature.first).collect(java.util.stream.Collectors.toList())); } else if (isDeviceService(info)) { for (int i = 0; i < (mNumSlots); i++) { final int currSlotId = i; com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo carrierImsInfo = getImsServiceInfoFromCache(mCarrierServices[i]); if (carrierImsInfo == null) { imsFeaturesBySlot.addAll(info.getSupportedFeatures().stream().filter(feature) -> currSlotId == feature.first).collect(java.util.stream.Collectors.toList())); } else {java.util.HashSet<android.util.Pair<java.lang.Integer,java.lang.Integer>> deviceFeatures = newjava.util.HashSet(info.getSupportedFeatures()); deviceFeatures.removeAll(carrierImsInfo.getSupportedFeatures()); imsFeaturesBySlot.addAll(deviceFeatures.stream().filter(feature) -> currSlotId == feature.first).collect(java.util.stream.Collectors.toList())); } } } return imsFeaturesBySlot; }
public boolean start() { android.content.Intent imsServiceIntent = new android.content.Intent(mIntentFilter).setComponent(mName); int serviceFlags = (android.content.Context.BIND_FOREGROUND_SERVICE) | (android.content.Context.BIND_IMPORTANT); boolean bindStarted = mContext.bindService(imsServiceIntent, this, serviceFlags); if (!bindStarted) { mContext.unbindService(this); } return bindStarted; }
void onImsServiceQueryResult(java.lang.String name,java.util.Set<android.util.Pair<java.lang.Integer,java.lang.Integer>> features);
private boolean isImsServiceInfoEqual(android.content.ComponentName name,java.util.Set<java.lang.String> features, com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo sInfo) { if (!(java.util.Objects.equals(sInfo.name, name))) { return false; } for (java.lang.String f : features) { switch (f) { case ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE : if (!(sInfo.supportsEmergencyMmTel)) { return false; } break; case ImsResolver.METADATA_MMTEL_FEATURE : if (!(sInfo.getSupportedFeatures().contains(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL))) { return false; } break; case ImsResolver.METADATA_RCS_FEATURE : if (!(sInfo.getSupportedFeatures().contains(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_RCS))) { return false; } break; } } return true; }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testAddPackageToCache() { setupResolver(1);java.util.List<android.content.pm.ResolveInfo> info = newjava.util.ArrayList<>();java.util.Set<java.lang.String> features = newjava.util.HashSet<>(); features.add(ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE); features.add(ImsResolver.METADATA_MMTEL_FEATURE); features.add(ImsResolver.METADATA_RCS_FEATURE); info.add(getResolveInfo(com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME, features, true)); when(mMockPM.queryIntentServicesAsUser(any(), anyInt(), anyInt())).thenReturn(info); setConfigCarrierString(0, com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName()); mTestImsResolver.populateCacheAndStartBind(); waitForHandlerAction(mTestImsResolver.getHandler(), com.android.internal.telephony.ims.ImsResolverTest.TEST_TIMEOUT); com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo testCachedService = mTestImsResolver.getImsServiceInfoFromCache(com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME.getPackageName()); junit.framework.Assert.assertNotNull(testCachedService); junit.framework.Assert.assertTrue(isImsServiceInfoEqual(com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME, features, testCachedService)); }
public void startQuery(android.content.ComponentName name,java.lang.String intentFilter) { if (mActiveQueries.containsKey(name)) { return; } com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.ImsServiceFeatureQuery query = new com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.ImsServiceFeatureQuery(mContext, name, intentFilter); mActiveQueries.put(name, query); query.execute(); }
@java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { }
private void cancelAllNotifications() { if (com.android.internal.telephony.ServiceStateTracker.DBG) log("cancelAllNotifications"); android.app.NotificationManager notificationManager = ((android.app.NotificationManager) (mPhone.getContext().getSystemService(Context.NOTIFICATION_SERVICE))); notificationManager.cancel(java.lang.Integer.toString(mSubId), com.android.internal.telephony.ServiceStateTracker.PS_NOTIFICATION); notificationManager.cancel(java.lang.Integer.toString(mSubId), com.android.internal.telephony.ServiceStateTracker.CS_NOTIFICATION); notificationManager.cancel(java.lang.Integer.toString(mSubId), com.android.internal.telephony.ServiceStateTracker.CS_REJECT_CAUSE_NOTIFICATION); }
private void processCodecConfigEvent(android.bluetooth.BluetoothCodecStatus newCodecStatus) { android.bluetooth.BluetoothCodecConfig prevCodecConfig = null; synchronized(this) { if ((mCodecStatus)!= null) { prevCodecConfig = mCodecStatus.getCodecConfig(); } mCodecStatus = newCodecStatus; } if (com.android.bluetooth.a2dp.A2dpStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, (("Codec Config: " + prevCodecConfig) + "->") + (newCodecStatus.getCodecConfig()))); for (android.bluetooth.BluetoothCodecConfig codecConfig : newCodecStatus.getCodecsLocalCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Codec Local Capability: " + codecConfig)); } for (android.bluetooth.BluetoothCodecConfig codecConfig : newCodecStatus.getCodecsSelectableCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Codec Selectable Capability: " + codecConfig)); } } if (mA2dpOffloadEnabled) { com.android.bluetooth.a2dp.bool update = false; android.bluetooth.BluetoothCodecConfig newCodecConfig = mCodecStatus.getCodecConfig(); if ((prevCodecConfig!= null) && ((prevCodecConfig.getCodecType())!= (newCodecConfig.getCodecType()))) { update = true; } if (!(newCodecConfig.sameAudioFeedingParameters(prevCodecConfig))) { update = true; } if (((newCodecConfig.getCodecType()) == (android.bluetooth.BluetoothCodecConfig.SOURCE_CODEC_TYPE_LDAC)) && ((prevCodecConfig.getCodecSpecific1())!= (newCodecConfig.getCodecSpecific1()))) { update = true; } if (update) { mA2dpService.codecConfigUpdated(mDevice, mCodecStatus, false); } return; } boolean sameAudioFeedingParameters = newCodecStatus.getCodecConfig().sameAudioFeedingParameters(prevCodecConfig); mA2dpService.codecConfigUpdated(mDevice, mCodecStatus, sameAudioFeedingParameters);
private void removeImsServiceFeature(android.util.Pair<java.lang.Integer,java.lang.Integer> featurePair) throws android.os.RemoteException { if ((!(isServiceControllerAvailable())) || ((mCallbacks) == null)) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, "removeImsServiceFeature called with null values."); return; } if ((featurePair.second)!= (android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)) { com.android.internal.telephony.ims.ImsServiceController.ImsFeatureStatusCallback callbackToRemove = mFeatureStatusCallbacks.stream().filter(( c) -> ((c.mSlotId) == (featurePair.first)) && ((c.mFeatureType) == (featurePair.second))).findFirst().orElse(null); if (callbackToRemove!= null) { mFeatureStatusCallbacks.remove(callbackToRemove); } removeImsFeature(featurePair.first, featurePair.second, (callbackToRemove!= null? callbackToRemove.getCallback() : null)); removeImsFeatureBinder(featurePair.first, featurePair.second); mCallbacks.imsServiceFeatureRemoved(featurePair.first, featurePair.second, this); } else { android.util.Log.i(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, ("Doesn't support emergency calling on slot " + (featurePair.first))); } sendImsFeatureRemovedCallback(featurePair.first, featurePair.second); }
public void addImsServiceFeatureListener(com.android.ims.internal.IImsServiceFeatureCallback callback) { synchronized(mLock) { mImsStatusCallbacks.add(callback); try { for (android.util.Pair<java.lang.Integer,java.lang.Integer> i : mImsFeatures) { callback.imsFeatureCreated(i.first, i.second); } } catch (android.os.RemoteException e) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, "Remote exception notifying callback"); } } }
private void notifyAllFeaturesRemoved() { if ((mCallbacks) == null) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, "imsServiceFeatureRemoved called with invalid callbacks."); return; } synchronized(mLock) { for (android.util.Pair<java.lang.Integer,java.lang.Integer> feature : mImsFeatures) { if ((feature.second)!= (android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)) { mCallbacks.imsServiceFeatureRemoved(feature.first, feature.second, this); sendImsFeatureRemovedCallback(feature.first, feature.second); } } }
private boolean isImsServiceInfoEqual(android.content.ComponentName name,java.util.Set<java.lang.String> features, com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo sInfo) { if (!(java.util.Objects.equals(sInfo.name, name))) { return false; } for (java.lang.String f : features) { switch (f) { case ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE : if (!(sInfo.getSupportedFeatures().contains(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)))) { return false; } break; case ImsResolver.METADATA_MMTEL_FEATURE : if (!(sInfo.getSupportedFeatures().contains(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL)))) { return false; } break; case ImsResolver.METADATA_RCS_FEATURE : if (!(sInfo.getSupportedFeatures().contains(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_RCS)))) { return false; } break; } } return true; }
private void addImsServiceFeature(android.util.Pair<java.lang.Integer,java.lang.Integer> featurePair) throws android.os.RemoteException { if ((!(isServiceControllerAvailable())) || ((mCallbacks) == null)) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, "addImsServiceFeature called with null values."); return; } if ((featurePair.second)!= (android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)) { com.android.internal.telephony.ims.ImsServiceController.ImsFeatureStatusCallback c = new com.android.internal.telephony.ims.ImsServiceController.ImsFeatureStatusCallback(featurePair.first, featurePair.second); mFeatureStatusCallbacks.add(c); android.os.IInterface f = createImsFeature(featurePair.first, featurePair.second, c.getCallback()); addImsFeatureBinder(featurePair.first, featurePair.second, f); mCallbacks.imsServiceFeatureCreated(featurePair.first, featurePair.second, this); } else { android.util.Log.i(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, ("Bad emergency calling on slot " + (featurePair.first))); } sendImsFeatureCreatedCallback(featurePair.first, featurePair.second); }
@org.junit.Test public void testCarrierPackageChangeEmergencyCalling() throws android.os.RemoteException { setupResolver(1); setConfigCarrierString(0, com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName());java.util.HashSet<android.util.Pair<java.lang.Integer,java.lang.Integer>> features = newjava.util.HashSet<>(); features.add(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL)); setupPackageQuery(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, newjava.util.HashSet(), true); com.android.internal.telephony.ims.ImsServiceController controller = setupController(); startBind(); setupDynamicQueryFeatures(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, features, 1); verify(controller).bind(features); verify(controller, never()).unbind(); junit.framework.Assert.assertEquals(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, controller.getComponentName()); packageChanged(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName());java.util.HashSet<android.util.Pair<java.lang.Integer,java.lang.Integer>> newFeatures = newjava.util.HashSet<>(); newFeatures.add(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL)); newFeatures.add(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)); setupDynamicQueryFeatures(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, newFeatures, 2); verify(controller, atLeastOnce()).changeOnce(newFeatures); }
private void updateImsServiceFeatures(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo newInfo) { if (newInfo == null) { return; } com.android.internal.telephony.ims.ImsServiceController controller = getControllerByServiceInfo(mActiveControllers, newInfo);java.util.HashSet<android.util.Pair<java.lang.Integer,java.lang.Integer>> features = calculateFeaturesToCreate(newInfo); if (shouldFeaturesCauseBind(features)) { try { if (controller!= null) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ("Setting features for ImsService: " + (controller.getComponentName()))); android.util.Log.d(com.android.internal.telephony.ims.ImsResolver.TAG, ("Set Features - New Features: " + features)); controller.changeImsServiceFeatures(features); } else { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, "ImsService unbound with active features, rebinding"); bindImsServiceWithFeatures(newInfo, features); } if ((isActiveCarrierService(newInfo)) && (!(android.text.TextUtils.equals(newInfo.name.getPackageName(), mDeviceService)))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, "Setting device default"); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } } catch (android.os.RemoteException e) { android.util.Log.e(com.android.internal.telephony.ims.ImsResolver.TAG, ("Remote Exception: " + (e.getMessage()))); } } else if (controller!= null) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ("Setting features for ImsService: " + (controller.getComponentName()))); unbindImsService(newInfo); } }
private boolean shouldFeaturesCauseBind(java.util.HashSet<android.util.Pair<java.lang.Integer,java.lang.Integer>> features) { long bindableFeatures = features.stream().filter(( f) -> f.second!= ImsFeature.FEATURE_EMERGENCY_MMTEL).count(); return bindableFeatures > 0 && (features.size()); }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testCarrierPackageBindWithEmergencyCalling() throws android.os.RemoteException { setupResolver(1); setConfigCarrierString(0, com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName());java.util.HashSet<android.util.Pair<java.lang.Integer,java.lang.Integer>> features = newjava.util.HashSet<>(); features.add(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL)); features.add(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_RCS)); setupPackageQuery(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, features, newjava.util.HashSet(), true); com.android.internal.telephony.ims.ImsServiceController controller = setupController(); startBind(); setupDynamicQueryFeatures(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, features, 1); verify(controller).bind(features); verify(controller, never()).unbind(); junit.framework.Assert.assertEquals(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, controller.getComponentName()); }
private void bindImsServiceWithFeatures(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info,java.util.HashSet<android.util.Pair<java.lang.Integer,java.lang.Integer>> features) { if (shouldFeaturesCauseBind(features)) { com.android.internal.telephony.ims.ImsServiceController controller = getControllerByServiceInfo(mActiveControllers, info); if (controller!= null) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ("ImsService connection exists, updating features " + features)); try { controller.changeImsServiceFeatures(features); } catch (android.os.RemoteException e) { android.util.Log.w(com.android.internal.telephony.ims.ImsResolver.TAG, ("BindImsService error=" + (e.getMessage()))); } } else { controller = info.controllerFactory.create(mContext, info.name, this); android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, (("Bind ImsService: " + (controller.getComponentName())) + " with features: ") + features)); controller.bind(features); } mActiveControllers.put(info.name, controller); } }
void replaceFeatures(java.util.Set<android.util.Pair<java.lang.Integer,java.lang.Integer>> mNewFeatures) { mSupportedFeatures.clear(); mSupportedFeatures.addAll(mNewFeatures); }
@java.lang.Override publicjava.lang.String toString() {java.lang.StringBuilder res = newjava.lang.StringBuilder(); res.append("java name="); res.append(name); res.append(", supportedFeatures="); for (android.util.Pair<java.lang.Integer,java.lang.Integer> feature : mSupportedFeatures) { res.append("("); res.append(feature.first); res.append(","); res.append(feature.second); res.append(","); } return res.toString(); }
private boolean selectACRulesContainer(byte[] aid) throws com.android.se.security.arf.SecureElementException, com.android.se.security.arf.pkcs15.PKCS15Exception { if (aid == null) { mArfChannel = mSEHandle.openLogicalArfChannel(new byte[]{ }); if ((mArfChannel)!= null) { android.util.Log.i(mTag, "Only channels are used to access to PKC15"); } else { return false; } if ((mPkcs15Path) == null) { mACMainPath = null; com.android.se.security.arf.pkcs15.EFDIR DIRObject = new com.android.se.security.arf.pkcs15.EFDIR(mSEHandle); mPkcs15Path = DIRObject.lookupAID(com.android.se.security.arf.pkcs15.PKCS15Handler.PKCS15_AID); if ((mPkcs15Path) == null) { android.util.Log.i(mTag, "Cannot use ARF: cannot select PKCS directory via EF Dir"); throw newjava.util.NoSuchElementException("Cannot select PKCS directory via EF Dir"); } } } else { mArfChannel = mSEHandle.openLogicalArfChannel(aid); if ((mArfChannel) == null) { android.util.Log.w(mTag, "ADF not found!!"); return false; } if ((mPkcs15Path)!= null) { mACMainPath = null; } mPkcs15Path = null; } return true; }
public com.android.se.Channel openLogicalChannelWithoutChannelAccess(byte[] aid) throws android.os.RemoteException,java.util.NoSuchElementException { try { return openLogicalChannel(null, aid, ((byte) (0)), null, null, 0); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (android.se.omapi.SEService.NO_SUCH_ELEMENT_ERROR)) { throw newjava.util.NoSuchElementException(e.getMessage()); } throw e; } }
public synchronized void initialize() throwsjava.lang.Exception { com.android.se.Channel channel = mTerminal.openLogicalChannelWithoutChannelAccess(com.android.se.security.ara.AraController.getAraMAid()); if (channel == null) { throw newjava.security.AccessControlException("Could not open channel"); } com.android.se.security.ChannelAccess araChannelAccess = new com.android.se.security.ChannelAccess(); araChannelAccess.setAccess(ChannelAccess.ACCESS.ALLOWED, mTag); araChannelAccess.setApduAccess(ChannelAccess.ACCESS.ALLOWED); channel.setChannelAccess(araChannelAccess); try { mApplet = new com.android.se.security.ara.AccessRuleApplet(channel); byte[] tag = mApplet.readRefreshTag(); if (mAccessRuleCache.isRefreshTagEqual(tag)) { android.util.Log.i(mTag, "Refresh tag unchanged. Using access rules from cache."); return; } android.util.Log.i(mTag, "Refresh tag has changed."); mAccessRuleCache.setRefreshTag(tag); mAccessRuleCache.clearCache(); android.util.Log.i(mTag, "Reading ARs from ARA"); readAllAccessRules(); } catch (java.lang.Exception e) { android.util.Log.i(mTag, ("Caught error: " + (e.getLocalizedMessage()))); throw newjava.security.AccessControlException(e.getLocalizedMessage()); } finally { if (channel!= null) { channel.close(); } } }
private boolean updateACRules() throws com.android.se.security.arf.SecureElementException, com.android.se.security.arf.pkcs15.PKCS15Exception,java.lang.Exception { byte[] ACRulesPath = null; if (!(mACMFfound)) { mSEHandle.resetAccessRules(); mACMainPath = null; if ((mArfChannel)!= null) mSEHandle.closeArfChannel(); this.initACEntryPoint(); } try { ACRulesPath = mACMainObject.analyseFile(); mACMFfound = true; } catch (java.lang.Exception e) { android.util.Log.i(mTag, "ACRules Not found!"); mACMainObject = null; mSEHandle.resetAccessRules(); mACMFfound = false; throw e; } if (ACRulesPath!= null) { android.util.Log.i(mTag, "AC Rules needs to be updated..."); if ((mACRulesObject) == null) { mACRulesObject = new com.android.se.security.arf.pkcs15.EFACRules(mSEHandle); } mSEHandle.clearAccessRuleCache(); mACMainPath = null; if ((mArfChannel)!= null) mSEHandle.closeArfChannel(); this.initACEntryPoint(); try { mACRulesObject.analyseFile(ACRulesPath); } catch (java.lang.Exception e) { android.util.Log.i(mTag, "Could not clear access rule cache and refresh tag"); mSEHandle.resetAccessRules(); throw e; } return true; } else { android.util.Log.i(mTag, "AC Tag has not been changed..."); return false; } }
public synchronized boolean loadAccessControlRules(java.lang.String secureElement) throwsjava.security.AccessControlException { mSELabel = secureElement; android.util.Log.i(mTag, ((" Loading " + (mSELabel)) + " rules...")); try { initACEntryPoint(); return updateACRules(); } catch (java.util.NoSuchElementException e) { throw e; } catch (java.lang.Exception e) { if (e instanceofjava.util.MissingResourceException) { throw ((java.util.MissingResourceException) (e)); } android.util.Log.e(mTag, (((mSELabel) + " rules not correctly initialized! ") + (e.getLocalizedMessage()))); throw newjava.security.AccessControlException(e.getLocalizedMessage()); } finally { if ((mArfChannel)!= null) mSEHandle.closeArfChannel(); } }
public com.android.se.Channel openLogicalArfChannel(byte[] aid) throwsjava.util.NoSuchElementException { try { mArfChannel = mTerminalHandle.openLogicalChannelWithoutChannelAccess(aid); if ((mArfChannel) == null) { return null; } setUpChannelAccess(mArfChannel); return mArfChannel; } catch (java.util.NoSuchElementException e) { throw e; } catch (java.lang.Exception e) { if (e instanceofjava.util.MissingResourceException) { android.util.Log.e(mTag, ("No channels left to access ARF: " + (e.getMessage()))); throw ((java.util.MissingResourceException) (e)); } else { android.util.Log.e(mTag, ("Error opening logical channel " + (e.getLocalizedMessage()))); } mArfChannel = null; return null; } }
@android.annotation.SuppressAutoDoc @android.telephony.RequiresPermission(android.Manifest.permission.READ_PHONE_STATE) public android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int subId) { if (android.telephony.SubscriptionManager.VDBG) android.telephony.SubscriptionManager.logd(("getActiveSubscriptionInfo subId=" + subId)); if (!(android.telephony.SubscriptionManager.isValidSubscriptionId(subId))) { if (android.telephony.SubscriptionManager.DBG) { android.telephony.SubscriptionManager.logd("getActiveSubscriptionInfo invalid subId"); } return null; } android.telephony.SubscriptionInfo subInfo = null; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService("isub")); if (iSub!= null) { subInfo = iSub.getActiveSubscriptionInfo(subId, mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return subInfo; }
@android.annotation.SuppressAutoDoc @android.telephony.RequiresPermission(android.Manifest.permission.READ_PHONE_STATE) public android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int slotIndex) { if (android.telephony.SubscriptionManager.VDBG) android.telephony.SubscriptionManager.logd(("getActiveSubscriptionInfoForSimSlotIndex slotIndex=" + slotIndex)); if (!(android.telephony.SubscriptionManager.isValidSlotIndex(slotIndex))) { android.telephony.SubscriptionManager.logd("getActiveSubscriptionInfoForSimSlotIndex invalid slotIndex"); return null; } android.telephony.SubscriptionInfo result = null; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService("isub")); if (iSub!= null) { result = iSub.getActiveSubscriptionInfoForSimSlotIndex(slotIndex, mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return result; }
@android.telephony.RequiresPermission(android.Manifest.permission.READ_PHONE_STATE) public void addOnSubscriptionsChangedListener(android.telephony.SubscriptionManager.OnSubscriptionsChangedListener listener) {java.lang.String pkgName = ((mContext)!= null)? mContext.getOpPackageName() : "<unknown>"; if (android.telephony.SubscriptionManager.DBG) { android.telephony.SubscriptionManager.logd(((("OnSubscriptionsChangedListener OnSubscriptionsChangedListener pkgName=" + pkgName) + " listener=") + listener)); } try { com.android.internal.telephony.ITelephonyRegistry tr = ITelephonyRegistry.Stub.asInterface(android.os.ServiceManager.getService("telephony.registry")); if (tr!= null) { tr.addOnSubscriptionsChangedListener(pkgName, listener.callback); } } catch (android.os.RemoteException ex) { } }
@android.annotation.SuppressAutoDoc @android.telephony.RequiresPermission(android.Manifest.permission.READ_PHONE_STATE) publicjava.util.List<android.telephony.SubscriptionInfo> getActiveSubscriptionInfoList() {java.util.List<android.telephony.SubscriptionInfo> result = null; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService("isub")); if (iSub!= null) { result = iSub.getActiveSubscriptionInfoList(mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return result; }
@android.annotation.SuppressAutoDoc @android.telephony.RequiresPermission(android.Manifest.permission.READ_PHONE_STATE) public int getActiveSubscriptionInfoCount() { int result = 0; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService("isub")); if (iSub!= null) { result = iSub.getActiveSubInfoCount(mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return result; }
private void doStop() { if (!(mProfileStarted)) { android.util.Log.w(mName, "onProfileServiceStateChanged() called, but the profile is not running."); } mProfileStarted = false; if ((mAdapterService)!= null) { mAdapterService.onProfileServiceStateChanged(this, BluetoothAdapter.STATE_OFF); mAdapterService.removeProfile(this); } if (!(stop())) { android.util.Log.e(mName, "Failed to stop profile"); } if ((mUserSwitchedReceiver)!= null) { getApplicationContext().unregisterReceiver(mUserSwitchedReceiver); mUserSwitchedReceiver = null; } stopSelf(); }
boolean isConnected() { return mDelegate.isConnected(); }
void disconnect() { mDelegate.disconnect(); }
javajava.lang.String getRoot() { return mDelegate.getRoot(); }
public static com.android.bluetooth.avrcp.Metadata toMetadata(android.media.session.MediaSession.QueueItem item) { if (item == null) { return com.android.bluetooth.avrcp.Util.empty_data(); } android.os.Bundle bundle = com.android.bluetooth.avrcp.Util.descriptionToBundle(item.getDescription()); if (com.android.bluetooth.avrcp.Util.DEBUG) { for (java.lang.String key : bundle.keySet()) { android.util.Log.e(com.android.bluetooth.avrcp.Util.TAG, ("MediaSession.QueueItem : ContainsKey: " + key)); } } com.android.bluetooth.avrcp.Metadata ret = com.android.bluetooth.avrcp.Util.bundleToMetadata(bundle); ret.mediaId = "NowPlayingId" + (item.getQueueId()); return ret; }
javajava.lang.String getSessionToken() { return mDelegate.getSessionToken(); }
public static com.android.bluetooth.avrcp.Metadata toMetadata(android.media.browse.MediaBrowser.MediaItem item) { if (item == null) { return com.android.bluetooth.avrcp.Util.empty_data(); } android.os.Bundle bundle = com.android.bluetooth.avrcp.Util.descriptionToBundle(item.getDescription()); if (com.android.bluetooth.avrcp.Util.DEBUG) { for (java.lang.String key : bundle.keySet()) { android.util.Log.e(com.android.bluetooth.avrcp.Util.TAG, ("toMetadata: MediaItem: ContainsKey: " + key)); } } com.android.bluetooth.avrcp.Metadata ret = com.android.bluetooth.avrcp.Util.bundleToMetadata(bundle); ret.mediaId = item.getMediaId(); return ret; }
android.content.ComponentName getServiceComponent() { return mDelegate.getServiceComponent(); }
@java.lang.Override protected boolean removeEldestEntry(Map.Entry<java.lang.String,java.util.List<com.android.bluetooth.avrcp.ListItem>> eldest) { return (size()) > (com.android.bluetooth.avrcp.BrowsedPlayerWrapper.NUM_CACHED_FOLDERS); }
void subscribe(java.lang.String parentId, com.android.bluetooth.avrcp.MediaBrowser.SubscriptionCallback callback) { mDelegate.subscribe(parentId, callback); }
void getItem(java.lang.String mediaId, com.android.bluetooth.avrcp.MediaBrowser.ItemCallback callback) { mDelegate.getItem(mediaId, callback); }
javajava.lang.Bundle getExtras() { return mDelegate.getExtras(); }
void subscribe(java.lang.String parentId, android.os.Bundle options, com.android.bluetooth.avrcp.MediaBrowser.SubscriptionCallback callback) { mDelegate.subscribe(parentId, options, callback); }
void unsubscribe(java.lang.String parentId) { mDelegate.unsubscribe(parentId); }
public static com.android.bluetooth.avrcp.Metadata toMetadata(android.media.MediaMetadata data) { if (data == null) { return com.android.bluetooth.avrcp.Util.empty_data(); } android.media.MediaDescription desc = data.getDescription(); android.os.Bundle dataBundle = com.android.bluetooth.avrcp.Util.mediaMetadataToBundle(data); android.os.Bundle bundle = com.android.bluetooth.avrcp.Util.descriptionToBundle(data.getDescription()); bundle.putAll(dataBundle); if (com.android.bluetooth.avrcp.Util.DEBUG) { for (java.lang.String key : bundle.keySet()) { android.util.Log.e(com.android.bluetooth.avrcp.Util.TAG, ("MediaMetadata: ContainsKey: " + key)); } } com.android.bluetooth.avrcp.Metadata ret = com.android.bluetooth.avrcp.Util.bundleToMetadata(bundle); ret.mediaId = "currsong"; return ret; }
void connect() { mDelegate.connect(); }
void unsubscribe(java.lang.String parentId, com.android.bluetooth.avrcp.MediaBrowser.SubscriptionCallback callback) { mDelegate.unsubscribe(parentId, callback); }
@com.android.internal.annotations.VisibleForTesting void testInit(android.content.Context context, android.content.ComponentName serviceComponent, com.android.bluetooth.avrcp.MediaBrowser.ConnectionCallback callback, android.os.Bundle rootHints) { android.util.Log.wtfStack("AvrcpMockMediaBrowser", "This function should never be called"); }
void setSystemAudioMode(boolean on, boolean updateSetting) { com.android.server.hdmi.HdmiLogger.debug("System Audio Mode change[old:%b new:%b]", mSystemAudioActivated, on); if (updateSetting) { mService.writeBooleanSetting(Global.HDMI_SYSTEM_AUDIO_ENABLED, on); } updateAudioManagerForSystemAudio(on); synchronized(mLock) { if ((mSystemAudioActivated)!= on) { mSystemAudioActivated = on; if ((getAvrDeviceInfo())!= null) { com.android.server.hdmi.RequestShortAudioDescriptorAction action = new com.android.server.hdmi.RequestShortAudioDescriptorAction(this, getAvrDeviceInfo().getLogicalAddress(), getAvrDeviceInfo().getPortId(), on); addAndStartAction(action); } mService.announceSystemAudioModeChange(on); } } }
@java.lang.Override boolean start() { if (mEnabled) { mState = com.android.server.hdmi.RequestShortAudioDescriptorAction.STATE_WAITING_TIMEOUT; addTimer(mState, HdmiConfig.TIMEOUT_MS); if ((com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup)!= null) { com.android.server.hdmi.HdmiLogger.debug("Set old audio format"); setAudioFormat(); } else { com.android.server.hdmi.HdmiLogger.debug("No old audio format. Send a command to reqeust."); sendRequestShortAudioDescriptor(); } } else { resetShortAudioDescriptor(); finish(); } return true; }
private void resetShortAudioDescriptor() {java.lang.String audioParameter = "set_ARC_format=";java.lang.String keyValuePairs; byte[] buffer = new byte[2]; buffer[0] = ((byte) (0)); buffer[1] = ((byte) (mAvrPort)); keyValuePairs = audioParameter + (java.util.Arrays.toString(buffer)); tv().setAudioParameters(keyValuePairs); }
private void sendRequestShortAudioDescriptor() { byte[] params = new byte[4]; params[0] = ((byte) (MSAPI_CODEC_DD)); params[1] = ((byte) (MSAPI_CODEC_AAC)); params[2] = ((byte) (MSAPI_CODEC_DTS)); params[3] = ((byte) (MSAPI_CODEC_DDP)); com.android.server.hdmi.HdmiCecMessage command = com.android.server.hdmi.HdmiCecMessageBuilder.buildRequestShortAudioDescriptor(getSourceAddress(), mAvrAddress, params); sendCommand(command, new com.android.server.hdmi.HdmiControlService.SendMessageCallback() { @java.lang.Override public void onSendCompleted(int error) { switch (error) { case Constants.SEND_RESULT_SUCCESS : case Constants.SEND_RESULT_BUSY : case Constants.SEND_RESULT_FAILURE : break; case Constants.SEND_RESULT_NAK : com.android.server.hdmi.HdmiLogger.debug("Failed to send <Request Short Audio Descriptor>."); finish(); break; } } }); }
public static void removeAudioFormat() { com.android.server.hdmi.HdmiLogger.debug("Remove audio format."); com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup = null; }
@java.lang.Override boolean processCommand(com.android.server.hdmi.HdmiCecMessage cmd) { if ((mState)!= (com.android.server.hdmi.RequestShortAudioDescriptorAction.STATE_WAITING_TIMEOUT)) { return false; } int opcode = cmd.getOpcode(); byte[] params = cmd.getParams(); if (opcode == (Constants.MESSAGE_FEATURE_ABORT)) { int originalOpcode = (cmd.getParams()[0]) & 255; if (originalOpcode == (Constants.MESSAGE_REQUEST_SHORT_AUDIO_DESCRIPTOR)) { com.android.server.hdmi.HdmiLogger.debug("Feature aborted for <Request Short Audio Descriptor>"); finish(); return true; } } else if (opcode == (Constants.MESSAGE_REPORT_SHORT_AUDIO_DESCRIPTOR)) { com.android.server.hdmi.HdmiLogger.debug("ProcessCommand: <Report Short Audio Descriptor>"); com.android.server.hdmi.HdmiLogger.debug(("length:" + (params.length))); if (((params.length) == 0) || ((params.length) > (SAD_LEN_MAX))) { finish(); return false; } if (((params[0]) & 255) == (MSAPI_CODEC_NONE)) { resetShortAudioDescriptor(); finish(); return true; } com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup = new byte[params.length]; com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup =java.util.Arrays.copyOf(params, params.length); setAudioFormat(); return true; } return false; }
private void setAudioFormat() { byte[] buffer = new byte[(com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup.length) + 2];java.lang.String audioParameter = "set_ARC_format=";java.lang.String keyValuePairs; buffer[0] = ((byte) (com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup.length)); buffer[1] = ((byte) (mAvrPort)); for (int index = 0; index < (com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup.length); index++) { buffer[(index + 2)] = com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup[index]; } keyValuePairs = audioParameter + (java.util.Arrays.toString(buffer)); tv().setAudioParameters(keyValuePairs); finish(); }
public libcore.Repository currentUpstream(java.nio.file.Path relPath) { boolean isJsr166 = relPath.startsWith("java /util/concurrent/");java.lang.String ju = " /util/";java.lang.String suffix = ". "; if ((!isJsr166) && (relPath.startsWith(ju))) {java.lang.String name = relPath.toString().substring(ju.length()); if (name.endsWith(suffix)) { name = name.substring(0, ((name.length()) - (suffix.length()))); isJsr166 = libcore.StandardRepositories.juFilesFromJsr166.contains(name); } } if (isJsr166 && (relPath.startsWith("java /sql/")) || (relPath.startsWith("java x/sql/"))) { return UtilSqlUpstream; } else { return defaultUpstream; } }
public void testGetPythonBinaryNormalOnWindows() {java.lang.String originalName =java.lang.System.getProperty(com.android.tradefed.util.VtsPythonRunnerHelperTest.OS_NAME); if (!(originalName.contains(com.android.tradefed.util.VtsPythonRunnerHelperTest.WINDOWS))) {java.lang.System.setProperty(com.android.tradefed.util.VtsPythonRunnerHelperTest.OS_NAME, com.android.tradefed.util.VtsPythonRunnerHelperTest.WINDOWS); } try { runTestPythonBinaryNormal(true); } catch (java.io.IOException e) { fail(); } finally {java.lang.System.setProperty(com.android.tradefed.util.VtsPythonRunnerHelperTest.OS_NAME, originalName); } }
public void testProcessRunTimeout() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelperTest.createMockProcessHelper(CommandStatus.TIMED_OUT);java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(mPythonCmd, commandResult, mTestTimeout); assertEquals(interruptMessage, null); assertEquals(commandResult.getStatus(), CommandStatus.TIMED_OUT); }
@java.lang.Override publicjava.lang.String getPythonBinary() { return (com.android.tradefed.testtype.VtsMultiDeviceTestTest.PYTHON_DIR) + (mPython); }
public void testRunNormalInput() { mVtsPythonRunnerHelper = createMockVtsPythonRunnerHelper(CommandStatus.SUCCESS); mTest.setDevice(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockDevice()); mTest.setVtsPythonRunnerHelper(mVtsPythonRunnerHelper); try { mTest.run(mMockInvocationListener); } catch (java.lang.IllegalArgumentException e) { fail(); e.printStackTrace(); } catch (com.android.tradefed.device.DeviceNotAvailableException e) { fail(); e.printStackTrace(); } }
public void testGetPythonBinaryPythonBinaryNotExists() { com.android.tradefed.util.CommandResult findPythonresult = new com.android.tradefed.util.CommandResult(); findPythonresult.setStatus(CommandStatus.SUCCESS); findPythonresult.setStdout("/user/bin/ "); com.android.tradefed.util.IRunUtil runUtil = createMockRunUtil(findPythonresult); com.android.tradefed.build.IBuildInfo mockBuildInfo = org.easymock.EasyMock.createNiceMock(com.android.tradefed.build.IBuildInfo.class); org.easymock.EasyMock.expect(mockBuildInfo.getFile(org.easymock.EasyMock.eq("VIRTUALENVPATH"))).andReturn(newjava.io.File("NonExists")).atLeastOnce(); org.easymock.EasyMock.replay(mockBuildInfo); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(mockBuildInfo); mVtsPythonRunnerHelper.setRunUtil(runUtil); try {java.lang.String Binary = mVtsPythonRunnerHelper.getPythonBinary(); assertEquals("Wrong Binary", "/user/bin/ "); } catch (java.lang.RuntimeException e) { fail(); } }
public void testGetPythonBinaryException() { com.android.tradefed.util.CommandResult findPythonresult = new com.android.tradefed.util.CommandResult(); findPythonresult.setStatus(CommandStatus.FAILED); findPythonresult.setStdout(""); com.android.tradefed.util.IRunUtil runUtil = createMockRunUtil(findPythonresult); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(null); mVtsPythonRunnerHelper.setRunUtil(runUtil); try {java.lang.Stringjava.Binary = mVtsPythonRunnerHelper.getPythonBinary(); } catch (java.lang.RuntimeException e) { assertEquals("Could not find binary on host machine", e.getMessage()); return; } fail(); }
public void testProcessRunSuccess() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelperTest.createMockProcessHelper(CommandStatus.SUCCESS);java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(mPythonCmd, commandResult, mTestTimeout); assertEquals(interruptMessage, null); assertEquals(commandResult.getStatus(), CommandStatus.SUCCESS); }
@java.lang.Override protected void setUp() throwsjava.lang.Exception { super.setUp(); com.android.tradefed.build.IFolderBuildInfo buildInfo = org.easymock.EasyMock.createNiceMock(com.android.tradefed.build.IFolderBuildInfo.class); org.easymock.EasyMock.replay(buildInfo); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(buildInfo) { @java.lang.Override protected com.android.tradefed.util.ProcessHelper createProcessHelper(java.lang.String[] cmd) { return mProcessHelper; } }; }
public void testGetPythonBinaryNormalOnLinux() {java.lang.String originalName =java.lang.System.getProperty(com.android.tradefed.util.VtsPythonRunnerHelperTest.OS_NAME); if (originalName.contains(com.android.tradefed.util.VtsPythonRunnerHelperTest.WINDOWS)) {java.lang.System.setProperty(com.android.tradefed.util.VtsPythonRunnerHelperTest.OS_NAME, com.android.tradefed.util.VtsPythonRunnerHelperTest.LINUX); } try { runTestPythonBinaryNormal(false); } catch (java.io.IOException e) { fail(); } finally {java.lang.System.setProperty(com.android.tradefed.util.VtsPythonRunnerHelperTest.OS_NAME, originalName); } }
public void testProcessRunFailed() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelperTest.createMockProcessHelper(CommandStatus.FAILED);java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(mPythonCmd, commandResult, mTestTimeout); assertEquals(interruptMessage, null); assertEquals(commandResult.getStatus(), CommandStatus.FAILED); }
publicjava.lang.String getPythonPath() {java.lang.StringBuilder sb = newjava.lang.StringBuilder();java.lang.String separator =java.io.File.pathSeparator; if ((java.lang.System.getenv(com.android.tradefed.util.VtsPythonRunnerHelper.PYTHONPATH))!= null) { sb.append(separator); sb.append(java.lang.System.getenv(com.android.tradefed.util.VtsPythonRunnerHelper.PYTHONPATH)); } if ((mBuildInfo)!= null) { com.android.compatibility.common.tradefed.build.CompatibilityBuildHelper buildHelper = new com.android.compatibility.common.tradefed.build.CompatibilityBuildHelper(mBuildInfo);java.io.File testDir = null; try { testDir = buildHelper.getTestsDir(); } catch (java.io.FileNotFoundException e) { } if (testDir!= null) { sb.append(separator);java.lang.String testCaseDataDir = testDir.getAbsolutePath(); sb.append(testCaseDataDir); } else if ((mBuildInfo.getFile(com.android.tradefed.util.VtsPythonRunnerHelper.VTS))!= null) { sb.append(separator); sb.append(mBuildInfo.getFile(com.android.tradefed.util.VtsPythonRunnerHelper.VTS).getAbsolutePath()).append("/.."); } if ((mBuildInfo.getFile(com.android.tradefed.util.VtsPythonRunnerHelper.PYTHONPATH))!= null) { sb.append(separator); sb.append(mBuildInfo.getFile(com.android.tradefed.util.VtsPythonRunnerHelper.PYTHONPATH).getAbsolutePath()); } } if ((java.lang.System.getenv("ANDROID_BUILD_TOP"))!= null) { sb.append(separator); sb.append(java.lang.System.getenv("ANDROID_BUILD_TOP")).append("/test"); } if ((sb.length()) == 0) { throw newjava.lang.RuntimeException("Could not find path on host machine"); } return sb.substring(1); }
private com.android.tradefed.util.VtsPythonRunnerHelper createMockVtsPythonRunnerHelper(com.android.tradefed.util.CommandStatus status) { com.android.tradefed.build.IBuildInfo buildInfo = org.easymock.EasyMock.createMock(com.android.tradefed.build.IBuildInfo.class); return new com.android.tradefed.util.VtsPythonRunnerHelper(buildInfo) { @java.lang.Override publicjava.lang.String runPythonRunner(java.lang.String[] cmd, com.android.tradefed.util.CommandResult commandResult, long testTimeout) { assertCommand(cmd); try { createResult(cmd[3]); } catch (java.lang.Exception e) { throw newjava.lang.RuntimeException(e); } commandResult.setStatus(status); return null; } @java.lang.Override publicjava.lang.String getPythonBinary() { return (com.android.tradefed.testtype.VtsMultiDeviceTestTest.PYTHON_DIR) + (mPython); } @java.lang.Override publicjava.lang.String getPythonPath() { return " "; } }; }
@java.lang.Override protected void setUp() throwsjava.lang.Exception { super.setUp(); mMockInvocationListener = org.easymock.EasyMock.createMock(com.android.tradefed.result.ITestInvocationListener.class); mPython = " "; mTest = new com.android.tradefed.testtype.VtsMultiDeviceTest() { @java.lang.Override protected void updateVtsRunnerTestConfig(org.json.JSONObject jsonObject) { return; } }; mTest.setBuild(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockBuildInfo()); mTest.setTestCasePath(com.android.tradefed.testtype.VtsMultiDeviceTest.TEST_CASE_PATH); mTest.setTestConfigPath(VtsMultiDeviceTest.DEFAULT_TESTCASE_CONFIG_PATH); }
@java.lang.Override publicjava.lang.String getPythonPath() { return "java.lang.System.getProperty("py.ythonpath"); }
public void testGetPythonBinaryNullBuildInfo() { com.android.tradefed.util.CommandResult findPythonresult = new com.android.tradefed.util.CommandResult(); findPythonresult.setStatus(CommandStatus.SUCCESS); findPythonresult.setStdout("/user/bin/ "); com.android.tradefed.util.IRunUtil runUtil = createMockRunUtil(findPythonresult); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(null); mVtsPythonRunnerHelper.setRunUtil(runUtil);java.lang.String Binary = mVtsPythonRunnerHelper.getPythonBinary(); assertEquals("Wrong Binary",java Binary, "/user/bin/ "); }
public void testProcessRunInterrupted() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelperTest.createMockProcessHelper(null, true);java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(mPythonCmd, commandResult, mTestTimeout); assertFalse((interruptMessage == null)); assertEquals(commandResult.getStatus(), CommandStatus.TIMED_OUT); }
public void runTestPythonBinaryNormal(boolean isWindows) throwsjava.io.IOException {java.lang.String exeDir = (isWindows)? "java.exe" : " ";java.lang.String binDir = (isWindows)? "Scripts" : "bin";java.io.File testDir = com.android.tradefed.util.FileUtil.createTempDir("testVirtualEnv");java.io.File testPython = newjava.io.File(testDir, ((binDir + (java.io.File.separator)) + exeDir)); testPython.getParentFile().mkdirs(); testPython.createNewFile(); com.android.tradefed.log.LogUtil.CLog.i(("creating test file: " + (testPython.getAbsolutePath()))); com.android.tradefed.build.IBuildInfo mockBuildInfo = org.easymock.EasyMock.createNiceMock(com.android.tradefed.build.IBuildInfo.class); org.easymock.EasyMock.expect(mockBuildInfo.getFile(org.easymock.EasyMock.eq("VIRTUALENVPATH"))).andReturn(testDir).atLeastOnce(); org.easymock.EasyMock.replay(mockBuildInfo); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(mockBuildInfo);java.lang.Stringjava.lang.Stringjava Binary = mVtsPythonRunnerHelper.getPythonBinary(); assertEquals("Test Binary", testPython.getAbsolutePath()); com.android.tradefed.util.FileUtil.recursiveDelete(testDir); }
@java.lang.Override public void setVolume(int volume) { volume = ((volume * 512) / 100) - 128; }
javajava.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_PERM, "Need BLUETOOTH permission"); synchronized(mStateMachines) {java.util.List<android.bluetooth.BluetoothDevice> devices = newjava.util.ArrayList<android.bluetooth.BluetoothDevice>();java.util.Set<android.bluetooth.BluetoothDevice> bondedDevices = mAdapter.getBondedDevices(); for (android.bluetooth.BluetoothDevice device : bondedDevices) { android.os.ParcelUuid[] featureUuids = device.getUuids(); if (!(android.bluetooth.BluetoothUuid.isUuidPresent(featureUuids, BluetoothUuid.HearingAid))) { continue; } int connectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm!= null) { connectionState = sm.getConnectionState(); } for (int i = 0; i < (states.length); i++) { if (connectionState == (states[i])) { devices.add(device); } } } return devices; } }
private com.android.bluetooth.hearingaid.HearingAidStateMachine getOrCreateStateMachine(android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, "getStateMachine failed: device cannot be null"); return null; } synchronized(mStateMachines) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm!= null) { return sm; } if ((mStateMachines.size()) > (com.android.bluetooth.hearingaid.HearingAidService.MAX_HEARING_AID_STATE_MACHINES)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ("Maximum number of HearingAid state machines reached: " + (com.android.bluetooth.hearingaid.HearingAidService.MAX_HEARING_AID_STATE_MACHINES))); return null; } if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ("Creating a new state machine for " + device)); } sm = com.android.bluetooth.hearingaid.HearingAidStateMachine.make(device, this, mStateMachinesThread.getLooper()); mStateMachines.put(device, sm); return sm; } }
public android.bluetooth.le.BluetoothLeAdvertiser getBluetoothLeAdvertiser() { if (!(getLeAccess())) { android.util.Log.e(android.bluetooth.BluetoothAdapter.TAG, "getBluetoothLeAdvertiser() not called"); return null; } synchronized(mLock) { if ((android.bluetooth.BluetoothAdapter.sBluetoothLeAdvertiser) == null) { android.bluetooth.BluetoothAdapter.sBluetoothLeAdvertiser = new android.bluetooth.le.BluetoothLeAdvertiser(mManagerService); } } return android.bluetooth.BluetoothAdapter.sBluetoothLeAdvertiser; }
private void onDeviceLoaded(byte capabilities, byte sinkId, byte[] address) { com.android.bluetooth.hearingaid.HearingAidStackEvent event = new com.android.bluetooth.hearingaid.HearingAidStackEvent(HearingAidStackEvent.EVENT_TYPE_DEVICE_LOADED); event.device = getDevice(address); event.valueInt1 = capabilities; event.valueInt2 = sinkId; if (com.android.bluetooth.hearingaid.HearingAidNativeInterface.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidNativeInterface.TAG, ("onAudioStateChanged: " + event)); } sendMessageToService(event); }
public boolean disconnectHearingAid(android.bluetooth.BluetoothDevice device) { return disconnectHearingAidNative(getByteAddress(device)); }
public static void setVolume(int volume) { com.android.bluetooth.hearingaid.HearingAidNativeInterface.setVolumeNative(volume); }
@java.lang.Override protected boolean start() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, "start()"); } if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService)!= null) { throw newjava.lang.IllegalStateException("start() called twice"); } mAdapter =java.util.Objects.requireNonNull(android.bluetooth.BluetoothAdapter.getDefaultAdapter(), "BluetoothAdapter cannot be null when HearingAidService starts"); mAdapterService =java.util.Objects.requireNonNull(com.android.bluetooth.btservice.AdapterService.getAdapterService(), "BluetoothAdapterService cannot be null when HearingAidService starts"); mHearingAidNativeInterface =java.util.Objects.requireNonNull(com.android.bluetooth.hearingaid.HearingAidNativeInterface.getInstance(), "BluetoothAidNativeInterface cannot be null when HearingAidService starts"); mStateMachines.clear(); mStateMachinesThread = new android.os.HandlerThread("HearingAidService.StateMachines"); mStateMachinesThread.start(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED); mBondStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.BondStateChangedReceiver(); registerReceiver(mBondStateChangedReceiver, filter); filter = new android.content.IntentFilter(); filter.addAction(BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED); mConnectionStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.ConnectionStateChangedReceiver(); registerReceiver(mConnectionStateChangedReceiver, filter); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(this); setActiveDevice(null); return true; }
private void onDeviceAvailable(byte[] address, byte[] capabilities, long hiSyncId) { }
void messageFromNative(com.android.bluetooth.hearingaid.HearingAidStackEvent stackEvent) {java.util.Objects.requireNonNull(stackEvent.device, ("Device should never be null, event: " + stackEvent)); if ((stackEvent.type) == (HearingAidStackEvent.EVENT_TYPE_DEVICE_LOADED)) { android.bluetooth.BluetoothDevice device = stackEvent.device; int capabilities = stackEvent.valueInt1; int hiSyncId = stackEvent.valueInt2; mDeviceCapabilitiesMap.put(device, capabilities); mDeviceHiSyncIdMap.put(device, ((long) (hiSyncId))); return; } synchronized(mStateMachines) { android.bluetooth.BluetoothDevice device = stackEvent.device; com.android.bluetooth.hearingaid.HearingAidStateMachine sm = getOrCreateStateMachine(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ("Cannot process stack event: no state machine: " + stackEvent)); return; } sm.sendMessage(HearingAidStateMachine.STACK_EVENT, stackEvent); } }
@java.lang.Override protected boolean stop() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, "stop()"); } if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) == null) { android.util.Log.w(com.android.bluetooth.hearingaid.HearingAidService.TAG, "stop() called before start()"); return true; } setActiveDevice(null); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(null); unregisterReceiver(mBondStateChangedReceiver); mBondStateChangedReceiver = null; unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedReceiver = null; synchronized(mStateMachines) { for (com.android.bluetooth.hearingaid.HearingAidStateMachine sm : mStateMachines.values()) { sm.doQuit(); sm.cleanup(); } mStateMachines.clear(); } if ((mStateMachinesThread)!= null) { mStateMachinesThread.quitSafely(); mStateMachinesThread = null; } mHearingAidNativeInterface = null; mAdapterService = null; mAdapter = null; return true; }
private boolean isActiveDevice(android.bluetooth.BluetoothDevice device) { synchronized(mStateMachines) { return (device!= null) && (mActiveDevices.contains(device)); } }
private void sendMessageToService(com.android.bluetooth.hearingaid.HearingAidStackEvent event) { com.android.bluetooth.hearingaid.HearingAidService service = com.android.bluetooth.hearingaid.HearingAidService.getHearingAidService(); if (service!= null) { service.messageFromNative(event); } else { android.util.Log.w(com.android.bluetooth.hearingaid.HearingAidNativeInterface.TAG, ("Event ignored, service not available: " + event)); } }
@java.lang.Override publicjava.lang.String toString() {java.lang.StringBuilder result = newjava.lang.StringBuilder(); result.append(("HearingAidStackEvent {type:" + (com.android.bluetooth.hearingaid.HearingAidStackEvent.eventTypeToString(type)))); result.append(", device:" + (device))); result.append((", value1:" + (com.android.bluetooth.hearingaid.HearingAidStackEvent.eventTypeValueIntToString(type, valueInt1)))); result.append((", value2:" + (com.android.bluetooth.hearingaid.HearingAidStackEvent.eventTypeValueIntToString(type, valueInt2)))); if ((codecStatus)!= null) { result.append((", codecStatus:" + (codecStatus))); } result.append("}"); return result.toString(); }
private staticjava.lang.String eventTypeToString(int type) { switch (type) { case com.android.bluetooth.hearingaid.HearingAidStackEvent.EVENT_TYPE_NONE : return "EVENT_TYPE_NONE"; case com.android.bluetooth.hearingaid.HearingAidStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED : return "EVENT_TYPE_CONNECTION_STATE_CHANGED"; case com.android.bluetooth.hearingaid.HearingAidStackEvent.EVENT_TYPE_AUDIO_STATE_CHANGED : return "EVENT_TYPE_AUDIO_STATE_CHANGED"; case com.android.bluetooth.hearingaid.HearingAidStackEvent.EVENT_TYPE_CODEC_CONFIG_CHANGED : return "EVENT_TYPE_CODEC_CONFIG_CHANGED"; default : return "EVENT_TYPE_UNKNOWN:" + type; } }
public synchronized boolean setActiveDevice(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (!(mActiveDevices.contains(device))) { return true; } return false; }
public boolean connectHearingAid(android.bluetooth.BluetoothDevice device) { return connectHearingAidNative(getByteAddress(device)); }
private static native void setVolumeNative(int volume);
boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ("disconnect " + device)); } long customerId = mDeviceHiSyncIdMap.get(device); for (android.bluetooth.BluetoothDevice storedDevice : mDeviceHiSyncIdMap.keySet()) { if ((mDeviceHiSyncIdMap.get(storedDevice))!= customerId) { continue; } synchronized(mStateMachines) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ("disconnect request for " + device) + " : no state machine"); continue; } sm.sendMessage(HearingAidStateMachine.DISCONNECT); } } return true; }
void dump(java.lang.StringBuilder sb) { sb.append("List of players: \n"); for (java.lang.String key : mMediaPlayerIds.keySet()) { if ((mMediaPlayersIds.get(key)) == (mActivePlayerId)) { sb.append("*"); } sb.append((((("Player " + (mMediaPlayerIds.get(key))) + ": ") + key) + "\n")); } sb.append((("List of media controllers size: " + (mMediaPlayers.size())) + "\n")); for (com.android.bluetooth.avrcp.MediaPlayerWrapper player : mMediaPlayers.values()) { player.dump(sb); } sb.append((("Browsable Player list size: " + (mBrowsablePlayers.size())) + "\n")); for (com.android.bluetooth.avrcp.BrowsedPlayerWrapper player : mBrowsablePlayers.values()) { player.dump(sb); } }
void removeMediaPlayer(int playerId) { if (!(mMediaPlayers.containsKey(playerId))) { com.android.bluetooth.avrcp.MediaPlayerList.e(("Trying to remove nonexistent media player: " + playerId)); return; } if (playerId == (mActivePlayerId)) { getActivePlayer().unregisterCallback(); mActivePlayerId = 0; } com.android.bluetooth.avrcp.MediaPlayerWrapper wrapper = mMediaPlayers.get(playerId); com.android.bluetooth.avrcp.MediaPlayerList.d(("Removing media player " + (wrapper.getPackageName()))); mMediaPlayerIds.remove(wrapper.getPackageName()); mMediaPlayers.remove(playerId); mMediaPlayers.get(playerId).cleanup(); }
private void sendMediaUpdate(com.android.bluetooth.avrcp.MediaData data) { com.android.bluetooth.avrcp.MediaPlayerList.d("sendMediaUpdate"); if ((mCallback) == null) { return; } if ((data.queue.size()) == 0) { android.util.Log.i(com.android.bluetooth.avrcp.MediaPlayerList.TAG, "sendMediaUpdate: Creating a one item queue for a player with no queue"); data.queue.add(data.metadata); } mCallback.onMediaUpdated(data); }
void getFolderItems(int playerId,java.lang.String mediaId, com.android.bluetooth.avrcp.GetFolderItemsCallback cb) { com.android.bluetooth.avrcp.MediaPlayerList.d(((("getFolderItems(): playerId=" + playerId) + ", mediaId=") + mediaId)); if (mediaId.equals("")) { getFolderItemsMediaPlayerList(cb); return; } if (!(mediaId.matches("^\\d\\d.*$"))) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerList.TAG, ("getFolderItems: mediaId didn't match pattern: mediaId=" + mediaId)); } int playerIndex =java.lang.Integer.parseInt(mediaId.substring(0, 2));java.lang.String itemId = mediaId.substring(2); if (mBrowsablePlayers.containsKey(playerIndex)) { com.android.bluetooth.avrcp.BrowsedPlayerWrapper wrapper = mBrowsablePlayers.get(playerIndex); if (itemId.equals("")) { android.util.Log.i(com.android.bluetooth.avrcp.MediaPlayerList.TAG, ("Empty media id, getting the root for " + (mMediaPlayerIds.get(playerIndex)))); itemId = wrapper.getRootId(); } wrapper.getFolderItems(itemId, ( status, id, results) -> { if (status!= BrowsedPlayerWrapper.STATUS_SUCCESS) { cb.run(mediaId, new ArrayList<com.android.bluetooth.avrcp.ListItem>()); return; }java.lang.String playerPrefix =java.lang.String.format("%02d", playerIndex); for (com.android.bluetooth.avrcp.ListItem item : results) { if (item.isFolder) { item.folder.mediaId = playerPrefix.concat(item.folder.mediaId); } else { item.song.mediaId = playerPrefix.concat(item.song.mediaId); } } cb.run(mediaId, results); }); return; } else { cb.run(mediaId, newjava.util.ArrayList<com.android.bluetooth.avrcp.ListItem>()); } }
int getCurrentPlayerId() { return 0; }
void sendMediaKeyEvent(int key, int state) { com.android.bluetooth.avrcp.MediaPlayerList.d(((("sendMediaKeyEvent: key=" + key) + " state=") + state)); int action = (state == 0)? android.view.KeyEvent.ACTION_DOWN : android.view.KeyEvent.ACTION_UP; android.view.KeyEvent event = new android.view.KeyEvent(action, com.android.bluetooth.avrcp.Helpers.avrcpPassthroughToKeyCode(key)); mMediaSessionManager.dispatchMediaKeyEvent(event); }
void onMediaUpdated(com.android.bluetooth.avrcp.MediaData data);
void getFolderItemsMediaPlayerList(com.android.bluetooth.avrcp.GetFolderItemsCallback cb) { com.android.bluetooth.avrcp.MediaPlayerList.d("getFolderItemsMediaPlayerList: Sending Media Player list for root directory");java.util.ArrayList<com.android.bluetooth.avrcp.ListItem> playerList = newjava.util.ArrayList<com.android.bluetooth.avrcp.ListItem>(); for (com.android.bluetooth.avrcp.BrowsedPlayerWrapper player : mBrowsablePlayers.values()) {java.lang.String displayName = com.android.bluetooth.avrcp.Util.getDisplayName(mContext, player.getPackageName()); int id = mMediaPlayerIds.get(player.getPackageName()); com.android.bluetooth.avrcp.MediaPlayerList.d(("getFolderItemsMediaPlayerList: Adding player " + displayName)); com.android.bluetooth.avrcp.Folder playerFolder = new com.android.bluetooth.avrcp.Folder(java.lang.String.format("%02d", id), false, displayName); playerList.add(new com.android.bluetooth.avrcp.ListItem(playerFolder)); } cb.run("", playerList); return; }
void getPlayerRoot(int playerId, com.android.bluetooth.avrcp.GetPlayerRootCallback cb) { cb.run(playerId, true, "", mBrowsablePlayers.size()); }
private void playNowPlayingItem(java.lang.String mediaId) { com.android.bluetooth.avrcp.MediaPlayerList.d(("playNowPlayingItem: mediaId=" + mediaId));java.util.regex.Pattern regex =java.util.regex.Pattern.compile("NowPlayingId([0-9]*)");java.util.regex.Matcher m = regex.matcher(mediaId); if (!(m.find())) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerList.TAG, ("playNowPlayingItem: Couldn't match mediaId to pattern: mediaId=" + mediaId)); } long queueItemId =java.lang.Long.parseLong(m.group(1)); if ((getActivePlayer())!= null) { getActivePlayer().playItemFromQueue(queueItemId); } }
javajava.lang.String getCurrentMediaId() { final com.android.bluetooth.avrcp.MediaPlayerWrapper player = getActivePlayer(); if (player == null) return ""; final android.media.session.PlaybackState state = player.getCurrentMediaData().state; if ((state == null) || ((state.getActiveQueueItemId()) == (MediaSession.QueueItem.UNKNOWN_ID))) { com.android.bluetooth.avrcp.MediaPlayerList.d(("getCurrentMediaId: No active queue item Id: " + state)); return ""; } return "NowPlayingId" + (state.getActiveQueueItemId()); }
private void playFolderItem(java.lang.String mediaId) { com.android.bluetooth.avrcp.MediaPlayerList.d(("playFolderItem: mediaId=" + mediaId)); if (!(mediaId.matches("^\\d\\d.*$"))) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerList.TAG, ("playFolderItem: mediaId didn't match pattern: mediaId=" + mediaId)); } int playerIndex =java.lang.Integer.parseInt(mediaId.substring(0, 2));java.lang.String itemId = mediaId.substring(2); if (!(mBrowsablePlayers.containsKey(playerIndex))) { com.android.bluetooth.avrcp.MediaPlayerList.e(("playFolderItem: Do not have the a browsable player with ID " + playerIndex)); return; } mBrowsablePlayers.get(playerIndex).playItem(itemId); }
@java.lang.Override public void onMetadataChanged(com.android.bluetooth.avrcp.MediaMetadata metadata) { if (!(isReady())) { android.util.Log.v(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ((mPackageName) + " tried to update with incomplete metadata")); return; } android.util.Log.v(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (((("onMetadataChanged " + (mPackageName)) + " : ") + (metadata.getDescription()))); if (!(metadata.equals(getMetadata()))) { com.android.bluetooth.avrcp.MediaPlayerWrapper.e("Media callback metadata doesn't match controller metadata"); } if (metadata.equals(mCurrentData.metadata)) { android.util.Log.w(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ((("onMetadataChanged " + (mPackageName)) + " tried to update with no new data")); return; } trySendMediaUpdate(); }
protected com.android.bluetooth.avrcp.MediaMetadata getMetadata() { return mMediaController.getMetadata(); }
boolean isMetadataSynced() { if (com.android.bluetooth.avrcp.MediaPlayerWrapper.DEBUG) { android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (("isMetadataSynced() getQueue()!= null) + "):")); } return true; }
javajava.lang.String[] mediaPlayers = com.android.bluetooth.avrcp.MediaPlayer.getMediaPlayers();java.lang.String[] mediaPlayers = mediaPlayers.split(","); if (mediaPlayers.length == 0) { return null; }
public void testProcFiles() throws android.system.ErrnoException,java.io.IOException,java.lang.NumberFormatException { int value = getValue(android.net.cts.IpSecSysctlTest.SPI_TIMEOUT_SYSCTL); assertAtLeast(android.net.cts.IpSecSysctlTest.SPI_TIMEOUT_SYSCTL, value, android.net.cts.IpSecSysctlTest.MIN_ACQ_EXPIRES); }
protectedjava.lang.String readFile(java.lang.String fileName) throws android.system.ErrnoException,java.io.IOException { byte[] buf = new byte[1024];java.io.FileDescriptor fd = android.system.Os.open(fileName, 0, OsConstants.O_RDONLY); int bytesRead = android.system.Os.read(fd, buf, 0, buf.length); assertLess((("length of " + fileName) + ":"), bytesRead, buf.length); return newjava.lang.String(buf); }
protected int getValue(java.lang.String filename) throws android.system.ErrnoException,java.io.IOException { checkSysctlPermissions(filename); returnjava.lang.Integer.parseInt(readFile(filename).trim()); }
public void testProcFiles() throws android.system.ErrnoException,java.io.IOException,java.lang.NumberFormatException { for (java.lang.String sysctl : android.net.cts.MultinetworkSysctlTest.GLOBAL_SYSCTLS) { int value = getValue(sysctl); assertEquals(sysctl, 1, value); }java.io.File[] interfaceDirs = newjava.io.File(android.net.cts.MultinetworkSysctlTest.IPV6_SYSCTL_DIR).listFiles(); for (java.io.File interfaceDir : interfaceDirs) { if ((interfaceDir.getName().equals("all")) || (interfaceDir.getName().equals("lo"))) { continue; }java.lang.String sysctl = newjava.io.File(interfaceDir, android.net.cts.MultinetworkSysctlTest.AUTOCONF_SYSCTL).getAbsolutePath(); int value = getValue(sysctl); assertEquals(sysctl, value, 0); } }
protected void checkSysctlPermissions(java.lang.String fileName) throws android.system.ErrnoException { android.system.StructStat stat = android.system.Os.stat(fileName); assertEquals((("mode of " + fileName) + ":"), android.net.cts.SysctlBaseTest.SYSCTL_MODE, stat.st_mode); assertEquals((("UID of " + fileName) + ":"), android.net.cts.SysctlBaseTest.SYSCTL_UID, stat.st_uid); assertEquals((("GID of " + fileName) + ":"), android.net.cts.SysctlBaseTest.SYSCTL_GID, stat.st_gid); }
public static ApkSigningBlockUtils.Result verify(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections, int minSdkVersion, int maxSdkVersion) throws ApkSigningBlockUtils.SignatureNotFoundException, com.android.apksig.apk.ApkFormatException,java.io.IOException,java.security.NoSuchAlgorithmException { com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result = new com.android.apksig.internal.apk.ApkSigningBlockUtils.Result(com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V2); com.android.apksig.internal.apk.SignatureInfo signatureInfo = com.android.apksig.internal.apk.ApkSigningBlockUtils.findSignature(apk, zipSections, com.android.apksig.internal.apk.v2.V2SchemeVerifier.APK_SIGNATURE_SCHEME_V2_BLOCK_ID, result); com.android.apksig.util.DataSource beforeApkSigningBlock = apk.slice(0, signatureInfo.apkSigningBlockOffset); com.android.apksig.util.DataSource centralDir = apk.slice(signatureInfo.centralDirOffset, ((signatureInfo.eocdOffset) - (signatureInfo.centralDirOffset)));java.nio.ByteBuffer eocd = signatureInfo.eocd; com.android.apksig.internal.apk.v2.V2SchemeVerifier.verify(beforeApkSigningBlock, signatureInfo.signatureBlock, centralDir, eocd, minSdkVersion, maxSdkVersion, result); return result; }
public static ApkSigningBlockUtils.Result verify(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections, int minSdkVersion, int maxSdkVersion) throws com.android.apksig.internal.apk.ApkSigningBlockUtils.SignatureNotFoundException,java.io.IOException,java.security.NoSuchAlgorithmException { com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result = new com.android.apksig.internal.apk.ApkSigningBlockUtils.Result(com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V3); com.android.apksig.internal.apk.SignatureInfo signatureInfo = com.android.apksig.internal.apk.ApkSigningBlockUtils.findSignature(apk, zipSections, com.android.apksig.internal.apk.v3.V3SchemeVerifier.APK_SIGNATURE_SCHEME_V3_BLOCK_ID, result); com.android.apksig.util.DataSource beforeApkSigningBlock = apk.slice(0, signatureInfo.apkSigningBlockOffset); com.android.apksig.util.DataSource centralDir = apk.slice(signatureInfo.centralDirOffset, ((signatureInfo.eocdOffset) - (signatureInfo.centralDirOffset)));java.nio.ByteBuffer eocd = signatureInfo.eocd; com.android.apksig.internal.apk.v3.V3SchemeVerifier.verify(beforeApkSigningBlock, signatureInfo.signatureBlock, centralDir, eocd, minSdkVersion, maxSdkVersion, result); return result; }
private static void parseSigners(java.nio.ByteBuffer apkSignatureSchemeV3Block,java.util.Set<com.android.apksig.internal.apk.ContentDigestAlgorithm> contentDigestsToVerify, int minSdkVersion, int maxSdkVersion, com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result) throwsjava.security.NoSuchAlgorithmException {java.nio.ByteBuffer signers; try { signers = com.android.apksig.internal.apk.ApkSigningBlockUtils.getLengthPrefixedSlice(apkSignatureSchemeV3Block); } catch (com.android.apksig.apk.ApkFormatException e) { result.addError(Issue.V3_SIG_MALFORMED_SIGNERS); return; } if (!(signers.hasRemaining())) { result.addError(Issue.V3_SIG_NO_SIGNERS); return; }java.security.cert.CertificateFactory certFactory; try { certFactory =java.security.cert.CertificateFactory.getInstance("X.509"); } catch (java.security.cert.CertificateException e) { throw newjava.lang.RuntimeException("Failed to obtain X.509 CertificateFactory", e); } int signerCount = 0; while (signers.hasRemaining()) { int signerIndex = signerCount; signerCount++; com.android.apksig.internal.apk.ApkSigningBlockUtils.Result.SignerInfo signerInfo = new com.android.apksig.internal.apk.ApkSigningBlockUtils.Result.SignerInfo(); signerInfo.index = signerIndex; result.signers.add(signerInfo); try {java.nio.ByteBuffer signer = com.android.apksig.internal.apk.ApkSigningBlockUtils.getLengthPrefixedSlice(signers); com.android.apksig.internal.apk.v3.V3SchemeVerifier.parseSigner(signer, certFactory, signerInfo, contentDigestsToVerify, minSdkVersion, maxSdkVersion); } catch (com.android.apksig.apk.ApkFormatException |java.nio.BufferUnderflowException e) { signerInfo.addError(Issue.V3_SIG_MALFORMED_SIGNERS); return; } } }
private void removeImsServiceFeatureListener() { mImsStatusCallbacks.clear(); }
public void addImsServiceFeatureListener(com.android.ims.internal.IImsServiceFeatureCallback callback) { mImsStatusCallbacks.add(callback); }
private android.app.PendingIntent createIncomingCallPendingIntent() { android.content.Intent intent = new android.content.Intent(com.android.ims.ImsManager.ACTION_IMS_INCOMING_CALL); intent.setPackage(com.android.phone.ImsManager.PACKAGE_NAME); return android.app.PendingIntent.getBroadcast(mContext, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT); }
@android.test.suitebuilder.annotation.SmallTest public void testMisc() { android.telephony.ServiceState ss = new android.telephony.ServiceState(); ss.setCssIndicator(100); assertEquals(1, ss.getCssIndicator()); ss.setIsManualSelection(true); assertTrue(ss.getIsManualSelection()); ss.setSystemAndNetworkId(123, 456); assertEquals(123, ss.getCdmaSystemId()); assertEquals(456, ss.getCdmaNetworkId()); ss.setEmergencyOnly(true); assertTrue(ss.isEmergencyOnly()); }
publicjava.lang.String getPid() { try {java.io.StreamTokenizer toks = newjava.io.StreamTokenizer(newjava.io.FileReader("/proc/self/stat")); toks.parseNumbers(); if ((toks.nextToken())!= (java.io.StreamTokenizer.TT_NUMBER)) {java.lang.System.out.println("Failed to tokenize /proc/self/stat correctly. First token isn't a number"); return "-1"; } returnjava.lang.Integer.toString(((int) (toks.nval))); } catch (java.lang.Exception e) {java.lang.System.out.println(("Failed to get pid! " + e)); e.printStackTrace(java.lang.System.out); return "-1"; } }
@java.lang.SuppressWarnings("unused") private static void callChangeCallbacks() { synchronized(android.os.SystemProperties.sChangeCallbacks) { if ((android.os.SystemProperties.sChangeCallbacks.size()) == 0) { return; }java.util.ArrayList<java.lang.Runnable> callbacks = newjava.util.ArrayList<java.lang.Runnable>(android.os.SystemProperties.sChangeCallbacks); for (int i = 0; i < (callbacks.size()); i++) { try { callbacks.get(i).run(); } catch (java.lang.Exception e) { } catch (java.lang.Throwable t) { android.util.Log.e(android.os.SystemProperties.TAG, "Exception during callChangeCallbacks", t); return; } } }
public boolean[] isNfcEventAllowed(android.content.pm.PackageManager packageManager, byte[] aid,java.lang.String[] packageNames, boolean checkRefreshTag) { if ((mAccessControlEnforcer) == null) { try { initializeAccessControl(); } catch (java.lang.Exception e) { android.util.Log.i(mTag, ("isNfcEventAllowed Exception: " + (e.getMessage()))); return null; } } mAccessControlEnforcer.setPackageManager(packageManager); synchronized(mLock) { try { return mAccessControlEnforcer.isNfcEventAllowed(aid, packageNames, checkRefreshTag); } catch (java.lang.Exception e) { android.util.Log.i(mTag, ("isNfcEventAllowed Exception: " + (e.getMessage()))); return null; } } }
com.android.se.security.ChannelAccess setUpChannelAccess(byte[] aid,java.lang.String packageName, int pid) throwsjava.io.IOException,java.util.MissingResourceException { boolean checkRefreshTag = true; if ((mAccessControlEnforcer) == null) { initializeAccessControl(); checkRefreshTag = false; } mAccessControlEnforcer.setPackageManager(mContext.getPackageManager()); synchronized(mLock) { try { com.android.se.security.ChannelAccess channelAccess = mAccessControlEnforcer.setUpChannelAccess(aid, packageName, checkRefreshTag); channelAccess.setCallingPid(pid); return channelAccess; } catch (java.io.IOException e) { throw e; } catch (java.util.MissingResourceException e) { throw e; } catch (java.lang.Exception e) { throw newjava.lang.SecurityException(("SecurityException in setUpChannelAccess() " + e)); } } }
private synchronized void initializeAccessControl() throwsjava.io.IOException,java.util.MissingResourceException { synchronized(mLock) { if ((mAccessControlEnforcer) == null) { mAccessControlEnforcer = new com.android.se.security.AccessControlEnforcer(this); } try { mAccessControlEnforcer.initialize(); } catch (java.io.IOException e) { mAccessControlEnforcer = null; throw e; } catch (java.util.MissingResourceException e) { mAccessControlEnforcer = null; throw e; } }
@java.lang.Override public synchronized void addAddressToTunnelInterface(int tunnelResourceId, android.net.LinkAddress localAddr) { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); try { mSrvConfig.getNetdInstance().interfaceAddAddress(tunnelInterfaceInfo.mInterfaceName, localAddr.getAddress().getHostAddress(), localAddr.getPrefixLength()); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } catch (android.os.ServiceSpecificException e) { throwFromServiceSpecificException(e); } }
private IpSecManager.IpSecTunnelInterface createVti(int resourceId,java.lang.String intfName) throwsjava.lang.Exception { android.net.IpSecTunnelInterfaceResponse dummyResponse = new android.net.IpSecTunnelInterfaceResponse(IpSecManager.Status.OK, resourceId, intfName); when(mMockIpSecService.createTunnelInterface(eq(android.net.IpSecManagerTest.GOOGLE_DNS_4.getHostAddress()), eq(android.net.IpSecManagerTest.GOOGLE_DNS_4_ALT.getHostAddress()), anyObject(), anyObject())).thenReturn(dummyResponse); return mIpSecManager.createIpSecTunnelInterface(android.net.IpSecManagerTest.GOOGLE_DNS_4, android.net.IpSecManagerTest.GOOGLE_DNS_4_ALT, mock(android.net.Network.class)); }
@org.junit.Test public void testAddRemoveAddressesFromVti() throwsjava.lang.Exception { android.net.IpSecManager.IpSecTunnelInterface tunnelIntf = createVti(android.net.IpSecManagerTest.DUMMY_RESOURCE_ID, android.net.IpSecManagerTest.VTI_INTF_NAME); tunnelIntf.addAddress(android.net.IpSecManagerTest.VTI_ADDRESS); verify(mMockIpSecService).addAddressToTunnelInterface(eq(android.net.IpSecManagerTest.DUMMY_RESOURCE_ID), eq(android.net.IpSecManagerTest.VTI_ADDRESS)); tunnelIntf.removeAddress(android.net.IpSecManagerTest.VTI_ADDRESS); verify(mMockIpSecService).addAddressToTunnelInterface(eq(android.net.IpSecManagerTest.DUMMY_RESOURCE_ID), eq(android.net.IpSecManagerTest.VTI_ADDRESS)); }
private android.net.IpSecTunnelInterfaceResponse createTunnel(java.lang.String localAddr,java.lang.String remoteAddr) { android.net.IpSecTunnelInterfaceResponse createTunnelResp = mIpSecService.createTunnelInterface(mSourceAddr, mDestinationAddr, fakeNetwork, new android.os.Binder()); assertNotNull(createTunnelResp); assertEquals(IpSecManager.Status.OK, createTunnelResp.status); return createTunnelResp; }
@org.junit.Test public void testCreateVti() throwsjava.lang.Exception { android.net.IpSecManager.IpSecTunnelInterface tunnelIntf = createVti(android.net.IpSecManagerTest.DUMMY_RESOURCE_ID, android.net.IpSecManagerTest.VTI_INTF_NAME); assertEquals(android.net.IpSecManagerTest.VTI_INTF_NAME, tunnelIntf.getInterfaceName()); tunnelIntf.close(); verify(mMockIpSecService).deleteTunnelInterface(eq(android.net.IpSecManagerTest.DUMMY_RESOURCE_ID)); }
@java.lang.Override public synchronized void removeAddressFromTunnelInterface(int tunnelResourceId, android.net.LinkAddress localAddr) { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); try { mSrvConfig.getNetdInstance().interfaceDelAddress(tunnelInterfaceInfo.mInterfaceName, localAddr.getAddress().getHostAddress(), localAddr.getPrefixLength()); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } catch (android.os.ServiceSpecificException e) { throwFromServiceSpecificException(e); } }
@org.junit.Test public void testDeleteTunnelInterface() throwsjava.lang.Exception { android.net.IpSecTunnelInterfaceResponse createTunnelResp = createTunnel(mSourceAddr, mDestinationAddr); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); mIpSecService.deleteTunnelInterface(createTunnelResp.resourceId); assertEquals(0, userRecord.mTunnelQuotaTracker.mCurrent); verify(mMockNetd).removeVirtualTunnelInterface(eq(createTunnelResp.interfaceName)); try { userRecord.mTunnelInterfaceRecords.getRefcountedResourceOrThrow(createTunnelResp.resourceId); fail("Expected IllegalArgumentException on attempt to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }
public void addAddress(android.net.LinkAddress address) throwsjava.io.IOException { try { mService.addAddressToTunnelInterface(mResourceId, address); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@org.junit.Test public void testTunnelInterfaceBinderDeath() throwsjava.lang.Exception { IpSecTunnelInterfaceResponse createTunnelResp = createTunnel(mSourceAddr, mDestinationAddr); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mTunnelInterfaceRecords.getRefcountedResourceOrThrow(createTunnelResp.resourceId); refcountedRecord.binderDied(); assertEquals(0, userRecord.mTunnelQuotaTracker.mCurrent); verify(mMockNetd).removeVirtualTunnelInterface(eq(createTunnelResp.interfaceName)); try { userRecord.mTunnelInterfaceRecords.getRefcountedResourceOrThrow(createTunnelResp.resourceId); fail("Expected IllegalArgumentException on attempt to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }
@org.junit.Test public void testAddRemoveAddressFromTunnelInterface() throwsjava.lang.Exception { android.net.IpSecTunnelInterfaceResponse createTunnelResp = createTunnel(mSourceAddr, mDestinationAddr); mIpSecService.addAddressToTunnelInterface(createTunnelResp.resourceId, mLocalInnerAddress); verify(mMockNetd).interfaceAddAddress(eq(createTunnelResp.interfaceName), eq(mLocalInnerAddress.getAddress().getHostAddress()), eq(mLocalInnerAddress.getPrefixLength())); mIpSecService.removeAddressFromTunnelInterface(createTunnelResp.resourceId, mLocalInnerAddress); verify(mMockNetd).interfaceDelAddress(eq(createTunnelResp.interfaceName), eq(mLocalInnerAddress.getAddress().getHostAddress()), eq(mLocalInnerAddress.getPrefixLength())); }
@org.junit.Test public void testCreateTunnelInterface() throwsjava.lang.Exception { IpSecTunnelInterfaceResponse createTunnelResp = createTunnel(mSourceAddr, mDestinationAddr); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mTunnelInterfaceRecords.getRefcountedResourceOrThrow(createTunnelResp.resourceId); assertEquals(1, userRecord.mTunnelQuotaTracker.mCurrent); verify(mMockNetd).addVirtualTunnelInterface(eq(createTunnelResp.interfaceName), eq(mSourceAddr), eq(mDestinationAddr), anyInt(), anyInt()); }
public void removeAddress(android.net.LinkAddress address) throwsjava.io.IOException { try { mService.removeAddressFromTunnelInterface(mResourceId, address); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@java.lang.Override public void onResume() { super.onResume(); startForegroundService(new android.content.Intent(this, android.perfetto.producer.ProducerService.class)); startForegroundService(new android.content.Intent(this, android.perfetto.producer.ProducerIsolatedService.class));java.lang.System.loadLibrary("perfettocts_jni"); newjava.lang.Thread(newjava.lang.Runnable() { public void run() { try { android.perfetto.producer.ProducerActivity.setupProducer(); } catch (java.lang.Exception ex) { ex.printStackTrace(); } } }).start(); }
@java.lang.Override public void onCreate() { android.app.NotificationManager manager = ((android.app.NotificationManager) (getSystemService(Context.NOTIFICATION_SERVICE))); android.app.NotificationChannel notificationChannel = new android.app.NotificationChannel(android.perfetto.producer.ProducerService.NOTIF_CHANNEL_ID, android.perfetto.producer.ProducerService.NOTIF_CHANNEL_NAME, android.app.NotificationManager.IMPORTANCE_HIGH); notificationChannel.enableLights(true); notificationChannel.setDescription("Hello service"); notificationChannel.enableVibration(true); notificationChannel.setLockscreenVisibility(Notification.VISIBILITY_PUBLIC); manager.createNotificationChannel(notificationChannel); android.app.Notification.Builder builder = new android.app.Notification.Builder(this, android.perfetto.producer.ProducerService.NOTIF_CHANNEL_ID); builder.setContentTitle("Hello service"); startForeground(android.perfetto.producer.ProducerService.NOTIFICATION_ID, builder.build()); }
@java.lang.Override public void onCreate() { android.app.NotificationManager manager = ((android.app.NotificationManager) (getSystemService(Context.NOTIFICATION_SERVICE))); android.app.NotificationChannel notificationChannel = new android.app.NotificationChannel(android.perfetto.producer.ProducerIsolatedService.NOTIF_CHANNEL_ID, android.perfetto.producer.ProducerIsolatedService.NOTIF_CHANNEL_NAME, android.app.NotificationManager.IMPORTANCE_HIGH); notificationChannel.enableLights(true); notificationChannel.setDescription("This is an isolated service"); notificationChannel.enableVibration(true); notificationChannel.setLockscreenVisibility(Notification.VISIBILITY_PUBLIC); manager.createNotificationChannel(notificationChannel); android.app.Notification.Builder builder = new android.app.Notification.Builder(this, android.perfetto.producer.ProducerIsolatedService.NOTIF_CHANNEL_ID); builder.setContentTitle("This is an isolated service"); startForeground(android.perfetto.producer.ProducerIsolatedService.NOTIFICATION_ID, builder.build()); }
public static com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree create(com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.Country country,java.time.Instant startInclusive,java.time.Instant endExclusive) { com.ibm.icu.text.TimeZoneNames timeZoneNames = com.ibm.icu.text.TimeZoneNames.getInstance(ULocale.US);java.util.List<com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.TimeZoneMapping> timeZoneMappings = country.getTimeZoneMappingsList();java.util.List<com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo> zoneInfos = newjava.util.ArrayList<>(); for (int i = 0; i < (timeZoneMappings.size()); i++) { com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.TimeZoneMapping timeZoneMapping = timeZoneMappings.get(i); int priority = timeZoneMapping.getPriority(); com.ibm.icu.util.BasicTimeZone timeZone = ((com.ibm.icu.util.BasicTimeZone) (com.ibm.icu.util.TimeZone.getTimeZone(timeZoneMapping.getId()))); if (timeZone == (com.ibm.icu.util.TimeZone.UNKNOWN_ZONE)) { throw newjava.lang.IllegalArgumentException(("Unknown zone id: " + timeZone)); } com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo zoneInfo = com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo.create(timeZoneNames, timeZone, priority, startInclusive, endExclusive); zoneInfos.add(zoneInfo); } return com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.create(country.getIsoCode(), zoneInfos); }
@java.lang.Override public void visit(com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode node) { if ((node.getParent()) == null) { return; }java.lang.String nodeName = enquote(node.getId());java.time.Instant startInstant = node.getStartInstant();java.time.Instant endInstant = node.getEndInstant(); boolean priorityClash = node.hasPriorityClash();java.lang.String fromTimestamp = startInstant.toString();java.lang.String toTimestamp = (endInstant == null)? "..." : endInstant.toString();java.lang.String optionalColor = (priorityClash)? ",color=\"red\"" : "";java.lang.String label = ((((((node.getZoneInfosString()) + "\nFrom=") + fromTimestamp) + " to ") + toTimestamp) + "\nPeriod count=") + (node.getPeriodCount()); writeLine((((((nodeName + "[label=\"") + label) + "\"") + optionalColor) + "];")); for (com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode child : node.getChildren()) { writeLine((((nodeName + " -> ") + (enquote(child.getId()))) + ";")); } }
@java.lang.Override public void visit(com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode node) { if ((node.getParent()) == null) { return; } if ((node.getChildrenCount()) == 1) { com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode child = node.getChildren().iterator().next(); node.removeChild(child); int periodCountAdjustment = child.getPeriodCount(); com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode descendant = child; while ((descendant.getChildrenCount()) == 1) { descendant = descendant.getChildren().iterator().next(); periodCountAdjustment += descendant.getPeriodCount(); } for (com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode newChild : descendant.getChildren()) { node.addChild(newChild); } node.adjustPeriodCount(periodCountAdjustment); } }
javajava.time.Instant getStartInstant() { int index = (primaryZoneInfo.getZoneOffsetPeriodCount()) - (((periodOffset) + (periodCount)) - 1); return primaryZoneInfo.getZoneOffsetPeriod(index).getStartInstant(); }
@java.lang.Override publicjava.lang.String getId() { return timeZone.getID(); }
javajava.lang.String getZoneInfosString() { return zoneInfos.stream().map(( z) -> (((z.getId()) + ") + (z.getPriority())) + ")").collect(java.util.stream.Collectors.toList()).toString(); }
public static com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo create(com.ibm.icu.text.TimeZoneNames timeZoneNames, com.ibm.icu.util.BasicTimeZone timeZone, int priority,java.time.Instant startInclusive,java.time.Instant endExclusive) {java.util.List<com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod> zoneOffsetPeriods = newjava.util.ArrayList<>();java.time.Instant start = startInclusive; do { com.ibm.icu.util.TimeZoneTransition transition = timeZone.getNextTransition(start.toEpochMilli(), true);java.time.Instant end; if (transition == null) { end = endExclusive; } else { com.ibm.icu.util.TimeZoneTransition nextTransition = timeZone.getNextTransition(transition.getTime(), false); if (nextTransition!= null) { end =java.time.Instant.ofEpochMilli(nextTransition.getTime()); } else { end = endExclusive; } } com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod zoneOffsetPeriod = com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod.create(timeZoneNames, timeZone, start, end); zoneOffsetPeriods.add(zoneOffsetPeriod); start = end; } while (start.isBefore(endExclusive) ); return new com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo(timeZone, priority, zoneOffsetPeriods); }
@java.lang.Override publicjava.lang.String toString() { return (((("ZoneInfo{" + "priority=") + (priority)) + ", timeZone=") + (timeZone.getID())) + '}'; }
public static com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod create(com.ibm.icu.text.TimeZoneNames timeZoneNames, com.ibm.icu.util.BasicTimeZone timeZone,java.time.Instant start,java.time.Instant end) { int[] offsets = new int[2]; long startMillis = start.toEpochMilli(); timeZone.getOffset(startMillis, false, offsets);java.lang.String canonicalID = com.ibm.icu.util.TimeZone.getCanonicalID(timeZone.getID()); com.ibm.icu.text.TimeZoneNames.NameType longNameType = ((offsets[1]) == 0)? TimeZoneNames.NameType.LONG_STANDARD : TimeZoneNames.NameType.LONG_DAYLIGHT;java.lang.String longName = timeZoneNames.getDisplayName(canonicalID, longNameType, startMillis); return new com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod(start, end, offsets[0], offsets[1], longName); }
private void determineNodePriority(java.util.List<com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo> zoneInfos) { com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo primaryCandidate = null; int priorityCount = 0; for (com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo zoneInfo : zoneInfos) { if ((primaryCandidate == null) || ((primaryCandidate.getPriority()) < (zoneInfo.getPriority()))) { primaryCandidate = zoneInfo; priorityCount = 1; } else if ((primaryCandidate.getPriority()) == (zoneInfo.getPriority())) { priorityCount++; } } primaryZoneInfo = primaryCandidate; priorityClash = priorityCount > 1; }
public void compressTree() { class CompressionVisitor implements com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNodeVisitor { @java.lang.Override public void visit(com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode node) { if ((node.getParent()) == null) { return; } if ((node.getChildrenCount()) == 1) { com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode child = node.getChildren().iterator().next(); node.removeChild(child); int periodCountAdjustment = child.getPeriodCount(); com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode descendant = child; while ((descendant.getChildrenCount()) == 1) { descendant = descendant.getChildren().iterator().next(); periodCountAdjustment += descendant.getPeriodCount(); } for (com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode newChild : descendant.getChildren()) { node.addChild(newChild); } node.adjustPeriodCount(periodCountAdjustment); } } } root.visitSelfThenChildrenRecursive(new CompressionVisitor()); }
public void binderDied() { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ("Binder is dead - unregister " + (mPackageName))); }java.util.Iterator<android.os.IBinder> list_iterator = mBleApps.keySet().iterator(); while (list_iterator.hasNext()) { android.os.IBinder token = list_iterator.next(); com.android.server.BluetoothManagerService.ClientDeathRecipient deathRec = mBleApps.get(token); if (deathRec.equals(this)) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ("removed this BLE app " + (mPackageName))); } mBleApps.remove(token); break; } } if (isBleAppPresent()) { return; } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "Calling LE only mode after application crash"); } try { mBluetoothLock.readLock().lock(); if (((mBluetooth)!= null) && ((mBluetooth.getState()) == (android.bluetooth.BluetoothAdapter.STATE_BLE_ON))) { mEnable = false; mBluetooth.onBrEdrDown(); } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, "Failed to call onBrEdrDown", e); } finally { mBluetoothLock.readLock().unlock(); } }
private boolean connectSocket() { try { if ((mPseRec) == null) { android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, "Invalid UUID: " + (BluetoothUuid.PBAP_PSE.getUuid()))); mSocket = mDevice.createRfcommSocketToServiceRecord(BluetoothUuid.PBAP_PSE.getUuid()); } else if ((mPseRec.getL2capPsm())!= (com.android.bluetooth.pbapclient.PbapClientConnectionHandler.L2CAP_INVALID_PSM)) { android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, "Invalid PSM: " + (mPseRec.getL2capPsm()))); mSocket = mDevice.createL2capSocket(mPseRec.getL2capPsm()); } else { android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, "Invalid channel: " + (mPseRec.getRfcommChannelNumber()))); mSocket = mDevice.createRfcommSocket(mPseRec.getRfcommChannelNumber()); } if ((mSocket)!= null) { mSocket.connect(); return true; } else { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, "Could not create socket"); } } catch (java.io.IOException e) { android.util.Log.e(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, "Error while connecting socket"); } return false; }
private void removeUncleanAccounts() { android.accounts.AccountManager accountManager = android.accounts.AccountManager.get(this); android.accounts.Account[] accounts = accountManager.getAccountsByType(getString(R.string.pbap_account_type)); if (com.android.bluetooth.pbapclient.PbapClientService.DBG) android.util.Log.d(com.android.bluetooth.pbapclient.PbapClientService.TAG, (("removeUncleanAccounts: " + (accounts.length)) + " unclean accounts")); for (android.accounts.Account acc : accounts) { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientService.TAG, ("removeUncleanAccount: " + acc)); accountManager.removeAccountExplicitly(acc); } try { getContentResolver().delete(CallLog.Calls.CONTENT_URI, null, null); } catch (java.lang.IllegalArgumentException e) { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientService.TAG, "Logs could not be deleted, they may not exist yet."); } }
javajava.lang.String getArtifactFetcher(com.android.tradefed.build.IBuildInfo buildInfo) { com.android.tradefed.util.VtsVendorConfigFileUtil configFileUtil = new com.android.tradefed.util.VtsVendorConfigFileUtil(); if (configFileUtil.LoadVendorConfig(buildInfo)) { return configFileUtil.GetVendorConfigVariable("build_artifact_fetcher"); } return null; }
javajava.io.File createTempDir(com.android.tradefed.device.ITestDevice device) throwsjava.io.IOException { return com.android.tradefed.util.FileUtil.createTempDir(device.getSerialNumber()); }
@java.lang.Override protected boolean start() { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "Starting the AVRCP Target Service"); mCurrentData = new com.android.bluetooth.avrcp.MediaData(null, null, null); mNativeInterface = com.android.bluetooth.avrcp.AvrcpNativeInterface.getInterface(); mReceiver = new com.android.bluetooth.avrcp.AvrcpTargetService.AvrcpBroadcastReceiver(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothA2dp.ACTION_ACTIVE_DEVICE_CHANGED); registerReceiver(mReceiver, filter); return true; }
private void addActiveLog(int reason,java.lang.String packageName, boolean enable) { synchronized(mActiveLogs) { if ((mActiveLogs.size()) > (com.android.server.BluetoothManagerService.ACTIVE_LOG_MAX_SIZE)) { mActiveLogs.remove(); } mActiveLogs.add(new com.android.server.BluetoothManagerService.ActiveLog(reason, packageName, enable,java.lang.System.currentTimeMillis())); } }
@android.annotation.NonNull publicjava.io.FileDescriptor getSocket() { if ((mPfd) == null) { return null; } return mPfd.getFileDescriptor(); }
public void addAddress(@android.annotation.NonNull android.net.LinkAddress address) throwsjava.io.IOException {java.io.ByteArrayOutputStream out = newjava.io.ByteArrayOutputStream(); android.net.LinkAddress newAddress = new android.net.LinkAddress(address.getAddress()); newAddress.setPort(address.getPort()); com.android.net.LinkManager.addAddress(newAddress); }
public void removeAddress(@android.annotation.NonNull android.net.LinkAddress address) throwsjava.io.IOException { android.net.LinkAddress newAddress = new android.net.LinkAddress(address); com.android.net.LinkAddress.remove(newAddress); }
public void setActiveDevice(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ("setActiveDevice" + device)); } if ((device == null) && ((mActiveDeviceHiSyncId)!= (android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID))) { reportActiveDevice(null); mActiveDeviceHiSyncId = android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID; return; }java.lang.Long deviceHiSyncId = mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID); if (deviceHiSyncId!= (mActiveDeviceHiSyncId)) { reportActiveDevice(device); mActiveDeviceHiSyncId = deviceHiSyncId; } }
boolean isActiveDevice() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ("isActiveDevice:" + device)); } return (mActiveDeviceHiSyncId) == (mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID)); }
void disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ("disconnect " + device)); } long hiSyncId = mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID); if (hiSyncId == (android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID)) { return; } for (android.bluetooth.BluetoothDevice storedDevice : mDeviceHiSyncIdMap.keySet()) { if (((mDeviceHiSyncIdMap. getOrDefault(storedDevice, BluetoothHearingAid.HI_SYNC_ID_INVALID))!= hiSyncId) || (storedDevice.equals(device))) { continue; } synchronized(mStateMachines) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(storedDevice); if (sm == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ("disconnect request for " + device) + " : no state machine"); continue; } sm.sendMessage(HearingAidStateMachine.DISCONNECT); } }
private synchronized void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((((("connectionStateChanged unexpected invocation. device=" + device) + " fromState=") + fromState) + " toState=") + toState)); return; } if (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { setActiveDevice(device); } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (getConnectedDevices().isEmpty())) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ("device " + device) + " is unbond. Remove state machine")); } removeStateMachine(device); } } }
com.android.sdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdksdk
boolean registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, android.bluetooth.IBluetoothHidDeviceCallback callback) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, "registerApp() calling uid=" + (mUserUid))); } int callingUid = android.os.Binder.getCallingUid(); mUserUid = callingUid; mCallback = callback; return mHidDeviceNativeInterface.registerApp(sdp.name, sdp.description, sdp.provider, sdp.subclass, sdp.descriptors, (inQos == null? null : inQos.toArray()), (outQos == null? null : outQos.toArray())); }
public boolean registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos,java.util.concurrent.Executor executor, android.bluetooth.BluetoothHidDevice.Callback callback) { android.util.Log.v(android.bluetooth.BluetoothHidDevice.TAG, ((((((((("registerApp: sdp=" + sdp) + ", inQos=") + inQos) + ", outQos=") + outQos) + ", executor=") + executor) + ", callback=") + callback)); boolean result = false; if (sdp == null) { throw newjava.lang.IllegalArgumentException("sdp parameter cannot be null"); } if (executor == null) { throw newjava.lang.IllegalArgumentException("executor parameter cannot be null"); } if (callback == null) { throw newjava.lang.IllegalArgumentException("callback parameter cannot be null"); } final android.bluetooth.IBluetoothHidDevice service = mService; if (service!= null) { try { android.bluetooth.BluetoothHidDevice.CallbackWrapper cbw = new android.bluetooth.BluetoothHidDevice.CallbackWrapper(executor, callback); result = service.registerApp(sdp, inQos, outQos, cbw); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHidDevice.TAG, e.toString()); } } else { android.util.Log.w(android.bluetooth.BluetoothHidDevice.TAG, "Service not attached to service"); } return result; }
public void testServiceForegroundDuration() throwsjava.lang.Exception { batteryOnScreenOff(); installPackage(com.android.server.cts.BatteryStatsValidationTest.DEVICE_SIDE_TEST_APK, true); getDevice().executeShellCommand("adb start -n com.android.server.cts.device.batterystats/.SimpleActivity"); assertValueRange("st", "", 5, 0, 0); runDeviceTests(com.android.server.cts.BatteryStatsValidationTest.DEVICE_SIDE_TEST_PACKAGE, ".BatteryStatsProcessStateTests", "testForegroundService"); assertValueRange("st", "", 5, ((long) (2000 * 0.8)), ((java.lang.System.currentTimeMillis()) - startTime)); batteryOffScreenOn(); }
@java.lang.Override public android.net.NetworkStats getDetailedUidStats(int limitUid,java.lang.String[] limitIfaces, int limitTag) { try { android.net.NetworkStats stats = getNetworkStatsUidDetail(); stats.filter(limitUid, limitIfaces, limitTag); return stats; } catch (android.os.RemoteException e) { android.util.Log.wtf(com.android.server.net.NetworkStatsService.TAG, "Error compiling UID stats", e); return new android.net.NetworkStats(0L, 0); } }
private void setValues(int i, android.net.NetworkStats.Entry values) { iface[i] = values.iface; uid[i] = values.uid; set[i] = values.set; tag[i] = values.tag; metered[i] = values.metered; roaming[i] = values.roaming; defaultNetwork[i] = values.defaultNetwork; rxBytes[i] = values.rxBytes; rxPackets[i] = values.rxPackets; txBytes[i] = values.txBytes; txPackets[i] = values.txPackets; operations[i] = values.operations; }
@org.junit.Test public void testFilter_UidFilter() { final int testUid = 10101; android.net.NetworkStats.Entry entry1 = new android.net.NetworkStats.Entry("test1", testUid, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, 50000L, 25L, 100000L, 50L, 0L); android.net.NetworkStats.Entry entry2 = new android.net.NetworkStats.Entry("test2", testUid, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, 50000L, 25L, 100000L, 50L, 0L); android.net.NetworkStats.Entry entry3 = new android.net.NetworkStats.Entry("test2", testUid, android.net.NetworkStats.SET_DEFAULT, 123, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, 50000L, 25L, 100000L, 50L, 0L); android.net.NetworkStats stats = new android.net.NetworkStats(android.net.NetworkStatsTest.TEST_START, 3).addValues(entry1).addValues(entry2).addValues(entry3); stats.filter(testUid, null, android.net.NetworkStats.TAG_ALL); assertEquals(2, stats.size()); assertEquals(entry2, stats.getValues(0, null)); assertEquals(entry3, stats.getValues(1, null)); }
@org.junit.Test public void testFilter_TagFilter() { final int testTag = 123; final int otherTag = 456; android.net.NetworkStats.Entry entry1 = new android.net.NetworkStats.Entry("test1", 10100, android.net.NetworkStats.SET_DEFAULT, testTag, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, 50000L, 25L, 100000L, 50L, 0L); android.net.NetworkStats.Entry entry2 = new android.net.NetworkStats.Entry("test2", 10101, android.net.NetworkStats.SET_DEFAULT, testTag, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, 50000L, 25L, 100000L, 50L, 0L); android.net.NetworkStats.Entry entry3 = new android.net.NetworkStats.Entry("test2", 10101, android.net.NetworkStats.SET_DEFAULT, otherTag, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, 50000L, 25L, 100000L, 50L, 0L); android.net.NetworkStats stats = new android.net.NetworkStats(android.net.NetworkStatsTest.TEST_START, 3).addValues(entry1).addValues(entry2).addValues(entry3); stats.filter(android.net.NetworkStats.UID_ALL, null, testTag); assertEquals(2, stats.size()); assertEquals(entry1, stats.getValues(0, null)); assertEquals(entry2, stats.getValues(1, null)); }
@org.junit.Test public void testFilter_NoFilter() { android.net.NetworkStats stats = new android.net.NetworkStats(android.net.NetworkStatsTest.TEST_START, 3).addValues(android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, 50000L, 25L, 100000L, 50L, 0L); android.net.NetworkStats stats2 = new android.net.NetworkStats(android.net.NetworkStatsTest.TEST_START, 3).addValues(android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, 50000L, 25L, 100000L, 50L, 0L); android.net.NetworkStats stats3 = new android.net.NetworkStats(android.net.NetworkStatsTest.TEST_START, 3).addValues(entry1).addValues(entry2).addValues(entry3); stats.filter(android.net.NetworkStats.UID_ALL, null, android.net.NetworkStats.TAG_ALL); assertEquals(3, stats.size()); assertEquals(entry1, stats.getValues(0, null)); assertEquals(entry2, stats.getValues(1, null)); assertEquals(entry3, stats.getValues(2, null)); }
@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, android.os.IBinder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); restrictRequestUidsForCaller(nc); restrictBackgroundRequestForCaller(nc); ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log(("listening for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); return networkRequest; }
public boolean hasUseBackgroundNetworksPermission(int uid) { finaljava.lang.String[] names = mPackageManager.getPackagesForUid(uid); if ((null == names) || ((names.length) <= 0)) return false; try { final android.content.pm.PackageInfo app = mPackageManager.getPackageInfo(names[0], com.android.server.connectivity.GET_PERMISSIONS); return hasUseBackgroundNetworksPermission(app); } catch (android.content.pm.PackageManager.NameNotFoundException e) { com.android.server.connectivity.PermissionMonitor.loge(("NameNotFoundException " + (names[0]))); return false; } }
public void testOnlyCrypt() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, null, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, null, null, false, 1, true); }
public void testJustAuth() throwsjava.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, auth, null, false, 1, true); }
public static void updateTracing(android.content.Context context, boolean force) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if (((prefs.getBoolean(context.getString(R.string.pref_key_tracing_on), false))!= (com.android.traceur.AtraceUtils.isTracingOn())) || force) { if (prefs.getBoolean(context.getString(R.string.pref_key_tracing_on), false)) {java.lang.String activeAvailableTags = com.android.traceur.Receiver.getActiveTags(context, prefs, true); if (!(android.text.TextUtils.equals(activeAvailableTags, com.android.traceur.Receiver.getActiveTags(context, prefs, false)))) { com.android.traceur.Receiver.postRootNotification(context, prefs); } else { com.android.traceur.Receiver.cancelRootNotification(context); }java.util.Set<java.lang.String> apps = prefs.getStringSet(context.getString(R.string.pref_key_apps),java.util.Collections.EMPTY_SET); com.android.traceur.AtraceUtils.atraceStart(activeAvailableTags, com.android.traceur.Receiver.BUFFER_SIZE_KB, apps); } else { com.android.traceur.AtraceUtils.atraceStop(); com.android.traceur.Receiver.cancelRootNotification(context); } } }
public static void atraceStart(java.lang.String tags, int bufferSizeKb,java.util.Set<java.lang.String> apps) {java.lang.String appParameter = (apps.isEmpty())? "" : -a + (android.text.TextUtils.join(",", apps));java.lang.String cmd = (("atrace --async_start -c -b " + bufferSizeKb) + " " + tags) + appParameter; android.util.Log.v(com.android.traceur.AtraceUtils.TAG, ("Starting async atrace: " + cmd)); try {java.lang.Process atrace = com.android.traceur.AtraceUtils.exec(cmd); if ((atrace.waitFor())!= 0) { android.util.Log.e(com.android.traceur.AtraceUtils.TAG, ("Async atrace failed with: " + (atrace.exitValue()))); } } catch (java.lang.Exception e) { throw newjava.lang.RuntimeException(e); } }
@java.lang.Override public int compare(ApplicationInfo one, ApplicationInfo two) { return one.packageName.compareToIgnoreCase(two.packageName); }
private void refreshApps() { android.content.pm.PackageManager packageManager = getContext().getPackageManager();java.util.List<android.content.pm.ApplicationInfo> availableApps = packageManager.getInstalledApplications(0);java.util.Collections.sort(availableApps, com.android.traceur.MainFragment.mPackageComparator);java.util.ArrayList<java.lang.String> entries = newjava.util.ArrayList<java.lang.String>(availableApps.size());java.util.ArrayList<java.lang.String> values = newjava.util.ArrayList<java.lang.String>(availableApps.size()); for (android.content.pm.ApplicationInfo app : availableApps) { entries.add(app.packageName); values.add(app.packageName); } mRefreshing = true; try { mApps.setEntries(entries.toArray(newjava.lang.String[0])); mApps.setEntryValues(values.toArray(newjava.lang.String[0])); } finally { mRefreshing = false; } }
@org.junit.Test @android.support.test.filters.MediumTest public void testElementsOnMainScreen() throwsjava.lang.Exception { assertNotNull("No trace switch not found.", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text("No trace com.android.traceur.uitest.TraceurAppTests.TIMEOUT"))); assertNotNull("No share trace element not found.", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text("No share trace com.android.traceur.uitest.TraceurAppTests.TIMEOUT"))); assertNotNull("Categories element not found.", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text("Categories")), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); assertNotNull("Default default categories element not found.", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text("Default default categories"), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); assertNotNull("Applications element not found.", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text("Applications")), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); assertNotNull("Quick Settings tile switch not found.", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text("Quick Settings tile"), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); }
@java.lang.Override public void setDnsConfigurationForNetwork(int netId,java.lang.String[] servers,java.lang.String[] domains, int[] params, boolean useTls,java.lang.String tlsHostname,java.lang.String[] tlsServers) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.CONNECTIVITY_INTERNAL, com.android.server.NetworkManagementService.TAG); finaljava.lang.String[] tlsFingerprints = newjava.lang.String[0]; try { mNetdService.setResolverConfiguration(netId, servers, domains, params, useTls, tlsHostname, tlsServers, tlsFingerprints); } catch (android.os.RemoteException e) { throw newjava.lang.RuntimeException(e); } }
public void setDnsConfigurationForNetwork(int netId, android.net.LinkProperties lp, boolean isDefaultNetwork) { final com.android.server.connectivity.DnsManager.PrivateDnsConfig privateDnsCfg = mPrivateDnsMap.get(netId); final boolean useTls = (privateDnsCfg!= null) && (privateDnsCfg.useTls); final boolean strictMode = (privateDnsCfg!= null) && (privateDnsCfg.inStrictMode()); finaljava.lang.String tlsHostname = (strictMode)? privateDnsCfg.hostname : ""; finaljava.lang.String[] tlsServers = (strictMode)? android.net.NetworkUtils.makeStrings(java.util.Arrays.stream(privateDnsCfg.ips).filter(( ip) -> lp.isReachable(ip)).collect(java.util.stream.Collectors.toList())).toArray(java.lang.String[0]); finaljava.lang.String[] assignedServers = android.net.NetworkUtils.makeStrings(lp.getDnsServers()); finaljava.lang.String[] domainStrs = com.android.server.connectivity.DnsManager.getDomainStrings(lp.getDomains()); updateParametersSettings(); final int[] params = new int[]{ mSampleValidity, mSuccessThreshold, mMinSamples, mMaxSamples }; android.util.Slog.d(com.android.server.connectivity.DnsManager.TAG,java.lang.String.format("setDnsConfigurationForNetwork: %s, %s, %s, %s", netId,java.util.Arrays.toString(assignedServers),java.util.Arrays.toString(domainStrs),java.util.Arrays.toString(params), useTls, tlsHostname,java.util.Arrays.toString(tlsServers))); try { mNMS.setDnsConfigurationForNetwork(netId, assignedServers, domainStrs, params, useTls, tlsHostname, tlsServers); } catch (java.lang.Exception e) { android.util.Slog.e(com.android.server.connectivity.DnsManager.TAG, ("Error setting DNS configuration: " + e)); } if (isDefaultNetwork) setDefaultDnsProperties(lp); flushCache(); }
public void dispose() { synchronized(mLock) { if (com.android.internal.telephony.uicc.UiccProfile.DBG) com.android.internal.telephony.uicc.UiccProfile.log("Uicc profile unregisterAllAppEvents"); unregisterCurrAppEvents(); if ((mUiccCard) instanceof com.android.internal.telephony.uicc.euicc.EuiccCard) { ((com.android.internal.telephony.uicc.euicc.EuiccCard) (mUiccCard)).unregisterForEidReady(mCi); } mCi.unregisterForOffOrNotAvailable(mCi); if ((mCatService)!= null) mCatService.dispose(); for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app!= null) { app.dispose(); } } mCatService = null; mUiccApplications = null; mCarrierPrivilegeRules = null; mDisposed = true; } }
@java.lang.Override public void releaseConnectionService(com.android.server.telecom.ConnectionServiceFocusManager.ConnectionServiceFocus connectionService) { mCalls.stream().filter(( c) -> c.getConnectionServiceWrapper().equals(connectionService)).forEach(( c) -> c.disconnect(("ConnectionService " + (connectionService.getComponentName())))); }
public int registerStatusListener(@android.annotation.NonNull android.telephony.mbms.DownloadRequest request, @android.annotation.NonNulljava.util.concurrent.Executor executor, @android.annotation.NonNull android.telephony.mbms.DownloadStatusListener listener) { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { throw newjava.lang.IllegalStateException("IMbmsDownloadService not yet bound"); } android.telephony.mbms.internalDownloadStatusListener internalListener = new android.telephony.mbms.internalDownloadStatusListener(listener, executor); try { int result = downloadService.registerStatusListener(request, internalListener); if (result!= (android.telephony.mbms.MbmsErrors.SUCCESS)) { if (result == (MbmsErrors.DownloadErrors.ERROR_UNKNOWN_DOWNLOAD_REQUEST)) { throw newjava.lang.IllegalArgumentException("Unknown download request."); } return result; } } catch (android.os.RemoteException e) { mService.set(null); android.telephony.MbmsDownloadSession.sIsInitialized.set(false); return android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_LOST; } mInternalDownloadStatusListeners.put(listener, internalListener); return android.telephony.mbms.MbmsErrors.SUCCESS; }
@java.lang.Override public int registerProgressListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadProgressListener listener) throws android.os.RemoteException { mDownloadProgressListener = listener; return android.telephony.mbms.MbmsErrors.SUCCESS; }
public int unregisterStatusListener(@android.annotation.NonNull android.telephony.mbms.DownloadRequest request, @android.annotation.NonNull android.telephony.mbms.DownloadStatusListener listener) { try { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { throw newjava.lang.IllegalStateException("downloadService not yet bound"); } android.telephony.mbms.InternalDownloadStatusListener internalListener = mInternalDownloadStatusListeners.get(listener); if (internalListener == null) { throw newjava.lang.IllegalArgumentException("Listener was never registered"); } try { int result = downloadService.unregisterStatusListener(request, internalListener); if (result!= (android.telephony.mbms.MbmsErrors.SUCCESS)) { if (result == (MbmsErrors.DownloadErrors.ERROR_UNKNOWN_DOWNLOAD_REQUEST)) { throw newjava.lang.IllegalArgumentException("Unknown download request."); } return result; } } catch (android.os.RemoteException e) { mService.set(null); android.telephony.MbmsDownloadSession.sIsInitialized.set(false); return android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_LOST; } } finally { android.telephony.mbms.InternalDownloadStatusListener internalCallback = mInternalDownloadStatusListeners.remove(listener); if (internalCallback!= null) { internalCallback.stop(); } } return android.telephony.mbms.MbmsErrors.SUCCESS; }
public int unregisterProgressListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadProgressListener listener) throws android.os.RemoteException { return 0; }
public int registerProgressListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadProgressListener listener) throws android.os.RemoteException { return 0; }
public int unregisterStatusListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadStatusListener listener) throws android.os.RemoteException { return 0; }
public final int unregisterStatusListener(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadStatusListener listener) throws android.os.RemoteException { if (downloadRequest == null) { throw newjava.lang.NullPointerException("download request must not be null"); } if (listener == null) { throw newjava.lang.NullPointerException("listener must not be null"); } android.telephony.mbms.vendor.DeathRecipient deathRecipient = mDownloadCallbackDeathRecipients.remove(listener.asBinder()); if (deathRecipient == null) { throw newjava.lang.IllegalArgumentException("unlinkToDeath listener"); } listener.asBinder().unlinkToDeath(deathRecipient, 0); android.telephony.mbms.DownloadStatusListener exposedCallback = mDownloadStatusListenerBinderMap.remove(listener.asBinder()); if (exposedCallback == null) { throw newjava.lang.IllegalArgumentException("unlinkToDeath listener"); } return unregisterStatusListener(downloadRequest, exposedCallback); }
public int unregisterProgressListener(@android.annotation.NonNull android.telephony.mbms.DownloadRequest request, @android.annotation.NonNull android.telephony.mbms.DownloadProgressListener listener) { try { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { throw newjava.lang.IllegalStateException("Middleware not yet bound"); } android.telephony.mbms.InternalDownloadProgressListener internalListener = mInternalDownloadProgressListeners.get(listener); if (internalListener == null) { throw newjava.lang.IllegalArgumentException("Provided listener was never registered"); } try { int result = downloadService.unregisterProgressListener(request, internalListener); if (result!= (android.telephony.mbms.MbmsErrors.SUCCESS)) { if (result == (MbmsErrors.DownloadErrors.ERROR_UNKNOWN_DOWNLOAD_REQUEST)) { throw newjava.lang.IllegalArgumentException("Unknown download request."); } return result; } } catch (android.os.RemoteException e) { mService.set(null); android.telephony.MbmsDownloadSession.sIsInitialized.set(false); return android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_LOST; } } finally { android.telephony.mbms.InternalDownloadProgressListener internalCallback = mInternalDownloadProgressListeners.remove(listener); if (internalCallback!= null) { internalCallback.stop(); } } return android.telephony.mbms.MbmsErrors.SUCCESS; }
public final int unregisterProgressListener(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadProgressListener listener) throws android.os.RemoteException { if (downloadRequest == null) { throw newjava.lang.NullPointerException("download request must not be null"); } if (listener == null) { throw newjava.lang.NullPointerException("listener must not be null"); } android.telephony.mbms.vendor.DeathRecipient deathRecipient = mDownloadCallbackDeathRecipients.remove(listener.asBinder()); if (deathRecipient == null) { throw newjava.lang.IllegalArgumentException("unknown listener"); } listener.asBinder().unlinkToDeath(deathRecipient, 0); android.telephony.mbms.DownloadProgressListener exposedCallback = mDownloadProgressListenerBinderMap.remove(listener.asBinder()); if (exposedCallback == null) { throw newjava.lang.IllegalArgumentException("unknown listener"); } return unregisterProgressListener(downloadRequest, exposedCallback); }
public int registerProgressListener(@android.annotation.NonNull android.telephony.mbms.DownloadRequest request, @android.annotation.NonNulljava.util.concurrent.Executor executor, @android.annotation.NonNull android.telephony.mbms.DownloadProgressListener listener) { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { throw newjava.lang.IllegalStateException("Middleware not yet bound"); } android.telephony.mbms.InternalDownloadProgressListener internalListener = new android.telephony.mbms.InternalDownloadProgressListener(listener, executor); try { int result = downloadService.registerProgressListener(request, internalListener); if (result!= (android.telephony.mbms.MbmsErrors.SUCCESS)) { if (result == (MbmsErrors.DownloadErrors.ERROR_UNKNOWN_DOWNLOAD_REQUEST)) { throw newjava.lang.IllegalArgumentException("Unknown download request."); } return result; } } catch (android.os.RemoteException e) { mService.set(null); android.telephony.MbmsDownloadSession.sIsInitialized.set(false); return android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_LOST; } mInternalDownloadProgressListeners.put(listener, internalListener); return android.telephony.mbms.MbmsErrors.SUCCESS; }
public int registerStatusListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadStatusListener listener) throws android.os.RemoteException { return 0; }
@java.lang.Override public final int registerStatusListener(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadStatusListener listener) throws android.os.RemoteException { final int uid = android.os.Binder.getCallingUid(); if (downloadRequest == null) { throw newjava.lang.NullPointerException("download request must not be null"); } if (listener == null) { throw newjava.lang.NullPointerException("listener must not be null"); } android.telephony.mbms.DownloadStatusListener exposedCallback = new android.telephony.mbms.vendor.MbmsDownloadServiceBase.VendorDownloadStatusListener(listener) { @java.lang.Override protected void onRemoteException(android.os.RemoteException e) { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); } }; int result = registerStatusListener(downloadRequest, exposedCallback); if (result == (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.mbms.vendor.DeathRecipient deathRecipient = new android.telephony.mbms.vendor.DeathRecipient() { @java.lang.Override public void binderDied() { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); mDownloadStatusListenerBinderMap.remove(listener.asBinder()); mDownloadCallbackDeathRecipients.remove(listener.asBinder()); } }; mDownloadCallbackDeathRecipients.put(listener.asBinder(), deathRecipient); listener.asBinder().linkToDeath(deathRecipient, 0); mDownloadStatusListenerBinderMap.put(listener.asBinder(), exposedCallback); } return result; }
public void testFullCallback() throwsjava.lang.Exception { int sampleInt = 10; android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDSCallback statusCallback = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDSCallback(); android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCallback progressCallback = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCallback(); android.telephony.mbms.DownloadRequest request = downloadRequestTemplate.build(); mDownloadSession.registerStatusListener(request, mCallbackExecutor, statusCallback); mDownloadSession.registerProgressListener(request, mCallbackExecutor, progressCallback); mMiddlewareControl.fireOnProgressUpdated(request, CtsDownloadService.FILE_INFO, sampleInt, sampleInt, sampleInt, sampleInt); com.android.internal.os.SomeArgs progressArgs = progressCallback.waitOnProgressUpdated(android.telephony.embms.cts.ASYNC_TIMEOUT); assertEquals(request, progressArgs.arg1); assertEquals(CtsDownloadService.FILE_INFO, progressArgs.arg2); assertEquals(sampleInt, progressArgs.arg3); assertEquals(sampleInt, progressArgs.arg4); assertEquals(sampleInt, progressArgs.arg5); assertEquals(sampleInt, progressArgs.arg6); mMiddlewareControl.fireOnStateUpdated(request, CtsDownloadService.FILE_INFO, sampleInt); com.android.internal.os.SomeArgs stateArgs = statusCallback.waitOnStateUpdated(android.telephony.embms.cts.ASYNC_TIMEOUT); assertEquals(request, stateArgs.arg1); assertEquals(CtsDownloadService.FILE_INFO, stateArgs.arg2); assertEquals(sampleInt, stateArgs.arg3); }
public void testDeregistration() throwsjava.lang.Exception { android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDSCallback statusCallback = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDSCallback(); android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCallback progressCallback = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCallback(); android.telephony.mbms.DownloadRequest request = downloadRequestTemplate.build(); mDownloadSession.registerProgressListener(request, mCallbackExecutor, progressCallback); mDownloadSession.registerStatusListener(request, mCallbackExecutor, statusCallback); mDownloadSession.unregisterProgressListener(request, progressCallback); mDownloadSession.unregisterStatusListener(request, statusCallback); mMiddlewareControl.fireOnStateUpdated(null, null, 0); assertNull(statusCallback.waitOnStateUpdated(android.telephony.embms.cts.MbmsDownloadCallbackTest.SHORT_TIMEOUT)); mMiddlewareControl.fireOnProgressUpdated(null, null, 0, 0, 0); assertNull(progressCallback.waitOnProgressUpdated(android.telephony.embms.cts.MbmsDownloadCallbackTest.SHORT_TIMEOUT)); }
@java.lang.Override public int registerStatusListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadStatusListener listener) throws android.os.RemoteException { mDownloadStatusListener = listener; return android.telephony.mbms.MbmsErrors.SUCCESS; }
@java.lang.Override public int unregisterStatusListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadStatusCallback callback) { mDownloadStatusListener = null; return android.telephony.mbms.MbmsErrors.SUCCESS; }
@java.lang.Override public final int registerProgressListener(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadProgressListener listener) throws android.os.RemoteException { final int uid = android.os.Binder.getCallingUid(); if (downloadRequest == null) { throw newjava.lang.NullPointerException("Download request must not be null"); } if (listener == null) { throw newjava.lang.NullPointerException("Callback must not be null"); } android.telephony.mbms.DownloadProgressListener exposedCallback = new android.telephony.mbms.vendor.MbmsDownloadServiceBase.VendorDownloadProgressListener(listener) { @java.lang.Override protected void onRemoteException(android.os.RemoteException e) { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); } }; int result = registerProgressListener(downloadRequest, exposedCallback); if (result == (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.mbms.vendor.DeathRecipient deathRecipient = new android.telephony.mbms.vendor.DeathRecipient() { @java.lang.Override public void binderDied() { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); mDownloadProgressListenerBinderMap.remove(listener.asBinder()); mDownloadCallbackDeathRecipients.remove(listener.asBinder()); } }; mDownloadCallbackDeathRecipients.put(listener.asBinder(), deathRecipient); listener.asBinder().linkToDeath(deathRecipient, 0); mDownloadProgressListenerBinderMap.put(listener.asBinder(), exposedCallback); } return result; }
private void runWorkingMobileUsbTethering(android.net.NetworkState upstreamState) { when(mConnectivityManager.isTetheringSupported()).thenReturn(true); when(mUpstreamNetworkMonitor.selectPreferredUpstreamType(any())).thenReturn(upstreamState); mTethering.startTethering(com.android.server.connectivity.TETHERING_USB, null, false); mLooper.dispatchAll(); verify(mUsbManager, times(1)).setCurrentFunction(UsbManager.USB_FUNCTION_RNDIS, false); mTethering.interfaceStatusChanged(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, true); sendUsbBroadcast(true, true, true); mLooper.dispatchAll(); mTetheringDependencies.getUpstreamNetworkMonitorMasterSM().sendMessage(Tethering.TetherMasterSM.EVENT_UPSTREAM_CALLBACK, UpstreamNetworkMonitor.EVENT_ON_AVAILABLE, 0, upstreamState); verify(mUpstreamNetworkMonitor, times(1)).selectPreferredUpstreamType(any()); verify(mUpstreamNetworkMonitor, times(1)).setCurrentUpstream(upstreamState.network); }
@java.lang.Override public com.android.server.connectivity.tethering.IPv6TetheringCoordinator getIpv6TetheringCoordinator(java.util.ArrayList<com.android.server.connectivity.tethering.TetherInterfaceStateMachine> notifyList, android.net.util.SharedLog log) { mIPv6CoordinatorNotifyList = notifyList; return mIPv6TetheringCoordinator; }
@java.lang.Override public android.net.util.InterfaceParams getInterfaceParams(java.lang.String ifName) { finaljava.lang.String[] ifaces = newjava.lang.String[]{ com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_WLAN_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME }; final int index =java.util.Arrays.asList(ifaces).indexOf(ifName); assertTrue(("Non-mocked interface: " + ifName), (index >= 0)); return new android.net.util.InterfaceParams(ifName, (index + 1), android.net.MacAddress.ALL_ZEROS_ADDRESS); }
private static android.net.NetworkState buildMobileIpv4UpstreamState() { return com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(true, false); }
public com.android.server.connectivity.tethering.IPv6TetheringCoordinator getIpv6TetheringCoordinator(java.util.ArrayList<com.android.server.connectivity.tethering.TetherInterfaceStateMachine> notifyList, android.net.util.SharedLog log) { return new com.android.server.connectivity.tethering.IPv6TetheringCoordinator(notifyList, log); }
public com.android.server.connectivity.tethering.UpstreamNetworkMonitor getUpstreamNetworkMonitor(android.content.Context ctx, com.android.internal.util.StateMachine tgt, android.net.util.SharedLog log, int what) { return new com.android.server.connectivity.tethering.UpstreamNetworkMonitor(ctx, tgt, log, what); }
private void sendIPv6TetherUpdates(android.net.NetworkState upstreamState) { verify(mIPv6TetheringCoordinator, times(1)).addActiveDownstream(argThat(( sm) -> sm.linkProperties().getInterfaceName().equals(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME)), eq(IControlsTethering.STATE_TETHERED)); for (com.android.server.connectivity.tethering.TetherInterfaceStateMachine tism : mTetheringDependencies.getIPv6CoordinatorNotifyList()) { android.net.NetworkState ipv6OnlyState = com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(false, true); tism.sendMessage(TetherInterfaceStateMachine.CMD_IPV6_TETHER_UPDATE, 0, 0, (upstreamState.linkProperties.isIPv6Provisioned()? ipv6OnlyState.linkProperties : null)); } mLooper.dispatchAll(); }
private static android.net.NetworkState buildMobileUpstreamState(boolean withIpv4, boolean withIpv6) { final android.net.NetworkInfo info = new android.net.NetworkInfo(android.net.ConnectivityManager.TYPE_MOBILE, 0, null, null); info.setDetailedState(NetworkInfo.DetailedState.CONNECTED, null, null); final android.net.LinkProperties prop = new android.net.LinkProperties(); prop.setInterfaceName(com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); if (withIpv4) { prop.addRoute(new android.net.RouteInfo(new android.net.IpPrefix(ANY, 0), android.net.NetworkUtils.numericToInetAddress("10.0.0.1"), com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME)); } if (withIpv6) { prop.addDnsServer(android.net.NetworkUtils.numericToInetAddress("2001:db8::2")); prop.addLinkAddress(new android.net.LinkAddress(android.net.NetworkUtils.numericToInetAddress("2001:db8::"), 64)); prop.addRoute(new android.net.RouteInfo(new android.net.IpPrefix(ANY, 0), android.net.NetworkUtils.numericToInetAddress("2001:db8::1"), com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME)); } final android.net.NetworkCapabilities capabilities = new android.net.NetworkCapabilities().addTransportType(NetworkCapabilities.TRANSPORT_CELLULAR); return new android.net.NetworkState(info, prop, capabilities, new android.net.Network(100), null, "netid"); }
@org.junit.Test public void workingMobileUsbTethering_IPv4() throwsjava.lang.Exception { android.net.NetworkState upstreamState = com.android.server.connectivity.TetheringTest.buildMobileIpv4UpstreamState(); runWorkingMobileUsbTethering(upstreamState); verify(mNMService, times(1)).enableNat(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mNMService, times(1)).startInterfaceForwarding(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); sendIPv6TetherUpdates(upstreamState); verify(mRouterAdvertisementDaemon, never()).buildNewRa(any(), notNull()); }
@java.lang.Override public com.android.server.connectivity.tethering.UpstreamNetworkMonitor getUpstreamNetworkMonitor(android.content.Context ctx, com.android.internal.util.StateMachine tgt, android.net.util.SharedLog log, int what) { mUpstreamNetworkMonitorMasterSM = tgt; return mUpstreamNetworkMonitor; }
@org.junit.Test public void workingMobileUsbTethering_DualStack() throwsjava.lang.Exception { android.net.NetworkState upstreamState = com.android.server.connectivity.TetheringTest.buildMobileDualStackUpstreamState(); runWorkingMobileUsbTethering(upstreamState); verify(mNMService, times(1)).enableNat(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mNMService, times(1)).startInterfaceForwarding(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mRouterAdvertisementDaemon, times(1)).start(); sendIPv6TetherUpdates(upstreamState); verify(mRouterAdvertisementDaemon, times(1)).buildNewRa(any(), notNull()); verify(mNetd, times(1)).tetherApplyDnsInterfaces(); }
public void testControllerUpdate() { com.android.bluetooth.avrcp.MediaPlayerWrapper wrapper = com.android.bluetooth.avrcp.MediaPlayerWrapper.wrap(mMockController, mThread.getLooper()); org.junit.Assert.assertTrue(wrapper.isReady()); wrapper.registerCallback(mTestCbs); com.android.bluetooth.avrcp.MediaController mUpdatedController = mock(com.android.bluetooth.avrcp.MediaController.class); doReturn(mTestState).when(mUpdatedController).getPlaybackState(); mTestMetadata.putString(MediaMetadata.METADATA_KEY_TITLE, "New Title"); doReturn(mTestMetadata.build()).when(mUpdatedController).getMetadata(); doReturn(null).when(mMockController).getQueue(); wrapper.updateMediaController(mUpdatedController); verify(mUpdatedController).registerCallback(mControllerCbs.capture(), any()); com.android.bluetooth.avrcp.MediaController.Callback controllerCallbacks = mControllerCbs.getValue(); controllerCallbacks.onMetadataChanged(mTestMetadata.build()); verify(mTestCbs, never()).mediaUpdatedCallback(any()); }
private boolean sendBroadcastToReceiver(android.content.Intent intent, boolean isLocalInvocation) { intent.putExtra(CallIntentProcessor.KEY_IS_INCOMING_CALL, false); intent.setFlags(Intent.FLAG_RECEIVER_FOREGROUND); intent.setClass(mContext, com.android.server.telecom.components.PrimaryCallReceiver.class); if (isLocalInvocation) { android.telecom.Log.i(this, "sendBroadcastToReceiver: send intent to Telecom directly."); synchronized(com.android.server.telecom.TelecomSystem.getInstance().getLock()) { com.android.server.telecom.TelecomSystem.getInstance().getCallIntentProcessor().processIntent(intent); } } else { android.telecom.Log.i(this, "sendBroadcastToReceiver: trampoline to Telecom."); mContext.sendBroadcastAsUser(intent, UserHandle.SYSTEM); } return true; }
void updateAdapterState(int prevState, int newState) { mAdapterProperties.setState(newState); if (newState == (android.bluetooth.BluetoothAdapter.STATE_BLE_TURNING_ON)) { mSnoopLogSettingAtEnable = android.os.SystemProperties.getBoolean(com.android.bluetooth.btservice.AdapterService.BLUETOOTH_BTSNOOP_ENABLE_PROPERTY, false); } if (mCallbacks) { int n = mCallbacks.beginBroadcast(); debugLog((((("updateAdapterState() - Broadcasting state " + (android.bluetooth.BluetoothAdapter.nameForState(newState))) + " to ") + n) + " receivers."); for (int i = 0; i < n; i++) { try { mCallbacks.getBroadcastItem(i).onBluetoothStateChange(prevState, newState); } catch (android.os.RemoteException e) { debugLog((((("updateAdapterState() - Callback " + i) + " failed (") + e) + ")")); } } mCallbacks.finishBroadcast(); } }
@com.android.internal.annotations.GuardedBy("mLock") private android.os.ZygoteProcess.ZygoteState openZygoteSocketIfNeeded(java.lang.String abi) throws android.os.ZygoteStartFailedEx { com.android.internal.util.Preconditions.checkState(java.lang.Thread.holdsLock(mLock), "lock not held"); if (((primaryZygoteState) == null) || (primaryZygoteState.isClosed())) { try { primaryZygoteState = android.os.ZygoteProcess.ZygoteState.connect(mSocket); } catch (java.io.IOException ioe) { throw new android.os.ZygoteStartFailedEx("Error connecting to primary zygote", ioe); } maybeSendApiBlacklistExemptions(primaryZygoteState, false); } if (primaryZygoteState.matches(abi)) { return primaryZygoteState; } if (((secondaryZygoteState) == null) || (secondaryZygoteState.isClosed())) { try { secondaryZygoteState = android.os.ZygoteProcess.ZygoteState.connect(mSecondarySocket); } catch (java.io.IOException ioe) { throw new android.os.ZygoteStartFailedEx("Error connecting to secondary zygote", ioe); } maybeSendApiBlacklistExemptions(secondaryZygoteState, false); } if (secondaryZygoteState.matches(abi)) { return secondaryZygoteState; } throw new android.os.ZygoteStartFailedEx(("Unsupported zygote ABI: " + abi)); }
public void setApiBlacklistExemptions(java.lang.String exemptions) { synchronized(mLock) { mApiBlacklistExemptions = (android.text.TextUtils.isEmpty(exemptions))?java.util.Collections.emptyList() :java.util.Arrays.asList(exemptions.split("\\s+")); maybeSendApiBlacklistExemptions(primaryZygoteState, true); maybeSendApiBlacklistExemptions(secondaryZygoteState, true); } }
@com.android.internal.annotations.GuardedBy("mLock") private void maybeSendApiBlacklistExemptions(android.os.ZygoteProcess.ZygoteState state, boolean sendIfEmpty) { if ((state == null) || (state.isClosed())) { return; } if ((!sendIfEmpty) && (mApiBlacklistExemptions.isEmpty())) { return; } try { state.writer.write(java.lang.Integer.toString(((mApiBlacklistExemptions.size()) + 1))); state.writer.newLine(); state.writer.write("--set-api-blacklist-exemptions"); state.writer.newLine(); for (int i = 0; i < (mApiBlacklistExemptions.size()); ++i) { state.writer.write(mApiBlacklistExemptions.get(i)); state.writer.newLine(); } state.writer.flush(); int status = state.inputStream.readInt(); if (status!= 0) { android.util.Slog.e(android.os.ZygoteProcess.LOG_TAG, ("Failed to set API blacklist exemptionsl status " + status)); } } catch (java.io.IOException ioe) { android.util.Slog.e(android.os.ZygoteProcess.LOG_TAG, "Failed to set API blacklist exemptions", ioe); } }
private void update() {java.lang.String exemptions = Settings.Global.getString(mContext.getContentResolver(), Settings.Global.HIDDEN_API_BLACKLIST_EXEMPTIONS); if (!(android.text.TextUtils.equals(exemptions, mExemptions))) { if ("*".equals(exemptions)) { mBlacklistDisabled = true; mExemptions = null; } else { mBlacklistDisabled = false; mExemptions = exemptions; } zygoteProcess.setApiBlacklistExemptions(mExemptions); }
private void setSignalStrengthReportingCriteria() { mPhone.mCi.setSignalStrengthReportingCriteria(com.android.internal.telephony.DeviceStateMonitor.HYSTERESIS_MILLIS, com.android.internal.telephony.DeviceStateMonitor.HYSTERESIS_DB, AccessNetworkThresholds.GERAN, AccessNetworkType.GERAN, null); mPhone.mCi.setSignalStrengthReportingCriteria(com.android.internal.telephony.DeviceStateMonitor.HYSTERESIS_MILLIS, com.android.internal.telephony.DeviceStateMonitor.HYSTERESIS_DB, AccessNetworkThresholds.UTRAN, AccessNetworkType.UTRAN, null); mPhone.mCi.setSignalStrengthReportingCriteria(com.android.internal.telephony.DeviceStateMonitor.HYSTERESIS_MILLIS, com.android.internal.telephony.DeviceStateMonitor.HYSTERESIS_DB, AccessNetworkThresholds.EUTRAN, AccessNetworkType.EUTRAN, null); mPhone.mCi.setSignalStrengthReportingCriteria(com.android.internal.telephony.DeviceStateMonitor.HYSTERESIS_MILLIS, com.android.internal.telephony.DeviceStateMonitor.HYSTERESIS_DB, AccessNetworkThresholds.CDMA2000, AccessNetworkType.CDMA2000, null); }
private boolean shouldTurnOffLinkCapacityEstimate() { return (mIsPowerSaveOn) || (((!(mIsCharging)) && (!(mIsTetheringOn))) && (!(mIsScreenOn))); }
private void updateDeviceState(int eventType, boolean state) { switch (eventType) { case com.android.internal.telephony.DeviceStateMonitor.EVENT_SCREEN_STATE_CHANGED : if ((mIsScreenOn) == state) return; mIsScreenOn = state; break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_CHARGING_STATE_CHANGED : if ((mIsCharging) == state) return; mIsCharging = state; sendDeviceState(com.android.internal.telephony.CHARGING_STATE, mIsCharging); break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_TETHERING_STATE_CHANGED : if ((mIsTetheringOn) == state) return; mIsTetheringOn = state; break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_POWER_SAVE_MODE_CHANGED : if ((mIsPowerSaveOn) == state) return; mIsPowerSaveOn = state; sendDeviceState(com.android.internal.telephony.POWER_SAVE_MODE, mIsPowerSaveOn); break; default : return; } if ((mIsLowDataExpected)!= (isLowDataExpected())) { mIsLowDataExpected =!(mIsLowDataExpected); sendDeviceState(com.android.internal.telephony.LOW_DATA_EXPECTED, mIsLowDataExpected); } int newFilter = 0; if (!(shouldTurnOffSignalStrength())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.SIGNAL_STRENGTH; } if (!(shouldTurnOffFullNetworkUpdate())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.FULL_NETWORK_STATE; } if (!(shouldTurnOffDormancyUpdate())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.DATA_CALL_DORMANCY_CHANGED; } setUnsolResponse(newFilter, state); }
private void setLinkCapacityReportingCriteria() { com.android.sdklib.internal.repository.ui.DeviceManager.LinkCapacityReportingCriteria c = getDeviceManager().getLinkCapacityReportingCriteria(); if (c == null) { return; } com.android.sdklib.internal.repository.ui.DeviceManager.LinkCapacityReportingCriteria linkCapacityReportingCriteria = new com.android.sdklib.internal.repository.ui.DeviceManager.LinkCapacityReportingCriteria(); linkCapacityReportingCriteria.setLinkCapacityReportingCriteria(com.android.sdklib.internal.repository.ui.DeviceManager.LinkCapacityReportingCriteria.valueOf(com.android.sdklib.internal.repository.ui.DeviceManager.LinkCapacityReportingCriteria.MAX_REPORTING_CLAIM_COUNT))); linkCapacityReportingCriteria.setLinkCapacityReportingCriteria(linkCapacityReportingCriteria); }
@java.lang.Override public void setSignalStrengthReportingCriteria(int hysteresisMs, int hysteresisDb, int[] thresholdsDbm, int ran, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy!= null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { riljLoge("Radio Proxy 1.2 is unsupported!"); return; } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_SIGNAL_STRENGTH_REPORTING_CRITERIA, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.setSignalStrengthReportingCriteria(rr.mSerial, hysteresisMs, hysteresisDb, com.android.internal.telephony.RIL.primitiveArrayToArrayList(thresholdsDbm), com.android.internal.telephony.RIL.convertRanToHalRan(ran)); } catch (android.os.RemoteException |java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setSignalStrengthReportingCriteria", e); } } }
@java.lang.Override public void setUnsolResponseFilter(int filter, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy!= null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_UNSOLICITED_RESPONSE_FILTER, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "> ") + filter)); } android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12!= null) { try { radioProxy12.setIndicationFilter_1_2(rr.mSerial, filter); } catch (android.os.RemoteException |java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setIndicationFilter_1_2", e); } } else { try { radioProxy.setIndicationFilter(rr.mSerial, filter); } catch (android.os.RemoteException |java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setIndicationFilter", e); } } } }
@java.lang.Override public void setLinkCapacityReportingCriteria(int hysteresisMs, int hysteresisDlKbps, int hysteresisUlKbps, int[] thresholdsDlKbps, int[] thresholdsUlKbps, int ran, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy!= null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { riljLoge("Radio Proxy 1.2 is unsupported!"); return; } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_LINK_CAPACITY_REPORTING_CRITERIA, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.setLinkCapacityReportingCriteria(rr.mSerial, hysteresisMs, hysteresisDlKbps, hysteresisUlKbps, com.android.internal.telephony.RIL.primitiveArrayToArrayList(thresholdsDlKbps), com.android.internal.telephony.RIL.primitiveArrayToArrayList(thresholdsUlKbps), com.android.internal.telephony.RIL.convertRanToHalRan(ran)); } catch (android.os.RemoteException |java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setLinkCapacityReportingCriteria", e); } } }
private static int convertRanToHalRan(int radioAccessNetwork) { switch (radioAccessNetwork) { case android.telephony.AccessNetworkConstants.AccessNetworkType.GERAN : return 1; case android.telephony.AccessNetworkConstants.AccessNetworkType.UTRAN : return 2; case android.telephony.AccessNetworkConstants.AccessNetworkType.EUTRAN : return 3; case android.telephony.AccessNetworkConstants.AccessNetworkType.CDMA2000 : return 4; case android.telephony.AccessNetworkConstants.AccessNetworkType.IWLAN : return 5; case android.telephony.AccessNetworkConstants.AccessNetworkType.UNKNOWN : default : return 0; } }
private boolean checkStatusOfPolicy(android.app.Instrumentation instrumentation,java.lang.String adminPolicyName) throwsjava.lang.Exception { android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); android.support.test.uiautomator.UiSelector listViewSelector = new android.support.test.uiautomator.UiSelector().resourceId(Res.ANDROID_LIST_RES); new com.android.devtools.systemimage.uitest.watchers.SettingsTestPopupWatcher(device).checkForCondition(); assertTrue(device.findObject(listViewSelector).exists()); int size = device.findObject(listViewSelector).getChildCount(); for (int i = 0; i < size; i++) { android.support.test.uiautomator.UiSelector sampleDeviceSelection = listViewSelector.childSelector(new android.support.test.uiautomator.UiSelector().index(i)); android.support.test.uiautomator.UiObject2 sampleDeviceAdminCheckbox = com.android.devtools.systemimage.uitest.utils.UiAutomatorPlus.findObjectByRelative(instrumentation, android.support.test.uiautomator.By.clazz("android.widget.CheckBox"), android.support.test.uiautomator.By.text(adminPolicyName), android.support.test.uiautomator.By.res(Res.ANDROID_LIST_RES)); if (sampleDeviceAdminCheckbox!= null) { boolean isChecked = sampleDeviceAdminCheckbox.isChecked(); return isChecked; } } return false; }
private void recreateSimInfoDB(android.database.Cursor c, android.database.sqlite.SQLiteDatabase db,java.lang.String[] proj) { if (com.android.providers.telephony.TelephonyProvider.VDBG) { c = db.query(com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE, proj, null, null, null, null); com.android.providers.telephony.TelephonyProvider.log(((("Before upgrading " + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE)) + " total number of rows: ") + (c.getCount()))); c.close(); } c = db.query(com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE, null, null, null, SubscriptionManager.UNIQUE_KEY_SUBSCRIPTION_ID); db.execSQL(("CREATE TABLE IF EXISTS " + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE_TMP))); createSimInfoTable(db, com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE_TMP); copySimInfoDataToTmpTable(db, c); c.close(); db.execSQL(("DROP TABLE IF EXISTS " + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE))); db.execSQL((((("CREATE TABLE " + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE_TMP)) + " rename to ") + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE)) + ";")); }
protected int engineDoFinal(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset) throwsjava x.crypto.BadPaddingException,java x.crypto.IllegalBlockSizeException,java x.crypto.ShortBufferException { if ((outputOffset + (engineGetOutputSize(inputLen))) > (output.length)) { throw newjava x.crypto.ShortBufferException("Output buffer too short for input"); } if (input!= null) { bOut.write(input, inputOffset, inputLen); } if ((cipher) instanceof org.bouncycastle.crypto.engines.RSABlindedEngine) { if ((bOut.size()) > ((cipher.getInputBlockSize()) + 1)) { throw newjava.lang.ArrayIndexOutOfBoundsException("too much data for RSA block"); } } else { if ((bOut.size()) > (cipher.getInputBlockSize())) { throw newjava.lang.ArrayIndexOutOfBoundsException("too much data for RSA block"); } } byte[] out = getOutput(); for (int i = 0; i!= (out.length); i++) { output[(outputOffset + i)] = out[i]; } return out.length; }
private void handleInjectSms(android.os.AsyncResult ar) { int result; com.android.internal.telephony.SmsDispatchersController.SmsInjectionCallback callback = null; android.telephony.SmsMessage sms = null; try { callback = ((com.android.internal.telephony.SmsDispatchersController.SmsInjectionCallback) (ar.userObj)); sms = ((android.telephony.SmsMessage) (ar.result)); if (sms == null) { result = android.provider.Telephony.Sms.Intents.RESULT_SMS_GENERIC_ERROR; } else { result = dispatchMessage(sms.mWrappedSmsMessage); } } catch (java.lang.RuntimeException ex) { loge("Error dispatching message", ex); result = android.provider.Telephony.Sms.Intents.RESULT_SMS_GENERIC_ERROR; } if (callback!= null) { callback.onSmsInjectedResult(sms, result); } }
@org.junit.Test @android.support.test.filters.SmallTest public void testUpdateIccCardStatus() { int phoneId = 0; mIccCardStatus.mCardState = IccCardStatus.CardState.CARDSTATE_ABSENT; mUiccSlot.update(mSimulatedCommands, mIccCardStatus, phoneId); verify(mSubInfoRecordUpdater, times(1)).updateInternalIccState(IccCardConstants.INTENT_VALUE_ICC_ABSENT, null, phoneId); assertEquals(IccCardStatus.CardState.CARDSTATE_ABSENT, mUiccSlot.getCardState()); assertEquals(null, mUiccSlot.getUiccCard()); mIccCardStatus.mCardState = IccCardStatus.CardState.CARDSTATE_PRESENT; mUiccSlot.update(mSimulatedCommands, mIccCardStatus, phoneId); verify(mTelephonyComponentFactory, times(1)).makeUiccProfile(anyObject(), eq(mSimulatedCommands), eq(mIccCardStatus), anyInt(), anyObject()); assertEquals(IccCardStatus.CardState.CARDSTATE_PRESENT, mUiccSlot.getCardState()); assertTrue(((mUiccSlot.getUiccCard())!= null)); mIccCardStatus.mCardState = IccCardStatus.CardState.CARDSTATE_ABSENT; mUiccSlot.update(mSimulatedCommands, mIccCardStatus, phoneId); verify(mSubInfoRecordUpdater, times(2)).updateInternalIccState(IccCardConstants.INTENT_VALUE_ICC_ABSENT, null, phoneId); verify(mUiccProfile, times(1)).dispose(); assertEquals(IccCardStatus.CardState.CARDSTATE_ABSENT, mUiccSlot.getCardState()); assertEquals(null, mUiccSlot.getUiccCard()); }
@java.lang.Override public void onTabChanged(java.lang.String tabId) { final int slotId =java.lang.Integer.parseInt(tabId); mSir = mSelectableSubInfos.get(slotId); updatePhoneInfos(); mTelephonyManager.listen(mPhoneStateListener, (((android.telephony.PhoneStateListener.LISTEN_DATA_CONNECTION_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS)) | (android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE))); updateDataState(); updateNetworkType(); }
private void updateImsRegistrationState() { boolean isImsRegistered = mTelephonyManager.isImsRegistered(mSir.getSubscriptionId()); setSummaryText(com.android.settings.deviceinfo.SimStatus.KEY_IMS_REGISTRATION_STATE, mRes.getString((isImsRegistered? R.string.ims_reg_status_registered : R.string.ims_reg_status_not_registered))); }
static void loadAllContacts(android.content.Context context, android.os.Handler handler) { if (com.android.bluetooth.pbap.BluetoothPbapUtils.V) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapUtils.TAG, "Loading Contacts..."); }java.lang.String[] projection = newjava.lang.String[]{ android.provider.ContactsContract.Data.CONTACT_ID, android.provider.ContactsContract.Data.DATA1, android.provider.ContactsContract.Data.MIMETYPE }; com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts = com.android.bluetooth.pbap.BluetoothPbapUtils.fetchAndSetContacts(context, handler, projection, null, null, true); if ((com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts) < 0) { com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts = 0; return; } handler.sendMessage(handler.obtainMessage(BluetoothPbapService.LOAD_CONTACTS)); }
@java.lang.Override protected void setCurrentUser(int userId) { android.util.Log.i(com.android.bluetooth.pbap.BluetoothPbapService.TAG, (("setCurrentUser(" + userId) + ")")); android.os.UserManager userManager = android.os.UserManager.get(getApplicationContext()); if (userManager.isUserUnlocked(userId)) { setUserUnlocked(userId); } }
public static void main(java.lang.String[] args) throwsjava.lang.Exception {java.lang.System.loadLibrary(args[0]); art.Locals.EnableLocalVariableAccess(); Main.runSet(); }
public static int getSignableImageSize(byte[] data) throwsjava.lang.Exception { if (!(java.util.Arrays.equals(java.util.Arrays.copyOfRange(data, 0, 8), "ANDROID!".getBytes("US-ASCII")))) { throw newjava.lang.IllegalArgumentException("Bad image header: missing magic"); }java.nio.ByteBuffer image =java.nio.ByteBuffer.wrap(data); image.order(java.nio.ByteOrder.LITTLE_ENDIAN); image.getLong(); int kernelSize = image.getInt(); image.getInt(); int ramdskSize = image.getInt(); image.getInt(); int secondSize = image.getInt(); image.getLong(); int pageSize = image.getInt(); int length = ((pageSize + ((((kernelSize + pageSize) - 1) / pageSize) * pageSize)) + ((((ramdskSize + pageSize) - 1) / pageSize) * pageSize)) + ((((secondSize + pageSize) - 1) / pageSize) * pageSize); int headerVersion = image.getInt(); if (headerVersion > 0) { image.getInt(); byte[] tempByteArray = new byte[1024]; image.get(tempByteArray, 0, 16); image.get(tempByteArray, 0, 512); image.get(tempByteArray, 0, 32); image.get(tempByteArray, 0, 1024); int recoveryDtboLength = image.getInt(); length += (((recoveryDtboLength + pageSize) - 1) / pageSize) * pageSize; } length = (((length + pageSize) - 1) / pageSize) * pageSize; if (length <= 0) { throw newjava.lang.IllegalArgumentException("Bad image header: invalid length"); } return length; }
@com.android.internal.annotations.VisibleForTesting public static android.net.NetworkStats ReadNetworkStatsDetail(java.io.File detailPath, int limitUid,java.lang.String[] limitIfaces, int limitTag) throwsjava.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 24); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); int idx = 1; int lastIdx = 1; com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(newjava.io.FileInputStream(detailPath)); reader.finishLine(); while (reader.hasMoreData()) { idx = reader.nextInt(); if (idx!= (lastIdx + 1)) { throw newjava.net.ProtocolException(((("Bad idx=" + idx) + ", after lastIdx=") + lastIdx)); } lastIdx = idx; entry.iface = reader.nextString(); entry.tag = kernelToTag(reader.nextString()); entry.uid = reader.nextInt(); entry.set = reader.nextInt(); entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if ((((limitIfaces == null) || (com.android.internal.util.ArrayUtils.contains(limitIfaces, entry.iface))) && ((limitUid == (android.net.NetworkStats.UID_ALL)) || (limitUid == (entry.uid)))) && ((limitTag == (android.net.NetworkStats. TAG_ALL)) || (limitTag == (entry.tag)))) { stats.addValues(entry); } reader.finishLine(); } } catch (java.lang.NullPointerException |java.lang.NumberFormatException e) { throw newjava.net.ProtocolException(("Error parsing idx " + idx), e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }
@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats readNetworkStatsIfaceDev() throwsjava.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry();java.io.BufferedReader reader = null; try { reader = newjava.io.BufferedReader(newjava.io.FileReader(mStatsIfaceDev)); reader.readLine(); reader.readLine();java.lang.String line; while ((line = reader.readLine())!= null) {java.lang.String[] values = line.trim().split("\\:?\\s+"); entry.iface = values[0]; entry.uid = android.net.NetworkStats.UID_ALL; entry.set = android.net.NetworkStats.SET_ALL; entry.tag = android.net.NetworkStats.TAG_NONE; entry.rxBytes =java.lang.Long.parseLong(values[1]); entry.rxPackets =java.lang.Long.parseLong(values[2]); entry.txBytes =java.lang.Long.parseLong(values[9]); entry.txPackets =java.lang.Long.parseLong(values[10]); stats.addValues(entry); } } catch (java.lang.NullPointerException |java.lang.NumberFormatException e) { throw newjava.net.ProtocolException("Error parsing stats", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }
public android.net.NetworkStats readNetworkStatsDetail() throwsjava.io.IOException { return readNetworkStatsDetail(android.net.NetworkStats.UID_ALL, null, android.net.NetworkStats.TAG_ALL, null); }
public android.net.NetworkStats readNetworkStatsDetail(int limitUid,java.lang.String[] limitIfaces, int limitTag, android.net.NetworkStats lastStats) throwsjava.io.IOException { return readNetworkStatsDetailInternal(limitUid, limitIfaces, limitTag, lastStats); }
@org.junit.Test public void testDoubleClatAccounting100MBDownload() throwsjava.lang.Exception { long appRxBytesBefore = 328684029L; long appRxBytesAfter = 439237478L; assertEquals("App traffic should be ~100MB", 110553449, (appRxBytesAfter - appRxBytesBefore)); long rootRxBytesBefore = 1394011L; long rootRxBytesAfter = 1398634L; assertEquals("Root traffic should be ~0 4623, (rootRxBytesAfter - rootRxBytesBefore)); android.util.ArrayMap<java.lang.String,java.lang.String> stackedIface = new android.util.ArrayMap(); stackedIface.put("v4-wlan0", "wlan0"); android.net.NetworkStats stats; stats = parseDetailedStats(R.raw.xt_qtaguid_with_clat_100mb_download_before); stats.apply464xlatAdjustments(stackedIface); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, "v4-wlan0", 10106, com.android.internal.net.SET_FOREGROUND, 0, appRxBytesBefore, 5199872L); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, "wlan0", 0, com.android.internal.net.SET_DEFAULT, 0, rootRxBytesBefore, 647888L); stats = parseDetailedStats(R.raw.xt_qtaguid_with_clat_100mb_download_after); stats.apply464xlatAdjustments(stackedIface); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, "v4-wlan0", 10106, com.android.internal.net.SET_FOREGROUND, 0, appRxBytesAfter, 7867488L); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, "wlan0", 0, com.android.internal.net.SET_DEFAULT, 0, rootRxBytesAfter, 647587L); }
private android.net.NetworkStats getNetworkStatsUidDetailLocked() throws android.os.RemoteException { final android.net.NetworkStats uidSnapshot = mNetworkManager.getNetworkStatsUidDetail(android.net.NetworkStats.UID_ALL); final android.net.NetworkStats tetherSnapshot = getNetworkStatsTethering(android.net.NetworkStats.STATS_PER_UID); uidSnapshot.combineAllValues(tetherSnapshot); final android.telephony.TelephonyManager telephonyManager = ((android.telephony.TelephonyManager) (mContext.getSystemService(Context.TELEPHONY_SERVICE))); final android.net.NetworkStats vtStats = telephonyManager.getVtDataUsage(android.net.NetworkStats.STATS_PER_UID); if (vtStats!= null) { uidSnapshot.combineAllValues(vtStats); } uidSnapshot.combineAllValues(mUidOperations); uidSnapshot.apply464xlatAdjustments(mStackedIfaces); return uidSnapshot; }
private void recordSnapshotLocked(long currentTime) throws android.os.RemoteException { final android.net.NetworkStats uidSnapshot = getNetworkStatsUidDetailLocked(); final android.net.NetworkStats xtSnapshot = getNetworkStatsXt(); final android.net.NetworkStats devSnapshot = mNetworkManager.getNetworkStatsSummaryDev(); final android.net.NetworkStats tetherSnapshot = getNetworkStatsTethering(android.net.NetworkStats.STATS_PER_IFACE); xtSnapshot.combineAllValues(tetherSnapshot); devSnapshot.combineAllValues(tetherSnapshot); mDevRecorder.recordSnapshotLocked(devSnapshot, mActiveIfaces, null, currentTime); mXtRecorder.recordSnapshotLocked(xtSnapshot, mActiveIfaces, null, currentTime); com.android.internal.net.VpnInfo[] vpnArray = mConnManager.getAllVpnInfo(); mUidRecorder.recordSnapshotLocked(uidSnapshot, mActiveUidIfaces, vpnArray, currentTime); mUidTagRecorder.recordSnapshotLocked(uidSnapshot, mActiveUidIfaces, vpnArray, currentTime); mStatsObservers.updateStats(xtSnapshot, uidSnapshot, new android.util.ArrayMap(mActiveIfaces), new android.util.ArrayMap(mActiveUidIfaces), vpnArray, currentTime); }
public void apply464xlatAdjustments(java.util.Map<java.lang.String,java.lang.String> stackedIfaces) { final android.net.NetworkStats adjustments = new android.net.NetworkStats(0, stackedIfaces.size()); android.net.NetworkStats.Entry entry = null; android.net.NetworkStats.Entry adjust = new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, 0, 0, 0, 0, 0, 0L, 0L, 0L, 0L, 0L); for (int i = 0; i < (size); i++) { entry = getValues(i, entry); if (((entry.iface) == null) || (!(entry.iface.startsWith(android.net.NetworkStats.CLATD_INTERFACE_PREFIX)))) { continue; } finaljava.lang.String baseIface = stackedIfaces.get(entry.iface); if (baseIface == null) { continue; } adjust.iface = baseIface; adjust.rxBytes = -((entry.rxBytes) + ((entry.rxPackets) * (android.net.NetworkStats.IPV4V6_HEADER_DELTA))); adjust.txBytes = -((entry.txBytes) + ((entry.txPackets) * (android.net.NetworkStats.IPV4V6_HEADER_DELTA))); adjust.rxPackets = -(entry.rxPackets); adjust.txPackets = -(entry.txPackets); adjustments.combineValues(adjust); entry.rxBytes = (entry.rxPackets) * (android.net.NetworkStats.IPV4V6_HEADER_DELTA); entry.txBytes = (entry.txPackets) * (android.net.NetworkStats.IPV4V6_HEADER_DELTA); entry.rxPackets = 0; entry.txPackets = 0; entry.operations = 0; combineValues(entry); } combineAllValues(adjustments); }
public android.net.NetworkStats readNetworkStatsSummaryDev() throwsjava.io.IOException { if (mUseBpfStats) return readNetworkStatsIfaceDev(); final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(newjava.io.FileInputStream(mStatsXtIfaceAll)); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = android.net.NetworkStats.UID_ALL; entry.set = android.net.NetworkStats.SET_ALL; entry.tag = android.net.NetworkStats.TAG_NONE; final boolean active = (reader.nextInt())!= 0; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if (active) { entry.rxBytes += reader.nextLong(); entry.rxPackets += reader.nextLong(); entry.txBytes += reader.nextLong(); entry.txPackets += reader.nextLong(); } stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException |java.lang.NumberFormatException e) { throw newjava.net.ProtocolException("Error parsing stats", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }
public android.net.NetworkStats readNetworkStatsSummaryXt() throwsjava.io.IOException { if (mUseBpfStats) return readNetworkStatsIfaceDev(); final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); if (!(mStatsXtIfaceFmt.exists())) return null; final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(newjava.io.FileInputStream(mStatsXtIfaceFmt)); reader.finishLine(); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = android.net.NetworkStats.UID_ALL; entry.set = android.net.NetworkStats.SET_ALL; entry.tag = android.net.NetworkStats.TAG_NONE; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException |java.lang.NumberFormatException e) { throw newjava.net.ProtocolException("Error parsing stats", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }
public void run() { int TARGET = 42; while (continueBusyLoop) { inBusyLoop = true; } int i = 0; while ((Main.isInterpreted()) && (i < 10000)) { Main.ensureJitCompiled(Main.IntRunner.class, "run"); i++; } if (Main.hasJit()) { boolean inOsr = Main.isInOsrCode("run"); if ((expectOsr) && (!inOsr)) { throw newjava.lang.Error("run expected to be in OSR but was not."); } else if ((!(expectOsr)) && inOsr) { throw newjava.lang.Error("run expected not to be in OSR but was."); } } Main.reportValue(TARGET); }
@org.junit.Test public void testOnSetUpAdapterFailed() throwsjava.lang.Exception {java.io.File testAdapter = newjava.io.File(mTestDir, ((VTS_NATIVE_TEST_DIR) + (TEST_HAL_ADAPTER_BINARY))); testAdapter.createNewFile();java.lang.String output = "android.hardware.foo@1.1::IFoo/default"; doReturn(output).when(mDevice).executeShellCommand(java.lang.String.format(LIST_HAL_CMD, TEST_HAL_PACKAGE)); mCmdUtil.mCmdSuccess = false; try { mPreparer.setUp(mDevice, mBuildInfo); } catch (java.lang.RuntimeException e) { assertEquals("Setup of adapter failed.", e.getMessage()); return; } fail(); }
@org.junit.Test public void testOnSetupAdapterNotFound() throwsjava.lang.Exception { try { mPreparer.setUp(mDevice, mBuildInfo); } catch (java.lang.RuntimeException e) { assertEquals(("Could not find adapter: " + (TEST_HAL_ADAPTER_BINARY)), e.getMessage()); return; } fail(); }
private void pushAdapter(com.android.tradefed.device.ITestDevice device,java.lang.String bitness) throws com.android.tradefed.device.DeviceNotAvailableException,java.io.IOException { com.android.compatibility.common.tradefed.build.VtsCompatibilityInvocationHelper invocationHelper = createVtsHelper();java.io.File adapterDir = newjava.io.File(invocationHelper.getTestsDir(),java.lang.String.format(com.android.tradefed.targetprep.VtsHalAdapterPreparer.VTS_NATIVE_TEST_DIR, bitness));java.io.File adapter = com.android.tradefed.util.FileUtil.findFile(adapterDir, mAdapterBinaryName); if (adapter!= null) { com.android.tradefed.log.LogUtil.CLog.i("Pushing %s", mAdapterBinaryName); device.pushFile(adapter, ((java.lang.String.format(com.android.tradefed.targetprep.VtsHalAdapterPreparer.TARGET_NATIVE_TEST_DIR, bitness)) + (mAdapterBinaryName))); } else { throw newjava.lang.RuntimeException(("Could not find adapter: " + (mAdapterBinaryName))); } }
private void sendIPv6TetherUpdates(android.net.NetworkState upstreamState) { verify(mIPv6TetheringCoordinator, times(1)).addActiveDownstream(argThat(( sm) -> sm.linkProperties().getInterfaceName().equals(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME)), eq(IControlsTethering.STATE_TETHERED)); for (com.android.server.connectivity.tethering.TetherInterfaceStateMachine tism : mTetheringDependencies.getIPv6CoordinatorNotifyList()) { android.net.NetworkState ipv6OnlyState = com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(false, true, false); tism.sendMessage(TetherInterfaceStateMachine.CMD_IPV6_TETHER_UPDATE, 0, 0, (upstreamState.linkProperties.isIPv6Provisioned()? ipv6OnlyState.linkProperties : null)); } mLooper.dispatchAll(); }
private static android.net.NetworkState buildMobileIpv4UpstreamState() { return com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(true, false, false); }
@org.junit.Test public void workingMobileUsbTethering_464xlat() throwsjava.lang.Exception { android.net.NetworkState upstreamState = com.android.server.connectivity.TetheringTest.buildMobile464xlatUpstreamState(); runWorkingMobileUsbTethering(upstreamState); verify(mNMService, times(1)).enableNat(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_XLAT_MOBILE_IFNAME); verify(mNMService, times(1)).enableNat(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mNMService, times(1)).startInterfaceForwarding(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mNMService, times(1)).startInterfaceForwarding(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_XLAT_MOBILE_IFNAME); sendIPv6TetherUpdates(upstreamState); verify(mRouterAdvertisementDaemon, times(1)).buildNewRa(any(), notNull()); verify(mNetd, times(1)).tetherApplyDnsInterfaces(); }
private void handleUpstreamNetworkMonitorCallback(int arg1,java.lang.Object o) { if (arg1 == (com.android.server.connectivity.tethering.UpstreamNetworkMonitor.NOTIFY_LOCAL_PREFIXES)) { mOffload.sendOffloadExemptPrefixes(((java.util.Set<android.net.IpPrefix>) (o))); return; } final android.net.NetworkState ns = ((android.net.NetworkState) (o)); if ((ns == null) || (!(pertainsToCurrentUpstream(ns)))) { if ((mUpstreamIfaceSet) == null) { chooseUpstreamType(false); } return; } switch (arg1) { case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_AVAILABLE : break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_CAPABILITIES : handleNewUpstreamNetworkState(ns); break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_LINKPROPERTIES : setDnsForwarders(ns.network, ns.linkProperties); handleNewUpstreamNetworkState(ns); break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_LOST : handleNewUpstreamNetworkState(null); break; default : mLog.e(("Unexpected arg1 value: " + arg1)); break; } }
@java.lang.Override public boolean equals(java.lang.Object obj) { return ((obj.getClass()) == (android.net.util.InterfaceSet.class)) && (ifnames.equals(obj)); }
private boolean noChangeInUpstreamIfaceSet(android.net.util.InterfaceSet newIfaces) { if (((mUpstreamIfaceSet) == null) && (newIfaces == null)) return true; if (((mUpstreamIfaceSet)!= null) && (newIfaces!= null)) { return mUpstreamIfaceSet.ifnames.equals(newIfaces.ifnames); } return false; }
@org.junit.Test public void testDefaultTruncLenAuth() throwsjava.lang.Exception { android.net.IpSecAlgorithm implicit = new android.net.IpSecAlgorithm(IpSecAlgorithm.AUTH_HMAC_SHA256,java.util.Arrays.copyOf(android.net.IpSecAlgorithmTest.KEY_MATERIAL, (256 / 8))); fail("expected exception on unprovided auth"); }
@org.junit.Test public void testUnwantedCapabilities() { android.net.NetworkCapabilities network = new android.net.NetworkCapabilities(); android.net.NetworkCapabilities request = new android.net.NetworkCapabilities(); assertTrue(((("unwantedCapabilities()") + request) + " Network: ") + network), request.satisfiedByNetworkCapabilities(network)); request.addUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_WIFI_P2P); request.addUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED); assertTrue(request.satisfiedByNetworkCapabilities(network)); assertArrayEquals(new int[]{ android.net.NetworkCapabilities.NET_CAPABILITY_WIFI_P2P, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED }, request.getUnwantedCapabilities()); assertTrue(network.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); request.addUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.hasUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.satisfiedByNetworkCapabilities(network)); network.removeCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.satisfiedByNetworkCapabilities(network)); request.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.hasUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.satisfiedByNetworkCapabilities(network)); network.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.satisfiedByNetworkCapabilities(network)); }
@org.junit.Test public void testOemPaid() { android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); assertFalse(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); nc.maybeMarkCapabilitiesRestricted(); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); nc.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID); nc.maybeMarkCapabilitiesRestricted(); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); assertFalse(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); }
public void testAesCbcHmacSha256Tcp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }
public void testAesGcm64Udp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 64); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, true); }
public void testInterfaceCountersUdp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1000, false); }
public void testAesGcm96Tcp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, true); }
private static android.net.IpSecTransform buildIpSecTransform(android.content.Context mContext, android.net.IpSecManager.SecurityParameterIndex spi, android.net.IpSecManager.UdpEncapsulationSocket encapSocket,java.net.InetAddress remoteAddr) throwsjava.lang.Exception {java.lang.String localAddr = (remoteAddr instanceofjava.net.Inet4Address)? android.net.cts.IpSecManagerTest.IPV4_LOOPBACK : android.net.cts.IpSecManagerTest.IPV6_LOOPBACK; return new android.net.IpSecTransform.Builder(mContext).setEncryption(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)), ((android.net.cts.IpSecManagerTest.getKey(256).length) * 4))).setIpv4Encapsulation(encapSocket, encapSocket.getPort()).buildTransportModeTransform(java.net.InetAddress.getByName(localAddr), spi); }
public void testAesGcm96Udp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, true); }
public void testAesCbcHmacSha384Tcp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }
public void testAesCbcHmacSha1Udp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }
private void checkStatsChecker(int protocol, int ipHdrLen, int transportHdrLen, int udpEncapLen, int sendCount, int ivLen, int blkSize, int truncLenBits) throwsjava.lang.Exception { int innerPacketSize = ((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen) + ipHdrLen; int outerPacketSize = ((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen) + (((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen) + (((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen) + (((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen) + (((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen) + (((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen) + (((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen) + (((android.net.cts.IpSecManagerTest.TEST_DATA.length) + (truncateLenBits)) + ipHdrLen)) + (((android.net.cts.IpSecManagerTest.TEST_DATA.length) + (truncateLenBits)) + (((android.net.cts.IpSecManagerTest.TEST_DATA.length) + (truncateLenBits)) + (((android.net.cts.IpSecManagerTest.TEST_DATA.length) + (truncateLenBits)) + (((android.net.cts.IpSecManagerTest.TEST_DATA.length) + (truncateLenBits)) + ipHdrLen)) + (((android.net.cts.IpSecManagerTest.TEST_DATA.length) + (truncateLenBits)) + (((android.net.cts.IpSecManagerTest.TEST_DATA.length) + (truncateLenBits)) + (((android.net.cts.IpSecManagerTest.TEST_DATA.length) + (transportHdrLen) + (
public void testAesGcm96Tcp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, true); }
public void testAesCbcHmacSha512Tcp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey()); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey()); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }
public void testAesGcm128Tcp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, true); }
public void testAesCbcHmacSha512Udp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey()); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey()); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }
public void testAesCbcHmacMd5Tcp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }
public void testAesCbcHmacSha512Tcp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }
public void testAesGcm128Tcp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, true); }
public void testAesCbcHmacSha384Udp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }
public void testAesCbcHmacSha512Udp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }
public void testAesCbcHmacMd5Udp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }
public void testAesCbcHmacSha256Tcp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }
public void testAesCbcHmacMd5Tcp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }
public void testAesCbcHmacSha384Udp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }
public void testAesCbcHmacSha1Udp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }
public void testAesGcm64Tcp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 64); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, true); }
public void testAesCbcHmacMd5Udp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }
public void testAesCbcHmacSha1Udp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }
public void testAesCbcHmacSha256Udp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }
public void testAesCbcHmacSha384Tcp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }
public void testAesCbcHmacSha256Udp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }
public void testInterfaceCountersUdp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1000, false); }
public void testAesGcm96Udp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, true); }
public void testAesGcm64Udp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 64); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, true); }
public void testAesCbcHmacMd5Tcp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }
public void testAesGcm128Udp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, true); }
public void testAesGcm64Udp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 64); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, true); }
public void testAesCbcHmacSha256Tcp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }
public void testAesCbcHmacSha1Tcp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }
public void testAesGcm128Udp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, true); }
public void testAesGcm64Tcp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 64); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, true); }
public void testAesGcm64Tcp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 64); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, true); }
public void testAesCbcHmacMd5Udp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }
public void testInterfaceCountersUdp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1000, false); }
public void testAesCbcHmacSha512Tcp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }
public void testAesGcm128Tcp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, true); }
public void testAesCbcHmacSha256Udp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }
public void testAesGcm128Udp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, true); }
public void testAesGcm96Tcp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, true); }
public void testAesCbcHmacSha1Tcp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }
public void testAesCbcHmacSha384Tcp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }
public void testAesCbcHmacSha512Udp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }
public void testAesCbcHmacSha1Tcp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }
public void testAesGcm96Udp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, null, null, authCrypt, false, 1, true); }
public void testAesCbcHmacSha384Udp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }
public void testAesCbcHmacSha256Udp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
@java.lang.Override public void send(byte[] data) throwsjava.io.IOException { mSocket.getOutputStream().write(data); }
protected static int getDomain(java.net.InetAddress address) { int domain; if (address instanceofjava.net.Inet6Address) domain = android.system.OsConstants.AF_INET6; else domain = android.system.OsConstants.AF_INET; return domain; }
public void testJavaUdpSocketPair() throwsjava.lang.Exception {java.net.InetAddress local =java.net.InetAddress.getByName(android.net.cts.IpSecBaseTest.IPV4_LOOPBACK); android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.JavaUdpSocket> sockets = android.net.cts.IpSecBaseTest.getJavaUdpSocketPair(local, true); checkSocketPair(sockets.mLeftSock, sockets.mRightSock); }
@java.lang.Override public void removeTransportModeTransforms(android.net.IpSecManager ism) throwsjava.io.IOException { ism.removeTransportModeTransforms(mFd); }
private void checkSocketPair(android.net.cts.IpSecBaseTest.GenericSocket left, android.net.cts.IpSecBaseTest.GenericSocket right) throwsjava.lang.Exception { left.send(android.net.cts.IpSecBaseTest.TEST_DATA); assertArrayEquals(android.net.cts.IpSecBaseTest.TEST_DATA, right.receive()); right.send(android.net.cts.IpSecBaseTest.TEST_DATA); assertArrayEquals(android.net.cts.IpSecBaseTest.TEST_DATA, left.receive()); }
public void testInterfaceCountersUdp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1000, false); }
@java.lang.Override public void sendTo(byte[] data,java.net.InetAddress dstAddr, int port) throwsjava.io.IOException { mSocket.send(newjava.net.DatagramPacket(data, data.length, dstAddr, port)); }
public void testAesCbcHmacSha384Udp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
public void testAesCbcHmacSha256Udp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha1Tcp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha512Tcp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacMd5Tcp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public static android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.NativeTcpSocket> getNativeTcpSocketPair(java.net.InetAddress localAddr) throwsjava.io.IOException { android.net.cts.IpSecBaseTest.NativeTcpSocket leftSock = null; android.net.cts.IpSecBaseTest.NativeTcpSocket rightSock = null; int domain = android.net.cts.IpSecBaseTest.getDomain(localAddr); try {java.io.FileDescriptor server = android.system.Os.socket(domain, OsConstants.SOCK_STREAM, OsConstants.IPPROTO_TCP);java.io.FileDescriptor client = android.system.Os.socket(domain, OsConstants.SOCK_STREAM, OsConstants.IPPROTO_TCP); android.system.Os.bind(server, localAddr, 0); int serverPort = android.net.cts.IpSecBaseTest.getPort(server); android.system.Os.listen(server, 10); android.system.Os.connect(client, localAddr, serverPort);java.io.FileDescriptor accepted = android.system.Os.accept(server, null); leftSock = new android.net.cts.IpSecBaseTest.NativeTcpSocket(client); rightSock = new android.net.cts.IpSecBaseTest.NativeTcpSocket(accepted); } catch (android.system.ErrnoException e) { e.rethrowAsIOException(); } return new android.net.cts.IpSecBaseTest.SocketPair<>(leftSock, rightSock); }
void sendTo(byte[] data,java.net.InetAddress dstAddr, int port) throwsjava.io.IOException;
public void testAesCbcHmacSha256Udp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
@java.lang.Override public byte[] receive() throwsjava.io.IOException {java.net.DatagramPacket data = newjava.net.DatagramPacket(new byte[android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN], android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN); mSocket.receive(data); returnjava.util.Arrays.copyOfRange(data.getData(), 0, data.getLength()); }
public void testAesCbcHmacMd5Tcp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
public static android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.JavaTcpSocket> getJavaTcpSocketPair(java.net.InetAddress localAddr) throwsjava.io.IOException { android.net.cts.IpSecBaseTest.JavaTcpSocket leftSock = null; android.net.cts.IpSecBaseTest.JavaTcpSocket[] rightSock = new android.net.cts.IpSecBaseTest.JavaTcpSocket[1];java.net.ServerSocket serverSocket = newjava.net.ServerSocket(); serverSocket.bind(newjava.net.InetSocketAddress(localAddr, 0));java.lang.Thread serverThread = newjava.lang.Thread(() -> { try { rightSock[0] = new android.net.cts.IpSecBaseTest.JavaTcpSocket(serverSocket.accept()); } catch (java.io.IOException ignored) { } }); leftSock = new android.net.cts.IpSecBaseTest.JavaTcpSocket(newjava.net.Socket(localAddr, serverSocket.getLocalPort())); serverThread.start(); try { serverThread.join(); } catch (java.lang.InterruptedException e) { throw newjava.io.IOException(e); } if ((rightSock[0]) == null) { throw newjava.lang.IllegalStateException("Could not create TCP socket pair"); } return new android.net.cts.IpSecBaseTest.SocketPair<>(leftSock, rightSock[0]); }
@java.lang.Override public byte[] receive() throwsjava.io.IOException { byte[] in = new byte[android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN]; int bytesRead = 0; try { bytesRead = android.system.Os.read(mFd, in, 0, android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN); } catch (android.system.ErrnoException e) { e.rethrowAsIOException(); } returnjava.util.Arrays.copyOfRange(in, 0, bytesRead); }
javajava byte[] receive() throwsjava.io.IOException;
@java.lang.Override public void sendTo(byte[] data,java.net.InetAddress dstAddr, int port) throwsjava.io.IOException { try { android.system.Os.sendto(mFd, data, 0, data.length, 0, dstAddr, port); } catch (android.system.ErrnoException e) { e.rethrowAsIOException(); } }
@java.lang.Override public abstract void send(byte[] data) throwsjava.io.IOException;
public void testJavaTcpSocketPair() throwsjava.lang.Exception {java.net.InetAddress local =java.net.InetAddress.getByName(android.net.cts.IpSecBaseTest.IPV4_LOOPBACK); android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.JavaTcpSocket> sockets = android.net.cts.IpSecBaseTest.getJavaTcpSocketPair(local); checkSocketPair(sockets.mLeftSock, sockets.mRightSock); }
public void testNativeTcpSocketPair() throwsjava.lang.Exception {java.net.InetAddress local =java.net.InetAddress.getByName(android.net.cts.IpSecBaseTest.IPV4_LOOPBACK); android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.NativeTcpSocket> sockets = android.net.cts.IpSecBaseTest.getNativeTcpSocketPair(local); checkSocketPair(sockets.mLeftSock, sockets.mRightSock); }
@java.lang.Override public byte[] receive() throwsjava.io.IOException { byte[] in = new byte[android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN]; int bytesRead = mSocket.getInputStream().read(in); returnjava.util.Arrays.copyOfRange(in, 0, bytesRead); }
public static android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.JavaUdpSocket> getJavaUdpSocketPair(java.net.InetAddress localAddr, boolean connected) throwsjava.io.IOException { android.net.cts.IpSecBaseTest.JavaUdpSocket leftSock = new android.net.cts.IpSecBaseTest.JavaUdpSocket(localAddr); android.net.cts.IpSecBaseTest.JavaUdpSocket rightSock = new android.net.cts.IpSecBaseTest.JavaUdpSocket(localAddr); if (connected) { leftSock.mSocket.connect(localAddr, rightSock.mSocket.getLocalPort()); rightSock.mSocket.connect(localAddr, leftSock.mSocket.getLocalPort()); } return new android.net.cts.IpSecBaseTest.SocketPair<>(leftSock, rightSock); }
void send(byte[] data) throwsjava.io.IOException;
void applyTransportModeTransform(android.net.IpSecManager ism, int direction, android.net.IpSecTransform transform) throwsjava.io.IOException;
public void testNativeUdpSocketPair() throwsjava.lang.Exception {java.net.InetAddress local =java.net.InetAddress.getByName(android.net.cts.IpSecBaseTest.IPV4_LOOPBACK); android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.NativeUdpSocket> sockets = android.net.cts.IpSecBaseTest.getNativeUdpSocketPair(local, true); checkSocketPair(sockets.mLeftSock, sockets.mRightSock); }
void removeTransportModeTransforms(android.net.IpSecManager ism) throwsjava.io.IOException;
public static android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.NativeUdpSocket> getNativeUdpSocketPair(java.net.InetAddress localAddr, boolean connected) throwsjava.io.IOException { android.net.cts.IpSecBaseTest.NativeUdpSocket leftSock = null; android.net.cts.IpSecBaseTest.NativeUdpSocket rightSock = null; int domain = android.net.cts.IpSecBaseTest.getDomain(localAddr); try {java.io.FileDescriptor leftFd = android.system.Os.socket(domain, OsConstants.SOCK_DGRAM, OsConstants.IPPROTO_UDP);java.io.FileDescriptor rightFd = android.system.Os.socket(domain, OsConstants.SOCK_DGRAM, OsConstants.IPPROTO_UDP); android.system.Os.bind(leftFd, localAddr, 0); android.system.Os.bind(rightFd, localAddr, 0); int leftPort = android.net.cts.IpSecBaseTest.getPort(leftFd); int rightPort = android.net.cts.IpSecBaseTest.getPort(rightFd); if (connected) { android.system.Os.connect(leftFd, localAddr, rightPort); android.system.Os.connect(rightFd, localAddr, leftPort); } leftSock = new android.net.cts.IpSecBaseTest.NativeUdpSocket(leftFd); rightSock = new android.net.cts.IpSecBaseTest.NativeUdpSocket(rightFd); } catch (android.system.ErrnoException e) { e.rethrowAsIOException(); } return new android.net.cts.IpSecBaseTest.SocketPair<>(leftSock, rightSock); }
@java.lang.Override public void send(byte[] data) throwsjava.io.IOException { mSocket.send(newjava.net.DatagramPacket(data, data.length)); }
public void testAesCbcHmacSha256Tcp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
public void testAesCbcHmacSha512Udp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha512Tcp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
private android.net.IpSecTransform getTransform(java.net.InetAddress localAddr) throwsjava.lang.Exception { android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(localAddr); return android.net.cts.IpSecBaseTest.buildIpSecTransform(mContext, spi, null, localAddr); }
public void testAesCbcHmacSha384Tcp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha384Udp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
@java.lang.Override public void applyTransportModeTransform(android.net.IpSecManager ism, int direction, android.net.IpSecTransform transform) throwsjava.io.IOException { ism.applyTransportModeTransform(mFd, direction, transform); }
public void testAesCbcHmacSha256Tcp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha512Tcp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacMd5Tcp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
public void testInterfaceCountersUdp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1000, false); }
public void testUdpEncapsulation() throwsjava.lang.Exception {java.net.InetAddress local =java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket();android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(local);android.net.IpSecTransform transform = android.net.cts.IpSecManagerTest.buildIpSecTransform(mContext, spi, encapSocket, local);java.io.FileDescriptor udpSocket = null; try { udpSocket = android.net.cts.IpSecManagerTest.getBoundUdpSocket(local); int port = getPort(udpSocket); mISM.applyTransportModeTransform(udpSocket, IpSecManager.DIRECTION_IN, transform); mISM.applyTransportModeTransform(udpSocket, IpSecManager.DIRECTION_OUT, transform); byte[] data = newjava.lang.String("This is UDP-encap-ESP test data").getBytes("UTF-8"); android.system.Os.sendto(udpSocket, data, 0, data.length, 0, local, port); byte[] in = new byte[data.length]; android.system.Os.read(udpSocket, in, 0, in.length); assertTrue("IKE data did not match.",java.util.Arrays.equals(data, in)); final byte[] header = new byte[]{ 0, 0, 0, }; finaljava.lang.String message = "IKE Packet"; data = ((newjava.lang.String(header)) + message).getBytes("UTF-8"); android.system.Os.sendto(encapSocket.getSocket(), data, 0, data.length, 0, local, encapSocket.getPort()); in = new byte[data.length]; android.system.Os.read(encapSocket.getSocket(), in, 0, in.length); assertTrue("UDP socket was unable to send/receive IKE data",java.util.Arrays.equals(data, in)); mISM.removeTransportModeTransform(udpSocket); } finally { if (udpSocket!= null) { android.system.Os.close(udpSocket); } } }
public void testAesCbcHmacSha512Udp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
private void checkStatsChecker(int protocol, int ipHdrLen, int transportHdrLen, int udpEncapLen, int sendCount, int truncLenBits) throwsjava.lang.Exception { int innerPacketSize = ((TEST_DATA.length) + transportHdrLen) + ipHdrLen; int outerPacketSize = ((calculateAesCbcEspPacketSizeWithAuth(((TEST_DATA.length) + transportHdrLen), truncLenBits)) + udpEncapLen) + ipHdrLen; int expectedOuterBytes = outerPacketSize * sendCount; int expectedInnerBytes = innerPacketSize * sendCount; int expectedPackets = sendCount; if (protocol == (IPPROTO_TCP)) { int encryptedTcpPktSize = calculateAesCbcEspPacketSizeWithAuth(android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS, truncLenBits); sendCount *= 2; expectedOuterBytes *= 2; expectedInnerBytes *= 2; expectedPackets *= 2; expectedOuterBytes += ((encryptedTcpPktSize + udpEncapLen) + ipHdrLen) * sendCount; expectedInnerBytes += ((android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS) + ipHdrLen) * sendCount; expectedPackets += sendCount; } android.net.cts.IpSecManagerTest.StatsChecker.waitForNumPackets(expectedPackets); if (udpEncapLen!= 0) { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } else { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedInnerBytes, expectedPackets); } if (sendCount >= 1000) { android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } }
public void testAesCbcHmacSha1Udp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha384Tcp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
protected static int getPort(java.io.FileDescriptor sock) throwsjava.io.IOException { int port = -1; try { port = ((java.net.InetSocketAddress) (android.system.Os.getsockname(sock))).getPort(); } catch (android.system.ErrnoException e) { e.rethrowAsIOException(); } if (port == (-1)) { throw newjava.lang.IllegalStateException("Something happened while trying to get port"); } return port; }
public void testIkeOverUdpEncapSocket() throwsjava.lang.Exception {java.net.InetAddress local =java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); android.net.cts.IpSecManagerTest.StatsChecker.initStatsChecker(); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket()) { int localPort = getPort(encapSocket.getSocket()); byte[] dataWithEspHeader = new byte[(TEST_DATA.length) + 8];java.lang.System.arraycopy(android.net.cts.TEST_DATA, 0, dataWithEspHeader, 8, TEST_DATA.length); byte[] in = new byte[dataWithEspHeader.length]; android.system.Os.sendto(encapSocket.getSocket(), dataWithEspHeader, 0, dataWithEspHeader.length, 0, local, localPort); android.system.Os.read(encapSocket.getSocket(), in, 0, in.length); assertArrayEquals("Esp data did not match.", dataWithEspHeader, in); int ipHdrLen = (local instanceofjava.net.Inet6Address)? android.net.cts.IpSecManagerTest.IP6_HDRLEN : android.net.cts.IpSecManagerTest.IP4_HDRLEN; int expectedPacketSize = ((dataWithEspHeader.length) + (android.net.cts.IpSecManagerTest.UDP_HDRLEN)) + ipHdrLen; android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedPacketSize, 1, expectedPacketSize, 1); android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedPacketSize, 1, expectedPacketSize, 1); } }
public void testAesCbcHmacSha384Udp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha384Tcp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
public void testAesCbcHmacSha1Udp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha256Tcp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha1Udp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
public void testIke() throwsjava.lang.Exception {java.net.InetAddress localAddr =java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket();android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(localAddr); android.net.IpSecTransform transform = android.net.cts.IpSecManagerTest.buildIpSecTransform(mContext, spi, encapSocket, localAddr);java.io.FileDescriptor sock = null; try { sock = android.net.cts.IpSecManagerTest.getBoundUdpSocket(localAddr); int port = getPort(sock); mISM.applyTransportModeTransform(sock, IpSecManager.DIRECTION_IN, transform); mISM.applyTransportModeTransform(sock, IpSecManager.DIRECTION_OUT, transform); byte[] header = new byte[]{ 1, 1, 1, 1 };java.lang.String message = "ESP Packet"; byte[] data = ((newjava.lang.String(header)) + message).getBytes("UTF-8"); android.system.Os.sendto(sock, data, 0, data.length, 0, localAddr, encapSocket.getPort()); header = new byte[]{ 0, 0, 0, }; message = IKE Packet"; data = ((newjava.lang.String(header)) + message).getBytes("UTF-8"); android.system.Os.sendto(encapSocket.getSocket(), data, 0, data.length, 0, localAddr, encapSocket.getPort()); byte[] in = new byte[4]; in[0] = 1; android.system.Os.read(encapSocket.getSocket(), in, 0, in.length); assertTrue("Socket received UDP-encap-ESP data despite invalid SPIs",java.util.Arrays.equals(header, in)); mISM.removeTransportModeTransforms(sock); } finally { if (sock!= null) { android.system.Os.close(sock); } } }
public void testAesCbcHmacMd5Udp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha512Udp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
public void testAesCbcHmacMd5Udp4() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha1Tcp6() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public void testInterfaceCountersUdp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, true, 1000, false); }
public void testAesCbcHmacSha1Tcp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
public void testAesCbcHmacMd5Udp4UdpEncap() throwsjava.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
public void testIkeOverUdpEncapSocket() throwsjava.lang.Exception {java.net.InetAddress local =java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket()) { checkIkePacket(encapSocket, local); android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getKey(128), 96); try (android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(local);android.net.IpSecTransform transform = new android.net.IpSecTransform.Builder(mContext).setEncryption(crypt).setAuthentication(auth).setIpv4Encapsulation(encapSocket, encapSocket.getPort()).buildTransportModeTransform(local, spi);android.net.cts.JavaUdpSocket localSocket = new android.net.cts.JavaUdpSocket(local); applyTransformBidirectionally(mISM, transform, localSocket); checkIkePacket(encapSocket, local); } }
@java.lang.Override public byte[] receive() throwsjava.lang.Exception { byte[] in = new byte[android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN]; int[] bytesRead = new int[]{ };java.lang.Thread readSockThread = newjava.lang.Thread(() -> { long startTime =java.lang.System.currentTimeMillis(); while (((bytesRead[0]) <= 0) && ((java.lang.System.currentTimeMillis()) < (startTime + (android.net.cts.IpSecBaseTest.SOCK_TIMEOUT)))) { try { bytesRead[0] = android.system.Os.recvfrom(mFd, in, 0, android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN, ((android.system.OsConstants.O_NONBLOCK) | (android.system.OsConstants.WNOWAIT)), null); break; } catch (java.lang.Exception e) { android.util.Log.e(android.net.cts.IpSecBaseTest.TAG, "Exception encountered reading from socket", e); } } }); try { readSockThread.start(); readSockThread.join(android.net.cts.IpSecBaseTest.SOCK_TIMEOUT); } catch (java.lang.Exception e) { throw newjava.io.IOException("Failed to receive from socket"); } if ((bytesRead[0]) <= 0) { throw newjava.io.IOException("No data received from socket"); } returnjava.util.Arrays.copyOfRange(in, 0, bytesRead[0]); }
public void run() { int TARGET = 42; while (continueBusyLoop) { inBusyLoop = true;java.lang.String osrDeadline =java.lang.String.valueOf(java.lang.Integer.valueOf(expectOsr? 600 : 3)); do { Main.ensureJitCompiled(Main.IntRunner.class, "run"); } while (((Main.hasJit()) && (!(Main.isInOsrCode("run")))) && ((osrDeadline.compareTo(java.time.Instant.now())) > 0) ); if (Main.hasJit()) { boolean inOsr = Main.isInOsrCode("run"); if ((expectOsr) && (!inOsr)) { throw newjava.lang.Error("Expected to be in OSR but was not."); } else if ((!(expectOsr)) && inOsr) { throw newjava.lang.Error("Expected not to be in OSR but was."); } } Main.reportValue(TARGET); }
public synchronized void setDozeMode(boolean isEnabled) { if ((mInDozeMode) == isEnabled) return; mInDozeMode = isEnabled; installNewProgramLocked(); }
static android.net.apf.ApfFilter maybeCreate(android.content.Context context, android.net.apf.ApfConfiguration config, android.net.util.InterfaceParams ifParams, android.net.ip.IpClient.Callback ipClientCallback) { if ((context == null) || (config == null)) return null; android.net.apf.ApfCapabilities apfCapabilities = config.apfCapabilities; if (apfCapabilities == null) return null; if ((apfCapabilities.maximumApfProgramSize) < 512) { android.util.Log.e(android.net.apf.ApfFilter.TAG, ("Bad small APF limit: " + (apfCapabilities.maximumApfProgramSize))); return null; } if ((apfCapabilities.apfPacketFormat)!= (ARPHRD_ETHER)) return null; if (!(new android.net.apf.ApfGenerator().setApfVersion(apfCapabilities.apfVersionSupported))) { android.util.Log.e(android.net.apf.ApfFilter.TAG, ("Unsupported APF version: " + (apfCapabilities.apfVersionSupported))); return null; } android.net.apf.ApfFilter apfFilter = new android.net.apf.ApfFilter(config, ifParams, ipClientCallback, new android.net.metrics.IpConnectivityLog()); context.registerReceiver(new android.content.BroadcastReceiver() { @java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) {java.lang.String action = intent.getAction(); if (action.equals(PowerManager.ACTION_DEVICE_IDLE_MODE_CHANGED)) { android.os.PowerManager powerManager = ((android.os.PowerManager) (context.getSystemService(Context.POWER_SERVICE))); final boolean deviceIdle = powerManager.isDeviceIdleMode(); apfFilter.setDozeMode(deviceIdle); } } }, new android.content.IntentFilter(android.os.PowerManager.ACTION_DEVICE_IDLE_MODE_CHANGED))); return apfFilter; }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetPsNotifications() { com.android.internal.telephony.ServiceStateTracker spySst = spy(sst); android.app.NotificationManager nm = mock(android.app.NotificationManager.class); doReturn(nm).when(mContext).getSystemService(eq(Context.NOTIFICATION_SERVICE)); mContextFixture.putBooleanResource(R.bool.config_user_notification_of_restrictied_mobile_access, true); doReturn(new android.content.pm.ApplicationInfo()).when(mContext).getApplicationInfo(); android.graphics.drawable.Drawable mockDrawable = mock(android.graphics.drawable.Drawable.class); android.content.res.Resources mockResources = mContext.getResources(); when(mockResources.getDrawable(anyInt(), any())).thenReturn(mockDrawable); mContextFixture.putResource(com.android.internal.R.string.RestrictedOnDataTitle, "X"); spySst.setNotification(ServiceStateTracker.PS_ENABLED); org.mockito.ArgumentCaptor<android.app.Notification> notificationArgumentCaptor = org.mockito.ArgumentCaptor.forClass(android.app.Notification.class); verify(nm).notify(anyString(), anyInt(), notificationArgumentCaptor.capture()); android.app.Notification postedNotification = notificationArgumentCaptor.getValue(); assertTrue(notificationHasTitleSet(postedNotification)); spySst.setNotification(ServiceStateTracker.PS_DISABLED); verify(nm).cancel(anyString(), anyInt()); }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetCsNotifications() { com.android.internal.telephony.ServiceStateTracker spySst = spy(sst); android.app.NotificationManager nm = mock(android.app.NotificationManager.class); doReturn(nm).when(mContext).getSystemService(eq(Context.NOTIFICATION_SERVICE)); mContextFixture.putBooleanResource(R.bool.config_user_notification_of_restrictied_mobile_access, true); doReturn(new android.content.pm.ApplicationInfo()).when(mContext).getApplicationInfo(); android.graphics.drawable.Drawable mockDrawable = mock(android.graphics.drawable.Drawable.class); android.content.res.Resources mockResources = mContext.getResources(); when(mockResources.getDrawable(anyInt(), any())).thenReturn(mockDrawable); mContextFixture.putResource(com.android.internal.R.string.RestrictedOnAllVoiceTitle, "X"); spySst.setNotification(ServiceStateTracker.CS_ENABLED); org.mockito.ArgumentCaptor<android.app.Notification> notificationArgumentCaptor = org.mockito.ArgumentCaptor.forClass(android.app.Notification.class); verify(nm).notify(anyString(), anyInt(), notificationArgumentCaptor.capture()); android.app.Notification postedNotification = notificationArgumentCaptor.getValue(); assertTrue(notificationHasTitleSet(postedNotification)); spySst.setNotification(ServiceStateTracker.CS_DISABLED); verify(nm).cancel(anyString(), anyInt()); }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetCsEmergencyNotifications() { com.android.internal.telephony.ServiceStateTracker spySst = spy(sst); android.app.NotificationManager nm = mock(android.app.NotificationManager.class); doReturn(nm).when(mContext).getSystemService(eq(Context.NOTIFICATION_SERVICE)); mContextFixture.putBooleanResource(R.bool.config_user_notification_of_restrictied_mobile_access, true); doReturn(new android.content.pm.ApplicationInfo()).when(mContext).getApplicationInfo(); android.graphics.drawable.Drawable mockDrawable = mock(android.graphics.drawable.Drawable.class); android.content.res.Resources mockResources = mContext.getResources(); when(mockResources.getDrawable(anyInt(), any())).thenReturn(mockDrawable); mContextFixture.putResource(com.android.internal.R.string.RestrictedOnEmergencyTitle, "X"); spySst.setNotification(ServiceStateTracker.CS_EMERGENCY_ENABLED); org.mockito.ArgumentCaptor<android.app.Notification> notificationArgumentCaptor = org.mockito.ArgumentCaptor.forClass(android.app.Notification.class); verify(nm).notify(anyString(), anyInt(), notificationArgumentCaptor.capture()); android.app.Notification postedNotification = notificationArgumentCaptor.getValue(); assertTrue(notificationHasTitleSet(postedNotification)); spySst.setNotification(ServiceStateTracker.CS_DISABLED); verify(nm).cancel(anyString(), anyInt()); spySst.setNotification(ServiceStateTracker.CS_REJECT_CAUSE_ENABLED); }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetCsNormalNotifications() { com.android.internal.telephony.ServiceStateTracker spySst = spy(sst); android.app.NotificationManager nm = mock(android.app.NotificationManager.class); doReturn(nm).when(mContext).getSystemService(eq(Context.NOTIFICATION_SERVICE)); mContextFixture.putBooleanResource(R.bool.config_user_notification_of_restrictied_mobile_access, true); doReturn(new android.content.pm.ApplicationInfo()).when(mContext).getApplicationInfo(); android.graphics.drawable.Drawable mockDrawable = mock(android.graphics.drawable.Drawable.class); android.content.res.Resources mockResources = mContext.getResources(); when(mockResources.getDrawable(anyInt(), any())).thenReturn(mockDrawable); mContextFixture.putResource(com.android.internal.R.string.RestrictedOnNormalTitle, "X"); spySst.setNotification(ServiceStateTracker.CS_NORMAL_ENABLED); org.mockito.ArgumentCaptor<android.app.Notification> notificationArgumentCaptor = org.mockito.ArgumentCaptor.forClass(android.app.Notification.class); verify(nm).notify(anyString(), anyInt(), notificationArgumentCaptor.capture()); android.app.Notification postedNotification = notificationArgumentCaptor.getValue(); assertTrue(notificationHasTitleSet(postedNotification)); spySst.setNotification(ServiceStateTracker.CS_DISABLED); verify(nm).cancel(anyString(), anyInt()); }
private void waitForActiveNetworkMetered(boolean metered) throwsjava.lang.Exception { finaljava.util.concurrent.CountDownLatch latch = newjava.util.concurrent.CountDownLatch(1); final android.net.ConnectivityManager.NetworkCallback networkCallback = new android.net.ConnectivityManager.NetworkCallback() { @java.lang.Override public void onCapabilitiesChanged(android.net.Network network, android.net.NetworkCapabilities nc) { if ((nc.hasCapability(NetworkCapabilities.NET_CAPABILITY_NOT_METERED))!= metered) { latch.countDown(); } } }; mCm.registerDefaultNetworkCallback(networkCallback); if (!(latch.await(android.net.cts.ConnectivityManagerTest.NETWORK_CHANGE_METEREDNESS_TIMEOUT,java.util.concurrent.TimeUnit.MILLISECONDS))) { fail(((("Timed out waiting for active network metered status to change to " + metered) + " ; networkInfo = ") + (mCm.getActiveNetwork()))); } mCm.unregisterNetworkCallback(networkCallback); }
@java.lang.Override public void onCapabilitiesChanged(android.net.Network network, android.net.NetworkCapabilities nc) { latch.countDown(); }
privatejava.lang.String getWifiMeteredStatus(java.lang.String ssid) throwsjava.lang.Exception { finaljava.lang.String command = "cmd netpolicy list wifi-networks"; finaljava.lang.String policyString = runShellCommand(mInstrumentation, command); finaljava.util.regex.Matcher m =java.util.regex.Pattern.compile((("^" + ssid) + ";(true|false|none)$"), ((java.util.regex.Pattern.MULTILINE) | (java.util.regex.Pattern.UNIX_LINES))).matcher(policyString); if (!(m.find())) { throw newjava.lang.RuntimeException("Unexpected format from cmd netpolicy"); } return m.group(1); }
public static void main(java.lang.String[] args) { Main.expectEquals(10, Main.absI((-10))); Main.expectEquals(20, Main.absI(20)); Main.expectEquals(10L, Main.absL((-10L))); Main.expectEquals(20L, Main.absL(20L)); Main.expectEquals(10, Main.abs1((-10))); Main.expectEquals(20, Main.abs1(20)); Main.expectEquals(10, Main.abs2((-10))); Main.expectEquals(20, Main.abs2(20)); Main.expectEquals(10, Main.abs3((-10))); Main.expectEquals(20, Main.abs3(20)); Main.expectEquals(10, Main.abs4((-10))); Main.expectEquals(20, Main.abs4(20)); Main.expectEquals(10, Main.abs4(((short) (-10)))); Main.expectEquals(20, Main.abs4(((short) (20)))); Main.expectEquals(10, Main.abs6(((byte) (-10)))); Main.expectEquals(20, Main.abs6(((byte) (20)))); Main.expectEquals(10L, Main.abs7((-10L))); Main.expectEquals(20L, Main.abs7(20L)); Main.expectEquals(1, Main.zabs1(((byte) (1)))); Main.expectEquals(255, Main.zabs1(((byte) (-1)))); Main.expectEquals(1, Main.zabs2(((short) (1)))); Main.expectEquals(65535, Main.zabs2(((short) (-1))));java.lang.System.out.println("passed"); }
public void setCarrierInfoForImsiEncryption(int subId,java.lang.String callingPackage, android.telephony.ImsiEncryptionInfo imsiEncryptionInfo) { com.android.internal.telephony.Phone phone = getPhone(subId); if (phone!= null) { phone.setCarrierInfoForImsiEncryption(imsiEncryptionInfo); } else { loge(("Phone phone is null for Subscription: " + subId)); return; } }
private void enforceModifyPermission() { mContext.enforceCallingOrSelfPermission(com.android.internal.telephony.MODIFY_PHONE_STATE, "Requires MODIFY_PHONE_STATE"); }
public staticjava.net.InetAddress[] blockingResolveAllLocally(android.net.Network network,java.lang.String name) throwsjava.net.UnknownHostException { final android.system.StructAddrinfo hints = new android.system.StructAddrinfo(); hints.ai_flags = 0; hints.ai_family = android.system.OsConstants.AF_UNSPEC; hints.ai_socktype = android.system.OsConstants.SOCK_DGRAM; final android.net.Network networkForResolv = android.net.dns.ResolvUtil.getNetworkWithUseLocalNameserversFlag(network); try { return Libcore.os.android_getaddrinfo(name, hints, ((int) (networkForResolv.netId))); } catch (android.system.GaiException gai) { gai.rethrowAsUnknownHostException("TLS-bypass resolution failed"); return null; } }
public android.telephony.ImsiEncryptionInfo getCarrierInfoForImsiEncryption(int keyType) { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) { throw newjava.lang.RuntimeException("Network error: Subscriber Info is null"); } int subId = getSubId(android.telephony.SubscriptionManager.getDefaultDataSubscriptionId()); if ((keyType!= (android.telephony.TelephonyManager.KEY_TYPE_EPDG)) && (keyType!= (android.telephony.TelephonyManager.KEY_TYPE_WLAN))) { throw newjava.lang.IllegalArgumentException("Network error: Invalid key type"); } android.telephony.ImsiEncryptionInfo imsiEncryptionInfo = info.getCarrierInfoForImsiEncryption(subId, keyType, mContext.getOpPackageName()); if ((imsiEncryptionInfo == null) && (isImsiEncryptionRequired(subId, keyType))) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, "Network error: key is required but not found"); throw newjava.lang.RuntimeException("Network error: key is required but not found"); } return imsiEncryptionInfo; } catch (android.os.RemoteException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, ("RemoteException: " + ex)); } catch (java.lang.NullPointerException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, ("NullPointerException: " + ex)); } return null; }
java.lang.Override protected void onCreate(android.os.Bundle savedInstanceState) { super.onCreate(savedInstanceState); android.view.View view = getLayoutInflater().inflate(R.layout.voicemail_hide_ringtone_settings, null); setContentView(view); setInfoResources(R.string.ringtone_settings_check_test, R.string.ringtone_settings_check_instructions, (-1)); setPassFailButtonClickListeners(); getPassButton().setEnabled(false); mNotApplicableButton = findViewById(R.id.voicemail_hide_ringtone_settings_not_applicable); mOpenVoiceMailSettingsButton = findViewById(R.id.open_voicemail_settings); mRingtoneSettingsDesNotExistButton = findViewById(R.id.settings_hidden); mRingtoneSettingsExistsButton = findViewById(R.id.settings_not_hidden); mRestoreDefaultDialerImage = findViewById(R.id.restore_default_dialer_image); mNotApplicableButton.setOnClickListener(new android.view.View.OnClickListener() { @java.lang.Override public void onClick(android.view.View v) { getPassButton().setEnabled(true); mOpenVoiceMailSettingsButton.setEnabled(false); mRingtoneSettingsDesNotExistButton.setEnabled(false); mRingtoneSettingsExistsButton.setEnabled(false); mRestoreDefaultDialerImage.setImageDrawable(getDrawable(R.drawable.fs_warning)); } }); mOpenVoiceMailSettingsButton.setOnClickListener(new android.view.View.OnClickListener() { @java.lang.Override public void onClick(android.view.View v) { startActivity(new android.content.Intent(android.telephony.TelephonyManager.ACTION_CONFIGURE_VOICEMAIL).putExtra(TelephonyManager.EXTRA_HIDE_PUBLIC_SETTINGS, true)); } }); mRingtoneSettingsDesNotExistButton.setOnClickListener(new android.view.View.OnClickListener() { @java.lang.Override public void onClick(android.view.View v) { getPassButton().setEnabled(true); setTestResultAndFinish(true); } }); mRingtoneSettingsExistsButton.setOnClickListener(new android.view.View.OnClickListener() { @java.lang.Override public void onClick(android.view.View v) { setTestResultAndFinish(true); }
@java.lang.Override public void onClick(android.view.View v) { getPassButton().setEnabled(true); mOpenVoiceMailSettingsButton.setEnabled(false); mRingtoneSettingsDesNotExistButton.setEnabled(false); mRingtoneSettingsExistsButton.setEnabled(false); mRestoreDefaultDialerImage.setImageDrawable(getDrawable(R.drawable.fs_warning)); }
@org.junit.Test public void testMockedSocketCreationForced() throwsjava.lang.Exception {java.net.Socket mockSocket = mock(java.net.Socket.class); android.net.IpSecConfig dummyConfig = new android.net.IpSecConfig(); android.net.IpSecTransform dummyTransform = new android.net.IpSecTransform(null, dummyConfig); when(mockSocket.getFileDescriptor$()).thenReturn(java.io.FileDescriptor.in); mIpSecManager.applyTransportModeTransform(mockSocket, IpSecManager.DIRECTION_IN, dummyTransform); verify(mockSocket, times(1)).getSoLinger(); }
private static com.android.apksig.SigningCertificateLineage read(java.nio.ByteBuffer inputByteBuffer, int version) throwsjava.io.IOException { switch (version) { case com.android.apksig.SigningCertificateLineage.FIRST_VERSION : try {java.util.List<com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode> nodes = com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.readSigningCertificateLineage(getLengthPrefixedSlice(inputByteBuffer)); int minSdkVersion = com.android.apksig.SigningCertificateLineage.calculateMinSdkVersion(nodes); return new com.android.apksig.SigningCertificateLineage(minSdkVersion, nodes); } catch (com.android.apksig.apk.ApkFormatException |java.security.cert.CertificateEncodingException e) { throw newjava.io.IOException(("Failed to read list of signing certificate nodes in " + "SigningCertificateLineage"), e); } default : throw newjava.lang.IllegalArgumentException("Invalid SigningCertificateLineage format: unrecognized version."); } }
publicjava.util.List<com.android.apksig.DefaultApkSignerEngine.SignerConfig> sortSignerConfigs(java.util.List<com.android.apksig.DefaultApkSignerEngine.SignerConfig> signerConfigs) { if (signerConfigs == null) { throw newjava.lang.NullPointerException("signerConfigs == null"); }java.util.List<com.android.apksig.DefaultApkSignerEngine.SignerConfig> sortedSignerConfigs = newjava.util.ArrayList(signerConfigs.size()); for (int i = 0; i < (mSigningLineage.size()); i++) { for (int j = 0; j < (signerConfigs.size()); j++) { com.android.apksig.DefaultApkSignerEngine.SignerConfig config = signerConfigs.get(j); if (mSigningLineage.get(i).signingCert.equals(config.getCertificates().get(0))) { sortedSignerConfigs.add(config); break; } } } if ((sortedSignerConfigs.size()) < (signerConfigs.size())) { throw newjava.lang.IllegalArgumentException(("SignerConfigs supplied which are not present in the " + SigningCertificateLineage)); } else if ((sortedSignerConfigs.size()) > (signerConfigs.size())) { throw newjava.lang.IllegalArgumentException(("At least one SignerConfig is repeated in the " + SigningCertificateLineage)); } return sortedSignerConfigs; }
private void setHearingAidActiveDevice(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, (("setHearingAidActiveDevice(" + device) + ")")); } final com.android.bluetooth.hearingaid.HearingAidService hearingAidService = mFactory.getHearingAidService(); if (hearingAidService == null) { return; } hearingAidService.setActiveDevice(device); mHearingAidActiveDevice = device; }
public boolean setActiveDevice(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ("setActiveDevice:" + device)); } synchronized(mStateMachines) { if (device == null) { if ((mActiveDeviceHiSyncId)!= (android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID)) { reportActiveDevice(null); mActiveDeviceHiSyncId = android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID; } return true; } if ((getConnectionState(device))!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (("setActiveDevice(" + device) + " failed because device not connected")); return false; }java.lang.Long deviceHiSyncId = mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID); if (deviceHiSyncId!= (mActiveDeviceHiSyncId)) { reportActiveDevice(device); mActiveDeviceHiSyncId = deviceHiSyncId; } return true; }
public void setDefaultPageCount(int pageCount) { this.DEFAULT_PAGE_COUNT = pageCount; }
public int getPageCount() { return pageCount; }
@org.junit.Test public void testSplitLastPeriod() { com.ibm.icu.text.TimeZoneNames timeZoneNames = com.ibm.icu.text.TimeZoneNames.getInstance(ULocale.ENGLISH); com.ibm.icu.util.BasicTimeZone honoluluTz = ((com.ibm.icu.util.BasicTimeZone) (com.ibm.icu.util.TimeZone.getTimeZone("Pacific/Honolulu"))); int honoluluRawOffset = -36000000; int honoluluDstOffset = 0;java.lang.String honoluluOldName = null;java.lang.String honoluluNewName = "Hawaii-Aleutian Standard Time";java.time.Instant startInstant =java.time.Instant.EPOCH;java.time.Instant endInstant =java.time.Instant.ofEpochSecond(631152000L); com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod honoluluPeriod = com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod.create(timeZoneNames, honoluluTz, startInstant, endInstant);java.time.Instant partitionInstant =java.time.Instant.ofEpochSecond(500000000L); com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod[] shards = com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod.splitAtTime(honoluluPeriod, timeZoneNames, honoluluTz, partitionInstant); assertEquals(startInstant, shards[0].getStartInstant()); assertEquals(partitionInstant, shards[0].getEndInstant()); assertEquals(honoluluRawOffset, shards[0].getRawOffsetMillis()); assertEquals(honoluluDstOffset, shards[0].getDstOffsetMillis()); assertEquals(honoluluOldName, shards[0].getName()); assertEquals(partitionInstant, shards[1].getStartInstant()); assertEquals(endInstant, shards[1].getEndInstant()); assertEquals(honoluluRawOffset, shards[1].getRawOffsetMillis()); assertEquals(honoluluDstOffset, shards[1].getDstOffsetMillis()); assertEquals(honoluluNewName, shards[1].getName()); }
@org.junit.Test public void testCountryWithPriority() throwsjava.lang.Exception {java.lang.String countryText = "Country: " + (((((((("defaultTimeZoneId: " + timeZoneMappings) + " timeZoneMappings:< ") + " utcOffset: 0 id: ") + " priority: 10 ") + " > ") + timeZoneMappings) + " timeZoneMappings:< ") + " utcOffset: 0 id: ") + " > ") + "CountryZoneTreeTest.Country country = com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTreeTest.parseCountry(countryText); com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree zoneTree = com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.create(country, com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTreeTest.RULES_START_INSTANT, com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTreeTest.RULES_END_INSTANT); assertTrue(zoneTree.validateNoPriorityClashes().isEmpty()); com.android.libcore.timezone.tzlookup.zonetree.CountryZoneUsage countryZoneUsage = zoneTree.calculateCountryZoneUsage(CountryZoneTreeTest.NOT_USED_AFTER_CUT_OFF); assertNull(countryZoneUsage.getNotUsedAfterInstant("Europe/Berlin"));java.time.Instant expectedNotUsedAfterInstant =java.time.Instant.ofEpochSecond(354675600); assertEquals(expectedNotUsedAfterInstant, countryZoneUsage.getNotUsedAfterInstant("Europe/Busingen")); }
private static boolean wouldLikelyEqualIfSplit(com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod a, com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod b) { return ((a.getEndInstant().equals(b.getEndInstant())) && ((a.getDstOffsetMillis()) == (b.getDstOffsetMillis()))) && ((a.getRawOffsetMillis()) == (b.getRawOffsetMillis())); }
@java.lang.Override publicjava.net.InetAddress[] getAllByName(java.lang.String host) throwsjava.net.UnknownHostException {java.util.List<java.net.InetAddress> addrs =java.util.Arrays.asList(mUseLocalNameservers? android.net.dns.ResolvUtil.blockingResolveAllLocally(this, host) : super.getAllByName(host));java.util.LinkedHashMap<java.lang.Class,java.net.InetAddress> addressByFamily = newjava.util.LinkedHashMap<>(); addressByFamily.put(addrs.get(0).getClass(), addrs.get(0));java.util.Collections.shuffle(addrs); for (java.net.InetAddress addr : addrs) { addressByFamily.put(addr.getClass(), addr); } return addressByFamily.values().toArray(newjava.net.InetAddress[addressByFamily.size()]); }
public static com.android.server.connectivity.DnsManager.PrivateDnsConfig tryBlockingResolveOf(android.net.Network network,java.lang.String name) { try { finaljava.net.InetAddress[] ips = android.net.dns.ResolvUtil.blockingResolveAllLocally(network, name); return (ips!= null) && ((ips.length) > 0)? new com.android.server.connectivity.DnsManager.PrivateDnsConfig(name, ips) : null; } catch (java.net.UnknownHostException uhe) { return null; } }
public staticjava.net.InetAddress[] blockingResolveAllLocally(android.net.Network network,java.lang.String name) throwsjava.net.UnknownHostException { final android.system.StructAddrinfo hints = new android.system.StructAddrinfo(); hints.ai_flags = 0; hints.ai_family = android.system.OsConstants.AF_UNSPEC; hints.ai_socktype = android.system.OsConstants.SOCK_DGRAM; final long netidForResolv = (NETID_USE_LOCAL_NAMESERVERS) | ((long) (network.netId)); try { return Libcore.os.android_getaddrinfo(name, hints, ((int) (netidForResolv))); } catch (android.system.GaiException gai) { gai.rethrowAsUnknownHostException("TLS-bypass resolution failed"); return null; } }
public static void setProcessUseLocalNameservers(android.net.Network network) { final long netidForResolv = (NETID_USE_LOCAL_NAMESERVERS) | ((long) (network.netId)); android.net.NetworkUtils.bindProcessToNetworkForHostResolution(((int) (netidForResolv))); }
@java.lang.Override public void exit() { android.net.TrafficStats.clearThreadStatsUid(); mPrivateDnsBypass = true; }
public void enableSampleDeviceAdmin() throwsjava.lang.Exception { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, "Settings"); findObjectInScrollable(new android.support.test.uiautomator.UiSelector().textContains("Security")).click(); if ((testFramework.getApi()) >= 24) { findObjectInScrollable(new android.support.test.uiautomator.UiSelector().textContains("Admin")); } else { findObjectInScrollable(new android.support.test.uiautomator.UiSelector().text("Administrators")); } device.findObject(new android.support.test.uiautomator.UiSelector().text("Enable Device Admin")); try { if ((testFramework.getApi()) >= 24) { findObjectInScrollable(new android.support.test.uiautomator.UiSelector().textContains("Activate")).click(); } else { device.findObject(new android.support.test.uiautomator.UiSelector().textMatches("(?i)activate(?-i)")).click(); } } catch (android.support.test.uiautomator.UiObjectNotFoundException e) { assertTrue("Could not find device administration buttons.", new com.android.devtools.systemimage.uitest.utils.Wait().until(new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition() { @java.lang.Override public boolean isTrue() throwsjava.lang.Exception { return device.findObject(new android.support.test.uiautomator.UiSelector().text("Cancel")).exists(); } })); device.findObject(new android.support.test.uiautomator.UiSelector().text("Cancel")).click(); } device.pressHome(); }
public static void installApp(android.app.Instrumentation instrumentation) throwsjava.lang.Exception {java.lang.String testPackageName = "com.example.android.apis";java.lang.String testPackageAPK32 = "ApiDemos_x86.apk";java.lang.String testPackageAPK64 = "ApiDemos_x86_64.apk"; if ((Build.VERSION.SDK_INT) >= (Build.VERSION_CODES.O)) {java.lang.String apk = (android.text.TextUtils.join(", ", Build.SUPPORTED_ABIS).contains("64"))? testPackageAPK64 : testPackageAPK32; boolean isAPIDemoInstalled = com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.isPackageInstalled(instrumentation, testPackageName); if (!isAPIDemoInstalled) com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.installApk(instrumentation, apk); } com.android.devtools.systemimage.uitest.utils.SettingsUtil.activate(instrumentation, "Sample Device Admin"); }
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "T144630613") public void activateDeactivatePolicy() throwsjava.lang.Exception { if (isAPIDemoInstalled) { com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate(instrumentation, "Device Admin"); } assertFalse(checkStatusOfPolicy()); com.android.devtools.systemimage.uitest.utils.SettingsUtil.activate(instrumentation, "Device Admin"); assertTrue(checkStatusOfPolicy()); com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate(instrumentation, "Device Admin"); assertFalse(checkStatusOfPolicy()); }
public static libcore.Repository openJdk9(java.nio.file.Path upstreamRoot,java.lang.String upstreamName) {java.util.Map<libcore.Repository.FileGroup,java.util.List<java.lang.String>> sourceDirs = newjava.util.HashMap<>(); sourceDirs.put(libcore.Repository.FileGroup.JAVA,java.util.Arrays.asList("jdk/src/java.base/share/classes", "jdk/src/java.logging/share/classes", "jdk/src/java.prefs/share/classes", "jdk/src/java.sql/share/classes", "jdk/src/java.desktop/share/classes", "jdk/src/java.base/solaris/classes", "jdk/src/java.base/unix/classes", "jdk/src/java.prefs/unix/classes", "jdk/src/jdk.unsupported/share/classes", "jdk/src/java.base/linux/classes", "build/linux-x86_64-normal-server-release/support/gensrc/java.base")); sourceDirs.put(libcore.Repository.FileGroup.NATIVE,java.util.Arrays.asList("jdk/src/java.base/unix/native/lib ", "jdk/src/java.base/share/native/lib")); return new libcore.Repository.OpenJdkRepository(upstreamRoot, upstreamName, sourceDirs); }
public void run() throwsjava.io.IOException {java.util.List<java.nio.file.Path> relPaths = standardRepositories.ojluni().loadRelPathsFromBlueprint(java.util.EnumSet.of(FileGroup.JAVA)); run(java.lang.System.out, relPaths); }
@java.lang.Override publicjava.nio.file.Path pathFromRepository(java.nio.file.Path relPath) { returnjava.nio.file.Paths.get(com.android.jack.jack.JillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBasedJillBased
publicjava.util.List<java.nio.file.Path> loadRelPathsFromBlueprint(java.util.Set<libcore.Repository.FileGroup> fileGroups) throwsjava.io.IOException {java.util.List<java.nio.file.Path> result = newjava.util.ArrayList<>(); for (libcore.Repository.FileGroup fileGroup : fileGroups) { switch (fileGroup) { case JAVA : result.addAll(loadRelPathsFromBlueprint(libcore.Repository.FileGroup.JAVA, "openjdk_java _files.bp", "\"ojluni/src/main/java _java _files.bp /(.+\\. )\"")); break; case NATIVE : result.addAll(loadRelPathsFromBlueprint(libcore.Repository.FileGroup.NATIVE, "ojluni/src/main/native/Android.bp", "\\s+\"(.+\\.(?:c|cpp))\",")); break; default : throw newjava.lang.IllegalArgumentException(("Unknown FileGroup: " + fileGroup)); } } return result; }
privatejava.util.List<java.nio.file.Path> loadRelPathsFromBlueprint(libcore.Repository.FileGroup fileGroup,java.lang.String blueprintPathString,java.lang.String patternString) throwsjava.io.IOException {java.nio.file.Path blueprintPath = rootPath.resolve(blueprintPathString);java.util.regex.Pattern pattern =java.util.regex.Pattern.compile(patternString);java.util.List<java.nio.file.Path> result = newjava.util.ArrayList<>(); for (java.lang.String line : libcore.Util.readLines(blueprintPath)) {java.util.regex.Matcher matcher = pattern.matcher(line); while (matcher.find()) {java.nio.file.Path path = fileGroup.relPathPrefix.resolve(matcher.group(1)); result.add(path); } } return result; }
public boolean isJsr166(java.nio.file.Path relPath) { boolean result = relPath.startsWith("java /java /util/concurrent/");java.lang.String ju = " /java /util/";java.lang.String suffix = ".java "; if ((!result) && (relPath.startsWith(ju))) {java.lang.String name = relPath.toString().substring(ju.length()); if (name.endsWith(suffix)) { name = name.substring(0, ((name.length()) - (suffix.length()))); result = libcore.StandardRepositories.juFilesFromJsr166.contains(name); } } return result; }
public libcore.Repository currentUpstream(java.nio.file.Path relPath) { boolean isJsr166 = isJsr166(relPath); if (isJsr166) { return jsr166Upstream; } else if ((relPath.startsWith("java /java /sql/")) || (relPath.startsWith("java /java x/sql/"))) { return SqlUpstream; } else { return defaultUpstream; } }
public static libcore.Repository openJdkLegacy(java.nio.file.Path upstreamRoot,java.lang.String upstreamName) {java.util.Map<libcore.Repository.FileGroup,java.util.List<java.lang.String>> sourceDirs = newjava.util.HashMap<>(); sourceDirs.put(libcore.Repository.FileGroup.JAVA,java.util.Arrays.asList("jdk/src/share/classes", "jdk/src/solaris/classes", "build/linux-x86_64-normal-server-release/jdk/gensrc"));java.util.List<java.lang.String> nativeSourceDirs = newjava.util.ArrayList<>();java.util.List<java.lang.String> pkgPaths =java.util.Arrays.asList("", "java /io", "java /lang", "java /net", "java /nio", " /util", "java /util/zip", "sun/nio/ch", "sun/nio/fs"); for (java.lang.String pkgPath : pkgPaths) { nativeSourceDirs.add(("jdk/src/solaris/native/" + pkgPath)); nativeSourceDirs.add(("jdk/src/share/native/" + pkgPath)); nativeSourceDirs.add(("jdk/src/solaris/native/common/" + pkgPath)); nativeSourceDirs.add(("jdk/src/share/native/common/" + pkgPath)); } sourceDirs.put(libcore.Repository.FileGroup.NATIVE, nativeSourceDirs); return new libcore.Repository.OpenJdkRepository(upstreamRoot, upstreamName, sourceDirs); }
@java.lang.Override publicjava.nio.file.Path pathFromRepository(java.nio.file.Path relPath) { libcore.Repository.FileGroup fileGroup = libcore.Repository.FileGroup.of(relPath);java.util.List<java.lang.String> fileGroupSourceDirs = sourceDirs.get(fileGroup);java.nio.file.Path sourceDirRelativePath = fileGroup.relativizeFrom(relPath); for (java.lang.String sourceDir : fileGroupSourceDirs) {java.nio.file.Path repositoryRelativePath =java.nio.file.Paths.get(sourceDir).resolve(sourceDirRelativePath);java.io.File file = rootPath.resolve(repositoryRelativePath); if (file.exists()) { return repositoryRelativePath; } } return null; }
public void run() throwsjava.io.IOException {java.util.List<java.nio.file.Path> relPaths = standardRepositories.ojluni().loadRelPathsFromBlueprint(java.util.EnumSet.of(FileGroup.JAVA)); if (outputDir.toFile().exists()) { throw newjava.io.IOException(((outputDir) + " already exists")); } else { boolean success = outputDir.toFile().mkdir(); if (!success) { throw newjava.io.IOException(("Failed to create directory " + (outputDir))); } } for (java.nio.file.Path relPath : relPaths) { libcore.Repository expectedUpstream = standardRepositories.currentUpstream(relPath); for (libcore.Repository upstream : standardRepositories.upstreams()) {java.nio.file.Path upstreamFile = upstream.absolutePath(relPath); if (upstreamFile!= null) {java.nio.file.Path outputFile = outputDir.resolve(upstream.name()).resolve(relPath); copyFile(upstreamFile, outputFile); if (upstream.equals(expectedUpstream)) { copyFile(upstreamFile, outputDir.resolve("expected").resolve(relPath)); } } } } }
boolean unregisterApp() { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, "unregisterApp()"); } int callingUid = android.os.Binder.getCallingUid(); if ((callingUid == (mUserUid)) || (callingUid < (FIRST_APPLICATION_UID))) { mUserUid = 0; mUserAppName = null; return mHidDeviceNativeInterface.unregisterApp(); } android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, "UnregisterApp: caller UID doesn't match user UID"); return false; }
javajava.lang.String getUserAppName() { if ((mUserAppName) == null) { return ""; } return mUserAppName; }
boolean registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, android.bluetooth.IBluetoothHidDeviceCallback callback) { if ((mUserUid)!= 0) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, "registerApp failed because another app is registered"); return false; } mUserUid = android.os.Binder.getCallingUid(); mUserAppName = getPackageManager().getNameForUid(mUserUid); if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ("registerApp: calling uid=" + (mUserUid))); } mCallback = callback; return mHidDeviceNativeInterface.registerApp(sdp.name, sdp.description, sdp.provider, sdp.subclass, sdp.descriptors, (inQos == null? null : inQos.toArray()), (outQos == null? null : outQos.toArray())); }
javajavajavajava.lang.Override public void enter() { android.net.apf.ApfFilter.ApfConfiguration apfConfig = new android.net.apf.ApfFilter.ApfConfiguration(); apfConfig.apfCapabilities = mConfiguration.mApfCapabilities; apfConfig.multicastFilter = mMulticastFiltering; apfConfig.ieee802_3Filter = mContext.getResources().getBoolean(R.bool.config_apfDrop802_3Frames); apfConfig.ethTypeBlackList = mContext.getResources().getIntArray(R.array.config_apfEthTypeBlackList); mApfFilter = android.net.apf.ApfFilter.maybeCreate(apfConfig, mInterfaceParams, mCallback); if ((mApfFilter) == null) { mCallback.setFallbackMulticastFilter(mMulticastFiltering); } mPacketTracker = createPacketTracker(); if ((mPacketTracker)!= null) mPacketTracker.start(mConfiguration.mDisplayName); if ((mConfiguration.mEnableIPv6) && (!(startIPv6()))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_STARTING_IPV6); transitionTo(mStoppingState); return; } if ((mConfiguration.mEnableIPv4) && (!(startIPv4()))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_STARTING_IPV4); transitionTo(mStoppingState); return; } final android.net.ip.IpClient.InitialConfiguration config = mConfiguration.mInitialConfig; if ((config!= null) && (!(applyInitialConfig(config)))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_INVALID_PROVISIONING); transitionTo(mStoppingState); return; } if (mConfiguration.mUsingMultinetworkPolicyTracker) { mMultinetworkPolicyTracker = new android.net.util.MultinetworkPolicyTracker(mContext, getHandler(), () -> { android.net.ip.IpManager.LOG.log(com.android.server.IpManager.TAG, "MultinetworkPolicyTracker: AvoidBadWifi changed"); mMultinetworkPolicyTracker.start(); } if ( (mConfiguration.mUsingIpReachabilityMonitor) && (!(startIpReachabilityMonitor()))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_STARTING_IP_
@org.junit.Test public void testRaProcessing() throwsjava.lang.Exception { final int maxRandomPacketSize = 512; finaljava.util.Random r = newjava.util.Random(); android.net.apf.ApfTest.MockIpClientCallback cb = new android.net.apf.ApfTest.MockIpClientCallback(); android.net.apf.ApfFilter.ApfConfiguration config = android.net.apf.ApfTest.getDefaultConfig(); config.multicastFilter = android.net.apf.ApfTest.DROP_MULTICAST; config.ieee802_3Filter = android.net.apf.ApfTest.DROP_802_3_FRAMES; android.net.apf.ApfTest.TestApfFilter apfFilter = new android.net.apf.ApfTest.TestApfFilter(config, cb, mLog); for (int i = 0; i < 1000; i++) { byte[] packet = new byte[r.nextInt((maxRandomPacketSize + 1))]; r.nextBytes(packet); try { apfFilter.processRa(packet, packet.length); } catch (java.lang.Exception e) { throw newjava.lang.Exception(("Bad packet: " + (com.android.internal.util.HexDump.toHexString(packet))), e); } } }
@org.junit.Test public void testApfFilterArp() throwsjava.lang.Exception { android.net.apf.ApfTest.MockIpClientCallback ipClientCallback = new android.net.apf.ApfTest.MockIpClientCallback(); android.net.apf.ApfFilter.ApfConfiguration config = android.net.apf.ApfTest.getDefaultConfig(); config.multicastFilter = android.net.apf.ApfTest.DROP_MULTICAST; config.ieee802_3Filter = android.net.apf.ApfTest.DROP_802_3_FRAMES; android.net.apf.ApfTest.TestApfFilter apfFilter = new android.net.apf.ApfTest.TestApfFilter(config, ipClientCallback, mLog); verifyArpFilter(ipClientCallback.getApfProgram(), android.net.apf.ApfTest.PASS); android.net.LinkAddress linkAddress = new android.net.LinkAddress(java.net.InetAddress.getByAddress(android.net.apf.ApfTest.MOCK_IPV4_ADDR), 24); android.net.LinkProperties lp = new android.net.LinkProperties(); assertTrue(lp.addLinkAddress(linkAddress)); verifyArpFilter(getProgram(ipClientCallback, apfFilter, lp), android.net.apf.ApfTest.DROP); verifyArpFilter(getProgram(ipClientCallback, apfFilter, new android.net.LinkProperties()), android.net.apf.ApfTest.PASS); apfFilter.shutdown(); }
@java.lang.Override public void onProvisioningSuccess(android.net.LinkProperties newLp) { synchronized(this) { mCallbackLinkProperties = newLp; notify(); } }
@java.lang.Override public void onProvisioningFailure(android.net.LinkProperties newLp) { synchronized(this) { mCallbackLinkProperties = null; notify(); } }
public android.net.LinkProperties waitForProvisioning() { synchronized(this) { try { wait(); } catch (java.lang.InterruptedException e) { } return mCallbackLinkProperties; } }
@org.junit.Test public void testRaParsing() throwsjava.lang.Exception { final int maxRandomPacketSize = 512; finaljava.util.Random r = newjava.util.Random(); android.net.apf.ApfTest.MockIpClientCallback cb = new android.net.apf.ApfTest.MockIpClientCallback(); android.net.apf.ApfFilter.ApfConfiguration config = android.net.apf.ApfTest.getDefaultConfig(); config.multicastFilter = android.net.apf.ApfTest.DROP_MULTICAST; config.ieee802_3Filter = android.net.apf.ApfTest.DROP_802_3_FRAMES; android.net.apf.ApfTest.TestApfFilter apfFilter = new android.net.apf.ApfTest.TestApfFilter(config, cb, mLog); for (int i = 0; i < 1000; i++) { byte[] packet = new byte[r.nextInt((maxRandomPacketSize + 1))]; r.nextBytes(packet); try { apfFilter.new android.net.apf.Ra(packet, packet.length); } catch (android.net.apf.ApfFilter e) { } catch (java.lang.Exception e) { throw newjava.lang.Exception(("Bad packet: " + (com.android.internal.util.HexDump.toHexString(packet))), e); } } }
@java.lang.Override public void onSubscriptionsChanged() { stopListenForPhoneState(); startListenForPhoneState(); }
private void updateAgIndicatorEnableState(com.android.bluetooth.hfp.HeadsetAgIndicatorEnableState agIndicatorEnableState) { if (java.util.Objects.equals(mAgIndicatorEnableState, agIndicatorEnableState)) { return; } mAgIndicatorEnableState = agIndicatorEnableState; int events = android.telephony.PhoneStateListener.LISTEN_NONE; if (((mAgIndicatorEnableState)!= null) && (mAgIndicatorEnableState.service)) { events |= android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE; } if (((mAgIndicatorEnableState)!= null) && (mAgIndicatorEnableState.signal)) { events |= android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS; } mSystemInterface.getHeadsetPhoneState().listenForPhoneState(mDevice, events); }
private void startListenForPhoneState() { if (mPhoneStateListener) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, "startListenForPhoneState already listening"); return; } int subId = android.telephony.SubscriptionManager.getDefaultSubscriptionId(); if (!(android.telephony.SubscriptionManager.isValidSubscriptionId(subId))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, ("startListenForPhoneState invalid subscription ID " + subId)); return; } int events = getTelephonyEventsToListen(); if (events == (android.telephony.PhoneStateListener.LISTEN_NONE)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, "listenForPhoneState no event to listen"); return; } mPhoneStateListener = new com.android.bluetooth.hfp.HeadsetPhoneState.HeadsetPhoneStateListener(subId, mHeadsetService.getStateMachinesThreadLooper()); mTelephonyManager.listen(mPhoneStateListener, events); if ((events & (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))!= 0) { mTelephonyManager.setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_IGNORE_SCREEN_OFF); } }
private void stopListenForPhoneState() { if (mPhoneStateListener == null) { android.util.Log.i(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, "stopListenForPhoneState: no listener indicates nothing is listening"); return; } mTelephonyManager.listen(mPhoneStateListener, PhoneStateListener.LISTEN_NONE); mTelephonyManager.setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_NORMAL); mPhoneStateListener = null; }
public void cleanup() { stopListenForPhoneState(); mSubscriptionManager.removeOnSubscriptionsChangedListener(mOnSubscriptionsChangedListener); }
@android.support.annotation.VisibleForTesting public void listenForPhoneState(android.bluetooth.BluetoothDevice device, int events) { synchronized(mTelephonyManager) { mDeviceEventMap.put(device, events); stopListenForPhoneState(); startListenForPhoneState(); } }
@org.junit.Test public void testAtBiaEvent_initialSubscriptionWithUpdates() { setUpConnectedState(); verify(mPhoneState).listenForPhoneState(mTestDevice, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_BIA, new com.android.bluetooth.hfp.HeadsetAgIndicatorEnableState(true, false, true, false), mTestDevice)); verify(mPhoneState).listenForPhoneState(mTestDevice, PhoneStateListener.LISTEN_SERVICE_STATE); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_BIA, new com.android.bluetooth.hfp.HeadsetAgIndicatorEnableState(false, true, true, false), mTestDevice)); verify(mPhoneState).listenForPhoneState(mTestDevice, PhoneStateListener.LISTEN_SIGNAL_STRENGTHS); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_BIA, new com.android.bluetooth.hfp.HeadsetAgIndicatorEnableState(false, false, true, false), mTestDevice)); verify(mPhoneState).listenForPhoneState(mTestDevice, PhoneStateListener.LISTEN_NONE); }
@org.junit.Test public void testListenForPhoneState_MultiDevice_AllUpAllDown() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); android.bluetooth.BluetoothDevice device2 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 2); mHeadsetPhoneState.listenForPhoneState(device1, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).listen(any(), ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_IGNORE_SCREEN_OFF); mHeadsetPhoneState.listenForPhoneState(device2, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verifyNoMoreInteractions(mTelephonyManager); mHeadsetPhoneState.listenForPhoneState(device1, PhoneStateListener.LISTEN_NONE); verifyNoMoreInteractions(mTelephonyManager); mHeadsetPhoneState.listenForPhoneState(device2, PhoneStateListener.LISTEN_NONE); verify(mTelephonyManager).listen(any(), PhoneStateListener.LISTEN_NONE); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_NORMAL); verifyNoMoreInteractions(mTelephonyManager); }
@org.junit.After public void tearDown() { mHeadsetPhoneState.cleanup(); }
@org.junit.Test public void testListenForPhoneState_ServiceAndSignalStrengthUpdateTurnOffAll() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); mHeadsetPhoneState.listenForPhoneState(device1, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).listen(any(), ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_IGNORE_SCREEN_OFF); mHeadsetPhoneState.listenForPhoneState(device1, PhoneStateListener.LISTEN_NONE); verify(mTelephonyManager).listen(any(), PhoneStateListener.LISTEN_NONE); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_NORMAL); verifyNoMoreInteractions(mTelephonyManager); }
@org.junit.Before public void setUp() { org.mockito.MockitoAnnotations.initMocks(this); when(mHeadsetService.getSystemService(Context.TELEPHONY_SERVICE)).thenReturn(mTelephonyManager); when(mHeadsetService.getSystemService(Context.TELEPHONY_SUBSCRIPTION_SERVICE)).thenReturn(mSubscriptionManager); mHeadsetPhoneState = new com.android.bluetooth.hfp.HeadsetPhoneState(mHeadsetService); }
@org.junit.Test public void testListenForPhoneState_ServiceOnly() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); mHeadsetPhoneState.listenForPhoneState(device1, PhoneStateListener.LISTEN_SERVICE_STATE); verify(mTelephonyManager).listen(any(), PhoneStateListener.LISTEN_SERVICE_STATE); verifyNoMoreInteractions(mTelephonyManager); }
@org.junit.Test public void testListenForPhoneState_ServiceAndSignalStrength() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); mHeadsetPhoneState.listenForPhoneState(device1, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).listen(any(), ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_IGNORE_SCREEN_OFF); verifyNoMoreInteractions(mTelephonyManager); }
@org.junit.Test public void testListenForPhoneState_ServiceAndSignalStrengthUpdateTurnOffSignalStrengh() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); mHeadsetPhoneState.listenForPhoneState(device1, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).listen(any(), ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_IGNORE_SCREEN_OFF); mHeadsetPhoneState.listenForPhoneState(device1, PhoneStateListener.LISTEN_SERVICE_STATE); verify(mTelephonyManager).listen(any(), PhoneStateListener.LISTEN_NONE); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_NORMAL); verify(mTelephonyManager).listen(any(), PhoneStateListener.LISTEN_SERVICE_STATE); verifyNoMoreInteractions(mTelephonyManager); }
@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { for (com.android.gfx.benchmark.ApkInfo apk : com.android.gfx.benchmark.ApkInfo.values()) { getDevice().installPackage(newjava.io.File(mApkDir, apk.getFileName()), true); runDeviceTests(com.android.tradefed.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.tradefed.testtype.GraphicsBenchmarkHostsideController.CLASS, ("test" + (apk.name()))); } }
@org.junit.Test public void testSNIPER_3D() throwsjava.io.IOException,java.lang.InterruptedException { startApp(ApkInfo.SNIPER_3D); }
@java.lang.Override protected void resolvePrivateDnsConfig(com.android.server.connectivity.DnsManager.PrivateDnsConfig cfg) { mPrivateDnsCfg = cfg; if (mPrivateDnsCfg.inStrictMode()) { try {java.net.InetAddress[] ips = newjava.net.InetAddress[]{java.net.InetAddress.getByName("3.3.3.3"),java.net.InetAddress.getByName("4.4.4.4") }; mPrivateDnsCfg = new com.android.server.connectivity.DnsManager.PrivateDnsConfig(mPrivateDnsCfg.hostname, ips); } catch (java.lang.Exception e) { } } }
@com.android.internal.annotations.VisibleForTesting protected void resolvePrivateDnsConfig(com.android.server.connectivity.DnsManager.PrivateDnsConfig cfg) { if (cfg == null) { mPrivateDnsCfg = null; return; } if (!(cfg.inStrictMode())) { mPrivateDnsCfg = cfg; return; } if (((((mPrivateDnsCfg)!= null) && (mPrivateDnsCfg.inStrictMode())) && ((mPrivateDnsCfg.ips.length) > 0)) && (mPrivateDnsCfg.hostname.equals(cfg.hostname))) { return; } mPrivateDnsCfg = cfg; final com.android.server.connectivity.DnsManager.PrivateDnsConfig resolvedCfg = com.android.server.connectivity.DnsManager.tryBlockingResolveOf(mNetwork, mPrivateDnsCfg.hostname); if (resolvedCfg!= null) { mPrivateDnsCfg = resolvedCfg; } }
private void handleRegisterNetworkAgent(NetworkAgentInfo na) { if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log("Register NetworkAgent Messenger"); mNetworkAgentInfos.put(na.messenger, na); synchronized(mNetworkForNetId) { mNetworkForNetId.put(na.network.netId, na); } na.asyncChannel.connect(mContext, mTrackerHandler, na.messenger); android.net.NetworkInfo networkInfo = na.networkInfo; na.networkInfo = null; updateNetworkInfo(na, networkInfo); updateUids(na, null, na.networkCapabilities); }
@com.android.internal.annotations.VisibleForTesting protected void handlePrivateDnsSettingsChanged() { final PrivateDnsConfig cfg = mDnsManager.getPrivateDnsConfig(); for (NetworkAgentInfo nai : mNetworkAgentInfos.values()) { if (!(com.android.server.connectivity.NetworkMonitor.isValidationRequired(mDefaultRequest.networkCapabilities, nai.networkCapabilities))) { continue; } nai.networkMonitor.notifyPrivateDnsSettingsChanged(cfg); if (!(cfg.inStrictMode())) { updatePrivateDns(nai, cfg); } } }
private void handlePrivateDnsValidationUpdate(com.android.server.connectivity.DnsManager.PrivateDnsValidationUpdate update) { mDnsManager.updatePrivateDnsValidation(update); com.android.server.connectivity.NetworkAgentInfo nai = getNetworkAgentInfoForNetwork(new android.net.Network(update.netId)); if (nai == null) { return; } if (mDnsManager.maybeFixLinkPropertiesPrivateDns(nai.network.netId, new android.net.LinkProperties(nai.linkProperties))) { handleUpdateLinkProperties(nai, new android.net.LinkProperties(nai.linkProperties)); } }
private void updateStatus(java.net.InetAddress ipAddress,java.lang.String hostname, boolean validated) { android.util.Pair<java.lang.String,java.net.InetAddress> p = new android.util.Pair(hostname, ipAddress); if (!(mValidationMap.containsKey(p))) { return; } if (validated) { mValidationMap.put(p, com.android.server.connectivity.DnsManager.PrivateDnsValidationStatuses.ValidationStatus.SUCCEEDED); } else { mValidationMap.put(p, com.android.server.connectivity.DnsManager.PrivateDnsValidationStatuses.ValidationStatus.FAILED); } }
private void updateLinkProperties(com.android.server.connectivity.NetworkAgentInfo networkAgent, android.net.LinkProperties oldLp) { android.net.LinkProperties newLp = networkAgent.linkProperties; int netId = networkAgent.network.netId; if ((networkAgent.clatd)!= null) { networkAgent.clatd.fixupLinkProperties(oldLp); } updateInterfaces(newLp, oldLp, netId, networkAgent.networkCapabilities); updateMtu(newLp, oldLp); updateTcpBufferSizes(networkAgent); updateRoutes(newLp, oldLp, netId); updateDnses(newLp, oldLp, netId); networkAgent.updateClat(mNetd); if (isDefaultNetwork(networkAgent)) { handleApplyDefaultProxy(newLp.getHttpProxy()); } else { updateProxy(newLp, oldLp, networkAgent); } if (!(java.util.Objects.equals(newLp, oldLp))) { notifyIfacesChangedForNetworkStats(); notifyNetworkCallbacks(networkAgent, ConnectivityManager.CALLBACK_IP_CHANGED); } mKeepaliveTracker.handleCheckKeepalivesStillValid(networkAgent); }
private boolean updatePrivateDns(com.android.server.connectivity.NetworkAgentInfo nai, com.android.server.connectivity.DnsManager.PrivateDnsConfig newCfg) { final boolean reevaluationRequired = true; final boolean dontReevaluate = false; final com.android.server.connectivity.DnsManager.PrivateDnsConfig oldCfg = mDnsManager.updatePrivateDns(nai.network, newCfg); updateDnses(nai.linkProperties, null, nai.network.netId); if (newCfg.inStrictMode()) { handleUpdateLinkProperties(nai, new android.net.LinkProperties(nai.linkProperties)); } if (newCfg == null) { if (oldCfg == null) return dontReevaluate; return oldCfg.useTls? reevaluationRequired : dontReevaluate; } if (oldCfg == null) { return newCfg.useTls? reevaluationRequired : dontReevaluate; } if ((oldCfg.useTls)!= (newCfg.useTls)) { return reevaluationRequired; } if ((newCfg.inStrictMode()) && (!(java.util.Objects.equals(oldCfg.hostname, newCfg.hostname)))) { return reevaluationRequired; } return dontReevaluate; }
@com.android.internal.annotations.VisibleForTesting protected void registerNetdEventCallback() { mIpConnectivityMetrics = checkNotNull(((android.net.IIpConnectivityMetrics) (IIpConnectivityMetrics.Stub.asInterface(android.os.ServiceManager.getService(IpConnectivityLog.SERVICE_NAME)))), "missing IIpConnectivityMetrics"); try { mIpConnectivityMetrics.addNetdEventCallback(INetdEventCallback.CALLBACK_CALLER_CONNECTIVITY_SERVICE, mNetdEventCallback); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge(("Error registering netd callback :" + e)); } }
public void updatePrivateDnsValidation(com.android.server.connectivity.DnsManager.PrivateDnsValidationUpdate update) { if (!(mPrivateDnsValidationMap.containsKey(update.netId))) { return; } mPrivateDnsValidationMap.get(update.netId).updateStatus(update.ipAddress, update.hostname, update.validated); }
@java.lang.Override public void onPrivateDnsValidationEvent(int netId,java.lang.String ipAddress,java.lang.String hostname, boolean validated) { try { mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_PRIVATE_DNS_VALIDATION_UPDATE, new com.android.server.connectivity.DnsManager.PrivateDnsValidationUpdate(netId,java.net.InetAddress.parseNumericAddress(ipAddress), hostname, validated))); } catch (java.lang.IllegalArgumentException e) { } }
public boolean maybeFixLinkPropertiesPrivateDns(int netId, android.net.LinkProperties lp) { final android.net.LinkProperties oldLp = new android.net.LinkProperties(lp); final com.android.server.connectivity.DnsManager.PrivateDnsConfig privateDnsCfg = mPrivateDnsMap.get(netId); final boolean useTls = (privateDnsCfg!= null) && (privateDnsCfg.useTls); final boolean strictMode = (privateDnsCfg!= null) && (privateDnsCfg.inStrictMode()); finaljava.lang.String tlsHostname = (strictMode)? privateDnsCfg.hostname : ""; if (strictMode) { lp.setUsePrivateDns(true); lp.setPrivateDnsServerName(tlsHostname); } else if (useTls) { boolean validated = (mPrivateDnsValidationMap.containsKey(netId)) && (mPrivateDnsValidationMap.get(netId).hasValidatedServer()); lp.setUsePrivateDns(validated); lp.setPrivateDnsServerName(null); } else { lp.setUsePrivateDns(false); lp.setPrivateDnsServerName(null); } return!(java.util.Objects.equals(oldLp, lp)); }
@com.android.internal.annotations.VisibleForTesting protected boolean isTetherProvisioningRequired() { final com.android.server.connectivity.tethering.TetheringConfiguration cfg = mConfig; if ((mSystemProperties.getBoolean(com.android.server.connectivity.Tethering.DISABLE_PROVISIONING_SYSPROP_KEY, false)) || (cfg.provisioningApp) == null)) { return false; } if (carrierConfigAffirmsEntitlementCheckNotRequired()) { return false; } return (cfg.provisioningApp.length) == 2; }
private staticjava.lang.String getPovisioningAppNoUi(android.content.Context ctx) { try { return ctx.getResources().getString(com.android.internal.R.string.config_mobile_hotspot_provision_app_no_ui); } catch (android.content.res.Resources e) { return ""; } }
@java.lang.Override public void close(java.io.FileDescriptor fd) throws android.system.ErrnoException { try { if ((fd!= null) && (fd.isSocket())) { if (libcore.io.BlockGuardOs.isLingerSocket(fd)) { dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); } } } catch (android.system.ErrnoException ignored) { } os.close(fd); }
public synchronized void closeChannels() {java.util.Collection<com.android.se.Channel> col = mChannels.values(); com.android.se.Channel[] channelList = col.toArray(new com.android.se.Channel[col.size()]); for (com.android.se.Channel channel : channelList) { closeChannel(channel); } }
@java.lang.Override public void handleMessage(android.os.Message message) { switch (message.what) { case com.android.se.Terminal.EVENT_GET_HAL : try { initialize(); } catch (java.lang.Exception e) { android.util.Log.e(mTag, ((mName) + " could not be initialized again")); sendMessageDelayed(mHandler.obtainMessage(com.android.se.Terminal.EVENT_GET_HAL, 0), com.android.se.Terminal.GET_SERVICE_DELAY_MILLIS); } break; default : break; } }
@java.lang.Override public void onStateChange(boolean state) { synchronized(mLock) { android.util.Log.i(mTag, ("OnStateChange:" + state)); mIsConnected = state; if (!state) { if ((mAccessControlEnforcer)!= null) { mAccessControlEnforcer.reset(); } } else { closeChannels(); try { initializeAccessControl(); } catch (java.lang.Exception e) { } synchronized(mLock) { mDefaultApplicationSelectedOnBasicChannel = true; } } }
public void save() { this.updated = newjava.util.Date(); ofy().defer().save().entity(this); }
@org.junit.After public void tearDown() throwsjava.lang.Exception { com.android.tradefed.util.FileUtil.recursiveDelete(mTmpDir); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { mTmpDir = com.android.tradefed.util.FileUtil.createTempDir("vts-unit-tests");java.io.File invDir = newjava.io.File(mTmpDir, "2017.09.01_17.30.00"); invDir.mkdirs(); com.android.tradefed.util.FileUtil.saveResourceFile(getClass().getResourceAsStream(RESULTS_FILE), invDir, "test_result.xml"); mBuildHelper = new com.android.compatibility.common.tradefed.build.CompatibilityBuildHelper(null) { @java.lang.Override publicjava.io.File getResultsDir() { return mTmpDir; } }; mHelper = new com.android.compatibility.common.tradefed.util.VtsRetryFilterHelper(mBuildHelper, 0, "SUB_PLAN", newjava.util.HashSet<java.lang.String>(), newjava.util.HashSet<java.lang.String>(), "ABI_NAME", "MODULE_NAME", "TEST_NAME", RetryType.FAILED); }
@java.lang.Override protected synchronized boolean start() { if (com.android.bluetooth.hfpclient.HeadsetClientService.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, "start()"); } if ((mNativeInterface) == null) { mNativeInterface = new com.android.bluetooth.hfpclient.NativeInterface(); mNativeInterface.initializeNative(); } mAudioManager = ((android.media.AudioManager) (getSystemService(Context.AUDIO_SERVICE))); mSmFactory = new com.android.bluetooth.hfpclient.HeadsetClientStateMachineFactory(); mStateMachineMap.clear(); android.content.IntentFilter filter = new android.content.IntentFilter(android.media.AudioManager.VOLUME_CHANGED_ACTION); try { registerReceiver(mBroadcastReceiver, filter); } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, "Failed to register broadcat receiver", e); } com.android.bluetooth.hfpclient.HeadsetClientService.setHeadsetClientService(this); android.content.Intent startIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.class); startService(startIntent); mSmThread = new android.os.HandlerThread("HeadsetClient.SM"); mSmThread.start(); return true; }
@java.lang.Override protected synchronized boolean stop() { try { unregisterReceiver(mBroadcastReceiver); } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, "Failed to unregister broadcast receiver", e); } for (java.util.Iterator<java.util.Map.Entry<android.bluetooth.BluetoothDevice, com.android.bluetooth.hfpclient.HeadsetClientStateMachine>> it = mStateMachineMap.entrySet().iterator(); it.hasNext();) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine sm = mStateMachineMap.get(((android.bluetooth.BluetoothDevice) (it.next().getKey()))); sm.doQuit(); it.remove(); } android.content.Intent stopIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.class); stopIntent.putExtra(com.android.bluetooth.hfpclient.HeadsetClientService.HFP_CLIENT_STOP_TAG, true); startService(stopIntent); mSmThread.quit(); mSmThread = null; if ((mNativeInterface)!= null) { mNativeInterface.cleanupNative(); mNativeInterface = null; } return true; }
@java.lang.Override protected void setUserUnlocked(int userId) { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "User unlocked, initializing the service"); if (!(android.os.SystemProperties.getBoolean(com.android.bluetooth.avrcp.AvrcpTargetService.AVRCP_ENABLE_PROPERTY, false))) { android.util.Log.w(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "Invalid initialization of the new AVRCP Target Player List"); com.android.bluetooth.avrcp.AvrcpTargetService.sInstance = null; return; } mMediaPlayerList.init(new com.android.bluetooth.avrcp.AvrcpTargetService.ListCallback()); }
@java.lang.Override protected boolean start() { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "Starting the AVRCP Target Service"); mCurrentData = new com.android.bluetooth.avrcp.MediaData(null, null, null); if (!(android.os.SystemProperties.getBoolean(com.android.bluetooth.avrcp.AvrcpTargetService.AVRCP_ENABLE_PROPERTY, false))) { android.util.Log.w(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "Error during initialization of the new AVRCP Target Service"); com.android.bluetooth.avrcp.AvrcpTargetService.sInstance = null; return true; } mReceiver = new com.android.bluetooth.avrcp.AvrcpTargetService.AvrcpBroadcastReceiver(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothA2dp.ACTION_ACTIVE_DEVICE_CHANGED); registerReceiver(mReceiver, filter); init(); com.android.bluetooth.avrcp.AvrcpTargetService.sInstance = this; return true; }
private void init() { if ((mMediaPlayerList)!= null) { android.util.Log.wtfStack(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "init() called before the service has already been initialized"); return; } mAudioManager = ((android.media.AudioManager) (getSystemService(Context.AUDIO_SERVICE))); com.android.bluetooth.avrcp.AvrcpTargetService.sDeviceMaxVolume = mAudioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC); mMediaPlayerList = new com.android.bluetooth.avrcp.MediaPlayerList(android.os.Looper.myLooper(), this); mNativeInterface = com.android.bluetooth.avrcp.AvrcpNativeInterface.getInterface(); mNativeInterface.init(this); }
private void createServerSession(java x.obex.ObexTransport transport) { mServerSession = new com.android.bluetooth.opp.BluetoothOppObexServerSession(this, transport, this); mServerSession.preStart(); if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, (("Creating ServerSession " + (mServerSession.toString())) + " for incoming connection ") + (transport.toString()))); } com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.OPP); }
@android.support.annotation.VisibleForTesting synchronized void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((((("connectionStateChanged unexpected invocation. device=" + device) + " fromState=") + fromState) + " toState=") + toState)); return; } if (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { setActiveDevice(device); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.HEARING_AID); } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (getConnectedDevices().isEmpty())) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ("device " + device) + " is unbond. Remove state machine")); } removeStateMachine(device); } } }
private void onConnectionStateChanged(android.bluetooth.BluetoothDevice device, int prevState, int state) { log(((((("onConnectionStateChanged state " + device) + "->") + prevState) + "->") + state)); }
private void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { return; } synchronized(mStateMachines) { if (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { updateOptionalCodecsSupport(device); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.A2DP); } if ((toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && ((mMaxConnectedAudioDevices) == 1)) { setActiveDevice(device); } if ((isActiveDevice(device)) && (fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { removeStateMachine(device); } } }
private synchronized void setState(int state, int result) { if (state!= (mState)) { if (com.android.bluetooth.sap.SapService.DEBUG) { android.util.Log.d(com.android.bluetooth.sap.SapService.TAG, (((("setState state " + (mState)) + " -> ") + state) + " result = ") + result)); } if (state == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.SAP); } int prevState = mState; mState = state; android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothSap.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, mState); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mRemoteDevice); sendBroadcast(intent, com.android.bluetooth.sap.BLUETOOTH_PERM); } }
private void onConnectionStateChanged(android.bluetooth.BluetoothDevice device, int prevState, int state) { if (device == null) { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientStateMachine.TAG, "onConnectionStateChanged with invalid device"); return; } if ((prevState!= state) && (state == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.PBAP_CLIENT); } android.util.Log.d(com.android.bluetooth.pbapclient.PbapClientStateMachine.TAG, (((("onConnectionStateChanged state " + device) + " ") + prevState) + "->") + state)); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothPbapClient.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }
@java.lang.Override public void enter() { try { startObexServerSession(); } catch (java.io.IOException ex) { android.util.Log.e(com.android.bluetooth.pbap.PbapStateMachine.TAG, ("Got exception starting OBEX server session " + (ex.toString()))); } broadcastStateTransitions(); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.PBAP); }
@java.lang.Override public void enter() { if (com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG, ("HEADSET_CLIENT Connected: " + (getCurrentMessage().what))); } mAudioWbs = false; mCommandedSpeakerVolume = -1; if ((mPrevState) == (mConnecting)) { broadcastConnectionState(mCurrentDevice, BluetoothProfile.STATE_CONNECTED, BluetoothProfile.STATE_CONNECTING); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.HEADSET_CLIENT); } else if ((mPrevState)!= (mAudioOn)) {java.lang.String prevStateName = ((mPrevState) == null)? "null" : mPrevState.getName(); android.util.Log.e(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG, (("Illegal state transition from " + prevStateName) + " to Connecting, mCurrentDevice=" + (mCurrentDevice))); } }
@java.lang.Override public boolean processMessage(android.os.Message msg) { if (com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.DBG) android.util.Log.d(com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.TAG, ("AvrcpController: HandleMessage: " + (com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.dumpMessageString(msg.what)))); switch (msg.what) { case com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.MESSAGE_PROCESS_CONNECTION_CHANGE : if ((msg.arg1) == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { mBrowseTree.init(); transitionTo(mConnected); android.bluetooth.BluetoothDevice rtDevice = ((android.bluetooth.BluetoothDevice) (msg.obj)); synchronized(mLock) { mRemoteDevice = new com.android.bluetooth.avrcpcontroller.RemoteDevice(rtDevice); mAddressedPlayer = new com.android.bluetooth.avrcpcontroller.AvrcpPlayer(); mIsConnected = true; } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothAvrcpController.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, BluetoothProfile.STATE_DISCONNECTED); intent.putExtra(BluetoothProfile.EXTRA_STATE, BluetoothProfile.STATE_CONNECTED); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, rtDevice); mContext.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); } break; default : android.util.Log.w(com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.TAG, ("AvrcpController: Disconnected not handling " + (com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.dumpMessageString(msg.what)))); return false; } return true; }
private void onConnectionStateChanged(int prevState, int state) { if ((mDevice) == null) { return; } if (com.android.bluetooth.mapclient.MceStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.mapclient.MceStateMachine.TAG, (((("onConnectionStateChanged state " + (mDevice)) + "->") + prevState) + "->") + state)); } if ((prevState!= state) && (state == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.MAP_CLIENT); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothMapClient.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mDevice); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }
private void setAndBroadcastConnectionState(android.bluetooth.BluetoothDevice device, int newState) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ((((("setAndBroadcastConnectionState: device=" + (device.getAddress())) + " oldState=") + (mHidDeviceState)) + " newState=") + newState)); } if (((mHidDevice)!= null) && (!(mHidDevice.equals(device)))) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, "setAndBroadcastConnectionState: state changed for unknown device, ignoring"); return; } int prevState = mHidDeviceState; mHidDeviceState = newState; if (prevState == newState) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, "setAndBroadcastConnectionState: state is unchanged, ignoring"); return; } if (newState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.HID_HOST); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHidDevice.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, newState); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); sendBroadcast(intent, com.android.bluetooth.hid.BLUETOOTH_PERM); }
private void updateAndSendIntent(android.bluetooth.BluetoothDevice device, int newDeviceState, int prevDeviceState) { if (newDeviceState == (android.bluetooth.BluetoothHealth.STATE_DISCONNECTED)) { mHealthDevices.remove(device); } else { mHealthDevices.put(device, newDeviceState); } if ((newDeviceState!= prevDeviceState) && (newDeviceState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.HEALTH); } }
void deviceConnected(java.lang.String bdaddr, boolean absoluteVolume) { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, (("deviceConnected: bdaddr=" + bdaddr) + " absoluteVolume=") + absoluteVolume)); mAudioManager.avrcpSupportsAbsoluteVolume(bdaddr, absoluteVolume); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.AVRCP); }
@com.android.internal.annotations.VisibleForTesting public void onConnectionStateChangedFromStateMachine(android.bluetooth.BluetoothDevice device, int fromState, int toState) { synchronized(mStateMachines) {java.util.List<android.bluetooth.BluetoothDevice> audioConnectableDevices = getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.CONNECTING_CONNECTED_STATES); if ((fromState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { if ((audioConnectableDevices.size()) > 1) { mInbandRingingRuntimeDisable = true; doForEachConnectedStateMachine(( stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.SEND_BSIR, 0)); } if ((mActiveDevice) == null) { setActiveDevice(device); } com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.HEADSET); } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (toState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { if ((audioConnectableDevices.size()) <= 1) { mInbandRingingRuntimeDisable = false; doForEachConnectedStateMachine(( stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.SEND_BSIR, 1)); } if (device.equals(mActiveDevice)) { setActiveDevice(null); } } } }
public static void logProfileConnectionEvent(com.android.bluetooth.BluetoothMetricsProto.BluetoothProfileId profileId) { synchronized(com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts) { com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts.merge(profileId, 1,java.lang.Integer::sum); } }
public static void dumpProto(com.android.bluetooth.BluetoothMetricsProto.BluetoothLog.Builder metricsBuilder) { synchronized(com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts) { com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts.forEach(( key, value) -> metricsBuilder.addProfileUsageStats(com.android.bluetooth.BluetoothMetricsProto.ProfileUsageStats.newBuilder().setProfileId(key).setNumTimesConnected(value).build())); com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts.clear(); } }
javajava.lang.String serialString() {java.lang.StringBuilder sb = newjava.lang.StringBuilder(8);java.lang.String sn; sn =java.lang.Integer.toString(mSerial); sb.append('['); for (int i = 0, s = sn.length(); i < (4 - s); i++) { sb.append('0'); } sb.append(sn); sb.append(']'); return sb.toString(); }
private boolean isRequired() { return (com.android.compatibility.common.util.PropertyUtil.getFirstApiLevel()) >= (android.security.cts.EncryptionTest.MIN_API_LEVEL); }
@java.lang.Override public synchronized void tearDown(com.android.tradefed.invoker.IInvocationContext context,java.lang.Throwable e) throws com.android.tradefed.device.DeviceNotAvailableException { if (((mVenvDir)!= null) && (mIsDirCreator)) { try { com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.recursiveDelete(mVenvDir.toPath()); com.android.tradefed.log.LogUtil.CLog.i("Removing the virtual env temp working dir, %s.", mVenvDir); } catch (java.io.IOException exception) { com.android.tradefed.log.LogUtil.CLog.e("Unable to delete %s: %s", mVenvDir, exception); } mVenvDir = null; } }
@java.lang.Override public synchronized void setUp(com.android.tradefed.invoker.IInvocationContext context) throws com.android.tradefed.device.DeviceNotAvailableException, com.android.tradefed.targetprep.BuildError, com.android.tradefed.targetprep.TargetSetupError { mBuildInfo = context.getBuildInfos().get(0); startVirtualenv(mBuildInfo); setLocalPypiPath(); installDeps(mBuildInfo); }
public android.net.apf.ApfGenerator addStoreData(android.net.apf.ApfGenerator.Register sourceRegister, int offset) throws android.net.apf.ApfGenerator.IllegalInstructionException { android.net.apf.ApfGenerator.Instruction instruction = new android.net.apf.ApfGenerator.Instruction(android.net.apf.ApfGenerator.Opcodes.STDW, sourceRegister); instruction.setUnsignedImm(offset); addInstruction(instruction); return this; }
public android.net.apf.ApfGenerator addLoadData(android.net.apf.ApfGenerator.Register destinationRegister, int offset) throws android.net.apf.ApfGenerator.IllegalInstructionException { android.net.apf.ApfGenerator.Instruction instruction = new android.net.apf.ApfGenerator.Instruction(android.net.apf.ApfGenerator.Opcodes.LDDW, destinationRegister); instruction.setUnsignedImm(offset); addInstruction(instruction); return this; }
@org.junit.Test public void testApfData() throws android.net.apf.ApfGenerator.IllegalInstructionException,java.lang.Exception { byte[] packet12345 = new byte[]{ 0, 1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0 }; byte[] expected_data = new byte[32]; android.net.apf.ApfGenerator gen = new android.net.apf.ApfGenerator(); assertDataMemoryContents(android.net.apf.ApfTest.PASS, gen, packet12345, expected_data, 0); gen = new android.net.apf.ApfGenerator(); gen.addLoadImmediate(Register.R0, 42); gen.addLoadImmediate(Register.R1, 2); gen.addStoreData(Register.R0, 3); expected_data[5] = 42; assertDataMemoryContents(android.net.apf.ApfTest.PASS, gen, packet12345, expected_data, 0); gen = new android.net.apf.ApfGenerator(); gen.addLoadImmediate(Register.R0, -2023406815); gen.addLoadImmediate(Register.R1, 2); gen.addStoreData(Register.R0, 3); expected_data[5] = 33; expected_data[6] = 67; expected_data[7] = 100; expected_data[8] = ((byte) (135)); assertDataMemoryContents(android.net.apf.ApfTest.PASS, gen, packet12345, expected_data, 0); }
private void assertDataMemoryContents(int expected, android.net.apf.ApfGenerator gen, byte[] packet, byte[] expected_data, int filterAge) throws android.net.apf.ApfGenerator.IllegalInstructionException,java.lang.Exception { byte[] data = new byte[expected_data.length]; byte[] program = gen.generate(); android.net.apf.ApfTest.assertReturnCodesEqual(expected, android.net.apf.ApfTest.apfSimulate(program, packet, data, filterAge)); if (!(java.util.Arrays.equals(expected_data, data))) { throw newjava.lang.Exception(((((("program: " + (com.android.internal.util.HexDump.toHexString(program))) + "\ndata memory: ") + (com.android.internal.util.HexDump.toHexString(data))) + "\nexpected: ") + (com.android.internal.util.HexDump.toHexString(expected_data)))); } }
public void dump(java.lang.StringBuilder sb) { sb.append(" AvrcpTargetService: "); if ((mMediaPlayerList)!= null) { mMediaPlayerList.dump(sb); } else { sb.append(" Player List is empty"); } mVolumeManager.dump(sb); sb.append("\n"); }
private void resetProxyAndRequestList() { mRadioProxy = null; mRadioProxyCookie.incrementAndGet(); setRadioState(RadioState.RADIO_UNAVAILABLE); com.android.internal.telephony.RILRequest.resetSerial(); clearRequestList(com.android.internal.telephony.RADIO_NOT_AVAILABLE, false); }
private void checkListenerPermission(int events) { if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_LOCATION))!= 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); } if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_INFO))!= 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); } if ((events & (com.android.server.TelephonyRegistry.ENFORCE_PHONE_STATE_PERMISSION_MASK))!= 0) { try { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, null); } catch (java.lang.SecurityException e) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PHONE_STATE, null); } } if ((events & (com.android.server.TelephonyRegistry.PRECISE_PHONE_STATE_PERMISSION_MASK))!= 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRECISE_PHONE_STATE, null); } if ((events & (android.telephony.PhoneStateListener.LISTEN_OEM_HOOK_RAW_EVENT))!= 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, null); } }
public void startLoop(long timestampNsecs) { loopStartTimesNsecs.add(timestampNsecs); }
public void end() throwsjava.io.IOException {java.io.File file = newjava.io.File((("/sdcard/benchmark-" + (appName)) + ".csv"));java.nio.file.Files.deleteIfExists(file.toPath()); try (java.io.Writer writer = newjava.io.BufferedWriter(newjava.io.FileWriter(file))) { for (java.lang.Long timestamp : loopStartTimesNsecs) { writer.append(timestamp.toString()); writer.append('\n'); } } }
public com.android.vts.entity.TestSuiteResultEntity.GROUP_TYPE getGroupType() { if ((this.getNormalizedVersion(this.buildSystemFingerprint)) == (this.getNormalizedVersion(this.buildVendorFingerprint))) { return com.android.vts.entity.TestSuiteResultEntity.GROUP_TYPE.OTA; } else if (this.buildVendorFingerprint.endsWith("release-keys")) { return com.android.vts.entity.TestSuiteResultEntity.GROUP_TYPE.SIGNED; } else { return com.android.vts.entity.TestSuiteResultEntity.GROUP_TYPE.TOT; } }
privatejava.lang.String getNormalizedVersion(java.lang.String fingerprint) {java.util.Map<java.lang.String,java.util.regex.Pattern> partternMap = newjava.util.HashMap<java.lang.String,java.util.regex.Pattern>() { { put("9",java.util.regex.Pattern.compile("(:9(\\.\\d\\.\\d|\\.\\d)|:P[A-Z]/)",java.util.regex.Pattern.CASE_INSENSITIVE)); put("8.1",java.util.regex.Pattern.compile("(:8\\.1\\.\\d\\/|:O[A-Z]-MR1/)",java.util.regex.Pattern.CASE_INSENSITIVE)); put("8",java.util.regex.Pattern.compile("(:8\\.0\\.\\d\\/|:O[A-Z]/)",java.util.regex.Pattern.CASE_INSENSITIVE)); } }; for (java.util.Map.Entry<java.lang.String,java.util.regex.Pattern> entry : partternMap.entrySet()) {java.util.regex.Matcher systemMatcher = entry.getValue().matcher(fingerprint); if (systemMatcher.find()) { return entry.getKey(); } } return "unknown-version-" + (java.time.Instant.now().toEpochMilli()); }
android.test.suitebuilder.annotation.MediumTest public void testWindowDockAndUndock_dividerWindowAppearsAndDisappears() throwsjava.lang.Exception { android.app.ActivityManager mactivityManager = ((android.app.ActivityManager) (getInstrumentation().getContext().getSystemService(Context.ACTIVITY_SERVICE))); if (getInstrumentation().getContext().getPackageManager().hasSystemFeature(PackageManager.FEATURE_LEANBACK)) { return; } try { if (!(getInstrumentation().getContext().getResources().getBoolean(android.content.res.Resources.getSystem().getIdentifier("config_supportsSplitScreenMultiWindow", "bool", "android")))) { return; } } catch (android.content.res.Resources e) { } if (!(getInstrumentation().getContext().getResources().getBoolean(android.content.res.Resources.getSystem().getIdentifier("config_supportsMultiWindow", "bool", "android")))) { return; } setAccessInteractiveWindowsFlag(); final android.app.UiAutomation uiAutomation = getInstrumentation().getUiAutomation(); assertFalse(isDividerWindowPresent(uiAutomation));java.lang.Runnable toggleSplitScreenRunnable = newjava.lang.Runnable() { @java.lang.Override public void run() { assertTrue(uiAutomation.performGlobalAction(AccessibilityService.GLOBAL_ACTION_TOGGLE_SPLIT_SCREEN)); } }; android.app.UiAutomation.AccessibilityEventFilter windowsChangedFilter = new android.app.UiAutomation.AccessibilityEventFilter() { @java.lang.Override public boolean accept(android.view.accessibility.AccessibilityEvent event) { return (event.getEventType()) == (android.view.accessibility.AccessibilityEvent.TYPE_WINDOWS_CHANGED); } }; uiAutomation.executeAndWaitForEvent(toggleSplitScreenRunnable, windowsChangedFilter, android.accessibilityservice.cts.TIMEOUT_ASYNC_PROCESSING); waitForIdle(); assertTrue(isDividerWindowPresent(uiAutomation)); uiAutomation.executeAndWaitForEvent(toggleSplitScreenRunnable, windowsChangedFilter, android.accessibilityservice.cts.NC_ASYNC_PROCESSING); waitForIdle(); assertFalse(isDividerWindowPresent(uiAutomation)); }
@org.junit.Test public void testImmediateEncoding() throws android.net.apf.ApfGenerator.IllegalInstructionException { final int LI_OPCODE = 13 << 3; android.net.apf.ApfGenerator gen; gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, 0); assertProgramEquals(new byte[]{ LI_OPCODE | (0 << 1) }, gen.generate()); gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, 42); assertProgramEquals(new byte[]{ LI_OPCODE | (1 << 1), 42 }, gen.generate()); gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, 4660); assertProgramEquals(new byte[]{ LI_OPCODE | (2 << 1), 18, 52 }, gen.generate()); gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, 305419896); assertProgramEquals(new byte[]{ LI_OPCODE | (3 << 1), 18, 52, 86, 120 }, gen.generate()); }
@org.junit.Test public void testNegativeImmediateEncoding() throws android.net.apf.ApfGenerator.IllegalInstructionException { final int LI_OPCODE = 13 << 3; android.net.apf.ApfGenerator gen; gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, (-42)); assertProgramEquals(new byte[]{ LI_OPCODE | (1 << 1), -42 }, gen.generate()); gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, (-4386)); assertProgramEquals(new byte[]{ LI_OPCODE | (2 << 1), ((byte) (238)), ((byte) (222)) }, gen.generate()); gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, (-287454020)); assertProgramEquals(new byte[]{ LI_OPCODE | (3 << 1), ((byte) (238)), ((byte) (221)), ((byte) (204)), ((byte) (188)) }, gen.generate()); }
@java.lang.Override public void doGetHandler(java x.servlet.http.HttpServletRequest request,java x.servlet.http.HttpServletResponse response) throwsjava.io.IOException { if ((keyFileInputStream) == null) { request.setAttribute("error_title", "Missing Key file Error"); request.setAttribute("error_message", "GCS Key file is not existed!");java x.servlet.RequestDispatcher dispatcher = request.getRequestDispatcher(com.android.vts.servlet.ERROR_MESSAGE_JSP); try { dispatcher.forward(request, response); } catch (java x.servlet.ServletException e) { logger.log(java.util.logging.Level.SEVERE, "Error: Excpetion caught", e); } } else {java.lang.String pathInfo = request.getPathInfo();java.lang.String[] pathParts = pathInfo.split("/"); if ((pathParts.length) > 1) {java.lang.String testType = pathParts[0]; if (testType.equalsIgnoreCase("download")) { downloadHandler(request, response); } else { logger.log(java.util.logging.Level.WARNING, "Invalid path access!"); } } else { defaultHandler(request, response); } } }
@java.lang.Override public void call(org.chromium.mojo.bindings.interfacecontrol.RunResponseMessageParams response) { if (((response.output)!= null) && ((response.output.which()) == (RunOutput.Tag.QueryVersionResult))) { mVersion = response.output.getQueryVersionResult().version; } callback.call(mVersion); }
@java.lang.Override public void queryVersion(final org.chromium.mojo.bindings.Callbacks.Callback1<java.lang.Integer> callback) { RunMessageParams message = new RunMessageParams(); message.input = new org.chromium.mojo.bindings.interfacecontrol.RunInput(); message.input.setQueryVersion(new QueryVersion()); org.chromium.mojo.bindings.InterfaceControlMessagesHelper.sendRunMessage(getCore(), mMessageReceiver, message, new org.chromium.mojo.bindings.Callbacks.Callback1<org.chromium.mojo.bindings.interfacecontrol.RunResponseMessageParams>() { @java.lang.Override public void call(org.chromium.mojo.bindings.interfacecontrol.RunResponseMessageParams response) { if (((response.output)!= null) && ((response.output.which()) == (RunOutput.Tag.QueryVersionResult))) { mVersion = response.output.getQueryVersionResult().version; } callback.call(mVersion); } }); }
@java.lang.Override public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver responder) { org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage(); assert messageWithHeader.getHeader().hasFlag(MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG); long requestId = (mNextRequestId)++; if (requestId == 0) { requestId = (mNextRequestId)++; } if (mResponders.containsKey(requestId)) { throw newjava.lang.IllegalStateException("Failed to find a new request identifier."); } messageWithHeader.setRequestId(requestId); if (!(mConnector.accept(messageWithHeader))) { return false; } mResponders.put(requestId, responder); return true; }
private boolean handleIncomingMessage(org.chromium.mojo.bindings.Message message) { org.chromium.mojo.bindings.MessageHeader header = message.asServiceMessage().getHeader(); if (header.hasFlag(MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) { if ((mIncomingMessageReceiver)!= null) { return mIncomingMessageReceiver.acceptWithResponder(message, new org.chromium.mojo.bindings.RouterImpl.ResponderThunk()); } close(); return false; } else if (header.hasFlag(MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) { long requestId = header.getRequestId(); org.chromium.mojo.bindings.MessageReceiver responder = mResponders.get(requestId); if (responder == null) { return false; } mResponders.remove(requestId); return responder.accept(message); } else { if ((mIncomingMessageReceiver)!= null) { return mIncomingMessageReceiver.accept(message); } } return false; }
@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { for (com.android.graphics.benchmark.ApkInfo apk : mApks) { getDevice().installPackage(newjava.io.File(mApkDir, apk.getFileName()), true); com.android.ddmlib.testrunner.TestIdentifier identifier = new com.android.ddmlib.testrunner.TestIdentifier(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, (("run[" + (apk.name())) + "]"));java.util.Map<java.lang.String,java.lang.String> metrics = newjava.util.HashMap<>(); listener.testStarted(identifier); runDeviceTests(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, (("run[" + (apk.name())) + "]")); listener.testEnded(identifier, metrics); } }
private com.android.tradefed.util.IRunUtil createMockRunUtil() { com.android.tradefed.util.IRunUtil runUtil = new com.android.tradefed.util.RunUtil() { privatejava.lang.String path = null; @java.lang.Override public void setEnvVariable(java.lang.String key,java.lang.String value) { super.setEnvVariable(key, value); if (key.equals("PATH")) { path = value; } } @java.lang.Override public com.android.tradefed.util.CommandResult runTimedCmd(final long timeout, finaljava.lang.String... command) { com.android.tradefed.util.CommandResult cmdRes = new com.android.tradefed.util.CommandResult(com.android.tradefed.util.CommandStatus.SUCCESS);java.lang.String out = ""; if ((((command.length) == 2) && (command[0].equals("which"))) && (command[1].equals(" "))) { if ((path)!= null) { out = (path) + "/ "; } else { out = "/usr/bin/ "; } } cmdRes.setStdout(out); return cmdRes; } }; return runUtil; }
@org.junit.Before public void setUp() throwsjava.lang.Exception { com.android.tradefed.build.IFolderBuildInfo buildInfo = org.easymock.EasyMock.createNiceMock(com.android.tradefed.build.IFolderBuildInfo.class); org.easymock.EasyMock.replay(buildInfo); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(newjava.io.File(mVirtualenvPath)), new com.android.tradefed.util.ProcessHelper.Starter() { @java.lang.Override protected com.android.tradefed.util.ProcessHelper startProcessHelper(java.lang.String[] cmd) { return mProcessHelper; } }; }
protected com.android.tradefed.util.ProcessHelper startProcessHelper(java.lang.String[] cmd) throwsjava.io.IOException { return new com.android.tradefed.util.ProcessHelper(mRunUtil.runCmdInBackground(cmd)); }
public staticjava.lang.String getPythonBinDir(java.lang.String virtualenvPath) { if (virtualenvPath == null) { return null; }java.lang.String binDirName = (com.android.tradefed.util.VtsPythonRunnerHelper.isOnWindows())? "Scripts" : "bin";java.io.File res = newjava.io.File(virtualenvPath, binDirName); if (!(res.exists())) { return null; } return res.getAbsolutePath(); }
javajavajava publicjava.lang.String runPythonRunner(java.lang.String[] cmd, com.android.tradefed.util.CommandResult commandResult, long timeout) { com.android.tradefed.util.ProcessHelper process; try { process = startProcessHelper(cmd); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(e); commandResult.setStatus(CommandStatus.EXCEPTION); commandResult.setStdout(""); commandResult.setStderr(""); return null; }java.lang.String interruptMessage; try { com.android.tradefed.util.CommandStatus commandStatus; try { commandStatus = process.waitForProcess(timeout); interruptMessage = null; } catch (com.android.tradefed.util.RunInterruptedException e) { com.android.tradefed.log.LogUtil.CLog.e("Process process is interrupted."); commandStatus = com.android.tradefed.util.CommandStatus.TIMED_OUT; interruptMessage = ((e.getMessage())!= null)? e.getMessage() : ""; } if (process.isRunning()) { com.android.tradefed.log.LogUtil.CLog.e("Closing Python process and wait %d seconds.", ((com.android.tradefed.util.VtsPythonRunnerHelper.TEST_ABORT_TIMEOUT_MSECS) / 1000)); try { process.closeStdin(); process.waitForProcess(com.android.tradefed.util.VtsPythonRunnerHelper.TEST_ABORT_TIMEOUT_MSECS); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e("Failed to cancel Python process."); } } commandResult.setStatus(commandStatus); } finally { process.cleanUp(); } commandResult.setStdout(process.getStdout()); commandResult.setStderr(process.getStderr()); return interruptMessage; }
@java.lang.Override public com.android.tradefed.util.CommandResult runTimedCmd(final long timeout, finaljava.lang.String... command) { com.android.tradefed.util.CommandResult cmdRes = new com.android.tradefed.util.CommandResult(com.android.tradefed.util.CommandStatus.SUCCESS);java.lang.String out = ""; if ((((command.length) == 2) && (command[0].equals("which"))) && (command[1].equals("bin/bash")) { if ((path)!= null) { out = (path) + "/ "; } else { out = "/usr/bin/ "; } } cmdRes.setStdout(out); return cmdRes; }
@java.lang.Override protected com.android.tradefed.util.ProcessHelper startProcessHelper(java.lang.String[] cmd) { return mProcessHelper; }
public static void activateVirtualenv(com.android.tradefed.util.IRunUtil runUtil,java.lang.String virtualenvPath) {java.lang.String BinDir = com.android.tradefed.util.VtsPythonRunnerHelper.getPythonBinDir(virtualenvPath); if ((java BinDir == null) || (!(newjava.io.File(BinDir).exists()))) { com.android.tradefed.log.LogUtil.CLog.e("Invalid virtualenv path. Using from system path."); } else { runUtil.setEnvVariable(com.android.tradefed.util.VtsPythonRunnerHelper.PATH,java.lang.String.valueOf(binDir)); runUtil.setEnvVariable(com.android.tradefed.util.VtsPythonRunnerHelper.VIRTUALENVPATH, virtualenvPath); } }
@org.junit.Test public void testActivateVirtualEnvExist() { com.android.tradefed.util.IRunUtil runUtil = createMockRunUtil();java.lang.String binDirName = (com.android.tradefed.util.VtsPythonRunnerHelper.isOnWindows())? "Scripts" : "bin";java.io.File envDir = newjava.io.File(mVirtualenvPath);java.io.File binDir = newjava.io.File(mVirtualenvPath, binDirName); try {java.lang.System.out.println(envDir.mkdir());java.lang.System.out.println(binDir.mkdir());java.lang.System.out.println(binDir.exists()); assertEquals(binDir.getAbsolutePath(), com.android.tradefed.util.VtsPythonRunnerHelper.getPythonBinDir(mVirtualenvPath)); com.android.tradefed.util.VtsPythonRunnerHelper.activateVirtualenv(runUtil, mVirtualenvPath);java.lang.Stringjava Binary = runUtil.runTimedCmd(1000, "which", " ").getStdout(); assertEquals("Hello, " +java Binary, newjava Binary); } finally { binDir.delete(); envDir.delete(); } }
private boolean dirExistsAndHaveReadAccess(java.lang.String path) {java.io.File pathDir = newjava.io.File(path); if ((!(pathDir.exists())) || (!(pathDir.isDirectory()))) { com.android.tradefed.log.LogUtil.CLog.i("dir %s does not exist.", pathDir); return false; } if (!(com.android.tradefed.util.VtsPythonRunnerHelper.isOnWindows())) { com.android.tradefed.util.CommandResult c = getRunUtil().runTimedCmd(((com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.BASE_TIMEOUT) * 5), "ls", path); if ((c.getStatus())!= (com.android.tradefed.util.CommandStatus.SUCCESS)) { com.android.tradefed.log.LogUtil.CLog.i(java.lang.String.format("Failed to read dir: %s. Result %s. stdout: %s, stderr: %s", path, c.getStatus(), c.getStdout(), c.getStderr())); return false; } return true; } else { try {java.lang.String[] pathDirList = pathDir.list(); if (pathDirList == null) { com.android.tradefed.log.LogUtil.CLog.i("Failed to read dir: %s. Please check access permission.", pathDir); return false; } } catch (java.lang.SecurityException e) { com.android.tradefed.log.LogUtil.CLog.i(java.lang.String.format("Failed to read dir %s with SecurityException %s", pathDir, e)); return false; } return true; } }
protected com.android.tradefed.util.VtsPythonRunnerHelper createVtsPythonRunnerHelper() { return new com.android.tradefed.util.VtsPythonRunnerHelper(mBuildInfo.getFile(com.android.tradefed.testtype.VtsMultiDeviceTest.VIRTUALENVPATH)); }
protected void addPathToBuild(com.android.tradefed.build.IBuildInfo buildInfo) { if ((buildInfo.getFile(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.VIRTUALENVPATH)) == null) { buildInfo.setFile(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.VIRTUALENVPATH, newjava.io.File(mVenvDir.getAbsolutePath()), buildInfo.getBuildId()); } }
@org.junit.Test public void testConnectAPair_connectBothDevices() { mService.setPriority(mLeftDevice, BluetoothProfile.PRIORITY_ON); mService.setPriority(mRightDevice, BluetoothProfile.PRIORITY_ON); doReturn(true).when(mNativeInterface).connectHearingAid(any(android.bluetooth.BluetoothDevice.class)); doReturn(true).when(mNativeInterface).disconnectHearingAid(any(android.bluetooth.BluetoothDevice.class)); org.junit.Assert.assertTrue("Connect failed", mService.connect(mLeftDevice)); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, mService.getConnectionState(mLeftDevice)); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, mService.getConnectionState(mRightDevice)); }
@java.lang.Override publicjava.util.Collection<com.android.tradefed.testtype.IRemoteTest> split(int shardCountHint) { try { initApkList(); } catch (java.lang.Exception e) { throw newjava.lang.RuntimeException(e); }java.util.List<com.android.tradefed.testtype.IRemoteTest> shards = newjava.util.ArrayList<>(); for (int i = 0; i < shardCountHint; i++) { if (i >= (mApks.size())) { break; }java.util.List<com.android.graphics.benchmark.ApkInfo> apkInfo = newjava.util.ArrayList<>(); for (int j = i; j < (mApks.size()); j += shardCountHint) { apkInfo.add(mApks.get(j)); } com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController shard = new com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController(); shard.mApks = apkInfo; shard.mApkDir = mApkDir; shards.add(shard); } return shards; }
@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { getDevice().pushFile(mApkInfoFile, ApkInfo.APK_LIST_LOCATION); for (com.android.graphics.benchmark.ApkInfo apk : mApks) { getDevice().installPackage(newjava.io.File(mApkDir, apk.getFileName()), true); runDeviceTests(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, (("run[" + (apk.getName())) + "]")); } }
private void initApkList() throwsjava.io.IOException,java x.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException { if ((mApks)!= null) { return; } if ((mApkInfoFileName)!= null) { mApkInfoFile = newjava.io.File(mApkInfoFileName); } else {java.lang.String resource = "/com/android/graphics/benchmark/apk-info.xml";java.io.InputStream inputStream = com.android.graphics.benchmark.ApkInfo.class.getResourceAsStream(resource); if (inputStream == null) { throw newjava.io.FileNotFoundException(("Unable to find resource: " + resource)); } mApkInfoFile =java.io.File.createTempFile("apk-info", ".xml"); try (java.io.OutputStream ostream = newjava.io.FileOutputStream(mApkInfoFile)) { com.google.common.io.ByteStreams.copy(inputStream, ostream); } mApkInfoFile.deleteOnExit(); } com.android.graphics.benchmark.ApkListXmlParser parser = new com.android.graphics.benchmark.ApkListXmlParser(mApkInfoFile); mApks = parser.parse(); }
publicjava.util.List<com.android.graphics.benchmark.ApkInfo> parse() throwsjava.io.IOException,java x.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException {java x.xml.parsers.DocumentBuilderFactory dbf =java x.xml.parsers.DocumentBuilderFactory.newInstance();java x.xml.parsers.DocumentBuilder db = dbf.newDocumentBuilder(); org.w3c.dom.Document doc = db.parse(mFile); org.w3c.dom.NodeList nodes = doc.getElementsByTagName("apk");java.util.List<com.android.graphics.benchmark.ApkInfo> apks = newjava.util.ArrayList<>(); for (int i = 0; i < (nodes.getLength()); i++) { org.w3c.dom.Node node = nodes.item(i); if ((node.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) { org.w3c.dom.Element element = ((org.w3c.dom.Element) (node)); apks.add(new com.android.graphics.benchmark.ApkInfo(element.getElementsByTagName("name").item(0).getTextContent(), element.getElementsByTagName("fileName").item(0).getTextContent(), element.getElementsByTagName("packageName").item(0).getTextContent())); } } return apks; }
protected void setUp() throwsjava.lang.Exception { super.setUp(); mCM = ((android.net.ConnectivityManager) (getContext().getSystemService(Context.CONNECTIVITY_SERVICE))); mBpfActive = newjava.io.File("/sys/fs/bpf").exists(); }
private void checkStatsChecker(int protocol, int ipHdrLen, int transportHdrLen, int udpEncapLen, int sendCount, int ivLen, int blkSize, int truncLenBits) throwsjava.lang.Exception { int innerPacketSize = ((TEST_DATA.length) + transportHdrLen) + ipHdrLen; int outerPacketSize = ((calculateEspPacketSize(((TEST_DATA.length) + transportHdrLen), ivLen, blkSize, truncLenBits)) + udpEncapLen) + ipHdrLen; int expectedOuterBytes = outerPacketSize * sendCount; int expectedInnerBytes = innerPacketSize * sendCount; int expectedPackets = sendCount; sendCount *= 2; expectedOuterBytes *= 2; expectedInnerBytes *= 2; expectedPackets *= 2; if (protocol == (IPPROTO_TCP)) { int encryptedTcpPktSize = calculateEspPacketSize(android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS, ivLen, blkSize, truncLenBits); expectedOuterBytes += ((encryptedTcpPktSize + udpEncapLen) + ipHdrLen) * sendCount; expectedInnerBytes += ((android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS) + ipHdrLen) * sendCount; expectedPackets += sendCount; } android.net.cts.IpSecManagerTest.StatsChecker.waitForNumPackets(expectedPackets); if (udpEncapLen!= 0) { int expectedRxBytes = (mBpfActive)? expectedInnerBytes : expectedOuterBytes; android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedRxBytes, expectedPackets); } else { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedInnerBytes, expectedPackets); } if (sendCount >= 1000) { android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedOuterBytes, expectedPackets, expectedInnerBytes, expectedPackets); } }
private void initApks() { if ((mApks)!= null) { return; } if ((mApkInfoFileName)!= null) { mApkInfoFile = newjava.io.File(mApkInfoFileName); } else {java.lang.String resource = "/com/android/graphics/benchmark/apk-info.xml"; try (java.io.InputStream inputStream = com.android.graphics.benchmark.ApkInfo.class.getResourceAsStream(resource)) { if (inputStream == null) { throw newjava.io.FileNotFoundException(("Unable to find resource: " + resource)); } mApkInfoFile =java.io.File.createTempFile("apk-info", ".xml"); try (java.io.OutputStream ostream = newjava.io.FileOutputStream(mApkInfoFile)) { com.google.common.io.ByteStreams.copy(inputStream, ostream); } mApkInfoFile.deleteOnExit(); } catch (java.io.IOException e) { throw newjava.lang.RuntimeException(e); } } com.android.graphics.benchmark.ApkListXmlParser parser = new com.android.graphics.benchmark.ApkListXmlParser(); try { mApks = parser.parse(mApkInfoFile); } catch (java.lang.Exception e) { throw newjava.lang.RuntimeException(e); } }
@org.junit.Test public void testArguments() throwsjava.io.IOException,java x.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException { try (java.io.InputStream input = newjava.io.ByteArrayInputStream(("<?xml version=\"1.0\"?>\n" + (((((((((("<apk-info>\n" + " <apk>\n") + " <name>foo</name>\n") + " <fileName>foo.apk</fileName>\n") + " <packageName>com.foo.test</packageName>\n") + " <args>\n") + " <key1>value1</key1>") + " <key2>value2</key2>") + " </args>\n") + " </apk>\n") + "</apk-info>\n")).getBytes())) {java.util.List<com.android.graphics.benchmark.ApkInfo> apks = parser.parse(input); assertEquals(1, apks.size()); com.android.graphics.benchmark.ApkInfo apk = apks.get(0); assertEquals("foo", apk.getName()); assertEquals("foo.apk", apk.getFileName()); assertEquals("com.foo.test", apk.getPackageName());java.util.List<com.android.graphics.benchmark.ApkInfo.Argument> args = apk.getArgs(); assertEquals("key1", args.get(0).getKey()); assertEquals("value1", args.get(0).getValue()); assertEquals("key2", args.get(1).getKey()); assertEquals("value2", args.get(1).getValue()); } }
@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public boolean okToConnect(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("okToConnect cannot connect to " + device) + " : quiet mode enabled")); return false; } if (!(connectionAllowedCheckMaxDevices(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("okToConnect cannot connect to " + device) + " : too many connected devices")); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); boolean isSdpPending = (priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && ((bondState == (android.bluetooth.BluetoothDevice.BOND_BONDING)) || (bondState == (android.bluetooth.BluetoothDevice.BOND_BONDED))); if ((isSdpPending) && (priority!= (android.bluetooth.BluetoothProfile.PRIORITY_ON))) { android.util.Log.w(com.android.bluetooth.a2dp.A2dpService.TAG, (("okToConnect return false, priority=" + priority) + " bondState=") + bondState)); return false; } return true; }
public boolean okToAcceptConnection(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "okToAcceptConnection: return false as quiet mode enabled"); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); boolean isSdpPending = (priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && ((bondState == (android.bluetooth.BluetoothDevice.BOND_BONDING)) || (bondState == (android.bluetooth.BluetoothDevice.BOND_BONDED))); if ((isSdpPending) && (priority!= (android.bluetooth.BluetoothProfile.PRIORITY_AUTO_CONNECT))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (("okToAcceptConnection: return false, priority=" + priority) + " bondState=") + bondState)); return false; }java.util.List<android.bluetooth.BluetoothDevice> connectingConnectedDevices = getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.CONNECTING_CONNECTED_STATES); if ((connectingConnectedDevices.size()) >= (mMaxHeadsetConnections)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (("Maximum number of connections " + (mMaxHeadsetConnections)) + " was reached, rejecting connection from " + device)); return false; } return true; }
@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public boolean okToConnect(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (("okToConnect cannot connect to " + device) + " : quiet mode enabled")); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); boolean isSdpPending = (priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && ((bondState == (android.bluetooth.BluetoothDevice.BOND_BONDING)) || (bondState == (android.bluetooth.BluetoothDevice.BOND_BONDED))); if ((isSdpPending) && (priority!= (android.bluetooth.BluetoothProfile.PRIORITY_ON))) { android.util.Log.w(com.android.bluetooth.hearingaid.HearingAidService.TAG, (((("okToConnect return false, priority=" + priority) + " bondState=") + bondState)); return false; } return true; }
public void run() { final android.net.Network network = android.net.dns.ResolvUtil.makeNetworkWithPrivateDnsBypass(mNetwork); try {java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException e) { } if ((isFinishing()) || (isDestroyed())) return;java.net.HttpURLConnection urlConnection = null; int httpResponseCode = 500; int oldTag = android.net.TrafficStats.getAndSetThreadStatsTag(TrafficStats.TAG_SYSTEM_PROBE); try { urlConnection = ((java.net.HttpURLConnection) (network.openConnection(newjava.net.URL(mCm.getCaptivePortalServerUrl())))); urlConnection.setInstanceFollowRedirects(false); urlConnection.setConnectTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setReadTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setUseCaches(false); urlConnection.getInputStream(); httpResponseCode = urlConnection.getResponseCode(); } catch (java.io.IOException e) { com.android.carrierdefaultapp.CaptivePortalLoginActivity.loge(e.getMessage()); } finally { if (urlConnection!= null) urlConnection.disconnect(); android.net.TrafficStats.setThreadStatsTag(oldTag); } if (httpResponseCode == 204) { done(true); } }
@java.lang.Override public void onAvailable(android.net.Network network) { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd(("onAvailable: " + network)); mCm.bindProcessToNetwork(network); mCm.setProcessDefaultNetworkForHostResolution(android.net.dns.ResolvUtil.getNetworkWithUseLocalNameserversFlag(network)); mNetwork = network; runOnUiThreadIfNotFinishing(() -> { if (mReload) { mWebView.reload(); } else { mWebView.loadData("", "text/html", null); } }); }
private void testForCaptivePortal() { mTestingThread = newjava.lang.Thread(newjava.lang.Runnable() { public void run() { final android.net.Network network = android.net.dns.ResolvUtil.makeNetworkWithPrivateDnsBypass(mNetwork); try {java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException e) { } if ((isFinishing()) || (isDestroyed())) return;java.net.HttpURLConnection urlConnection = null; int httpResponseCode = 500; int oldTag = android.net.TrafficStats.getAndSetThreadStatsTag(TrafficStats.TAG_SYSTEM_PROBE); try { urlConnection = ((java.net.HttpURLConnection) (network.openConnection(newjava.net.URL(mCm.getCaptivePortalServerUrl())))); urlConnection.setInstanceFollowRedirects(false); urlConnection.setConnectTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setReadTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setUseCaches(false); urlConnection.getInputStream(); httpResponseCode = urlConnection.getResponseCode(); } catch (java.io.IOException e) { com.android.carrierdefaultapp.CaptivePortalLoginActivity.loge(e.getMessage()); } finally { if (urlConnection!= null) urlConnection.disconnect(); android.net.TrafficStats.setThreadStatsTag(oldTag); } if (httpResponseCode == 204) { done(true); } } }); mTestingThread.start(); }
private void requestNetworkForCaptivePortal() { android.net.NetworkRequest request = new android.net.NetworkRequest.Builder().addTransportType(NetworkCapabilities.TRANSPORT_CELLULAR).addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET).removeCapability(NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED).build(); mNetworkCallback = new android.net.ConnectivityManager.NetworkCallback() { @java.lang.Override public void onAvailable(android.net.Network network) { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd(("requestNetworkForCaptivePortal: available: " + network)); mCm.bindProcessToNetwork(network); mCm.setProcessDefaultNetworkForHostResolution(android.net.dns.ResolvUtil.getNetworkWithUseLocalNameserversFlag(network)); mNetwork = network; runOnUiThreadIfNotFinishing(() -> { if (mReload) { mWebView.reload(); } else { mWebView.loadData("", "text/html", null); } }); } @java.lang.Override public void onUnavailable() { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd("requestNetworkForCaptivePortal: unavailable"); runOnUiThreadIfNotFinishing(() -> { mWebView.loadUrl(mUrl.toString()); }); } @java.lang.Override public void onLost(android.net.Network lostNetwork) { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd("requestNetworkForCaptivePortal: lost"); mReload = true; } }; com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd("Requesting Network for captive portal"); mCm.requestNetwork(request, mNetworkCallback, com.android.carrierdefaultapp.CaptivePortalLoginActivity.NETWORK_REQUEST_TIMEOUT_MS); }
public void testAllocateDirect() { try {java.nio.ByteBuffer.allocateDirect((-1)); fail(); } catch (java.lang.IllegalArgumentException expected) { } checkAllocateDirect(0); checkAllocateDirect(1); checkAllocateDirect(2); checkAllocateDirect((1 << 20)); checkAllocateDirect(1234567); }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED.equals(intent.getAction())) { try { android.bluetooth.BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); org.junit.Assert.assertNotNull(device);java.util.concurrent.BlockingQueue<android.content.Intent> queue = mDeviceQueueMap.get(device); org.junit.Assert.assertNotNull(queue); queue.put(intent); } catch (java.lang.InterruptedException e) { org.junit.Assert.fail(("Could not add Intent to the Connection State queue: " + (e.getMessage()))); } } }
private android.content.Intent waitForNoIntent(int timeoutMs,java.util.concurrent.BlockingQueue<android.content.Intent> queue) { try { android.content.Intent intent = queue.poll(timeoutMs,java.util.concurrent.TimeUnit.MILLISECONDS); org.junit.Assert.assertNull(intent); return intent; } catch (java.lang.InterruptedException e) { org.junit.Assert.fail(("Couldn't obtain an Intent from the queue: " + (e.getMessage()))); } return null; }
private android.content.Intent waitForIntent(int timeoutMs,java.util.concurrent.BlockingQueue<android.content.Intent> queue) { try { android.content.Intent intent = queue.poll(timeoutMs,java.util.concurrent.TimeUnit.MILLISECONDS); org.junit.Assert.assertNotNull(intent); return intent; } catch (java.lang.InterruptedException e) { org.junit.Assert.fail(("Couldn't obtain an Intent from the queue: " + (e.getMessage()))); } return null; }
@org.junit.Test public void a2dpActiveDeviceSelected_setActive() { a2dpConnected(mA2dpDevice); verify(mA2dpService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpDevice); a2dpConnected(mA2dpHeadsetDevice); verify(mA2dpService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpHeadsetDevice); a2dpActiveDeviceChanged(mA2dpDevice); verify(mA2dpService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpDevice); }
@org.junit.Test public void headsetActiveDeviceSelected_setActive() { headsetConnected(mHeadsetDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mHeadsetDevice); headsetConnected(mA2dpHeadsetDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpHeadsetDevice); headsetActiveDeviceChanged(mHeadsetDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mHeadsetDevice); }
@org.junit.Test public void hearingAidActive_clearA2dpAndHeadsetActive() { a2dpConnected(mA2dpHeadsetDevice); headsetConnected(mA2dpHeadsetDevice); verify(mA2dpService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpHeadsetDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpHeadsetDevice); hearingAidActiveDeviceChanged(mHearingAidDevice); verify(mA2dpService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(isNull()); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(isNull()); }
@org.junit.Test public void hearingAidActive_dontSetA2dpAndHeadsetActive() { hearingAidActiveDeviceChanged(mHearingAidDevice); a2dpConnected(mA2dpHeadsetDevice); headsetConnected(mA2dpHeadsetDevice); verify(mA2dpService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS).times(0)).setActiveDevice(mA2dpHeadsetDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS).times(0)).setActiveDevice(mA2dpHeadsetDevice); }
@org.junit.After public void tearDown() throwsjava.lang.Exception { if (((!(mContext.getResources().getBoolean(R.bool.profile_supported_hearing_aid))) || (!(mContext.getResources().getBoolean(R.bool.profile_supported_hs_hfp)))) || (!(mContext.getResources().getBoolean(R.bool.profile_supported_a2dp)))) { return; } mActiveDeviceManager.cleanup(); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); reset(mA2dpService); reset(mHeadsetService); reset(mHearingAidService); }
@org.junit.Test public void hearingAidActive_setA2dpActiveExplicitly() { hearingAidActiveDeviceChanged(mHearingAidDevice); a2dpConnected(mA2dpHeadsetDevice); a2dpActiveDeviceChanged(mA2dpHeadsetDevice); verify(mA2dpService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpHeadsetDevice); }
@org.junit.Test public void hearingAidActive_setHeadsetActiveExplicitly() { hearingAidActiveDeviceChanged(mHearingAidDevice); headsetConnected(mA2dpHeadsetDevice); headsetActiveDeviceChanged(mA2dpHeadsetDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpHeadsetDevice); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { mContext = android.support.test.InstrumentationRegistry.getTargetContext(); org.junit.Assume.assumeTrue("Ignore test when A2dpService is not enabled", mContext.getResources().getBoolean(R.bool.profile_supported_a2dp)); org.junit.Assume.assumeTrue("Ignore test when HeadsetService is not enabled", mContext.getResources().getBoolean(R.bool.profile_supported_hs_hfp)); org.junit.Assume.assumeTrue("Ignore test when HearingAidService is not enabled", mContext.getResources().getBoolean(R.bool.profile_supported_hearing_aid)); org.mockito.MockitoAnnotations.initMocks(this); com.android.bluetooth.TestUtils.setAdapterService(mAdapterService); when(mServiceFactory.getA2dpService()).thenReturn(mA2dpService); when(mServiceFactory.getHeadsetService()).thenReturn(mHeadsetService); when(mServiceFactory.getHearingAidService()).thenReturn(mHearingAidService); when(mA2dpService.setActiveDevice(any())).thenReturn(true); when(mHeadsetService.setActiveDevice(any())).thenReturn(true); when(mHearingAidService.setActiveDevice(any())).thenReturn(true); mActiveDeviceManager = new com.android.bluetooth.btservice.ActiveDeviceManager(mAdapterService, mServiceFactory); mActiveDeviceManager.start(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mA2dpDevice = mAdapter.getRemoteDevice("00:00:00:00:00:01"); mHeadsetDevice = mAdapter.getRemoteDevice("00:00:00:00:00:10"); mA2dpHeadsetDevice = mAdapter.getRemoteDevice("00:00:00:00:00:11"); mHearingAidDevice = mAdapter.getRemoteDevice("00:00:00:00:11:00"); }
public static void runGet() throwsjava.lang.Exception {java.lang.reflect.Method target = Main.IntRunner.class.getDeclaredMethod("run"); Main.IntRunner int_runner = new Main.IntRunner(true, true);java.lang.Thread target_get = newjava.lang.Thread(int_runner, "Get Target"); target_get.start(); int_runner.waitForBusyLoopStart(); try { art.Suspension.suspend(target_get); } catch (java.lang.Exception e) {java.lang.System.out.println(("got exception: got " + e)); e.printStackTrace(); int_runner.finish(); target_get.join(); return; } try { art.StackTrace.StackFrameData frame = Main.FindStackFrame(target_get, target); int depth = frame.depth; if (depth!= 0) { throw newjava.lang.Error(("Expected depth but got " + depth)); } int slot = Main.FindSlot(frame); int value = art.Locals.GetLocalVariableInt(target_get, depth, slot);java.lang.System.out.println(("Try GetLocalInt(), value is " + value)); } finally { art.Suspension.resume(target_get); int_runner.finish(); target_get.join(); } }
public void run() { int TARGET = 42; while (continueBusyLoop) { inBusyLoop = true; }java.time.Instant osrDeadline =java.time.Instant.now().plusSeconds((expectOsr? 600 : 3)); do { inBusyLoop = true; } while (((Main.hasJit()) && (!(Main.isInOsrCode("run")))) && ((osrDeadline.compareTo(java.time.Instant.now())) > 0) ); if (Main.hasJit()) { boolean inOsr = Main.isInOsrCode("run"); if ((allowJit) && (!inOsr)) { throw newjava.lang.Error(("Jit to be in OSR but was not. interpreter: " + (Main.isInterpreted()))); } else if ((!(expectOsr)) && inOsr) { throw newjava.lang.Error(("Jit not to be in OSR but was. interpreter: " + (Main.isInterpreted()))); } } Main.reportValue(TARGET); }
public static void runSet() throwsjava.lang.Exception {java.lang.reflect.Method target = Main.IntRunner.class.getDeclaredMethod("run"); Main.IntRunner int_runner = new Main.IntRunner(false, false);java.lang.Thread target_set = newjava.lang.Thread(int_runner, "Set Target"); target_set.start(); int_runner.waitForBusyLoopStart(); try { art.Suspension.suspend(target_set); } catch (java.lang.Exception e) {java.lang.System.out.println(("got exception: got " + e)); e.printStackTrace(); int_runner.finish(); target_set.join(); return; } try { art.StackTrace.StackFrameData frame = Main.FindStackFrame(target_set, target); int depth = frame.depth; if (depth!= 0) { throw newjava.lang.Error(("Expected depth but got " + depth)); } int slot = Main.FindSlot(frame);java.lang.System.out.println(("SET TARGET to " + (Main.SET_VALUE))); art.Locals.SetLocalVariableInt(target_set, depth, slot, Main.SET_VALUE); } finally { art.Suspension.resume(target_set); int_runner.finish(); target_set.join(); } }
private void onEnd(com.android.tradefed.device.metric.DeviceMetricData runData) {java.io.BufferedWriter outputFile = null; try {java.lang.String outputFileName = "/tmp/0/graphics-benchmark/out.txt"; outputFile = newjava.io.BufferedWriter(newjava.io.FileWriter(outputFileName)); outputFile.write((("VSync Period: " + (vSyncPeriod)) + "\n")); outputFile.write("Times:\n"); for (java.lang.Long time : elapsedTimes) outputFile.write((time + "\n")); outputFile.close(); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } }
public static void setAppLayerName(java.lang.String name) { com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.appLayerName = name; }
@java.lang.Override public final void onTestRunStart(com.android.tradefed.device.metric.DeviceMetricData runData) { com.android.tradefed.log.LogUtil.CLog.e("Attempt to get device from onTestRunStart"); device = getDevices().get(0); com.android.tradefed.log.LogUtil.CLog.e(("Device : " + (device))); elapsedTimes = newjava.util.ArrayList<java.lang.Long>(); com.android.tradefed.log.LogUtil.CLog.e("starting"); onStart(runData); timer = newjava.util.Timer();java.util.TimerTask timerTask = newjava.util.TimerTask() { @java.lang.Override public void run() { try { collect(runData); } catch (java.lang.InterruptedException e) { timer.cancel();java.lang.Thread.currentThread().interrupt(); com.android.tradefed.log.LogUtil.CLog.e("Interrupted exception thrown from task:"); com.android.tradefed.log.LogUtil.CLog.e(e); } } }; if (mFixedScheduleRate) { timer.scheduleAtFixedRate(timerTask, 0, mIntervalMs); } else { timer.schedule(timerTask, 0, mIntervalMs); } }
@java.lang.Override public void run() { try { collect(runData); } catch (java.lang.InterruptedException e) { timer.cancel();java.lang.Thread.currentThread().interrupt(); com.android.tradefed.log.LogUtil.CLog.e("Interrupted exception thrown from task:"); com.android.tradefed.log.LogUtil.CLog.e(e); } }
public boolean sample(long timeStamp) { if (timeStamp < (latestSeen)) { return false; } else if (timeStamp == (latestSeen)) { return true; } else { elapsedTimes.add((timeStamp - (latestSeen))); latestSeen = timeStamp; return false; } }
@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException {java.util.Map<java.lang.String,java.lang.String> runMetrics = newjava.util.HashMap<>(); for (com.android.graphics.benchmark.ApkInfo apk : mApks) { com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.setAppLayerName(apk.getPackageName()); getDevice().installPackage(newjava.io.File(mApkDir, apk.getFileName()), true); listener.testRunStarted("graphicsbenchmark", mApks.size()); com.android.ddmlib.testrunner.TestIdentifier identifier = new com.android.ddmlib.testrunner.TestIdentifier(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, (("run[" + (apk.name())) + "]"));java.util.Map<java.lang.String,java.lang.String> testMetrics = newjava.util.HashMap<>(); listener.testStarted(identifier); runDeviceTests(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, (("run[" + (apk.name())) + "]")); listener.testEnded(identifier, testMetrics); listener.testRunEnded(0, runMetrics); } }
@java.lang.Override public final void onTestRunEnd(com.android.tradefed.device.metric.DeviceMetricData runData) { if ((timer)!= null) { timer.cancel(); timer.purge(); } onEnd(runData); com.android.tradefed.log.LogUtil.CLog.d("finished"); }
private static org.json.JSONObject buildLinkProperties(android.net.LinkProperties data) throws org.json.JSONException { org.json.JSONObject info = new org.json.JSONObject(); info.put("InterfaceName", data.getInterfaceName()); info.put("LinkAddresses", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getLinkAddresses())); info.put("DnsServers", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getDnsServers())); info.put("Domains", data.getDomains()); info.put("Mtu", data.getMtu()); info.put("Routes", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getRoutes())); info.put("IsPrivateDnsActive", data.isPrivateDnsActive()); info.put("PrivateDnsServerName", data.getPrivateDnsServerName()); return info; }
private boolean connectAudio(java.lang.String address) { com.android.server.telecom.BluetoothHeadsetProxy bluetoothHeadset = mDeviceManager.getHeadsetService(); if (bluetoothHeadset == null) { android.telecom.Log.w(this, "Failed to connect audio but no headset service exists."); return false; } android.bluetooth.BluetoothDevice device = mDeviceManager.getDeviceFromAddress(address); if (device == null) { android.telecom.Log.w(this, "Failed to turn on audio for a disconnected device"); return false; } boolean success = bluetoothHeadset.setActiveDevice(device); if (!success) { android.telecom.Log.w(com.android.server.telecom.bluetooth.BluetoothRouteManager.LOG_TAG, "Failed to set active device to %s", address); return false; } if (!(bluetoothHeadset.isAudioOn())) { return bluetoothHeadset.connectAudio(); } return true; }
privatejava.io.File createMockPropertiesFile() throwsjava.io.IOException {java.io.File pFile = newjava.io.File(mTestDir, PackageFiles.PAYLOAD_PROPERTIES_FILE_NAME); try (java.io.BufferedWriter w = newjava.io.BufferedWriter(newjava.io.FileWriter(pFile))) { w.write(com.example.android.systemupdatersample.util.PayloadSpecsTest.PROPERTIES_CONTENTS); } return pFile; }
@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException {java.util.Map<java.lang.String,java.lang.String> runMetrics = newjava.util.HashMap<>(); initApkList(); getDevice().pushFile(mApkInfoFile, ApkInfo.APK_LIST_LOCATION); for (com.android.graphics.benchmark.ApkInfo apk : mApks) { getDevice().installPackage(apk.getFileName(), true); com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.setAppLayerName(apk); listener.testRunStarted("graphicsbenchmark", mApks.size()); com.android.ddmlib.testrunner.TestIdentifier identifier = new com.android.ddmlib.testrunner.TestIdentifier(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, (("run[" + (apk.getName())) + "]"));java.util.Map<java.lang.String,java.lang.String> testMetrics = newjava.util.HashMap<>(); listener.testStarted(identifier); if (apkFile == null) { listener.testFailed(identifier,java.lang.String.format("Failed to find %s in %s.", apk.getFileName(), mApkDir)); } else { runDeviceTests(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, (("run[" + (apk.getName())) + "]")); } listener.testEnded(identifier, testMetrics); listener.testRunEnded(0, runMetrics); } }
private com.android.graphics.benchmark.ApkInfo createApkInfo(org.w3c.dom.Element element) {java.util.List<com.android.graphics.benchmark.ApkInfo.Argument> args = newjava.util.ArrayList<>(); org.w3c.dom.NodeList argsNodeList = element.getElementsByTagName("args"); if ((argsNodeList.getLength()) > 0) { org.w3c.dom.NodeList children = argsNodeList.item(0).getChildNodes(); for (int j = 0; j < (children.getLength()); j++) { org.w3c.dom.Node argNode = children.item(j); if ((argNode.getNodeType())!= (org.w3c.dom.Node.ELEMENT_NODE)) { continue; } org.w3c.dom.Element argElement = ((org.w3c.dom.Element) (argNode)); args.add(new com.android.graphics.benchmark.ApkInfo.Argument(argElement.getTagName(), argElement.getTextContent())); } } return new com.android.graphics.benchmark.ApkInfo(getElement(element, "name"), getElement(element, "fileName"), getElement(element, "packageName"), getElement(element, "layerName"), args,java.lang.Integer.parseInt(getElement(element, "runTime", "300000")) ); }
private void startApp(com.android.graphics.benchmark.ApkInfo apk) throws IntentFilter.MalformedMimeTypeException,java.io.IOException { android.os.Looper.prepare(); mHandler = new android.os.Handler(); registerReceiver(); mReport.begin(apk.getName()); android.util.Log.d(com.android.graphics.benchmark.device.GraphicsBenchmarkTest.TAG, ("startApp " + (apk.getPackageName()))); android.content.Intent intent = android.support.test.InstrumentationRegistry.getContext().getPackageManager().getLaunchIntentForPackage(apk.getPackageName()); for (com.android.graphics.benchmark.ApkInfo.Argument argument : mApk.getArgs()) { intent.putExtra(argument.getKey(), argument.getValue()); } android.support.test.InstrumentationRegistry.getContext().startActivity(intent); mHandler.postDelayed(() -> mHandler.getLooper().quit(), mApk.getRunTime()); android.os.Looper.loop(); mReport.end(); }
private static boolean connectBluetoothScoHelper(android.bluetooth.BluetoothHeadset bluetoothHeadset, android.bluetooth.BluetoothDevice device, int scoAudioMode) { switch (scoAudioMode) { case com.android.server.audio.AudioService.SCO_MODE_RAW : return bluetoothHeadset.connectAudio(); case com.android.server.audio.AudioService.SCO_MODE_VIRTUAL_CALL : return bluetoothHeadset.startScoUsingVirtualVoiceCall(); case com.android.server.audio.AudioService.SCO_MODE_VR : return bluetoothHeadset.startVoiceRecognition(device); default : return false; } }
@org.junit.Test public void testConnectAudio_deviceDisconnected() { com.android.bluetooth.hfp.HeadsetCallState headsetCallState = new com.android.bluetooth.hfp.HeadsetCallState(1, 0, HeadsetHalConstants.CALL_STATE_ALERTING, "123-456-7890", 128); mCurrentDevice = getTestDevice(0); org.junit.Assert.assertTrue(mHeadsetService.connect(mCurrentDevice)); verify(mObjectsFactory).makeStateMachine(mCurrentDevice, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mAdapterService, mNativeInterface, mSystemInterface); verify(mStateMachines.get(mCurrentDevice)).sendMessage(HeadsetStateMachine.CONNECT, mCurrentDevice); when(mStateMachines.get(mCurrentDevice).getDevice()).thenReturn(mCurrentDevice); when(mStateMachines.get(mCurrentDevice).getConnectionState()).thenReturn(BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, mHeadsetService.getConnectionState(mCurrentDevice)); org.junit.Assert.assertEquals(java.util.Collections.EMPTY_LIST, mHeadsetService.getConnectedDevices()); mHeadsetService.onConnectionStateChangedFromStateMachine(mCurrentDevice, BluetoothProfile.STATE_CONNECTED, BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertFalse(mHeadsetService.connectAudio(mCurrentDevice)); verify(mStateMachines.get(mCurrentDevice), never()).sendMessage(eq(HeadsetStateMachine.CONNECT_AUDIO), any()); }
private static boolean disconnectBluetoothScoHelper(android.bluetooth.BluetoothHeadset bluetoothHeadset, android.bluetooth.BluetoothDevice device, int scoAudioMode) { switch (scoAudioMode) { case com.android.server.audio.AudioService.SCO_MODE_RAW : return bluetoothHeadset.disconnectAudio(); case com.android.server.audio.AudioService.SCO_MODE_VIRTUAL_CALL : return bluetoothHeadset.stopScoUsingVirtualVoiceCall(); case com.android.server.audio.AudioService.SCO_MODE_VR : return bluetoothHeadset.stopVoiceRecognition(device); default : return false; } }
private void phoneStateChanged(int numActive, int numHeld, int callState,java.lang.String number, int type) { enforceCallingOrSelfPermission(android.Manifest.permission.MODIFY_PHONE_STATE, null); mStateMachinesThread.getThreadHandler().post(() -> { mSystemInterface.getHeadsetPhoneState().setNumActiveCall(numActive); mSystemInterface.getHeadsetPhoneState().setNumHeldCall(numHeld); mSystemInterface.getHeadsetPhoneState().setCallState(callState); }); doForEachConnectedStateMachine(( stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.CALL_STATE_CHANGED, new com.android.bluetooth.hfp.HeadsetCallState(numActive, numHeld, callState, number, type))); }
@org.junit.Test public void testPhoneStateChange_noDeviceSaveState() throws android.os.RemoteException { com.android.bluetooth.hfp.HeadsetCallState headsetCallState = new com.android.bluetooth.hfp.HeadsetCallState(1, 0, HeadsetHalConstants.CALL_STATE_ALERTING, "123-456-7890", 128); mHeadsetServiceBinder.phoneStateChanged(headsetCallState.mNumActive, headsetCallState.mNumHeld, headsetCallState.mCallState, headsetCallState.mNumber, headsetCallState.mType); verify(mPhoneState, timeout(com.android.bluetooth.hfp.HeadsetServiceTest.ASYNC_CALL_TIMEOUT_MILLIS).times(1)).setCallState(headsetCallState.mCallState); verify(mPhoneState, timeout(com.android.bluetooth.hfp.HeadsetServiceTest.ASYNC_CALL_TIMEOUT_MILLIS).times(1)).setNumActiveCall(headsetCallState.mNumActive); verify(mPhoneState, timeout(com.android.bluetooth.hfp.HeadsetServiceTest.ASYNC_CALL_TIMEOUT_MILLIS).times(1)).setNumHeldCall(headsetCallState.mNumHeld); verifyNoMoreInteractions(mPhoneState); }
private void disconnectBluetoothSco(int exceptPid) { synchronized(mScoClients) { checkScoAudioState(); if (((mScoAudioState) == (com.android.server.audio.AudioService.SCO_STATE_ACTIVE_EXTERNAL)) || ((mScoAudioState) == (com.android.server.audio.AudioService.SCO_STATE_DEACTIVATE_EXT_REQ))) { if ((mBluetoothHeadsetDevice)!= null) { if ((mBluetoothHeadset)!= null) { boolean status = ((com.android.server.audio.AudioService.disconnectBluetoothScoHelper(mBluetoothHeadset, mBluetoothHeadsetDevice, com.android.server.audio.AudioService.SCO_MODE_RAW)) || (com.android.server.audio.AudioService.disconnectBluetoothScoHelper(mBluetoothHeadset, mBluetoothHeadsetDevice, com.android.server.audio.AudioService.SCO_MODE_VIRTUAL_CALL))) || (com.android.server.audio.AudioService.disconnectBluetoothScoHelper(mBluetoothHeadset, mBluetoothHeadsetDevice, com.android.server.audio.AudioService.SCO_MODE_VR)); if (status) { mScoAudioState = com.android.server.audio.AudioService.SCO_STATE_DEACTIVATING; } else { clearAllScoClients(exceptPid, false); mScoAudioState = com.android.server.audio.AudioService.SCO_STATE_INACTIVE; } } else if (((mScoAudioState) == (com.android.server.audio.AudioService.SCO_STATE_ACTIVE_EXTERNAL)) && (getBluetoothHeadset())) { mScoAudioState = com.android.server.audio.AudioService.SCO_STATE_DEACTIVATE_EXT_REQ; } } } else { clearAllScoClients(exceptPid, true); } } }
private void setBtScoActiveDevice(android.bluetooth.BluetoothDevice btDevice) { if (com.android.server.audio.AudioService.DEBUG_DEVICES) { android.util.Log.d(com.android.server.audio.AudioService.TAG, (("setBtScoActiveDevice(" + btDevice) + ")")); } synchronized(mScoClients) { final android.bluetooth.BluetoothDevice previousActiveDevice = mBluetoothHeadsetDevice; if (!(java.util.Objects.equals(btDevice, previousActiveDevice))) { if (!(handleBtScoActiveDeviceChange(previousActiveDevice, false))) { android.util.Log.w(com.android.server.audio.AudioService.TAG, ("setBtScoActiveDevice failed to remove previous device " + previousActiveDevice)); } if (!(handleBtScoActiveDeviceChange(btDevice, true))) { android.util.Log.e(com.android.server.audio.AudioService.TAG, ("setBtScoActiveDevice failed to add new device " + btDevice)); btDevice = null; } mBluetoothHeadsetDevice = btDevice; if ((mBluetoothHeadsetDevice) == null) { resetBluetoothSco(); } } } }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { long timestamp =java.lang.Long.parseLong(intent.getStringExtra("timestamp")); android.util.Log.d(com.android.graphics.benchmark.device.GraphicsBenchmarkTest.TAG, ("Got intent at " + timestamp)); mReport.startLoop(timestamp); if (!(mGotIntent)) { mHandler.postDelayed(() -> mHandler.getLooper().quit(), 10000); mGotIntent = true; } }
private void registerReceiver() throws IntentFilter.MalformedMimeTypeException { android.content.BroadcastReceiver br = new android.content.BroadcastReceiver() { @java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { long timestamp =java.lang.Long.parseLong(intent.getStringExtra("timestamp")); android.util.Log.d(com.android.graphics.benchmark.device.GraphicsBenchmarkTest.TAG, ("Got intent at " + timestamp)); mReport.startLoop(timestamp); if (!(mGotIntent)) { mHandler.postDelayed(() -> mHandler.getLooper().quit(), 10000); mGotIntent = true; } } }; android.content.IntentFilter intentFilter = new android.content.IntentFilter(com.android.graphics.benchmark.device.GraphicsBenchmarkTest.INTENT_ACTION, "text/plain"); android.support.test.InstrumentationRegistry.getContext().registerReceiver(br, intentFilter); }
privatejava.lang.String getCrashSecurityDescription() throwsjava.io.IOException {java.io.InputStream inputStream = com.android.vts.entity.TestSuiteResultEntity.servletContext.getResourceAsStream("/WEB-INF/buganizer/CrashSecurityVulnerabilityReports.tpl");java.lang.String templateDescription = org.apache.commons.io.IOUtils.toString(inputStream, "UTF-8");java.util.Map<java.lang.String,java.lang.String> valuesMap = newjava.util.HashMap<>(); valuesMap.put("suiteBuildNumber", suiteBuildNumber); valuesMap.put("buildId", buildId); valuesMap.put("hostName", hostName); valuesMap.put("resultPath", resultPath); valuesMap.put("buildVendorFingerprint", buildVendorFingerprint); valuesMap.put("buildSystemFingerprint", buildSystemFingerprint); org.apache.commons.lang.text.StrSubstitutor sub = new org.apache.commons.lang.text.StrSubstitutor(valuesMap);java.lang.String resolvedDescription = sub.replace(templateDescription); return resolvedDescription; }
@java.lang.Override public void contextInitialized(java x.servlet.ServletContextEvent servletContextEvent) { com.googlecode.objectify.ObjectifyFactory objectifyFactory = com.googlecode.objectify.ObjectifyService.factory(); objectifyFactory.register(com.android.vts.entity.TestSuiteFileEntity.class); objectifyFactory.register(com.android.vts.entity.TestSuiteResultEntity.class); objectifyFactory.begin(); com.android.vts.entity.TestSuiteResultEntity.servletContext = servletContextEvent.getServletContext(); com.android.vts.config.ObjectifyListener.logger.log(java.util.logging.Level.INFO, "Objectify Initialized from context."); }
publicjava.lang.String getBuganizerLink() throwsjava.io.IOException,java.net.URISyntaxException, org.apache.http.ParseException {java.util.List<org.apache.http.NameValuePair> qparams = newjava.util.ArrayList<org.apache.http.NameValuePair>(); if ((!(this.bootSuccess)) || (((this.passedTestCaseCount) == 0) && ((this.failedTestCaseCount) == 0))) { qparams.add(new org.apache.http.message.BasicNameValuePair("component", "326430")); qparams.add(new org.apache.http.message.BasicNameValuePair("template", "1073865")); qparams.add(new org.apache.http.message.BasicNameValuePair("description", this.getLabInfraIssueDescription())); } else { qparams.add(new org.apache.http.message.BasicNameValuePair("component", "163868")); qparams.add(new org.apache.http.message.BasicNameValuePair("template", "661006")); qparams.add(new org.apache.http.message.BasicNameValuePair("description", this.getCrashSecurityDescription())); }java.net.URI uri = org.apache.http.client.utils.URIUtils.createURI("https", "buganizer.corp.google.com", (-1), "/issues/new", org.apache.http.client.utils.URLEncodedUtils.format(qparams, "UTF-8"), null); return uri.toString(); }
privatejava.lang.String getLabInfraIssueDescription() throwsjava.io.IOException {java.io.InputStream inputStream = com.android.vts.entity.TestSuiteResultEntity.servletContext.getResourceAsStream("/WEB-INF/buganizer/LabInfraIssue.tpl");java.lang.String templateDescription = org.apache.commons.io.IOUtils.toString(inputStream, "UTF-8");java.util.Map<java.lang.String,java.lang.String> valuesMap = newjava.util.HashMap<>(); valuesMap.put("suiteBuildNumber", suiteBuildNumber); valuesMap.put("buildId", buildId); valuesMap.put("modulesDone",java.lang.Integer.toString(modulesDone)); valuesMap.put("modulesTotal",java.lang.Integer.toString(modulesTotal)); valuesMap.put("hostName", hostName); valuesMap.put("resultPath", resultPath); valuesMap.put("buildVendorFingerprint", buildVendorFingerprint); valuesMap.put("buildSystemFingerprint", buildSystemFingerprint); org.apache.commons.lang.text.StrSubstitutor sub = new org.apache.commons.lang.text.StrSubstitutor(valuesMap);java.lang.String resolvedDescription = sub.replace(templateDescription); return resolvedDescription; }
private void collect(com.android.tradefed.device.metric.DeviceMetricData runData) throwsjava.lang.InterruptedException { try { if ((com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mTestApk) == null) { com.android.tradefed.log.LogUtil.CLog.e("No test apk info provided."); return; }java.lang.String cmd = ("adb SurfaceFlinger --latency \"" + (com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mTestApk.getLayerName())) + "\"";java.lang.String[] raw = mDevice.executeShellCommand(cmd).split("\n"); com.android.tradefed.log.LogUtil.CLog.d("Collecting benchmark stats for layer: %s", com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mTestApk.getLayerName()); if (mFirstLoop) { if ((raw.length) == 1) { return; } mVSyncPeriod =java.lang.Long.parseLong(raw[0]); mFirstLoop = false; } boolean overlap = false; for (int i = 1; i < (raw.length); i++) {java.lang.String[] parts = raw[i].split("\t"); if ((parts.length) == 3) { if (sample(java.lang.Long.parseLong(parts[2]))) { overlap = true; } } } if (!overlap) { com.android.tradefed.log.LogUtil.CLog.e("No overlap with previous poll, we missed some frames!"); } } catch (com.android.tradefed.device.DeviceNotAvailableException |java.lang.NullPointerException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } }
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo public void testCrashWatcher() throwsjava.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); android.support.test.uiautomator.UiDevice device = testFramework.getDevice(); boolean isCrashExampleInstalled = com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.isPackageInstalled(instrumentation, "com.example.android.displayingbitmaps"); if (!isCrashExampleInstalled) { com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.installApk(instrumentation, "CrashExample.apk"); } com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, "DisplayingBitmaps"); device.findObject(new android.support.test.uiautomator.UiSelector().className("android.widget.ImageView")).click(); }
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "14578823") public void installAppAndLaunch() throwsjava.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); if ((api) == 18) { return; } boolean isHelloComputeInstalled = com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.isPackageInstalled(instrumentation, "com.example.android.rs.hellocompute"); if (!isHelloComputeInstalled) { com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.installApk(instrumentation, "HelloCompute.apk"); } com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, "RsHelloCompute"); assertTrue(testFramework.getDevice().findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.APP_IMAGE_VIEW_ID)).exists()); }
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "14578822") public void testVpn() throwsjava.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); android.support.test.uiautomator.UiDevice device = testFramework.getDevice(); if ((api) == 19) { return; } boolean isTestVPNInstalled = com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.isPackageInstalled(instrumentation, "com.test.vpn"); if (!isTestVPNInstalled) { com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.installApk(instrumentation, "FredVPN.apk"); } if (!(verifyVpnStatus(device))) { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, "TestVPN"); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.START_VPN_BUTTON_RES)).clickAndWaitForNewWindow(); new com.android.devtools.systemimage.uitest.watchers.VpnPopupWatcher(device).checkForCondition(); org.junit.Assert.assertTrue("Failed to find the VPN lock icon after starting VPN!", verifyVpnStatus(device)); } }
private void addDexPath(java.lang.String dexPath,java.io.File optimizedDirectory, boolean isTrusted) { finaljava.util.List<java.io.IOException> suppressedExceptionList = newjava.util.ArrayList<java.io.IOException>(); final dalvik.system.DexPathList.Element[] newElements = dalvik.system.DexPathList.makeDexElements(dalvik.system.DexPathList.splitDexPath(dexPath), optimizedDirectory, suppressedExceptionList, definingContext, isTrusted); if ((newElements!= null) && ((newElements.length) > 0)) { final dalvik.system.DexPathList.Element[] oldElements = dexElements; dexElements = new dalvik.system.DexPathList.Element[(oldElements.length) + (newElements.length)];java.lang.System.arraycopy(oldElements, 0, dexElements, 0, oldElements.length);java.lang.System.arraycopy(newElements, 0, dexElements, oldElements.length, newElements.length); } if ((suppressedExceptionList.size()) > 0) { finaljava.io.IOException[] newSuppressedExceptions = suppressedExceptionList.toArray(newjava.io.IOException[suppressedExceptionList.size()]); if ((dexElementsSuppressedExceptions)!= null) { finaljava.io.IOException[] oldSuppressedExceptions = dexElementsSuppressedExceptions; final int suppressedExceptionsLength = (oldSuppressedExceptions.length) + (newSuppressedExceptions.length); dexElementsSuppressedExceptions = newjava.io.IOException[suppressedExceptionsLength];java.lang.System.arraycopy(oldSuppressedExceptions, 0, dexElementsSuppressedExceptions, 0, oldSuppressedExceptions.length);java.lang.System.arraycopy(newSuppressedExceptions, 0, dexElementsSuppressedExceptions, oldSuppressedExceptions.length, newSuppressedExceptions.length); } else { dexElementsSuppressedExceptions = newSuppressedExceptions; } } }
static native void setTrusted(java.lang.Object cookie);
private void applyUpdate(final com.example.android.systemupdatersample.UpdateConfig config) { if ((config.getInstallType()) == (com.example.android.systemupdatersample.UpdateConfig.AB_INSTALL_TYPE_NON_STREAMING)) { com.example.android.systemupdatersample.PayloadSpec payload; try { payload = com.example.android.systemupdatersample.util.PayloadSpecs.forNonStreaming(config.getUpdatePackageFile()); } catch (java.io.IOException e) { android.util.Log.e(com.example.android.systemupdatersample.ui.MainActivity.TAG, "Error creating payload spec", e); android.widget.Toast.makeText(this, "Error creating payload spec", Toast.LENGTH_LONG).show(); return; } updateEngineApplyPayload(payload, null); } else { android.util.Log.d(com.example.android.systemupdatersample.ui.MainActivity.TAG, "Starting PrepareStreamingService"); com.example.android.systemupdatersample.services.PrepareStreamingService.startService(this, config, ( code, payloadSpec) -> { if (code == PrepareStreamingService.RESULT_CODE_SUCCESS) { android.util.Log.d(com.example.android.systemupdatersample.ui.MainActivity.TAG, "Apply payload failed, result code is " + code)); android.widget.Toast.makeText(this, "Apply payload failed, result code is " + code), Toast.LENGTH_LONG).show(); } }); } }
@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { for (com.android.graphics.benchmark.ApkInfo apk : mApks) { getDevice().installPackage(newjava.io.File(mApkDir, apk.getFileName()), true); runDeviceTests(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, (("run[" + (apk.name())) + "]")); getDevice().uninstallPackage(apk.getPackageName()); } }
private void onEnd(com.android.tradefed.device.metric.DeviceMetricData runData) { if ((com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mDeviceResultData)!= null) { com.android.tradefed.log.LogUtil.CLog.e(("End timestamp: " + (com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mDeviceResultData.getEvents(0).getTimestamp()))); } try (java.io.BufferedWriter outputFile = newjava.io.BufferedWriter(newjava.io.FileWriter("/tmp/0/graphics-benchmark/out.txt", (!(mFirstRun))))) { outputFile.write((("VSync Period: " + (mVSyncPeriod)) + "\n\n")); long loadTime = 0L; if ((com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mDeviceResultData.getEventsCount()) > 0) { loadTime = (com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mDeviceResultData.getEvents(0).getTimestamp()) * 1000000; } else { com.android.tradefed.log.LogUtil.CLog.e("No start benchmark intent given"); } processTimestampsSlice(mElapsedTimes.get(((mElapsedTimes.size()) - 1)), outputFile, runData); } catch (java.io.IOException e) { throw newjava.lang.RuntimeException(e); } mFirstRun = false; }
private void processTimestampsSlice(int runIndex, long startTimestamp, long endTimestamp,java.io.BufferedWriter outputFile, com.android.tradefed.device.metric.DeviceMetricData runData) throwsjava.io.IOException { double minFPS =java.lang.Double.MAX_VALUE; double maxFPS = 0.0; long totalTimeNs = 0; outputFile.write(((("run " + runIndex) + " at: ") + startTimestamp) + " ns")); outputFile.write("Elapsed Time Per Second"); long prevTime = 0L; int numOfTimestamps = 0; for (long time : mElapsedTimes) { if (time < startTimestamp) { continue; } if (time > endTimestamp) { break; } if (prevTime == 0) { prevTime = time; continue; } long timeDiff = time - prevTime; prevTime = time; double currentFPS = 1.0E9 / timeDiff; minFPS = (currentFPS < minFPS)? currentFPS : minFPS; maxFPS = (currentFPS > maxFPS)? currentFPS : maxFPS; totalTimeNs += timeDiff; numOfTimestamps++; outputFile.write((((timeDiff + " ms ") + currentFPS) + " fps")); } outputFile.write("\nSTATS\n"); double avgFPS = (numOfTimestamps * 1.0E9) / totalTimeNs; outputFile.write((("min FPS = " + minFPS) + "\n")); outputFile.write((("max FPS = " + maxFPS) + "\n")); outputFile.write((("avg FPS = " + avgFPS) + "\n")); runData.addStringMetric(("run_" + runIndex) + ".min_fps"),java.lang.Double.toString(minFPS)); runData.addStringMetric(("run_" + runIndex) + ".max_fps"),java.lang.Double.toString(maxFPS)); runData.addStringMetric(("run_" + runIndex) + ".fps"),java.lang.Double.toString(avgFPS)); outputFile.write("\n"); }
private com.android.graphics.benchmark.ApkInfo createApkInfo(org.w3c.dom.Element element) {java.util.List<com.android.graphics.benchmark.ApkInfo.Argument> args = newjava.util.ArrayList<>(); org.w3c.dom.NodeList argsNodeList = element.getElementsByTagName("args"); if ((argsNodeList.getLength()) > 0) { org.w3c.dom.NodeList children = argsNodeList.item(0).getChildNodes(); for (int j = 0; j < (children.getLength()); j++) { org.w3c.dom.Node argNode = children.item(j); if ((argNode.getNodeType())!= (org.w3c.dom.Node.ELEMENT_NODE)) { continue; } org.w3c.dom.Element argElement = ((org.w3c.dom.Element) (argNode));java.lang.String type = argElement.getAttribute("type"); if ((type == null) || (type.isEmpty())) { type = "STRING"; } args.add(new com.android.graphics.benchmark.ApkInfo.Argument(argElement.getTagName(), argElement.getTextContent(), ApkInfo.Argument.Type.valueOf(type.toUpperCase(java.util.Locale.getDefault())))); } } return new com.android.graphics.benchmark.ApkInfo(getElement(element, "name", null), getElement(element, "fileName", null), getElement(element, "packageName", null), getElement(element, "layerName", null), args,java.lang.Integer.parseInt(getElement(element, "runTime", "10000"))); }
private static boolean verifyPackageCompatibility(java.io.File file) { try { return android.os.RecoverySystem.verifyPackageCompatibility(file); } catch (java.io.IOException e) { android.util.Log.w(com.example.android.systemupdatersample.services.PrepareStreamingService.TAG, "Failed to verify package compatibility", e); return false; } }
private static void repeatConstMethodType1(java.lang.invoke.MethodType expected) {java.lang.System.out.print("repeatConstMethodType1(");java.lang.System.out.print(expected);java.lang.System.out.println(")"); for (int i = 0; i < 12000; ++i) {java.lang.invoke.MethodType actual = Main.methodType0(); if (!(Main.methodType1().equals(expected))) {java.lang.System.out.print("Expected: ");java.lang.System.out.println(expected);java.lang.System.out.print("Actual: ");java.lang.System.out.println(actual); Main.unreachable(); } } }
private static void repeatConstMethodType0(java.lang.invoke.MethodType expected) {java.lang.System.out.print("repeatConstMethodType0(");java.lang.System.out.print(expected);java.lang.System.out.println(")"); for (int i = 0; i < 12000; ++i) {java.lang.invoke.MethodType actual = Main.methodType0(); Main.assertEquals(expected, actual); } }
private static void repeatConstMethodType1(java.lang.invoke.MethodType expected) {java.lang.System.out.print("repeatConstMethodType1(");java.lang.System.out.print(expected);java.lang.System.out.println(")"); for (int i = 0; i < 12000; ++i) {java.lang.invoke.MethodType actual = Main.methodType1();java.lang.System.out.print(expected);java.lang.System.out.print(actual); } }
private static void repeatConstMethodHandle() throwsjava.lang.Throwable {java.lang.System.out.println("repeatConstMethodHandle()");java.lang.String[] values = newjava.lang.String[]{ "A", "B", "C" }; for (int i = 0; i < 12000; ++i) {java.lang.String value = values[(i % (values.length))]; Main.setNameHandle().invoke(value);java.lang.String actual = ((java.lang.String) (Main.getNameHandle().invokeExact())); Main.assertEquals(value, actual); Main.assertEquals(value, Main.name); } }
@android.annotation.NonNull com.android.bluetooth.avrcp.Metadata getCurrentSongInfo() { final com.android.bluetooth.avrcp.MediaPlayerWrapper player = getActivePlayer(); if (player == null) return com.android.bluetooth.avrcp.Util.empty_data(); if (!(getCurrentMediaId().equals(""))) { for (com.android.bluetooth.avrcp.Metadata data : getNowPlayingList()) { if (data.mediaId.equals(getCurrentMediaId())) { return data.clone(); } } } return player.getCurrentMetadata(); }
public static void main(java.lang.String[] params) throwsjava.lang.Exception { if ((((params.length) == 0) || ("--help".equals(params[0]))) || ("-h".equals(params[0]))) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if ("--version".equals(params[0])) {java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; }java.lang.String cmd = params[0]; try { if ("sign".equals(cmd)) { com.android.apksigner.ApkSignerTool.sign(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("verify".equals(cmd)) { com.android.apksigner.ApkSignerTool.verify(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("rotate".equals(cmd)) { com.android.apksigner.ApkSignerTool.rotate(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("help".equals(cmd)) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if ("version".equals(cmd)) { com.android.apksigner.ApkSignerTool.verify(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("dump-hints".equals(cmd)) { com.android.apksigner.ApkSignerTool.dumpHints(java.util.Arrays.copyOfRange(params, 1, params.length)); } else { throw new com.android.apksigner.ApkSignerTool.ParameterException((("Unsupported command: " + cmd) + " See --help for supported commands")); } } catch (com.android.apksigner.ApkSignerTool.ParameterException | com.android.apksigner.OptionsParser.ParsingException e) {java.lang.System.err.println(e.getMessage()); } }
@java.lang.Override public void run() { synchronized(mStateMachines) { mDialingOutTimeoutEvent = null; doForStateMachine(mDialingOutDevice, ( stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.DIALING_OUT_RESULT, 0, 0, mDialingOutDevice)); mSystemInterface.getAudioManager().setParameters("A2dpSuspended=false"); } }
boolean dialOutgoingCall(android.bluetooth.BluetoothDevice fromDevice,java.lang.String dialNumber) { synchronized(mStateMachines) { if (!(isOnStateMachineThread())) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, "setStateMachineThread must be called from state machine thread"); return false; } if (mDialingOutTimeoutEvent)!= null { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, ("setDialingOutTimeoutEvent already dialing by " + (mDialingOutTimeoutEvent))); return false; } if (isVirtualCallStarted()) { if (!(stopScoUsingVirtualVoiceCall())) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, "setVirtualVoiceCall failed to stop current virtual call"); return false; } } if (!(setActiveDevice(fromDevice))) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, ("setActiveDevice failed to set active device to " + fromDevice)); return false; } mSystemInterface.getAudioManager().setParameters("A2dpSuspended=true"); android.content.Intent intent = new android.content.Intent(android.content.Intent.ACTION_CALL_PRIVILEGED, android.net.Uri.fromParts(PhoneAccount.SCHEME_TEL, dialNumber, null)); intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); startActivity(intent); mDialingOutTimeoutEvent = new com.android.bluetooth.hfp.HeadsetService.DialingOutTimeoutEvent(fromDevice); mStateMachinesThread.getThreadHandler().postDelayed(mDialingOutTimeoutEvent, com.android.bluetooth.hfp.HeadsetService.DIALING_OUT_TIMEOUT_MS); return true; } }
@com.android.internal.annotations.VisibleForTesting public void onAudioStateChangedFromStateMachine(android.bluetooth.BluetoothDevice device, int fromState, int toState) { synchronized(mStateMachines) { if ((fromState!= (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) && (toState == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED))) { } if ((fromState!= (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) && (toState == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED))) { if ((((mActiveDevice)!= null) && (!(mActiveDevice.equals(device)))) && (shouldPersistAudio())) { if (!(connectAudio(mActiveDevice))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((((("connection failed to new " + device) + ", after ") + device) + " is disconnected from SCO")); } } } if (toState == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) { mSystemInterface.getAudioManager().setParameters("A2dpSuspended=false"); } } }
private boolean startScoUsingVirtualVoiceCall() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH_ADMIN permission"); android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, ("startScoUsingVirtualVoiceCall() " + (com.android.bluetooth.Utils.getUidPidString()))); synchronized(mStateMachines) { if (isAudioOn()) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "startScoUsingVirtualVoiceCall() audio is not idle"); return false; } if ((mActiveDevice) == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "startScoUsingVirtualVoiceCall() no active device"); return false; } boolean inTelecomCall = (!(mVirtualCallStarted)) && ((mSystemInterface.isInCall()) || (mSystemInterface.isRinging())); if (inTelecomCall) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "startScoUsingVirtualVoiceCall() Telecom call in progress"); return false; } if (mVirtualCallStarted) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "startScoUsingVirtualVoiceCall() Virtual call has already started"); return false; } mVirtualCallStarted = true; mStateMachinesThread.getThreadHandler().post(() -> mSystemInterface.getAudioManager().setParameters("A2dpSuspended=true")); phoneStateChanged(0, 0, HeadsetHalConstants.CALL_STATE_DIALING, "", 0, true); phoneStateChanged(0, 0, HeadsetHalConstants.CALL_STATE_ALERTING, "", 0, true); phoneStateChanged(1, 0, HeadsetHalConstants.CALL_STATE_IDLE, "", 0, true); return true; } }
@java.lang.Override public void handleMessage(android.os.Message msg) { if ((msg.what)!= (com.android.bluetooth.avrcp.MediaPlayerWrapper.TimeoutHandler.MSG_TIMEOUT)) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("Bad message on timeout handler: " + (msg.what))); return; } android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("Timeout while waiting for metadata to sync for " + (mPackageName))); android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("Current Metadata: " + com.android.bluetooth.avrcp.Util.toMetadata(getMetadata()))); android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("Current Playstate: " + (getPlaybackState())));java.util.List<com.android.bluetooth.avrcp.Metadata> current_queue = com.android.bluetooth.avrcp.Util.toMetadataList(queue); for (int i = 0; i < (current_queue.size()); i++) { android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (("QueueItem(" + i) + " ") + current_queue.get(i)))); } if (com.android.bluetooth.avrcp.MediaPlayerWrapper.sTesting) android.util.Log.wtfStack(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, "Incorrectly formatted stack"); }
int build() { mSphereVertices =java.nio.ByteBuffer.allocateDirect((((mNumSegments) * ((mNumSegments) + 1)) * (com.android.graphics.benchmark.example.Sphere.COORDS_PER_VERTEX)) * 2)).order(java.nio.ByteOrder.nativeOrder()).asFloatBuffer(); mIndices =java.nio.ByteBuffer.allocateDirect(((((mNumSegments) * ((mNumSegments) + 2)) * 2) * 4)).order(java.nio.ByteOrder.nativeOrder()).asIntBuffer(); double dTheta = (2 * (java.lang.Math.PI)) / (mNumSegments); double dPhi = (java.lang.Math.PI) / (mNumSegments); int points = 0; boolean firstLoop = true; double epsilon = 1.0E-10; for (double phi = -(java.lang.Math.PI); phi <= ( + epsilon); phi += dPhi) { for (double theta = 0.0; theta < (((java.lang.Math.PI) * 2) - epsilon); theta += dTheta) { mSphereVertices.put(((float) (((mRadius) * (java.lang.Math.sin(phi))) * (java.lang.Math.cos(theta))))); mSphereVertices.put(((float) (((mRadius) * (java.lang.Math.sin(phi))) * (java.lang.Math.sin(theta))))); mSphereVertices.put(((float) ((mRadius) * (java.lang.Math.cos(phi))))); if (!firstLoop) { mIndices.put((points - (mNumSegments))); mIndices.put(points); mNumIndices += 2; } points++; } if (!firstLoop) { mIndices.put((points - ( 2 * (mNumSegments)))))); mIndices.put(points); mNumIndices += 2; } firstLoop = false; }java.lang.StringBuilder sb = newjava.lang.StringBuilder(); for (int i = 0; i < (mNumSegments); i++) { sb.append(mIndices.get(i)); } sb.append(" "); return (sb.length()) + (mIndices.position()); }
private void wiredAudioDeviceConnected() { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, "wiredAudioDeviceConnected"); } setA2dpActiveDevice(null); setHfpActiveDevice(null); setHearingAidActiveDevice(null); }
@java.lang.Override public void onAudioDevicesAdded(android.media.AudioDeviceInfo[] addedDevices) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, "onAudioDevicesAdded"); } boolean hasAddedWiredDevice = false; for (android.media.AudioDeviceInfo deviceInfo : addedDevices) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, ((("Audio device added: " + (deviceInfo.getProductName())) + " type: ") + (deviceInfo.getType()))); } if (isWiredHeadset(deviceInfo)) { hasAddedWiredDevice = true; break; } } if (hasAddedWiredDevice) { wiredAudioDeviceConnected(); } }
private boolean isWiredHeadset(android.media.AudioDeviceInfo deviceInfo) { switch (deviceInfo.getType()) { case android.media.AudioDeviceInfo.TYPE_WIRED_HEADSET : case android.media.AudioDeviceInfo.TYPE_WIRED_HEADPHONES : case android.media.AudioDeviceInfo.TYPE_USB_HEADSET : return true; default : break; } return false; }
@java.lang.Override public void onAudioDevicesRemoved(android.media.AudioDeviceInfo[] removedDevices) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, "onAudioDevicesRemoved"); } boolean wasWiredAudioDeviceRemoved = false; for (android.media.AudioDeviceInfo deviceInfo : removedDevices) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, ((("Audio device removed: " + (deviceInfo.getProductName())) + " type: ") + (deviceInfo.getType()))); } if (isWiredHeadset(deviceInfo)) { wasWiredAudioDeviceRemoved = true; break; } } if (!wasWiredAudioDeviceRemoved) { return; } boolean hasConnectedWiredDevice = false; android.media.AudioDeviceInfo[] devices = mAudioManager.getDevices(AudioManager.GET_DEVICES_OUTPUTS); for (android.media.AudioDeviceInfo deviceInfo : devices) { if (isWiredHeadset(deviceInfo)) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, ((("Found connected wired device: " + (deviceInfo.getProductName())) + " type: ") + (deviceInfo.getType()))); } hasConnectedWiredDevice = true; break; } } if (!hasConnectedWiredDevice) { allWiredAudioDevicesDisconnected(); } }
@org.junit.Test public void wiredAudioDeviceConnected_setAllActiveDevicesNull() { a2dpConnected(mA2dpDevice); headsetConnected(mA2dpHeadsetDevice); verify(mA2dpService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mHeadsetDevice); }
public void testPlaySmallBuffer() throwsjava.lang.Exception { finaljava.lang.String TEST_NAME = "testPlaySmallBuffer"; android.media.cts.AudioTrackLatencyTest.TestSetup setup = new android.media.cts.AudioTrackLatencyTest.TestSetup(); android.media.AudioTrack track = setup.createTrack(); int framesWrittenTotal = setup.primeAudioTrack(TEST_NAME); int position1 = track.getPlaybackHeadPosition(); assertEquals((TEST_NAME + " initial position", 0, position1); track.play(); final long MAX_TIME_TO_START_MSEC = 500; long giveUpAt = (java.lang.System.currentTimeMillis()) + MAX_TIME_TO_START_MSEC; int position2 = track.getPlaybackHeadPosition(); while ((position1 == position2) && ((java.lang.System.currentTimeMillis()) < giveUpAt)) {java.lang.Thread.sleep(20); position2 = track.getPlaybackHeadPosition(); } assertTrue(((TEST_NAME + " did it start?, position after start = " + position2), (position2 > position1)); final int several = 4;java.lang.Thread.sleep((((several * framesWrittenTotal) * (android.media.cts.AudioTrackLatencyTest.MILLIS_PER_SECOND)) / (setup.sampleRate))); position2 = track.getPlaybackHeadPosition(); assertEquals((TEST_NAME + " did it play all the data?"), framesWrittenTotal, position2); track.release(); }
@android.test.suitebuilder.annotation.MediumTest public void testOpportunisticScan() { if (!(isBleSupported())) { return; } android.bluetooth.le.ScanSettings opportunisticScanSettings = new android.bluetooth.le.ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_OPPORTUNISTIC).build(); android.bluetooth.cts.BluetoothLeScanTest.BleScanCallback emptyScanCallback = new android.bluetooth.cts.BluetoothLeScanTest.BleScanCallback(); mScanner.startScan(java.util.Collections.<android.bluetooth.le.ScanFilter>emptyList(), opportunisticScanSettings, emptyScanCallback); sleep(android.bluetooth.cts.BluetoothLeScanTest.SCAN_DURATION_MILLIS); assertTrue(emptyScanCallback.getScanResults().isEmpty()); android.bluetooth.cts.BluetoothLeScanTest.BleScanCallback regularScanCallback = new android.bluetooth.cts.BluetoothLeScanTest.BleScanCallback(); android.bluetooth.le.ScanSettings regularScanSettings = new android.bluetooth.le.ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY).build();java.util.List<android.bluetooth.le.ScanFilter> filters = newjava.util.ArrayList<>(); android.bluetooth.le.ScanFilter filter = createScanFilter(); if (filter!= null) { filters.add(filter); } else { android.util.Log.d(android.bluetooth.cts.BluetoothLeScanTest.TAG, "No appropriate filter can be set"); } mScanner.startScan(filters, regularScanSettings, regularScanCallback); sleep(android.bluetooth.cts.BluetoothLeScanTest.SCAN_DURATION_MILLIS); assertTrue("Expected scan results shouldn't be empty", (!(emptyScanCallback.getScanResults().isEmpty()))); mScanner.stopScan(regularScanCallback); sleep(1000); emptyScanCallback.clear(); sleep(android.bluetooth.cts.BluetoothLeScanTest.SCAN_DURATION_MILLIS); assertTrue("Expected scan results shouldn't have scan results", (!(emptyScanCallback.getScanResults().isEmpty()))); }
java.util.List<android.content.pm.PermissionInfo> loadExpectedPermissions(int androidManifestId) throwsjava.lang.Exception {java.util.List<android.content.pm.PermissionInfo> permissions = newjava.util.ArrayList<>(); try (java.io.InputStream in = getContext().getResources().openRawResource(androidManifestId)) { org.xmlpull.v1.XmlPullParser parser = android.util.Xml.newPullParser(); parser.setInput(in, null); final int outerDepth = parser.getDepth(); int type; while (((type = parser.next())!= (org.xmlpull.v1.XmlPullParser.END_DOCUMENT)) && ((type!= (org.xmlpull.v1.XmlPullParser.END_TAG)) || ((parser.getDepth()) > outerDepth))) { if ((type == (org.xmlpull.v1.XmlPullParser.END_TAG)) || (type == (org.xmlpull.v1.XmlPullParser.TEXT))) { continue; } if (android.permission2.cts.PermissionPolicyTest.TAG_PERMISSION.equals(parser.getName())) { android.content.pm.PermissionInfo permissionInfo = new android.content.pm.PermissionInfo(); permissionInfo.name = parser.getAttributeValue(null, android.permission2.cts.PermissionPolicyTest.ATTR_NAME); permissionInfo.group = parser.getAttributeValue(null, android.permission2.cts.PermissionPolicyTest.ATTR_PERMISSION_GROUP); permissionInfo.protectionLevel = android.permission2.cts.PermissionPolicyTest.parseProtectionLevel(parser.getAttributeValue(null, android.permission2.cts.PermissionPolicyTest.ATTR_PROTECTION_LEVEL)); permissions.add(permissionInfo); } else { android.util.Log.e(android.permission2.cts.PermissionPolicyTest.LOG_TAG, ("Unknown tag " + (parser.getName()))); } } } return permissions; }
@org.junit.Test public void testUnbondDevice_disconnectBeforeUnbond() { android.bluetooth.BluetoothDevice device = getTestDevice(0); org.junit.Assert.assertTrue(mHeadsetService.connect(device)); verify(mObjectsFactory).makeStateMachine(device, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mAdapterService, mNativeInterface, mSystemInterface); verify(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectHfp(device); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTED, device); mHeadsetService.messageFromNative(connectedEvent); try {java.lang.Thread.sleep(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS); } catch (java.lang.InterruptedException exception) { org.junit.Assert.fail("Interrupted while waiting for callback to disconnected state"); } doReturn(BluetoothDevice.BOND_NONE).when(mAdapterService).getBondState(eq(device)); android.content.Intent unbondIntent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_BOND_STATE_CHANGED); unbondIntent.putExtra(BluetoothDevice.EXTRA_BOND_STATE, BluetoothDevice.BOND_NONE); unbondIntent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); android.support.test.InstrumentationRegistry.getTargetContext().sendBroadcast(unbondIntent); verify(mObjectsFactory, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).destroyStateMachine(mStateMachineArgument.capture()); org.junit.Assert.assertEquals(device, mStateMachineArgument.getValue().getDevice()); }
private void startVoiceRecognitionFromHf(android.bluetooth.BluetoothDevice device) { com.android.bluetooth.hfp.HeadsetStackEvent startVrEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_VR_STATE_CHANGED, HeadsetHalConstants.VR_STATE_STARTED, device); mHeadsetService.messageFromNative(startVrEvent); verify(mSystemInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).activateVoiceRecognition(); mHeadsetService.startVoiceRecognition(device); verify(mAudioManager, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).setParameters("A2dpSuspended=true"); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).atResponseCode(device, HeadsetHalConstants.AT_RESPONSE_OK, 0); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectAudio(device); verifyNoMoreInteractions(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)); }
@org.junit.Test public void testVoiceRecognition_SingleHfInitiatedSuccess() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); startVoiceRecognitionFromHf(device); }
@org.junit.Test public void testVoiceRecognition_SingleHfInitiatedFailedToActivate() { when(mSystemInterface.activateVoiceRecognition()).thenReturn(false); android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); com.android.bluetooth.hfp.HeadsetStackEvent startVrEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_VR_STATE_CHANGED, HeadsetHalConstants.VR_STATE_STARTED, device); mHeadsetService.messageFromNative(startVrEvent); verify(mSystemInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).activateVoiceRecognition(); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).atResponseCode(device, HeadsetHalConstants.AT_RESPONSE_ERROR, 0); verifyNoMoreInteractions(mSystemInterface); verifyZeroInteractions(mNativeInterface); verifyZeroInteractions(mAudioManager); }
@org.junit.Test public void testVoiceRecognition_SingleHfInitiatedTimeout() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); com.android.bluetooth.hfp.HeadsetStackEvent startVrEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_VR_STATE_CHANGED, HeadsetHalConstants.VR_STATE_STARTED, device); mHeadsetService.messageFromNative(startVrEvent); verify(mSystemInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).activateVoiceRecognition(); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.START_VR_TIMEOUT_WAIT_MILLIS)).atResponseCode(device, HeadsetHalConstants.AT_RESPONSE_ERROR, 0); verifyNoMoreInteractions(mSystemInterface); verify(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)); verifyNoMoreInteractions(mNativeInterface); verifyZeroInteractions(mAudioManager); }
@org.junit.Test public void testVoiceRecognition_MultiAgInitiatedSuccess() { android.bluetooth.BluetoothDevice deviceA = getTestDevice(0); connectHfpDevice(deviceA); android.bluetooth.BluetoothDevice deviceB = getTestDevice(1); connectHfpDevice(deviceB); org.junit.Assert.assertEquals(deviceA, mHeadsetService.getActiveDevice()); org.junit.Assert.assertTrue(mHeadsetService.setActiveDevice(deviceB)); org.junit.Assert.assertEquals(deviceB, mHeadsetService.getActiveDevice()); startVoiceRecognitionFromAg(); com.android.bluetooth.hfp.HeadsetStackEvent startVrEventA = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_VR_STATE_CHANGED, HeadsetHalConstants.VR_STATE_STARTED, deviceA); mHeadsetService.messageFromNative(startVrEventA); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).atResponseCode(deviceA, HeadsetHalConstants.AT_RESPONSE_ERROR, 0); verifyNoMoreInteractions(mNativeInterface); }
@org.junit.Test public void testVoiceRecognition_SingleAgStopSuccess() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); startVoiceRecognitionFromAg(); org.junit.Assert.assertTrue(mHeadsetService.stopVoiceRecognition(device)); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).stopVoiceRecognition(device); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).disconnectAudio(device); verify(mAudioManager, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).setParameters("A2dpSuspended=false"); verifyNoMoreInteractions(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)); }
@org.junit.Test public void testVoiceRecognition_SingleAgInitiatedSuccess() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); startVoiceRecognitionFromAg(); }
private void startVoiceRecognitionFromAg() { android.bluetooth.BluetoothDevice device = mHeadsetService.getActiveDevice(); org.junit.Assert.assertNotNull(device); org.junit.Assert.assertTrue(mHeadsetService.startVoiceRecognition(device)); verify(mAudioManager, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).setParameters("A2dpSuspended=true"); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).startVoiceRecognition(device); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectAudio(device); verifyNoMoreInteractions(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)); }
@org.junit.Test public void testConnectFromApi() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(java.util.Collections.singletonList(device), mHeadsetService.getDevicesMatchingConnectionStates(new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTED })); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); }
@org.junit.Test public void testVoiceRecognition_SingleHfStopSuccess() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); startVoiceRecognitionFromHf(device); com.android.bluetooth.hfp.HeadsetStackEvent stopVrEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_VR_STATE_CHANGED, HeadsetHalConstants.VR_STATE_STOPPED, device); mHeadsetService.messageFromNative(stopVrEvent); verify(mSystemInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).deactivateVoiceRecognition(); mHeadsetService.stopVoiceRecognition(device); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).atResponseCode(device, HeadsetHalConstants.AT_RESPONSE_OK, 0); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).disconnectAudio(device); verify(mAudioManager, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).setParameters("A2dpSuspended=false"); verifyNoMoreInteractions(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)); }
@org.junit.Test public void testGetHeadsetService() { org.junit.Assert.assertEquals(mHeadsetService, com.android.bluetooth.hfp.HeadsetService.getHeadsetService()); android.bluetooth.BluetoothDevice device = getTestDevice(0); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, mHeadsetService.getConnectionState(device)); org.junit.Assert.assertEquals(BluetoothHeadset.STATE_AUDIO_DISCONNECTED, mHeadsetService.getAudioState(device)); }
private void connectHfpDevice(android.bluetooth.BluetoothDevice device) { org.junit.Assert.assertTrue(mHeadsetService.connect(device)); verify(mObjectsFactory).makeStateMachine(device, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mAdapterService, mNativeInterface, mSystemInterface); verify(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectHfp(device); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, mHeadsetService.getConnectionState(device)); org.junit.Assert.assertEquals(java.util.Collections.singletonList(device), mHeadsetService.getDevicesMatchingConnectionStates(new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTING })); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_SLC_CONNECTED, device); mHeadsetService.messageFromNative(connectedEvent); try {java.lang.Thread.sleep(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS); } catch (java.lang.InterruptedException exception) { org.junit.Assert.fail(("Interrupted while waiting for callback for " + device)); } org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTED, mHeadsetService.getConnectionState(device)); org.junit.Assert.assertThat(mHeadsetService.getDevicesMatchingConnectionStates(new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTED }), org.hamcrest.CoreMatchers.hasItem(device)); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); }
@org.junit.Test public void testVoiceRecognition_SingleAgInitiatedDeviceNotConnected() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); android.bluetooth.BluetoothDevice wrongDevice = getTestDevice(1); org.junit.Assert.assertFalse(mHeadsetService.startVoiceRecognition(wrongDevice)); verifyNoMoreInteractions(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)); verifyZeroInteractions(mAudioManager); }
javajava.lang.String buildIntegerPatternString() {java.lang.String radixDigits = digits.substring(0, radix);java digit = ("((?i)[" + radixDigits) + "]|\\p{ Digit})";java.lang.String nonZeroRadixDigits = ((("((?i)[" + (digits.substring(1, radix))) + "]|(") + (non0Digit)) + "))";java.lang.String groupedNumeral = (((((((((" + nonZeroRadixDigits) + digit) + "?") + digit) + "?(") + (groupSeparator)) + digit) + digit) + ")+)";java.lang.String numeral = ((("((" + digit) + "++)|") + groupedNumeral) + ")";java.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava.lang.Stringjava privatejava privatejava privatejava.lang.String buildIntegerPatternString() {java.lang.String radixDigits = digits.substring(0, radix);java.lang.String digit = ("((?
public staticjava.lang.String readFile(java.io.File f) { byte[] tmp = new byte[((int) (f.length()))]; try (java.io.FileInputStream fis = newjava.io.FileInputStream(f)) { int pos = 0; while (pos!= (tmp.length)) { int read = fis.read(tmp, pos, ((tmp.length) - pos)); if (read == (-1)) { throw newjava.io.IOException("Unexpected EOF"); } pos += read; } return newjava.lang.String(tmp); } catch (java.lang.Exception e) { throw newjava.lang.RuntimeException(e); } }
@java.lang.Override public void onResume() { if ((mBluetoothAdapter)!= null) { final android.bluetooth.BluetoothProfile profile = mBluetoothPan.get(); if (profile == null) { mBluetoothAdapter.getProfileProxy(mContext, mBtProfileServiceListener, BluetoothProfile.PAN); } } if ((mAirplaneModeObserver) == null) { mAirplaneModeObserver = new com.android.settings.network.TetherPreferenceController.SettingObserver(); } if ((mTetherReceiver) == null) { mTetherReceiver = new com.android.settings.network.TetherPreferenceController.TetherBroadcastReceiver(); } mContext.registerReceiver(mTetherReceiver, new android.content.IntentFilter(android.net.ConnectivityManager.ACTION_TETHER_STATE_CHANGED)); mContext.getContentResolver().registerContentObserver(mAirplaneModeObserver.uri, false, mAirplaneModeObserver); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { mNetwork = new android.net.Network(0); mServer = new android.net.SntpClientTest.SntpTestServer(); mClient = new android.net.SntpClient(); }
public void setAbiBitness(java.lang.String bitness) { mAbiBitness = bitness; }
private void addVtsRunnerOutputFile(java.io.File logFile) {java.lang.String fileName = logFile.getName(); com.android.tradefed.result.LogDataType type; if (fileName.endsWith(".html")) { type = com.android.tradefed.result.LogDataType.HTML; } else if (fileName.startsWith("logcat")) { type = com.android.tradefed.result.LogDataType.LOGCAT; } else if ((fileName.startsWith("bugreport")) && (fileName.endsWith(".zip"))) { type = com.android.tradefed.result.LogDataType.BUGREPORTZ; } else if ((fileName.endsWith(".txt")) || (fileName.endsWith(".log"))) { type = com.android.tradefed.result.LogDataType.TEXT; } else if (fileName.endsWith(".zip")) { type = com.android.tradefed.result.LogDataType.ZIP; } else { com.android.tradefed.log.LogUtil.CLog.w("Unknown output file type. Skipping %s", logFile); return; }java.lang.String outputFileName = ((((mTestModuleName) + "_") + fileName) + "_") + (mAbiBitness); com.android.tradefed.result.FileInputStreamSource inputSource = new com.android.tradefed.result.FileInputStreamSource(logFile); mListener.testLog(outputFileName, type, inputSource); }
