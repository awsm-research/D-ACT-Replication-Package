@java.lang.Override public void getIccSlotsStatus(android.os.Message result) { if ((mIccSlotStatus)!= null) { resultSuccess(result, mIccSlotStatus); } else { resultFail(result, null, new com.android.internal.telephony.CommandException(com.android.internal.telephony.CommandException.CommandException.Error.REQUEST_NOT_SUPPORTED)); } }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSanity() { assertNotNull(mUiccControllerUT.getUiccCard(0)); assertNull(mUiccControllerUT.getIccRecords(0, UiccController.APP_FAM_3GPP)); assertNull(mUiccControllerUT.getIccRecords(0, UiccController.APP_FAM_3GPP2)); assertNull(mUiccControllerUT.getIccRecords(0, UiccController.APP_FAM_3GPP2)); assertNull(mUiccControllerUT.getIccRecords(0, UiccController.APP_FAM_3GPP2)); assertNull(mUiccControllerUT.getIccFileHandler(0, UiccController.APP_FAM_IMS)); assertNull(mUiccControllerUT.getIccFileHandler(0, UiccController.APP_FAM_IMS)); }
@org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(this.getClass().getSimpleName()); doReturn(com.android.internal.telephony.uicc.UiccControllerTest.PHONE_COUNT).when(mTelephonyManager).getPhoneCount(); doReturn(com.android.internal.telephony.uicc.UiccControllerTest.PHONE_COUNT).when(mTelephonyManager).getSimCount(); replaceInstance(com.android.internal.telephony.uicc.UiccControllerTest.PHONE_COUNT).when(mInstance", null, null); mIccCardStatus.mApplications = new com.android.internal.telephony.uicc.IccCardApplicationStatus[]{ }; mIccCardStatus.mCdmaSubscriptionAppIndex = mImsSubscriptionAppIndex.mImsSubscriptionAppIndex = -1; mSimulatedCommands.setIccCardStatus(mIccCardStatus); mUiccCardStatus.setIccCardStatus(mIccCardStatus); mUiccControllerHandlerThread.start(); waitUntilReady(); com.android.internal.telephony.uicc.UiccControllerTestUtils.waitForMs(100); }
@java.lang.Override public void getIccSlotsStatus(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy!= null) { android.hardware.radio.V1_2.IRadio radioProxy = android.hardware.radio.V1_2.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IRadio.IO_VOICE, result, mRiljLogSource); if (com.android.internal.telephony.CommandException.RILJ_LOGD) { riljLog((((rr.serialString()) + " ") + (com.android.internal.telephony.CommandException.fromRilErrno(rr.mRequest)))); } try { radioProxy12.getSimSlotsStatus(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getIccSlotStatus", e); } } }
private void downloadData(android.os.Bundle extras, android.content.Context context) { if (extras == null) return; java.lang.String url = extras.getString(com.android.tests.connectivity.uid.ConnectivityTestActivity.URL); android.util.Log.e(com.android.tests.connectivity.uid.ConnectivityTestActivity.TAG, ("URL is not: " + url)); checkAndGrantFile(context, " + url)); checkAndGrantFile(context); }
public void onResume() { super.onResume(); boolean conn = checkNow(this.getApplicationContext()); android.content.Intent returnIntent = new android.content.Intent(); returnIntent.putExtra(com.android.tests.connectivity.uid.ConnectivityTestActivity.RESULT, conn); setResult(com.android.tests.uid.uid.RESULT_OK, returnIntent); setResult(com.android.tests.uid.uid.RESULT_OK, (this.getApplicationContext()))); android.os.Bundle extras = getIntent().getExtras(); downloadData(extras, this.getApplicationContext()); finish(); }
private boolean isRunningInVideoState(android.content.res.Configuration configuration) { final android.content.Context context = android.support.test.InstrumentationRegistry.getTargetContext(); if (((context.getResources().getConfiguration().uiMode) & (android.content.res.Configuration.UI_MODE_TYPE_MASK)) == (android.content.res.Configuration.UI_MODE_TYPE_AVAUTH_HEADSET)) { return true; } return false; }
protected boolean supportsKeyguard() throws com.android.server.device.DeviceNotAvailableException { return (isUiModeLockedToVrHeadset()? mUiModeLockedToVrHeadset() : if (!(isUiModeLockedToVdHeadset())) { return false; } }
private void testChangeFontScale(java.lang.String activityName, boolean releaunch) throws java.lang.Exception { java.lang.String logSeparator = clearLogcat(); launchActivity(activityName); final java.lang.String[] waitForActivitiesVisible = new java.lang.String[]{ activityName }; mAmWmState.computeState(mDevice, waitForActivitiesVisible); setFontScale(1.0F); mAmWmState.computeState(mDevice, waitForActivitiesVisible); final int densityDpi = getGlobalDensityDensityDensityDensityDpi(activityName, logSeparator); for (float fontScale = 0.85F; fontScale <= 1.15F) { logSeparator = clearLogcat(); setFontScale(activityName, (relaunchName, 0), (relaunch? 1 : 0), (relaunch? 1 : 1), logSeparator); assertExpectedFontPixelSize(activityName, (relaunch? 1 : 0), logSeparator); assertExpectedFontPixelSize(activityName, android.server.cts.ActivityManagerConfigChangeTests.SCANPixelsToPixels(android.server.cts.ActivityManagerConfigChangeTests.EXPECTED_FONT_SIZE_SP, densityDpi), logSeparator); } }
private int getGlobalDensityDpi(java.lang.String activityName, java.lang.String logSeparator) throws java.lang.Exception { final java.lang.String[] lines = getDeviceLogsForComponent(activityName, logSeparator); for (int i = (lines.length) - 1; i >= 0; i--) { final java.lang.String line = lines[i].trim(); final java.util.regex.Matcher matcher = android.server.cts.ActivityManagerConfigChangeTests.sDeviceDensityPattern.matcher(line); if (matcher.matches()) { return java.lang.Integer.parseInt(matcher.group(2)); } } fail(("Invalid fontActivityDpi reported from activity " + activityName)); return -1; }
@android.test.annotations.Presubmit public void testFullscreenAppOrientationRequestsRequestsRequestsRequests() throws java.lang.Exception { java.lang.String logActivity(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME); mAmWmState.assertVisibility(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, true); mAmWmState.assertVisibility(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, true); mAmWmState.assertVisibility(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, true); logSeparator = clearLogcat(); launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.LANDSCAPE_ACTIVITY_NAME, true); logSeparator = clearLogcat(); launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.LANDSCAPE_ACTIVITY_NAME, true); logSeparator = clearLogcat(); launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.LANDSCAPE_ACTIVITY_NAME, true); logSeparator = clearLogcat(); launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, true); logSeparator = clearLogcat(); launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, true); logSeparator = clearLogcat(); launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, true); mAmWmState.assertVisibility(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, true); logSeparator = clearLogcat(); launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, true); assertEquals("Instrumentation activity should be in longitudinal 1, initialReportedSizes.orientation"); }
public void test_23831() throws java.lang.Exception { byte[] bytes = new byte[]{ ((byte) (245)), ((byte) (169)), ((byte) (254)), ((byte) (254)), ((byte) (254)), ((byte) (33)) }; byte[] expected = new byte[8]; java.nio.charset.StandardCharset.forName("UTF-8").new java.nio.charset.CodingErrorAction(java.nio.charset.CodingErrorAction.REPLACE); assertEquals(expected, decoder.decode(java.nio.ByteBuffer.wrap(bytes)).toString()); assertEquals(expected, decoder.decode(java.nio.ByteBuffer.wrap(bytes)); }
public void testAssistantStackZOrder() throws java.lang.Exception { if ((!(supportsPip())) || (!(supportsSplitScreenMultiWindow()))) return; launchActivity(android.server.cts.ActivityStackTests.PIP_ACTIVITY, android.server.cts.ActivityStackTests.EXTRA_ACTIVITY, android.server.cts.PINNED_STACK_PIP, "true"); mAmWmState.waitForValidState(mDevice, android.server.cts.PINNED_STACK_ID); mAmWmState.assertContainsStack("Must contain pinned stack.", android.server.cts.PINNED_STACK_ID); launchActivityOnDisplay(android.server.cts.ActivityStackTEST_STACK_ID); launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertContainsStack("Must contain docked stack.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertContainsStack("Must contain docked stack.", android.server.cts.DOCKED_STACK_STACK_SESSION); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityStackTests.ASSISTANT_ACTIVITY, android.server.cts.DOCK_STACK_ID); assertAssistantStackExists(); mAmWmState.assertFrontStack("STACK stack should be focused."); android.server.cts.PINNED stackStack("STACK stack should be focused."); android.server.cts.PINNED stackStack("STACK stack should be focused."); android.server.cts.ISSANT_STACK_ID); disableAssistant(); }
public void setUp() throws java.lang.Exception { super.setUp(); enableActivity(android.server.cts.ActivityStackTests.LAUNCH_ASSISTANT_ACTIVITY_FROM_SESSION); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityStackTests.LAUNCH_ASSISTANT_ACTIVITY, android.server.cts.ActivityStackTests.ASSISTANT_ACTIVITY, android.server.cts.ActivityStackTests.ASSISTANT_STACK_ID); android.server.cts.ActivityStackTrace.ActivityStack js = mAmWmState.getAmState().getStack(android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerState.ASSISTANT_DISPLAY_DISPLAY_ID); android.server.cts.ActivityManagerState.ASSISTANT_DISPLAY = mAmWmDisplayId; disableAssistant(); disableAssistant(); }
public void testAssistantStackFinishToPreviousApp() throws java.lang.Exception { launchActivityOnDisplay(android.server.cts.ActivityStackTests.TEST_ACTIVITY, android.server.cts.ActivityStackTests.ASSISTANT_DISPLAY); enableActivity(); launchActivity(); launchActivity(android.server.cts.ActivityStackTests.LAUNCH_ASSISTANT_ACTIVITY, android.server.cts.ActivityStackTests.EXTRA_ACTIVITY, android.server.cts.ActivityStackTests.EXTRA_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityStackTests.TEST_ACTIVITY, android.server.cts.ActivityStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertFrontStack("Must be stopped", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertFrontStack("STACK stack should be stopped."); mAmWmState.assertFrontStack("STACK stack should be stopped."); android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); }
public void testAssistantStackLaunchNewTaskWithDockedStack() throws java.lang.Exception { if (!(supportsSplitScreenMultiWindowMode())) return; launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityStackTests.DOCKED_DISPLAY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsStack("Must contain fullscreen stack.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertContainsStack("Must contain docked stack.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); android.server.cts.DOCKED_STACK_ID); enableAssistant(); assertAssistantStackCanLaunchAndReturnFromNewTask(); disableAssistant(); }
public void testSetVrThreadAPISuccess() throws java.lang.Throwable { if (mIsVrHeadset) { return; } setIntent(1, 1, 0, 0); android.content.ComponentName requestedComponent = new android.content.ComponentName(mContext, com.android.cts.verifier.MockVrListenerService.class); Settings.Secure.putString(mContext.getContentResolver(), android.vr.cts.VrListenerService.ENABLED_LISTENERS, requestedComponent.flattenToString()); mActivity = getActivity(); assertTrue(mActivity.waitForFrameDrawn()); if (mActivity.waitForFrameDrawn()); if (mActivity.getPackageManager().hasSystemFeature(PackageManager.FEATURE_SERVICE)) { int policy = 0; mActivity.setVrModeEnabled(true, requestedComponent); vr_thread = java.lang.Process.myTid(); mActivityManager = ((android.app.ActivityManager) (mContext.getThreadScheduler(Context.ACTIVITY_SERVICE))); policy = ((android.app.cts.VrSetFULL policy) | (android.vr.cts.V1_FIFO) | (android.vr_script_thread))); policy = ((int) (java.lang.Process.getThreadScheduler(vr_thread))); android.util.Log.e(android.vr.cts.VrSetFULL_RESET_ON_FORK)), policy); policy = ((int) (java.lang.Process.getThreadScheduler(vr_thread))); android.util.Log.e(android.vr.cts.VrSetFULL_FIFO) | (android.vr.cts.V1_FIFO_RESET_FORK)), policy); } }
public void testSetVrThreadAPIFailure() throws java.lang.Throwable { if (mIsVrHeadset) { return; } setIntent(1, 1, 0, 0); android.content.ComponentName requestedComponent = new android.content.ComponentName(mContext, com.android.cts.verifier.MockVrListenerService.class); Settings.Secure.putString(mContext.getContentResolver(), android.vr.cts.VrListenerService.ENABLED_LISTENERS, requestedComponent.flattenToString()); mActivity = getActivity(); assertTrue(mActivity.waitForFrameDrawn()); if (mActivity.waitForFrameDrawn()) { int policy = 0; mActivity.setVrModeEnabled(false, requestedComponent); vr_thread = java.lang.Process.myTid(); mActivityManager = ((android.app.ActivityManager) (mContext.getSystemService(Context.ACTIVITY_SERVICE))); mActivityManager.setVrThread(vr_thread); policy = ((int) (java.lang.Process.getThreadScheduler(vr_thread))); android.util.Log.e(android.vr.cts.VrSetFIFOThreadTest.TAG, ("Invalid policy: " + policy)); assertEquals(android.vr.cts.VrSetFULL, policy); } }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); mContext = getInstrumentation().getTargetContext(); mOldVrListener = Settings.Secure.getString(mContext.getContentResolver(), android.os.SystemProperties.ENABLED_GR_LISTENERS); mIsVrHeadset = ("1".equals(android.os.cts.VrSetFIFOThreadTest.EVENT_STANDALONE_PROPERTY, "0")))? true : false; }
@com.googlecode.android_scripting.rpc.Rpc(description = "Get network stats - Rx bytes for UID") public long connectivityQueryDetailsForUidRxBytes(java.lang.String subscriberId, java.lang.Long startTime, java.lang.Long endTime, java.lang.Long endTime, java.lang.Integer uid, java.lang.Integer uid, java.lang.Integer uid, java.lang.Integer uid, java.lang.Integer uid, java.lang.Integer uid, java.lang.Integer uid, java.lang.Integer uid, java.lang.Integer uid, java.lang.Integer cbBytes) { long rxBytes = 0; android.app.usage.NetworkStats.Bucket buckets = new android.app.usage.NetworkStats.Bucket(); while ((netStats.hasNextBucket()) && (netStats.getNextBucket(bucket))) { android.app.usage.NetworkStats.Bucket buckets = new android.app.usage.NetworkStats.Bucket(); while ((netStats.hasNextBucket()) && (netStats.getNextBucket(bucket))) rxBytes.getRxBytes(); netStats.close(); return rxBytes; } }
@com.googlecode.android_scripting.rpc.Rpc(description = "Get network stats for UID") public long connectivityQueryDetailsForUid(java.lang.String subscriberId, java.lang.Long startTime, java.lang.Long startTime, java.lang.Long endTime, java.lang.Integer uid, java.lang.Integer uid, java.lang.Integer connType) throws android.os.RemoteException, java.lang.SecurityException { android.app.usage.NetworkStats netStats = mNetStatsManager.queryDetailsForUid(connType, subscriberId, startTime, endTime, uid); long totalData = 0; android.app.usage.NetworkStats.Bucket buckets = new android.app.usage.NetworkStats.Bucket(); while ((netStats.hasNextBucket()) && (netStats.getNextBucket(bucket))) { java.lang.System.out.println("Rpc: " + (netStats.getRxBytes()) + (netStats.getRxBytes()); netStats.close(); } return totalData; }
@com.googlecode.android_scripting.rpc.Rpc(description = "Launch activity for result with result") public android.content.Intent launchForResultWithIntent(@com.googlecode.android_scripting.rpc.RpcParameter(name = "intent") android.content.Intent intent, @com.googlecode.android_scripting.rpc.RpcParameter(name = "extras") @com.googlecode.android_scripting.rpc.RpcOptional org.json.JSONObject extras) throws org.json.JSONException { if (extras!= null) { return mAndroidFacade.startActivityForResult(extras, intent); } return mAndroidFacade.startActivityForResult(extras, intent); }
private boolean verifyWithDomainNamePattern(java.lang.String hostname, java.lang.String pattern) { libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubSSLSession session = new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubSSLSession(); session.peerCertificates = new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate((("cn=\"" + pattern) + "\"")) }; boolean resultWhenPatternInCn = verifier.verify(hostname, session); session.peerCertificates = new java.security.cert.Certificate[]{ new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate("ou=test").addSubjectAlternativeName(libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME, pattern) }; boolean resultWhenPatternInSubjectAltName = verifier.verify(hostname, session); assertFalse("IgnoreCaseAlicate CN."); return resultWhenPatternInSubjectAltName; }
@java.lang.Override void test() { if ((status) == (READY)) { com.android.cts.verifier.MockListener.MockListener.snooze(mContext); status = RETEST; } else { com.android.cts.verifier.MockListener.MockListener.probeListenerStatus(mContext, new com.android.cts.verifier.notification.MockListener.MockListener.StatusCatcher() { @java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { logFail(); status = FAIL; } } }
@java.lang.Override void test() { com.android.cts.verifier.MockListener.MockListenerStatus.probeListenerStatus(mContext, new com.android.cts.verifier.notification.MockListener.StatusCatcher() { @java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if (((mNm.getEffectsSuppressListener()) == null) || (mNm.getEffectsSuppress().equals(com.android.cts.verifier.notification.NotificationListenerVerifierActivity.VR_NOTIFICATION_SERVICE))) { status = PASS; } else { status = FAIL; } } }); wait(); }
@java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if (((mNm.getEffectsSuppressListener(com.android.cts.verifier.notification.NotificationListenerVerifierActivity.EVENT_NOTIFICATION_SERVICE)) || (mNm.getEffectsSuppressWifiState().equals(com.android.cts.verifier.notification.NotificationListenerVerifierActivity.EVENT_NOTIFICATION_SERVICE)) { status = PASS; } else { status = FAIL; } } next(); }
@java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if (((mNm.getEffectsSuppressListener(com.android.cts.verifier.notification.NotificationListenerVerifierActivity.EVENT_NOTIFICATION_SERVICE)) || (mNm.getEffectsSuppressWifiState())) { status = PASS; } else { logFail(); status = RETEST; } } next(); }
protected boolean getLockedRecordsLoaded() { return ((mRecordsToLoad) == 0) && ((mRecordsReqReason) == (com.android.internal.telephony.uicc.IccRecords.LOCKED_RECORDS_REQ_REASON_PIN_LOCKED))) }
private void onLockedAllRecordsLoaded() { setSimLanguageFromEF(); if ((mLockedRecordsReqReason) == (LOCKED_RECORDS_REQ_REQ_REQ_REQ_PIN_LOCKED)) { mLockedRecordsLoadedRegordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } else { mNetworkLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } }
private void onLocked(int msg) { log("DBG) log("onLocked(msg, msg: EF_LI, EF_ICCID in locked state: EF_ICCID in locked state: EF_ICCID_REQ_REASON_LOCKED : LOCKED_REQ_REASON_LOCKED; loadEflyEfPl(); loadEfPl(); mFh.loadEFTransparent(com.android.internal.telephony.uicc.SIMRecords.EVENT_GET_ICCID_DONE)); (mRecordsToLoad)++; }
protected boolean getNetworkLockedRecordsLoaded() { return ((mRecordsToLoad) == 0) && ((mLockedRecordsReqReason)!= (com.android.internal.telephony.uicc.IccRecords.LOCKED_RECORDS_REQ_REASON_REASON_NETWORK_LOCKED)); }
private void onLocked(int msg) { log("DBG) log("onLocked(msg, msg: " + (msg == (com.android.internal.telephony.uicc.RuimRecords.EVENT_APP_LOCKED))? LOCKED_REQ_REQ_REASON_LOCKED : LOCKED_REQ_REASON_REASON_LOCKED : LOCKED_REQ_REASON_REASON_LOCKED; mRecordsToLoad)++; }
private void onLockedAllRecordsLoaded() { if (com.android.internal.telephony.uicc.IsimUiccRecords.DBG) log("onLockedAllRecordsLoaded: record record load complete"); if ((mLockedRecordsReqReason) == (LOCKED_RECORDS_REQ_REASON_LOCKED)) { mLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } else { mNetworkLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null)); } }
private void onLockedAllRecordsLoaded(int recordRecordsLoaded) { if ((mLockedRecordsReqReason) == (LOCKED_RECORDS_REQ_REQ_REASON_LOCKED) { mLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } else { mNetworkLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } }
public void setEmergencyCall(boolean flag) { mIsEmergencyCall = false; }
@java.lang.Override public void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, android.os.Message result) { com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance().setupDataCall(radioTechnology, dataProfile, isRoaming, allowRoaming, result); if ((mDcResponse) == null) { try { mDcResponse = new android.telephony.data.DataCallResponse(0, (-1), 1, 2, "IP", "IP", "IP", "IP", "IP", "IP", "IP", "rmnet_data7", java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress("12.54.54.54")), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress("98.54.54.32")), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress("11.54.54")), null, 1440); } catch (java.lang.Exception e) { } } if (mDcSuccess) { resultSuccess(result, mDcResponse, new java.lang.RuntimeException("DcResponse: " + (mDcResponse))), false, 1440); } else { resultFail(result, mDcResponse, new java.lang.RuntimeException("new java.lang.RuntimeException("Expected data call failed!")); } }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetLinkPropertiesInvalidAddress() throws java.lang.Exception { android.telephony.data.DataCallResponse response = new android.telephony.data.DataCallResponse(0, (-1), 1, 2, "IP", com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_IFNAME, java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress("224.224.224")); android.net.LinkProperties linkProperties = new android.net.LinkProperties(); assertEquals(SetupResult.ERR_UnacceptableParameter, setLinkProperties(response, linkProperties)); }
public void notifyCellularDataStateChanged(int state, boolean state);
public void notifyCellularDataChangedForPhoneId(int phoneId, int subId, boolean cdi) { if (!(checkNotifyPermission("notifyCellularDataChanged()"))) { return; } if (com.android.server.TelephonyRegistry.VDBG) { com.android.server.telephony.TelephonyRegistry.log(((("notifyCellularDataChangedForSubscriberPhoneID: subId=" + phoneId) + " cdi=") + cdi)); synchronized(mRecords) { if (validatePhoneId(phoneId)) { mMessageWaiting[phoneId] = cdi; for (com.android.server.TelephonyRegistry.Record r : mRecords) { if ((r.matchPhoneStateListenerEvent(PhoneStateListener.LISTEN_CELLULAR_DATA_INDICATOR)) && (idMatch(r.subId, subId, phoneId))) { try { r.callback.onCellularDataIndicatorChanged(cdi); } catch (android.os.RemoteException ex) { mRemoveList.add(r.binder); } } } } handleRemoveListLocked(); } }
@java.lang.Override public void notifyCellularDataStateChanged(com.android.internal.telephony.Phone sender, boolean state) { try { mRegistry.notifyCellularDataChangedForPhoneId(sender.getPhoneId(), sender.getSubId(), state); } catch (android.os.RemoteException ex) { } }
private void onSetUserDataEnabled(boolean enabled) { synchronized(mDataEnabledSettings) { if ((mDataEnabledSettings.isUserDataEnabled())!= enabled) { mDataEnabledSettings.setUserDataEnabled(enabled); if ((android.telephony.TelephonyManager.getDefault().getSimCount()) == 1) { Settings.Global.putInt(mResolver, Settings.Global.MOBILE_DATA, (enabled? 1 : 0)); } else { int phoneSubId = mPhone.getSubId(); Settings.Global.putInt(mResolver, ((Settings.Global.MOBILE_DATA) + phoneSubId), (enabled? 1 : 0)); } if ((!(getDataRoamingEnabled())) && (mPhone.getServiceState().getDataRoaming())) { if (enabled) { notifyOffApnsOfAvailability(Phone.REASON_DATA_ON); } else { notifyOffApnsOfAvailability(Phone.REASON_DATA_ON); } } mPhone.notifyCellularDataStateChanged(enabled); if (enabled) { reevaluateDataConnections(); onTrySetupData(Phone.REASON_DATA_ENABLED); } } } }
public void notifyCellularDataStateChanged(boolean state) { mNotifier.notifyCellularDataChanged(this, state); }
public void onCellularDataIndicatorChanged(boolean enabled) { send(android.telephony.PhoneStateListener.LISTEN_CELLULAR_DATA, 0, 0, enabled); }
public void broadcastDataEvent(boolean enabled) { if (android.telecom.server.wifi.WifiMonitor.P2pCellData.DISPLAY)) { return; } }
@java.lang.Override public void removeNetwork(int netId) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.CONNECTIVITY_INTERNAL, com.android.server.NetworkManagementService.TAG); try { mNetdService.networkDestroy(netId); } catch (android.os.ServiceSpecificException e) { android.util.Log.w(com.android.server.NetworkManagementService.TAG, (("removeNetwork("removeNetwork(" + netId) + " " ") + e)); throw e; } catch (android.os.RemoteException e) { android.util.Log.w(com.android.server.NetworkManagementService.TAG, (("removeNetwork("removeNetwork(" + netId) + " " ") + e)); throw e; } }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { final java.lang.String action = intent.getAction(); final java.lang.String iccState = intent.getStringExtra(IccCardConstants.INTENT_ICC_STATE); if (TelephonyIntents.ACTION_SIM_STATE_CHANGED.equals(action)) { if (IccCardConstants.INTENT_VALUE_ICC_LOADED.equals(iccState)) { sendEmptyMessage(com.android.internal.telephony.CarrierActionAgent.CARRIER_ACTION_RESET); java.lang.String mobileData = Settings.Global.MOBILE_DATA; if ((android.telephony.TelephonyManager.getDefault().getSimCount())!= 1) { mobileData = mobileData.Global.MOBILE_DATA_SETTINGS_CHANGED.equals(iccState); mSettings.obtain(Settings.Global.getUriFor(android.internal.telephony.CarrierActionAgent.EVENT_MODE_MODE_ON), com.android.internal.telephony.CarrierActionAgent.EVENT_APN_ABSENT.equals(Settings.Global.AIRPLANE_ABSENT_ABSENT.equals(iccState))); mSettingsObserver.obtain(Telephony.Carriers.CONTENT_URI, com.android.internal.telephony.CarrierActionAgent.EVENT_APN_ABSENT.equals(iccState, com.android.internal.telephony.CarrierActionAgent.EVENT_APN_ABSENT_ABSENT.equals(iccState))); mSettingsObserver.unobtainMessage(Telephony.Carrier.CONTENT_APN_ABSENT_ABSENT.equals(iccState))); } else if (IccCardConstants.INTENT_VALUE_ICC_ABSENT.equals(iccState)) { sendEmptyMessage(com.android.internal.telephony.CarrierActionAgent.CARRIER_ACTION_RESET); mSettingsObserver.unobtain(Telephony.CarrierAction_APN_RESET); mSettingsObserver.unobtainMessage(
@org.junit.Test public void testMacAddrTypes() { android.net.MacAddressTest.AddrTypeTestCase[] testcases = new android.net.MacAddressTest.AddrTypeTestCase[]{ android.net.MacAddressTest.TYPE_UNKNOWN, 0), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 0, 2, 4, 5), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 0, 2, 4, 5), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 2, 4, 4, 5), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNICAST, 1, 2, 4, 5, 6); android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 1, 4, 4, 5, 6); android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 1, 33, 66, 66); android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 1, 33, 33, 66, 66); android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 33, 33, 66, 66, 66); assertEquals(0, t.expectedType, got); assertEquals(msg, t.expectedType, got); assertEquals(msg, t.expectedType, got); assertEquals(msg, t.expectedType, got); assertEquals(msg, t.expectedType, got); if (msg.expectedType, got); assertEquals(msg, t.expectedType, got); assertEquals(msg, t.expectedType, got); }
@android.net.MacAddress.MacAddressType public int getAddressType() { if (equals(android.net.MacAddress.ALL_ZEROSOSOSOSOS_ADDRESS)) { return android.net.MacAddress.TYPE_UNSPECIFIED; } if (equals(android.net.MacAddress.BROADCAST_ADDRESS)) { return android.net.MacAddress.TYPE_UNICAST; } return android.net.MacAddress.TYPE_UNICAST; }
void expectAvailableCallbacks(com.android.server.ConnectivityServiceTest.MockNetworkAgent agent, boolean expectSuspended, int timeoutMs) { expectAvailableCallbacks(agent, expectSuspendedNetwork, false, timeoutMs); }
void expectAvailableCallbacks(com.android.server.ConnectivityServiceTest.MockNetworkAgent agent, boolean expectSuspended, boolean requireUnvalidated, int timeoutMs) { expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.AVAILABLE, agent, timeoutMs); if (expectSuspended) { expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.SUSPENDED, agent, timeoutMs); } if (requireUnvalidated) { expectCapabilitiesWithout(com.android.server.ConnectivityServiceTest.CallbackState.NETWORK_PROPERTIES, agent, timeoutMs); } expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.LINK_PROPERTIES, agent, timeoutMs); }
private boolean areAllRecordsLoaded() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app!= null) { com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if ((ir == null) || (!(ir.isLoaded()))) { return false; } } } return (mUiccApplications[0])!= null; }
private void registerUiccCardEvents() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app!= null) { app.registerForReady(this, com.android.internal.telephony.uicc.UiccApplication.EVENT_APP_READY, null); app.registerForNetworkLocked(this, com.android.internal.telephony.uicc.UiccApplication.EVENT_NETWORK_LOCKED, null); com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if (ir!= null) { if (ir!= null) { if (ir.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORDS_LOCKED, null); } } } } }
private boolean areAllApplicationsReady() { synchronized(mLock) { if ((app!= null) && (!(app.isReady()))) { return false; } } return (mUiccApplications[0])!= null; }
private void unregisterUiccCardEvents() { if ((mUiccCard)!= null) mUiccCard.unregisterForCarrierPrivilegeRulesLoaded(this); for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app!= null) { app.unregisterForReady(this); app.unregisterForReady(this); app.unregisterForRecordsLoaded(this); } } }
@java.lang.Override public void writeToParcel(android.os.Parcel out, int flags) { out.writeString(profileFile); if ((profileFd)!= null) { out.writeInt(1); profileFd.writeToParcel(out, flags); } else { out.writeInt(samplingInterval); out.writeInt((autoStopProfiler? 1 : 0)); out.writeInt((streamingOutput? 1 : 0)); out.writeInt((streamingOutput? 1 : 0)); out.writeString(agent); }
@java.lang.Override void onStart() { if (com.android.bips.discovery.MdnsDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MdnsDiscovery.TAG, ("onStart() " + (mServiceName))); com.android.bips.discovery.MdnsDiscovery.NsdServiceListener serviceListener = new com.android.bips.discovery.MdnsDiscovery.NsdServiceListener() { @java.lang.Override public void onStartDiscoveryFailed(java.lang.String s, int i) { } }; android.net.nsd.NsdManager nsdManager = mNsdResolveQueue.getNsdManager(); nsdManager.discoverServices(mServiceName, NsdManager.PROTOCOL_DNS_SD, serviceListener); mToStop.add(nsdManager.PROTOCOL_DNS_SD, serviceListener); mToStop.add(nsdManager.stopServiceDiscovery(serviceListener)); }
public com.android.bips.Discovery start(com.android.bips.Discovery.Listener listener) { mListeners.add(listener); if (!(mPrinters.isEmpty())) { mHandler.post(()).forEach(listener)); return; } start(); return () -> { mListeners.remove(listener); }
public com.android.bips.Stopping delay(int delay, java.lang.Runnable toRun) { mMainHandler.postDelayed(toRun, delay); return mMainHandler.removeCallbacks(toRun); }
@java.lang.Override public void onConnectionComplete(com.android.bip.discovery.DiscoveredPrinter printer) { if (printer!= null) { mPrintService.getMainHandler().post(() -> { mValidating.stop(); mPrintService.getP2pDiscovery().finish(); }); dismiss(); } else { fail(); } } }
@java.lang.Override public void onResolveFailed(final android.net.nsd.NsdServiceInfo info, final int errorCode) { mToStop.remove(this); mResolve = null; }
android.print.PrinterInfo createPrinterInfo(boolean knownGood) { if ((mCapabilities) == null) { if (com.android.bips.p2p2pUtils.isP2p(mDiscovered)) { android.print.PrinterInfo.Builder.Builder builder = new android.print.PrinterInfo.Builder.Builder(mPrinterId, mDiscoveredPrinter.name, android.print.Printercepting.name, android.print.Printercepting.name, android.print.Printercept.STATUS_IDLE).setIconResourceId(R.drawable.ic_printer).setDescription(R.drawable.ic_printer)); return builder.build(); } else if (!knownGood) { return null; } com.android.bips.discovery.DiscoveredPrinter printer = mPrintService.getDiscovery().getPrinter(mDiscoveredPrinter.getUri()); if (printer == null) return null; boolean idle = (mFound) && ((mFound)!= null); android.print.Printerfaces.Status.STATUS_UNAVAILABLE)).setIconResourceId(R.drawable.ic_PRIVILABLE)).setIconResourceId(R.drawable.ic_printer)); if ((mCapabilities)!= null) { android.print.PrinterCapabilitiesInfo.Builder.Builder.Builder.Builder.Builder.Builder.Builder.Builder.Builder.Builder.Builder.Builder.Builder.Builder.Builder.Builder capabilities = new android.print.print.PrinterCapabilitiesInfo.Builder(mPrintService, capabilitiesBuilder.drawable.ic_PROP_UNAVAILABLE)).setIconResourceId(mPrintService.ic_IDLE); if ((mCapabilities)!= null) { android.print.PrinterCapabilities.Builder.Builder.Builder.Builder.Builder.Builder.Builder.Builder capabilities = new android.print.print.Printerfaces(mPrinterId); mCapabilities.buildCapabilities(mPrintService, capabilitiesBuilder.build()); } return builder.build(); }
private com.android.bips.DiscoveredPrinter first(android.net.Uri printerUri) { for (com.android.bips.Discovery discovery : getChildren()) { com.android.bips.DiscoveredPrinter found = discovery.getPrinter(printerUri); if (found!= null) return found; } return null; }
public com.android.bips.util.StoppingSubscribe receiveBroadcasts(android.content.BroadcastReceiver receiver, java.lang.String... actions) { return new com.android.bips.util.StoppingReceiver(this, receiver, actions); }
private void stopAndClearAll() { for (com.android.bips.Stopping started : mStarted) { started.stop(); } mStarted.clear(); }
private void finish(boolean success, java.lang.String error) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, ((("Successful success=" + success) + " error=") + error)); if ((mDiscoveryTimeout)!= null) mDiscoveryTimeout.stop(); if ((mConnection)!= null) mConnection.stop(); mPrintService.close(); if (success) { mPrintJob.start(); mPrintJob.close(); } else { mPrintJob.fail(error); } mPrintJob.fail(error); }
void start(java.util.function.Consumer<com.android.bodes.Consumer<com.android.bluetooth.LocalPrintJob> callback) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, ("start(mPrintJob)) + ": ") + (mState))); return; } mPrintJob.start(); mPrintService.lockWifi(); mState = com.android.bips.LocalPrintJob.STATE_DISCOVERY; mCompleteConsumer = callback; mDiscovery = mPrintService.getDiscovery().start(this); mDiscoveryTimeout = mPrintService.getDiscovery().start(this); if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, "startDiscovery timeout"); if ((mState) == (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) { finish(false, mPrintService.getString(R.string.printerval_offline)); } }); }
public void removeSavedPrinter(android.net.Uri printerPath) { getChildren().stream().stream().filter((child) -> child!= (this)).getChild().trinterrupt(); }
@java.lang.Override @com.android.annotations.NonNull public java.util.Collection<com.android.bip.discovery.Discovery> getChildren() { return mDiscoveries.stream().flatMap((child) -> child.getChildren().stream()).collect(child); }
public java.lang.String getDescription(DiscoveredPrinter printer) { if ((com.android.bips.p2p.P2pUtils.isP2p(printer)) || (com.android.bips.p2p.P2pUtils.isOnConnectedInterface(this, printer))) { return getString(R.string.wifi_direct); } java.lang.String host = printer.path.getHost().replaceAll(":[0-9]+", ""); if (!(android.text.TextUtils.isEmpty(printer.location))) { return getString(R.string.printer_description, host, printer.location); } else { return host; } }
@java.lang.Override void onStop() { if (com.android.bips.Discovery.DEBUG) android.util.Log.d(com.android.bips.Discovery.TAG, ("stopStop() " + (mServiceName))); mToStop.clear(); }
@java.lang.Override void onStart() { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscoveryDiscovery.TAG, "onStart"); mCapabilitiesCache = getPrintService().getCapabilitiesCache(); mWifiMonitor = new com.android.bips.util.WifiMonitor(getPrintService(), (isConnected) -> { if (isConnected) { for (com.android.bips.discovery.DiscoveredPrinter printer : getSavedPrinterfaces()) { mCapabilitiesCache.request(printer, false, (capabilities!= null)) { printerFound(printer, (capabilities!= null)); } } } } else { allPrinterLost(); } }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { java.lang.String action = intent.getAction(); if (WifiP2pManager.WIFI_P_STATE_CHANGED_ACTION.equals(action)) { int state = intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE_ENABLED); if (com.android.bluetooth.p2p.WifiP2pDIFI_P2P_STATE_ENABLED)) { android.net.wifi.p2p.WifiP2pDeviceList list = intent.getParcelableExtra(WifiP2pManager.EXTRA_P_STATE_ENABLED); if (com.android.bluetooth.p2p.P2pManager.WIFI_P_P_STATE_CHANGED_ACTION.equals(action)) { android.net.wifi.p2p.WifiP2pDeviceList list = intent.getParcelableExtra(WifiP2pManager.EXTRA_P_P_DEVICE_LIST); java.util.Collection<android.net.wifi.p2p.WifiP2pDevice> newPeers = intent.getParcelableExtra(WifiP2pManager.EXTRA_P_P_DEVICE_LIST); java.util.Collection<android.net.wifi.p2p.WifiP2pDevice> newPeers = list.getDeviceList(); updatePeers(newPeers); if (newPeers.isEmpty()) { mP2pManager.stopPeers(mChannel, null); mP2pManager.stopPeerDiscovery(mChannel, null); mP2pManager.discoverPeerDiscovery(mChannel, null); } } } }
@java.lang.Override public void onStop() { if (com.android.bips.discovery.P2pDiscovery.DEBUG) android.util.Log.d(com.android.bluetooth.discovery.P2pDiscoveryInfo.TAG, "onStop()"); if ((mPeerDiscovery)!= null) { mPeerDiscovery = null; mPeerDiscovery = null; allPrinterrupt(); } }
public void addValidPrinter(com.android.bips.DiscoveredPrinter printer) { if (addSavedPrinter(printer)) { printerFound(printer); if (isStarted()) { printerFound(printer); if (isStarted()) { printerFound(printer); } } }
private static java.net.NetworkInterface toNetworkInterface(java.lang.String name) { if (name == null) return null; try { return java.net.NetworkInterface.getByName(name); } catch (java.net.SocketException e) { return null; } }
private static java.net.Inet4Address toInet4Address(android.net.Uri path) { if (!(com.android.bips.p2p.P2pUtils.IPv4_PATTERN.matcher(path))) return null; try { return ((java.net.InetAddress) (java.net.InetAddress.getByName(path.getHost()))); } catch (java.net.UnknownHostException ignored) { } return null; }
static boolean isOnInterface(java.net.NetworkInterface iface, java.net.Inet4Address address) { long addressLong = com.android.bips.p2p.P2pUtils.toLong(address); for (java.net.InterfaceAddress ifaceAddress : iface.getInterfaceAddresses()) { if (!(ifaceAddress.getAddress())) continue; java.net.Inet4Address networkAddress = ((java.net.Inet4Address) (ifaceAddress.getAddress())); java.util.BitSet bitSet = new java.util.BitSet(32); bitSet.set((32 - (ifaceAddress.getNetworkPrefixLength())), 32); long netMask = bitSet.toLongArray(); if (((com.android.bips.p2p2p.P2pUtils.toLong(networkAddress)) & netMask) == (addressLong & netMask)) { return true; } } return false; }
@java.lang.Override public boolean stop() { if (com.android.bluetooth.p2p.P2pDiscoveryProcedure.DEBUG) android.util.Log.d(com.android.bluetooth.p2p.P2pDiscoveryProvisionure.TAG, "stop()"); mBroadcasts.stop(); mBroadcastP2pManager.stop(); mP2pManager.stopPeerDiscovery(mChannel, null); }
@com.android.annotations.NonNull public java.util.Collection<com.android.bap.discovery.DiscoveredPrinter> getSavedPrinter() { return getChildren().filter(child) -> child!= (this)).flatMap().streamMap(child) -> child.getSavedPrinter(); }
private WifiP2pDevice(java.util.Collection<java.util.Collection<WifiP2pDevice> peers, java.lang.String address) { for (WifiP2pDevice found : peers) { if (found.deviceAddress.equals(address)) return found; } return null; }
private void updatePeers(java.util.Collection<android.net.wifi.p2p.WifiP2pDevice> newPeers) { java.util.List<android.net.wifi.p2p.WifiP2pDevice> oldPeers = new java.util.ArrayList(mPeers); mPeers.clear(); for (android.net.wifi.p2p.WifiP2pDevice peer : newPeers) { if (com.android.bips.p2p.WifiP2pDiscoveryProcedure.PRINTER_PATTERN.matcher(peer.primaryDeviceType).find()) { mPeers.add(peer); } } java.util.Set<java.lang.String> foundAddresses = new java.util.HashSet<>(); for (android.net.wifi.p2p.WifiP2pDevice peer : mPeers) { if ((old == null) || (!(old.equals(peer)))) { mListeners.add(peer.deviceAddress); android.net.wifi.p2p.WifiP2pDevice old = getDevice(oldPeers, peer.deviceAddress); if ((old == null) || (!(old.equals(peer)))) { mListeners.forPeerFound(peer, peer.onPeerLost(peer)); } } } for (android.net.wifi.p2p.WifiP2pDevice oldPeer : oldPeers) { if (!(foundAddresses.contains(oldPeer.deviceAddress))) { mListeners.forEach(oldPeer.contains(oldPeer.deviceAddress))) { if (!(foundAddresses.contains(oldPeer.deviceAddress))) { mListeners.forEach(oldPeer.contains(oldPeer.deviceAddress))) { mListeners.forEach(oldPeer); } } } }
@java.lang.Override public void onResume() { super.onResume(); if (com.android.bips.ui.FindP2pPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.FindP2pPrintersFragment.TAG, "onResume"); getActivity().setTitle(R.string.wifi_direct_printerfaces); getContext().bindService(new android.content.Intent(getContext(), com.android.bips.BuildService.class), this, Context.BIND_AUTO_CREATE); }
void handleCapabilities(android.net.Uri printerPath, com.android.bips.LocalPrinterCapabilities capabilities) { if (com.android.bips.discovery.LocalPrinterCapabilities capabilities) { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.TAG, ((("Capabilities " + printerPath) + " cap=") + capabilities)); if (capabilities == null) { if (mRequests.isEmpty()) { mFinalCallback.onNotFound(); } return; } mRequests.forEach(mCapabilitiesCacheCache::cancel); mRequests.clear(); android.net.Uri uuid = (android.text.TextUtils.isEmpty(capabilities.uuid))? null : android.net.Uri.parse(capabilities.uid); java.lang.String name = (android.text.TextUtils.isEmpty(capabilities.name))? printerPath.name; com.android.bips.discovery.DiscoveredPrinter resolvedPrinter = new com.android.bips.discovery.DiscoveredPrinter(uuid, name, printerPath, capabilities.location); if (capabilities.isSupported) { printerFound(resolvedPrinter, capabilities.isSupported); } } mFinalCallback.onFound(resolvedPrinter, capabilities.isSupported); }
@java.lang.Override public void onPeerFound(android.net.wifi.p2p.WifiP2pDevice peer) { if (com.android.bips.findP2pPrinterFragment.DEBUG) android.util.Log.d(com.android.bips.p2p.WifiP2pMonitor.TAG, ("onPeerFound: " + (com.android.bips.p2pMonitor.toString(peer)))); if ((mPrintService) == null) return;DiscoveredPrinter printer = com.android.bips.discovery.P2pDiscovery.toString(peer); for (DiscoveredPrinter prior : mPrintService.getP2pDiscovery().getSavedPrinters()) { if (printer.path.path.equals(printer.path)) return; } com.android.bips.ui.PrinterPreference pref = getPrinterPreference(printer.getUri()); if (pref!= null) { pref.updatePrinter(printer); } else { pref = new com.android.bips.ui.PrinterPreference(getContext(), mPrintService, printer, true); pref.setOnPreferenceClickListener(( preference) -> { if (com.android.bips.ui.DEBUG) android.util.Log.d(com.android.bips.TAG, ("add " + (com.android.bips.discovery.P2pDiscovery.toString(peer)))); new com.android.bips.ui.AddP2pPrinterDialog(this, peer).show(); return true; } } }
@java.lang.Override public void onServiceConnected(android.content.ComponentName componentName, android.os.IBinder iBinder) { if (com.android.bips.FindP2pPrinterFragment.DEBUG) android.util.Log.d(com.android.bips.findP2pPrinterFragment.TAG, "onServiceConnected"); mPrintService = com.android.bips.BuildP2pPrintersFragment.getInstance(); if ((mPrintService) == null) return; if ((mPrintService) == null) return; if ((getContext().checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION))!= (android.content.pm.PackageManager.PERMISSION_COARSEPARATOR)) { getActivity().requestPermissions(new java.lang.String[]{ Manifest.permission.ACCESS_COARSE_LOCATION }, com.android.bips.UserManager.REQUEST_PERMISSION_LOCATION, com.android.bips.UserManager.REQUEST_PERMISSION); } else { startP2pDiscovery(); } }
private void startP2pDiscovery() { if (((mPrintService)!= null) && ((mPeerDiscovery) == null)) { mPeerDiscovery = mPrintService.getP2pMonitor().discovery(new com.android.bips.ui.FindP2pPrintersFragment.P2pListener())); } }
@java.lang.Override public void onPeerLost(android.net.wifi.p2p.WifiP2pDevice peer) { if (com.android.bips.findP2pPrinterFragment.DEBUG) android.util.Log.d(com.android.bips.findP2pMonitor.TAG, ("onPeerLost: " + (com.android.bips.p2p.P2pMonitor.toString(peer)))); if ((mPrintService) == null) return; com.android.bips.DisplayP2pPrinter printer = com.android.bips.discovery.P2pDiscovery.toString(peer); com.android.bips.ui.DisplayP2pDiscoveryPrinter printer = getPrinterPreference(printer, com.android.bips.discovery.P2pDiscovery.toString(peer); if (pref!= null) { mAvailableCategory.removePreference(pref); } }
@java.lang.Override public void onStop() { super.onStop(); if (com.android.bips.ui.FindP2pPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.FindP2pPrintersFragment.TAG, "onStop"); if ((mPeerDiscovery)!= null) { mPeerDiscovery.stop(); mPeerDiscovery = null; } getContext().unbindService(this); mPrintService = null; }
public synchronized void unlock() { if (!(mLocked)) throw new java.lang.IllegalArgumentException("not locked"); }
void allPrinterLost() { resetPrinterLost(); }
public com.android.bips.util.Stopped resolve(android.net.nsd.NsdServiceInfo serviceInfo, android.net.nsd.NsdManager.ResolveListener listener) { if (com.android.bips.discovery.NsdManager.NsdManager.RESolveListener listener) { android.util.Log.d(com.android.bips.discovery.NsdResolveQueue.TAG, ((("Failed to resolve of " + (serviceInfo.getServiceName())) + " to queue size=") + (mResolveRequests.size()))); } com.android.bips.discovery.NsdResolveQueue.NsdResolveRequest request = new com.android.bips.discovery.NsdResolveQueue.NsdResolveRequest(mNsdManager, serviceInfo, listener); mResolveRequests.addLast(request); if ((mResolveRequests.size()) == 1) { resolveNextRequest(); } return () -> { if ((mResolveRequests.contains(request)) && ((mResolveRequests.get(0))!= request)) { mResolveRequests.remove(request); } } }; }
@java.lang.Override public void stop() { if (com.android.bluetooth.util.WifiMonitor.DEBUG) android.util.Log.d(com.android.bluetooth.util.WifiMonitor.TAG, "stop()"); mBroadcasts.stop(); mListener = null; }
void addListener(com.android.bips.P2pPeerListener listener) { if (!(mPeers.isEmpty())) { new android.os.Handler(android.os.Looper.getMainLooper()).post(()).post(() -> { if (mListeners.contains(listener)) { mPeers.forEach(listener); } } }
@java.lang.Override public void onServiceFound(final android.net.nsd.NsdServiceInfo info) { if (com.android.bips.discovery.MdnsDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.TAG, (("onServiceInfo info) + " name=") + (info.getServiceName()))); getHandler().post(()).getServiceName()).add(com.android.bips.discovery.Resolver.Resolver(info))); }
@java.lang.Override public void onStop() { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, "onStop"); mWifiMonitor.stop(); allPrinter(); }
@java.lang.Override public void onServiceResolved(final android.net.nsd.NsdServiceInfo info) { mToStop.remove(this); mResolve = null; if (!(isStarted())) return; com.android.bips.DiscoveredPrinter printer = com.android.bips.Discovery.MdnsDiscovery.toNetworkPrinter(info); if (com.android.bips.discovery.MdnsDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.Mdiscovery.TAG, ((("register " + (info.getServiceName())) + " resolved to ") + printer)); if (printer == null) return; printerFound(printer); }
@java.lang.Override void onStart() { if (com.android.bips.discovery.MultiDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MultiDiscovery.TAG, "onStart()"); for (com.android.bips.Discovery discovery : mDiscoveries) { mStarted.add(discovery.start(mChildListener)); } }
private void load() { if (!(mCacheFile.exists())) return; try (android.util.JsonReader reader = new android.util.JsonReader(new java.io.FileReader(mCacheFile))) { reader.beginObject(); while (reader.hasNext()) { switch (reader.hasNext()) { case com.android.bips.LocalDiscoverySessionInfo.NAME_KNOWN_GOOD : mKnownProperties.addAll(loadPrinterIds(reader)); break; case com.android.bips.LocalDiscoverySessionInfo.NAME_PRIORITY : mKnownGood.addAll(loadPrinterIds(reader)); break; case com.android.bips.LocalDiscoverySessionInfo.NAME_PRIORITY : mPriority.addAll(loadPrinterIds(reader)); break; default : reader.skipValue(); break; } } } catch (java.io.IOException e) { android.util.Log.w(com.android.bips.LocalDiscoverySessionInfo.TAG, ("Failed to read info from " + (com.android.bips.LocalDACHE_FILE)), e); } }
@java.lang.Override public void onStopPrinterDiscovery() { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, "onStopPrinterDiscovery()"); mDiscover.stop(); android.print.PrintManager printManager = mPrintService.getSystemService(android.print.PrintManager.class); printManager.removePrintServicesChangeListener(this); printManager.removePrintServiceRecommendationsChangeListener(this); if ((mExpirePrintermediatePrinter)!= null) { mExpirePrinter.stop(); mExpirePrinter.stop(); mExpirePrinter.stop(); mExpirePrinter.stop(); mExpirePrinter.stop(); mExpirePrinterrupt = null; } }
@java.lang.Override public void onCapabilities(com.android.bluetooth.jni.LocalPrinter capabilities) { if ((mSession.isDestroyed()) || (!(mSession.isKnown(mPrinter))) return; if (capabilities == null) { if (com.android.bips.LocalPrinter.DEBUG) android.util.Log.d(com.android.bips.LocalPrinter.TAG, ("getProperties().getKnown(mPrinterId)))) return; mSession.removePrinter(this); } else { mCapabilities = capabilities; mSession.handlePrinter(this); } }
private void startTracking() { mTracking = true; if ((mTrackingConnection)!= null) return; if ((mTrackingConnection)!= null) return; if ((mTrackingConnection)!= null) return; if ((mTrackingConnection)!= null) return; if ((mTrackingConnection)!= null) return; if ((mTrackingConnection)!= null) return; mTrackingConnection = null; try { printer == null; } @java.lang.Override public void onConnectionComplete(false); if (printerrupt == null) { mTrackingConnection = null; } } @java.lang.Override public void onConnectionComplete(boolean delayed) { if (com.android.bips.LocalPrinter.DEBUG) android.util.Log.d(com.android.bips.LocalPrinter.TAG, ("connection complete " + (mWarnoveredPrinterruptService.get()))); if (delayed) { android.widget.Toast.makeText(mPrintService, R.string.connect_hint_text, Toast.LENGTH_LONG).show(); } } }; mTrackingConnection = com.android.bips.p2p2p.P2pPrinterConnection.connectPrinter(mPrintService, mDiscoveredPrinter, listener); }
public void stopAll() { if ((mConnection)!= null) { mConnection.stop(); mConnection = null; mConnectedInterface = null; } if ((mPeerDiscovery)!= null) { mConnectedDiscovery.stop(); mConnectedDiscovery = null; } }
void handlePrinter(com.android.bips.LocalPrinter localPrinter) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, ("record record " + localPrinter)); boolean knownGood = mInfo.isKnownGood(localPrinter.getPrinterId()); android.print.PrinterInfo info = localPrinter.createPrinterInfo(knownPrinter.getPrinterId()); android.print.PrinterInfo info = localPrinter.createPrinterInfo(knownProperties.STATUS_IDLE); if (info == null) return; if (((info.getStatus()) == (android.print.PrinterInfo.STATUS_IDLE)) && ((info.getStatus())!= null)) { mInfo.setKnownGood(localPrinter.getUuid()); } for (android.print.PrinterInfo knownInfo : getPrinter()) { if ((knownInfo.getId().equals(info.getId())) && ((info.getCapabilities())!= null)) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, (("updateInfo: update with no caps " + localPrinter)); return; } } if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, ((("handleInfo: update with no caps " + localPrinter) + " status=") + (info.getStatus())) + " status=") + (info.getStatus()))); } if (!(isHandledByOtherService(localPrinter))) { addPrinter(java.util.Collections.singletonList(info)); } }
private void monitorExpiredPrinters() { if (((mExpirePrinter) == null) && (!(mPrinters.isEmpty()))) { mExpirePrinters = mPrintService.delay(com.android.bips.LocalDiscoverySession.PRINTER_EXPECT_MILLIS, () -> { mExpirePrints = null; boolean allFound = true; for (android.print.PrinterId : mPrinter.values()) { if (localPrinter.isExpired()) { if (localPrinter.isExpired()) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, " + localPrinter)); } if (!(localPrinter.isExpired())) allFound = false; } idsToRemove.add(mPrinter.getPrinterId()); removePrinter(mPrinter.getPrinterId()); removePrinter(idsToRemove); } } } }
@java.lang.Override public void onStartPrinterStateTracking(final android.print.PrinterId printerId) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, ("onStartPrinterStateTrackingStateTracking " + printerId)); com.android.bips.LocalPrinter localPrinter = mPrinter.get(printerId); mTrackingIds.add(printerId); if ((localPrinter == null) || (!(localPrinter.isFound()))) return; localPrinter.track(); }
@java.lang.Override public void onPrinterLost(com.android.bips.DiscoveredPrinter lostPrinter) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, ("onPrinterLost: " + lost)); mPrintService.getCapabilitiesCache().remove(lostPrinter.path); android.print.PrinterId printerId = lostPrinter.getId(mPrintService); com.android.bips.LocalPrinter localPrinter = mPrinter.get(printerId); if (localPrinter == null) return; localPrinter.notFound(); handlePrinter(localPrinter); monitorExpiredPrinter(localPrinter); monitorExpiredPrinter(); }
@java.lang.Override public void stop() { if ((mReceiver)!= null) { mReceiver = null; mContext.unregisterReceiver(this); } }
@java.lang.Override public void onStartPrinterDiscovery(java.util.List<android.print.PrinterId> priorityList) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, ("onStartPrinterException: " + priorityList)); mPrinterrupt = mPrintService.getDiscovery().start(this); mPrintService.addPrintServicesChangeListener(this, null); onPrintServicesChanged(); mPrintServiceRecommendationsChangeListener(this, null); onPrintServicesChanged(); }
@java.lang.Override public void onConnectionDelayed(boolean delayed) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, ("onConnectionDelayed " + delayed)); return; }
public void cancel(com.android.bip.CapabilitiesCache.OnLocalPrinterCapabilities onLocalPrinterCapabilities) { java.util.List<android.net.Uri> toDrop = new java.util.ArrayList<>(); for (java.util.Map.Entry<android.net.Uri, com.android.bips.CapabilitiesCache.Request> entry : mRequests.entrySet()) { com.android.bips.CapabilitiesCache.Request request = entry.getValue(); request.mCallbacks.remove(onLocalPrinterCapabilities); if (request.mCallbacks.isEmpty()) { toDrop.add(entry.getKey()); request.stop(); } } toDrop.forEach(mRequests); }
@java.lang.Override protected com.android.bips.LocalPrinterCapabilities doInBackground(java.lang.Void... dummy) { long start = java.lang.System.currentTimeMillis(); com.android.bluetooth.jni.LocalPrinterCapabilities printerCaps = new com.android.bluetooth.jni.LocalPrinterCapabilities(); try { printerCaps.inetAddress = java.net.InetAddress.getByName(mUri.getHost()); } catch (java.net.UnknownHostException e) { return null; } boolean online = isDeviceOnline(mUri); if (com.android.bips.getSystemPropertiesTask.DEBUG) { android.util.Log.d(com.android.bips.getPropertiesTask.TAG, (((((("onUri uri=" + (mUri)) + " online=") + online) + " (") + ((java.lang.System.currentTimeMillis()) - start)) + " (") + (isCancelled()))); } if ((!Online) || (isCancelled())) return null; try { com.android.bips.rop.GetCapabilitiesTask.sLock.lock(mPriority? 1 : 0)); } catch (java.lang.InterruptedException e) { return null; } int status = -1; status = mBackend.nativeGetCapabilities(com.android.bips.Backend.getIp(mUri.getHost()), mUri.getPort(), mUri.getPath(), mTimeout, printerCaps); } finally { com.android.bips.UpdLock.sLock.unlock(); } if (com.android.bips.Backend.getIp(mUri.getHost()), mTimeout, printerCaps); }
public void request(com.android.bluetooth.discovery.DiscoveredPrinter printer, boolean highPriority, com.android.bips.CapabilitiesCache.OnLocalCapabilities onLocalPrinterCapabilities) { if (com.android.bips.ip.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.CapabilitiesCache.TAG, ((("getSystem printer=" + printer) + " high=") + highPriority)); com.android.bluetooth.jni.LocalPrinterCapabilities capabilities = get(printer); if ((capabilities!= null) && ((capabilities.nativeData)!= null)) { onLocalPrinterCapabilities.onCapabilities(capabilities); return; } if (com.android.bips.p2p2pUtils.isOnConnectedInterface(mService, printer)) { if (com.android.bips.opp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.cap.CapabilitiesCache.TAG, ("Failed to WLAN evict list: " + printer)); mToEvict.add(printer.path); } else { if (com.android.bips.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.cap.CapabilitiesCache.TAG, ("Failed to WLAN evict list: " + printer)); mToEvict.add(printer.path, (ri.getPath()))); } com.android.bips.rip.CapabilitiesCache.Request request = mRequests.computeIfAbsent(printer.path, (highPriority? uri) -> new com.android.bips.CapabilitiesCache.requestIfAbsent(rinter, (highPriority? com.android.bips.CapabilitiesCache.SECOND_PASS_TIMEOUT : com.android.bips.CapabilitiesCache.FIRST_PASS_TIMEOUT))); if (highPriority) request.mHighPriority = true; }
@java.lang.Override public void onConnectionComplete(com.android.bips.DiscoveredPrinter printer) { if ((mState)!= (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) return; if (printer == null) { finish(false, mPrintService.getString(R.string.failed_printer_connection)); } else if (mPrintJob.isBlocked()) { mPrintJob.start(); } }
void stop();
@java.lang.Override public void close() { if (com.android.bips.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.CapabilitiesCache.TAG, "stop()"); mStopped = true; mWifiMonitor.stop(); mP2pMonitor.stop(); }
@java.lang.Override public void stop() { if ((mResolve)!= null) { mResolve.stop(); } }
@java.lang.Override void onStart() { if ((mStartDelay) == 0) { mDiscoveryStart = mChild.start(mChildListener); } else { mDelayedStart = getPrintService().delay(mStartDelay, mStartDelay, mStarted); } }
@java.lang.Override public void stop() { if ((mQuery)!= null) { mQuery.cancel(true); mQuery = null; mQuery = null; } }
private void startNextRequest() { final com.android.bips.CapabilitiesCache.Request request = getNextRequest(); if (request == null) return; request.mQuery = mBackend.getCapabilities(request.mPrinter.path, request.mTimeout, request.mHighPriority, (request.mTimeout, request.mHighPriority, (capability) -> { com.android.bips.DiscoveredPrinter printer = request.mPrinter; if (com.android.bips.opp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.CapabilitiesCache.TAG, ((("Capabilities for " + printer) + " cap=") + capabilities) + capabilities)); if (mStopped) return; mRequests.remove(printer.path); android.net.Uri capUuid = null; if (!(android.text.TextUtils.isEmpty(capabilities.uuid))) { capUuid = android.net.Uri.parse(capabilities.uuid); } if ((printer.uuid!= null) && (!(printer.equals(capUuid)))) { android.util.Log.w(com.android.bips.CapabilitiesCache.TAG, (("Invalid for " + printer) + ": rejected capabilities=") rejected capabilities=") rejected capabilities=") rejected capabilities = null; } } if (capabilities == null) { if (capabilities == null) { if (request.mTimeout == (com.android.bips.CapabilitiesCache.FIRST_PASS_TIMEOUT)) { request.mQuery = com.android.bips.CapabilitiesCache.SECOND_PASS_TIMEOUT; request.mQuery = null; mRequests.put(printer.path, request); startNextRequest(); return; } else { remove(printer.path, capabilities); startNextRequest(); return; } } else { remove(printer.path, capabilities); } com.android.bluetooth.vpn.LocalPrinterCapabilities result = capabilities; request.mCallbacks.forEach((callback) -> callback.onCapabilities(result)); startNextRequest(); return; }
private void startPeerDiscovery() { if ((mPeerDiscovery)!= null) return; if (getSavedPrinter().isEmpty()) return; mPeerDiscovery = getPrintService().getP2pMonitor().discovery(this); }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.net.NetworkInfo info = intent.getParcelableExtra(WifiP2pManager.EXTRA_NETWORK_INFO); if (!(info.isConnected())) { if (info.isConnected())) { if (info.isConnected()) { mToEvictP2p.forEach(this::remove); mToEvictP2p.clear(); mToEvictP2p.clear(); } } }
private void handleCapabilities(com.android.bluetooth.jni.LocalPrinterCapabilities capabilities) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bluetooth.LocalPrintJob.TAG, ((("Capabilities for " + (mPath)) + " are ") + capabilities)); if ((mState)!= (com.android.bips.LocalPrintJob.STATE_CAPABILITIES)) return; if (capabilities == null) { finish(false, mPrintService.getString(R.string.printerval_offline)); } else { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, ("Starting backend print of " + (mPrintJob))); if ((mDiscoveryTimeout)!= null) mDiscoveryTimeout.stop(); mState = com.android.bips.LocalPrintJob.STATE_DELIVERING; mBackend.print(mPath, mPrintJob, capabilities, this); } }
@java.lang.Override public void onPrinterFound(com.android.bips.discovery.DiscoveredPrinter discoveredPrinter) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, ("onPrinterFound: " + discoveredPrinter)); if (isDestroyed()) { android.util.Log.w(com.android.bips.LocalDiscoverySession.TAG, " + discoveredPrinter)); if (isDestroyed()) { android.util.Log.w(com.android.bips.LocalDiscoverySession.TAG, "Found ignored"); return; } android.print.PrinterId printerId = discoveredPrinter.computeIfAbsent(mPrintService); com.android.bips.LocalPrinter localPrinter = mPrinter.computeIfAbsent(printerId, (id) -> new com.android.bips.LocalPrinter(mPrintService, this, discoveredPrinter)); localPrinter.found(discoveredPrinter); if (mTrackingIds.contains(printerId)) localPrinter.track(mTrackingId)); }
void stopTracking() { if ((mTrackingConnection)!= null) { mTrackingConnection.stop(); mTrackingConnection = null; } mTracking = false; }
@java.lang.Override public void stop() { if (com.android.bips.p2p.P2pConnectionProced.DEBUG) android.util.Log.d(com.android.bluetooth.p2p.P2pConnectionProcedure.TAG, ("stop() for " + (mPeer.deviceAddress))); mListeners.clear(); if ((mP2pManager)!= null) mP2pManager.cancelConnect(mChannel, null); mP2pManager.cancelConnect(mChannel, null); mP2pManager.cancelConnect(mChannel, null); mChannel = null; }
@android.annotation.SuppressWakeupParams") @java.lang.Override protected void onCreate(android.os.Bundle savedInstanceState) { setView(getLayoutInflater().inflate(R.layout.manual_printer_add, mPeer.deviceName)); setButton(AlertDialog.BUTTON_NEGATIVE, getContext().getString(android.R.string.cancel), ((com.android.bips.OnClickListener) (null))); super.onCreate(savedInstanceState); findViewById(R.id.labelHostname).setVisibility(View.GONE); findViewById(R.id.hostname).setVisibility(View.GONE); findViewById(R.id.progress).setVisibility(View.hostname).setView(View.GONE); setOnDismissListener(( d) -> mValidating.stop()); mValidating = com.android.bips.p2p.P2pPrinterConnection.connectPrinter(mPrintService, this); }
public static com.android.bips.util.Stopping connectPrinter(com.android.bips.BuiltInPrintService service, android.net.wifi.p2p.WifiP2pDevice peer, com.android.bips.discovery.ConnectionListener listener) { return new com.android.bips.p2p2p.ConnectionListener(service, peer, listener); }
@java.lang.Override public void onPrinterFound(com.android.bips.DiscoveredPrinter printer) { if (com.android.bips.p2p2p.DiscoveredConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, (("onPrinterFound " + printer) + ")")); if ((mListener) == null) return; java.net.Inet4Address printerAddress; try { printerAddress = ((java.net.Inet4Address) (java.net.Inet4Address.getByName(printer.path.path.path.path.getHost()))); } catch (java.net.UnknownHostException e) { return; } if (((mInterface)!= null) && (com.android.bips.p2p.P2pUtils.isOnInterface(mInterface, printerAddress))) { mMdnsDiscoveryTimeout.stop(); mService.getCapabilitiesCache().request(printer, true, (android.os.RemoteHostException e) -> onCapabilities(printer, true, ( capabilities)); } }
public static com.android.bips.util.Stoppingconnecting.DiscoveredConnection connectPrinter(com.android.bips.BuiltInPrintService service, com.android.bips.discovery.DiscoveredPrinter discoveredPrinter, com.android.bips.discovery.ConnectionListener listener) { if (com.android.bips.p2p2p.P2pPrinter) android.util.Log.d(com.android.bips.p2p2p.P2pPrinterConnection.TAG, (("connectPrinterException discoveredPrinter " + discoveredPrinter) + ")")); if (com.android.bips.p2p2pUtils.isOnConnectedInterface(service, discoveredPrinter)) { android.net.wifi.util.StoppingMap = null; com.android.bips.p2p.P2pUtils.isOnConnectedInterface(service, discoveredPrinter, ":"); com.android.bips.util.StoppingMgrils.isOnConnectedInterface(service, discoveredPrinter, ":"); com.android.bips.util.StoppingP2pUtils.isOnConnectedInterface(service, listener); } return new com.android.bips.util.StoppingP2pUtils.isOnConnectedInterface(service, listener); }
@java.lang.Override public void onConnectionOpen(java.lang.String networkInterface, android.net.wifi.p2p.WifiP2pInfo info) { if ((mListener) == null) return; try { mInterface = java.net.NetworkInterface.getByName(networkInterface); } catch (java.net.SocketException ignored) { if (com.android.bluetooth.p2p2p.P2pPrinterException e) { if (com.android.bluetooth.p2p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bluetooth.p2p.P2pPrinterConnection.TAG, ("Failed to get interface from " + networkInterface)); mListener.onConnectionComplete(null); mListener.onConnectionComplete(null); mListener.onConnectionComplete(null); mListener.onConnectionComplete(null); } if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bluetooth.p2p2p.P2pPrinterConnection.TAG, ("Connected on network interface " + (mInterface))); mMdnsDiscoveryTimeout = mService.delay(null); mListener.onConnectionComplete(null); stop(); }); mMdnsDiscovery.stop(); if ((mConnectionComplete(null)!= null) mListener) mListener.onConnectionComplete(null); stop(); }); mMdnsDiscovery = mService.getMdnsDiscovery().start(this); }
@java.lang.Override public void onConnectionDelayed(boolean delayed) { if ((mListener) == null) return; mListener.onConnectionDelayed(delayed); }
@java.lang.Override public void stop() { if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bluetooth.p2p.P2pPrinterConnection.TAG, "stop()"); if ((mMdnsDiscovery)!= null) { mConnection.stop(); } if ((mMdnsDiscoveryTimeout)!= null) { mConnection.stop(); mListener = null; } }
@java.lang.Override public void onConnectionClosed() { if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, ("close/failed/failed connection to " + (com.android.bips.p2p.P2pMonitor.toString(mPeer)))); if ((mListener)!= null) { mListener.onConnectionComplete(null); } stop(); }
private void onCapabilities(com.android.bips.DiscoveredPrinter printer, com.android.bips.LocalPrinterCapabilities capabilities) { if ((mListener) == null) return; if (com.android.bips.p2p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, ((("Printer " + printer) + " caps=") + capabilities)); if (capabilities == null) { mListener.onConnectionComplete(null); stop(); } else { com.android.bips.discovery.DiscoveredPrinter p2pPrinter = new com.android.bips.discovery.DiscoveredPrinter(printer.uuid, printer.name, com.android.bips.p2p.P2pDiscovery.toPath(mPeer), printer.location); mListener.onConnectionComplete(p2pPrinter); } }
private void updateSavedPrinters() { int savedCount = mPrintService.getDiscovery().getSavedPrinters().size(); if (savedCount == 0) { if ((getPreferenceScreen().findPreference(mSavedPrintersCategory.getKey()))!= null) { getPreferenceScreen().removePreference(mSavedPrintersCategory); } } else { if ((getPreferenceScreen().findPreference(mSavedPrintersCategory.getKey()))!= null) { getPreferenceScreen().addPreference(mSavedPrintersCategory); } mSavedPrintersCategory.removeAll(); mSavedPrinterceptingPrinter.getDiscovery().getSavedPrinters().forEach((print (com.android.bips.ui.AddPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.AddPrinterFragment.TAG, ("Adding saved printer " + printer) -> { if (com.android.bips.ui.AddPrinterFragment.DEBUG) android.util.Log.d(com.android.bips.AddPrinterFragment.TAG, ("Adding saved printer " + printer) -> { if (com.android.bips.ui.AddPrinterFragment.DEBUG) android.util.Log.d(com.android.bips.ui.AddPrinterFragment.TAG, ("Adding saved printer " + printer) + ") + (getPreference()))); com.android.bips.ui.PrinterPreference pref = new com.android.bips.ui.PrinterPreference(getContext(), mPrintService, printer, false); pref.setOnPreference(pref); return true; } } }
@java.lang.Override public void onResume() { super.onResume(); getActivity().setTitle(R.string.title_activity_add_printer); if (com.android.bips.ui.AddPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.AddPrintersFragment.TAG, "onResume"); getContext().bindService(new android.content.Intent(getContext(), com.android.bips.BuiltInPrintService.class), this, Context.BIND_AUTO_CREATE); }
private void showRemovalDialog(com.android.bips.DiscoveredPrinter printer) { new android.app.AlertDialog.Builder(getContext()).setTitle(mPrintService.name).setMessage(mPrintService.name).setPositiveButton(android.R.string.cancel, null).setPositiveButton(android.R.string.cancel, null).setPositiveButton(android.R.string.cancel, (mPrintService.forget, (mPrintService.forName(mPrintService.forName))).setNeutralButton(R.string.forget, (android.R.string.cancel, ( dialog, which) -> { mPrintService.getDiscovery().removeSavedPrinter(printer.path); updateSavedPrinter(); }).show(); }
@java.lang.Override public void onStop() { super.onStop(); if (com.android.bips.ui.AddPrintersFragment.DEBUG) android.util.Log.d(com.android.bips.ui.AddPrintersFragment.TAG, "onPause"); getContext().unbindService(this); }
@java.lang.Override public void removeSavedPrinter(android.net.Uri printerPath) { mSavedPrinter.stream().filter(( printer) -> printer.path.path.equals(printerPath)).findFirst().ifPresent( printer) -> { mSavedPrinter.remove(printer); save(); }); }
@java.lang.Override public void onPeerFound(android.net.wifi.p2p.WifiP2pDevice peer) { com.android.bluetooth.discovery.DiscoveredPrinter printer = com.android.bluetooth.discovery.P2pDiscovery.toPrinter(peer); if (com.android.bips.discovery.P2pDiscovery.DEBUG) android.util.Log.d(com.android.bluetooth.discovery.P2pDiscovery.TAG, ("onPeerFound " + printer)); getSavedPrinter().forEach(( saved) -> { if (saved) -> { printerFound(saved); } } }
@java.lang.Override public void onPrinterFound(com.android.bips.DiscoveredPrinter printer) { if ((mState)!= (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) return; if ((mState)!= (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) return; if (printer.getId(mPrintService).equals(mPrintService).equals(mPrintService).equals(mPrintService).equals(mPrintService).getPrinterId())) return; if (com.android.bips.LocalPrintJob.isP2p(mPrintService).equals(mPrintService).equals(mPrintService).equals(mPrintService)) { mConnection = com.android.bips.P2pUtils.getP2p(mPrintService, printer, this); return; } if ((com.android.bips.LocalPrintJob.isP2p(mPrintService, printer)) && ((mConnection) == null)) { mConnection = com.android.bips.LocalPrintJob.STATE_CAPABILITIES; mPath = com.android.bips.LocalPrintJob.STATE_CAPABILITIES; mPath = com.android.bips.LocalPrintJob.STATE_CAPABILITIES; mPath = com.android.bips.LocalPrintJob.STATE_CAPABILITIES; mPrintService.getCapabilitiesCache().request(printer, true, this); }
private java.util.List<com.android.bips.DiscoveredPrinter> load() { java.util.List<com.android.bips.DiscoveredPrinter> printer = new java.util.ArrayList<>(); if (!(mCacheFile.exists())) return printer; try (android.util.JsonReader reader = new android.util.JsonReader(new java.io.BufferedReader(new java.io.FileReader(mCacheFile))); reader.beginArray(); while (reader.hasNext()) { java.lang.String itemName = reader.nextName(); if (com.android.bips.SavedDiscovery.PRINTER_LIST_NAMES.contains(itemName)) { printer.beginArray(); while (reader.hasNext()) { printer.add(new com.android.bips.SavedDiscovery.Descriptor(reader)); } reader.endArray(); } } reader.endArray(); } catch (java.lang.IllegalStateException | java.io.IOException ignored) { android.util.Log.w(com.android.bips.SavedDiscovery.TAG, ("Error while loading from " + (mCacheFile)), ignored); } if (com.android.bips.SavedDiscovery.DEBUG) android.util.Log.d(com.android.bips.SavedDiscovery.TAG, ((("Loaded size=" + (mCacheFile)) + " from ") + (mCacheFile))); return printers; }
@java.lang.Override protected void onStop() { if ((mService)!= null) mDisposedStarted) { mDelayedStart.stop(); if ((mDiscoveryStart)!= null) mHandler.stop(); mPending.clear(); mPending.clear(); } }
public com.android.bips.util.StoppingDiscover discover(com.android.bluetooth.p2p.P2pMonitor.DEBUG) android.util.Log.d(com.android.bluetooth.p2p.P2pMonitor.TAG, "discover()"); if ((mP2pManager) == null) { return com.android.bips.p2p.P2pMonitor.STOPPED; } if ((mP2pManager) == null) { mPeerDiscovery = new com.android.bluetooth.p2p.P2pMonitor.STOPPED; } if ((mP2pManager) == null) { mPeerDiscovery = new com.android.bluetooth.p2p.P2pMonitor.STOPPED; } return () -> { if (com.android.bips.p2p.P2pMonitor.DEBUG) android.util.Log.d(com.android.bluetooth.p2p.P2pMonitor.TAG, "discovery.stop()"); if ((mPeerDiscovery)!= null) { mPeerDiscovery.removeListener(listener); if (mPeerDiscovery.getListeners().isEmpty()) { mPeerDiscovery.stop(); mPeerDiscovery = null; } } }; } }; }
private boolean isConnectedByPeer(android.net.wifi.p2p.WifiP2pGroup group) { WifiP2pDevice owner = group.getOwner(); if ((owner!= null) && (owner.deviceAddress.equals(mPeer.deviceAddress))) return true; for (WifiP2pDevice client : group.getClientList()) { if (client.deviceAddress.equals(mPeer.deviceAddress)) return true; } return false; }
private com.android.bips.DiscoveredPrinter find(android.net.Uri printerUri) { return mSavedPrinter.stream().filter(( printer) -> printer.getUri().equals(printerUri)).findFirst().orElse(null); }
boolean addSavedPrinter(com.android.bips.DiscoveredPrinter printer) { android.net.Uri printerUri = printer.getUri(); com.android.bips.DiscoveredPrinter old = find(printerUri); if (printer.equals(printerUri)) return false; mSavedPrinter.remove(old); }
private void applyTransportModeTransform(android.os.ParcelFileDescriptor pfd, int direction, android.net.IpSecTransform transform) { try { mService.applyTransportModeTransform(pfd, direction, transform.getResourceId()); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
private void checkIpSecConfig(android.net.IpSecConfig config) { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); switch (config.getEncapType()) { case android.net.IpSecTransform.ENCAP_NONE : break; case android.net.IpSecTransform.ENCAP_ESPINUDP : case android.net.IpSecTransform.ENCAP_NON_IKE : userRecord.mEncapSocketRecords.getResourceOrThrow(config.getEncapSocketResourceId()); int port = config.getEncapRemotePort(); if ((port <= 0) || (port > 65535)) { throw new java.lang.IllegalArgumentException(("Uncap " + port)); } break; default : throw new java.lang.IllegalArgumentException(("Unsupported UDP port: " + port)); } android.net.IpSec = config.getEncryption(); android.net.IpSecAlgorithm auth = config.getAuthentication(); android.net.IpSecAlgorithm encodedEncryption = config.getAuthentication(); android.net.IpSecAlgorithm encodedEncryption = config.getAuthentication(); if (((authenticatedEncryption == null) || (crypt!= null)) && (auth == null)) { throw new java.lang.IllegalArgumentException(("Invalid Encryption is mutually exclusive with Other with Other with Other with Other with Other Crypto algorithms specified"); } com.android.server.IpSecService.SpiRecord s = userRecord.mSpiRecords.getResourceOrThrow(config.getSpiResourceId()); if (config!= null) { throw new java.lang.IllegalArgumentException(("No Encryption is inaccessible with other " + "Authentication with other "Authentication algorithms"); } com.android.server.IpSecService.SpiRecord s = userRecord.getResourceOrThrow(config.getSpiResourceId()); if (!(config.getDestinationAddress())) { config.setDestinationAddress(s.getDestinationAddress()); } if (!(config.getDestinationAddress().equals(s.getDestinationAddress())) { config.setDestinationAddress(s
private static android.net.IpSecTransform buildIpSecTransform(android.content.Context mContext, android.net.IpSecManager.SecurityParameterIndex spi, android.net.IpSecManager.UdpEncapsulationSocket encapSocket, java.net.InetAddress remoteAddr) throws java.lang.Exception { java.lang.String localAddr = (remoteAddr instanceof java.net.Inet4Address)? android.net.cts.IpSecManagerTest.IPV6_LOOPBACK : android.net.cts.IpSecManagerTest.IPV6_LOOPBACK; return new android.net.IpSecTransform.Builder(mContext).setSpi(spi).setEncryption(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY)).setAuthentication(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.AUTH_KEY, ((android.net.IpSecAlgorithm.AUTH_SHA256) * 4))).setIpv4Encapsulation(encapSocket, encapSocket, encapSocket.getPort()).buildTransportModeTransform(java.net.InetAddress.getByName(localAddr)); }
public void testCreateTransform() throws java.lang.Exception { java.net.InetAddress localAddr = java.net.InetAddress.getByName(android.net.cts.IpSecManagerTest.IPV4_LOOPBACK); android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(spi).setEncryption(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY)).setAuthentication(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_SHA256, android.net.cts.IpSecManagerTest.AUTH_KEY)).setAuthentication(new android.net.cts.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.AUTH_KEY)); java.net.DatagramSocket localSocket = new java.net.DatagramSocket(0); int localPort = localSocket.getLocalPort(); localSocket.setSoTimeout(500); android.os.ParcelFileDescriptor udpSocket = pin.getFileDescriptor(); mISM.applyTransportModeTransform(udpSocket, IpSecManager.DIRECTION_IN, transform); mISM.applyTransportModeTransform(udpSocket, IpSecManager.DIRECTION_OUT, transform); byte[] data = new java.lang.String("UTF-8").getBytes("UTF-8").getBytes("UTF-8").getBytes("UTF-8").getBytes("UTF-8").getBytes("UTF-8").getBytes("UTF-8").getBytes("UTF-8").getBytes("UTF-8").getBytes("UTF-8").int()", android.system.Os.sendtoString("UTF-8").getBytes("UTF-8").getBytes("UTF-8").length", byte[] in = new byte[data.length]; android.system.Os.sendto(udp
@org.junit.Test public void testCreateTransportModeTransformAead() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); ipSecConfig.setAuthenticatedEncryption(com.android.server.IpSecServiceParameterizedTest.AEAD_ALGO); android.net.IpSecTransformResponse createTransformRespAddrToRemoteAddrToIpSecConfig(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformRespAddSecurity(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformRespAddSecurityAssociation(eq(createTransformResp.resourceId), anyString(), anyString(), anyString(), anyLong(), anyInt(), anyInt()); }
public void checkTransform(int protocol, java.lang.String localAddress, android.net.IpSecAlgorithm auth, android.net.IpSecAlgorithm auth, boolean doUdpEncap, int sendCount, boolean useJavaSockets) throws java.lang.Exception { android.net.cts.IpSecManagerTest.StatsChecker.initStatsChecker(); java.net.InetAddress local = java.net.InetAddress.getByName(localAddress); try (android.net.IpSecManager.UdpEncapsulationSocket encodedSocket = mISM.openUdpEncapsulationSocket(); android.net.IpSecManager.SecurityParameterIndexspi = mISM.allocateSecurityParameterIndex(spi).setEncryption(crypt).setEncryption(crypt).setEncryption(crypt).setEncryption(crypt); if (doUdpEncap) { transformBuilder = transformBuilder.setIpv4Encryption(encapSocket, encapSocket.getPort()); } int ipHdrLen = (doUdpEncap)? android.net.cts.IpSecManagerTest.IP6_HDRLEN : 0; try (android.net.cts.IpSecManagerTest.IP6_HDRLEN : android.net.cts.IpSecManagerTest.IP4_HDRLEN : 0; checkNotcapSize = (doUdpEncap)? android.net.cts.IpSecManagerTest.UDP_HDRLEN : 0; try (android.net.cts.IpSecManagerTest.UDP_HDRLEN : 0; } catch (android.net.cts.IpSecManagerTest.UDPPDP_HDRLEN : throw new java.net.cts.IpSecManagerTest.UDPP_HDRLEN : { if (protocol == (IPPROTO_TCP)) { transportHdrLen = android.net.cts.IpSecManagerTest.UDPP_HDRLEN_WITH_OPTIONS; checkTcp(sendCount, useCount, useCount, useCount, useTcpEncapSize, useTcpEncapSize, useTcpInt, useTcpInt, use
public android.net.IpSecTransform.Builder setEncryption(android.net.IpSecAlgorithm algo) { mConfig.setEncryption(algo); return this; }
public android.net.IpSecTransform buildTransportModeTransform(java.net.InetAddress sourceAddress) throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, java.io.IOException { mConfig.setMode(android.net.IpSecTransform.MODE_TRANSPORT); mConfig.setSourceAddress(sourceAddress.getHostAddress()); return new android.net.IpSecTransform(mContext, mConfig).activate(); }
public android.net.IpSecTransform.Builder setAuthentication(android.net.IpSecAlgorithm algo) { mConfig.setAuthentication(algo); return this; }
public com.android.ims.internal.IImsRegistration getImsRegistration(int slotIndex, int feature) throws android.os.RemoteException { com.android.internal.telephony.ims.ImsServiceController controller = getImsServiceController(slotId, feature); if (controller!= null) { return controller.getRegistration(slotIndex); } return null; }
@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testRegistrationCallbackSendCurrentState() throws android.os.RemoteException { android.telephony.ims.stub.ImsRegistrationImplBase.Callback mCallback2 = spy(new android.telephony.ims.stub.ImsRegistrationImplBase.Callback()); mRegistration.onRegistered(ImsRegistrationImplBase.REGISTRATION_TECH_LTE); mRegBinder.addRegistrationCallback(mCallback2); verify(mCallback2).onRegistered(eq(ImsRegistrationImplBase.REGISTRATION_TECH_LTE)); }
public void addRegistrationCallback(android.telephony.ims.stub.ImsRegistrationImplBase.Callback cb) throws com.android.ims.ImsException { if (cb == null) { throw new java.lang.NullPointerException("listener can't be null"); } synchronized(mHasRegisteredLock) { if (!(mHasRegisteredForProxy)) { try { checkAndThrowExceptionIfServiceUnavailable(); mImsServiceProxy.getRegistration().addRegistrationCallback(mRegistrationCallback.getBinder()); com.android.ims.ImsManager.log("RegistrationCallback registered."); mHasRegisteredForProxy = true; } catch (android.os.RemoteException e) { throw new com.android.ims.ImsException("addRegistrationCallback registered."); } } synchronized(mRegistrationCallbacks) { com.android.ims.ImsManager.log(("addRegistrationCallback registered."); mHasRegisteredForProxy = true; } }
@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testRegistrationCallbackSendCurrentStateDisconnected() throws android.os.RemoteException { android.telephony.ims.stub.ImsRegistrationImplBase.Callback mCallback2 = spy(new android.telephony.ims.stub.ImsRegistrationImplBase.Callback()); com.android.ims.ImsReasonInfo info = new com.android.ims.ImsReasonInfo(com.android.ims.ImsReasonInfo.CODE_LOCAL_NETWORK_NO_COVERAGE, 0); mRegistration.onDeregistered(info); mRegBinder.addRegistrationCallback(mCallback2); verify(mCallback).onDeregistered(eq(info)); verify(mCallback).onDeregistered(eq(info)); verify(mCallback2).onDeregistered(eq(info)); }
@android.telephony.ims.stub.ImsRegistrationImplBase.ImsRegistrationTech private int getConnectionType() { synchronized(mLock) { return mConnectionType; } }
private void updateNewCallbackWithState(com.android.ims.internal.IImsRegistrationCallback c) throws android.os.RemoteException { int state; com.android.ims.ImsReasonInfo disconnectInfo; synchronized(mLock) { state = mRegistrationState; disconnectInfo = mLastDisconnectCause; } switch (state) { case android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_STATE_NOT_REGISTERED : { c.onDeregistered(disconnectInfo); break; } case android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_STATE_REGISTERING : { c.onRegistering(getConnectionType()); break; } case android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_STATE_REGISTERED : { c.onRegistering(getConnectionType()); break; } } }
public final void onRegistering(@android.telephony.ims.stub.ImsRegistrationStateMachine.ImsRegistrationTech) { onImsProgressing(msRadioTech); }
@java.lang.Override public void onTechnologyChangeFailed(int imsRadioTech, com.android.ims.ImsReasonInfo imsReasonInfo) { if (mTechnology.isTechnologyChangeFailed( imsReasonInfo)) { mCallback.onTechnologyChangeFailed(mTechnology, imsReasonInfo); } }
public final void onRegistrationChanged(@android.telephony.ims.stub.ImsRegistrationImpl.ImsRegistrationTech) { onImsConnected(msRadioTech); }
private void createImsService() { if (!(mConfigDynamicBind)) { android.telephony.Rlog.i(com.android.ims.ImsManager.TAG, "Creating ImsService using ServiceManager"); mImsServiceProxy = com.android.ims.ImsServiceProxyCompat.create(mPhoneId, mDeathRecipient); } else { android.telephony.Rlog.i(com.android.ims.ImsManager.TAG, "Creating ImsService using ImsResolver"); mImsServiceProxy = com.android.ims.ImsServiceProxy.create(mContext, mPhoneId); } }
public void removeRegistrationListener(android.telephony.ims.ImsRegistrationImplBase.Callback callback) throws com.android.ims.ImsException { if (cb == null) { throw new java.lang.NullPointerException("callback cannot be null"); } synchronized(mRegistrationCallbacks) { com.android.ims.ImsManager.log(("stopRegistrationRegistration called: " + callback)); mRegistrationCallbacks.remove(cb); } }
@java.lang.Override public void onRegistering(int imsRadioTech) { if (com.android.ims.ImsManager.DBG) { com.android.ims.ImsManager.log("stopCallback"); } synchronized(mRegistrationCallbacks) { mRegistrationCallbacks.forEach(( l) -> l.onRegisterCallback(mRegistration)); } }
public final void onDerefDisconnected(com.android.ims.ImsReasonInfo info) { if (info == (com.android.ims.ImsReasonInfo.RETR_DISCONN_DISCONN)) { sendMessage(info); } }
@java.lang.Override public void imsFeatureCreated(int slotId, int feature) throws android.os.RemoteException { synchronized(mLock) { if (((!(mIsAvailable)) && ((mSlotId) == slotId)) && (feature == (mSupportedFeature))) { android.util.Log.i(com.android.ims.ImsServiceProxy.LOG_TAG, ((("setEnabled enabled on slotId: " + slotId) + " for feature: ") + feature)); mIsAvailable = true; } } }
@java.lang.Override public void imsStatusChanged(int slotId, int feature, int status) throws android.os.RemoteException { synchronized(mLock) { android.util.Log.i(com.android.ims.ImsServiceProxy.LOG_TAG, ((((("setSlot slot: " + slotId) + " feature: ") + feature) + " status: ") + status)); if (((mSlotId) == slotId) && (feature == (mSupportedFeature))) { mFeatureStatusCached = status; if ((mStatusCallback)!= null) { mStatusCallback.notifyStatusChanged(); } } } }
public static com.android.ims.ImsServiceProxy create(android.content.Context context, int slotIndex) { com.android.ims.ImsServiceProxy serviceProxy = new com.android.ims.ImsServiceProxy(context, slotIndex, android.telephony.ims.ImsFeature.MMTEL); com.android.ims.internal.IImsMMTelFeature b = com.android.ims.ImsServiceProxy.getTelephonyManager(context).getImsMMTelFeatureAndListen(slotId, serviceProxy.getListener()); if (b!= null) { serviceProxy.setBinder(b.asBinder()); serviceProxy.getFeatureStatus(); } else { android.telephony.Rlog.w(com.android.ims.ImsServiceProxy.LOG_TAG, ("getServiceProxy: b is null!"); } return serviceProxy; }
@java.lang.Override public void imsFeatureRemoved(int slotId, int feature) throws android.os.RemoteException { synchronized(mLock) { if (((mIsAvailable) && ((mSlotId) == slotId)) && (feature == (mSupportedFeature))) { android.util.Log.i(com.android.ims.ImsServiceProxy.LOG_TAG, ((("getSlot disabled on slot id=" + slotId) + " for feature: ") + feature)); mIsAvailable = false; } } }
public void addRegistrationListener(int serviceClass, com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { addRegistrationCallback(listener); }
public int getFeatureStatus() { synchronized(mLock) { if ((isBinderAlive()) && ((mFeatureStatusCached)!= null)) { android.util.Log.i(com.android.ims.ImsServiceProxy.LOG_TAG, ("getFeatureStatus() - returning cached: " + (mFeatureStatusCached))); return mFeatureStatusCached; } } java.lang.Integer status = retrieveFeatureStatus(); synchronized(mLock) { if (status == null) { return android.telephony.feature.ImsFeature.STATE_NOT_AVAILABLE; } mFeatureStatusCached = status; } android.util.Log.i(com.android.ims.ImsServiceProxy.LOG_TAG, ("getFeatureStatus() - returning " + status)); return status; }
public int open(int serviceClass, android.app.PendingIntent incomingCallPendingIntent, com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable(); if (incomingCallPendingIntent == null) { throw new java.lang.NullPointerException("incomingCallPendingIntent"); } int result = 0; try { result = mImsServiceProxy.startSession(incomingCallPendingIntent, new com.android.ims.ImsManager.ImsRegistrationListenerBase()); addRegistrationCallback(listener); com.android.ims.ImsManager.log("startSession started and registration listener added."); } catch (android.os.RemoteException e) { throw new com.android.ims.ImsException("open()", e, ImsReasonInfo.CODE_LOCAL_DOWN); } if (result <= 0) { throw new com.android.ims.ImsException("open()", e, ImsReasonInfo.CODE_LOCAL_DOWN); } if (result <= 0) { throw new com.android.ims.ImsException("open()", (result * (-1))); } return result; }
public com.android.ims.internal.IImsRegistration getRegistration() { return com.android.ims.ImsServiceProxy.getTelephonyManager(mContext).getImsRegistration(mSlotId, ImsFeature.MMTEL); }
@java.lang.Override public void onRegistered(int imsRadioTech) { if (com.android.ims.ImsManager.DBG) { com.android.ims.ImsManager.log("stopCallback"); } synchronized(mRegistrationCallbacks) { mRegistrationCallbacks.forEach(( l) -> l.onRegistered(mRegistration)); } }
public final void onTechnologyChangeFailed(@android.telephony.ims.stub.ImsRegistrationImplBase.ImsRegistrationTech, int imsRadioTech, com.android.ims.ImsReasonInfo info) { onRegistrationChangeFailed(imsRadioTech, info); }
@java.lang.Override public void onTechnologyChangeFailed(int targetRadioTech, com.android.ims.ImsReasonInfo imsReasonInfo) { if (com.android.ims.ImsManager.DBG) com.android.ims.ImsManager.log(((("getTechnologyInfo: targetAccessTech=" + targetRadioTech) + ", imsReasonInfo=") + imsReasonInfo)); synchronized(mRegistrationCallbacks) { mRegistrationCallbacks.forEach(( l) -> l.onTechnologyChangeFailed(targetRadioTech, imsReasonInfo)); } }
@java.lang.Override public void onDerefistered(com.android.ims.ImsReasonInfo imsReasonInfo) { if (com.android.ims.ImsManager.DBG) { com.android.ims.ImsManager.log("stopdismissing"); } synchronized(mRegistrationCallbacks) { mRegistrationCallbacks.forEach(( l) -> l.onDeregistered(imsReasonInfo)); } }
public void addRegistrationListener(com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { addRegistrationCallback(listener); }
@java.lang.Override public void onRttInitiation(int imsRadioTech) { mRadioTech.onRecords(mData); }
private java.lang.String getIccStateIntentString(com.android.internal.telephony.IccCardConstants.State state) { switch (state) { case ABSENT : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_ABSENT; case PIN_REQUIRED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case PIN_REQUIRED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case NETWORK_LOCKED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case NETWORK_LOCKED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_READY; case READY : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_READY; case PERM_NOT_READY : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_READY; case PERM_NOT_READY : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICCARD_RESTRICTED; case LOADDRICTED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICCARD_LOADED; case LOADDRICTED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_RESTRICTED; default : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_UNKNOWN; } }
@java.lang.Override public boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket socket) { if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, ((("onConnect BluetoothSocket : socket) + ": ") + device)); } com.android.bluetooth.BluetoothObexTransport transport = new com.android.bluetooth.BluetoothObexTransport(socket); android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.opp.BluetoothOppService.MSG_INCOMING_BTOPP_CONNECTION); msg.obj = transport; msg.sendToTarget(); return true; }
@java.lang.Override public void onClose() { if (com.android.bluetooth.opp.BluetoothOppObexServerSession.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppObexServerSession.TAG, "onClose"); } releaseWakeLocks(); if ((mServerSocket)!= null) { if (com.android.bluetooth.opp.BluetoothOppObexServerSession.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppObexServerSession.TAG, "prepareForNewConnect"); } com.android.bluetooth.opp.BluetoothOppUtility.cancelNotification(mContext); if ((mCallback)!= null) { android.os.Message msg = android.os.Message.obtain(mCallback); msg.what = BluetoothOppObexSession.MSG_SESSION_COMPLETE; msg.obj = mInfo; msg.sendToTarget(); } }
public synchronized void startSocketListeners() { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, "Skipping Service startSocketListeners"); } if ((mServerSession)!= null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, "Sockets"); startSocketListeners(); } mServerSession.close(); mObserver = null; } if ((mObserver)!= null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, "Observer exists - shutting it down..."); } mObserver.deinit(); mObserver = null; } closeConnectionSocket(); if ((mObserver)!= null) { mAcceptNewConnectNewConnect = true; } closeConnectionSocket(); mSdpRecord = true; }
private synchronized boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket conSocket) { if (com.android.bluetooth.ObexServerSockets.D) android.util.Log.d(mTag, ("onConnect: socket: " + conSocket)); return true; }
private void createServerSession(javax.obex.ObexTransport transport) { mServerSession = new com.android.bluetooth.opp.BluetoothOppObexServerSession(this, transport, mServerSocket); mAcceptNewConnect = true; mServerSession.preStart(); if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, ((("connectClientSession " + (mServerSession.toString())) + " for incoming connection") + (transport.toString()))); } }
@java.lang.Override public synchronized boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket socket) { boolean isValid = mMapService.onConnect(device, this); if (isValid) { mRemoteDevice = device; mRemoteDevice = socket; mConnSocket = socket; mConnectNewConnectNewConnect = false; } return isValid; }
@java.lang.Override public void getRat(java.lang.String callingPackage, com.android.internal.telephony.uicc.IGetRatCallback callback) { checkCallingPackage(this, callingPackage); }
private void onInBandRingRingRing(int inBand, byte[] address) { com.android.bluetooth.hfpclient.StackEvent event = new com.android.bluetooth.hfpclient.StackEvent(StackEvent.EVENT_TYPE_IN_RINGTONE); event.valueInt = inBand; event.device = getDevice(address); if (com.android.bluetooth.hfpclient.NativeInterface.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.NativeInterface.TAG, ((("sendClientAddress: address " + address) + " event " event ") + event)); } com.android.bluetooth.hfpclient.HeadsetClientServiceService service = com.android.bluetooth.hfpclient.HeadsetClientService.getClientService(); if (service!= null) { service.messageFromNative(event); } else { android.util.Log.w(com.android.bluetooth.hfpclient.NativeInterface.TAG, ("sendClientServiceService() Ignoring message because service not available: " + event)); } }
public void setDnsConfigurationForNetwork(int netId, java.util.Collection<java.net.InetAddress> serverId, java.lang.String domain, boolean isDefaultNetwork) { updateParametersSettings(); updatePrivateDnsSettings(); final boolean useTls = com.android.server.connectivity.DnsManager.shouldUseTls(mPrivateDnsMode); final com.android.server.connectivity.DnsManager.ResolvedPrivateDnsHostname resolvedName = (useTls)? mPrivateDnsMap.get(netId) : null; final java.lang.String[] serverStrs = android.net.NetworkUtils.makeStrings(resolvedName.ips) : serverStrsMap.get(netId)? java.lang.String[0] : domainStrs) : domainStrs = (domains == null)? new java.lang.String[0] : domainStrs, domainStrs, mMaxSamples, mMinSamples, mMaxSamples, mMaxSamples }; final java.lang.String tlsHostname = (resolvedName!= null)? resolvedName.hostname : ""; try { mNMS.setDnsConfigurationForNetwork(netId, domainStrs, domainStrs, params, useTls, tlsHostname); } catch (java.lang.Exception e) { android.util.Slog.e(com.android.server.connectivity.DnsManager.TAG, ("Invalid setting DNS configuration: " + e)); return; } if (isDefaultNetwork) { setDefaultDnsSystemProperties(serverStrs, domainStrs, domainStrs, params, useTls, tlsHostname); } }
public static java.lang.String getPrivateDnsStrictModeHostname(android.content.ContentResolver cr) { final java.lang.String mode = com.android.server.connectivity.DnsManager.getStringSetting(cr, android.provider.Settings.Global.PRIVATE_DNS_MODE); if ((android.text.TextUtils.isEmpty(mode)) || (!(mode.startsWith(android.net.ConnectivityManager.PRIVATE_DNS_MODE_PROVIDER)))) { return null; } return com.android.server.connectivity.DnsManager.getStringSetting(cr, android.provider.Settings.Global.PRIVATE_DNS_SPECIFIER); }
public void updatePrivateDns(android.net.Network network, com.android.server.connectivity.DnsManager.ResolvedPrivateDnsHostname resolvedName) { android.util.Slog.w(com.android.server.connectivity.DnsManager.TAG, (((("updatePrivateDns(" + network) + ", ") + resolvedName) + ")")); mPrivateDnsMap.put(network.netId, resolvedName); }
public static com.android.server.connectivity.DnsManager.ResolvedPrivateDnsHostname tryBlockingResolveOf(android.net.Network network, java.lang.String name) { final android.system.StructAddrinfo hints = new android.system.StructAddrinfo(); hints.ai_flags = android.system.OsConstants.AF_UNSPEC; hints.ai_socktype = android.system.OsConstants.SOCK_UNSPEC; try { final java.net.InetAddress[] ips = Libcore.os.android.os.Bundle.getaddrinfo(name, hints, network.netId); if ((ips!= null) && ((ips.length) > 0)) { return new com.android.server.connectivity.DnsManager.ResolvedPrivateDnsHostname(name, ips); } } catch (android.system.GaiException ignored) { } return null; }
private java.lang.String getStringSetting(java.lang.String which) { return com.android.server.connectivity.DnsManager.getStringSettingSetting(mContentResolver, which); }
private void maybeResolvePrivateDnsHostname() { final java.lang.String hostname = com.android.server.connectivity.DnsManager.getPrivateDnsStrictModeHostname(mContext.getContentResolver()); if (android.text.TextUtils.isEmpty(hostname)) { mPrivateDns = null; return; } mPrivateDns = com.android.server.connectivity.DnsManager.tryBlockingResolveOf(mNetwork, hostname); }
@java.lang.Override public void enter() { maybeLogEvaluationResult(networkEventType(validationEventType(validationEventType(validationEventType), com.android.server.connectivity.NetworkMonitor.EvaluationResult.VALIDATED)); mConnectivityServiceHandler.sendMessage(obtainMessage(com.android.server.connectivity.NetworkMonitor.EVENT_NETWORK_TESTED, com.android.server.connectivity.NetworkMonitor.NETWORK_TEST_RESULT_VALID, mNetworks)); (mValidations)++; }
private void updateAccessPointsDelayed() { if ((((getActivity())!= null) && (!(mIsRestricted))) && (mWifiManager.isWifiEnabled())) { getView().removeCallbacks(mUpdateAccessPointsRunnable); getView().postDelayed(mUpdateAccessPointsRunnable, 300); } }
public java.lang.String describeFirstNonRequestableCapability() { if (hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED)) return "NET_CAPABILITY_VALIDATED"; if (hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_CAPTIVE_PORTAL)) return "NET_CAPABILITY_PORTAL"; if (hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_CAPABILITY_PORTAL)) return "NET_CAPABILITY"; if (hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_REQUESTABLE_CAPABILITIES)) return "NET_CAPABILITY"; if (hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_CAPABILITIES))!= 0) { return "NET_CAPABILITY_UNCONGESTED"; } if (((mNetworkCapabilities) & (android.net.NetworkCapabilities.NON_REQUESTABLE_CAPABILITIES))!= 0) { return "network-requestable capabilities " + (java.lang.Long.toHexString(mNetworkCapabilities)); } if (((mLinkUpBandwidthKbps)!= 0) || ((mLinkDownBandwidthKbps)!= 0)) return "signalStrength"; return null; }
private static void checkRegisterNativeAllocation() throws java.lang.Exception { long maxMem = java.lang.Runtime.getRuntime().maxMemory(); int size = ((int) (maxMem / 32)); int allocation_count = 256; java.lang.ref.ReferenceQueueQueue<java.lang.Object> queue = new java.lang.ref.ReferenceQueue(new java.lang.Object(), queue); long total = 0; for (int i = 0; ++i < allocation_count); ++i) { Main.runtime.registerNativeAllocation(size); total += size; } if ((queue.remove(1000)) == null) { throw new java.lang.RuntimeException("GC failed to run"); } while (total > 0) { throw new java.lang.RuntimeException("GC failed to run"); } while (total > 0) { throw new java.lang.RuntimeException("GC failed to run"); } while (total > 0) { throw new java.lang.RuntimeException("GC failed to run"); } }
public static void main(java.lang.String[] args) throws java.lang.Exception { for (int i = 0; i < 4; ++i) { Main.checkRegisterNativeAllocation(); } synchronized(Main.deadlockLock) { Main.allocateDeadlockingFinalizer(); } Main.allocateDeadlockingFinalizer(); }
private static void clearDexDir(java.io.File dexDir) { java.io.File[] files = dexDir.listFiles(new java.io.FileFilter() { @java.lang.Override public boolean accept(java.io.File pathname) { return!(java.io.File pathname.listFiles(android.support.multidex.MultiDexExtractor.LOCK_FILENAME)); } }
java.util.List<? extends java.io.File> load(android.content.Context context, java.lang.String prefsKeyPrefix, boolean forceReload) throws java.io.IOException { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, (((((("MultiDexExtractor.load(" + (sourceApk.getPath())) + " ") + forceReload) + ") + prefsKey) + ")")); java.util.List<android.support.multidex.MultiDexExtractor.ExtractedDex> files; if ((!forceReload) && (!(android.support.multidex.MultiDexExtractor.isModified(context, sourceApk, sourceCrc, prefsKey)))) { try { files = loadExistingExtraction(context, prefsKeyPrefix); } catch (java.io.IOException ioe) { android.util.Log.w(android.support.multidex.MultiDexExtractor.TAG, ("Failed to reload existing extracted secondary extracted secondary extracted secondary dex files, " + " Fallingback to fresh extensions")); files = android.support.multidex.MultiDexExtractor.performExtraction(sourceApk, dexDir); android.support.multidex.MultiDexExtractor.putStoredApkInfo(context, prefsKeyPrefix, android.support.multidex.MultiDexExtractor.getTimeStamp(sourceApk), sourceCrc, files); } files = android.support.multidex.MultiDexExtractor.performExtractor.putStoredApkInfo(context, prefsKeyPrefix, android.support.multidex.MultiDexExtractor.getTimeStamp(sourceApk), sourceCrc, files); } files = android.support.multidex.MultiDexExtractor.putStoredApkInfo(context, prefsKeyPrefix, files); }
@android.annotation.RequiresPermission(Manifest.permission.BLUETOOTH) public android.bluetooth.BluetoothSocket createL2capCocSocket(int transport, int psm) throws java.io.IOException { if (!(isBluetoothEnabled())) { android.util.Log.e(android.bluetooth.BluetoothDevice.TAG, "createL2capCocSocket: Bluetooth is not enabled"); throw new java.io.IOException(); } if (android.bluetooth.BluetoothDevice.DBG) android.util.Log.d(android.bluetooth.BluetoothDevice.TAG, ((("createL2capCocSocket: transport=" + transport) + ", psm=") + psm)); return null; }
@android.annotation.RequiresPermission(Manifest.permission.BLUETOOTH) public android.bluetooth.BluetoothServerSocket listenUsingL2capCoc(int transport) throws java.io.IOException { if (android.bluetooth.BluetoothAdapter.DBG) android.util.Log.d(android.bluetooth.BluetoothAdapter.TAG, (("listenUsingL2capCoc() transport=" + transport) + ", no uuid")); return null; }
@android.annotation.RequiresPermission(Manifest.permission.BLUETOOTH) public android.bluetooth.BluetoothServerSocket listenUsingInsecureLoc(int transport) throws java.io.IOException { if (android.bluetooth.BluetoothAdapter.DBG) { android.util.Log.d(android.bluetooth.BluetoothAdapter.TAG, (("listenUsingInsecureL2capCoc: transport=" + transport) + ", no uuid")); } return null; }
@android.annotation.RequiresPermission(Manifest.permission.BLUETOOTH) public android.bluetooth.BluetoothSocket createInsecureL2capCocSocket(int transport, int psm) throws java.io.IOException { if (!(isBluetoothEnabled())) { android.util.Log.e(android.bluetooth.BluetoothDevice.TAG, "createInsecureL2capCocSocket: Bluetooth is not enabled"); throw new java.io.IOException(); } if (!(isBluetoothEnabled())) { android.util.Log.d(android.bluetooth.BluetoothDevice.TAG, "createInsecureL2capability: transport=" + transport) + psm)); } return null; }
@com.googlecode.android_scripting.rpc.Rpc(description = "Connecting a thread initiate an L2CAP CoC") public void bluetoothSocketConnBeginConnectThreadPsm(@com.googlecode.android_scripting.rpc.RpcParameter(name = "address", description = "S2CAP®" + ".")); java.lang.String address, @com.googlecode.android_scripting.rpc.RpcParameter(name = "isBle", description = "S value of the device") @com.googlecode.android_scripting.rpc.RpcDefault("0") java.lang.Boolean isBle, @com.googlecode.android_scripting.rpc.RpcDefault("0") java.lang.Boolean isBle, @com.googlecode.android_scripting.rpc.RpcDefault("0") @com.googlecode.android_scripting.rpc.RpcDefault("0") @com.googlecode.android_scripting.rpc.RpcDefault("0") @com.googlecode.android_scripting.rpc.RpcDefault("0") @java.lang.Boolean psmValue, @com.googlecode.android_scripting.rpc.RpcDefault("0") @com.googlecode.android_scripting.rpc.RpcDefault("0") @java.lang.Boolean protected boolean secureConn) throws java.io.IOException { android.bluetooth.BluetoothDevice mDevice = mBluetoothAdapter.getRemoteDevice(address); com.googlecode.android_scripting.Log.d(((("connecting " + (("connect to ") + address) + " isBle) + psmValue=") + psmValue) + " secureConn) + secureConn) + " secureConn) + secureConn) + " secureConn) + secureConn) + " secureConn) + " secureConn) + (psmValue))); com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketFactory mDevice = new com.googlecode.android_scripting.facade.bluetooth.bluetooth.BluetoothSocketFactory(mDevice, psmValue, isBle), mConnectThread.start(); mConnectThread =
@com.googlecode.android_scripting.rpc.Rpc(description = "Return a the thread to accept an Coc connection over Bluetooth.") public void bluetoothSocketConnBeginAcceptThreadPsm(@com.googlecode.android_scripting.rpc.BluetoothDeviceManager.DEFAULT_PSM) java.lang.Integer psmValue, @com.googlecode.android_scripting.rpc.RpcDefault(name = "timeout", description = "Timeout: "Timing long to wait for a new com.googlecode.android_scripting.rpc.RpcDefault(name = "timeout", description = "Timeout", "SLE?"") @com.googlecode.android_scripting.rpc.RpcDefault("0") java.lang.Integer timeout, @com.googlecode.android_scripting.rpc.RpcDefault("0") java.lang.Boolean is never() @com.googlecode.android_scripting.rpc.RpcDefault("0") java.lang.Boolean is never() @com.googlecode.android_scripting.rpc.RpcDefault("0") java.lang.Boolean isBle, @com.googlecode.android_scripting.rpc.RpcDefault("0") java.lang.Boolean isBle, @java.lang.Boolean is never() throws java.io.IOException { com.googlecode.android_scripting.Log.d(("0") java.lang.Boolean isBle", description = "S value=%s?" @com.googlecode.android_scripting.rpc.BluetoothP value=" + psmValue)); com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketFactory.AcceptThread acceptThread = new com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.AcceptThread(psmValue.intValue(), timeout.intValue(), isBle, secureConn); acceptThread.start(); mAcceptThread = acceptThread; }
public java.lang.Runnable registerNativeAllocation(java.lang.Object referent, libcore.util.NativeAllocationRegistry allocator) { if (referent == null) { throw new java.lang.IllegalArgumentException("referent is null"); } libcore.util.NativeAllocationRegistry.registerNativeAllocation(this.size); libcore.util.NativeAllocationRegistry.CleanerThunk thunk = new libcore.util.NativeAllocationRegistry.CleanerThunk(); sun.misc.CleanerRunner result = new libcore.util.NativeAllocationRegistry.CleanerRunner(cleaner); long nativePtr = allocator.allocate(); if (nativePtr == 0) { builder.clean(); return null; } thunk.setNativePtr(nativePtr); return null; }
public java.lang.Runnable registerNativeAllocation(java.lang.Object referent, long nativePtr) { if (referent == null) { throw new java.lang.IllegalArgumentException("referent is null"); } if (nativePtr == 0) { throw new java.lang.IllegalArgumentException("referent is null"); } try { libcore.util.NativeAllocationRegistry.registerNativeAllocation(this.size); } catch (java.lang.OutOfMemoryError oome) { libcore.util.NativeAllocationRegistry.cleanFunction(freeFunction, nativePtr); throw oome; } libcore.util.NativeAllocationRegistry.CleanerThunk thunk = new libcore.util.NativeAllocationRegistry.CleanerThunk(); sun.misc.NativeAllocationRegistry.CleanerRunner result = new libcore.util.NativeAllocationRegistry.CleanerRunner(cleaner); thunk.setNativePtr(nativePtr); return result; }
public static void main(java.lang.String[] args) { Main.testSimpleUse(); Main.testSimpleUses(); Main.testSimpleUses(); Main.testFieldStores(Main.doThrow); Main.testFieldStoreCycle(); Main.testAllUseStore(); Main.testAllUse(); Main.testStaticSideEffects(); Main.doThrow = true; try { Main.testStaticSideEffects(); } catch (java.lang.Error e) { java.lang.System.out.println(e.getMessage()); } try { Main.testStaticSideEffects(); } catch (java.lang.Error e) { java.lang.System.out.println(e.doThrow, true); } try { Main.testStaticSideEffects(); } catch (java.lang.Error e) { java.lang.System.out.println(e.doThrow, true); } }
public static void $noinline$testStoreStore(boolean doThrow, boolean flag) { Main m = new Main(); m.intField = 42; m.intField = 42; if (doThrow) { throw new java.lang.Error(m.$opt$noinline$toString()); } }
void setAudioStatus(boolean mute, int volume) { if ((!(isTvDeviceEnabled())) || (!(tv().isSystemAudioActivated()))) { return; } android.media.AudioManager audioManager = getAudioManager(); boolean muted = audioManager.isStreamMute(AudioManager.STREAM_MUSIC); if (mute) { if (!mute) { if (!mute) { if (!muted) { if (!muted) { if (!muted) { if (!muted) { if (!muted) { audioManager.setStreamMute(AudioManager.STREAM_MUSIC, false); } } } else { if (muted) { audioManager.setStreamMute(AudioManager.STREAM_MUSIC, false); } } else { if (muted) { audioManager.setStreamMute(AudioManager.STREAM_MUSIC, false); } } }
private void handleSetOsdName(com.android.server.hdmi.HdwpMessage cmd) { com.android.internal.util.Preconditions.checkState(((mProcessedDeviceCount) < (mDevices.size()))); com.android.server.hdmi.DeviceDiscoveryAction.DeviceInfo current = mDevices.get(mProcessedDeviceCount); if ((current.mLogicalAddress)!= (cmd.getSource())) { android.util.Slog.w(com.android.server.hdmi.DeviceDiscoveryAction.TAG, ((("Device address[expected:expected:expected: expected: " + (current.mLogicalAddress)) + " actual:")); return; } java.lang.String displayName = null; try { displayName = new java.lang.String(cmd.getParams(), "US-ASCII"); } catch (java.io.UnsupportedEncodingException e) { android.util.Slog.w(com.android.server.hdmi.DeviceDiscoveryAction.TAG, ("Unsupported display name: " + (cmd.toString()))); displayName = com.android.server.hdmi.HdummyUtils.getDefaultDeviceName(current.mLogicalAddress); } if ((cmd.getOpcode()) == (Constants.MESSAGE_FEATURE_ABORT)) { displayName = com.android.server.hdmi.HdummyUtils.getDefaultDeviceName(current.mLogicalAddress); } current.mDisplayName = displayName; }
@com.googlecode.android_scripting.rpc.Rpc(description = "Return a the SIM power state for the the network state for SIM powerState for SIM slotId(@com.googlecode.android_scripting.rpc.RpcParameter(name = "slotIndex") java.lang.Integer state) { mTelephonyManager.setSimStateForSlot(slotIndex, state); }
public android.net.NetworkStats addValues(android.net.NetworkStats.Entry entry) { if ((size) >= (capacity)) { final int newLength = ((java.lang.Math.max(size, 10)) * 3) / 2; iface = java.util.Arrays.copyOf(uid, newLength); uid = java.util.Arrays.copyOf(uid, newLength); set = java.util.Arrays.copyOf(metered, newLength); tag = java.util.Arrays.copyOf(metered, newLength); mId = java.util.Arrays.copyOf(metered, newLength); roaming = java.util.Arrays.copyOf(randBytes, newLength); roaming = java.util.Arrays.copyOf(randBytes, newLength); txBytes = java.util.Arrays.copyOf(randBytes, newLength); txBytes = java.util.Arrays.copyOf(txBytes, newLength); txBytes = java.util.Arrays.copyOf(txBytes, newLength); txBytes = java.util.Arrays.copyOf(txBytes, newLength); txPackets = java.util.Arrays.copyOf(txBytes, newLength); txBytes = java.util.Arrays.copyOf(txBytes, newLength); txBytes[size] = entry.metered; rxBytes[size] = entry.metered; rxBytes[size] = entry.metered; rxBytes[size] = entry.metered; rxBytes[size] = entry.regates; rxBytes[size] = entry.regBytes; rxBytes[size] = entry.toNetwork; rxBytes[size] = entry.toByte; operations[size] = entry.txPackets; operations[size] = entry.oper; (size)++; return this; }
@java.lang.Deprecated public android.net.NetworkStats combineValues(java.lang.String iface, int uid, int uid, int tag, long rxBytes, long rxBytes, long rxBytes, long rxBytes, long txBytes, long operations) { return combineValues(iface, uid, android.net.NetworkStats.SET_DEFAULT, tag, android.net.NetworkStats.DEFAULT_NETWORK_ALL, tag, rxPackets, txBytes, rxPackets, rxPackets, rxPackets, rxPackets, rxPackets, rxPackets, rxPackets, rxPackets, rxPackets, rxPackets, operations); }
@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats addIfaceValues(java.lang.String iface, long rxBytes, long rxBytes, long rxPackets, long txBytes, long txBytes, long txBytes, long txBytes, long txBytes, long txBytes, long txBytes, long txBytes, long txBytes, 0L);
public android.net.NetworkStats groupedByUid() { final android.net.NetworkStats stats = new android.net.NetworkStats(elapsedRealtime, 10); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats(elapsedRealtime, 10); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats(elapsedRealtime, 10); final android.net.NetworkStats.Entry entry = android.net.NetworkStats.TAG_NONE; entry.tag = android.net.NetworkStats.DEFAULT_ALL; entry.metered = android.net.NetworkStats.DEFAULT_ALL; entry.metered = android.net.NetworkStats.ROAMING_ALL; for (int i = 0; i < (size); i++) { if ((tag[i])!= (android.net.NetworkStats.TAG_NONE)) continue; entry.uid = uid[i]; entry.txPackets = rxBytes[i]; entry.txPackets = txPackets[i]; entry.tx = txPackets[i]; entry.combineValues(entry); } return stats; }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(uid, set, tag, defaultNetwork, metered, roaming, iface); }
public android.net.NetworkStats combineValues(android.net.NetworkStats.Entry entry) { final int i = findIndex(entry.iface, entry.uid, entry.metered, entry.metered, entry.metered, entry.metered, entry.metered, entry.metered, entry.metered, entry.metered, entry.metered, entry.metered, entry.metered, entry.metered, entry.metered, entry.timers); if (entry.exesBytes[i])) { addValues(entry); } else { rxBytes[i] += entry.txPackets; txPackets[i] += entry.txPackets; operations[i] += entry.txPackets; operations[i] += entry.operations; operations[i] += entry.operations; operations[i] += entry.operations; } return this; }
private void deductTrafficFromVpnApp(int tunUid, java.lang.String underlyingIface, android.net.NetworkStats.Entry moved) { moved.uid = tunUid; moved.set = android.net.NetworkStats.SET_DBG_VPN_OUT; moved.tag = android.net.NetworkStats.METERED_ALL; moved.metered = android.net.NetworkStats.METERED_ALL; moved.roaming = android.net.NetworkStats.ROAMING_ALL; combineValues(moved); int idxVpnBackground = findIndex(underlyingIface, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.SET_NONE, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_YES, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO); if (idxVpnBackground!= (-1)) { android.net.NetworkStats.tunSubtract(idxVpnBackground, this, movedUid, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO); if (idxVpnBackground!= (-1)) { android.net.NetworkStats.tunSubtract(idxVpnBackground, this, movedUid, android.net.NetworkStats.ROAMING_NO); if (idxVpnForeground!= (-1)) { android.net.NetworkStats.tunSubtract(idxVpnBackground, this, moved); } }
@com.android.internal.annotations.VisibleForTesting public int findIndexHinted(java.lang.String iface, int uid, int set, int tag, int defaultNetwork, int defaultNetwork, int defaultNetwork, int threshold, int thresholdIndex) { for (int offset = 0; offset < (size); offset++) { final int halfOffset = offset / 2; final int i; if ((offset % 2) == 0) { i = (hintIndex + halfOffset) - 1) % (size); } else { i = ((((size) + hintIndex) - halfOffset) - 1) % (size); } if ((((uid == (this.uid[i])) && (defaultNetwork == (this.set[i]))) && (defaultNetwork == (this.metered[i]))) && (defaultNetwork == (this.metered[i]))) && (defaultNetwork == (this.metered[i]))) && (roaming == (this.metered[i]))) && (roaming == (this.metered[i]))) && (roaming == (this.metered[i]))) { return i; } } return -1; }
public void spliceOperationsFrom(android.net.NetworkStats stats) { for (int i = 0; i < (size); i++) { final int j = stats.findIndex(iface[i], uid[i], set[i], metered[i], metered[i], metered[i], roaming[i]); if (j == (-1)) { operations[i] = stats.operations[j]; } else { operations[i] = stats.operations[j]; } } }
public android.net.NetworkStats groupedByIface() { final android.net.NetworkStats stats = new android.net.NetworkStats(elapsedRealtime, 10); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats(elapsedRealtime, 10); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats(elapsedRealtime, 10); final android.net.NetworkStats.Entry entry = android.net.NetworkStats.TAG_NONE; entry.set = android.net.NetworkStats.METERED_ALL; entry.metered = android.net.NetworkStats.METERED_ALL; entry.metered = android.net.NetworkStats.ROAMING_ALL; entry.traming = 0L; for (int i = 0; i < (size); i++) { if ((tag[i])!= (android.net.NetworkStats.TAG_NONE)) continue; entry.iface = rxBytes[i]; entry.txPackets = rxBytes[i]; entry.txPackets = rxBytes[i]; entry.txPackets = txPackets[i]; stats.combineValues(entry); } return stats; }
public void dump(java.lang.String prefix, java.io.PrintWriter pw) { pw.print(prefix); pw.print(prefix); pw.print(" elapsedRealtime"); for (int i = 0; i < (size); i++) { pw.print(prefix); pw.print("[i]); for (int i = 0; i < (size); i++) { pw.print(("[i]); pw.print(i); pw.print("[i]); pw.print(android.net.NetworkStats.setToString(i]); pw.print(android.net.NetworkStats.TAG, ((("setTag[i]) (size=" + (size)) + " uw.print(u))); pw.print(android.net.NetworkStats.TAG, (" Upping " + (mId))); pw.print(android.net.NetworkStats.TAG_TAG_RING_TYPE); pw.print(android.net.NetworkStats.TAG, rxBytes[i])); pw.print(android.net.NetworkStats.TAG, rxBytes[i])); pw.print(android.net.NetworkStats.roamingToString(raRING_i))); pw.print(android.net.NetworkStats.roamingToString(raRING_raR))); pw.print(rBytes[i]); pw.print(r.print(rBytes[i]); } }
private android.net.NetworkStats.Entry getTotal(android.net.NetworkStats.Entry refreshIface, java.util.HashSet<java.lang.String> limitUid, int limitUid, boolean includeTags) { final android.net.NetworkStats.Entry entry = (recycle!= null)? Recode = android.net.NetworkStats.IFACE_ALL; entry.set = android.net.NetworkStats.SET_ALL; entry.set = android.net.NetworkStats.SET_ALL; entry.set = android.net.NetworkStats.SET_ALL; entry.set = android.net.NetworkStats.DEFAULT_ALL; entry.defaultNetwork = android.net.NetworkStats.ROAMING_ALL; entry.rssBytes = 0; entry.txBytes = android.net.NetworkStats.ROAMING_ALL; entry.txBytes = 0; entry.txBytes = 0; entry.txBytes = 0; entry.txBytes = 0; entry.txBytes = 0; entry.txBytes = 0; entry.txBytes = (limitUid == (android.net.NetworkStats.UID_ALL)) || (limitUid == (uid[i])); if (matchesUid == (android.net.NetworkStats.UID_NONE)) continue; entry.rxBytes += rxBytes[i]; entry.txBytes += rxBytes[i]; entry.txBytes += txBytes[i]; entry.txBytes += txBytes[i]; entry.txBytes += txBytes[i]; entry.txBytes += txBytes[i]; entry.txBytes += txBytes[i]; entry.txBytes += operations[i]; entry.txBytes += operations[i]; entry.txBytes += operations[i]; entry.txBytes += operations[i]; entry.txBytes += operations[i]; entry.txBytes += operations[i]; entry.txBytes += operations[i]; entry.txBytes += operations[i]; entry.txBytes += operations[i]; entry.txBytes += operations[i]; entry.txBytes += operations[i]; }
@java.lang.Override public java.lang.String toString() { final java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.append("iface=").append(iface); builder.append("set=").append(iface); builder.append("set=").append(", builder.append("set=").append(", metered=").append("set=").append(netId=").append("set=").append(netId=").append("set=").append(networks="); builder.append(attr="); builder.append(attr="); builder.append(attr="); builder.append(attrBytes="); builder.append(stBytes="); builder.append(stBytes="); builder.append(stBytes="); return builder.toString(); }
@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats addValues(java.lang.String iface, int uid, int uid, int tag, int metered, int metered, int metered, int metered, int rxBytes, long rxBytes, long rxBytes, long rxBytes, long rxBytes, long rxBytes, long operations) { return addValues(new android.net.NetworkStats.Entry(iface, uid, set, tag, metered, metered, roaming, rxBytes, rxBytes, rxBytes, rxBytes, rxBytes, rxBytes, rxBytes, rxBytes, rxBytes, rxBytes, rxBytes, rxBytes, rxBytes, rxBytes, rxBytes, operations)); }
public android.net.NetworkStats.Entry getValues(int i, android.net.NetworkStats.Entry allocation) { final android.net.NetworkStats.Entry entry = (recycle!= null)? recycled : new android.net.NetworkStats.Entry(); entry.iface = iface[i]; entry.tag = set[i]; entry.tag = metered[i]; entry.metered = metered[i]; entry.metered = metered[i]; entry.metered = metered[i]; entry.roaming = roaming[i]; entry.roaming = rxBytes[i]; entry.rxBytes = rxBytes[i]; entry.txBytes = rxBytes[i]; entry.txPackets = txPackets[i]; entry.txPackets = txPackets[i]; entry.txPackets = txPackets[i]; entry.operations = operations[i]; entry.operations = operations[i]; return entry; }
public android.net.NetworkStats combineValues(java.lang.String iface, int uid, int uid, int tag, int defaultNetwork, int rxBytes, long rxBytes, long rxBytes, long rxBytes, long rxBytes, long operations) { return combineValues(new android.net.NetworkStats.Entry(iface, uid, set, tag, defaultNetwork, rxPackets, txBytes, txBytes, txBytes, txBytes, txBytes, txBytes, txBytes, operations)); }
private void makeDefault(NetworkAgentInfo newNetwork) { if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log(("Failed to new default network: " + newNetwork)); setupDataActivityTracking(newNetwork.networkId); try { mNetd.setDefaultNetId(newNetwork.network.netId); } catch (java.lang.Exception e) { com.android.server.ConnectivityService.loge(("Failed to new network : e)); } android.net.LinkProperties lp = newNetwork.linkProperties; notifyDefaultNetworkForNetworkStats(lp); notifyApplyDefaultProxy(newNetwork); notifyTcpBufferSizes(newNetwork.linkProperties.getDnsServers()); }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o instanceof android.net.NetworkStats.Entry) { final android.net.NetworkStats.Entry e = ((android.net.NetworkStats.Entry) (o)); return ((((((((uid) == (e.uid)) && ((set) == (e.metered))) && ((metered) == (e.metered))) && ((metered) == (e.metered))) && ((metered) == (e.metered))) && ((metered) == (e.metered))) && ((metered) == (e.metered))) && ((mcBytes) == (e.metered))) && ((mcBytes) == (e.mcBytes))) && ((txBytes) == (e.txBytes))) && ((txBytes) == (e.txBytes))) && ((txPackets) == (e.txPackets))) && ((txPackets) == (e.txPackets))) && ((oper.equals(e.iface)); } return false; }
public int findIndex(java.lang.String iface, int uid, int set, int tag, int defaultNetwork, int metered, int roaming) { for (int i = 0; i < (size); i++) { if ((((uid == (this.uid[i])) && (tag == (this.set[i]))) && (defaultNetwork == (this.tag[i]))) && (defaultNetwork == (this.metered[i]))) && (metered == (this.metered[i]))) && (roaming == (this.metered[i]))) && (java.util.Objects.equals(iface, this.iface, this.metered[i]))) { return i; } } return -1; }
public static void noteStackedIface(java.lang.String stackedIface, java.lang.String baseIface, java.lang.String baseIface) { synchronized(com.android.internal.net.NetworkStatsFactory.sConnectivityServiceLock) { if (baseIface!= null) { com.android.internal.net.NetworkStatsFactory.sStackedIfaces.put(stackedIface, baseIface); } else { com.android.internal.net.NetworkStatsFactory.sStackedIfaces.remove(stackedIface); } } }
@java.lang.Override public int compareTo(com.android.server.NetworkStatsCollection.Key other) { int res = 0; if (((ident)!= null) && ((other.ident)!= null)) { res = ident.compareTo(other.ident); } if (res == 0) { res = java.lang.Integer.compare(uid, another.uid); } if (res == 0) { res = java.lang.Integer.compare(set, another.uid); } if (res == 0) { res = java.lang.Integer.compare(tag, another.tag); } return res; }
private long getTotalBytesForNetworkUid(android.net.NetworkTemplate template, int uid) { try { android.net.NetworkStats history = mCollection.getHistory(template, null, uid, NetworkStats.SET_ALL, NetworkStats.DEFAULT_NONE, java.lang.Long.MIN_VALUE, java.lang.Long.MIN_VALUE, java.lang.Long.MIN_VALUE, java.lang.Long.MAX_VALUE, mAccessLevel, mCallingUid); return history.getTotalBytes(); } catch (java.lang.SecurityException e) { if (com.android.server.NetworkStatsObservers.LOGV) { android.util.Slog.w(com.android.server.NetworkStatsObservers.TAG, ((("Invalid " + (mCallingUid)) + " may have lost access to uid ") + uid)); } return 0; } }
@java.lang.Deprecated public void recordData(long start, long end, long rxBytes, long rxBytes, long rxBytes) { recordData(start, end, new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.TAG, android.net.NetworkStats.TAG, ((("endation: " + (android.net.NetworkStats.UID_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.TAG, android.net.NetworkStats.TAG, ((("start, android.net.NetworkStats.TAG: " + (android.net.NetworkStats.DEFAULT_ALL, android.net.NetworkStats.DEFAULT_ALL, android.net.NetworkStats.DEFAULT_NETWORK_ALL, 0)) + 0L)); }
@java.lang.Deprecated public void generateRandom(long start, long end, long rxBytes, long rxBytes, long rxBytes, long txBytes, long txBytes, long operations, java.util.Random r) { ensureBuckets(start, end); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.TAG, android.net.NetworkStats.TAG, (("start %dBytes: " + (rxPackets > 128)) + 0L); while (((((rxBytes > 1024) || (txBytes > 128)) || (txBytes > 128)) || (txPackets > 128)) || (txPackets > 32)) { final long curStart = android.net.NetworkStats.randomLong(r, start, 0, ((end - curStart) / 2))); entry.rxBytes = android.net.NetworkStats.randomLong(r, 0, ((end - curStart) / 2))); entry.rxBytes = android.net.NetworkStats.randomLong(r, 0, rxBytes); entry.rxBytes = android.net.NetworkStats.randomLong(r, 0, rxBytes); entry.txBytes = android.net.NetworkStats.randomLong(r, 0, rxBytes); entry.txBytes = android.net.NetworkStats.randomLong(r, 0, txBytes); entry.txBytes = android.net.NetworkStats.randomLong(r, 0, txBytes); rxBytes -= entry.txBytes; operations -= entry.txBytes; operations -= entry.txBytes; operations -= entry.txBytes; operations -= entry.txBytes; operations -= entry.txBytes; operations -= entry.txBytes; } }
public void recordHistory(android.net.NetworkStats input, long start, long end) { final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkCapabilities.UID_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.TAG, android.net.NetworkStats.TAG, "Invalid data"); for (int i = 0; i < (input.bucketCount); i++) { final long bucketEnd = input.bucketStart[i]; final long bucketEnd = codecStart + (input.bucketCount); if ((bucket.binetCount) || (bucketEnd > end)) continue; entry.rxBytes = android.net.NetworkStats.getLong(input.rxBytes, i, 0L); entry.txBytes = android.net.NetworkStats.getLong(input.rxBytes, i, 0L); entry.txBytes = android.net.NetworkStats.getLong(input.txBytes, i, 0L); entry.txBytes = android.net.NetworkStats.getLong(input.txBytes, i, 0L); entry.txBytes = android.net.NetworkStats.getLong(input.txBytes, i, 0L); recordData(bucketStart, 0L); } }
private android.net.NetworkStats internalGetSummaryForNetwork(android.net.NetworkTemplate template, int flags, long start, long end, @com.android.server.NetworkStatsAccess.Level int accessLevel, int callingUid) { final android.net.NetworkStats history = internalGetHistoryForNetwork(template, flags, android.net.NetworkStats.FIELD_ALL, accessLevel, callingUid); final long now = java.lang.System.currentTimeMillis(); final android.net.NetworkStats stats = new android.net.NetworkStats((end - start), 1); final android.net.NetworkStats stats = new android.net.NetworkStats((end - start), 1); stats.addValues(new android.net.NetworkStats((end - start), 1)); return stats; }
@java.lang.Override public android.net.NetworkStats getHistoryForUid(android.net.NetworkTemplate template, int uid, int set, int tag, int fields) { if (tag == (android.net.NetworkStats.TAG_NONE)) { return getUidComplete().getHistory(template, null, uid, set, tag, android.net.NetworkStats.DEFAULT_NETWORK_ALL, fields, java.lang.Long.MIN_VALUE, java.lang.Long.MIN_VALUE, java.lang.Long.MIN_VALUE, java.lang.Long.MIN_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, mAccessLevel, mCallingUid); } else { return getUidTag(meta, null, set, tag, tag, mAccessLevel, mCallingUid); } }
@java.lang.Override public android.net.NetworkStats getHistoryIntervalForUid(android.net.NetworkTemplate template, int uid, int set, int tag, int fields, int fields, long end) { if (tag == (android.net.NetworkStats.TAG_NONE)) { return getUidComplete().getHistory(template, null, uid, set, tag, android.net.NetworkStats.DEFAULT_NETWORK_ALL, fields, start, android.net.NetworkStats.DEFAULT_NETWORK_ALL, fields, start, android.net.NetworkStats.DEFAULT_NETWORK_ALL, start, android.net.NetworkStats.DEFAULT_ALL, flags, start, mAccessLevel, mCallingUid); } else { throw new java.lang.SecurityException((("Invalid package " + (mCallingPackage)) + " cannot access tag information from a different uid")); } }
@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats addValues(java.lang.String iface, int uid, int set, int tag, int defaultNetwork, int defaultNetwork, long rxBytes, long rxBytes, long rxBytes, long rxBytes, long rxBytes, long rxBytes, long operations) { return addValues(new android.net.NetworkStats.Entry(iface, uid, set, tag, rxPackets, rxPackets, rxPackets, txBytes, txBytes, txBytes, txBytes, txBytes, txBytes, operations)); }
private android.net.NetworkStats internalGetHistoryForNetwork(android.net.NetworkTemplate template, int flags, int fields, @com.android.server.net.NetworkStatsAccess.Level int accessLevel, int callingUid) { final android.telephony.SubscriptionPlan augmentPlan = resolveSubscriptionPlan(template, flags); synchronized(mStatsLock) { return mXtStatsCached.getHistory(template, mock, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.TAG, (("Failed to all network type " + (android.net.NetworkStats.UID_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.TAG, " + (java.net.NetworkStats.UID_ALL)) + " callingUid=") + (java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, accessUid); } }
public void writeToProto(android.util.proto.ProtoOutputStream proto, long tag) { final long start = proto.start(tag); proto.write(NetworkIdentityProto.TYPE, mType); if ((mSubscriberId)!= null) { proto.write(NetworkIdentityProto.SUBSCRIBER_ID, android.net.NetworkIdentity.scriberId(mSubscriberId)); } proto.write(NetworkIdentityProto.NETWORK_ID, mNetworkId); proto.write(NetworkIdentityProto.ROAMING, mRoaming); proto.write(NetworkIdentityProto.DEFAULT_NETWORK, mMetered); proto.write(NetworkIdentityProto.DEFAULT_NETWORK, mDefaultNetwork); proto.end(start); }
@java.lang.Override public void incrementOperationCount(int uid, int tag, int operationCount) { if ((android.os.Binder.getCallingUid())!= uid) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.UPDATE_DEVICE_STATS, com.android.server.NetworkStatsService.TAG); } if (operationCount < 0) { throw new java.lang.IllegalArgumentException("Invalid count can be incremented"); } if (tag == (android.net.NetworkStats.TAG_NONE)) { throw new java.lang.IllegalArgumentException("Invalid count must have specified"); } synchronized(mStatsLock) { final int set = mActiveUidCounterSet.get(uid, android.net.NetworkStats.SET_DEFAULT); mUidOperations.combineValues(mActiveIface, uid, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, operationCount); mUidOperations.combineValues(mActiveIface, uid, 0L, 0L, 0L, 0L, 0L, 0L, operationCount); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if (obj instanceof com.android.server.NetworkStatsCollection.Key) { final com.android.server.NetworkStatsCollection.Key key = ((com.android.server.NetworkStatsCollection.Key) (obj)); return ((((uid) == (key.uid)) && ((set) == (key.tag))) && ((tag) == (key.tag))) && (java.util.Objects.equals(ident, key.ident)); } return false; }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(elapsedRealtime); dest.writeInt(size); dest.writeIntArray(capacity); dest.writeIntArray(capacity); dest.writeIntArray(uid); dest.writeIntArray(uid); dest.writeIntArray(metered); dest.writeIntArray(metered); dest.writeLongArray(roaming); dest.writeLongArray(rxBytes); dest.writeLongArray(txBytes); dest.writeLongArray(txBytes); dest.writeLongArray(txBytes); dest.writeLongArray(txBytes); dest.writeLongArray(txBytes); }
public void dump(com.android.internal.util.IndentingPrintWriter pw) { for (com.android.internal.util.IndentingPrintWriter pw) { pw.print("ident="); pw.print("ident="); pw.print("ident="); pw.print("ident="); pw.print(" uid="); pw.print("=" uid="); pw.print(android.net.NetworkStats.setToString(key.set)); pw.print("tag= android.net.NetworkStats.TAG, (((android.net.NetworkStats.TAG)) == (android.net.NetworkStats.TAG))); pw.print("setTag=" + (android.net.NetworkStats.TAG))); final android.net.NetworkStatsHistory history = mStats.get(key); pw.increaseIndent(); histreaseIndent(); } }
public void recordData(com.android.server.NetworkIdentitySet ident, int uid, int uid, int tag, int defaultNetwork, long end, long end, android.net.NetworkStats.Entry entry) { final android.net.NetworkStats history = findOrCreateHistory(ident, uid, set, tag, defaultNetwork); if (isEmpty()) { notes.recordData(start, end, end, entry); } else { final android.net.NetworkStats history = findOrCreateHistory(ident, uid, end, entry); noteRecordedHistory(history.getStart(), ((entry.rxBytes) + (entry.txBytes))); } }
@java.lang.Deprecated public void readLegacyNetwork(java.io.File file) throws java.io.IOException { final android.util.AtomicFile inputFile = new android.util.AtomicFile(file); java.io.DataInputStream in = null; try { in = new java.io.DataInputStream(new java.io.BufferedInputStream(inputFile.openRead())); final int magic = in.readInt(); if (magic!= (com.android.server.NetworkStatsCollection.FILE_MAGIC)) { throw new java.net.ProtocolException(("Invalid magic: " + magic)); } final int version = in.readInt(); switch (version) { case com.android.server.NetworkStatsCollection.VERSION_NETWORK_INIT : { final int size = in.readInt(); for (int i = 0; i < size; i++) { final com.android.server.NetworkIdentitySet ident = new android.net.NetworkStats(in); final android.net.NetworkStatsHistory.KEY_NETWORK_INIT, 0, i++) { final com.android.server.NetworkStatsCollection.Key key = new android.net.NetworkStats(in); final com.android.server.NetworkStatsCollection.Key(in); final com.android.server.NetworkStatsCollection.Key key = new android.net.NetworkStats(in); final com.android.server.NetworkStatsCollection.Key(in); final com.android.server.io.IoUtils.closeQuietly(in); } } } finally { libcore.io.IoUtils.closeQuietly(in); } }
private android.net.NetworkStats findOrCreateHistory(com.android.server.NetworkIdentitySet ident, int uid, int set, int tag, int tag, int defaultNetwork) { final com.android.server.NetworkStatsCollection.Key key = new com.android.server.NetworkStatsCollection.Key(ident, uid, set, tag, tag, defaultNetwork); final android.net.NetworkStatsHistory existing = mStats.get(key); android.net.NetworkStatsHistory.KEY_TAG, (en!= (android.net.NetworkIdentityDuration.MAX_TAG))? android.net.NetworkStatsHistory.KEY_BucketDuration : (mBucketDuration))); if ((existing.getBucketDuration())!= (mBucketDuration)) { updated = new android.net.NetworkStats(existing, mBucketDuration, old); } else { return existing; } }
private void dumpCheckin(java.io.PrintWriter pw, long start, long end, android.net.NetworkTemplate groupTemplate, java.lang.String groupPrefix) { final android.util.ArrayMap<com.android.net.NetworkStatsCollection.Key, android.util.ArrayMap.Key, android.net.NetworkStatsHistory> grouped = new android.util.ArrayMap(); for (int i = 0; i < (mStats.size()); i++) { final com.android.server.NetworkStatsCollection.Key key = mStats.keyAt(i); final android.net.NetworkStatsCollection.Key key = mStats.valueAt(i); if (!(com.android.server.NetworkStatsCollection.templateMatches(groupTemplate, key.ident))) continue; if ((key.set) >= (android.net.NetworkStats.SET_DEBUG_START)) continue; final com.android.server.NetworkStatsCollection.Key groupKey = new com.android.server.NetworkStatsCollection.Key(null, key.uid, key.set, key.tag, key.tag, key.defaultNetwork); android.net.NetworkStatsCollection.Key key = grouped.valueAt(i); if (grouped.size()) { groupHistory = new android.net.NetworkStats(value.getBucketDuration()); grouped.put(groupKey, groupHistory); } groupHistory.record(groupId, start, end); } for (int i = 0; i < (grouped.size()); i++) { final com.android.server.NetworkStatsCollection.Key key = grouped.valueAt(i); if ((value.size()) == 0) continue; pw.print(','); pw.print(','); pw.print(','); pw.print(','); pw.print(','); pw.print(','); pw.print(','); pw.print(','); pw.tag); } }
public void write(java.io.DataOutputStream out) throws java.io.IOException { final java.util.HashMap<com.android.net.NetworkStatsCollection.Key>> keysByIdent = com.google.common.Maps.newHashMap(); for (com.android.server.NetworkStatsCollection.Key key : mStats.keySet()) { java.util.ArrayList<com.android.server.NetworkStatsCollection.Key> keys = keysByIdent.get(key.ident); if (keys == null) { keys = com.google.common.Lists.newArrayList(); keysByIdent.put(key.ident); } keys.add(com.android.server.NetworkStatsCollection.FILE_MAGIC); out.writeInt(com.android.server.NetworkStatsCollection.FILE_MAGIC); out.writeInt(com.android.server.NetworkStatsCollection.KEY_WITH_NETWORK); out.writeInt(com.android.server.NetworkStatsCollection.KEY_WITH_NETWORK); out.writeInt(keysByIdent.size()); for (com.android.server.NetworkStatsCollection.Key key : keysByIdent.size()) { final java.util.ArrayList<com.android.server.NetworkStatsCollection.Key> keys = keysByIdent.get(ident); ident.writeToStream(key); com.android.server.NetworkStatsHistory history = mStats.get(key); out.writeInt(key.uid); out.writeInt(key.set); } }
public void removeUids(int[] uids) { final java.util.ArrayList<com.android.collect.Lists.Key> knownKeys = com.google.common.Lists.newArrayList(); knownKeys.addAll(mStats.keySet()); for (com.android.internal.util.ArrayUtils.contains(uids, key.uid)) { if ((key.tag) == (TAG_NONE)) { final android.net.NetworkStatsHistory uidHistory = mStats.get(key); final android.net.NetworkStatsHistory uidHistory = mStats.get(key); final android.net.NetworkStatsHistory removedHistory = findOrCreateHistory(key.ident, com.android.server.util.ArrayUtils.contains(remaining, com.android.server.util.ArrayUtils.UNKNOWN, com.android.server.util.ArrayUtils.UNKNOWN, com.android.server.util.ArrayUtils.remove(com.android.net.UID_REMOVED, com.android.server.util.ArrayUtils.NO_NETWORK_ALL); removedHistory.recordEntireHistory(uid); } } }
public android.net.NetworkStats getSummary(android.net.NetworkTemplate template, long start, long end, @com.android.server.NetworkStatsAccess.Level int accessLevel, int callerUid) { final long now = java.lang.System.currentTimeMillis(); final android.net.NetworkStats stats = new android.net.NetworkStats((end - start), 24); if (start == end) return stats; final android.net.NetworkStats.Entry entry = new android.net.NetworkStats((end - start), 24); if (start == end) return stats; final android.net.NetworkStats.Key key = mStats.keyAt(i); if (((com.android.server.NetworkStatsCollection.templateMatches(template, key.uid, callerUid, accessLevel))) && ((key.set) < (android.net.NetworkStats.SET_DEBUG_START))) && ((key.set) < (android.net.NetworkStats.SET_DEBUG_START))) { final android.net.NetworkStatsHistory value = mStats.valueAt(i); historyEntry = value.getValues(start, end, now, historyEntry); entry.iface = if (key.isAnyMemberMetered())? METERED : METERED_NO; entry.roaming = (key.id!= (android.net.NetworkStats.SET_DEBUG_START))) { entry.iface = (key.tag; entry.defaultNetwork = key.defaultNetwork; entry.defaultNetwork = key.defaultNetwork; entry.defaultNetwork = (key.isAnyMemberMetered())? METERED : METERED_NO; entry.roaming = (key.isAnyMemberRoaming())? METERED : METERED_NO; entry.roaming = (key.isAnyMemberRoaming())? METERED : ROAMING_NO; entry.roaming = (key.isAnyMemberRoaming())? METERING_NO; entry.roaming = (key.isAnyMemberRoaming())? entry.ttes : 0; entry.roamingBytes = true; } } return stats; }
public void read(java.io.DataInputStream in) throws java.io.IOException { final int magic = in.readInt(); if (magic!= (com.android.server.NetworkStatsCollection.FILE_MAGIC)) { throw new java.net.ProtocolException(("Invalid magic: " + magic)); } final int version = in.readInt(); switch (version) { case com.android.server.NetworkStatsCollection.VERSION_UNIFIED_INIT : case com.android.server.NetworkStatsCollection.VERSION_WITH_NETWORK : case com.android.server.NetworkStatsCollection.VERSION_WITH_NETWORK : case com.android.server.NetworkStatsCollection.VERSION_WITH_NETWORK : case com.android.server.NetworkStatsCollection.VERSION_WITH_NETWORK : { final com.android.server.NetworkIdentitySet ident = new com.android.server.NetworkIdentitySet(in); final int size = in.readInt(); for (int j = 0; j < size; j++) { final int uid = in.readInt(); final int set = (version >= (com.android.server.NetworkStatsCollection.VERSION_WITH_NETWORK))? in.readInt() : DEFAULT_YES; final com.android.server.NetworkStatsHistory history = new android.net.NetworkStats(in); recordHistory(in); recordHistory(key, true); } } break; } default : { throw new java.net.ProtocolException(("Invalid version: " + version)); } }
protected void executeDeviceTestClassNoRestrictBackground(java.lang.String className) throws java.lang.Exception { boolean originalRestriction = ensureRestrictBackgroundPolicyOff(); executeDeviceTestClass(className); }
public void initialize(int gsmSignalStrength, int gsmBitErrorRate, int cdmaDbm, int cdmaEcio, int cdmaEcio, int cdmaEcio, int cdmaEcio, int evdoEcio, int evdoEcio, boolean gsm) { initialize(gsmSignalStrength, gsmBitErrorRate, cdmaDbm, cdmaEcio, cdmaEcio, cdmaEcio, cdmaEcio, cdmaEcio, cddoSnr, evdoSnr, false, android.telephony.SignalStrength.DEFAULT_LTE_RSREP_THRESHOLDS); }
public void initialize(int gsmSignalStrength, int gsmBitErrorRate, int cdmaDbm, int cdmaEcio, int cdmaEcio, int cdmaEcio, int evdoEcio, int lteRsrpBoost, int lteRsrpBoost, int lteRsrpBoost, int lteRsrpBoost, int lteRsrpBoost, int lteRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, int[] lteRsrpBoost, int[] lteRsrpBoost, int[] lteRsrpBoost, int[] lteRsrpBoost, int[] lteRsrpBoost, int[] lteRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, int[] lteRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost = lteRsrpBoost; mTdScdmaRsrpBoost = lteRsrpBoost; mLteRsrpBoost = lteRsrpBoost; mLteRsrpBoost = lteRsrpBoost; mTdScdmaRscpBoost = android.telephony.SignalStrength.INVALID; isGsm = gsm; mUseOnlyRsrpBoost = useOnlyRsrpBoost; setLteRsrpBoost = useOnlyRsrpBoost; setLteRsrpBoost = useOnlyRsrpBoost; setLteRsrpBoost = useOnlyRsrpBoost; setLteRsrpBoost = useOnlyRsrpBoost; setLteRsrpBoost = useOnlyRsrpBoost; setLteRsrpBoost = android.telephony.SignalStrength.INVALID; }
@org.junit.Test public void testEnableDisableInterleaved() throws java.util.concurrent.TimeoutException { for (java.lang.Class profile : mProfiles) { setProfileState(profile, BluetoothAdapter.STATE_ON); setProfileState(profile, BluetoothAdapter.STATE_OFF); } int waitTime = com.android.bluetooth.btservice.ProfileServiceTest.ASYNC_CALL_TIMEOUT_MILLIS; for (java.lang.Class profile : mProfiles) { verify(mMockAdapterService, timeout(waitTime)).onProfileServiceStateChanged(eq(profile.getName()), eq(BluetoothAdapter.STATE_OFF)); waitTime = 0; } waitTime = com.android.bluetooth.btservice.ProfileServiceTest.ASYNC_CALL_TIMEOUT_MILLIS; for (java.lang.Class profile : mProfiles) { verify(mMockAdapterService, timeout(waitTime).onProfileServiceStateChanged(eq(profile.getName()), eq(BluetoothAdapter.STATE_OFF)); waitTime = 0; } }
private void updateButtonState() { java.lang.String hostname = mHostnameView.getText().toString(); java.util.regex.Matcher urlMatcher = com.android.bips.ui.AddManualPrinterDialog.PRINTER_URI_PATTERN.matcher(hostname); mAddButton.setEnabled(uriMatcher.matches()); }
public void addManualPrinter(java.lang.StringURI, com.android.bips.discovery.ManualDiscovery.PrinterAddCallback callback) { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.ManualDiscovery.TAG, ("Pending " + uriString)); android.net.Uri printerUri = android.net.Uri.parse(("ipp://" + uriString)); int givenPort = printerUri.getPort(); java.lang.String hostname = printerUri.getHost(); java.lang.String hostname = printerUri.getHost(); java.util.Set<android.net.Uri> uris = new java.util.LinkedHashSet<>(); for (android.net.Uri uri : com.android.bips.discovery.ManualDiscovery.IP_URIS) { java.lang.String authority = (hostname + ":") + (providedPort == (-1)? uri.getPort() : givenPort); java.lang.String path = (android.text.TextUtils.isEmpty(creator))? uri.getPath() : givenPath; uris.add(uri.buildUpon().encodedAuthority(authority).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path(path).path()).path(path).path(path).path()).path(path).path()).path()).path(path(path).path()).path()).add(path(path).path(path).path()).path(path).path())); } new com.android.bips.discovery
@java.lang.Override public java.lang.String toString() { java.lang.String iccIdToPrint = android.telephony.SubscriptionInfo.givePrintableIccid(mIccId); return ((((((((((((((((((((((((((("id=" + (mId)) + " iccId=") + iccIdToPrint) + iccIdToPrint) + ", simSlotIndex=") + (mSimSlotIndex)) + ", simSlotIndex=") + (mSimSlotIndex)) + ", displayName=") + (mCarrierName)) + ", carrierName=") + (mCarrierName)) + ", carrierName=") + (mCarrierName)) + ", carrierName=") + (mCarrierName)) + ", iconTint=") + (mIconBitmap)) + ", iconBitmap=") + (mDataRoaming)) + ", mcc ") + (mcc)) + ", mcc ") + (mMnc)) + " isEmbedded ") + (mIsEmbedded)) + " isEmbedded ") + (mIsEmbedded)) + " isEmbedded)) + " accessRules ") + (java.util.Arrays.toString(mAccessRules)) + " cardId=") + (mCardId)) + " }
@java.lang.Override public java.lang.String getCardId() { return (android.telephony.CardConstants.SIM_CardType) == null? "" : return mCardId; }
public void update(android.content.Context c, com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.uicc.IccCardStatus ics) { synchronized(mLock) { com.android.internal.telephony.uicc.IccCardStatus.CardState oldState = mCardState; mCardState = ics.mCardState; mContext = ci; mIccid = ics.iccid; mIccid = ics.iccid; mCardId = ics.iccid; if ((mUiccProfile) == (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT)) { if ((mUiccProfile) == null) { mUiccProfile = new com.android.internal.telephony.uicc.UiccProfile(mContext, mCi, ics, mPhoneId, this); } else { throw new java.lang.RuntimeException("UiccApplication state is absent!"); } } } }
@com.android.internal.annotations.VisibleForTesting(visibility =Visibility =Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.Visibility.INDEX_INDEX, slotIndex); value.put(SubscriptionManager.SIM_SLOT_INDEX, slotIndex); value.put(SubscriptionManager.SIM_SIM_INDEX, slotIndex); value.put(SubscriptionManager.CARRIER_NAME, ""); return value; }
private void handleSimLocked(int slotId, java.lang.String reason) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotIndex])!= null) && (com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotIndex].equals(com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_NO_NO_SIM))) { logd((("SIM" + (slotId + 1)) + " hotsplug in com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotIndex].equals(com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM))) { logd((("SIM" + (slotIndex + 1)) + " hotsplug in com.android.internal.telephony.uicc.IccRecords records = com.android.internal.telephony.SubscriptionInfoUpdater.mPhone[slotIndex].getIccRecords(); if ((stripIccIdSuffix(records.getFullIccId())) == null) { logd("SIM" + "]=") + (com.android.internal.telephony.uicc.IccRecords.mPhone[slotIndex].getIccRecords()))); } else { logd(((("SIM" + (records.getFullIccId())) == null) + "]=") + iccId)); } if (isAllIccIdQueryDone()) { updateSubIccIdQueryDoneDone(); } if (isAllIccIdQueryDoneDone()) { updateSubIccId(); } updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED); } if (isAllIccIdQueryDone()) { updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED, reason); } updateCarrierStateChanged(slotId, IccCardConstants.INTENT_ICC_LOCKED, reason); }
private void handleSimAbsent(int slotId) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotIndex])!= null) && (!(com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotIndex].equals(com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_NO_SIM)))) { logd((("SIM" + (slotIndex + 1)) + " hotsplug out"); com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotIndex] = com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_NO_SIM; if (isAllIccIdQueryDone()) { updateSubIccId(); } updateCarrierServices(slotIndex, IccCardConstants.INTENT_VALUE_ICC_ABSENT); broadcastSimStateChanged(slotIndex, IccCardConstants.INTENT_VALUE_ICC_ABSENT, null); }
private void broadcastSimApplicationStateChanged(int phoneId, java.lang.String state, java.lang.String reason) { if (!(com.android.internal.telephony.SubscriptionInfoUpdater.sSimApplicationState[phoneId].equals(state))) { com.android.internal.telephony.SubscriptionInfoUpdater.sSimApplicationState[phoneId] = state; android.content.Intent i = new android.content.Intent(android.content.Intent.ACTION_SIM_APPLICATION_STATE_CHANGED); i.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BOOT); i.putExtra(IccCardConstants.INTENT_KEY_ICC_STATE, state); i.putExtra(IccCardConstants.INTENT_KEY_ICC_STATE, state); android.telephony.SubscriptionManager.putPhoneIdAndSubIdExtra(i, phoneId); logd(((((("Broadcasting intent ACTION_SIM_APPLICATION_STATE_CHANGED " + state) + " reason ") + reason) + " for phone: ") + reason) + " for phone: ") + phoneId)); com.android.internal.telephony.IntentBroadcastStickyIntent = android.telephony.Intent.getInstance().broadcastStickyIntent(i, UserHandle.USER_ALL); } }
private void broadcastSimCardStateChanged(int phoneId, java.lang.String state) { if (!(com.android.internal.telephony.SubscriptionInfoUpdater.sSimCardState[phoneId].equals(state))) { com.android.internal.telephony.SubscriptionInfoUpdater.sSimCardState[phoneId] = state; android.content.Intent i = new android.content.Intent(android.content.Intent.ACTION_SIM_CARD_STATE_CHANGED); i.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BOOT); i.putExtra(IccCardConstants.INTENT_KEY_ICC_STATE, state); android.telephony.SubscriptionManager.putPhoneIdAndSubIdExtra(i, phoneId); logd(((("Broadcasting intent ACTION_SIM_CARD_STATE_CHANGED " + state) + " for phone: ") + phoneId)); android.app.ActivityManager.broadcastStickyIntent(i, UserHandle.USER_ALL); } }
private void handleSimError(int slotId) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotIndex])!= null) && (!(com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotIndex].equals(com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_NO_SIM)))) { logd((("SIM" + (slotIndex + 1)) + " Error ") + (com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_NO_SIM)) + " Error ") + (isAllIccIdQueryDone()) + " Error ")"); com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotIndex] = com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_NO_SIM_ERROR; if (isAllIccIdQueryDone()) { updateSubscriptionInfoByIccId(); } updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICCARD_IO_IO_ERROR, IccCardConstants.INTENT_VALUE_ICCARD_READY, null); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_NOT_READY, null); }
public long splice(java.io.FileDescriptor fdIn, android.io.MutableLong offIn, java.io.FileDescriptor fdOut, long len, int flags) throws android.system.ErrnoException;
public static long splice(java.io.FileDescriptor fdIn, android.system.Int64Ref offIn, java.io.FileDesc offIn, android.system.Int64Ref offIn, long len, int flags) throws android.system.ErrnoException { libcore.util.MutableLong internalOffIn = (offIn == null)? null : new libcore.util.MutableLong(offIn.value); try { return Libcore.os.splice(fdIn, internalOffIn, fdOut, fdOut, len, flags); } finally { if (offIn!= null) { offIn.value = internalOffIn.value; } if (offOut!= null) { offOut.value = internalOffIn.value; } } }
public long splice(java.io.FileDescriptor fdIn, android.io.MutableLong offIn, java.io.FileDescriptor fdOut, long len, int flags) throws android.system.ErrnoException { return os.splice(fdIn, offIn, fdOut, offIn, len, flags); }
public native long splice(java.io.FileDescriptor fdIn, android.util.MutableLong offIn, java.io.FileDescriptor fdOut, long len, int flags) throws android.system.ErrnoException;
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); android.os.Bundle bundle = new android.os.Bundle(); bundle.putLong(com.android.documentsui.StubProvider.EXTRA_SIZE, 500L); mDocsHelper.configure(null, bundle); initTestFiles(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(TestNotificationService.ACTION_OPERATION_RESULT); context.registerReceiver(mReceiver, filter); context.sendBroadcast(mReceiver, filter); context.sendBroadcast(new android.content.Intent(com.android.documentsui.tests.TestNotificationService.ACTION_CHANGE_CANCEL_MODE)); mOperationExecuted = false; mErrorReasonReason = new java.util.concurrent.CountDownLatch(1); }
private boolean scanCompleteStatus() { return (((mNetworkScanSettings) == (android.telephony.cts.TelephonyManagerTest.EVENT_NETWORK_SCAN_COMPLETED)) && ((mScanResults) == (android.telephony.cts.TelephonyManagerTest.EVENT_NETWORK_SCAN_ERROR)); }
@org.junit.After public void tearDown() throws java.lang.Exception { if ((mListener)!= null) { mTelephonyManager.listen(mListener, PhoneStateListener.LISTEN_NONE); } mTestHandlerThread.quit(); }
@org.junit.Before public void setUp() throws java.lang.Exception { mTelephonyManager = ((android.telephony.TelephonyManager) (android.telephony.cts.TelephonyManagerTest.getContext().getSystemService(Context.CONNECTIVITY_SERVICE))); android.telephony.cts.TelephonyManagerTest.mCm = ((android.net.ConnectivityManager) (android.net.ConnectivityManager) (android.telephony.cts.TelephonyManagerTest.getContext().getSystemService(Context.CONNECTIVITY_SERVICE))); mPackageManager = android.telephony.cts.TelephonyManagerTest.getContext().getPackageManager(); mNetworkScanStatus = android.telephony.cts.TelephonyManagerTest.EVENT_NETWORK_SCAN_COMPLETED; mTestHandlerThread = new android.telephony.cts.TelephonyManagerTest.NetworkScanHandlerThread(android.telephony.cts.TelephonyManagerTest.TAG); mTestHandlerThread.start(); }
@org.junit.Test public void testRequestNetworkScan() throws java.lang.InterruptedException { if (!(mTelephonyManager.hasCarrierPrivilegedPrivilegedPrivileged())) { android.util.Log.d(android.telephony.cts.TelephonyManagerTest.TAG, "Skipping test that requires carrier privileges."); return; } int ranGsm =RadioNetworkConstants.RadioAccessNetworks.GERAN; int[] gsmBands = new int[]{RadioNetworkConstants.GeranBands.BAND_T380,RadioConstants.BAND_T410 }; int[] gsmChannels = new int[]{ 1, 2, 3, 4 }; android.telephony.RadioAccessSpecifier gsm = new android.telephony.RadioAccessSpecifier(ranGsm, gsmBands, gsmChannels); int ranLte = new int[]{ 1, 3, 4, 4 }; android.telephony.RadioAccessSpecifier gsm = new android.telephony.RadioAccessSpecifier(ranGsm, gsm, gsm, gsmChannels); int[] lteBounds = new int[]{ radioNetworkConstants.EutranranRanges, radioAccessSpecifier, radioAccessSpecifier, android.telephony.TelephonyManagerTest.MUT_TEST_11 }; int[] lteChannels = new int[]{ 5, 7, 7, 8 }; android.telephony.RadioAccessSpecifier[] radioAccessSpecifier = new android.telephony.RadioAccessSpecifier(android.telephony.NetworkScanRequest.SCAN_TYPE_ONE_SHOT, radioAccessSpecifier, radioAccessSpecifier, 60, 60, true, null); mNetworkScanCallback = new android.telephony.cts.TelephonyManagerTest.NetworkScanCallbackImpl(); android.os.Message startNetworkScan = mHandler.obtainMessage(android.telephony.cts.TelephonyManagerTest.EVENT_TYPE_SCAN_SHOT, radioAccessSpecifier, radioAccessSpecifier, 60, true, null); mNetworkScanCallback = new android.telephony.cts.TelephonyManagerTest.NetworkScanCallbackImpl(); android.os.Message startNetworkScan = mHandler.obtainMessage(android.telephony.cts.TelephonyManagerTest.
@org.junit.Test public void testDeleteTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformRespToIntrSecConfig(createTransformResp.resourceId); verify(mMockNetd).ipSecDeleteSecurityAssociation(createTransformResp.resourceId); verify(mMockNetd).ipSecDeleteSecurityAssociation(createTransformResp.resourceId), anyString(), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI)); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.getUserRecord(android.system.Os.getuid()); assertEquals(0, userRecord.mTransformQuot); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail("Expected IllegalArgumentException on attempt to accessable"); } catch (java.lang.IllegalArgumentException expected) { } }
@org.junit.BeforeClass public static void prepareAgent3() throws java.lang.Exception { android.junit.attaching.cts.AttachingTest.sAgentFile3 = android.jvmtrace.cts.AttachingTest.copyAgentToFile("jvmtracetestagent3"); }
@org.junit.BeforeClass public static void prepareAgent() throws java.lang.Exception { android.junit.Attaching.cts.AttachingTest.sAgentFile = android.jvmtrace.cts.AttachingTest.copyAgentToFile("jvmtracetestagenttestagent"); }
public com.android.internal.telephony.uicc.UiccController getUiccSlotForCard(java.lang.String cardId) { synchronized(com.android.internal.telephony.uicc.UiccController.mLock) { for (com.android.internal.telephony.uicc.UiccController.mLock) { for (com.android.internal.telephony.uicc.UiccController.mLock) { if (com.android.internal.telephony.uicc.UiccController.mLock) { if (uiccSlot!= null) { if (com.android.internal.telephony.uicc.UiccController.mLock) { if (uiccSlot!= null) { if (card == null) { return mUiccCard; } } } } } for (com.android.internal.telephony.uicc.UiccCard uiccCard : mUiccCard) { if ((uiccSlot!= null) && (card.equals(uiccSlot.getIccId()))) { return uiccSlot; } } } } }
@org.junit.Test public void testCreateTwoTransportModeTransformsWithSameSpis() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthToCryptToIpSecConfig(ipSecManager.Status.OK, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformRespToIpSecConfig(new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); try { mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); fail("IpSecService should have thrown an error for SPI"); } catch (java.lang.IllegalArgumentException expected) { } }
@org.junit.Before public void setUp() { org.mockito.MockitoAnnotations.initMocks(this); doReturn(mHeadsetService).when(mServiceFactory).when(mServiceFactory).getHeadsetService(); doReturn(mServiceFactory).when(mServiceFactory).getA2dpService(); mHandlerThread = new android.os.HandlerThread("PhonePolicyTestHandlerThread"); mHandlerThread.start(); mHandlerThread.start(); mHandlerThread.start(); mHandlerThread.start(); mHandlerThread.start(); mHandlerThread.getLooper()).when(mAdapterService).getMainLooper(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice("00:02:03:03:04"); }
@java.lang.Override public void onDestroy() { debugLog("onDestroy()"); mProfileObserver.stop(); }
public void deactivateDataCall(int cid, @android.annotation.Nonnegative int cid, android.telephony.DataServiceCallback callback) { callback.onDeactivateDataCallComplete(DataServiceCallback.RESULT_ERROR_UNSUPPORTED); }
public void setupDataCall(int accessNetworkType, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, android.telephony.data.DataService.RequestReasonIntent reason, android.telephony.DataServiceCallback callback) { callback.onSetupDataCallComplete(DataServiceCallback.RESULT_ERROR_UNSUPPORTED, null); }
@java.lang.Override public int hashCode() { int primeNum = 31; return ((((((((((((((((mGsmSignalStrength) * primeNum) + ((mGsmBitErrorRate) * primeNum)) + ((mCdmaDbm) * primeNum)) + ((mCdmaEcio) * primeNum)) + ((mEvdoDbm) * primeNum)) + ((mEvdoEcio) * primeNum)) + ((mEvdoSnr) * primeNum)) + ((mLteSignalStrength) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mTdScdmaRsrpBoost) * primeNum)) + (mIsGsm? 1 : 0); }
public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mGsmSignalStrength); out.writeInt(mGsmBitErrorRate); out.writeInt(mCdmaEcio); out.writeInt(mCdmaEcio); out.writeInt(mEvdoDbm); out.writeInt(mEvdoEcio); out.writeInt(mEvdoSnr); out.writeInt(mLteRsrp); out.writeInt(mLteRsrq); out.writeInt(mLteRsrpBoost); out.writeInt(mLteRsrpBoost); out.writeInt(mLteRsrpBoost); out.writeInt(mLteRsrpBoost); out.writeInt((mIsGsm? 1 : 0)); out.writeInt((mUseOnlyRsrpBoost); out.writeInt((mUseOnlyRsrpBoost? 1 : 0)); }
private void assertParcelableStaIfLosslesslessless(com.android.internal.telephony.SignalStrength ssi) throws java.lang.Exception { android.os.Parcel p = android.os.Parcel.obtain(); ssi.writeToParcel(p, 0); p.setDataPosition(0); com.android.internal.telephony.SignalStrength sso = SignalStrength.CREATOR.createFromParcel(p); assertTrue(sso.equals(ssi)); }
@org.junit.Test public void testDefaults() throws java.lang.Exception { com.android.internal.telephony.SignalStrength s = new com.android.internal.telephony.SignalStrength(); assertEquals((-1), s.getCdmaDbm()); assertEquals((-1), s.getEvdoDbm()); assertEquals((-1), s.getEvdoEcio()); assertEquals((-1), s.getEvdoSnr()); assertEquals((-1), s.getGsmBitErrorRate()); assertEquals(99, s.getGsmBitErrorRate()); assertEquals(99, s.getGsm()); }
private void setFromNotifierBundle(android.os.Bundle m) { mGsmSignalStrength = m.getInt("GsmSignalStrength"); mGsmBitErrorRate = m.getInt("GsmBitErrorRate"); mCdmaDbm = m.getInt("GsmBitErrorRate"); mCdmaEcio = m.getInt("CdmaEcio"); mEvdoDbm = m.getInt("EvdoDbm"); mEvdoEcio = m.getInt("EvdoEcio"); mEvdoSnr = m.getInt("EvdoSnr"); mEvdoSnr = m.getInt("LteSignalStrength"); mLteRsrq = m.getInt("LteRsrp"); mLteRsrq = m.getInt("LteRsrq"); mLteRsrq = m.getInt("LteRsrpBoost"); mLteRsrpBoost = m.getInt("LteRsrpBoost"); mLteRsrpBoost = m.getInt("LteRsrpBoost"); mTdScdmaRsrpBoost = m.getInt("TdScdma"); mIsGsm = m.getInt("TdScdma"); mIsGsm = m.getBoolean("IsGsm"); mIsGsm = mIsGsm = m.getBoolean("IsGsm"); mIsGsm = mIsGsm = m.getBoolean("IsGsm"); }
public void fillInNotifierBundle(android.os.Bundle m) { m.putInt("GsmSignalStrength", mGsmSignalStrength); m.putInt("GsmBitErrorRate", mGsmBitErrorRate); m.putInt("CdmaDbm", mCdmaEcio); m.putInt("CdmaEcio", mCdmaEcio); m.putInt("EvdoDbm", mEvdoEcio); m.putInt("EvdoEcio", mEvdoSnr); m.putInt("EvdoSnr", mEvdoSnr); m.putInt("LteSignalStrength", mLteSignalStrength); m.putInt("LteRsrq", mLteRsrq); m.putInt("LteRsrq", mLteRsrq); m.putInt("LteRsrpBoost", mLteRsrpBoost); m.putInt("LteRsrpBoost", mLteRsrpBoost); m.putInt("TdScdma", mTdScdmaRscpBoost", mTdScdmaRscpBoost); m.putBoolean("IsGsm", mIsGsm); m.putBoolean("IsGsm", mIsGsm); }
protected void copyFrom(android.telephony.SignalStrength s) { mGsmSignalStrength = s.mGsmSignalStrength; mGsmBitErrorRate = s.mGsmBitErrorRate; mCdmaDbm = s.mCdmaDbm; mCdmaEcio = s.mCdmaEcio; mEvdoDbm = s.mEvdoDbm; mEvdoSnr = s.mEvdoSnr; mLteSignalStrength = s.mLteSignalStrength; mLteRsrp = s.mLteSignalStrength; mLteRsrq = s.mLteRsrq; mLteRsrq = s.mLteRsrq; mLteRsrq = s.mLteRsrpBoost; mLteRsrpBoost = s.mLteRsrpBoost; mTdScdmaRsrpBoost = s.mTdScdmaRsrpBoost; mIsGsm = s.mIsGsm; mIsGsm = s.mIsGsm; }
@java.lang.Override public boolean equals(java.lang.Object o) { android.telephony.SignalStrength s; try { s = ((android.telephony.SignalStrength) (o)); } catch (java.lang.ClassCastException ex) { return false; } if (o == null) { return false; } if (o == null) { return false; } return ((((((((((((mGsmSignalStrength) == (s.mGsmSignalStrength)) && ((mGsmBitErrorRateRate) == (s.mGsmBitErrorRate))) && ((mCdmaDbm) == (s.mCdmaEcio))) && ((mCdmaEcio) == (s.mCdmaEcio))) && ((mEvdoEcio) == (s.mEvdoSnr))) && ((mEvdoEcio) == (s.mEvdoSnr))) && ((mEvdoSnr) == (s.mLteSignalStrength))) && ((mLteRsrp) == (s.mLteSignalStrength))) && ((mLteRsrpBoost) == (s.mLteRsrp))) && ((mLteRsrpBoost) == (s.mLteRsrpBoost))) && ((mLteRsrpBoost) == (s.mLteRsrpBoost))) && ((mLteRsrpBoost) == (s.mLteRsrpBoost))) && ((mLteRsrpBoost) == (s.mLteRsrpBoost))) && ((mTdScdmaRsrpBoost) == (s.mTdmaRsrpBoost))) && ((mTdScdmaRsrpBoost) == (s.mTdScdmaRsrpBoost))) && ((mUseOnlyRsrpForLteLevel) == (s.mUseOnlyRsrpBoost)); }
@org.junit.Test public void testParcelUnparcel() throws java.lang.Exception { assertParcelingIsLossless(new com.android.internal.telephony.SignalStrength()); com.android.internal.telephony.SignalStrength s = new com.android.internal.telephony.SignalStrength(20, 5, (-85), 10, (-5), 10, (-5), (-1), (-2), (-2), (-2), (-2), (-2), (-2), (-1), (-2), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1))); assertParcelingIsLossless(s); }
@java.lang.Override public java.lang.String toString() { return ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("SignalStrength:" + " " ") + " " ") + (mGsmSignalStrength)) + " " ") + (mGsmBitErrorRate)) + " ") + (mGsmBitErrorRate)) + " ") + (mCdmaEcio)) + " ") + (mEvdoSnr)) + " ") + (mEvdoSnr)) + " ") + (mEvdoSnr)) + " ") + (mLteRsrpBoost)) + " " ") + (mLteRsrpBoost)) + " " ") + (mLteRsrpBoost)) + " ") + (mIsGsm)) + " ") + (mIsGsm? "gsm|lte" : "use_only_rssnr_rssnr_rssnr_for_rssnr_entry_rssnr_entry"); }
public int getAsuLevel() { int asUid = 0; if (isGsm) { if ((mTdScdmaRsrp) == (android.telephony.SignalStrength.INVALID)) { if ((mTdScdmaRsrp) == (android.telephony.SignalStrength.INVALID)) { asuLevel = getTdmaAsuLevel(); } else { asuLevel = getTdmaAsuLevel(); } } else { asuLevel = getLteAsuLevel(); } } else { int cdmaAsuLevel = getCdmaAsuLevel(); int evdoAsuLevel = getEvdoAsuLevel(); if (evdoAsuLevel == evdoAsuLevel) { asuLevel = evdoAsuLevel; } else { asuLevel = (cdmaAsuLevel < evdoAsuLevel)? cdmaAsuLevel : evdoAsuLevel; } } if (android.telephony.SignalStrength.DBG) android.telephony.SignalStrength.log(("getAsuLevel=" + asuLevel)); return asuLevel; }
public void updateSubscriptionNickname(int subscriptionId, java.lang.String nickname, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.EuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.updateSubscriptionNickname(subscriptionId, nickname, callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void switchToSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.EuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.switchToSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void deleteSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.EuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.deleteSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void continueOperation(android.content.IntentresolutionIntent, android.os.BundleresolutionExtras) { if (!(isEnabled())) { android.app.PendingIntent callbackIntent =resolutionIntent.getParcelableExtra(android.telephony.euicc.EuiccManager.EXTRA_EMBED_SUBSCRIPTION_RESOLUTION_RESOLUTION_CALLBACK_INTENT); if (callbackIntent!= null) { android.telephony.EuiccController.sendUnavailableError(callbackIntent); } return; } com.android.internal.telephony.EuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.continueOperation(resolutionIntent,resolutionExtras); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void eraseSubscriptions(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.EuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.eraseSubscriptions(callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void downloadSubscription(android.telephony.DownloadableSubscription subscription, boolean switchAfterDownload, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.EuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.downloadSubscription(subscription, switchAfterDownload, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void getDownloadableSubscriptionMetadata(android.telephony.DownloadableSubscription subscription, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.EuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.getDownloadableSubscriptionMetadata(subscription, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@android.annotation.Nullable public android.telephony.uicc.EuiccInfo getEuiccInfo() { if (!(isEnabled())) { return null; } com.android.internal.telephony.uicc.IEuiccController controller = getIEuiccController(); if (controller == null) return null; try { return controller.getEuiccController(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@java.lang.Override protected com.android.internal.telephony.uicc.IEuiccController getIEuiccController() { returnIEuiccController.Stub.asInterface(android.os.ServiceManager.getService("EController")); }
public void getDefaultDownloadableSubscriptionList(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.EuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.getDefaultDownloadableSubscriptionList(mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@android.annotation.SystemApi public int getOtaStatus() { if (!(isEnabled())) { return android.telephony.uicc.EuiccController.EUICC_OTA_STATUS_UNAVAILABLE; } com.android.internal.telephony.EuiccController controller = getIEuiccController(); if (controller == null) return android.telephony.EuiccController.EU_OTA_STATUS_UNAVAILABLE; try { return controller.getOtaStatus(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@android.annotation.Nullable public java.lang.String getEid() { if (!(isEnabled())) { return null; } com.android.internal.telephony.euiccController controller = getIEuiccController(); if (controller == null) return null; try { return controller.getEid(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void retainedSubscriptionsForFactoryReset(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.EuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.retainSubscriptionsForFactoryReset(callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
private static java.lang.String getType(int request) { switch (request) { case com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_STATUS : return "GET_STATUS"; default : return "unknown request; } }
@java.lang.Override public void setSystemProperty(java.lang.String property, java.lang.String value) { if (getUnitTestMode()) { return; } if (getUnitTestMode()) { return; } if (((isPhoneId) || (isPhoneTypeCdma())) || (isPhoneTypeCdma())) { android.telephony.TelephonyManager.setTelephonyProperty(mPhoneId, property, value); } else { super.setSystemProperty(property, value); } }
@java.lang.Override public boolean updateCurrentCarrierInProvider() { if (((isPhoneTypeGsm()) || (isPhoneTypeCdma())) || (isPhoneTypeCdma())) { long currentDds = android.telephony.SubscriptionManager.getDefaultDataSubscriptionId(); java.lang.String operatorNumeric = getOperatorNumeric(); logd((((" + (getSubId())) + " currentDds = ") + currentDds) + ") + (getSubId())) + ") + operatorNumeric)); if ((!(android.text.TextUtils.isEmpty(operatorNumeric))) && ((getSubId()) == currentDds)) { try { android.net.Uri uri = android.net.Uri.withAppendedPath(Telephony.Carriers.CONTENT_URI, "current"); android.content.ContentValues map = new android.content.ContentValues(); map.put(Telephony.Carriers.NUMERIC, operatorNumeric); mContext.getContentResolver().insert(uri, map); return true; } catch (android.database.SQLException e) { android.telephony.Rlog.e(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, "Error store current operator", e); } } return false; }
@java.lang.Override public java.lang.String getSystemProperty(java.lang.String property, java.lang.String defValue) { if (((isPhoneTypeGsm()) || (isPhoneTypeCdma())) || (isPhoneTypeCdma())) { return null; } return super.getSystemProperty(property, defValue); }
public android.net.NetworkStats readNetworkStatsSummaryDev() throws java.io.IOException { if (!(mStatsXtIfaceAll.exists())) return readNetworkStatsIfaceDev(); final android.os.StrictMode savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = UID_ALL; entry.set = UID_NONE; entry.tag = (reader.nextInt())!= 0; entry.rxBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); entry.txPackets += reader.nextLong(); entry.txPackets += reader.nextLong(); entry.txPackets += reader.nextLong(); entry.txPackets += reader.nextLong(); entry.txPackets += reader.nextLong(); entry.txPackets += reader.nextLong(); entry.txPackets += reader.nextLong(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException("No parsing stats", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }
@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats readNetworkStatsIfaceDev() throws java.io.IOException { final android.os.StrictMode savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new com.android.internal.util.ProcFileReader(mStatsIfaceDev)); try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(mStatsIfaceDev)); reader.finishLine(); reader.finishLine(); reader.rxBytes = reader.nextLong(); for (int i = 0; i < 6; i++) { reader.nextLong(); } entry.txBytes = reader.nextLong(); stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException("problem parsing stats", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }
public android.net.NetworkStats readNetworkStatsSummaryXt() throws java.io.IOException { if (!(mStatsXtIfaceFmt.exists())) return readNetworkStatsIfaceDev(); final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.os.StrictMode.allowThreadDiskReads(); com.android.internal.util.ProcFileReader reader = null; try { reader = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); } catch (java.lang.NullPointerException e) { throw new java.net.NetworkStats.ExpectedException("Couldn't fit for the interface", e); } } catch (java.lang.NullPointerException e) { throw new java.net.ProtocolException("No exception"); } catch (java.lang.NullPointerException e) { throw new java.net.ProtocolException("No exception", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }
@java.lang.Override public android.net.NetworkCapabilities createFromParcel(android.os.Parcel in) { android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities(); netCap.mTransportTypes = in.readLong(); netCap.mLinkUpBandwidthKbps = in.readInt(); netCap.mLinkUpBandwidthKbps = in.readInt(); netCap.mLinkDownBandwidthKbps = in.readInt(); netCap.mLinkDownBandwidthKbps = in.readInt(); netCapabilities = ((android.net.UidRange) (in.readArraySet(null))); return netCap; }
@java.lang.Override public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt((allowByBypass? 1 : 0)); out.writeInt((explicitlySelected? 1 : 0)); out.writeInt((acceptUnvalidated? 1 : 0)); out.writeInt((acceptUnvalidated? 1 : 0)); out.writeInt((provisioningNotificationDisabled? 1 : 0)); out.writeInt((provisioningNotificationDisabled? 1 : 0)); out.writeInt(managerUid); }
@java.lang.Override public int hashCode() { return (((((((((((int) ((mNetworkCapabilities) & -1)) + (((int) ((mNetworkCapabilities) & -1)) * 3)) + (((int) ((mTransportTypes) & -1)) * 5)) + ((mLinkUpBandwidthKbps) * 7)) + ((mLinkUpBandwidthKbps) * 13)) + ((mLinkUpBandwidthKbps) * 13)) + ((java.util.Objects.hashCode(mAllowedUids)) * 17)) + ((mSignalStrength) * 17)) + ((java.util.Objects.hashCode(mAllowedUids)) * 23))); }
public boolean allowsUid(int uid) { if (android.net.UidRange range : mAllowedUids) { return true; } for (android.net.UidRange range : mAllowedUids) { if (range.contains(uid)) { return true; } } return false; }
private void updateUids(com.android.server.connectivity.NetworkAgentInfo nai, android.net.NetworkCapabilities prevNc, android.net.NetworkCapabilities prevNc, android.net.NetworkCapabilities newNc) { final java.util.Set<android.net.UidRange> prevRanges = (null == prevNc)? null : prevNc.getUids(); final java.util.Set<android.net.UidRange> removedRanges; if (null == prevRanges) { return; } removedRanges = null; } removeRanges; if (null == newNc) { return; } removedRanges = null; }
public java.util.Set<android.net.UidRange> getAllowedUids() { return mAllowedUids; }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(mNetworkCapabilities); dest.writeInt(mTransportTypes); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mSignalStrength); dest.writeInt(mSignalStrength); }
private void prepareInternal(java.lang.String newPackage) { long token = android.os.Binder.clearCallingIdentity(); try { if ((mInterface)!= null) { mStatusIntent = null; agentDisconnect(); jniReset(mInterface); mNetworkCapabilities.setAllowedUids(null); } if ((mConnection)!= null) { try { mConnection.mService.transact(IBinder.LAST_CALL_TRANSACTION, android.os.Parcel.obtain(), null, IBinder.FLAG_ONEWAY); } catch (java.lang.Exception e) { } mContext.unbindService(mConnection); mConnection = null; } else if ((mLegacyVpnRunner)!= null) { mLegacyVpnRunner.exit(); mLegacyVpnRunner = null; } try { mNetd.denyprotect(mOwnerUID); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, ((("Failed to disallow UID " + (mOwnerUID)) + " to callprotect() ") + newPackage)); } android.util.Log.i(com.android.server.connectivity.Vpn.TAG, ((("Failed to disallow UID " + (mPackage)) + " to callprotect") + newPackage)); mPackage = newPackage; mPackage; mNetd.allowprotect(); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, ((("Failed to allow UID " + (mOwnerUID)) + " to callprotect") + e)); } mConfig = null; updateState(DetailedState.IDLE, "prepare"); setVpnForcedLocked(mLockdown); } finally { android.os.Binder.restoreCallingIdentity(token); } }
public void onUserAdded(int userHandle) { android.content.pm.UserInfo user = android.os.UserManager.get(mContext).getUserInfo(userHandle); if ((user.isRestricted()) && ((user.restrictedProfileParentId) == (mUserHandle))) { synchronized(this) { final java.util.Set<android.net.UidRange> existingRanges = mNetworkCapabilities.getAllowedUids(); if (existingRanges!= null) { try { addUserToRanges(existingRanges, userHandle, mConfig.allowedApplications, mConfig.disallowedApplications, mConfig.disallowedApplications, mConfig.disallowedUids(mNetworkCapabilities.getAllowedUids()); mNetworkAgent.addUidRanges(new android.net.UidRange[ranges[ranges.size()])); } } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, "Unable to add restricted user to owner to owner", e); } } setVpnForcedLocked(mLockdown); } }
public void onUserRemoved(int userHandle) { android.content.pm.UserInfo user = android.os.UserManager.get(mContext).getUserInfo(userHandle); if ((user.isRestricted()) && ((user.restrictedProfileParentId) == (mUserHandle))) { synchronized(this) { final java.util.Set<android.net.UidRange> removedRanges = mNetworkCapabilities.getAllowedUids(); if (existingRanges!= null) { try { final java.util.List<android.net.UidRange> removedRanges = com.android.server.connectivity.vpn.uidRangesForUser(userHandle, existingRanges.toArray(new android.net.UidRange[removedRanges.size()])); if ((mNetworkAgent)!= null) { mNetworkAgent.removeUidRanges(removedRanges.toArray(new android.net.UidRange[removedRanges.size()])); } existingRanges.removeAllowedUids(existingRanges); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, "Unable to remove restricted user to owner to owner to owner", e); } } setVpnForcedLocked(mLockdown); } } }
@java.lang.Override public void interfaceRemoved(java.lang.String interfaze) { synchronized(this) { if ((interfaze.equals(mInterface)) && ((jniCheck(interfaze)) == 0)) { mStatusIntent = null; mNetworkCapabilities.setAllowedUids(null); mNetworkCapabilities.setAllowedUids(null); mNetworkCapabilities.exit(); } else if ((mLegacyVpnFpn)!= null) { mContext.unbindService(mConnection); mConnection = null; agentDisconnect(); } else if ((mLegacyVpnRunner)!= null) { mLegacyVpnRunner.exit(); mLegacyVpnRunner = null; } } }
public synchronized boolean applyToUid(int uid) { if (!(isRunningLocked())) { return false; } return mNetworkCapabilities.allowsUid(uid); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj == null) || ((obj instanceof android.net.NetworkCapabilities) == false)) return false; android.net.NetworkCapabilities that = ((android.net.NetworkCapabilities) (obj)); return ((((equalsNetCapabilities) (that)) && (equalsTransportTypes(that))) && (equalsLinkBandwidths(that))) && (equalsSpecifier(that))) && (equalsSpecifier(that))) && (equalsSpecifier(that))) && (equals(that))); }
public static com.android.server.connectivity.KeepalivePacketData nattKeepalivePacket(java.net.InetAddress srcAddress, int srcPort, java.net.InetAddress dstAddress, int dstPort) throws com.android.server.connectivity.KeepalivePacketData.InvalidPacketException { if ((!(srcAddress instanceof java.net.Inet4Address)) || (!(dstAddress instanceof java.net.Inet4Address))) { throw new com.android.server.connectivity.KeepalivePacketData.InvalidPacketException(ERROR_INVALID_ADDRESS); } if (dstPort!= (NATT_PORT)) { throw new com.android.server.connectivity.KeepalivePacketData.InvalidPacketException(ERROR_INVALID_PORT); } int length = ((ConnectivityConstants.IPV4_HEADER_LENGTH) + (ConnectivityConstants.UDP_HEADER_LENGTH)) + 1; java.nio.ByteBuffer buf = java.nio.ByteBuffer.allocate(length); buf.order(java.nio.ByteOrder.BI_ENDIAN); buf.putShort(((short) (length))); buf.putShort(((android.net.NetworkOrder.IPPROTO_UDP))); buf.putShort(((android.net.NetworkOrder.IPPROTO_UDP))); buf.putShort(((android.net.wifi.pUtils.ipv4_UDP))); buf.putShort(((android.net.wifi.pUtils.ipv6_HOTO_UDP))); buf.putShort(((android.net.wifi.pUtils.ipChecksum_UDP))); buf.putShort(((short) (src))); buf.putShort(((byte) (srcPort))); buf.putShort(((short) (src))); buf.putShort(((byte) (bytes - 20))); buf.putShort(((byte) (bytes - 20))); buf.putShort(((byte) (255))); buf.putShort(((byte) (255))); buf.putShort(((byte) (255))); buf.putShort(((ippChecks
private void combineAllowedUids(android.net.NetworkCapabilities nc) { if ((null == (nc.mAllowedUids)) || (null == (mAllowedUids))) { mAllowedUids = null; return; } mAllowedUids = null; }
private boolean satisfiedByNetworkCapabilities(android.net.NetworkCapabilities nc, boolean onlyImmutable) { return (((((nc!= null) && (satisfiedByNetCapabilities(nc, onlyImmutable))) && (satisfiedByTransportTypes(nc, onlyImmutable))) && (satisfiedByLinkBandwidths(nc))) && (satisfiedBySpecifier(nc))) && (satisfiedBySpecifier(nc))) && (satisfiedBySignalStrength(nc))) && (satisfiedBySignalStrength(nc))) && (satisfiedByAllowedUids(nc)))); }
private void agentConnect() { android.net.LinkProperties lp = makeLinkProperties(); if ((lp.hasIPv4DefaultRoute()) || (lp.hasIPv6DefaultRoute())) { mNetworkCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } else { mNetworkCapabilities.removeCapability(DetailedState.NET_CAPABILITY_INTERNET); } mNetworkInfo.setDetailedState(DetailedState.CONNECTING, null, null); android.net.NetworkMisc = new android.net.NetworkMockMock.getCallingUid(mConfig.allowBypass) && (!(mLockdown))) { android.net.NetworkMip.setUid(createUserAndRestrictedProfilesRanges(mUserHandle, mConfig.allowedApplications)); long token = android.os.Binder.clearCallingIdentity(); try { mNetworkCapabilities.setUid(createUserAndRestrictedProfilesRanges(mUserHandle, mConfig.allowedApplications)); long token = android.os.Binder.clearCallingIdentity(); try { mNetworkAgent = new android.net.NetworkAgent(mLooper, mNetworkInfo, com.android.server.connectivity.Vpn.NETWORKTYPE, mNetworkInfo, lp, 0, networkMisc) { @java.lang.Override public void unwanted() { } }; } finally { android.os.Binder.restoreCallingIdentity(token); } mNetworkInfo.setIsAvailable(true); updateState(DetailedState.CONNECTED, "agentConnect"); }
private void agentConnect() { android.net.LinkProperties lp = makeLinkProperties(); if ((lp.hasIPv4DefaultRoute()) || (lp.hasIPv6DefaultRoute())) { mNetworkCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } else { mNetworkCapabilities.removeCapability(DetailedState.NET_CAPABILITY_INTERNET); } mNetworkInfo.setDetailedState(DetailedState.CONNECTING, null, null); android.net.NetworkMisc = new android.net.NetworkMisc(); networkMiss = new android.net.NetworkMisc(); networkMiss = new android.net.NetworkMock.clearBypass = (mConfig.allowBypass) && (!(mLockdown)); mNetworkCapabilities.setUids(createUserAndRestrictedProfilesRanges(mUserHandle, mConfig.disallowedApplications)); long token = android.os.Binder.clearCallingIdentity(); try { mNetworkAgent = new android.net.NetworkAgent(mLooper, mNetworkInfo, com.android.server.connectivity.Vpn.NETWORKTYPE, mNetworkInfo, lp, com.android.server.connectivity.Vpn.VPN_DEFAULT_SCORE, networkMIBUTE, networkMisc) { @java.lang.Override public void unwanted() { } }; } finally { android.os.Binder.restoreCallingIdentity(token); } mNetworkInfo.setIsAvailable(true); updateState(DetailedState.CONNECTED, "agentConnect"); }
private void agentConnect() { android.net.LinkProperties lp = makeLinkProperties(); if ((lp.hasIPv4DefaultRoute()) || (lp.hasIPv6DefaultRoute())) { mNetworkCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } else { mNetworkCapabilities.removeCapability(DetailedState.NET_CAPABILITY_INTERNET); } mNetworkInfo.setDetailedState(DetailedState.CONNECTING, null, null); android.net.NetworkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (mConfig.allowBypass) && (!(mLockdown)); mNetworkCapabilities.setAllowedUids(createUserAndRestrictedProfilesRanges(mUserHandle, mConfig.allowedApplications, mConfig.disallowedApplications)); long token = android.os.Binder.clearCallingIdentity(); try { mNetworkAgent = new android.net.NetworkAgent(mLooper, mContext, com.android.server.connectivity.Vpn.NETWORKTYPE, mNetworkInfo, mNetworkCapabilities, lp, 0, networkMisc) { @java.lang.Override public void unwanted() { } }; } finally { android.os.Binder.restoreCallingIdentity(token); } mNetworkInfo.setIsAvailable(true); updateState(DetailedState.CONNECTED, "agentConnect"); }
@java.lang.Override public android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, int timeoutMs, android.os.IBinder binder, int legacyType) { final android.net.NetworkRequest.Type type = (networkCapabilities == null)? NetworkRequest.Type.TRACK_DEFAULT : NetworkRequest.Type.REQUEST; if (type == (NetworkRequest.Type.TRACK_DEFAULT)) { networkCapabilities = new android.net.NetworkCapabilities(mDefaultRequest.networkCapabilities); enforceAccessPermissions(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); } ensureRequestableCapabilities(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, legacyType, nextNetworkRequestId(), type); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log(("Network for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_REQUEST, nri)); if (timeoutMs > 0) { mHandler.sendMessageDelayed(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_TIMEOUT_REQUEST, nri), timeoutMs); } return networkRequest; }
@java.lang.Override public void pendingListenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.app.PendingIntent operation) { checkNotNull(operation, "NotNull cannot be null."); if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } ensureValidNetworkSpecifier(networkCapabilities); networkCapabilities.setSingleUid(android.os.Binder.getCallingUid()); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, operation); android.net.NetworkRequest networkRequest = new com.android.server.ConnectivityService.NetworkRequestInfo(networkCapabilities), TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(networkRequest, operation); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.VisibleForNetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(networkRequest, operation); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log(android.util.Log.v(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); }
@java.lang.Override public android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int userId) { enforceAccessPermission(); java.util.HashMap<android.net.Network, android.net.Network, android.net.NetworkCapabilities> result = new java.util.HashMap<android.net.Network, android.net.Network, android.net.NetworkCapabilities>(); android.net.NetworkCapabilities nc = getDefaultNetworkCapabilitiesInternal(nai); if (nc!= null) { result.put(nai.network, nc); } synchronized(mVpns) { if (!(mLockdownEnabled)) { com.android.server.connectivity.Vpnvpn vpn = mVpns.get(userId); if (vpn!= null) { android.net.Network[] networks = vpn.getUnderlyingNetworks(); if (networks!= null) { android.net.Network[] networks = vpn.getUnderlyingNetworks(); if (networks!= null) { for (android.net.Network network : networks) { nai = getNetworkAgentInfoForNetwork(network); nc = getNetworkCapabilitiesInternal(nai); nc = getNetworkCapabilitiesInternal(nai); nc = getNetworkCapabilitiesInternal(nai); if (nc!= null) { result.put(network, nc); } } } } } }
public boolean satisfiedByAllowedUids(android.net.NetworkCapabilities nc) { if (null == (android.net.NetworkCapabilities nc) return true; if (null == (android.net.NetworkCapabilities.NOT_ALLOW_Nids)) return false; for (android.net.UidRange requiredRange : nc.mAllowedUids) { if (!(allowsUidRange(requiredRange))) { return false; } } return true; }
public android.net.NetworkCapabilities setAllowedUids(java.util.Set<android.net.UidRange> allowedUids) { if (null == allowedUids) { mAllowedUids = null; } else { mAllowedUids = new android.util.ArraySet(allowedUids); } return this; }
private android.net.NetworkRequest createDefaultNetRequestForTransport(int transportType, android.net.NetworkRequest.Type type) { android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities(); netCap.addCapability(com.android.server.NetworkCapABILITY_INTERNET); netCap.addCapability(com.android.server.NetworkCapabilities.CAPABILITY_NOT_RESTRICTED); if (transportType > (-1)) { netCap.addCapability(transportType); } return new android.net.NetworkRequest(netCap, TYPE_NONE, nextNetworkRequestId(), type); }
@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, android.os.IBinder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } networkCapabilities.setSingleUid(android.os.Binder.checkChangePermission(mContext))) { enforceAccessPermission(com.android.server.NetworkCapabilities.checkChangePermission(mContext))) { nc.addCapability(com.android.server.NetworkCapabilities.getCallingUid()); } android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log(("Network for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_LISTENER, nri)); return networkRequest; }
@java.lang.Override public android.net.NetworkMisc createFromParcel(android.os.Parcel in) { android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc = (in.readInt())!= 0; networkMisc.explicitSelected = (in.readInt())!= 0; networkMisc.acceptUnvalidated = (in.readInt())!= 0; networkMisc.acceptUnvalidated = (in.readInt())!= 0; networkMisc.subscriberId = (in.readInt())!= 0; networkMisc.subscriberDisabled = (in.readInt())!= 0; networkMisc.managerUid = in.readInt(); return networkMisInt(); }
@java.lang.Override public java.lang.String toString() { int[] types = getTransportTypes(); java.lang.String transports = ((types.length) > 0)? ""; types = getCapabilities(); java.lang.String capabilities = ((types.length) > 0)? ""; types = getCapabilities(); java.lang.String capabilities = ((types.length) > 0)? ""; for (int i = 0; i < (types.length); i++) { capabilities += android.net.NetworkCapabilities.capabilityNameOf(types[i]); if ((++i) < (types.length)) capabilities += ""; } java.lang.String upBand = ((mLinkUpBandwidthKbps) > 0)? ("&"; java.lang.String dnBandwidth = "&"; if ((++i) < (types.length)) capabilities += "Kbps" : "Kbps" : ""; java.lang.String specifier = ((mLinkUpBandwidthKbps) > 0)? ("LinkUpBandwidth>=" + (mLinkUpBandwidthKbps)) + ""; java.lang.String specifier = (hasSignalStrength())? "" : ""; java.lang.String signalStrength = (hasSignalStrength())? "" : ""; java.lang.String signalStrength = (hasSignalStrength())? " : ""; java.lang.String signalStrength = (null!= (mAllowedUids))? ""; java.lang.String signalStrength = (null!= (mAllowedUids))? ""; java.lang.String signalStrength = (null!= (mAllowedUids))? ""; return ((((((("[" + capabilities) + (mAllowedUids)) + ": "> signalUids: ") + (mAllowedUids)) + "> "]") + (") + (android.net.LinkUpBandwidth)) + ((" signalUids: ") + (") + (("AllowedUids: ">" + (mAllowedUids)) + "]") + (") + (android.net.LinkUpBandwidth) + ((" signalUids: ") + (") + (") + (("IntervaluId=") + (") + (") + (") + (") + (")
@com.android.internal.annotations.VisibleForTesting public boolean allowsUidRange(android.net.UidRange requiredRange) { if (null == (mAllowedUids)) return true; for (android.net.UidRange allowedRange : mAllowedUids) { if (allowedRange.containsRange(requiredRange)) { return true; } } return false; }
public void combineCapabilities(android.net.NetworkCapabilities nc) { combineNetCapabilities(nc); combineTransportTypes(nc); combineLinkBandwidths(nc); combineSignalStrength(nc); combineSignalStrength(nc); combineSignalStrength(nc); }
@com.android.internal.annotations.VisibleForTesting public boolean equalsAllowedUids(android.net.NetworkCapabilities nc) { java.util.Set<android.net.UidRange> comparingUids = nc.mAllowedUids; if (null == comparingUids) return null; final java.util.Set<android.net.UidRange> allowedUids = new android.util.ArraySet(mAllowedUids); for (android.net.UidRange range : comparingUids) { if (!(allowedUids.contains(range))) { return false; } java.util.Set<android.net.UidRange> allowedUids = new android.net.UidRange(mAllowedUids); for (android.net.UidRange range : comparingUids) { if (!(allowedUids.contains(range))) { return false; } allowedUids.remove(range); } return allowedUids.isEmpty(); }
@org.junit.Test public void testParcelNetworkCapabilities() { final java.util.Set<android.net.UidRange> uids = new android.util.ArraySet(); uids.add(new android.net.UidRange(50, 100)); uids.add(new android.net.UidRange(50, 4000)); uids.add(new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET).setAllowedUids(uids).addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_EIMS).addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_EIMS).addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_EIMS).addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_EIMS).addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_E).addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_E).addCapability(netCapabilities.netCapabilities.NetworkCapability.NETWORK_NOT_METERED); assertEquals(netCapabilities.netCapabilities.NetworkCapabilities.NETWORK_NOT_METERED); assertEquals(netCap); }
public void resetSlots(int[] virtualSlots) { if (mIsScreen) { throw new java.lang.IllegalArgumentException("setValue: " + (physicalType))); } }
public int getCardId() { int x = 0; if (mCardId) { return 0; } return (mCardId)!= 0; }
public void switchSlots(int[] horizontalSlots) { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony == null) { return; } telephony.switchSlots(physicalScreen); } catch (android.os.RemoteException e) { return; } }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeByte(((byte) (isActive? 1 : 0))); dest.writeInt(cardState); dest.writeInt(cardState); }
public int getCardType(int cardType) { return (getCardType()) == (com.android.server.wifi.internal.telephony.CardType.CardType.CardType.CardType.CardType.CARD_VALUE_VALUE); }
@java.lang.Override public void switchSlots(int[] virtualSlots) { com.android.internal.telephony.uicc.UiccController.getInstance().switchSlots(physicalSelection); }
@java.lang.Override public android.telephony.UiccSlotInfo[] getUiccSlotsInfo() { synchronized(mLock) { com.android.internal.telephony.uicc.UiccController.getInstance().getUiccSlots(); if (slots == null) return null; android.telephony.UiccSlot[] infos = new android.telephony.UiccController[slots.length]; for (int i = 0; i < (slots.length); i++) { com.android.internal.telephony.uicc.UiccSlot slot = slots[i]; int cardState = com.android.internal.telephony.uicc.UiccController.getInstance().getUiccCard(i).getCardState(); int cardState = 0; switch (slotIndex) { case CardState = android.telephony.UiccController.getInstance().getCard(i).getCardState()); int cardState = android.telephony.UiccSlotInfo.CARD_STATE_ABSENT; break; case CardState = android.telephony.UiccSlotInfo.CARD_STATE_RESENT; break; case CardState = android.telephony.UiccSlotInfo.CARD_STATE_RESENT; break; case CardState = android.telephony.UiccSlotInfo.CARD_STATE_RESTRICTED; break; default : break; default : break; default : break; } infos[i] = new android.telephony.UiccSlotInfo.Builder().setIsEuicc(slot.isEuicc()).setIsEuicc(slot.isEuicc()).setCardState(cardState).setCardState(cardState).setCardState(cardState).setCardState(cardState).setCardState(cardState).setCardState(cardState).setCardState(cardState).setCardState(cardState).setCardState(cardState).setCardState(cardState).setCardState(cardState).setCardState(cardState).setCardState(cardState).setCardState(cardState).setCardState(cardState).setCardState(cardState).setCardState(cardState).setCardState(cardState).setCardState(cardState).setCardState(cardState).setCardState(cardState).set
public android.telephony.UiccSlotInfo[] getUiccSlotsInfo() { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony == null) { return null; } return telephony.getUiccSlotsInfo(); } catch (android.os.RemoteException e) { return null; } }
@java.lang.Override public int hashCode() { int result = 1; result = (31 * result) + (isActive? 1 : 0); result = (31 * result) + (isEuicc? 1 : 0); result = (31 * result) + (cardState); return result; }
@org.junit.Test public void testTransportModeTransformBinderDeath() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthToCryptToIpSecConfig(ipSecConfig); IpSecTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.getRefcountedResource(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); refcountedRecord.binderDied(); verify(mMockNetd).ipSecDeleteSecurityAssociation(createTransformRecords.resourceId), eq(IpSecTransform.DIRECTION_OUT), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_IN), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_IN), anyInt(), anyInt()); assertEquals(0, userRecord.mTransformQuotResource.mCurrent); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail("IllegalArgumentException on request to access resource"); } catch (java.lang.IllegalArgumentException expected) { } }
@java.lang.Override public void freeUnderlyingResources() { for (int direction : com.android.server.IpSecService.DIRECTIONS) { int spi = mSpis[direction].getSpi(); try { mSrConfig.getNetdInstance().ipSecDeleteSecurityAssociation(mResourceId, direction, mConfig.getLocalAddress(), mConfig.getLocalAddress(), mConfig.getRemoteAddress(), mConfig.getRemoteAddress(), mConfig.getRemoteAddress(), spi, 0, 0); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, ("Failed to delete SA with ID: " + (mResourceId))); } } getResourceTracker().give(); }
@org.junit.Test public void testCreateTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformRespToInt(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformRespToByte(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformRespToByte(createTransformRespConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformRespToHpSecConfig(createTransformRespConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformRespToByteArray(createTransformRespolutePath), anyInt(), eq(IpSecTransform.DIRECTION_OUT), eq(IpSecTransform.DIRECTION_SHA256), eq(IpSecTransform.DIRECTION_SHA256), eq(IpSecTransform.DIRECTION_SHA256), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_SHA256), anyInt(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_SHA256), anyInt(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_SHA256), anyInt()); verify(mMockNetd).ipd).ipd).ipd).ipd).ipdInstAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), anyInt(), eq(IpSecAlgorithm.CRY_IN), eq(com.android.server.IpSecServiceParameterizedTest.CRYPT_SSID), anyInt(), anyInt(), eq(new byte[]{ android.server.IpSecAddSecurityException(createTransformRespAliveTest.TEST_SPI_SHA256), anyInt(), eq(IpSecAlgorithm.CRY_SHA256), eq(newInt(), anyInt
@org.junit.Test public void testDeleteTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformRespToIntrSecConfig(ipSecConfig, new android.os.Binder()); mIpSecService.deleteTransportModeTransform(createTransformRespConfig, new android.os.Binder()); mIpSecDeleteSecurityAssociation(createTransformResp.resourceId); verify(mMockNetd).ipd).ipSecDeleteSecurityAssociation(createTransformResp.resourceId); verify(mMockNetd).ipd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_OUT), anyInt(), anyInt(), anyInt(), anyInt(), anyInt()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); assertEquals(0, userRecord.mTransformQuietlyResource.mCurrent); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail("Expected IllegalArgumentException on request to access resource"); } catch (java.lang.IllegalArgumentException expected) { } }
@org.junit.Test public void testSecurityParameterIndexBinderDeath() throws java.lang.Exception { when(mMockNetd.ipSecAllocateSpi(anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), eq(mRemoteAddr), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT))).thenReturn(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT); IpSecSpiResponse spiResp = mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, com.android.server.IpSecService.TEST_SPI_OUT, new android.os.Binder()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mSpiRecords.getRefcountedResourceOrThrow(spiResp.resourceId); refcountedRecord.binderDied(); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(spiResp.resourceId), anyInt(), anyInt(), anyInt(), anyInt()); assertEquals(0, userRecord.mSpiQuotSecDeleteSecurityAssociation, anyInt()); assertEquals(0, userRecord.mSpiQuotced); try { userRecord.mSpiRecords.getRefcountedResourceOrThrow(spiResp.resourceId); fail("Expecting IllegalArgumentException on request to access resource"); } catch (java.lang.IllegalArgumentException expected) { } }
@java.lang.Override public void freeUnderlyingResources() { if (mOwnedByTransform) { android.util.Log.d(com.android.server.IpSecService.TAG, (("Removing Spi " + (mSpi)) + " Current by a Transform")); return; } try { mSrConfig.getNetdInstance().ipSecDeleteSecurityAssociation(mResourceId, mDirection, mLocalAddress, mRemoteAddress, mRemoteAddress, 0, 0); } catch (android.os.ServiceSpecificException e) { android.util.Log.e(com.android.server.IpSecService.TAG, ("Failed to delete SPI registration with ID: " + (mResourceId))); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, ("Failed to delete SPI registration with ID: " + (mResourceId))); } mSpi = android.net.IpSecManager.INVALID_SECURITY_INDEX; getResourceTracker().give(); }
@org.junit.Test public void testCreateTransportModeTransformAead() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); ipSecConfig.setAuthenticatedEncryption(IpSecTransform.DIRECTION_OUT, com.android.server.IpSecServiceParameterizedTest.AEAD_ALGO); ipSecConfig.setAuthenticatedEncryption(IpSecTransform.DIRECTION_IN, com.android.server.IpSecServiceParameterizedTest.AEAD_ALGO); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp(createTransformResp(createTransformResp(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyInt(), anyInt(), anyString(), anyInt(), anyInt()); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformRespAlgorithm.resourceId), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), anyInt(), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipd).ipSecAddSecurityAssociation(eq(createTransformRespAlgorithm.resourceId), anyInt(), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipd).ipd).ipd).ipSecAddSecurityAssociation(eq(createTransformRespAlgorithmStatus.resourceId), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipd).ipSecAddSecurityAssociation(eq(createTransformRespAlgorithm.resourceId), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt()); verify(mMockNetd);
@org.junit.Test public void testReleaseSecurityParameterIndex() throws java.lang.Exception { when(mMockNetd.ipSecAllocateSpi(anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), eq(mRemoteAddr), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT))).thenReturn(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT); android.net.IpSecSpiResponse spiResp = mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT, new android.os.Binder()); mIpSecService.releaseSecurityParameterIndex(spiResp.resourceId); verify(mMockNetd).ipd).ipSecDeleteSecurityAssociation(eq(spiResp.resourceId), anyInt(), anyInt(), anyInt(), anyInt(), anyInt()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); assertEquals(0, userRecord.mSpiQuot, 0, anyInt(), anyInt(), anyInt(), anyInt(), anyInt()); com.android.server.IpSecService.UserRecord = mIpSecService.getUserRecord(android.os.Os.getuid()); assertEquals(0, userRecord.mSpiQuot, 0, anyInt(), anyInt(), anyInt(), anyInt()); com.android.server.IpSecService.UserRecord = mIpSecService.getRefcountedResourceOrThrow(spiResp.resourceId); try { userRecord.mSpiRecords.getRefcountedResourceOrThrow(spiResp.resourceId); fail("Expecting IllegalArgumentException on request"); } catch (java.lang.IllegalArgumentException expected) { } }
public com.android.server.IpSecTunnelInterfaceResponse createTunnelInterface(com.android.server.Network underlyingNetwork, java.lang.String localAddr, java.lang.String remoteAddr) { checkNotNull(binder, "Null Binder passed to openUdpEncapsulationSocket"); checkNotNull(underlyingNetwork, "No local address was specified"); checkNotNull(localAddress, "No local address was specified"); checkNotNull(remoteAddress, "No local address was specified"); com.android.server.IpSecService.checkInetAddress(remoteAddr); com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); final int resourceId = (mNextResourceId)++; final int okey = mReserveKeyTracker.reserve(); final int okey = mReserveKeyTracker.reserve(); try { if (!(userRecord.mTunnelQuietlyResourceReceived())) { return new android.net.IpSecTransformResponse(IpSecManager.Status.RESOURCE_UNAVAILABLE); } java.lang.String int fq = ""; userRecord.mTunnelInterfaceRecords.put(resourceId, new com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.TunnelInterfaceRecord>(new com.android.server.IpSecService.RefcountDownLNAVAILABLE); } catch (java.io.IOException | android.system.ErrnoException | android.system.ErrnoException e) { libcore.IpSecTransformResponse(IpSecManager.Status.OK, resourceId); } return new android.net.IpSecTransformResponse(IpSecManager.Status.OK, resourceId); }
@java.lang.Override public void freeUnderlyingResources() { try { mSrConfig.getNetdInstance().removeVirtualTunnelInterface(mInterfaceName); } catch (android.os.ServiceSpecificException e) { android.util.Log.e(com.android.server.IpSecService.TAG, ((("Failed to delete VTI with interface name: " + (mInterfaceName)) + " and id: ") + (mResourceId))); } getResourceTracker().give(); }
@java.lang.Override public synchronized void destroyTunnelInterface(int resourceId) throws android.os.RemoteException { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); releaseResource(userRecord.mTunnelInterfaceRecords, resourceId); }
public int getIKey() { return mKey[IpSecManager.DIRECTION_INPUT; }
synchronized void release(int i) { if ((i < 0) || (i >= ((mRangeStart) + (numBits)))) { throw new java.lang.IllegalArgumentException(); } mBitSet.clear((i - (mRangeStart))); }
public int getOKey() { return mKey[OKey[(android.net.IpSecManager.DIRECTION_OUT); }
@java.lang.Override public synchronized void applyTunnelModeTransform(int direction, int transformResourceId, int transformResourceId, int tunnelResourceId) throws android.os.RemoteException { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.checkDirection(direction); com.android.server.IpSecService.TransformRecord transformInfo = userRecord.mTransformRecords.getResourceOrThrow(transformResourceId); com.android.server.IpSecService.TunnelInterfaceRecord tunInterface = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(transformResourceId); android.net.IpSecService.TunnelInterfaceRecord tunInterface = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunable, mContext.getSourceAddress(), c.getSpiRecord(), c.getSpi(), c.getSpi(), mSdkConstants.O_O_O_UNNEL)), "Transport interface"); try { mSrvConfig.getNetdInstance().ipSecApplyTunnelModeTransform(direction, c.getSpiRecord().getSpi(), c.getSpiRecord().getSpi(), tunIntfInfo.getOKey(), tunIntfInfo.getOKey(), tunIntfInfo.getOKey(), tunIntfInfo.getOKey(), tunIntfInfo.getOKey(), tunIntfInfo.getUnderlyingNetwork()); } catch (android.os.ServiceSpecificException e) { if ((e.getServiceSpecificException()) == (EINVAL)) { throw new java.lang.IllegalArgumentException(e.toString()); } else { throw e; } } }
@java.lang.Override public synchronized void applyTransportModeTransform(android.os.ParcelFileDescriptor socket, int direction, int resourceId) throws android.os.RemoteException { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.checkDirection(direction); com.android.server.IpSecService.TransformRecord info = userRecord.mTransformRecords.getResourceOrThrow(resourceId); if (((info.pid)!= (getCallingPid())) || ((info.uid)!= (getCallingPid()))) { throw new java.lang.SecurityException("Must be an IpSec Transform may apply it!"); } android.net.IpSecConfig c = info.getConfig(); com.android.internal.util.Preconditions.checkArgument(((c.getMode()) == (IpSecManager.MODE_TRANSPORT)), "No Other to a socket"); try { mSrConfig.getNetdInstance().ipSecApplyTransportModeTransform(socket.getFileDescriptor(), resourceId, direction, c.getSpiRecord().getSpi()); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (EINVAL)) { throw new java.lang.IllegalArgumentException(e.toString()); } else { throw e; } } }
synchronized int reserve() { int current = mNextIndex; for (int i = 0; i < (mSize); i++) { if (!(mBitSet.get(current))) { mBitSet.set(current); mBitSet.set(current); mBitSet.set(current); mBitSet.set(current); return (mRangeStart) + current; } } throw new java.lang.IllegalStateException("Out of VTI interfaces"); }
public java.util.List<java.lang.String> getLocalAddresses() { return mLocalAddresses; }
@java.lang.Override public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(status); out.writeInt(resourceId); }
public com.android.server.Network getUnderlyingNetwork() { return mUnderlyingNetwork; }
@java.lang.Override public java.lang.String toString() { return new java.lang.StringBuilder().append("{ super=").append(super.toString()).append(", mInterfaceName=").append(", mInterfaceName).append(", mUnderlyingNetwork).append(", mUnderlyingNetwork).append(", mUnderlyingNetwork).append(", mLocalAddresses).append(", mRemoteAddresses).append(mRemoteAddress).append(", mRemoteAddress).append(mRemoteAddress).append(mRemoteAddress).append("}").append(mRemoteAddress).append("}").append(mRemoteAddress).append(mRemoteAddress).append(mRemoteAddress).append("}").append(mRemoteAddress).append("}").append(mRemoteAddress).append(mRemoteAddress).append("}").append(mRemoteAddress).append("}").append(mRemoteAddress).append(mRemoteAddress).append(mRemoteAddress).append("}").append(mRemoteAddress).append(mRemoteAddress).append("}").append(mRemoteAddress).append(mRemoteAddress).append("}").append(mRemoteAddress).append("}").append(mRemoteAddress).append(mRemoteAddress).append(mRemoteAddress).append(mRemoteAddress).append("}").append(mRemoteAddress).append(mRemoteAddress).append(mRemoteAddress).append("}").append(mRemoteAddress).append("}").append(mRemoteAddress).append(mRemoteAddress).append(mRemoteAddress).append(mRemoteAddress).append("}").append(mRemoteAddress).append(mRemoteAddress).append(mRemoteAddress).append(mRemoteAddress).append(mRemoteAddress).append(mRemoteAddress).append("}").append(mRemoteAddress).append(mRemoteAddress).append(mRemoteAddress).append(mRemoteAddress).append(mRemoteAddress).append(mRemoteAddress).append("").append(mRemoteAddress).append(mRemoteAddress).append(mRemoteAddress).append(mRemoteAddress).append(mRemoteAddress).append(mRemoteAddress).append(mRemoteAddress).append(mRemoteAddress).append(mRemoteAddress).append(mRemoteAddress).append(mAddress).append(mAddress).append(mAddress).append(mAddress).append(mAddress).append(m
public void currentRadioConfig(java.lang.String ifaceType, android.hardware.radio.V1_0.RadioConfiguredChannel radioType) { synchronized(mLock) { if (mDefaultState) { return; } } }
synchronized void onDeviceStateChanged(com.android.bluetooth.hfp.HeadsetDeviceState deviceStateMachine.DEVICE_STATE_CHANGED, deviceState);
boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); synchronized(mStateMachine) { final com.android.bluetooth.hfp.HeadsetStateMachine = mStateMachine.get(device); if (stateMachine == null) { return false; } int connectionState = stateMachine.getConnectionState(); if ((connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } stateMachine.sendMessage(HeadsetStateMachine.VOICE_RECOGNITION_STOP, device); } return true; }
private boolean bindResponse(int indId, boolean indStatus) { synchronized(mStateMachine) { for (com.android.bluetooth.hfp.HeadsetStateMachine : mStateMachine.values()) { int connectionState = stateMachine.getConnectionState(); if ((connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { continue; } if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, (("UnsupportedStateMachine state for (stateMachine.getDevice())) + indId, (indStatus? 1 : 0)); return true; } } return false; }
boolean disconnectAudio(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); synchronized(mStateMachine) { final com.android.bluetooth.hfp.HeadsetStateMachine = mStateMachine.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (("disconnectAudio: device " + device) + " was never connected/connecting")); return false; } if ((stateMachine.getAudioState())!= (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ("disconnectAudio: audio is not connected for " + device)); return false; } stateMachine.sendMessage(HeadsetStateMachine.DISCONNECT_AUDIO, device); } return true; }
android.bluetooth.BluetoothDevice getCurrentAudioDevice() { synchronized(mStateMachine) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachine.values()) { if ((stateMachine.getAudioState()) == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) { return stateMachine.getDevice(); } } return null; } }
boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, ("onDevice device=" + device)); synchronized(mStateMachine) { com.android.bluetooth.hfp.HeadsetStateMachine(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((("onDevice device " + device) + " not connected/connecting, connection state=") + " not connected/connecting, connectionState)); return false; } int connectionState = stateMachine.getConnectionState(); if ((connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((("connecting device " + device) + " not connected/connecting, connectionState=") + connectionState)); return false; } stateMachine.sendMessage(HeadsetStateMachine.DISCONNECT, device); } return true; }
@java.lang.Override protected synchronized boolean start() { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, "start()"); mStateMachineThread = new android.os.HandlerThread("HeadsetService.StateMachines"); mStateMachine = new com.android.bluetooth.hfp.HeadsetSystemInterface(this); mSystemInterface.init(); mSystemInterface = com.android.bluetooth.hfp.HeadsetSystemInterface(this); mSystemInterface.init(com.android.bluetooth.hfp.HeadsetService.MAX_HEADSET_CONNECTIONS, android.bluetooth.BluetoothHeadset.isInbandRingingSupported(this)); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(Intent.ACTION_BATTERY_CHANGED); filter.addAction(AudioManager.VOLUME_CHANGED_ACTION); filter.addAction(BluetoothDevice.ACTION_CONNECTION_ACCESS_ACTION); registerReceiver(mHeadsetReceiver, filter); com.android.bluetooth.hfp.HeadsetService(this); mHeadsetReceiver, filter); return true; }
boolean disableWBS() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); synchronized(mStateMachine) { for (com.android.bluetooth.hfp.HeadsetStateMachine : mStateMachine.values()) { if ((stateMachine.getConnectionState())!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, ("on't be not connected " + (stateMachine.getDevice()))); } continue; } if ((stateMachine.getAudioState()) == (android.bluetooth.BluetoothHeadsetService.STATE_AUDIO_CONNECTED)) { if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, ("Unable device is already connected " + (stateMachine.getDevice()))); } continue; } stateMachine.sendMessage(HeadsetStateMachine.DISABLE_WBS, stateMachine.getDevice()); } return true; }
private java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); java.util.ArrayList<android.bluetooth.hfp.BLUETOOTH_LIST, java.util.ArrayList<android.bluetooth.hfp.HeadsetStateMachine>() { int currentState = stateMachine.getConnectionState(); for (int state : states) { if (currentState == state) { devices.add(stateMachine.getDevice()); break; } } } return devices; }
boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice device) { synchronized(mStateMachine) { final com.android.bluetooth.hfp.HeadsetStateMachine = mStateMachine.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (("onScoUsing VirtualVoiceCall() device " + device) + " was never connected/connecting")); return false; } int connectionState = stateMachine.getConnectionState(); if ((connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (("Unsupported device " + device) + " is neither connected/connecting device")); return false; } stateMachine.sendMessage(HeadsetStateMachine.VIRTUAL_CALL_STOP, device); } return true; }
boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice device) { synchronized(mStateMachine) { final com.android.bluetooth.hfp.HeadsetStateMachine = mStateMachine.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (("onService device " + device) + " was never connected/connecting")); return false; } stateMachine.sendMessage(HeadsetStateMachine.VIRTUAL_CALL_START_START, device); } return true; }
@android.annotation.Nullable private android.bluetooth.BluetoothDevice getLastConnectedDevice() { android.bluetooth.BluetoothDevice lastConnected = null; long lastConnectionTimestampMillis = java.lang.Long.MIN_VALUE; synchronized(mStateMachine) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachine.values()) { if ((stateMachine.getConnectionState()) == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { long timestampMillis = stateMachine.getDevice(); if (timestampMillis > lastConnectionTimestampMillis) { lastConnected = stateMachine.getDevice(); lastConnectionTimestampMillis = timestampMillis; } } } } return lastConnected; }
int getAudioState(android.bluetooth.BluetoothDevice device) { synchronized(mStateMachine) { final com.android.bluetooth.hfp.HeadsetStateMachine = mStateMachine.get(device); if (stateMachine == null) { return android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED; } return stateMachine.getAudioState(); } }
synchronized void messageFromNative(com.android.bluetooth.hfp.HeadsetStackEvent stackEvent) { if ((stackEvent.device) == null) { android.util.Log.wtfStack(com.android.bluetooth.hfp.HeadsetService.TAG, ("state device is null, event: " + stackEvent)); return; } synchronized(mStateMachine) { com.android.bluetooth.hfp.HeadsetStateMachine(mStateMachine); if (stateMachine == null) { if ((stackEvent.device) == null) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, "Unsupported device is null"); return; } if ((stackEvent.type) == (HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED)) { stateMachine = com.android.bluetooth.hfp.HeadsetStateMachine.make(mStateMachineThread.getLooper(), this, mSystemInterface, mSystemInterface); mStateMachine.put(stackEvent.device, stateMachine); } else { android.util.Log.wtfStack(com.android.bluetooth.hfp.HeadsetService.TAG, ("state machine not found for stack event event: " + stackEvent)); return; } } stateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, stackEvent); }
synchronized int getConnectionState() { com.android.internal.util.IState currentState = getCurrentState(); if (currentState == (mConnecting)) { return android.bluetooth.BluetoothProfile.STATE_CONNECTED; } else if (currentState instanceof com.android.bluetooth.hfp.HeadsetStateMachine.ConnectedBase) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } else if (currentState instanceof com.android.bluetooth.hfp.HeadsetStateMachine.ConnectedBase) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; }
synchronized android.bluetooth.BluetoothDevice getDevice() { return mCurrentDevice; }
long getConnectionTimestampMillis() { return mTimeMillis; }
private boolean isScoAcceptable() { if (mService.getForceScoAudio()) { return true; } return (mAudioRouteAllowed) && ((android.bluetooth.BluetoothHeadset.isInbandRingingSupported(mService)) && (isRinging())) || ((android.bluetooth.BluetoothHeadset.isInbandRingingSupported(mService)) && (isRinging()))); }
@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); when(mSystemInterface.getHeadsetPhoneState()).thenReturn(mPhoneState); when(mSystemInterface.getAudioManager()).thenReturn(mPhoneManager); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice("00:01:02:03"); mNativeInterface = spy(com.android.bluetooth.hfp.HeadsetNativeInterface.getInstance()); doNothing().when(mNativeInterface).init(mNativeInterface).init(mTestDevice); doReturn(true).connectHfp(mTestDevice); doReturn(true).connectAudio(mTestDevice); doReturn(true).connectAudio(mTestDevice); doReturn(true).connectAudio(mTestDevice); doReturn(true).connectAudio(mTestDevice); doReturn(true).disconnectAudio(mTestDevice); doReturn(true).disconnectAudio(mTestDevice); when(mHostsetService.getResources()).thenReturn(mTestDevice.PRIORITY_ON); when(mHeadsetService.getPackageManager()).thenReturn(true); mHandlerThread.start(); HeadsetStateMachine.sConnectTimeoutMillis = com.android.bluetooth.hfp.HeadsetStateMachineTestHandlerThread(); mHandlerThread.start(); HeadsetStateMachine.sConnectTimeoutMillis = com.android.bluetooth.hfp.HeadsetStateMachineTestHandlerThreadPolicy(mHandlerThread.getLooper()).thenReturn(BluetoothProfile.PRIORITY_ON); mHeadsetStateMachine.sConnectTimeoutMillis = com.android.bluetooth.hfp.HeadsetStateMachineTestHandlerThread(); mHandlerThread.start(); HeadsetStateMachine.sConnectTimeoutMillis = com.android.bluetooth.hfp.HeadsetStateMachineTestHandlerThread(mHandlerThread.getLooper(), mHandlerThread.getLooper()).thenReturn(BluetoothProfile.PRIORITY_TEST_MILLIS; mHeadsetStateMachine.sConnectTimeoutMillis = com.android.bluetooth.hfp.HeadsetStateMachineTest
boolean connectAudio(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "connectAudio: device is null"); return false; } synchronized(mStateMachine) { final com.android.bluetooth.hfp.HeadsetStateMachine(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (("connectAudio: device " + device) + " was never connected/connecting")); return false; } if ((stateMachine.getConnectionState())!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "connectAudio: profile not connected"); return false; } if ((stateMachine.getAudioState())!= (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ("connectAudio: audio is not idle, current state " + (stateMachine.getAudioState()))); return false; } stateMachine.sendMessage(HeadsetStateMachine.CONNECT_AUDIO, device); } return true; }
@java.lang.Override protected synchronized boolean stop() { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, "stop()"); if (!(mStarted)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "stop() called before start()"); return true; } mStarted = false; unregisterReceiver(mHeadsetReceiver); if (mHeadsetReceiver) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "stop() called before start()"); return true; } mStateMachine.clear(); }
void disconnectHeadset() { synchronized(mScoClients) { if ((mBluetoothHeadsetDevice)!= null) { setBtScoActiveDevice(mBluetoothHeadsetDevice); } } }
private boolean handleBtScoActiveDeviceChange(android.bluetooth.BluetoothDevice btDevice, boolean isActive) { if (btDevice == null) { return true; } java.lang.String address = btDevice.getAddress(); android.bluetooth.BluetoothClass btClass = btDevice.getBluetoothClass(); int outDevice = android.media.AudioSystem.DEVICE_OUT_BLUETOOTH_SCO_SCO_SCO_HEADSET; if (btClass!= null) { switch (btClass.getDeviceClass()) { case BluetoothClass.Device.AUDIO_VIDEO_WEARABLE_HEADSET : case BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE : case BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE : outDevice = android.media.AudioSystem.DEVICE_OUT_BLUETOOTH_SCO_HEADSET; break; case BluetoothClass.Device.AUDIO_VIDEO_CAR_AUDIO : outDevice = android.media.AudioSystem.DEVICE_OUT_BLUETOOTH_SCO_SCO_AUDIO_CARKIT; break; case BluetoothClass.Device.AUDIO_VIDEO_CAR_AUDIO : outDevice = android.media.AudioSystem.DEVICE_OUT_BLUETOOTH_SCO_CARKIT; break; } } if (!(android.bluetooth.BluetoothAdapter.checkBluetoothAddress(address))) { address = ""; } java.lang.String btDevice = btDevice.getName(); return (isActive, outDevice, address, btDeviceName)) && (handleDeviceConnection(isActive, address, address, btDeviceName)); }
boolean startVoiceRecognition(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); synchronized(mStateMachine) { final com.android.bluetooth.hfp.HeadsetStateMachine = mStateMachine.get(device); if (stateMachine == null) { return false; } int connectionState = stateMachine.getConnectionState(); if ((connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } stateMachine.sendMessage(HeadsetStateMachine.VOICE_RECOGNITION_START, device); } return true; }
private void clccResponse(int index, int direction, int status, int mode, boolean mpty, java.lang.String number, int type) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.HeadsetService.MODIFY_PHONE_STATE, null); broadcastCastMessageToStateMachine(HeadsetStateMachine.SEND_CCLC_RESPONSE, new com.android.bluetooth.hfp.HeadsetClccResponse(index, direction, direction, mode, mpty, number, type)); }
boolean connectAudio() { synchronized(mStateMachine) { final android.bluetooth.BluetoothDevice device = getLastConnectedDevice(); if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "onDevice state is connected is connected"); return false; } return connectAudio(device); } }
boolean enableWBS() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); synchronized(mStateMachine) { for (com.android.bluetooth.hfp.HeadsetStateMachine : mStateMachine.values()) { if ((stateMachine.getConnectionState())!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, ("on device is not connected " + (stateMachine.getDevice()))); } continue; } if ((stateMachine.getAudioState()) == (android.bluetooth.BluetoothHeadsetService.STATE_AUDIO_CONNECTED)) { if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, ("Unable device is already connected " + (stateMachine.getDevice()))); } continue; } stateMachine.sendMessage(HeadsetStateMachine.ENABLE_WBS, stateMachine.getDevice()); } return true; }
boolean disconnectAudio() { synchronized(mStateMachine) { final android.bluetooth.BluetoothDevice device = getCurrentAudioDevice(); if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "on Bluetooth device is connected"); return false; } return disconnectAudio(device); } }
public boolean getAudioRouteAllowed() { return mAudioRouteAllowed; }
boolean isAudioOn() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); synchronized(mStateMachine) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachine.values()) { if ((stateMachine.getAudioState())!= (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) { return true; } } } return false; }
void setBtScoActiveDevice(android.bluetooth.BluetoothDevice btDevice) { android.util.Log.d(com.android.server.audio.AudioService.TAG, (("setBtScoActiveDevice " + btDevice) + ")")); synchronized(mScoClients) { final android.bluetooth.BluetoothDevice previousActiveDevice = mBluetoothHeadsetDevice; if (!(java.util.Objects.equals(btDevice, previousActiveDevice))) { if (!(handleBtScoActiveDeviceChange(previousActiveDevice))) { android.util.Log.w(com.android.server.audio.AudioService.TAG, ("setBtScoActiveDevice() failed to remove previous device " + previousDevice)); return; } if (!(handleBtScoActiveDeviceChange(btDevice, true))) { android.util.Log.w(com.android.server.audio.AudioService.TAG, ("setBtScoActiveDevice() failed to add new device " + btDevice)); return; } mBluetoothHeadsetDevice(btDevice, true); } android.util.Log.d(com.android.server.audio.AudioService.TAG, (("setBtScoActiveDevice(" + btDevice) + ") done")); } android.util.Log.d(com.android.server.audio.AudioService.TAG, (("setBtScoActiveDevice(" + btDevice) + ") done")); }
private void phoneStateChanged(int numActive, int numHeld, int callState, java.lang.String number, int type) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.HeadsetService.MODIFY_PHONE_STATE, null); broadcastCallMessageToStateMachine(HeadsetStateMachine.CALL_STATE_CHANGED, new com.android.bluetooth.hfp.HeadsetCallState(numActive, numHeld, number, type)); }
@java.lang.Override public void freeUnderlyingResources() { try { mSrConfig.getNetdInstance().teardownVirtualTunnelInterface(mInterfaceName); } catch (android.os.ServiceSpecificException e) { android.util.Log.e(com.android.server.IpSecService.TAG, ((("Failed to delete VTI with interface name: " + (mInterfaceName)) + " and id: ") + (mResourceId))); } getResourceTracker().give(); mReserveKeyTracker.release(mKeys); }
@java.lang.Override public synchronized void applyTunnelModeTransform(int direction, int transformResourceId, int transformResourceId, int tunnelResourceId) throws android.os.RemoteException { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TransformRecord transformInfo = userRecord.mTransformRecords.getResourceOrThrow(transformResourceId); com.android.server.IpSecService.TunnelInterfaceRecord transformInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(transformResourceId); android.net.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); android.net.IpSecConfig c = transformInfo.getConfig(); com.android.internal.util.Preconditions.checkArgument(((c.getMode()) == (android.net.IpSecTransform.MODE_TUNNEL)), "Invalid mode; cannot be a tunnel interface"); int[] keys = tunnelInterfaceInfo.getKeys(); try { mSrConfig.getNetdInstance().ipSecApplyTunnelModeTransform(direction, c.getSourceAddress(), c.getSpiRecord().getSpi(), transformInfo.getSpi(), keys[direction]); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (EINVAL)) { throw new java.lang.IllegalArgumentException(e.toString()); } else { throw e; } } }
private int getDexFlags(android.content.pm.ApplicationInfo info, java.lang.String compilerFilter, com.android.server.pm.dex.DexoptOptions options) { int flags = info.flags; boolean debuggable = (flags & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE))!= 0; boolean isProfileGuidedFilter = dalvik.system.DexFile.isProfileGuidedCompilerFilter(compilerFilter); boolean isProfileGuidedFilter = dalvik.system.DexFile.isProfileGuidedCompilerFilter(compilerFilter); boolean isProfileGuidedFilter = (isProfileGuidedFilter)? com.android.server.pm.Installer.DEXOPT_PROFILE_GUIDED : 0; int dexFlags = (isProfileGuidedFilter)? com.android.server.pm.Installer.DEXOPT_PROFILE_GUIDED : 0; int dexFlags = (((((isPublic? com.android.server.pm.Installer.DEXOPT_PUBLIC : 0) | (debuggable? com.android.server.pm.Installer.DEXOPT_DEBUGGABLE : 0)) | (options.isDexoptIdleBackgroundJob()? com.android.server.pm.Installer.DEXOPT_IDLE_BACKGROUND_JOB : 0) | (info.isDexoptIdleBackgroundJob()? com.android.server.pm.Installer.DEXOPT_DISABLE_HIDDEN_JOB : 0)); return adjustDexoptFlags(dexFlags); }
private void broadcastConfigChangedIntent(int phoneId) { android.content.Intent intent = new android.content.Intent(android.telephony.CarrierConfigManager.ACTION_CARRIER_CHANGED); intent.addFlags(((android.content.Intent.FLAG_RECEIVER_ONLY_BEFORE_BOOT) | (android.content.Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND))); android.telephony.SubscriptionManager.putPhoneIdAndSubIdExtra(intent, phoneId); intent.putExtra(CarrierConfigManager.EXTRA_PHONE_ID, phoneId); android.app.ActivityManager.broadcastStickyIntent(intent, UserHandle.USER_ALL); mHasSentConfigChange[phoneId] = true; }
@org.junit.Before public void setUp() { mEuiccCard = new com.android.internal.telephony.uicc.EuiccCardImpl(new com.android.internal.telephony.uicc.EuiccCardImpl(2, 0, 0, mMockTmLock); }
private static com.android.internal.telephony.uicc.En1u1.OperatorId buildOperatorId(com.android.internal.telephony.uicc.Asn1Node node) throws com.android.internal.telephony.uicc.InvalidAsn1DataException, com.android.internal.telephony.uicc.TagNotFoundException { byte[] gid1 = null; if (node.hasChild(com.android.internal.telephony.uicc.TAG_CTX_1)) { gid = node.getChild(com.android.internal.telephony.uicc.TAG_CTX_1).asBytes(); } byte[] gid2 = null; if (node.hasChild(com.android.internal.telephony.uicc.TAG_CTX_CTX_2)) { gid2 = node.getChild(com.android.internal.telephony.uicc.TAG_CTX_2).asBytes(); } return new com.android.internal.telephony.uicc.OperatorId(node.getChild(com.android.internal.telephony.uicc.TAG_CTX_0).asBytes(), gid2); }
private int mockLogicalChannelResponses(java.lang.String response, java.lang.String... extraResponses) { int channel = com.android.telephony.Telephony.UiccChannelMockOpenLogicalChannelResponse.STATicalChannelResponse.STATUS_NO_ERROR, "9000"); com.android.telephony.telephony.UiccChannelMockSendToLogicalChannel(mMockTm, channel, response, extraResponses); com.android.telephony.Telephony.UiccChannelMockCloseLogicalChannel(mMockTm, channel, response, extraResponses); com.android.telephony.Telephony.UiccChannelMockCloseLogicalChannel(mMockTm, channel); return channel; }
public void prepareDownload(@android.annotation.Nullable byte[] hashCc, com.android.internal.telephony.uicc.Asn1Node smdpSigned2, com.android.internal.telephony.uicc.Asn1Node smdpSignature, com.android.internal.telephony.uicc.AsyncResultCallback<com.android.internal.telephony.uicc.Asn1Node> callback, android.os.Handler handler) { }
@org.junit.Test public void testGetAllProfiles() throws com.android.telephony.UiccController, com.android.internal.telephony.uicc.EuiccCardException { int channel = mockLogicalChannelResponses
public void getEuiccInfo1(com.android.internal.telephony.uicc.AsyncResultCallbackCallback callback, android.os.Handler handler) { }
public void authenticateServer(java.lang.String matchingId, com.android.internal.telephony.uicc.Asn1Node serverSigned1, com.android.internal.telephony.uicc.Asn1Node serverSignature1, com.android.internal.telephony.uicc.Asn1Node serverCertificate, com.android.internal.telephony.uicc.AsyncResultCallback<com.android.internal.uicc.Asn1Node> callback, android.os.Handler handler) { }
public void cancelSession(byte[] transactionId, @android.telephony.uicc.EuiccCardManager.CancelReason int reason, com.android.internal.telephony.uicc.AsyncResultCallbackHandler handler, android.os.Handler handler) { }
private void verifyStoreData(int channel, java.lang.String command) { verify(mMockTm, times(1)).iccTransmitApduLogicalChannel(channel, (128 | channel), 226, 0, ((command.length()) / 2), command); }
public void getEuiccInfo2(com.android.internal.telephony.uicc.AsyncResultCallbackCallback callback, android.os.Handler handler) { }
public static java.lang.String stripTrailingFs(byte[] iccId) { synchronized(mLock) { if (com.android.internal.telephony.uicc.Asn1Converter.bcdBytesToString(iccId)) { if (iccIdString.equals(0, iccId)) { return iccIdString.substring(0, iccIdString.indexOf('F')); } } return iccIdString; }
public void loadBoundProfilePackage(com.android.internal.telephony.uicc.Asn1.Asn1Node boundProfilePackage, com.android.internal.telephony.uicc.AsyncResultCallback handler, android.os.Handler handler) { }
@org.junit.Test public void testFSuffix() throws com.android.telephony.UiccChannelException, com.android.internal.telephony.uicc.EuiccCardException { int channel = mockLogicalChannelResponses
private boolean areAllRecordsLoaded() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if ((app!= null) && (isSupportedApplication(app))) { com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if ((ir == null) || (!(ir.isLoaded()))) { log("getUiccApplication: return false"); return false; } } } log(("UiccApplication outside loop, return false; }
private void updateExternalState() { if ((mUiccCard.getCardState()) == (com.android.internal.telephony.uicc.IccCardStatus.CARDSTATE_ERROR)) { setExternalState(IccCardConstants.State.CARD_RESTRICTED); return; } if ((mUiccCard.getCardState()) == (com.android.internal.telephony.uicc.IccCardStatus.CARDSTATE_RESTRICTED)) { setExternalState(IccCardConstants.State.CARD_RESTRICTED); return; } if (((mUiccApplication) == null) || (!(areAllApplicationsReady()))) { setExternalState(IccCardReady); return; } switch (mUiccApplication.getState()) { case APPSTATE_UNKNOWN : setExternalState(IccCardApplicationStatus.NOT_READY); break; case APPSTATE_UN : if ((mUiccApplication.State.NOT_LOCKED) == (IccCardApplicationStatus.PERSOSUBSTATE_NETWORK)) { setExternalState(IccCardConstants.State.NETWORK_LOCKED); } break; case APPSTATE_READY : setExternalState(IccCardConstants.State.NETWORK_LOCKED); break; } }
public com.android.internal.telephony.uicc.UiccProfile getUiccProfileForPhone(int phoneId) { synchronized(com.android.internal.telephony.uicc.UiccController.mLock) { com.android.internal.telephony.uicc.UiccCard uiccCard = getUiccCardForPhone(phoneId); return miccCard!= null? uiccCard.getUiccApplication() : null; } }
@java.lang.Override public void handleMessage(android.os.Message msg) { switch (msg.what) { case : loge(msg.what); } }
private void setCurrentAppType(boolean isGsm) { log("setCurrentAppType"); synchronized(mLock) { boolean isLteOnCdmaMode = (android.telephony.TelephonyManager.getLteOnCdmaModeStatic()) == (com.android.internal.telephony.PhoneConstants.LTE_ON_CDMA_TRUE); if (isGsm || isLteOnCdmaMode) { mCurrentAppType = android.telephony.TelephonyManager.APP_FAM_3GPP; } else { mCurrentAppType = android.telephony.TelephonyManager.APP_FAM_3GPP2; } } }
private void registerAllAppEvents() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app!= null) { log("registerForReady(this, com.android.internal.telephony.uicc.UiccApplication.EVENT_APP_READY, null); com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if (ir!= null) { log("registerForReady: EVENT_RECORDS_LOADED, null"); com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if (ir!= null) { log("registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORDS_LOADED, null); ir.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORD_EVENT, null); ir.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_RECORD_EVENT, null); } } } } }
public void update(android.content.Context c, com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.uicc.IccCardStatus ics) { synchronized(mLock) { mCardState = ics.mCardState; mContext = ci; mIccid = ics.iccid; updateCardId(); if ((mCardState)!= (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT)) { if ((mUiccProfile) == null) { mUiccProfile = new com.android.internal.telephony.uicc.UiccProfile(mContext, mCi, ics, mPhone, mPhone, mPhone); } else { throw new java.lang.RuntimeException("UiccProfile state is absent!"); } } }
private boolean areAllApplicationsReady() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (((app!= null) && (isSupportedApplication(app))) && (!(app.isSupported()))) { log("getUiccApplications: return false"); return false; } } log(("UiccApplications: return false; return (mUiccApplications[0])!= null? mUiccApplications[0])!= null : return false; }
@org.junit.Test(expected = com.android.internal.telephony.uicc.EuiccCardErrorException.class) public void testRetrieveNotification_Error() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses("BF2B038101019000"); try { mEuiccCard.retrieveNotification(5); } catch (com.android.internal.telephony.uicc.EuiccCardErrorException e) { assertEquals(1, e.getErrorCode()); verifyStoreData(channel, "BF2B05A00380038003800105"); throw e; } }
private android.telephony.uicc.EuiccNotification createNotification(com.android.internal.telephony.uicc.Asn1Node node) throws com.android.internal.telephony.uicc.InvalidAsn1DataException, com.android.internal.telephony.uicc.TagNotFoundException { com.android.internal.telephony.uicc.Asn1Node metadataNode; if ((node.getTag()) == (TAG_NOTIFICATION_METADATA)) { metadataNode = node.getChild(com.android.internal.telephony.uicc.TAG_PROFILE_INSTALLATION_RESULT_RESULT_RESULT_RESULT_RESULT); } else if ((node.getTag()) == (TAG_PROFILE_INSTALLATION_RESULT)) { metadataNode = node.getChild(com.android.internal.telephony.uicc.TAG_NOTIFICATION_METADATA); } return new android.telephony.uicc.EuiccNotification(metadataNode.getChild(com.android.internal.telephony.uicc.TAG_SEQ).asInteger(), metadataNode.getChild(com.android.internal.telephony.uicc.TAG_TARGET_ADDR).asString(), metadataNode.getChild(com.android.internal.telephony.uicc.TAG_EVENT).asBits(), metadataNode.getChild(com.android.internal.telephony.uicc.TAG_EVENT).asString(), metadataNode.getChild(com.android.internal.telephony.uicc.TAG_EVENT).asBits(), ((node.getTag()) == (TAG_NOTIFICATION_METADDR).asString())); }
@org.junit.Test(expected = com.android.internal.telephony.uicc.EuiccCardErrorException.class) public void testCancelSession_Error() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses("BF41038101039000"); try { mEuiccCard.cancelSession(com.android.internal.telephony.uicc.Asn1Converter.hexToBytes("A1B2C3"), e.getMessage()); } catch (com.android.internal.telephony.uicc.EuiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, "BF41088003A1B2C3810101"); throw e; } }
@org.junit.Test public void testRemoveNotificationFromList() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses("BF300380010090009000"); mEuiccCard.removeNotificationFromList(5); verifyStoreData(channel, "BF3003800", "BF3003800"); }
@org.junit.Test(expected = com.android.internal.telephony.uicc.EuiccCardErrorException.class) public void testSwitchToProfile_Error() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses("BF2D14A012E0105A0105A0105014523019F70010090004523019F700100"); try { mEuiccCard.switchToProfile("98760000000000543210", true); } catch (com.android.internal.telephony.uicc.EuiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, "BF3111A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0FF01FF01FF01FF01FF")); throw e; } }
@org.junit.Test public void testswitchToProfile_SimRefresh() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses("BF2D14A012E3105A0A0A0A0A0A0A0A0A0A0A0A0A0A0A04523019F700900090009000900090009101900090801990199101908101908101908101898019801980198019901980198019801990199019901FF01FF01FF01FF01FF01FF01FF01FF01FF01FF01FF01FF01FF01FF01FF") }
@org.junit.Test public void testRetrieveNotificationList_Empty() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses("BF2B03810101101019000"); com.android.internal.telephony.uicc.EuiccNotification[] result = mEuiccCard.retrieveNotificationList(((EuiccNotification.Event.Event.DELETE) | (EuiccNotification.Event.DISABLE))); assertArrayEquals(new com.android.internal.telephony.uicc.EuiccNotification[0], result); verifyStoreData(channel, "BF2B06A00481020430481020430"); }
@org.junit.Test public void testGetSmdsAddress() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses("BF3C1480085D4D4D4D4D4D4D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6
@org.junit.Test public void testResetMemory_SimRefresh() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccChannelException { int channel = mockLogicalChannelResponses("6106", "6f00"); mEuiccCard.resetMemory(EuiccCard.ResetOption.DELETE_LOADED_TEST_PROFILES); verifyStoreData(channel, "BF34548202064020640"); }
@org.junit.Test public void testListNotifications() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses(("BF3121012C087361016D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6") + "9000"))); com.android.internal.telephony.uicc.EuiccNotification[] result = mEuiccCard.listNotifications(((EuiccNotification.Event.DELETE) | (EuiccNotification.Event.DISABLE))); assertArrayEquals(new com.android.internal.telephony.uicc.EuiccNotification(1, "smdp2.com", esmdp2.com.android.internal.telephony.uicc.EuiccNotification(1, "smdp2.com", esmdp2.com.android.internal.telephony.uicc.EuiccNotification.DELETE, null) }, result); verifyStoreData(channel, "BF280481020430"); }
@org.junit.Test public void testSetNickname() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses("BF34500011009000"); mEuiccCard.setnickname("9876000000000010090004", "new nickname"); verifyStoreData(channel, "BF291A0A0A0A0A0A656677962666666666666666667766666666666666666666")); }
@org.junit.Test public void testGetEuiccController() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses("BF2E05301301301301301301301301"); assertArrayEquals(new byte[]{ 1, 2, 3 }, mEuiccCard.getEuiccController()); verifyStoreData(channel, "BF2E00"); }
@org.junit.Test(expected = com.android.internal.telephony.uicc.EuiccCardErrorException.class) public void testAuthenticateServer_Error() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccCardException { int channel = mockLogicalChannelResponses("BFIND1011011011010110101"); when(mMockTm.getDeviceId()).thenReturn("987654321012345"); try { mEuiccCard.authenticateServer("A1B2C3-X4K5Z6K5Z6", com.android.internal.telephony.uicc.Asn1Node.newBuilder(160).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(160).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(162).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(162).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(162).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(162).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(162).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(162).build(), com.android.internal.telephony.uicc.Eu1Node.newBuilder(162).build(), com.android.internal.telephony.uicc.EuiccCardError("B" + "A1_X11") + "A02d23452345") + "A1123452345234523452345") + "A101821985") + "A11234523452345234523452345234523")); throw e; } }
@org.junit.Test public void testResetMemory() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses("BF34538001009000"); mEuiccCard.resetMemory(EuiccCard.ResetOption.DELETE_FIELD_TEST_PROFILES); verifyStoreData(channel, "BF48202064020640"); }
@org.junit.Test public void testGetEuiccInfo2() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses("BF2203013013013013013"); assertEquals("BF2203010203", mEuiccCard.getEuiccInfo2().toHex()); verifyStoreData(channel, "BF2200"); }
@org.junit.Test(expected = com.android.internal.telephony.uicc.EuiccCardErrorException.class) public void testListNotifications_Error() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses("BF28038101101101039101"); try { mEuiccCard.listNotifications(((EuiccNotification.Event.Event.DELETE) | (EuiccNotification.Event.DISABLE))); } catch (com.android.internal.telephony.uicc.EuiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, "BF280481020430"); throw e; } }
@org.junit.Test public void testGetRat() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponsescom.android.internal.uicc.
@org.junit.Test public void testSwitchToProfile() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses("BF2D14A012E0105A0A01054523019F7009000", "BF31038001009000900090009000900090009000900090009000900090009000900090009000900090009000900090009000900090009000900090009000900090009000900090009000900090890890890890890890890890890890890890890890890890890890890890890890890801980199019801980198019801980198019901FF01FF01FF01FF01FF01FF01FF01FF01FF01FF01FF01FF01FF01FF") }
@org.junit.Test(expected = com.android.internal.telephony.uicc.EuiccCardErrorException.class) public void testLoadProfilePackage_Error() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses("9000", "9000", "9000", "9000", "9000", "9000", "9000", "9000", "9000", "9000", "9000", "90004F2707A205A205A205039101039101039101"); try { mEuiccCard.loadBoundProfilePackage(com.android.internal.telephony.uicc.Asn1Node.newBuilder(48950).addChildAsBytes(135, new byte[]{ 1, 2, 2, 3 })).addChild(com.android.internal.telephony.uicc.Asn1Node.newBuilder(60).addChildAsBytes(135, new byte[]{ 1, 2, 3, 3 })).addChild(com.android.internal.telephony.uicc.Asn1Node.newBuilder(162).addChildAsBytes(134, new byte[]{ 7, 8, 6 })).addChild(com.android.internal.telephony.uicc.En1Node.newBuilder(162).addChildAsBytes(134, new byte[]{ 7, 8, 9 })).build()); } catch (com.android.internal.telephony.uicc.EuiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, "A005860803010203"); verifyStoreData(channel, "A0058603010203"); verifyStoreData(channel, "A005860606060603010203"); verifyStoreData(channel, "A3060606060606060606060606060606060602"); verifyStoreData(channel, "A3040306060606060606060606030303030303060506"); verifyStoreData(channel, "A30403040304030403040503003050306060
@org.junit.Test public void testPrepareDownload() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF2102A00091019000"); com.android.internal.telephony.uicc.Asn1Node result = mEuiccCard.prepareDownload(com.android.internal.telephony.uicc.Asn1Converter.hexToBytes("41314232433243332D583459117"), com.android.internal.telephony.uicc.Asn1Node.newBuilder(160).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(160).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(161).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(162).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(162).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(162).build()); assertEquals("BF2102A0002102A3685D58D58D58D58D58D58D58D58D58D58D58D58D58D58D58D58D58D5893529352D58D58D58D58D58D5893549354911791179117936911793691179369369369369552323232323232323232323232323232345369029029023643D588.0; }
@org.junit.Test public void testDeleteProfile() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses}
@org.junit.Test public void testRetrieveNotification() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses(("BF2B18A016" + ("3014BF2F11FDITE "3014D636767D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6")), result); verifyStoreData(channel, "BF2B05A01F05A003800380038003800105"); }
@org.junit.Test public void testGetEid() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses("BF3E065A041A2D4D4D4D9D9000"); assertEquals}
@org.junit.Test(expected = com.android.internal.telephony.uicc.EuiccCardErrorException.class) public void testPrepareDownload_Error() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses("BF2105A10303030303060000"); try { mEuiccCard.prepareDownload(com.android.internal.telephony.uicc.Asn1Converter.hexToBytes("4131423243332D5834591170934591179117911791179117911791179117911791179117935343577943594251169117936854775808911691169368547758089116911691169368547758089116911691169368547758089116911691169116936854775808911691169116936854775808")); throw e; } }
@org.junit.Test public void testSetDefaultSmdpAddress() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses("BF3C1480085D4D4D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6E6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D
@org.junit.Test public void testAuthenticateServer() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses("BF3802A0009A0009000"); when(mMockTm.getDeviceId()).thenReturn("987654321012345"); com.android.internal.telephony.uicc.Asn1Node result = mEuiccCard.authenticateServer("A1B2C3-X4K5Z6", com.android.internal.telephony.uicc.Asn1Node.authenticateServer("A1B2-X4K5Z6Z6", com.android.internal.telephony.uicc.Asn1Node.newBuilder(160).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(161).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(162).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(162).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(162).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(162).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(162).build(), com.android.internal.telephony.uicc.En1Node.newBuilder(162).build(), com.android.internal.telephony.uicc.En1Node.newBuilder(162).build(), com.android.internal.telephony.uicc.En1Node.newBuilder(162).build(), com.android.internal.telephony.uicc.uicc.Asn1Node.newBuilder(162).build(), com.android.internal.telephony.uicc.En1Node.newBuilder(161).build(), com.android.internal.telephony.uicc.uicc.Asn1Node.newInteger(161).build(), com.android.internal.telephony.uicc.En1Node.newInteger
@org.junit.Test public void testGetEuiccInfo1() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses("BF3390102039000"); assertEquals("BF3A1.0.0", mEuiccCard.getEuiccInfo1().toHex()); verifyStoreData(channel, "BF2000"); }
@org.junit.Test public void testLoadProfilePackage() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses("9000", "9000", "9000", "9000", "9000", "9000", "9000", "9000", "9000", "9000", "9000", "9000", "9000", "BF37009000"); com.android.internal.telephony.uicc.Asn1Node result = mEuiccCard.loadBoundProfilePackage(com.android.internal.telephony.uicc.Asn1Node.newBuilder(48950).addChild(com.android.internal.telephony.uicc.Asn1Node.newBuilder(48950).addChildAsBytes(135, new byte[]{ 1, 2, 2, 3 })).addChild(com.android.internal.telephony.uicc.Asn1Node.newBuilder(161).addChildAsBytes(135, new byte[]{ 4, 5, 6 })).addChild(com.android.internal.telephony.uicc.Asn1Node.newBuilder(162).addChildAsBytes(134, new byte[]{ 7, 8, 6 })).build()); assertEquals("BF3700", result.toHex()); assertEquals("BF3700303FB003010203", result.toHex()); verifyStoreData(channel, "A0158603010203"); verifyStoreData(channel, "A0158603010203803010203"); verifyStoreData(channel, "A0158603010C3203"); verifyStoreData(channel, "A01586060603010C0A"); verifyStoreData(channel, "A0158608080808080809"); verifyStoreData(channel, "A01586080808080809"); verifyStoreData(channel, "A0A0A0A"); verifyStoreData(channel, "A0A0A0A"); }
@org.junit.Test public void testRetrieveNotificationList() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses(("BF2B2FA02D" + (("3014BF2F118006100610063686") + "3015BF2F6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6"); }
public void removeNotificationFromList(int seqNumber, com.android.internal.telephony.uicc.AsyncResultCallback<java.lang.Void> callback, android.os.Handler handler) { java.lang.String command = com.android.internal.telephony.uicc.Asn1Node.newBuilder(com.android.internal.telephony.uicc.TAG_REMOVE_NOTIFICATION_FROM_LIST).addChildAsInteger(com.android.internal.telephony.uicc.UiccLogicalChannel.openIsdR(mTmTm)) { response = com.android.internal.telephony.uicc.UiccLogicalChannel.openIsdR(mTmTmTmTmTm)) { response = ch.execStoreData(command); } int result = com.android.internal.telephony.uicc.EuiccCard.parseSimpleResult(response); switch (result) { case RemoveNotificationFromListCode.OK : case RemoveNotificationFromListCode.NOTHING_TO_DELETE : break; default : throw new com.android.internal.telephony.uicc.EuiccCardErrorException(OperationCode.REMOVE_NOTIFICATION_FROM_FROM_BEFORE : break; default : throw new com.android.internal.telephony.uicc.EuiccCardErrorException(OperationCode.REMOVE_NOTIFICATION_FROM_FROM_FROM_BEFORE : break; } }
public void resetMemory(@android.telephony.EuiccCardManager.ResetOption int options, com.android.internal.telephony.uicc.AsyncResultCallback<java.lang.Void> callback, android.os.Handler handler) { java.lang.String command = com.android.internal.telephony.uicc.Asn1Node.newBuilder(com.android.internal.telephony.uicc.TAG_TAG_MEMC_MEMORY_RESET).addChildAsBits(com.android.internal.telephony.uicc.TAG_CTX_2, options).build().toHex(); java.lang.String response; int result; try (com.android.internal.telephony.uicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.UiccLogicalChannel.openIsdR(mTmTmTmTmTmTm)) { response = ch.execStoreData(command); result = com.android.internal.telephony.uicc.EuiccCard.parseSimpleResult(response); } catch (com.android.internal.telephony.uicc.UiccControllerException e) { if ((e.getApduStatus()) == (com.android.internal.telephony.uicc.EuiccCard.APDU_ERROR_SIM_REFRESH)) { com.android.internal.telephony.uicc.EuiccCard.get().i("Got is refreshed after resetting resetting memory, no response got."); result = ResetMemoryCode.OK; } else { throw e; } } switch (result) { case ResetMemoryCode.OK : mEnabledIccid = null; break; case MtdpAddress.NOTHING_TO_TO_DELETE : break; case MtdpId : break; default : throw new com.android.internal.telephony.uicc.EuiccCardErrorException(OperationCode.RESET_MEMORY, result); } }
public void getSmdsAddress(com.android.internal.telephony.uicc.UiccControllerCallback<java.lang.String> callback, android.os.Handler handler) { if ((mSmdsAddress) == null) { getDefaultSmdsAddress(); } return mSmdsAddress; }
public void getEuiccChallenge(com.android.internal.telephony.uicc.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { java.lang.String response; try (com.android.internal.telephony.uicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.UiccLogicalChannel.openIsdR(mTmTmTm)) { response = ch.execStoreData(com.android.internal.telephony.uicc.UiccController.newBuilder(com.android.internal.telephony.uicc.Asn1Node.newBuilder(com.android.internal.telephony.uicc.TAG_GET_GET_EUICCALLENGE).build().toHex()); } com.android.internal.telephony.uicc.Asn1Node node = com.android.internal.telephony.uicc.EuiccCard.parseResponse(response); try { return node.getChild(com.android.internal.telephony.uicc.TAG_CTX_0).asBytes(); } catch (com.android.internal.telephony.uicc.Eu1.InvalidAsn1DataException e) { throw new com.android.internal.telephony.uicc.EuiccCardInvalidResponseException(("getCaptXn1_0).asBytes()).asBytes(); } }
@org.junit.Test public void testCancelSession() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF41009000"); com.android.internal.telephony.uicc.Asn1Node result = mEuiccCard.cancelSession(com.android.internal.telephony.uicc.Asn1Converter.hexToBytes("A1B2C3"), euiccCard.CancelReason.POSTPONED); assertEquals("BF4100", result.toHex()); verifyStoreData(channel, "BF410001C3810101"); }
public void cancelSession(byte[] transactionId, @android.telephony.uicc.EuiccCardManager.CancelReason int reason, com.android.internal.telephony.uicc.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { java.lang.String command = com.android.internal.telephony.uicc.Asn1Node.newBuilder(com.android.internal.telephony.uicc.TAG_CANCEL_SESSION).addChildAsBytes(com.android.internal.telephony.uicc.TAG_CTX_0, reason).addChildAsInteger(com.android.internal.telephony.uicc.UiccLogicalChannel.openIsdR(mTmTm)) { response = ch.execStoreData(command); } com.android.internal.telephony.uicc.Asn1Node root = com.android.internal.telephony.uicc.UiccCard.parseResponse(response); try { if (com.android.internal.telephony.uicc.UiccCard.parseResponseCode(response)) { response = ch.execStoreData(command); } } catch (com.android.internal.telephony.uicc.EuiccCardErrorNotFoundException e) { throw new com.android.internal.telephony.uicc.Eu1NodeException(OperationCode.CANCEL_SESSION, root.getChild(com.android.internal.telephony.uicc.TAG_CTX_1).asInteger()); } } catch (com.android.internal.telephony.uicc.EuiccCardErrorNotFoundException | com.android.internal.telephony.uicc.EuiccCardErrorException e) { throw new com.android.internal.telephony.uicc.EuiccCardInvalidResponseException(OperationCode.CANCEL_SESSION, root.getChild(com.android.internal.telephony.uicc.TAG_CTX_1).asInteger()); } catch (com.android.internal.uicc.Eu1.InvalidAsn1Exception e) { throw new com.android.internal.telephony.uicc.EuiccCardInvalidResponseException(("Invalid parse response: " + response), e); } return root; }
public void getEuiccInfo1(com.android.internal.telephony.uicc.AsyncResultCallbackCallback<com.android.internal.telephony.uicc.Asn1.AsyncResultCallback> callback, android.os.Handler handler) { java.lang.String response; try (com.android.internal.telephony.uicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.UiccLogicalChannel.openIsdR(mTmTmTm)) { response = ch.execStoreData(com.android.internal.telephony.uicc.Asn1Node.newBuilder(com.android.internal.telephony.uicc.Asn1Node.newBuilder(com.android.internal.telephony.uicc.TAG_GET_GET_SUICC_INFO_1).build().toHex()); } return com.android.internal.telephony.uicc.EuiccCard.parseResponse(response); }
public void setDefaultSmdpAddress(java.lang.String defaultSmdpAddress, com.android.internal.telephony.uicc.AsyncResultCallback<java.lang.Void> callback, android.os.Handler handler) { java.lang.String command = com.android.internal.telephony.uicc.Asn1Node.newBuilder(com.android.internal.telephony.uicc.TAG_SET_DEFAULT_SMDPDP_ADDRESS).addChildAsString(com.android.internal.telephony.uicc.Uicc.TAG_CTX_0, defaultSmdpAddress).build().toHex(); java.lang.String response; try (com.android.internal.telephony.uicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.UiccLogicalChannel.parseSimpleResult(mTmTmTmTmTm)) { response = ch.execStoreData(command); } int result = com.android.internal.telephony.uicc.EuiccCard.parseSimpleResult(response); switch (result) { case SetDefaultSmdpAddressCode.OK : break; default : throw new com.android.internal.telephony.uicc.EuiccCardErrorException(OperationCode.SET_DEFAULT_SMDP_ADDRESS, result); } mDefaultSmdpAddress = defaultSmdpAddress; }
@org.junit.Test(expected = com.android.internal.telephony.uicc.EuiccCardErrorException.class) public void testDeleteProfile_Error() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses(("BF2D26A024" + (("E3105A0A0A0A0A0A0A0A0A0A0A0A0A0A0" + "E310100") + "9000")), "BF3303800"); try { mEuiccCard.deleteProfile("98760000000000543210"); } catch (com.android.internal.telephony.uicc.EuiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, "BF330C5A0A0A0A0A0A0A0A0A0A0A0A0A0"); throw e; } }
public void getDefaultSmdpAddress(com.android.internal.telephony.uicc.UiccControllerCallback<java.lang.String> callback, android.os.Handler handler) { if (((mDefaultSmdpAddress) == null) || ((mSmdsAddress) == null)) { java.lang.String response; try (com.android.internal.telephony.uicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.UiccLogicalChannel.openIsdR(mTmTmTmTmTmTm)) { response = ch.execStoreData(com.android.internal.telephony.uicc.Eu1Node.newBuilder(com.android.internal.telephony.uicc.TAG_GET_CONFIGURED_ADDRESSES).build().toHex()); } try { com.android.internal.telephony.uicc.Asn1Node root = com.android.internal.telephony.uicc.EuiccCard.parseResponse(response); mDefaultSmdpAddress = root.getChild(com.android.internal.telephony.uicc.EuiccCard.TAG_CTX_0).asString(); mSmdpAddress = root.getChild(com.android.internal.telephony.uicc.TAG_CTX_1).asString(); } catch (com.android.internal.telephony.uicc.Eu1.InvalidAsn1DataException e) { throw new com.android.internal.telephony.uicc.EuiccCardInvalidResponseException(("Invalid parse response: " + response), e); } } return mDefaultSmdpAddress; }
public void getEuiccInfo2(com.android.internal.telephony.uicc.AsyncResultCallbackCallback<com.android.internal.telephony.uicc.Asn1.AsyncResultCallback> callback, android.os.Handler handler) { java.lang.String response; try (com.android.internal.telephony.uicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.UiccLogicalChannel.openIsdR(mTmTmTm)) { response = ch.execStoreData(com.android.internal.telephony.uicc.Asn1Node.newBuilder(com.android.internal.telephony.uicc.Asn1Node.newBuilder(com.android.internal.telephony.uicc.TAG_GET_GET_SUICC_INFO_2).build().toHex()); } return com.android.internal.telephony.uicc.EuiccCard.parseResponse(response); }
@org.junit.Test(expected = com.android.internal.telephony.uicc.EuiccCardErrorException.class) public void testRetrieveNotificationList_Error() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses("BF2B038101038000"); try { mEuiccCard.retrieveNotificationList(((EuiccNotification.Event.Event.DELETE) | (EuiccNotification.Event.DISABLE))); } catch (com.android.internal.telephony.uicc.EuiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, "BF2B06A00481020430"); throw e; } }
public void getEid(com.android.internal.telephony.uicc.Uicc.AsyncResultCallback<java.lang.String> callback, android.os.Handler handler) { if ((mEid) == null) { java.lang.String response; try (com.android.internal.telephony.uicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.UiccLogicalChannel.openIsdR(mTmTmTm)) { java.lang.String command = com.android.internal.telephony.uicc.UiccLogicalChannel.openIsdR(mTmTmTmTmTm)) { java.lang.String command = com.android.internal.telephony.uicc.Asn1Node.newBuilder(com.android.internal.telephony.uicc.TAG_TAG_TAG_LIST, new byte[]{ TAG_EID }).build().toHex(); response = ch.execStoreData(command); } com.android.internal.telephony.uicc.Asn1Node eidAsn1Node = com.android.internal.telephony.uicc.EuiccCard.parseResponse(response); try { mEid = com.android.internal.telephony.uicc.Eu1Converter.bytesToHex(eidAsn1Node.getChild(com.android.internal.telephony.uicc.TAG_EID).asBytes()); } catch (com.android.internal.telephony.uicc.Eu1.InvalidAsn1DataException e) { throw new com.android.internal.telephony.uicc.EuiccCardInvalidResponseException(("getEID: response = " + response), e); } } return mEid; }
@org.junit.Test public void testGetDefaultSmdpAddress() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccControllerException { int channel = mockLogicalChannelResponses("BF3C1480034D4D4D4D4D4D4D4D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D
public void close() { android.util.Log.d(android.net.IpSecTransform.TAG, ("close Transform with Id " + (mResourceId))); if ((mResourceId) == (android.net.IpSecManager.INVALID_RESOURCE_ID)) { mCloseGuard.close(); return; } try { android.net.IIpSecService svc = getIpSecService(); synchronized(mKeepaliveCallback) { if ((mKeepalive)!= null) { stopNattKeepalive(); } } catch (android.os.RemoteException e) { throw e.rethrowAsRuntimeException(); } finally { mResourceId = android.net.IpSecManager.INVALID_RESOURCE_ID; mCloseGuard.close(); } }
@java.lang.Override public void onError(int error) { synchronized(this) { mKeepalive = null; } if ((mUserKeepaliveCallback)!= null) mUserKeepaliveCallback.onError(error); mUserKeepaliveCallback.onError(error); }
void stopNattKeepalive() { synchronized(mKeepaliveCallback) { if ((mKeepalive) == null) { android.util.Log.e(android.net.IpSecTransform.TAG, "stop stop keep keep alive"); return; } mKeepalive.stop(); } }
@java.lang.Override public void onStarted() { if (((mUserKeepaliveCallback)!= null) mUserKeepalive() { mUserKeepaliveCallback.onStarted(); } mUserKeepaliveCallback.onStarted(); }
@java.lang.Override public void onStopped() { synchronized(this) { mKeepalive = null; } if ((mUserKeepaliveCallback)!= null) mUserKeepaliveCallback.onStopped(); }
void startNattKeepalive(java.io.FileDescriptor socket, android.net.ConnectivityManager.PacketKeepaliveCallback userCallback, int intervalSeconds) throws java.io.IOException { if ((mConfig.getMode())!= (android.net.IpSecTransform.MODE_TRANSPORT)) { throw new java.lang.IllegalArgumentException("Invalid keepalive cannot be used in Tunnel mode"); } if ((mResourceId) == (android.net.IpSecManager.INVALID_RESOURCE_ID)) { throw new java.lang.IllegalStateException("No active"); } synchronized(mKeepaliveCallback) { if ((mKeepaliveCallback)!= null) { throw new java.lang.IllegalStateException("No active"); } java.net.InetSocketAddress localAddr = null; try { localAddr = ((java.net.InetSocketAddress) (android.system.Os.getsockname(socket))); } catch (android.system.ErrnoException e) { throw e.rethrowAsIOException(); } mUserKeepalive = userCallback; android.net.ConnectivityManager cm = ((android.net.ConnectivityManager) (mContext.getSystemService(Context.CONNECTIVITY_SERVICE))); mKeepalive = cm.startNattKeepalive(mConfig.getNetwork(), intervalSeconds, mKeepaliveCallback, mKeepaliveCallback, localAddr.getPort(), android.net.NetworkUtils.numericToInetAddress(mConfig.getRemoteAddress())); } }
private android.net.IpSecTransform activate() throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, java.io.IOException { synchronized(this) { try { android.net.IIpSecService svc = getIpSecService(); android.net.IIpSecService response = svc.createTransportModeTransform(mConfig, new android.os.Binder()); int status = result.status; checkResultStatus(status); mResourceId = result.resourceId; android.util.Log.d(android.net.IpSecTransform.TAG, ("Resource with Id " + (mResourceId))); mResourceId = result.resourceId; android.util.Log.d(android.net.IpSecTransform.TAG, ("Resource with Id " + (mResourceId))); mCloseGuard.open("build"); } catch (android.os.RemoteException e) { throw e.rethrowAsRuntimeException(); } } return this; }
public int getDupMode() { return mState; }
public int[] getCellBandwidths() { return new int[0]; }
public void setChannelNumber(java.lang.String ifaceType) { sendMessage(com.android.server.wifi.WifiMonitor.P2P_DISCONNECTED); }
public void setCellBandwidths(int width) { mCellBandwidth = new com.android.server.wifi.WifiMonitor.P2pControlWidths(windows, width); }
public int getChannelNumber() { return 0; }
@android.test.suitebuilder.annotation.SmallTest public void testParcel() { android.telephony.ServiceState ss = new android.telephony.ServiceState(); ss.setVoiceRegState(ServiceState.STATE_IN_SERVICE); ss.setDataRegState(ServiceState.STATE_OUT_OF_SERVICE); ss.setDataRoamingType(ServiceState.ROAMING_TYPE_UNKNOWN); ss.setDataRoamingType(ServiceState.ROAMING_TYPE_UNKNOWN); ss.setRilDataRadioTechnology(ServiceState.RIL_TYPE_UNKNOWN); ss.setRilDataRadioTechnology(ServiceState.RIL_RADIO_TECHNOLOGY_0xRTT); ss.setRilDataRadioTechnology(ServiceState.RIL_RADIO_TECHO_0xRTT); ss.setCdmaDefaultRoaming(2, 3); ss.setCdmaDefaultRoamingIndicator(2, 3); ss.setCdmaDefaultRoamingIndicator(4); ss.setCdmaDefaultRoaming(4); ss.setCdmaEriIcon(7); ss.setCdmaEriIcon(7); ss.setCdmaEriIcon(7); ss.setCdmaEriIcon(7); ss.setCdmaEriIcon(new int[]{ 3, 4, 10 }); android.os.Parcel p = android.os.ServiceState(p); assertEquals(ss, new android.telephony.ServiceState(p); assertEquals(ss, new android.telephony.ServiceState(p); assertEquals(ss, new int[]{ 3, 4, 10 }); android.telephony.ServiceState newSs = new android.telephony.ServiceState(p); assertEquals(ss, new android.telephony.ServiceState(p); assertEquals(ss, new android.os.ServiceState(p); }
public int getCellConnectionStatus() { return mCellConnectionStatus; }
public void setCellConnectionStatus(int cellConnectionStatus) { mCellConnectionStatus = cellConnectionStatus; }
private int getType(java.lang.Throwable e) { if ((e.getCause()) instanceof com.android.internal.telephony.uicc.EuiccCardErrorException) { com.android.internal.telephony.uicc.EuiccCardErrorException exception = ((com.android.internal.telephony.uicc.EuiccCardError) (e.getCause())); int resultCode = ((exception.getOperationCode()) << (com.android.internal.telephony.uicc.EuiccCardController.BREC_CARD_ERROR_CODE_BITS_BIT)) + (exception.getErrorCode()); return resultCode; } return android.telephony.EuiccCardManager.RESULT_UNKNOWN; }
@java.lang.Override public void onResult(android.service.eclipse.uicc.EuiccProfileInfo[] profiles) { callback.onComplete(EuiccCardManager.RESULT_OK, profiles); }
@java.lang.Override public void getAllProfiles(java.lang.String callingPackage, com.android.internal.telephony.uicc.IGetAllProfilesCallback callback) { checkCallingPackage(callingPackage); com.android.internal.telephony.uicc.Uicc.AsyncResultCallback<android.service.euicc.EuiccProfileInfo> cardCb = new com.android.internal.telephony.uicc.AsyncResultCallback<android.service.EuiccProfileInfo>() { @java.lang.Override public void onResult(android.service.telephony.EuiccProfileInfo[] profiles) { callback.onComplete(EuiccCardManager.RESULT_OK, profiles); } @java.lang.Override public void onComplete(java.lang.Throwable e) { callback.onComplete(getResultCode(e), null); } }; com.android.internal.telephony.uicc.UiccController.getInstance().getAllProfiles(cardCb, mEb, mEbundle); }
public com.android.internal.telephony.uicc.UiccCard getEuiccCard(int slotIndex) { synchronized(mLock) { return mSucCard.getEuiccCard(slotIndex); } }
@java.lang.Override public void onException(java.lang.Throwable e) { callback.onComplete(getResultCode(e), null); }
public void testJvmTvmAgentAppInternal() throws java.lang.Exception { runJvmAgentLoadTest(com.android.tradefed.device.ITestDevice device, java.lang.String apk, java.lang.String abiName) -> { try { java.lang.String setAgentAppCmd = (("cmd activity set-agent-app " + pkg) + " ") + (android.jvmti.cts.JvmAttachingHostTest.AGENT); java.lang.String setAgentAppReply = device.executeShellCommand(setAgentAppCmd); if ((setAgentAppReply!= null) && (!(setAgentAppReply.trim().isEmpty()))) { com.android.tradefed.log.LogUtil.CLog.e(setAgentAppReply); } } catch (java.lang.Exception e) { throw new java.lang.RuntimeException("Failed running setAgent-agent-app", e); } try { android.jvmtm.cts.JvmAttachingHostTest.runAttachTestCmd(device, pkg, ""); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException("Failed agent-app attaching setAgent", e); } }); }
public void testJvmtiAgentAppExternal() throws java.lang.Exception { runJvmAgentLoadTest(com.android.tradefed.device.ITestDevice device, java.lang.String apk, java.lang.String abiName) { try { java.lang.String pwd = device.executeShellCommand((("run-as " + pkg) + " pwd")); if (pwd == null) { throw new java.lang.RuntimeException("pwd failed"); } pwd = pwd.trim(); if (pwd == null) { throw new java.lang.RuntimeException("pwd failed"); } pwd = pwd.trim(); if (pwd == null) { throw new java.lang.RuntimeException("pwd failed"); } java.lang.String libInDataDataDataDataData = (android.jvmwi.cts.JvmAttachingHostTest.AGENT.length()) - (".so".length())))) + "2.so"; java.lang.String agentInDataDataData = installLibToData(device, abiName, apk, apk, apk, apk, android.jvmtrace.cts.JvmAttachingHostTest.AGENT, libInDataDataData); java.lang.String agentInDataDataData = installLibToData(device, abiName, apk, apk, apk, pwd, android.jvmtrace.cts.SvmAttachingHostTest.AGENT, libInDataData); java.lang.String setAgentAppReply = (("cmd activity set-agent-app " + pkg) + " ") + agentInDataDataDataDataDataDataDataDataDataData; java.lang.String setAgentAppReply = device.executeShellCommand(setAgentAppCmd); if ((setAgentAppReply.trim().isEmpty())) && (!(setAgentAppReply.trim().isEmpty()))) { com.android.tradefed.log.LogUtil.CLog.e(setAgentAppReply); } } catch (java.lang.Exception e) { throw new java.lang.RuntimeException("Failed to test set agent-app attaching", e); } try { android.jvmtrace.cts.TestUtil.runAttachTestCmd(device, p
private static void runAttachTestCmd(com.android.tradefed.device.ITestDevice device, java.lang.String pkg, java.lang.String agentParams) throws java.lang.Exception { java.lang.String attachCmd = ((("Pending activity start -S -S -W '" + agentParams) + " -n ") + pkg) + "/android.jvmti.JvmActivity"; java.lang.String attachReply = device.executeShellCommand(attachCmd); if ((attachReply!= null) && (!(attachReply.trim().isEmpty()))) { com.android.tradefed.log.LogUtil.CLog.e(attachReply); } }
@java.lang.Override public void setAgentApp(java.lang.String packageName, java.lang.String agent) { synchronized(this) { if ((checkCallingPermission(android.Manifest.permission.SET_ACTIVITY_WATCHER))!= (android.content.pm.PackageManager.PERMISSION_WATCHER)) { throw new java.lang.SecurityException(("Requires permission " + (android.Manifest.permission.SET_ACTIVITY_WATCHER))); } stopProfilerLocked(packageName, 0, false, agent, agent, agent, true)); mProfileProc = null; } }
int runSetAgentApp(java.io.PrintWriter pw) throws android.os.RemoteException { java.lang.String pkg = getNextArgRequired(); java.lang.String agent = getNextArgRequired(); mInterface.setAgentApp(pkg, agent); return 0; }
void setProfileApp(android.content.pm.ApplicationInfo app, java.lang.String processName, android.app.ProfilerInfo profilerInfo) { synchronized(this) { boolean isDebuggable = "1".equals(android.os.SystemProperties.SYSTEM_DEBUGGABLE, "0")); if (!isDebuggable) { if (((app.flags) & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE)) == 0) { throw new java.lang.SecurityException(("Unable not debuggable: " + (app.packageName))); } } setProfileAppUnchecked(processName, profilerInfo); } }
private void restoreDefaultAPN(int subId) { android.database.sqlite.SQLiteDatabase db = getWritableDatabase(); java.lang.String where = getWhereClause(db, subId); com.android.providers.telephony.TelephonyProvider.log(("update: where: " + where)); if (android.text.TextUtils.isEmpty(doesNotNull) { com.android.providers.telephony.TelephonyProvider.log(("update: " + where)); if (android.text.TextUtils.isEmpty(doesNotNull(subId)) { com.android.providers.telephony.TelephonyProvider.loge("Could not get where clearing API to restore APN", to restore APNpc; } try { db.delete(com.android.providers.TelephonyProvider.CARRIERS_NOT_OWNED_BY_DPC; } catch (android.database.SQLException e) { com.android.providers.telephony.TelephonyProvider.loge(TelephonyProvider.CARRIERS_TABLE, where, null); } android.content.SharedPreferences spApnId = getContext().getSharedPreferences(com.android.providers.telephony.TelephonyProvider.PREF_FILE_APN, Context.MODE_PRIVATE); android.content.SharedPreferences spApn = getContext().getSharedPreferences(com.android.providers.telephony.TelephonyProvider.PREF_FILE_FULL_APN, Context.MODE_PRIVATE); android.content.SharedPreferences.Editor editorApn = spApn.edit(); editorApn = spApn.edit(); editorApn.clear(); editorApn.apply(); editorApn = spApn.clear(); editorApn.apply(); if (com.android.providers.telephony.TelephonyProvider.apnSourceServiceExists(getContext())) { restoreApnsWithService(); } else { initDatabaseWithDatabaseHelper(db); } } }
void disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH_ADMIN permission"); synchronized(this) { if (mPbapStateMachineMap.DISCONNECT) { mPbapStateMachineMap.get(device)) { mPbapStateMachineMap.get(device); } } }
@java.lang.Override public boolean onConnect(android.bluetooth.BluetoothDevice remoteDevice, android.bluetooth.BluetoothSocket socket) { if ((remoteDevice == null) || (socket == null)) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ((("onConnect: Unexpected Unexpected null." + remoteDevice) + " socket=") + socket)); return false; } com.android.bluetooth.pbap.PbapStateMachine newStateMachine = com.android.bluetooth.pbap.PbapService.make(this, mHandlerThread.getLooper(), remoteDevice, socket, this, this, mSessionStatusHandler, mNextNotificationId); mPbapStateMachineMap.put(remoteDevice, newStateMachine); mServerSockets.prepareForNewConnect(); return true; }
java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM, "Need BLUETOOTH permission"); java.util.List<android.bluetooth.BluetoothPbapService> devices = new java.util.ArrayList<>(); if (((mPbapStateMachineMap) == null) || (states == null)) { return devices; } for (int state : states) { for (android.bluetooth.BluetoothDevice device : mPbapStateMachineMap.keySet()) { if (state == (mPbapStateMachineMap.getConnectionState())) { devices.add(device); } } } return devices; }
private void cleanUpServerSocket() { for (com.android.bluetooth.pbap.PbapStateMachine stateMachine : mPbapStateMachine) { stateMachine.sendMessage(PbapStateMachine.DISCONNECT); } cleanUpSdpRecord(); if ((mServerSockets)!= null) { mServerSockets.shutdown(); } }
java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if ((mPbapStateMachineMap) == null) { return new java.util.ArrayList(mPbapStateMachineMap.keySet()); } return new java.util.ArrayList(mPbapStateMachineMap.keySet()); }
int getConnectionState(android.bluetooth.pbap.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (((mPbapStateMachine) == null) || (!(mPbapStateMachineMap.containsKey(device))) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } return mPbapStateMachineMap.get(device); }
public void addTcpStatsResult(int sent, int lost, int lost) { if (com.android.server.wifi.WifiMonitor.P2P2_UNKNOWN)) { pendingSummary.tcpLossRate.count(lost, sent); } pendingSummary.tcpLossRate.count(lost, sent); }
@java.lang.Override public java.lang.String toString() { java.util.StringJoiner j = new java.util.StringJoiner("{ "", "}", "}"); j.add(netId=" + (netId))); j.add(("netId=" + (netId))); j.add(("netId=" + (netId))); for (int t : com.android.internal.util.BitUtils.transportNameOf(t)); } j.add(java.lang.String.format("got avg=%dms max=%dms",ot="%dms err="%dms",ot="%dms err="%dms", Tot="%dms err="%dms", Tot="%dms0000ot="%dms", Tot="%dms0000ot="%dms", total_lost="%dms", total_lost="%dms", totalErrorRate.count)); j.add(java.lang.String.format("%dms avg_percent="%dms", total_lost="%dms", total_lost_lost="%dot="%dot=%dcpRate.average()), tcpLossRate.count, ((int) (tcpLossRate.sum)))); return j.toString(); }
@java.lang.Override public synchronized void onTcpSocketStatsEvent(int[] networkIds, int[] packetSentCounters, int[] packetLostCounters) { if (((networkIds.length)!= (packetSentCounters.length)) || ((networkIds.length)!= (packetSentCounters.length))) { android.util.Log.e(com.android.server.connectivity.NetdEventListenerService.TAG, "Invalid dataFIXME"); return; } long timestamp = java.lang.System.currentTimeMillis(); for (int i = 0; i < (networkIds.length); i++) { int netId = networkIds[i]; int sent = packetSentCounters[i]; getMetricsForNetwork(timestamp, netId).addTcpStatsResult(sent, netId).addTcpStatsResult(metered, lost)); } if (com.android.server.connectivity.NetdEventListenerService.DBG) { java.util.StringJoiner j = new java.util.ArrayList<java.lang.String, "); for (int i = 0; i < (networkIds.length); i++) { int netId = networkIds[i]; int sent = packetSentCounters[i]; j.add(java.lang.String.format("{ netId=%d, sent=%d, lost=" + (netId))); } android.util.Log.d(com.android.server.connectivity.NetdEventListenerService.TAG, ("TcpSocketStatsEvent: " + (netId=") + (j.toString()))); } android.util.Log.d(com.android.server.connectivity.NetdEventListenerService.TAG, ("TcpSocketStatsEvent: " + (netId=") + (j.toString()))); }
public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeInt(mMaxDataCalls); }
public android.telephony.NetworkRegistrationState.DataState getDataSpecificState() { return mDataSpecificState; }
public android.telephony.NetworkRegistrationState.VoiceSpecificState getVoiceSpecificState() { return mVoiceSpecificState; }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeInt(mTransportType); dest.writeInt(mRegState); dest.writeInt(mRegState); dest.writeIntArray(mReasonForDenial); dest.writeIntArray(mReasonForDenial); dest.writeIntArray(mAvailableServices); dest.writeIntArray(mAvailableServices); dest.writeParcelable(mCellIdentity, flags); }
public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeBoolean(mRoamingIndicator); dest.writeInt(mRoamingIndicator); dest.writeInt(mRoamingIndicator); dest.writeInt(mDefaultRoamingIndicator); }
@java.lang.Override public android.os.IBinder onBind(android.content.Intent intent) { if ((intent == null) || (!(android.telephony.data.DataService.DATA_SERVICE_INTERFACE.equals(intent.getAction())))) { loge(android.telephony.data.DataService.DATA_SERVICE_INTERFACE).sendToTarget(); return mHandler.obtainMessage(android.telephony.data.DataService.DATA_SERVICE_INTERNAL_INITIALIZE_SERVICE).sendToTarget(); mHandler.obtainMessage(android.telephony.data.DataService.ID_SERVICE_INTERNAL_INITIALIZE_SERVICE).sendToTarget(); mHandler = new android.telephony.data.DataService.IDataServiceWrapper(); return mBinder; }
@java.lang.Override public boolean onUnbind(android.content.Intent intent) { onDestroy(); return false; }
@java.lang.Override public void onDestroy() { if (mCleaningUp) { log("startStop() already started..."); return; } mCleaningUp = true; if ((mAdapterService)!= null) { mAdapterService.removeProfile(this); } cleanup(); if ((mBinder)!= null) { mBinder.cleanup(); mBinder = null; } super.onDestroy(); mAdapter = null; }
private void doStart() { if ((mAdapter) == null) { android.util.Log.w(mName, "start profile service: device"); return; } mAdapterService = com.android.bluetooth.btservice.AdapterService.getAdapterService(); if ((mAdapterService) == null) { android.util.Log.w(com.android.bluetooth.btservice.ProfileService.TAG, "start() not add this profile because AdapterService is null."); return; } mAdapterService.addProfile(this); mProfileStarted = start(); if (!(mProfileStarted)) { android.util.Log.e(mName, "Failed to get class"); return; } mAdapterService.onProfileServiceStateChanged(getClass().getName(),BluetoothAdapter()).start()).start(); }
@java.lang.Override protected boolean isAvailable() { return (mProfileStarted) && (!(mCleaningUp)); }
private void doStop() { if (!(mProfileStarted)) { android.util.Log.w(mName, "stop() called but the profile is not running."); } mProfileStarted = false; if (!(stop())) { android.util.Log.e(mName, "stop() called"); } stopSelf(); }
@java.lang.Override public void onCreate() { if (com.android.bluetooth.btservice.ProfileService.DBG) { log("onCreate"); } super.onCreate(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mBinder = initBinder(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(Intent.ACTION_USER_SWITCHED); filter.addAction(Intent.ACTION_USER_UNLOCKED); android.content.BroadcastReceiver userSwitchedReceiver = new android.content.BroadcastReceiver() { @java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { final java.lang.String action = intent.getAction(); final int userId = intent.getIntExtra(Intent.EXTRA_USER_HANDLE, UserHandle.USER_NULL); if (userId == (android.os.UserHandle.USER_NULL)) { android.util.Log.e(mName, "Received userId " + userId)); setUserUnlocked(userId); } if (Intent.ACTION_USER_UNLOCKED.equals(intent.getAction())) { android.util.Log.d(mName, ("Error: ringing to userId " + userId)); setUserUnlocked(userSwitchedReceiver, filter); } } }; getApplicationContext().registerReceiver(userSwitchedReceiver, filter); int currentUserId = android.app.ActivityManager.getCurrentUser(); setCurrentUser(currentUserId); android.app.ActivityManager userManager = android.os.UserManager.get(getApplicationContext()); if (userManager.isUserUnlocked(currentUserId)) { android.util.Log.d(android.os.UserManager.TAG, ("Unlocked user changed userId " + userId)); setUserUnlocked(currentUserId); } create(); }
public android.bluetooth.BluetoothCodecStatus getCodecStatus() { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, "getCodecStatus()"); } synchronized(mStateMachine sm : mStateMachine) { for (com.android.bluetooth.a2dp.A2dpService.TAG, "getCodecStatus() : mStateMachine.values()) { if (sm.isConnected()) { return sm.getCodecStatus(); } } return mLocalCodecStatus; } }
private void broadcastConnectionState(int newState, int prevState) { if (com.android.bluetooth.a2dp.A2dpStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ((((("Connection state " + (mDevice)) + ": ") + (com.android.bluetooth.a2dp.A2dp.A2dpStateMachine.profileStateToString(prevState))) + "->") + (com.android.bluetooth.a2dp.A2dp.A2dpStateMachine.profileStateToString(newState))) + "->")); } mAudioManager.setBluetoothA2dpDeviceConnectionState(mDevice, newState, BluetoothProfile.A2DP); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothA2dp.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_DEVICE, mDevice); intent.addFlags(((android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BEFORE_BOOT) | (android.content.Intent.FLAG_RECEIVER_BACKGROUND))); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }
boolean disconnect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ("connecting " + device)); } enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); synchronized(mStateMachine) { com.android.bluetooth.a2dp.A2dpStateMachine sm = mStateMachine.get(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("connecting disconnect request for " + device) + " : no state machine")); return false; } int connectionState = mDeviceStateMachine.getConnectionState(); if ((connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } mSendMessage(A2dpStateMachine.DISCONNECT); return true; } }
private void processCodecConfigEvent(android.bluetooth.BluetoothCodecStatus newCodecStatus) { android.bluetooth.BluetoothCodecConfig prevCodecConfig = null; synchronized(this) { if ((mCodecStatus)!= null) { prevCodecStatus = mCodecStatus.getCodecConfig(); } mCodecStatus = newCodecStatus.getCodecConfig(); } if (com.android.bluetooth.a2dp.A2dpStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ((("Codec Codec Config: " + prevCodecStatus) + "->") + (newCodecStatus.getCodecConfig())) + "->") + (newCodecStatus.getCodecStatus()))); for (android.bluetooth.BluetoothCodecConfig codecConfig : newCodecStatus.getCodecsLocalCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Codec Codec Local Capability: " + codecConfig)); } for (android.bluetooth.BluetoothCodecStatus codecConfig : newCodecStatus.getCodecsSelectableCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Codec Codec Selectable Capability: " + codecConfig)); } } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothA2dp.ACTION_CODEC_STATUS); intent.putExtra(BluetoothCodecStatus.EXTRA_STATUS, mCodecStatus.SIGNED_REGISTERED_ONLY_BEFORE_BEFORE_BOOT); if ((getCurrentState()) == (mConnected))) { intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mDevice); mAudioManager.sendBroadcastBluetoothA2dpDeviceConfigChange(mDevice); } mDeviceManager.sendBroadcastReceiverConfigChange(mDevice); }
@java.lang.Override public void enter() { android.util.Log.i(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ((("Enter Disconnected(" + (mDevice)) + "): ") + (com.android.bluetooth.a2dp.A2dpStateMachine.message("getCurrentMessage().what)))); mConnectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; removeMessages(com.android.bluetooth.a2dp.A2dpStateMachine.CONNECT_TIMEOUT); if ((mLastConnectionState)!= (-1)) { broadcastConnectionState(mLastConnectionState, mLastConnectionState); } }
boolean okToConnect(android.bluetooth.BluetoothDevice device) { com.android.bluetooth.btservice.AdapterService adapterService = com.android.bluetooth.btservice.AdapterService.getAdapterService(); int priority = mService.getPriority(device); if ((adapterService == null) || (adapterService.isQuietModeEnabled())) { return false; } if (((android.bluetooth.BluetoothProfile.PRIORITY_OFF) < priority) && (((android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED) == priority) && ((device.getBondState())!= (android.bluetooth.BluetoothProfile.BOND_NONE)))) { return true; } return false; }
@java.lang.Override public void dump(java.lang.StringBuilder sb) { super.dump(sb); for (com.android.bluetooth.a2dp.A2dpStateMachine sm : mStateMachine.values()) { mAvrcp.dump(sb); } }
@org.junit.Test public void testIncomingPriorityReject() { when(mA2dpService.getPriority(any(android.bluetooth.BluetoothDevice.class))).thenReturn(BluetoothProfile.PRIORITY_OFF); com.android.bluetooth.a2dp.A2dpStackEvent connStCh = new com.android.bluetooth.a2dp.A2dpStackEvent(A2dpStackEvent.EVENT_TYPE_CONNECTION_CHANGED); connStCh.valueInt = A2dpStackEvent.CONNECTION_STATE_CONNECTED; connStCh.device = mTestDevice; mA2dpStateMachine.sendMessage(A2dpStateMachine.STACK_EVENT, connStCh); verify(mA2dpService, after(com.android.bluetooth.a2dp.A2dpStateMachineTest.TIMEOUT_MS).sendBroadcast(any(android.content.Intent.class), anyString()); org.junit.Assert.assertEquals(mA2dpStateMachine.getCurrentState()).sendBroadcast(any(android.content.Intent.class), anyString()); }
@org.junit.Test public void testDefaultDisconnectedState() { org.junit.Assert.assertEquals(mA2dpStateMachine.getConnectionState(), BluetoothProfile.STATE_DISCONNECTED); }
@org.junit.Test public void testOutgoingTimeout() { when(mA2dpService.PRIORITY_ON); when(mA2dpService.PRIORITY_ON); when(mA2dp2dpManager.PRIORITY_ON); when(mA2dp2dp2dp(android.content.Intent.class))).thenReturn(true); mA2dpStateMachine.sendMessage(A2dpStateMachine.CONNECT, mTestDevice); org.mockito.ArgumentCaptor<android.content.Intent> intentArgument1 = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); verify(mA2dpService, timeout(com.android.bluetooth.a2dp.A2dpStateMachineTest.TIMEOUT_MS).times(1)).sendBroadcast(intentArgument1.capture(), anyString()); org.mockito.ArgumentCaptor<android.content.Intent> intentArgumentArgument2 = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); verify(mA2dpService, timeout(2dpStateMachine.capture(), anyString()); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTING, intentArgumentArgument2.getIntExtra(BluetoothProfile.S2)); org.mockito.ArgumentCaptor<android.content.Intent> intentArgumentArgumentException = org.mockito.IsInstanceOf.getCurrentStateMachineOf(A2dpStateMachine.connectTimeoutMs) * 2).sendBroadcast(intentArgumentArgumentException, intentArgumentArgument2.capture(), anyString()); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, intentArgumentArgument2.getValue().getIntExtra(BluetoothProfile.EXTRA_STATE, (-1))); org.mockito.ArgumentCaptor<android.content.Intent> intentArgumentCaptor = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); verify(mA2dpService, timeoutArgumentArgumentArgumentException, intentArgumentArgument2.get
public void setCodecConfigPreference(android.bluetooth.BluetoothCodecConfig codecConfig) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ("getCodecConfig() " + (java.util.Objects.toString(codecConfig)))); } else { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ("getCodecConfig() " + (java.util.Objects.toString(codecConfig)))); } }
public void disableOptionalCodecs() { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, "disableOptionalCodecs()"); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, "disableOptionalCodecs()"); } mEnabledCodecConfig.disableOptionalCodecs(); }
public void dump(java.lang.StringBuilder sb) { com.android.bluetooth.btservice.ProfileService.println(sb, ("mDevice StateMachine " + (mDevice))); com.android.bluetooth.btservice.ProfileService.println(sb, ("StateMachine StateMachine: " + (this.toString()))); com.android.bluetooth.btservice.ProfileService.println(sb, ("StateMachine state: " + (this.toString()))); synchronized(this) { if ((mCodecStatus)!= null) { com.android.bluetooth.btservice.ProfileService.println(sb, ("onPlaying: " + (mIsPlaying))); } } }
public void enableOptionalCodecs() { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, "enableOptionalCodecs()"); } mEnabledCodecConfig.enableOptionalCodecs(); }
@java.lang.Override protected boolean cleanup() { if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, "cleanup()"); } if ((mBondStateChangedReceiver)!= null) { unregisterReceiver(mBondStateChangedReceiver); mBondStateChangedReceiver = null; } if ((mConnectionStateMachine)!= null) { unregisterReceiver(mConnectionStateMachine.entrySet().iterator()); mConnectionStateChangedReceiver = null; } for (java.util.Iterator<java.util.Map.Entry<android.bluetooth.BluetoothDevice, com.android.bluetooth.a2dp.A2dpStateMachine>> it = mStateMachine.entrySet().iterator(); mStateMachine.cleanup(); it.remove(); it.remove(); }
void messageFromNative(com.android.bluetooth.a2dp.A2dpStackEvent stackEvent) { synchronized(mStateMachine) { android.bluetooth.BluetoothDevice device = stackEvent.device; if ((stackEvent.type) == (A2dpStackEvent.EVENT_CODEC_CONFIG_CHANGED)) { android.bluetooth.BluetoothDevice device = mAdapter.getRemoteDevice("00:00:00:00:00:00:00:00:00:00:00:00:00:00"); if ((device == null) || (device.equals(zeroDevice))) { mLocalCodecStatus = stackEvent.codecStatus; return; } } com.android.bluetooth.a2dp.A2dpStateMachine sm = getStateMachine(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.a2dpService.TAG, ("No process stack event: " + stackEvent)); return; } mLocalCodecStatus = new com.android.bluetooth.a2dp.A2dpStateMachine(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ("Unsupported process stack: " + stackEvent)); return; } }
private void processConnectionEvent(int state) { switch (state) { case A2p2p2p.CONNECTION_STATE_DISCONNECTED : android.util.Log.i(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Disconnect: " + (mDevice))); break; case A2dpStackEvent.CONNECTION_STATE_CONNECTED : android.util.Log.w(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Disconnecting interrupted: device is connected: " + (mDevice))); transitionTo(mConnected); break; case A2dpStackEvent.CONNECTION_STATE_CONNECTED : android.util.Log.i(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Disconnecting interrupted: " + state)); transitionTo(mConnected); break; case A2dpStackEvent.CONNECTION_STATE_DISCONNECTING : break; default : android.util.Log.e(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Incorrect state: " + state)); break; } }
private com.android.bluetooth.a2dp.A2dpStateMachine getStateMachine(android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, "getStateMachine failed: device cannot be null"); return null; } synchronized(mStateMachine) { com.android.bluetooth.a2dp.A2dpStateMachine sm = mStateMachine.get(device); if (sm!= null) { return sm; } if ((mStateMachine)!= null) { return sm; } if ((mStateMachine)!= null) { return sm; } if ((mStateMachine) == (com.android.bluetooth.a2dpService.MAX_A2DP_STATE_MACHINES)) { android.util.Log.e(com.android.bluetooth.a2dpService.TAG, ("Creating a new state machines for " + device)); } mStateMachine.put(device, this, mA2dpNativeInterface, mStateMachine, mStateMachine, mStateMachine, mStateMachine, mStateMachineThread.getLooper()); mStateMachine.put(device, sm); return sm; } }
public boolean connect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if ((getPriority(device)) == (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { return false; } android.os.ParcelUuid[] featureUuids = device.getUuids(); if ((android.bluetooth.BluetoothUuid.containsAnyUuid(featureUuids, com.android.bluetooth.a2dp.A2dpService.A2DP_SOURCE_UUID)) && (!(android.bluetooth.BluetoothUuid.containsAllUuid(featureUuids, com.android.bluetooth.a2dp.A2dpService.A2DP_SOURCE_UID)))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, "setStateMachineUuid(featureUuid, com.android.bluetooth.a2dp.A2dpService.A2DP_SOURCE_SUBSSinkUUID)))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, "getState() does not have a state machine"); return false; } synchronized(mStateMachine) { com.android.bluetooth.a2dp.A2dpStateMachine smConnect = getStateMachine(device); if (smConnect == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("connect to " + device) + " : no state machine return false; } for (com.android.bluetooth.a2.A2dpService.STATE_CONNECTED : no stateMachine) { if ((connectionState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) || (connectionState == (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; }
@java.lang.Override public void getDataCallList(int slotIndex, android.telephony.data.IDataServiceCallback callback) { if (callback == null) { loge("getDataCallList(android.telephony.data.DataService.DATA_SERVICE_REQUEST_GET_DATA_CALL_LIST, 0, callback).sendToTarget(); } mHandler.obtainMessage(android.telephony.data.DataService.DATA_SERVICE_REQUEST_CALL_DATA_CALL_LIST, 0, callback).sendToTarget(); }
public static void doTest() throws java.lang.Exception { art.RedefDefinition.enableCommonRetransformation(true); art.RedefDefinition.doCommonClassRetransformation(art.Test983.Transform.class); art.RedefDefinition.doCommonClassRetransformation(java.lang.Object.class); art.RedefDefinition.doCommonClassRetransformation(java.lang.ClassLoader.class); art.RedefDefinition.doThrowTransformation(false); }
public static void run() throws java.lang.Exception { art.Test983.doTest(); }
com.android.server.connectivity.NetworkAgentInfo makeNai(int netId, int score, com.android.server.connectivity.NetworkAgentInfo makeNai, long ports) { com.android.server.connectivity.NetworkAgentInfo nai = mock(com.android.server.connectivity.NetworkAgentInfo.class); when(nai.network()).thenReturn(new android.net.Network(netId)); when(nai.network()).thenReturn(score); nai.linkProperties = new android.net.LinkProperties(); nai.networkCapabilities = new android.net.LinkProperties();nai.unpackBits(transport); }
public void testParseUtcLong() throws java.lang.Exception { java.lang.String roundTripFormat = "yyyyyyyyMMSSZ zzz"; libcore.java.text.SimpleDateFormatTest.doUtcParsingTest(java.util.Locale.ENGLISH, roundTripFormat); libcore.java.text.SimpleDateFormatTest.doUtcParsingTest(java.util.Locale.ENGLISH, roundTripFormat); }
public void testParseUtcShort() throws java.lang.Exception { java.lang.String roundTripFormat = "yyyyyyMMdd HH:mm.SSSSZ z"; libcore.java.text.SimpleDateFormatTest.doUtcParsingTest(java.util.Locale.ENGLISH, roundTripFormat); libcore.java.text.SimpleDateFormatTest.doUtcParsingTest(java.util.Locale.ENGLISH, roundTripFormat); }
private static void doUtcParsingTest(java.util.Locale locale, java.lang.String roundTripFormat) throws java.lang.Exception { java.util.TimeZone nonUtcZone = java.util.TimeZone.getTimeZone("America/Los_Angeles"); java.text.DateFormat formatter = new java.text.SimpleDateFormat(roundTripFormat, locale); java.text.DateFormat parser = new java.text.SimpleDateFormat(roundTripFormat, locale); for (java.lang.String timeZoneId : libcore.java.text.SimpleDateFormatTest.UTC_ZONE_IDS) { java.util.TimeZone timeZone = java.util.TimeZone.getTimeZone(timeZoneId); assertEquals(timeZoneId, timeZone.getID()); java.util.TimeZone timeZone = java.util.TimeZone.getTimeZone(timeZoneId); java.util.TimeZone timeZone = java.util.TimeZone.getTimeZone(timeZone); java.util.TimeZone tzString = formatter.format(dateToFormat); java.util.Date dateTimeZone = java.util.DateFormat.parse(dateToFormat); java.util.Date parsedDate = java.util.DateFormat.parse(dateToFormat); java.util.Date parsedDate = java.util.DateFormat.parse(dateTimeString); assertEquals(dateToFormat, parsedDate); } }
@java.lang.Override public void stopNattKeepalive(int sessionHandle, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy == null) { android.hardware.radio.V1_1.IRadio radioProxy = android.hardware.radio.V1_1.IRadio.radioFrom(radioProxy); if (radioProxy11 == null) { if (result!= null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.RIL.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } return; } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_STOP_KEEPALIVE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.CommandException | java.lang.RuntimeException e) { radioProxy11.stopKeepalive(rr.mSerial, sessionHandle); } } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_STOP_KEEPALIVE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy11.stopKeepalive(rr.mSerial, sessionHandle); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "stopNattKeepalive", e); } }
@java.lang.Override public com.android.internal.telephony.dataconnection.KeepaliveStatus createFromParcel(android.os.Parcel source) { return new com.android.internal.telephony.dataconnection.KeepaliveStatus(source.readInt(), source.readInt(), source.readInt()); }
private int checkSourceAddress() { for (java.net.InetAddress address : mNai.linkProperties.getAddresses()) { if (address.equals(address.srcAddress)) { android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, ((("Failed to be a matching address) + " to ") + (mPacket.srcAddress))); return android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, "SOCKED a matching address"); } } return ERROR_INVALID_IP_ADDRESS; }
public byte[] getNattKeepalivePacket() throws android.net.KeepalivePacketException { if ((!((srcAddress) instanceof java.net.Inet4Address)) || (!((dstAddress) instanceof java.net.Inet4Address))) { throw new android.net.KeepalivePacketData.InvalidPacketException(ERROR_INVALID_ADDRESS); } if ((dstAddress)!= (NATT_PORT)) { throw new android.net.KeepalivePacketException(("INVALID_PORT " + (android.net.KeepalivePacketData.UDP_HEADER_LENGTH)) + 1; java.nio.ByteBuffer buf = java.nio.ByteBuffer.allocate(length); buf.order(java.nio.ByteOrder.BI_HEADER_LENGTH); buf.putShort(((short) (17664))); buf.putShort(((short) (length))); buf.putShort(((short) (length))); buf.putShort(((short) (length))); buf.putShort(((short) (bytes))); buf.putShort(((short) (bytes))); buf.putShort(((short) (bytes.dstAddress.IPPROTO_UDP))); buf.putShort(((short) (bytes))); buf.putShort(((short) (bytes.dstAddress.IPPROTO_UDP))); buf.putShort(((short) (this.dstAddress.IPPROTO_UDP))); buf.putShort(((short) (bytes.dstAddress.IPV4_HEADER_LENGTH))); int udpChecksumOffset = buf.position(); buf.putShort(((short) (bytes - 20))); buf.putShort(((short) (length - 20))); buf.putShort(((byte) (255))); buf.putShort(((short) (255))); buf.putShort(((short) (255))); buf.putShort(((short) (255))); buf.putShort(((short) (bytes))); buf.putShort(ippChecksumOffset, android.net.util.IpUtils.ippChecksum(buf, 0, android.net.util.
private int isValid() { synchronized(mNai) { int error = checkInterval(); if (error == (SUCCESS)) error = checkNetworkConnected(); if (error == (SUCCESS)) error = checkSourceAddress(); return reportSourceAddress(); } }
int startWifiIPSacketOffload(int slot, android.net.KeepalivePacketData packetData, int intervalSeconds) { byte[] packet = packetData.getNattKeepalivePacket(); dstMac = getDstMacForKeepalive(packetData); }
public java.lang.String toString() { return new java.lang.StringBuffer(("[").append(" network=").append(mNai.network).append(" network=").append(isStarted).append(isStarted).append(" " + (mPacket.dstAddress.dstAddress.dstAddress(mPacket.dstAddress, mPacket.dstAddress, mPacket.dstAddress, mPacket.dstPort)).append(mPacket.dstAddress, mPacket.dstAddress, mPacket.dstPort)).append(mPid).append("]").append(mPid).append("]").append(mPid).append("]").append(mPid).append("]").append(mPid).append("]").append("]").append(mPid).append("]").append(mPid).append("]").append("]").append(mPid).append("]").append("]").append(mPid).append("]").append("]").append("]").append(mPid).append("]"); }
public void startNattKeepalive(com.android.server.connectivity.NetworkAgentInfo nai, int intervalSeconds, android.os.Messenger messenger, android.os.IBinder binder, java.lang.String srcAddrString, int srcPort) { if (nai == null) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, com.android.server.connectivity.NO_INVALID_NETWORK); return; } java.net.InetAddress srcAddress; java.net.InetAddress dstAddress; try { android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, ((("register " + srcAddrString) + " ") + dstAddrString)); srcAddress = android.net.NetworkUtils.numericToInetAddress(srcAddrString); dstAddress = android.net.NetworkUtils.numericToInetAddress(srcAddress, srcAddress, NATT_PORT); } catch (android.net.NetworkInterfaceException e) { notifyMessenger(messenger, com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo(messenger, binder, com.android.server.connectivity.KeepaliveInfo.N_INVALID_IP_ADDRESS); return; } android.net.KeepalivePacketData packet; try { packet = new android.net.KeepalivePacketData(srcAddress, srcPort, dstAddress, NATT_PORT); } catch (android.net.Connectivity.KeepaliveException e) { notifyMessenger(messenger, com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo(messenger, nai, nai, packet, intervalSeconds); android.net.KeepaliveInfo Ki = new com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo(messenger, nai, nai, packet, intervalSeconds); android.util.Log.w(com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo(messages, nai, nai, intervalSeconds); android.util.Log.d(com.android.server.connectivity.KeepaliveTracker
private int checkNetworkConnected() { android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, "startNetwork connected"); if (!(mNai.networkInfo.isConnectedOrConnected())) { return ERROR_INVALID_NETWORK; } return FAIL; }
public void startKeepaliveResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, android.hardware.radio.V1_1.KeepaliveStatus keepaliveStatus) { com.android.internal.telephony.RILRequest rr = mRil.processResponse(responseInfo); if (rr == null) { return; } if ((responseInfo.error) == (android.hardware.radio.V1_0.RadioError.NONE)) { com.android.internal.telephony.RIL.KeepaliveStatus retValue = new com.android.internal.telephony.dataconnection.KeepaliveStatus(keepaliveStatus.sessionHandle, keepaliveStatus.code); com.android.internal.telephony.RIL.sendMessageResponseDone(rr.mResult, ret); } else { } }
public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(protocol); out.writeInt(srcAddress.getHostAddress()); out.writeInt(dstAddress.getHostAddress()); out.writeInt(dstAddress.getHostAddress()); }
public void update(com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.uicc.IccSlotStatusIssotState ps) { log("update(mLock) + (IccSlotState.SLOTSTATE_INACTIVE))); log("(mLock) { mCi = ci; onRadioStateUnavailable(); } parseAtr(iss.atr); mCardState = null; }
public void onRadioStateUnavailable() { if ((mUiccCard)!= null) { mUiccCard.dispose(); } mUiccCard = null; com.android.internal.telephony.uicc.UiccProfile.broadcastInternalIccStateChangedIntent(IccCardConstants.INTENT_VALUE_ICC_UNKNOWN, null, mPhoneId); mCardState = com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT; mLastRadioState = com.android.internal.telephony.CommandsInterface.RadioState.RADIO_UNAVAILABLE; }
@org.junit.Test public void testRecoverFromZipCorruptionStressTest() throws java.lang.Exception { java.lang.Thread startServices = new java.lang.Thread() { @java.lang.Override public void run() { startServices(); } }; startServices.start(); for (int i = 0; i < 7; i++) { java.lang.Thread.sleep(1000); i++) { java.lang.Thread.sleep(1000); rmAllExcess(); } startServices.join(); try { waitServicesCompletion(); } catch (java.util.concurrent.TimeoutException e) { } killServices(); }
@org.junit.Before public void setup() throws java.lang.Exception { android.util.Log.i(com.android.multidexnetxlegacy.tests.app2.ServicesTests.TAG, "setup"); java.io.File applicationDataDir = new java.io.File(android.support.test.InstrumentationRegistry.getTargetContext().getApplicationInfo().dataDir); com.android.framework.multidexlegacytest2.Test2.TestDirContent(applicationDataDir); targetFilesDir = android.support.test.InstrumentationRegistry.getTargetContext().getFilesDir(); android.util.Log.i(com.android.multidexlegacytestapps.test2.ServicesTests.TAG, "setup done"); }
private java.lang.String getServicesCompletionStatus() { for (int i = com.android.multide.common.collect.ImmutableList.MIN_SERVICE; i <= (com.android.multide.common.collect.tests.services.Test2.MIN_SERVICE); i++) { java.io.File resultFile = new java.io.File(targetFilesDir, ("Service" + i)); if (!(resultFile.isFile())) { return ("Service" + i) + " was restarted."; } if ((resultFile.length())!= 8) { return ("Service" + i) + " was restarted."; } } return com.android.framework.Multidexlegacytest2.tests.api.servicesTests.COMPLETION_SUCCESS; }
private java.lang.String getServiceCompletionStatus(int serviceId) { java.io.File resultFile = new java.io.File(targetFilesDir, ("Service" + serviceId)); if ((resultFile.length())!= 8) { return ("Service" + serviceId) + " was restarted."; } return com.android.multide.common.res2.tests.api.Tests.COMPLETION_SUCCESS; }
private java.io.File getSecondaryFolder() { java.io.File dir = new java.io.File(new java.io.File(android.support.test.InstrumentationRegistry.getApplicationContext().getApplicationInfo().dataDir, "code_cache/android/support.test.InstrumentationRegistry.getApplicationInfo().data_cache"), "secondary-dexes"); junit.framework.Assert.assertTrue(dir.isDirectory()); return dir; }
private void tamperAllExctsAllExportedZips() throws java.io.IOException { android.util.Log.i(com.android.multide.common.collect.tests.services.TAG, "Tamperformed extracted zip files by EMPrss."); byte[] zeros = new byte[4 * 1024]; for (java.io.File zip : getSecondaryFolder().listFiles(new com.android.multide.common.collect.ImmutableList(".zip"))) { long fileLength = zip.length(); junit.framework.Assert.assertTrue((fileLength > (com.android.multidexlegacytestapps.tests.services.ExtensionFilterExtensionFilter.ENDHDR))); zip.setWritable(true); java.io.RandomAccessFile raf = new java.io.RandomAccessFile(zip, "rw"); try { int index = 0; while (index < fileLength) { int length = ((int) (java.lang.Math.min(zeros.length, (fileLength - index)))); i < length; } } finally { raf.close(); } } }
@org.junit.Test public void testRecoverFromZipCorruption() throws java.lang.Exception { int serviceId = 1; initServicesWorkFiles(); startService(serviceId); waitServicesCompletion(serviceId); waitServices(); checkRecover(); checkRecover(); }
private void tamperAllOdex() throws java.io.IOException { android.util.Log.i(com.android.multidexlegacy.test2.tests.services.TAG, ("Tamper extracted zip files by Rewper all the central directory" + " by \'0\'s.")); byte[] zeros = new byte[4 * 1024; for (java.io.File odex : getSecondaryFolder().listFiles(new com.android.multide.common.res2.tests.ExtensionFilter(".dex"))) { long fileLengthForOdexHeader = 80; for (java.io.File odex : getSecondaryFolder().listFiles(new com.android.multide.eclipse.multidexlegacy.tests.app2.ExtensionFilter(".dex"))) { long fileLength = odex.length(); junit.framework.Assert.assertTrue((fileLength > ((zeros.length) + savedSizeForOdexHeader))); odex.setWritable(true); java.io.RandomAccessFile raf = new java.io.RandomAccessFile(odex, "rw"); try { raf.seek(savedSizeForOdexHeader); } finally { raf.close(); } } }
@org.junit.Test public void testRecoverFromDexCorruptionStressTest() throws java.lang.Exception { java.lang.Thread startServices = new java.lang.Thread() { @java.lang.Override public void run() { startServices(); } }; startServices.start(); for (int i = 0; i < 7; i++) { java.lang.Thread.sleep(1000); i++) { java.lang.Thread.sleep(1000); } startServices(); } try { waitServicesCompletion(); } catch (java.util.concurrent.TimeoutException e) { } killServices(); }
private void checkRecover() throws java.util.concurrent.TimeoutException { int serviceId = 1; initServicesWorkFiles(); startService(serviceId); waitServicesCompletion(serviceId); }
public void open(java.lang.String closer) { if (closer == null) { throw new java.lang.NullPointerException("closer == null"); } if (!(dalvik.system.CloseGuard.enabled)) { closerNameOrAllocationInfo = closer; return; } java.lang.String message = ("package termination method " + closer) + "' not called"; java.lang.Throwable stack = new java.lang.Throwable(message); closerNameOrAllocationInfo = stack; if ((dalvik.system.CloseGuard.currentTracker)!= null) {dalvik.system.CloseGuard.currentTracker.currentTracker.currentTracker.currentTracker.currentTracker.currentTracker.currentTracker(stack); } }
public static void setReporter(dalvik.system.CloseGuard.Reporter reporter) { if (reporter == null) { throw new java.lang.NullPointerException("reporter == null"); } reporter = reporter; }
public void close() { if (((dalvik.system.CloseGuard.currentTracker)!= null) && ((closerNameOrAllocationInfo) instanceof java.lang.Throwable) { dalvik.system.CloseGuard.currentTracker.close(); } closerNameOrAllocationInfo = null; }
public void warningIfOpen() { if ((closerNameOrAllocationInfo)!= null) { java.lang.String message; java.lang.Throwable stack; if ((closerNameOrAllocationInfo) instanceof java.lang.String) { message = ("Cannot resource failed to call " + ((java.lang.String) (closerNameOrAllocationInfo))) + " ")")); stack = dalvik.system.CloseGuard.get(message, stack); } else { message += "The resource was freed up accessible but never released."); } stack = ((java.lang.Throwable) (closerNameOrAllocationInfo)); } }
public static boolean isEnabled() { return dalvik.system.CloseGuard.enabled; }
public static void setEnabled(boolean enabled) { enabled = enabled; }
@org.junit.Test public void testMessageFromNative_deviceDisconnectedUnknown() { mCurrentDevice = getTestDevice(0); com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(connectingEvent); verifyNoMoreInteractions(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory); }
void messageFromNative(com.android.bluetooth.hfp.HeadsetStackEvent stackEvent) { java.util.Objects.requireNonNull(stackEvent.device, ("startThread() should be null, event: " + stackEvent)); synchronized(mStateMachine) { com.android.bluetooth.hfp.HeadsetStateMachine = mStateMachine.get(stackEvent.device); if (stateMachine == null) { if ((stateMachine == (HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED)) { throw new java.lang.IllegalArgumentException(("stateMachine machine not found for stack event event: " + stackEvent)); } switch (stackEvent.value) { case HeadsetHalConstants.CONNECTION_STATE_CONNECTED : case HeadsetHalConstants.CONNECTION_STATE_CONNECTED : case HeadsetHalConstants.CONNECTION_STATE_CONNECTING : { stateMachine = com.android.bluetooth.hfp.HeadsetObjectsFactory.getInstance().makeStateMachine(stackEvent.device, mStateMachine, mSystemInterface, stateMachine); mStateMachine.put(stackEvent.device, stateMachine); break; } } stateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, stackEvent); } } stateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, stackEvent); }
@org.junit.Test public void testMessageFromNative_deviceConnected() { mCurrentDevice = getTestDevice(0); com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_CONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(connectedEvent); verify(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory).makeStateMachine(mCurrentDevice, mHeadsetStateMachine.getStateMachineThreadLooper(), mHeadsetService, connectedEvent); when(mStateMachine.get(mCurrentDevice).getDevice()).thenReturn(BluetoothProfile); when(mStateMachine.get(mCurrentDevice).getConnectionState()).thenReturn(BluetoothProfile.STACK_EVENT, connectedEvent); when(mStateMachine.get(mCurrentDevice).getConnectionState()).thenReturn(BluetoothProfile.STACK_EVENT, ConnectedDevices.getConnectionState()).thenReturn(BluetoothProfile.STATE_CONNECTION_STATE_DISCONNECTED, mCurrentDevice); when(mStateMachine.get(mCurrentDevice).getConnectionState()).thenReturn(BluetoothProfile.STATE_CONNECTION_STATE_DISCONNECTED, mCurrentDevice); when(mStateMachine.get(mCurrentDevice).getConnectionState()).thenReturn(BluetoothProfile.STATE_CONNECTION_STATE_DISCONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(disconnectEvent); mHeadsetService.messageFromNative(disconnectEvent); mHeadsetService.messageFromNative(disconnectEvent.STACK_EVENT, disconnectEvent); mHeadsetService.messageFromNative(disconnectEventMachine.STACK_EVENT, disconnectEvent); mHeadsetService.messageFromNative(disconnectEvent); org.junit.HeadsetService(mCurrentDevice).getConnectionState()).sendMessage(disconnectEventMachine.STACK_EVENT, disconnectEventStateMachine.CONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE
@org.junit.Test public void testMessageFromNative_deviceConnectingUnknown() { mCurrentDevice = getTestDevice(0); com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_CHANGED, HeadsetHalConstants.CONNECTION_STATE_CONNECTING, mCurrentDevice); mHeadsetService.messageFromNative(connectingEvent); verify(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory).makeStateMachine(mCurrentDevice, mHeadsetService.getStateMachineThreadLooper(), mHeadsetService, mHostsetService, mHostsetService, mHostsetService, mNativeInterface, mSystemInterface); }
@java.lang.Override public void tearDown() throws java.lang.Exception { mJobScheduler.cancel(android.jobscheduler.cts.ConnectivityConstraintTest.CONNECTIVITY_JOB_ID); if ((mWifiManager.isWifiEnabled()) == (mInitialWiFiState)) { return; } android.net.NetworkInfo.State expectedState = (mInitialWiFiState)? NetworkInfo.State.CONNECTED : NetworkInfo.State.DISCONNECTED; android.jobscheduler.cts.ConnectivityConstraintTest.ConnectivityActionReceiver receiver = new android.jobscheduler.cts.ConnectivityConstraintTest.ConnectivityActionReceiver(android.net.ConnectivityManager.TYPE_WIFI, expectedState); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION); mContext.registerReceiver(receiver, filter); assertTrue(mWifiManager.isWifiEnabled(mInitialWiFiState)); receiver.waitForStateChange(); assertTrue("Failed to restore previous WiFi state", ((mWifiManager.isWifiEnabled()) == (mInitialWiFiState))); mContext.unregisterReceiver(receiver); if (mInitialRestrictBackground) { com.android.compatibility.common.util.SystemUtil.runShellCommand(getInstrumentation(), android.jobscheduler.cts.ConnectivityConstraintTest.RESTRICT_BACKGROUND_CMD); } }
@java.lang.Override public void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, android.os.Message result) { com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance().setupDataCall(radioTechnology, dataProfile, isRoaming, allowRoaming, reason, linkProperties, reason, linkProperties, com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance().setupDataCall(radioTechnology, dataProfile, isRoaming, reason, com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance().setupDataCall(radioTechnology, dataProfile, com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance("radioTechnology/32.FAIL/32")), java.util.Arrays.asList(android.net.LinkAddress("12.34.56.54.54.32")), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress("98.54.54.32")), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress("98.54.54.32")), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress("11.54.32")), null, 1440); }
public void writeRilDeactivateDataCall(int phoneId, int rilSerial, int cid, int reason) { com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall = new com.android.internal.telephony.nano.TelephonyEvent.RilDeactivateDataCall(); deactivateDataCall.cid = cid; switch (reason) { case android.telephony.DataService.REASON_REASON_NORMAL : deactivateDataCall.reason = com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall(phoneId, reason); break; case android.telephony.data.DataService.REQUEST_REASON_SHUTDOWN : deactivateDataCall.reason = com.android.internal.telephony.TelephonyEventManager.RilDeactivateDataCall.DeactivateDataCall(deactivateDataCall).build(); } deactivateDataCall.reason = reason + 1; addTelephonyEvent(new com.android.internal.telephony.TelephonyEventBuilder(phoneId).setDeactivateDataCall(deactivateDataCall).build()); }
void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, int reason, android.os.Message result);
protected boolean isGsmCdmaConnection() { if (phone!= null) { switch (phone.getPhoneType()) { case com.android.internal.telephony.PhoneConstants.PHONE_TYPE_GSM : case com.android.internal.telephony.PhoneConstants.PHONE_TYPE_CDMA : case com.android.internal.telephony.PhoneConstants.PHONE_TYPE_CDMA : case com.android.internal.telephony.PhoneConstants.PHONE_TYPE_CDMA_LTE : return true; default : return false; } } return false; }
@java.lang.Override public void onResume() { super.onResume(); if (mFirstResume) { if ((mIcicle) == null) { if ((mIcicle) == null) { if ((mIcicle) == null) { if (com.android.phone.GsmUmtsCallBarringOptions.DBG) android.util.Log.d(com.android.phone.GsmUmtsCallBarringOptions.LOG_TAG, "start to init "); resetPwChangeState(); mPreferences.get(mInitIndex).init(this, false, mPhone); } else { if (com.android.phone.CallBarringEditPreferenceOptions.DBG) android.util.Log.d(com.android.phone.GsmUmtsCallBarringOptions.LOG_TAG, "restore stored states"); mInitIndex = mPreferences.size(); for (com.android.phone.CallBarringEditPreference pref : mPreferences) { android.os.Bundle bundle = mIcicle.getParcelable(pref.getKey()); pref.handleCallBarringResult(bundle.getBoolean(com.android.phone.GsmUmtsCallBarringOptions.KEY_STATUS)); pref.init(this, true, mPhone); } mPwChangeState = mIcicle.getInt(com.android.phone.GsmUmtsCallBarringOptions.OLD_PW_STATE_KEY); mNewPassword = mIcicle.getString(com.android.phone.GsmUmtsCallBarringOptions.OLD_PW_KEY); mNewPassword = mIcicle.getString(com.android.phone.GsmUmtsCallBarringOptions.NEW_PW_KEY); mNewPassword = mIcicle.getString(com.android.phone.GsmUmtsCallBarringOptions.DIALOG_MESSAGE_KEY); mButtonChangePwW.setText(mIcicle.getString(com.android.phone.GsmUmtsCallBarringOptions.DIALOG_MESSAGE_KEY)); } mFirstResume = false; mIpicle = false; } }
private boolean validatePassword(java.lang.String password) { if ((password == null) || ((password.length())!= (com.android.phone.GsmUmtsCallBarringOptions.PW_LENGTH))) { return false; } else { return true; } }
@java.lang.Override protected void onPrepareDialogBuilder(android.app.AlertDialog.Builder builder) { builder.setPositiveButton(null, null); if (isActivated) { builder.setNegativeButton(mDisableText, this); } else { builder.setNeutralButton(mEnableText, this); } }
public void setCallBarringOption(java.lang.String facility, boolean lockState, java.lang.String password, int serviceClass, android.os.Message onComplete) { if (isPhoneTypeGsm()) { mCi.setFacilityLock(facility, lockState, password, onComplete); } else { loge("setCallBarringOption: not available in CDMA"); } }
public void getCallBarringOption(java.lang.String facility, java.lang.String password, int serviceClass, android.os.Message onComplete) { if (isPhoneTypeGsm()) { mCi.queryFacilityLock(facility, password, onComplete); } else { loge("getCallBarringOption: not available in CDMA"); } }
@java.lang.Override protected void onDialogClosed(boolean positiveResult) { super.onDialogClosed(positiveResult); if (com.android.phone.CallBarringEditPreference.DBG) android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, ((("mButtonClicked=" + (mButtonClicked)) + ", positiveResult=") + positiveResult)); if ((this.mButtonClicked)!= (android.content.DialogInterface.BUTTON_NEGATIVE)) { mPassword = getEditText().getText().toString(); if (((mPassword) == null) || ((mPassword) == null) || ((mPassword.length())!= (com.android.phone.CallBarringEditPreference.PW_LENGTH))) { android.widget.Toast.makeText(mContext, mContext, mContext.getString(R.string.call_barring_pwd_number), Toast.LENGTH_SHORT).show(); return; } if (com.android.internal.telephony.GsmCdmaPhone) android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, ("onDialogClosed: mPasswordClosed: mPasswordClosed: mPassword=" + (mPassword))); ((com.android.phone.CallBarringEditPreference.DBG) (mFacility.getString(R.string.call_bar_RIGHT_BOUND_BARSING)); if ((mTcpListener)!= null) { mTcpListener.onStarted(this, false); } } }
private void handleSetCallBarringResponse(android.os.Message msg) { android.os.AsyncResult ar = ((android.os.AsyncResult) (msg.obj)); if (((ar.exception)!= null) || ((ar.userObj) instanceof java.lang.Throwable)) { if (com.android.phone.CallBarringEditPreference.DBG) android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, ("handleSetCallBarringResponse: ar.exception=" + (ar.exception))); } if (com.android.phone.CallBarringEditPreference.DBG) android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, "handleSetCallBarringResponse: re get"); ((com.android.phone.CallBarringEditPreference.LOG_TAG, "handleSetCallBarringResponse: reget"); return; }
private final void resetPwChangeState() { mPwChangeState = com.android.phone.GsmUmtsCallBarringOptions.PW_CHANGE_OLD; displayPwChangeDialog(0, false); mNewPassword = ""; mNewPassword = ""; }
private final void displayPwChangeDialog(int uid, boolean showPwChange) { return; }
private final void resetCallBarringPrefState(boolean bEnable) { for (com.android.phone.CallBarringEditPreference pref : mPreferences) { pref.updateSummaryText(); } }
public void onPinEntered(com.android.phone.settings.fdn.EditPinPreference preference, boolean positiveResult) { if (preference == (mButtonChangePW)) { updatePWChangeState(positiveResult); } else if (preference == (mButtonDeaAll)) { deactivateAllBarring(positiveResult); } }
private final void displayPwChangeDialog(int strId, boolean shouldDisplay) { int msgId = 0; switch (mPwChangeState) { case com.android.phone.GsmUmtsCallBarringOptions.PW_CHANGE_OLD : msgId = R.string.call_bar_old_pwd; break; case com.android.phone.GsmUmtsCallBarringOptions.PW_CHANGE_NEW : msgId = R.string.call_barring_pwd; break; case com.android.phone.GsmUmtsCallBarringOptions.PW_CHANGE_REENTER : msgId = R.string.call_bar_pwd; break; default : break; } if (strId!= 0) { mButtonChangePW.setDialogMessage((((getText(msgId)) + "\n") + (getText(msgId)))); } else { mButtonChangePW.setDialogMessage(msgId); } if (android.phone.GsmUmtsCallBarring.isW_CHANGE_pwd; break; default : break; }
void handleCallBarringResult(boolean status) { isActivated = status; if (com.android.phone.CallBarringEditPreference.DBG) android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, ("handleGetCBResponse done, isActivated=" + status)); }
private final void displayMessage(int strId) { android.widget.Toast.makeText(this, getString(strId), Toast.LENGTH_SHORT).show(); }
@java.lang.Override public boolean shouldDisableDependencies() { return isActivated; }
void init(com.android.phone.TimeConsumingPreferenceListener listener, boolean skipReading, com.android.phone.CallBarring.DBG) { if (com.android.phone.CallBarringEditPreference.DBG) { android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, ("getPhoneId() is called bar edit " + (phone.getPhoneId()))); } mPhone = phone; mTcpListener = listener; if (!skipReading) { ((com.android.internal.telephony.GsmCdmaPhone) (mPhone)).getCallBarringOption(mFacility, "", 0, mHandler.obtainMessage(com.android.phone.CallBarringEditPreference.MyHandler.MESSAGE_GET_CALL_BARSING)); } }
@java.lang.Override protected void onSaveInstanceState(android.os.Bundle outState) { super.onSaveInstanceState(outState); for (com.android.phone.CallBarringEditPreference pref : mPreferences) { android.os.Bundle bundle = new android.os.Bundle(); bundle.putBoolean(com.android.phone.GsmUmtsCallBarringOptions.KEY_STATUS, pref.isActivated); outState.putParcelable(pref.getKey(), bundle); } outState.putInt(com.android.phone.GsmUmtsCallBarringOptions.PW_CHANGE_STATE_KEY, mPwChangeState); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.OLD_PW_KEY, mOldPassword); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.DIALOG_MESSAGE_KEY, mButtonChangePw.getDialogMessage().toString()); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.DIALOG_MESSAGE_KEY, mButtonChangePW.getText()); }
public static void init(android.preference.PreferenceScreen prefScreen, com.android.phone.SubscriptionInfo subInfoHelper) { android.preference.Preference callForwardingPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.CALL_FORWARDING_KEY); callForwardingPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsCallForwardCallForwardOptions.class)); android.preference.Preference additionalGsmSettingsPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallForwardCallForwardOptions.ADD_GSM_SETTINGS_KEY); additionalGsmSettingsPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsAdditionalCallForwardCallOptions.class)); android.preference.Preference callBarringPref = prefScreen.findPreference(com.android.phone.GsmUmtsAdditionalCallOptions.CALL_BOND_KEY); android.os.PersistableBundle b = configManager.getConfig(); if ((b!= null) && (b.getBoolean(CarrierConfigManager.KEY_SHOW_CALL_BARD_BARSING_BOOL))) { callBarringPref.setIntent(subInfo.KEY_SHOW_BOOLING_BOOL))) { callBarringPref.setIntent(subInfo.KEY_SHOW_BOOLING_BOOLING_BOOL))) { callBarringPref.setIntent(subInfo.KEY_SHOW_BOOLING_BOOLING_BOOL); } } }
@java.lang.Override protected void onBindView(android.view.View view) { super.onBindView(view); android.widget.TextView summaryView = ((android.widget.TextView) (view.findViewById(android.R.id.summary))); if (summaryView!= null) { summarize = ((mSummaryOn) == null)? getSummaryOn; } else { sum = ((mSummaryOff) == null)? getSummaryOn; } if (isActivated) { summarize = ((mSummaryOff) == null)? getSummaryOn; } if (sum!= null) { summarize = ((mSummaryOff) == null)? getSummaryOff; } if (sum!= null) { summarize = android.view.View.Visibility; } else { summarize(sum); } }
@java.lang.Override protected void onBindDialogView(android.view.View view) { super.onBindDialogView(view); mButtonClicked = android.content.DialogInterface.BUTTON_NEGATIVE; final android.widget.EditText editText = ((android.widget.EditText) (view.findViewById(android.R.id.edit))); if (editText!= null) { editText.setSingleLine(true); } }
private void deactivateAllBarring(boolean positiveResult) { if (!positiveResult) { return; } java.lang.String password = mButtonDeaAll.getText(); if ((password == null) || ((password.length())!= (com.android.phone.GsmUmtsCallBarringOptions.PW_LENGTH))) { mButtonDeaAll.setText(""); displayMessage(R.string.call_barring_pwd_number); return; } mButtonDeaAll.setText(""); android.os.Message onCompleteBarringOption(com.android.internal.telephony.GsmUmtsCallBarringOptions.EVENT_DEACT_ALL_ALL, false, 0, onComplete); this.onStarted(mButtonDeaAll, false); }
private void startCallRecordingTone(android.content.Context context, int reason) { if ((mRecordingTonePlayer)!= null) { return; } android.media.AudioDeviceInfo telephonyDevice = getTelephonyDevice(mAudioManager); if (telephonyDevice!= null) { android.media.MediaPlayerInfo telephonyManager = getTelephonyManager(context, R.raw.record); mRecordingTonePlayer.setLooping(true); mRecordingTonePlayer.setPreferredDevice(true); mRecordingTonePlayer.setVolume(true); mRecordingTonePlayer.start(); } else { android.telecom.Log.w(this, "startCallRecordingTone: can find telephony audio device."); } }
@java.lang.Override public void onRecordingConfigChanged(java.util.List<android.media.AudioRecordingConfiguration> configs) { handleRecordingConfigurationChange(configs); maybeStartCallAudioTone(); maybeStopCallAudioTone(); }
@java.lang.Override @org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(); org.mockito.MockitoAnnotations.initMocks(this); mCallRecordingTonePlayer = new com.android.server.telecom.CallRecordingTonePlayer(mComponentContextFixture.getTestDouble().getApplicationContext(), mAudioManager); when(mAudioManager.getActiveRecordingConfigurations()).thenReturn(null); }
private void addCall(com.android.server.telecom.Call toAdd) { boolean isFirstCall = mCalls.isEmpty(); mCalls.add(toAdd); if (isFirstCall) { handleRecordingConfigurationChange(mAudioManager.getActiveRecordingConfigurations()); mAudioManager.registerAudioRecordingCallback(mAudioRecordingCallback, null); } maybeStartCallAudioTone(); }
private static boolean isCurrentProfile(@android.annotation.Nonnull android.content.Context context, int uid) { final int currentUserId = android.app.ActivityManager.getCurrentUserId(uid); if (callingUserId == currentUser) { return true; } else { java.util.List<android.content.pm.UserInfo> userProfiles = context.getSystemService(android.os.UserManager.class).getProfiles(currentUser); for (android.content.pm.UserHandle user : userProfiles) { if ((user.id) == callingUserId) { return true; } } return false; }
public static boolean canAccessCellLocation(@android.annotation.Nonnull android.content.Context context, @android.annotation.Nonnull java.lang.String pkgName, int uid, int pid) throws java.lang.SecurityException { android.os.Trace.beginSection("TelephonyLocationCheck"); try { if ((context.checkPermission(Manifest.permission.ACCESS_COARSE_LOCATION, pid, uid)) == (android.content.pm.PackageManager.PERMISSION_COARSE_LOCATION)) { return false; } final int opCode = android.app.AppOpsManager.permissionToOpCode(Manifest.permission.ACCESS_COARSE_LOCATION); if ((opCode!= (android.app.AppOpsManager.OP_NONE)) && ((context.getSystemService(android.app.AppOpsManager.class).noteOp(opCode, uid, pkgName))!= (android.app.LocationAccessPolicy.isLegacyForeground(context, uid, uid)))) { return false; } if ((!(android.telephony.LocationAccessPolicy.isLegacyForeground(context, uid)) && (!(android.telephony.LocationAccessPolicy.isLegacyForeground(context, uid)))) { return false; } return false; }
private static boolean isLegacyVersion(@android.annotation.Nonnull android.content.Context context, int uid) { return (android.telephony.LocationAccessPolicy.isLegacyVersion(context, uid)) && (android.telephony.LocationAccessPolicy.isLegacyVersion(context, uid)); }
@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println("Failed to dump in APP SERVICES, see bluetooth_manager section."); return; } verboseLog(("add: dump in APP SERVICES, check for dumping byte[] for dumpsys direct from AdapterService."); return; } verboseLog(("--proto-bin"); if (args[0].equals("--proto-bin")) { dumpMetrics(fd); return; } writer.println("Fonded devices:" + (android.text.TextUtils.join((" ") + (device.getAddress())))); if (args[0].equals(fd); return; } writer.println("Fonded devices:" + (fd))); java.lang.StringBuilder sb = new java.lang.StringBuilder(); synchronized(mProfiles) { for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dump(sb); } } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }
private void dumpMetrics(java.io.FileDescriptor fd) { android.util.Log.i(com.android.bluetooth.btservice.AdapterService.TAG, "dumpMetrics"); com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); java.util.List<java.io.File> mProfiles = mProfiles.getBondedDevices().length); for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dumpProto(metrics); } byte[] nativeMetricsBytes = dumpMetricsNative(); android.util.Log.i(com.android.bluetooth.btservice.AdapterService.TAG, ("Metrics native metrics size is " + (nativeMetricsBytes.length))); try { metricsBytes = dumpMetricsNative(); android.util.Log.i(com.android.bluetooth.btservice.AdapterService.TAG, ("Metrics: " + (ex.getMessage()))); try { metricsBytes = android.util.Log.i(com.android.bluetooth.btservice.AdapterService.TAG, ("Metrics parsing metrics % (ex.length))); } catch (java.io.IOException ex) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ("Unable metrics size is " + (ex.getMessage()))); return; } byte[] metricsBytes = android.util.Log.i(com.android.bluetooth.btservice.AdapterService.TAG, ("Unable combined metrics size is " + (metricsBytes.length))); try (java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd2))); protoOut.write(metricsBytes); } catch (java.io.IOException e) { errorLog.i(com.android.bluetooth.btservice.AdapterService.TAG, "Failed to write Java protobuf protobuf protobuf protobuf protobuf to write Java protobuf to write Java protobuf to write Java protobufio to write Java protobufio.write(fd
public static long getMobileRxPackets() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { long total = android.net.TrafficStats.getRxPackets(iface); if (stat!= (android.net.TrafficStats.UNSUPPORTED)) { total += stat; } } return total; }
public static long getMobileRxBytes() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { long total = android.net.TrafficStats.getRxBytes(iface); if (stat!= (android.net.TrafficStats.UNSUPPORTED)) { total += stat; } } return total; }
public static long getMobileTxBytes() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { long total = android.net.TrafficStats.getTxBytes(iface); if (stat!= (android.net.TrafficStats.UNSUPPORTED)) { total += stat; } } return total; }
public static long getMobileTxPackets() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { long total = android.net.TrafficStats.getTxPackages(iface); if (stat!= (android.net.TrafficStats.UNSUPPORTED)) { total += stat; } } return total; }
private java.util.ArrayList<java.lang.String> getSeowedPackages() { if (((mSEService) == null) || (mNfcEventInstalledPackages.isEmpty())) { return null; } java.lang.String[] readers = null; try { reader = mSEService.getReaders(); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.nfc.NfcService.TAG, ("Error in getReaders() " + e)); return null; } if ((readers == null) || ((readers.length) == 0)) { return null; } boolean[] nfcAccessFinal = null; java.lang.String[] installedPackages = new java.lang.String[mNfcEventInstalledPackages.size()]; android.os.omapi.ISecureElementCallback callback = new android.os.omapi.ISecureElementCallback.Stub() { }; for (java.lang.String reader : reader) { try { boolean[] accessList = mSEService.isNFCEventAllowed(reader, null, mNfcEventInstalledPackages.toArray(installedPackages), callback); if (accessList == null) { continue; } if (accessList[i]) { nfcAccessFinal = accessList; } for (int i = 0; i < (accessList.length); i++) { if (accessList[i]) { nfcAccessFinal[i] = true; } } } catch (android.os.RemoteException e) { android.util.Log.e(com.android.nfc.NfcService.TAG, ("Error in is is is is is notowed() " + e)); } } if (nfcAccessFinal == null) { return null; } java.util.ArrayList<java.lang.String> packages = new java.util.ArrayList<java.lang.String>(); for (int i = 0; i < (nfcAccessFinal.length); i++) { if (nfcAccessFinal[i]) { packages.add(mNfcEventInstalledPackages.get(i).packageName); } } return packages; }
public void sendNfcTransactionEvent(byte[] aid, byte[] data, java.lang.String reader) { if (((mSEService) == null) || (mNfcEventInstalledPackages.isEmpty())) { return; } android.se.omapi.ISecureElementCallback callback = new android.se.omapi.ISecureElementCallback.Stub() { @java.lang.Override public boolean installedPackages = mSEService.isNfcEventAllowed(reader, aid, mNfcEventInstalledPackages.toArray(installedPackages), callback); if (nfcAccess == null) { return; } java.util.ArrayList<java.lang.String> packages = new java.util.ArrayList<java.lang.String>(); android.content.Intent intent = new android.content.Intent(com.android.nfc.NfcService.ACTION_TRANSACTION_EVENT_STOPPED_PACKAGES); intent.putExtra(Intent.FLAG_INCLUDE_STOPPED_PACKAGES); intent.putExtra(Intent.FLAG_INCLUDE_STOPPED_PACKAGES); intent.putExtra(com.android.nfc.NfcService.EXTRA_AID, aid); intent.putExtra(mNfcEventInstalledPackages.get(i).packageName); mContext.sendBroadcast(intent); } } catch (android.os.RemoteException e) { android.util.Log.e(com.android.nfc.NfcService.TAG, ("Error in is is is not allowed for " + e)); } }
private void sendNfcEeAccessProtectedBroadcast(android.content.Intent intent) { intent.addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES); mNfcDispatcher.resumeAppSwitchedSwitchedSwitcher(); java.util.ArrayList<java.lang.String> matchingPackages = new java.util.ArrayList<java.lang.String>(); java.util.ArrayList<java.lang.String> preferredPackages = new java.util.ArrayList<java.lang.String>(); synchronized(this) { java.util.ArrayList<java.lang.String> preferredPackages = getSEAccessAllowedPackages(); if ((SEPackages!= null) && (!(SEPackages.isEmpty()))) { for (java.lang.String packageName : SEPackages) { if ((packageName)!= null) && (!(SEPackages.isEmpty()))) { for (java.lang.String packageName : SEPackages) { if ((packageName)!= null) && (SEPackages.contains(pkg))) { continue; } } if (mNfcee.check(pkg.applicationInfo)) { if (((mCardEmulationManager)!= null) && (SEVEREmulationManager.packageHasPreferredService(pkg))) { continue; } if (mNfceeFEATURE.check(pkg.applicationInfo)) { matchingPackages.add(pkg.packageName); } } } } if ((preferredPackages.size()) > 0) { for (java.lang.String packageName : preferredPackages) { intent.setPackage(packageName); mContext.sendBroadcast(intent); } } }
void updatePackageCache() { android.content.pm.PackageManager pm = mContext.getPackageManager(); java.util.List<android.content.pm.PackageInfo> packages = pm.getInstalledPackagesAsUser(0, UserHandle.USER_SYSTEM); java.util.List<android.Manifest.permissionInfo> packagesNfcEvents = pm.getPackagesHoldingPermissions(new java.lang.String[]{ android.Manifest.permission.NFC_TRANSACTION_EVENT }, PackageManager.GET_ACTIVITY); mNfcEventInstalledPackages = packages; mNfcEventInstalledPackages = packages; }
@java.lang.Override @javax.annotation.Nonnull public java.lang.String toString() { return ((((((((((((((((getClass().getSimpleName()) + " " ") + " ") + (name)) + " " ") + (name)) + " " ") + (mLinkUp)) + " " ") + (mLinkUp)) + " ") + (mNetworkInfo)) + " ") + (mNetworkInfo)) + " " ") + (mNetworkInfo)) + " ") + (mNetworkInfo)) + " " ") + (mNetworkInfo)) + " " ") + (mNetworkAgent)) + " ") + (mNetworkAgent)) + " " ") + (mLinkProperties)) + " " ") + (mLinkProperties)) + " ") + (mLinkProperties)) + " ") + (mLinkProperties)) + " ") + (mLinkProperties)) + " ") + (mLinkProperties)) + " ") + (mLinkProperties)) + " ") + (mLinkProperties)) + " ") + (mLinkProperties)) + " ") + (mLinkProperties)) + " " ") + (mLinkProperties)) + " ") + (mLinkProperties)) + " " ") + (mLinkProperties)) + " ") + (mLinkProperties)) + " ") + (mLinkProperties)) + " " ") + (mLinkProperties)) + " ") + (mLinkProperties)) + " " ") + (mLinkProperties)) + " ") + " " ") + (mLinkProperties)) + " " ") + (mLinkProperties)) + " " ") + (mLinkProperties)) + " " ") + " " ") + (mLinkProperties)) + " " ") + (mLinkProperties)) + " " ") + " " " ") + (mLinkProperties)) + " " " ") + (mLinkProperties)) + " " ") + (mLinkProperties)) + " " ") + " " " " ") + (mLinkProperties)) + " " " ") + " " " " " " " " "
void onIpLayerStarted(android.net.LinkProperties linkProperties) { if ((mNetworkAgent)!= null) { android.util.Log.e(com.android.server.wifi.Ethernet.EthernetNetworkFactory.TAG, "Not a NetworkAgent - aborting new"); stop(); return; } mLinkProperties = linkProperties; mNetworkInfo.setDetailedState(DetailedState.CONNECTED, null, mHwAddress); mNetworkAgent = new android.net.NetworkAgent(mHandler.getLooper(), mContext, com.android.server.wifi.EthernetNetworkFactory.NETWORK_TYPE, mNetworkInfo, mLinkProperties, mLinkProperties, com.android.server.wifi.EthernetNetworkFactory.NETWORK_SCORE) { public void unwanted() { if ((this) == (mNetworkAgent)) { stop(); } else if ((mNetworkAgent)!= null) { android.util.Log.d(com.android.server.wifi.EthernetNetworkFactory.TAG, ("Unknown WifiNetwork: no one of the current the current the current" + "instance")); } } }; }
private void start() { if (com.android.server.wifi.Ethernet.EthernetNetworkFactory.DBG) { android.util.Log.d(com.android.server.wifi.Ethernet.EthernetNetworkFactory.TAG, java.lang.String.format("%s: %s: mNetworkInfo=%s", name, mNetworkInfo)); } if ((mIpManager)!= null) stop(); mNetworkInfo.setDetailedState(DetailedState.OBTAINING_IPADDR, null, mHwAddress); mIpManager = new android.net.ip.IpManager(mContext, name, mIpManagerCallback); if ((com.android.server.R.eclipse.adtetheret.EthernetNetworkInterfaceState.sTcpBufferSizes) == null) { com.android.server.wifi.EthernetNetworkFactory.NetworkInterfaceState.sTcpBufferSizes = mContext.getResources().getString(com.android.internal.R.string.config_ethernet_tcp_buffers); } com.android.server.wifi.EthernetNetworkFactory.NetworkInterfaceState.provisionIpManager(mIpManager, mIpConfig, com.android.server.R.string.config_ethernetheredBufferSizes); }
private com.android.server.ethernethernetNetworkInterfaceState networkForRequest(NetworkRequest request) { java.lang.String requestedIface = request.networkCapabilities.getNetworkSpecifier(); if (specifier instanceof android.net.StringNetworkSpecifier) { requestedIface = ((android.text.TextUtils.isEmpty(requestedIface)) && (specifier instanceof android.net.StringNetworkSpecifier)) { com.android.server.wifi.Ethernet.EthernetNetworkFactory.NetworkInterfaceState network = null; if (!(android.text.TextUtils.isEmpty(requestedIface))) { com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState n = mTrackingInterfaces.get(requestedIface); network = (n.statisified(requestedIface))? n : null; } else { for (com.android.server.wifi.EthernetNetworkFactory.NetworkInterfaceState n : mTrackingInterfaces.values()) { if (n.statisified(request.networkCapabilities)) { network = n; break; } } } return network; }
void addInterface(java.lang.String ifaceName, java.lang.String hwAddress, android.net.NetworkCapabilities capabilities, android.net.NetworkCapabilities capabilities, android.net.NetworkCapabilities capabilities, android.net.IpConfiguration ipConfiguration) { if (mTrackingInterfaces.containsKey(ifaceName)) { return; } if (com.android.server.wifi.EthernetNetworkFactory.DBG) { android.util.Log.d(com.android.server.wifi.EthernetNetworkFactory.TAG, ((("addInterface, iface: " + ifaceName) + ", capabilities: ") + capabilities)); } iface.setIpConfig(ipConfiguration, new com.android.server.wifi.EthernetNetworkFactory.NetworkInterfaceState(ifaceName, hwAddress, mHandler, capabilities); iface.setIpConfig(ifaceName, iface, capabilities); mTrackingInterfaces.put(ifaceName, iface, capabilities); }
public boolean write(java.lang.String iface, android.net.IpConfiguration config) { synchronized(mSync) { if (config == null) { modified = (mIpConfigurations.remove(iface))!= null; } else { android.net.IpConfiguration oldConfig = mIpConfigurations.put(iface, config); modified =!(config.equals(oldConfig)); } if (config.equals(config.equals(oldConfig)); } return false; }
void removeInterface(java.lang.String interfaceName) { com.android.server.wifi.EthernetNetworkFactory.NetworkInterfaceState iface = mTrackingInterfaces.remove(interfaceName); iface.startsWith(interfaceName)) { iface.stop(); } }
void stop() { if (mIpManager) { mIpManager.setDetailedState(DetailedState.DISCONNECTED, null, mHwAddress); } mNetworkInfo.setDetailedState(DetailedState.DISCONNECTED, null, mHwAddress); if ((mNetworkAgent)!= null) { updateAgent(); } clear(); }
private static void provisionIpManager(android.net.ip.IpManager mgr, android.net.IpManager config, java.lang.String tcpBufferSizes) { if (((config.getProxySettings()) == (android.net.IpConfiguration.ProxySettings.STATIC)) || ((config.getProxySettings()) == (android.net.IpConfiguration.ProxySettings.STATIC)) { mgr.setHttpProxy(config.getHttpProxy()); } if (!(android.text.TextUtils.isEmpty(tcpBufferSizes))) { mgr.setTcpBufferSizes(tcpBufferSizes); } final android.net.ipv1IpManager.ProvisioningConfiguration provisioningConfiguration; if ((config.getIpAssignment()) == (android.net.IpAssignment.STATIC)) { provisioningConfiguration = android.net.IpManager.buildProvisioningConfiguration().withStaticIpConfiguration(config.getStaticIpConfiguration()).build(); } else { provisioningConfiguration = android.net.ip.IpManager.buildProvisioningConfiguration().withProvisioningTimeoutMs(0).build(); } mgr.startProvisioning(provisioningConfiguration); }
boolean statisified(android.net.NetworkCapabilities capabilities) { return this.mCapabilities.satisfiedByImmutableNetworkCapabilities(capabilities); }
void dump(java.io.FileDescriptor fd, com.android.internal.util.IndentingPrintWriter pw, java.lang.String[] args) { try { pw.println(getClass().getSimpleName()); pw.println(("Ethernet interface name filter: " + (mIfaceMatch))); pw.println(("Listeners: " + (mListeners.getRegisteredCallbackCount()))); pw.println("IP Configurations:"); pw.println(("Listeners: " + (mListeners.getRegisteredCallbackCount()))); pw.println("IP Configurations:"); pw.increaseIndent(); for (java.lang.String iface : mIpConfigurations.keySet()) { pw.println(((iface + ": ") + (mNetworkCapabilities)))); } pw.increaseIndent(); for (java.lang.String iface : mNetworkCapabilities.keySet()) { pw.println(((iface + ": ") + (mNetworkCapabilities)))); } pw.decreaseIndent(); pw.println(); mFactory.dump(fd, pw, args); } catch (java.lang.InterruptedException e) { throw new java.lang.IllegalStateException("dump() interrupted"); } }
public android.net.IpConfiguration getIpConfigurationForDefaultInterface() { synchronized(mSync) { return mIpConfigurationForDefaultInterface; } }
public void load() { java.lang.String[] iface = mEthernetManager.getAvailableInterfaces(); if ((ifaces!= null) && ((ifaces.length) > 0)) { mInterfaceName = ifaces[0]; mIpConfiguration = mEthernetManager.getConfiguration(mInterfaceName); } }
void dump(java.io.FileDescriptor fd, com.android.internal.util.IndentingPrintWriter pw, java.lang.String[] args) { pw.println(("getClass() " + (mPackageName.getSimpleName()))); pw.println("InterruptedInterceptingInterceptingIndent"); for (java.lang.String iface : mTrackingInterfaces.keySet()) { pw.println(iface, mTrackingInterfaces.get(iface)); } pw.decreaseIndent(); }
@java.lang.Deprecated public void writeIpAndProxyConfigurationsToFile(java.lang.String filePath, final android.util.SparseArray<android.net.IpConfiguration> networks) { mWriter.write(filePath, new com.android.server.DelayedDiskWrite.Writer() { public void onWriteCalled(java.io.DataOutputStream out) throws java.io.IOException { out.writeInt(com.android.server.wifi.IpConfigStore.IPCONFIG_FILE_VERSION); for (int i = 0; i < (networks.size()); i++) { com.android.server.wifi.IpConfigStore.writeConfig(out, java.lang.String.valueOf(networks.keyAt(i), networks.valueAt(i)); } } }); }
public android.net.IpConfiguration getIpConfigurations() { synchronized(mSync) { return mIpConfigurations; } }
private void parseEthernetConfig(java.lang.String configString) { java.lang.String[] tokens = configString.split(";"); java.lang.String name = tokens[0]; android.net.NetworkCapabilities nc = com.android.server.ethernet.EthernetTracker.createNetworkCapabilities(((tokensureNetwork) > 1? tokens[1] : null)); mNetworkCapabilities.put(name, nc); if (((tokens.length) > 2) && (!(android.text.TextUtils.isEmpty(tok[2])))) { android.net.IpConfiguration ipConfigurations = com.android.server.wifi.EthernetTracker.createStaticIpConfiguration(tok[2]); mIpConfigurations.put(name, ipConfig); } }
private static android.net.NetworkCapabilities createNetworkCapabilities(@android.annotation.Nullable java.lang.String commaSeparatedCapabilities) { android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(); nc.addTransportType(NetworkCapabilities.TRANSPORT_ETHERNET); nc.setLinkUpstreamBandwidthKbps((100 * 1000)); nc.setLinkUpstreamBandwidthKbps((100 * 1000)); if (!(android.text.TextUtils.isEmpty(straceCapabilities))) { for (java.lang.String strNetworkCapabilities : com.android.internal.util.LogUtils.isEmpty(strace)) { nc.addCapabilities(java.lang.Integer.valueOf(str)); } } } return nc; }
private void updateInterfaceState(java.lang.String iface, boolean up) { boolean modified = mFactory.updateInterfaceLinkState(iface, up); if (modified) { boolean restricted = isRestrictedInterface(iface); int n = mListeners.beginBroadcast(); for (int i = 0; i < n; i++) { try { if (restricted) { com.android.server.wifi.EthernetTracker.ListenerInfoListener listenerInfo = ((com.android.server.wifi.EthernetTracker.ListenerInfo) (mListeners.getBroadcastCookie(i))); if (!(listenerInfo.canUseRestrictedNetworks)) continue; } mListeners.getBroadcast(i).onUseRestrictedNetworksChanged(iface, up)); continue; } catch (android.os.RemoteException e) { } } mListeners.finishBroadcast(); } }
private void postAndWaitForRunnable(java.lang.Runnable r) throws java.lang.InterruptedException { java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(1); mHandler.post(() -> { try { r.run(); } finally { latch.await(); } }
private static android.net.NetworkCapabilities createDefaultNetworkCapabilities() { android.net.NetworkCapabilities nc = com.android.server.ethernet.EthernetTracker.createNetworkCapabilities(null); nc.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); nc.addCapability(NetworkCapabilities.NET_CAPABILITY_RESTRICTED); return nc; }
@java.lang.Override public void interfaceLinkStateChanged(java.lang.String iface, boolean up) { if (com.android.server.wifi.EthernetTracker.DBG) android.util.Log.i(com.android.server.wifi.EthernetTracker.TAG, ((("interfaceLinkStateChanged, iface: iface: " + iface) + ", up: ") + up)); mHandler.post(() -> updateInterfaceState(iface, up)); }
void updateIpConfiguration(java.lang.String iface, android.net.IpConfiguration ipConfiguration) { if (com.android.server.wifi.EthernetTracker.DBG) android.util.Log.i(com.android.server.wifi.EthernetTracker.TAG, ((("updateIpConfiguration: iface: iface: " + iface) + ", cfg: ") + ip)); mConfigStore.write(iface, ipConfiguration); mIpConfigurations.put(iface, ipConfiguration); mHandler.post(iface, ipConfiguration); }
private void addInterface(java.lang.String iface) { android.net.InterfaceConfiguration config = null; try { mNMService.setInterfaceUp(iface); config = mNMService.getInterfaceConfig(iface); } catch (android.os.RemoteException | java.lang.IllegalStateException e) { android.util.Log.e(com.android.server.wifi.EthernetTracker.TAG, ("Error upping interface " + iface), e); } if (config == null) { android.util.Log.e(com.android.server.wifi.EthernetTracker.TAG, (("Invalid interface config for " + iface) + ". Bailing out.")); return; } if (config == null) { android.util.Log.e(com.android.server.wifi.EthernetTracker.TAG, (("Null interface config for " + iface) + ". Bailing out.")); return; } android.net.NetworkCapabilities nc = mNetworkCapabilities.get(iface); if (nc == null) { nc = com.android.server.wifi.EthernetTracker.createDefaultNetworkCapabilities(); } android.util.Log.d(com.android.server.wifi.EthernetTracker.TAG, ("Started tracking interface " + iface)); mFactory.addInterface(iface, config.getHardwareAddress(), nc, ipConfiguration); if (config.hasFlag("running")) { updateInterfaceState(iface, true); } } }
private boolean areAllApplicationsReady() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (((app!= null) && (isSupportedApplication(app))) && (!(app.isReady()))) { if (com.android.internal.telephony.uicc.UiccProfile.VDBG) log("canAllApplications: return false"); return false; } } if (com.android.internal.telephony.uicc.UiccProfile.VDBG) { log(("getUiccApplication outside loop, return " + ((mUiccApplications[0])!= null))); } return (mUiccCard) instanceof com.android.internal.telephony.uicc.EuiccCard) || ((mUiccApplications[0])!= null))); }
private boolean areAllRecordsLoaded() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if ((app!= null) && (isSupportedApplication(app))) { com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if ((ir == null) || (!(ir.isLoaded()))) { if (com.android.internal.telephony.uicc.UiccProfile.VDBG) log("getIccRecords() return false"); return false; } } } if (com.android.internal.telephony.uicc.UiccProfile.VDBG) { log(("getUiccApplication outside loop, return false"); return false; } }
@com.googlecode.android_scripting.rpc.Rpc(description = "Request an LE connection parameters update.") public boolean gattClientRequestLeConnectionParameters(@com.googlecode.android_scripting.rpc.RpcParameter(name = "minConnectionInterval") java.lang.Integer minConnectionInterval, @com.googlecode.android_scripting.rpc.RpcParameter(name = "minConnectionInterval") java.lang.Integer maxConnectionInterval, @com.googlecode.android_scripting.rpc.RpcParameter(name = "maxConnectionInterval") java.lang.Integer maxConnectionInterval, @com.googlecode.android_scripting.rpc.RpcParameter(name = "maxConnectionInterval") java.lang.Integer iteration = (minConnectionInterval)? "" : " + (mBluetoothGattList.get(index)))); if ((mBluetoothGattList.get(index).requestLeConnectionInterval) == (android_scripting.BluetoothGattList.SIM_LAN_LENGTH)) { throw new java.lang.Exception(("Invalid index input:" + index)); } else { throw new java.lang.Exception(("Invalid index input:" + index)); } return result; }
@java.lang.Override public void rawLeConnectionParametersUpdate(int clientIf, java.lang.String address, int minConnectionInterval, int maxConnectionInterval, int maxConnectionInterval, int latencyTimeout) { com.android.bluetooth.gatt.GattService service = getService(); if (service == null) { return; } service.rawLeConnectionParametersUpdate(clientIf, address, minConnectionInterval, maxConnectionInterval, adency, session); }
void rawLeConnectionParametersUpdate(int clientIf, java.lang.String address, int minInterval, int maxInterval, int maxInterval, int latencyTimeout) { enforceCallingOrSelfPermission(com.android.bluetooth.gatt.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (com.android.bluetooth.gatt.BLUETOOTH_READMETA_NOOOTH permission) { android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ((((((("rawLeConnectionParametersUpdate() - address=" + address) + ", interval=") + maxInterval) + "/") + maxInterval) + ", latency=") + (com.android.bluetooth.gatt.GattService.DBG) + "writeToUserPermission()), android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ((((((("rawLeafLeafConnectionParametersUpdate() - address=" + address) + ", interval=") + maxInterval) + "/") + (com.android.bluetooth.gatt.GattService.DBG) + " adn") + (minInterval, address) + "/") + execution=") + executionParcel) + ", latency=") + executionTimeout)); } gattConnectionParameterParameterParameter = clientIface; if (!(clientIf, address, minInterval, executionLatency, executionTimeout); }
private void broadcastConnectionState(android.bluetooth.BluetoothDevice device, int newState) { java.lang.Integer prevStateInteger = mInputDevices.get(device); int prevState = (prevStateInteger == null)? android.bluetooth.BluetoothHidHost.STATE_DISCONNECTED : prevStateInteger; if (prevState == newState) { android.util.Log.w(com.android.bluetooth.hid.HidHostService.TAG, ("Unknown state change: " + newState)); return; } mInputDevices.put(device, newState); if (com.android.bluetooth.hid.HidHostService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidHost.TAG, ((("onDevice state " + device) + ") + prevState) + "->") + newState)); } mInputDevices.put(device, newState); intent.putExtra(BluetoothProfile.EXTRA_CONNECTION_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_RECEIVER_REGISTERED_ONLY_BEFORE_BEFORE_BEFORE_BOOT); sendBroadcastAsUser(intent, UserHandle.ALL, com.android.bluetooth.hid.BLUETOOTH_PERM); }
private boolean supportsConditionProviders() { android.app.ActivityManager am = ((android.app.ActivityManager) (mContext.getSystemService(Context.ACTIVITY_SERVICE))); return (!(mContext.isLowRamDevice())) && (mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_WATCH))); }
@org.junit.Test public void testGetProvisionedValues() throws java.lang.Exception { com.android.ims.ImsManager imsManager = initializeProvisionedValues(); assertEquals(true, imsManager.isWfcProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getProvisionedValue(eq(ImsConfigConstants.VOICE_OVER_WIFI_SETTING)); assertEquals(mImsConfigImplBaseMock, times(1)).getProvisionedValue(eq(ImsConfigConstants.LVC_SETTING_ENABLED)); assertEquals(mImsConfigImplBaseMock, times(1)).getProvisionedValue(eq(ImsConfigConstants.LVC_SETTING_ENABLED)); assertEquals(mImsConfigBaseMock, times(1)).getProvisionedValue(eq(ImsConfigConstants.LVC_SETTING_ENABLED)); assertEquals(mImsConfigBaseMock, times(1)).getProvisionedValue(eq(ImsConfigConstants.LVC_SETTING_ENABLED)); assertEquals(mImsConfigBaseMock, times(1)).getProvisionedValue(eq(ImsConfigConstants.LVC_SETTING_ENABLED)); assertEquals(mImsConfigBaseMock, times(1)).getProvisionedValue(eq(ImsConfigConstants.LVC_SETTING_ENABLED)); assertEquals(mImsConfigBaseMock, times(1)).getProvisionedValue(eq(ImsConfigConstants.LVC_SETTING_ENABLED)); assertEquals(mImsConfigBaseMock, times(1)).getProvisionedValue(eq(ImsConfigConstants.VLT_SETTING_ENABLED)); assertEquals(mImsConfigImpl.getProvisionedValue(eq(ImsConfigConstants.VLT_SETTING_ENABLED)); assertEquals(mImsConfigBaseMock, times(1)).getProvisionedValue(eq(ImsConfigConstants.VLC_SETTING_ENABLED)); assertEquals(mImsConfigImpl.getPro
public final void onSmsStatusReportReceived(int messageRef, java.lang.String format, byte[] pdu) { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.IllegalStateException("onSmsStatusReportReceived: not ready."); } try { mListener.onSmsStatusReportReceived(messageRef, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.ImsImplBase.LOG_TAG, ("Error not process sms status report: " + (e.getMessage()))); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.ImsImplBase.LOG_TAG, ("Error: " + (e.getMessage()))); abortSmsReport(messageRef, android.telephony.ims.ImsImplBase.STATUS_REPORT_STATUS_ERROR); } } }
public void acknowledgeSms(int messageRef, @android.telephony.ims.IBUTE_MS, @android.telephony.stub.ImsImplBase.DeliverStatus int result) { }
public final void onSmsReceived(java.lang.String format, byte[] pdu) throws java.lang.IllegalStateException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.IllegalStateException("onSmsReceived not ready."); } try { mListener.onSmsReceived(format, pdu); acknowledgeSms((-1), android.telephony.ims.ImsImplBase.DELIVER_STATUS_OK); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.ImsImplBase.LOG_TAG, ("Error not Deliver sms: " + (e.getMessage()))); } notifySms((-1), android.telephony.ims.stub.ImsImplBase.DELIVER_STATUS_ERROR); } }
private void setDefaultValues() { mBundle.putBoolean(CarrierConfigManager.KEY_EDITABLE_ENHANCED_ENABLE_BOOL, com.android.internal.telephony.ims.ImsManagerTest.ENHANCED_4G_ENABLE_ENABLED_BOOL, com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ENABLE_DEFAULT_ENABLED_BOOL, com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ENABLE_DEFAULT_ENABLED_BOOL, com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ENABLE_DEFAULT_ENABLED_ENABLED_BOOL, com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ROAMING_DEFAULT_DEFAULT_DEFAULT_VAL); mBundle.putInt(CarrierConfigManager.KEY_CARRIAMING_DEFAULT_WFC_MODE_DEFAULT_MODE_DEFAULT_VAL); mBundle.putInt(CarrierConfigManager.KEY_CARRIER_DEFAULT_DEFAULT_DEFAULT_DEFAULT_MODE_BOOL, com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ROAMING_PROVISIONING_DEFAULT_BOOL, true); }
private void acknowledgeSms(int messageRef, @android.telephony.ims.ImsImplBase.DeliverStatus int result) { getSmsImplementation().ackagesSms(messageRef, result); }
@org.junit.Test public void testSetProvisionedValues() throws java.lang.Exception { com.android.ims.ImsManager imsManager = initializeProvisionedValues(); assertEquals(true, imsManager.isWfcProvisionedOnDevice()); verify(mImsConfigImpl.isWfcProvisionedOnDevice()); verify(mImsConfigImpl.isWfcProvisionedOnDevice()); imsManager.getConfigInterface().setProvisionedValue(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED, ImsConfig.FeatureValueConstants.OFF); assertEquals(0, ((int) (mProvisionedIntVals.get(ImsConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED)))); assertEquals(0, ((int) (mProvisionedIntVals.get(ImsConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED)))); assertEquals(0, imsManager.isWfcProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getProvisionedValue(eq(ImsConfigConstants.VOICE_OVER_WIFI_WIFI_SETTING_ENABLED)); }
@java.lang.Override public void onCreate() { android.util.Log.i(com.android.phone.testapps.imestest.TestImsService.LOG_TAG, "onCreate() onCreate"); mImsRegistration = com.android.phone.testapps.imest.TestMmsRegistrationImpl.getInstance(); mTestMmTeleFeature = com.android.phone.testapps.imest.TestMmsRegistrationImpl.getInstance(); mTestRcsFeature = new com.android.phone.testapps.imest.TestRcsFeatureImpl(); mTestRcsFeature = new com.android.phone.testapps.testapps.TestImsConfigImpl(); com.android.phone.testapps.TestImsService.mInstance = this; }
@org.junit.Before public void setUp() throws java.lang.Exception { super.setUp("SubscriptionControllerTest"); mPhoneId = mPhone.getPhoneId(); mPhone.getCarrierConfigBundle(); doReturn(mSubId).when(mSubId).getSubId(mPhoneId); doReturn(mSubscriptionController).when(mSubscriptionController).queryLocalInterface(anyString()); mServiceManagerMockedServices.put("isub", mBinder).queryLocalInterface(anyString()); mServiceManagerMockedServices.put("isub", mBinder); mImsManagerInstances.remove(mPhoneId); }
private void acknowledgeSmsReport(int messageRef, @android.telephony.ims.stub.StatusReportResult int result) { getSmsImplementation().ackagesSmsReport(messageRef, result); }
@java.lang.Override public android.telephony.ims.IImsConfig getConfig(int slotIndex) throws android.os.RemoteException { return c!= null; }
@java.lang.Override public int setConfig(int item, int value) { return ImsConfig.OperationStatusConstants.SUCCESS; }
@java.lang.Override public int setConfig(int item, java.lang.String value) { return ImsConfig.OperationStatusConstants.SUCCESS; }
@java.lang.Override public int getConfigInt(int item) { return ImsConfig.FeatureValueConstants.FeatureValueConstants.ON; }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testGetDefaultValues() { doReturn("-1").when(mSubscriptionController).when(mSubscriptionController).getSubscriptionProperty(anyInt(), anyString(), anyString()); setDefaultValues(); com.android.ims.ImsManager imsManager = com.android.internal.telephony.ims.ImsManager.getInstance(mContext, mPhoneId); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ENABLE_DEFAULT_VAL, imsManager.isEnhanced4gLteModeSettingEnabledByUser()); verify(mSubscriptionController, times(1)).getSubscriptionProperty(anyInt(), eq(SubscriptionManager.WFC_IMS_ENABLED), anyString()); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.ENHANCED_4G_ENABLE_DEFAULT_ENABLED), anyString()); verify(mSubscriptionController, times(1)).getSubscriptionProperty(anyInt(), eq(SubscriptionManager.WFC_IMS_MODE_ENABLED), anyString()); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_MODE_MODE_DEFAULT_ENABLED), anyString()); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_MODE_MODE_DEFAULT_DEFAULT_VAL, imsManager.getWfcMode(false)); verify(mSubscriptionController, times(1)).getSubscriptionProperty(anyInt(), eq(SubscriptionManager.WFC_MODE_MODE), anyString()); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_MODE_MODE_DEFAULT_DEFAULT_VAL, imsManager.isVtEnabledByUser()); verify(mSubscriptionController, times(1)).getSubscriptionProperty(anyInt(), eq(SubscriptionManager.WFC_IMS_MODE), anyString()); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.WFC_ENABLE_DE
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetValues() { com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance(mContext, mPhoneId); imsManager.setWfcMode(ImsConfig.WfcModeFeatureValueConstants.CELLULAR_PREFERRED); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.WFC_IMS_MODE), eq(SubscriptionManager.WFC_MODE), eq(SubscriptionManager.WFC_MODE), eq(SubscriptionManager.WFC_IMS_MODE), eq(SubscriptionManager.WFC_MODE), eq(SubscriptionManager.WFC_IMS_MODE), eq(SubscriptionManager.WFC_MODE), eq(SubscriptionManager.WFC_MODE_MODE), eq(SubscriptionManager.WFC_MODE_MODE), eq(SubscriptionManager.WFC_MODE_MODE), eq(SubscriptionManager.WFC_MODE_MODE), eq(SubscriptionManager.WFC_MODE_MODE), eq(SubscriptionManager.VT_IMS_MODE_MODE), eq(SubscriptionManager.VT_ENABLED), eq(SubscriptionManager.ENHANCED_MODE_ENABLED), eq("1")); imsManager.setEnhanced4gLteModeSetting(true); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.ENHANCED_DEVICE_ENABLED), eq("1")); imsManager.setEnhanced4gLteModeSetting(true); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.WFC_IMS_ENABLED), eq("1")); }
public void sendSms(int messageRef, java.lang.String format, java.lang.String smsc, boolean isRetry, byte[] pdu) { try { onSendSmsResult(messageRef, android.telephony.ims.ImsImplBase.SEND_STATUS_ERROR, SmsManager.RESULT_ERROR_GENERIC_FAILURE); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.ImsImplBase.LOG_TAG, ("Error not send sms: " + (e.getMessage()))); } }
public void acknowledgeSmsReport(int messageRef, @android.telephony.ims.stub.StatusReportResult int result) { }
public final void onSendSmsResult(int messageRef, @android.telephony.ims.ImsImplBase.SendStatus int status, int reason) throws android.os.RemoteException, java.lang.IllegalStateException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.IllegalStateException("not ready."); } mListener.onSendSmsResult(messageRef, status, reason); } }
public void startMonitoringImsService() { if ((getPhoneType()) == (PhoneConstants.PHONE_TYPE_SIP)) { return; } synchronized(com.android.internal.telephony.Phone.lockForRadioTechnologyChange) { android.content.IntentFilter filter = new android.content.IntentFilter(); com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance(mContext, getPhoneId()); if ((imsManager!= null) && (!(mmsManager.isDynamicBinding()))) { filter.addAction(ImsManager.ACTION_IMS_SERVICE_UP); filter.addAction(ImsManager.ACTION_IMS_SERVICE_DOWN); } mContext.registerReceiver(mImsIntentReceiver, filter); if (mImsManager!= null) { if ((mImsManager.isDynamicBinding()) || (imsManager.isServiceAvailable())) { mImsServiceReady = true; updateImsPhone(); } } }
@java.lang.Override protected java.lang.String getServiceInterface() { return com.android.internal.telephony.ims.ImsServiceController.SERVICE_INTERFACE; }
@java.lang.Override protected java.lang.String getServiceInterface() { return com.android.internal.telephony.ims.ImsServiceControllerCompat.SERVICE_INTERFACE; }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testDontBindWhenNullCarrierPackage() throws android.os.RemoteException { setupResolver(1); java.util.List<android.content.pm.ResolveInfo> info = new java.util.ArrayList<>(); java.util.Set<java.lang.String> features = new java.util.HashSet<>(); features.add(ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE); features.add(ImsResolver.METADATA_MMTEL_FEATURE); features.add(ImsResolver.METADATA_RCS_FEATURE); info.add(getResolveInfo(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, features, true)); when(mMockPM.queryIntentServicesAsUser(any(), anyInt())).thenReturn(info); com.android.internal.telephony.ims.ImsServiceController controller = mock(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, android.content.ComponentName componentName, android.content.String getServiceInterface() { return ImsServiceController.SERVICE_INTERFACE; } @java.lang.Override public com.android.internal.telephony.ims.ImsServiceController controller = mock(com.android.internal.telephony.ims.ImsServiceController.class); mTestImsService = mock(mMockitoResolver.getImsServiceControllerFactory() { @java.lang.Override public java.lang.String getService() { when(controller.getComponentName()).thenReturn(componentName); return controller; } }
public final android.telephony.ims.IImsConfig getBinder() { return mBinder; }
@java.lang.Override public void removeImsConfigCallback(android.telephony.ims.IImsConfigCallback c) throws android.os.RemoteException { this.removeImsConfigCallback(c); }
private void stopListeningForCalls() { try { resetImsCapabilities(); if ((mImsManager)!= null) { mImsManager.getConfigCallback(mConfigCallback); mImsManager.close(); } } catch (com.android.ims.ImsException e) { } }
private void setImsServiceControllerFactory(com.android.internal.telephony.ims.ImsServiceController deviceController, com.android.internal.telephony.ims.ImsServiceController carrierController1, com.android.internal.telephony.ims.ImsServiceController carrierController2) { mTestImsResolver.setImsServiceControllerFactory(new com.android.internal.telephony.ims.ImsResolver.ImsServiceControllerFactory() { @java.lang.Override public java.lang.String getServiceInterface() { return ImsServiceController2) { mTestImsService.setImsServiceController(android.content.Context context, android.content.ComponentName componentName, com.android.internal.telephony.ims.ImsResolverTest.ImsServiceControllerCallbacks callbacks); } @java.lang.Override public com.android.internal.telephony.ims.ImsServiceController create(android.content.Context context, android.content.ComponentName componentName, com.android.internal.telephony.ims.ImsResolverCallbacks callbacks) { if (com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME.equals(componentName.getPackageName())) { when(carrierController.getComponentName()).thenReturn(componentName); return deviceController1; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.equals(componentName)) { when(carrierController1.getComponentName()).thenReturn(componentName); return carrierController1; } return null; } }
private void setImsServiceControllerFactory(com.android.internal.telephony.ims.ImsServiceController deviceController, com.android.internal.telephony.ims.ImsServiceController carrierController) { mTestImsResolver.setImsServiceControllerFactory(new com.android.internal.telephony.ims.ImsResolver.ImsServiceControllerFactory() { @java.lang.Override public java.lang.String getServiceInterface() { return ImsServiceController.SERVICE_INTERFACE; } @java.lang.Override public com.android.internal.telephony.ims.ImsServiceController create(android.content.Context context, android.content.ComponentName componentName, com.android.internal.telephony.ims.ImsServiceControllerCallbacks callbacks) { if (com.android.internal.telephony.ims.ImsResolverTest.ImsServiceControllerCallbacks callbacks) { if (com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_NAME.equals(componentName.getPackageName())) { when(carrierController.getComponentName()).thenReturn(componentName); return deviceController; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.equals(componentName)) { when(carrierController.getComponentName()).thenReturn(componentName); return carrierController; } return null; } }); }
@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) return true; if ((o == o) || ((getClass())!= (o.getClass()))) return false; com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo that = ((com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo) (o)); if ((name)!= null?!(name.equals(that.name)) : (that.equals(that.name)) : (that.name)!= null) return false; if ((mIsNull)!= null?!(mContext.equals(that.mContext)) : (that.equals(that.mFeature)) : (that.equals(that.controller))!= null) return false; return (controllerFactory)!= null? controllerFactory.equals(that.controllerFactory) : (that.controllerFactory) == null; }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.telephony.Rlog.d(com.android.internal.telephony.Phone.LOG_TAG, ("onReceive intent " + (intent.getAction()))); if (intent.hasExtra(ImsManager.EXTRA_PHONE_ID)) { int extraPhoneId = intent.getIntExtra(ImsManager.EXTRA_PHONE_ID, SubscriptionManager.INVALID_PHONE_INDEX); android.telephony.Rlog.d(com.android.internal.telephony.Phone.LOG_TAG, ("getAction(): extraPhoneId = " + extraPhoneId)); if ((extraPhoneId == (android.telephony.SubscriptionManager.INVALID_PHONE_INDEX)) || (extraPhoneId!= (getPhoneId()))) { return; } } synchronized(com.android.internal.telephony.Phone.lockForRadioTechnologyChange) { if (intent.getAction().equals(ImsManager.ACTION_IMS_SERVICE_UP)) { mImsServiceReady = true; updateImsPhone(); com.android.ims.ImsManager.getInstance(mContext, mPhoneId).updateImsServiceConfig(false); } else if (intent.getAction().equals(ImsManager.ACTION_IMS_SERVICE_DOWN)) { updateImsPhone(); } } }
private void startListeningForCalls() throws com.android.ims.ImsException { mImsServiceRetryCount = 0; mImsManager.open(mImsRegistrationCallback); mImsManager.addRegistrationCallback(mImsRegistrationCallback); mImsManager.addCapabilitiesCallback(mImsRegistrationCallback); mImsManager.addCapabilitiesCallback(mImsCapabilityCallback); mImsManager.getConfigCallback(mImsConfigListener); getEcbmInterface().setEcbmStateListener(mPhone.getImsEcbmStateListener()); if (mPhone.isInEcm()) { mPhone.exitEmergencyCallbackMode(); } int mPreferredTtyMode = Settings.Secure.getInt(mPhone.getContext().getContentResolver(), Settings.Secure.PREFERRED_TTY_MODE, Phone.TTY_MODE, Phone.TTY_MODE_OFF); mImsManager.setUiTtyMode(mPhone.getContext(), mPreferredTtyMode, null); mImsManager.setUiTtyMode(mPhone.getExternalCallTracker().getExternalCallStateListener()); }
@java.lang.Override public android.telephony.ims.MmTransportOnEmergencyMMTelImsFeature(int slotIndex) { return null; }
@java.lang.Override public java.lang.String getServiceInterface() { return ImsServiceController; }
@java.lang.Override public java.lang.String getServiceInterface() { return ImsService.SERVICE_INTERFACE; }
@java.lang.Override public void addImsConfigCallback(android.telephony.ims.IImsConfigCallback c) throws android.os.RemoteException { this.addImsConfigCallback(c); }
@java.lang.Override public int setConfigInt(int item, int value) throws android.os.RemoteException { return java.lang.Integer.MIN_VALUE; }
@java.lang.Override public int setConfigString(int item, java.lang.String value) throws android.os.RemoteException { return java.lang.Integer.MIN_VALUE; }
@java.lang.Override public int getConfigInt(int item) throws android.os.RemoteException { return java.lang.Integer.MIN_VALUE; }
@java.lang.Override public java.lang.String getConfigString(int item) throws android.os.RemoteException { return null; }
private com.android.ims.ImsManager initializeProvisionedValues() { try { when(mImsConfigImplBaseMock.getProvisionedValue(anyInt())).thenReturn(mContext); return getProvisionedInt(((java.lang.Integer) (invocation.getArguments()))); }); when(mImsConfigImplBaseMock.setProvisionedValue(anyInt(), anyInt())).thenReturn((invoke(java.lang.Integer) (invocation.getArguments()[0]))); return ImsConfig.OperationStatusConstants.SUCCESS; }); when(mImsConfigImplBaseMock.setProvisionedStringValue(anyInt(), anyString())).thenReturn((invoke(java.lang.Integer) (invocation.getArguments()[0]))); return ImsConfig.OperationStatusConstants.SUCCESS; }); when(mImsConfigImplBaseMock.setProvisionedStringValue(anyInt(), anyString())).thenReturn((invoke(java.lang.Integer) (invocation.getArguments()[0]))); return ImsConfig.OperationStatusConstants.SUCCESS; }); } catch (android.os.RemoteException ex) { fail(("initializeProvisionedValues failed with " + ex)); } mImsConfigStub = new android.telephony.ims.stub.ImsConfigImpl(mImsConfigImplImpl.getId(), mContext); doReturn(mImsConfigImpl.getIImsConfig()); doReturn(mImsConfigImpl.getIImsConfig(); mImsConfig = new com.android.ims.ims.ImsConfig(mImsConfigImplStub, mPhoneId); doReturn(mImsConfigImpl); try { replaceInstance(mImsConfigManager); } catch (android.os.RemoteException ex) { com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance(mContext, mPhoneId); com.android.ims.ImsManager.getInstance(mPhoneId); try { replaceInstance(com.android.ims.ImsManager.class, "mConfig", imsManager, mImsManager, mImsManager, mImsManager, mImsManager
@java.lang.Override public android.telephony.ims.MmTransport onCreateMMTelImsFeature(int slotIndex) { return mSpyMMTelFeature; }
@android.support.test.filters.FlakyTest @org.junit.Test public void testBindService() { java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> testFeatures = new java.util.HashSet<>(); testFeatures.add(new android.util.Pair(1, 1)); testFeatures.add(new android.content.Intent(android.content.Intent.class); testFeatures.add(mTestImsServiceController.bind(testFeatures)); int expectedFlags = ((android.content.Intent.class) | (android.content.Intent.class)) | (android.content.Context.BIND_AUTO_SERVICE)) | (android.content.Context.BIND_FOREGROUND_SERVICE)) | (android.content.Context.BIND_IMPORTANT); verify(mMockContext).bindService(intentCaptor.capture(), any(), eq(expectedFlags)); android.content.Intent testIntent = intentCaptor.getValue(); junit.framework.Assert.assertEquals(ImsServiceController.SERVICE_INTERFACE, testIntent.getAction()); junit.framework.Assert.assertEquals(ImsServiceController.SERVICE_INTERFACE, testIntent.getAction()); junit.framework.Assert.assertEquals(ImsServiceController.SERVICE_INTERFACE, testIntent.getAction()); junit.framework.Assert.assertEquals(mTestComponentName, testIntent.getComponent()); }
private void launchNotificationOnKeyguard(int slotId, java.lang.String message) { android.app.Notification.Builder builder = new android.app.Notification.Builder(this, com.android.stk.StkAppService.STK_NOTIFICATION_CHANNEL_ID); builder.setContentText(new android.app.Notification.BigTextStyle(builder).bigText(message)); builder.setContentTitle(message); com.android.internal.telephony.cat.Menu menu = getMainMenu(slotId); if ((menu == null) || (android.text.TextUtils.isEmpty(menu.title))) { builder.setContentTitle(getResources().getString(R.string.app_name)); } else { builder.setContentTitle(com.android.internal.R.drawable.stat_notify_sim_toolkitkitkit); builder.setOngoing(true); builder.setOnlyAlertOnce(true); builder.setColor(getResources().getColor(com.android.stk.StkAppService.NOTIFICATION_ON_KEYGUARD, slotId), builder.build()); }
private void launchInputActivity(int slotId) { android.content.Intent newIntent = new android.content.Intent(android.content.Intent.ACTION_VIEW); java.lang.String targetActivity = com.android.stk.StkAppService.STK_INPUT_ACTIVITY_NAME; java.lang.String uriString = (com.android.stk.StkAppService.STK_INPUT_URI) + (java.lang.System.currentTimeMillis()); android.net.Uri uriData = android.net.Uri.parse(uriString); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, ("Invalid slot id: " + slotId)); newIntent.setFlags(((android.content.Intent.FLAG_ACTIVITY_TASK) | (getFlagActivityNoUserAction(com.android.stk.StkAppService.INIT_NAME, slotId)))); newIntent.setClassName(com.android.stk.StkAppService.PACKAGE_NAME, targetActivity); newIntent.putExtra("INPUT", mStkContext[slotId].mCurrentCmd.geInput()); newIntent.setData(uriData); com.android.internal.telephony.cat.Input input = mStkContext[slotId].mCurrentCmd.geInput(); notifyUserIfNecessary(slotId, (input!= null? input.text : null)); mContext.startActivity(newIntent); }
private void cancelNotificationOnKeyguard(int slotId) { if ((mUserPresentReceiver)!= null) { unregisterReceiver(mUserPresentReceiver); mUserPresentReceiver = null; mNotificationManager.cancel(getNotificationId(com.android.stk.StkAppService.NOTIFICATION_ON_KEYGUARD, slotIndex)); } }
private void launchTextDialog(int slotId) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, ("slot slotId: " + slotId)); android.content.Intent newIntent = new android.content.Intent(); java.lang.String targetActivity = com.android.stk.StkAppService.STK_DIALOG_ACTIVITY_NAME; int action = getFlagActivityNoUserAction(com.android.stk.StkAppService.InitiatedByUserAction.unknown, slotId); java.lang.String uriString = (com.android.stk.StkAppService.STK_DIALOG_URI) + (java.lang.System.currentTimeMillis()); android.net.Uri uriData = android.net.Uri.parse(uriString); if (newIntent!= null) { newIntent.setClassName(com.android.stk.StkAppService.PACKAGE_NAME, targetActivity); newIntent.setFlags((((android.content.Intent.FLAG_ACTIVITY_NEW_TASK) | (android.content.Intent.FLAG_ACTIVITY_FROM_RECENTS)) | (getFlagActivityNoUserAction(com.android.stk.StkAppService.SLOT_ID, slotId)))); newIntent.setData(uriData); newIntent.putExtra(com.android.stk.StkAppService.SLOT_ID, slotId); com.android.internal.telephony.cat.TextMessage textMessage = mStkContext[slotId].mCurrentCmd.geTextMessage(); notifyUserIfNecessary(slotId, (textMessage!= null? textMessage.text : null)); startActivity(newIntent); }
public int getCarrierPrivilegeStatus(android.content.pm.PackageManager packageManager, java.lang.String packageName) { try { if (!(hasCarrierPrivilegeRules())) { int state = mState.get(); if (state == (com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.STATE_LOADING)) { return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_RULES_NOT_LOADED; } else if (state == (com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.STATE_ERROR)) { return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_NO_RULES; } return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_NO_ACCESS; } android.content.pm.PackageInfo pInfo = packageManager.getPackageInfo(packageName, ((android.content.pm.PackageManager.GET_SIGNATURES) | (android.content.pm.PackageManager.MATCH_DISABLED_UNTIL_USED_COMPONENTS))); return getCarrierPrivilegeStatus(pInfo); } catch (android.content.pm.PackageManager ex) { } return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_NO_ACCESS; }
@org.junit.After public void tearDown() throws java.lang.Exception { stopService(); mTargetContext.unregisterReceiver(mConnectionStateChangedReceiver); mTargetContext.unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedQueue.clear(); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); }
@org.junit.After public void tearDown() throws java.lang.Exception { com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.hfpclient.HeadsetClientService.class); mAdapter = null; com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); }
@org.junit.After public void tearDown() throws java.lang.Exception { com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.hfp.HeadsetService.class); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getService(); org.junit.Assert.assertNull(mHeadsetService); mStateMachine.clear(); mCurrentDevice = null; java.lang.reflect.Method method = com.android.bluetooth.hfp.HeadsetObjectsFactory.class.getDeclaredMethod("setInstanceForTesting", com.android.bluetooth.hfp.HeadsetObjectsFactory.class); method.invoke(null, ((com.android.bluetooth.hfp.HeadsetObjectsFactory) (null))); mObjectsFactory.setAccessible(true); mObjectsFactory.put(null, ((com.android.bluetooth.hfp.HeadsetObjectsFactorysFactory) (null))); mAdapterService = null; }
@org.junit.Test public void testInitialize() { if (!(mInitialize())) { android.util.Log.i(com.android.bluetooth.hdp.HealthServiceTest.TAG, "Test failed"); } android.util.Log.i(com.android.bluetooth.hdp.HealthServiceTest.TAG, "Test failed"); return; }
@org.junit.After public void tearDown() throws java.lang.Exception { com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.hdp.HealthService.class); mAdapter = null; com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); }
@org.junit.After public void tearDown() throws java.lang.Exception { com.android.bluetooth.hfp.HeadsetObjectsFactory.getInstance().destroy(); mHandlerThread.quit(); com.android.bluetooth.hfp.HeadsetObjectsFactory.getInstance().destroy(); com.android.bluetooth.test.HeadsetObjectsFactory.getInstance().destroyStateMachine(mHeadsetStateMachine); mHandlerThread.quit(); com.android.bluetooth.testUtils.clearAdapterService(mAdapterService); mAdapterService = null; }
@org.junit.Before public void setUp() throws java.lang.Exception { mTargetContext = android.support.test.InstrumentationRegistry.getTargetContext(); org.junit.Assume.assumeTrue("Ignore when HealthService is not enabled", mTargetContext.getResources().getBoolean(R.bool.profile_supported_hdp)); org.mockito.MockitoAnnotations.initMocks(this); com.android.bluetooth.TestUtils.setAdapterService(this); com.android.bluetooth.TestUtils.startService(mAdapterServiceRule, com.android.bluetooth.hdp.HealthService.class); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); org.junit.Assert.assertNotNull(android.bluetooth.hdp.HealthService.class); }
@org.junit.Test public void testInitialize() { android.util.Log.i(com.android.bluetooth.mapclient.MapClientTest.TAG, "Test test tested PASS"); }
@org.junit.After public void tearDown() throws java.lang.Exception { mA2dpStateMachine.doQuit(); mHandlerThread.quit(); }
@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); com.android.bluetooth.TestUtils.setAdapterService(mAdapterService); mTargetContext = android.support.test.InstrumentationRegistry.getDefaultContext(); mAdapter = android.support.test.InstrumentationRegistry.getDefaultContext(); mTestDevice = mAdapter.getRemoteDevice("00:01:02:03:03"); mHandlerThread.start(); mHandlerThread.start(); mHandlerThread.start(); mA2dpNativeInterface = new com.android.bluetooth.a2dp.A2dpStateMachine(mTestDevice, mA2dpService, mTargetContext, mHandlerThread.getLooper()); A2dpStateMachine.start(); }
@org.junit.After public void tearDown() throws java.lang.Exception { mHidDeviceService.stop(); mHidDeviceService = null; mTargetContext.unregisterReceiver(mConnectionStateChangedReceiver); mTargetContext.unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedQueue.clear(); mCallbackQueue.clear(); com.android.bluetooth.hid.HidDeviceTest.setHidDeviceNative(null); com.android.bluetooth.hid.testUtils.clearAdapterService(mAdapterService); mAdapterService = null; }
@org.junit.After public void tearDown() throws java.lang.Exception { mHandlerThread.quit(); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); mAdapterService = null; }
@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); com.android.bluetooth.TestUtils.setAdapterService(mAdapterService); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mAdapter = mAdapter.getRemoteDevice("00:02:02:03:03"); mHandlerThread.start(); mHandler = new android.os.Handler(mHandlerThread.getLooper()); mHandlerThread.start(); mHandler = new android.os.Handler(mHandlerThread.getLooper()); doNothing().when(mBluetoothPbapService).checkOrGetPhonebookPermission(any()); mPbapStateMachine = com.android.bluetooth.pbap.PbapStateMachine.make(mBluetoothPbapService, mHandlerThread.getLooper(), mSocket, mSocket, mHandler, com.android.bluetooth.pbap.PbapStateMachineTest.TEST_NOTIFICATION_ID); }
@org.junit.After public void tearDown() throws java.lang.Exception { com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.mapclient.MapClientService.class); mService = com.android.bluetooth.mapclient.MapClientService.getMapClientService(); org.junit.Assert.assertNull(mService); mAdapterService = null; }
@org.junit.After public void tearDown() throws java.lang.Exception { com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.hfp.HeadsetService.class); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getService(); org.junit.Assert.assertNull(mObjectsFactory, mAdapterService); reset(mObjectsFactory, mAdapterService); mCurrentDevice = null; java.lang.reflect.Method method = null; java.lang.reflect.Method method = null; java.lang.reflect.Method method = null; java.lang.reflect.Method method = null; java.lang.reflect.Method method = null; java.lang.reflect.Method method = null; java.lang.reflect.Method method = null; mObjectsFactory.class = null; method.setAccessible(true); method.invoke(null, ((com.android.bluetooth.hfp.HeadsetObjectsFactorysFactorysFactorysFactory.class))); mObjectsFactory = null; com.android.bluetooth.testUtils.clearAdapterService(mAdapterService); }
@java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { mServiceBinder = ((android.telephony.INetworkService.Stub) (service)); mDeathRecipient = new com.android.internal.telephony.NetworkRegistrationManager.RegManagerDeathRecipient(name); try { mServiceBinder.linkToDeath(mDeathRecipient); mServiceBinder.registerForNetworkServiceProvider(mPhone.getPhoneId()); mServiceBinder.registerForNetworkRegistrationStateChanged(mPhone.getPhoneId(), new com.android.internal.telephony.NetworkRegistrationManager.NetworkRegStateCallback(null)); } catch (android.os.RemoteException e) { mDeathRecipient.binderDied(); android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, ("RemoteException " + exception)); } }
private boolean bindService() { android.content.Intent intent = new android.content.Intent(android.telephony.NetworkService.NETWORK_SERVICE_INTERFACE); intent.setPackage(getPackageName()); return mPhone.getContext().bindService(intent, new com.android.internal.telephony.NetworkRegistrationManager.NetworkServiceConnection(), Context.BIND_AUTO_CREATE); }
public void registerForNetworkRegistrationStateChanged(android.os.Handler h, int what, java.lang.Object obj) { synchronized(mLock) { if (mRegistrants) { android.os.Registrant r = new android.os.Registrant(h, what, obj); mRegistrants.addUnique(h, what, obj); } } }
@java.lang.Override public void binderDied() { android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, (((("NetworkService(" + (mComponentName)) + " transport type ") + (mTransportType)) + ") + (mTransportType))); }
@java.lang.Override public void onNetworkStateChanged() { android.telephony.Rlog.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, "onNetworkStateChanged"); }
private java.lang.String getPackageName() { java.lang.String packageName; int resourceId; java.lang.String carrierConfig; switch (mTransportType) { case android.telephony.R.string.config_wlan_network_service_service_wLAN_PACKAGE_WLAN_PRAN_STRING; case android.telephony.R.R.string.wlanType.WLAN : resourceId = com.android.internal.R.string.config_wlan_network_network_service; carrierConfig = android.telephony.R.string.config_wlan_network_service; carrierConfig = android.telephony.CarrierConfigManager.KEY_CARRIER_NETWORK_WLAN.WLAN_WLAN_PACKAGE_STRING; break; default : throw new java.lang.IllegalStateException(("Transport type not WWAN or WLAN. type=" + (mTransportType))); } packageName = mPhone.getContext().getResources().getString(resourceId); android.os.PersistableBundle b = mCarrierConfigManager.getConfigForSubId(mPhone.getSubId()); if (b!= null) { packageName = b.getString(carrierConfig, packageName); } android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, ((("Binding to packageName " + packageName) + " for transport type") + (mTransportType))); return packageName; }
@java.lang.Override public void getNetworkRegistrationState(int domain, android.os.Message onCompleteMessage) { if (onCompleteMessage == null) return; android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, ("getNetworkRegistrationState domain " + domain)); if (!(isServiceConnected())) { onCompleteMessage.obj = new android.os.AsyncResult(onCompleteMessage.obj, null, new java.lang.IllegalStateException("Service not connected.")); onCompleteMessage.sendToTarget(); return; } try { mServiceBinder.getNetworkRegistrationState(mPhone.getPhoneId(), domain, new com.android.internal.telephony.NetworkRegistrationManager.NetworkRegStateCallback(onCompleteMessage)); } catch (android.os.RemoteException e) { android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, ("getNetworkRegistrationStateRemoteException RemoteException " + e)); onCompleteMessage.sendToTarget(); } }
@java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, ("onServiceDisconnected " + name)); if ((mServiceBinder)!= null) { mServiceBinder.unlinkToDeath(mDeathRecipient, 0); } }
private void update() { boolean tracingOn = com.android.traceur.AtraceUtils.isTracingOn(); getQsTable().setIcon(android.drawable.Icon.createWithResource(this, R.drawable.stat_sys_adb)); getQsTable().setState((tracingOn? android.service.quicksettings.STATE_ACTIVE : android.service.quicksettings.STATE_INACTIVE)); getQsTable().updateLabel(getString(R.string.save_and_trace_trace_trace, R.string.record_trace))); getQsTable().updateScale(); }
public void pollState(boolean modemTrigled) { mPollingContext = new int[1]; mPollingContext[0] = 0; log(("UNAVAILABLE : mUNAVAILABLE : mUNAVAILABLE : mNewCellLoc.setStateInvalid(); mNewCellLoc.setStateInvalid(); mNewCellLoc.handleNetworkUnavailable(); mNewCellLoc.handleNetworkUnavailable(); pollStateDone(); mNitzState.handleNetworkUnavailable(); pollStateDone(); mNitzState.handleNetworkUnavailable(); if ((!modemTrimDataRadioTechnology) && ((!modemTrimDataRadioTechnology())) && ((!modemTrimDataRadioTechnology) && ((!modemTrimDataRadioTechnology) && ((!modemTrimDataRadioTechnology())))) { pollStateDone(); break; } default : (mPollingContext[0])++; mCi.getOperator(obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_STATE_GPRS, mPollingContext)); (mPollingContext[0])++; mWwanRegStateManager.getNetworkRegistrationState(NetworkRegistrationState.DOMAIN_PS, obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_STATE_GPRS, obtainMessage(com.android.internal.telephony.ServiceStateTrackerState.EVENT_POLL_STATE_GPRS, obtainMessage(com.android.internal.telephony.ServiceStateTrackerState.EVENT_POLL_STATE_REGISTRATION, mPollingContext)); if (mPhone.isPhoneTypeGsm()) { (mPollingContext[0])++; mWifiRegStateManager.getNetworkSelectionMode(obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_STATE_NETWORK_SELECTION, mPollingContext)); } break; }
private int getLteEarfcn(android.telephony.CellIdentity slot, int lte, int lte, int lte, int earfcn) { int lteEarfcn = com.android.internal.telephony.ServiceStateTracker.INVALID_LTE_EARN; switch (cellIdentity.getType()) { case android.hardware.radio.V1_0.CellInfoType.LTE : android.hardware.radio.V1_0.CellInfoType.LTE : android.hardware.radio.V1_0.CellInfoType.LTE; break; } default : { break; } } return lteEarfcn; }
private void notifySentMessageStatus(java.lang.String handle, com.android.bluetooth.mapclient.EventReport.Type status) { if (com.android.bluetooth.mapclient.MceStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.mapclient.MceStateMachine.TAG, ((("onSending a status for " + handle) + " Status = ") + status)); } android.app.PendingIntent intentToSend = null; java.lang.String shortHandle = handle.substring(2); if (status == (EventReportReport.Type.SENDING_SUCCESS)) { intentToSend = mSentReceiptReceiptRequested.remove(mSentMessageLog.get(shortHandle)); } else if (com.android.bluetooth.mapclientclient.MceStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.mapclientclient.MceStateMachine.TAG, ("Invalid a notification on message with handle=" + handle = ") + handle)); if (intentToSend!= null) { try { if (com.android.bluetooth.mapclient.Modes.DBG) { android.util.Log.d(com.android.bluetooth.mapclientclient.MceStateMachine.TAG, ("handleMessage: " + intentToSend)); } catch (android.app.PendingIntent e) { android.util.Log.e(com.android.bluetooth.mapclient.MceStateMachine.TAG, ("Invalid a notification on message with handle = " + handle = " + handle = ") + handle = ") + handle = ") + handle = ") + handle = ") + handle = ") + handle = ") + handle; } } } else { android.util.Log.e(com.android.bluetooth.mapclient.MceStateMachine.TAG, ("handleMessage: " + handle = " + handle = ") + handle = "; if (messageToSendMessage(handle!= handle = " + handle = ") + handle = ") + handle; } }
@java.lang.Override protected java.lang.String getLogRecString(android.os.Message msg) { if ((msg.what) == (com.android.bluetooth.hfp.HeadsetStateMachine.STACK_EVENT)) { com.android.bluetooth.hfp.HeadsetStackEvent event = ((com.android.bluetooth.hfp.HeadsetStateMachine.getState(msg.what)) + ": ") + event; } else { return ((com.android.bluetooth.hfp.HeadsetStateMachine.getMessageName(msg.what)) + ": ") + event; } }
@android.annotation.Nonnull public static android.net.MacAddress createRandomUnicastAddress() { java.security.SecureRandom r = new java.security.SecureRandom(); long addr = (r.nextLong()) & (android.net.MacAddress.VALID_LONG_MASK); addr = addr & (android.net.MacAddress.MULTICAST_ASSIGNED_MASK); addr = addr & (android.net.MacAddress.MULTICAST_MASK)); addr = addr & (android.net.MacAddress.MULTICAST_MASK)); return new android.net.MacAddress(addr); }
public void registerForEidReady(android.os.Handler h, int what, java.lang.Object obj) { synchronized(mRegistrant) { mRegistrant r = new android.os.Registrant(h, what, obj); mSimStateLoadedRegistrants.add(r); } }
@java.lang.Override public void onException(java.lang.Throwable e) { com.android.internal.telephony.uicc.EuiccCard.loge("Failed load eid"); }
@java.lang.Override public void onResult(java.lang.String result) { mEid = result; mSimStateLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); }
public void unregisterForEidReady(android.os.Handler h) { synchronized(mLock) { mSimStateLoadedRegistrants.remove(h); } }
private void loadEidAndNotifyRegistrants() { android.os.Handler euiccMainThreadHandler = new android.os.Handler(); com.android.internal.telephony.uicc.UiccCard.AsyncResultCallback<java.lang.String> cardCb = new com.android.internal.telephony.uicc.AsyncResultCallback<java.lang.String>() { @java.lang.Override public void onResult(java.lang.String result) { mEid = result; mSimStateLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } @java.lang.Override public void onException(java.lang.Throwable e) { com.android.internal.telephony.uicc.EuiccCard.loge("Failed load eid"); } }; getEid(cardCb, euiccMainThreadHandler); }
private boolean parseAtrString(java.lang.String atr) { if (((atr.length()) % 2)!= 0) { com.android.internal.telephony.uicc.RlogToReset.loge((("at length of input ATR string " + (atr.length())) + " is not even.")); return false; } if ((atr.length()) < 4) { com.android.internal.telephony.uicc.IccUtils.loge("AT AT OCTETR string must beTS and T0."); return false; } byte[] atrBytes = com.android.internal.telephony.uicc.IccUtils.hexStringToBytes(atr); if (atrBytes == null) { return false; } byte[] atrBytes = com.android.internal.telephony.uicc.IccUtils.hexStringToBytes(atr); if (atrBytes == null) { return false; } byte[] atrBytes = parseConventionByte(atrBytes, 0); if (index == (-1)) { return false; } index = parseInterfaceBytes(atrBytes, index); if (index == (-1)) { return false; } index = parseInterfaceBytes(atrBytes, index); if (index == (-1)) { return false; } index = parseCheckBytes(atrBytes, index); if (index == (-1)) { return false; } com.android.internal.telephony.uicc.AnswerToReset.log(((("The parsed the ATR string " + atr) + " into ") + (toString()))); checkIsEuiccSupported(); return true; }
void deflect(com.android.server.telecom.Call call, java.lang.String number) { final java.lang.String callId = mCallIdMapper.getCallId(call); if ((callId!= null) && (isServiceValid("deflect"))) { try { logOutgoing("deflect %s %s", callId, number); mServiceInterface.deflect(callId, number, android.telecom.Log.getExternalSession()); } catch (android.os.RemoteException e) { } } }
@java.lang.Override public void deflectCall(java.lang.String callId, java.lang.String deflectCall) { try { android.telecom.Log.startSession(LogUtils.Sessions.ICA_CALL, mOwnerComponentName); long token = android.os.Binder.clearCallingIdentity(); try { synchronized(mLock) { android.telecom.Log.i(this, "deflectCall(%s,%s)", callId, deflectNumber); com.android.server.telecom.Call call = mCallIdMapper.getCall(callId); if (call!= null) { mCallsManager.deflectCall(call, deflectCallId); } else { android.os.Binder.restoreCallingIdentity(token); } } } finally { android.os.Binder.restoreCallingIdentity(token); } }
@com.android.internal.annotations.VisibleForTesting public void deflect(java.lang.String number) { if (isRinging("deflect")) { if ((mRinging("deflect")) == null) { if ((mConnectionService)!= null) { mConnectionService.deflect(this, number); } else { android.telecom.Log.e(this, new java.lang.NullPointerException(), "deflect call failed"); } android.telecom.Log.addEvent(this, LogUtils.Events.REQUEST_DEFLECT); } }
public void deflectCall(java.lang.String callId, java.lang.String deflectCall) { try { mAdapter.deflectCall(callId, deflectNumber); } catch (android.os.RemoteException e) { } }
@java.lang.Override public void deflect(java.lang.String callId, java.lang.String number, android.telecom.Logging.Session.Info info) throws android.os.RemoteException { }
@com.android.internal.annotations.VisibleForTesting public void deflectCall(com.android.server.telecom.Call call, java.lang.String number) { if (!(mCalls.contains(call))) { android.telecom.Log.i(this, "Request to deflect a non-existent call %s", call); } else { call.deflect(number); } }
@java.lang.Override public void onDeflect(java.lang.String number) { com.android.services.telephony.Log.v(this, "onDeflect"); if (((mOriginalConnection)!= null) && (isValidRingingCall())) { try { mOriginalConnection.deflect(number); } catch (android.os.CallStateException e) { com.android.internal.telephony.CallStateException e = e; } } }
private void deflect(java.lang.String callId, java.lang.String number) { android.telecom.Log.d(this, "deflect %s - %s", callId, number); findConnectionForAction(callId, "deflect").onDeflect(number); }
public void onDeflect(java.lang.String number) { }
@java.lang.Override public void deflect(java.lang.String deflector) throws android.os.RemoteException { }
public void deflect(java.lang.String number) { mInCallAdapter.deflectCall(mTelecomCallId, number); }
public void deflect(java.lang.String number) throws com.android.ims.ImsException { logi(((("deflect :: session=" + (mSession)) + ", number=") + number)); synchronized(mLockObj) { if ((mSession) == null) { throw new com.android.ims.ImsException("No call to deflect", ImsReasonInfo.CODE_LOCAL_TERMIN_TERMINATED); } try { mSession.deflect(number); } catch (java.lang.Throwable t) { loge("deflect::select", t); throw new com.android.ims.ImsException("deflect()", t, 0); } } }
@java.lang.Override public void deflect(java.lang.String callId, java.lang.String number, android.telecom.Logging.Session.Info sessionInfo) { android.telecom.Log.startSession(sessionInfo, android.telecom.ConnectionService.SESSION_DEFLECT); try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = number; args.arg3 = android.telecom.Log.createSubsession(); mHandler.obtainMessage(android.telecom.ConnectionService.MSG_DEFLECT, args).sendToTarget(); } finally { android.telecom.Log.endSession(); } }
public byte[] getSelectResponse() { return mSelectResponse; }
public void selectDefaultApplication() { try { select(null); synchronized(mLock) { mDefaultApplicationSelectedOnBasicChannel = true; } catch (java.util.NoSuchElementException e) { if ((getAccessControlEnforcer())!= null) { try { select(mAccessControlEnforcer.getDefaultAccessControlAid()); } } catch (java.util.NoSuchElementException e) { } } } catch (android.os.RemoteException ignore) { } } catch (android.os.RemoteException ignore) { } }
private void testTransitionSelection(boolean testNewTask, boolean bottomWallpaper, boolean bottomWallpaper, boolean topWallpaper, boolean topWallpaper, boolean topWallpaper, boolean topWallpaper, java.lang.String expectedTransition) throws java.lang.Exception { if (isVrHeadset()) { return; } java.lang.String bottomStartCmd = getAmStartCmd(android.server.cts.ActivityManagerTransitionTests.BOTTOM_ACTIVITY_NAME); if (bottomWallpaper) { bottomStartCmd += " --ez USE_WALLPAPER true"); } if (testSlowStop) { bottomStartCmd += " --ei FROM "_zy END_DELAY_DELAY 3000"); } if (testSlowStop) { bottomStartCmd += " --ei Stop_WALLPAPER"); } executeShellCommand(bottomStartCmd); final java.lang.String topActivityName = (topTranslucent)? android.server.cts.ActivityManagerTransitionTests.TRANSLUCENT_ACTIVITY_NAME : android.server.cts.ActivityManagerTransitionTests.TRANSLUCENT_NAME; final java.lang.String[] topActivityArray = new java.lang.String[]{ android.server.cts.ActivityManagerTransitionTests.BOTTOM_ACTIVITY_NAME }; final java.lang.String topActivityName = (topActivityName.getAmStartCmd(topActivityName); if (testNewTask) { topWallpaper.computeState(mDevice, bottomActivityName); java.lang.String topActivityArray = getAmStartCmd(topActivityName); if (testWallpaper) { topWallpaper.computeState(mDevice, bottomActivityName); } if (!testStart) { topWallpaper.computeState(mDevice, bottomActivityArray); java.lang.Thread.sleep(5000); if (testStartCmd); java.lang.Thread.sleep(5000); if (testStartCmd); } else { mAmWmState.computeState(mDevice, bottomActivityArray); } assertEquals("Timest wrong transition expected", expectedTransit, mAmWmState.getWmState().getLastTransition()); }
private void toggleFontScale() throws java.lang.Throwable { com.android.compatibility.common.util.SystemUtil.runShellCommand(getInstrumentation(), android.app.cts.ApplicationTest.ERASE_FONT_SCALE_CMD); getInstrumentation().waitForIdleSync(); com.android.compatibility.common.util.SystemUtil.runShellCommand(getInstrumentation(), android.app.cts.ApplicationTest.PUT_FONT_SCALE_CMD); getInstrumentation().waitForIdleSync(); com.android.compatibility.common.util.SystemUtil.runShellCommand(getInstrumentation(), android.app.cts.ApplicationTest.ERASE_FONT_SCALE_CMD); getInstrumentation().waitForIdleSync(); }
public void testApplication() throws java.lang.Throwable { final android.app.Instrumentation instrumentation = getInstrumentation(); final android.content.Intent intent = instrumentation.getTargetContext(); final android.content.Intent intent = new android.content.Intent(targetContext, android.app.stubs.MockApplicationActivity.class); intent.addFlags(Intent.FLAG_ACTIVITY_TASK); final android.app.Activity activity = instrumentation.startActivitySync(intent); final android.app.Activity activity = instrumentation.startActivitySync(intent); final android.app.Stubs.MockApp = ((android.app.stubs.MockApplication) (activity.getApplication())); assertTrue(mockApp.isConstructorCalled); toggleFontScale(); assertTrue(mockApp.isOnConfigurationChangedCalled); }
private static java.lang.String filterHashes(java.lang.String t) { for (; ++it.indexOf(0)) { int index = t.indexOf(0, (index + 1)); if (endIndex < 0) { break; } int endIndex = t.indexOf(index); if (endIndex < 0) { break; } t = ((t.substring(0, (index + 1))) + "HASH") + (t.substring(endIndex)); } return t; }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSuppServiceNotification() { com.android.services.telephony.TestTelephonyConnection c = new com.android.services.telephony.TestTelephonyConnection(); c.setOriginalConnection(c.getOriginalConnection()); org.mockito.ArgumentCaptor<android.os.Handler> handlerCaptor = org.mockito.ArgumentCaptor.forClass(android.os.Handler.class); verify(phone).registerForSuppressNotification(handlerCaptor.capture(), messageCaptor.capture(), any()); android.os.Handler handler = handlerCaptor.getValue(); int message = messageCaptor.getValue(); android.os.AsyncResult result = getSuppressNotification(SuppServiceNotification.NOTIFICATION_TYPE_MO,Supplicant.MO_CODE_FORWARDED); handler.obtainMessage(message, result).sendToTarget(); waitForHandlerAction(handler).sendToTarget(); waitForHandlerAction(handler).sendToTarget(); waitForHandlerAction(handler).sendToTarget(); waitForHandlerAction(handler).sendToTarget(); waitForHandlerAction(handler).sendToTarget(); waitForHandlerAction(handler).sendToTarget(); waitForHandlerAction(handler).sendToTarget(); waitForHandlerAction(handler).sendToTarget(); waitForHandlerAction(handler).sendToTarget(); waitForHandlerAction(handler).sendToTarget(); waitForHandlerAction(handler).sendToTarget(); waitForHandlerAction(handler).sendToTarget(); waitForHandlerAction(handler).sendToTarget(); waitForHandlerAction(handler, com.android.services.telephony.TelephonyConnectionServiceTest.TIMEOUT_CALL_CALL_WAITING); }
private void handleSuppServiceNotification(com.android.internal.telephony.gsm.SuppServiceNotification ssn) { com.android.services.telephony.Log.i(this, "handleSuppServiceNotification: type=" + (com.android.internal.telephony.gsm.SuppServiceNotification.NOTIFICATION_MO))); if ((ssn.notificationType) == (com.android.internal.telephony.gsm.SuppServiceNotification.NOTIFICATION_TYPE_MO)) { switch (ssn.notificationType) { case com.android.internal.telephony.gsm.SuppServiceNotification.MO_CODE_CALL_FORWARDED : sendConnectionEvent(TelephonyManager.EVENT_CALL_WAITING, null); break; case com.android.internal.telephony.gsm.SuppServiceNotification.MO_CODE_IS_WAITING : sendConnectionEvent(TelephonyManager.EVENT_CALL_WAITING, null); break; } } else if ((ssn.type) == (com.android.internal.telephony.gsm.SuppServiceNotification.NOTIFICATION_TYPE_MT)) { sendConnectionEvent(TelephonyManager.EVENT_CALL_WAITING, null); break; } }
public java.lang.String getLastConnectionEvent() { return mLastConnectionEvent; }
@java.lang.Override public void sendConnectionEvent(java.lang.String event, android.os.Bundle extras) { mLastConnectionEvent = event; }
public void waitForGc() { allowCollection(); do { try { java.lang.Thread.sleep(10); } catch (java.lang.Exception e) { } java.lang.System.gc(); java.lang.System.runFinalization(); java.lang.System.runFinalization(); } while (isLive() ); try { mQueue.remove(); } catch (java.lang.Exception e) { } reset(); }
public boolean isUp() throws java.net.SocketException { return ((getFlags()) & (IFF_UP) | (IFF_RUNNING))!= 0; }
protected void setOperatorIdd(java.lang.String operatorNumeric) { java.lang.String idd = mHbpcdUtils.getIcc(java.lang.Integer.parseInt(operatorNumeric.substring(0, 3))); if ((idd!= null) && (!(idd.isEmpty()))) { android.os.SystemProperties.set(TelephonyProperties.PROPERATOR_OPERATOR_IDP_STRING, "idd"); } else { android.os.SystemProperties.set(TelephonyProperties.PROPERATOR_OPERATOR_IDP_STRING, "+"); } }
static com.android.bluetooth.a2dp.A2dpStateMachine make(android.bluetooth.BluetoothDevice device, com.android.bluetooth.a2dp.A2dpService a2dpService, android.content.Context context, com.android.bluetooth.a2dp.A2dpNativeInterface a2dpNativeInterface, android.os.Looper looper) { if (com.android.bluetooth.a2dp.A2dpManager.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("create() for device " + device)); } com.android.bluetooth.a2dp.A2dpSm = new com.android.bluetooth.a2dp.A2dpStateMachine(device, a2dpService, context, a2dpNativeInterface, looper); a2dpSm.start(); return a2dpSm; }
public void testNetworkBlocked() throws java.lang.Exception { assertEquals(com.android.cts.deviceandprofile.VPN_PACKAGE, mDevicePolicyManager.getAlwaysOnVpnPackage(com.android.cts.deviceandprofileowner.ADMIN_RECEIVER_COMPONENT)); for (int i = 0; (i < (MAX_NUMBER_OF_ATTEMPT)) && (com.android.cts.deviceandprofileowner.vpn.VpnTestHelper.isNetworkVpn(mContext)); try { com.android.cts.deviceandprofileowner.vpn.VpnTestHelper.tryPosixConnect(com.android.cts.deviceandprofileowner.TEST_ADDRESS); fail("no network lockdown"); } catch (android.system.ErrnoException e) { assertTrue((e.errno) == (android.system.OsConstants.ENETETUNREACH)) || ((e.errno) == (android.system.OsConstants.ENETUNREACH)))); } }
public void waitForGc(int numberOfExpectedFinalizations) { if (numberOfExpectedFinalizations > (mList.size())) { throw new java.lang.IllegalArgumentException("NotGc: " + (mList.size()))); } do { java.lang.System.runFinalization(); java.lang.Runtime.getRuntime().gc(); try { java.lang.Thread.sleep(10); } catch (java.lang.Exception e) { } } while (isLive(numberOfExpectedFinalizations)) { try { while ((mQueue.poll(numberOfExpectedFinalizations)!= null) && (!(mQueue.poll(numberOfExpectedFinalizations))) { } catch (java.lang.Exception e) { } } mList.clear(); }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.os.UserHandle userHandle = intent.getParcelableExtra(com.android.cts.deviceowner.EXTRA_USER_HANDLE); android.util.Log.d(com.android.cts.deviceowner.CreateAndManageUserTest.TAG, ((("Received receiver received " + intent) + " with userHandle ") + userHandle)); mQueue.add(userHandle); }
public void deleteProfile(java.lang.String cardId, java.lang.String iccid, android.telephony.CallbackExecutor) { try { getIEuiccCardController().deleteProfile(mContext.getOpPackageName(), cardId, iccid, new com.android.internal.telephony.uicc.IDeclipse.UuiccCardManager.Stub() { @java.lang.Override public void onComplete(int resultCode) { android.telephony.UiccCardController.Stub() { @java.lang.Override public void onComplete(int resultCode) { android.telephony.UuiccCardManager.Stub() { @java.lang.Override public void onComplete(int resultCode) { android.util.Log.e(android.telephony.uicc.EuiccCardManager.TAG, "onComplete() calling deleteProfile", e); } }); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.uicc.EuiccCardManager.TAG, "Error calling delete profile"); e.onComplete(resultCode, null)); throw e.rethrowFromSystemServer(); } }
public void disableProfile(java.lang.String cardId, java.lang.String iccid, boolean refresh, @android.annotation.CallbackExecutor, android.telephony.uicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().disableProfile(mContext.getOpPackageName(), cardId, iccid, iccid, refresh, new com.android.internal.telephony.uicc.IDynamicProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { android.util.Log.e(android.telephony.uicc.EuiccCardManager.TAG, "getStatus calling disableProfile", e); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.uicc.EuiccCardManager.TAG, "Error calling disableProfile", e); throw e.rethrowFromSystemServer(); } }
public void requestRulesAuthTable(java.lang.String cardId, android.telephony.CallbackExecutor executor, android.telephony.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccRulesAuthTable> callback) { try { getIEuiccCardController().getRulesAuthTable(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.EuiccRulesAuthTableCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.EuiccRulesAuthTable rat) { executor.execute(() -> callback.onComplete(resultCode, rat), e); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.EuiccCardManager.TAG, "Error calling getRulesAuthTable", e); throw e.rethrowFromSystemServer(); } }
public void requestEuiccInfo2(java.lang.String cardId, android.telephony.CallbackExecutor executor, android.telephony.uicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccInfo2(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.uicc.IGetEuiccCardManager.ResultCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] info) { executor.execute(() -> callback.onComplete(resultCode, info)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.EuiccCardManager.TAG, "Error calling getEuiccInfo2", e); throw e.rethrowFromSystemServer(); } }
public void cancelSession(java.lang.String cardId, byte[] transactionId, @android.annotation.Nonnull byte[] transactionId, @android.annotation.Nonnull byte[] transactionId, @android.telephony.Telephony.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.uicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().cancelSession(mContext.getOpPackageName(), cardId, reason, reason, new com.android.internal.telephony.uicc.ICancelSessionCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { executor.execute(() -> callback.onComplete(resultCode, response)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.EuiccCardManager.TAG, "Error calling cancelSession", e); throw e.rethrowFromSystemServer(); } }
public void requestSmdsAddress(java.lang.String cardId, android.telephony.CallbackExecutor executor, android.telephony.uicc.EuiccCardManager.ResultCallback<java.lang.String> callback) { try { getIEuiccCardController().getSmdsAddress(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.uicc.IGetSmdsAddressCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, java.lang.String address) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "getSmdsAddress() calling getSmdsAddress", e); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.EuiccCardManager.TAG, "Error calling getSmdsAddress", e); throw e.rethrowFromSystemServer(); } }
public void authenticateServer(java.lang.String cardId, java.lang.String matchingId, byte[] serverSigned1, byte[] serverSigned1, byte[] euiccCiPkIdToBeUsed, byte[] serverSignature, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().authenticateServer(mContext.getOpPackageName(), cardId, matchingId, serverSigned1, serverSigned1, euiccCiPkIdToBeUsed, serverSignature1, euiccCiPkIdToBeUsed, serverCertificate, new com.android.internal.telephony.uicc.IAututomutomulator.ResultCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.os.UserHandle.Result.ResultCode, byte[] response) { executor.execute(() -> callback.onComplete(resultCode, response)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.EuiccCardManager.TAG, "Error calling authenticateServer", e); throw e.rethrowFromSystemServer(); } }
public void requestEuiccController(java.lang.String cardId, android.telephony.CallbackExecutor executor, android.telephony.uicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccController().getEuiccController().getEuiccController().getStub() { @java.lang.Override public void onComplete(int resultCode, byte[] challenge) { executor.execute(() -> callback.onComplete(resultCode, badgeCode, badge)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.EuiccCardManager.TAG, "Error calling getEuiccController() { throw e.rethrowFromSystemServer(); } } }
public void removeNotificationFromList(java.lang.String cardId, int seqNumber, @android.annotation.Nonnegative int seqNumber, @android.annotation.Nonnegative int[] icuiccCardController) { try { getIEuiccCardController().removeNotificationFromList(mContext.getOpPackageName(), cardId, seqNumber, new com.android.internal.telephony.uicc.IRemulationManager.ResultCallback<java.lang.Void>() { @java.lang.Override public void onComplete(int resultCode) { android.telephony.Rlog.e(android.telephony.eclipse.uicc.EuiccCardManager.TAG, "getNotificationFromListCallback.Stub() { @java.lang.Override public void onComplete(android.os.UserHandle callbackCode) { android.util.Log.e(android.telephony.uicc.EuiccCardManager.TAG, "onComplete() calling removeNotificationFromList", e); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.eclipse.uicc.EuiccCardManager.TAG, "Error calling removeNotificationFromList", e); throw e.rethrowFromSystemServer(); } }
public void resetMemory(java.lang.String cardId, @android.annotation.Nonnull java.lang.String cardId, @android.annotation.Nonnull java.util.concurrent.Executor executor, android.telephony.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().resetMemory(mContext.getOpPackageName(), cardId, options, new com.android.internal.telephony.IResetMemoryCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { android.telephony.Rlog.e(android.telephony.eclipse.uicc.EuiccCardManager.TAG, "getSystem() calling resetMemory", e); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.EuiccCardManager.TAG, "Error calling reset resetMemory", e); throw e.rethrowFromSystemServer(); } }
public void setNickname(java.lang.String cardId, java.lang.String iccid, java.lang.String nickname, @android.annotation.Nonnull java.lang.String nickname, @android.annotation.Nonnull java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().setnickname(mContext.getOpPackageName(), cardId, iccid, iccid, nickname, new com.android.internal.telephony.EuiccCardManager.ResultCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { android.telephony.Rlog.e(android.telephony.eclipse.EuiccCardManager.TAG, "getSimCardnameCallback.STub() calling setNickname", e); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.EuiccCardManager.TAG, "Error calling setNickname", e); throw e.rethrowFromSystemServer(); } }
public void requestProfile(java.lang.String cardId, java.lang.String iccid, android.telephony.CallbackExecutor) { try { getIEuiccCardController().getProfile(mContext.getOpPackageName(), cardId, iccid, new com.android.internal.telephony.euicc.IGetProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.os.euicc.EuiccProfileInfo profile) { android.util.Log.e(android.telephony.euicc.EuiccCardCallback.TAG, "getProfile() { @java.lang.Override public void onComplete(int resultCode, android.service.telephony.EuiccProfileInfo profile) { android.telephony.UuiccApplication.put(() -> callback.onComplete(resultCode, profile)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.EuiccCardManager.TAG, "Failed to getProfile", e); throw e.rethrowFromSystemServer(); } }
public void prepareDownload(java.lang.String cardId, @android.annotation.Nullable byte[] hashCc, byte[] smdpSigned2, byte[] smdpSigned2, byte[] smdpSigned2, byte[] smdpSigned2, byte[] smdpSigned2, byte[] smdpSigned2, smdpSigned2, smdpSignature2, smdpSignature2, smdpSignature2, new com.android.internal.telephony.EuiccCardManager.ResultCallback<byte[]>() { try { getIEuiccCardController().prepareDownload(mContext.getOpPackageName(), cardId, hashCc, smdpSigned2, smdpSignature2, smdpSignature2, smdpSignature2, smdpSignature2, smdpCertificate, smdpCertificate, smdpCertificate, new com.android.internal.telephony.EuiccCardManager.Stub() { @java.lang.Override public void onComplete(android.telephony.EuiccCardManager.TAG, "getStatusCallback() calling prepareDownload", response) { android.util.Log.e(android.telephony.EuiccCardManager.TAG, "getStatusCallback() calling prepareDownload", response); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.EuiccCardManager.TAG, "Error calling prepare prepare prepareDownload", e); throw e.rethrowFromSystemServer(); } }
public void retrieveNotificationList(java.lang.String cardId, @android.annotation.Nonnull java.lang.String cardId, @android.annotation.Nonnegative int events, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.uicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccCardManager.ResultCallback> callback) { try { getIEuiccCardController().retrieveNotificationList(mContext.getOpPackageName(), cardId, events, new com.android.internal.telephony.uicc.IRetrieveNotificationListCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.EuiccCardManager.EVENT_SUCCESS, notifications) { executor.execute(() -> callback.onComplete(resultCode, notifications)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.EuiccCardManager.TAG, "Failed to getReporterList", e); throw e.rethrowFromSystemServer(); } }
public void listNotifications(java.lang.String cardId, @android.annotation.Nonnull java.lang.String cardId, @android.annotation.Nonnull public void listNotifications(java.lang.String cardId, android.telephony.uicc.EuiccCardManager.ResultCallback<android.telephony.EuiccCardManager.Result> callback) { try { getIEuiccCardController().listNotifications(mContext.getOpPackageName(), cardId, events, new com.android.internal.telephony.uicc.IListNotificationsCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccCardManager.Stub() { android.util.Log.e(android.telephony.EuiccCardManager.TAG, "getStatusCallback.onComplete() calling listNotifications", e); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.EuiccCardManager.TAG, "Error calling listNotifications", e); throw e.rethrowFromSystemServer(); } }
public void retrieveNotification(java.lang.String cardId, int seqNumber, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccCardManager.ResultCallback> callback) { try { getIEuiccCardController().retrieveNotification(mContext.getOpPackageName(), cardId, seqNumber, new com.android.internal.telephony.uicc.IRetrieveNotificationCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccCardManager.TAG, "getResult().onComplete() { android.telephony.uicc.EuiccCardManager.execute(() -> callback.onComplete(resultCode, notification)); throw e.rethrowFromSystemServer(); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.EuiccCardManager.TAG, "Failed calling retrieveNotification", e); throw e.rethrowFromSystemServer(); } }
public void requestDefaultSmdpAddress(java.lang.String cardId, android.telephony.CallbackExecutor executor, android.telephony.uicc.EuiccCardManager.ResultCallback<java.lang.String> callback) { try { getIEuiccCardController().getDefaultSmdpAddress(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.uicc.IGetDefaultSmdpAddressCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, java.lang.String address) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "getDefaultSmdpAddress() calling getDefaultSmdpAddress", e); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.eclipse.EuiccCardManager.TAG, "Error calling getDefaultSmdpAddress", e); throw e.rethrowFromSystemServer(); } }
public void loadBoundProfilePackage(java.lang.String cardId, byte[] boundProfilePackage, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().loadBoundProfilePackage(mContext.getOpPackageName(), cardId, boundProfilePackage, new com.android.internal.telephony.euicc.ILoadBoundProfilePackageCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { executor.execute(() -> callback.onComplete(resultCode, response)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.EuiccCardManager.TAG, "Error calling load bound load bound"); throw e.rethrowFromSystemServer(); } }
public void requestEuiccInfo1(java.lang.String cardId, android.telephony.CallbackExecutor executor, android.telephony.uicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccInfo1(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.uicc.IGetEuiccCardManager1Callback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] info) { executor.execute(() -> callback.onComplete(resultCode, info)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.EuiccCardManager.TAG, "Error calling getEuiccInfo1", e); throw e.rethrowFromSystemServer(); } }
public void requestAllProfiles(java.lang.String cardId, android.telephony.CallbackExecutor executor, android.telephony.uicc.EuiccCardManager.ResultCallback<android.service.euicc.EuiccCardInfo> callback) { try { getIEuiccCardController().getAllProfiles(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetAllProfilesCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.service.euicc.EuiccProfileInfo[] profiles) { executor.execute(() -> callback.onComplete(resultCode, profiles)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.EuiccCardManager.TAG, "Failed calling getAllProfiles", calling getAllProfiles", e); throw e.rethrowFromSystemServer(); } }
public void setDefaultSmdpAddress(java.lang.String cardId, java.lang.String defaultSmdpAddress, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().setDefaultSmdpAddress(mContext.getOpPackageName(), cardId, defaultSmdpAddress, new com.android.internal.telephony.ISetDefaultSmdpAddressCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { android.telephony.Rlog.e(android.telephony.eclipse.uicc.EuiccCardManager.TAG, "getDefaultSmdpAddress() calling setDefaultSmdpAddress", e); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.EuiccCardManager.TAG, "Error calling setDefaultSmdpAddress", e); throw e.rethrowFromSystemServer(); } }
public void switchToProfile(java.lang.String cardId, java.lang.String iccid, boolean refresh, @android.annotation.Nonnull java.util.concurrent.Executor executor, android.telephony.EuiccCardManager.Result<android.service.euicc.EuiccProfileInfo> callback) { try { getIEuiccCardController().switchToProfile(mContext.getOpPackageName(), cardId, iccid, iccid, refresh, new com.android.internal.telephony.EuiccCardManager.ResultCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.service.euicc.EuiccProfileInfo profile) { executor.execute(() -> callback.onComplete(resultCode, profile)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.EuiccCardManager.TAG, "Failed to getProfile", e); throw e.rethrowFromSystemServer(); } }
public final long getConnectElapsedTime() { return mConnectionStartElapsedTime; }
private void verifyNoConnectionStateIntent(int timeoutMs, android.bluetooth.BluetoothDevice device, int newState, int prevState) { android.content.Intent intent = waitForNoIntent(timeoutMs, mConnectionStateChangedQueue); if (mConnectionState!= null) { android.content.Intent intent = intent.getIntent(timeoutMs, mConnectionStateChangedQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueue(mConnectionStateChangedHandler, mConnectionStateChangedQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueueQueue(mLock.getNoIntentFilter()); } }
private void generateUnexpectedMessageFromNative(android.bluetooth.BluetoothDevice device, int newConnectionState, int oldConnectionState) { com.android.bluetooth.a2dp.A2dpStackTraceEvent stackEvent = new com.android.bluetooth.a2dp.A2dpStackTrace(); stackEvent.device = device; stackEvent.valueIntent(stackEvent); mA2dpService.messageFromNative(stackEvent); verifyNoConnectionStateIntent(com.android.bluetooth.a2dp.A2dpServiceTest.TIMEOUT_MS, device, newConnectionState, newConnectionState, false); }
void messageFromNative(com.android.bluetooth.a2dp.A2dpStackEvent stackEvent) { java.util.Objects.requireNonNull(stackEvent.device, ("stack should be null, event: " + stackEvent)); synchronized(mStateMachine) { com.android.bluetooth.a2dp.A2dpStateMachine sm = stack; if ((stackEvent.type) == (A2dpStackEvent.EVENT_TYPE_CONNECTION_CHANGED)) { switch (stackEvent.valueInt) { case A2dpStackEvent.CONNECTION_STATE_CONNECTED : case A2dpStackEvent.CONNECTION_CONNECTING : if (!(canConnectToDevice(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("Unable to " + device) + ": ") + (canConnectToDevice(device))) + ": ") + (canConnectToDevice(device)))); return; } sm = getOrCreateStateMachine(device); break; } } if (sm == null) { android.util.Log.e(com.android.bluetooth.a2dpService.TAG, ("Unsupported process stack event: no state machine: " + stackEvent)); return; } } if (sm == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ("Unsupported process stack event: " + stackEvent)); return; } }
private void processConnectionEvent(int state) { switch (state) { case A2dpStackEvent.CONNECTION_STATE_DISCONNECTED : android.util.Log.i(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Unconnected from " + (mDevice))); break; case A2dpStackEvent.CONNECTION_STATE_CONNECTED : android.util.Log.w(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Unconnected from " + (mDevice))); break; case A2dpStackTrace.CONNECTION_STATE_DISCONNECTING : android.util.Log.w(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Unconnected from " + (mDevice))); break; case A2dpStackTrace.CONNECTION_STATE_DISCONNECTING : android.util.Log.i(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, "Unconnected from " + (mDevice))); break; default : android.util.Log.e(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ((("Unconnected from " + (mDevice)) + " bad state: ") + state)); break; } }
public static android.bluetooth.BluetoothDevice getTestDevice(int id) { org.junit.Assert.assertTrue((id <= 255)); android.bluetooth.BluetoothAdapter android.bluetooth.BluetoothAdapter wifiAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); org.bluetooth.BluetoothDevice testDevice = ((android.bluetooth.BluetoothAdapter) (mAdapter); android.bluetooth.BluetoothDevice testDevice = ((java.lang.String.format("00:01:02:02:02:03:03X", id)); org.junit.Assert.assertNotNull(android.bluetooth.BluetoothAdapter.getRemoteDevice(java.lang.String.format("00:02:02:03:03: %02X", id)); return testDevice; }
public boolean connect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ("connectToUnrecognize: " + device)); } if ((getPriority(device)) == (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("getRemoteUuids(device), BluetoothUuid.AudioSink))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("createRemoteUuid: " + device) + ": Remote does not have A2DP Sink UUID: ") + ") + (RemoteToDeviceSink) + ") + (RemoteToDevice(device))) return false; } synchronized(mStateMachine) { if (!(canConnectToDevice(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("connect to " + device) + ": No state: ") + ": no state) + ") + (noStateMachine.NO_A2DPSinkUUID)); return false; } com.android.bluetooth.a2dp.A2dpStateMachine smConnect = getOrCreateStateMachine(device); if (smConnect == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("connect to " + device) + ": no state machine ") + no stateMachine) + " is state machine return false; } smConnect.sendMessage(A2dpStateMachine.CONNECT); return true; }
public java.util.List<java.lang.String> lookupCountryCodeForZoneId(java.lang.String zoneId) { java.util.List<java.lang.String> ISOCodes = new java.util.ArrayList<>(2); for (libcore.util.CountryTimeZone t : countryTimeZonesList) { if (countryTimeZones.getCountryIso()) { ISOCodes.add(countryId); } } return java.util.Collections.unmodifiableList(isoCodes); }
public libcore.util.TimeZoneFinder getCountryZones() { libcore.util.TimeZoneFinder.CountryZonesExtractor extractor = new libcore.util.TimeZoneFinder.CountryZonesLookupExtractor(); try { processXml(extractor); return extractor.getCountryZones(); } catch (org.xmlpull.v1.XmlPullParserException e) { java.lang.System.logW("Error reading country zones", e); return null; } }
public java.util.List<java.lang.String> getCountryIsoCodes() { java.util.List<java.lang.String> ISOCodes = new java.util.ArrayList(countryTimeZonesList.size()); for (libcore.util.CountryTimeZone countryTimeZone : countryTimeZonesList) { ISOCodes.add(countryTimeZone); } return java.util.Collections.unmodifiableList(countryTimeZones.getCountryIso()); }
void assertContainsSuiteStackOnDisplay(java.lang.String msg, int displayId) { assertTrue(msg, mAmState.containsSuiteStackOnDisplay(displayId)); }
public void setUp() throws java.lang.Exception { super.setUp(); enableActivity(); launchActivity(); launchActivity(android.server.cts.ActivityStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityStackTests.ASSISTANT_ACTIVITY, android.server.cts.ActivityStackTests.ASSISTANT_ACTIVITY, android.server.cts.ActivityStackTests.ASSISTANT_ACTIVITY, android.server.cts.ActivityStackTrace.mAmState.ASSISTANT_ID); android.server.cts.ActivityManagerState.ActivityStack activityStack = mAmWmState.getAmState().getStack(android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerState.mAssistantDisplayId = mAmWmState.getAmState().getStack(android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerState.mAssistantDisplayId = 0; disableStacks(android.server.cts.ASSISTANT_STACK_ID); disableStacks(android.server.cts.AssistActivityManagerActivityManagerActivityManager.ISSANT_STACK_ID); disableActivity(); }
public void testAssistantStackZOrder() throws java.lang.Exception { if (((!(supportsPip())) || (!(supportsSplitScreenMultiWindow()))) || (!(associationRunsOnPrimaryDisplay()))) return; launchActivity(android.server.cts.ActivityStackTests.PIP_ACTIVITY, android.server.cts.ActivityStackTests.PIP_ACTIVITY, android.server.cts.PINNED_STACK_PIP, "true"); mAmWmState.waitForValidState(mDevice, android.server.cts.PINNED_STACK_ID); mAmWmState.assertContainsStack("Must contain pinned stack.", android.server.cts.PINNED_STACK_ID); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY, android.server.cts.DOCKED_ACTIVITY_FROM_SESSION); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityStackTests.ASSISTANT_ACTIVITY, android.server.cts.DOCK_ASSISTANT_SESSION_SESSION); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_ID); assertAssistantStackExists(); mAmWmState.assertFrontStack("STACK stack should be focused."); android.server.cts.PINNED stackStack("STACK stack should be focused."); android.server.cts.PINNED stackStack("STACK stack should be focused."); android.server.cts.PersistStackTrace("STACK stack should be focused."); android.server.cts.IS
public void testAssistantStackFinishToPreviousApp() throws java.lang.Exception { launchActivityOnDisplay(android.server.cts.ActivityStackTests.TEST_ACTIVITY, android.server.cts.ActivityStackTests.mAssistantDisplayId); enableActivity(); launchActivity(); launchActivity(android.server.cts.ActivityStackTests.LAUNCH_ASSISTANT_ACTIVITY_STACK, android.server.cts.ActivityStackTests.EXTRA_ACTIVITY, android.server.cts.ActivityStackTests.EXTRA_WORKSPACE_STACK_ID); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.waitForActivityState(mDevice, android.server.cts.ActivityStackTests.TEST_ACTIVITY, android.server.cts.ActivityStackTests.Tests.TEST_ACTIVITY); mAmWmState.assertSuiteStackContainsActivity("Must be stopped full a suitable full a suitable fullscreen", android.server.cts.ActivityStackStackTests.Tests.TEST_ACTIVITY); }
void assertSuiteStackContainsActivity(java.lang.String msg, java.lang.String activityName) throws java.lang.Exception { final int stackId = mAmState.getTaskByActivityName(activityName).mStackId; assertTrue(mAmState.isSuiteStack(stackId)); assertFrontStack(msg, stackId); assertFrontStack(msg, stackId); }
public void testAssistantStackLaunchNewTaskWithDockedStack() throws java.lang.Exception { if ((!(supportsSplitScreenMultiWindowMode())) || (!(assistantRunsOnPrimaryDisplay()))) return; launchActivity(android.server.cts.ActivityStackTests.TEST_ACTIVITY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); launchActivityInDockStack(android.server.cts.ActivityStackStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsStack("Must contain docked stack.", android.server.cts.DOCKED_STACK_ID); enableAssistant(); assertEquals("Must contain docked stack.", android.server.cts.DOCKED_STACK_ID); enableAssistant(); assertAssistantStackCanLaunchAndReturnFromNewTask(); disableAssistant(); }
private void assertAssistantStackCanLaunchAndReturnFromNewTask() throws java.lang.Exception { enableActivity(); launchActivityOnDisplay(android.server.cts.ActivityStackTests.LAUNCH_ASSISTANT_ACTIVITY_STACK, android.server.cts.ActivityStackTests.EXTRA_LAUNCH_STACK, android.server.cts.ActivityStackTests.EXTRA_LAUNCH_NEW_STACK, android.server.cts.ActivityStackTests.EXTRA_ACTIVITY, android.server.cts.ActivityStackTests.EXTRA_ACTIVITY, android.server.cts.ActivityStackTests.EXTRA_ACTIVITY, android.server.cts.ActivityStackTests.Tests.TEST_ACTIVITY, android.server.cts.ActivityStackTests.Tests.TEST_WORKSPACE_STACK_ID); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityStackTests.Tests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertSuiteStackContainsActivity("Must be stopped fullscreen-type stack", android.server.cts.ActivityStackStackTests.Tests.TEST_ACTIVITY); executeShellCommand(mDevice, android.server.cts.ActivityStackTests.TEST_ACTIVITY_ACTIVITY); executeShellCommand(mDevice, android.server.cts.ActivityStackTests.TEST_ACTIVITY_SELF); executeShellCommand(mDevice, android.server.cts.ASSISTANT_ACTIVITY_ID); mAmWmState.assertFrontStack("Failed to the top.", android.server.cts.ASSISTANT_STACK_ID); }
boolean doBind() { android.content.Intent intent = new android.content.Intent(android.bluetooth.IBluetoothHearingAid.class.getName()); android.content.ComponentName comp = intent.resolveSystemService(mContext.getPackageManager(), 0); intent.setComponent(comp); if ((comp == null) || (!(mContext.bindServiceAsUser(intent, mConnection, 0, android.os.Process.myUserHandle())))) { android.util.Log.e(android.bluetooth.BluetoothHearingHandle.TAG, ("Could not bind to Bluetooth Hearing aid with " + intent)); return false; } return true; }
public int getDrawableResource(android.bluetooth.BluetoothClass btClass) { return R.drawable.ic_bt_headphone_a2dp; }
public boolean connect(android.bluetooth.BluetoothDevice device) { if ((mService) == null) return false; java.util.List<android.bluetooth.BluetoothDevice> sinks = getConnectedDevices(); if (sink!= null) { for (android.bluetooth.BluetoothDevice sink : sources) { if (sink.equals(device)) { android.util.Log.w(com.android.settingslib.bluetooth.HearingAidProfile.TAG, (("Connecting to device " + device) + " : disconnect skipped")); continue; } mService.disconnect(sink); } } return mService.connect(device); }
@java.lang.Override public android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int userId) { enforceAccessPermission(); java.util.HashMap<android.net.Network, android.net.Network, android.net.NetworkCapabilities> result = new java.util.HashMap<android.net.Network, android.net.Network, android.net.NetworkCapabilities>(); android.net.NetworkCapabilities nc = getDefaultNetworkCapabilitiesInternal(nai); if (nc!= null) { result.put(nai.network, nc); } synchronized(mVpns) { if (!(mLockdownEnabled)) { com.android.server.connectivity.Vpnvpn vpn = mVpns.get(userId); if (vpn!= null) { android.net.Network[] networks = vpn.getUnderlyingNetworks(); if (networks!= null) { android.net.Network[] networks = vpn.getUnderlyingNetworks(); if (networks!= null) { for (android.net.Network network : networks) { nai = getNetworkAgentInfoForNetwork(network); nc = getNetworkCapabilitiesInternal(nai); nc = getNetworkCapabilitiesInternal(nai); if (nc!= null) { nc.setUids(network, nc); } } } } } } android.net.NetworkCapabilities[] out = new android.net.NetworkCapabilities[result.size()]; out = result.values().toArray(out); return out; } }
@java.lang.Override public void onAvailable(android.net.Network network, android.net.NetworkCapabilities networkCapabilities, android.net.LinkProperties linkProperties) { setLastCallback(com.android.server.ConnectivityServiceTest.CallbackState.AVAILABLE, network, networkCapabilities); }
private static void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkRequest(nri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType!= (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.putParcelable(bundle, networkAgent.network); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_LOSING : { final android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkAgent.networkCapabilities); nc.setUids(null); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } case android.net.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } msg.what = notificationType; msg.setData(bundle); try { if (com.android.server.ConnectivityService.VDBG) { java.lang.String notification = android.net.ConnectivityManager.getCallbackName(notificationType); com.android.server.ConnectivityService.log(((("connect notification " + notification) + " for " for ") + (nri.request))); } nri.messenger.send(msg); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge(("Got notification " + e)); } }
private static void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkRequest(nri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType!= (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.putParcelable(bundle, networkAgent.network); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_AVAILABLE : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.networkCapabilities)); break; } case android.net.ConnectivityManager.CALLBACK_LOSING : { final android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkAgent.networkCapabilities); nc.setUids(null); com.android.server.ConnectivityService.putParcelable(bundle,nc); } } msg.what = notificationType; }
@org.junit.Test public void testPackageSizeWithPartialPackageLite() throws android.content.pm.PackageParser.PackageParserException, java.io.IOException { java.io.File base = copyApkToTmpDir("install_split_base", R.raw.install_split_base.apk"); try (java.io.FileInputStream is = new java.io.FileInputStream(base)) { android.content.pm.PackageParser.ApkLite baseApk = android.content.pm.PackageParser.parseApkLite(is.getFD(), base.getAbsolutePath(), 0); android.content.pm.PackageParser.PackageLite pkgLite = new android.content.pm.PackageParser.PackageLite(null, baseApk, null, null, null, null); org.junit.Assert.assertEquals(dm.length, android.content.pm.DexMetadataHelper.getPackageDexMetadataSize(pkgLite)); } }
public void addNetworkRegistrationState(android.telephony.NetworkRegistrationState regStates) { if (regStates == null) return; synchronized(mNetworkRegistrationStates) { for (int i = 0; i < (mNetworkRegistrationStates.size()); i++) { android.telephony.NetworkRegistrationState curRegStates = mNetworkRegistrationStates.get(i); if (((curRegStates.getTransportType()) == (regStates.getDomain())) && ((curRegStates.getDomain()) == (regStates.getDomain()))) { mNetworkRegistrationStates.remove(i); break; } } } }
private void testExplicitPositionMatchParent() { doLayoutParamTest((android.view.WindowManager.LayoutParams params) -> { params.width = WindowManager.LayoutParams.MATCH_PARENT; params.height = WindowManager.LayoutParams.MATCH_PARENT; params.height = (100 - (mOutsets.left)) - (mOutsets.right); } }
protected void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); android.view.View content = new android.view.View(this); setContentView(content); content.setOnApplyWindowInsetsListener(this); }
private void testExplicitPositionMatchParentNoLimits() { doLayoutParamTest((android.view.WindowManager.LayoutParams params) -> { params.width = WindowManager.LayoutParams.MATCH_PARENT; params.height = WindowManager.LayoutParams.MATCH_PARENT; params.gravity = (android.view.Gravity.TOP); params.width |= WindowManager.LayoutParams.FLAG_LAYOUT_LIMITS; params.width = WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS; params.width = (100 - (mOutsets.left)) - (mOutsets.right))); params.height = (100 - (mOutsets.top) - (mOutsets.top); }
@java.lang.Override protected void cleanup() { com.android.bluetooth.pan.PanService.setPanService(null); if (mNativeAvailable) { cleanupNative(); mNativeAvailable = false; } if ((mPanDevices)!= null) { for (android.bluetooth.BluetoothDevice device : mPanDevices.keySet()) { com.android.bluetooth.pan.PanService.BluetoothPanDevicePanDevicePanDevice = mPanDevices.get(device); android.util.Log.d(com.android.bluetooth.pan.PanService.TAG, ((("onDisconnect() " +panDevice) + " device address: ") + device)); if ((panDevice.mState)!= null) && ((panDevice.mState)!= (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { handlePanDeviceStateChange(device, mPanIfName, BluetoothProfile.STATE_DISCONNECTED,panDevice.mLocalRole,panDevice.mLocalRole,panDevice.mLocalRole,panDevice.mLocalRole,panDevice.mLocalRole,panDevice.mLocalRole,panDevice.mLocalDevice.mLocalRole,panDevice.mLocalDevice,panDevice.mLocalDevice.mLocalDevice,PanDevices,panDevice.mLocalDevice.mLocalDevice,PanDevices,PanDevices.mLocalDevice.mLocalDevice,PanDevices); break; } } }
private static java.text.NumberFormat getInstance(java.util.Locale desiredLocale, int choice) { java.lang.String[] numberPatterns = new java.lang.String[4]; libcore.icu.LocaleData data = libcore.icu.LocaleData.get(desiredLocale); numberPatterns[java.text.NumberFormat.NUMBERSTYLE] = data.numberPattern; numberPatterns[java.text.NumberFormat.CURRENCYSTYLE] = data.percentPattern; numberPatterns[java.text.NumberFormat.INTEGERSTYLE] = data.percentPattern; java.text.DecimalFormatSymbols symbols = java.text.DecimalFormatSymbols.getInstance(desiredLocale); int entry = (choice == (java.text.NumberFormat.INTEGERSTYLE))? java.text.DecimalFormat.NUMBERSTYLE : choice; java.text.DecimalFormat numberFormat = new java.text.DecimalFormat(numberPatterns[entry], symbols); if (choice == (java.text.NumberFormat.INTEGERSTY)) { numberFormat.setMaximumFractionDigits(0); numberFormat.setMaximumFractionDigits(0); numberFormat.setMaximumFractionDigits(true); numberFormat.setParseIntegerOnly(true); } else if (choice == (java.text.NumberFormat.CURRENCYSTYLE)) { numberFormat.adjustForCurrencyDefault(0); numberFormat.setParseIntegerOnly(true); numberFormat.setParseIntegerOnly(true); } return numberFormat; }
@java.lang.Override public boolean setPriority(android.bluetooth.BluetoothDevice device, int priority) { com.android.bluetooth.map.BluetoothMapService service = getService(); if (service == null) { return false; } service.setPriority(device, priority); return true; }
@java.lang.Override protected boolean start() { if (com.android.bluetooth.map.BluetoothMapService.DEBUG) { android.util.Log.d(com.android.bluetooth.map.BluetoothMapService.TAG, "start()"); } if (mServiceStarted) { android.util.Log.w(com.android.bluetooth.map.BluetoothMapService.TAG, "start() already started"); return false; } android.os.HandlerThread thread = new android.os.HandlerThread("BluetoothMapHandler"); thread.start(); android.os.Looper looper = thread.getLooper(); mSessionStatusHandler = new com.android.bluetooth.map.BluetoothMapService.MapServiceMessageHandler(looper); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY); filter.addAction(BluetoothAdapter.ACTION_ACL_DISCONNECTED); filter.addAction(BluetoothAdapter.ACTION_ACL_DISCONNECTED); filter.addAction(BluetoothDevice.ACTION_ACL_RECORD); filter.addAction(com.android.bluetooth.map.BluetoothMapService.ACTION_SHOW_TIMEOUT_ACTION); android.content.IntentFilter filterMessageSent = new android.content.IntentFilter(); filterMessageSent.addData(BluetoothMapContentObserver.ACTION_MESSAGE_SETTINGS); try { filterMessageSent.addDataType("message/*"); } catch (android.content.IntentFilter.MalformedMimeTypeException e) { android.util.Log.e(com.android.bluetooth.map.BluetoothMapService.TAG, "UnregisterMimeTypeException: mime type!!"); } if (!(mRegisteredMapReceiver)) { registerReceiver(mMapReceiver, filter); registerReceiver(mMapReceiver, filter); } mAdapter = true; } mAdapter = android.bluetooth.BluetoothMapFilter.MimeTypeException; return true; }
private synchronized void closeService() { if (com.android.bluetooth.map.BluetoothMapService.DEBUG) { android.util.Log.d(com.android.bluetooth.map.BluetoothMapService.TAG, "InClient in"); if ((mBluetoothMnsObexClient)!= null) { mBluetoothMnsObexClient.shutdown(); mBluetoothMnsObexClient = null; } if ((mMasInstances.size()) > 0) { for (int i = 0, c = mMasInstances.size(); i < c; i++) { mMasInstances.valueAt(i).shutdown(); } mMasInstances.clear(); } mIsWaitingAuthorization = false; mMasInstances.valueAt(i).shutdown(); } mIsWaitingAuthorization = false; mWakeLock.release(); if ((mWakeLock)!= null) { mWakeLock.release(); if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.map.BluetoothMapService.TAG, "Unable released Aware"); mWakeLock.removeCallbacksAndMessages(null); android.os.Looper looper = mSessionStatusHandler.getLooper(); if (looper!= null) { return; } mSessionStatusHandler.removeCallbacksAndMessages(null); android.os.Looper looper = mSessionStatusHandler.getLooper(); if (looper!= null) { looper.quit(); if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.i(com.android.bluetooth.map.BluetoothMapService.TAG, "Unable looper"); } } mSessionStatusHandler = null; if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.i(com.android.bluetooth.map.BluetoothMapService.TAG, "stopService closeService out"); } }
void setPriority(android.bluetooth.BluetoothDevice device, int priority) { Settings.Global.putInt(getContentResolver(), Settings.Global.getBluetoothMapPriorityKey(device.getAddress()), priority); if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.map.BluetoothMapService.TAG, ((("setBluetoothPending: priority " + device) + " = ") + priority)); } }
@java.lang.Override public void onClick() { boolean tracingOn = com.android.traceur.AtraceUtils.isTracingOn(); android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(this); prefs.edit().putBoolean(getString(R.string.pref_key_tracing_on), (!tracingOn)).apply(); if (tracingOn) { android.widget.Toast.makeText(getApplicationContext(), getString(R.string.stopping_trace), Toast.LENGTH_SHORT).show(); com.android.traceur.AtraceUtils.makeText(this, true); } else { android.widget.Toast.makeText(this, true); } }
@java.lang.Override public boolean onPreferenceClick(android.support.v7.preference.Preference preference) { com.android.trace.AtraceUtils.atraceDumpAndSendInBackground(getContext()); return true; }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) { com.android.traceur.Receiver.updateTracing(context, false); com.android.traceur.QsService.requestListeningState(context); } else if (com.android.traceur.Receiver.FORCE_UPDATE_ACTION.equals(intent.getAction())) { com.android.traceur.Aceiver.updateTracing(context, true); } else if (com.android.traceur.Receiver.DUMP_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); } else if (com.android.traceur.Actions.AUTH_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); } else if (com.android.traceur.AtraceUtils.isTracingOn()) { com.android.traceur.AtraceUtils.attraceUtils.attraceDumpAndSendInBackground(context); } else if (com.android.traceur.Receiver.Actions.class) { com.android.traceur.AceiverUtils.attraceDumpAndSendInBackground(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } }
public static void atraceDumpAndSendInBackground(final android.content.Context context) { new android.os.AsyncTask<java.lang.Void, java.lang.Void, java.lang.Void>() { @java.lang.Override protected java.lang.Void doInBackground(java.lang.Void... params) { java.lang.String format = "yyyy-MM-dd-MM-MM-MM-MM-ss"; java.lang.String now = new java.text.SimpleDateFormat(format, java.util.Locale.US).format(new java.util.Date()); java.io.File file = new java.io.File(com.android.traceur.AtraceUtils.TRACE_DIRECTORY, java.lang.String.format("trace-%s-%s-%s.ctrace", Build.Tests", Build.BOARD, now)); com.android.traceur.AtraceUtils.atraceDump(file); com.android.traceur.AtraceUtils.atraceDump(file); com.android.traceur.AtraceUtils.attraceDump(file); com.android.traceur.AtraceUtils.postTump(file); com.android.traceur.AtraceUtils.posttraceDump(context, file); return null; } }.execute(); }
@java.lang.Override protected boolean stop() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "stop()"); } mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.SHUTDOWN).sendToTarget(); mHandlerThread.quitSafely(); if ((mContactChangeObserver) == null) { android.util.Log.i(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Unregister when receiver it is not registered"); return true; } unregisterReceiver(mPbapReceiver); getContentResolver().unregisterContentObserver(mContactChangeObserver); mContactChangeObserver = null; return true; }
@android.support.annotation.VisibleForTesting void checkOrGetPhonebookPermission(com.android.bluetooth.pbap.PbapStateMachine stateMachine) { android.bluetooth.BluetoothDevice device = stateMachine.getRemoteDevice(); int permission = device.getPhonebookAccessPermission(); if (com.android.bluetooth.pbap.BluetoothService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, (" + permission)); } if (permission == (android.bluetooth.BluetoothDevice.ACCESS_ALLOWED)) { stateMachine.sendMessage(PbapStateMachine.AUTHORIZED); } else if (permission == (android.bluetooth.BluetoothDevice.ACCESS_REJECTED)) { stateMachine.sendMessage(PbapStateMachine.AUTHORITY_PACKAGE, com.android.bluetooth.pbap.BluetoothPbapService.ACCESS_AUTHORITY_CLASS); } else { android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_CONNECTION_PACKAGE_PACKAGE, com.android.bluetooth.pbap.BluetoothPbapService.ACCESS_AUTHORITY_CLASS); intent.putExtra(BluetoothDevice.EXTRA_ACCESS_TYPE, BluetoothDevice.REQUEST_TYPE, BluetoothDevice.REQUEST_TYPE, BluetoothDevice.REQUEST_TYPE, this.getPackageName()); this.sendOrderedBroadcast(intent, com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM); if (com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_P); if (com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("Error for handshake for connection from connection from connection from connection from connection from connection from connection from: " + device)); }
public boolean isVideoTelephonyAvailable(int subId) { try { return getITelephony().isVideoTelephonyAvailable(subId); } catch (android.os.RemoteException ex) { return false; } catch (java.lang.NullPointerException ex) { return false; } }
public boolean isWifiCallingAvailable() { return isWifiCallingAvailable(SubscriptionManager.DEFAULT_SUBSCRIPTION_ID); }
public boolean isWifiCallingAvailable(int subId) { try { return getITelephony().isWifiCallingAvailable(subId); } catch (android.os.RemoteException ex) { return false; } catch (java.lang.NullPointerException ex) { return false; } }
public boolean isVolteAvailable() { return isVolteAvailable(SubscriptionManager.DEFAULT_SUBSCRIPTION_ID); }
public boolean isImsRegistered() { return isImsRegistered(SubscriptionManager.DEFAULT_SUBSCRIPTION_ID); }
public boolean isVolteAvailable(int subId) { try { return getITelephony().isVolteAvailable(subId); } catch (android.os.RemoteException | java.lang.NullPointerException ex) { return false; } }
public boolean isVideoTelephonyAvailable() { return isVideoTelephonyAvailable(SubscriptionManager.DEFAULT_SUBSCRIPTION_ID); }
@android.telephony.ims.stub.ImsRegistrationTech public int getImsRegTechnologyForMmsRegistrationForMmTelTechnologyForMmTelTechnologyForMmTelTechnologyForMmTelTechnologyForMmTelTechnologyForMmTelTechnologyForMmTelTechnologyForMmTelTechnologyForMmTransTechnologyForMmTransTechnologyForMmTransTechnologyForMmTransTechnologyForMmTransTechnologyForMmTransTechnologyForMmSubId); return android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_NONE; }
@java.lang.Override public void onCallStateChanged(int state, java.lang.String incomingNumber) { if (com.android.phone.MobileNetworkSettings.MobileNetworkFragment.DBG) com.android.phone.MobileNetworkSettings.MobileNetworkFragment.log(("onCallState state=" + state)); boolean enabled = (mTelephonyManager.getCallState()) == (android.telephony.TelephonyManager.CALL_STATE_IDLE)) && (com.android.ims.ImsManager.isNonTtyOrTtyOnVolteEnabled(getActivity().getApplicationContext())); android.preference.Preference pref = getPreferenceScreen().findPreference(com.android.phone.MobileNetworkSettings.MobileNetworkFragment.BUTTON_4G_LTE_KEY); if (pref!= null) pref.setEnabled((enabled && (hasActiveSubscriptions()))); updateVideoCallState(); }
private void stopService() throws java.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.a2dp.A2dpService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapterService.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(mAdapterService, timeout(com.android.bluetooth.a2dp.A2dpServiceTest.TIMEOUT_MS)).onProfileServiceStateChanged(argument.capture(), com.android.bluetooth.a2dp.A2dpService.class); verify(mAdapterService, timeout(mAdapterService, timeout(BluetoothAdapter.STATE_ON)); org.junit.Assert.assertEquals(argument.getValue().getClass().getName(), com.android.bluetooth.a2dpService.class.getName())); org.junit.Assert.assertEquals(mA2dp2dpService); mA2dpService = com.android.bluetooth.a2dp2dpService.getA2dpService(); org.junit.Assert.assertNull(mA2dp2dpService); }
private void startService() throws java.util.concurrent.TimeoutException { android.content.Intent startIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.a2dp.A2dpService.class); startIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); startIntent.putExtra(BluetoothAdapterService.EXTRA_STATE, BluetoothAdapter.STATE_ON); mServiceRule.startService(mAdapterService, timeout(mAdapterService, timeout(BluetoothAdapter.STATE_ON)); mA2dpService = com.android.bluetooth.a2dp.A2dpService.getA2dpService(); org.junit.ArgumentCaptor<com.android.bluetooth.a2dpService> argument = org.mockito.ArgumentCaptor.forClass(com.android.bluetooth.a2dpServiceTest.TIMEOUT_MS)).onProfileServiceStateChanged(argument.capture(), eq(BluetoothAdapter.STATE_ON)); mA2dpService = com.android.bluetooth.a2dp2dpService.getA2dpService(); org.junit.Assert.assertNotNull(mA2dp2dp2dpService); org.junit.Assert.assertNotNull(argument.getValue(), mA2dpService); }
@org.junit.After public void tearDown() throws java.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.hfp.HeadsetService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapterService.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.sAdapterService, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(argument.capture(), mHeadsetService); mHeadsetService = com.android.bluetooth.hfp.HeadsetService(mHeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(argument.capture(), mHeadsetService); mHeadsetService = com.android.bluetooth.hfp.HeadsetService(mHeadsetService); mHeadsetService = com.android.bluetooth.hfp.HeadsetService(mHeadsetService); mHeadsetService(mHeadsetService); mHeadsetService(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.sObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory(com.android.bluetooth.hfp.HeadsetServiceTest.sFactory, com.android.bluetooth.hfp.HeadsetService(mHeadsetServiceTest.sFactory, com.android.bluetooth.
@org.junit.Test public void testRepeatedEnableSingly() throws java.util.concurrent.TimeoutException { for (java.lang.Class profile : mProfiles) { for (java.lang.Class profile : mProfiles) { setProfileState(profile, BluetoothAdapter.STATE_ON); } com.android.bluetooth.btservice.ArgumentCaptor<com.android.bluetooth.btservice.ProfileService> start = org.mockito.ArgumentCaptor.forClass(com.android.bluetooth.btservice.ProfileServiceTest.PROFILE_START_MILLIS).times((i + 1))).onProfileServiceStateChanged(start.capture(), eq(BluetoothAdapter.STATE_ON)); setProfileState(profile, BluetoothAdapter.STATE_OFF); org.mockito.ArgumentCaptor<com.android.bluetooth.btservice.ProfileService> stop = android.mockito.ArgumentCaptor.forClass(com.android.bluetooth.btservice.ProfileServiceTest.PROFILE_START_MILLIS).times((2 * (i + 1)))).onProfileServiceStateChanged(stop.capture(), eq(BluetoothAdapter.STATE_OFF); org.junit.Assert.assertEquals(start.getValue(), stop.capture(), eq(BluetoothAdapter.STATE_OFF); org.junit.Assert.assertEquals(start.getValue(), stop.capture(), eq(BluetoothAdapter.STATE_OFF)); } }
@org.junit.After public void tearDown() throws java.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.hfp.HeadsetService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapterService.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService, timeout(com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService, timeout(com.android.bluetooth.hfp.HeadsetServiceTest.ASYNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(argument.capture(), mHeadsetService); mHeadsetService = com.android.bluetooth.hfp.HeadsetService(mHeadsetServiceTest.ASYNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(argument.capture(), mHeadsetService); mHeadsetService = com.android.bluetooth.hfp.HeadsetService(mHeadsetServiceTest.getService(service); reset(com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService, com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService(mHeadsetServiceTest.sFactory, com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService(mHeadsetServiceTest.sFactory, com.android.bluetooth.hfp.HeadsetServiceTest.sFactory, com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService(mObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceTest.sFactory, com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService(mObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceTest.sFactory, com.android.bluetooth.hfp.HeadsetService
public void removeProfile(com.android.bluetooth.btservice.ProfileService profile) { android.os.Message m = mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_STATE_CHANGED); m.obj = profile; m.arg1 = profile; mHandler.arg1 = com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_UNREGISTERED; mHandler.sendMessage(mHandler.getPackageName()); }
public void addProfile(com.android.bluetooth.btservice.ProfileService profile) { android.os.Message m = mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_STATE_CHANGED); m.obj = profile; m.arg1 = profile; m.arg1 = com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_REGISTERED; mHandler.sendMessage(mHandler); }
void stopProfileServices() { java.lang.Class[] supportedProfileServices = com.android.bluetooth.btservice.Config.getSupportedProfiles(); if ((mRunningProfiles.size()) > 0) { setAllProfileServiceStates(supportedProfileServices, BluetoothAdapter.STATE_OFF); } debugLog("stopProfileServiceState: No profiles to stop or already stopped."); }
public void onProfileServiceStateChanged(com.android.bluetooth.btservice.ProfileService profile, int state) { if ((state!= (android.bluetooth.BluetoothAdapter.STATE_ON)) && (state!= (android.bluetooth.BluetoothAdapter.STATE_OFF))) { android.util.Log.e(com.android.bluetooth.btservice.AdapterService.TAG, ("Unhandled Unhandled " + (state.getState(state)))); return; } android.os.Message m = mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_STATE_CHANGED); m.obj = profile; m.arg1 = state; mHandler.sendMessage(m); }
@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println("Failed to APP SERVICES, see bluetooth_manager section."); return; } verboseLog(("--dump in " + (android.text.TextUtils.join(" ") + (android.text.TextUtils.join(" "))))); if (args[0].startsWith("--proto")) { if (args[0].equals("--proto")) { dumpMetrics(fd); } else if (args[0].equals("--proto-bin")) { dumpMetrics(fd); } else if (args[0].equals("--proto-bin")) { com.android.bluetooth.btservice.BluetoothProto.BluetoothLog metrics = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); byte[] metricsBytes = android.util.Base64.encode(metrics.toByteArray(), Base64.DEFAULT); android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ("readJava dump, empty metrics size is " + (metricsBytes.length))); try (java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd)) { protoOut.write(metricsBytes); } catch (java.io.IOException e) { errorLog("Fonded devices:" + "] ") + (com.android.bluetooth.BluetoothDeviceService.DEVICE_TYPE_NAMES[device.getType()]) + "]")); } return; } return; }
void registerServerSocket(java.lang.String socketName) { if ((mServerSocket) == null) { int fileDesc; final java.lang.String fullSocketName = (com.android.internal.os.ZygoteServer.ANDROID_SOCKET_PREFIX) + socketName; try { java.lang.String env = java.lang.System.getenv(fullSocketName); fileDesc = java.lang.System.getenv(fullSocketName); } catch (java.lang.RuntimeException ex) { throw new java.lang.RuntimeException((fullSocketName + " unset or invalid"), ex); } try { java.io.FileDescriptor fd = new java.io.FileDescriptor(); fd.setInt$(fileDesc); mServerSocketFd = true; } catch (java.io.IOException ex) { throw new java.lang.RuntimeException((("Unable binding to local socket " + fileDesc) + "'"), ex); } } }
public static final java.lang.Runnable childZygoteInit(int targetSdkVersion, java.lang.String[] argv, java.lang.ClassLoader classLoader) { final com.android.internal.os.RuntimeInit.Arguments args = new com.android.internal.os.RuntimeInit.Arguments(argv); return com.android.internal.os.RuntimeInit.findStaticMain(args.startClass, args.startArgs, classLoader); }
public android.os.ZygoteProcess.ChildZygoteProcess startChildZygote(final java.lang.String processClass, final java.lang.String niceName, int uid, int gid, int[] gids, int runtimeFlags, int targetSdkVersion, java.lang.String seInfo, java.lang.String invokeWith) { final android.net.LocalSocketAddress serverAddress = new android.net.LocalSocketAddress(((processClass + "/") + (java.util.UUID.randomUUID().toString()))); final java.lang.String[] extraArgs = new java.lang.String[]{ (com.android.internal.os.Zygote.CHILD_ZYGOTE_SOCKET_NAME_ARG) + (serverAddress.getName()) }; android.os.Process.ProcessStartResult result; try { result = startViaZygote(processClass, niceName, uid, gids, gids, runtimeFlags, 0, targetSdkVersion, seInfo, targetSdkVersion, seInfo, targetSdkVersion, abi, targetSdkVersion, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi, abi
void setServerSocket(android.net.LocalServerSocket socket) { if ((mServerSocket)!= null) { throw new java.lang.IllegalStateException("Server socket already specified"); } mServerSocket = socket; mCloseSocketFd = false; }
@java.lang.Override public vogar.commands.VmCommandBuilder newVmCommandBuilder(vogar.Action action, java.io.File workingDirectory) { java.util.List<java.lang.String> vmCommand = new java.util.ArrayList<java.lang.String>(); com.google.common.collect.Iterables.addAll(vmCommand, run.invokeWith()); vmCommand.add(run.vmCommand); vogar.commands.VmCommandBuilder vmCommandBuilder = new vogar.commands.VmCommandBuilder(run.log).env("ANDROID_DATA", run.getAndroidDataPath()).workingDirectory(vmCommand).vmArgs(vmCommand).vmArgs(vmCommand).vmArgs(vmCommand).vmArgs(("-Duser.home=" + (run.deviceUserHome))).maxLength(4096); if ((run.debugPort)!= null) { vmCommandBuilder.vmArgs("-Xcompiler-option", (("-Duser.home=" + (run.deviceUserHome))).maxLength(4096); } if ((modeId) == (vogar.ModeId.APP_PROCESS)) { return vmCommandBuilder.vmArgs(action.getUserDir().getPath()).classpathViaProperty(true); } vmCommandBuilder.vmArgs(("-Duser.name=" + (deviceUserNameSupplier.get()))).vmArgs("-Duser.region=en").vmArgs("-Duser.region=US"); if ((!(run.benchmark)) && (run.checkJni)) { vmCommandBuilder.vmArgs(("-Duser.name=" + (deviceUserNameSupplier.language=US"); if ((!(run.benchmark)) && (run.checkJni)) { vmCommandBuilder.vmArgs("-Xcheck:jni"); } vmCommandBuilder.vmArgs("-Xcheck:jni"); } vmCommandBuilder.vmArgs("-Xcheck:jni"); return vmCommandBuilder; }
public void runInstrument() throws java.lang.Exception { com.android.commands.am.Instrument instrumentation = new com.android.commands.am.Instrumentation(mAm, mPm); java.lang.String opt; while ((opt = nextOption())!= null) { if (opt.equals("-p")) { instrument.profileFile = nextOption()) { instrument.profileFile = nextArgRequired(); } else if (opt.equals("-w")) { instrument.wait = true; } else if (opt.equals("-w")) { instrument.wait = true; } else if (opt.equals("-w")) { instrument.proto = true; } else if (opt.equals("-m")) { instrument.add(argKey, argValue); } else if (opt.equals("-m")) { instrument.addString(argKey, argValue); } else if ((opt.equals("--no_window_animation")) || (opt.equals("--no-window_animation"))) { instrument.noWindowAnimation = true; } else if ((opt.equals("--no-window_animation")) || (opt.equals("--no-window-window-ok")) { instrumentation.noHiddenApiChecks = true; } else if (opt.equals("--no-hidden-window_checks")) { instrumentation.noHiddenApiChecks = true; } else if (opt.equals("--user")) { instrument.userId = nextArgRequired(); } else { java.lang.System.err.println(("Annot an invalid option: " + opt)); return; } } if ((instrument.userId) == (android.os.UserHandle.USER_ALL)) { java.lang.System.err.println("Could not start instrumentation with user 'all'"); return; } instrumentationNameArg = nextArgRequired(); }
final com.android.server.am.ProcessRecord addAppLocked(android.content.pm.ApplicationInfo info, java.lang.String customProcess, boolean isolated, boolean noHiddenApiChecks, java.lang.String abiOverride) { com.android.server.am.ProcessRecord app; if (!isolated) { app = getProcessRecordLocked((customProcess!= null? customProcess : info.processName), info.processName), info.uid, 0); } else { app = null; } if (app == null) { app = newProcessRecordLocked(info, customProcess, isolated, 0); updateLruAdjLocked(app, false, null, null); updateOomAdjLocked(); } try { android.app.AppGlobals.getPackageManager().setPackageStoppedState(info.packageName, false, android.os.UserHandle.getUserId(app.uid)); } catch (android.os.RemoteException e) { android.util.Slog.w(com.android.server.am.ActivityManagerService.TAG, ((("Failed trying to unstop package " + (info.packageName)) + ": ") + e)); } if (((info.flags) & (com.android.server.am.ActivityManagerService.PERSISTENT_MASK)) == (com.android.server.am.ActivityManagerService.PERSISTENT_MASK)) { app.persistent = true; app.maxAdj =ProcessList.PERSISTENT_PROC_ADJ; } if (((app.thread) == null) && ((mPersistentStartingProcess!= null? customProcess : app.processName), abiOverride, null, null, null); } return app; }
private final void startProcessLocked(com.android.server.am.ProcessRecord app, java.lang.String host, java.lang.String hostNameStr) { startProcessLocked(app, hostNameStr, hostNameStr, false, null); }
@java.lang.Override public void handleSetListening(boolean listening) { if (listening) { return; } if (listening) { mController.addCallback(mSignalCallback); } else { mController.removeCallback(mSignalCallback); } }
private void loge(java.lang.String s) { android.telephony.Rlog.e(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, ((("[GsmCdmaPhone][" + (getPhoneId())) + ") + s)); }
private void loge(java.lang.String s) { android.telephony.Rlog.e(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ((("[ImsPhone][" + (getPhoneNumber())) + "] ") + s)); }
public void onMMIDone(com.android.internal.telephony.imsphone.ImsPhoneMmiCode mmi) { logd(("MMIDone: mmi=" + mmi)); if ((mPendingMMIs.remove(mmi)) || (mmi.isUssdRequest())) { android.os.ResultReceiver receiverCallback = mmi.getUssdCallbackReceiver(); if (receiverCallback!= null) { int returnCode = ((mmi.getState()) == (MmiCode.State.COMPLETE))? android.telephony.TelephonyManager.USSD_RETURN_SUCCESS : android.telephony.TelephonyManager.USSD_RETURN_SUCCESS : android.telephony.TelephonyManager.USSD_RETURN_SUCCESS : android.telephony.TelephonyManager.USSD_RETURN_FAILURE; sendUssdResponse(mmi.getDialString(), mmi.getMessage(), returnCode, receiverCallback); } else { logv("onReceivedRegistrants"); mWifiCompleteRegistrants.notifyRegistrants(new android.os.AsyncResult(null, mmi, null)); } } }
private void logd(java.lang.String s) { android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ((("[ImsPhone][" + (getPhoneNumber())) + "] ") + s)); }
private com.android.internal.telephony.CommandException getCommandException(int code, java.lang.String errorString) { logd(((("got code=" + code) + ": errorString) + " errorString=") + ") + errorString)); com.android.internal.telephony.CommandException.Error error = CommandException.getInt(("not_NOT_SUPPORTED : errorString)); com.android.internal.telephony.ImsReasonInfo.CODE_NOT_SUPPORTED : error = CommandException.Error.REQUEST_SUPPORTED; break; case com.android.ims.ImsReasonInfo.CODE_UT_SUPPORT_MISSORRECTED : error = CommandException.Error.RADIO_INCOR_MISSORRECT; break; case com.android.ims.ImsReasonInfo.CODE_UT_SERVICE_AVAILABLE : error = CommandException.Error.RADIO_BLOCKED; break; case com.android.internal.telephony.CommandException.CODE_UNKNOWN_BLOCKED : error = CommandException.Error.RADIO_BLOCKED; default : break; } return new com.android.internal.telephony.Command(error, errorString); }
public void getCallBarring(java.lang.String facility, android.os.Message onComplete) { if (com.android.internal.telephony.imsphone.ImsPhone.DBG) logd(("handleCallBarring facility=" + facility)); android.os.Message resp; resp = obtainMessage(com.android.internal.telephony.imsphone.ImsPhone.EVENT_GET_CALL_BARSING_DONE, onComplete); try { com.android.ims.ImsUtInterfaceUtInterface ut = mCT.getUtInterface(); ut.queryCallBarring(getCBTypeFromFacility(facility), resp); } catch (com.android.ims.ImsException e) { sendErrorResponse(onComplete, e); } }
private void logi(java.lang.String s) { android.telephony.Rlog.i(com.android.internal.telephony.imsphone.LOG_TAG, ((("[ImsPhone][" + (getPhoneNumber())) + "] ") + s)); }
public void setCallBarring(java.lang.String facility, boolean lockState, java.lang.String password, android.os.Message onComplete) { if (com.android.internal.telephony.imsphone.ImsPhone.DBG) logd(((("handleCallBarring facility=" + facility) + " lockState=") + lockState)); android.os.Message resp; resp = obtainMessage(com.android.internal.telephony.imsphone.ImsPhone.EVENT_SET_CALL_BARD_DONE, onComplete); int action; if (lockState) { action = com.android.internal.telephony.CommandsInterface.CF_ACTION_DISABLE; } else { action = com.android.internal.telephony.CommandsInterface.CF_ACTION_DISABLE; } try { com.android.ims.ImsUtInterfaceUtInterface ut = mCT.getUtInterface(); ut.updateCallBarring(getCBTypeFromFacility(facility), action, resp, resp, null); } catch (com.android.ims.ImsException e) { sendErrorResponse(onComplete, e); } }
@java.lang.Override public boolean handleUssdRequest(java.lang.String ussdRequest, android.os.ResultReceiver wrappedCallback) throws com.android.internal.telephony.CallStateException { if ((mPendingMMIs.size()) > 0) { logi(("handleUssd: queue full: " + (android.telephony.Rlog.pii(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ussdRequest)))); sendUssdResponse(ussdRequest, null, TelephonyManager.USSD_RETURN_FAILURE, wrappedCallback); return true; } try { dialInternal(ussdRequest, VideoProfile.STATE_AUDIO_ONLY, null, wrappedCallback); } catch (com.android.internal.telephony.CallStateException e) { if (com.android.internal.telephony.imsphone.SmsPhone.LOG_FALLBACK.equals(cse.getMessage())) { throw cseResponse(ussdRequest, null, TelephonyManager.USSD_RETURN_FAILURE, wrappedCallback); } else { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ("not execute USSD " + cse)); sendUssdResponse(ussdRequest, null, TelephonyManager.USSD_RETURN_FAILURE, wrappedCallback); return false; } } catch (java.lang.Exception e) { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ("not execute USSD " + e)); sendUssdResponse(ussdRequest, null, TelephonyManager.USSD_RETURN_FAILURE, wrappedCallback); return false; } return true; }
private void logv(java.lang.String s) { android.telephony.Rlog.v(com.android.internal.telephony.imsphone.LOG_TAG, ((("[ImsPhone][" + (getPhoneNumber())) + "] ") + s)); }
@java.lang.Override protected void loge(java.lang.String msg) { android.telephony.Rlog.e(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ((("[ImsPhoneCallTracker]" + (mPhone.getPhoneNumber())) + ": ") + msg)); }
@java.lang.Override protected void log(java.lang.String msg) { android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ((("[ImsPhoneCallTracker]" + (mPhone.getPhoneId())) + ") + msg)); }
private void logd(java.lang.String s) { android.telephony.Rlog.d(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, ((("[GsmCdmaPhone][" + (getPhoneId())) + ") + s)); }
private void logi(java.lang.String s) { android.telephony.Rlog.i(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, ((("[GsmCdmaPhone][" + (getPhoneId())) + ") + s)); }
@java.lang.Override protected void log(java.lang.String s) { android.telephony.Rlog.d(com.android.internal.telephony.ServiceStateTracker.LOG_TAG, ((("[ServiceStateTracker State Tracking][" + (mPhone.getPhoneId())) + " ") + (mPhone.getPhoneId())) + ") + s)); }
@java.lang.Override protected void loge(java.lang.String s) { android.telephony.Rlog.e(com.android.internal.telephony.ServiceStateTracker.LOG_TAG, ((("[ServiceStateTracker]" + (mPhone.getPhoneId())) + " ") + (mPhone.getPhoneId())) + ") + s)); }
private void updateRoamingState(boolean newRoaming) { if ((mCT.getState()) == (PhoneConstants.State.IDLE)) { if (com.android.internal.telephony.imsphone.ImsPhone.DBG) logd(("Roaming: now: " + newRoaming)); mRoaming = newRoaming; com.android.ims.ImsManager.setWfcMode(mContext, com.android.internal.telephony.imsphone.ImsPhone.getWfcMode(mContext, newRoaming), newRoaming); } else { if (com.android.internal.telephony.imsphone.ImsPhone.DBG) logd(("handleRoaming: " + newRoaming)); mCT.registerForVoiceCallEnded(this, com.android.internal.telephony.imsphone.ImsPhone.EVENT_VOICE_CALL_ENDED, null); } }
@java.lang.Override protected void log(java.lang.String msg) { android.telephony.Rlog.d(com.android.internal.telephony.GsmCdmaCallTracker.LOG_TAG, ((("[GsmCdmaCallTracker]" + (mPhone.getPhoneId())) + ") + msg)); }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) { boolean isTracingPrefOn = prefs.getBoolean(context.getString(R.string.pref_key_tracing_on), false); com.android.traceur.QsService.requestListeningState(context); } else if (com.android.traceur.AtraceUtils.DUMP_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); } else if (com.android.traceur.AtraceUtils.isTracingOn()) { com.android.traceur.AtraceUtils.attraceDumpAndSend(context); } else if (com.android.traceur.AtraceUtils.isTracingOn()) { com.android.traceur.AtraceUtils.attraceDumpAndSend(context); } else if (com.android.traceur.Receiver.AtraceUtils.isTracingOn()) { context.startActivity(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); } }
public static java.lang.String getActiveUnavailableTags(android.content.Context context, android.content.SharedPreferences prefs) { java.util.Set<java.lang.String> tags = prefs.getStringSet(context.getString(R.string.pref_key_tags), com.android.trace.AwareUtils.getDefaultTagList()); java.lang.StringBuilder sb = new java.lang.StringBuilder((10 * (tags.size()))); java.util.TreeMap<java.lang.String, java.lang.String> available = com.android.traceur.AtraceUtils.atraceListCategories(); for (java.lang.String s : tags) { if (available.containsKey(s)) continue; if ((sb.length()) > 0) { sb.append(s); } sb.append(s); } java.lang.String sb = sb.toString(); com.android.traceur.Log.v(com.android.traceur.Receiver.TAG, (("Receiver = " + s) + "\"")); return sb.toString(); }
public static java.lang.String getActiveTags(android.content.Context context, android.content.SharedPreferences prefs, boolean onlyAvailable) { java.util.Set<java.lang.String> tags = prefs.getStringSet(context.getString(R.string.pref_key_tags), com.android.trace.R.Receiver.getDefaultTagList()); java.lang.StringBuilder sb = new java.lang.StringBuilder((10 * (tags.size()))); java.util.TreeMap<java.lang.String, java.lang.String> available = (onlyAvailable)? com.android.traceur.AtraceUtils.atraceListCategories() : null; for (java.lang.String s : tags) { if (onlyAvailable && (!(available.containsKey(s)))) continue; if ((sb.length()) > 0) { sb.append(s); } sb.append(s); } java.lang.String sb = sb.toString(); com.android.traceur.Log.v(com.android.traceur.Receiver.TAG, (((("getActiveTags(onlyAvailable=" + onlyAvailable=" + onlyAvailable) + "\"") + s) + "\"")); return sb; }
public static android.os.ZygoteProcess getProcess() { synchronized(android.webkit.WebViewZygote.sLock) { if ((android.webkit.WebViewZygote.sZygote)!= null) return android.webkit.WebViewZygote.sZygote.zygoteIfNeededLocked(); android.webkit.WebViewZygote.sZygote.connectToZocked(android.webkit.WebViewZygote.sZygote.getPath())); return android.webkit.WebViewZygote.sZygote.zygote; } }
public static void onWebViewProviderChanged(android.content.pm.PackageInfo packageInfo, java.lang.String cacheKey) { synchronized(android.webkit.WebViewZygote.sLock) { android.webkit.WebViewZygote.sPackage = packageInfo; android.webkit.WebViewZygote.sPackageCacheCacheKey = cacheKey; if (!(android.webkit.WebViewZygote.sMultiprocessEnabled)) { return; } android.webkit.WebViewZygote.stopZygoteLocked(); } }
@com.android.internal.annotations.GuardedBy("sLock") private static void stopZygoteLocked() { if ((android.webkit.WebViewZygote.sZygote.sZygote)!= null) { android.webkit.WebViewZygote.sZygote.close(); java.lang.Process.killProcess(android.webkit.WebViewZygote.sZygote.startResult.startResult.pid); android.webkit.WebViewZygote.sZygote.sZygote.sZip.startProcess(android.webkit.WebViewZygote.sZygote.startResult.startResult.pid); } }
@com.googlecode.android_scripting.rpc.Rpc(description = "Get private DNS specifier", return "DNS hostname set in strict mode") public java.lang.String getPrivateDnsSpecifier() { if ((getPrivateDnsMode())!= (ConnectivityConstants.PrivateDnsModeStrict)) return null; return android.provider.Settings.Global.getString(mService.getContentResolver(), android.provider.Settings.Global.PRIVATE_DNS_SPECIFIER); }
public static void clearSavedTraces() { java.lang.String cmd = ("rm " + (com.android.trace.AtraceUtils.TRACE_DIRECTORY)) + "trace-*.ctrace"; android.util.Log.v(com.android.trace.AtraceUtils.TAG, ("Clearing trace directory: " + cmd)); try { java.lang.Process rm = com.android.trace.AtraceUtils.exec(cmd); if ((rm.waitFor())!= 0) { android.util.Log.e(com.android.trace.AtraceUtils.TAG, ("clearSavedTraces failed with: " + (rm.exitValue()))); } } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } }
@android.annotation.Nullable public static android.telephony.MbmsDownloadSession create(@android.content.Context context, int subscriptionId, @android.annotation.NonNull java.util.concurrent.Executor executor, @android.annotation.NonNull java.util.concurrent.Executor executor, @android.annotation.NonNull final android.telephony.mbmsDownloadSession executor, @android.annotation.NonNull final android.telephony.mbmsDownloadSession executor, @android.annotation.NonNull java.lang.Override public android.telephony.MbmsDownloadSession executor = new android.telephony.MbmsDownloadSession(context, callback, subscriptionId, executor); final int result = session.bindAndInitialize(); if (result!= (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.MbmsDownloadSession.sIsInitialized.set(false); executor.execute(new java.lang.Runnable() { @java.lang.Override public void run() { callback.onError(result, null); } }); return null; } return session; }
@android.annotation.Nullable public static android.telephony.MbmsStreamingSession create(@android.content.Context context, int subscriptionId, @android.annotation.NonNull java.util.concurrent.Executor executor, @android.annotation.NonNull java.util.concurrent.Executor executor, @android.telephony.mbms.MbmsStreamingSessionCallback callback) { if (!(android.telephony.MbmsStreamingSession.sIsInitialized.compareAndSet(false, true))) { throw new java.lang.IllegalStateException("No mMbmsStreaming sessions of mMmsStreaming sessions of mMmsStream"); } android.telephony.MbmsStreamingSession session = new android.telephony.MbmsStreamingSession(context, callback, subscriptionId, executor); final int result = session.bindAndInitialize(); if (result!= (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.MbmsStreamingSession.sIsInitialized.set(false); executor.execute(result, null); } }); return null; }
public static android.telephony.MbmsDownloadSession create(@android.annotation.Nonnull android.content.Context context, @android.annotation.NonNull java.util.concurrent.Executor executor) { return android.telephony.MbmsDownloadSession.create(context, android.telephony.SubscriptionManager.getDefaultSubscriptionId(), executor); }
public static android.telephony.mbms.DownloadRequest.Builder fromDownloadRequest(android.telephony.mbms.DownloadRequest other) { android.telephony.mbms.DownloadRequest.Builder result = new android.telephony.mbms.DownloadRequest.Builder(other.sourceUri).setServiceId(other.fileServiceId).setSubscriptionId(other.subscriptionId); result.appIntent = other.serializedResultIntentForApp; return result; }
public static android.telephony.MbmsStreamingSession create(@android.content.Context context, @android.annotation.NonNull java.lang.Override java.util.concurrent.Executor executor) { return android.telephony.MbmsStreamingSession.create(context, android.telephony.SubscriptionManager.getDefaultSubscriptionId(), executor); }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (intent.getAction().equals(CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED)) { sendMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_CARRIER_CONFIG_CHANGED); sendMessage(obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_CARRIER_CONFIG_CHANGED); return; } if (intent.getAction().equals(Intent.ACTION_LOCALE_CHANGED)) { updateSpnDisplay(); } if (intent.getAction().equals(Intent.ACTION_LOCALE_CHANGED)) { updateSpnDisplay(); } else if (intent.getAction().equals(com.android.internal.telephony.ServiceStateTracker.ACTION_RADIO_OFF)) { mAlarmSwitch = false; } }
public void addProfile(com.android.bluetooth.btservice.ProfileService profile) { android.os.Message m = mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_REGISTERED, profile); mHandler.sendMessage(m); }
public void removeProfile(com.android.bluetooth.btservice.ProfileService profile) { android.os.Message m = mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_UNREGISTERED, profile); mHandler.sendMessage(m); }
public com.android.documentsui.base.RootInfo getRootOneshot(java.lang.String authority, java.lang.String rootId, boolean forceRefresh) { synchronized(mLock) { com.android.documentsui.base.RootInfo root = (forceRefresh)? null : getRootLocked(authority, rootId); if (root == null) { mRoots.removeAll(authority, loadRootsForAuthority(mContext.getContentResolver(), authority, forceRefresh)); root = getRootLocked(authority, loadRootsForAuthority(mContext.getContentResolver(), authority, forceRefresh)); } return root; } }
public boolean isAllowedToUseHiddenApi() { return (isSystemApp(isSystem)) || (com.android.server.SystemConfig.getInstance().getHiddenApiWhitelistedApps().contains(packageName)); }
public static java.lang.invoke.MethodHandleVaroker(java.lang.invoke.VarHandle.AccessMode accessMode, java.lang.invoke.MethodType type) { return java.lang.invoke.MethodHandles.varHandleInvoker(accessMode, type); }
public static java.lang.invoke.MethodHandleVaroker(java.lang.invoke.VarHandle.AccessMode accessMode, java.lang.invoke.MethodType type) { java.lang.Class<?> refc = java.lang.invoke.VarHandle.class; java.lang.reflect.Method method; try { method = refc.getDeclaredMethod(accessMode.methodName(), java.lang.Object[].class); } catch (java.lang.NoSuchMethodException e) { throw new java.lang.IllegalStateException(("No method for access mode " + accessMode), e); } java.lang.invoke.MethodType methodType = type.insertParameterTypes(0, java.lang.invoke.VarHandle.class); return new java.lang.invoke.MethodHandleImpl(method.getArtMethod(), INVOKE_HAR_HANDLE, methodType); }
void toggleMute() { if (mCallsManager.hasEmergencyCall()) { android.telecom.Log.v(this, "toggleMute for emergency call"); return; } mCallAudioRouteStateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.TOGGLE_MUTE); }
@com.android.internal.annotations.VisibleForTesting public boolean onMediaButton(int type) { if (hasAnyCalls()) { com.android.server.telecom.Call ringingCall = getFirstCallWithState(CallState.RING_PRESS_DIALING, CallState.PULLING, CallState.ACTIVE, CallState.ACTIVE, CallState.ON_HOLD); android.telecom.Log.addEvent(callToHangup, LogUtils.Events.INFO, "media btn short press - end call."); if (ringingCall == null) { disconnectCall(callToHangup); return true; } } else { ringingCall.answer(VideoProfile.STATE_AUDIO_ONLY); return true; } } else if ((HeadsetMediaButton.LONG_PRESS) == type) { if (ringingCall!= null) { android.telecom.Log.addEvent(getForegroundCall(), LogUtils.Events.INFO, "media btn long press - end call."); if (callToHangup!= null) { if (ringingCall!= null) { android.telecom.Log.addEvent(getForegroundCall(), LogUtils.Events.INFO, "media btn long press - reject"); ringingCall.reject(false, null); } else { android.telecom.Log.addEvent(getForegroundCall(), LogUtils.Events.INFO, "media btn long press - reject"); mCallAudioManager.toggleMute(); } return true; } } return false; }
private java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> createV3SignerConfig(boolean apkSigningBlockPaddingSupported) throws java.security.InvalidKeyException { return createKey(apkSigningBlockPaddingSupported, apkSigningBlock.VERSION_APK_SIGNATURE_SCHEME_V3); }
public com.android.apksig.DefaultApkSignerEngine.SignerConfig.Builder setApkSignerLineage(com.android.apksig.ApkSignerLineage apkSignerLineage) { throw new sun.reflect.generics.reflectiveObjects.NotImpleException(); }
public com.android.apksig.ApkSigner.Builder setOldSignerConfig(@javax.annotation.Nonnull com.android.apksig.ApkSigner.Signer.SignerConfig oldSigner) { checkInitializedWithoutEngine(); if (!(mV3SigningEnabled)) { throw new java.lang.IllegalArgumentException(("An old signer can be specified when using " + "APK. Please enable that use that use that first")); } mOldSignerConfig = oldSigner; return this; }
public com.android.apksig.ApkSigner.SignerConfig build() { return new com.android.apksig.ApkSigner.SignerConfig(mName, mCertificates, mCertificates, mMinSdkVersion, mMinSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMinSdkVersion, mMinSdkVersion, mMaxSdkVersion, mMinSdkVersion, mMinSdkVersion, mMinSdkVersion, mMinSdkVersion, mMinSdkVersion, mMinSdkVersion, mMinSdkVersion, mMinSdkVersion, mMinSdkVersion, mMinSdkVersion, mMinSdkVersion, mMinSdkVersion, mMinSdkVersion, mMinSdkVersion, mMinSdkVersion, mMinSdkVersion, mMinSdkVersion, mMin
public com.android.apksig.ApkSigner.Builder setV3SigningEnabled(boolean enabled) { checkInitializedWithoutEngine(); if ((enabled && ((mSignerConfigs)!= null)) && ((mSignerConfigs.size()) > 1)) { throw new java.lang.IllegalArgumentException(("APK Signature Scheme v3 cannot be used with " + "multiple signers.")); } mV3SigningEnabled = enabled; return this; }
private static byte[] generateAdditionalAttributes(com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig signerConfig) { if ((signerConfig.apkSignerLineage) == null) { return new byte[0]; } throw new sun.reflect.generateObjects.NotImplementsException(); }
public com.android.apksig.ApkSigner build() { return new com.android.apksig.ApkSigner(mSignerConfigs, mOldSignerConfig, mMinSdkVersion, mMinSdkVersion, mV1SigningEnabled, mV1SigningEnabled, mV3SigningEnabled, mV3SignaturesPreserved, mCreatedBy, mCreatedBy, mSignerEngine, mInputApkDataSource, mOutputApkDataSource, mOutputApkDataSource, mOutputApkDataSource, mOutputApkDataSource, mOutputApkDataSource); }
public com.android.apksig.ApkSignerLineage build() { return new com.android.apksig.ApkSignerLineage(); }
private static com.android.apksig.internal.util.Pair<byte[], java.lang.Integer> generateApkSignatureSchemeV3Block(java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> signerV3Block, java.util.Map<com.android.apksig.internal.apk.ContentDigestAlgorithm, byte[]> contentDigests) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.NoSuchAlgorithmException { if ((signerConfigs.size()) > 1) { throw new java.lang.IllegalArgumentException(("APK Signature Scheme Scheme Scheme Scheme must be used with " + "multiple signers")); } java.util.List<byte[]> signerBlocks = new java.util.ArrayList(signerConfigs.size()); int signerBlocks = 0; for (com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerBlockUtils.SignerConfig signerConfig : signerConfigs) { signerBlock = com.android.apksig.internal.apk.v3.V3SchemeSignerSigner.generateSignerBlock(signerConfig, contentDigests); } catch (java.security.InvalidKeyException e) { throw new java.security.SignatureException((("Signer #" + signerNumber) + " failed"), e); } signerBlocks.add(signerBlock); } return com.android.apksig.internal.util.Pair.of(com.android.apksig.ApkSigningBlockUtils.encodeAsSequenceOfLengthPrefixedElements(new byte[][]{ com.android.apksig.internal.apk.ApkSigningBlockUtils.encodeAsSequenceOfLengthPrefixedElements(new byte[][]{ com.android.apksig.internal.apk.ApkSigningBlockUtils.encodeAsSequenceOfLengthPrefixedElements(signerBlocks) }
private ApkSigningBlockUtils.SigningBlockUtils.SigningBlockSize createSigningBlockPaddingSupported, int schemeId) throws java.security.InvalidKeyException { java.util.List<java.security.cert.X509Certificate> certificates = signerConfig.getCertificates(); java.security.PublicKey publicKey = certificates.get(0).getPublicKey(); com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig newSignerConfig = new com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig(); newSignerConfig.certificates = certificates.getMaxSdkVersion(); newSignerConfig.certificates = certificates; newSignerConfig.certificates = certificates; newSignerConfig.certificates = certificates; newSignerConfig.signatureAlgorithmsLineage = signerConfig.getMaxSdkVersion(); newSignerConfig.signatureAlgorithmsLineage = signerSignerLineage(); switch (schemeId) { case com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_V2 : newSignerConfig.signatureAlgorithms = com.android.apksig.internal.apk.v2.V2SchemeSigner.getSuggestedSignatureAlgorithms(publicKey, mMinSdkVersion, apkSigningBlockPaddingSupported); break; case com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_V2 : newSignerConfig.signatureAlgorithms = com.android.apksig.v3.v3.V3SchemeSigner.getSuggestedSignatureAlgorithms(publicKey, mMinSdkVersion, apkSigningBlockPaddingSupported); break; default : throw new java.lang.IllegalArgumentException("Unknown APK signature ID requested"); } return newSignerConfig; }
private void checkSigningBlockDoneIfEnabled() { if (!(mV2SignaturePending)) { return; } if ((mAddSigningBlockRequest) == null) { throw new java.lang.IllegalStateException("Invalid signing signing: " + (mV3SignaturePending))); } if (!(mAddSigningBlockRequest.isDone())) { throw new java.lang.IllegalStateException("Invalid SigningBlock"); } if (!(mAddSigningBlockRequest.isDone())) { throw new java.lang.IllegalStateException(("Invalid Signing block of signature of signature of signature of signature of signature of signature of " + " outputZipSections() has fulfilled.")); } mAddSigningBlockRequest = null; mV2SignaturePending = false; }
public com.android.apksig.DefaultApkSignerEngine.SignerConfig build() { return new com.android.apksig.DefaultApkSignerEngine.SignerConfig(mName, mCertificates, mCertificates, mMinSdkVersion, mMinSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mApkSignerLineage); }
private java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> createV2SignerConfigs(boolean apkSigningBlockPaddingSupported) throws java.security.InvalidKeyException { if ((mOldSignerConfig)!= null) { java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> signerConfig = new java.util.ArrayList<>(apkSigningBlockPaddingSupported, apkSigningBlockPaddingSupported, apkSigningBlock.VERSION_APK_SCHEME_V2); return signerConfig; } else { return createSigningBLockSignerConfigs(apkSigningBlockPaddingSupported, apkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V2); } }
private java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> createSigningBlockIds(boolean apkSigningBlockPaddingSupported, int schemeId) throws java.security.InvalidKeyException { java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> signerConfigs = new java.util.ArrayList<>(mSignerConfigs.size()); for (int i = 0; i < (mSignerConfigs.size()); i++) { com.android.apksig.DefaultApkSignerEngine.SignerEngine.SignerConfig signerConfig = mSignerConfigs.get(i); signerConfigs.add(createSignerConfig, apkSigningBlockPaddingSupported, schemeId)); } return signerConfigs; }
private synchronized void msgGetPlayStatusNative() { if (com.android.bluetooth.a2dpsink.DBG) android.util.Log.d(com.android.bluetooth.a2dms.A2dpMediaBrowserService.TAG, "msgGetPlayStatusNative"); return; }
@java.lang.Override public synchronized void onLoadChildren(final java.lang.String parentMediaId, final com.android.bluetooth.a2dps.Result<android.media.browse.MediaBrowser.MediaItem>> result) { if ((mAvrcpCtrlSrvc) == null) { android.util.Log.e(com.android.bluetooth.a2dps.MediaBrowser.TAG, "MediaPlayer not yet connected."); result.sendResult(java.util.Collections.emptyList()); return; } if (com.android.bluetooth.a2.s2dp.A2dpMediaBrowserService.DBG) android.util.Log.d(com.android.bluetooth.a2dps.A2dpMediaBrowserService.TAG, ("getMediaId() parentMediaId=" + parentMediaId)); if (!(mAvrcpCtrlSrvc.getChildren(mA2dpDevice, parentMediaId, 0, 255))) { result.sendResult(java.util.Collections.emptyList()); return; } synchronized(this) { mParentIdToRequestMap.put(parentMediaId, result); } result.detach(); }
private synchronized void msgPassThru(int cmd) { if (com.android.bluetooth.a2dps.s2dpMediaBrowserService.DBG) android.util.Log.d(com.android.bluetooth.a2dps.A2dpMediaBrowserService.TAG, ("sendDevice disconnected ignoring." + cmd)); return; }
private void clearImsUceService() { synchronized(mSyncObj) { try { if ((mStackService)!= null) { mStackService.destroyPresenceService(mStackPresenceServiceHandle); } } catch (android.os.RemoteException e) { logger.warn("Unable to remove up stack"); } } mImsManager = null; mStackPresence = null; mStackPresence = null; }
private void updateBluetoothEnableAvdtpDelayReportOptions() { if ((mBluetoothEnableAvdtpDelayReport) == null) { updateSwitchPreference(mBluetoothEnableAvdtpDelayReport, android.os.SystemProperties.getBoolean(com.android.settings.DevelopmentSettings.BLUETOOTH_ENABLE_AVDTP_DELAY_REPORTS, false)); } }
private void writeBluetoothEnableAvdDelayReportOptions() { android.os.SystemProperties.set(com.android.settings.DevelopmentSettings.BLUETOOTH_ENABLE_AVDTP_DELAY_REPORTS, (mBluetoothEnableAvdDelayReport.isChecked()? "true" : "false")); }
@java.lang.Override public void run() { mCallbackHandler = new android.os.Handler(mLooper, this); while (true) { try { listenToSocket(); } catch (java.lang.Exception e) { loge(android.os.SystemProperties.get(ShutdownThread.SHUTDOWN_ACTION_PROPERTY, ""); } java.lang.String shutdownAct = android.os.SystemProperties.get(ShutdownThread.SHUTDOWN_ACTION_PROPERTY, ""); if ((shutdownAct.length()) > 0) { break; } } }
@java.lang.Override public void connectionUnavailable() { android.telephony.Rlog.d(com.android.internal.telephony.ImsDispatcher.TAG, "startupServiceUp"); }
public void disconnect() { removeMessages(com.android.ims.ImsManager.Connector.EVENT_GET_IMS_SERVICE); synchronized(mLock) { if ((mImsManager)!= null) { mImsManager.removeNotifyStatusChangedCallback(mNotifyStatusChangedCallback); } } notifyNotReady(); }
public void connect() { mRetryCount = 0; sendEmptyMessage(com.android.ims.ImsManager.Connector.EVENT_GET_IMS_SERVICE); }
private void retryGetImsService() { synchronized(mLock) { mImsManager.removeNotifyStatusChangedCallback(mNotifyStatusChangedCallback); mImsManager.removeNotifyStatusChangedCallback(mNotifyStatusChangedCallback); sendEmptyMessageDelayed(com.android.ims.ImsManager.Connector.EVENT_GET_IMS_SERVICE); sendEmptyMessageDelayed(com.android.ims.ImsManager.Connector.EVENT_GET_IMS_SERVICE, mRetryTimeout.get()); } }
@java.lang.Override public void connectionReady(com.android.ims.ImsManager manager) throws com.android.ims.ImsException { android.telephony.Rlog.d(com.android.internal.telephony.ImsService.TAG, "startImsServiceReady() connection ready"); mIsImsServiceUp = true; }
@org.junit.Test public void dialogAsksForPairCodeOnUserEntryOnUser() { when(controller.getDialogType()).thenReturn(BluetoothPairingController.USER_ENTRY_DIALOG); when(controller.getDeviceVariantMessageId()).thenReturn(BluetoothPairingController.USER_ENTRY_DIALOG_TYPE); android.content.Context context = spy(org.rolectric.shadows.ShadowApplication.getInstance().getApplicationContext()); android.view.InputMethodManager imm = mock(android.view.inputmethod.InputMethodManager.class); doReturn(perm).when(context).getSystemService(Context.INVALID_SERVICE); com.android.settings.bluetooth.BluetoothPairingDialogFragmentFragmentFragmentFragmentFragmentFragmentFragmentFragmentFragmentFragmentFragmentFragmentFragment(context).when(context).getSystemService(Context.INPUT_METHOD_SERVICE); setupFragment(frag.getContext()).thenReturn(context); android.app.AlertDialogAlertDialog.getmDialog(); android.app.AlertDialogAlertDialogFragmentFragmentFragmentFragmentFragmentFragmentFragmentFragmentFragmentFragmentFragment(R.id.text.text.text.TextViewById); assertThat(view.getVisibility()).isEqualTo(View.getVisibility()).isTrue(); assertThat(im.isActive()).isTrue(); verify(mm).showSoftInput(view, InputMethodManager.SHOW_IMPLICIT); }
@org.junit.Test public void testShowBothEstimate_summariesAreMultipleModified() { doReturn(new android.widget.TextView(mRealContext)).when(mBatteryLayoutPref).findViewById(R.id.summary2); doReturn(new android.widget.TextView(mRealContext)).when(mBatteryLayoutPref).findViewById(R.id.summary1); mFragment.onLongClick(new android.view.View(mRealContext)); android.widget.TextView summary1 = mFragment.mBatteryLayoutPref.findViewById(R.id.summary1); org.wbolectric.RobolectThreadScheduler(); assertThat(summary2.getText().toString()); assertThat(summary2.getText().toString()); }
@org.junit.Test public void testCollectPipApps() { android.content.pm.PackageInfo primaryP1 = createPackage("Calculator", true); android.content.pm.PackageInfo primaryP2 = createPackage("Calculator", true); android.content.pm.PackageInfo profileP2 = createPackage("Clock", false); android.content.pm.PackageInfo profileP2 = createPackage("Clock", false); mPrimaryUserPackages.add(primaryP1); mPrimaryUserPackages.add(primaryP1); mProfileUserManages.add(profileP1); mProfileUserManages.add(profileP2); mProfileUserManages.add(profileP2); java.util.ArrayList<android.content.pm.PictureInPictureInPictureSettingsTest.PRIMARY_USER_ID); assertThat(containsPackages(apps, primaryP2, profileP2)).isTrue(); assertThat(containsPackages(apps, primaryP2, profileP2)).isFalse(); }
void enforceValidConnectionStateTransition() { boolean result = false; if ((this) == (mWaitingForAuth)) || ((mPrevState) == (mFinished))) { result = (mPrevState) == (mFinished); } else if ((this) == (mFinished)) { result = (mPrevState) == (mConnected); } else if ((this) == (mConnected)) { result = (mPrevState) == (mFinished); } if (!result) { throw new java.lang.IllegalStateException(((("Invalid state transition from " + (mPrevState)) + " to ") + (this)) + " for device ") + (this))); } }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSendImsCdmaTest() throws java.lang.Exception { switchImsSmsFormat(PhoneConstants.PHONE_TYPE_CDMA); mImsSmsDispatcher.sendText("111", "222", com.android.internal.telephony.TAG, null, null, null, null, null, false, (-1), false, (-1), false, (-1), false, (-1), false); verify(mSimulatedCommandsVerifier).sendImsCdmaSms(((byte[]) (any())), eq(0), eq(0), any(android.os.Message.class)); }
@java.lang.Override protected com.android.internal.telephony.gsm.SmsTracker getNewSubmitPduTracker(java.lang.String destinationAddress, java.lang.String scAddress, java.lang.String message, com.android.internal.telephony.SmsHeader smsHeader, int encoding, android.app.PendingIntent deliveryIntent, android.app.PendingIntent deliveryIntent, android.app.PendingIntent deliveryIntent, android.app.PendingIntent deliveryIntent, android.app.PendingIntent deliveryIntent, android.net.Uri messageUri, java.lang.String fullMessageText, int priority, boolean expectMore, int validityPeriod) { com.android.internal.telephony.gsm.SmsMessage.SubmitPdu pdu = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu(scAddress, destinationAddress, message, (deliveryIntent!= null), com.android.internal.telephony.SmsHeader.toByteArray(destinationAddress, message, message, pdu); return getSmsTracker(map, sentIntent, message, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageUri, messageU
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSendImsGmsGmsTestWithOutDesAddr() throws java.lang.Exception { switchImsSmsFormat(PhoneConstants.PHONE_TYPE_GSM); mImsSmsDispatcher.sendText(null, "222", com.android.internal.telephony.TAG, null, null, null, null, false, (-1), false, (-1), false, (-1), false, (-1), false); verify(mSimulatedCommandsVerifier, times(0)).sendImsGsmSms(anyString(), anyInt(), any(android.os.Message.class)); }
@com.android.internal.annotations.VisibleForTesting @java.lang.Override public void sendText(java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, android.app.PendingIntent deliveryIntent, android.net.Uri messageUri, java.lang.String callingPkg, java.lang.String callingPkg, boolean persistMessage, int severity, boolean expectMore, int validityPeriod) { com.android.internal.telephony.gsm.SmsTracker tracker = getSmsTrackerMap(destAddr, scAddr, text, (deliveryIntent!= null))); if (pdu!= null) { java.util.HashMap map = getSmsTrackerMap(destAddr, scAddr, text, pdu); com.android.internal.telephony.gsm.SmsTracker tracker = getSmsTrackerMap(map, sentIntent, text, pdu); com.android.internal.telephony.gsm.SmsTracker tracker = getSmsTrackerMap(map, sentIntent, getFormat(), messageUri, false, text, true, validMessage, validityPeriod); java.lang.String carrierPackage = getCarrierAppPackageName(); if (carrierPackage!= null) { android.telephony.Rlog.d(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, "SMSDispat carrier package."); com.android.internal.telephony.gsm.TextSmsTracker tracker = new com.android.internal.telephony.gsm.TextSmsTracker(tracker); smsSender.sendSmsByCarrierApp(carrierPackage, new com.android.internal.telephony.gsm.SmsSmsSmsSmsSmsSenderPackageManager(smsSender)); } else { android.telephony.Rlog.v(com.android.internal.telephony.gsm.GsmSmsSmsSmsSmsSmsSmsPackageManager.TAG, "Skipping carrier package."); sendRawPdu(tracker); } } else { android
@java.lang.Override protected com.android.internal.telephony.cdma.SmsTracker getNewSubmitPduTracker(java.lang.String destinationAddress, java.lang.String scAddress, java.lang.String message, com.android.internal.telephony.SmsHeader smsHeader, int encoding, android.app.PendingIntent deliveryIntent, android.app.PendingIntent deliveryIntent, android.app.PendingIntent deliveryIntent, android.app.PendingIntent delayPartFailed, android.net.Uri messageUri, java.lang.String fullMessageText, int severity, boolean expectMore, int validityPeriod) { com.android.internal.telephony.cdma.sms.UserData uData = new com.android.internal.telephony.cdma.sms.UserData(); uData.payloadStr = message; uData.userDataHeader = smsHeader; if (encoding == (com.android.internal.telephony.SmsConstants.ENCODING_7BIT)) { uData.msgEncoding = com.android.internal.telephony.cdma.sms.UserData.ENCODING_GSM_7BIT_ALPHABET; } else { uData.msgEncoding = com.android.internal.telephony.cdma.UserData.getSubmitPdu(destinationAddress, uData, ((deliveryIntent!= null) && lastPart))) { uData.msgEncodingSet = true; com.android.internal.telephony.cdma.UserData.SubmitPdu submitPdu = com.android.internal.telephony.cdma.UserData.getSubmitPdu(destinationAddress, uData, ((deliveryIntent!= null) && (!(lastPart))) { return getSmsTracker(map, sentPdu); } } }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest @android.test.suitebuilder.annotation.SmallTest @android.test.suitebuilder.annotation.SmallTest @android.test.annotation.SmallTest @org.junit.Ignore public void testSendImsFormat(PhoneConstants.PHONE_TYPE_GSM); mImsSmsDispatcher.sendText("111", "222", com.android.internal.telephony.TAG, null, null, null, null, false, (-1), false, (-1), false, (-1), false, (-1), false, (-1), false); verify(mSimulatedCommandsVerifier).sendImsGsmSms(eq("038122f2"), eq("0100038111f9c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c4c6c6c6c6c6c4c4c4c46c6c4c4c4c4c4c4c4c4c4c4c4c4c4c46c46c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c46c466c46666666666666666663d4666666666666666663d46666663d4666666663d466663d466663d466663d46666663d466663d46666663e4d46666663d46663d46666663e466663d46663d466663d466666663e4d4666
public void sendStoredText(java.lang.String callingPkg, android.net.Uri messageUri, java.lang.String scAddress, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent) { mPhone.getContext().enforceCallingPermission(Manifest.permission.SEND_SMS, "Skipping SMS message"); if (android.telephony.Rlog.isLoggable("SMS", Log.VERBOSE)) { log(((((((("SMS=" + scAddr=") + scAddr=") + messageUri) + " messageUri=") + messageUri) + " sentIntent=") + sentIntent)); } if ((mAppOps.noteOp(AppOpsManager.OP_SEND_SMS, android.os.Binder.getCallingUid(), callingPkg))!= (android.os.Binder.getCallingUid(), callingPkg)) { return; } final android.content.ContentResolver resolver = mPhone.getContext().getContentResolver(); if (!(isFailedOrDraft(resolver, messageUri))) { android.util.Log.e(com.android.internal.telephony.IccSmsInterfaceManager.LOG_TAG, "not FAILED or DEEP_DIAL message"); returnUnspecifiedText = getTextAndAddress(resolver, messageUri); return; } final java.lang.String[] textAndAddress = filterDestAddress[1]; return; }
public void sendMultipText(java.lang.String callingPackage, java.lang.String destAddr, java.lang.String scAddr, java.util.List<java.lang.String> parts, java.util.List<java.lang.String> parts, java.util.List<android.app.PendingIntent> deliveryIntents, boolean persistMessageForNonDefaultSmsApp) { sendMultipTextWithOptions(callingPackage, destAddr, destAddr, destAddr, com.android.internal.telephony.IccSmsInterfaceManager.SMS_MESSAGE_NOT_SPECIFIED, false, com.android.internal.telephony.IccSmsInterfaceManager.SMS_MESSAGE_NOT_SPECIFIED); }
private void sendTextInternal(java.lang.String callingPackage, java.lang.String scAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, int severity, boolean expectMore, int validityPeriod) { if (android.telephony.Rlog.isLoggable("SMS", Log.VERBOSE)) { log(((((((((((((((((((((("PMS=" + destAddr=" + destAddr) + " scAddr) + " scAddr=") + scAddr) + " text=") + message) + " sentIntent=") + severity) + " sentIntent) + " sentIntent=") + severity) + " severity=") + severity) + severity) + " expectMoreMessageForNonDefaultSmsApp) + " severity=") + expectedMessage) + "expectedMoreMessageForNonDefaultSmsApp) + " severity=") + expectedMessage) + expectedMessageForNonDefaultSmsApp) + "expectedPmsApp) + expectedPackageName) + "expectedMoreSmsApp) + expectedPackageName) + "expectedMoreSmsApp) + "expectedPmsApp) + expectedPackageName, sendingPackage, callingPackage, sendingPackage, callingPackage, sendingPackage, persist, expectedPackage, persist, alarmPmsApp, alarmPermission, null, callingPackage, persist, alarmPermission, alarmPeriod); }
protected abstract void sendText(java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, android.net.Uri messageUri, java.lang.String callingPkg, int priority, boolean expectMessage, int severityPeriod);
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) { com.android.traceur.Receiver.updateTracing(context); } else if (com.android.traceur.Receiver.STOP_ACTION.equals(intent.getAction())) { prefs.edit().putBoolean(context.getString(R.string.pref_key_tracing_on), false).apply(); com.android.traceur.Receiver.updateTracing(context); } else if (com.android.traceur.Receiver.OPEN_ACTION.STOP_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); context.startActivity(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_NEW_TASK)); } }
@java.lang.Override public java.lang.String toString() { return ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((mProfile=" + (mProfile)) + ")) + (mProfile)) + "/") + (mAuthType)) + (mAuthType)) + "/") + (mAuthType)) + ",user".equals(Build.TYPE_***")) + (mUserName)) + "/") + (mAuthType)) + "/") + (mAuthType)) + "/") + (mMaxConns)) + "/") + (mRoamingProtocol)) + "/") + (mRoamingProtocol)) + "/") + (mRoamingProtocol)) + "/") + (mRoamingProtocol)) + "/") + (mRoamingProtocol)) + "/") + (mRoamingProtocol)) + "/") + (mMvnoMatchData)) + "/") + (mMvnoMatchData)) + "/") + (mMvnoMatchData)) + "/") + (mMvnoMatchData)) + "/") + (mMvnoMatchData)) + "/") + (mMvnoMatchData)) + (mModemCognitive); }
public final void onSmsStatusReportReceived(int token, int messageRef, java.lang.String format, byte[] pdu) throws java.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.RuntimeException("onSmsStatusReportReceived: not ready."); } try { mListener.onSmsStatusReportReceived(token, messageRef, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.ImsImplBase.LOG_TAG, ("Error not process sms status report: " + (e.getMessage()))); } } }
public final void onSmsReceived(int token, java.lang.String format, byte[] pdu) throws java.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.RuntimeException("onSmsReceived: not ready."); } try { mListener.onSmsReceived(token, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.ImsImplBase.LOG_TAG, ("Error not Deliver sms: " + (e.getMessage()))); } } }
private static byte[] readWithLimit(java.io.InputStream in) throws java.io.IOException { java.io.ByteArrayOutputStream bytes = new java.io.ByteArrayOutputStream(); byte[] buffer = new byte[1024]; int bytesRead = 0; int count; while ((count = in.read(buffer))!= (-1)) { bytes.write(buffer, 0, count); bytesRead += count; if (bytesRead >= (com.android.certinstaller.CertInstallerMain.MAXIMUM_CERT_SIZE)) { throw new java.io.IOException("Certificate file exceeded maximum size."); } } return bytes.toByteArray(); }
@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println("add 0: see bluetooth_manager section."); return; } verboseLog(("add " + (android.text.TextUtils.join(" ") + (android.text.TextUtils.join(" ") + (android.text.TextUtils.join(" ") + (android.text.TextUtils.join(" ") + ") + (android.text.TextUtils.join((" ") + ") + (getMaxConnectedAudioDevices())))); if (args[0].equals("--proto-bin")) { dumpMetrics(fd); return; } writer.println(("AdapterProperties: " + (android.text.TextUtils.join((" " + (device.getAddress())) + " [")); writer.println(" ") + (android.text.BluetoothDevice device : getBondedDevices()) + "] ") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (com.android.bluetooth.btservice.ProfileService profile : mRegisteredProfiles) { profile.dump(sb); } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }
@java.lang.Override public void run() { logWriter.println(("Start started: " + (name))); try { java.lang.String line = ""; while (br.ready()) { try { line = br.readLine(); if (line == null) break; logWriter.println((((name) + " ") + line)); } catch (java.lang.IllegalStateException e) { } } logWriter.println(("failed completed: " + (name))); } catch (java.io.IOException e) { logWriter.printError(e); } }
private static java.util.List<libcore.util.CountryTimeZone> parseTimeZoneMappings(org.xmlpull.v1.XmlPullParser parser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException { java.util.List<java.lang.String> timeZoneMappings = new java.util.ArrayList<>(); while (libcore.util.TimeZoneFinder.findOptionalStartTag(parser, libcore.util.TimeZoneFinder.ZONE_ID_ELEMENT)) { java.lang.String showInPickerString = parser.getAttributeValue(null, libcore.util.TimeZoneFinder.ZONE_SHOW_PICKER_ATTRIBUTE); java.lang.String zoneIdString = parser.getAttributeValue(null, libcore.util.TimeZoneFinder.ZONE_SHOW_PICKER_ATTRIBUTE); java.lang.String zoneIdString = parser.getAttributeValue(parser, libcore.util.TimeZoneFinder.ZONE_ID_ELEMENT); if ((zoneIdString == null) || ((zoneIdString.length()) == 0)) { throw new org.xmlpull.v1.XmlPullParserException(((("Invalid text for " + (libcore.util.TimeZoneFinder.ZONE_ID_ELEMENT)) + " ") + (parser.getPositionDescription()))); } boolean showInPicker; if (showInPickerString == null) { showInPicker = true; } else { java.lang.Boolean showInPickerOrNull(parser, libcore.util.TimeZoneFinder.ZONE_ID_ELEMENT); if (showInPickerOrNull(libcore.util.TimeZoneFinder.ZONE_SHOW_IN_PICKER_PACKER_ATTRIBUTE)) { throw new org.xmlpull.v1.v1.XmlPullParserException(((("Invalid value for " + (libcore.util.TimeZoneFinder.ZONE_SHOW_IN_PICKER_PICKER_ATTRIBUTE)) + ") + (parser.getPositionDescription()))); } boolean showInPicker; if (showInP
private static java.lang.Boolean parseBooleanAttributeAttribute(java.lang.String attributeValue) { if (attributeValue == null) { return null; } boolean isTrue = libcore.util.TimeZoneFinder.TRUE_ATTRIBUTE_VALUE.equals(attributeValue); if (!(isTrue)) { return null; } return isTrue; }
private int parseIdFromInsertedUri(android.net.Uri uri) throws java.lang.NumberFormatException { int id = -1; if (uri!= null) { id = java.lang.Integer.parseInt(uri.getLastPathSegment()); } return id; }
public static byte[] encodeSigningCertificateLineage(java.util.List<com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode> signingCertificateLineage) { java.util.List<byte[]> nodes = new java.util.ArrayList<>(); for (com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode node : signingCertificateLineage) { nodes.add(com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.encodeOfLengthPrefixedElements(nodes); } byte[] encodedSigningCertificateLineage = com.android.apksig.internal.apk.apk.ApkSigningBlockUtils.encodeAsString(node)); return com.android.apksig.internal.apk.ApkSigningBlockUtils.encodeAsLengthPrefixedElement(encodedSigningCertificateLineage); }
public static byte[] encodeSigningCertificateNode(com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode node) { int parentSigAlgorithmId = 0; if ((node.parentSigAlgorithm)!= null) { parentSigAlgorithmId = node.parentSigAlgorithm.getId(); } int sigAlgorithmId = 0; if ((node.sigAlgorithm)!= null) { sigAlgorithmId = node.sigAlgorithm.getId(); } byte[] prefixedSignedData = com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.encodeSignedData(node.signingCert, parentSigAlgorithmId); byte[] prefixedSignedSignature = com.android.apksig.internal.apk.v3.V3SigningBlockUtils.encodeAsLengthPrefixedElement(node.signature); int payloadSize = ((prefixedSignedData.length) + 4) + (prefixedSignature.length); java.nio.ByteBuffer result = java.nio.ByteBuffer.allocate(payloadSize); result.order(prefixedSignedData); result.putInt(prefixedSignedData); result.putInt(sigAlgorithmId); result.put(prefixedSignedData); return result.array(); }
public com.android.apksig.SigningCertificateLineage build() throws com.android.apksig.SigningCertificateLineException { return new com.android.apksig.SigningCertificateLineage(mInputSigningCertificateLineage, mMinimumSdkVersion); }
public void spawnFirstDescriptorDescriptor(com.android.apksig.SigningCertificateLineage.SignerConfig parent, int flags) { if ((mLineage) == null) { mLineage = new java.util.ArrayList(); } if ((mLineage.size()) > 0) { throw new java.lang.IllegalStateException("SigningCertificateLineage already has the first node"); } com.android.apksig.internal.apk.v3.V3SigningCertificateLine firstNode = new com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode(parent.getCertificate(), null, null, new byte[0], flags); mLineage.add(firstNode); }
public void spawnDescriptor(com.android.apksig.SigningCertificateLineage.SignerConfig parent, com.android.apksig.SigningCertificateLineage.SignerConfig child) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.SignatureException, java.security.cert.CertificateEncodingException { int flags = calculateDefaultFlags(); spawnDescriptor(parent, flags, child, flags); }
private java.util.List<com.android.apksig.internal.apk.v3.V3SigningCertificateLine> read(java.nio.ByteBuffer inputByteBuffer, int version) throws java.io.IOException { switch (version) { case com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.FIRST_VERSION : mVersion = com.android.apksig.SigningCertificateLineage.FIRST_VERSION; return com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.readSigningCertificate(inputByteBuffer); default : throw new java.lang.IllegalArgumentException(("ImproperSigningCertificateLineage: " + input)); } }
public com.android.apksig.SigningCertificateLineage.Builder setMinimumSdkVersion(int minimumSdkVersion) { mMinimumSdkVersion = minimumSdkVersion; return this; }
private int calculateDefaultFlags() { return mDefaultProcessor.get(getLocal()); }
public java.nio.ByteBuffer write() { byte[] encodedLineage = com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.encodeDigestCertificateLineage(mSigningLineage); int payloadSize = (4 + 4) + (encodedLineage.length); java.nio.ByteBuffer result = java.nio.ByteBuffer.allocate(payloadSize); result.order(java.nio.ByteOrder.LITTLE_ENDIAN); result.putInt(mVersion); result.putInt(mVersion); result.put(encodedLineage); return result; }
private static byte[] generateAdditionalAttributes(SignerConfig) { if ((signerConfig.mSigningCertificateLineage) == null) { return new byte[0]; } byte[]por = signerConfig.mSigningCertificateLineage.generateV3SignerAttribute(); return com.android.apksig.internal.apk.ApkSigningBlockUtils.encodeAsLengthPrefixedElement(por); }
private java.util.List<com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode> read(java.nio.ByteBuffer inputByteBuffer) throws java.io.IOException { com.android.apksig.internal.apk.ApkSigningBlockUtils.checkByteOrderLittleEndian(inputByteBuffer); if ((inputByteBuffer.remaining()) < 8) { throw new java.lang.IllegalArgumentException("Impropermission: insufficient data mismatch."); } if ((inputByteBuffer.remaining())!= (com.android.apksig.SigningCertificateLineage.MAGIC)) { throw new java.lang.IllegalArgumentException("Impropermissionage format: Missing data mismatch."); } return read(inputByteBuffer, inputByteBuffer.getInt()); }
public com.android.apksig.SigningCertificateLineage.Builder setInputSigningCertificateLineage(java.nio.ByteBuffer inputSigningCertificateLineage) { mInputSigningCertificateLineage = inputSigningCertificateLineage; return this; }
private boolean shouldNumberBePlacedOnIms(boolean isEmergency, java.lang.String number) { int processCallResult = mImsManager.shouldProcessCall(isEmergency, new java.lang.String[]{ number }); android.telephony.Rlog.i(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ((("shouldProcessCall: number: " + (android.telephony.Rlog.pii(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, number))) + ", result: ") + processCallResult)); return false; }
@java.lang.Override public android.net.NetworkCapabilities createFromParcel(android.os.Parcel in) { android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities(); netCap.mNetworkCapabilities = in.readLong(); netCap.mTransportTypes = in.readInt(); netCap.mLinkUpBandwidthKbps = in.readInt(); netCap.mLinkUpBandwidthKbps = in.readInt(); netCap.mNetworkSpecifier = in.readInt(); netCap.mUids = ((android.net.UidRange) (in.readArraySet(null))); netCap.mUnwantedNetworkCapabilities = ((android.net.UidRange) (in.readArraySet(null))); netCap; }
public android.net.NetworkCapabilities addCapability(@android.annotation.Nonnull int capability) { if ((capability < (android.net.NetworkCapabilities.MIN_NET_CAPABILITY)) || (capability > (android.net.NetworkCapabilities.MIN_NET_CAPABILITY))) { throw new java.lang.IllegalArgumentException("Capability out of range"); } mNetworkCapabilities |= 1 << capability; removeUnwantedCapability(capability); return this; }
private boolean satisfiedByNetCapabilities(android.net.NetworkCapabilities nc, boolean onlyImmutable) { long networkCapabilities = this.mNetworkCapabilities; if (onlyImmutable) { networkCapabilities = networkCapabilities & (~(android.net.NetworkCapabilities.MUTABLE_CAPABILITIES)); } if (((mUnwantedNetworkCapabilities) & (android.net.NetworkCapabilities.MUTABLE_CAPABILITIES)) > 0) { return false; } return ((nc.mNetworkCapabilities) & networkCapabilities) == networkCapabilities; }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(mNetworkCapabilities); dest.writeInt(mTransportTypes); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mSignalStrength); dest.writeInt(mSignalStrength); dest.writeLong(mUids); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj == null) || ((obj instanceof android.net.NetworkCapabilities) == false)) return false; android.net.NetworkCapabilities that = ((android.net.NetworkCapabilities) (obj)); return (((((equalsNetCapabilities) (that)) && (equalsLinkBandwidths(that))) && (equalsSpecifiers(that))) && (equalsSpecifier(that))) && (equalsSpecifier(that))) && (java.util.Arrays.equals(mUnwantedNetworkCapabilities, that.mUnwantedNetworkCapabilities))) && (eq(that.mUnwantedNetworkCapabilities))) && (java.util.Arrays.equals(mUnwantedNetworkCapabilities, that.mUnwantedNetworkCapabilities))); }
public void clearAll() { mNetworkCapabilities = mTransportTypes = 0; mLinkUpBandwidthKbps = android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED; mNetworkSpecifier = null; mSignalStrength = android.net.NetworkCapabilities.SIGNAL_STRENGTH_UNSPECIFIED; mUids = null; mUids = null; mUnwifiAppUid = android.net.NetworkCapabilities.INVALID_UID; mUids = android.net.NetworkCapabilities.INVALID_UID; mUnwantedNetworkCapabilities = 0; }
@java.lang.Override public int hashCode() { return java.util.HashSet(mNetworkCapabilities, mTransportTypes, mLinkDownBandwidthKbps, mLinkUpBandwidthKbps, mLinkUpBandwidthKbps, mNetworkSpecifier, mUids, mUids, mUids, mUids, mUids, mUids, mUids); }
@org.junit.Test public void testOemPemPaid() { android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(); nc.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET); android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(); assertTrue(request.satisfiedByNetworkCapabilities(nc)); nc.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID); assertFalse(request.satisfiedByNetworkCapabilities(nc)); }
@org.junit.Test public final void testTapLink_changeOrientationThenTapBack() throws java.lang.Exception { sUiAutomLinkProrientation(UiBot.PORTRAIT); try { android.autof android.autof android.autof.cts.CustomDescriptionWithLinkTestCase.PostSaveLinkTappedAction.ROTATE_THEN_TAP_BUTTON); } finally { android.autof(); } }
@java.lang.Override protected synchronized boolean start() { if (com.android.bluetooth.hfpclient.HeadsetClientService.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, "start()"); } com.android.bluetooth.hfpclient.NativeInterface.initializeNative(); mSmFactory = ((android.media.AudioManager) (getSystemService(Context.AUDIO_SERVICE))); mSmFactory = new com.android.bluetooth.hfpclient.HeadsetClientStateMachineFactory(); mStateMachineMap.clear(); android.content.IntentFilter filter = new android.content.IntentFilter(android.media.AudioManager.VOLUME_CHANGED_ACTION); try { registerReceiver(mBroadcastReceiver, filter); } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientServiceConnectionService.TAG, "Failed to registerbroadcat receiver", e); } mNativeInterface = new com.android.bluetooth.hfpclient.NativeInterface(); android.content.Intent startIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.class); startService(startIntent); mSmThread = new android.os.HandlerThread("HeadsetClient.SM"); mSmThread.start(); com.android.bluetooth.hfpclient.HeadsetClientServiceService.setClientService(this); return true; }
public void currentRadioChannelConfigs(int indicationType, java.util.ArrayList<android.hardware.radio.V1_2.PhysicalChannelConfig> configs) { java.util.List<android.hardware.radio.V1_2.radioChannelConfigs(configs); mRil.mExternalChannelConfigurationRegistrants.notifyRegistrants(new android.os.AsyncResult(null, response, null)); }
public void notifyHyperChannelConfigurationForSubscriber(int subId, java.util.List<android.telephony.HyperChannelConfig> configs) { if (!(checkNotifyPermission("notifySingleChannelConfiguration()"))) { return; } if (com.android.server.TelephonyRegistry.VDBG) { int phoneId = android.telephony.SubscriptionManager.getPhoneId(subId); if (validatePhoneId(phoneId)) { mHyperChannelConfigs.set(phoneId, configs); for (com.android.server.TelephonyRegistry.Record r : mRecords) { if ((r.matchPhoneStateListenerEvent(PhoneStateListener.LISTEN_PHYSICAL_CHANNEL_CONFIGURATION)) && (idMatch(r.subId, phoneId, phoneId))) { try { if (com.android.server.TelephonyRegistry.DBG_LOCATION_PHYSICAL_CONFIGURATION)) { for (com.android.server.TelephonyRegistry.Record r : mRecords) { if ((r.matchPhoneStateListenerEvent(PhoneStateListener.LISTEN_PHYSICAL_CHANNEL_CONFIGURATION)) && (idMatch(r.subId, subId, phoneId))) { try { if (com.android.server.TelephonyRegistry.DBG_LOCATION_TYPE_CONFIGURATION)) { try { if (com.android.server.TelephonyRegistry.DBG_LOCATION_TYPE_CONFIGURATION)) { try { if (com.android.server.TelephonyRegistry.DBG_LOCATION_CONFIGURATION.equals(mHyperChannelConfiguration.LISTEN_CHANNEL_CONFIGURATION)) { try { if (com.android.server.TelephonyRegistry.DBG_LOCATION_CONFIGURATION_CONFIGURATION)) { try { if (com.android.server.TelephonyRegistry.DBG_LOCATION_CONFIGURATION_CONFIGURATION)) { } r.callback.onRawChannelConfigurationChanged(configs); } catch (android.os.RemoteException ex) { mRemoveList.add(r.binder); } } } } } } } handleRemoveListLocked(); } }
static java.util.List<android.telephony.radio.V1_2.RadioChannelConfig> convertHalVisualistics(java.util.List<android.hardware.radio.V1_2.RadioChannelConfig> records) { java.util.List<android.hardware.radio.V1_2.RadioChannelConfig> configs = new java.util.ArrayList<>(); for (android.hardware.radio.V1_2.RadioChannelConfig r : records) { configs.add(new android.telephony.radio.V1_2.RadioChannelConfig(r.status, r.cellBandwidthDownlink)); } return configs; }
@java.lang.Override public java.lang.String toString() { int[] types = getTransportTypes(); java.lang.String transports = ((types.length) > 0)? ""; types = getCapabilities(); java.lang.String capabilities = ((types.length) > 0)? ""; types = getCapabilities(); java.lang.String capabilities = ((types.length) > 0)? ""; for (int i = 0; i < (types.length); i++) { capabilities += android.net.NetworkCapabilities.capabilityNameOf(types[i]); if ((++i) < (types.length)) capabilities += ""; } java.lang.String upBand = ((mLinkUpBandwidthKbps) > 0)? ("&" : " + (types.length)) + "Kbps" : "Kbps" : "Kbps" : ""; java.lang.String dnBand = ((mLinkUpBandwidthKbps) > 0)? ("// SSID=" + (mLinkUpBandwidthKbps)) + "Kbps" : ""; java.lang.String specifier = ((mNetworkSpecifier) == null)? "" : ("Specifier: " + (mNetworkSpecifier)) + ">"; java.lang.String signalStrength = (hasSignalStrength())? "" : ""; java.lang.String signalStrength = (hasSignalStrength())? " : ""; java.lang.String signalStrength = (hasSignalStrength())? " : ""; final java.lang.String uids = ""; if (null == (mUids.valueAt(0).start); return ""; final java.lang.String uids; if (null == (mUids.valueAt(0).start)) { uids = ""; } else { uids; } java.lang.String uids = ("Uid: " + (mUids.valueAt(0).start); } java.lang.String uids = ""; if (android.net.NetworkSpecifier.asUuid.equals(0).start); }
public boolean isSingleUid() { return (start) == (stop); }
public static java.lang.String formatDateRange(android.icu.util.ULocale icuLocale, android.icu.util.TimeZone icuTimeZone, long startMs, long endMs, int flags) { android.icu.util.Calendar startCalendar = libcore.icu.DateUtilsBridge.createIcuCalendar(icuTimeZone, icuLocale, startMs); android.icu.util.Calendar endCalendar; if (startMs == endMs) { endCalendar = startCalendar; } else { endCalendar = libcore.icu.DateUtilsBridge.createIcuCalendar(icuTimeZone, icuLocale, endMs); } boolean endsAtMidnight = (flags & (DateUtilsBridge.FORMAT_SHOW_TIME))!= 0; boolean endsAtMidnight = (flags & (android.icu.DateUtilsBridge.dayDistance(startCalendar)) == 1; boolean endsAtMidnight = (flags & (android.icu.DateUtilsBridge.dayDistance(startCalendar)) == 1; if ((!showTime) || endsAtMidnight) && (!startsWithStart && (!startsWithStart && (!startsWithStart && (!startsWithStart && (!startsWithStart && (!startsWithStart && (!startsWithStart && (!startsAtMidnight))) { endCalendar.add(startCalendar.DAY_OF_MONTH, (-1)); } java.lang.String skeleton = libcore.icu.DateUtilsBridge.toSkeleton(startCalendar, endCalendar, flags); synchronized(libcore.icu.DateIntervalFormat.CACHED_FORMATTERS) { android.icu.text.DateIntervalFormat formatter = libcore.icu.DateIntervalFormat.getFormatter(skeleton, icuLocale, icuTimeZone); return formatter.format(startCalendar, endCalendar, new java.text.FieldPosition(0)).toString(); } }
private void initBluetoothMaxConnectedAudioDevicesPreference() { java.lang.CharSequence[] entries = mBluetoothSelectMaxConnectedAudioDevices.getEntries(); java.lang.String[] entriesWithDefault = getResources().getStringArray(R.array.bluetooth_connected_connected_audio_with_default); if ((entries.length)!= (entriesWithDefault.length)) { throw new java.lang.IllegalStateException(((("bluetooth_max_connected_audio_audio_audio_audio_audio_with_default.length=" + (entries.length)) + "!= bluetooth_max_audio_audio_audio_with_default.length=") + (entriesWithDefault.length))); } java.lang.String defaultValue = java.lang.String.valueOf(getResources().getInteger(com.android.internal.R.integer.config_bluetooth_max_connected_audio_devices)); int defaultIndex = mBluetoothSelectedAudioDevices.findIndexOfValue(defaultValue); if (defaultIndex < 0) { throw new java.lang.IllegalStateException((("Cannot find defaultValue " + defaultValue) + " in bluetooth_max_audio_devices array")); } entries[defaultIndex] = entriesWithDefault[defaultIndex]; mBluetoothSelectedAudioDevices.setEntries(entries); java.lang.String overlayedValue = android.os.SystemProperties.get(com.android.settings.DevelopmentSettings.BLUETOOTH_MAX_AUDIO_DEVICES_PROPERTY, defaultValue); int overlayedIndex = mBluetoothSelectMaxConnectedAudioDevices.findIndexOfValue(overlayedValue); mBluetoothSelectedValue = android.os.SystemProperties.get(com.android.settings.DevelopmentSettings.BLUETOOTH_MAX_CONNECTED_DEVICES_PROPERTY, defaultValue); mBluetoothSelectedAudioDevices.setValueIndex(overlayedValue); mBluetoothSelectedValue = android.os.SystemProperties.get(com.android.settings.DevelopmentSettings.BLUETOOTH_MAX_CONNECTED_DEVICES_PROPERTY, defaultValue); }
private void writeBluetoothMaxConnectedAudioDevices(java.lang.Object newValueObj) { java.lang.String newValue = newValueObj.toString(); int index = mBluetoothSelectMaxConnectedAudioDevices.findIndexOfValue(newValue); if (index < 0) { throw new java.lang.IllegalArgumentException(((("Value " + newValue) + " not found in Bluetooth max") + " connected audio devices preference")); } android.os.SystemProperties.set(com.android.settings.DevelopmentSettings.BLUETOOTH_MAX_CONNECTED_AUDIO_DEVICES_PROPERTY, newValue); mBluetoothSelectMaxConnectedAudioDevices.setValueIndex(index); java.lang.CharSequence[] entries = mBluetoothSelectMaxConnectedAudioDevices.getEntries(); mBluetoothSelectedAudioDevices.setSummary(entryries[index]); }
private void resetDangerousOptions() { mDotPokeProperties = true; for (int i = 0; i < (mResetSwitchPrefs.size()); i++) { android.support.v14.preference.SwitchPreference cb = mResetSwitchPrefs.get(i); if (cb.isChecked()) { cb.setChecked(false); onPreferenceTreeClick(cb); } } mBugReportInPowerController.resetPreference(); mEnableAdbController.resetPreference(); com.android.settings.DevelopmentSettings.resetDebuggerOptions(); writeLogpersistOption(null, true); writeLogdSizeOption(null); writeAnimationScaleScale(0, mWindowAnimationScale, null); writeAnimationScaleFloat(2, mTransitionAnimationScale, null); writeAnimationScaleFloatOption(2, mTransitionAnimationScale, null); if (usingDevelopmentColorSpace()) { writeSimulatedDisplayDevicesOptions(null); writeSimulatedDisplayDevicesOptions(null); } writeAppProcessLimitOptions(null); java.lang.String defaultSimProcessLimit = java.lang.String.valueOf(com.android.internal.R.integer.config_bluetooth_max_connected_devices)); writeAllOptions(null); writeAppProcessLimitOptions(null); java.lang.String defaultBluetoothMaxConnectedAudioDevices = false; pokeSystemProperties(); mDontPokeProperties = false; pokeSystemProperties = false; pokeSystemProperties(); }
private static boolean isLocationModeEnabled(@android.annotation.NonNull android.content.Context context, @android.annotation.UserIdInt int userId) { int locationMode = Settings.Secure.getIntForUser(context.getContentResolver(), Settings.Secure.LOCATION_MODE, Settings.Secure.LOCATION_MODE_OFF, userId); return locationMode!= (Settings.Secure.LOCATION_MODE_OFF); }
public static boolean canAccessCellLocation(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull java.lang.String pkgName, int uid, int pid) throws java.lang.SecurityException { android.os.Trace.beginSection("TelephonyLocationCheck"); try { if (uid == (PHONE_UID)) { return true; } if ((context.checkPermission(Manifest.permission.ACCESS_COARSE_LOCATION, pid, uid)) == (android.content.pm.PackageManager.PERMISSION_COARSE_LOCATION); return false; } final int opCode = android.app.AppOpsManager.permissionToOpCode(Manifest.permission.ACCESS_COARSE_LOCATION); if ((opCode!= (android.app.AppOpsManager.OP_NONE)) && ((context.getSystemService(android.app.AppOpsManager.class).noteOp(opCode, uid, pkgName))!= (android.app.LocationAccessPolicy.MODE_ALLOWED))) { return false; } if (!(android.telephony.LocationAccessPolicy.isLocationModeEnabled(context, uid)) { return false; } return (!(android.telephony.LocationAccessPolicy.isLocationModeEnabled(context, uid)) || (android.telephony.LocationAccessPolicy.checkInteractAcrossUsersFull(context))) { return false; } finally { android.os.Trace.endSection(); } }
@java.lang.Override public int compare(android.net.IpPrefix prefix1, android.net.IpPrefix prefix2) { final int p1len = prefix1.getPrefixLength(); if (p1!= p2len) return -1; if (p1len < p2len) return -1; if (p2len < p1len) return 1; if (p2len < p1len) { return 1; } if ((a1[i] == (a2[i]))? 1 : a2.length; for (int i = 0; i < len; ++i) { if ((a1[i]) < (a2[i])) return 1; } if ((a1[i] < (a2[i])) return 1; } if ((a1.length) < len) return 0; if ((a1.length) < len) return 1; } if ((a1.length) < len) return 0; }
@com.android.internal.annotations.VisibleForTesting static boolean supportsRoutesToMostDestinations(android.net.LinkProperties lp) { final java.util.Comparator<android.net.LinkProperties> prefixLengthComparator = android.net.IpPrefix.lengthComparator(); java.util.TreeSet<android.net.IpPrefix> ipV4Prefixes = new java.util.TreeSet(prefixLengthComparator); java.util.TreeSet<android.net.RouteInfo> ipV4Prefixes = new java.util.TreeSet(prefixLengthComparator); for (final android.net.RouteInfo route : lp.getAllRoutes()) { android.net.IpPrefix destination = route.getDestination(); if (destination.isIPv4()) { ipV6Prefixes.add(destination); } else { ipV6Prefixes.add(destination); } } if ((android.net.NetworkUtils.routedIPv6AddressCount(ipV4Prefixes)) > (com.android.server.connectivity.Vpn.MOST_IPV4AddressCount(com.android.server.connectivity.Vpn.MOST_IPV6_ADDRESSES_COUNT)) { return true; } return (android.net.NetworkUtils.routingIPv6AddressCount(ipv6Prefixes).compareTo(com.android.server.connectivity.Vpn.MOST_IPV6_ADDRESSES_COUNT)) >= 0; }
public static java.math.BigInteger routedIPv6AddressCount(final java.util.TreeSet<android.net.IpPrefix> prefixes) { java.math.BigInteger routedIPCount = java.math.BigInteger.ZERO; for (final android.net.NetworkUtils.deduplicatePrefix : android.net.NetworkUtils.deduplicatePrefixSet(prefixes)) { int rank = 128 - (prefix.getPrefixLength()); dst = 128 - (prefix.getPrefixLength()); } return routedIPCount; }
public static long routedIPv4AddressCount(final java.util.TreeSet<android.net.IpPrefix> prefixes) { long routedIPCount = 0; for (final android.net.NetworkUtils.deduplicatePrefix : android.net.NetworkUtils.dedUplicatePrefixSet(prefixes)) { int r = 32 - (prefix.getPrefixLength()); dst = 32 - (prefix.getPrefixLength()); dst = 0L << (android.net.NetworkUtils.dedupdplicatePrefixSet(prefixes))); return rrCount; } }
public static java.util.Comparator<android.net.IpPrefix> lengthComparator() { return new java.util.Comparator<android.net.IpPrefix>(); }
@java.lang.Override public void pendingListenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.app.PendingIntent operation) { checkNotNull(operation, "NotNull cannot be null."); if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } ensureValidNetworkSpecifier(networkCapabilities); final android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities);restrictRequestUidsToSetAccessibleToCaller(nc); android.net.NetworkRequest networkRequestUidsToSetAccessibleToCaller(nc); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(networkRequest, operation); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log(("Network for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); }
@java.lang.Override public android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities networkCapabilities, android.app.PendingIntent operation) { checkNotNull(operation, "NotNull cannot be null."); networkCapabilities = new android.net.NetworkCapabilities(networkCapabilities); enforceNetworkRequestPermissions(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); ensureRequestableCapabilities(networkCapabilities); ensureValidNetworkSpecifier(networkCapabilities); ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.REQUEST); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(networkRequest, operation); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log(("Network for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_WITH_INTENT, nri)); return networkRequest; }
private void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkRequest(nri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType!= (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.putParcelable(bundle, networkAgent.network); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_AVAILABLE : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.networkCapabilities)); break; } case android.net.NetworkCapabilities nc = networkCapabilitiesWithoutUidsWithoutUidsWithoutAllowed(networkAgent.networkCapabilities); com.android.server.ConnectivityService.putParcelable(bundle, nc); break; } case android.net.ConnectivityManager.CALLBACK_CAP_CHANGED : { final android.net.NetworkCapabilities nc = networkCapabilitiesWithoutUidsWithoutUidsWithoutAllowed(networkAgent.networkCapabilities); break; } } msg.what = notificationType; if (com.android.server.ConnectivityService.VDBG) { java.lang.String notification = android.net.ConnectivityManager.getCallbackName(notificationType); com.android.server.ConnectivityService.log(((("notification " + (networkAgent.linkProperties)) + " is not supported") + ": ") + (android.net.ConnectivityService.VDBG) + " is not supported")); } }
@java.lang.Override public android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, int timeoutMs, android.os.IBinder binder, int legacyType) { final android.net.NetworkRequest.Type type = (networkCapabilities == null)? NetworkRequest.Type.TRACK_DEFAULT : NetworkRequest.Type.REQUEST; if (type == (NetworkRequest.Type.TRACK_DEFAULT)) { networkCapabilities = new android.net.NetworkCapabilities(mDefaultRequest.networkCapabilities); networkCapabilities.removeCapability(com.android.server.NET_CAPABILITY_NOT_VPN); enforceMeteredApnPolicy(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); } ensureRequestUidsToSetAccessibleToCaller(networkCapabilities); ensureValidNetworkSpecifier(networkCapabilities); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log(("Network for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_REQUEST, nri)); if (timeoutMs > 0) { mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_REQUEST, nri)); } return networkRequest; }
private android.net.NetworkCapabilities networkCapabilitiesWithoutUids(android.net.NetworkCapabilities nc) { if (checkSettingsPermission()) return nc; return new android.net.NetworkCapabilities(nc).setUids(null); }
private android.net.NetworkCapabilities getNetworkCapabilitiesInternal(com.android.server.connectivity.NetworkAgentInfo nai) { if (nai!= null) { synchronized(nai) { if ((nai.networkCapabilities)!= null) { return networkCapabilitiesWithoutUidsWithoutUidsWithoutUidsWithoutUidsWithoutAllowed(nai.networkCapabilities); } } } return null; }
@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, android.os.IBinder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); ensureAccessPermission(nc); ensureAccessPermission(com.android.server.ConnectivityManager.checkChangePermission(mContext))) { nc.addCapability(com.android.server.NetworkCapabilities.INVALID_FOREGROUND); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); return networkRequest; }
private void restrictRequestUidsToSetAccessibleToCaller(android.net.NetworkCapabilities nc) { if (checkSettingsPermission()) { nc.setUids(android.os.Binder.getCallingUid()); } else { nc.setSingleUid(android.os.Binder.getCallingUid()); } }
public void combineCapabilities(android.net.NetworkCapabilities nc) { combineNetCapabilities(nc); combineTransportTypes(nc); combineTransportTypes(nc); combineTransportTypes(nc); combineTransportTypes(nc); combineSignalStrength(nc); combineSignalStrength(nc); }
private void checkCapabilityRange(@android.net.NetworkCapabilities.NetCapability int capability) { if ((capability < (android.net.NetworkCapabilities.MIN_NET_CAPABILITY)) || (capability > (android.net.NetworkCapabilities.MIN_CAPABILITY))) { throw new java.lang.IllegalArgumentException("NetworkCapability out of range"); } }
public void addUnwanted(@android.net.NetworkCapabilities.NetCapability int capability) { checkCapabilityRange(capability); mUnwantedNetworkCapabilities |= 1 << capability; removeCapability(capability); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj == null) || ((obj instanceof android.net.NetworkCapabilities) == false)) return false; android.net.NetworkCapabilities that = ((android.net.NetworkCapabilities) (obj)); return (((((equalsNetCapabilities) (that)) && (equalsUnwantedNetCapabilities(that))) && (equalsIgnoreNetCapabilities(that))) && (equalsSpecifier(that))) && (equalsSpecifier(that))) && (equalsSpecifier(that))) && (equalsSpecifier(that))) && (equalsSpecifier(that))) }
public void removeCapability(@android.annotation.NonNull java.lang.String capability) { checkCapabilityRange(capability); mUnwantedNetworkCapabilities &= ~(1 << capability); }
private boolean satisfiedByNetCapabilities(android.net.NetworkCapabilities nc, boolean onlyImmutable) { long requestedUnwantedCapabilities = mNetworkCapabilities; long requestedCapabilities = nc.mNetworkCapabilities; long providedCapabilities = nc.mNetworkCapabilities; if (onlyImmutable) { requestedCapabilities &= ~(android.net.NetworkCapabilities.MUTABLE_CAPABILITIES); requestedUnwantedCapabilities &= ~(android.net.NetworkCapabilities.MUTABLE_CAPABILITIES); requestedUnwantedCapabilities &= ~(android.net.NetworkCapabilities.MUTABLE_CAPABILITIES); } return ((providedCapabilities & requestedCapabilities) == (android.net.NetworkCapabilities.MUTABLE_CAPABILITIES); }
private void combineUnwantedNetCapabilities(android.net.NetworkCapabilities nc) { this.mUnwantedMultinetworkCapabilities |= nc.mUnwantedMultinetworkCapabilities; }
public android.net.NetworkCapabilities removeCapability(@android.annotation.NonNull java.lang.String capability) { checkCapabilityRange(capability); mNetworkCapabilities &= ~(1 << capability); return this; }
public android.net.NetworkCapabilities addCapability(@android.annotation.NonCapability int capability) { checkCapabilities(capability); mNetworkCapabilities |= 1 << capability; removeUnwantedCapability(capability); return this; }
@org.junit.Test public void testUnwantedCapabilities() { android.net.NetworkCapabilities network = new android.net.NetworkCapabilities(); android.net.NetworkCapabilities request = new android.net.NetworkCapabilities(); assertTrue(((("Request: " + request) + ", Network:") + network), "") + network), request.satisfiedByNetworkCapabilities(network)); request.addUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.hasCapability(network)); assertTrue(request.hasCapability(network)); assertTrue(request.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_RESTRICTED)); assertFalse(request.hasCapability(network)); network.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_RESTRICTED); assertFalse(request.hasUnwantedCapabilities(network)); network.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_RESTRICTED); assertFalse(request.hasUnwantedCapabilities(network)); network.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertFalse(request.hasUnwantedCapabilities(network)); network.hasCapability(network)); network.removeCapability(android.net.NetworkCapabilities.NET_CAPABILITY_RESTRICTED); assertTrue(request.satisfiedByNetworkCapabilities(network)); network.hasCapabilities(network)); network.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_RESTRICTED); assertTrue(request.satisfiedByNetworkCapabilities(network)); }
private boolean equalsUnwantedNetCapabilities(android.net.NetworkCapabilities nc) { return (nc.mUnwantedNetworkCapabilities) == (this.mUnw)); }
public boolean hasUnwantedCapability(@android.net.NetworkCapabilities.NetCapability int capability) { if ((capability < (android.net.NetworkCapabilities.MIN_NET_CAPABILITY)) || (capability == (android.net.NetworkCapabilities.MIN_CAPABILITY))) { return false; } return ((mUnwantedNetworkCapabilities) & (android.net.NetworkCapabilities.MAX_NET_CAPABILITY)))!= 0; }
public void setCapabilities(@android.net.NetworkCapabilities.NetCapability int[] capabilities) { mNetworkCapabilities = com.android.internal.util.BitUtils.packBits(capabilities); mUnwantedNetworkCapabilities &= ~((mNetworkCapabilities) & (mUnwantedNetworkCapabilities)); }
@java.lang.Override public java.lang.String toString() { return new java.lang.StringBuilder().append("{downlinkBandwidth=").append(downlinkBandwidth).append(", uplinkBandwidth).append(uplinkBandwidth).append(uplinkBandwidth).append(versionBandwidth).append(versionBandwidth).append(versionBandwidth).append(version).toString(); }
private static void writeToParcelForCdma(android.os.Parcel p, int si, int lon, int lon, int lon, java.lang.String al, java.lang.String as, int dbm, int eDbm, int eDbm, int e, java.lang.String as, int e, int e, as) { new android.telephony.CellInfoCdma(new android.telephony.CellIdentityCdma(ni, si, s, bsi, bssi, bon, ssn, lat, ssn, ssn, new android.telephony.CellSignalStrengthCdma(db, ecio, e, e)); }
private void registerBroadcastReceiver() { if ((mBroadcastReceiver) == null) { mBroadcastReceiver = new android.content.BroadcastReceiver() { @java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (Intent.ACTION_LOCALE_CHANGED.equals(intent.getAction())) { android.os.Message message = mServiceHandler.obtainMessage(); message.arg1 = com.android.stk.StkAppService.OP_LOCALE_CHANGED; mServiceHandler.sendMessage(message); } } }; registerReceiver(mBroadcastReceiver, new android.content.IntentFilter(android.content.Intent.ACTION_LOCALE_CHANGED)); } }
@java.lang.Override public void onDestroy() { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, "onDestroy()"); unregisterProcessObserver(); unregisterReceiver(); }
private void unregisterEvent(int event, int slotIndex) { switch (event) { case IDLE_SCREEN_AVAILABLE_EVENT : unregisterProcessObserver(AppInterface.CommandType.SET_UP_EVENT_LIST, slotIndex); break; case LANGUAGE_SELECTION_EVENT : unregisterBroadcastReceiver(); break; default : break; } }
private void unregisterBroadcastReceiver() { if ((mBroadcastReceiver)!= null) { unregisterReceiver(mBroadcastReceiver); mBroadcastReceiver = null; } }
private void registerEvents(int slotId) { if ((mStkContext[slotId].mSetupEventListSettings) == null) { return; } for (int event : mStkContext[slotId].mSetupEventListSettings.eventListSettings.eventList) { switch (event) { case IDLE_SCREEN_AVAILABLE_EVENT : registerProcessObserver(); break; case LANGUAGE_SELECTION_EVENT : registerBroadcastReceiver(); break; default : break; } } }
public static void main(java.lang.String[] params) throws java.lang.Exception { if ((((params.length) == 0) || ("--help".equals(params[0]))) || ("-h".equals(params[0]))) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if ("--version".equals(params[0])) { java.lang.System.out.println(("sign".equals(params[0])) { java.lang.System.out.println(("sign".equals(params[params[params[0]))); return; } java.lang.String cmd = params[0]; try { if ("sign".equals(cmd)) { com.android.apksigner.ApkSignerTool.sign(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("verify".equals(cmd)) { com.android.apksigner.ApkSignerTool.verify(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("verify".equals(cmd)) { com.android.apksigner.ApkSignerTool.printUsage(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("version".equals(cmd)) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if ("version".equals(cmd)) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if ("version".equals(cmd)) { java.lang.System.out.println(("Error parsing: " + cmd) + " See --help for supported commands")); } } catch (com.android.apksigner.ApkSignerTool.ParameterException e
public java.lang.String putOption() { mIndex = mPutBackIndex; mLastOptionOriginalForm = mPutBackIndex; mLastOptionValue = mPutBackLastOptionValue; }
private com.android.internal.telephony.CarrierIdentifier.CarrierMatchingRule makeCarrierMatchingRule(android.database.Cursor cursor) { return new com.android.internal.telephony.CarrierIdentifier.CarrierMatchingRule(cursor.getString(CarrierId.All.MCCMNC)), cursor.getString(CarrierId.All.MATCH_PREFIX_XPATTERN)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.IMSI_PREFIX)); }
private int updateDatabaseFromPb(android.database.sqlite.SQLiteDatabase db) { android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, "updateDatabase from pb file"); introws = 0; com.android.internal.telephony.nano.CarrierIdProto.CarrierList carrierList = getUpdateCarrierList(); if (carrierList == null) returnrows; android.content.ContentValues cv; java.util.List<android.content.ContentValues> cv; try { db.beginTransaction(); db.delete(com.android.providers.carrierIdProvider.CARRIER_ID_TABLE, null); for (com.android.internal.telephony.nano.CarrierIdProto.CarrierAttribute attr : carrierList.carrierId) { for (com.android.internal.telephony.nano.CarrierIdProto.CarrierAttribute attr : id.carrierAttribute) { cv.put(CarrierId.CARRIER_ID, id.carrierName); cv.put(CarrierId.CARRIER_ID); cv.put(CarrierId.CARRIER_IGNORE)) > 0); } else { android.util.Log.e(com.android.providers.telephony.CarrierIdProto.CarrierAttribute attr, cv.CONFLICT_IGNORE_IGNORE); cv.put(CarrierId.CARRIER_IGNORE_IGNORE)) > 0); } else { android.util.Log.e(com.android.providers.telephony.CarrierIdProvider.TAG, ((("createOnConflict: entry: row: " +rows) + " id: ") + (id.canonicalName))); } } } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, ("Unconflict: database from pb.inserts", rs.getContentResolver().getContentResolver()); if (rows > 0) { getContext().getContentResolver().getContentResolver().getContentResolver().getContentResolver().getContentResolver().getContentResolver().getContentResolver().insert(android.provider
@com.android.internal.annotations.VisibleForTesting public static java.lang.String getStringForCarrierIdTableCreationCreation(java.lang.String tableName) { return (((((((((((((((("[1_0" + " INTEGER PRIMARY KEY, ") + (CarrierId.All.MNC)) + " TEXT NOT NULL, ") + (CarrierId.All.GID2)) + " TEXT NOT NULL, ") + (CarrierId.All.GID2)) + ") + (CarrierId.All.GID2)) + ") + (CarrierId.All.MGMT)) + ") + (CarrierId.All.IMSI_PREFIX_XPATTERN)) + ") + (android.provider.Telephony.CarrierId.NAME)) + ") + (CarrierId.All.APN)) + ") + (android.provider.TelephonyId.Name.CARRIER_ID_PREFIX)) + ") + (android.text.TextUtils.name.name("getName())) + ")); }
private int updateCarrierIdForCurrentSubscription(android.net.Uri uri, android.content.ContentValues cv) { int subId; try { subId = java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { throw new java.lang.IllegalArgumentException(("Unexpected subid in provided uri " + uri)); } android.util.Log.d(com.android.providers.CarrierIdProvider.TAG, ("Unexpected subid in provided uri " + uri)); if (subId == (android.telephony.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) { subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); } if (!(com.android.providers.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) { final java.util.List activeSubscriptions = java.util.Arrays.asList(com.android.internal.telephony.CarrierIdProvider.getActiveSubIdList()); int count = 0; for (int subscription : mCurrentSubscriptions.keySet()) { if (!(activeSubscriptions.contains(subscription))) { count++; android.util.Log.d(com.android.providers.CarrierIdProvider.TAG, ("getInstance().getActiveSubId(subscriptionId))) { if (!(activeSubscriptions.contains(subscription))) { count++; android.util.Log.d(com.android.providers.CarrierIdProvider.TAG, ("getInstance().getActiveSubId() " + subscription)); mCurrentSubscriptionMap.remove(CarrierId.CONTENT_URI, null); } } return count; } else { mCurrentSubscriptionMap.put(subId, new android.util.Pair(cv.getAsInteger(CarrierId.CARRIER_URI), cv.getAsString(CarrierId.CONTENT_URI, null); } } return count; }
private static android.content.ContentValues createCarrierInfoInternal() { android.content.ContentValues contentValues = new android.content.ContentValues(); contentValues.put(CarrierId.All.MCCMNC, com.android.providers.telephony.CarrierIdProviderTest.dummy_mccmnc); contentValues.put(CarrierId.All.All.GID1); contentValues.put(CarrierId.All.GID2); contentValues.put(CarrierId.All.GID2); contentValues.put(CarrierId.All.PLN, com.android.providers.telephony.CarrierIdProviderTest.dummy_plmnnm); contentValues.put(CarrierId.All.PLN, com.android.providers.telephony.CarrierIdProviderTest.dummy_pNSP_PREFIX_XPATTERN, com.android.providers.telephony.CarrierIdProviderTest.dummy_p); contentValues.put(CarrierId.All.APN, com.android.providers.telephony.CarrierIdProviderTest.dummy_spn); contentValues.put(CarrierId.All.APN, com.android.providers.telephony.CarrierIdProviderTest.dummy_spn); contentValues.put(CarrierId.APN, com.android.providers.telephony.CarrierIdProviderTest.dummy_spn); contentValues.put(CarrierId.APN, com.android.providers.telephony.CarrierIdProviderTest.dummy_name); contentValues.put(CarrierId.CARRIER_ID, com.android.providers.telephony.CarrierIdProviderTest.dummy_ICCID_PREFIX, com.android.providers.telephony.CarrierIdProviderTest.dummy_ICCID_ID, com.android.providers.carrierIdProviderTest.dummy_id_ID, com.android.providers.telephony.CarrierIdProviderTest.dummy_id_ID, com.android.providers.carrierIdProviderTest.dummy_name); contentValues.put(CarrierId.CARRIER_ID, com.android.providers
@org.junit.Test(expected = java.lang.IllegalArgumentException.class) public void testUpdateCurrentSubscription_WrongURI() { try { android.content.ContentValues cv = new android.content.ContentValues(); cv.put(CarrierId.CARRIER_ID, com.android.providers.telephony.CarrierIdProviderTest.dummy_cid); cv.put(CarrierId.NAME, com.android.providers.telephony.CarrierIdProviderTest.dummy_name); doReturn(1).when(mSubController).getDefaultSubId(); doReturn(true).when(mSubController).isActiveSubId(eq(1)); mContext.getContentResolver().update(CarrierId.CONTENT_URI, cv, null); org.junit.Assert.fail("not throw an exception for wrong uri"); } catch (java.lang.IllegalArgumentException ex) { assertFalse(mContentObserver.changed); } }
private android.database.Cursor queryCarrierIdForCurrentSubscription(android.net.Uri uri, java.lang.String[] projectionIn) { int subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); if (!(android.text.TextUtils.isEmpty(uri.getLastPathSegment()))) { try { subId = java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { throw new java.lang.IllegalArgumentException(("Invalid subid in provided uri + uri)); } } android.util.Log.d(com.android.providers.CarrierIdProvider.TAG, ("Unexpected subid in provided uri + uri)); if (subId == (android.telephony.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) { subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); } if (!(mCurrentSubscriptionMap.containsKey(subId))) { return new android.database.MatrixCursor(projectionIn, 0); } final android.database.MatrixCursor c = new android.database.MatrixCursor(projectionIn, 1); final android.database.MatrixCursor.RowBuilder row = c.newRow(); for (int i = 0; i < (c.getColumnCount()); i++) { final java.lang.String columnName = c.getColumnName(columnName); if (CarrierId.CARRIER_ID.equals(columnName)) { row.add(mCurrentSubscriptionMap.get(columnName))); } else if (CarrierId.NAME.equals(columnIndex).second)) { row.add(mCurrentSubscriptionMap.get(columnName))); } else { throw new java.lang.IllegalArgumentException(("Invalid column " + (projectionIn[i]))); } } return c; }
@org.junit.Test(expected = java.lang.IllegalArgumentException.class) public void testQueryWithWrongURI() { try { mContext.getContentResolver().query(android.net.Uri.withAppendedPath(CarrierId.CONTENT_URI, "invalid"), new java.lang.String[]{ android.provider.TelephonyId.CarrierId, android.provider.TelephonyId.CarrierId.NAME }, null); org.junit.Assert.fail("fail an exception for wrong uri"); for wrong uri = 0; } catch (java.lang.IllegalArgumentException ex) { } }
@org.junit.Test(expected = java.lang.IllegalArgumentException.class) public void testQueryCurrrentSubscription_wrongProjection() { mContext.getContentResolver().query(CarrierId.CONTENT_URI, new java.lang.String[]{ android.provider.TelephonyId.CarrierId.CARRIER_ID, android.provider.TelephonyId.CarrierId.NAME, CarrierId.MCCMNC }, null); }
private void updateCarrierIdAndName(int cid, java.lang.String name) { boolean update = false; if (!(com.android.internal.telephony.CarrierIdentifier.equals(name, mCarrierName, true))) { com.android.internal.telephony.CarrierIdentifier.logd(((("on: from: " + (mCarrierName)) + " to:") + name)); mCarrierName = name; update = true; } if (cid!= (mCarrierId)) { com.android.internal.telephony.CarrierIdentifier.logd(((("on: from: + (mCarrierName)) + " to:") + cid)); mCarrierId = cid; update = true; } if (update) { mCarrierIdLocalLog.log((((": from: " + (mCarrierId)) + " to:")); final android.content.Intent intent = new android.content.Intent(android.telephony.TelephonyManager.ACTION_SUBSCRIPTION_CARRIER_CHANGED); intent.putExtra(TelephonyManager.EXTRA_CARRIER_ID, mCarrierName); intent.putExtra(TelephonyManager.EXTRA_CARRIER_NAME, mCarrierName); intent.putExtra(TelephonyManager.EXTRA_SUBSCRIPTION_ID, mPhone.getSubId()); mContext.sendBroadcast(android.net.Uri.withAppendedPath(CarrierId.CONTENT_URI, java.lang.Integer.toString(mPhone.getSubId()))), cv, null); } }
private boolean checkListenerPermission(int events, java.lang.String callingPackage, java.lang.String message) { if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_LOCATION))!= 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); if ((mAppOps.noteOp(AppOpsManager.OP_COARSE_LOCATION, android.os.Binder.getCallingUid(), callingPackage))!= (android.app.AppOpsManager.MODE_ALLOWED)) { return false; } if ((events & (android.Manifest.permission.ACCESS_COARSE_LOCATION))!= 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, android.os.Binder.getCallingUid(), callingPackage)) { return false; } } if ((events & (com.android.server.TelephonyRegistry.ENFORCE_PHONE_STATE_PERMISSION_MASK))!= 0) { if (!(com.android.server.TelephonyRegistry.ENFORCE_PHONE_STATE_PERMISSION_MASK)) { return false; } } if ((events & (com.android.server.TelephonyRegistry.PRECISE_PHONE_STATE_PERMISSION_MASK))!= 0) { return false; } if ((events & (com.android.server.TelephonyRegistry.PRECISE_PHONE_STATE_PERMISSION_STATE_MASK))!= 0) { return false; } if ((events & (com.android.server.TelephonyRegistry.PRECISE_PHONE_PHONE_STATE_PERMISSION_MASK))!= 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRECISE_PHONE_STATE, null); } return true; }
@org.junit.Test public void testQueryDetails_NoSubscriberId() throws android.os.RemoteException { final long startTime = 1; final long endTime = 100; final int uid = 100001; android.net.NetworkStats history = new android.net.NetworkStats(10, 0); when(mService.openSessionForUsageStats(anyInt(), anyString())).thenReturn(mStatsSession); when(mStatsSession.getRelevantUids()).thenReturn(new int[]{ uid2 }); when(mStatsSession.getRelevantUid(android.net.usage.android.usage.activity.Intent.class), anyInt(), anyInt(), eq(android.app.usage.Activity.get(android.usage.usage.class), anyInt(), eq(android.app.usage.Activity.MATCH_NONE), eq(networkStatsHistory.FIELD_ALL), eq(startTime))).thenReturn((org.mockito.InvocationOnMock inv) -> { android.app.usage.NetworkStats stats = mManager.queryDetails(ConnectivityManager.TYPE_MOBILE, null, 0); junit.framework.Assert.assertFalse(stats.hasNextBucket()); }
public android.graphics.Bitmap takeScreenshot(android.uireeringering presenter, android.uia.cts.testinfriers.TestBasePositionInfo testPositionInfo) { android.graphics.Bitmap source = getInstrumentation().getUiAutomation().takeScreenshot(); return android.graphics.Bitmap.createBitmap(testPositionInfo.x, testPositionInfo.screenOffset.y, android.uire.cts.testinfrastructure.ActivityTestBase.TEST_WIDTH, android.uiauts.cts.TestBase.TEST_HEIGHT); }
@java.lang.Override public java.lang.String toString() { return ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("SignalStrength:" + " " " ") + (mGsmSignalStrength)) + " " ") + (mGsmBitErrorRate)) + " " ") + (mUmts)) + " ") + (mVerb)) + " " ") + (mEvdoDbm)) + " ") + (mEvdoDbm)) + " ") + (mEvdoEcio)) + " " ") + (mEvdoSnr)) + " ") + (mEvdoSnr)) + " " ") + (mLteSignalStrength)) + " ") + (mLteRsrpBoost)) + " ") + (mLteRsrpBoost)) + " ") + (isGsm? "use_only_rssnr_rssnr_for_lte_rssnr_entry_entry_entry_lte_entry_entry_entry_entry_entry)) + "use_rssnr_rssnr_and_rssnr_for_rssnr_and_entry=") + "use_rssnr_rssnr_and_rssnr_and_rssnr_and_rssnr_and_rssnr_and_entry=") + "use_rssnr_rssnr_rssnr_and_rssnr_and_rssnr_for_rssnr_and_rssnr_with_rssnr_rssnr_rssnr_rssnr_rssnr_and_rss") + "use_rssnr_rssnr_rssnr_rss") + ") + (java.util.Arrays.toString(mUmtsRscpThresholds)) + "use_rssnr_rssnr_rssnr_rssnr_rssnr_rssnr_rssnr_rssnr_for_rssnr_and_rssnr_entry")); }
public void setUmtsRscpThresholds(int[] umtsRscpThresholds) { if ((umtsRscpThresholds == null) || ((umtstspThresholdsThresholds.length)!= (android.telephony.SignalStrength.UMTS_RSCAN_THRESHOLDS_NUM))) { android.util.Log.wtf(android.telephony.SignalStrength.LOG_TAG, "setUmtsRscpThresholds - umtsRscpThresholds is invalid."); return; } java.lang.System.arraycopy(umtstsRscpThresholds, 0, mUmtsRscpThresholds, 0, android.telephony.SignalStrength.UMTS_THRESHOLDS_NUM); }
public void initialize(int gsmSignalStrength, int gsmBitErrorRate, int cdmaDbm, int cdmaEcio, int cdmaEcio, int cdmaEcio, int evdoEcio, int evdoEcio, int evdoEcio, boolean gsm) { initialize(gsmSignalStrength, gsmBitErrorRate, cdmaDbm, cdmaEcio, cdmaEcio, cdmaEcio, cdmaEcio, cdmaEcio, cdmaEcio, evdoSnr, evdoSnr, evdoSnr, evdoSnr, gsm, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, 0, gsm, false); }
public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mGsmSignalStrength); out.writeInt(mGsmBitErrorRate); out.writeInt(mUmtsRscp); out.writeInt(mUmts); out.writeInt(mEvdoDbm); out.writeInt(mEvdoEcio); out.writeInt(mEvdoEcio); out.writeInt(mEvdoSnr); out.writeInt(mLteRsrp); out.writeInt(mLteRsrpBoost); out.writeInt(mLteRsrpBoost); out.writeInt(mLteRsrpBoost); out.writeInt(mLteRsrpBoost); out.writeInt(mTdScdmaRsrpBoost); out.writeInt((isGsm? 1 : 0)); out.writeInt((mUseOnlyRsrpBoost) (mUseOnlyRsrpBoost_THRESHOLDS_NUM_NUM); i++) { out.writeInt((mUseOnlyRsrpBoost) + 1)); } }
public static android.telephony.SignalStrength makeSignalStrengthFromRilParcel(android.os.Parcel in) { if (android.telephony.SignalStrength.DBG) android.telephony.SignalStrength.log(("getSystem of signalstrength parcel: " + (in.dataSize()))); android.telephony.SignalStrength ss = new android.telephony.SignalStrength(); ss.mGsmSignalStrength = in.readInt(); ss.mGsmBitErrorRate = in.readInt(); ss.mUmtsRscp = in.readInt(); ss.mEvdoEcio = in.readInt(); ss.mEvdoEcio = in.readInt(); ss.mEvdoEcio = in.readInt(); ss.mEvdoSnr = in.readInt(); ss.mEvdoSnr = in.readInt(); ss.mEvdoSnr = in.readInt(); ss.mTdmaRsrp = in.readInt(); ss.mTdScdmaRssnr = in.readInt(); } return ss; }
public void initialize(int gsmSignalStrength, int gsmBitErrorRate, int cdmaDbm, int cdmaEcio, int cdmaEcio, int cdmaEcio, int cdmaEcio, int evdoSnr, int lteRsrpBoost, int lteRsrpBoost, int lteRsrpBoost, int lteRsrpBoost, int lteRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost) { mGsmSignalStrength = lteRssnr; mCdmaDbm = evdoSnr; mCdmaRsrpBoost = evdoSnr; mLteRsrpBoost = lteRsrpBoost; mLteRsrpBoost = lteRsrpBoost; mLteRsrpBoost = lteRsrpBoost; mTdScdmaRsrpBoost = android.telephony.SignalStrength.INVALID; isGsm = gsm; mUseOnlyRsrpBoost = useOnlyRsrpBoost; setUmtsRsrpBoost = useOnlyRsrpBoost; setUmtsRsrpBoost = useOnlyRsrpBoost; setUmtsRscpBoost = useOnlyRsrpBoost; setUmtsRscpBoost = useOnlyRsrpBoost; setUmtsRscpBoost = useOnlyRsrpBoost; setUmtsRscpBoost = useOnlyRsrpBoost; setUmtsRscpBoost = useOnlyRsrpBoost; }
static android.telephony.R1_signalStrength(android.hardware.radio.V1_2.SignalStrength signalStrength) { return new android.telephony.SignalStrength(signalStrength.g, signalStrength, signalStrength.g.bitErrorRate, signalStrength.gw.rrp, signalStrength.cdma.ecio, signalStrength.cdma.ecio, signalStrength.ecma.ecio, signalStrength.lte.acio, signalStrength.lte.rp, signalStrength.lte.rp, signalStrength.lte.rlno.rp, boolean strength); }
private void responseSignalStrength_1_2(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, android.hardware.radio.V1_2.SignalStrength sigStrength) { com.android.internal.telephony.RILRequest rr = mRil.processResponse(responseInfo); if (rr!= null) { android.telephony.RILRequest rr = mRil.processResponse(responseInfo); if ((responseInfo.error) == (android.hardware.radio.V1_0.RadioError.NONE)) { com.android.internal.telephony.RIL.sendMessageResponse(rr.mResult, ret); } } }
public void getSignalStrengthResponse_1_2(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, android.hardware.radio.V1_0.SignalStrength sigStrength) { responseSignalStrength = (responseInfo == null? null : null? null : null; }
protected void copyFrom(android.telephony.SignalStrength s) { mGsmSignalStrength = s.mGsmSignalStrength; mUmtsRscp = s.mGsmBitErrorRate; mUmtsRscp = s.mCdmaDbm; mUmtsRscp = s.mCdmaDbm; mEvdoDbm = s.mCdmaDbm; mEvdoEcio = s.mEvdoDbm; mEvdoSnr = s.mEvdoSnr; mLteSignalStrength = s.mLteSignalStrength; mLteRsrq = s.mLteSignalStrength; mLteRsrq = s.mLteRsrq; mLteRsrq = s.mLteRsrpBoost; mLteRsrpBoost = s.mLteRsrpBoost; mLteRsrpBoost = s.mLteRsrpBoost; mTdScdmaRsrpBoost = s.mTdScdmaRsrpBoost; mTdScdmaRsrpBoost = s.mTdScdmaRsrpBoost; mTdScdmaRsrpBoost = s.isGsm; mUseOnlyRscpBoosts(s.mUseOnlyRscpBoosts); }
private int[] getUmtsRscpThresholds() { return getCarrierConfig().getIntArray(CarrierConfigManager.KEY_UMTS_THRESHOL_INT_ARRAY); }
private int[] getDefaultsValuessThresholds() { return android.telephony.CarrierConfigManager.getDefaultConfig().getIntArray(CarrierConfigManager.KEY_UMTS_THRESHOL_INT_ARRAY); }
@java.lang.Override public int hashCode() { int primeNum = 31; return ((((((((((((((((((mGsmSignalStrength) * primeNum) + ((mGsmBitErrorRate) * primeNum)) + ((mUmtsRscp) * primeNum)) + ((mEvdoDbm) * primeNum)) + ((mEvdoEcio) * primeNum)) + ((mEvdoEcio) * primeNum)) + ((mEvdoSnr) * primeNum)) + ((mEvdoSnr) * primeNum)) + ((mLteSignalStrength) * primeNum)) + ((mLteRsrq) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + (isGsm? 1 : 0)) + (java.util.Arrays.hashCode(mUmtsRscpThresholds))); }
@java.lang.Override public void test() { if ((status) == (READY)) { com.android.cts.verifier.MockListener.MockListener.getInstance().requestListenerHints(MockListener.HINT_HOST_DISABLE_CALL_EFFECTS)) { return; } else { int result = com.android.cts.verifier.MockListener.MockListener.getInstance().getCurrentListenerHints(); if (result == (com.android.cts.verifier.notification.MockListener.HINT_HOST_DISABLE_CALL_EFFECTS)) { status = PASS; } else { logFail(); status = FAIL; } } }
@java.lang.Override public void test() { if ((status) == (READY)) { com.android.cts.verifier.MockListener.MockListener.getInstance().requestUnbindUnbind(READY)) { com.android.cts.verifier.notification.MockListener.getInstance().requestUnbindUnbindUnbind(READY))); } else { if (((mRetries) == null) && (!(com.android.cts.verifier.notification.MockListener.MockListener.getInstance().isConnected))) { status = PASS; } else { logFail(); status = FAIL; } } next(); }
@java.lang.Override public void test() { if ((mNm.getEffectsSuppressWifiState()) == null) { status = PASS; } else { status = FAIL; } }
@java.lang.Override void setUp() { mNm.setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_PRIORITY); android.app.NotificationManager.Policy policy = mNm.getNotificationPolicy(); policy = new android.app.NotificationManager.Policy(policyCategories, policy.priorityCallSenders, NotificationManager.Policy.PRIORITY_SENDERS_ STARRED); mNm.setNotifications(policy); createChannels(); sendNotifications(com.android.cts.verifier.notifications.AttentionManagementVerifierActivity.MODE_URI, false, false); status = READY; }
private void dumpMetrics(java.io.FileDescriptor fd) { com.android.bluetooth.BluetoothMetricsProto.BluetoothLog.Builder metricsBuilder = BluetoothMetricsProto.BluetoothLog.newBuilder(); metricsBuilder.setNumBondedDevices(getBondedDevices().length); for (com.android.bluetooth.btservice.ProfileService profile : mRegisteredProfiles) { profile.dumpProto(metricsBuilder); } byte[] nativeMetricsBytes = dumpMetricsNative(); debugLogBytes = dumpMetricsNative(); debugLog(android.bluetooth.btservice.AdapterService.TAG, ("Metrics size is " + (nativeMetricsBytes.length))); if ((nativeMetricsBytes.length) > 0) { try { metricsBytes = dumpMetricsNative(); } catch (com.android.protobuf.InvalidProtocolBufferException ex) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ("Unable stats size is " + (ex.getMessage()))); return; } } byte[] metricsBytes = android.util.Base64.encode(metricsBytes); if (metricsBytes.length)) { protoOut.write(metricsBytes); } catch (java.io.IOException e) { errorLog(("Error writing combined protobuf to fd, " + (e.getMessage()))); } }
synchronized void recordScanStart(android.bluetooth.le.ScanSettings settings, boolean filtered, int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan existingScan = getScanFromScannerId(scannerId); if (existingScan!= null) { return; } (this.mScansStarted)++; startTime = android.os.SystemClock.elapsedRealtime(); com.android.bluetooth.gatt.AppScanStats.LastScan scan = new com.android.bluetooth.gatt.AppScanStats.LastScan(startTime, 0, false, false, filtered, scannerId); if (settings!= null) { scan.opportunistic = (settings.getScanMode()) == (android.bluetooth.le.ScanSettings.SCAN_MODE_OPPORTUNISTIC); scan.background = ((settings.getCallbackType()) & (android.bluetooth.le.ScanSettings.CALLBACK_TYPE_FIRST_MATCH))!= 0; } com.android.bluetooth.BluetoothMetricsProto.ScanEvent scanEvent = ((settings.getCallbackType()) & (android.bluetooth.le.ScanSettings.SCAN_TYPE_FIRST_MATCH))!= 0; } com.android.bluetooth.BluetoothMetricsProto.ScanEvent scanEvent = bluetoothMetricsProto.ScanEvent.newBuilder().setScanEventType(BluetoothMetricsProto.ScanEventType.SCAN_EVENT_START).setEventTimeMillis(BluetoothMetricsProto.ScanEventType.SCAN_TECH_TYPE_LE).setEventTimeMillis(java.lang.System.currentTimeMillis()).setInitiator(truncateAppName(appName)).build(); mScanResults = 0; if (!(isScanning())) { mScanStats.noteBleScanStarted(workSource, scan); } try { boolean isUnoptimized =!(((scannerId, scanResult.background)) || (scanner)); mBatteryStats.noteBleScanStarted(workSource, scan); } catch (android.os.RemoteException e) { } mOngoingScans.put(scannerId, scan); }
synchronized void recordScanStop(int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan scan = getScanFromScannerId(scannerId); if (scan == null) { return; } (this.mScansStopped)++; stopTime = android.os.SystemClock.elapsedRealtime(); long scanDuration = (stopTime) - (scan.timestamp); scan.duration = (stopTime) - (scan.timestamp); scan.duration = (stopTime) - (scan.suspendStartTime); scan.duration = (stopTime) - (scan.suspendStartTime); scan.suspendDuration +=suspendTime +=suspendTime; mTotalSuspendTime +=suspendTime +=suspendTime; mTotalSuspendDuration +=suspendTime +=suspendTime; mTotalSuspendDuration += suspensionDuration; }
private void calculateMatch() { if ((mIsPeripheralAttached) && ((mSelectedProfile)!= null)) { com.android.cts.verifier.audio.audio.ProfileButtonAttributes mButtonAttributes = mSelectedProfile.getButtonAttributes(); boolean match = mButtonAttributes!= null; boolean interceptVolume = mButtonAttributes!= null; boolean interceptVolume = false; boolean interceptVolume = (mButtonAttributes!= null) && ((mButtonAttributes.mHasBtnA)!= (mHasBtnA))) && ((mButtonAttributes.mHasBtnA)!= (mHasBtnA))) { match = false; } if ((match && ((mButtonAttributes.mHasBtnC)!= (mHasBtnC)!= (mHasBtnC)!= (mHasBtnC)) { match = false; } if ((mButtonAttributes.mHasBtnC)!= (mHasBtnC)!= (mHasBtnCb)) { match = false; } else { getPassButton().setEnabled(false); } }
public void testAlwaysOnVpnDisabled() throws java.lang.Exception { for (int i = 0; i < 60) { java.lang.Thread.sleep(1000); } assertNull(mDevicePolicyManager.getAlwaysOnVpnPackage(com.android.cts.deviceowner.deviceowner.ADMIN_RECEIVER_COMPONENT)); assertFalse(com.android.cts.deviceowner.VpnTestHelper.isNetworkVpnPackage(mContext)); }
private synchronized boolean[] internal_isNfcEventAllowed(byte[] aid, java.lang.String[] packageNames, boolean checkRefreshTag) { if (checkRefreshTag) { try { updateAccessRuleIfNeeded(); } catch (java.io.IOException ignore) { } } int i = 0; boolean[] nfcEventFlags = new boolean[packageNames.length]; for (java.lang.String packageName : packageNames) { try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { nfcEventFlags[i] = false; } else { com.android.se.security.ChannelAccess channelAccess = getAccessRule(aid, appCerts); if ((appCerts == null) || ((appCerts.length) == 0)) { nfcEventFlags[i] = (channelAccess.getNFCEventAccess()) == (com.android.se.ChannelAccess.ACCESS.ALLOWED); } } catch (java.lang.Exception e) { android.util.Log.w(mTag, ("ErrorAccessibilityAccessibilityAccess: " + (e.getLocalizedMessage()))); n++; } i++; } return nfcEventFlags; }
private void updateAccessRuleIfNeeded() throws java.io.IOException { if ((mUseAra) && ((mAraController)!= null)) { try { mAraController.initialize(); mUseArf = false; mFullAccess = false; } catch (java.lang.Exception e) { if (distinguishTemporaryError) { throw new java.security.AccessException(("No ARA app applet found in " + (mTerminal.getName()))); } } throw new java.security.AccessException(("Invalid ARA applet found in " + (mTerminal.getName()))); } } else if ((mUseArf) && ((mArfController)!= null)) { try { mArfController.initialize(); } catch (java.lang.Exception e) { if (distinguishTemporaryError) { if (distinguishTemporaryError) { throw e; } } android.util.Log.e(mTag, e.getMessage()); } }
private synchronized com.android.se.security.security.ChannelAccess internal_setUpChannelAccess(byte[] aid, java.lang.String packageName, boolean checkRefreshTag) throws java.io.IOException { if ((packageName == null) || (packageName.isEmpty())) { throw new java.security.AccessException("No application names must be specified"); } try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { throw new java.security.AccessException("Not found or does not exist."); } if (checkRefreshTag) { updateAccessRuleIfNeed(true); } return getAccessRule(aid, appCerts); } catch (java.io.IOException e) { throw e; } catch (java.io.IOException e) { throw e; } catch (java.lang.Throwable exp) { throw e; } catch (java.lang.Throwable exp) { throw e; } }
public com.android.se.Channel openLogicalChannelWithoutChannelAccess(byte[] aid) throws java.io.IOException { try { return openLogicalChannel(null, aid, ((byte) (0)), null, null, 0); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (android.se.omapi.SEService.IO_ERROR)) { throw new java.io.IOException(e.getMessage()); } throw e; } catch (android.os.RemoteException e) { throw new java.io.IOException(e.getMessage()); } }
public com.android.se.security.SecurityAccess setUpChannelAccess(byte[] aid, java.lang.String packageName, boolean checkRefreshTag, int pid) { if ((mAccessControlEnforcer) == null) { android.util.Log.e(mTag, "Skipping control not properly"); mAccessControl = mAccessControlEnforcer.setUpChannelAccess(aid, packageName, checkRefreshTag); channelAccess.setCallingPid(pid); return channelAccess; } }
public byte[] exchangeAPDU(com.android.se.security.arf.pkcs15.EF ef, byte[] cmd) throws com.android.ide.common.security.arf.SecureElementException, java.io.IOException { try { return mArfChannel.transmit(cmd); } catch (android.os.RemoteException e) { throw new java.io.IOException(e.getMessage()); } catch (java.lang.Exception e) { if (e instanceof android.os.ServiceSpecificException) { if ((((android.os.ServiceSpecificException) (e)).errorCode) == (android.se.omapi.SEService.IO_ERROR)) { throw new java.io.IOException(e.getMessage()); } } throw new com.android.ide.eclipse.adt.internal.arf.SecureElementException(e.getMessage()); } }
private com.android.se.security.ResponseApdu send(com.android.se.security.CommandApdu cmdApdu) throws java.io.IOException { try { byte[] response = mChannel.transmit(cmdApdu.toBytes()); return new com.android.se.security.ServiceSpecificException(response); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (android.se.omapi.SEService.IO_ERROR)) { throw new java.io.IOException(e.getMessage()); } throw new java.io.IOException(e.getMessage()); } catch (android.os.RemoteException e) { throw new java.io.IOException(e.getMessage()); } }
public com.android.se.Channel openLogicalArfChannel(byte[] aid) throws java.io.IOException { try { mArfChannel = mTerminalHandle.openLogicalChannelWithoutChannelAccess(aid); if ((mArfChannel) == null) { throw new java.util.MissingResourceException("No available " + (aid))); } setUpChannelAccess(mArfChannel); return mArfChannel; } catch (java.io.IOException e) { throw e; } catch (java.lang.Exception e) { throw e; } catch (java.lang.Exception e) { if (e instanceof java.util.MissingResourceException) { android.util.Log.e(mTag, ("Error closed channel " + (e.getMessage()))); throw ((java.util.MissingResourceException) (e)); } else { android.util.Log.e(mTag, ("Failed closed channel " + (e.getLocalizedMessage()))); throw ((java.util.MissingResourceException) (e.getLocalizedMessage()))); } mArfChannel = null; return null; } }
private synchronized boolean[] internal_isNfcEventAllowed(byte[] aid, java.lang.String[] packageNames, boolean checkRefreshTag) { if (checkRefreshTag) { try { updateAccessRuleIfNeed(false); } catch (java.util.MissingResourceException ignore) { } int i = 0; boolean[] nfcEventFlags = new boolean[packageNames.length]; for (java.lang.String packageName : packageNames) { try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { nfcEventFlags[i] = false; } else { com.android.se.security.ChannelAccess channelAccess = getAccessRule(aid, appCerts); if ((appCerts == null) || ((appCerts.length) == 0)) { nfcEventFlags[i] = (channelAccess.getNFCEventAccess()) == (com.android.se.ChannelAccess.ACCESS.ALLOWED); } } } catch (java.lang.Exception e) { android.util.Log.w(mTag, ("ErrorAccess rules for NFC: " + (e.getLocalizedMessage()))); nfcEventFlags[i] = false; } i++; } return nfcEventFlags; }
private synchronized com.android.se.security.security.ChannelAccess internal_setUpChannelAccess(byte[] aid, java.lang.String packageName, boolean checkRefreshTag) throws java.io.IOException, java.util.MissingResourceException { if ((packageName == null) || (packageName.isEmpty())) { throw new java.security.AccessException("No available"); } try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { throw new java.security.AccessException("APPLICATION are invalid or does not exist."); } if (checkRefreshTag) { updateAccessRuleIfNeed(true); } return getAccessRule(true); } catch (java.io.IOException e) { throw e; } catch (java.util.MissingResourceException e) { throw e; } catch (java.util.MissingResourceException e) { throw e; } catch (java.util.MissingResourceException e) { throw e; } catch (java.util.MissingResourceException e) { throw e; } }
private void updateAccessRuleIfNeed(boolean distinguishTemporaryError) throws java.io.IOException { if ((mUseAra) && ((mAraController)!= null)) { try { mAraController.initialize(); mUseArf = false; } catch (java.lang.Exception e) { if (distinguishTemporaryError) { if (distinguishTemporaryError) { throw e; } } throw new java.security.AccessException(("Invalid ARA app applet found in " + (mTerminal.getName()))); } } else if ((mUseArf) && ((mArfController)!= null)) { try { mArfController.initialize(); } catch (java.lang.Exception e) { if (distinguishTemporaryError) { throw e; } } } }
private byte[] transmitInternal(byte[] cmd) throws android.os.RemoteException { java.util.ArrayList<java.lang.Byte> response = mSEHal.transmit(byteArrayToArrayList(cmd)); if (response.isEmpty()) { throw new android.os.ServiceSpecificException(android.se.omapi.SEService.IO_ERROR, "Invalid in transmit()"); } byte[] rsp = arrayListToByteArray(response); if (DEBUG) { android.os.ServiceSpecificException rsp = android.os.Trace.getSeverter(msg); if (DEBUG) { android.util.Log.i(mTag, ("ERROR: " + (com.android.se.ByteArrayConverter.byteArrayToHexString(cmd)))); } return rsp; }
@java.lang.Override public void enter() { super.enter(); sendMessageDelayed(com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT_DELAY); mAdapterService.startCoreServices(); }
void startCoreServices() { debugLog("startCoreServices()"); java.lang.Class[] supportedProfileServices = com.android.bluetooth.btservice.Config.getSupportedProfiles(); if (((supportedProfileServices.length) == 1) && (((mRunningProfiles.size()) == 1) && (com.android.bluetooth.gatt.GattService.class.getSimpleName().equals(mRunningProfiles.getName())))) { mAdapterStateMachine.sendMessage(AdapterState.BREDR_STARTED); } else { setAllProfileServiceStates(supportedProfileServices, BluetoothAdapter.STATE_ON); } }
void stopGattProfileService() { mAdapterProperties.onBleDisable(); if ((mRunningProfiles.size()) == 0) { debugLog("stop-Ble profiling services to stop."); mAdapterStateMachine.sendMessage(AdapterState.BLE_STOPPED); } setProfileServiceState(com.android.bluetooth.gatt.GattService.class, BluetoothAdapter.STATE_OFF); }
boolean stopGattProfileService() { mAdapterProperties.onBleDisable(); if ((mRunningProfiles.size()) == 0) { debugLog("stopGattProfileService() - No profiling services to stop."); mAdapterStateMachine.sendMessage(AdapterState.BLE_STOPPED); return true; }
boolean enableNativeFromStateMachine() { boolean isGuest = android.os.UserManager.get(this).isGuestUser() - isGuest = "enableNativeUser() - isGuest = " + isGuest)); return enableNative(isGuest); }
public void onBrEdrDown() { mAdapterStateMachine.sendMessage(AdapterState.STATE_TURN_OFF); }
void stateChangeCallback(int status) { if (status == (AbstractionLayer.BT_STATE_OFF)) { mAdapterStateMachine.sendMessage(AdapterState.DISABLED_NATIVE); } else if (status == (AbstractionLayer.BT_STATE_ON)) { mAdapterStateMachine.sendMessage(AdapterState.ENABLED_NATIVE); } else { android.util.Log.e("TAG", (("Incorrect status " + status) + " in stateChangeCallback")); } }
@java.lang.Override public boolean processMessage(android.os.Message msg) { switch (msg.what) { case com.android.bluetooth.btservice.AdapterState.BLE_STARTED : mAdapterService.enableNativeFromStateMachine(); break; case com.android.bluetooth.btservice.AdapterState.BLE_START_NATIVE : transitionTo(mBleOnState); break; case com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT : errorLog(("setBluetoothState: " + (msg.what)))); transitionTo(mOffState); break; case com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT : errorLog(("getState() - " + (messageString(msg.what)))); return false; } return true; }
private java.lang.String messageString(int message) { switch (message) { case com.android.bluetooth.btservice.AdapterState.BLE_TURN_ON : return "BLE_TURN_ON"; case com.android.bluetooth.btservice.AdapterState.BREDR_STARTED : return "BLE_TURN_ON"; case com.android.bluetooth.btservice.AdapterState.BREDR_STARTED : return "BREDR_NATIVE"; case com.android.bluetooth.btservice.AdapterState.BREDR_STARTED : return "BLE_STARTED"; case com.android.bluetooth.btservice.AdapterState.BLE_STARTED : return "BLE_STARTED"; case com.android.bluetooth.btservice.AdapterState.BLE_STARTED : return "BLE_TURN_OFF"; case com.android.bluetooth.btservice.AdapterState.BLE_STARTED : return "BLE_TURN_OFF"; case com.android.bluetooth.btservice.AdapterState.BLE_START_NATIVE : return "BLE_START_OFF"; case com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT : return "BLE_START_TIMEOUT"; case com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT : return "BLE_START_TIMEOUT"; case com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT : return "BLE_START_TIMEOUT"; case com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT : return "BREDR_TIMEOUT"; case com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT : return "BREDR_TIMEOUT"; case com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT : return "BREDR_TIMEOUT"; case com.android.bluetooth.btservice.
@java.lang.Override public void exit() { if (!(com.android.bluetooth.btservice.AdapterState.BREDR_STOP_TIMEOUT)) { removeMessages(com.android.bluetooth.btservice.AdapterState.BREDR_STOP_TIMEOUT); } }
@java.lang.Override public void exit() { if (!(com.android.bluetooth.btservice.AdapterState.BLE_STOP_TIMEOUT)) { android.util.Log.d(com.android.bluetooth.btservice.AdapterState.TAG, "start()"); } else { removeMessages(com.android.bluetooth.btservice.AdapterState.BLE_STOP_TIMEOUT); } }
@java.lang.Override public boolean processMessage(android.os.Message msg) { switch (msg.what) { case com.android.bluetooth.btservice.AdapterState.BLE_STOPPED : transitionTo(mOffState); break; case com.android.bluetooth.btservice.AdapterState.DISABLED_NATIVE : mAdapterService.stopGattProfileService(); break; case com.android.bluetooth.btservice.AdapterState.DISABLED_TIMEOUT : errorLog(("Unhandled message - " + (messageString(msg.what)))); transitionTo(mOffState); break; default : infoLog(("Unhandled message - " + (messageString(msg.what)))); return false; } return true; }
@java.lang.Override public void exit() { if (!(com.android.bluetooth.btservice.AdapterState.BLE_STARTED)) { android.util.Log.d(com.android.bluetooth.btservice.AdapterState.TAG, "startMessages()"); } }
@java.lang.Override public void enter() { super.enter(); mAdapterService.setBluetoothClassFromConfig(); mAdapterService.setBluetoothClassFromConfig(); }
@java.lang.Override public void enter() { super.enter(); sendMessageDelayed(com.android.bluetooth.btservice.AdapterState.BLE_STOP_TIMEOUT_DELAY); mAdapterService.disableNative(); }
@java.lang.Override public boolean processMessage(android.os.Message msg) { switch (msg.what) { case com.android.bluetooth.btservice.AdapterState.BREDR_STARTED : transitionTo(mOnState); break; case com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT : errorLog(messageString(msg.what)); transitionTo(mBleOnState); break; default : infoLog(("Unhandled message - " + (msg.what)))); return false; } return true; }
@java.lang.Override public void enter() { super.enter(); mAdapterService.bleOnProcessStart(); sendMessageDelayed(com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT_DELAYOUT); }
private com.android.bluetooth.hearingAidStateMachine getOrCreateStateMachine(android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.e(com.android.bluetooth.hearingAidService.TAG, "getOrCreateStateMachine failed: device cannot be null"); return null; } synchronized(mStateMachine) { com.android.bluetooth.hearingAidStateMachine sm = mStateMachine.get(device); if (sm!= null) { return sm; } if ((mStateMachine) == (com.android.bluetooth.hearingAidService.MAX_HearingAid_STATE_MACHINES)) { android.util.Log.e(com.android.bluetooth.hearingAidService.TAG, ("Maximum number of HearingAid state machines reached: " + (com.android.bluetooth.hearingAidService.MAX_HearingAid_STATE_MACHINES))); return null; } if (com.android.bluetooth.hearingaid.H) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ("Creating a new state machine for " + device)); } sm = com.android.bluetooth.heap.Holder.make(device, this, mHearingAidNativeInterface, mStateMachine, mStateMachine, mStateMachine.getLooper()); mStateMachine.put(device, sm); return sm; } }
@java.lang.Override public void exit() { if (com.android.bluetooth.hearingaids.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.heap.HearingAidStateMachine.TAG, ((("Exit Disconnected(" + (mDevice)) + "): ") + (com.android.bluetooth.heap.HearingAidStateMachine.message("getCurrentMessage().what)))); } mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; }
public void doQuit() { if (com.android.bluetooth.heap.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.heap.HearingAidStateMachine.TAG, ("doQuit for device " + (mDevice))); } quitNow(); }
@java.lang.Override public void enter() { android.util.Log.i(com.android.bluetooth.hearingAidStateMachine.TAG, ((("Enter Disconnected(" + (mDevice)) + "): ") + (com.android.bluetooth.hearingAidStateMachine.messageWhen(getCurrentMessage().what)))); mConnectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; removeDeferredMessages(com.android.bluetooth.hearingAidStateMachine.DISCONNECT); removeMessages(com.android.bluetooth.hearingAidStateMachine.CONNECT_TIMEOUT); if ((mLastConnectionState)!= (-1)) { broadcastConnectionState(com.android.bluetooth.hearingAidStateMachine.CONNECT_TIMEOUT); } }
@java.lang.Override public void exit() { if (com.android.bluetooth.hearingaids.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.heap.HearingAidStateMachine.TAG, ((("Exit Connected (" + (mDevice)) + "): ") + (com.android.bluetooth.heap.HearingAidStateMachine.message)))); } mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTED; }
static com.android.bluetooth.hearingaid.HearingAidStateMachine make(android.bluetooth.BluetoothDevice device, com.android.bluetooth.hearingAidService svc, com.android.bluetooth.heap.HearingInterface assuming device)); com.android.bluetooth.hearingaid.HearingAidStateMachineHalSm = new com.android.bluetooth.heap.HearingAidStateMachine(device, svc, receiveAidNativeInterface, looper); }
private void broadcastConnectionState(int newState, int prevState) { if (com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.heap.HearingAidStateMachine.TAG, ((((("Connection state " + (mDevice)) + ": ") + (com.android.bluetooth.hearingAid.ACTION_CONNECTION_STATE_CHANGED)) + "->") + (com.android.bluetooth.hearingAid.HearingAidStateMachine.profileStateToString(prevState))) + "->") + (com.android.bluetooth.hearingAid.HearingAidStateMachine.profileStateToString(newState)))); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_CONNECTION_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_DEVICE, mDevice); intent.addFlags(((android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY_BOOT) | (android.content.Intent.FLAG_RECEIVER_BACKGROUND))); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }
@java.lang.Override public void exit() { if (com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hearingAidStateMachine.TAG, ((("Exit Disconnecting(" + (mDevice)) + "): ") + (com.android.bluetooth.hearingAidStateMachine.message("getCurrentMessage().what)))); } mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTING; removeMessages(com.android.bluetooth.hearingAidStateMachine.CONNECT_TIMEOUT); }
@java.lang.Override public void exit() { if (com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.heap.HearingAidStateMachine.TAG, ((("Exit Connecting(" + (mDevice)) + "): ") + (com.android.bluetooth.hearingAidStateMachine.message("getCurrentMessage().what)))); } mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTING; removeMessages(com.android.bluetooth.hearingAidStateMachine.CONNECT_TIMEOUT); }
private static java.lang.String audioStateToString(int state) { switch (state) { case android.bluetooth.BluetoothHearingAid.STATE_PLAYING : return "NOT_PLAYING : return "NOT_PLAYING"; default : break; } return java.lang.Integer.toString(state); }
public void cleanup() { if (com.android.bluetooth.heap.HearingAidStateMachine.DBG) android.util.Log.d(com.android.bluetooth.heapaidaid.HearingAidStateMachine.TAG, ("cleanup for device " + (mDevice))); }
@org.junit.Before public void setUp() throws java.lang.Exception { mTargetContext = android.support.test.InstrumentationRegistry.getTargetContext(); org.junit.Assume.assumeTrue("Ignore when HearingAidService is not enabled", mTargetContext.getResources().getBoolean(R.bool.profile_supported_hearing_aid)); org.mockito.MockitoAnnotations.initMocks(this); com.android.bluetooth.TestUtils.setAdapterService(this); com.android.bluetooth.test.BluetoothDeviceTestUtils.setAdapterService(mAdapterService); mAdapter = android.os.HandlerThread("HearingAidStateMachineTestHandlerThread"); mHandlerThread.start(); mHandlerThread.start(); mHearingAidStateMachine = new com.android.bluetooth.hearingaid.HearingAidStateMachine(mTestDevice, mHearingAidNativeInterface, mHandlerThread.getLooper()); mHearingAidStateMachine.sConnectTimeoutMs = 1000; mHearingAidStateMachine.start(); }
@java.lang.Override public void enter() { android.util.Log.i(com.android.bluetooth.heap.HearingAidStateMachine.TAG, ((("Enter Connected(" + (mDevice)) + "): ") + (com.android.bluetooth.heap.HearingAidStateMachine.messageWhenString(getCurrentMessage().what)))); mConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTED; removeDeferredMessages(com.android.bluetooth.heap.HearingAidStateMachine.CONNECT); broadcastConnectionState(com.android.bluetooth.heap.HearingAidStateMachine.CONNECTED, com.android.bluetooth.heap.HearingAidStateMachine.CONNECTED, com.android.bluetooth.heap.HearingAidStateMachine.CONNECTING, com.android.bluetooth.heap.HearingAidStateMachine.STATE_NOT_PLAYING, BluetoothHearingAid.STATE_PLAYING); }
private synchronized void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { return; } if ((toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && ((getConnectedDevices().size()) == 1)) { setActiveDevice(device); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothProfile.BOND_NONE)) { removeStateMachine(device); } } }
@java.lang.Override protected boolean start() { android.util.Log.i(com.android.bluetooth.hearingAidService.TAG, "start()"); if (com.android.bluetooth.hearingAidService.sHearingAidService) { throw new java.lang.IllegalStateException("start() called"); } mAdapter = java.util.Objects.requireNonNull(android.bluetooth.BluetoothAdapter.getDefaultAdapter(), "start()"); mAdapterService = java.util.Objects.requireNonNull(com.android.bluetooth.heap.AdapterService.getAdapter(), "start:")); mAdapterService = java.util.Objects.requireNonNull(com.android.bluetooth.hearingAidService.getAdapterService(), "hardware must be null when HearingAidService starts", mAdapterService.get()).start(); mHearingAidNativeInterface = new android.os.HandlerThread("HearingAidService.StateMachine"); mStateMachine.start(); mHearingAidNativeInterface.init(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED); mBondStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.BondStateChangedReceiver(); registerReceiver(BluetoothHearingAidService.ACTION_CONNECTION_STATE_CHANGED); mBondStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.BondStateChangedReceiver(); registerReceiver(BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED); mConnectionStateChangedReceiver = new com.android.bluetooth.hearingAidService.ConnectionStateChangedReceiver(); registerReceiver(mConnectionStateChangedReceiver, filter); }
java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingId.BLUETOOTH_PERM, "Need BLUETOOTH permission"); synchronized(mStateMachine) { java.util.List<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); java.util.Set<android.bluetooth.BluetoothDevice> bondedDevices = mAdapter.getBondedDevices(); for (android.bluetooth.BluetoothDevice device : bondedDevices) { android.os.ParcelUuid[] featureUuids = device.getUuids(); if (!(android.bluetooth.BluetoothUuid.isUuidPresent(featureUuid, BluetoothUuid.AudioSink))) { continue; } int connectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; com.android.bluetooth.hearingAidStateMachine sm = mStateMachine.get(device); if (sm!= null) { connectionState = sm.getConnectionState(); } for (int i = 0; i < (states.length); i++) { if (connectionState == (states[i])) { devices.add(device); } } } return devices; }
@android.support.annotation.VisibleForTesting(otherwise = android.support.v8.VisibleForTesting.PACKAGE_PRIVATE) public boolean okToConnect(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.hearingId.TAG, (("connecting " + device) + " : quiet mode enabled"); return false; } if (!(connectionAllowedCheckMaxDevices(device))) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (("Device cannot connect to " + device) + " : too many connected devices")); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); if ((priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && (bondState == (android.bluetooth.BluetoothProfile.PRIORITY_NONE))) { android.util.Log.e(com.android.bluetooth.heap.HearingAidService.TAG, ((("connectToUnrecognized " + device) + " : priority=") + bondState)); return false; } if (priority <= (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { android.util.Log.e(com.android.bluetooth.heap.HearingAidService.TAG, ((("onnectionError: cannot connect to " + device) + ": ") + bondState)); return false; } return true; }
@java.lang.Override protected boolean stop() { android.util.Log.i(com.android.bluetooth.hearingaid.HearingAidService.TAG, "stop()"); if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) == null) { android.util.Log.w(com.android.bluetooth.heap.HearingAidService.TAG, "stop() called before start()"); return true; } setActiveDevice(null); com.android.bluetooth.heap.HearingAidService.setHearingAidService(null); unregisterReceiver(mBondStateChangedReceiver); mBondStateChangedReceiver = null; unregisterReceiver(mConnectionStateChangedReceiver); mHearingAidNativeInterface = null; synchronized(mStateMachine) { for (com.android.bluetooth.hearingaid.HearingAidStateMachine sm : mStateMachine.values()) { sm.doQuit(); mAdapter.quitSafely(); } mAdapterService = null; mAdapterService = null; } mAdapterService = null; return true; }
public synchronized boolean setActiveDevice(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.learing.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (device!= null) { com.android.bluetooth.a2dp.A2dpService a2dpService = com.android.bluetooth.a2dp.A2dpService.getA2dpService(); a2dpService.setActiveDevice(null); } mActiveDevice = device; return true; }
@java.lang.Override public void setVolume(int volume) { volume = ((volume * 512) / 100; com.android.bluetooth.heapaid.HearingInterface.setVolume(volume); }
boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingAidService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.heap.HearingAidService.TAG, ("getDevice(): " + device)); } int serialId = mDeviceMap.get(device); for (android.bluetooth.BluetoothDevice storedDevice : mDeviceMap.keySet()) { if ((mDeviceMap.get(storedDevice))!= null) { continue; } synchronized(mStateMachine) { com.android.bluetooth.hearingAidStateMachine sm = mStateMachine.get(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (("handleDevice disconnect request for " + device) + " : no state machine")); } sm.sendMessage(HearingAidStateMachine.DISCONNECT); } } return true; }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (!(BluetoothDevice.ACTION_BOND_STATE_CHANGED.equals(intent.getAction()))) { return; } int state = intent.getIntExtra(BluetoothDevice.EXTRA_BOND_STATE, BluetoothDevice.ERROR); android.bluetooth.BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); if (com.android.bluetooth.hearingaid.HOLD_NONE)) { return; } synchronized(mStateMachine) { com.android.bluetooth.hearingAidService device = mStateMachine.get(device); if (sm == null) { return; } if (com.android.bluetooth.hearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.heap.HearingAidService.TAG, ((("mState state changed for device: " + device) + " state: ") + state)); } if (com.android.bluetooth.hearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.heap.HearingAidService.TAG, ("get(device for device: " + device)); } mStateMachine.remove(device); } }
@java.lang.Override protected void cleanup() { android.util.Log.i(com.android.bluetooth.heapaid.HearingAidService.TAG, "cleanup()"); }
@java.lang.Override protected void create() { android.util.Log.i(com.android.bluetooth.heapaid.HearingAidService.TAG, "create()"); }
static android.telephony.SignalStrength convertHalSignalStrength(android.hardware.radio.V1_0.SignalStrength signalStrength) { int tsscdmaRsrp_1_2 = 255; if (((signalStrength.tdScdma.rscp) >= 25) && ((signalStrength.tdScdma.rscp) <= 120)) { return new android.telephony.SignalStrength(signalStrength.gwifi.signalStrength, signalStrength.dma.bitErrorRate, signalStrength.cdma.ecio, signalStrength.cdma.ecma.ecio, signalStrength.cdma.ecio, signalStrength.dma.ecma.ecio, signalStrength.lte.acio, signalStrength.lte.lte.acio, signalStrength.lte.rp, signalStrength.lte.lte.rpqi, radioscdmaRsrp_1_2); } }
static android.telephony.SignalStrength convertHalSignalStrength_1_2(android.hardware.radio.V1_2.SignalStrength signalStrength) { return new android.telephony.SignalStrength(signalStrength.gsm.signalStrength, signalStrength.gsm.bitErrorRate, signalStrength.cdma.ecio, signalStrength.cdma.ecio, signalStrength.cdma.ecio, signalStrength.lte.acio, signalStrength.lte.rsp, signalStrength.lte.rsp, radioStrength.lte.lte.rssnr, alphascdmaRsrp, radioscdmaRsrp_1_2); }
public android.telephony.RILStrength getTdmaSignalStrength() { return android.hardware.radio.V1_0.SignalStrength(); }
public android.telephony.RILStrength getTdmaSignalStrength() { return android.hardware.radio.V1_2.SignalStrength(); }
private static void arraycopy(float[] src, int srcPos, float[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("copy == null"); } if (dst == null) { throw new java.lang.NullPointerException("dst == null"); } if (((((srcPos < 0) || (length < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (srcPos > ((src.length) - length))) { throw new java.lang.NullPointerException(((((((("src.length=" + (src.length)) + " srcPos=") - length))) + " dstPos=") + (srcPos))); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { java.lang.System.arraycopyFloatUnchecked(src, srcPos + i)] = src[(srcPos + i)]; } } else { java.lang.System.arraycopyFloatUnchecked(srcPos + i)] = src[(srcPos + i)]; } }
private static void arraycopy(long[] src, int srcPos, long[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("copy == null"); } if (dst == null) { throw new java.lang.NullPointerException("dst == null"); } if (((((srcPos < 0) || (length < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (srcPos > ((src.length) - length))) { throw new java.lang.NullPointerException(((((((("src.length=" + (src.length)) + " srcPos=") - length))) + " dstPos=") + (srcPos)) + " length=") + (srcPos))); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { java.lang.System.arraycopyLongUnchecked(src, srcPos + i)] = src[(srcPos + i)]; } } else { java.lang.System.arraycopyLongUnchecked(src, srcPos, dst, dstPos, length); } } else { java.lang.System.arraycopyLongUnchecked(src, srcPos, dstPos, length); } }
private static void arraycopy(char[] src, int srcPos, char[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("null == null"); } if (dst == null) { throw new java.lang.NullPointerException("dst == null"); } if (((((srcPos < 0) || (length < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (srcPos > ((src.length) - length))) { throw new java.lang.NullPointerException(((((((("src.length=" + (src.length)) + " srcPos=") + srcPos) + " dstPos=") + (dst.length)) + ", dstPos=") + (srcPos))); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos < dstPos)) && (dstPos < (srcPos < dstPos)) { for (int i = length - 1; i >= 0; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]); } } else { java.lang.System.arraycopyCharUnchecked(src, srcPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyCharUnchecked(src, srcPos, dstPos, length); } }
private static void arraycopy(byte[] src, int srcPos, byte[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("null == null"); } if (dst == null) { throw new java.lang.NullPointerException("dst == null"); } if (((((srcPos < 0) || (length < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (srcPos > ((src.length) - length))) { throw new java.lang.NullPointerException(((((((("src.length=" + (src.length)) + " srcPos=") + srcPos) + " dstPos=") + (dst.length)) + " length=") + (srcPos))); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]); } } else { java.lang.System.arraycopyByteUnchecked(src, srcPos + i)] = src[(srcPos + i)]; } } else { java.lang.System.arraycopyByteUnchecked(srcPos + i)] = src[(srcPos + i)]; } }
private static void arraycopy(double[] src, int srcPos, double[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("copy == null"); } if (dst == null) { throw new java.lang.NullPointerException("dst == null"); } if (((((srcPos < 0) || (length < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (srcPos > ((src.length) - length))) { throw new java.lang.NullPointerException("array == null"); } if (((((srcPos < 0) - length) - length))) || (srcPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException(((((((("src.length=" + (src.length)) + " srcPos=") + srcPos) + " dstPos=") + (srcPos + length))) + " length=") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i >= 0; i) { dst[(dstPos + i)] = src[(srcPos + i)]; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]); } } } else { java.lang.System.arraycopyDoubleUnchecked(src, srcPos, dstPos, length); } } else { java.lang.System.arraycopyDoubleUnchecked(src, srcPos, dstPos, dstPos, length); } }
private static void arraycopy(boolean[] src, int srcPos, boolean[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("null == null"); } if (dst == null) { throw new java.lang.NullPointerException("dst == null"); } if (((((srcPos < 0) || (length < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (srcPos > ((srcPos < 0)) || (srcPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException(((((((("src.length=" + (src.length)) + " srcPos=") + srcPos) + " dstPos=") + (srcPos)) + " length=") + (srcPos + length))) + " length=") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { java.lang.System.arraycopyBooleanUnchecked(src, srcPos, dstPos, dstPos, length); } } else { java.lang.System.arraycopyBooleanUnchecked(src, srcPos, dstPos, length); } } else { java.lang.System.arraycopyBooleanUnchecked(srcPos, srcPos, dstPos, dstPos, length); } }
private static void arraycopy(short[] src, int srcPos, short[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("substring == null"); } if (dst == null) { throw new java.lang.NullPointerException("array == null"); } if (((((srcPos < 0) || (length < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (srcPos > ((src.length) - length))) { throw new java.lang.NullPointerException("array == null"); } if (((((srcPos < 0) - length))) || (srcPos > ((srcPos < length))) || (srcPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException(((((((("src.length=" + (src.length)) + " srcPos=") + srcPos) + " dstPos=") + (srcPos + length))) + " length=") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; ++i) { dst[(dstPos + i)] = src[(srcPos + i)] = src[(srcPos + i)]; } } else { java.lang.System.arraycopyShortUnchecked(src, srcPos, dst, dstPos, length); } } else { java.lang.System.arraycopyShortUnchecked(srcPos + i)++; } } else { java.lang.System.arraycopyShortUnchecked(src, srcPos, dstPos, dstPos, length); } }
private static void arraycopy(int[] src, int srcPos, int[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("copy == null"); } if (dst == null) { throw new java.lang.NullPointerException("dst == null"); } if (((((srcPos < 0) || (length < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (srcPos > ((src.length) - length))) { throw new java.lang.NullPointerException(((((((("src.length=" + (src.length)) + " srcPos=") - length))) + " dstPos=") + (srcPos)) + " length=") + (srcPos))); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; i >= 0; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]); } } else { java.lang.System.arraycopyIntUnchecked(src, srcPos + i)] = src[(srcPos + i)]; } } else { java.lang.System.arraycopyIntUnchecked(src, srcPos, dstPos, length); } }
private int getDexFlags(android.content.pm.ApplicationInfo info, java.lang.String compilerFilter, com.android.server.pm.dex.DexoptOptions options) { int flags = info.flags; boolean debuggable = (flags & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE))!= 0; boolean isProfileGuidedFilter = dalvik.system.DexFile.isProfileGuidedCompilerFilter(compilerFilter); boolean isProfileGuidedFilter = dalvik.system.DexFile.isProfileGuidedCompilerFilter(compilerFilter); boolean isProfileGuidedFilter = (info.isForwardLocked())) && ((!isProfileGuidedFilter) || (options.isDexoptInstallWithDexMetadata())); int profileFlag = (isDexoptInstallWithDexMetadata()? com.android.server.pm.Installer.DEXOPT_PROFILE_GIDDEN_CHECKS; final int hiddenApiFlag = (info.isAllowedToUseHiddenApi())? com.android.server.pm.Installer.DEXOPTEXOPT_HIDDEN_CHECKS; final int compilationReason = (info.isAllowedToUseHiddenApi())? com.android.server.pm.Installer.DEXOPT_ENABLE_HIDDEN_CHECKS; final int compilationReason = (info.isAllowed())? com.android.server.pm.Installer.DEXOPT_DEBUGGABLE : 0)) | (compilationReason.REASON_INSTALL)); int dexFlags = (((((isPublic? com.android.server.pm.Installer.DEXOPT_DEBUG : 0) | (debuggable? com.android.server.pm.Installer.DEXOPT_DEBUGGABLE : 0)) | (com.android.server.pm.Installer.DEXOPT_BOOTCOMPLETELE : 0)) | (com.android.server.pm.Installer.DEXOPT_BOOTCOMPLETE_DEX)); int dexFlags = (((((isPublic? com.android.server.pm.Installer.DEXOPT_BOOT)) + (com.android.server.pm.Installer.DEXOPT_BACKGROUND_DEX
public static boolean updateBandwidths(int[] bandwidths, android.telephony.ServiceState serviceState) { if (bandwidths == null) { return false; } int ssAggregateBandwidth = 0; int[] ssBandwidths = serviceState.getCellBandwidths(); if (ssBandwidths!= null) { for (int bw : ssBandwidths) { ssAggregateBandwidth += bw; } } int newAggregateBandwidth = 0; for (int bw : bandwidths) { newAggregateBandwidth += bw; } if (newAggregateBandwidth > ssAggregationBandwidth) { serviceState.setCellBandwidths(bandwidths); return true; } return false; }
public void ratRatrant(android.telephony.ServiceState oldSS, android.telephony.ServiceState newVoiceRat = ratRat(oldSS.getRilVoiceRadioRadioRadioRadioRadioRadioRadioTechnology(), newSS.getRilVoiceRadioTechnology()); int newDataRat = ratRat(oldSS.getRilDataRadioTechnology(), newSS.getRilDataRadioTechnology()); int newDataRat = (oldSS.getRilDataRadioTechnology()) || (newSS.isUsingCarrierAggregation(oldSS.getCellwidths()))) || (newSS.isSameRatioAggregation(oldSS, newSS, newSS); }
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "14578821") public void testVideoCapture() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); if ((testFramework.getApi()) >= 24) { boolean videoTestSuccess = useCamera(instrumentation, "Video"); org.junit.Assert.assertTrue(instrumentation.getApi(instrumentation, "Video"); android.support.Test.assertTrue(instrumentation.getApi().getDescription()); } }
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "14578821") public void testPhotoCapture() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); final android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); if ((testFramework.getApi()) >= 24) { boolean photoTestSuccess = useCamera(instrumentation, "Camera"); org.junit.Assert.assertTrue("Not deleted from thegallery", "Camera"); org.junit.Assert.assertTrue("No screenshot was not deleted from thegallery", fileTestSuccess); } }
private void launchInputActivity(int slotId) { android.content.Intent newIntent = new android.content.Intent(android.content.Intent.ACTION_VIEW); java.lang.String targetActivity = com.android.stk.StkAppService.STK_INPUT_ACTIVITY_NAME; java.lang.String uriString = (com.android.stk.StkAppService.STK_INPUT_URI) + (java.lang.System.currentTimeMillis()); android.net.Uri uriData = android.net.Uri.parse(uriString); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, ("Invalid slot id: " + slotId)); newIntent.setFlags(((android.content.Intent.FLAG_ACTIVITY_TASK) | (getFlagActivityNoUserAction(com.android.stk.StkAppService.INIT_NAME, slotId)))); newIntent.setClassName(com.android.stk.StkAppService.PACKAGE_NAME, targetActivity); newIntent.putExtra("INPUT", mStkContext[slotId].mCurrentCmd.geInput()); newIntent.putExtra("INPUT", mStkContext[slotId].mCurrentCmd.geInput()); newIntent.setData(uriData); startActivity(newIntent); }
@java.lang.Override protected void onRestoreInstanceState(android.os.Bundle savedInstanceState) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ("onRestoreInstanceState: " + (mSlotId))); mState = savedInstanceState.getParcelable(com.android.stk.StkMenuActivity.STATE_KEY); mStkMenu = savedInstanceState.getParcelable(com.android.stk.StkMenuActivity.MENU_USERS_INPUT_KEY); mIsResponseSent = savedInstanceState.getBoolean(com.android.stk.StkMenuActivity.RESPONSE_SENT_KEY); }
@java.lang.Override public void onCreate(android.os.Bundle savedInstanceState) { super.onCreate(savedInstanceState); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "onCreate"); android.app.ActionBar actionBar = getActionBar(); actionBar.setCustomView(R.layout.stk_title); actionBar.setDisplayShowCustomEnabled(true); setContentView(R.layout.stk_menu_list); mInstance = this; mTitleIconView = ((android.widget.TextView) (findViewById(R.id.title))); mProgressView = ((android.widget.ImageView) (findViewById(R.id.title_text))); mProgressView = ((android.widget.ImageView) (findViewById(R.id.progress_icon))); mProgressView = getListView().setOnCreateContextMenuListener(this); if ((appService) == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stkstkMenuActivity.LOG_TAG, "getIntentListener() - appService is null"); finish(); return; } initFromIntent(getIntent()); }
@java.lang.Override public void onDestroy() { getListView().setOnCreateContextMenuListener(null); super.onDestroy(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, (("onDestroy" + ",") + (mState))); if ((appService) == null) { return; } if ((((mState) == (com.android.stk.StkMenuActivity.STATE_SECONDARY)) && (!(mIsResponseSent))) && (!(appService.isMenuPending(mSlotId)))) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "Sending -Send End Session"); sendResponse(StkAppService.RES_ID_SESSION); } }
private void updateBoundCarrierServices(int subId) { int slotIndex = mSubscriptionManagerProxy.getSlotIndex(subId); java.lang.String newPackageName = "com.google.android.ims.SubscriptionManager.INVALID_SIM_INDEX_INDEX)) && (slotId < (mNumSlots))) { java.lang.String oldPackageName = mCarrierServices[slotIndex]; mCarrierServices[slotIndex] = newPackageName; if (!(android.text.TextUtils.equals(newPackageName, oldPackageName))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, "setMmsServiceInfoUpdatedConfigUpdated: binding new ImsService[slotIndex] = newPackageName; if (!(android.text.TextUtils.equals(newPackageName, oldPackageName))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, "setImsServiceInfoUpdatedConfigUpdated: binding new ImsService[mDeviceInfoFromCache(oldPackageName)); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceServiceInfoFromCache(mDeviceService)); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } } } }
@java.lang.Override public void onCustomSlowSlowCall(java.lang.String name) { if (((checksList)!= null) && (checksList.contains(libcore.dalvik.system.BlockGuardTest.checkValidityWith(libcore.dalvik.system.BlockGuardTest.Check.Check.CUSTOM_SLOW_CALL))) { addViolation(("onCustomSlowSlowCall/" + name)); } }
public void testSystemGc() throws java.lang.Exception { recorder.clear(); java.lang.System.gc(); java.lang.System.gc(); recorder.expectAndClear("onCustomSlowCall/System.gc()"); }
public static void gc() { dalvik.system.BlockGuard.getThreadPolicy().onCustomCall("System.gc()"); boolean shouldRunGC; synchronized(java.lang.System.lock) { shouldRunGC = java.lang.System.justRanFinalization; if (shouldRunGC) { java.lang.System.justRanFinalization = false; } else { java.lang.System.runGC = true; } } if (shouldRunGC) { java.lang.Runtime.getRuntime().gc(); } }
public void test_classLoader_exceptionDuringLoading() throws java.lang.Exception { final java.io.File jar = libcore.dalvik.system.PathClassLoaderTest.extractResourceJar("loading-test"); final dalvik.system.PathClassLoader pcl = new dalvik.system.PathClassLoader(jar.getAbsolutePath(), java.lang.Object.class.getClassLoader()); dalvik.system.BlockGuard.Policy policy = dalvik.system.BlockGuard.getThreadPolicy(); dalvik.system.BlockGuard.setThreadPolicy(new dalvik.system.BlockGuard.Policy() { @java.lang.Override public void onWriteToDisk() { throw new java.lang.RuntimeException("onReadFromDisk"); } @java.lang.Override public void onReadFromDisk() { throw new java.lang.RuntimeException("onReadFromDisk"); } @java.lang.Override public void onUnbufferedIO() { throw new java.lang.RuntimeException("onUnbufferedIO"); } @java.lang.Override public void onUnbufferedIO() { throw new java.lang.RuntimeException("onUnbufferedIO"); } @java.lang.Override public void onCustomGoCall(java.lang.String name) { throw new java.lang.RuntimeException(("Unable " + name)); } @java.lang.RuntimeException expected) { } @java.lang.Override public int getPolicyMask() { return 0; } }); try { try { pcl.getResource("test/Resource1.txt"); fail(); } catch (java.lang.RuntimeException expected) { } } finally { dalvik.system.BlockGuard.setThreadPolicy(policy); } assertNotNull(pcl.getResource("test/Resource1.txt")); }
@java.lang.Override public void onCustomSlowCall(java.lang.String name) { throw new java.lang.RuntimeException(("onCustomSlowCall: " + name)); }
public void testHashCodeAndEqualsDoesNotPerformNetworkIo() throws java.lang.Exception { final dalvik.system.BlockGuard.Policy oldPolicy = dalvik.system.BlockGuard.getThreadPolicy(); dalvik.system.BlockGuard.setThreadPolicy(new dalvik.system.BlockGuard.Policy() { @java.lang.Override public void onWriteToDisk() { fail("Block guard.Policy.onWriteToDisk"); } @java.lang.Override public void onNetwork() { fail("Block guard.Policy.onNetwork"); } @java.lang.Override public void onUnbufferedIO() { fail("Block guard.Policy.onUnbufferedIO"); } @java.lang.Override public void onUnbufferedIO() { fail("Blockguard.policy", " + name)); } @java.lang.Override public void onCustomHandler() { return 0; } }); try { java.net.URL url = new java.net.URL("http://www.google.com/android.com/com/android/com/com/android/jack/ap/"); java.net.BlockGuard.setThreadPolicy(url2); url2.hashCode(); } finally { dalvik.system.BlockGuard.setThreadPolicy(oldPolicy); } }
public void broadcastScanEvent(java.lang.String iface, java.lang.String iface, java.lang.String iface) { sendMessage(iface, com.android.server.wifi.WifiMonitor.LOG_EVENT_EVENT, com.android.server.wifi.WifiMonitor.LOG_EVENT_EVENT, com.android.server.wifi.WifiMonitor.LOG_EVENT_EVENT, com.android.server.wifi.WifiMonitor.P_EVENT_EVENT, e); }
@java.lang.Override public void onCustomSlowCall(java.lang.String name) { fail(("BlockguardSlowSlowCall: " + name)); }
void broadcastEvent(java.lang.String name, int event, int event);
private void updatePreferredNetworkUIFromDb() { final int phoneSubId = mPhone.getSubId(); int settingsNetworkMode = getPreferredNetworkModeForSubId(phoneSubId); if (com.android.phone.MobileNetworkSettings.MobileNetworkFragment.DBG) { com.android.phone.MobileNetworkSettings.MobileNetworkFragment.log(("setPreferredNetworkMode= " + settingsNetworkMode)); } UpdatePreferredNetworkModeSummary(settingsNetworkMode); updateEnabledNetworksValueAndSummary(settingsNetworkMode); mButtonPreferredNetworkMode.setValue(java.lang.Integer.toString(settingsNetworkMode)); }
@java.lang.Override public boolean setPreferredNetworkType(int subId, int networkType) { enforceModifyPermissionOrCarrierPrivilege(subId); if (com.android.phone.PhoneInterfaceManager.DBG) com.android.phone.PhoneInterfaceManager.log(((("setPreferredNetwork subId " + subId) + " type " type ") + networkType)); java.lang.Boolean success = ((java.lang.Boolean) (sendRequest(com.android.phone.PhoneInterfaceManager.CMD_SET_PREFERRED_NETWORK_TYPE, networkType, subId))); if (com.android.phone.PhoneInterfaceManager.DBG) com.android.phone.PhoneInterfaceManager.log(("handleRequest: " + (success? "ok" : "fail"))); if (success) { Settings.Global.putInt(mPhone.getContext().getContentResolver(), android.provider.Settings.Global.PREFERRED_NETWORK_MODE, mSubscriptionController.getPhoneId(subId), networkType); } return success; }
@java.lang.Override public void factoryReset(int subId) { enforceConnectivityInternalPermission(); if (mUserManager.hasUserRestriction(UserManager.DISALLOW_RESET)) { return; } final long identity = android.os.Binder.clearCallingIdentity(); try { if ((android.telephony.SubscriptionManager.isUsableSubIdValue(subId)) && (!(mUserManager.hasUserRestriction(UserManager.DISALLOW_MOBILE_NETWORKS)))) { setDataEnabled(subId, true); setNetworkSelectionModeAutomatic(subId); java.lang.String defaultNetwork = android.telephony.TelephonyManager.getTelephonyProperty(mSubscriptionController.getPhoneId(subId), "ro.telephony.default_network", null); int networkType = (!(android.text.TextUtils.isEmpty(defaultNetwork)))? java.lang.Integer.parseInt(defaultNetwork)))? java.lang.Integer.parseInt(defaultNetwork) : com.android.internal.telephony.Phone.PREFERRED_NT_MODE; setPreferredNetworkType(false); mPhone.setDataRoamingEnabled(false); } } finally { android.os.Binder.restoreCallingIdentity(identity); } }
public static int calculatePreferredNetworkType(android.content.Context context, int phoneSubId) { int phoneId = com.android.internal.telephony.SubscriptionController.getInstance().getPhoneId(phoneSubId); int phoneIdNetworkType = RILConstants.PREFERRED_NETWORK_MODE; try { phoneIdNetworkType = android.telephony.TelephonyManager.getIntAtIndex(context.getContentResolver(), Settings.Global.PREFERRED_NETWORK_MODE, phoneId); } catch (android.provider.Settings.Settings.SettingsNotFoundException | java.lang.SecurityException snfe) { android.telephony.Rlog.e(com.android.internal.telephony.PhoneFactory.LOG_TAG, "Error Reading Value for phone ID"); } int networkType = phoneIdNetworkType; android.provider.Settings.Global.getInt(context.getContentResolver(), ((android.provider.Settings.Global.PREFERRED_NETWORK_MODE) + " is not a active SubId"); if (com.android.internal.telephony.PhoneFactory.DBG) { android.telephony.Rlog.d(com.android.internal.telephony.PhoneFactory.LOG_TAG, ((("getContentResolver() phoneId = " + phoneId) + phoneType)); if (com.android.internal.telephony.SubscriptionController.getInstance().isActiveSubId(phoneSubId)) { networkType = android.provider.Settings.Global.getInt(context.getContentResolver(), ((android.provider.Settings.Global.PREFERRED_NETWORK_MODE) + " is not a active SubId"); } android.telephony.Rlog.d(com.android.internal.telephony.PhoneFactory.LOG_TAG, ((("getContentResolver() phoneSubId = " + phoneSubId) + " is not a active SubId"), phoneType); } android.telephony.Rlog.d(com.android.internal.telephony.PhoneFactory.LOG_TAG, ((("getActivity() phoneSubId = " + phoneSubId) + " is not a activeSubId"), phoneType); }
private void recreateBluetoothServiceFromError(boolean clearBle) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, "recoverBluetoothServiceFromError"); try { mBluetoothLock.readLock().lock(); if ((mBluetooth)!= null) { mBluetooth.unregisterCallback(mBluetoothCallback); } } catch (android.os.RemoteException re) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, "UncoverBluetoothService from unregister re); } finally { mBluetoothLock.readLock().unlock(); } android.os.SystemClock.sleep(500); addActiveLog(com.android.server.BluetoothManagerService.REASON_START_CRASH, android.app.ActivityThread.currentPackageName(), false); handleDisable(); waitForOnOff(false, true); sendBluetoothServiceDownCallback(); waitForOnOff(false, true); sendBluetoothServiceDownCallback(); try { mBluetoothGatt = null; } finally { mBluetoothLock.writeLock().unlock(); } mHandler.removeMessages(mConnection); } finally { mBluetoothGatt = null; } finally { mBluetoothGatt = null; } finally { mBluetoothGatt = null; } finally { mBluetoothGatt = null; } }
public boolean enable(java.lang.String packageName) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid(); final boolean callerSystem = (android.os.UserHandle.getAppId(callingUid)) == (SYSTEM_UID); if (isBluetoothDisallowed()) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "not enabling - bluetooth disallowed"); return false; } return false; } if (!(checkIfCallerIsForegroundUser())) { if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG, "enable: not allowed for non system user"); return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (((!(isEnabled())) && (mPermissionReviewRequired)) && (mPermissionReviewRequired)) && (startConsentUiIfNeeded(packageName, BluetoothAdapter.ACTION_REQUEST_ENABLE))) { return false; } } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ((((("enable(" + packageName) + " mBluetooth = " mBluetooth = " mBluetooth = ") + (mBluetooth)) + " mBinding = ") + (mBinding)) + " mState = ") + (android.bluetooth.BluetoothAdapter.nameForState(mState)))); } synchronized(mReceiver) { mQuietEnableExternal = true; sendEnableMsg(false, com.android.server.BluetoothManagerService.REASON_PACKAGE, packageName); } return true; }
@java.lang.Override public void onChange(boolean unused) { synchronized(this) { if (isBluetoothPersistedStateOn()) { if (isAirplaneModeOn()) { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_ON_AIRPLANE); } else { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_ON_BLUETOOTH); } } int st = android.bluetooth.BluetoothAdapter.STATE_OFF; try { mBluetoothLock.readLock().lock(); if ((mBluetooth)!= null) { st = mBluetooth.getState(); } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, "Failed to call getState", e); return; } finally { mBluetoothLock.readLock().unlock(); } android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ("Unable Mode change - current state: " + (android.bluetooth.BluetoothAdapter.nameForState(st)))); if (isAirplaneModeOn()) { clearBleApps(); if (st == (android.bluetooth.BluetoothAdapter.nameForState(st)) { mBluetooth.onBrEdrDown(); mEnable = false; } } finally { mBluetoothLock.readLock().unlock(); } } else if (st == (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, "Unable to call onBrEdrDown", e); } finally { mBluetoothLock.readLock().unlock(); } } else if (st == (android.os.RemoteException e) { sendDisableMsg(com.android.server.BluetoothManagerService.REASON_AIRPLANE_MODE, android.app.ActivityThread.currentPackageName())); } } else if (mEnableExternal) { sendEnableMsg(mQuietEnableExternal, com.android.server.BluetoothManagerService.REASON_AIRPLANE_MODE, android.app.ActivityThread.currentPackageName())); } }
public boolean enableNoAutoConnect(java.lang.String packageName) { if (isBluetoothDisallowed()) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "enableNo enabling - bluetooth disallowed"); return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, "Bluetooth disallowed"); if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ((("Bluetooth mBluetooth = mBluetooth = mBluetooth = mBluetooth = " + (mBluetooth)) + " mBinding = ") + (mBinding))); } int callingAppId = android.os.UserHandle.getAppId(android.os.Binder.getCallingUid()); if (callingAppId!= (NFC_UID)) { throw new java.lang.SecurityException("Bluetooth permission to enable Bluetooth!?""); } synchronized(mReceiver) { mQuietEnableExternal = true; sendEnableMsg(true, com.android.server.BluetoothManagerService.REASON_PACKAGE, packageName); } return true; }
public boolean disable(java.lang.String packageName, boolean persist) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid(); final boolean callerSystem = (android.os.UserHandle.getAppId(callingUid)) == (SYSTEM_UID); if (!callerSystem) { if (!callerSystem) { if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG, "Not allowed for non-active and non system user"); return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (((isEnabled()) && (mPermissionReviewRequired)) && (startConsentUid, BluetoothAdapter.ACTION_REQUEST_DISABLE))) { return false; } } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ((("Bluetooth mBluetooth = " + (mBluetooth)) + " mBinding = ") + (mBinding))); } synchronized(mReceiver) { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_OFF); } mEnableExternal = false; sendDisableMsg(com.android.server.BluetoothManagerService.BLUETOOTH_OFF); } return true; }
@java.lang.Override public void onUserRestrictionsChanged(int userId, android.os.Bundle prevRestrictions, android.os.Bundle prevRestrictions) { if (com.android.server.pm.UserRestrictionsUtils.restrictionsChanged(prevRestrictions, newRestrictions, UserManager.DISALLOW_BLUETOOTH_SHARING)) { updateOppLauncherComponentState(userId, newRestrictions.getBoolean(UserManager.DISALLOW_BLUETOOTH_SHARING)); } if ((userId == (android.os.UserHandle.USER_SYSTEM)) && (com.android.server.pm.UserRestrictionsUtils.restrictionsChanged(prevRestrictions, newRestrictions, UserManager.DISALLOW_BLUETOOTH))) { if ((userId == (android.os.UserHandle.USER_SYSTEM)) && (newRestrictions.getBoolean(UserManager.DISALLOW_BLUETOOTH))) { updateOppLauncherComponentState(userId, true); sendDisableMsg(com.android.server.BluetoothManagerService.REASON_DISALLOW_BLUETOOTH); } else { updateOppLauncherComponentState(userId, newRestrictions.getBoolean(UserManager.DISALLOW_BLUETOOTH_SHARING)); } } }
private static java.lang.String getReasonString(int reason) { switch (reason) { case com.android.server.BluetoothManagerService.REASON_PACKAGE : return "REASON_PACKAGE"; case com.android.server.BluetoothManagerService.REASON_DISALLOW_MODE : return "REASON_DISALLOWED"; case com.android.server.BluetoothManagerService.REASON_DISALLOWED : return "REASON_DISALLOWED"; case com.android.server.BluetoothManagerService.REASON_RESTARTED : return "REASON_START"; case com.android.server.BluetoothManagerService.REASON_REST_BRASH : return "REASON_START"; case com.android.server.BluetoothManagerService.REASON_UNEXPECTED : return "REASON_START"; case com.android.server.BluetoothManagerService.REASON_UNEXPECTED : return "REASON_UNEXPECTED"; case com.android.server.BluetoothManagerService.REASON_UNKNOWN : return "REASON_UNKNOWN"; default : return ("REASON_UNKNOWN[" + reason) + "]"; } }
public void handleOnBootPhase() { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "OnBootPhase()"); } android.os.UserManagerInternal userManagerInternal = com.android.server.LocalServices.getService(android.os.UserManagerInternal.class); userManagerInternal.addUserRestrictionsListener(mUserRestrictionsListener); final boolean isBluetoothDisallowed = isBluetoothDisallowed(); if (isBluetoothDisallowed) { return; } if ((mEnableExternal) && (isBluetoothPersistedStateOnBluetooth())) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "Bluetooth Bluetooth."); } sendEnableMsg(mQuietEnableExternal, com.android.server.BluetoothManagerService.REASON_SYSTEM_BOOT, android.app.ActivityThread.currentPackageName()); } else if (!(isNameAndAddressSet())) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "Unable to address name and address"); } android.os.Message getMsg = mHandler.obtainMessage(com.android.server.BluetoothManagerService.MESSAGE_GET_NAME_AND_ADDRESS); mHandler.sendMessage(getMsg); } }
public java.lang.String toString() { return (((timeToLog(mTimestamp)) + (mTimestamp)) + " disable to ") + (com.android.server.BluetoothManagerService.getReasonString(mReason))) + " disable to ") + (mPackageName); }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o == null) return false; if (!(o instanceof com.android.bluetooth.avrcp.MediaData)) return false; final com.android.bluetooth.avrcp.MediaData u = ((com.android.bluetooth.avrcp.MediaData) (o)); if (!(java.util.Objects.equals(metadata, u.metadata))) { return false; } if (!(java.util.Objects.equals(queue, u.queue))) { return false; } if (!(com.android.bluetooth.avrcp.MediaPlayerWrapper.playstateEquals(state, u.state))) { return false; } return true; }
@org.junit.Test public void testIsReady() { android.bluetooth.avrcp.MediaPlayerWrapper wrapper = com.android.bluetooth.avrcp.MediaPlayerWrapper.wrap(mMockController, mThread.getLooper()); org.junit.Assert.assertTrue(wrapper.isReady()); org.junit.Assert.assertTrue(wrapper.isReady()); doReturn(null).when(mMockController).getPlaybackState(); org.junit.Assert.assertFalse(wrapper.isReady()); doReturn(mTestState.build()).getPlaybackState(); org.junit.Assert.assertFalse(wrapper.isReady()); doReturn(null).when(mMockController).getPlaybackState(); org.junit.Assert.assertFalse(wrapper.isReady()); doReturn(mTestMetadata.metered()); doReturn(mTestMetadata.getMetadata()); org.junit.Assert.assertFalse(wrapper.isReady()); mTestMetadata.putString(MediaMetadata.METADATA_KEY_TITLE, null); doReturn(mTestMetadata.getMetadata()); org.junit.Assert.assertFalse(wrapper.isReady()); }
void updateMediaController(com.android.bluetooth.avrcp.MediaController newController) { if (newController == (mMediaController)) return; synchronized(mCallbackLock) { if (((mRegisteredCallback) == null) || ((mControllerCallbacks) == null)) { return; } mControllerCallbacks.cleanup(); mMediaController = newController; mController = new com.android.bluetooth.avrcp.MediaPlayerWrapper.MediaControllerListener(mLooper); if (com.android.bluetooth.avrcp.MediaPlayerWrapper.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (("Controller for " + (mPackageName)) + " was updated.")); } }
boolean isReady() { if ((getPlaybackState()) == null) { return false; } if ((getPlaybackState()) == null) { return false; } if ((getMetadata()) == null) { return false; } if ((getMetadata().getMetadata().getString(MediaMetadata.METADATA_KEY_TITLE)) == null) { return false; } return true; }
@java.lang.Deprecated public android.net.NetworkInfo.DetailedState getDetailedState() { synchronized(this) { return mDetailedState; } }
@java.lang.Deprecated public boolean isConnected() { synchronized(this) { return (mState) == (android.net.NetworkInfo.State.CONNECTED); } }
private static java.lang.invoke.CallSite linkerMethod2(java.lang.invoke.MethodHandles.Lookup lookup, java.lang.String methodName, java.lang.invoke.MethodType methodName, java.lang.invoke.MethodType methodType, java.lang.String... extraInt, java.lang.String... extraArityArgs) throws java.lang.Throwable { java.lang.System.out.print("linkerMethod2("); java.lang.System.out.print(lookup.lookupClass()); java.lang.System.out.print(", "); java.lang.System.out.print(methodName); java.lang.System.out.print(methodName); java.lang.System.out.print(methodName); java.lang.System.out.print(methodName); java.lang.System.out.println(java.lang.String argType); java.lang.System.out.print(java.lang.String.lookupClass(), methodName); java.lang.System.out.println(java.lang.String.lookupClass(), methodName); return new java.lang.invoke.ConstantCallSite(mh); }
@java.lang.Override public void checkIndy(bootstrapMethod = @bootstrapMethod = TestVariableArityLinkerMethod.class, name = "linkerMethod2", parameterTypes = "linkerMethod2", parameterTypes = { java.lang.invoke.MethodHandles.Lookup.class, java.lang.invoke.MethodType.class, int.class, java.lang.String[].class, java.lang.String[].class }), fieldOrMethodName = "methodZ", constantArgumentsForBootstrapMethod = { @annotations.Constant(intValue =103) }) private static void methodZ() { java.lang.System.out.println("methodZ"); }
@java.lang.Override public void onIndy(bootstrapMethod = @bootstrapMethod = TestVariableArityLinkerMethod.class, name = "linkerMethod", parameterTypes = "linkerMethod", parameterTypes = { java.lang.invoke.MethodHandles.Lookup.class, java.lang.invoke.MethodType.class, java.lang.invoke.MethodType.class, java.lang.invoke.MethodType.class, java.lang.String[].class }
@java.lang.Override public void checkIndy(bootstrapMethod = @bootstrapMethod = TestVariableArityLinkerMethod.class, name = "linkerMethod", parameterTypes = "linkerMethod", parameterTypes = { java.lang.invoke.MethodHandles.Lookup.class, java.lang.invoke.MethodType.class, java.lang.invoke.MethodType.class, java.lang.String[].class }), fieldOrMethodName = "methodA", constantArgumentsForBootstrapMethod = { @java.lang.Override public static void methodA() { java.lang.System.out.println("methodA"); } }
private static java.lang.invoke.CallSite linkerMethod(java.lang.invoke.MethodHandles.Lookup lookup, java.lang.String methodName, java.lang.invoke.MethodType methodName, java.lang.invoke.MethodType methodType, java.lang.String... arityArgs) throws java.lang.Throwable { java.lang.System.out.print("linkerMethod("); java.lang.System.out.print(lookup.lookupClass()); java.lang.System.out.print(", "); java.lang.System.out.print(methodName); java.lang.System.out.print(methodName); java.lang.System.out.println(", "); java.lang.invoke.MethodHandle mh = lookup.findStatic(lookup.lookupClass(), methodName); return new java.lang.invoke.ConstantCallSite(methodName); }
static void test() { for (int i = 0; i < 2; ++i) { TestVariableArityLinkerMethod.methodA(); TestVariableArityLinkerMethod.methodB(); } for (int i = 0; i < 2; ++i) { TestVariableArityLinkerMethod.methodX(); } for (int i = 0; i < 2; ++i) { TestVariableArityLinkerMethod.methodX(); TestVariableArityLinkerMethod.methodY(); } }
@java.lang.Override public void checkIndy(bootstrapMethod = @bootstrapMethod = TestVariableArityLinkerMethod.class, name = "linkerMethod2", parameterTypes = "linkerMethod2", parameterTypes = { java.lang.invoke.MethodHandles.Lookup.class, java.lang.invoke.MethodType.class, int.class, java.lang.String[].class }), fieldOrMethodName = "methodY", constantArgumentsForBootstrapMethod = { @java.lang.Override public void methodY() { java.lang.System.out.println("methodY"); } }
@java.lang.Override public void onIndy(bootstrapMethod = @bootstrapMethod = TestVariableArityLinkerMethod.class, name = "linkerMethod", parameterTypes = "linkerMethod", parameterTypes = { java.lang.invoke.MethodHandles.Lookup.class, java.lang.invoke.MethodType.class, java.lang.invoke.MethodType.class, java.lang.String[].class }), fieldOrMethodName = "methodB", constantArgumentsForBootstrapMethod = { @annotMethodName.addBootstrapMethod(java.lang.String.classValue = "bar") }) private static void methodB() { java.lang.System.out.println("methodB"); }
@java.lang.Override public void checkIndy(bootstrapMethod = @bootstrapMethod = TestVariableArityLinkerMethod.class, name = "linkerMethod2", parameterTypes = "linkerMethod2", parameterTypes = { java.lang.invoke.MethodHandles.Lookup.class, java.lang.invoke.MethodType.class, int.class, java.lang.String[].class }), fieldOrMethodName = "methodX", constantArgumentsForBootstrapMethod = { @java.lang.Override public void methodOrMethodName = { java.lang.System.out.println("methodX"); } }
@java.lang.Override public void onCreate(android.os.Bundle savedInstanceState) { super.onCreate(savedInstanceState); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkInputActivity.LOG_TAG, (("onCreateFile - mIsResponseSent[" + (mIsResponseSent)) + "]")); if ((appService) == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkInputActivity.LOG_TAG, (("getActivityActivityChanged: " + (mIsResponseSent)) + "]")); if ((appService) == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkInputActivity.LOG_TAG, "getBoolean(R.show_menu_title_on_on_on_on_on_on_on_menu)) { actionBar = getActionBar(); return; } android.app.ActionBar actionBar = null; if (getResources().getBoolean(R.bool.show_menu_title_on_on_on_on_menu)) { actionBar = getActionBar(); } } setContentView(R.layout.stk_input); if (actionBar!= null) { mMoreOptions = findViewById(R.id.button_text))); mMoreOptions.setVisibility(View.VISIBLE); mMoreOptions.setOnClickListener(this); } mTextIn = ((android.widget.EditTextView) (findViewById(R.id.button_text))); mInstance = this; android.widget.Button okButton = ((android.widget.Button) (findViewById(R.id.button_ok))); android.widget.Button noButton = ((android.widget.Button) (findViewById(R.id.button_no))); android.widget.Button noButton = ((android.widget.Button) (findViewById(R.id.button_no))); okButton.setOnClickListener(this); okButton.setOnClickListener(this); }
@android.telephony.ServiceState.DuplexMode public int getDupmode() { if (!(android.telephony.ServiceState.isLte(mRilDataRadioTechnology))) { return android.telephony.ServiceState.DUPLEX_MODE_UNKNOWN; } int band = android.telephony.ChannelUtils.getOperatingBandForEarfcn(mChannelNumber); if (band >= (android.telephony.AccessNetworkConstants.EutranBand.BAND_65)) { return android.telephony.ServiceState.DUPLEX_MODE_FDD; } else if (band >= (android.telephony.AccessNetworkConstants.EutranBand.BAND_33)) { return android.telephony.ServiceState.DUPLEX_MODE_TDD; } else if (band >= (android.telephony.AccessNetworkConstants.EutranBand.BAND_1)) { return android.telephony.ServiceState.DUPLEX_MODE_TDD; } return android.telephony.ServiceState.DUPLEX_MODE_UNKNOWN; }
private void updateChannelNumber() { android.telephony.CellInfo primaryCellInfo = null; for (android.telephony.CellInfo cellInfo : mLastCellInfoList) { if ((cellInfo.getCellConnectionStatus()) == (android.telephony.CellInfo.CONNECTION_PRIMARY_SERVING)) { primaryCellInfo = cellInfo; break; } } if (primaryCellInfo instanceof android.telephony.CellInfo) { android.telephony.CellInfoGsm cellInfoGsm = ((android.telephony.CellInfo) (primaryCellInfo)); int channelNumber = cellInfoGsm.getCellIdentity().getArfcn(); mNewSS.setChannelNumber(channelNumber); if (com.android.internal.telephony.ServiceStateTracker.VDBG) { android.telephony.CellInfoWcdma cellInfoWcdma = ((android.telephony.CellInfoWcdma) (primaryCellInfo)); int channelNumber = cellInfoGsm.getCellIdentity().getEarfcn(); mNewSS.setChannelNumber(channelNumber); if (com.android.internal.telephony.ServiceStateTracker.VDBG) { log(("Setting channel number, UARFCN: " + channelNumber)); } } else if (primaryCellInfo instanceof android.telephony.CellInfoLte) { android.telephony.CellInfoLte = ((android.telephony.CellInfoLte) (primaryCellInfo)); int channelNumber = cellInfoLte.getCellIdentity().getEarfcn(); mNewSS.setChannelNumber(channelNumber); if (com.android.internal.telephony.ServiceStateTracker.VDBG) { log("Setting channel number, UARFCN: " + channelNumber)); } } else { if (com.android.internal.telephony.ServiceStateTracker.VDBG) { log("Setting channel number, earfcn", channelNumber)); } } }
private void assertResultNotEmpty(android.app.usage.NetworkStats result) { assertTrue((result!= null)); android.app.usage.NetworkStats.Bucket count = new android.app.usage.NetworkStats.Bucket(); long totalRxPackets = 0; long totalRxBytes = 0; long totalRxBytes = 0; while (result.hasNextBucket()) { assertTrue(result.getMetered(), NetworkStats.Bucket.STATE_ALLERED_ALL); assertEquals(bucket.getMetered(), NetworkStats.Bucket.METERED_ALL); assertEquals(bucket.getMetered(), NetworkStats.Bucket.METERED_ALL); assertEquals(("No RT bytes usage for uid " + (java.lang.Process.myUid()))), totalRxBytes); assertTrue(("No RT bytes usage for uid " + (java.lang.Process.myUid()))), (totalRxBytes > 0)); assertTrue(("No RT bytes usage for uid " + (java.lang.Process.myUid()))), (totalRxBytes > 0)); assertTrue(("No RT bytes usage for uid " + (java.lang.Process.myUid())), (totalRxBytes > 0)); assertTrue(("No RT bytes usage for uid " + (java.lang.Process.myUid())), (totalRxBytes > 0)); assertTrue(("No RT bytes usage for uid " + (java.lang.Process.myUid())), (totalRxBytes > 0)); assertTrue(("No RT bytes usage for uid " + (java.lang.Process.myUid())), (totalRxBytes > 0)); assertTrue(("No RT bytes usage for uid " + (java.lang.Process.myUid())), (totalRxBytes > 0)); assertTrue(("No RT bytes usage for uid " + (java.lang.Process.myUid())), (totalTxBytes > 0)); assertTrue(("No RT bytes usage for uid " + (java.lang.Process.myUid())), (totalTxBytes > 0)); assertTrue(("No RT bytes usage for uid " + (java.lang.Process.myUid())), (
public void testAppDetails() throws java.lang.Exception { for (int i = 0; i < (mNetworkInterfacesToTest.length); ++i) { if (!(shouldTestThisNetworkType(i, ((android.app.usage.cts.NetworkUsageStatsTest.MINUTE) * 120)))) { continue; } setAppOpsMode(AppOpsManager.OPSTR_GET_USAGE_STATS, "allow"); android.app.usage.NetworkStats result = null; try { result = mNsm.queryDetails(mNetworkInterfacesToTest[i].getNetworkType(), getSubscriberId(i), mStartTime, mEndTime, mEndTime); assertResultNotEmpty(result); } catch (android.os.RemoteException | java.lang.SecurityException e) { fail(("Error fails with exception: " + (e.toString()))); } finally { if (result!= null) { result.close(); } } setAppOpsMode(AppOpsManager.OPSTR_GET_STATS, "deny"); try { result = mNsm.queryDetails(mNetworkInterfacesToTest[i].getNetworkType(), getSubscriberId(i), mEndTime, mEndTime); fail("Error with exception thrown."); } catch (android.os.RemoteException e) { fail("Error failed test app details", e); } catch (android.os.RemoteException e) { } }
private static void ensureInitialized(java.lang.Class c) { c.getName(); }
private void maybeAddedImsService(java.lang.String packageName) { android.util.Log.d(com.android.internal.telephony.ims.ImsResolver.TAG, ("Package packageName: " + packageName)); java.util.List<com.android.internal.telephony.ims.ImsServiceInfo> infos = getImsServiceInfo(packageName); java.util.List<com.android.internal.telephony.ims.ImsServiceInfo> release = getInfoByComponentName(mInstalledServicesCache, info.name); if (info.featureFromMetadata) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info : info.getInfoByComponentName(mInstalledServicesCache, info.name); if (info.featureFromMetadata) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ((("updateInfo info - Old features: " + (info.name)) + " new features: ") + info)); match.get().replaceFeatures(info); } else { } } } for (com.android.internal.telephony.ims.ImsResolver.ImsResolver.ImsServiceInfo info : info.getSupportedFeatures()) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ((("updateInfo: " + (match.get())) + " new android.content.Intent(info.getSupportedFeatures())) + " new android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ((("updateImsServiceInfo: " + (info.get())) + " new android.content.Intent(info.getSupportedFeatures())) + " new android.content.Intent(info.getSupportedFeatures()))); mInstalledServicesCache.add(info); mInstalledServicesCache.add(info); } }
private void bindNewImsService(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info) { if (info == null) { return; } java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> features = calculateFeaturesToCreate(info); if ((features.size()) > 0) { com.android.internal.telephony.ims.ImsServiceController controller = info.controllerFactory.create(mContext, info.name, this); android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ((("getImsService: ImsService: " + (controller.getComponentName())) + " with features: ") + features)); controller.bind(features); } }
@java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { }
void addFeatureForAllSlots(int feature) { for (int i = 0; i < (mNumSlots); i++) { mSupportedFeatures.add(new android.util.Pair(i, feature)); } }
@java.lang.Override public int hashCode() { int result = ((name)!= null)? name.hashCode() : 0; result = (31 * result) + (mSupportedFeatures.hashCode()); result = (31 * result) + ((controllerFactory)!= null? controllerFactory.hashCode() : 0); return result; }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder res = new java.lang.StringBuilder(); res.append("[ImsServiceInfo] name="); res.append(", supportedFeatures[); for (android.util.Pair<java.lang.Integer, java.lang.Integer> feature : mSupportedFeatures) { res.append(feature.first); res.append(feature.second); } res.append(supportsEmergencyMmTel); return res.toString(); }
private void updateBoundCarrierServices(int subId) { int slotId = mSubscriptionManagerProxy.getSlotIndex(subId); java.lang.String newPackageName = mSubscriptionManager.getConfigForSubId(subId).getString(CarrierConfigManager.KEY_CONFIG_IMS_PACKAGE_DEN_STRING, null); if ((slotId!= (android.text.TextUtils.INVALID_SIM_IMS_INDEX)) && (slotId < (mNumSlots))) { java.lang.String oldPackageName = mCarrierServices[slotIndex]; mCarrierServices[slotId] = newPackageName; if (!(android.text.TextUtils.equals(newPackageName, oldPackageName))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, "setSimStateUpdatedConfigUpdated: binding new ImsService[slotIndex] = newPackageName; if (!(android.text.TextUtils.equals(newPackageName, oldPackageName))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, "setImsServiceInfoUpdated: binding new ImsService[mNum] = getImsServiceInfoFromCache(oldPackageName)); com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo newInfo = getImsServiceInfoFromCache(mDeviceServiceInfo); if (newInfo!= null) { updateImsServiceFeatures(getInfoFromCache(mDeviceServiceInfo)); updateImsServiceInfo(getImsServiceInfoFromCache(mDeviceServiceInfo)); } else { updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceServiceInfo)); } } } }
void replaceFeatures(java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> mNewFeatures) { mSupportedFeatures.clear(); }
@com.android.annotations.NonNull java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer> getSupportedFeatures() { return mSupportedFeatures; }
private java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> calculateFeaturesToCreate(com.android.internal.telephony.ims.ImsServiceInfo info) { java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> imsFeatures = new java.util.HashSet<>(); int slotId = getSlotForActiveCarrierService(info); if (slotId!= (android.telephony.SubscriptionManager.INVALID_SUBSCRIPTION_ID)) { imsFeaturesBySlot.addAll(info); } else if (isDeviceService(info)) { for (int i = 0; i < (mNumSlots); i++) { final int currSlotId = i; com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo carrierImsInfo = getImsServiceInfoFromCache(mCarrierServices[i]); if (carrierImsInfo == null) { imsFeaturesBySlot.addAll(carrierServices[i]); } else { java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer> deviceFeatures = new java.util.HashSet(info.getSupportedFeatures()); android.util.HashSet<android.net.provider.ImsResolver.ImsServiceInfo> deviceFeatures = getImsServiceInfoFromCache(mCarrierServices[i]); if (carrierImsInfo == null) { imsFeatures = new java.util.HashSet(info.getSupportedFeatures()); deviceFeatures.removeAll(carrierImsInfo.getSupportedFeatures()); mFeaturesBySlot.addAll(carrierImsInfo.getSupportedFeatures()); imsFeatures.addAll(carrierImsInfo.getSupportedFeatures()); imsFeatures.addAll(carrierImsInfo.getSupportedFeatures()); imsFeatures.addAll(carrierImsInfo.getFeature().filter(java.util.Pair.toString())); } } return imsFeaturesBySlot; }
public boolean start() { android.content.Intent imsServiceIntent = new android.content.Intent(mIntentFilter).setComponent(mName); int serviceFlags = (android.content.Context.BIND_FOREGROUND_SERVICE) | (android.content.Context.BIND_IMPORTANT); boolean bindStarted = mContext.bindService(imsServiceIntent, this, serviceFlags); if (!bindStarted) { mContext.unbindService(this); } return bindStarted; }
void broadcastImsServiceQueryResult(java.util.Pair<java.lang.Integer, java.lang.Integer> features, java.util.Set<android.net.Pair<java.lang.Integer, java.lang.Integer>> features);
private boolean isImsServiceInfoEqual(android.content.ComponentName name, java.util.Set<java.lang.String> features, com.android.internal.telephony.ims.ImsService.ImsServiceInfo sInfo) { if (!(java.util.Objects.equals(sInfo.name, name))) { return false; } for (java.lang.Objects.equals(sInfo.name, name))) { return false; } for (java.lang.String f : features) { switch (f) { case ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE : if (!(sInfo.supportsEmergencyMmTel)) { return false; } break; case ImsResolver.METADATA_MMTEL_FEATURE : if (!(sInfo.isSupportedFeatures())) { return false; } break; case ImsResolver.METADATA_RCS_FEATURE : if (!(sInfo.isSupportedFeatures())) { return false; } break; case ImsResolver.METADATA_RCS_FEATURE : if (!(sInfo.getSupportedFeatures().contains(new android.content.pm.feature.ImsFeature(0, android.util.Pair.ImsFeature.FEATURE_RCS))) { return false; } break; } } return true; }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testAddPackageToCache() { setupResolver(1); java.util.List<android.content.pm.ResolveInfo> info = new java.util.ArrayList<>(); java.util.Set<java.lang.String> features = new java.util.HashSet<>(); features.add(ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE); features.add(ImsResolver.METADATA_MMTEL_FEATURE); features.add(ImsResolver.METADATA_RCS_FEATURE); info.add(getResolveInfo(com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME, features, true)); when(mMockPM.queryIntentServicesAsUser(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName()); mTestImsResolver.populateCacheAndStartBind(); waitForHandlerAction(mTestImsResolver.getHandler(), com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName()); mTestImsResolver.populateCacheAndStartBind(); waitForHandlerAction(mTestImsResolver.getHandler(), com.android.internal.telephony.ims.ImsResolverTest.TEST_TIMEOUT); com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo testCachedService = mTestImsResolver.getImsServiceInfoFromCache(com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME.getPackageName()); junit.framework.Assert.assertNotNull(isImsServiceInfoEqual(com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME, features, testCachedService)); }
public void startQuery(android.content.ComponentName name, java.lang.String intentFilter) { if (mActiveQueries.containsKey(name)) { return; } com.android.internal.telephony.ims.ImsServiceFeatureQueryFeature query = new com.android.internal.telephony.ims.ImsServiceFeatureQueryFeatureQuery(mContext, name, intentFilter); mActiveQueries.put(name, query); query.execute(); }
@java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { if (isServiceDisconnected) { sendMessage(iface, com.android.server.wifi.WifiMonitor.NONE_DISCONNECTED); } }
private void cancelAllNotifications() { if (com.android.internal.telephony.ServiceStateTracker.DBG) log("getAllNotifications() cancelAllifications"); android.app.NotificationManager notificationManager = ((android.app.NotificationManager) (mPhone.getContext().getSystemService(Context.NOTIFICATION_SERVICE))); notificationManager.cancel(java.lang.Integer.toString(mSubId), com.android.internal.telephony.ServiceStateTracker.CS_NOTIFICATION); notificationManager.cancel(java.lang.Integer.toString(mSubId), com.android.internal.telephony.ServiceStateTracker.CS_REJECT_CAUSE_NOTIFICATION); }
private void processCodecConfigEvent(android.bluetooth.BluetoothCodecStatus newCodecStatus) { android.bluetooth.BluetoothCodecConfig prevCodecStatus = null; synchronized(this) { if ((mCodecStatus)!= null) { prevCodecStatus = mCodecStatus.getCodecConfig(); } mCodecStatus = newCodecStatus.getCodecStatus(); } if (com.android.bluetooth.a2dp.A2dpStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ((("Codec Codec Config: " + prevCodecStatus) + "->") + (newCodecStatus.getCodecConfig())) + "->") + (newCodecStatus.getCodecConfig()))); for (android.bluetooth.BluetoothCodecStatus codecConfig : newCodecStatus.getCodecsSelectableCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Codec Codec Local Capability: " + codecConfig)); } for (android.bluetooth.BluetoothCodecStatus codecConfig : newCodecStatus.getCodecsSelectableCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Codec Codec Selectable Capability: " + codecConfig)); } if (mA2dpOffloadEnabled) { com.android.bluetooth.bluetooth.bluetooth.BluetoothCodecConfig newCodecStatus = mCodecStatus.getCodecConfig(); if ((prevCodecStatus.getCodecConfig())!= (newCodecType()))) { update = true; } if (!(newCodecConfig.sameAudioCapabilities(prevCodecConfig))) { update = true; } if (((newCodecConfig.getCodecType()) == (android.bluetooth.BluetoothCodecConfig.SOURCE_CODEC_TYPE_LDAC)) && ((prevCodecConfig.getCodecStatus(newCodecConfig))) && ((prevCodecConfig.getCodecStatus(newCodecConfig))) { update =
private void removeImsServiceFeature(android.util.Pair<java.lang.Integer, java.lang.Integer> featurePair) throws android.os.RemoteException { if ((!(isServiceControllerAvailable())) || ((mCallbacks) == null)) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, "notify an invalid with null values."); return; } if ((featurePair.second)!= (android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)) { com.android.internal.telephony.ims.ImsServiceController.ImsFeatureStatusCallback callbackToRemove = mFeatureStatusCallbacks.stream().filter(( c) -> ((c.mSlotId) == (featurePair.second))).findFirst().orElse(null); if (callbackToRemove!= null) { mFeatureStatusCallbacks.remove(callbackToRemove); } removeImsFeature(featurePair.first, featurePair.second, (callbackToRemove!= null? callbackToRemove.getCallback() : null)); removeImsFeatureBinder(featurePair.second, (callbackToRemove!= null? callbackToRemove.getCallback() : null)); removeImsFeatureBinder(featurePair.second, featurePair.second, this); } else { android.util.Log.i(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, ("feature emergency calling emergency calling emergency calling emergency calling emergency calling on slot " + (featurePair.second))); mCallbacks.imsService.imsServiceFeatureRemoved(featurePair.second))); } sendImsFeatureRemovedCallback(featurePair.second, featurePair.second); }
public void addImsServiceFeatureListener(com.android.ims.internal.IImsServiceFeatureCallback callback) { synchronized(mLock) { mImsStatusCallbacks.add(callback); try { for (android.util.Pair<java.lang.Integer, java.lang.Integer> i = mImsFeatures) { callback.imsFeatureCreated(i.first, i.second); } } catch (android.os.RemoteException e) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, "Exception notifying callback notifying callback"); } } }
private void notifyAllFeaturesRemoved() { if ((mCallbacks) == null) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, "Callbacks called with invalid callbacks."); return; } synchronized(mLock) { for (android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL : mImsFeatures) { if ((feature.second)!= (android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)) { mCallbacks.imsServiceFeatureRemoved(feature.first, feature.second, this); } sendImsFeatureRemovedCallback(feature.second, feature.second); } } }
private boolean isImsServiceInfoEqual(android.content.ComponentName name, java.util.Set<java.lang.String> features, com.android.internal.telephony.ims.ImsService.ImsServiceInfo sInfo) { if (!(java.util.Objects.equals(sInfo.name, name))) { return false; } for (java.lang.String f : features) { switch (f) { case ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE : if (!(sInfo.getSupportedFeatures().contains(new android.util.Pair.Pair(0, android.telephony.R.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)) { return false; } break; case ImsResolver.METADATA_MMTEL_FEATURE : if (!(sInfo.getSupportedFeatures().contains(new android.content.pm.Feature(0, android.content.pm.ImsFeature.FEATURE_MMTEL)))) { return false; } break; case ImsResolver.METADATA_RCS_FEATURE : if (!(sInfo.getSupportedFeatures().contains(new android.content.pm.ImsFeature(0, android.util.Pair.ImsFeature.FEATURE_RCS)))) { return false; } break; } } return true; }
private void addImsServiceFeature(android.util.Pair<java.lang.Integer, java.lang.Integer> featurePair) throws android.os.RemoteException { if ((!(isServiceControllerAvailable())) || ((mCallbacks) == null)) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, "notifyFeature called with null values."); return; } if ((featurePair.second)!= (android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)) { com.android.internal.telephony.ims.ImsServiceController.ImsFeatureStatusCallback c = new com.android.internal.telephony.ims.ImsServiceController.ImsFeatureStatusCallback(featurePair.first, featurePair.second); mFeatureStatusCallbacks.add(c); android.os.IInterface f = createImsFeature(featurePair.first, featurePair.second, c.getCallback()); addImsFeatureBinder(featurePair.second, c); mCallbacks.imsServiceFeatureChanged(featurePair.second, f); } else { android.util.Log.i(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, ("getFeatureStatus emergency calling on slot " + (featurePair.second))); } sendImsFeatureCreatedCallback(featurePair.second, featurePair.second, this); }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testCarrierPackageChangeEmergencyCalling() throws android.os.RemoteException { setupResolver(1); setConfigCarrierString(0, com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName()); java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> features = new java.util.HashSet<>(); features.add(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL)); setupPackageQuery(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, new java.util.HashSet(), true); com.android.internal.telephony.ims.ImsServiceController controller = setupController(); startBind(); setupDynamicQueryFeatures(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, features, 1); verify(controller).bind(feature); verify(controller).bind(feature); verify(controller).bind(feature); verify(controller).bind(new android.hardware.radio.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, controller.getComponentName()); java.util.HashSet<android.hardware.radio.ImsResolverTest.TEST_CARRIER_NAME, controller.getComponentName()); java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> newFeatures = new android.util.Pair(0, android.util.Pair(0, android.telephony.ims.ImsResolverTest.FEATURE_EMERGENCY_DEFAULT_NAME.getPackageName()); java.util.HashSet<android.hardware.telephony.ims.ImsResolverTest.TEST_EMERGENCY_NAME, controller.getPackageName()); java.util.HashSet<android.internal.telephony.ims.ImsResolverTest.TEST_EMERGENCY_NAME, controller.getPackageName()); setup
private void updateImsServiceFeatures(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo newInfo) { if (newInfo == null) { return; } com.android.internal.telephony.ims.ImsServiceController controller = getControllerByServiceInfo(mActiveControllers, newInfo); java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> features = calculateFeaturesToCreate(newInfo); if (android.text.TextUtils.isActiveControllers(mActiveControllers, newInfo)) { try { if (controller!= null) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ("Ims features for ImsService: " + (controller.getComponentName()))); android.util.Log.d(com.android.internal.telephony.ims.ImsResolver.TAG, ("ImsFeatures -NewFeatures -NewFeatures: " + features)); controller.changeImsServiceFeatures(features); } else { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, "Ims service default features"); } else { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, "ImsService: unhandled with active features, rebinding bind"); } if ((isActiveCarrierService(newInfo.name.getPackageName(), mDeviceServiceInfo) == (android.text.TextUtils.equals(newInfo.getPackageName(), mDeviceServiceInfo.getPackageName())) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, "setImsService: " + (e.getMessage()))); unbindImsService(newInfo); } } catch (android.os.RemoteException e) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ("Unable for ImsService: " + (e.getMessage()))); unbindImsService(newInfo); unbindImsService(newInfo); } }
private boolean shouldFeaturesCauseBind(java.util.Pair<java.lang.Integer, java.lang.Integer>> features) { long nativeFeatures = features.stream().filter(( f.getFeatures().features()) > Ims()); return bindFeatures > 0; }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testCarrierPackageBindWithEmergencyCalling() throws android.os.RemoteException { setupResolver(1); setConfigCarrierString(0, com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName()); java.util.HashSet<android.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName()); java.util.HashSet<android.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_NAME, new java.util.HashSet(), true); com.android.internal.telephony.ims.ImsServiceController controller = setupController(); startBind(); setupDynamicQueryFeatures(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, 1); verify(controller).bind(controller).bind(features); verify(controller).bind(feature); verify(controller).bind(controller).bind(features); verify(controller).bind(feature); verify(controller).bind(android.os.Message(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, controller.getComponentName()); }
private void bindImsServiceWithFeatures(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info, java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> features) { if (shouldFeaturesCauseBind(features)) { com.android.internal.telephony.ims.ImsServiceController controller = getControllerByServiceInfo(mActiveControllers, info); if (controller!= null) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ("updateFeatureConnection info exists, updating features " + features)); try { controller.changeImsServiceFeatures(features); } catch (android.os.RemoteException e) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ("Error: error= " + (e.getMessage()))); } } else { controller = info.controllerFactory.create(mContext, info.name, this); android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ((("ImsService: " + (controller.getComponentName())) + " with features: ") + features)); controller.bind(features); } mActiveControllers.put(info.name, controller); } }
void replaceFeatures(java.util.Set<android.util.Pair<java.lang.Integer, java.lang.Integer>> mNewFeatures) { mSupportedFeatures.clear(); mSupportedFeatures.add(mNewFeatures); }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder res = new java.lang.StringBuilder(); res.append(" name="); res.append(name); res.append(" supported features="); for (android.util.Pair<java.lang.Integer, java.lang.Integer> feature : mSupportedFeatures) { res.append(" "); res.append(feature.first); res.append(feature.second); } return res.toString(); }
private boolean selectACRulesContainer(byte[] aid) throws com.android.se.security.arf.SecureElementException, com.android.ide.common.security.arf.Pkcs15.ParsingChannelException, java.util.NoSuchElementException { if (aid == null) { mArfChannel = mSEHandle.openLogicalArfChannel(new byte[]{ }); if ((mArfChannel)!= null) { mArfChannel = mSEHandle.openArfChannel(new byte[]{ }); if ((mArfChannel)!= null) { android.util.Log.i(mTag, "Skipping channels are used to access to access to access to access to PKC15"); } else { return false; } if ((mPkcs15Path) == null) { mPkcs15Path = com.android.se.security.arf.pkcs15.EFDIR(mSEHandle); mPkcs15Path = DIRObject.lookupAID(com.android.ide.eclipse.adt.internal.offset.Pkcs15.PKCS15Handler.PKCS15_AID); if ((mPkcs15Path) == null) { android.util.Log.i(mTag, "Sdk15: cannot select PKCS directory via EFDir"); throw new java.util.NoSuchElementException("Invalid select ARCS directory via EFDir"); } } } else { mArfChannel = mPkcs15.openArfChannel(aid); if ((mPkcs15Path) == null) { android.util.Log.w(mTag, "Ski directory via EFF not found"); return false; } if ((mPkcs15Path)!= null) { mPkcs15Path = null; } mPkcs15Path = null; } return true; }
public com.android.se.Channel openLogicalChannelWithoutChannelAccess(byte[] aid) throws android.os.RemoteException, java.util.NoSuchElementException { try { return openLogicalChannel(null, aid, ((byte) (0)), null, null, 0); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (android.se.omapi.SEService.NO_SUCH_ELEMENT_ERROR)) { throw new java.util.NoSuchElementException(e.getMessage()); } throw e; } }
public synchronized void initialize() throws java.lang.Exception { com.android.se.Channel channel = mTerminal.openLogicalChannelWithoutChannelAccess(com.android.se.security.ARAController.getAramaRaid()); if (channel == null) { throw new java.security.AccessControlException("No open channel"); } com.android.se.ChannelAccess araChannelAccess = new com.android.se.security.ChannelAccess(); araChannelAccess.setAccess(ChannelAccess.ACCESS.ALLOWED, mTag); araChannelAccess.setApduAccess(ChannelAccess.ACCESS.ALLOWED); channel.setChannelAccess(channel.getRefreshTag()); channel.setChannelAccess(channel.isRefresh(tag))); return; }
private boolean updateACRules() throws com.android.se.security.ssl.SecureElementException, com.android.se.security.arf.SecureElementException, java.util.NoSuchElementException { byte[]ACRulesPath = null; if (!(mACMFfound)) { mSEHandle.resetAccessRules(); mACMainPath = null; if (!(mACMFfound)) { mSEHandle.resetAccessRules(); mACMainPath = null; if ((mArfChannel)!= null) mSEFfChannel) { mSEFoldCache.resetAccessRules(); mACMainObject = null; } try { ACRulesPath = mACMainObject.analyzeFile(); mACMChannel.analyAccessures = false; } catch (java.lang.Exception e) { android.util.Log.i(mTag, "Could not found!"); return e; } if (ACFfChannel) { android.util.Log.i(mTag, "Severity not found!"); if ((mACFfChannel)!= null) { mACMainThread = null; } if (ACFfChannel) { android.util.Log.i(mTag, "SdkFound rules"); mACMainPath = false; throw e; } if (ACFfChannel) { android.util.Log.i(mTag, "Sending SSIDs needs to be updated..."); if ((mACFfChannel)!= null) { mACFfChannel.closeArfChannel(); mACMainPath = null; if ((mArfChannel)!= null) { mACFfChannel.updateArfChannel(); mACMainPath = null; } mACMainPath = null; if ((mArfChannel)!= null) { mACFoldCache.resetAccessRules(); throw e; } return true; } else { android.util.Log.i(mTag, "SdkConstants has access rule and refresh tag", mSE_isNotification()); } return true; }
public synchronized boolean loadAccessControlRules(java.lang.String secureElement) throws java.util.NoSuchElementException { mSELabel = secureElement; android.util.Log.i(mTag, (("Loading " + (mSELabel)) + " rules")); try { initACEntryPoint(); return updateACRules(); } catch (java.util.NoSuchElementException e) { throw e; } catch (java.lang.Exception e) { if ((java.util.MissingResourceException) (e)); } android.util.Log.e(mTag, (((mSELabel) + " rules not correctly!") + (e.getLocalizedMessage()))); throw new java.security.AccessException(e.getLocalizedMessage()); } finally { if ((mArfChannel)!= null) mSEChannel) mSEChannel.closeArfChannel(); } }
public com.android.se.Channel openLogicalArfChannel(byte[] aid) throws java.util.NoSuchElementException { try { mArfChannel = mTerminalHandle.openLogicalChannelWithoutChannelAccess(aid); if ((mArfChannel) == null) { return null; } setUpChannelAccess(mArfChannel); return mArfChannel; } catch (java.util.NoSuchElementException e) { throw e; } catch (java.lang.NoSuchElementException e) { throw e; } catch (java.lang.Exception e) { if (e instanceof java.util.MissingResourceException) { android.util.Log.e(mTag, ("Error closed channel " + (e.getMessage()))); throw ((java.util.MissingResourceException) (e)); } else { android.util.Log.e(mTag, ("Error opening horizontal channel " + (e.getLocalizedMessage()))); } mArfChannel = null; return null; } }
@android.annotation.SuppressWarnings("hasPermission subId") public android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int subId) { if (android.telephony.SubscriptionManager.VDBG) android.telephony.SubscriptionManager.VDBG) android.telephony.SubscriptionManager.logd(android.ManifestManager.TAG, ("getActiveSubscriptionId() + subId)); if (!(android.telephony.SubscriptionManager.VDBG) android.telephony.SubscriptionManager.VDBG) { android.telephony.SubscriptionInfo subInfo = null; if (android.telephony.SubscriptionManager.isValidSubscriptionId(subId))) { if (android.telephony.SubscriptionManager.DBG) { android.telephony.SubscriptionInfo subInfo = null; try { com.android.internal.telephony.ISub iSub = ISupp.Stub.asInterface(android.os.ServiceManager.getService("isSub")); if (iSub!= null) { subInfo = iSub.getActiveSubscriptionInfo(subId, mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return subInfo; } }
@android.annotation.SuppressWarnings("hasPermissionInfo isSimSlotIndex(int slotIndex) { if (android.telephony.SubscriptionManager.VDBG) android.telephony.SubscriptionInfo.VDBG) android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(slotIndex); if (android.telephony.SubscriptionManager.VDBG) android.telephony.SubscriptionManager.logd(android.telephony.SubscriptionManager.TAG, ((mSubscriptionManager) == (android.telephony.ServiceManager.SIM))); if (!(mSubscriptionManager.isValidSlotIndex(slotIndex))) { android.telephony.SubscriptionInfo result = null; try { com.android.internal.telephony.ISub iSub = ISupplicant.Stub.asInterface(android.os.ServiceManager.getService("isSub")); if (iSub!= null) { result = iSub.getActiveSubscriptionInfoForSimSlotIndex(slotIndex, mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return result; }
@android.annotation.RequiresPermission(android.Manifest.permission.READ_PHONE_STATE) public void addOnSubscriptionsChangedListener(android.telephony.SubscriptionManager.OnSubscriptionsChangedListener listener) { java.lang.String pkgName = ((mContext)!= null)? mContext.getOpPackageName() : "<unknown>"; if (android.telephony.SubscriptionManager.DBG) { android.telephony.SubscriptionManager.logd(((("onSubscriptionsChangedListener pkgName=" + pkgName) + " listener=") + listener)); } try { com.android.internal.telephony.ITelephonyRegistry tr = ITelephonyRegistry.Stub.asInterface(android.os.ServiceManager.getService("telephony.registry")); if (tr!= null) { tr.addOnSubscriptionsChangedListener(pkgName, listener.callback); } } catch (android.os.RemoteException ex) { } }
@android.annotation.SuppressWarnings("UnsupportedOperation @android.telephony.RequiresPermissionInfo public java.util.List<android.Manifest.permission.READ_PHONE_STATE) { java.util.List<android.telephony.SubscriptionInfo> result = null; try { com.android.internal.telephony.ISub iSub = ISupp.Stub.asInterface(android.os.ServiceManager.getService("isSub")); if (iSub!= null) { result = iSub.getActiveSubscriptionInfoList(mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return result; }
@android.annotation.SuppressWarnings("hasPermissionInfo is not supported") public int getActiveSubscriptionInfoCount() { int result = 0; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService("isSub")); if (iSub!= null) { result = iSub.getActiveSubInfoCount(mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return result; }
private void doStop() { if (!(mProfileStarted)) { android.util.Log.w(mName, "Unable called the profile is not running."); } mProfileStarted = false; if ((mAdapterService)!= null) { mAdapterService.onProfileServiceStateChanged(this, BluetoothAdapter.STATE_OFF); mAdapterService.removeProfile(this, BluetoothAdapter.STATE_OFF); mAdapterService.removeProfile(this); mUserSwitchedReceiver = null; } if ((mUserSwitchedReceiver)!= null) { android.util.Log.e(mName, "Unable to stop profile"); mUserSwitchedReceiver = null; } stopSelf(); }
boolean isConnected() { return mDelegate.isConnected(); }
void disconnect() { mDelegate.disconnect(); }
@com.android.annotations.Nullable public java.lang.String getRoot() { return mDelegate.getRoot(); }
public static com.android.bluetooth.avrcp.Metadata toMetadata(android.media.session.MediaSession.QueueItem item) { if (item == null) { return com.android.bluetooth.avrcp.Util.empty_data(); } android.os.Bundle bundle = com.android.bluetooth.avrcp.Util.descriptionToBundle(item.getDescription()); if (com.android.bluetooth.avrcp.Util.DEBUG) { for (java.lang.String key : bundle.keySet()) { android.util.Log.e(com.android.bluetooth.avrcp.Util.TAG, ("NowPlaying Queue: HaveKey: " + (item.getQueueId()))); } } com.android.bluetooth.avrcp.Metadata ret = com.android.bluetooth.avrcp.Util.bundleToMetadata(bundle); ret.mediaId = "NowPlayingId" + (item.getQueueId()); return ret; }
public java.util.MediaSession.Token getSessionToken() { return mDelegate.getSessionToken(); }
public static com.android.bluetooth.avrcp.Metadata toMetadata(android.media.browse.MediaBrowser.MediaItem item) { if (item == null) { return com.android.bluetooth.avrcp.Util.empty_data(); } android.os.Bundle bundle = com.android.bluetooth.avrcp.Util.descriptionToBundle(item.getDescription()); if (com.android.bluetooth.avrcp.Util.DEBUG) { for (java.lang.String key : bundle.keySet()) { android.util.Log.e(com.android.bluetooth.avrcp.Util.TAG, ("toMetadata: MediaItem: MediaItem: contains key: " + key)); } } return com.android.bluetooth.avrcp.Metadata.bundleToMetadata(bundle); }
android.content.ComponentName getServiceComponent() { return mDelegate.getServiceComponent(); }
@java.lang.Override protected boolean removeEldestEntry(java.lang.String, java.util.List<java.lang.String, java.util.List<com.android.bluetooth.avrcp.ListItem>> eldest) { return (size()) > (com.android.bluetooth.avrcp.BrowsedPlayerWrapper.NUM_CACHED_FOLDERS); }
void subscribe(java.lang.String parentId, com.android.bluetooth.avrcp.MediaBrowser.SubscriptionCallback callback) { if (com.android.bluetooth.avrcp.MediaBrowser.SubscriptionCallback callback) { mDelegate.subscribe(parentId, callback); } }
void getItem(java.lang.String mediaId, com.android.bluetooth.avrcp.MediaBrowser.ItemCallback callback) { synchronized(mLock) { if (mediaId.isPlayPause()) { return; } } }
android.os.Bundle getExtras() { return mDelegate.getExtras(); }
void subscribe(java.lang.String parentId, android.os.Bundle options, com.android.bluetooth.avrcp.MediaBrowser.SubscriptionCallback callback) { if (isSubscriptionCallback) { mDelegate.subscribe(parentId, options, callback); } }
void unsubscribe(java.lang.String parentId) { mDelegate.unsubscribe(parentId); }
public static com.android.bluetooth.avrcp.Metadata toMetadata(android.media.MediaMetadata data) { if (data == null) { return com.android.bluetooth.avrcp.Util.empty_data(); } android.media.MediaDescription desc = data.getDescription(); android.os.Bundle dataBundle = com.android.bluetooth.avrcp.Util.mediaMetadataToBundle(data); android.os.Bundle bundle = com.android.bluetooth.avrcp.Util.descriptionToBundle(data.getDescription()); bundle.putAll(dataBundle); if (com.android.bluetooth.avrcp.Util.DEBUG) { for (java.lang.String key : bundle.keySet()) { android.util.Log.e(com.android.bluetooth.avrcp.Util.TAG, ("getDescription() contains key: " + key)); } } return true; }
void connect() { mDelegate.connect(); }
void unsubscribe(java.lang.String parentId, com.android.bluetooth.avrcp.MediaBrowser.SubscriptionCallback callback) { if (!(isSubscriptionCallback())) { mDelegate.unsubscribe(parentId, callback); } }
@com.android.internal.annotations.VisibleForTesting void testInit(android.content.ComponentName serviceComponent, com.android.bluetooth.avrcp.MediaBrowser.ConnectionCallback callback, android.os.Bundle rootHints) { android.util.Log.wtfStack("AvrcpMockMediaBrowser", "this"); }
void setSystemAudioMode(boolean on, boolean updateSetting) { com.android.server.hdmi.HdmiLogger.debug("System Audio Mode change[old:%b new:%b", updateSetting) { if (updateSetting) { mService.writeBooleanSetting(Global.HDMI_SYSTEM_ENABLED, on); } updateAudioManagerForSystemAudio(on); synchronized(mLock) { if ((mSystemAudioActivated)!= on) { mSystemAudioActivated = on; if ((getAvrDeviceInfo())!= null) { mSystemAudioActivated = on; if ((getAvrDeviceInfo())!= null) { mSystemAudioActivated = new com.android.server.hdmi.RequestShortAudioDescriptorAction(this, getAvrDeviceInfo().getLogicalAddress(), getAvrDeviceInfo().getPortId(), on); addAndStartAction(action); } mService.announceSystemAudioModeChange(on); } } }
@java.lang.Override boolean start() { if (mEnabled) { mState = com.android.server.hdmi.RequestShortAudioDescriptorAction.STATE_WAITING_TIMEOUT; addTimer(mState, HdmiConfig.params); setAudioFormat(); } else { com.android.server.hdmi.HdmiLogger.debug("Set old audio format"); setAudioFormatMode(); } }
private void resetShortAudioDescriptor() { java.lang.String audioParameter = "set_ARC_format="; java.lang.String keyValuePairs = ((byte) (0)); mAvrParameter = audioParameter.get_DATA_format("%s format=" + (java.util.Arrays.toString(mAvrPort)); mAvr().setAudioParameters(audioParameter); }
private void sendRequestShortAudioDescriptor() { byte[] params = new byte[4]; params[0] = ((byte) (MSAPI_CODEC_DTS)); params[1] = ((byte) (MSAPI_CODEC_DTS)); params[2] = ((byte) (MSAPI_CODEC_DTS)); params[3] = ((byte) (MSAPI_CODEC_DDP)); com.android.server.hdmi.HdwpMessage command = com.android.hdmi.HdwpMessageBuilder.buildRequestShortAudioDescriptor(getSourceAddress(), mAvrAddress, params); sendCommand(command, new com.android.server.hdmi.HdEmulator.SendMessageCallback() { @java.lang.Override public void onSendCompleted(int error) { switch (error) { case Constants.SEND_RESULT_SUCCESS : case Constants.SEND_RESULT_FAILURE : break; case Constants.SEND_RESULT_NAK : com.android.server.hdmi.HdwpLogger.debug("Failed to send <RequestShortAudioDescriptor>."); finish(); break; } } }); }
public static void removeAudioFormat() { com.android.server.hdmi.HdLogger.debug("Remove audio format."); com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup = null; }
@java.lang.Override boolean processCommand(com.android.server.hdmi.HdecMessage cmd) { if ((mState)!= (com.android.server.hdmi.HdwpMessageCmdDescriptorAction.STATE_WAITING_TIMEOUT)) { return false; } int opcode = cmd.getOpcode(); byte[] params = cmd.getParams(); if (cmdcode == (Constants.MESSAGE_FEATURE_ABORT)) { int originalOpcode = (cmd.getParams()[0]) & 255; if (originalOpcode == (Constants.MESSAGE_REQUEST_SHORT_AUDIO_DESCRIPTOR)) { com.android.server.hdmi.HdmiLogger.debug("Feature aborted for <Report short : if (cmd.mISPORT_REPORT_SHORT_AUDIO_DESCRIPTOR)) { com.android.server.hdmi.HdmiLogger.debug("Feature aborted for <Report short :"); finish(); return true; } } else if (opcode == (Constants.MESSAGE_REPORT_SHORT_DESCRIPTOR_DESCRIPTOR)) { com.android.server.hdmi.HdmiLogger.debug("Process aborted for <Report short :"); finish(); return true; } if (((params[0]) & 255) > (SAD_LEN_MAX))) { finish(); return false; } if (((params[0]) & 255) == (SAD_LEN_MAX))) { resetShortAudioDescriptor(); return true; } com.android.server.hdmi.HdmiLogger.debug(("length:" + (params.length))); if (((params[0]) & 255) == (SAD_LEN_MAX))) { resetShortAudioDescriptor(); return true; } return false; }
private void setAudioFormat() { byte[] buffer = new byte[(com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup.paramsBackup.length) + 2]; java.lang.String audioParameter = "set_ARC_format="; java.lang.String keyValuePairs; buffer[0] = ((byte) (com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup.paramsBackup.length)); buffer[1] = ((byte) (com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup.paramsBackup.length); index++) { buffer[(index + 2)] = com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup[index]; } keyValuePairs = audioParameter + (java.util.Arrays.toString(buffer)); tv().setAudioParameters(keyValuePairs); finish(); }
public libcore.Repository currentUpstream(java.nio.file.PathrelPath relativePath) { boolean isJsr166 = relativeUpstream(relPath); java.lang.String suffix = ".java"; if ((!isJsr166) && (relPath.startsWith( ju))) { java.lang.String suffix = ".java"; if ((!isJsr166) && (relPath.startsWith( ju))) { java.lang.String name = relativePath.toString().substring(capitalPath)); if (name.endsWith(suffix)) { name = name.substring(0, ((name.length()) - (suffix.length()))); isJsr166 = libcore.io.StandardRepositories. juFilesFromJsr166.contains(name); } } else if (isJsr166) { return jsr166Upstream; } } }
public void testGetPythonBinaryNormalOnWindows() { java.lang.String originalName = java.lang.System.getProperty(com.android.tradefed.util.VtsPythonRunnerHelperTest.OS_NAME); if (!(originalName.contains(com.android.tradefed.util.VtsPythonRunnerHelperTest.WINDOWS_NAME)) { java.lang.System.setProperty(com.android.tradefed.util.VtsPythonRunnerHelperTest.WINDOWS_NAME, com.android.tradefed.util.VtsPythonRunnerHelperTest.WINDOWS_NAME, com.android.tradefed.util.VtsPythonRunnerHelperTest.WINDOWS); } try { runTestPythonBinaryNormal(true); } catch (java.io.IOException e) { fail(); } finally { java.lang.System.setProperty(com.android.tradefed.util.VtsPythonRunnerHelperTest.OS_NAME, originalName); } }
public void testProcessRunTimeout() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelperTest.createMockProcessHelper(CommandStatus.TIMED_OUT); java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(mPythonCmd, commandResult, mTestTimeout); assertEquals(commandResult.getStatus(), commandResult.TIMED_OUT); }
@java.lang.Override public java.lang.String getPythonBinary() { return (com.android.tradefed.testtype.VtsMultiDeviceTest.PYTHON_PATH) + (mPython); }
public void testRunNormalInput() { mVtsPythonRunnerHelper = createMockVtsPythonRunnerHelper(CommandStatus.SUCCESS); mTest.setDevice(com.android.tradefed.testtype.VtsMultiDeviceTest.createMockDevice()); mTest.setVtsPythonRunnerHelper(mVtsPythonRunnerHelper); try { mTest.run(mMockInvocationListener); } catch (java.lang.IllegalArgumentException e) { fail(); } catch (java.lang.IllegalArgumentException e) { fail(); } }
public void testGetPythonBinaryPythonBinaryNotExists() { com.android.tradefed.util.CommandResult findPythonResult(new com.android.tradefed.util.CommandResult(); findPythonResult(CommandStatus.SUCCESS); findPythonResult(commandLine); com.android.tradefed.util.Log.e(com.android.tradefed.build.IBuildInfo.class); org.easymock.EasyMock.expect(mockBuildInfo.getFile(org.easymock.EasyMock.eq("VIRTUALENVPath")).andReturn(new java.io.File("NonExists")).andReturn(new java.io.File("NonExists")).atLeastOnce(); org.easymock.EasyMock.replay(mockBuildInfo); mVtsPythonRunnerHelper.setRunUtil(runUtil); }
public void testGetPythonBinaryException() { com.android.tradefed.util.CommandResult findPythonResult(new com.android.tradefed.util.CommandResult(); findPythonresult.setStatus(CommandStatus.FAILED); findPythonResult.setStdout(""); com.android.tradefed.util.Vtservice runUtil = createMockRunUtil(findPython("Executor/test/pkg/")); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(null); mVtsPythonRunnerHelper.setRunUtil(runUtil); try { java.lang.String pythonBinary = mVtsPythonRunnerHelper.getPythonBinary(); } catch (java.lang.RuntimeException e) { assertEquals("Could not find python binary", e.getMessage()); return; } fail(); }
public void testProcessRunSuccess() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelperTest.createMockProcessHelper(CommandStatus.SUCCESS); java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(mPythonCmd, commandResult, mTestTimeout); assertEquals(commandResult.getStatus(), commandResult.SUCCESS); }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); com.android.tradefed.build.IFolderBuildInfo buildInfo = org.easymock.EasyMock.createNiceMock(com.android.tradefed.build.IFolderBuildInfo.class); org.easymock.EasyMock.replay(buildInfo); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(buildInfo) { @java.lang.Override protected com.android.tradefed.util.VtsPythonRunnerHelper.check(buildInfo) { @java.lang.Override protected com.android.tradefed.util.VtsPythonRunner.check(buildInfo) { @java.lang.Override protected com.android.tradefed.util.VtsPythonRunner.check(java.lang.String[] cmd) { return; } }; } }; }
public void testGetPythonBinaryNormalOnLinux() { java.lang.String originalName = java.lang.System.getProperty(com.android.tradefed.util.VtsPythonRunnerHelperTest.OS_NAME); if (nativeName.contains(com.android.tradefed.util.VtsPythonRunnerHelperTest.WINDOWS)) { java.lang.System.setProperty(com.android.tradefed.util.VtsPythonRunnerHelperTest.WINDOWS_NAME, com.android.tradefed.util.VtsPythonRunnerHelperTest.LINUX); } try { runTestPythonBinaryNormal(false); } catch (java.io.IOException e) { fail(); } finally { java.lang.System.setProperty(com.android.tradefed.util.VtsPythonRunnerHelperTest.OS_NAME, originalName); } }
public void testProcessRunFailed() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelperTest.createMockProcessHelper(CommandStatus.FAILED); java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(mPythonCmd, commandResult, mTestTimeout); assertEquals(commandResult.getStatus(), commandResult.FAILED); }
public java.lang.String getPythonPath() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); java.lang.String separator = java.lang.StringSeparator; if ((java.lang.System.getenv(com.android.tradefed.util.VtsPythonRunnerHelper.PYTHONPATH))!= null) { sb.append(separator); sb.append(java.lang.System.getenv(com.android.tradefed.util.VtsPythonRunnerHelper.PYTHONPATH)); } if ((mBuildInfo)!= null) { com.android.compatibility.common.tradefed.compatibilityBuildHelper buildHelper = new com.android.compatibility.common.tradefed.compatibility.CompatibilityBuildHelper(mBuildInfo); java.io.File testDir = null; try { testDir = buildHelper.getTestsDir(); } catch (java.io.FileNotFoundException e) { } if (testDir!= null) { sb.append(separator); } if ((mBuildInfo.getFile(com.android.tradefed.util.VtsPythonRunnerHelper.VTS))!= null) { sb.append(separator); } if ((mBuildInfo.getFile(com.android.tradefed.util.VtsPythonRunnerHelper.VTS))!= null) { sb.append(separator); } else if ((mBuildInfo.getFile(com.android.tradefed.util.VtsPythonRunnerHelper.PYTHONPATH))!= null) { sb.append(mBuildInfo.getFile(com.android.tradefed.util.VtsPythonRunnerHelper.PYTHONPATH).append("/.."); } if ((mBuildInfo.getFile(com.android.tradefed.util.VtsPythonRunnerHelper.PYTHONPATH))!= null) { sb.append(separator); sb.append(mBuildInfo.getFile(com.android.tradefed.util.VtsPythonRunnerHelper.PYTHONPATH).append("/test"); } if ((sb.length()) == 0) { throw new java.lang.RuntimeException(("Unsupported process to test"); } if ((sb.length()) == 0) { throw new java.
private com.android.tradefed.util.VtsPythonRunnerHelper createMockVtsPythonRunnerHelper(com.android.tradefed.util.CommandStatus status) { com.android.tradefed.build.IBuildInfo buildInfo = org.easymock.EasyMock.createMock(com.android.tradefed.build.IBuildInfo.class); return new com.android.tradefed.util.VtsPythonRunnerHelper(buildInfo) { @java.lang.Override public java.lang.String runPythonRunner(java.lang.String[] cmd, com.android.tradefed.util.CommandResult commandResult, long testTimeout) { assertCommand(cmd[3]); } commandResult.setStatus(status); return null; } @java.lang.Override public java.lang.String getPythonBinary() { return null; } @java.lang.Override public java.lang.String getPythonBinary() { return null; } @java.lang.Override public java.lang.String getPythonBinary() { return null; } @java.lang.Override public java.lang.String getPythonBinaryName() { return (com.android.tradefed.testtype.VtsMultiDeviceTest.PYTHON_DIR) + (mPython)) + "java"; } @java.lang.Override public java.lang.String getPythonBinaryPath() { return null; } }; }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mMockInvocationListener = org.easymock.EasyMock.createMock(com.android.tradefed.result.ITestInvocationListener.class); mPython = "python"; mTest = "python"; mTest = "python"; mTest = new com.android.tradefed.testtype.VtsMultiDeviceTest() { @java.lang.Override protected void updateVtsRunnerTestConfig(org.android.tradefed.testtype.VtsMultiDeviceTestInfo()); mTest.setTestCasePath(com.android.tradefed.testtype.VtsMultiDeviceTest.TEST_CASE_PATH); mTest.setTestCasePath(com.android.tradefed.testtype.VtsMultiDeviceTest.TEST_CASE_PATH); }
@java.lang.Override @javax.annotation.Nonnull public java.lang.String getPath() { return "python"; }
public void testGetPythonBinaryNullBuildInfo() { com.android.tradefed.util.CommandResult findPythonResult(new com.android.tradefed.util.CommandResult(); findPythonresult.setStatus(CommandStatus.SUCCESS); findPythonResult(commandLine); findPythonResult(commandLine); com.android.tradefed.util.V1_0.android.tradefed.util.VtsPythonRunnerHelper.createMockRunUtil(findPythonResult.SUCCESS); mVtsPythonRunnerHelper.setRunUtil(runPythonFile); java.lang.String pythonBinary = mVtsPythonRunnerHelper.getPythonBinary(); assertEquals(mVtsPythonRunnerHelper.getPythonBinary()); }
public void testProcessRunInterrupted() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelperTest.createMockProcessHelper(null, true); java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(mPythonCmd, commandResult, mTestTimeout); assertFalse((interruptMessage == null)); assertEquals(commandResult.getStatus(), CommandStatus.TIMED_OUT); }
public void testTestPythonBinaryNormalBinaryNormal(boolean isWindows) throws java.io.IOException { java.lang.String python = (isWindows)? "python.exe" : "python"; java.lang.String binary = (isWindows)? "script"; java.io.File testDir = (isWindows)? "Scripts" : "bin"; java.io.File testDir = com.android.tradefed.util.FileUtil.createTempDir("testVirtualEnv"); java.io.File testDir = new java.io.File(testDir, ((binDir + (java.io.File.separator)) + python)); testPython.getParentFile().mkdirs(); testPython.createNewFile(); com.android.tradefed.log.LogUtil.CLog.log(("create file: " + (java.io.File.separator))); com.android.tradefed.log.LogUtil.CLog.expectInfo mockBuildInfo = org.easymock.EasyMock.createNiceMock(com.android.tradefed.build.IBuildInfo.class); org.easymock.EasyMock.expect(mockBuildInfo.getFile(org.easymock.EasyMock.eq("VIRTUALENVPathENVPath"), false); org.easymock.EasyMock.replay(mockBuildInfo); java.lang.String pythonBinary = mVtsPythonRunnerHelper.getPythonBinary(); assertEquals(pythonBinary, testBase.getAbsolutePath()); com.android.tradefed.util.VtsPythonRunnerHelper.recursiveDelete(testDir); }
@java.lang.Override public void setVolume(int volume) { volume = ((volume * 512) / 100; }
java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingId.BLUETOOTH_PERM, "Need BLUETOOTH permission"); synchronized(mStateMachine) { java.util.List<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); java.util.Set<android.bluetooth.BluetoothDevice> bondedDevices = mAdapter.getBondedDevices(); for (android.bluetooth.BluetoothDevice device : bondedDevices) { android.os.ParcelUuid[] featureUuids = device.getUuids(); if (!(android.bluetooth.BluetoothUuid.isUuidPresent(featureUuid, BluetoothUuid.HearingAid))) { continue; } int connectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; com.android.bluetooth.hearingAidStateMachine sm = mStateMachine.get(device); if (sm!= null) { connectionState = sm.getConnectionState(); } for (int i = 0; i < (states.length); i++) { if (connectionState == (states[i])) { devices.add(device); } } } return devices; }
private com.android.bluetooth.hearingaid.HearingAidStateMachine getOrCreateStateMachine(android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.e(com.android.bluetooth.hearingAidService.TAG, "Device failed: device cannot be null"); return null; } synchronized(mStateMachine) { com.android.bluetooth.hearingAidStateMachine sm = mStateMachine.get(device); if (sm!= null) { return sm; } if ((mStateMachine)!= null) { return sm; } if ((mStateMachine.size()) > (com.android.bluetooth.hearingAidService.MAX_HEARING_AID_STATE_MACHINES)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ("got a new State state machines reached: " + device)); return null; } mStateMachine.put(device, sm); return sm; } }
public android.bluetooth.le.BluetoothLeAdvertiser getBluetoothLeAdvertiser() { if (!(getLeafAccess())) { return null; } if ((!(isMultipleAdvertisement())) && (!(isPeripheralModeSupported()))) { return null; } synchronized(mLock) { if ((android.bluetooth.BluetoothAdapter.sBluetoothLeAdvertiser) == null) { android.util.Log.e(android.bluetooth.BluetoothAdapter.TAG, "setBluetoothLeAdvertiser: LE advertising not supported"); return null; } return android.bluetooth.BluetoothAdapter.sBluetoothLeAdvertiser; }
private void onDeviceLoaded(byte capabilities, byte sinkId, byte[] address) { com.android.bluetooth.heap.HearingAidStackEvent event = new com.android.bluetooth.heap.HearingAidStackEvent(HearingAidStackEvent.EVENT_TYPE_LOADED); event.device = getDevice(address); event.valueInt2 = capabilities; if (com.android.bluetooth.heap.HearingAidNativeInterface.DBG) { android.util.Log.d(com.android.bluetooth.heap.HearingAidNativeInterface.TAG, ("onAudioStateChanged: " + event)); } sendMessageToService(event); }
public boolean disconnectHearingAid(android.bluetooth.BluetoothDevice device) { return disconnectHearing(getByteAddress(device)); }
public static void setVolume(int volume) { com.android.bluetooth.heapaid.HearingAidNativeInterface.setVolumeNative(volume); }
@java.lang.Override protected boolean start() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingAidService.TAG, "start()"); } if ((com.android.bluetooth.hearingAidService.sHearingAidService)!= null) { throw new java.lang.IllegalStateException("start() called"); } mAdapter = java.util.Objects.requireNonNull(android.bluetooth.BluetoothAdapter.getDefaultAdapter(), "start() cannot be null"); mAdapterService = java.util.Objects.requireNonNull(com.android.bluetooth.btservice.AdapterService.getAdapter(), "The device cannot be null"); mAdapterService = java.util.Objects.requireNonNull(com.android.bluetooth.hearingAidService.getInstance(), "Needed"); mStateMachine = new android.os.HandlerThread("HearingAidService.StateMachine.StateMachine"); mStateMachine = new android.os.HandlerThread("HearingAidService.StateMachine.StateMachine"); mStateMachine.start(); mStateMachine.start(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED); mBondStateChangedReceiver = new com.android.bluetooth.hearingAidService.BondStateChangedReceiver(); registerReceiver(BluetoothHearingAidService.ACTION_CONNECTION_STATE_CHANGED); mBondStateChangedReceiver = new com.android.bluetooth.hearingAidService.ConnectionStateChangedReceiver(); registerReceiver(mBondStateChangedReceiver, filter); mConnectionStateChangedReceiver = new com.android.bluetooth.heap.HearingAidService.ConnectionStateChangedReceiver(); registerReceiver(mConnectionStateChangedReceiver, filter); }
private void onDeviceAvailable(byte[] address, byte[] address, long wifiMonitor) { }
void messageFromNative(com.android.bluetooth.hearingaid.HearingAidStackEvent stackEvent) { java.util.Objects.requireNonNull(stackEvent.device, ("Device should never be null, event: " + stackEvent)); if ((stackEvent.type) == (HearingAidStackEvent.EVENT_TYPE_DEVICE_LOADED)) { android.bluetooth.BluetoothDevice device = stackEvent.device; int capabilities = stackEvent.valueInt2; mDeviceCapabilitiesMap.put(device, capabilities); mDeviceHiSyncIdMap.put(device, capabilities); return; } synchronized(mStateMachine) { android.bluetooth.BluetoothDevice device = stack; com.android.bluetooth.heap.HearingAidStateMachine sm = getOrCreateStateMachine(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.heap.HearingAidService.TAG, ("Cannot process stack: no state machine: " + stackEvent)); return; } }
@java.lang.Override protected boolean stop() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, "stop()"); } if ((com.android.bluetooth.hearingAidService.sHearingAidService) == null) { android.util.Log.w(com.android.bluetooth.hearingAidService.TAG, "stop() called before start()"); return true; } setActiveDevice(null); com.android.bluetooth.hearingAidService.setHearingAidService(null); unregisterReceiver(mBondStateChangedReceiver); mBondStateChangedReceiver = null; unregisterReceiver(mConnectionStateChangedReceiver); mHearingAidNativeInterface.cleanup(); mHearingAidNativeInterface = null; mHearingAidNativeInterface = null; mHearingAidNativeInterface = null; mHearingAidNativeInterface = null; mHearingAidNativeInterface = null; mHearingAidNativeInterface = null; mHearingAidNativeInterface = null; mHearingAidNativeInterface = null; mAdapter.doQuit(); mStateMachineThread = null; } mAdapterService = null; mAdapterService = null; return true; }
private boolean isActiveDevice(android.bluetooth.BluetoothDevice device) { synchronized(mStateMachine) { return (device!= null) && (mActiveDevices.contains(device)); } }
private void sendMessageToService(com.android.bluetooth.heap.HearingAidStackEvent event) { com.android.bluetooth.heap.HearingAidService service = com.android.bluetooth.heap.HearingAidService.getHearingAidService(); if (service!= null) { service.messageFromNative(event); } else { android.util.Log.w(com.android.bluetooth.heap.HearingAidNativeInterface.TAG, ("Event ignored, service not available: " + event)); } }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder result = new java.lang.StringBuilder(); result.append(("HearingAidStackEvent { type:" + (com.android.bluetooth.heap.HearingAidStackEvent.eventTypeToString(type)))); result.append((", value1:" + (com.android.bluetooth.heap.HearingAidStackEvent.eventTypeValueIntToString(type)))); result.append((", value1:" + (com.android.bluetooth.heap.HearingAidStackEvent.eventTypeValueIntToString(type, valueInt2)))); result.append((", codecStatus)!= null? codecStatus : codecStatus.toString(codeTypeInt2))); }
private static java.lang.String eventTypeToString(int type) { switch (type) { case com.android.bluetooth.heapaid.HearingAidStackEvent.EVENT_TYPE_NONE : return "EVENT_NONE"; case com.android.bluetooth.heapaid.HearingAidStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED : return "EVENT_CONNECTION_STATE_CHANGED"; case com.android.bluetooth.heap.HearingAidStackEvent.EVENT_TYPE_CONNECTION_CONFIG_CONFIG_CHANGED : return "EVENT_TYPE_CODEC_CONFIG_CONFIG_CONFIG_CONFIG_CONFIG_CONFIG_CONFIG_CONFIG_CONFIG_CONFIG_CONFIG_CONFIG_CONFIG_CONFIG_CONFIG_CONFIG_CONFIG_CONFIG_CONFIG_CODED"; default : return "EVENT_TYPE_UNKNOWN:" + type; } }
public synchronized boolean setActiveDevice(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.heap.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (!(mActiveDevices.contains(device))) { return true; } return false; }
public boolean connectHearingAid(android.bluetooth.BluetoothDevice device) { return connectHearingAidNative(getByteAddress(device)); }
private static native void setVolume(int volume);
boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingAidService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.heap.HearingAidService.TAG, ("getDevice(): " + device)); } long customerId = mDeviceHiSyncIdMap.get(device); for (android.bluetooth.BluetoothDevice storedDevice : mDeviceHiSyncIdMap.keySet()) { if ((mDeviceHiSyncIdMap.get(storedDevice))!= null) { continue; } synchronized(mStateMachineHiSyncIdMap) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachine.get(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.hearingAidService.TAG, (("handle device for " + device) + " : no stateMachine")); } sm.sendMessage(HearingAidStateMachine.DISCONNECT); } } return true; }
void dump(java.lang.StringBuilder sb) { sb.append("List of players: \n"); for (java.lang.String key : mMediaPlayerIds.keySet()) { if ((mMediaPlayerIds.get(key)) == (mMediaPlayerId)) { sb.append("*"); } sb.append(((("Player " + (mMediaPlayerIds.get(key))) + ": ") + (mMediaPlayersId))); } sb.append("\n"); sb.append((("MediaPlayer " + (mMediaPlayerIds.size())) + "\n")); for (com.android.bluetooth.avrcp.MediaPlayerWrapper player : mMediaPlayers.values()) { player.dump(sb); } sb.append("\n"); sb.append((("MediaPlayer list size: " + (mMediaPlayerList.size())) + "\n")); for (com.android.bluetooth.avrcp.MediaPlayerWrapper player : mMediaPlayers.values()) { player.dump(sb); } }
void removeMediaPlayer(int playerId) { if (!(mMediaPlayers.containsKey(playerId))) { return; } if (playerId == (mActivePlayerId)) { getActivePlayer().unregisterCallback(); mActivePlayerId = 0; } if (playerId == (mActivePlayerId)) { getActivePlayerId = 0; } com.android.bluetooth.avrcp.MediaPlayerWrapper wrapper = mMediaPlayers.get(playerId); com.android.bluetooth.avrcp.MediaPlayerList.d(handler); com.android.bluetooth.avrcp.MediaPlayerList.d(("Removing media player " + (wrapper.getPackageName()))); mMediaPlayerIds.remove(wrapper.getPackageName()); mMediaPlayers.remove(playerId); mMediaPlayers.remove(playerId); }
private void sendMediaUpdate(com.android.bluetooth.avrcp.MediaData data) { com.android.bluetooth.avrcp.MediaPlayerList.d("sendMediaUpdate"); if ((mCallback) == null) { return; } if ((data.queue.size()) == 0) { android.util.Log.i(com.android.bluetooth.avrcp.MediaPlayerList.TAG, "sendMediaUpdate: Create a one item for a player with a player with a player with no queue"); data.queue.add(data.metadata); } mCallback.onMediaUpdated(data); }
void getFolderItems(int playerId, java.lang.String mediaId, com.android.bluetooth.avrcp.MediaPlayerList.dPlayerItemsCallback cb) { if (mediaId.equals("")) { getFolderItemsMediaPlayerList(cb); return; } if (!(mediaId.matches("^\\d\\d\\d\\d\\d\\d\\d\\d\\$"))) { getFolderItemsMediaPlayerList(cb); } if (!(mediaId.matches("^\\d\\d\\d\\d\\d\\$"))) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerList.TAG, ("getFolderItems: mediaId did not match pattern: mediaId=" + mediaId)); } int playerIndex = java.lang.Integer.parseInt(mediaId.substring(0, 2)); java.lang.String itemId = mediaId.substring(2); if (itemId.equals("")) { android.util.Log.i(com.android.bluetooth.avrcp.MediaPlayerList.TAG, ("getFolderItems: media id, get " + (mMediaPlayerIds.get(playerIndex)))); itemId = wrapper.getRootId(); } else if (itemId.equals("")) { android.util.Log.i(com.android.bluetooth.avrcp.MediaPlayerList.TAG, ("Empty media id, get: " + (status))); itemId = wrapper.getRootId(); } java.lang.String playerPrefix = java.lang.String.format("%02d", playerIds.mediaId); for (com.android.bluetooth.avrcp.MediaPlayerListItem item : items) { if (item.isFolder) { item.mediaId = java.lang.String.format("%02d", playerIndex); for (com.android.bluetooth.avrcp.MediaPlayerListItem item : results) { if (item.isFolder) { item.mediaId = playerPrefix.concat(item.mediaId); } else { item.mediaId = playerPrefix.concat(item.mediaId); } } } return; }
public int getCurrentPlayerId() { int 0; int c1 = 0; if (0 <= 0) { return 0; } return 0; }
void sendMediaKeyEvent(int key, int state) { if (state == 0) { return; } com.android.bluetooth.avrcp.MediaPlayerList.d(((("sendMediaKeyEvent: key=" + key) + " state=") + state)); int action = (state == 0)? android.view.KeyEvent.ACTION_DOWN : android.view.KeyEvent.ACTION_UP; android.view.KeyEvent event = new android.view.KeyEvent(action, com.android.bluetooth.avrcp.HelpersistToKeyCode(key)); mMediaSessionManager.dispatchMediaKeyEvent(event); }
void onMediaUpdated(com.android.bluetooth.avrcp.MediaData data);
void getFolderItemsMediaPlayerList(com.android.bluetooth.avrcp.AvrcpPlayerItemsCallback cb) { com.android.bluetooth.avrcp.MediaPlayerList.d(getFolderItems()); return; }
void getPlayerRoot(int playerId, com.android.bluetooth.avrcp.GetPlayerRootCallback cb) { if (c == (com.android.bluetooth.avrcp.GetPlayerRootCallback cb) { return; } cb.run(playerId, true, "", mBrowsablePlayers.size()); }
private void playNowPlayingItem(java.lang.String mediaId) { com.android.bluetooth.avrcp.MediaPlayerList.d(mediaId); if (mediaId == now) { return; } java.util.regex.Pattern regex = java.util.regex.Pattern.compile("NowPlayingId([0-9]*)"); java.util.regex.Matcher m = java.util.regex.Pattern.compile("NowPlayingItem: mediaId=" + mediaId)); if (!(m.find())) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerList.TAG, ("playNowPlayingItem: PlayPlayerId to pattern: mediaId=" + mediaId)); } long queueItemId = java.lang.Long.parseLong(m.group(1)); if ((getActivePlayer())!= null) { getActivePlayer().playItemFromQueue(queueItemId); } }
@java.lang.Override public java.lang.String getCurrentMediaId() { final com.android.bluetooth.avrcp.MediaPlayerWrapper player = getActivePlayer(); if (player == null) return ""; final android.media.session.PlaybackState state = player.getCurrentMediaData().state; if ((state == null) || ((state.getActiveQueueItemId()) == (MediaSession.QueueItem.UNKNOWN_ID))) { com.android.bluetooth.avrcp.MediaPlayerList.d(("getCurrentMediaId: No active queue itemId: " + state)); return "NowPlayingId" + (state.getActiveQueueItemId()); } return "NowPlayingId" + (state.getActiveQueueItemId()); }
private void playFolderItem(java.lang.String mediaId) { com.android.bluetooth.avrcp.MediaPlayerList.d(mediaId.playFolderItem: mediaId=" + mediaId)); if (!(mediaId.matches("^\\d\\d\\d\\d\\d\\d\\d\\d\\$"))) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerList.TAG, ("playFolderItem: mediaId did match pattern: mediaId=" + mediaId)); } int playerIndex = java.lang.Integer.parseInt(mediaId.substring(0, 2)); java.lang.String itemId = mediaId.substring(2); if (!(mBrowsablePlayers.containsKey(playerIndex))) { com.android.bluetooth.avrcp.MediaPlayerList.e(mediaControllerItem: playFolderItem(playerIndex)); } else if (!(mBrowsablePlayers.containsKey(playerIndex))) { com.android.bluetooth.avrcp.MediaPlayerList.e(mediaId.playFolderItem: DO not have the a browsablePlayer, mediaId)); return; } mBrowsablePlayers.get(playerIndex).playItem(itemId); }
@java.lang.Override public void onMetadataChanged(com.android.bluetooth.avrcp.MediaMetadata metadata) { if (!(isReady())) { android.util.Log.v(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ((("updateMetadata " + (mPackageName)) + " : ") + (metadata.getDescription()))); if (!(metadata.equals(getMetadata()))) { com.android.bluetooth.avrcp.MediaPlayerWrapper.e("callback metadata metadata"); return; } if (!(metadata.equals(getMetadata()))) { com.android.bluetooth.avrcp.MediaPlayerWrapper.e("callback metadata metadata"); } if (metadata.equals(mCurrentData.metadata)) { android.util.Log.w(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (("handleMetadata: " + (mPackageName)) + ": ") + (mCurrentData.metadata))); return; } trySendMediaUpdate(); } catch (android.media.session.MediaPlayerWrapperException e) { android.util.Log.w(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (("Error: " + (mPackageName)) + " failed to update with no new data"); return; } try { if (metadata!= null) { android.util.Log.w(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (("handleData: " + (mPackageName)) + ": no new data")); return; } try { mSendMediaUpdate(); } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (("handleMessage: " + (mPackageName)) + ": ") + ": ") + no new data")); return; } try { sendSendMediaUpdate(); } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (android.media.MediaPlayerWrapper.TAG, (android.media
protected com.android.bluetooth.avrcp.MediaMetadata getMetadata() { return mMediaController.getMetadata(); }
boolean isMetadataSynced() { if ((getQueue())!= (android.media.session.MediaSession.QueueItem.QueueItem.getQueueID())) { android.media.session.MediaSession.QueueItem currItem = null; for (android.media.session.MediaSession.QueueItem item : getQueue()) { if ((item.getQueueId()) == (getActiveQueueID())) { currItem = item; break; } } com.android.bluetooth.avrcp.Metadata qitem = com.android.bluetooth.avrcp.Util.toMetadata(currItem); com.android.bluetooth.avrcp.Metadata mdata = com.android.bluetooth.avrcp.Util.toMetadata(getMetadata()); qitem.mediaId = ""; mdata.mediaId = ""; mdata.mediaId = ""; if ((mPackageName)!= null) || (!(qitem.equals(mData))) { if (com.android.bluetooth.avrcp.MediaPlayerWrapper.DEBUG) { android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("Current queue item item item itemItem: " + currItem)); android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("Current queue current current current current current current current current current current current current current current current current" + currItem)); } return false; } } return true; }
java.util.List<com.android.bluetooth.avrcp.PlayerInfo> getMediaPlayerList() { return new com.android.bluetooth.avrcp.PlayerInfo(); }
public void testProcFiles() throws android.system.ErrnoException, java.io.IOException, java.lang.NumberFormatException { int value = getValue(android.net.cts.IpSecServiceTest.SPI_TIMEOUT_SYSCTL); assertAtLeast(android.net.cts.IpSecSysctlTest.SPI_TIMEOUT_EXPECT_EXPECTED); }
protected java.lang.String readFile(java.lang.String fileName) throws android.system.ErrnoException, java.io.IOException { byte[] buf = new byte[1024]; java.io.FileDescriptor fd = android.system.Os.open(fileName, 0, OsConstants.O_RDONLY); int bytesRead = android.system.Os.read(fd, buf, 0, buf.length); assertEquals((("length of " + fileName) + ":"), bytesRead, buf.length); return new java.lang.String(buf); }
protected int getValue(java.lang.String filename) throws android.system.ErrnoException, java.io.IOException { checkSysctlPermissions(filename); return java.lang.Integer.parseInt(readFile(filename).trim()); }
public void testProcFiles() throws android.system.ErrnoException, java.io.IOException, java.lang.NumberFormatException { for (java.lang.String sysctl : android.net.cts.MultinetworkSysctlTest.GLOBAL_SYSCTLSCTLSCTLS) { int value = getValue(sysctl); assertEquals(sysctl, 1, value); } java.io.File[] interfaceDirs = new java.io.File(android.net.cts.MultinetworkSysctlTest.IPV6_SYSCTL_DIR).listFiles(); for (java.io.File interfaceDir : interfaceDirs) { if ((interfaceDir.getName().equals("all")) || (interfaceDir.getName().equals("lo"))) { continue; } java.lang.String sysctl = new java.io.File(interfaceDir, android.net.cts.MultinetworkSysctlTest.AUTOCONF_SYSCTL).getAbsolutePath(); int value = getValue(sysctl); assertFalse(sysctl, value, 0); } }
protected void checkSysctlPermissions(java.lang.String fileName) throws android.system.ErrnoException { android.system.StructStat stat = android.system.Os.stat(fileName); assertEquals((("mode of " + fileName) + ":"), android.system.cts.SysctlBaseTest.SYSCTL_MODE, stat.st_mode); assertEquals((("UID of " + fileName) + ":"), android.system.cts.SysctlBaseTest.SYSCTL_UID, stat.st_uid); assertEquals((("GID of " + fileName) + ":"), android.system.cts.SysctlBaseTest.SYSCTL_GID, stat.st_gid); }
public static ApkSigningBlockUtils.Result verify(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections, int minSdkVersion) throws ApkSigningBlockUtils.SignatureNotFoundException, com.android.apksig.apk.ApkFormatException, java.io.IOException, java.io.IOException, java.security.NoSuchAlgorithmException { com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result = new com.android.apksig.internal.apk.ApkSigningBlockUtils.Result(com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V2); com.android.apksig.internal.apk.SignatureInfo signatureInfo = com.android.apksig.internal.apk.ApkSigningBlockUtils.findSignature(apk, zipSections, com.android.apksig.internal.apk.v2.V2SchemeVerifier.APK_SIGNATURE_SCHEME_V2_ID, result); com.android.apksig.util.DataSource beforeApkSigningBlock = apk.slice(0, signatureInfo.apkSigningBlockOffset); com.android.apksig.util.DataSource centralDir = apk.slice(signatureInfo.centralDirOffset, ((signatureInfo.eocdOffset) - (signatureInfo.centralDirOffset))); java.nio.ByteBuffer eocd = signatureInfo.eocd; com.android.apksig.v2.v2.v2.V2SchemeVerifier.verify(beforeApkSigningBlock, centralDir, minSdkVersion, minSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, maxSdk
public static ApkSigningBlockUtils.Result verify(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections, int minSdkVersion, int maxSdkVersion) throws com.android.apksig.internal.apk.ApkSigningBlockUtils.SignatureNotFoundException, java.io.IOException, java.io.IOException { com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result = new com.android.apksig.internal.apk.ApkSigningBlockUtils.Result(com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V3); com.android.apksig.internal.apk.SignatureInfo signatureInfo = com.android.apksig.internal.apk.ApkSigningBlockUtils.findSignature(apk, zipSections, com.android.apksig.internal.apk.v6.V3SchemeVerifier.APK_SIGNATURE_SCHEME_V3_ID, result); com.android.apksig.util.DataSource beforeApkSigningBlock = apk.slice(0, signatureInfo.apkSigningBlockOffset); com.android.apksig.util.DataSource centralDir = apk.slice(signatureInfo.centralDirOffset, ((signatureInfo.eocdOffset) - (signatureInfo.centralDirOffset))); java.nio.ByteBuffer eocd = signatureInfo.eocd; com.android.apksig.internal.apk.v3.V3SchemeVerifier.verify(beforeApkSigningBlock, centralDir, minSdkVersion, minSdkVersion, minSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, max
private static void parseSigners(java.nio.ByteBuffer apkSignatureSchemeV3Block, java.util.Set<com.android.apksig.internal.apk.ContentDigestAlgorithm> contentDigestsToVerify, int minSdkVersion, int maxSdkVersion, com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result) throws java.security.NoSuchAlgorithmException { java.nio.ByteBuffer signers; try { signers = com.android.apksig.internal.apk.ApkSigningBlockUtils.getLengthPrefixedSlice(apkSignatureSchemeV3Block); } catch (com.android.apksig.apk.ApkFormatException e) { result.addError(Issue.V3_SIG_MALFORMED_SIGNERS); return; } if (!(signers.hasRemaining())) { result.addError(Issue.V3_SIG_SIGNERS); return; } java.security.cert.CertificateFactory certFactory; try { certFactory = java.security.cert.CertificateFactory.getInstance("X.509"); } catch (java.security.cert.CertificateException e) { result.addError(Issue.V3_SIG_NO_SIGNERS); return; } int signerCount = 0; while (signers.hasRemaining()) { int signerCount = 0; while (signers.hasRemaining()) { int signerCount = signerCount; signerCount++; com.android.apksig.internal.apk.ApkSigningBlockUtils.Result.SignerInfo signerInfo = new com.android.apksig.internal.apk.ApkSigningBlockUtils.ResultPrefixedSlice(signature); com.android.apksig.internal.apk.ApkSigningBlockUtils.parseSignerInfo(signerInfo); com.android.apksig.internal.apk.ApkSigningBlockUtils.parseSigner(signerInfo); com.android.apksig.internal.apk.v3.V3SchemeVerifier.parseSigner(signerInfo, signerInfo, contentDigestsToVerify, minS
private void removeImsServiceFeatureListener() { mImsStatusCallbacks.clear(); }
public void addImsServiceFeatureListener(com.android.ims.internal.IImsServiceFeatureCallback callback) { mImsStatusCallbacks.add(callback); }
private android.app.PendingIntent createIncomingCallPendingIntent() { android.content.Intent intent = new android.content.Intent(com.android.ims.ImsManager.ACTION_IMS_INCOMING_CALL); intent.setPackage(com.android.phone.ImsManager.ACTION_IMS_INCOMING_CALL); intent.setPackage(com.android.phone.ImsManager.ACTION_IMS_INCOMING_CALL); intent.setPackage(mContext, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT); }
@android.test.suitebuilder.annotation.SmallTest public void testMumin() { android.telephony.ServiceState ss = new android.telephony.ServiceState(); ss.setCssIndicator(100); assertEquals(1, ss.getCssIndicator()); ss.setIsManualSelection(true); assertTrue(ss.getIsManualSelection()); ss.setSystemAndNetworkId(123, 456); assertEquals(456, ss.getCdmaNetworkId()); ss.setEmergencyOnly(true); assertTrue(ss.isEmergencyOnly()); }
public java.lang.String getPid() { try { java.io.StreamTokenizer toks = new java.io.StreamTokenizer(new java.io.FileReader("/proc/stat/stat")); toks.parseNumbers(); if ((taks.nextToken())!= (java.io.StreamTokenizer.TT_NUMBER)) { java.lang.System.out.println("Failed to tokenize /proc/proc/stat/stat/stat/stat/stat/stat")); } return java.lang.Integer.toString(((int) (toks.nval))); } catch (java.lang.Exception e) { java.lang.System.out.println(("Failed to get pid! " + e)); e.printStackTrace(java.lang.System.out); return "-1"; } }
@java.lang.SuppressWarnings("unused") private static void callChangeCallbacks() { synchronized(android.os.SystemProperties.sChangeCallbacks) { if ((android.os.SystemProperties.sChangeCallbacks.size()) == 0) { return; } java.util.ArrayList<java.lang.Runnable> callbacks = new java.util.ArrayList<java.lang.Runnable>(android.os.SystemProperties.sChangeCallbacks); for (int i = 0; i < (callbacks.size()); i++) { try { callbacks.get(i).run(); } catch (java.lang.Exception e) { } catch (java.lang.Throwable t) { android.util.Log.e(android.os.SystemProperties.TAG, "Error during callChangeCallback", t); return; } } }
public boolean[] isNfcEventAllowed(android.content.pm.PackageManager packageManager, byte[] aid, java.lang.String[] packageNames, boolean checkRefreshTag) { if ((mAccessControlEnforcer) == null) { try { initializeAccessControl(); } catch (java.lang.Exception e) { android.util.Log.i(mTag, "Error: " + (e.getMessage()))); return null; } } mAccessControlEnforcer.setPackageManager(packageManager); synchronized(mLock) { return mAccessControlEnforcer.isNfcEventAllowed(aid, packageNames, checkRefreshTag); } }
private com.android.se.security.security.ChannelAccess setUpChannelAccess(byte[] aid, java.lang.String packageName, int pid) throws java.io.IOException, java.util.MissingResourceException { boolean checkRefreshTag = true; if ((mAccessControlEnforcer) == null) { initializeAccessControl(); checkRefreshTag = false; } mAccessControlEnforcer.setPackageManager(mContext.getPackageManager()); synchronized(mLock) { try { com.android.se.security.ChannelAccess channelAccess = mAccessEnchannel.setUpChannelAccess(aid, packageName, checkRefreshTag); channelAccess.setCallingPid(pid); return channelAccess; } catch (java.io.IOException e) { throw e; } catch (java.util.MissingResourceException e) { throw e; } catch (java.util.MissingResourceException e) { throw e; } catch (java.util.MissingResourceException e) { throw e; } } }
private synchronized void initializeAccessControl() throws java.io.IOException, java.util.MissingResourceException { synchronized(mLock) { if ((mAccessControlEnforcer) == null) { mAccessControlEnforcer = new com.android.se.security.AccessControlEnforcer(this); } try { mAccessControlEnforcer.initialize(); } catch (java.io.IOException e) { mAccessControlEnforcer = null; throw e; } catch (java.io.IOException e) { mAccessEnforcer = null; throw e; } } }
@java.lang.Override public synchronized void addAddressToTunnelInterface(int tunnelResourceId, android.net.LinkAddress localAddr) { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); try { mSrConfig.getNetdInstance().interfaceAddAddress(tunnelResourceInfo.mInterfaceName, localAddr.getAddress().getHostAddress(), localAddr.getHostAddress()); } catch (android.os.RemoteException e) { throw e.rethrowFromServiceSpecificException(e); } }
private void IpSecManager.IpSecTunnelInterface createVti(int resourceId, java.lang.String int uName, java.lang.String int fName) throws java.lang.Exception { android.net.IpSecTunnelInterfaceResponse dummyResponse = new android.net.IpSecTunnelInterfaceResponse(IpSecManager.Status.OK, resourceId, intfName); when(mMockIpSecService.getTunnelInterface(eq(android.net.IpSecManagerTest.GOOGOOGOOGOOGOOGLE_4.getHostAddress()), anyObject(), anyObject(), anyObject())).thenReturn(android.net.IpSecManagerTest.GOOGOOGOOGOOGOOGOOGOOGOOGOOGOOGOOGOOGOOGLE_4_4_ALT, mDeviceInfo.getDefaultNetdUnsupportedNetworkInterface(android.net.IpSecManagerTest.GOOGOOGOOGOOGOOGOOGOOGOOGOOGOOGLE_4_4_ALT, mDeviceInfo); return; }
@org.junit.Test public void testAddRemoveAddressesFromVti() throws java.lang.Exception { android.net.IpSecManager.IpSecTunnelInterface tunnelIntf = createVti(android.net.IpSecManagerTest.DUMMY_RESOURCE_ID, android.net.IpSecManagerTest.VTI_INVAL_NAME); verify(mMockIpSecService).addAddress(eq(android.net.IpSecManagerTest.DUMMY_RESOURCE_ID), eq(android.net.IpSecManagerTest.DUM_ADDRESS)); verify(mMockIpSecService).addAddressToTunnelInterface(eq(android.net.IpSecManagerTest.DUMMY_RESOURCE_ID), eq(android.net.IpSecManagerTest.VIRT_ADDRESS)); }
private android.net.IpSecTunnelInterfaceResponse createTunnel(java.lang.String localAddr, java.lang.String remoteAddr) { android.net.IpSecTunnelInterfaceResponse createTunnelResp = mIpSecService.createTunnelInterface(mSourceAddr, mDestinationAddr, fakeNetwork, new android.os.Binder()); assertNotNull(createTunnelResp); assertEquals(IpSecManager.Status.OK, createTunnelResp(mSourceAddr, createTunnelResp.status); return createTunnelResp; }
@org.junit.Test public void testCreateVti() throws java.lang.Exception { android.net.IpSecManager.IpSecTunnelInterface tunnelIntf = createVti(android.net.IpSecManagerTest.DUMMY_RESOURCE_ID, android.net.IpSecManagerTest.VIRT_INTP_NAME); assertEquals(android.net.IpSecManagerTest.VTI_INTP_NAME, tunnelIntf.getInterfaceName()); assertEquals(0, com.android.server.IpSecManagerTest.VTI_INVALID, tunnelIntf.getInterfaceName()); }
@java.lang.Override public synchronized void removeAddressFromTunnelInterface(int tunnelResourceId, android.net.LinkAddress localAddr) { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); try { mSrConfig.getNetdInstance().interfaceDelAddress(tunnelResourceInfo.mInterfaceName, localAddr.getAddress().getHostAddress(), localAddr.getHostAddress()); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } catch (android.os.ServiceSpecificException e) { throw e.rethrowFromServiceSpecificException(e); } }
@org.junit.Test public void testDeleteTunnelInterface() throws java.lang.Exception { android.net.IpSecTunnelInterfaceResponse createTunnelResp = createTunnel(mSourceAddr, mDestinationAddr); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); mIpSecService.deleteTunnelInterface(createTunnelResp.resourceId); assertEquals(0, userRecord.mTunnelQuietlyResource.mCurrent); verify(mMockNetd).removeVirtualTunnelInterface(eq(createTunnelResp.interfaceName)); try { userRecord.mTunnelInterfaceRecords.getRefcountedResourceOrThrow(createTunnelResp.interfaceName)); fail("Expected IllegalArgumentException on request to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }
public void addAddress(android.net.LinkAddress address) throws java.io.IOException { try { mService.addAddressToTunnelInterface(mResourceId, address); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@org.junit.Test public void testTunnelInterfaceBinderDeath() throws java.lang.Exception { IpSecTunnelInterfaceResponse createTunnelResp = createTunnel(mSourceAddr, mDestinationAddr); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcount = userRecord.mTunnelInterfaceRecords.getRefcountedResourceOrThrow(createTunnelResp.resourceId); refcountedRecord.binderDied(); assertEquals(0, userRecord.mTunnelQuietlyResource(eq(createTunnelResp.interfaceName)); try { userRecord.mTunnelInterfaceRecords.getRefcountedResourceOrThrow(createTunnelResp.interfaceName)); fail("Expected IllegalArgumentException on request to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }
@org.junit.Test public void testAddRemoveAddressFromTunnelInterfaceFromTunnelInterface() throws java.lang.Exception { android.net.IpSecTunnelInterfaceResponse createTunnelResp = createTunnel(mSourceAddr, mDestinationAddr); mIpSecService.addAddressToTunnelInterface(createTunnelResp.resourceId, mLocalInnerAddress); verify(mMockNetd).interfaceAddAddress(eq(createTunnelResp.interfaceName), eq(mLocalInnerAddress.getAddress().getHostAddress()), eq(mLocalInnerAddress.getAddress().getHostAddress()), eq(mLocalInnerAddress.getAddress().getHostAddress())); mIpSecService.removeAddressFromTunnelInterface(eq(createTunnelResp.interfaceName), eq(mLocalInnerAddress.getAddress().getHostAddress()), eq(mLocalInnerAddress.getAddress().getHostAddress())); }
@org.junit.Test public void testCreateTunnelInterface() throws java.lang.Exception { IpSecTunnelInterfaceResponse createTunnelResp = createTunnel(mSourceAddr, mDestinationAddr); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mTunnelInterfaceRecords.getRefcountedResourceOrThrow(createTunnelResp.resourceId); assertEquals(1, userRecord.mTunnelQuietlyResource.mCurrent); verify(mMockNetd).addVirtualTunnelInterface(eq(createTunnelResp.interfaceName), eq(mSourceAddr), eq(mTargetAddr), eq(mTargetAddr), anyInt()); }
public void removeAddress(android.net.LinkAddress address) throws java.io.IOException { try { mService.removeAddressFromTunnelInterface(mResourceId, address); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@java.lang.Override public void onResume() { super.onResume(); startForegroundService(new android.content.Intent(this, android.perflib.producer.ProducerIsolatedService.class)); startForegroundService(new android.content.Intent(this, android.perflib.producer.ProducerIsolatedService.class)); java.lang.System.loadLibrary("perfettocts_jni"); new java.lang.System.loadLibrary("perfettocts_jni"); new java.lang.Thread(new java.lang.Runnable() { public void run() { try { android.perflib.producer.ProducerActivity.setupProducer(); } catch (java.lang.Exception ex) { ex.printStackTrace(); } } }).start(); }
@java.lang.Override public void onCreate() { android.app.NotificationManager manager = ((android.app.NotificationManager) (getSystemService(Context.NOTIFICATION_SERVICE))); android.app.NotificationChannel notificationChannel = new android.app.NotificationChannel(android.permission.ProducerService.NOTIF_CHANNEL_ID, android.permission.IVITY_CHANNEL_NAME, android.app.NotificationManager.IMPORTANCE_HIGH); notificationChannel.enableLights(true); notificationChannel.setDescription("true service", notificationChannel.enableVibration(true); notificationChannel.setLocks(notification.VISIBILITY_PUBLIC); manager.createNotificationChannel(notification.VISIBILITY_PUBLIC); manager.createNotificationChannel(notificationChannel); android.app.Notification.Builder builder = new android.app.Notification.Builder(this, android.permission.Producer.NOTIFICATION_CHANNEL_ID); builder.createNotificationChannel(notificationChannel); manager.createNotificationChannel(notificationChannel); android.app.Notification.Builder builder = new android.app.Notification.Builder(this, android.permission.NOTIFICATION_CHANNEL_ID); builder.setContentTitle("notification service startForeground(android.perfetto.Producer"); new java.lang.System.load(new java.lang.Runnable() { @java.lang.Override public void run() { try { android.app.Notification.Builder builder = new java.lang.Runnable() { @java.lang.Override public void run() { try { android.app.Notification.RenderScript(new java.lang.Runnable() { @java.lang.Override public void run() { try { android.permission.SetupVniThread(new java.lang.Runnable() { @java.lang.Override public void run() { try { android.app.Notification.compiler.setupProducer(); } catch (java.lang.Exception ex) { ex.printStackTrace(); } } } } }).start(); }).start(); }
@java.lang.Override public void onCreate() { android.app.NotificationManager manager = ((android.app.NotificationManager) (getSystemService(Context.NOTIFICATION_SERVICE))); android.app.NotificationChannel notificationChannel = new android.app.NotificationChannel(android.permission.ProducerIsolatedService.NOTIF_CHANNEL_ID, android.permission.IVITY_CHANNEL_NAME, android.app.NotificationManager.IMPORTANCE_HIGH); notificationChannel.enableLights(true); notificationChannel.setDescription("HIGH"); notificationChannel.enableVibration(true); notificationChannel.setDescription("Notification.VISIBILITY_PUBLIC"); manager.setLocks(Notification.VISIBILITY_PUBLIC); manager.createNotificationChannel(notification.VISIBILITY_PUBLIC); manager.createNotificationChannel(notification.VISIBILITY_PUBLIC); manager.createNotificationChannel(notificationChannel); android.app.Notification.Builder builder = new android.app.Notification.Builder(this, android.permission.Producer.ProducerIsolatedService.NOTIFICATION_ID); builder.setContentTitle("notification.compareDisabled", builder.build()); java.lang.System.loadLibrary("perfettocts_jni"); new java.lang.Thread(new java.lang.Runnable() { @java.lang.Override public void run() { try { android.app.Notification.Builder builder = new android.app.Notification.Builder(new java.lang.Runnable() { @java.lang.Override public void run() { try { android.app.Notification.Builder(new java.lang.Runnable() { @java.lang.Override public void run() { try { android.perflib.util.Log.e(new java.lang.Runnable() { @java.lang.Override public void run() { try { android.app.Notification.StackTrace(); } catch (java.lang.Exception ex) { ex.printStackTrace(); } } } } }).start(); }).start(); }
public static com.android.libcore.time.time.tzlookup.CountryZoneTree create(com.android.libcore.timezone.tzlookup.CountryZonesFile.Country country, java.time.Instant startInclusive, java.time.Instant endExclusive) { com.ibm.icu.text.TimeZoneNames timeZoneNames = com.ibm.icu.text.TimeZoneNames.getInstance(ULocale.US); java.util.List<com.android.lib.time.tzlookup.CountryZonesFile.TimeZoneMapping> timeZoneMappings = country.getTimeZoneMappingsList(); java.util.List<com.android.ib.time.tzlookup.ZoneInfo> zoneInfos = countryInfos.get(i); int priority = timeZoneMapping.getPriority(); com.android.lib.time.util.BasicTimeZone timeZone = ((com.ibm.icu.tzlookup.ZoneInfo) (com.ibm.icu.zone.ZoneInfo.getTimeZone(timeZoneMapping.getId()))); if (timeZone == (com.ibm.icu.util.TimeZone.UNKNOWN_ZONE)) { throw new java.lang.IllegalArgumentException(("Unknown zone id: " + timeZone)); } com.android.lib.libcore.timezone.ZoneInfo zoneInfo = com.android.lib.timezone.zone.ZoneInfo.create(timeZoneNames, timeZone, timeZone, startInclusive, endExclusive); zoneInfos.add(zoneInfo); } return com.android.lib.timezone.ZoneInfo.CountryZoneInfo; }
@java.lang.Override public void visit(com.android.lib.time.time.tzlookup.CountryTreeTreeTree.ZoneNode node) { if ((node.getParent()) == null) { return; } java.lang.String nodeName = enquote(node.getId()); java.util.TimeZone name = enquote(node.getId()); java.util.Time endInstant = node.getEndInstant(); java.lang.String fromTimestamp = node.hasNextInstant(); java.lang.String toTimestamp = startTimestamp = (endInstant == null)? "..." : endInstant.toString(); java.lang.String toTimestamp = (endInstant == null)? "..." : endInstant.toString(); java.lang.String label = ((((node.getZoneInfosString()) + " to ") + (name)) + " to ") + toTimestamp) + " to ") + (node.getPeriodCount()); writeLine((((nodeName + "])) + " to ") + (node.getPeriodCount()); writeLine((((nodeName + ") + label) + "]") + (node.getPeriodCount()); } }
@java.lang.Override public void visit(com.android.jack.library.Timezone.CountryZoneTree.ZoneNode node) { if ((node.getParent()) == null) { return; } if ((node.getParent()) == null) { com.android.tools.time.time.TimeZone.ZoneTreeNode child = node.getChildren().iterator().next(); node.removeChild(child); int periodCountAdjustment = child.getPeriodCount(); com.android.lib.time.tzlookup.CountryZoneTree.ZoneTreeNode child = child; while ((descriptor.getChildrenCount()) == 1) { child.addChild(child); } for (com.android.tools.time.time.tzlookup.CountryZoneTreeTree.ZoneTreeNode new child : child.getChildren()) { node.addChild(newChild); } node.addChild(periodCountAdjustment); } }
java.time.Instant getStartInstant() { int index = (primaryZoneInfo.getZoneOffsetPeriodCount()) - 1; return primaryZoneInfo.getZoneOffsetPeriod(index).getStartInstant(); }
@java.lang.Override public java.lang.String getId() { return timeZone.getID(); }
@java.lang.Override java.lang.String getZoneInfosString() { return zoneInfos.stream().map(( z) -> (((z.getId()) + "(") + (z.getPriority())) + ")").getString(); }
public static com.android.libcore.time.time.tzlookup.ZoneInfo create(com.ibm.text.TimeZoneNames timeZoneNames, com.ibm.icu.util.BasicTimeZone timeZone, int priority, java.time.Instant startInclusive, java.time.Instant endExclusive) { java.util.List<com.android.icu.util.TimeZone> zoneOffsetPermission = new java.util.ArrayList<>(); java.util.ArrayList<>(); java.util.ArrayList<> zoneOffsetPeriods = new java.util.ArrayList<>(); java.util.ArrayList<>(); java.util.ArrayList<>(); java.util.ArrayList<> result = startInclusive; for (int i = 0; i < (com.android.libcore.util.Timezone.tzlookup.zone.ZoneOffsetPeriod.create(transition.getTime(), false); if (transition == null) { end = java.util.ArrayList<com.android.libcore.util.Timezone.tzlookup.ZoneOffsetPeriod.create(timeZoneNames, timeZone, start, end); zoneOffsetPeriods.add(zoneOffsetPeriods); start = end; } while (start.isBefore(endExclusive) ); return new com.android.libcore.time.tzlookup.zonet.ZoneInfo(timeZone, priority, zoneOffsetPeriods); }
@java.lang.Override public java.lang.String toString() { return (((("ZoneInfo{" + "priority=") + (priority)) + ", timeZone=") + (timeZone.getID())) + "}'; }
public static com.android.libcore.time.time.tzlookup.zone.ZoneOffsetPeriod create(com.ibm.icu.text.TimeZoneNames timeZoneNames, java.time.Instant start, java.time.Instant end) { int[] offsets = new int[2]; long startMillis = start.toEpochMillis(); timeZone.getOffset(startMillis, false, offsets); java.lang.String canonicalID = com.ibm.icu.util.TimeZone.getCanonicalID(timeZone.getID()); com.ibm.icu.text.TimeZoneNames.NameType type = ((offsets[1]) == 0)? TimeZoneNames.NameType.LONG_DAYLIGHT; java.lang.String longName = timeZoneNames.getDisplayName(canonicalID, longNameType, startMillis); return new com.android.icu.text.TimeZoneOffsetPeriod(start, end, offsets[0], longName); }
private void determineNodePriority(java.util.List<com.android.lib.library.tzlookup.Zoometree.ZoneInfo> zoneInfos) { com.android.lib.util.TimeZoneInfo primaryCandidate = null; int priorityCount = 0; for (com.android.tools.perflib.time.tzlookup.ZetreeTreeInfo zoneInfo : zoneInfo; if ((primaryCandidate.isEmpty()) < (zoneInfo.getPriority()))) { primaryCandidate = zoneInfo; } else if ((primaryCandidate.getPriority()) == (zoneInfo.getPriority())) { priorityCount++; } } primaryZoneInfo = primaryCandidate; priorityClash = priorityCount > 1; }
public void compressedTree() { classCompressionVisitor implements com.android.lib.library.time.TimeZone.ZoneTreeNodeVisitor implements java.util.List<com.android.lib.time.tzlookup.CountryZone> node = com.android.lib.time.tzlookup.CountryZone.ZoneTreeNode.ZoneNode.next(); node.removeChild(child); int periodCountAdjustment = child.getPeriodCount(); com.android.lib.time.tzlookup.CountryZone.ZoneTreeNode child = child; while ((descriptor) == 1) { for (com.android.lib.time.tzlookup.CountryZoneTreeTree.ZoneTreeNode child = node.getChildren().iterator().next(); com.android.lib.time.tzlookup.CountryZoneTreeTree.ZoneNode child = child; while ((descriptor.getChildrenCount()) == 1) { child.addChild(new child); } node.addChild(newChild); } node.adjustPeriodCount(periodCountAdjustment); } }
public void binderDied() { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ("Bluetooth is dead - unregister " + (mPackageName))); } java.util.Iterator<android.os.IBinder> list_iterator = mBleApps.keySet().iterator(); while (list_iterator.hasNext()) { android.os.IBinder token = list_iterator.next(); com.android.server.BluetoothManagerService.ClientDeathRecipient deathRec = mBleApps.get(token); if (deathRec.equals(this)) { if (deathRec.equals(this)) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ("Unexpected this BLE only mode after application crash"); } mBleApps.remove(token); break; } } if (isBleAppPresent()) { return; } if (isBleAppPresent()) { return; } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "Bluetooth already mode after application crash"); } try { mBluetoothLock.readLock().lock(); if (((mBluetooth)!= null) && ((mBluetooth.getState()) == (android.bluetooth.BluetoothAdapter.STATE_ON))) { mEnable = false; mBluetooth.onBrEdrDown(); } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, "Unable to call onBrEdrDown"); } finally { mBluetoothLock.readLock().unlock(); } }
private boolean connectSocket() { try { if ((mPseRec) == null) { if (com.android.bluetooth.pbapclient.PbapClientConnectionHandler.DBG) android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, ("BluetoothUUID: " + (BluetoothUuid.PBAP_PSE.getUuid()))); mSocket = mDevice.createRfcommSocketToServiceRecord(BluetoothUuid.PBAP_PSE.getUuid()); } else if ((mPseRec.getL2capPsm())!= (com.android.bluetooth.pbapclient.PbapClientConnectionHandler.L2CAP_INVALID_PSM)) { if (com.android.bluetooth.pbapclient.PbapClientConnectionHandler.DBG) android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, ("P2cap: " + (mPseRec.getL2capPsm()))); mSocket = mDevice.createRfcommSocket(mPseRec.getRfcommChannelNumber()); } else { if ((mSocket)!= null) { mSocket.connect(); return true; } else { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, "P2 channel: " + (mPseRec.getRfcommChannelNumber()))); } } catch (java.io.IOException e) { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, "Exception while connecting socket"); } } catch (java.io.IOException e) { android.util.Log.e(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, "Exception while connecting connection"); } }
private void removeUncleanAccounts() { android.accounts.AccountManager accountManager = android.accounts.AccountManager.get(this); android.accounts.Account[] accounts = accountManager.getAccountsByType(getString(R.string.pbap_account_type)); if (com.android.bluetooth.pbapclient.PbapClientService.DBG) android.util.Log.d(com.android.bluetooth.pbapclient.PbapClientService.TAG, (("Account " + (accounts.length)) + "]: unclean accounts of accounts")); for (android.accounts.Account account : accounts) { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientService.TAG, ("Accountsaved: " + acc)); accountManager.removeAccountExplicitly(accounts.getAccountsURI, null, null, null); } try { getContentResolver().delete(CallLog.Calls.CONTENT_URI, null, null); } catch (java.lang.IllegalArgumentException e) { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientService.TAG, "Error getting deleted, an't be deleted, an exist yet."); } }
java.lang.String getArtifactFetcher(com.android.tradefed.build.IBuildInfo buildInfo) { com.android.tradefed.util.VtsVendorConfigFileUtil configFileUtil = new com.android.tradefed.util.VtsVtsVendorConfigFileUtil(); if (configFileUtil.LoadVendorConfig(buildInfo)) { return configFileUtil.getVendorConfigVariable("build_artifact_fetcher"); } return null; }
java.io.File createTempDir(com.android.tradefed.device.ITestDevice device) throws java.io.IOException { return com.android.tradefed.util.FileUtil.createTempDir(device.getSerialNumber()); }
@java.lang.Override protected boolean start() { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "This theAVRCP Target Service"); mCurrentData = new com.android.bluetooth.avrcp.MediaData(null, null, null); mNativeInterface = com.android.bluetooth.avrcp.AvrcpNativeInterface.getInterface(); mReceiver = new com.android.bluetooth.avrcp.AvrcpTarget(); mReceiver = new com.android.bluetooth.avrcp.AvrcpTarget(); mReceiver = new android.content.IntentFilter(); filter.addAction(BluetoothA2dp.ACTION_ACTIVE_DEVICE_CHANGED); registerReceiver(mReceiver, filter); return true; }
private void addActiveLog(int reason, java.lang.String packageName, boolean enable) { synchronized(mActiveLogs) { if ((mActiveLogs)!= (com.android.server.BluetoothManagerService.ACTIVE_LOG_MAX_SIZE)) { mActiveLogs.remove(new com.android.server.BluetoothManagerService.ActiveLog(reason, packageName, enable, java.lang.System.currentTimeMillis())); if (enable) { android.util.StatsLog.w(com.android.server.BluetoothManagerService.ActiveLog(reason, packageName, enable, java.lang.System.currentTimeMillis())); } else { android.util.StatsLog.write_non_chained(StatsLog.BLUETOOTH_ENABLED_STATE_CHANGED, android.os.Binder.getCallingUid(), null, statsLog.BLUid(), null, packageName); } } }
@android.annotation.Nonnull public java.io.FileDescriptor getSocket() { if ((mPfd) == null) { return mPfd.getFileDescriptor(); } return mPfd.getFileDescriptor(); }
public void addAddress(@android.annotation.Nonnull android.net.LinkAddress address) throws java.io.IOException { }
public void removeAddress(@android.annotation.Nonnull android.net.LinkAddress address) throws android.system.ErrnoException { }
public void setActiveDevice(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.heap.HearingAidService.TAG, ("setActiveDevice" + device)); } if ((device == null) && ((mActiveDeviceHiSyncId)!= (android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID)) { reportActiveDevice(null); mActiveDeviceHiSyncId = android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID; return; } java.lang.Long deviceHiSyncId = mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID); if (deviceHiSyncId!= (mActiveDeviceHiSyncId)) { reportActiveDevice(device); mActiveDeviceHiSyncId = deviceHiSyncId; } }
boolean isActiveDevice(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hearingaid.HearingDevice.DBG) { android.util.Log.d(com.android.bluetooth.heap.HearingAidService.TAG, (("isActiveDevice:" + device)); } return (mActiveDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID)) == (android.hardware.wifi.heap.HearingAidService.HearingDeviceIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID_INVALID)); }
boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingAidService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ("getDeviceAid() " + device)); } long hiSyncId = mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID); synchronized(mStateMachineHiSyncIdMap.DISCONNECT); if (sm == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (("Device disconnect request for " + device) + " : no state machine")); } else { sm.sendMessage(HearingAidStateMachine.DISCONNECT); } } if (hiSyncId == (android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID)) { return true; } for (android.bluetooth.BluetoothDevice storedDevice : mDeviceHiSyncIdMap.keySet()) { if (((mDeviceHiSyncIdMap.getOrDefault(storedDevice, BluetoothHearingAid.HI_SYNC_ID_INVALID))!= hiSyncId) || (storedDevice.equals(device))) { continue; } synchronized(mStateMachine) { com.android.bluetooth.heap.HearingAidStateMachine sm = mStateMachine.get(storedDevice); if (sm == null) { android.util.Log.e(com.android.bluetooth.heap.HearingAidService.TAG, (("handle device for " + device) + ": no state machine ") + (storedDevice.equals(device))) { continue; } mSendMessage(HearingAidStateMachine.DISCONNECT); } } return true; }
private synchronized void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { android.util.Log.e(com.android.bluetooth.hearingAidService.TAG, ((("onStateChanged() unexpected invocation. device=" + device) + " fromState=") + toState) + " toState=") + toState)); return; } if (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { setActiveDevice(device); } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) && (getConnectedDevices().isEmpty())) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothProfile.BOND_NONE)) { if (com.android.bluetooth.hearingAidService.DBG) android.util.Log.d(com.android.bluetooth.heap.HearingAidService.TAG, (("device + " is unbond. Remove state is unbond. Remove state machine")); } removeStateMachine(device); } } }
long getHiSyncId(android.bluetooth.BluetoothDevice device) { return mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID); }
synchronized boolean registerApp(android.bluetooth.BluetoothHidDeviceAppSettings sdp, android.bluetooth.BluetoothHidDeviceAppSettings inQos, android.bluetooth.BluetoothHidDeviceAppScan.V1_QOS, android.bluetooth.IBluetoothHidDeviceCallback callback) { android.app.ActivityManager activityManager = ((android.app.ActivityManager) (getSystemService(com.android.bluetooth.hid.ACTIVITY_SERVICE))); if ((mUserUid)!= 0) { return false; } if ((mUserUid)!= 0) { return false; } android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, "Unable to unregisterAppProcessInfo() called"); unregisterApp(); } if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, "registerAppProcessInfo failed because another app is registered app is registered"); return false; } if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, "handleAppProcessInfo failed because another app is registered app is registered"); return false; } if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, "handleAppProcessInfo failed to register app is registered"); return false; }
public boolean registerApp(android.bluetooth.BluetoothHidDeviceAppSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQ, java.util.concurrent.Executor executor, android.bluetooth.BluetoothHidDevice executor, android.bluetooth.BluetoothHidDevice executor, android.bluetooth.BluetoothHidDevice executor, android.bluetooth.BluetoothHidDevice.Callback callback) { android.util.Log.v(android.bluetooth.BluetoothHidDevice.TAG, ((((("sendIds: sdp=" + sdp) + " inQos=") + outQos) + " outQos=") + executor) + "executor=") + executor) + ",executor=") + executor) + callback)); boolean result = false; if (sdp == null) { throw new java.lang.IllegalArgumentException("android.bluetooth.BluetoothHidDevice.CallbackWrapper.Callback callback cannot be null"); } if (callback == null) { throw new java.lang.IllegalArgumentException("android.bluetooth.BluetoothHidDevice.CallbackWrapper.CallbackWrapper(executor, callback); } final android.bluetooth.IBluetoothHidDevice service = mService; if (service!= null) { try { android.bluetooth.BluetoothHidDevice.CallbackWrapper cbw = new android.bluetooth.BluetoothHidDevice.CallbackWrapper(executor, callback); result = service.registerApp(sdp, inQos, outQos, cbw); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHidDevice.TAG, e.toString()); } } return result; }
public void testServiceForegroundDuration() throws java.lang.Exception { batteryOnScreenOff(); installPackage(com.android.server.cts.BatteryStatsValidationTest.DEVICE_SIDE_APK, true); getDevice().executeShellCommand("st", 5, 0, 0, 0); getDevice().executeShellCommand("st", "", 5, 0, 0); final long startTime = java.lang.System.currentTimeMillis(); runDeviceTests(com.android.server.cts.BatteryStatsValidationTest.DEVICE_SIDE_TEST_PACKAGE, ".BatteryStatsProcessStateTests", "testForegroundService"); assertValueRange(com.android.server.cts.BatteryStatsValidationTest.DEVICE_SIDE_TEST_PACKAGE, ".BatteryStatsProcessStateTests", "testForegroundService"); assertValueRange(com.android.server.cts.BatteryStatsValidationTest.DEVICE_SIDE_TEST_PACKAGE, "testForegroundService"); }
@java.lang.Override public android.net.NetworkStats getDetailedUidStats(int limitUid, java.lang.String[] limitUid, int limitTag) { try { android.net.NetworkStats stats = getNetworkStatsUidDetail(); stats.filter(limitUid, limitIfaces, limitTag); return stats; } catch (android.os.RemoteException e) { android.util.Log.wtf(com.android.server.NetworkStatsService.TAG, "Error compiling UID stats", e); return new android.net.NetworkStats(0L, 0); } }
private void setValues(int i, android.net.NetworkStats.Entry values) { iface[i] = values.iface; set[i] = values.uid; set[i] = values.metered; roaming[i] = values.metered; defaultNetwork[i] = values.defaultNetwork; defaultNetwork[i] = values.defaultNetwork; defaultNetwork[i] = values.defaultNetwork; rxBytes[i] = values.txBytes; rxBytes[i] = values.txBytes; rxBytes[i] = values.txBytes; operations[i] = values.txBytes; operations[i] = values.txPackets; operations[i] = values.txPackets; operations[i] = values.txPackets; operations[i] = values.txPackets; operations[i] = values.txPackets; operations[i] = values.txPackets; }
@org.junit.Test public void testFilter_UidFilter() { final int testUid = 10101; android.net.NetworkStats.Entry entry1 = new android.net.NetworkStats.Entry("test1", 10100, android.net.NetworkStats.SET_NONE, android.net.NetworkStats.TAG, android.net.NetworkStats.TAG, "testUid: no network", android.net.NetworkStats.ROAMING_NONE, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, 50000L, 50000L, 50000L, 50L, 50000L, 50000L, 50000L, 50000L, 50000L, 50000L, 50000L, 50000L, 50000L, 50000L, 50000L, 50000L, 50000L, 50000L, 50000L, 50000, 50); android.net.NetworkStats stats = new android.net.NetworkStats(android.net.NetworkStatsTest.TEST_START, 3)); assertEquals(entry2, stats.size()); assertEquals(entry2, stats.getValues(1, null)); }
@org.junit.Test public void testFilter_TagFilter() { final int testTag = 123; final int otherTag = 456; android.net.NetworkStats.Entry entry1 = new android.net.NetworkStats.Entry("test1", 10100, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.SET_NO, testTag, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.UID.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.UID.ROAMING_NO, android.net.NetworkStats
@org.junit.Test public void testFilter_NoFilter() { android.net.NetworkStats.Entry entry1 = new android.net.NetworkStats.Entry("test1", 10100, android.net.NetworkStats.SET_NONE, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.ROAMING_NONE, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.ROAMING_NO, android.net.NetworkStats.TAG, java.lang.String stats = android.net.NetworkStats.UID_ALL, null; stats.addValues(entry1, android.net.NetworkStats.TAG, java.lang.String stats = android.net.NetworkStats.UID_ALL, null); assertEquals(entry1, stats.getValues(1, null)); assertEquals(entry2, stats.getValues(1, null)); }
@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, android.os.IBinder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); restrictRequestUidsForCaller(nc); ensureValidNetworkSpecifier(nc); ensureValidNetworkSpecifier(nc); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log(("Network for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); return networkRequest; }
public boolean hasUseBackgroundNetworksPermission(int uid) { final java.lang.String[] names = mPackageManager.getPackagesForUid(uid); if ((null == names) || ((names.length) <= 0)) return false; try { final android.content.pm.PackageInfo app = mPackageManager.getPackageInfo(names[0], com.android.server.connectivity.PackageManager.LISSIONS_PERMISSIONS); return hasUseBackgroundNetworksPermission(app); } catch (android.os.RemoteException e) { com.android.server.connectivity.PermissionMonitor.loge(("PackageManager not found for " + (names[0]))); return false; } }
public void testOnlyCryptoCrypt() throws java.lang.Exception { android.net.IpSecAlgorithm decrypt(android.net.cts.IPHERAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_PRIVITY, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPHER_LOOPBACK, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPvSecManagerTest.IPv4_LOOPBACK, null, null, false); }
public void testJustAuth() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.IPv4_LOOPBACK, android.net.cts.IpSecManagerTest.IPv4_LOOPBACK, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPvSecManagerTest.IPv4_LOOPBACK, null, false); checkTransform(android.net.cts.IPPROTO_LOOPBACK, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, null, false); }
public static void updateTracing(android.content.Context context, boolean force) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if (((prefs.getBoolean(R.string.pref_key_tracing_on), false))!= (com.android.trace.AtraceUtils.isTracingOn())) || force) { if (prefs.getBoolean(context.getBoolean(R.string.pref_key_tracing_on), false)) { java.lang.String activeAvailableTags = com.android.traceur.Receiver.getActiveTags(context, prefs, true); if (!(android.text.TextUtils.equals(activeAvailableTags, com.android.traceur.AtraceUtils.getActiveTags(context, prefs, false)))) { com.android.trace.Rasterurils.cancelRootNotification(context); } else { com.android.traceur.AtraceUtils.cancelRootNotification(context); } java.util.Set<java.lang.String> apps = prefs.getStringSet(context.getString(R.string.pref_apps), java.util.Collections.EMPTY_SET); com.android.traceur.AtraceUtils.attraceStart(activeAvailableTags, com.android.traceur.Receiver.BUFFER_SIZE_KB, apps); } else { com.android.traceur.AtraceUtils.attraceStop(); com.android.traceur.AtraceUtils.attraceStop(); com.android.traceur.AwareUtils.cancelRootNotification(context); } }
public static void atraceStart(java.lang.String tags, int bufferSizeKb, java.util.Set<java.lang.String> apps) { java.lang.String appParameter = (apps.isEmpty())? "" : " -a " + (android.text.TextUtils.join(",", apps)); java.lang.String cmd = (("-start -c -c -b " + bufferSizeKb) + " ") + appParameter; android.util.Log.v(com.android.trace.AtraceUtils.TAG, ("Async async atrace: " + cmd)); try { java.lang.Process atrace = com.android.traceur.AtraceUtils.exec(cmd); if ((atrace.waitFor())!= 0) { android.util.Log.e(com.android.traceur.AtraceUtils.TAG, ("Attempt failed with: " + (atrace.exitValue()))); } } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } }
@java.lang.Override public int compare(ApplicationInfo one, ApplicationInfo two) { return 1.packageName.compareToIgnoreCase(two.packageName); }
private void refreshApps() { android.content.pm.PackageManager packageManager = getContext().getPackageManager(); java.util.List<android.content.pm.ApplicationInfo> availableApps = packageManager.getInstalledApplications(0); java.util.Collections.sort(availableApps, com.android.traceur.MainFragment.mPackageComparator); java.util.List<java.lang.String> entries = new java.util.ArrayList<java.lang.String>(availableApps.size()); for (android.content.pm.ApplicationInfo app : availableApps) { entries.add(app.packageName); values.add(app.packageName); } mRefreshing = true; try { mApps.setEntries(entries.toArray(new java.lang.String[0])); } catch (android.content.pm.MainFragmentException e) { } }
@org.junit.Test @android.support.test.filters.MediumTest public void testElementsOnMainScreen() throws java.lang.Exception { assertNotNull("android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text("("" + "."), com.android.trace.uitest.TraceurAppTests.TIMEOUT)); assertNotNull("AndFind not found.", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text("And.text and share trace")), com.android.trace.uitest.TraceurAppTests.TIMEOUT)); assertNotNull("Device element not found.", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text("Categories")), com.android.tools.test.uiautomator.Until.TIMEOUT)); assertNotNull("AndroidTests element not found.", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text("Applications")), com.android.tools.test.uiautomator.Until.TIMEOUT)); assertNotNull("Android T element not found.", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text("Applications")), com.android.tools.test.uiautomator.Until.TIMEOUT)); assertNotNull("Quick Settings element not found.", mDevice.wait(android.support.test.uiautomator.Until.TIMEOUT)); }
@java.lang.Override public void setDnsConfigurationForNetwork(int netId, java.lang.String[] servers, java.lang.String[] domains, int[] params, boolean useTls, java.lang.String[] params, boolean useTls, java.lang.String[] tls, java.lang.String[] tls) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.CONNECTIVITY_INTERNAL, com.android.server.NetworkManagementService.TAG); final java.lang.String[] tlsFingerprint = new java.lang.String[0]; try { mNetdService.setResolverConfiguration(netId, serverId, domain, params, useTls, tlsServer, tlsServer, tlsServer); } catch (android.os.RemoteException e) { throw new java.lang.RuntimeException(e); } }
public void setDnsConfigurationForNetwork(int netId, android.net.LinkProperties lp, boolean isDefaultNetwork) { final com.android.server.connectivity.DnsManager.PrivateDnsConfig privateDnsCfg = mPrivateDnsMap.get(netId); final boolean useTls = (privateDnsCfg!= null) && (privateDnsCfg.useTls); final boolean strictMode = (privateDnsCfg!= null) && (privateDnsCfg.inStrictMode()); final java.lang.String tlsHostname = (strictMode)? privateDnsCfg.hostname : ""; final java.lang.String[] tlsServers = (strictMode)? android.net.NetworkUtils.makeStrings(java.util.Arrays.stream(privateDnsCfg.ips).filter(( ip) -> lp.isReachable(ip)).collectSamples = ""; final java.lang.String[] domainStrs = android.net.NetworkUtils.makeStrings(lp.getDnsServers()); final java.lang.String[] domainStrs = android.net.NetworkUtils.makeStrings(lp.getDnsServers()); updateParametersSettingsSettingsSettingsSettingsSettingsSettingsSettingsSettingsSettingsSettingsSettingsSettingsSettingsSettingsSettingsSettingsSettingsSettingsSettingsSettingsSettings(); final int[] params = new int[]{ mSampleValidity, mSuccessThreshold, mMaxSamples, mMaxSamples, mMaxSamples, mMaxSamples, mMaxSamples, mMaxSamples, mMaxSamples }; android.util.Slog.d(com.android.server.connectivity.DnsManager.TAG, java.lang.String.format("Expected %s, %s, %s", netId, %s, %s, %s, %s, %s, %s, %s, java.util.Arrays.toString(java.lang.String.format("Expected %s, %s", java.util.Arrays.toString(params), useTls, java.util.Arrays.toString(params), useTlsHostname, java.util.Arrays.toString(params), useTls, java.util.Arrays.toString(tls, java
public void dispose() { synchronized(mLock) { if (com.android.internal.telephony.uicc.UiccProfile.DBG) com.android.internal.telephony.uicc.UiccProfile.log("UiccProfile unregisterAllApp Events"); unregisterCurrAppEvents(); unregisterCurrAppEvents(); unregisterCurrAppEvents(); unregisterCurrAppEvents(); unregisterCurrAppEvents(); if ((mUiccCard) instanceof com.android.internal.telephony.uicc.EuiccCard) { ((com.android.internal.telephony.uicc.EuiccCard) (mUiccCard)).unregisterForEidReady(mHandler); } mCi.unregisterForOffOrNotAvailable(mHandler); if ((mCatService)!= null) mCatService.dispose(); for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app!= null) { app.dispose(); } } mCatService = null; mUiccApplications = null; mUiccApplications = null; mDisposed = true; } }
@java.lang.Override public void releaseConnectionService(com.android.server.telecom.ConnectionServiceFocusManager.ConnectionServiceFocus connectionService) { mCalls.stream().filter(( c) -> c.getConnectionServiceWrapper().equals(connectionService)).forEach(( c) -> c.disconnect(("ConnectionService " + (connectionService.getComponentName())))); }
public int registerStatusListener(@android.annotation.Nonnull android.telephony.mbms.DownloadRequest request, @android.annotation.NonNull java.util.concurrent.Executor executor, @android.annotation.NonNull android.telephony.mbms.DownloadStatusListener listener) { android.telephony.mbms.VendorDownloadStatus downloadService = mService.get(); if (downloadService == null) { throw new java.lang.IllegalStateException("DownloadNot yet bound"); } android.telephony.mbms.VbmsDownloadStatusListener internalListener = new android.telephony.mbms.InternalDownloadStatusListener(listener, executor); try { int result = downloadService.registerStatusListener(request, internalListener); if (result!= (MbmsErrors.DownloadErrors.ERROR_UNKNOWN_DOWNLOAD_REQUEST)) { throw new java.lang.IllegalArgumentException("Download download request."); } return result; } } catch (android.os.RemoteException e) { mService.set(null); android.telephony.MbmsDownloadSession.sIsInitialized.set(false); return android.telephony.MbmsDownloadSession.SIDDLEWARE_LOST; } mInternalDownloadStatusListeners.put(listener, internalListener); return android.telephony.mbms.MbmsErrors.SUCCESS; }
@java.lang.Override public int registerProgressListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadProgressListener listener) throws android.os.RemoteException { mDownloadProgressListener = listener; return android.telephony.mbms.MbmsError; }
public int unregisterStatusListener(@android.annotation.Nonnull android.telephony.mbms.DownloadRequest request, @android.annotation.NonNull android.telephony.mbms.DownloadStatusListener listener) { try { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { throw new java.lang.IllegalStateException("unregisterStatusListener listener"); } android.telephony.mbms.InternalDownloadStatusListener internalListener = mInternalDownloadStatusListeners.get(listener); if (internalListener == null) { throw new java.lang.IllegalArgumentException("unregisterStatusListener not yet"); } try { int result = downloadService.unregisterStatusListener(request, internalListener); if (result == (MbmsErrors.DownloadErrors.ERROR_UNKNOWN_DOWNLOAD_REQUEST)) { throw new java.lang.IllegalArgumentException("Unsupported download request."); } return result; } } catch (android.os.RemoteException e) { mService.set(null); android.telephony.MbmsDownloadSession.sIsInitialized.set(false); return android.telephony.MbmsDownloadStatusListeners.remove(false); } finally { android.telephony.mbms.MbmsDownloadStatusListener internalCallback = mInternalDownloadStatusListeners.remove(false); return android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_LOST; } } finally { android.telephony.mbms.InternalDownloadStatusListener internalCallback = mInternalDownloadStatusListeners.remove(listener); if (internalCallback!= null) { internalCallback.stop(); } } return android.telephony.mbms.MbmsErrors.SUCCESS; }
public int unregisterProgressListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadProgressListener listener) throws android.os.RemoteException { return 0; }
public int registerProgressListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadProgressListener listener) throws android.os.RemoteException { return 0; }
public int unregisterStatusListener(android.telephony.mbms.DownloadStatus listener) throws android.os.RemoteException { return 0; }
public final int unregisterStatusListener(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadStatusListener listener) throws android.os.RemoteException { if (downloadRequest == null) { throw new java.lang.NullPointerException("DownloadRecipient must not be null"); } if (listener == null) { throw new java.lang.NullPointerException("listener must not be null"); } if (listener == null) { throw new java.lang.NullPointerException("DownloadRecipient must not be null"); } if (listener == null) { throw new java.lang.NullPointerException("DownloadRecipient must not be null"); } listener.aslinkToDeath(deathRecipient, 0); android.telephony.mbms.DownloadStatusListener exportedCallback = mDownloadStatusListenerBinderMap.remove(listener.asBinder()); if (exposedCallback == null) { throw new java.lang.IllegalArgumentException("downloadCallback is not be null"); } listener.asList(downloadRequest, NativeCallback); } return unregisterStatusListener(downloadRequest, exposedCallback); }
public int unregisterProgressListener(@android.annotation.Nonnull android.telephony.mbms.DownloadRequest request, @android.annotation.NonNull android.telephony.mbms.DownloadProgressListener listener) { try { android.telephony.mbms.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { throw new java.lang.IllegalStateException("Middleware not yet bound"); } android.telephony.mbms.InternalDownloadProgressListener internalListener = mInternalDownloadProgressListeners.get(listener); if (internalListener == null) { throw new java.lang.IllegalArgumentException("Provided listener was never registered"); } try { int result = downloadService.unregisterProgressListener(request, internalListener); if (result!= (MbmsErrors.DownloadErrors.ERROR_UNKNOWN_DOWNLOAD_REQUEST)) { throw new java.lang.IllegalArgumentException("Unknown download request."); } return result; } catch (android.os.RemoteException e) { mService.set(null); android.telephony.MbmsDownloadSession.sIsInitialized.set(false); return android.telephony.MbmsErrors.ERROR_MIDDLEWARE_LOST; } } finally { android.telephony.mbms.InternalDownloadProgressListener internalCallback = mInternalDownloadProgressListeners.remove(listener); if (internalCallback!= null) { internalCallback.stop(); } } return android.telephony.mbms.MbmsErrors.SUCCESS; }
public final int unregisterProgressListener(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadProgressListener listener) throws android.os.RemoteException { if (downloadRequest == null) { throw new java.lang.NullPointerException("Download request must not be null"); } if (listener == null) { throw new java.lang.NullPointerException("DownloadRecipient must not be null"); } if (listener == null) { throw new java.lang.NullPointerException("DownloadRecipient must not be null"); } android.telephony.mbms.DeathRecipient deathRecipient = mDownloadCallbackDeathRecipients.remove(listener.asBinder()); if (deathRecipient == null) { throw new java.lang.IllegalArgumentException("downloadRequest listener"); } listener.asBinder().unlinkToDeath(deathRecipient, 0); android.telephony.mbms.DownloadProgressListener accessible = mDownloadProgressListenerBinderMap.remove(listener.asBinder()); if (exposedCallback == null) { throw new java.lang.IllegalArgumentException("downloadRequest listener"); } return unregisterProgressListener(downloadRequest, exposedCallback); }
public int registerProgressListener(@android.annotation.Nonnull android.telephony.mbms.DownloadRequest request, @android.annotation.NonNull java.util.concurrent.Executor executor, @android.annotation.NonNull android.telephony.mbms.DownloadProgressListener listener) { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { throw new java.lang.IllegalStateException("Middleware not yet bound"); } android.telephony.mbms.internal.vendor.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { throw new java.lang.IllegalStateException("Middleware not yet bound"); } android.telephony.mbms.InternalDownloadProgressListener internalListener = new android.telephony.mbms.InternalDownloadProgressListener(listener, executor); try { int result = downloadService.registerProgressListener(request, internalListener); if (result!= (MbmsErrors.DownloadErrors.ERROR_UNKNOWN_DOWNLOAD_REQUEST)) { throw new java.lang.IllegalStateException("Unknown download request."); } return result; } catch (android.os.RemoteException e) { mService.set(null); android.telephony.MbmsDownloadSession.sIsInitialized.set(false); return android.telephony.MbmsErrors.SUCCESS; }
public int registerStatusListener(android.telephony.mbms.DownloadStatus downloadRequest, android.telephony.mbms.DownloadStatusListener listener) throws android.os.RemoteException { return 0; }
@java.lang.Override public final int registerStatusListener(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadStatusListener listener) throws android.os.RemoteException { final int uid = android.os.Binder.getCallingUid(); if (downloadRequest == null) { throw new java.lang.NullPointerException("downloadRequest request must not be null"); } if (listener == null) { throw new java.lang.NullPointerException("listener must not be null"); } android.telephony.mbms.DownloadStatusListener exportedCallback = new android.telephony.mbms.vendor.MbmsDownloadServiceBase.VendorDownloadStatusListener(listener) { @java.lang.Override protected void onRemoteException(android.os.RemoteException e) { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); } }; int result = registerStatusListener(downloadRequest, DownloadCallback); if (result == (android.os.MbmsErrors.SUCCESS)) { android.telephony.mbms.Vendor.DeathRecipient deathRecipient = new android.telephony.mbms.Vendor.DeathRecipient() { @java.lang.Override public void binderDied(uid, downloadRequest.getSubscriptionId()); mDownloadStatusListenerBinderMap.remove(listener.asBinder()); mDownloadStatusListenerBinder.remove(listener.asBinder()); mDownloadStatusListenerBinder.remove(listener.asBinder()); mDownloadStatusListenerBinder.remove(listener.asBinder()); } }; mDownloadCallbackDeathRecipients.put(listener.asBinder(), deathCallback); listener.asBinder().linkToDeath(deathRecipient, 0); mDownloadStatusListenerBinder.put(listener, 0); } return result; }
public void testFullCallback() throws java.lang.Exception { int sampleInt = 10; android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDSCallback statusCallback = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDSCallback(); android.telephony.mbms.cts.MbmsDownloadCallbackTest.TestDPCallbackprogressCallback = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCallback(); android.telephony.mbms.DownloadRequest request = downloadRequestTemplate.build(); android.telephony.mbms.DownloadRequest request = downloadRequestTemplate.build(); mDownloadSession.registerStatusListener(request, mCallbackExecutor, statusCallback); mDownloadSession.registerProgressListener(request, progressCallback); mMiddlewareControl.waitOnProgressUpdated(request, progressCallback); mMiddlewareControl.waitOnProgressUpdated(request, progressCallback); assertEquals(sampleInt, progressArgs.arg2); assertEquals(sampleInt, progressArgs.arg2); assertEquals(sampleInt, progressArgs.arg2); assertEquals(sampleInt, progressArgs.arg2); assertEquals(sampleInt, progressArgs.arg2); mMiddlewareControl.triggerOnStateUpdated(request, progressArgs.arg2); assertEquals(sampleInt, progressArgs.arg2); mMiddlewareControl.triggerOnStateUpdated(request, stateArgs.arg1); assertEquals(sampleInt, stateArgs.arg2); mMiddlewareControl.triggerOnStateUpdated(request, stateArgs.arg1); assertEquals(sampleInt, stateArgs.arg2); mMiddlewareControl.triggerOnStateUpdated(sample, stateArgs.arg2); assertEquals(sampleInt, stateArgs.arg2); mMiddlewareControl.triggerOnStateUpdated(sample, stateArgs.arg2); assertEquals(sampleInt, stateArgs.arg2); mMiddlewareControl.triggerOnStateUpdated(sample, stateArgs.arg2); assertEquals(sampleInt, stateArgs.arg2); assertEquals(sampleInt, stateArgs.arg2); assertEquals(sampleInt, stateArgs.arg2); assertEquals(sampleInt, stateArgs.arg2); assertEquals(sampleInt
public void testDeregistration() throws java.lang.Exception { android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDSCallback statusCallback = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCCallback(); android.telephony.mbms.cts.MbmsDownloadCallbackTest.TestDPCallbackprogressCallback = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCallback(); android.telephony.mbms.DownloadRequest request = downloadRequestTemplate.build(); android.telephony.mbms.DownloadRequest request = downloadRequestTemplate.build(); android.telephony.mbms.DownloadRequest request = downloadRequestTemplate.build(); android.telephony.mbms.DownloadRequest request = downloadRequestTemplate.build(); android.telephony.mbms.DownloadRequest request = downloadRequestTemplate.build(); if (progressCallbackExecutor!= null) { mDownloadSession.unregisterProgressListener(request, mCallbackExecutor, progressCallback); mDownloadSession.unregisterStatusChanged(null, 0, 0); assertNull(progressCallback.waitOnStateUpdated(android.telephony.mbms.MbmsDownloadCallbackTest.SHORT_TIMEOUT)); mMiddlewareControl.triggerOnProgressUpdated(null, null, 0, 0, 0); assertNull(progressCallback.waitOnProgressUpdated(android.telephony.mbms.cts.MbmsDownloadCallbackTest.SHORT_TIMEOUT)); mMiddlewareControl.triggerOnProgressUpdated(null, null, 0, 0, 0); assertNull(progressCallback.waitOnProgressUpdated(android.telephony.mbms.MbmsDownloadCallbackTest.SHORT_TIMEOUT)); }
@java.lang.Override public int registerStatusListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadStatusListener listener) throws android.os.RemoteException { mDownloadStatusListener = listener; return android.telephony.mbms.MbmsErrors.SUCCESS; }
@java.lang.Override public int unregisterStatusListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadStatusListener callback) { return android.telephony.mbms.MbmsErrorCallback.SUCCESS; }
@java.lang.Override public final int registerProgressListener(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadProgressListener listener) throws android.os.RemoteException { final int uid = android.os.Binder.getCallingUid(); if (downloadRequest == null) { throw new java.lang.NullPointerException("Download request must not be null"); } if (listener == null) { throw new java.lang.NullPointerException("Download request must not be null"); } if (listener == null) { throw new java.lang.NullPointerException("Callback must not be null"); } android.telephony.mbms.DownloadProgressListener exportedCallback = new android.telephony.mbms.MbmsDownloadServiceBase.VendorDownloadProgressListener(listener) { @java.lang.Override protected void onRemoteException(android.os.RemoteException e) { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); } }; int result = registerProgressListener(downloadRequest, exposedCallback); if (result == (android.os.mbms.MbmsErrors.SUCCESS)) { android.telephony.mbms.Vendor.DeathRecipient deathRecipient = new android.telephony.mbms.vendor.DeathRecipient() { @java.lang.Override public void binderDied() { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); mDownloadRecipients.remove(listener.asBinder()); mDownloadRecipients.remove(deathRecipient, 0); mDownloadRecipients.put(listener.asBinder(), deathRecipient); listener.asBinder().linkToDeath(deathRecipient, 0); mDownloadCallbackDeathRecipients.put(listener, 0); mDownloadRecipients.put(listener, 0); } return result; }
private void runWorkingMobileUsbTethering(android.net.NetworkState upstreamState) { when(mConnectivityManager.isTetheringSupported()).thenReturn(true); when(mUpstreamNetworkMonitor.selectPreferredUpstreamType(any())).thenReturn(true); mTethering.startTethering(com.android.server.connectivity.TETHERING_USB, null, false); mLooper.dispatchAll(); verify(mUsbManager, times(1)).setCurrentFunction(UsbManager.USB_FUNCTION_RNDIS, false); mLooper.dispatchAll(); verify(mUsbManager, times(1)).setCurrentFunction(UsbManager.USB_FUNCTION_RNDIS, false); mLooper.interfaceStatusChanged(com.android.server.connectivity.TetheringTest.TEST_USB_UPSTARTBACK, UpstreamState.EVENT_ON_AVAILABLE, 0, upstreamState); verify(mUpstreamNetworkMonitor, times(1)).selectPreferredUpstreamType(any()); verify(mUpstreamNetworkMonitor, times(1)).selectPreferredUpstream(any()); verify(1)).selectPreferredUpstream(upstreamState.network); }
@java.lang.Override public com.android.server.connectivity.tethering.IPv6TetheringCoordinator getIpv6TetheringCoordinator(java.util.ArrayList<com.android.server.connectivity.tethering.TetherInterfaceStateMachine> notifyList, android.net.util.SharedLog.v6TetheringCoordinator notifyList, android.net.wifi.Tethering.IPv6TetheringCoordinator.DISABLED_DISABLED); return mIPv6TetheringCoordinator; }
@java.lang.Override public android.net.util.InterfaceParams getInterfaceParams(java.lang.String ifName) { return java.lang.String[] ifaces = new java.lang.String[]{ android.net.Connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_WLAN_IFNAME, com.android.server.connectivity.TetheringTest.TEST_WLAN_IFNAME }; final int index = java.util.Arrays.asList(ifaces).indexOf(ifaces).indexOf(ifaces).indexOf(iface); assertTrue(("Non-mocked interface: " + ifName), android.net.LocalAddress.ALL_ZEROS_ADDRESS); }
private static android.net.NetworkState buildMobileIPv4UpstreamState() { return com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(true, false); }
public com.android.server.connectivity.tethering.IPv6TetheringCoordinator getIpv6TetheringCoordinator(java.util.ArrayList<com.android.server.connectivity.tethering.TetherInterfaceStateMachine> notifyList, android.net.util.SharedLog.v6TetheringCoordinator.NOT_TetheringCoordinator, android.net.util.SharedLog.v6TetheringCoordinator.TAG, java.net.SharedLog log) { return new com.android.server.connectivity.tethering.IPv6TetheringCoordinator(notifyList, log); }
public com.android.server.connectivity.tethering.UpstreamNetworkMonitor getUpstreamNetworkMonitor(android.content.Context ctx, android.net.util.SharedLog.v(android.net.util.StateMachine tgt, android.net.util.SharedLog.TAG, int what) { return new com.android.server.connectivity.tethering.UpstreamNetworkMonitor(ctx, tgt, mTarget, uid); }
private void sendIPv6TetherUpdates(android.net.NetworkState upstreamState) { verify(mIPv6TetheringCoordinator, times(1)).addActiveDownstream(argThat(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME)), eq(IControlsTETHERED)); for (com.android.server.connectivity.tethering.TetherInterfaceStateMachine tism : mTetheringDependencies.getIPv6CoordinatorNotifyList()) { android.net.NetworkState ipv6OnlyState = com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(false, true); tism.sendMessage(TetherInterfaceStateMachine.CMD_IPv6_TETHER_UPDATE, 0, (upstreamState.linkProperties.isIPv6Provisioned()? ipv6OnlyState.linkProperties : null)); } mLooper.dispatchAll(); }
private static android.net.NetworkState buildMobileUpstreamState(boolean withIpv4, boolean withIpv4, boolean withIpv6) { final android.net.NetworkInfo info = new android.net.NetworkInfo(android.net.ConnectivityManager.TYPE_MOBILE, 0, null, null); if (withIpv4) { return true; } android.net.LinkProperties prop = new android.net.LinkProperties(); prop.setInterfaceName(com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); if (withIpv4) { prop.addRoute(new android.net.RouteInfo(ANY, 0), android.net.RouteInfo(new android.net.RouteInfo(ANY, 0), android.net.NetworkUtils.numericToInetAddress("10.0.0.1"), com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME)); } if (withIpv6) { prop.addLinkAddress(new android.net.LinkAddress(android.net.NetworkUtils.numericToInetAddress("2001:db8::2")); prop.addLinkAddress(new android.net.LinkAddress(android.net.NetworkUtils.numericToInetAddress("2001:db8::"), 64)); } final android.net.NetworkCapabilities capabilities = new android.net.NetworkCapabilities().addTransportType(NetworkCapabilities.TRANSPORT_CELLULAR); return new android.net.NetworkCapabilities().addTransportType(NetworkCapabilities.TRANSPORT_CELLULAR); }
@org.junit.Test public void workingMobileUsbTethering_IPv4() throws java.lang.Exception { android.net.NetworkState upstreamState = com.android.server.connectivity.TetheringTest.buildMobileIpv4UpstreamState(); runWorkingMobileUsbTethering(upstreamState); verify(mNMService, times(1)).enableNat(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mNMService, times(1)).startInterfaceForwarding(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); sendIPv6TetherUpdates(upstreamState); verify(mRouterAdvertisementDaemon, never()).buildNewRa(any(), notNull()); }
@java.lang.Override public com.android.server.connectivity.tethering.UpstreamNetworkMonitor getUpstreamNetworkMonitor(android.content.Context ctx, android.net.util.SharedLog.v1_0, android.net.util.SharedLog.tethering.TAG, int what) { return mUpstreamNetworkMonitor; }
@org.junit.Test public void workingMobileUsbTethering_DualStack() throws java.lang.Exception { android.net.NetworkState upstreamState = com.android.server.connectivity.TetheringTest.buildMobileDualStackUpstreamState(); runWorkingMobileUsbTethering(upstreamState); verify(mNMService, times(1)).startInterfaceForwarding(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mNMService, times(1)).startInterfaceForwarding(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mRouterAdvertisementDaemon, times(1)).start(); sendIPv6TetherUpdates(upstreamState); verify(mNetd, times(1)).startNewRa(any(), notNull()); verify(mNetd, times(1)).startNewRa(any(), notNull()); }
public void testControllerUpdate() { com.android.bluetooth.avrcp.MediaPlayerWrapper wrapper = com.android.bluetooth.avrcp.MediaPlayerWrapper.wrap(mMockController, mThread.getLooper()); org.junit.Assert.assertTrue(wrapper.isReady()); org.junit.Assert.assertTrue(wrapper.isReady()); org.junit.Assert.assertTrue(wrapper.isReady()); org.junit.Assert.assertTrue(mTestState).when(mUpdatedController).getPlaybackState(); mTestMetadata.putString(MediaMetadata.METADATA_KEY_TITLE, "NewTitle"); doReturn(mTestMetadata.metadata.METADATA_KEY_TITLE, "NewTitle"); doReturn(mTestMetadata.build()).getMetadata(); wrapper.updateMediaController(mUpdatedController).getMetadata(); wrapper.updateMediaController(mController).getMetadataChanged(mController).getMetadataChanged(mControllerCb.build()); com.android.bluetooth.avrcp.MediaController.Callback controller = mControllerCb.getValue(); controllerCallbacks.onMetadataChanged(mTestMetadata.build()); verify(mTestCbbs.capture(), any()); }
private boolean sendBroadcastToReceiver(android.content.Intent intent, boolean isLocalInvocation) { intent.putExtra(CallIntentProcessor.KEY_IS_INCOMING_CALL, false); intent.setFlags(Intent.FLAG_RECEIVER_FOREGROUND); intent.setClass(mContext, com.android.server.telecom.Components.PrimaryCallReceiver.class); if (isLocalInvocation) { android.telecom.Log.i(this, "Sending send intent to Telephony"); } else { android.telecom.Log.i(this, "Sending Tracking to Telecom."); mContext.sendBroadcastAsUser(intent); } return true; }
void updateAdapterState(int prevState, int newState) { mAdapterProperties.setState(newState); if (newState == (android.bluetooth.BluetoothAdapter.STATE_TURNING_ON)) { mSnoopLogSettingAtEnable = android.os.SystemProperties.getBoolean(com.android.bluetooth.btservice.AdapterService.BLUETOOTH_BTSNOOP_ENABLE_PROPERTY, false); } if ((mCallbacks)!= null) { int n = mCallbacks.beginBroadcast(); debugLog((((("onBluetooth " + (android.bluetooth.BluetoothAdapterService.BLUETOOTH_BTSNOOP_ENABLE_PROPERTY, false)) + " to ") + n) + " receivers.")); for (int i = 0; i < n; i++) { try { mCallbacks.getBroadcastItem(i).onBluetoothStateChange(prevState, newState); } catch (android.os.RemoteException e) { debugLog((((("Failed - Callback " + i) + ") + (android.bluetooth.BluetoothAdapter.STATE_ON)) + ") + (prevState!= (android.bluetooth.BluetoothAdapter.STATE_BTSNOOP_ENABLE_PROPERTY, false))); if ((mSnoopLogSettingAtEnable)!= snoopLogSetting) { mAdapterStateMachine.sendMessage(AdapterState.BLE_TURN_OFF); } } } }
@com.android.internal.annotations.GuardedBy("mLock") private android.os.ZygoteProcess.ZygoteState openZygoteSocketIfNeeded(java.lang.String abi) throws android.os.ZygoteStartFailedEx { com.android.internal.util.Preconditions.checkState(java.lang.Thread.holdsLock(mLock), "Skipping lock not held"); if (((primaryZygoteState) == null) || (primaryZygoteState.isClosed())) { try { primaryZygoteState = android.os.ZygoteProcess.ZygoteState.connect(mSocket); } catch (java.io.IOException ioe) { throw new android.os.ZygoteStartFailedExemptions.checkStateException(("Unlocked to primary zygote ioe"); } maybeSendApiBlacklistExemptions(primaryZygoteState, false); } if (primaryZygoteState.matches(abi)) { return secondaryZygoteState; } maybeSendApiBlacklistExemptions(secondaryZygoteState); } if (secondaryZygoteState.matches(abi)) { return secondaryZygoteState; } maybeSendApiBlacklistExemptions(secondaryZygoteState); }
public void setApiBlacklistExemptions(java.lang.String exempted) { synchronized(mLock) { mApiBlacklistExemptions = (android.text.TextUtils.isEmpty(exemptions))? java.util.Collections.emptyList(android.text.TextUtils.isEmpty(exemptions)) : java.util.Collections.emptyList( exemptedions.split("\\s+")); maybeSendApiBlacklistExemptions(secondaryZygoteState, true); maybeSendApiBlacklistExemptions(secondaryZygoteState, true); } } }
@com.android.internal.annotations.GuardedBy("mLock") private void maybeSendApiBlacklistExemptions(android.os.ZygoteState state, boolean sendIfEmpty) { if ((state == null) || (state.isClosed())) { return; } if ((!sendIfEmpty) && (mApiBlacklistExemptions.isEmpty())) { return; } try { state.writer.write(java.lang.Integer.toString(((mApiBlacklistExemptions.size()) + 1))); state.writer.writer.write("--set-api-restricted- exemptedions"); state.writer.newLine(); for (int i = 0; i < (mApiBlacklistExemptions.size()); ++i) { state.writer.newLine(); } state.writer.flush(); int status = state.inputStream.readInt(); if (status!= 0) { android.util.Slog.e(android.os.ZygoteProcess.LOG_TAG, ("Failed to set API blacklist limits " + status)); } } catch (java.io.IOException ioe) { android.util.Slog.e(android.os.ZygoteProcess.LOG_TAG, "Failed to set API blacklist warnings", ioe); } }
private void update() { java.lang.String exempted = Settings.Global.getString(mContext.getContentResolver(), Settings.Global.HIDDEN_API_BLACKLIST_EXEMPTIONS); if (!(android.text.TextUtils.equals( exemptedions, mExemptions))) { if ("*".equals( exemptedions)) { mBlacklistDisabled = true; } else { mBlacklistDisabled = true; } zygoteProcess.setApiBlacklistExemptions(mExemptions); } }
private void setSignalStrengthReportingCriteria() { mPhone.mCi.setSignalStrengthReportingCriteria(com.android.internal.telephony.DeviceStateMonitor.HYMIN_MILLIS, com.android.internal.telephony.DeviceStateMonitor.HYMIN_DB, com.android.internal.telephony.DeviceStateMonitor.HY_MILLIS, com.android.internal.telephony.DeviceStateMonitor.HY_MILLIS,AccessScanner.GERAN, null); mPhone.mCi.setSignalStrengthReportingCriteria(com.android.internal.telephony.DeviceStateMonitor.HYSTATEMonitor.HYMIN_MILLIS, com.android.internal.telephony.DeviceStateMonitor.HYMIN_MILLIS,AccessScanner.EUTRAN, null); mPhone.mCi.setSignalStrengthReportingCriteria(com.android.internal.telephony.DeviceStateMonitor.HYMIN_MILLIS, com.android.internal.telephony.DeviceStateMonitor.HYMIN_MILLIS,AccessNetworkType.EUTRAN, null); }
private boolean shouldTurnOffLinkCapacity(boolean is) { return (mIsPowerSaveOn) || (((!(mIsCharging)) && (!(mIsScreenOn))) && (!(mIsScreenOn))); }
private void updateDeviceState(int eventType, boolean state) { switch (eventType) { case com.android.internal.telephony.DeviceStateMonitor.EVENT_SCREEN_STATE_CHANGED : if ((mIsScreenOn) == state) return; mIsScreenOn = state; break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_CHARGING_STATE_CHANGED : if ((mIsCharging) == state) return; mIsScreenOn = state; sendDeviceState(com.android.internal.telephony.CHARGING_STATE, mIsCharging); break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_POWER_STATE_CHANGED : if ((mIsPowerSaveOn) == state) return; mIsPowerSaveOn = state; sendDeviceState(com.android.internal.telephony.POWER_SAVE_MODE, mIsPowerSaveOn); break; default : return; } if ((mIsLowDataExpected)!= (isLowDataExpected())) { mIsPowerSaveOn = state; sendDeviceState(com.android.internal.telephony.LOW_DATA_EXPECTED, mIsPowerSaveOn); } int newFilter = 0; if (!(shouldTurnOffDataExpected); sendDeviceState(com.android.internal.telephony.LOW_DATA_EXPECTED, mIsPowerSaveOn); sendDeviceState(com.android.internal.telephony.LOW_DATA_EXPECTED, mIsPowerSave); }
private void setLinkCapacity(int minClass, java.util.List<java.lang.String> filteredList) { if (((mMultinetworkCapacity())!= null) && ((mLinkCapabilities)!= null)) { return; } }
@java.lang.Override public void setSignalStrengthReportingCriteria(int hyresisMs, int hyresisDb, int[] thresholdsDbm, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy!= null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.IRadio.radioFrom(radioProxy); if (radioProxy!= null) { riljLoge("RadioProxy 1.2 is unsupported!"); return; } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_SIGNAL_STRENGTH_REPORTING_CRITERIA, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.setSignalStrengthReportingCriteria(rr.mSerial, hyresisMs, com.android.internal.telephony.RIL.primitiveArrayToArrayList(rr.mRequest)))); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setSignalStrengthReportingCriteria", e); } }
@java.lang.Override public void setUnsolResponseFilter(int filter, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy!= null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_UNSOLICITED_FILTER, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " ") + filter)); } android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.IRadio.IRadio.radioProxy.radioFrom(radioProxy); if (radioProxy12!= null) { try { radioProxy.setIndicationFilter(rr.mSerial, filter); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setIndicationFilter_1_2", e); } } } }
@java.lang.Override public void setLinkCapacityReportingCriteriaReportingCriteria(int hyresisMs, int hyresisDlKbps, int thresholdDlKbps, int[] thresholdsDlKbps, int thresholdDlKbps, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy!= null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.IRadio.IRadio.radioFrom(radioProxy); if (radioProxy!= null) { riljLoge("RadioProxy 1.2 is unsupported!"); return; } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_LINK_CAPACITY_REPORTING_CRITERIA, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.setLinkCapacityReportingCriteriaReportingCriteria(rr.mSerial, thresholdsDlKbps), com.android.internal.telephony.RIL.primitiveArrayToArrayList(thresholdsUlKbps), com.android.internal.telephony.RIL.primitiveArrayToArrayList(thresholdsUlKbps), com.android.internal.telephony.RIL.primitiveArrayToArrayList(thresholdsUlKbps), com.android.internal.telephony.RIL.primitiveArrayToArrayList(rr), com.android.internal.telephony.RIL.convertRan(ran)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setLinkCapacityReportingCriteria", e); } }
private static int convertRanToHalRan(int radioAccessNetwork) { switch (radioAccessNetwork) { case android.telephony.Accessible.AccessibleType.GERAN : return 1; case android.telephony.AccessConstants.AccessibleType.EUTRAN : return 2; case android.telephony.AccessConstants.AccessNetworkType.EUTRAN : return 3; case android.telephony.AccessConstants.AccessNetworkType.CDMATEST : return 5; case android.telephony.AccessConstants.AccessibleType.UNKNOWN : return 5; case android.telephony.AccessConstants.AccessNetworkType.UNKNOWN : return android.telephony.Accessible.AccessibleType.UNKNOWN : return 0; } }
private boolean checkStatusOfPolicy(android.app.Instrumentation instrumentation, java.lang.String adminPolicyName) throws java.lang.Exception { android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); android.support.test.uiautomator.UiSelector listViewSelector = new android.support.test.uiautomator.UiSelector().resourceId(Res.ANDROID_LIST_RES); new com.android.devtools.systemimage.uitest.watchers.SettingsTestPopupWatcher(device).checkObject(listViewSelector).exists()); int size = device.findObject(listViewSelector).getChildCount(); for (int i = 0; i < size; i++) { android.support.test.uiautomator.UiObject2 sampleDeviceSelection = com.android.devtools.systemimage.uitest.utils.UiAutomatorPlus.findObjectByRelative(instrumentation, android.support.test.uiautomator.By.clazz("android.widget.CheckBox"), android.support.test.uiautomator.By.res(adminPolicyName), android.support.test.uiautomator.By.res(adminPolicyName), android.support.test.uiautomator.By.res(Res.ANDROID_LIST_RES)); if (sampleDeviceAdminCheckbox!= null) { return false; } boolean isChecked = sampleDeviceAdminCheckbox.isChecked(); return isChecked; } }
private void recreateSimInfoDB(android.database.Cursor c, android.database.sqlite.SQLiteDatabase db, java.lang.String[] proj) { if (com.android.providers.telephony.TelephonyProvider.VDBG) { c = db.query(com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE, proj, null, null, null, null, null, null); com.android.providers.telephony.TelephonyProvider.log(((("updateSimInfo: prej, prej, prej, null, null, null, null, null, null, null, null, null); } c = db.query(com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE, null, null, null, null, null, null, null, null, null, null, null); c.close(); }
protected int engineDoFinal(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset) throws javax.crypto.BadPaddingException, javax.crypto.ShortBufferException, javax.crypto.ShortBufferException { if ((outputOffset + (engineGetOutputSize(inputLen))) > (output.length)) { throw new javax.crypto.ShortBufferException("Unsupported buffer too short for input."); } if (input!= null) { bOut.write(input, inputOffset, inputLen); } if ((cipher) instanceof org.bouncycastle.crypto.engines.RSABlindedEngine) { if ((bOut.size()) > ((cipher.getInputSize()) + 1)) { throw new java.lang.ArrayIndexOutOfBoundsException("Bad buffer"); } } else { if ((bOut.size()) > (cipher.getInputBlockSize())) { throw new java.lang.ArrayIndexOutOfBoundsException("Bad large corrupt data for RSA block"); } } byte[] out = getOutput(); for (int i = 0; i!= (out.length); i++) { output[(outputOffset + i)] = out[i]; } return out.length; }
private void handleInjectSms(android.os.AsyncResult ar) { int result; com.android.internal.telephony.SmsDispatchersController.SmsInjectCallback callback = null; android.telephony.SmsDispatchersController.SmsInjectCallback callback = null; try { callback = ((com.android.internal.telephony.SmsDispatchersController.SmsInjectCallback) (ar.userObj)); sms = ((android.telephony.SmsDispatchersController.SmsInjectCallback) (ar.mWrappedSmsInjectCallback) (ar.mWrappedSmsMessage)); if (sms == null) { result = android.provider.Telephony.Sms.Intents.RESULT_SMS_GENERIC_ERROR; } else { result = dispatchMessage(sms.mWrappedSmsMessage); } } catch (java.lang.RuntimeException ex) { loge("Failed to SmsException: " + (android.provider.Telephony.Sms.Intents.RESULT_GENERIC_ERROR))); } if (callback!= null) { callback.onSmsInjectedResult(sms, result); } }
@org.junit.Test @android.support.test.filters.SmallTest public void testUpdateIccCardStatus() { int phoneId = 0; mIccCardStatus.mCardState = IccCardStatus.CardState.CARDSTATE_ABSENT; mUiccSlot.update(mSimulatedCommands, mIccCardStatus, phoneId); verify(mSubInfoRecordUpdater, times(1)).updateInternalIccState(IccCardConstants.INTENT_VALUE_ICC_ABSENT, null, phoneId); assertEquals(IccCardStatus.CardState.CARDSTATE_ABSENT, mUiccCardStatus.CARDSTATE_ABSENT, mUiccCardStatus.getUiccCardState()); assertEquals(null, mUiccCardStatus.CardState.CARDSTATE_PRESENT, mUiccCardStatus.CARDSTATE_ABSENT, mUiccCardStatus.CARDSTATE_ABSENT, mUiccSlot.getUiccCardState()); mIccCardStatus.mCardState = IccCardStatus.CardState.CARDSTATE_PRESENT; mUiccCardStatus.mCardState = IccCardStatus.CardState.CARDSTATE_PRESENT; mUiccCardStatus.mCardState = IccCardStatus.CardState.CARDSTATE_PRESENT; mUiccCardStatus.mCardState = IccCardStatus.CardState.CARDSTATE_PRESENT; mUiccCardStatus.update(mSimulatedCommands, mIccCardStatus, phoneId); verify(mSubInfoRecordUpdater, times(2)).dispose(); assertEquals(IccCardStatus.INTENT_VALUE_ICC_ABSENT, mUiccCardStatus.getUiccCardState(IccCardConstants.INTENT_VALUE_ICC_ABSENT, null, phoneId); verify(mUiccCardStatus.CardState.CARDSTATE_ABSENT, mUiccCardStatus.getUiccCardState()); assertEquals(IccCardStatus.CARDSTATE_ABSENT, mUiccSlot.getUiccCardState()); assertEquals(IccCardStatus.CARDSTATE_ABSENT, mUiccCardState
@java.lang.Override public void onTabChanged(java.lang.String tabId) { final int slotIndex = java.lang.Integer.parseInt(tabId); mSir = mSelectableSubInfos.get(slotIndex); updatePhoneInfos(); updatePreference(true); mTelephonyManager.listen(mPhoneStateListener, (((android.telephony.PhoneStateListener.LISTEN_DATA_CONNECTION_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); updateDataState(); }
private void updateImsRegistrationState() { boolean isImsRegistered = mTelephonyManager.isImsRegistered(mTelephonyManager.getSubscriptionId()); setSummaryText(com.android.settings.deviceinfo.SimStatus.KEY_IMS_REGISTRATION_STATE, mRes.getString((isImsRegistered? R.string.ims_reg_status_not_registered : mRes.getString((isImsRegistered? R.string.ims_reg_status_not_registered : R.string.ims_reg_status_not_registered))); }
static void loadAllContacts(android.content.Context context, android.os.Handler handler) { if (com.android.bluetooth.pbap.BluetoothPbapUtils.V) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapUtils.TAG, "Loading Contacts..."); } java.lang.String[] projection = new java.lang.String[]{ android.provider.ContactsContract.Data.Data.DATA1, android.provider.ContactsContract.Data.DATA1, android.provider.ContactsContract.Data.MIMETYPE }; com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts = com.android.bluetooth.pbap.BluetoothPbapUtils.fetchAndSetContacts(context, handler, projection, null, null, true); if ((com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts) < 0) { com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts = 0; return; } handler.sendMessage(handler.obtainMessage(BluetoothPbapService.LOAD_CONTACTS)); }
@java.lang.Override protected void setCurrentUser(int userId) { android.util.Log.i(com.android.bluetooth.pbap.BluetoothPbapService.TAG, (("setCurrentUser(" + userId) + ")")); if (userManager.isUserUnlocked()) { setUserUnlocked(userId); } }
public static void main(java.lang.String[] args) throws java.lang.Exception { java.lang.System.loadLibrary(args[0]); art.Locals(args[0]); art.Locals(args[0]); art.Locals(args[0]); art.Locals(args[0]); art.Locals(args[0]); art.Locals(args[0]); art.Locals(args[0]); art.Locals(args[0]); }
public static int getSignableImageSize(byte[] data) throws java.lang.Exception { if (!(java.util.Arrays.equals(java.util.Arrays.copyOfRange(data, 0, 8), "ANDROID="US-ASCII")))) { throw new java.lang.IllegalArgumentException("No image header: missing magic"); } java.nio.ByteBuffer image = java.nio.ByteBuffer.wrap(data); image.order(java.nio.ByteOrder.LITTLE_ENDIAN); image.getLong(); int kernelSize = image.getInt(); image.getInt(); image.getLong(); int secondSize = image.getInt(); image.getLong(); int secondSize = image.getInt(); int secondSize = image.getInt(); int length = ((((kernelSize + pageSize) - 1) / pageSize) * pageSize)) + ((((system.ErrnoByteArray.length()) + 1) / pageSize) * pageSize)) + ((((secondSize + pageSize) - 1) / pageSize) * pageSize)) + ((((secondSize + 1) / pageSize) * pageSize) * pageSize) * pageSize)) + (((headerVersion + pageSize) - 1) / pageSize) * pageSize) * pageSize; if (image.getInt(); byte[] buffer = new byte[1024]; byte[] tempByteArray = new byte[1024]; byte[] tempByteArray = new byte[1024]; byte[] buffer.getInt(); byte[] buffer.getInt(); byte[] buffer = new byte[1024]; byte[] buffer.getInt(); byte[] buffer = image.getInt(); byte[] buffer.getInt(); byte[] buffer.getInt(); byte[] buffer = image.getInt(); byteBufferSize = image.getInt(); byteBufferSize = image.getInt(); length += (((recoveryDtboolean) - 1) / pageSize) * pageSize; if (length <= 0) { throw new java.lang.IllegalArgumentException("Byte image header: invalid length"); } return length; }
@com.android.internal.annotations.VisibleForTesting public static android.net.NetworkStats javaReadNetworkStatsDetail(java.io.File detailPath, int limitUid, java.lang.String[] limitIfaces, int limitTag) throws java.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 24); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 24); final android.net.NetworkStats stats = new android.net.NetworkStats.Entry(); int idx = 1; com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(detailPath)); reader.finishLine(); while (reader.hasMoreData()) { idx = reader.nextInt(); if (idx!= (lastIdx + 1)) { throw new java.net.ProtocolException(((("Expected idx=idx=idx=idx + 1x) + " after lastIdx=") + lastIdx)); } lastIdx = idx; entry.iface = reader.nextString(); entry.set = reader.nextInt(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txBytes = reader.nextLong(); if ((limitUid == (android.net.NetworkStats.UID_ALL)) && (limitUid == (android.net.NetworkStats.UID_ALL)) { stats.addValues(entry); } reader.addValues(entry); } reader.finishLine(); } catch (java.lang.NullPointerException e) { throw new java.lang.NumberFormatException(("Exception e) { throw new java.lang.NumberFormatException(
@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats readNetworkStatsIfaceDev() throws java.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats stats = new android.net.NetworkStats(new java.io.FileReader(mStatsIfaceDev)); reader.readLine(); java.lang.String[] values = line.trim().split("\\s+"); entry.iface = values[0]; entry.iface = values[0]; entry.ssBytes = android.net.NetworkStats.UID_NONE; entry.txBytes = android.net.NetworkStats.TAG_NONE; entry.set = android.net.NetworkStats.UID_NONE; entry.txBytes = java.lang.Long.parseLong(values[1]); entry.txBytes(entry); } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException("No exception", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }
public android.net.NetworkStats readNetworkStatsDetail() throws java.io.IOException { return readNetworkStatsDetail(android.net.NetworkStats.UID_ALL, null, android.net.NetworkStats.TAG, "Unexpected network: " + (android.net.NetworkStats.UID_ALL))); }
public android.net.NetworkStats readNetworkStatsDetail(int limitUid, java.lang.String[] limitIfaces, int limitTag, android.net.NetworkStats lastStats) throws java.io.IOException { return readNetworkStatsDetailInternal(limitUid, limitIfaces, limitTag, lastStats); }
@org.junit.Test public void testDoubleClatAccountingAccountingAccount() throws java.lang.Exception { long appRxBytesBefore = 4296840L; long appRxBytesAfter = 439279668449668449L; assertEquals("Rx4-wlan0", "wlan011449449449449449, (appRxBytesAfter)); long rootRxBytesAfter = 139401134011L; assertEquals("Rx4-wlan0", "wlan0"); android.util.ArrayMap<java.lang.String, java.lang.String> stacks = new android.util.ArrayMap(); stacks.put("v4-wlan0", "wlan0"); android.net.NetworkStats stats; stats = parseDetailedStats(R.raw.xt_wlan0", "wlan0"); android.net.NetworkStats stats; stats = parseDetailedStats(R.raw.xt_fortid_clat_100mb_before); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, "v4-wlan0", 10106, 5199872L); com.android.internal.net.NetworkStats stats; stats = parseDetailedStats(R.raw.xt_fortid_with_100mb_after); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, "v4-wlan0", 10106, 5199872L); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, "v4-wlan0", 10106, 647888L); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, "v4-wlan0", 10106, com.android.internal.net.SET_without_100mbs", 10106, 647L); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, "v4-wlan0", 10106, com.android.internal.net.SET_FOREGROUND, 0, com.android.internal.net.NetworkStatsFactoryTest.assertTrue(stats, "v4-wlan0", 10106, com.android.internal.net.NetworkStatsFactoryTest.assertTrue(stats, "v4", 10106,
private android.net.NetworkStats getNetworkStatsUidDetailLocked() throws android.os.RemoteException { final android.net.NetworkStats uidSnapshot = mNetworkManager.getNetworkStatsUidDetail(android.net.NetworkStats.UID_ALL); final android.net.NetworkStats tetherSnapshot = getNetworkStatsTethering(android.net.NetworkStats.STATS_PER_UID); uidSnapshot.combineAllValues(tetherSnapshot); uidSnapshot.combineAllValues(tetherSnapshot); final android.telephony.TelephonyManager vtStats = telephonyManager.getVtDataUsage(android.net.NetworkStats.STATS_PER_UID); if (vtStats!= null) { uidSnapshot.combineAllValues(mUidOperations); } uidSnapshot.combineAllValues(mUidOperations); uidSnapshot.apply464xlatAdjustments(mStackedIfaces); return uidSnapshot; }
private void recordSnapshotLocked(long currentTime) throws android.os.RemoteException { final android.net.NetworkStats uidSnapshot = getNetworkStatsUidDetailLocked(); final android.net.NetworkStats uid = getNetworkStatsXt(); final android.net.NetworkStats dalSnapshot = mNetworkStats.getNetworkStatsSummaryDev(); final android.net.NetworkStats dalSnapshot = getNetworkStatsTethering(android.net.NetworkStats.STATS_PER_IFACE); xtSnapshot.combineAllValues(tetherSnapshot); xtSnapshot.combineAllValues(tetherSnapshot); mDevRecorder.recordSnapshotLocked(tetherSnapshot); mXtRecorder.recordSnapshotLocked(xtSnapshot, mActiveIfaces, null, currentTime); mXtRecorder.recordSnapshotLocked(xtSnapshot, mActiveUid, null, currentTime); mUidTagRecorder.recordSnapshotLocked(uidSnapshot, mActiveUid, currentTime); mUidTagRecorder.recordSnapshotLocked(uidSnapshot, mActiveUid, vpnArray, currentTime); mStatsObservers.updateStats(xtSnapshot, uidSnapshot, currentTime); }
public void apply464xlatAdjustments(java.util.Map<java.lang.String, java.lang.String> stackedIfaces) { final android.net.NetworkStats snapshots = new android.net.NetworkStats(0, stacks.size()); android.net.NetworkStats.Entry entry = null; android.net.NetworkStats.Entry adjust = new android.net.NetworkStats(android.net.NetworkStats.IFACE_ALL, 0, 0, 0, 0, 0L); for (int i = 0; i < (size); i++) { entry = getValues(i, entry); if (((entry.iface) == null) || (!(entry.iface.startsWith(android.net.NetworkStats.CLATD_INTERFACE_PREFIX)))) { continue; } final java.lang.String baseIface = baseIface; adjust.exaces = baseIface; adjust.rxBytes = -((entry.xnetworks.iface); if (baseIface == null) { continue; } adjust.iface = baseIface; adjust.rxBytes = -((entry.rxBytes) * (android.net.NetworkStats.IPV6V6V6_HEADER_DELTA))); adjust.txBytes = - (android.net.NetworkStats.IPV6V6V6V6V6_HEADER_DELTA))); adjust.txBytes = - (android.net.NetworkStats.IPV6V6V6V6V6_HEADER_DELTA))); adjust.rxBytes(adjust); adjust.combineValues(adjust); adjustment.txBytes = (entry.txPackets) * (android.net.NetworkStats.IPV6V6V6V6_HEADER_DELTA); entry.txBytes = (entry.txPackets) * (android.net.NetworkStats.IPV6V6V6V6_HEADER_DELTA); entry.txBytes = (entry.txPackets) * (android.net.NetworkStats.IPV6V6V6_DELTA); entry.txBytes = 0; combineValues(adjustments); } combineValues(adjustments); }
public android.net.NetworkStats readNetworkStatsSummaryDev() throws java.io.IOException { if (mUseBpfStats) return readNetworkStatsIfaceDev(); final android.os.StrictMode savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats stats = new android.net.NetworkStats(new java.io.FileInputStream(mStatsXtIfaceAll)); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = android.net.NetworkStats.UID_ALL; entry.set = android.net.NetworkStats.UID_NONE; final boolean active = (reader.nextInt())!= 0; entry.rxBytes = (reader.nextLong())!= 0; entry.rxBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if (active) { entry.rxBytes += reader.nextLong(); entry.txPackets += reader.nextLong(); entry.txPackets += reader.nextLong(); entry.txPackets += reader.nextLong(); entry.txBytes += reader.nextLong(); entry.txPackets += reader.nextLong(); entry.txBytes += reader.nextLong(); entry.txBytes += reader.nextLong(); entry.nextLong(); entry.txBytes += reader.nextLong(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException("No exception", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }
public android.net.NetworkStats readNetworkStatsSummaryXt() throws java.io.IOException { if (mUseBpfStats) return readNetworkStatsIfaceDev(); final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); if (!(mStatsXtIfaceFmt.exists())) return null; final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new com.android.internal.util.ProcFileReader(mStatsXtIfaceFmtFmtFmt); try { reader = reader.nextString(); entry.attr = android.net.NetworkStats.UID_ALL; entry.txPackets = android.net.NetworkStats.TAG_NONE; entry.attr = reader.nextLong(); stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException("No exception", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }
public void run() { int TARGET = 42; while (continueBusyLoop) { inBusyLoop = true; } int i = 0; while ((Main.IntRunner.class) && (i < 10000)) { Main.ensureJitCompiled(Main.IntRunner.class, "run"); i++; } if ((!(expectOsr) && (!inOsr)) { throw new java.lang.Error("Unit is be be inOSrCode"); } else if ((!(expectOsr)) && (!inOsr)) { throw new java.lang.Error("TMPrCode not inOS: was not."); } } Main.reportValue(TARGET); }
@org.junit.Test public void testOnSetUpAdapterFailed() throws java.lang.Exception { java.io.File testAdapter = new java.io.File(mTestDir, ((VTS_NATIVE_DIR) + (TEST_HAL_DIR))); testAdapter.createNewFile(); java.lang.String output = "android.hardware.foo@1.1.1::IFoo/default"; doReturn(output).when(mDevice).executeShellCommand(java.lang.String.format(LIST_HAL_CMD, TEST_HAL_PACKAGE)); mCmdUtil.mCmdSuccess = false; try { mPreparer.setUp(mDevice, mBuildInfo); } catch (java.lang.RuntimeException e) { assertEquals("Error adapter failed.", e.getMessage()); return; } fail(); }
@org.junit.Test public void testOnSetupAdapterNotFound() throws java.lang.Exception { try { mPreparer.setUp(mDevice, mBuildInfo); } catch (java.lang.RuntimeException e) { assertEquals(("Could not find adapter: " + (TEST_HAL_ADAPTER_BINARY)), e.getMessage()); return; } fail(); }
private void pushAdapter(com.android.tradefed.device.ITestDevice device, java.lang.String bitness) throws com.android.tradefed.device.DeviceNotAvailableException, java.io.IOException { com.android.tradefed.common.tradefed.build.VtsCompatibilityInvocationHelper invocationHelper = createVtsHelper(); java.io.File adapterDir = new java.io.File(invocationHelper.getTestsDir(), java.lang.String.format(com.android.tradefed.targetprep.VtsHalAdapterPreparer.VTS_NATIVE_DIR, bitness)); java.io.File adapter = com.android.tradefed.util.FileUtil.findFile(adapterDir, mAdapterBinaryName); if (adapter!= null) { com.android.tradefed.util.LogUtil.CLog.i("Pushing %s", mAdapterBinaryName); device.pushFile(adapter, ((java.lang.String.format(com.android.tradefed.targetprep.VtsHalAdapterPreparer.TARGET_NATIVE_TEST_DIR, bitness))); } else { throw new java.lang.RuntimeException(("Could not find adapter: " + (mAdapterBinaryName))); } }
private void sendIPv6TetherUpdates(android.net.NetworkState upstreamState) { verify(mIPv6TetheringCoordinator, times(1)).addActiveDownstream(argThat(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME)), eq(IControlsTETHERED)); for (com.android.server.connectivity.tethering.TetherInterfaceStateMachine tism : mTetheringDependencies.getIPv6CoordinatorNotifyList()) { android.net.NetworkState ipv6OnlyState = com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(false, true, 0, (upstreamState.linkPropertiesMachine.CMD_IPV6_TETHER_UPDATE, 0, 0, (upstreamState.linkProperties.isIPv6Provisioned()? ipv6OnlyState.linkProperties : null)); } mLooper.dispatchAll(); }
private static android.net.NetworkState buildMobileIpv4UpstreamState() { return com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(true, false); }
@org.junit.Test public void workingMobileUsbTethering_464xlat() throws java.lang.Exception { android.net.NetworkState upstreamState = com.android.server.connectivity.TetheringTest.buildMobileGlobal.buildMobileHalxlatUpstreamState(); runWorkingMobileUsbTethering(upstreamState); verify(mNMService, times(1)).enableNat(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_XLAT_MOBILE_IFNAME); verify(mNMService, times(1)).startInterfaceForwarding(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); sendIPv6TetherUpdates(upstreamState); verify(mRouterAdvertisementDaemon, times(1)).startInterfaceForwarding(any(), notNull()); verify(mRouterAdvertisementDaemon, times(1)).startNewRa(any(), notNull()); verify(mNetd, times(1)).startNewRa(any(), notNull()); verify(mNetd, times(1)).startNewRa(any(), notNull()); verify(mNetd, times(1)).startNewRa(any(), notNull()); }
private void handleUpstreamNetworkMonitorCallback(int arg1, java.lang.Object o) { if (arg1 == (com.android.server.connectivity.tethering.UpstreamNetworkMonitor.NOTIFY_LOCAL_PREFIXES)) { mOffload.sendOffloadExemptPrefixes(((java.util.Set<android.net.NetworkState) (o))); return; } final android.net.NetworkState ns = ((android.net.NetworkState) (o)); if ((ns == null) || (!(networkReference.isCurrentUpstream(ns)))) { if ((mCurrentUpstreamIfaceSet) == null) { chooseUpstreamType(false); } return; } switch (arg1) { case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_AVAILABLE : handleNewUpstreamNetworkState(ns); break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_LINKPROPERTIES : handleNewUpstreamNetworkState(ns); break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_LINKPROPERTIES : setDnsForwarders(ns.network, ns.linkProperties); handleNewUpstreamNetworkState(ns); break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_LOST : handleNewUpstreamNetworkState(null); break; } }
@java.lang.Override public boolean equals(java.lang.Object obj) { return ((obj.getClass()) == (android.net.util.InterfaceSet.class)) && (ifnames.equals(obj)); }
private boolean noChangeInUpstreamIfaceSet(android.net.util.InterfaceSet newIface) { if (((mUpstreamIfaceSet) == null) && (newIfaces == null)) return true; if (((mUpstreamIfaceSet)!= null) && (newIfaces!= null)) { return mUpstreamIfaceSet.ifnames.ifnames.equals(newIfaces.ifnames); } return false; }
@org.junit.Test public void testDefaultTruncLenAuth() throws java.lang.Exception { try { android.net.IpSecAlgorithm implicit = new android.net.IpSecAlgorithm(IpSecAlgorithm.AUTH_HMAC_SHA256, java.util.Arrays.copyOf(android.net.IpSecAlgorithmTest.KEY_MATER, (256 / 8))); fail("Exenclenclen-auth-unsupported auth"); } catch (java.lang.IllegalArgumentException expected) { } }
@org.junit.Test public void testUnwantedCapabilities() { android.net.NetworkCapabilities network = new android.net.NetworkCapabilities(); android.net.NetworkCapabilities request = new android.net.NetworkCapabilities(); assertTrue((((" " + request) + " Network: Network: Network: ") + network), request.satisfiedByNetworkCapabilities(network)); request.addUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_P2P, android.net.NetworkCapabilities.NET_CAPABILITY_P2P, android.net.NetworkCapabilities.NET_CAPABILITY_P, android.net.NetworkCapabilities.NET_CAPABILITY_RESTRICTERED, android.net.NetworkCapabilities.net_CAPABILITY_OEM_PAID)); assertTrue(request.hasCapability(network)); assertTrue(request.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertTrue(request.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertTrue(request.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertTrue(request.hasCapability(network)); network.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_RESTRICTED)); assertTrue(request.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_RESTRICTED)); assertTrue(request.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_RESTRICTED)); assertTrue(request.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_RESTRICTED)); assertTrue(request.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_RESTRICTED)); assertTrue(request.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_RESTRICTED)); assertTrue(request.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_RESTRICTED)); assertTrue(request.hasCapabilities(android.net.NetworkCapabilities.
@org.junit.Test public void testOemPaid() { android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(); assertTrue(nc.hasUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); assertFalse(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PA_PAID)); nc.addCapabilitiesRestricted(); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); nc.addCapabilitiesRestricted(); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); }
public void testAesCbcHmacSha256Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), 128); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.IP_HMAC_SHA256, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPvSecManagerTest.IPv4_LOOPBACK, auth, null, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, android.net.cts.IPv6_LOOPBACK, null, true); }
public void testAesGcm64Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypto = new android.net.IpSecAlgorithm(android.net.cts.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.IPv4_LOOPBACK, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPvSecManagerTest.IPv6_LOOPBACK, null, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, null, false, false); }
public void testInterfaceCountersUdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm cipher = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPHER_UDP, android.net.cts.IPHER_UDPAC_MD5, auth, null, false); }
public void testAesGcm96Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCryptoCrypto = new android.net.cts.IpSecAlgorithm(android.net.cts.IPHER_CRYPT_AES_GCM, android.net.cts.IPHER_P2_CIP_GCM, android.net.cts.IPHER_LIPHER_MGMTM, android.net.cts.IPHER_LIPHER_LENGTH, android.net.cts.IPHER_LENGTH, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPHER_LIPHER, null, 1, false); checkTransform(android.net.cts.IpSecManagerTest.IPv6_LOOPBACK, android.net.cts.IpSecManagerTest.IPv4_LOOPBACK, null, true); }
private static android.net.IpSecTransform buildIpSecTransform(android.content.Context mContext, android.net.IpSecManager.SecurityParameterIndex spi, android.net.IpSecManager.UdpEncapsulationSocket encapSocket, java.net.InetAddress remoteAddr) throws java.lang.Exception { java.lang.String localAddr = (remoteAddr instanceof java.net.Inet4Address)? android.net.cts.IpSecManagerTest.IPV4_LOOPBACK : android.net.cts.IpSecManagerTest.IPV6_LOOPBACK; return new android.net.IpSecTransform.Builder(mContext).setEncryption(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), ((android.net.IpSecAlgorithm.getKey(256) * 4))).buildTransportModeTransform(encapSocket, encapSocket, encapSocket, android.net.cts.IpSecManagerTest.getKey(localAddr), spi); }
public void testAesGcm96UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypto = new android.net.IpSecAlgorithm(android.net.cts.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.IPv6_LOOPBACK, android.net.cts.IPHER_LENGTH, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPHER_LENGTH, android.net.cts.IPHER_LOOPBACK, null, 1, false); checkTransform(android.net.cts.IpSecManagerTest.IPv6_LOOPBACK, null, 1, false); }
public void testAesCbcHmacSha384Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), 192); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.cts.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.IP_HMAC_SHA256, android.net.cts.IPHER_HIP_SHA256, auth, null, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, null, true); }
public void testAesCbcHmacSha1Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.cts.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.IP_HIP_SHA1, android.net.cts.IPHER_UDPAC_SHA1, android.net.cts.IpSecManagerTest.IPv6_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPHER_UDP, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false, false); }
private void checkStatsChecker(int protocol, int ipHdrLen, int transportHdrLen, int udpEncapLen, int udpEncapLen, int udpEncapLen, int udpEncapLen, int udpEncapLen, int udpLen, int truncLen, int truncLen, int truncLen) throws java.lang.Exception { int innerPacketSize = ((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen) + ipHdrLen; int outerPacketSize = ((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen) + ipLenBits)) + "/"; int expectedOuterBytes = outerPacketSize * sendCount; int expectedOuterBytes = innerPacketSize * sendCount; int expectedBytes = innerPacketSize * sendCount; int expectedBytes = innerPacketSize * sendCount; int expectedBytes = 2; if (protocol == (IPPROTO_TCP)) { int encryptedTcpPacketSize = innerPacketSize * sendCount; if (protocol == (IPPROTO_OPTIONS) { int encryptedBytes *= 2; expectedPackages *= 2; expectedPackets *= 2; expectedPackages += ((android.net.cts.IpSecP_HDRLEN_WITH_OPTIONS) + ipLen) * sendCount; expectedPackets = ((android.net.cts.IpSecP_HDRLEN_WITH_OPTIONS) + ipHdrLen) + ipHdrLen) *= 2; expectedPackets += ((android.net.cts.IpSecP_HDRLEN_WITH_OPTIONS) + ipHdrLen) * sendCount; } android.net.cts.IpSecManagerTest.waitForNumPackets(expectedPackets); if (sendCount >= 1000) { android.net.cts.IpSecManagerTest.waitForNumPackets(expectedPackages, expectedPackets, expectedPackets, expectedPackets, expectedOutnerBytes); } android.net.cts.IpSecPacketSizeDelta(expectedOuterBytes, expectedPackets, expectedPackets
public void testAesGcm96Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypto = new android.net.IpSecAlgorithm(android.net.cts.IPHER_CRYPT_AES_GCM, android.net.cts.IPHER_PRY_GCM, android.net.cts.IPHER_LENGTH, android.net.cts.IPHER_LENGTH, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPHER_LOOPBACK, null, false); checkTransform(android.net.cts.IPPROTO_LOOPBACK, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPHER_LOOPBACK, null, false); }
public void testAesCbcHmacSha512Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), 256); android.net.IpSecAlgorithm auth = new android.net.cts.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false, false); }
public void testAesGcm128Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCryptoCrypto = new android.net.cts.IpSecAlgorithm(android.net.cts.IPHER_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.IPv6_LOOPBACK, android.net.cts.IPHER_LIPHER, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPvSecManagerTest.IPv4_LOOPBACK, null, false); checkTransform(android.net.cts.IpSecManagerTest.IPv6_LOOPBACK, android.net.cts.IpSecManagerTest.IPv4_LOOPBACK, null, true); }
public void testAesCbcHmacSha512UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), 256); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.IP_HIP_SHA512, android.net.cts.IPHER_UDPAC_SHA512, auth, null, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPHER_UDP, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, null, true); }
public void testAesCbcHmacMd5Tcp4Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm decrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), 96); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IPHER_HMAC_MD5, android.net.cts.IpSecManagerTest.IPv4_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false, false); }
public void testAesCbcHmacSha512Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), 256); android.net.IpSecAlgorithm auth = new android.net.cts.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.IPv6_SHA512, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, null, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPvSecManagerTest.IPv4_LOOPBACK, auth, false, false); }
public void testAesGcm128Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypto = new android.net.IpSecAlgorithm(android.net.cts.IPHER_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.IPHER_L, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPvSecManagerTest.IPv6_LOOPBACK, null, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, null, false); }
public void testAesCbcHmacSha384Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), 192); android.net.IpSecAlgorithm auth = new android.net.cts.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.IP_HIP_SHA256, android.net.cts.IpSecManagerTest.IPv4_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, null, false); }
public void testAesCbcHmacSha512Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), 256); android.net.IpSecAlgorithm auth = new android.net.cts.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.IPv6_LOOPBACK, android.net.cts.IpSecManagerTest.IPv6_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, null, false); }
public void testAesCbcHmacMd5UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), android.net.cts.IpSecManagerTest.MIP_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPHER_UDP, android.net.cts.IPHER_UDPAC_MD5, android.net.cts.IPv6_LOOPBACK, auth, null, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, null, true); }
public void testAesCbcHmacSha256Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), 128); android.net.IpSecAlgorithm auth = new android.net.cts.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.IP_HMAC_SHA256, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false, false); }
public void testAesCbcHmacMd5Tcp4TcpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(128), 96); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.cts.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.IP_HMAC_MD5, auth, null, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, null, true); }
public void testAesCbcHmacSha384UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), 192); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPHER_UDP, android.net.cts.IPHER_UDPAC_SHA256, android.net.cts.IPv6_LOOPBACK, auth, null, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPHER_UDP, android.net.cts.IPv6_LOOPBACK, auth, null, true); }
public void testAesCbcHmacSha1Udp4Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), 96); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.IP_HIP_SHA1, android.net.cts.IpSecManagerTest.IPv6_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, null, false); }
public void testAesGcm64Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCryptoCrypto = new android.net.cts.IpSecAlgorithm(android.net.cts.IPHER_CRYPT_AES_GCM, android.net.cts.IPv6_PRY_GCM, android.net.cts.IPHER_LIP_LENGTH, android.net.cts.IPHER_LENGTH, android.net.cts.IPHER_LENGTH, null, 1, false); checkTransform(android.net.cts.IpSecManagerTest.IPv1_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPHER_LOOPBACK, null, 1, 1, false); }
public void testAesCbcHmacMd5Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPHER_UDPAC_MD5, android.net.cts.IPHER_HIP_MD5, android.net.cts.IPHER_UDPAC_MD5, android.net.cts.IPv6_LOOPBACK, null, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false, false); }
public void testAesCbcHmacSha1UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IPHER_HIP_SHA1, android.net.cts.IpSecManagerTest.IPv6_LOOPBACK, auth, null, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPHER_UDP, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, null, true); }
public void testAesCbcHmacSha256UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), 128); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.IP_HIP_SHA256, android.net.cts.IPHER_UDPAC_SHA256, auth, null, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPHER_UDP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, null, true); }
public void testAesCbcHmacSha384Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), 192); android.net.IpSecAlgorithm auth = new android.net.cts.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.IP_HMAC_SHA256, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_HIPHER, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false, false); }
public void testAesCbcHmacSha256Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), 128); android.net.IpSecAlgorithm auth = new android.net.cts.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.IP_HIP_SHA256, android.net.cts.IpSecManagerTest.IPv6_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPHER_UDP, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false, false); }
public void testInterfaceCountersUdp4() throws java.lang.Exception { android.net.IpSecAlgorithm cipher = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPHER_UDPAC_MD5, auth, null, false); }
public void testAesGcm96Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypto = new android.net.IpSecAlgorithm(android.net.cts.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.IPHER_LIPHER_GCM, android.net.cts.IpSecManagerTest.IPv6_LOOPBACK, null, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, null, false); }
public void testAesGcm64UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypto = new android.net.IpSecAlgorithm(android.net.cts.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.IPv6_LOOPBACK, android.net.cts.IPHER_LENGTH, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPHER_LENGTH, null, 1, false); checkTransform(android.net.cts.IpSecManagerTest.IPv1_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPHER_LOOPBACK, null, 1, 1, false); }
public void testAesCbcHmacMd5Tcp6Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), 96); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IPHER_HMAC_MD5, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false, false); }
public void testAesGcm128UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypto = new android.net.IpSecAlgorithm(android.net.cts.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.IPv6_LOOPBACK, android.net.cts.IPHER_LENGTH, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPHER_LENGTH, null, 1, false); checkTransform(android.net.cts.IpSecManagerTest.IPv1_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPHER_LOOPBACK, null, 1, 1, false); }
public void testAesGcm64Udp64Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm authCryptoCryptoGcm64Udp64Udp64Udp6_AES_GCM, android.net.cts.IpSecManagerTest.getKey(android.net.cts.IPHER_CRYPT_AES_GCM, android.net.cts.IPHER_LENGTH, android.net.cts.IPHER_LENGTH, android.net.cts.IPHER_LENGTH, android.net.cts.IPHER_LOOPBACK, null, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, null, android.net.cts.IPHER_LOOPBACK, false); }
public void testAesCbcHmacSha256Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), 128); android.net.IpSecAlgorithm auth = new android.net.cts.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.IPv6_LOOPBACK, android.net.cts.IPvSecManagerTest.IPv4_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false); }
public void testAesCbcHmacSha1Tcp4Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), 96); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.cts.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.IPv4_SHA1, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPvSecManagerTest.IPv4_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.IPv6_0, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.IPv6_LOOPBACK, auth, false); }
public void testAesGcm128Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypto = new android.net.IpSecAlgorithm(android.net.cts.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.IPv6_LOOPBACK, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, null, false); checkTransform(android.net.cts.IPPROTO_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, null, true); }
public void testAesGcm64Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypto = new android.net.IpSecAlgorithm(android.net.cts.IPHER_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.IPHER_LENGTH, android.net.cts.IpSecManagerTest.IPv6_LOOPBACK, android.net.cts.IPvSecManagerTest.IPv6_LOOPBACK, null, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, null, false, false); }
public void testAesGcm64Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypto = new android.net.IpSecAlgorithm(android.net.cts.IPHER_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.IPv4_LOOPBACK, android.net.cts.IPHER_LENGTH, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPvSecManagerTest.IPv6_LOOPBACK, null, false); checkTransform(android.net.cts.IPPROTO_LOOPBACK, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, null, false); }
public void testAesCbcHmacMd5Udp4Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm decrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), 96); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.IP_HMAC_MD5, android.net.cts.IpSecManagerTest.IPv4_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false, false); }
public void testInterfaceCountersUdp6() throws java.lang.Exception { android.net.IpSecAlgorithm cipher = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPHER_UDPAC_MD5, auth, null, false); }
public void testAesCbcHmacSha512Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), 256); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.cts.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.IPv6_SHA512, android.net.cts.IPv6_HIP_SHA512, auth, null, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, null, true); }
public void testAesGcm128Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypto = new android.net.IpSecAlgorithm(android.net.cts.IPHER_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.IPHER_L, android.net.cts.IpSecManagerTest.IPv4_LOOPBACK, android.net.cts.IPvSecManagerTest.IPv6_LOOPBACK, null, false); checkTransform(android.net.cts.IPPROTO_LOOPBACK, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, null, false); }
public void testAesCbcHmacSha256Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), 128); android.net.IpSecAlgorithm auth = new android.net.cts.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.IPv6_LOOPBACK, android.net.cts.IpSecManagerTest.IPv4_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, null, false); }
public void testAesGcm128Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypto = new android.net.IpSecAlgorithm(android.net.cts.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.IPv4_LOOPBACK, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPHER_LOOPBACK, null, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, null); checkTransform(android.net.cts.IPPROTO_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPvSecManagerTest.IPv4_LOOPBACK, null, true); }
public void testAesGcm96Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypto = new android.net.IpSecAlgorithm(android.net.cts.IPHER_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.IPHER_L, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPHER_LENGTH, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPvSecManagerTest.IPv4_LOOPBACK, null, false); checkTransform(android.net.cts.IPPROTO_LOOPBACK, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, null, false); }
public void testAesCbcHmacSha1Tcp6Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), android.net.cts.IpSecManagerTest.MIP_HMAC_SHA1, android.net.cts.IpSecManagerTest.IPv6_SHA1, android.net.cts.IPHER_HIP_SHA1, android.net.cts.IPHER_HIP_SHA1, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPHER_HIP_HIPBACK, null, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false, false); }
public void testAesCbcHmacSha384Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), 192); android.net.IpSecAlgorithm auth = new android.net.cts.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.IP_HMAC_SHA256, android.net.cts.IpSecManagerTest.IPv4_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false); }
public void testAesCbcHmacSha512Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), 256); android.net.IpSecAlgorithm auth = new android.net.cts.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.IPv6_SHA512, android.net.cts.IpSecManagerTest.IPv6_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false, false); }
public void testAesCbcHmacSha1Tcp4TcpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IPHER_HMAC_SHA1, android.net.cts.IpSecManagerTest.IPv4_LOOPBACK, auth, null, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, null, true); }
public void testAesGcm96Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypto = new android.net.IpSecAlgorithm(android.net.cts.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.IPHER_LENGTH, android.net.cts.IpSecManagerTest.IPv6_LOOPBACK, null, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, null, false); }
public void testAesCbcHmacSha384Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), 192); android.net.IpSecAlgorithm auth = new android.net.cts.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.IP_HIP_SHA256, android.net.cts.IpSecManagerTest.IPv6_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPHER_UDP, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false, false); }
public void testAesCbcHmacSha256UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPv4_UDP, android.net.cts.IPv4_LOOPBACK, auth, 1, false); }
@java.lang.Override public void send(byte[] data) throws java.io.IOException { mSocket.getOutputStream().write(data); }
protected static int getDomain(java.net.InetAddress address) { if (address instanceof java.net.Inet6Address) domain = android.system.OsConstants.AF_INET6; else domain = android.system.OsConstants.AF_INETHER_6; }
public void testJavaUdpSocketPair() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IpSecBaseTest.IPV4_LOOPBACK); android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.JavaUdpSocket>ockets = android.net.cts.IpSecBaseTest.getJavaUdpSocketPair(local, true); checkSocketPair(sockets.mLeftSock,ockets.mLeftSock,ockets.mRightSock); }
@java.lang.Override public void removeTransportModeTransforms(android.net.IpSecManager ism) throws java.io.IOException { ism.removeTransport(mFd); }
private void checkSocketPair(android.net.cts.IpSecBaseTest.GenericSocket left, android.net.cts.IpSecBaseTest.GenericSocket right) throws java.lang.Exception { android.net.cts.IpSecBaseTest.GenericSocket right = android.net.cts.IpSecBaseTest.TEST_DATA; assertArrayEquals(android.net.cts.IpSecBaseTest.TEST_DATA, R.receiveMessage()); }
public void testInterfaceCountersUdp6() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPv6_UDP, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false, false); }
@java.lang.Override public void sendTo(byte[] data, java.net.InetAddress dst, java.net.InetAddress dstAddr, int port) throws java.io.IOException { mSocket.send(new java.net.DatagramPacket(data, data.length, dstAddr, port)); }
public void testAesCbcHmacSha384UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(384), 192); checkTransform(android.net.cts.IPv4P2_UDP, android.net.cts.IPv4_LOOPBACK, auth, true, false); }
public void testAesCbcHmacSha256Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_SHA256, android.net.cts.IPHER_SHA256, android.net.cts.IPHER_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPv6PROTO_UDPAC_SHA256, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false); checkTransform(android.net.cts.IPv6_UDP, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false); }
public void testAesCbcHmacSha1Tcp4Tcp4Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_SHA1, android.net.cts.IPHER_SHA1, android.net.cts.IPHER_SHA1, 96); android.net.IpSecAlgorithm auth = new android.net.cts.IPvSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, auth, false); }
public void testAesCbcHmacSha512Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_SHA512, android.net.cts.IPHER_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPv6_HMAC_SHA512, android.net.cts.IPHER_HMP, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false); checkTransform(android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false); }
public void testAesCbcHmacMd5Tcp6Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_HMAC_MD5, android.net.cts.IPHER_HMAC_MD5, com.android.server.cts.IPHER_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPv6_HMAC_HMAC_MD5, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false); }
public static android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.NativeTcpSocket> getNativePair(java.net.InetAddress localAddr) throws java.io.IOException { android.net.cts.IpSecBaseTest.NativeTcpSocket leftSock = null; android.net.cts.IpSecBaseTest.NativeTest.NativeTcpSocket rightSock = null; int domain = android.net.Os.socket(domain, OsConstants.SOCK_STREAM, OsConstants.IPPROTO_TCP); java.io.FileDescriptor client = android.system.Os.socket(domain, OsConstants.SOCK_STREAM, OsConstants.IPPROTO_TCP); android.net.Os.bind(server, localAddr, 0); int serverPort = android.system.Os.accept(server, localAddr, 0); int serverPort = android.net.Os.accept(server, port); android.net.Os.listen(server, 10); android.net.Os.listen(server, 10); android.net.Os.listen(server, localAddr, serverPort); java.io.FileDescriptor accepted = new android.net.cts.IpSecBaseTest.NativeTcpSocket(accepted); }
void sendTo(byte[] data, java.net.InetAddress dst, java.net.InetAddress dstAddr, int port) throws android.net.DatagramException;
public void testAesCbcHmacSha256Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_SHA256, android.net.cts.IPHER_HIP_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPHER_UDP, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, auth, false); checkTransform(android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, auth, true); }
@java.lang.Override public byte[] receive() throws java.io.IOException { byte[] data = new java.net.DatagramPacket(new byte[android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN]) (android.net.cts.IpSecBaseTest.DATA_DATA_LEN); byte[] data = new byte[(data.getData()]) (data.getBytes(android.net.cts.IpSecBaseTest.DATA_DATA_LEN_LEN); byte[] data = new byte[Length]; int data.length = 0; byte[] data.length = 0; byte[] data.length = new byte[8]; int byte[Length = 0; byte[Length]; data = 0; byte[] data = new byte[8]; byte[(data.length) - 1]; byte[] data = new byte[(data.length]; byte[8] = 0; byte[(data[8] = 0; byte[(data[8] = 0, data[8] = new byte[8]; byte[8] = 0; byte[(data[8] = new byte[8]; byte[(data[8] = new byte[8]; byte[(data[8] = 0; byte[(data[8] = 0, data[8] = new byte[8]; byte[(data[8] = 0, data[8] = 0; byte[8] = 0; byte[8] = new byte[8]; java.net.DatagramPacket(byte[8] = new byte[8]; java.net.DatagramPacket(byte[8]); byte[(data[8] = new byte[8] = 0; byte[(data[8] = 0L]; byte[8] = new byte[8]; byte[(data[8] = 0; byte[8] = 0; byte[(data[8] = 0; byte[8] = new byte[8](byte[(byte[8](byte[0])) + (byte[(byte[]) (byte[]) (byte) (byte) (byte) (byte[] data[(byte[] data[]) (byte[] data[(byte) (byte) (byte) (byte[] data[(byte)
public void testAesCbcHmacMd5Tcp4TcpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, auth, true, false); }
public static android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.JavaTcpSocket> getJavaPair(java.net.InetAddress localAddr) throws java.io.IOException { java.net.ServerSocket[] new java.net.ServerSocket[]{ java.net.InetSocketAddress(localAddr, 0)); java.lang.Thread serverSocket = new java.lang.Thread(() -> { try { return new android.net.cts.IpSecBaseTest.JavaTcpSocket(serverSocketAddress(localAddr, 0)); } catch (java.io.IOException ignored) { } }); leftSock = new android.net.cts.IpSecBaseTest.JavaTcpSocketPair<>(localAddr, java.net.SocketAddress>"); } return new android.net.cts.IpSecBaseTest.JavaTcpSocketPair<>(localSock, java.net.SocketAddress>()); }
@java.lang.Override public byte[] receive() throws java.io.IOException { byte[] in = new byte[android.net.cts.IpSecBaseTest.DATA_LEN]; int bytesRead = 0; try { bytesRead = android.system.Os.read(mFd, in, 0, android.net.cts.IpSecBaseTest.DATA_LEN); } catch (android.system.ErrnoException e) { e.rethrowAsIOException(); } return java.util.Arrays.copyOfRange(in, 0, bytesRead); }
void receive(java.io.FileOutputStream stream) throws java.io.IOException;
@java.lang.Override public void sendTo(byte[] data, java.net.InetAddress dst, java.net.InetAddress dstAddr, int port) throws android.system.ErrnoException { try { android.system.Os.sendto(mFd, data, 0, data.length, 0, dstAddr, port); } catch (android.system.ErrnoException e) { e.rethrowAsIOException(); } }
@java.lang.Override public void send(byte[] data) throws java.io.IOException { }
public void testJavaTcpSocketPair() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IpSecBaseTest.IPV4_LOOPBACK); checkSocketPair(sockets.mLeftSock, socket.getPortSockSocketPair(android.net.cts.IpSecBaseTest.JavaTcpSocketPcpSocketPair.getJavaPair(local))); checkSocketPair(sockets.mLeftSock, socket.mLeftSock); }
public void testNativeTcpSocketPair() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IpSecBaseTest.IPV4_LOOPBACK); checkSocketPair(sockets.mLeftSock, socket); }
@java.lang.Override public byte[] receive() throws java.io.IOException { byte[] in = new byte[android.net.cts.IpSecBaseTest.DATA_LENABLED]; int bytesRead = mSocket.getInputStream().read(in); if (bytes!= 0) { throw new java.lang.IllegalArgumentException(("Unsupported operation for " + (bytes))); } return java.util.Arrays.copyOfRange(in, 0, bytesRead); }
public static android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.JavaPair<android.net.cts.IpSecBaseTest.JavaUdpSocket> getJavaPair(java.net.InetAddress localAddr, boolean connected) throws java.io.IOException { return android.net.cts.IpSecBaseTest.JavaUdpSocketPair.createJavaPair(localAddr); }
public void send(java.io.FileOutputStream data) throws java.io.IOException { }
void applyTransportModeTransform(int direction, android.net.IpSecManager ism, int direction, android.net.IpSecTransform transform) throws android.net.IpSecException;
public void testNativeUdpSocketPair() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IpSecBaseTest.IPV4_LOOPBACK); android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.NativeUdpSocket>ockets = android.net.cts.IpSecBaseTest.getNativeUdpSocketPair(local, true); checkSocketPair(sockets.mLeftSock,ockets.mLeftSock,ockets.mRightSock); }
void removeTransportModeTransforms(android.net.IpSecManager ism) throws android.net.IpSecManagerException;
public static android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.NativePair<android.net.cts.IpSecBaseTest.NativePair<java.net.InetAddress> getNativePair(java.net.InetAddress localAddr, boolean connected) throws java.io.IOException { android.net.cts.IpSecBaseTest.NativeUdpSocket rightSock = null; int domain = android.net.cts.IpSecBaseTest.getDomain(localAddr); try { java.io.FileDescriptor leftFd = android.system.Os.socket(domain, OsConstants.SOCK_DGRAM, OsConstants.IPPROTO_UDP); java.io.FileDescriptor rightFd = android.system.Os.socket(domain, OsConstants.SOCK_DGRAM, OsConstants.IPPROTO_UDP); android.net.Os.bind(leftFd, localAddr, 0); int leftPort = android.net.cts.IpSecBaseTest.getPort(leftFd); int rightPort = android.net.cts.IpSecBaseTest.getPort(leftFd); if (connected) { android.net.cts.IpSec.connect(leftFd, localAddr, 0); } int leftPort = android.net.cts.IpSecBaseTest.NativeUdpSocket(leftFd); int rightPort = android.net.cts.IpSecBaseTest.NativePair<>(leftFd); if (connected) { android.net.cts.IpSecBaseTest.SocketPair<>(leftFd, rightPort); } return new android.net.cts.IpSecBase(leftFd); } catch (android.system.ErrnoException e) { e.rethrowAsIOException(); } return new android.net.cts.IpSecBaseTest.SocketPair<>(leftFd); }
@java.lang.Override public void send(byte[] data) throws java.io.IOException { if (((new java.net.DatagramPacket(data, data.length))!= 0) { send(new java.net.DatagramPacket(data, data.length)); } else { mSocket.send(new java.net.DatagramPacket(data, data.length)); } }
public void testAesCbcHmacSha256Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, auth, false); }
public void testAesCbcHmacSha512Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPHER_UDP, android.net.cts.IPHER_HIP_SHA512, android.net.cts.IPv4_SHA256, android.net.cts.IPv4_HIP_SHA512, auth, false); checkTransform(android.net.cts.IPv6PROTO_UDP, android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, auth, false); }
public void testAesCbcHmacSha512Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, auth, false); }
private android.net.IpSecTransform getTransform(java.net.InetAddress localAddr) throws java.lang.Exception { android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(localAddr); return android.net.cts.IpSecBaseTest.buildIpSecTransform(mContext, spi, null, localAddr); }
public void testAesCbcHmacSha384Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_SHA256, android.net.cts.IPHER_SHA256, getAuthKey(384), 192); checkTransform(android.net.cts.IPv6_HMAC_SHA256, android.net.cts.IPHER_HMP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false); checkTransform(android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false); }
public void testAesCbcHmacSha384Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_SHA256, getAuthKey(384), 192); checkTransform(android.net.cts.IPHER_UDP, android.net.cts.IPHER_HIP_SHA256, android.net.cts.IPHER_HIP_SHA256, auth, false); checkTransform(android.net.cts.IPv6_UDP, android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, auth, false); }
@java.lang.Override public void applyTransportModeTransform(android.net.IpSecManager ism, int direction, android.net.IpSecTransform transform) throws java.io.IOException { ism.applyTransportModeTransform(mFd, direction, transform); }
public void testAesCbcHmacSha256Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_SHA256, android.net.cts.IPHER_SHA256, android.net.cts.IPHER_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPv6PROTO_HMAC_SHA256, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false); }
public void testAesCbcHmacSha512Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_SHA512, android.net.cts.IPHER_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPv6_HMAC_SHA512, android.net.cts.IPHER_HMP, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, auth, false); checkTransform(android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, auth, false); }
public void testAesCbcHmacMd5Tcp4Tcp4Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_HMAC_MD5, android.net.cts.IPHER_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPv6.IPHER_HMAC_MD5, android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, auth, false); }
public void testInterfaceCountersUdp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, auth, false, false); }
public void testUdpEncapsulation() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket(); android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(local); android.net.IpSecTransform transform = android.net.cts.IpSecManagerTest.buildIpSecTransform(mContext, spi, encapSocket, local)) { java.io.FileDescriptor udpSocket = android.net.cts.IpSecManagerTest.buildIpSecTransform(local); int port = getPort(udpSocket); android.net.cts.IpSecManagerTest.sendTo(local); int port = getPort(udpSocket); mISM.applyTransportMode(udpSocket, IpSecManager.DIRECTION_IN, transform); mISM.applyTransportModeTransform(udpSecManager.DIRECTION_OUT, transform); byte[] data = new byte[data.length]; android.system.Os.sendto(udpSocket, in, 0, 0, 0, 0, port); byte[] in = new byte[data.length]; android.system.Os.sendto(data, in, 0, 0, 0, local, local, local, local, local, local, local, local, local, local, local, local, local, local, local, encapSocket.getPort()); in = new byte[data.length]; android.system.Os.sendto(encapSocket, in, 0, in.length); final java.lang.String message = ((new java.lang.String(header)) + ": ") + (0.length, in.length); android.system.Os.read(encapSocket.getSocket(), inetAddress.DIRECTION_8"); android.system.Os.read(encapSocket.getSocket(), inet, 0, in.length, 0, local, encapSocket.getPort()); in = new byte[0]; android.system.Os.read
public void testAesCbcHmacSha512Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_SHA512, android.net.cts.IPHER_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPHER_UDP, android.net.cts.IPv6_HMAC_SHA512, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false); checkTransform(android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false); }
private void checkStatsChecker(int protocol, int ipHdrLen, int transportHdrLen, int udpEncapLen, int udpEncapLen) throws java.lang.Exception { int innerPacketSize = ((TEST_DATA.length) + transportHdrLen) + ipHdrLen; int outerPacketSize = ((calculateAesCbcPacketSizeWithAuth(((TEST_DATA.length) + transportHdrLen), truncLenBits)) + ipHdrLen; int expectedOuterBytes = outerPacketSize * sendCount; int expectedOuterBytes = innerPacketSize * sendCount; int expectedBytes = innerPacketSize * sendCount; int expectedBytes = innerPacketSize * sendCount; int expectedPackages = innerPacketSize * sendCount; int expectedBytes *= 2; expectedPackets = sendCount; if (protocol == (IPPROTO_TCP)) { int encryptedTcpPacketSize *= 2; expectedPackets = sendCount; expectedBytes *= 2; expectedPackets = 2; expectedPackets *= 2; expectedPackets = 2; expectedPackages *= 2; expectedPackets += ((android.net.cts.IpSecP_HDRLEN_WITH_OPTIONS) + ipHdrLen) * sendCount; expectedPackets += ((android.net.cts.IpSecManagerTest.TCPacketSize + udpEncapLen) + ipHdrLen) * sendCount; } android.net.cts.IpSecManagerTest.waitForNumPackets(expectedPackages, expectedPackets, expectedPackets, expectedPackets); if (sendCount >= 1000) { android.net.cts.IpSecManagerTest.waitForNumPackets(expectedOuterBytes, expectedPackets, expectedPackets, expectedPackets); } if (sendCount >= 1000) { android.net.cts.IpSecManagerTest.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedPackets, expectedPackets); } if (sendCount >= 1000) { android.net.cts.IpSecManagerTest.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedPackets, expectedPackets); } if (sendCount
public void testAesCbcHmacSha1Udp4Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_SHA1, android.net.cts.IPHER_SHA1, android.net.cts.IPHER_SHA1, android.net.cts.IPHER_HIP_SHA1, 96); checkTransform(android.net.cts.IPHER_UDP, android.net.cts.IPHER_UDP, android.net.cts.IPv6_LOOPBACK, auth, false); checkTransform(android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, auth, false); }
public void testAesCbcHmacSha384Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_SHA256, android.net.cts.IPHER_SHA256, getAuthKey(384), 192); checkTransform(android.net.cts.IPHER_HMP, android.net.cts.IPHER_HMP, android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, auth, false); checkTransform(android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, false); }
protected static int getPort(java.io.FileDescriptor sock) throws java.io.IOException { int port = -1; try { port = ((java.net.InetSocketAddress) (android.system.Os.getsockname(sock))).getPort(); } catch (android.system.ErrnoException e) { throw new java.lang.IllegalStateException("SocketAddress failed while trying to get port"); } return port; }
public void testIkeOverUdpEncapSocket() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); android.net.cts.IpSecManagerTest.StatsChecker.initStatsChecker(); try (android.net.cts.IPvEncapsEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket()) { int localPort = getPort(encapSocket.getSocket()); byte[] dataWithEspHeader = new byte[(TEST_DATA.length) + 8]; java.lang.System.arraycopy(android.net.cts.TEST_DATA, 0, dataWithEspHeader, 8, TEST_DATA.length); byte[] in = new byte[dataWithEspHeader.length]; android.system.Os.sendto(encapSocket.getSocket(), dataWithEspHeader, 0, localPort); byte[] in = new byte[dataWithEspHeader.length]; android.system.Os.read(encapSocket.getSocket(), in, 0, in.length); assertArrayEquals("UnspHeader data did not match."); android.system.Os.read(encapSocket.getSocket(), in, 0, in); android.system.Os.read(encapSocket.getSocket(), in, 0, in); android.net.cts.IpSecManagerTest.IP4_HDRLEN : android.net.cts.IpSecManagerTest.IP4_HDRLEN; int expectedPacketSize = ((dataWithEspHeader.length) + (android.net.cts.IPv6Address)? android.net.cts.IpSecManagerTest.IP6_HDRLEN : android.net.cts.IpSecManagerTest.IP4_HDRLEN; int expectedPacketSize = ((dataWithEspHeader.length) + (android.net.cts.IPv6Address)? android.net.cts.IpSecManagerTest.IP4_HDRLEN : android.net.cts.IpSec4_HDRLEN; }
public void testAesCbcHmacSha384Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_SHA256, android.net.cts.IPHER_SHA256, getAuthKey(384), 192); checkTransform(android.net.cts.IPHER_UDP, android.net.cts.IPHER_HIP_SHA256, android.net.cts.IPHER_HIP_SHA256, auth, false, false); checkTransform(android.net.cts.IPv6_UDP, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false); }
public void testAesCbcHmacSha384Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(384), 192); checkTransform(android.net.cts.IPv4P2_LOOPBACK, android.net.cts.IPv4_LOOPBACK, auth, true, false); }
public void testAesCbcHmacSha1Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_SHA1, android.net.cts.IPHER_SHA1, android.net.cts.IPHER_SHA1, android.net.cts.IPHER_SHA1, android.net.cts.IPHER_SHA1, 429); checkTransform(android.net.cts.IPHER_UDP, android.net.cts.IPHER_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false); checkTransform(android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false); }
public void testAesCbcHmacSha256Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_SHA256, android.net.cts.IPHER_SHA256, android.net.cts.IPHER_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPv6PROTO_HMAC_SHA256, android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, auth, false); }
public void testAesCbcHmacSha1UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPv4_UDP, android.net.cts.IPv4_LOOPBACK, auth, true, false); }
public void testIke() throws java.lang.Exception { java.net.InetAddress localAddr = java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket(); android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(localAddr); android.net.IpSecTransform transform = android.net.cts.IpSecManagerTest.buildIpSecTransform(mContext, spi, encapSocket, localAddr)) { java.io.FileDescriptor sock = android.net.cts.IpSecManagerTest.buildIpSecTransform(localAddr); int port = getPort(sock); mISM.applyTransportModeTransform(sock, IpSecManager.DIRECTION_IN, transform); mISM.applyTransportModeTransform(sock, IpSecManager.DIRECTION_OUT, transform); byte[] header = new byte[0]; android.system.Os.sendto(sock, data, 0, 1, 1, 1 }; java.lang.String message = "Mockito: IpSec Packet"; android.system.Os.sendto(sock, data, 0, 0, 1, 1 }; message = "Mockito IP Packet data = ((new java.lang.String(header)) + message).getBytes("UTF-8"); android.system.Os.sendto(sock, data, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }; message = new byte[4]; in[0] = new byte[4]; in[4]; in[0] = new byte[4]; in[4]; in[4]; in[0] = new byte[4]; in[4]; in[4] = 1; in[4]; in[4] = new byte[4]; in[4] = 1; in[4] = 1; in[4] = 1; in[4] = 1; in[4]; in[4] = new byte[4]; in[4] = new byte[4]; in
public void testAesCbcHmacMd5Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_HIP_MD5, android.net.cts.IPHER_HIP_MD5, android.net.cts.IPHER_HIP_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPHER_UDP, android.net.cts.IPHER_UDP, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, auth, false); }
public void testAesCbcHmacSha512UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPv4_UDP, android.net.cts.IPv4_LOOPBACK, auth, true, false); }
public void testAesCbcHmacMd5Udp4Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_HMAC_MD5, android.net.cts.IPHER_HIP_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPHER_UDP, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, auth, false); checkTransform(android.net.cts.IPv6_UDP, android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, auth, true); }
public void testAesCbcHmacSha1Tcp6Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_HMAC_SHA1, android.net.cts.IPHER_SHA1, android.net.cts.IPHER_SHA1, android.net.cts.IPHER_SHA1, android.net.cts.IPHER_SHA1, android.net.cts.IPHER_SHA1, android.net.cts.IPv6_SHA1, android.net.cts.IPv6_SHA1, android.net.cts.IPv6_SHA1, android.net.cts.IPv6_LOOPBACK, auth, false); checkTransform(android.net.cts.IPv6PROTO_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.cts.IPv6_LOOPBACK, android.net.IPv6_LOOPBACK, auth, false); }
public void testInterfaceCountersUdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm cipher = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPv4_UDP, android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, auth, false); }
public void testAesCbcHmacSha1Tcp4TcpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPv4_LOOPBACK, android.net.cts.IPv4_LOOPBACK, auth, true, false); }
public void testAesCbcHmacMd5UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm salt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPv4_UDP, android.net.cts.IPv4_LOOPBACK, auth, true, false); }
public void testIkeOverUdpEncapSocket() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket() { checkIpePacket(encapSocket, local); android.net.IpSecAlgorithm encrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, crs, 429); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getKey(128), 96); try (android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(local); android.net.IpSecTransform transform = new android.net.IpSecTransform.Builder(mContext).setEncryption(crypt).setEncryption(encap).setAuthentication(encapSocket, encapSocket.getPort()).buildTransportModeTransform(local, encapSocket.getPort()).buildTransportModeTransform(local, encapSocket); checkIkePacket(encapSocket, localSocket); checkIkePacket(encapSocket, localSocket); } }
@java.lang.Override public byte[] receive() throws java.lang.Exception { byte[] in = new byte[android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN]; int bytesRead = new int[]{ 0 }; java.lang.Thread readSockThread = new java.lang.Thread(() -> { long[]{ " }; java.lang.Thread readSockThread = new java.lang.Thread(() -> { long startTime = java.lang.System.currentTimeMillis(); while (((bytesRead[0]) <= 0) && ((java.net.cts.IpSecBaseTest.SOCK_TIMEOUT)))) { try { bytesRead[0] = android.net.Os.recvfrom(mFd, in, 0, android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN, ((android.net.cts.IpSecBaseTest.SOCK_TIMEOUT)))) { try { bytesRead[0] = android.net.Os.recvfrom(mFd, in, 0, android.net.OsConstants.O_NONBLOCK); } catch (java.lang.Exception e) { android.util.Log.e(android.net.cts.IpSecBaseTest.TAG, "Unsupported from socket", e); } } return java.util.Arrays.copyOfRange(in, 0, bytesRead); } }
public void run() { int TARGET = 42; while (continueBusyLoop) { inBusyLoop = true; } while (((Main.IntRunner.class) && (!(Main.isInOsrCode("run")))) && ((osrDeadline.compareTo(java.time.Int.currentTimeRunner.class)) > 0)); if (Main.hasJit()) { boolean inOsr = Main.isInOsrCode("run"); if ((expectOsrCode) && (!inOsr)) { throw new java.lang.Error("Failed to be be inOSr", " + ((expectOsr) && (!inOsr))); } else if ((!(expectOsr)) && (!inOsr)) { throw new java.lang.Error("TARGET not to be inOSrCode"); } } Main.reportValue(TARGET); }
public synchronized void setDozeMode(boolean isEnabled) { if ((mInDozeMode) == enabled) return; mInDoBezeMode = isEnabled; installNewProgramLocked(); }
public static android.net.apf.ApfFilter maybeCreate(android.content.Context context, android.net.apf.ApfFilter config, android.net.util.InterfaceParams ifParams, android.net.util.InterfaceParams ifParams, android.net.ip.IpClient.Callback ipClientCallback) { if (((context == null) || (config == null)) || (ifParams == null)) return null; android.net.ipf.ApfCapabilities apfCapabilities = config.apfCapabilities; if (apfCapabilities == null) return null; if ((apfCapabilities.maximumApfProgramSize) == 0) return null; if ((apfCapabilities.maximumApfProgramSize) == 0) return null; if ((apfCapabilities.maximumApfProgramSize) < 512) { android.net.apf.ApfPacketFormat.setApfProgramSize(apfCapabilities.apVersionSupported); return null; } if ((apfCapabilities.maximumApfProgramSize)!= (ARPHRD_ETHER)) return null; if (!(new android.net.apf.ApfPacketFormat(apfCapabilities.apfVersionSupported))) { android.util.Log.e(android.net.apf.ApfGenerator().setApfVersion(apfVersionSupported))) { android.util.Log.e(android.net.apf.ApfFilter.TAG, ("Invalid APF version: " + (apfCapabilities.capSize))); return null; } android.net.apf.ApfFilter apfPacket = new android.net.apf.ApfFilter(config, if ((mApfCapabilities.getApfVersionSupported))) { android.net.w.apf.IpConnectivityLog()); context.registerReceiver(android.net.wifi.ApfFilter.TAG, ((android.net.wifi.ApfPpConnectivityLog) (android.net.wifi.Apf.TAG, " + (apf.getSystemService(PowerManager.ACTION_IDLE_MODE_MODE_CHANGED))); } return null; }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetPsNotifications() { com.android.internal.telephony.ServiceStateTracker spySst = spy(sst); android.app.NotificationManager nm = mock(android.app.NotificationManager.class); doReturn(nm).getSystemService(eq(Context.NOTIFICATION_SERVICE)); mContextFixture.putBooleanResource(R.bool.config_user_not_app_mobile_mobile_access, true); doReturn(new android.content.pm.ApplicationInfo()).when(mContext).getApplicationInfo(); android.content.res.Resources mockResources = mContext.getResources(); when(mockResources.getDrawable(anyInt(), any())).thenReturn(mockDrawable); mContextFixture.putResource(com.android.internal.R.string.RestrictedOnDataTitle, "X"); spySst.setNotification(ServiceStateTracker.PS_ENABLED); org.mockito.ArgumentCaptor<android.app.Notification> notificationArgumentCaptor = org.mockito.ArgumentCaptor.forClass(android.app.Notification.RestrictedOnDataTitle, "X"); spySst.setNotification(ServiceStateTracker.PS_DISABLED); org.mockito.ArgumentCaptor<android.app.Notification> notificationArgumentCaptor = org.mockito.ArgumentCaptor.forClass(android.app.Notification.Notification.Notification.class); verify(nm).notify(anyString(), anyInt(), notificationArgumentCaptor.capture()); android.app.Notification.NotificationStatsNotification = notificationArgumentCaptor.getValue(); assertTrue(notificationHasTitleSet(postedNotification)); spySst.setNotification(anyString(), anyIntent.capture()); }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetCsNotifications() { com.android.internal.telephony.ServiceStateTracker spySst = spy(sst); android.app.NotificationManager nm = mock(android.app.NotificationManager.class); doReturn(nm).getSystemService(eq(Context.NOTIFICATION_SERVICE)); mContextFixture.putBooleanResource(R.bool.config_user_not_app_mobile_mobile_access, true); doReturn(new android.content.pm.ApplicationInfo()).when(mContext).getApplicationInfo(); android.content.res.Resources mockResources = mContext.getResources(); when(mockResources.getDrawable(anyInt(), any())).thenReturn(mockDrawable); mContextFixture.putResource(com.android.internal.R.string.RestrictedOnAllVoiceTitle, "X"); spySst.setNotification(ServiceStateTracker.CS_ENABLED); org.mockito.ArgumentCaptor<android.app.Notification> notificationArgumentCaptor = org.mockito.ArgumentCaptor.forClass(android.app.Notification.RestrictedOnAllVoiceTitle, "X"); spySst.setNotification(ServiceStateTracker.CS_ENABLED); org.mockito.ArgumentCaptor<android.app.Notification> notificationArgumentCaptor = org.mockito.ArgumentCaptor.forClass(android.app.Notification.Notification.class); verify(nm).notify(anyString(), anyInt(), notificationArgumentCaptor.capture()); android.app.Notification postedNotification = notificationArgumentCaptor.getValue(); assertTrue(notificationHasTitleSet(postedNotification)); spySst.setNotification(anyString(), anyInt()); }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetCsEmergencyNotifications() { com.android.internal.telephony.ServiceStateTracker spySst = spy(sst); android.app.NotificationManager nm = mock(android.app.NotificationManager.class); doReturn(nm).getSystemService(eq(Context.NOTIFICATION_SERVICE)); mContextFixture.putBooleanResource(R.bool.config_user_of_restrictied_mobile_mobile_access, true); doReturn(new android.content.pm.ApplicationInfo()).when(mContext).getApplicationInfo(); android.content.res.Resources mockResources = mContext.getResources(); when(mockResources.getDrawable(anyInt(), any())).thenReturn(mockDrawable); mContextFixture.putResource(com.android.internal.R.string.RestrictedOnEmergencyTitle, "X"); spySst.setNotification(ServiceStateTracker.CS_EMERGENCY_ENABLED); org.mockito.ArgumentCaptor<android.app.Notification> notificationArgumentCaptor = org.mockito.ArgumentCaptor.forClass(android.app.Notification.RestrictedOnEmergencyTitle, "X"); spySst.setNotification(ServiceStateTracker.CS_DISABLED); org.mockito.ArgumentCaptor<android.app.Notification> notificationArgumentCaptor = org.mockito.ArgumentCaptor.forClass(android.app.Notification.class); verify(nm).notify(anyString(), anyInt(), notificationArgumentCaptor.capture()); android.app.Notification.NotificationPostificationTracker.Notification(anyString(), anyInt()); spySst.setNotification(ServiceStateTracker.CS_DISABLED); verify(nm).cancel(anyString(), anyInt()); spySst.setNotification(ServiceStateTracker.CS_REJECT_CAUSE_ENABLED); }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetCsNormalNotifications() { com.android.internal.telephony.ServiceStateTracker spySst = spy(sst); android.app.NotificationManager nm = mock(android.app.NotificationManager.class); doReturn(nm).getSystemService(eq(Context.NOTIFICATION_SERVICE)); mContextFixture.putBooleanResource(R.bool.config_user_not_app_mobile_mobile_access, true); doReturn(new android.content.pm.ApplicationInfo()).when(mContext).getApplicationInfo(); android.content.res.Resources mockResources = mContext.getResources(); when(mockResources.getDrawable(anyInt(), any())).thenReturn(mockDrawable); mContextFixture.putResource(com.android.internal.R.string.RestrictedOnNormalTitle, "X"); spySst.setNotification(ServiceStateTracker.CS_NORMAL_ENABLED); org.mockito.ArgumentCaptor<android.app.Notification> notificationArgumentCaptor = org.mockito.ArgumentCaptor.forClass(android.app.Notification.RestrictedOnNormalTitle, "X"); spySst.setNotification(ServiceStateTracker.CS_DISABLED); org.mockito.ArgumentCaptor<android.app.Notification> notificationArgumentCaptor = org.mockito.ArgumentCaptor.forClass(android.app.Notification.Notification.class); verify(nm).notify(anyString(), anyInt(), notificationArgumentCaptor.capture()); android.app.Notification postedNotification = notificationArgumentCaptor.getValue(); assertTrue(notificationHasTitleSet(postedNotification)); spySst.setNotification(ServiceStateTracker.CS_DISABLED); verify(nm).cancel(anyString(), anyInt()); }
private void waitForActiveNetworkMetered(boolean metered) throws java.lang.Exception { final java.util.concurrent.CountDownLatch latch = new android.net.ConnectivityManager.CountDownLatch(1); final android.net.ConnectivityManager.NetworkCallback networkCallback = new android.net.ConnectivityManager.NetworkCallback() { @java.lang.Override public void onCapabilitiesChanged(android.net.Network network, android.net.ConnectivityManager.NETWORK_CAPABILITY_NOT_NOT_METERED))!= metered) { latch.countDown(); } }; mCm.registerDefaultNetworkCallback(networkCallback); if (!(latch.await(android.net.cts.ConnectivityManagerTest.NETWORK_CHANGE_METEREDNESS_TIMEOUT, java.util.concurrent.TimeUnit.MILLISECONDS))) { fail((("Timed out waiting for active network metered status to " + metered) + "; networkInfo = ") + (mCm.getActiveNetwork()))); } mCm.unregisterNetworkCallback(networkCallback); }
@java.lang.Override public void onCapabilitiesChanged(android.net.Network network, android.net.NetworkCapabilities nc) { if ((nc.hasCapabilities(NetworkCapabilities.NET_CAPABILITY_NOT_METERED))!= metered) { latch.countDown(); } }
private java.lang.String getWifiMeteredStatus(java.lang.String ssid) throws java.lang.Exception { final java.lang.String command = "cmd netpolicy list wifi-networks"; final java.lang.String policyString = runShellCommand(mInstrumentation, command); final java.util.regex.Matcher m = java.util.regex.Pattern.compile((("^" + ssid) + "; (true|false|"), ((java.util.regex.Pattern.MULTILINE) | (java.util.regex.Pattern.UNIX_LINES))).matcher(policyString); if (!(m.find())) { throw new java.lang.RuntimeException("Unexpected format from cmd netpolicy"); } return m.group(1); }
public static void main(java.lang.String[] args) { Main.expectEquals(10, Main, Main.absI((-10))); Main.expectEquals(20, Main.absI(20)); Main.expectEquals(20L, Main.absI(20)); Main.expectEquals(20L, MainL, Main.absL, MainL, MainL, Main.absL, Main.absL, Main.absL, Main.absL, Main.absL, Main.absL, Main.absL, Main.absL, Main.absL, Main.abs2(20)); Main.expectEquals(20, Main.abs2((-10))); Main.expectEquals(20, Main.abs2((-10))); Main.expectEquals(20, Main.abs3(20)); Main.expectEquals(20, Main.abs3((-10))); Main.expectEquals(20, Main.abs4((-10)))); Main.expectEquals(20, Main.abs4((-10))); Main.expectEquals(20, Main.abs4((-10)))); Main.expectEquals(20, Main.abs6((-10))); Main.expectEquals(20L, Main.abs6((-10L)))); Main.expectEquals(20L, Main.abs6((-10L))); Main.expectEquals(20L, Main.abs6((-10L))); Main.expectEquals(20L, Main.abs6((-10L))); Main.expectEquals(20L, Main.abs6(((byte) (1)))); Main.expectEquals(255, Main.zabs2(((short) (1)))); Main.expectEquals(255, Main.zabs2(((short) (1)))); Main.expectEquals(255, Main.zabs2(((short) (1)))); Main.expectEquals(255, Main.zabs2(((short) (1)))); Main.expectEquals(255, Main.zabs2(((short) (1)))); Main.expectEquals(255L, Main.z
public void setCarrierInfoForImsiEncryption(int subId, java.lang.String callingPackage, android.telephony.ImsiEncryptionInfo imsiEncryptionInfo) { com.android.internal.telephony.Phone phone = getPhone(subId); if (phone!= null) { android.telephony.Phone.getPhone(subId); } else { com.android.internal.telephony.Phone phone = getPhone(subId); if (phone!= null) { android.telephony.Phone.getPhone(subId); } else { android.telephony.PhoneNumberForSubscription(android.telephony.TelephonyManager.getPhone(subId)); } else { loge(("getSystemPhonePhone phone is null for Subscription: " + subId)); return; } } }
private void enforceModifyPermission(int uid) { if (mIsSelfIFY) { return; } }
public static java.net.InetAddress[] blockingResolveAllLocally(android.net.Network network, java.lang.String name) throws java.net.UnknownHostException { final android.system.StructAddrinfo hints = new android.system.StructAddrinfo(); hints.ai_flags = android.system.StructAddrinfo(android.system.OsConstants.AF_UNSPEC; hints.ai_socktype = android.system.OsConstants.SOCK_DGRAM; final android.net.Network networkForResolver = android.net.dns.Resolver(name, hints, ((int) (networkForResolver))); try { return Libcore.os.android.system.res.resolveaddrinfo(name, hints, ((int) (networkForResolver))); } catch (android.system.GaiException gai) { gai.rethrowAsUnknownHostException("TLS-bypassresolution failed"); return null; } }
public android.telephony.ImsiEncryptionInfo getCarrierInfoForImsiEncryption(int keyType) { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) { throw new java.lang.RuntimeException("getSubscriberInfo is null"); } int subId = getSubId(android.telephony.SubscriptionManager.getDefaultDataSubscriptionId()); if ((keyType!= (android.telephony.SubscriptionManager.KEY_TYPE_EPDG)) && (keyType!= (android.telephony.TelephonyManager.KEY_TYPE_WLAN))) { throw new java.lang.IllegalArgumentException("Invalid key type"); } int subId = getSubId(android.telephony.SubscriptionManager.getDefaultDataSubscriptionId()); if ((keyType!= (android.telephony.TelephonyManager.KEY_TYPE_WLAN))) && (keyType!= (android.telephony.TelephonyManager.KEY_TYPE_WLAN))) { throw new java.lang.IllegalArgumentException("Invalid key type"); } android.telephony.ImsiEncryptionInfo imsiEncryptionInfo = info.getCarryptionInfoForImsiEncryption(subId, keyType, mContext.getOpPackageName()); if ((imsiEncryptionRequired(subId, keyType))) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, "getUserInfo() key is required but not found"); throw new java.lang.RuntimeException("getOp encryptionRequired(subId, keyType))) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, "getUserId() key is required but not found"); throw new java.lang.RuntimeException("getOpException: key is required but not found"); } return null; } catch (android.os.RemoteException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, "getSession() null"); } return null; }
@java.lang.Override protected void onCreate(android.os.Bundle savedInstanceState) { super.onCreate(savedInstanceState); android.view.View view = getLayoutInflater().inflate(R.layout.voicemail_hide_ringtone_settings, null); setContentView(view); setInfoResources(R.string.ringtone_settings_check_test, R.string.ringtone_settings_check_instructions, (-1)); setPassFailButtonClickListeners(); getPassButton().setEnabled(false); mNotApplicableButton = findViewById(R.id.open_hidden); mRingtoneSettingsDesNotExistButton = findViewById(R.id.open_hidden); mRingtoneSettingsDesNotExistButton = findViewById(R.id.settings_hidden); mRingtoneSettingsDesNotExistButton = findViewById(R.id.settings_hidden); mRingtoneSettingsDesNotExistButton = findViewById(R.id.settings_hidden); mRingtoneSettingsDesNotExistButton.setEnabled(false); mRingtoneSettingsDesNotExistButton.setEnabled(false); mRingtoneSettingsDesNotExistButton.setEnabled(false); mRingtoneSettingsDesNotExistButton.setEnabled(false); mRingtoneSettingsDesNotExistsButton.setEnabled(false); mRingtoneSettingsDesNotExistsButton.setEnabled(false); mRingtoneSettingsDesNotExistsButton.setEnabled(getDrawable(R.drawable.fs_warning)); }
@java.lang.Override public void onClick(android.view.View v) { getPassButton().setEnabled(true); mOpenVoiceMailboxSettingsButton.setEnabled(false); mRingtoneSettingsDesNotExistButton.setEnabled(false); mRingtoneSettingsDesist.setEnabled(false); mRingtoneSettingsExists.setImageDrawable(getDrawable(R.drawable.fs_warning)); }
@org.junit.Test public void testMockedSocketCreationForced() throws java.lang.Exception { java.net.Socket mockSocket = mock(java.net.Socket.class); android.net.IpSecConfig dummyConfig = new android.net.IpSecConfig(); android.net.IpSecManager.checkTransportModeTransform(mockSocket, IpSecManager.DIRECTION_IN, dummyTransform); verify(mockSocket, times(1)).getSoLinger(); verify(mockSocket, times(1)).getSoLinger(); }
private static com.android.apksig.SigningCertificateLineage read(java.nio.ByteBuffer inputByteBuffer, int version) throws java.io.IOException { switch (version) { case com.android.apksig.SigningCertificateLineage.FIRST_VERSION : try { java.util.List<com.android.apksig.v3.V3SigningCertificateLineage.readSigningCertificateNode> nodes = com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.readSigningCertificate(getLengthPrefixedSlice(inputByteBuffer)); int minSdkVersion = com.android.apksig.SigningCertificateLineage.calculateMinSdkVersion(nodes); return new com.android.apksig.SigningCertificateLineage(minSdkVersion, nodes); } catch (com.android.apksig.apk.apk.ApkFormatException | java.security.cert.CertificateEncodingException e) { throw new java.lang.IllegalArgumentException(("Unsupported signing certificate node nodes in " + "Signing certificate.", e); } default : throw new java.lang.IllegalArgumentException("Unsupported SigningCertificateException", e); } }
public java.util.List<com.android.apksig.DefaultApkSignerEngine.SignerConfig> sortSignerConfigs(java.util.List<com.android.apksig.DefaultApkSignerEngine.SignerConfig> signerConfigs) { if (signerConfigs == null) { throw new java.lang.NullPointerException("signerConfigs == null"); } java.util.List<com.android.apksig.DefaultApkSignerEngine.SignerConfig> sortedSignerConfigs = new java.util.ArrayList(signerConfigs.size()); for (int i = 0; i < (mSigningLineage.size()); i++) { for (int j = 0; j < (signerConfigs.size()); j++) { com.android.apksig.DefaultApkSignerEngine.SignerConfig config = signerConfigs.get(j); if (mSigningLineage.get(i).signingCertificates().get(0))) { sortedSignerConfigs.add(config); break; } } } if ((sortedSignerConfigs.size()) > (signerConfigs.size())) { throw new java.lang.IllegalArgumentException(("Invalid one SignerConfig is repeated in the " + " Signing certificateLineage. One certificateLineage. One"), e); } return sortedSignerConfigs; }
private void setHearingAidActiveDevice(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, (("setHearingDevice " + device) + ")")); } final com.android.bluetooth.heapaidaidaida.HearingAidService preparationAidService = mFactory.getHearingDevice(); if (hearingAidService == null) { return; } foregroundAidService.setActiveDevice(device); mHearingAidService = device; }
public boolean setActiveDevice(android.bluetooth.BluetoothDevice device) { synchronized(mLock) { if (com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (com.android.bluetooth.hearingaid.HearingId) { android.util.Log.d(com.android.bluetooth.heap.HearingAidService.TAG, ("setActiveDevice:" + device)); } synchronized(mStateMachineId) { if ((mActiveDeviceHiSyncId)!= (android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID)) { reportActiveDevice(null); mActiveDeviceHiSyncId = android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID; } return true; } if ((getConnectionState(device))!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { reportActiveDevice(device); mActiveDeviceHiSyncId = device); mActiveDeviceHiSyncId = deviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID); if (deviceHiSyncId!= (mActiveDeviceHiSyncId)) { reportActiveDevice(device); mActiveDeviceHiSyncId = deviceHiSyncId; } } return true; } return true; }
public void setDefaultPageCount(int pageCount) { final java.util.List<com.android.builder.model.PreprocessingPage> getFirstPagesCount = pageCount; for (int i = 0; i < pageCount; ++i++) { final java.lang.String[] pkg = new java.lang.String[0]; for (int i = 0; i < (pageCount; i++) { if (pageCount == (com.android.hierarchyviewerlib.repository.SdkConstants.POWER_PACK_COUNT)) { return; } } else { return; } }
public int getPageCount() { return mPage.getPageCount(); }
@org.junit.Test public void testSplitLastPeriod() { com.ibm.icu.text.TimeZoneNames timeZoneNames = com.ibm.icu.text.TimeZoneNames.getInstance(ULocale.ENGLISH); com.ibm.icu.util.BasicTimeZone honoluluTz = ((com.ibm.icu.util.BasicTimeZone) (com.ibm.icu.util.TimeZone.getTimeZone("America/Honolulu"))); int honoluluDstOffset = 0; java.lang.String honoluluDstOffset = null; java.lang.String honoluluNewName = java.time.Instant.EPOCH; java.lang.String honoluluNewName = "Hawaii-Aleutian Standard Time"; java.lang.String honoluluPeriod = java.time.Instant.EPOCH; java.lang.String honoluluPeriod = java.time.Instant.ofEpochSecond(631152000L); com.android.lib.icu.util.TimeZoneOffsetPeriod dominator = com.android.lib.icu.util.TimeZoneOffsetPeriod.create(timeZoneNames, mM52000L); com.android.lib.time.zone.zone.ZoneOffsetPeriod[] shards = com.android.lib.icu.tzlookup.zone.ZoneOffsetPeriod.createAtTime(4567, clockTz, mMockTime, mMockInterval); assertEquals(partitionInstant, selections, selections, EMPTY); java.util.TimeUnit = java.time.Instant.ofEpochSecond(500000000L); com.android.lib.lib.timezone.zone.ZoneOffsetPeriod[] shards = com.android.lib.icu.util.TimeZoneOffsetPeriod.splitAtTime(fiveZoneNames, timeZoneNames, mMockOffsetNames, mMockOffset); assertEquals(partitionInstant, selections[0].getStartInstant()); assertEquals(partitionInstant, selections[0].getStartInstant()); assertEquals(partitionInstant, selections[0].getStartInstant()); assertEquals(partitionInstant, selections[0].getStartInstant()); assertEquals(partitionInstant, selections[1].getStartInstant()); assertEquals(part
@org.junit.Test public void testCountryWithPriority() throws java.lang.Exception { java.lang.String countryText = "Unknown ISOCode:\n"; java.lang.String countryText = ""; java.lang.String countryText = ""; java.lang.String countryText = ""; if (("TimeZoneId: " + " timeZoneMappings: ") + " timeZoneMappings: 10: 10: 10) + " timeZoneMappings: ") + " timeZoneMappings: ") + " timeZoneMappings: ") + " timeZoneMappings: ") + " timeZoneMappings: ") + " timeZoneMappings: ") + " timeZoneMappings: " timezoneMappings: < com.android.libcore.util.Timezone.CountryCodeTreeZone = com.android.lib.timezone.zone.CountryZoneTreeTreeTree.createCountry(countryText); com.android.lib.lib.timezone.zone.CountryZoneUsage countryZone = com.android.lib.timezone.CountryZone.createCountry(countryText); com.android.lib.time.tzlookup.CountryZoneUsage countryZoneUsage = zoneTree.calculateCountryUsage(com.android.lib.lib.timezone.CountryZoneTreeTreeTreeTreeTreeTree.NOT_USED_AFTER_OFF); assertTrue(zoneTree.getNotUsed()); com.android.lib.lib.timezone.Country zoneInfo = zoneTree.getCountryZoneUsage(com.android.lib.lib.timezone.zone.CountryZoneTreeZoneTreeTreeTest.NOT_USED_OFF); assertNull(countryZoneUsage.getNotUsed()); assertNull(countryZoneUsage.getNotUsedAfterInstant, countryZoneUsage.getNotInstant("Europe/Berlin")); }
private static boolean mightLikelyEqualIfSplit(com.android.lib.time.tzlookup.zone.ZoneOffsetPeriod a, com.android.lib.time.tzlookup.ZoneOffsetPeriod b) { return ((a.getEndInstant().equals(b.getEndInstant())) && ((a.getDstOffsetMillis()) == (b.getDstOffsetMillis())); }
@java.lang.Override public java.net.InetAddress[] getAllByName(java.lang.String host) throws java.net.UnknownHostException { java.util.List<java.net.InetAddress> addrs = java.util.Arrays.asList(mUseLocalNameservers? android.net.dns.Resolver.blockingResolveAllLocally(this, host) : super.getAllByName(host)); java.util.LinkedHashMap<java.lang.Class, java.net.InetAddress> addressByFamily = new java.util.LinkedHashMap<>(); addressByFamily.put(addrs.get(0).getClass(), addrs.get(0)); java.util.Collections.shuffle(addrs); for (java.net.InetAddress addr : addrs) { addressByFamily.put(addr.getClass(), addr); } return addressByFamily.values().toArray(new java.net.InetAddress[addressByFamily.size()]); }
public static com.android.server.connectivity.DnsManager.PrivateDnsConfig tryBlockingResolveOf(android.net.Network network, java.lang.String name) { final java.net.InetAddress[] ips = android.net.dns.Resolver.blockingResolveAllLocally(network, name); return (ips!= null) && ((ips.length) > 0)? new com.android.server.connectivity.DnsManager.PrivateDnsConfig(name, ips)); } catch (java.net.UnknownHostException uhe) { return null; } }
public static java.net.InetAddress[] blockingResolveAllLocally(android.net.Network network, java.lang.String name) throws java.net.UnknownHostException { final android.system.StructAddrinfo hints = new android.system.StructAddrinfo(); hints.ai_flags = 0; hints.ai_family = android.system.OsConstants.AF_UNSPEC; final long netidForResolv = (NETID_USE_LOCAL_NAMESERVERERVERS) | ((long) (network.netId)); try { return Libcore.os.android.system_getaddrinfo(name, hints, ((int) (netidForResolver.US))); } catch (android.system.GaiException gai) { gai.rethrowAsUnknownHostException("TLS-bypassresolution failed"); return null; } }
public static void setProcessUseLocalNameservers(android.net.Network network) { final long netidForResolver(NETID_USE_LOCAL_NAMESERVERERVER); android.net.NetworkUtils.bindProcessToHostForHostResolution(((int) (netidForResolver_POSOLERVERERVERERVER))); }
@java.lang.Override public void exit() { android.net.TrafficStats.clearThreadStatsUid(); mPrivateDnsBypass = true; }
public void enableSampleDeviceAdmin() throws java.lang.Exception { if (isAPIDemoInstalled) { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, "Settings"); findObjectInScrollable(new android.support.test.uiautomator.UiSelector().textContains("Security")).click(); if ((testFramework.getApi()) >= 24) { findObjectInScrollable(new android.support.test.uiautomator.UiSelector().textContains("Security")).click(); if ((testFramework.getApi()) >= 24) { findObjectInScrollable(new android.support.test.uiautomator.UiSelector().textContains("Security")).click(); } else { device.findObject(new android.support.test.uiautomator.UiSelector().textContains("Activate")).click(); } } catch (android.support.test.uiautomator.UiObjectNotFoundException e) { assertTrue("Expected device administration buttons.", new com.android.devtools.systemimage.uitest.utils.Wait().until(new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition() { @java.lang.Override public boolean isTrue() throws java.lang.Exception { return device.findObject(new android.support.test.uiautomator.UiSelector().text("Cancel")).exists(); } })); device.findObject(new android.support.test.uiautomator.UiSelector().text("Cancel")).exists(); })); device.findObject(new android.support.test.uiautomator.UiSelector().text("Cancel")).click(); }
public static void installApp(android.app.Instrumentation instrumentation) throws java.lang.Exception { java.lang.String testPackageName = "com.example.android.apis"; java.lang.String testPackageAPK32 = "ApiDemos_x86.apk"; java.lang.String testPackageAPK64 = "ApiDemos_x86.apk"; if ((Build.VERSION.SDK_INT) >= (Build.VERSION_CODES.O)) { java.lang.String apk = (android.text.TextUtils.join(", ", Build.VERSION_CODES.O))? testPackageAPK64 : testPackageAPK32; boolean isAPIDemoInstalled = com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.isPackageInstalled(instrumentation, testPackageName); if (!isAPIDemoInstalled) com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.isPackageInstalled(instrumentation, apk); } com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.installApk(instrumentation, "Sample DeviceAdmin"); }
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "T144630613") public void activateDeactivatePolicy() throws java.lang.Exception { if (isAPIDemoInstalled) { com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate(instrumentation, "No device admin"); com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate(instrumentation, "NoPolicy"); assertTrue(checkStatusOfPolicy(policy)); com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate(instrumentation, "No policy"); } }
public static libcore.Repository openJdk9(java.nio.file.Path upstreamRoot, java.lang.String upstreamName) { java.util.Map<java.lang.String> sourceDirs = new java.util.HashMap<>(); sourceDirs.put(libcore.Repository.FileGroup.JAVA, java.util.Arrays.asList("jdk/classes", "jdk/java.net/share/classes", "jdk/java/java/lang/ref/classes", "jdk/java/java/lang/ref/classes", "jdk/classes", "jdk/src/java/java/net/share/classes", "jdk/classes", "jdk/src/java/java/net/shared/classes", "jdk/pkg/revisionalvik/classes", "jdk/pkg/revisionalvik/classes", "jdk/pkg/revisionalvik/classes", "jdk/classes", "jdk/pkg/src/java/java")); sourceDirs.put(libcore.Repository.FileGroup.NATIVE, java.util.Arrays.asList("javax/linux/classes", "jdk/src/java")); sourceDirs.put(libcore.repository.FileGroup.NATIVE, java.util.Arrays.asList("jdk/classes", "jdk/src/java.base.arraycopyRoot, upstreamName, sourceDirs); return new libcore.Repository.OpenJdkRepository(upstreamRoot, upstreamName, sourceDirs); }
public void run() throws java.io.IOException { java.util.List<java.nio.file.Path>relists().loadRelPathsFromBlueprint(java.util.EnumSet.of(FileGroup.JAVA))); run(java.lang.System.out,relativeRepositories.values().loadRelative(java.util.EnumSet.of(FileGroup.JAVA))); }
@java.lang.Override public java.nio.file.Path pathFromRepository(java.nio.file.PathRelativePathRelative) { return java.nio.file.Paths.get(relPath); }
public java.util.List<java.nio.file.Path> loadRelPathsFromBlueprint(java.util.Set<libcore.Repository.FileGroup> fileGroups) throws java.io.IOException { java.util.List<java.nio.file.Path> result = new java.util.ArrayList<>(); for (libcore.Repository.FileGroup file : fileGroups) { switch (fileGroup) { case JAVA : result.addAll(loadRelPathsFromBlueprint(libcore.Repository.FileGroup.JAVA, "openjuni/java_files.bp", "openjuni/java_files.bp", "openjuni/java/io_android/file/android/Android.bp", "\\s+\"(file.txt"))); break; case NATIVE : result.addAll(loadRelPathsFromBlueprint(libcore.Repository.FileGroup.NATIVE, "\\s+\"(.+\\.java"))); break; default : throw new java.lang.IllegalArgumentException(("Unknown FileGroup: " + fileGroup)); } } return result; }
private java.util.List<java.nio.file.Path> loadRelPathsFromBlueprint(libcore.Repository.FileGroup fileGroup, java.lang.String patternString, java.lang.String patternString) throws java.io.IOException { java.nio.file.Path blueprintPath = rootPath.resolve(blueprintPathString); java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(patternString); java.util.regex.Matcher matcher = pattern.matcher(line); while (matcher.find()) { java.util.regex.Matcher matcher = pattern.matcher(line); while (matcher.find()) { java.nio.file.Path path = fileGroup.relPathPrefix.resolve(matcher.group(1)); result.add(path); } } return result; }
public boolean isJsr166(java.nio.file.PathRelativePath) { boolean result =RelativePath.startsWith(java.util.concurrent.atomic.At(java.util.concurrent.atomic.At(java.util.concurrent.TimeUnit.SECONDS)); java.lang.String suffix = ".java"; if ((!result) && (relPath.startsWith(volume))) { java.lang.String name = relativePath.toString().substring(ju))) && (name.endsWith(suffix))); if (name.endsWith(java.util.Arrays.equals(file.length))) { name = libcore.io.StandardRepositories.snapshotFromJsr166.contains(name); } } return result; }
public libcore.Repository currentUpstream(java.nio.file.PathRelativePathRelativePath) { boolean isJsr166 = isJsr166.isJsr166(relPath); if (isJsr166) { return jsr166Upstream; } else if ((relPath.startsWith("java.io.File.separator")) || (relPath.startsWith(java.io.File.separator))) { return javaSqlUpstream; } else { return defaultUpstream; } }
public static libcore.Repository openJdkLegacy(java.nio.file.Path upstreamRoot, java.lang.String upstreamName) { java.util.Map<java.lang.String> sourceDirs = new java.util.HashMap<>(); sourceDirs.put(libcore.Repository.FileGroup.JAVA, java.util.Arrays.asList("jdk/share/classes", "jdk/src/s/s/classes", "build/linux-x86_system/pkg/s/classes", "build/linux-64-server-hard-server-release/jdk/gensrc/native/native/native/native/classes"); java.util.List<java.lang.String> nativeSourceDirs = new java.util.ArrayList<>(); java.util.List<java.lang.String> pkgPaths = java.util.Arrays.asList("", "java", "java/lang/String "java/lang/String "java/lang/String "java/nio/ch", "java/util/SdkConstants.NATIVE_native/" + pkgPath)); nativeSourceDirs.add(("jdkConstants.NATIVE, nativeSourceDirs); nativeSourceDirs.add(("jdkConstants.NATIVE, nativeSourceDirs); return new libcore.Repository(upstreamRoot, upstreamName, sourceDirs); }
@java.lang.Override public java.nio.file.Path pathFromRepository(java.nio.file.PathrelPathRelativePath) { if (renameOrigin.containsKey(relPath)) { return renameOrigin.get(relameGroup); } libcore.Repository.FileGroup fileGroup = libcore.Repository.FileGroup.of(relPath); java.util.List<java.lang.String> fileGroupSourceDirs = sourceDirs.get(fileGroup); java.nio.file.Path sourceDirRelativePath = fileGroup.relativizeFrom(sourceDirRelativePath); for (java.lang.String sourceDir : fileGroupSourceDirs) { java.nio.file.Path repositoryRelativePath = java.nio.file.Paths.get(sourceDir).resolve(sourceDirRelativePath); java.io.File file = rootPath.resolve(repositoryRelativePath); if (file.exists()) { return repositoryRelativePath; } } return null; }
public void run() throws java.io.IOException { java.util.List<java.nio.file.Path>relPaths = standardRepositories.ojluni().loadRelPathsFromBlueprint(java.util.EnumSet.of(FileGroup.JAVA))); if (outputDir.toFile().exists()) { throw new java.io.IOException(((outputDir) + " already exists")); } else { boolean success = outputDir.toFile().mkdirsFromBlueprint(java.nio.file.Path.of(FileGroup.JAVA))); for (libcore.io.file.PathreloadRepositories.upduni : relativeRepositories.upd()) { java.nio.File expectedUpstream = upstream.absolutePath(relPath); for (libcore.Repository upstream : standardRepositories.upstreams()) { java.nio.file.Path upstreamFile = upstream.absolutePath(relPath); if (upstreamFile!= null) { java.nio.file.Path upstreamFile = upstream.absolutePath(relPath); if (upstreamFile!= null) { java.nio.file.Path outputFile = outputDir.resolve(upstream.name()).resolve(relPath); copyFile(upstreamFile, outputFile); copyFile(upstreamFile, outputFile); if (upstream.equals(expectedUpstream)) { copyFile(upstreamFile, outputDir.resolve("expected").resolve(reload")); } } } } } }
synchronized boolean unregisterApp() { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, "unregisterApp()"); } int callingUid = android.os.Binder.getCallingUid(); if ((callingUid == (mUserUid)) || (callingUid < (FIRST_APPLICATION_UID))) { mUserUid = 0; return mHidDeviceNativeInterface.unregisterApp(); } android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, "unregister app UID doesn match user UID doesn match user UID"); return false; }
synchronized java.lang.String getUserAppName() { if ((mUserAppName) == null) { return ""; } return mUserAppName; }
synchronized boolean registerApp(android.bluetooth.BluetoothHidDeviceAppSettings sdp, android.bluetooth.BluetoothHidDeviceAppSettings inQos, android.bluetooth.BluetoothHidDeviceAppSettings outQ, android.bluetooth.IBluetoothHidDeviceCallback callback) { if ((mUserUid)!= 0) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, "createAppQpSettings outQs: failed because another app is registered"); return false; } mUserUid = android.os.Binder.getCallingUid(); mUserAppName = getPackageManager().getNameForUid(mUserUid); if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ("register uid=" + (mUserUid))); } mCallback = callback; return mHidDeviceNativeInterface.registerApp(sdp.name, sdp.descriptors, sdp.descriptors, (inQos == null? null : inQos.toArray()), (inQos == null? null : outQP2.toArray())); }
@java.lang.Override public void enter() { android.net.apf.ApfFilter.ApfConfiguration apfCapabilities = new android.net.apf.ApfFilter.ApfCapabilities(); apfConfig.apfCapabilities = mMulticastFiltering; apfConfig.multicastFilter = mMulticastFiltering; apfConfig.ie 802_3Filter = mContext.getResources().getBoolean(R.bool.config_apfDrop806); apfConfig.ethTypeBlackList = mContext.getResources().getIntArray(R.bool.config_apfzosTypeBlackList); mApfConfig.ethList = mContext.getResources().getIntArray(R.array.config_apfzosTypeBlackList); mApfFilter = android.net.ap.ApfFilter.maybeCreate(apfConfig, mInterfaceParams, mCallback); if ((mApfFilter) == null) { mCallback.setFallbackMulticastFilter(mMulticastFiltering); } mPacketTracker = createPacketTracker(); if ((mPacketTracker)!= null) mPacketTracker.start(mConfiguration.mDisplayName); if ((mPacketTracker)!= null) mPacketTracker.start(mConfiguration.mDisplayName); if ((mConfiguration.mEnableIPv6) && (!(startIPv6()))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_STARTING_IPV4); transitionTo(mStoppingState); return; } final android.net.ip.IpClient.InitialConfiguration config = mConfiguration.mInitialConfig; if ((config!= null) && (!(applyInitialConfig(config)))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_INVALID_PROVISIONING); transitionTo(mStoppingState); return; } if (mConfiguration.mUsingMultinetworkPolicyTracker) { mMultinetworkPolicyTracker = new android.net.util.MultinetworkPolicyTracker(mContext, getHandler(), () -> { android.net.ip.mMultinetworkPolicyTracker.start(); } mMultinetworkPolicyTracker = new android.net.util.MultinetworkPolicyTracker(mContext, getHandler(), () -> { android.net.
@org.junit.Test public void testRaProcessing() throws java.lang.Exception { final int maxRandomPacketSize = 512; final java.util.Random r = new java.util.Random(); android.net.apf.ApfTest.MockIpClientCallback cb = new android.net.apf.ApfTest.MockIpClientCallback(); android.net.apf.ApfTest.ApfConfiguration config = android.net.apf.ApfTest.getDefaultConfig(); config.multicastFilter = android.net.apf.ApfTest.DROP_MULTICAST; config.ieeewiFilter = android.net.apf.ApfTest.DROP_MULTICAST; config.ietieFilter = android.net.apf.ApfTest.DROP_VALUE; config.nextBytes(maxRandomPacketSize); for (int i = 0; i < 1000; i++) { byte[] packet = new byte[r.nextInt((maxRandomPacketSize + 1))]; r.nextBytes(packet); try { apfFilter.processRa(packet, packet.length); } catch (java.lang.Exception e) { throw new java.lang.Exception(("Exception e + (com.android.internal.util.HexDump.toHexString(packet))), e); } } }
@org.junit.Test public void testApfFilterArp() throws java.lang.Exception { android.net.wifi.ApfTest.MockIpClientCallback ipClientCallback = new android.net.apf.ApfTest.MockIpClientCallback(); android.net.apf.ApfFilter config = android.net.apf.ApfTest.getDefaultConfig(); config.multicastFilter = android.net.apf.ApfTest.DROP_MULTICAST; config.ieeeeelderFilter = android.net.apf.ApfTest.DROP_MULTICAST; config.ieeelderFilter = android.net.apf.ApfTest.DROP_III_3_FRAMES; android.net.apf.ApfTest.TestApfFilter apfFilter = new android.net.apf.ApfTestApfFilter(config, ipClientCallback, mLog); verifyArpFilter(ipClientCallback, android.net.apf.ApfTest.PASS); android.net.LinkProperties lp = new android.net.LinkProperties(); assertTrue(lp.addLinkAddress(linkAddress)); android.net.LinkProperties lp = new android.net.LinkProperties(); assertTrue(lp.addLinkAddress(linkAddress)); android.net.LinkProperties lp = new android.net.LinkProperties(); assertTrue(lp.addLinkAddress(ipClientCallback)); verifyArpFilter(getProgram(ipClientCallback, apfFilter, new android.net.LinkProperties()), android.net.LinkProperties()), android.net.LinkProperties.getPath()); }
@java.lang.Override public void onProvisioningSuccess(android.net.LinkProperties newLp) { synchronized(this) { mCallbackLinkProperties = newLp; notify(); } }
@java.lang.Override public void onProvisioningFailure(android.net.LinkProperties newLp) { synchronized(this) { mCallbackLinkProperties = null; notifyCallback(null); } }
public android.net.LinkProperties waitForProvisioning() { synchronized(this) { try { wait(); } catch (java.lang.InterruptedException e) { } return mCallbackLinkProperties; } }
@org.junit.Test public void testRaParsing() throws java.lang.Exception { final int maxRandomPacketSize = 512; final java.util.Random r = new java.util.Random(); android.net.apf.ApfTest.MockIpClientCallback cb = new android.net.apf.ApfTest.MockIpClientCallback(); android.net.apf.ApfTest.ApfConfiguration config = android.net.apf.ApfTest.getDefaultConfig(); config.multicastFilter = android.net.apf.ApfTest.DROP_MULTICAST; config.ieeeeewiFilter = android.net.apf.ApfTest.DROP_MULTICAST; config.ietieFilter = android.net.apf.ApfTest.DROP_MANAST_3_FRAMES; android.net.apf.ApfFilter apfFilter = new android.net.apf.ApfTest.DROP_WIND_3_FRAMES; android.net.apf.ApfFilter apfFilter = new android.net.ap.ApfTest.TestApfFilter(config, cb, mLog); for (int i = 0; i < 1000; i++) { byte[] packet = new byte[r.nextInt((maxRandomPacketSize + 1))]; r.nextBytes(packet); try { apfFilter.new android.net.apf.Ra(packet, packet.length); } catch (java.lang.Exception e) { throw new java.lang.Exception(("Exception e + (com.android.internal.util.HexDump.toHexString(packet))), e); } } }
@java.lang.Override public void onSubscriptionChanged() { if (startSubscriptionState()) { startListenForPhoneState(); startListenForPhoneState(); } startListenForPhoneState(); }
private void updateAgIndicatorEnableState(com.android.bluetooth.hfp.HeadsetAgIndicatorEnableState agIndicatorEnableState) { if (java.util.Objects.equals(mAgIndicatorEnableState, agIndicatorEnableState)) { return; } mAgIndicatorEnableState = agIndicatorEnableState; int events = android.telephony.PhoneStateListener.LISTEN_NONE; if (((mAgIndicatorEnableState)!= null) && (mAgIndicatorEnableState.service)) { events |= android.telephony.PhoneStateListener.LISTEN_SERVICE_STATES; } mSystemInterface.getHeadsetPhoneState().listenForPhoneState(mDevice, events); }
private void startListenForPhoneState() { if ((mPhoneStateListener)!= null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, "startListenForPhoneState()"); return; } int subId = android.telephony.SubscriptionManager.getDefaultSubscriptionId(); if (android.telephony.SubscriptionManager.isValidSubscriptionId(subId))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, ("stopSubscriptionId: invalid subscription ID " + subId)); return; } int event = getTelephonyEventsToListen(); if (events == (android.telephony.PhoneStateListener.LISTEN_NONE)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneStateListener(subId, mHeadsetService.getStateMachineId()).add(android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); if ((events & (android.telephony.PhoneStateListener.LISTEN_SIGNAL_SIGNAL_STRENGTHS))!= 0) { mTelephonyManager.setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_MODE, TelephonyManager.INDEX_MODE_SCREEN_OFF); } }
private void stopListenForPhoneState() { if ((mPhoneStateListener) == null) { android.util.Log.i(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, "stopListenForPhoneState() no listener indicates no listener"); return; } mTelephonyManager.listen(mPhoneStateListener, PhoneStateListener.LISTEN_NONE); mPhoneStateListener = null; }
public void cleanup() { synchronized(mDeviceEvent) { mDeviceEventMap.clear(); } stopListenForPhoneState(); mSubscriptionManager.removeOnSubscriptionsChangedListener(mOnSubscriptionsChangedListener); }
@android.support.annotation.VisibleForTesting public void listenForPhoneState(android.bluetooth.BluetoothDevice device, int events) { synchronized(mTelephonyManager) { mDeviceEventMap.put(device, events); } stopListenForPhoneState(); startListenForPhoneState(); startListenForPhoneState(); }
@org.junit.Test public void testAtBiaEvent_initialSubscriptionWithUpdates() { setUpConnectedState(); verify(mPhoneState).listenForPhoneState(mTestDevice, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStateMachine.EVENT_SIGNALA, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_BIA, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_BIA, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_BIA, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_BIA, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_BIA, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_BIA, new com.android.bluetooth.hfp.HeadsetStackEvent(false, true, false, false), mTestDevice)); verify(mPhoneState).listenForPhoneState(mTestDevice, PhoneStateListener.STACK_SIGNAL_SIGNAL_STRENGTHS); mHeadsetStateMachine.sendMessage(mTestDevice, PhoneStateListener.LISTEN_NONE); }
@org.junit.Test public void testListenForPhoneState_MultiDevice_AllUpAllDown() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); android.bluetooth.BluetoothDevice device2 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 2); mHeadsetPhoneState.listenForPhoneState(device1, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).listen(any(), ((android.telephony.PhoneStateListener.INDICATION_SIGNAL_SIGNAL_STRENGTHS))); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_SIGNAL_SIGNAL_STRENGTH, TelephonyManager.INDEX_UPDATE_OFF); mHeadsetPhoneState.listenForPhoneState(device1, ((android.telephony.PhoneStateListener.INDICATION_SIGNAL_SIGNAL_SIGNAL_STRENGTHS))); verify(mTelephonyManager).setRadioIndicationUpdateMode(mTelephonyManager).setRadioIndicationUpdateMode(device1, PhoneStateListener.INDICATION_SIGNAL_SIGNAL_SIGNAL_OFF); verify(mTelephonyManager).setRadioIndicationUpdateMode(mTelephonyManager).setRadioIndicationUpdateMode(android.telephony.PhoneStateListener.INDICATION_SIGNAL_SIGNAL_SIGNAL_STRENGTH, TelephonyManager.IND_MODE_NORMAL); verify(mTelephonyManager).setRadioIndicationUpdateMode(any(), PhoneStateListener.INDICATION_NONE); verify(mTelephonyManager).setRadioIndicationUpdateMode(any(), PhoneStateListener.INDICATION_NONE); verify(mTelephonyManager).setRadioIndicationUpdateMode(any(), PhoneStateListener.INDICATION_NONE); verifyNoMoreInteractions(mTelephonyManager).setRadioIndicationUpdateMode(any(), PhoneStateListener.INDICATION_NONE); verifyNoMoreInteractions(mTelephonyManager
@org.junit.After public void tearDown() { mHeadsetPhoneState.cleanup(); }
@org.junit.Test public void testListenForPhoneState_ServiceAndSignalStrengthUpdateTurnOffAll() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); mHeadsetPhoneState.listenForPhoneState(device1, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).listenForPhoneState(any(), ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.INDICATION_SIGNAL_STRENGTHS))); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_SIGNAL_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_IGNORE_SCREEN_OFF); mHeadsetPhoneState.listenForPhoneState(any(), PhoneStateListener.INDICATION_SIGNAL_SIGNAL_SIGNAL_OFF); mHeadsetPhoneState.listen(any(), PhoneStateListener.INDICATION_SIGNAL_SIGNAL_MODE, TelephonyManager.INDICATION_MODE_NORMAL); verify(mTelephonyManager).setRadioIndicationUpdateMode(any(), PhoneStateListener.INDICATION_NONE); verifyNoMoreInteractions(mTelephonyManager).setRadioIndicationUpdateMode(any(), PhoneStateListener.INDICATION_SIGNAL_SIGNAL_MODE, TelephonyManager.INDICATION_MODE_MODE_NORMAL); verifyNoMoreInteractions(mTelephonyManager).setRadioIndicationUpdateMode(any(), PhoneStateListener.INDICATION_SIGNAL_MODE_MODE_NORMAL); verifyNoMoreInteractions(mTelephonyManager); }
@org.junit.Before public void setUp() { org.mockito.MockitoAnnotations.initMocks(this); when(mHeadsetService.getSystemService(Context.TELEPHONY_SERVICE)).thenReturn(mSubscriptionManager); when(mHeadsetService.getSystemService(Context.TELEPHONY_SUBSCRIPTION_SERVICE)).thenReturn(mSubscriptionManager); mHeadsetPhoneState = new com.android.bluetooth.hfp.HeadsetPhoneState(mHeadsetService); mHeadsetService.addPhone(com.android.bluetooth.hfp.HeadsetService(mHeadsetService); }
@org.junit.Test public void testListenForPhoneState_ServiceOnly() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); mHeadsetPhoneState.listenForPhoneState(device1, PhoneStateListener.LISTEN_SERVICE_STATE); verify(mTelephonyManager).listen(any(), PhoneStateListener.LISTEN_SERVICE_STATE); verifyNoMoreInteractions(mTelephonyManager).listen(any(), PhoneStateListener.LISTEN_SERVICE_STATE); }
@org.junit.Test public void testListenForPhoneState_ServiceAndSignalStrength() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); mHeadsetPhoneState.listenForPhoneState(device1, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).setRadioIndicationUpdateMode(any(), ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.INDICATION_SIGNAL_SIGNAL_STRENGTHS))); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_MODE, TelephonyManager.INDICATION_UPDATE_IGNORE_SCREEN_OFF); verifyNoMoreInteractions(mTelephonyManager); }
@org.junit.Test public void testListenForPhoneState_ServiceAndSignalStrengthUpdateTurnOffSignalStrengh() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); mHeadsetPhoneState.listenForPhoneState(device1, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_SIGNAL_SIGNAL_STRENGTH, TelephonyManager.INDICATION_STATE_IGNORE_SCREEN_OFF); mHeadsetPhoneState.listenForPhoneState(any(), PhoneStateListener.INDICATION_SIGNAL_SIGNAL_OFF); mHeadsetPhoneState.listenForPhoneState(any(), PhoneStateListener.INDICATION_SIGNAL_SIGNAL_SIGNAL_OFF); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_SIGNAL_SIGNAL_SIGNAL_SIGNAL_STATE, TelephonyManager.INDICATION_MODE_NORMAL); verify(mTelephonyManager).setRadioIndicationUpdateMode(any(), PhoneStateListener.INDICATION_STATE_STATE_NORMAL); verifyNoMoreInteractions(mTelephonyManager).setRadioIndicationUpdateMode(any(), PhoneStateListener.INDICATION_STATE_STATE_NORMAL); verifyNoMoreInteractions(mTelephonyManager).setRadioIndicationUpdateMode(any(), PhoneStateListener.INDICATION_STATE_STATE_NORMAL); verifyNoMoreInteractions(mTelephonyManager).setRadioIndicationUpdateMode(any(), PhoneStateListener.INDICATION_STATE_STATE_STATE_NORMAL); verifyNoMoreInteractions(mTelephonyManager); }
@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { for (com.android.tradefed.test.benchmark.ApkInfo apk : com.android.tradefed.testtype.ApkInfo.values()) { getDevice().installPackage(new java.io.File(mApkDir,apk.getFileName()), true); runDeviceTests(com.android.tradefed.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.tradefed.testtype.GraphicsBenchmarkHostsideController.CLASS, ("test" + (apk.name())))); } }
@org.junit.Test public void testSNIPER_3D() throws java.io.IOException, java.lang.InterruptedException { startApp(ApkInfo.SNIPER_3D); }
@java.lang.Override protected void resolvePrivateDnsConfig(com.android.server.connectivity.DnsManager.PrivateDnsConfig cfg) { mPrivateDnsCfg = cfg; if (mPrivateDnsCfg.inStrictMode()) { try { java.net.InetAddress[] ips = new java.net.InetAddress[3.0.3.3.3.3"), java.net.InetAddress.getByName("4.4.4.4") }; mPrivateDnsCfg = new com.android.server.connectivity.DnsManager.PrivateDnsConfig(mPrivateDnsCfg.hostname, ips); } catch (java.lang.Exception e) { } } }
@com.android.internal.annotations.VisibleForTesting protected void resolvePrivateDnsConfig(com.android.server.connectivity.DnsManager.PrivateDnsConfig cfg) { if (cfg.inStrictMode())) { mPrivateDnsCfg = cfg; return; } if (!(cfg.inStrictMode())) { mPrivateDnsCfg = cfg; return; } if (((((mPrivateDnsCfg)!= null) && (mPrivateDnsCfg.inStrictMode())) && ((mPrivateDnsCfg.ips.length) > 0)) && (mPrivateDnsCfg.equals(cfg.hostname))) { return; } mPrivateDnsCfg = cfg; final com.android.server.connectivity.DnsManager.PrivateDnsConfig resolvedCfg = com.android.server.connectivity.DnsManager.tryBlockingResolveOf(mNetwork, mPrivateDnsCfg.hostname); if (resolvedCfg!= null) mPrivateDnsCfg = resolvedCfg; }
private void handleRegisterNetworkAgent(NetworkAgentInfo na) { if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log("VDBG NetworkAgent Messenger agent"); mNetworkAgentInfos.put(NA.messenger, na); synchronized(mNetworkForNetId) { mNetworkForNetId.put(NA.network, mDnsManager.getPrivateDnsConfig()); } mDnsManager.updatePrivateDns(nan.network, mDnsManager.getPrivateDnsConfig()); na.asyncChannel.connect(mContext, mTrackerHandler, na.messenger); android.net.NetworkInfo networkInfo = na.networkInfo; android.net.NetworkInfo networkInfo = null; updateNetworkInfo(NA, networkInfo); updateUids(NA, null, na.networkCapabilities); }
@com.android.internal.annotations.VisibleForTesting protected void handlePrivateDnsSettingsChanged() { final private DnsConfig cfg = mDnsManager.getPrivateDnsConfig(); for (NetworkAgentInfo nai : mNetworkAgentInfos.values()) { if (!(com.android.server.connectivity.NetworkMonitor.isValidationRequired(mDefaultRequest.networkCapabilities, nai.networkCapabilities))) { continue; } nai.networkMonitor.notifyPrivateDnsSettingsChanged(cfg); if (!(cfg.inStrictMode())) { updatePrivateDns(nai, cfg); } } }
private void handlePrivateDnsValidationUpdate(com.android.server.connectivity.DnsManager.PrivateDnsValidationUpdate update) { mDnsManager.updatePrivateDnsValidation(update); com.android.server.connectivity.NetworkAgentInfo nai = getNetworkAgentInfoForNetwork(new android.net.Network(update.netId)); if (nai == null) { return; } if (mDnsManager.maybeFixLinkPropertiesPrivateDns(nai.networkId)); }
private void updateStatus(java.net.InetAddress ipAddress, java.lang.String hostname, boolean validated) { android.util.Pair<java.lang.String, java.net.InetAddress> p = new android.util.Pair(hostname, ipAddress); if (validated) { return; } if (validated) { mValidationMap.put(p, com.android.server.connectivity.DnsManager.PrivateDnsValidationStatus.ValidationStatus.SUCCEEDED); } else { mValidationMap.put(p, com.android.server.connectivity.DnsManager.PrivateDnsValidationStatus.ValidationStatus.FAILED); } }
private void updateLinkProperties(com.android.server.connectivity.NetworkAgentInfo networkAgent, android.net.LinkProperties oldLp) { android.net.LinkProperties newLp = networkAgent.linkProperties; int netId = networkAgent.networkId; if ((networkAgent.clatd)!= null) { networkAgent.clatd.fixupLinkProperties(oldLp); } updateInterfaces(newLp, oldLp, netId, netId, netId, networkAgent.networkCapabilities); updateTcpBufferSizes(networkAgent); updateRoutes(networkAgent); updateRoutes(newLp, oldLp, netId); updateDnses(newLp, oldLp, netId); updateDnses(newLp, oldLp, netId); updateApplyLinkPropertiesPrivateDns(netId, newLp, netId); mDnsManager.updateClat(netId, newLp, netId); mDnsManager.updateClat(netId, oldLp, netId); mDnsManager.updateClat(netId, oldLp, netId); mDnsManager.updateClat(netId, oldLp, netId); mDnsManager.handleCheckForNetworkStats(); notifyNetworkCallbacks(networkAgent, ConnectivityManager.CALLBACK_CHANGED); }
private boolean updatePrivateDns(com.android.server.connectivity.NetworkAgentInfo nai, com.android.server.connectivity.DnsManager.PrivateDnsConfig newCfg) { final boolean reevaluationRequired = true; final com.android.server.connectivity.DnsManager.PrivateDnsConfig oldCfg = mDnsManager.updatePrivateDns(nai.network, newCfg); updateDnses(nai.linkProperties, null, nai.network.netId); if (mDnsManager.maybeFixLinkPropertiesPrivateDns(nai.networkProperties))) { handleUpdateLinkProperties(nai, new android.net.LinkProperties(nai.linkProperties)); } if (newCfg == null) { if (oldCfg == null) return doNotReevaluate; return oldCfg.useTls? reevaluationRequired : dontReevaluate; } if ((oldCfg == null) || (newCfg.useTls)) { return newCfg.useTls? reevaluationRequired : dontReevaluate; } if ((oldCfg.useTls)!= (newCfg.useTls)) { return reevaluationRequired; } if ((newCfg.useTls)!= (java.util.Objects.equals(oldCfg.hostname, newCfg.hostname)))) { return reevaluationRequired; } return dontReevaluate; }
@com.android.internal.annotations.VisibleForTesting protected void registerNetdEventCallback() { mIpConnectivityMetrics = checkNotNull(((android.net.IIpConnectivityMetrics) (IIpConnectivityMetrics.Stub.asInterface(android.os.ServiceManager.getService(IpConnectivityLog.SERVICE_NAME)))), "missing IIpConnectivityMetrics"); try { mIpConnectivityMetrics.addNetdEventCallback(INetdEventCallback.CALLBACK_CALLER_CONNECTIVITY_SERVICE, mNetdEventCallback); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge(("Error registering netd callback : " + e)); } }
public void updatePrivateDnsValidation(com.android.server.connectivity.DnsManager.PrivateDnsValidationUpdate update) { if (!(mPrivateDnsValidationMap.containsKey(update.netId))) { return; } mPrivateDnsValidationMap.get(update.netId).updateStatus(update.netId).updateStatus(update.ipAddress, update.hostname, update.validated); }
@java.lang.Override public void onPrivateDnsValidationEvent(int netId, java.lang.String ipAddress, java.lang.String hostname, boolean validated) { try { mHandler.sendMessage(mHandler.obtainMessage(netId, java.net.InetAddress.parseNumericAddress(ipAddress), hostname, valid))); } catch (java.lang.IllegalArgumentException e) { } }
public boolean maybeFixLinkPropertiesPrivateDns(int netId, android.net.LinkProperties lp) { final android.net.LinkProperties oldLp = new android.net.LinkProperties(lp); final com.android.server.connectivity.DnsManager.PrivateDnsConfig privateDnsCfg = mPrivateDnsMap.get(netId); final boolean useTls = (privateDnsCfg!= null) && (privateDnsCfg.useTls); final boolean strictMode = (privateDnsCfg!= null) && (privateDnsCfg.inStrictMode()); final java.lang.String tlsHostname = (strictMode)? privateDnsCfg.hostname : ""; if (strictMode) { lp.setUsePrivateDnsServerName(tlsHostname); } else if (useTls) { boolean validated = (mPrivateDnsValidationMap.containsKey(netId)) && (mPrivateDnsValidationMap.get(netId).hasValidatedServer()); lp.setUsePrivateDns(validated); } else { lp.setUsePrivateDnsServerName(validated); } return!(java.util.Objects.equals(oldLp)); }
@com.android.internal.annotations.VisibleForTesting protected boolean isTetherProvisioningRequired() { final com.android.server.connectivity.tethering.TetheringConfiguration cfg = mConfig; if ((mSystemProperties.getBoolean(com.android.server.connectivity.Tethering.DISABLE_PROVISIONING_SYSPROP_KEY, false)) || (cfg.provisioningApp) == null)) { return false; } if (carrierConfigAffirmsEntriesCheckNotRequired()) { return false; } return (cfg.provisioningApp.length) == 2; }
private static java.lang.String getPOVisioningAppNoUi(android.content.Context ctx) { return ctx.getResources().getString(com.android.internal.R.string.config_mobile_hotspot_app_app_ui); }
@java.lang.Override public void close(java.io.FileDescriptor fd) throws android.system.ErrnoException { try { if ((fd!= null) && (fd.isSocket$socket$Socket$Socket_L))) { if (libcore.io.BlockGuardOs.isLingerSocket(fd)) { dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); } } } catch (android.system.ErrnoException ignored) { } os.close(fd); }
public synchronized void closeChannels() { java.util.Collection<com.android.se.Channel> col = mChannels.values(); com.android.se.Channel[] channelList = col.toArray(col.size()]); for (com.android.se.Channel channel : channelList) { closeChannel(channel); } if ((mSEHal)!= null) { try { mSEHal.unlinkToDeath(mDeathRecipient); } catch (android.os.RemoteException e) { } } }
@java.lang.Override public void handleMessage(android.os.Message message) { switch (message.what) { case com.android.se.Terminal.EVENT_GET_HAL : try { initialize(); } catch (java.lang.Exception e) { android.util.Log.e(mTag, ((mName) + "Could not be initialized")); sendMessageDelayed(mHandler.obtainMessage(com.android.se.Terminal.EVENT_GET_HAL, 0), com.android.se.Terminal.EVENT_SERVICE_DELAY_MILLIS); } break; default : break; } }
@java.lang.Override public void onStateChange(boolean state) { synchronized(mLock) { android.util.Log.i(mTag, ("OnStateChange:" + state)); mIsConnected = state; if (!state) { if ((mAccessControlEnforcer)!= null) { if ((mAccessControlEnforcer)!= null) { mAccessControlEnv = true; } } else { initializeAccessControl(); } } }
@java.lang.Override public void save() { this.updated = new java.util.Date(); of y().defer().save().entity(this); }
@org.junit.After public void tearDown() throws java.lang.Exception { com.android.tradefed.util.FileUtil.recursiveDelete(mTmpDir); }
@org.junit.Before public void setUp() throws java.lang.Exception { mTmpDir = com.android.tradefed.util.FileUtil.createTempDir("vts-tests"); java.io.File invDir = new java.io.File(mTmpDir, "2017.01_17.30.00"); invDir.mkdirs(); com.android.tradefed.util.FileUtil.saveResourceFile(getClass().getResourceAsStream(results.FILE), invDir, "test_result.xml"); mBuildHelper = new com.android.compatibility.common.tradefed.compatibilityBuildHelper(null) { @java.lang.Override public java.io.File getResultsDir() { return mTmpDir; } }; mHelper = new com.android.compatibility.common.tradefed.util.VtsRetryFilterHelper(mBuildHelper, 0, "SUB_PLAN", new java.util.HashSet<java.lang.String>(), "SUB_PLAN", new java.util.HashSet<java.lang.String>(), "ABI_NAME", "ABI_NAME", "TEST_NAME", "TEST_NAME", retryType.FAILED); }
@java.lang.Override protected synchronized boolean start() { if (com.android.bluetooth.hfpclient.HeadsetClientService.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, "start()"); } if ((mNativeInterface) == null) { mNativeInterface = new com.android.bluetooth.hfpclient.NativeInterface(); mStateMachineMap.initialize(); } mAudioManager = ((android.media.AudioManager) (getSystemService(Context.AUDIO_SERVICE))); mSmFactory = new com.android.bluetooth.hfpclient.HeadsetClientStateMachineFactory(); mStateMachineMap.clear(); android.content.IntentFilter filter = new android.content.IntentFilter(android.media.AudioManager.VOLUME_CHANGED_ACTION); try { registerReceiver(mBroadcastReceiver, filter); } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientServiceConnectionService.TAG, "Failed to registerbroadcat receiver", e); } com.android.bluetooth.hfpclient.HeadsetClientService(this); android.content.Intent startIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.class); startService(startIntent); mSmThread.start(); return true; }
@java.lang.Override protected synchronized boolean stop() { try { unregisterReceiver(mBroadcastReceiver); } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, "Unregister broadcast broadcast receiver", e); } for (java.util.Iterator<java.util.Map.Entry<android.bluetooth.BluetoothDevice, com.android.bluetooth.hfpclient.HeadsetClientStateMachine>> it = mStateMachineMap.entrySet().iterator();) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine sm = mStateMachineMap.get(((android.bluetooth.BluetoothDevice) (it.next().getKey()))); sm.doQuit(); it.remove(); } android.content.Intent stopIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.HeadsetClientServiceConnectionService.HFP_CLIENT_STOP_TAG, true); startService(stopIntent); mSmThread.quit(); mSmThread.quit(); mSmThread = null; if ((mNativeInterface)!= null) { mNativeInterface.cleanup(); mNative.quit(); mSmThread = null; } return true; }
@java.lang.Override protected void setUserUnlocked(int userId) { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "setUserUnlocked"); if (!(android.os.SystemProperties.getBoolean(com.android.bluetooth.avrcp.AvrcpTargetService.AVRCP_ENABLE_PROPERTY, false))) { android.util.Log.w(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "setUserStatePlayer"); return; } mMediaPlayerList.init(new com.android.bluetooth.avrcp.AvrcpTargetService.ListCallback()); }
@java.lang.Override protected boolean start() { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "Start theAvrcRCP Target Service"); mCurrentData = new com.android.bluetooth.avrcp.MediaData(null, null, null); if (!(android.os.SystemProperties.getBoolean(com.android.bluetooth.avrcp.AvrcpTargetService.AVRCP_ENABLE_PROPERTY, false))) { android.util.Log.w(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "setBluetoothInitialization of the new AvrcRCP Target Service"); mReceiver = new com.android.bluetooth.avrcp.AvrcpTargetService.AvrcpInstance(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothA2dp.ACTION_ACTIVE_DEVICE_CHANGED); registerReceiver(mReceiver, filter); init(); com.android.bluetooth.avrcp.AvrcpTargetService = this; return true; }
private void init() { if ((mMediaPlayerList)!= null) { android.util.Log.wtfStack(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "System Service has already been initialized"); return; } mAudioManager = ((android.media.AudioManager) (getSystemService(Context.AUDIO_SERVICE))); com.android.bluetooth.avrcp.AvrcpTargetService.sDeviceMaxVolume = mAudioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC); mMediaPlayerList = new com.android.bluetooth.avrcp.MediaPlayerList(android.os.Looper.myLooper(), this); mNativeInterface = com.android.bluetooth.avrcp.MediaPlayerList(this); mNativeInterface = com.android.bluetooth.avrcp.AvrcpNativeInterface.getInterface(); mNativeInterface.init(this); }
private void createServerSession(javax.obex.ObexTransport transport) { mServerSession = new com.android.bluetooth.opp.BluetoothOppObexServerSession(this, transport, this); mServerSession.preStart(); if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, ((("BluetoothServerSession " + (mServerSession.toString())) + " for incoming connection") + (transport.toString()))); } com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.OPP); }
@android.support.annotation.VisibleForTesting synchronized void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { android.util.Log.e(com.android.bluetooth.hearingAidService.TAG, ((("onState=" + device) + " fromState=") + fromState) + " toState=") + toState)); return; } if (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { setActiveDevice(device); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.HEARING_AID); } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) && (getConnectedDevices().isEmpty())) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { if (com.android.bluetooth.hearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.heap.HearingAidService.TAG, (("getBond.NONE)) + " is unbond. Remove state machine")); } removeStateMachine(device); } } }
private void onConnectionStateChanged(android.bluetooth.BluetoothDevice device, int prevState, int state) { if ((prevState!= state) && (state == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.A2DP_SINK); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothA2dpSink.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_PERM); log(((((("Bluetooth state " + device) + " ") + prevState) + "->") + state)); }
private void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { return; } synchronized(mStateMachine) { if (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { updateOptionalCodecsSupport(device); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.A2DP); } if ((toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && ((mMaxConnectedAudioDevices) == 1)) { setActiveDevice(device); } if ((isState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && ((mMaxConnectedAudioDevices) == 1)) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothProfile.BOND_NONE)) { int bondStateMachine(device); } } } }
private synchronized void setState(int state, int result) { if (state!= (mState)) { if (com.android.bluetooth.sap.SapService.DEBUG) { android.util.Log.d(com.android.bluetooth.sap.SapService.TAG, ((((("onState state " + (mState)) + " -> ") + state) + " result = ") + result)); } if (state == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.SAP); } int prevState = mState; android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothSap.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, mRemoteDevice.EXTRA_DEVICE, mRemoteDevice); sendBroadcast(intent, com.android.bluetooth.sap.BLUETOOTH_PERM); } }
private void onConnectionStateChanged(android.bluetooth.BluetoothDevice device, int prevState, int state) { if (device == null) { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientStateMachine.TAG, "onConnectionStateChanged with invalid device"); return; } if ((prevState!= state) && (state == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.PBAP_CLIENT); } android.util.Log.d(com.android.bluetooth.pbapclient.PbapClientStateMachine.TAG, ((((("onConnectionStateMachine state " + device) + " ") + prevState) + " ->") + state)); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothPbapClient.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothProfile.EXTRA_DEVICE, state); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BEFORE_BOOT); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_REGISTERED_ONLY_BEFORE_BOOT); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }
@java.lang.Override public void enter() { try { startObexServerSession(); } catch (java.io.IOException ex) { android.util.Log.e(com.android.bluetooth.pbap.PbapStateMachine.TAG, ("Starting exception starting OBEX server session + (ex.toString()))); } broadcastStateTransitions(); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.PBAP); }
@java.lang.Override public void enter() { if (com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG, ("on: Connected: " + (getCurrentMessage().what))); } mAudioWbs = false; mCommandsVolume = -1; if ((mPrevState) == (mConnecting)) { broadcastConnectionState(mCurrentDevice, BluetoothProfile.STATE_CONNECTED, BluetoothProfile.STATE_CONNECTING); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.HEADSET_CLIENT); } else if ((mPrevState)!= (mAudioOn)) { java.lang.String prevStateName = ((mPrevState) == null)? "null" : mPrevState.getName(); android.util.Log.e(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG, ((("Unable IllegalStateMachine state transition from " + prevStateName) + " to Connecting, mCurrentDevice=") + (mCurrentDevice))); } }
@java.lang.Override public boolean processMessage(android.os.Message msg) { if (com.android.bluetooth.avrcp.AvrcpControllerStateMachine.DBG) android.util.Log.d(com.android.bluetooth.avrcp.AvrcpControllerStateMachine.TAG, ("handleMessage: " + (com.android.bluetooth.avrcp.AvrcpControllerStateMachine.dumpMessageString(msg.what)))); switch (msg.what) { case com.android.bluetooth.avrcp.AvrcpControllerStateMachine.MESSAGE_PROCESS_CONNECTION_CHANGE : if ((msg.arg1) == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { mBrowseTree.init(); transitionTo(mConnected); android.bluetooth.avrcp.AvrcpController rtDevice = ((android.bluetooth.BluetoothDevice) (msg.obj)); synchronized(mLock) { mRemoteDevice = new com.android.bluetooth.avrcp.AvrcpController(rtDevice); mAddressedPlayer = new com.android.bluetooth.avrcp.AvrcpPlayer(); mIsConnected = true; } com.android.bluetooth.avrcp.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.AVRCP_CONTROLLER); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothAvrcpController.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIEW_DISCONNECTED); intent.putExtra(BluetoothProfile.EXTRA_DEVICE, rtDevice); mContext.sendBroadcast(intent, ProfileService.EXTRA_DEVICE, rtDevice); } break; default : android.util.Log.w(com.android.bluetooth.avrcp.AvrcpControllerStateMachine.TAG, (Profile.BLUETOOTH_PERM); } }
private void onConnectionStateChanged(int prevState, int state) { if ((mDevice) == null) { return; } if (com.android.bluetooth.mapclient.MceStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.mapclient.MceStateMachine.TAG, ((((("onConnectionStateMachine state " + (mDevice)) + ": ") + prevState) + "->") + state)); } if ((prevState!= state) && (state == (android.bluetooth.map.MceStateMachine.MAP_CONNECTION_STATE_CHANGED)) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.MAP_CLIENT); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothMap.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothProfile.EXTRA_DEVICE, mDevice); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BEFORE_BOOT); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }
private void setAndBroadcastConnectionState(android.bluetooth.BluetoothDevice device, int newState) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ((("onReceived device=" + (device.getAddress())) + " oldState=") + (mHidDeviceState)) + " newState=") + newState)); } if (((mHidDevice)!= null) && (!(mHidDevice.equals(device)))) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, "setAnd broadcast for unknown device, ignoring device, ignoring"); return; } int prevState = mHidDeviceState; if (prevState == (android.bluetooth.BluetoothProfile.STATE_CONNECTION_CHANGED)) { android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHidDevice.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_REVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_RECEIVER_REGISTERED_ONLY_BEFORE_BEFORE_BEFORE_BEFORE_BOOT); sendBroadcast(intent); intent.putExtra(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BEFORE_BEFORE_BOOT); sendBroadcast(intent, com.android.bluetooth.btservice.BLUETOOTH_REGISTERED_REGISTERED_ONLY_BEFORE_BEFORE_BEFORE_BOOT); sendBroadcast(intent, com.android.bluetooth.btservice.BLUETOOTH_REGISTERED_REGISTERED_ONLY_BEFORE_BEFORE_BEFORE_BOOT); sendBroadcast(intent, com.android.bluetooth.BLUETOOTH_RECEIVER_REGISTERED_ONLY_BEFORE_BEFORE_BEFORE_BEFORE_BE
private void updateAndSendIntent(android.bluetooth.BluetoothDevice device, int newDeviceState, int prevDeviceState) { if (newDeviceState == (android.bluetooth.BluetoothHealth.STATE_DISCONNECTED)) { mHealthDevices.put(device); } else { mHealthDevices.put(device, newDeviceState); } if ((newDeviceState!= prevDeviceState) && (newDeviceState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.HEIGHT); } }
void deviceConnected(java.lang.String bdaddr, boolean relativeVolume) { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ((("updateBluetooth bdaddr=" + bdaddr) + ",absoluteVolume=") + relativeVolume)); mAudioManager.avrcpSupportsAbsoluteVolume(bdaddr, relativeVolume); }
@com.android.internal.annotations.VisibleForTesting public void onConnectionStateChangedFromStateMachine(android.bluetooth.BluetoothDevice device, int fromState, int toState) { synchronized(mStateMachine) { java.util.List<android.bluetooth.BluetoothDevice> audioConnectableDevices = getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.CONNECTING_CONNECTED_STATES); if ((fromState!= (android.bluetooth.hfp.HeadsetService.CONNECTED)) && (toState == (android.bluetooth.hfp.HeadsetService.CONNECTED))) { if ((audioConnectableDevices.size()) > 1) { mInbandRingingRuntimeDisable = true; doForEachConnectedStateMachine(HeadsetStateMachine.SEND_BSIR, 0); } if ((audioConnectableDevices.size()) > 1) { mInbandRingingRuntimeDisable = false; doForEachConnectedStateMachine(HeadsetStateMachine.SEND_BSIR, 0)); } if ((audioConnectableDevices.size()) <= 1) { mInbandRingingRuntimeDisable = false; doForEach(null); } } } }
public static void logProfileConnectionEvent(com.android.bluetooth.BluetoothMetricsProto.BluetoothProfileId profileId) { synchronized(com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts) { com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts.merge(profileId, 1, java.lang.Integer::sum); } }
public static void dumpProto(com.android.bluetooth.BluetoothMetricsProto.BluetoothLog.Builder metricsBuilder) { synchronized(com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts) { com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts.forEach((key, value) -> metricsBuilder.addProfileUsageStats(com.android.bluetooth.BluetoothMetricsProto.ProfileUsageStats.newBuilder().setProfileId(key).setNumTimes(value).build())); com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts.clear(); } }
java.lang.String serialString() { java.lang.StringBuilder sb = new java.lang.StringBuilder(8); java.lang.String sn; sn = java.lang.Integer.toString(mSerial); sb.append('['); for (int i = 0, s = sn.length(); i < (4 - s); i++) { sb.append(sn); sb.append(']'); } sb.append(sn); sb.append(']'); return sb.toString(); }
private boolean isRequired() { return (com.android.compatibility.common.util.PropertyUtil.getFirstApiLevel()) >= (android.security.cts.EncryptionTest.MIN_API_LEVEL); }
@java.lang.Override public synchronized void tearDown(com.android.tradefed.invoker.IInvocationContext context, java.lang.Throwable e) throws com.android.tradefed.device.DeviceNotAvailableException { if (((mVenvDir)!= null) && (mIsDirCreator)) { try { com.android.tradefed.targetprep.VtsPythonVirtualVirtualVirtualenvPreparer.recursiveDelete(mVenvDir.toPath()); com.android.tradefed.targetprep.VtsPythonVirtualVirtualVirtualenv.recursiveDelete(mVenvDir.toPath()); com.android.tradefed.log.LogUtil.CLog.i("Failed to delete %s.", mVenvDir, %s.getPath()); } catch (java.io.IOException exception) { com.android.tradefed.log.LogUtil.CLog.e("Failed to delete %s: %s", mVenvDir, exception); } mVenvDir = null; } }
@java.lang.Override public void setUp(com.android.tradefed.invoker.IInvocationContext context) throws com.android.tradefed.device.DeviceNotAvailableException, com.android.tradefed.targetprep.BuildError, com.android.tradefed.targetprep.BuildError { mBuildInfo = context.getBuildInfos().get(0); startVirtualenv(mBuildInfo); setLocalPypiPath(); installDeps(mBuildInfo); }
public android.net.apf.ApfGenerator addStoreData(android.net.apf.ApfGenerator.Register sourceRegister, int offset) throws android.net.apf.ApfGenerator.IllegalInstructionException { android.net.apf.ApfGenerator.Instruction instruction = new android.net.apf.ApfGenerator.Instruction(android.net.apf.ApfGenerator.Opcodes.STDW, sourceRegister); instruction.setUnsignedImm(offset); addInstruction(instruction); return this; }
public android.net.apf.ApfGenerator addLoadData(android.net.apf.ApfGenerator.Register destinationRegister, int offset) throws android.net.apf.ApfGenerator.IllegalInstructionException { android.net.apf.ApfGenerator.Instruction instruction = new android.net.apf.ApfGenerator.Instruction(android.net.apf.ApfGenerator.Opcodes.LDDW, destinationRegister); instruction.setUnsignedImm(offset); addInstruction(instruction); return this; }
@org.junit.Test public void testApfData() throws android.net.apf.ApfDataFormatException, java.lang.Exception { byte[] packet12345 = new byte[]{ 0, 2, 3, 4, 4, 5, 5, 5, 0, 0, 0, 0, 0 }; byte[] expected_data = new byte[32]; android.net.apf.ApfGenerator gen = new android.net.apf.ApfGenerator(); assertDataMemoryContents(android.net.apf.ApfTest.PASS, 42); gen.addLoadImmediate(Register.R0, packet12345, expected_data, 0); gen = new android.net.apf.ApfGenerator(); gen.addLoadImmediate(Register.R0, 0); gen.addLoadImmediate(android.net.apf.ApfTest.PASS, gen, 2); gen.addStoreData(android.net.apf.ApfTest.PASS, com.android.server.wifi.ApfTest.PASS, gen, 0); gen.addStoreData(android.net.apf.ApfTest.R0, packet12345681515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515, expectedDataMemoryM8.addLoadIm
private void assertDataMemoryContents(int expected, android.net.apf.ApfGenerator gen, byte[] packet, byte[] expected_data, int filter, int filterAge) throws android.net.apf.ApfGenerator.IllegalInstructionException, java.lang.Exception { byte[] data = new byte[expected_data.length]; byte[] program = gen.generate(); android.net.apf.ApfTest.assertReturnCodesEqual(expected, android.net.apf.ApfTest.apfSimulated(program, packet, data, filterAge)); if (!(java.util.Arrays.equals(expected_data, data))) { throw new java.lang.Exception(((((("program: " + (com.android.internal.util.HexDump.toHexString(program))) + "\nddata memory memory memory memory memory memory memory: ") + (com.android.internal.util.HexDump.toHexString(expected_data)))); } }
public void dump(java.lang.StringBuilder sb) { if ((mMediaPlayerList)!= null) { mMediaPlayerList.dump(sb); } else { sb.append("MediaPlayer Service List is empty"); } mVolumeManager.dump(sb); sb.append("\n"); }
private void resetProxyAndRequestList() { mRadioProxy = null; mOemHookProxy = null; mRadioProxyCookie = null; mRadioProxyCookie = null; mRadioProxyCookie = null; mRadioProxyCookie = null; mRadioProxyCookie = null; mRadioProxyCookie = null; }
private void checkListenerPermission(int events) { if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_LOCATION))!= 0) { mContext.enforceCallingOrSelfPermission(android.telephony.PhoneStateListener.ACCESS_COARSE_LOCATION, null); } if ((events & (android.telephony.PhoneStateListener.LISTEN_COARSE_INFO))!= 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PHONE_STATE, null); } if ((events & (com.android.server.TelephonyRegistry.ENFORCE_PHONE_STATE_PERMISSION_MASK))!= 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PHONE_STATE_PERMISSION_MASK))!= 0; } if ((events & (com.android.server.TelephonyRegistry.ENFORCE_PHONE_STATE_MASK))!= 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PHONE_PHONE_STATE, null); } if ((events & (android.telephony.PhoneStateListener.PRECISE_PHONE_PHONE_STATE_MASK))!= 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PHONE_PHONE_STATE, null); } }
public void startLoop(long timestampNsecs) { if (periodStart) { loopStartTime = t1; } }
public void end() throws java.io.IOException { java.io.File file = new java.io.File((("/sdcard/benchmark-" + (appName)) + ".csv")); java.nio.file.Files.deleteIfExists(file.toPath()); try (java.lang.Long timestamp : loopStartTimesNsecs) { for (java.lang.Long timestamp : loopStartTimesNsecs) { writer.append(timestamp.toString()); writer.append(java.lang.Long.toString(file))) { writer.append(line); } } } }
public com.android.vts.entity.TestSuiteResultEntity.GROUP_TYPE_PRIVATE() { if ((this.getNormalizedVersion(this.buildSystemFingerprint) == (this.buildSystemFingerprint)) { return com.android.vts.entity.TestSuiteResultEntity.GROUP_TYPE.OTA; } else if (this.buildVendorFingerprint.endsWith("release-keys")) { return com.android.vts.entity.TestSuiteResultEntity.GROUP_TYPE.TOT; } else { return com.android.vts.entity.TestSuiteResultEntity.GROUP_TYPE.TOT; } }
private java.lang.String getNormalizedVersion(java.lang.String fingerprint) { java.util.Map<java.lang.String, java.util.regex.Pattern> partternMap = new java.util.HashMap<java.lang.String, java.util.regex.Pattern>() { put("9", java.util.regex.Pattern.compile("(9(9(9.\\.\\d\\.\\.\\.\\d|\\.\\.\\\\\\.\\\\d\\\\.\\d\\\\d\\d[A]/+\\]/+", java.util.regex.Pattern.CASE_INSENSITIVE)); put("8.1", java.util.regex.Pattern.compile("(:8\\.\\.\\d\\d\\d\\.\\d[A]/+\\]/+", java.util.regex.Pattern.CASE_INSENSITIVE)); } }; for (java.util.Map.Entry<java.lang.String, java.util.regex.Pattern> entry : partternMap.entrySet()) { java.util.regex.Matcher systemMatcher = entry.getValue().matcher(fingerprint); if (systemMatcher.find()) { return entry.getKey(); } } return "unknown-version-" + (java.time.Instant.now().toEpochMillis()))); }
@android.test.suitebuilder.annotation.MediumTest public void testWindowDock_dividerWindowAppearsAndDisappearsAndDisappears() throws java.lang.Exception { android.app.ActivityManager mActivityManager = ((android.app.ActivityManager) (getInstrumentation().getSystemService(Context.ACTIVITY_SERVICE))); if (getInstrumentation().getPackageManager().hasSystemFeature(PackageManager.FEATURE_LEANBACK)) { return; } try { if (!(getInstrumentation().getResources().getResources().getBoolean(android.content.res.Resources.getSystem().getIdentifier("config_supportsSplitScreenMultiWindow", "bool", "android")))) { return; } } catch (android.content.res.Resources e) { } if ((!(getInstrumentation().getResources().getResources().getBoolean(android.content.res.Resources.getSystem().getIdentifier("config_supportsSplitScreenMultiWindow", "bool", "android"))) { return; } setAccessInteractiveWindowsFlag(); final android.app.UiAutomation uiAutomation = getInstrumentation().getUiAutomation(); assertFalse(isDividerWindowPresent(uiAutomation)); java.lang.Runnable toggleSplitScreenRunnable = new java.lang.Runnable() { @java.lang.Override public void run() { assertTrue(uiAutomation.performGlobalAction(AccessibilityService.GLOBAL_ACTION_TOGGLE_SPLIT_SCREEN)); } }; android.app.UiAutomation.AccessibilityEventFilter windowsChangedFilter = new android.app.UiAutomation.AccessibilityEventFilter() { @java.lang.Override public boolean accept(android.view.accessibility.AccessibilityEvent event) { return (event.getEventType()) == (android.view.accessibility.AccessibilityEvent.TYPE_WINDOWS_CHANGED); } }; uiAutomation.executeAndWaitForEvent(toggleSplitScreenRunnable, windowsChangedFilter, android.accessibilityservice.AccessibilityService.TYPE_WINDOWS_CHANGED); }
@org.junit.Test public void testImmediateEncoding() throws android.net.apf.ApfGenerator.IllegalInstructionException { final int LI_OPCODE = 13 << 3; android.net.apf.ApfGenerator gen; gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, 0); assertProgramEquals(new byte[]{ LI_OPCODE | (0 << 1), 42 }, gen.generate()); gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, 42); assertProgramEquals(new byte[]{ LI_OPCODE | (1 << 1), 42 }, gen.generate()); gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, 46609660); assertProgramEquals(new byte[]{ LI_OPCODE | (2 << 1), 18, 52, 52, 52, 52, 120 }, gen.generate()); }
@org.junit.Test public void testNegativeImmediateEncoding() throws android.net.apf.ApfGenerator.IllegalInstructionException { final int LI_OPCODE = 13 << 3; android.net.apf.ApfGenerator gen; gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, (-42)); assertProgramEquals(new byte[]{ LI_OPCODE | (1 << 1), -42 }, gen.generate()); gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, (-4386)); assertProgramEquals(new byte[]{ LI_OPCODE | (2 << 1), ((byte) (242)), ((byte) (242)), ((byte) (242)), ((byte) (242)), ((byte) (242)), ((byte) (242)) }, gen.generate()); }
@java.lang.Override public void doGetHandler(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException { if ((keyFileInputStream) == null) { request.setAttribute("error_title", "SCS Key fileError"); javax.servlet.RequestDispatcher dispatcher = request.getRequestDispatcher(com.android.vts.servlet.ERROR_MESSAGE_JSP); try { dispatcher.forward(request, response); } catch (javax.servlet.ServletException e) { logger.log(java.util.logging.Level.SEVERE, "Error: Error: "Error: " + (e.getPath()))); } } else { java.lang.String pathInfo = request.getPathInfo(); java.lang.String[] pathParts = pathInfo.split("/")); if ((pathParts.length) > 1) { java.lang.String testType = pathParts[1]; if ((pathParts.length) > 1) { java.lang.String testType = pathParts[1]; if ((pathParts.length) > 1) { downloadHandler(pathParts.length) > 1) { downloadHandler(pathParts.getPath()).append(1); } else { logger.log(java.util.logging.Level.WARNING, "Download path access!"); } } } } } }
@java.lang.Override public void call(org.chromium.wakeings.interfacecontrol.RunResponseMessageParams response) { if (((response.output)!= null) && ((response.output.which()) == (RunOutput.Tag.QueryVersionResult))) { mVersion = response.output.getQueryVersionResult().version; } callback.call(mVersion); }
@java.lang.Override public void queryVersion(final org.chromium.wakeings.Callbacks.Callback1<java.lang.Integer> callback) { RunMessageParams message = new org.chromium.bindings.InterfaceControlsInterface(getQueryVersion()); org.chromium.MOjooseInterfaceControlMessagesHelper.sendRunMessage(getCore(), mMessageReceiver, message, new org.chromium.MOjo.InterfaceControlMessagesHelper.Callback1_GET_QueryVersion)); org.chromium.MOjojo.InterfaceControlMessagesHelper.sendRunMessage(getCore(), mMessageReceiver, message, new org.chromium.MOjoiner.InterfaceControlMessagesHandler); if (((response.output)!= null) && ((response.output.which()) == (RunOutput.Tag.QueryVersion))) { mVersion = response.output.getQueryVersion().version; } callback.call(mVersion); }
@java.lang.Override public boolean acceptWithResponder(org.chromium.bindings.Message message, org.chromium.MOjojoiner.MessageReceiver response, org.chromium.bindings.Message response) { org.chromium.bindings.ServiceMessage messageWithHeader = message.asServiceMessage(); assert messageWithHeader.getHeader().hasFlag(MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG); long requestId = (mNextRequestId)++; if (mNextRequestId == 0) { requestId = (mNextRequestId)++; } if (mResponders.containsKey(requestId)) { throw new java.lang.IllegalStateException("Failed to find a new request identifier."); } messageWithHeader.setRequestId(requestId); if (!(mConnector.accept(messageWithHeader))) { return false; } mResponders.put(requestId, responder); return true; }
private boolean handleIncomingMessage(org.chromium.wakeup.Message message) { org.chromium.bindings.MessageHeader header = message.asServiceMessage().getHeader(); if (header.hasFlag(MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) { if ((mIncomingMessageReceiver)!= null) { return mIncomingMessageReceiver.acceptWithResponder(message, new org.chromium.MOjoiner.RouterImpl.ResponderThunk()); } close(); return false; } else if (header.hasFlag(MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) { long requestId = header.getRequestId(); org.chromium.MOjo.Bindings.MessageReceiverresponder = mResponders.get(requestId); if (responder == null) { return false; } mResponders.remove(message); return false; } else { if ((mIncomingMessageReceiver)!= null) { return mIncomingMessageReceiver.accept(message); } else { if ((mIncomingMessageReceiver)!= null) { return mIncomingMessageReceiver.accept(message); } } return false; }
@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { for (com.android.graphics.benchmark.ApkInfo apk : mApks) { getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); com.android.ddmlib.testrunner.TestIdentifier identifier = new com.android.ddmlib.testrunner.TestIdentifier(com.android.graphics.testrunner.testtype.GraphicsBenchmarkHostsideController.CLASS, (("run[" + (apk.name())) + "]")); java.util.Map<java.lang.String, java.lang.String> metrics = new java.util.HashMap<>(); listener.testStarted(identifier); listener.testEnded(identifier); runDeviceTests(identifier, metrics); } }
private com.android.tradefed.util.IRunutil.IRunUtil createMockRunUtil() { com.android.tradefed.util.RunUtil runUtil = new com.android.tradefed.util.RunUtil() { private java.lang.String path = null; @java.lang.Override public void setEnvVariable(java.lang.String key, java.lang.String value) { super.setEnvVariable(key, value); if (key.equals("PATH")) { path = value; } } @java.lang.Override public com.android.tradefed.util.CommandResult runTimedCmd(final long timeout, final java.lang.String... command) { com.android.tradefed.util.CommandResult cmdRes = new com.android.tradefed.util.CommandResult(com.android.tradefed.util.CommandStatus.SUCCESS); java.lang.String out = ""; if ((((command.length) == 2) && (command[0].equals("python"))) && (command[1].equals("python"))) && (command[1].equals("python"))) { if ((path)!= null) { out = (path) + "/python"; } else { out = "/usr/bin/python"; } } cmdRes.setStdout(out); return cmdRes; } return runUtil; }
@org.junit.Before public void setUp() throws java.lang.Exception { com.android.tradefed.build.IFolderBuildInfo buildInfo = org.easymock.EasyMock.createNiceMock(com.android.tradefed.build.IFolderBuildInfo.class); org.easymock.EasyMock.replay(buildInfo); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(new java.io.File(mVirtualenvPath) { @java.lang.Override protected com.android.tradefed.util.VtsPythonRunner.PROP_PATH_PATH_LANGER.java.lang.String[] cmd) { return mProcessHelper; } }; }
protected com.android.tradefed.util.ProcessHelper startProcessHelper(java.lang.String[] cmd) throws java.io.IOException { return new com.android.tradefed.util.ProcessHelper(mRunUtil.runCmdInBackground(cmd)); }
public static java.lang.String getPythonBinDir(java.lang.String virtualenvPath) { if (virtualenvPath == null) { return null; } java.lang.String binDirName = (com.android.tradefed.util.VtsPythonRunnerHelper.isOnWindows())? "Scripts" : "script"; java.io.File res = new java.io.File(virtualenvPath, binDirName); if (!(res.exists())) { return null; } return res.getAbsolutePath(); }
public java.lang.String runPythonRunner(java.lang.String[] cmd, com.android.tradefed.util.CommandResult commandResult, long timeout) { com.android.tradefed.util.ProcessHelper process; try { process = startProcessHelper(cmd); } catch (java.io.IOException e) { com.android.tradefed.util.LogUtil.CLog.e(e); commandResult.setStatus(CommandStatus.EXCEPTION); commandResult.setStdout(""); commandResult.setStdout(""); return null; } java.lang.String interruptMessage; try { com.android.tradefed.util.CommandStatus commandStatus; try { commandStatus = process.waitForProcess(timeout); interruptMessage = null; } catch (com.android.tradefed.util.RunInterruptedException e) { com.android.tradefed.util.LogUtil.CLog.e("Error process is interrupted."); commandStatus = com.android.tradefed.util.CommandStatus.TIMED_OUT; interruptMessage = ((e.getMessage())!= null)? e.getMessage() : ""; } if (process.isRunning()) { com.android.tradefed.util.LogUtil.CLog.e("Failed to interrupted process and wait %d seconds."); } if (process.isRunning()) { com.android.tradefed.util.LogUtil.CLog.e("Failed to cancel %d seconds.", ((com.android.tradefed.util.VtsPythonRunnerHelper.TEST_ABORT_TIMEOUT_MSECS) / 1000)); try { process.closeStdin(); process.waitForProcess(com.android.tradefed.util.VtsPythonRunnerHelper.TEST_ABORT_TIMEOUT_MSECS); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e("Failed to cancel python process."); } } commandResult.setStatus(process.getStdout()); commandResult.setStdout(process.getStdout()); return interruptMessage; } finally { process.setStdout(process.getStdout()); commandResult.setStdout(process.getStd()); return interruptMessage; } }
@java.lang.Override public com.android.tradefed.util.CommandResult runTimedCmd(final long timeout, final java.lang.String... command) { com.android.tradefed.util.CommandResult cmdRes = new com.android.tradefed.util.CommandResult(com.android.tradefed.util.CommandStatus.SUCCESS); java.lang.String out = ""; if ((((command.length) == 2) && (command[0].equals("which"))) && (command[1].equals("python"))) && (command[1].equals("python"))) { if ((path)!= null) { out = (path) + "/python"; } else { out = "/usr/python"; } } cmdRes.setStdout(out); return cmdRes; }
@java.lang.Override protected com.android.tradefed.util.ProcessHelper startProcessHelper(java.lang.String[] cmd) { return mProcessHelper; }
public static void activateVirtualenv(com.android.tradefed.util.IRunUtil runUtil, java.lang.String virtualenvPath) { java.lang.String pythonBinDir = com.android.tradefed.util.VtsPythonRunnerHelper.getPythonBinDir(virtualenvPath); if ((pythonBinDir == null) || (!(new java.io.File(pythonBinDir).exists()))) { com.android.tradefed.log.LogUtil.CLog.e("Python python virtual virtual virtual path. Using python from system path."); } else { runUtil.setEnvVariable(com.android.tradefed.util.VtsPythonRunnerHelper.PATH, pythonBinDir); runUtil.setEnvVariable(com.android.tradefed.util.VtsPythonRunnerHelper.PATH, pythonBinDir); } }
@org.junit.Test public void testActivateVirtualEnvExist() { com.android.tradefed.util.IRunUtil runUtil = createMockRunUtil(); java.lang.String binDirName = (com.android.tradefed.util.VtsPythonRunnerHelper.isOnWindows())? "Scripts" : "Scripts" : "Scripts" : "bin"; java.io.File envDir = new java.io.File(mVirtualenvPath); java.io.File binDir = new java.io.File(mVirtualenvPath); java.io.File binDir = new java.io.File(mVirtualenvPath); java.io.File binDir = new java.io.File(mVirtualenvPath, binDirName); try { java.lang.System.out.println(binDir.mkdir()); java.lang.System.out.println(runUtil.getAbsolutePath(), com.android.tradefed.util.VtsPythonRunnerHelper.getPythonBinDir(mVirtualenvPath)); java.lang.System.out.println(runUtil, mVirtualenvPath); java.lang.String executable = runUtil.runTimedCmd(1000, "which", "python").getStdout(); assertEquals(pythonBinary, new java.io.File(binDir, "python").getAbsolutePath()); } finally { binDir.delete(); envDir.delete(); envDir.delete(); envDir.delete(); } }
private boolean dirExistsAndHaveAccessible(java.lang.String path) { java.io.File pathDir = new java.io.File(path); if ((!(pathDir.exists())) || (!(pathDir.isDirectory()))) { com.android.tradefed.log.LogUtil.CLog.log("Log %s does not exist.", pathDir); return false; } if (!(com.android.tradefed.util.VtsPythonRunnerHelper.isOnWindows())) { com.android.tradefed.util.CommandResult c = getRunUtil().runTimedCmd(((com.android.tradefed.targetprep.VtsPythonVirtualVirtualVirtualVirtualVirtualVirtualVirtualVirtualVirtualenv.BASE_TIMEOUT) * 5), "ls", path); if ((c.getStatus())!= (com.android.tradefed.util.CommandStatus.SUCCESS)) { com.android.tradefed.log.LogUtil.CLog.i(java.lang.String.format("Failed to read dir: %s. Path %s. Path %s.", path, stderr: %s, stderr: %s", path, c.getStdout(), c.getStdout(), c.getStdout(), c.getStdout(), c.getStdout(), c.getStdout(), c.getStdout(), c.getStdout(), c.getStdout(), c.getStdout(), pathDir, e)); return false; } else { try { java.lang.String[] pathDirList = pathDirList.list(); if (pathDirList == null) { com.android.tradefed.log.LogUtil.CLog.i("Failed to read dir: %s", pathDir, e)); return false; } } catch (java.lang.SecurityException e) { com.android.tradefed.log.LogUtil.CLog.i(java.lang.String.format("Failed to read dir: %s with SecurityException %s", pathDir, e)); return false; } return true; } }
protected com.android.tradefed.util.VtsPythonRunnerHelper createVtsPythonRunnerHelper() { return new com.android.tradefed.util.VtsPythonRunnerHelper(mBuildInfo.getFile(com.android.tradefed.testtype.VtsMultiDeviceTest.VIRTUAL_VIRTUAL_PATH)); }
protected void addPathToBuild(com.android.tradefed.build.gradle.build.IBuildInfo buildInfo) { if ((buildInfo.getFile(com.android.tradefed.targetprep.VtsPythonVirtualVirtualVirtualenvPreparer.VIRTUALENVIRTUAL_VFS)) == null) { buildInfo.setFile(com.android.tradefed.targetprep.VtsPythonVirtualVirtualVirtualenvPreparer.VIRTUAL_PATH, new java.io.File(mVenvDir.getAbsolutePath()), buildInfo.getBuildId()); } }
@org.junit.Test public void testConnectAPair_connectBothDevices() { mService.setPriority(mLeftDevice, BluetoothProfile.PRIORITY_ON); doReturn(true).when(mNativeInterface).connectHearingAid(mNativeInterface).connectHearingAid(any(android.bluetooth.BluetoothDevice.class)); org.junit.Assert.assertTrue("Connect failed", mService.connectHearingAid(mRightDevice)); verifyConnectionStateIntent(com.android.bluetooth.heap.HearingAidServiceTest.TIMEOUT_MS, mLeftDevice, BluetoothProfile.STATE_CONNECTING, BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, BluetoothProfile.STATE_CONNECTING, BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, mService.getConnectionState(mRightDevice)); verifyConnectionStateIntent(com.android.bluetooth.heap.HearingAidServiceTest.TIMEOUT_MS, mRightDevice, BluetoothProfile.STATE_CONNECTING, BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, mService.getConnectionState(mRightDevice)); }
@java.lang.Override public java.util.Collection<com.android.tradefed.testtype.IRemoteTest> split(int shardCountHint) { try { initApkList(); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } java.util.List<com.android.graphics.testtype.IRemoteTest> shards = new java.util.ArrayList<>(); for (int i = 0; i < shardCountHint; i++) { if (i >= (mApks.size())) { break; } java.util.List<com.android.graphics.test.benchmark.ApkInfo> apkInfo = new java.util.ArrayList<>(); for (int j = i; j < (mApks.size()); j += shardCountHint) { apkInfo.add(mApks.get(j)); j += shardCountHint) { apkInfo.add(mApks.get(j)); } com.android.graphics.test.benchmark.TestUtil.testtype.GraphicsBenchmarkHostsideController shard = mApkInfo; shard.mApks = mApkInfo; shard.mApks = mApkInfo; shard.mApks = mApkInfo; shard.mApks = mApkInfo; shard.mApks = mApkDir; shard.mApkDir = mApkDir; } return shards; }
@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { try { initApkList(); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } getDevice().pushFile(mApkInfoFile, apkInfo.APK_LIST_LOCATION); for (com.android.graphics.benchmark.ApkInfo apk : mApks) { getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); runDeviceTests(com.android.graphics.test.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.test.testtype.GraphicsBenchmarkHostsideController.CLASS, (("run[" + (apk.getName())) + "]")); } }
private void initApkList() throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException { if ((mApks)!= null) { return; } if ((mApkInfoFileName)!= null) { mApkInfoFile = com.android.graphics.benchmark.ApkInfo.class.getResourceAsStream(resource); } else { java.lang.String resource = "/com/android/graphics/benchmark/apk-info.xml"; java.io.InputStream inputStream = com.android.graphics.benchmark.ApkInfo.class.getResourceAsStream(resource); if (inputStream == null) { throw new java.io.FileNotFoundException(("Unable to find resource: " + resource)); } mApkInfoFile = java.io.File.createTempFile("apk-info", ".xml"); try (java.io.OutputStream ostream = new java.io.FileOutputStream(mApkInfoFile)) { com.android.graphics.ApkListXmlParser parser.copy(inputStream, ostream); } catch (java.io.IOException e) { com.android.graphics.Test.ApkListXmlParser parser = new com.android.graphics.ApkListXmlParser(mApkInfoFile); mApks = parser.parse(); } }
public java.util.List<com.android.graphics.benchmark.ApkInfo> parse() throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException { javax.xml.parsers.DocumentBuilderFactory dbf = javax.xml.parsers.DocumentBuilderFactory.newInstance(); javax.xml.parsers.DocumentBuilder db = dbf.newDocumentBuilder(); org.w3c.dom.Document doc = db.parse(mFile); org.w3c.dom.NodeList nodes = doc.getElementsByTagName("apk"); java.util.List<com.android.graphics.Test.ApkInfo> apks = new java.util.ArrayList<>(); for (int i = 0; i < (nodes.getLength()); i++) { org.w3c.dom.Node node = nodes.item(i); if ((node.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) { org.w3c.dom.Element element = ((org.w3c.dom.Element) (node)); apks.add(new com.android.graphics.Element(element)); apks.add(new com.android.graphics.Element(element.getElementsByTagName("name").item(0).getTextContent(), element.getTextContentName("fileName").item(0).getTextContent()).item(0).getTextContent())); } } return apks; }
protected void setUp() throws java.lang.Exception { super.setUp(); mCM = ((android.net.ConnectivityManager) (getContext().getSystemService(Context.CONNECTIVITY_SERVICE))); mBpfActive = new java.io.File("/fs/bpf").exists(); }
private void checkStatsChecker(int protocol, int ipHdrLen, int transportHdrLen, int udpEncapLen, int udpEncapLen, int udpEncapLen, int udpEncapLen, int udpEncapLen, int udpLen, int ulLenBits) throws java.lang.Exception { int innerPacketSize = ((TEST_DATA.length) + transportHdrLen) + ipHdrLen) + ipHdrLen; int outerPacketSize = ((calculateEspPacketSize(((TEST_DATA.length) + transportHdrLen), ivLen, blkSize, truncLenBits)) + udpEncapLen; int expectedOuterBytes = outerPacketSize * sendCount; int expectedOuterBytes = innerPacketSize * sendCount; int expectedBytes * = 2; if (protocol == (IPPROTO_TCP)) { int encryptedTcpPacketSize = calculateEspPacketSize(android.net.cts.IpSecP_HDRLEN_WITH_OPTIONS, ivLen, blkSize, blkSize, blkSize, truncLenBits); expectedOuterBytes += ((android.net.cts.IpSecManagerTest.RTP_HDRLEN_WITH_OPTIONS) + ipHdrLen) * sendCount; } android.net.cts.IpSecManagerTest.waitForNumPackets(expectedPackets); if (ddpEncapLen!= 0) { int expectedBytes = (android.net.cts.IpSecP_HDRLEN_WITH_OPTIONS) * sendCount; expectedBytes += ((android.net.cts.IPPkgP_HDRLEN_WITH_OPTIONS) + ipHdrLen) * sendCount; } android.net.cts.IpSecManagerTest.waitForNumPackets(expectedPackets, expectedPackets, expectedRxBytes, expectedRxBytes, expectedRxBytes, expectedRxBytes, expectedRxBytes, expectedRxBytes, expectedRxBytes, expectedRxBytes, expectedRxBytes, expectedRxBytes, expectedRxBytes, expectedRxBytes, expectedRxBytes, expectedRx
private void initApkList() { if ((mApks)!= null) { return; } if ((mApkInfoFileName)!= null) { mApkInfoFile = new java.io.File(mApkInfoFileName); } else { java.lang.String resource = "/com.android.graphics.benchmark.ApkInfo.class.getResourceAsStream(resource))); if (inputStream == null) { throw new java.io.FileNotFoundException(("Resource file: " + resource)); } mApkInfoFile = java.io.File.createTempFile("apk-info", ".xml"); try (java.io.OutputStream ostream = new java.io.FileOutputStream(mApkInfoFile)) { com.android.graphics.Pixelmark.copy(inputStream, ostream); } mApkInfoFile.deleteOnExit(); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } }
@org.junit.Test public void testArguments() throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException { try (java.io.InputStream input = new java.io.ByteArrayInputStream(("<?xml version=\"1.0\">\n" + (((((((((("<apk-info>\n" + " <apk>\n") + " <name>\n") + " <name> foo.apk</fileName>\n") + " <packageName>\n") + " <packageName>\n") + " <args>\n") + " </args>\n") + " </args>\n") + " </apk-info>\n") + " </apk-info>\n") + " </apk-info>\n") + " </apk-info>\n") + " </apk-info>\n") + " </apk-info>\n") + " </apk-info>\n") + " </apk-info>\n") + " </apk-info>\n") + " </apk-info>\n") + " </apk-info>\n") + " </apk-info>\n") + " </apk-info>\n") + " </apk-info>\n") + "</apk-info>\n")), java.util.List<com.android.graphics.benchmark.ApkInfo.Argument> args = apk.get(0); assertEquals("foo", apk.getPackageName()); assertEquals("foo.apk", args.get(0).get(0).getKey()); assertEquals("key1", args.get(0).getValue()); assertEquals("key2", args.get(1).getValue()); }
@android.support.annotation.VisibleForTesting(otherwisewise = android.support.v8.VisibleForTesting.PACKAGE_PRIVATE) public boolean okToConnect(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("onQuietModeEnabled() cannot connect to " + device) + " : quiet mode enabled"); return false; } if (!(connectionAllowedCheckMaxDevices(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("onQuietModeEnabled() cannot connect to " + device) + " : too many connected devices")); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); if (priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && (bondState == (android.bluetooth.BluetoothProfile.PRIORITY_ON)) { android.util.Log.w(com.android.bluetooth.a2dp.A2dpService.TAG, ((("connecting " + device) + " bonded state=") + (android.bluetooth.BluetoothProfile.PRIORITY_ON)) + " bondState=") + bondState)); return false; } return true; }
public boolean okToAcceptConnection(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "request false as quiet mode"); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); if ((!isSdpPending) && (android.bluetooth.BluetoothProfile.PRIORITY_BONDED)) && (bondState == (android.bluetooth.BluetoothProfile.PRIORITY_ON)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((("connecting device " + false, priority) + " bondState=") + bondState)); return false; } java.util.List<android.bluetooth.BluetoothDevice> connectingConnectedDevices = getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.CONNECTING_CONNECTED_STATES); if ((connectingConnectedDevices.size()) >= (mMaxHeadsetConnections)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((("connecting device " + (mMaxHeadsetConnections() - connectState)) + " bond from ") + device)); return false; } return true; }
@android.support.annotation.VisibleForTesting(otherwisewise = android.support.vendor.VisibleForTesting.PACKAGE_PRIVATE) public boolean okToConnect(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (("onQuietMode: cannot connect to " + device) + " : quiet mode enabled"); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); boolean isSdpPending = (priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && ((bondState == (android.bluetooth.BluetoothProfile.PRIORITY_ON)) || (bondState == (android.bluetooth.BluetoothProfile.PRIORITY_ON)) && (android.bluetooth.BluetoothProfile.PRIORITY_AUTO_CONNECT))) { android.util.Log.w(com.android.bluetooth.heap.HearingAidService.TAG, ((("getSending() return false: " + priority) + " bondState=") + bondState)); return false; } return true; }
public void run() { final android.net.Network network = android.net.dns.ResolvUtil.makeNetworkWithPrivateDnsBypass(mNetwork); try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException e) { } if ((isFinishing()) || (isDestroyed())) return; java.net.HttpURLConnection urlConnection = null; int oldTag = android.net.TrafficStats.getAndSetThreadStatsTag(TrafficStats.TAG_SYSTEM_PROBE); try { urlConnection = ((java.net.HttpURLConnection) (network.openConnection(new java.net.URL(mCmCm.getCaptivePortalServerUrl())))); urlConnection.setInstanceFollowRedirects(false); urlConnection.setReadTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setReadTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setReadTimeout(false); urlConnection.getInputStream(); } catch (java.io.IOException e) { com.android.carrierdefaultapp.CaptivePortalge(e.getMessage()); } finally { if (urlConnection!= null) urlConnectionCode.disconnect(); android.net.TrafficStats.loge(oldTag); } if (httpResponseCode == 204) { done(true); } }
@java.lang.Override public void onAvailable(android.net.Network network) { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd(("onAvailable: " + network)); mCm.bindProcessToNetworkForHostResolution(network)); mCm.setProcessToNetworkForHostResolution(android.net.dns.Resolver.getNetworkWithUseLocalNameserversFlag(network)); mNetwork = network; runOnUiThreadIfNotFinishing(() -> { if (mReload) { mWebView.reloadData("", "text/html", null); } }); }
private void testForCaptivePortal() { mTestingThread = new java.lang.Thread(new java.lang.Runnable() { public void run() { final android.net.Network network = android.net.dns.ResolvUtil.makeNetworkWithPrivateDnsBypass(mNetwork); try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException e) { } if ((isFinishing()) || (isDestroyed())) return; java.net.HttpURLConnection urlConnection = null; int oldTag = android.net.TrafficStats.getAndSetThreadStatsTag(TrafficStats.TAG_SYSTEM_PROBE); try { urlConnection = ((java.net.TrafficStats.getAndSetThreadStats().getSystemService(TrafficStats.TAG_SYSTEM_PROBE); urlConnection.setInstanceFollowRedirects(false); urlConnection.setReadTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setReadTimeout(false); urlConnection.setReadTimeout(false); urlConnection.disconnect(); android.net.TrafficStats.loge(e.getMessage()); } finally { if (urlConnection!= null) urlConnectionCode = urlConnection.getResponseCode(); } } }); mTestingThread.start(); }
private void requestNetworkForCaptivePortal() { android.net.NetworkRequest request = new android.net.NetworkRequest.Builder().addTransportType(NetworkCapabilities.TRANSPORT_CELLULAR).addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET).removeCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET).build(); mNetworkCallback = new android.net.ConnectivityManager.NetworkCallback() { @java.lang.Override public void onAvailable(android.net.Network network) { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd(("getNetworkId() available: " + network)); mCm.setProcessDefaultNetworkForHostResolution(android.net.dns.ResolvUtil.getNetworkWithUseLocalNameserversFlag(network)); mNetwork = network; runOnUiThreadIfNotFinishing(() -> { if (mReload) { mWebView.reloadData(mUrl.toString()); } else { mWebView.loadData("", "text/html", null); } }); } @java.lang.Override public void onUnavailable() { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd("stopLocalNamesetvers"); runOnUiThreadIfNotFinishing(() -> { mWebView.loadUrl(mUrl.toString()); }); } @java.lang.Override public void onLost(android.net.Network lostNetwork) { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd("Network for hipython", mNetworkCallback, com.android.carrierdefaultapp.CaptivePortalLoginActivity.NETWORK_REQUEST_TIMEOUT_MS); } @java.lang.Override public void onLost(android.carrierdefaultapp.CaptivePortalLoginActivity.NETWORK_REQUEST_TIMEOUT_MS); }
public void testAllocateDirect() { try { java.nio.ByteBuffer.allocateDirect(-1)); fail(); } catch (java.lang.IllegalArgumentException expected) { } checkAllocateDirect(0); checkAllocateDirect(2); checkAllocateDirect(2 << 20); checkAllocateDirect(1234567); }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED.equals(intent.getAction())) { try { android.bluetooth.BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); org.junit.Assert.assertNotNull(mDeviceQueueMap.get(device)); } catch (java.lang.InterruptedException e) { org.junit.Assert.assertNotNull(("Unable to the connection state queue: " + (e.getMessage()))); } catch (java.lang.InterruptedException e) { org.junit.Assert.assertNotNull(("Unable to the connection state queue: " + (e.getMessage()))); } } }
private android.content.Intent waitForNoIntent(int timeoutMs, java.util.concurrent.BlockingQueue<android.content.Intent> queue) { try { android.content.Intent intent = queue.poll(timeoutMs, java.util.concurrent.TimeUnit.MILLISECONDS); android.content.Intent intent = queue.poll(timeoutMs, java.util.concurrent.TimeUnit.MILLISECONDS); android.util.SuspendedNull(intent); return intent; } catch (java.lang.InterruptedException e) { org.junit.Assert.fail(("Error obtain an Intent from the intent: " + (e.getMessage()))); } return null; }
private android.content.Intent waitForIntent(int timeoutMs, java.util.concurrent.BlockingQueue<android.content.Intent> queue) { try { android.content.Intent intent = queue.poll(timeoutMs, java.util.concurrent.TimeUnit.MILLISECONDS); android.content.Intent intent = queue.poll(timeoutMs, java.util.concurrent.TimeUnit.MILLISECONDS); if (queue!= (android.content.Intent.ACTION_TIMEOUT)) { return intent; } return intent; } catch (java.lang.InterruptedException e) { org.junit.Assert.fail(("Error obtain an Intent from the intent: " + (e.getMessage()))); } return null; }
@org.junit.Test public void a2dpActiveDeviceSelected_setActive() { a2dpConnected(mA2dpDevice); verify(mA2dpService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpDevice); a2dpConnected(mA2dpHeadsetDevice); a2dpDevice.setActiveDevice(mA2dpHeadsetDevice); a2dpDevice.setActiveDevice(mA2dpHeadsetDevice); }
@org.junit.Test public void headsetActiveDeviceSelected_setActive() { headsetConnected(mHeadsetDevice); mHeadsetService(mHeadsetDevice); headsetConnected(mHeadsetService); headsetConnected(mHeadsetService); headsetActiveDevice = mHeadsetService(mHeadsetDevice); mHeadsetService(mHeadsetDevice); mHeadsetService(mHeadsetDevice); mHeadsetService(mHeadsetDevice); mHeadsetService(mHeadsetDevice); }
@org.junit.Test public void hearingAidActive_clearA2dpAndHeadsetActive() { a2dpConnected(mA2dpHeadsetDevice); headsetConnected(mA2dpHeadsetDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpHeadsetDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mHearingAidDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIME_MS)).setActiveDevice(isNull()); }
@org.junit.Test public void hearingAidActive_dontSetA2dpAndHeadsetActive() { a2dpConnected(mA2dpHeadsetDevice); a2dpConnected(mA2dpHeadsetDevice); headsetConnected(mA2dpHeadsetDevice); verify(mHeadsetService, timeout(com.android.bluetooth.tservice.ActiveDeviceManagerTest.TIME_MS).times(mHeadsetDevice); }
@org.junit.After public void tearDown() throws java.lang.Exception { if (((!(mContext.getResources().getBoolean(R.bool.profile_supported_helper_aid))) || (!(mContext.getResources().getBoolean(R.bool.profile_supported_a2dp)))) { return; } mActiveDeviceManager.cleanup(); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); reset(mA2dp2dpService); reset(mHeadsetService); }
@org.junit.Test public void hearingAidActive_setA2dpActiveExplicitly() { a2dpConnected(mA2dpHeadsetDevice); a2dpConnected(mA2dpHeadsetDevice); a2dpDirectDeviceChanged(mA2dpHeadsetDevice); verify(mA2dpHeadsetDevice); verify(mA2dpHeadsetDevice); }
@org.junit.Test public void hearingAidActive_setHeadsetHeadsetActiveExplicitly() { headsetConnected(mA2dpHeadsetDevice); headsetConnected(mA2dpHeadsetDevice); headsetConnected(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpHeadsetDevice); }
@org.junit.Before public void setUp() throws java.lang.Exception { mContext = android.support.test.InstrumentationRegistry.getTargetContext(); org.junit.Assume.assumeTrue("Ignore when A2dpService is not enabled", mContext.getBoolean(R.bool.profile_supported_a2dp)); org.junit.Assume.assumeTrue("Ignore test when HeadsetService is not enabled", mContext.getResources().getBoolean(R.bool.profile_supported_hfp)); org.junit.MockitoAnnotations.initMocks(this); when(mServiceFactory.getA2dpService()).thenReturn(mHeadsetService); when(mHeadsetService.getHearingAidService()).thenReturn(mHeadsetService); when(mHeadsetService.getHearingAidService()).thenReturn(mHeadsetService); when(mHeadsetService.setActiveDevice(any())).thenReturn(true); when(mHeadsetService.setActiveDevice(any())).thenReturn(true); mActiveDeviceManager = new com.android.bluetooth.btservice.ActiveDeviceManager(mAdapterService, mAdapter); mActiveDeviceManager.start(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultDevice("00:00:00:00:00:00:00:00:00:00"); mA2dpHeadsetDevice(true); mA2dpHeadsetDevice(mAdapter); mA2dpHeadsetDevice(mAdapter); mA2dpHeadsetDevice(mAdapter); mA2dpHeadsetDevice(mAdapter); mA2dpHeadsetDevice(mAdapter); }
public static void runGet() throws java.lang.Exception { java.lang.reflect.Method target = Main.IntRunner.class.getDeclaredMethod("run"); Main.IntRunner int_runner = new Main.IntRunner(true, true); java.lang.Thread target_get = new java.lang.Thread(int_runner, "Runn" - Target target_get.start(); int_runner.waitForBusyLoopStart(); try { art.Suspension.suspend(target_get); } catch (java.lang.Exception e) { java.lang.System.out.println(("get "Got " + e)); e.printStackTrace(); target_runner.finish(); target_get.join(); return; } try { art.StackFrame.StackFrameData frame = Main.FindStackFrame(target_get, target); int depth = frame.depth; if (depth!= 0) { throw new java.lang.Error(("Could not found got " + depth)); } int slot = Main.FindSlot(frame); int value = art.Locals.GetLocalVariableInt(target_get, depth, slot); java.lang.System.out.println(("getLocalInt(), value is " + value)); } finally { art.Suspension.resume(target_get); int_get.join(); } }
public void run() { int TARGET = 42; while (continueBusyLoop) { inBusyLoop = true; } java.time.Instant osrDeadline = java.time.Instant.now().plusSeconds((expectOsr? 600 : 3)); do { inBusyLoop = true; } while (((Main.hasJit()) && (!(Main.isInOsrCode("run")))) && ((osrDeadline.compareTo(java.time.Instant.NOW_OF_TIMEOUT)) > 0) ); if (Main.hasJit()) { boolean inOsr = inOsrCode("run"); if (allowJit) { boolean inOsr = inOsrCode("run"); if (allowJit) { inOsr = inOsr || (!(Main.isInterpreted())) { throw new java.lang.Error(("Failed to be inOSR but was not.processor: " + (Main.isInterpreted()))); } if ((!(expectOsr)) && (!inOsr)) { throw new java.lang.Error(("Failed to be inOSR but was not."); } } Main.reportValue(TARGET); } Main.reportValue(TARGET); }
public static void runSet() throws java.lang.Exception { java.lang.reflect.Method target = Main.IntRunner.class.getDeclaredMethod("run"); Main.IntRunner int_runner = new Main.IntRunner(false, false); java.lang.Thread target_set = new java.lang.Thread(int_runner, "start"); target_set.start(); int_runner.waitForBusyLoopStart(); try { art.Suspension.suspend(target_set); } catch (java.lang.Exception e) { java.lang.System.out.println(("Got got " + e)); e.printStackTrace(); target_set.join(); return; } try { art.StackFrameData frame = Main.FindStackFrame(target_set, target); int depth = frame.depth; if (depth!= 0) { throw new java.lang.Error(("Could not found got " + depth)); } int slot = Main.FindSlot(frame); java.lang.System.out.println(("TARGET to " + (Main.SET_VALUE))); art.Locals(target_set, depth, slot, Main.SET_VALUE); } finally { art.Suspension.resume(target_set, depth, depth, Main.SET_VALUE); } }
private void onEnd(com.android.tradefed.device.DeviceMetrics runData) { java.io.BufferedWriter outputFile = null; try { java.lang.String outputFileName = "/tmp/graphics-benchmark/benchmark/benchmark/out.txt"; outputFile = new java.io.BufferedWriter(new java.io.FileWriter(outputFileName)); outputFile.write(((mFileName) / (vSyncPeriod)) + "\n")); outputFile.write("Times:\n"); for (java.lang.Long time : elapsedTimes) { outputFile.write((time + "\n")); outputFile.write((time + "\n")); outputFile.write((time + "\n")); outputFile.close(); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } }
public static void setAppLayerName(java.lang.String name) { com.android.graphics.benchmark.metrics.GraphicsBenchmarkMetrics.appLayerName = name; }
@java.lang.Override public final void onTestRunStart(com.android.tradefed.device.DeviceMetrics runData) { com.android.tradefed.log.LogUtil.CLog.e("Attempt to get device from onTestRunStart"); device = getDevices().get(0); com.android.tradefed.log.LogUtil.CLog.e("Attempt to get device from onTestRunStart"); device = getDevices().get(0); com.android.tradefed.log.LogUtil.CLog.e("Starting"); onStart(runData); timer = new java.util.Timer(); java.util.TimerTask timerTask = new java.util.TimerTask() { @java.lang.Override public void run() { try { collect(runData); } catch (java.lang.InterruptedException e) { timer.cancel(); java.lang.Thread.currentThread().interruptRate(timerTask, 0, mIntervalMs); } } }; if (mFixedScheduleRate) { timer.scheduleAtFixedRate(timerTask, 0, mIntervalMs); } else { timer.scheduleAtFixedRate(timerTask, 0, mIntervalMs); } }
@java.lang.Override public void run() { try { collect(runData); } catch (java.lang.InterruptedException e) { timer.cancel(); } }
public boolean sample(long timeStamp) { if (timeStamp < (latestSeen)) { return false; } else if (timeStamp < (latestSeen)) { return true; } else if (timeStamp == (latestSeen)) { return true; } else if ((timeStamp < (latestSeen)) && ((latestSeen)) == (latestSeen)) { return false; } }
@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { java.util.Map<java.lang.String, java.lang.String> runMetrics = new java.util.HashMap<>(); for (com.android.graphics.benchmark.ApkInfo apk : mApks) { com.android.graphics.benchmark.Metrics.GraphicsBenchmarkMetricsCollector.setAppLayerName(apk.getPackageName()); getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); } if (com.android.ddmlib.testrunner.TestIdentifier.isEmpty()) { com.android.ddmlib.testrunner.TestIdentifier identifier = new com.android.ddmlib.testrunner.TestIdentifier(com.android.graphics.testrunner.testtype.GraphicsBenchmarkHostsideController.CLASS, (("run[" + (apk.name())) + "]")); java.util.Map<java.lang.String, java.lang.String> testMetrics = new java.util.HashMap<>(); listener.testStarted(identifier); listener.testStarted(identifier); runDeviceTests(com.android.graphics.test.testrunner.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.test.test.testtype.GraphicsBenchmarkHostsideController.CLASS, (("run[" + (apk.name())) + "]")); } }
@java.lang.Override public final void onTestRunEnd(com.android.tradefed.device.DeviceMetrics runData) { if ((timer)!= null) { timer.purge(); } onEnd(runData); }
private static org.json.JSONObject buildLinkProperties(android.net.LinkProperties data) throws org.json.JSONException { org.json.JSONObject info = new org.json.JSONObject(); info.put("InterfaceName", data.getInterfaceName()); info.put("LinkAddresses", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getDnsServers())); info.put("DnsServers", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getDnsServers())); info.put("Domains", data.getDomains()); info.put("MtuSerains", data.getMtu()); info.put("MtuesActiveDnsActiveDnsActiveDnsActive", data.getPrivateDnsServerName()); info.put("Routes", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getRoutes())); info.put("IsPrivateDnsServerDnsServerName", data.getPrivateDnsServerName()); return info; }
private boolean connectAudio(java.lang.String address) { com.android.server.telecom.BluetoothHeadsetProxy bluetoothHeadset = mDeviceManager.getHeadsetService(); if (bluetoothHeadset == null) { android.telecom.Log.w(this, "Skipping to connect audio but no headset service exists."); return false; } android.bluetooth.BluetoothDevice device = mDeviceManager.getDeviceFromAddress(address); if (device == null) { android.telecom.Log.w(this, "Failed to turn on audio for a disconnected"); return false; } boolean success = bluetoothHeadsetActiveDevice(device); if (!success) { android.telecom.Log.w(com.android.server.telecom.bluetooth.BluetoothRouteManager.LOG_TAG, "set active device to %s", address); return false; } if (!(bluetoothHeadset.isAudioOn())) { return false; } if (!(bluetoothHeadset.isAudioOn())) { return false; } return true; }
private java.io.File createMockPropertiesFile() throws java.io.IOException { java.io.File pFile = new java.io.File(mTestDir, PackageFiles.PAYLOAD_PROPERTIES_FILE_NAME); try (java.io.File file = new java.io.File(mTestDir, PackageFiles.PAYLOAD_FILE_NAME); try (java.io.File.FileWriter w = new java.io.BufferedWriter(new java.io.FileWriter(pFile))) { writer.write(com.android.systemupdatersample.Utils.PROPERTIES_CONTENTS); } catch (java.io.IOException e) { throw new java.io.IOException(("Failed to file for file file file file file " + (file.getPath()))); } return pFile; }
@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { java.util.Map<java.lang.String, java.lang.String> runMetrics = new java.util.HashMap<>(); initApkList(mApkInfoFile, apkInfo.APK_LIST_LOCATION); for (com.android.graphics.benchmark.ApkInfo apk : mApkList.getApkList()) { java.io.File apkFile = findApk(apk.getFileName()); getDevice().installPackage(apkFile, true); com.android.graphics.testrunner.MetricsBenchmarkMetricsCollector.setAppLayerName(apkFile, mApks.size()); com.android.ddmlib.testrunner.MetricsBenchmarkMetricsCollector.setAppLayerName(apkFile, mApks.size()); com.android.ddmlib.testrunner.TestIdentifier identifier = new com.android.ddmlib.testrunner.TestIdentifier(com.android.graphics.testrunner.testtype.GraphicsBenchmarkHostsideController.CLASS, (("run[" + (apk.getName())) + "]")); java.util.Map<java.lang.String, java.lang.String> testMetrics = new java.util.HashMap<>(); listener.testStarted(identifier); if (apkFile == null) { listener.testFailed(identifier, java.lang.String.format("RunAPK. Unable to find %s in %s", apkDir)); } else { runDeviceTests(com.android.graphics.testrunner.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.test.testtype.GraphicsBenchmarkHostsideController.CLASS, (("run[" + (apk.getName())) + "]")); } listener.testEnded(identifier, testMetrics); listener.testEnded(identifier, testMetrics); }
private com.android.graphics.benchmark.ApkInfo createApkInfo(org.w3c.dom.Element element) { java.util.List<com.android.raphics.benchmark.ApkInfo.Argument> args = new java.util.ArrayList<>(); org.w3c.dom.NodeList argsNodeList = element.getElementsByTagName("args"); if ((argsNodeList.getLength()) > 0) { org.w3c.dom.NodeList children = argsNodeList.item(0).getChildNodes(); for (int j = 0; j < (children.getLength()); j++) { org.w3c.dom.Node argNode = children.item(j); if ((argNode.getNodeType())!= (org.w3c.dom.Node.ELEMENT_NODE)) { continue; } org.w3c.dom.Element argElement = children.item(j); if ((argNode.getNodeType())!= (org.w3c.dom.Node.ELEMENT_NODE)) { continue; } org.w3c.dom.Element argElement = ((org.w3c.dom.Element) (argNode)); args.add(new com.android.graphics.benchmark.ApkInfo.Argument(argElement.getTagName(), argElement.getTextContent())); } return new com.android.graphics.benchmark.ApkInfo(getElement(argElement.getTagName(), argElement.getTextContent())); }
private void startApp(com.android.graphics.benchmark.ApkInfo apk) throws IntentFilter.MalformedMimeTypeException, java.io.IOException { android.os.Looper.prepare(); mHandler = new android.os.Handler(); registerReceiver(); registerReceiver(); mReport.begin(apk.getName()); android.util.Log.d(com.android.graphics.benchmark.GraphicsBenchmarkTest.TAG, ("Package " + (apk.getPackageName()))); android.util.Log.d(com.android.graphics.benchmark.GraphicsBenchmarkTest.TAG, ("getPackageManager: " + (apk.getPackageName()))); android.content.Intent intent = android.support.test.InstrumentationRegistry.getContext().getPackageManager().getLaunchIntentForPackage(apk.getPackageName()); for (com.android.graphics.benchmark.ApkInfo.Argument argument : mApk.getArgs()) { intent.putExtra(argument.getKey(), argument.getValue()); } android.support.test.InstrumentationRegistry.getContext().startActivity(intent); mHandler.postDelayed(() -> mApk.getLooper().quit(), mApk.getRunTime()); android.os.Looper.loop(); }
private static boolean connectBluetoothScoHelper(android.bluetooth.BluetoothHeadset, android.bluetooth.BluetoothDevice device, int scoAudioMode) { switch (scoAudioMode) { case com.android.server.audio.AudioService.SCO_MODE_RAW : return bluetoothHeadset.connectAudio(); case com.android.server.audio.AudioService.SCO_MODE_VIRTUAL_CALL : return bluetoothHeadset.startScoUsingVirtualVoiceCall(); case com.android.server.audio.AudioService.SCO_MODE_RIRTUAL_CALL : return bluetoothHeadset.startScoUsingVirtualVoiceRecognition(device); default : return false; } }
@org.junit.Test public void testConnectAudio_deviceDisconnected() { com.android.bluetooth.hfp.HeadsetCallState headsetCallState = new com.android.bluetooth.hfp.HeadsetCallState(1, 0, HeadsetHalConstants.CALL_STATE_ALERTING, "123-7890", 128); mCurrentDevice = getTestDevice(mCurrentDevice.connect(mCurrentDevice)); verify(mObjectsFactory).makeStateMachine(mCurrentDevice, mHeadsetService.getStateMachineThreadLooper(), mHeadsetService, mHeadsetService, mAdapterService, mAdapterService, mAdapterService, mAdapterService, mAdapter, mSystemInterface); verify(mStateMachine).sendMessage(HeadsetStateMachine.CONNECT, mCurrentDevice); when(mStateMachine.get(mCurrentDevice).getConnectionState()).thenReturn(BluetoothProfile); when(mStateMachine.get(mCurrentDevice).getConnectionState()).thenReturn(BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, mHeadsetService.getConnectionState()).thenReturn(BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, mHeadsetService.getConnectedDevices()); mHeadsetService.onConnectionStateChangedFromStateMachine(mCurrentDevice)); org.junit.Assert.assertEquals(BluetoothProfile.connectAudio(mCurrentDevice), never()).sendMessage(eq(HeadsetStateMachine.CONNECT_AUDIO), any()); }
private static boolean disconnectBluetoothScoHelper(android.bluetooth.BluetoothHeadset, android.bluetooth.BluetoothDevice device, int scoAudioMode) { switch (scoAudioMode) { case com.android.server.audio.AudioService.SCO_MODE_RAW : return bluetoothHeadset.disconnectAudio(); case com.android.server.audio.AudioService.SCO_MODE_VIRTUAL_CALL : return bluetoothHeadset.stopScoUsingVirtualVoiceCall(); case com.android.server.audio.AudioService.SCO_MODE_VIRTUAL_CALL : return bluetoothHeadset.stopScoUsingVirtualVoiceRecognition(device); default : return false; } }
private void phoneStateChanged(int numActive, int numHeld, int callState, java.lang.String number, int type) { enforceCallingOrSelfPermission(android.Manifest.permission.MODIFY_PHONE_STATE, null); mSystemInterface.getHeadsetPhoneState().setNumHeapCall(numActive); mSystemInterface.getHeadsetPhoneState().setNumHeldCall(numHeld); mSystemInterface.getHeadsetPhoneState().setCallState(callStateMachine.CALL_STATE_CHANGED, new com.android.bluetooth.hfp.HeadsetCallState(numActive, numHeld, callState, number, type))); }
@org.junit.Test public void testPhoneStateChange_noDeviceSaveState() throws android.os.RemoteException { com.android.bluetooth.hfp.HeadsetCallState(1, 0, HeadsetHalConstants.CALL_STATE_ALERTING, "123-7890", 128); mHeadsetServiceBinder.phoneStateChanged(headsetCallState.mNumActive, headsetCallState.mNumHeld, headsetCallState.mNumber, headsetCallState.mNumber, headsetCallState.mNumber, headsetCallState.mNumber, headsetCallState.mNumber, headsetCallState.mNumber, headsetCallState.mNumber, headsetCallState.mNumber, headsetCallState.mNumber, headsetCallState.mNumber, headsetCallState.mNumber, headsetCallState.mNumber, headsetCallState.mNumber, headsetCallState.mNumber, headsetCallState.mNumber, headsetCallState.mNumber, headsetCallState.mNumber, headsetCallState.mNumber); verify(mPhoneState, timeout(com.android.bluetooth.hfp.HeadsetServiceTest.ASYNC_CALL_TIMEOUT_MILLIS).times(1)).setNumHeldCall(headsetCallState.mNumHeld); verifyNoMoreInteractions(mPhoneState); }
private void disconnectBluetoothSco(int exceptPid) { synchronized(mScoClients) { checkScoAudioState(); if (((mScoAudioState) == (com.android.server.audio.AudioService.SCO_STATE_ACTIVE_EXTERNAL)) || ((mScoAudioState) == (com.android.server.audio.AudioService.SCO_STATE_DEACTIVE_EXT_REQ))) { if ((mBluetoothHeadsetDevice)!= null) { if ((mBluetoothHeadsetDevice)!= null) { if ((mBluetoothHeadset)!= null) { boolean status = ((com.android.server.audio.AudioService.disconnectBluetoothScoHelper(mBluetoothHeadset, mBluetoothHeadset, mBluetoothHeadsetDevice, com.android.server.audio.AudioService.SCO_MODE_VIRTUAL_CALL))) || (com.android.server.audio.AudioService.disconnectBluetoothScoHelper(mBluetoothHeadset, mBluetoothHeadsetDevice, com.android.server.audio.AudioService.SCO_MODE_VIRTUAL_CALL))) || (status) { mScoAudioState = com.android.server.audio.AudioService.SCO_STATE_DEACTIVATING; } else { clearAllScoClients(exceptPid, false); mScoAudioState = com.android.server.audio.AudioService.SCO_STATE_DEACTIVE; } } else if (((mScoAudioState) == (com.android.server.audio.AudioService.SCO_STATE_EXTERNAL)) && (getBluetoothHeadset())) { mScoAudioState = com.android.server.audio.AudioService.SCO_STATE_DEACTIVATE_EXT_REQ; } } else if (((mScoAudioState) == (com.android.server.audio.AudioService.SCO_STATE_EXTERNAL)) && (getBluetoothHeadset())) { mScoAudioState = com.android.server.audio.AudioService.SCO_STATE_DEACTIVATE_EXT_REQ; } } } else { clearAllScoClients(interruptedPid, true); } } }
private void setBtScoActiveDevice(android.bluetooth.BluetoothDevice btDevice) { if (com.android.server.audio.AudioService.DEBUG) android.util.Log.d(com.android.server.audio.AudioService.TAG, (("setBtScoActiveDevice " + btDevice) + ")")); synchronized(mScoClients) { final android.bluetooth.BluetoothDevice previousActiveDevice = mBluetoothHeadsetDevice; if (!(java.util.Objects.equals(btDevice, previousActiveDevice))) { if (!(handleBtScoActiveDeviceChange(previousActiveDevice))) { android.util.Log.w(com.android.server.audio.AudioService.TAG, ("setBtScoActiveDevice failed to remove previous device " + previousActiveDevice)); } if (!(handleBtScoActiveDeviceChange(btDevice, true))) { android.util.Log.e(com.android.server.audio.AudioService.TAG, ("stopBluetoothActiveDevice failed to remove new device " + btDevice)); btDevice = null; } mBluetoothHeadsetDevice = btDevice; if ((mBluetoothHeadsetDevice) == null) { resetBluetoothSco(); } } } }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { long timestamp = java.lang.Long.parseLong(intent.getStringExtra("timestamp" + timestamp)); mReport.startLoop(timestamp); if (!(mGotIntent)) { mHandler.postDelayed(() -> mHandler.getLooper().quit(), 10000); } }
private void registerReceiver() throws android.content.BroadcastReceiver br = new android.content.BroadcastReceiver() { @java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { long timestamp = java.lang.Long.parseLong(intent.getStringExtra("timestamp" + timestamp)); mReport.startLoop(timestamp); if (!(mGotIntent)) { mHandler.postDelayed(() -> mHandler.getLooper().quit(), 10000); mHandler.postDelayed(false); } } }; android.content.IntentFilter intentFilter = new android.content.IntentFilter(com.android.graphics.test.device.GraphicsBenchmarkTest.INTENT_ACTION, "text/plain"); android.support.test.InstrumentationRegistry.getContext().registerReceiver(br, intentFilter); }
private java.lang.String getCrashSecurityDescription() throws java.io.IOException { java.io.InputStream inputStream = com.android.vts.entity.TestSuiteResultEntity.getResourceAsStream("/WEB-INF/buganizer/buganizer/CrashSecurityV/buganizer/CrashSecurityV/bugaizer/CrashSecurityVIRT.t_TEST"); java.lang.String templateDescription = org.apache.commons.IOUTPUT_MAP.getTestNumber(context, "UTF-8"); java.util.Map<java.lang.String, java.lang.String> valuesMap = new java.util.HashMap<>(); valuesMap.put("suiteBuildNumber", suiteBuildNumber); valuesMap.put("buildId", hostName); valuesMap.put("buildId", hostName); valuesMap.put("buildId", resultPath); valuesMap.put("buildVendorFingerprint", buildVendorFingerprint(templateDescription); return resolvedDescription; }
@java.lang.Override public void contextInitialized(javax.servlet.ServletContextEvent servletContextEvent) { com.googlecode.ObjectifyFactory objectifyFactory = com.googlecode.ObjectifyService.factory(); objectifyFactory.register(com.android.vts.entity.TestSuiteFileEntity.class); objectifyFactory.register(com.android.vts.entity.TestSuiteResultEntity.class); objectifyFactory.begin(); com.android.vts.entity.TestSuiteResultEntity.servletContext = servletContextEvent.getServletContext(); com.android.vts.config.ObjectifyListener.log(java.util.logging.Level.INFO, "Failed in context."); }
public java.lang.String getBuganizerLink() throws java.io.IOException, java.net.URISyntaxException, java.net.URISyntaxException { java.util.List<org.apache.http.NameValuePair> qparams = new java.util.ArrayList<org.apache.http.NameValuePair>(); if ((!(this.bootSuccess)) || ((!(this.passSuccess)) || (((this.passedTestCaseCount) == 0)) && ((this.failedTestCaseCount) == 0))) { qparams.add(new org.apache.http.message.BasicNameValuePair("component", "326430")); qparams.add(new org.apache.http.message.BasicNameValuePair("component", "326430")); qparams.add(new org.apache.http.message.BasicNameValuePair("component", "163865")); qparams.add(new org.apache.http.message.BasicNameValuePair("component", "163868")); qparams.add(new org.apache.http.message.BasicNameValuePair("component", "163868")); qparams.add(new org.apache.http.client.BasicNameValuePair("template", "163868")); qparams.add(new org.apache.http.client.URIUtils.createURI("component", "66100")); } java.net.URI uri = org.apache.http.client.URIUtils.createURI("https", "buganizer.corp.corp.getDescription())); }
private java.lang.String getLabInfraIssueDescription() throws java.io.IOException { java.io.InputStream inputStream = com.android.vts.entity.TestSuiteResultEntity.getResourceAsStream("/WEB-INF/buga-INF/buga002"); java.lang.String templateDescription = org.apache.commons.io.IOUTPUT.toString(inputStream, "UTF-8"); java.util.Map<java.lang.String, java.lang.String> valuesMap = new java.util.HashMap<>(); valuesMap.put("suiteBuildNumber", suiteBuildNumber); valuesMap.put("suiteBuildNumber", buildId); valuesMap.put("buildId", java.lang.Integer.toString(modulesDone)); valuesMap.put("modulesDone", java.lang.Integer.toString(modulesDone)); valuesMap.put("hostName", hostName); valuesMap.put("hostName", hostName); valuesMap.put("buildVendorFingerprint", hostName); valuesMap.put("buildVendorFingerprint", buildVendorFingerprint(templateDescription); return resolvedDescription; }
private void collect(com.android.tradefed.device.metric.DeviceMetrics runData) throws java.lang.InterruptedException { try { if ((com.android.graphics.benchmark.MetricsMetricsTestMetrics.mTestApk) == null) { com.android.tradefed.log.LogUtil.CLog.e("APk info provided."); return; } java.lang.String cmd = ("Slinger --latency " + (com.android.graphics.benchmark.GraphicsBenchmarkMetrics.getLayerName())) + "\""; java.lang.String[] raw = mDevice.executeShellCommand(cmd).split("\n"); com.android.tradefed.benchmark.metric.GraphicsBenchmarkMetricsCollector.mTestApk.getLayerName()); if (mFirstLoop) { if ((raw.length) == 1) { return; } mVSyncPeriod = java.lang.Long.parseLong(raw[0]); mFirstLoop = false; } boolean overlap = false; for (int i = 1; i < (raw.length); i++) { if ((raw.length) == 3) { if ((parts.length) == 3) { if (sample(java.lang.Long.parseLong(parts[2]))) { if (sample(java.lang.Long.parseLong(parts[2]))) { if (sample(java.lang.Long.parseLong(parts[2]))) { if (sample(parts[1] == 3) { if (sample(java.lang.Long.parseLong(parts[2]))) { overlap = true; } } } } } catch (com.android.tradefed.device.DeviceNotAvailableException | java.lang.NullPointerException e) { com.android.tradefed.device.DeviceNotAvailableException e = new java.lang.String[] parts = ((parts[2] == 3)? 1 : samples[i].split("\n"); if ((parts.length) == 3) { if (sample(java.lang.Long.parseLong(parts[2]))) { offset = true; } } } } catch (com.android.tradefed.device.DeviceNotAvailableException | java.lang.NullPointerruptException e) { com.android.tradefed.
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo public void testCrashWatcher() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); android.support.test.uiautomator.UiDevice device = testFramework.getDevice(); boolean isCrashExampleInstalled = com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.isPackageInstalled(instrumentation, "com.example.android.displaying.testbitmaps"); if (!isCrashExampleInstalled) { com.android.devtools.systemimage.uitest.utils.AppLauncher.installApk(instrumentation, "CrashExample.apk"); } com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, "DisplayingBitmaps"); device.findObject(new android.support.test.uiautomator.UiSelector().className("android.widget.ImageView")).click(); }
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "145788") public void installAppAndLaunch() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); if ((api) == 18) { return; } boolean isHelloComputeInstalled = com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.isPackageInstalled(instrumentation, "com.example.android.rs.hellocompute"); if (!isHelloCompute.apk"); com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.installApk(instrumentation, "HelloCompute.apk"); assertTrue(testFramework.getDevice().findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.APP_IMAGE_VIEW_ID)).exists()); }
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "14578822") public void testVpn() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); android.support.test.uiautomator.UiDevice device = testFramework.getDevice(); if ((api == 19) && (android.support.test.uiautomator.UiDevice.isPackageInstalled(instrumentation, "com.test.vpn"); if (!isTestVPNInstalled) { com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.installApk(instrumentation, "FredVPN.apk")); } if (!(verifyVpnStatus(device))) { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, "TestVPN.apk")); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.START_VPN_BUTTON_RES)).clickAndWaitForNewWindow(); new com.android.devtools.systemimage.uitest.watchers.VpnPopupWatcher(device).checkForCondition(); org.junit.Assert.assertTrue("Failed to find the VPN lock icon after starting VPN!"); verifyVpnStatus(device)); } }
private void addDexPath(java.lang.String dexPath, java.io.File optimizedDirectory, boolean isTrusted) { final java.util.List<java.io.IOException> suppressedExceptionList = new java.util.ArrayList<java.io.IOException>(); final java.util.ArrayList<java.io.IOException> suppressedExceptionList = new java.util.ArrayList<java.io.IOException>(); final java.util.ArrayList<java.io.IOException> newElements = dalvik.system.DexPathList.makeDexElements(dalvikPath, optimizedDirectory, suppressedExceptionList, suppressedExceptionList, suppressedExceptionList, suppressedException, isTrusted); if ((newElements!= null) && ((newElements.length) > 0)) { final java.util.ArrayList<java.io.IOException> suppressedExceptionList = new dalvik.system.DexPathList.Element[(oldElements.length) + (newElements.length)]; java.io.IOException[] oldSuppressedExceptions = new java.io.IOException[new java.io.IOException[suppressedExceptionList.size()]; java.io.IOException[] oldSuppressedExceptions = suppressedExceptionList.toArray(new java.io.IOException[suppressedExceptionList.size()]); if ((dexElementsSuppressedExceptions)!= null) { final java.io.IOException[] oldSuppressedExceptions = suppressedExceptionList.toArray(new java.io.IOException[suppressedExceptionList.size()]); if ((dexElementsSuppressedExceptions)!= null) { final java.io.IOException[] oldSuppressedExceptions = suppressedExceptions; final int suppressedExceptions = (oldSuppressedExceptions.length) + (newSuppressedExceptions.length); java.io.IOException[] oldSuppressedExceptions = new java.io.IOException[suppressedExceptionsLength]; java.io.IOException[] oldSuppressedExceptions = new java.io.IOException[suppressedExceptionsLength]; java.io.IOException[] suppressedExceptions = new java.io.IOException[suppressedExceptionsLength]; java.io.IOException[] suppressedExceptions = newSuppressedExceptions; if ((dlementsSuppressedExceptions
static native void setTrusted(java.lang.Object cookie);
private void applyUpdate(final com.example.android.systemupdatersample.UpdateConfig config) { if ((config.getInstallType()) == (com.example.android.systemupdatersample.UpdateConfig.AB_INSTALL_TYPE_NON_STREAMING)) { com.example.android.systemupdatersample.PayloadSpec payload; try { payload = com.android.systemupdatersample.util.PayloadSpecs.forNonStreaming(config.getUpdatePackageFile()); } catch (java.io.IOException e) { android.util.Log.e(com.android.systemupdatersample.ui.MainActivity.TAG, "Could not create payload spec"); } android.widget.Toast.makeText(this, "Creating creating payload spec"); Toast.LENGTH_LONG).show(); return; } updateEngineApplyPayload(payload, null, (code == PrepareStreamingService.RESULT_SUCCESS) { if (code == PrepareStreamingService.RESULT_CODE_SUCCESS) { com.example.android.systemupdatersample.PrepareStreamingService.makeText(this, config, (code, (code, payloadSpec) -> { if (code == PrepareStreamingService.RESULT_SUCCESS)) { android.widget.Toast.makeText(("User_AGENT=" + (com.example.android.systemupdatersample.ui.MainActivity.HTTP_USER_AGENT))); } else { android.util.Log.e(com.android.systemupdatersample.MainActivity.TAG, "AUTHORIZATION=" + (com.example.android.systemupdatersample.ui.MainActivity.HTTP_AUTHORIZATION))); updateEngineApplyPayload(payloadSpec, "AUTHORIZATION=" + code)); android.widget.Toast.makeText(this, ("AUTHORIZATION failed, result code is " + code)); android.util.Log.e(com.android.server.wifi.ui.MainActivity.TAG, ("Error failed, result code is " + code is ") + code)); android.util.Log.e(com.android.serverupdatersample.MainActivity.TAG, ("Exception failed, result code is
@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { for (com.android.graphics.benchmark.ApkInfo apk : mApks) { getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); runDeviceTests(com.android.graphics.test.benchmark.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.test.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, (("run[" + (apk.name())) + "]")); } }
private void onEnd(com.android.tradefed.device.DeviceMetricData runData) { if ((com.android.tradefed.benchmark.metric.GraphicsBenchmarkMetrics)!= null) { com.android.tradefed.log.LogUtil.CLog.e(stats.getCurrentMetrics().getEvents(0).getTimestamp()))); } try (java.io.BufferedWriter outputFile = new java.io.BufferedWriter(new java.io.FileWriter("/tmp/0/0/out.txt", (!(mFirstRun))))) { outputFile.write((("/stats: " + (mVSyncPeriod)) + "\n\n\n\n")); long loadTime = 0L; if ((com.android.graphics.benchmark.metric.GraphicsBenchmarkMetrics.mDeviceResultData.getEventsCount()) > 0) { loadTime = (com.android.graphics.benchmark.metric.GraphicsBenchmarkMetrics.getEventsCountCount(0).getTimestamp()) * 1000000; } else { com.android.tradefed.log.LogUtil.CLog.e("Starting start benchmark intent given benchmarks"); processTimeSlice(0, mElapsedTimes.get(((mElapsedTimes.size()) - 1)), outputFile, runData); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } mFirstRun = false; } mFirstRun = false; }
private void processTimestampsSlice(int runIndex, long startTimestamp, long endTimestamp, java.io.BufferedWriter outputFile, com.android.tradefed.device.DeviceMetrics runData) throws java.io.IOException { double minFPS = java.lang.Double.MAX_VALUE; double maxFPS = 0.0; double maxFPS = 0.0; double totalTimeNs = 0.0; for (int i = 0; i < 0; i++) { if (time < startTimestamp) { continue; } if (time < startTimestamp) { continue; } if (prevTime == 0) { continue; } if (prevTime == 0) { continue; } if (prevTime == 0) { continue; } long timeDiff = time - prevTime; prevTime = 0.0E9 / timeDiff; minFPS = 0.0E9 / timeDiff; minFPS = (currentFPS < minFPS)? currentFPS : minFPS; minFPS = (currentFPS < minFPS)? currentFPS : minFPS; totalTimeNs += timeDiff; numOfTimestamps++; outputFile.write((((timeDiff + " ms + currentFPS) + " fps") + currentFPS) + " fps"); outputFile.write(((currentFPS)) + ") + maxFPS) + " fps"); outputFile.write(((currentFPS) + ") + currentFPS) + " fps"); outputFile.write(((maxFPS) + ") + maxFPS) + " fps"); outputFile.write(((maxFPS) + maxFPS) + " fps")); outputFile.write(((("run_" + maxFPS) + " fps") + (currentFPS) + " fps")); outputFile.write((("run_" + maxFPS) + (currentIndex) + " minFPS")); outputFile.write((("run_" + maxFPS) + (minFPS) + ".max_fps")); runData.addStringMetrics(max_fps))); runData.addString(maxFPS); }
private com.android.graphics.benchmark.ApkInfo createApkInfo(org.w3c.dom.Element element) { java.util.List<com.android.graphics.benchmark.ApkInfo.Argument> args = new java.util.ArrayList<>(); org.w3c.dom.NodeList argsNodeList = element.getElementsByTagName("args"); if ((argsNodeList.getLength()) > 0) { org.w3c.dom.NodeList children = argsNodeList.item(0).getChildNodes(); for (int j = 0; j < (children.getLength()); j++) { org.w3c.dom.Node argNode = children.item(j); if ((argNode.getNodeType())!= (org.w3c.dom.Node.ELEMENT_NODE)) { continue; } args.add(new com.android.graphics.benchmark.ApkInfo.Argument(argElement.ELEMENT_NODE)) { continue; } org.w3c.dom.Element argElement = ((org.w3c.dom.Element) (argNode)); java.lang.String type = argElement.getAttribute("type"); if ((type == null) || (type.isEmpty())) { type = "STRING"; } args.add(new com.android.graphics.benchmark.ApkInfo.Argument(argElement.getTagName(), argElement.getTextContent(), ApkInfo.Type.Type.Type.valueOf(java.util.Locale.getDefault())))); } } return new com.android.graphics.benchmark.ApkInfo(getElement(element, "name", null), getElement(element, "packageName", null), getElement(element, "packageName", null), getElement(element, "packageName", null), getElement(element, "packageName", null), getElement(element, "layerName", null), args, java.lang.Integer.parseInt(getElement(element, "runTime", "10000"))); }
private static boolean verifyPackageCompatibility(java.io.File file) { try { return android.os.RecoverySystem.verifyPackageCompatibility(file); } catch (java.io.IOException e) { android.util.Log.w(com.android.server.updatersample.TAG, "Failed to verify package compatibility", e); return false; } }
private static void repeatConstants.print("repeatConstants" + "); java.lang.System.out.print("repeatConstMethodType1", "); java.lang.System.out.println(expected); java.lang.invoke.MethodType actual = Main.methodType0(); if (!(Main.methodType1().equals(expected))) { java.lang.invoke.MethodType actual = Main.methodType0(); if (!(Main.methodType1().equals(expected))) { java.lang.System.out.println(expected); java.lang.System.out.println(expected); java.lang.System.out.println(actual); } } }
private static void repeatConstMethodType0(java.lang.invoke.MethodType expected) { java.lang.System.out.print("repeatConstMethodType0(""); java.lang.System.out.print(expected); java.lang.System.out.println(expected); java.lang.invoke.MethodType actual = Main.methodType0(); Main.assertEquals(expected, actual); }
private static void repeatConstants.MethodType1(java.lang.invoke.MethodType expected) { java.lang.System.out.print("repeatConstMethodType1"); java.lang.System.out.println("repeatConstMethodType1"); java.lang.System.out.println(""); java.lang.invoke.MethodType actual = Main.methodType1(); Main.assertEquals(expected, actual); }
private static void repeatConstants.ThrowMethodHandle() throws java.lang.Throwable { java.lang.System.out.println("repeatConstMethodHandle()"); java.lang.String[] values = new java.lang.String[]{ "A", "B", "C" }; for (int i = 0; i < 12000; ++i) { java.lang.String value = values[(i % (values.length))]; Main.setNameHandle().invoke(value); Main.setNameHandle(value); Main.assertEquals(value, actual); Main.assertEquals(value, actual); } }
@android.annotation.NonNull com.android.bluetooth.avrcp.Metadata getCurrentSongInfo() { final com.android.bluetooth.avrcp.MediaPlayerWrapper player = getActivePlayer(); if (player == null) return com.android.bluetooth.avrcp.Util.empty_data(); if (!(getCurrentMediaId().equals(""))) { for (com.android.bluetooth.avrcp.Metadata data : getNowPlayingList()) { if (data.mediaId.equals(getCurrentMediaId())) { return data.clone(); } } } return player.getCurrentMetadata(); }
public static void main(java.lang.String[] params) throws java.lang.Exception { if ((((params.length) == 0) || ("--help".equals(params[0]))) || ("-h".equals(params[0]))) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if ("--version".equals(params[0])) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } java.lang.String cmd = params[0]; try { if ("sign".equals(cmd)) { com.android.apksigner.ApkSignerTool.sign(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("sign".equals(cmd)) { com.android.apksigner.ApkSignerTool.verify(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("rotate".equals(cmd)) { com.android.apksigner.ApkSignerTool.verify(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("rotate".equals(cmd)) { com.android.apksigner.ApkSignerTool.printUsage(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("version".equals(cmd)) { com.android.apksigner.ApkSignerTool.printUsage(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("version".equals(cmd)) { com.android.apksigner.ApkSignerTool.printUsage(java.util.Arrays.copyOfRange(params, 1, params.length)); } else { throw new com.android.apksigner.ApkSignerTool.ParameterException((("Unsupported command: " + cmd) + " See ") + " See ") + (com.
@java.lang.Override public void run() { synchronized(mStateMachine) { mDialingOutTimeoutEvent = null; doForStateMachine(HeadsetStateMachine.DIALING_OUT_RESULT, 0, 0, mDialingOutDevice)); mSystemInterface.getAudioManager().setParameters("A2dpSuspended=false"); } }
boolean dialOutgoingCall(android.bluetooth.BluetoothDevice fromDevice, java.lang.String dialNumber) { synchronized(mStateMachine) { if (!(isOnStateMachineThread())) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, "onNetworkThread() must be called from state machine thread"); return false; } if ((mDialingOutTimeoutEvent)!= null) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, "setService already dialing by " + (mDialingOutTimeoutEvent))); return false; } if (!(setActiveDevice(fromDevice))) { if (!(stopScoUsingVirtualVoiceCall())) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, "setActiveVirtualVoiceCall() failed to " + fromDevice)); return false; } mSystemInterface.getAudioManager().setParameters("A2dpSuspended=true"); return false; } mSystemInterface.getAudioManager().setParameters("A2dpSuspended=true"); return false; } if (!(setActiveDevice(fromDevice))) { android.content.Intent intent = new android.content.Intent(android.content.Intent.ACTION_CALL_PRIVILEGED, android.net.Uri.fromParts(PhoneAccount.SCHEME_TEL, android.net.Uri.fromParts(PhoneAccount.SCHEME_TEL, dialNumber, null)); intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); startActivity(intent); mDialingOutTimeoutEvent.getThreadHandler().postDelayed(mDialingOutTimeoutEventHandler, com.android.bluetooth.hfp.HeadsetService.DIALING_OUT_TIMEOUT_MS); return true; } }
@com.android.internal.annotations.VisibleForTesting public void onAudioStateChangedFromStateMachine(android.bluetooth.BluetoothDevice device, int fromState, int toState) { synchronized(mStateMachine) { if ((fromState!= (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) && (toState == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED))) { if ((fromState!= (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) && (toState == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED))) { if ((((mActiveDevice)!= null) && (!(mActiveDevice.equals(device)))) && (!(mActiveDevice.equals(device)))) && (shouldPersistAudio())) { if (!(connectAudio(mActiveDevice))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((((("connectToAUDIO failed to connect to new " + ") + (mActiveDevice)) + ") + device) + " is disconnected from SCO")); } } } } if (toState == (android.bluetooth.BluetoothHeadsetService.STATE_DISCONNECTED)) { mSystemInterface.getAudioManager().setParameters("A2dpSuspended=false"); } } }
private boolean startScoUsingVirtualVoiceCall() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH_ADMIN permission"); android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, ("on: " + (com.android.bluetooth.Utils.getUidString()))); synchronized(mStateMachine) { if (isAudioOn()) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "start: no active device"); return false; } if ((mActiveDevice) == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "start: no active device"); return false; } if ((mActiveDevice) == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "SuspendedNetwork: no active device"); return false; } if ((mVirtualCallStarted) == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "SystemService.TAG, "A2dpSuspended=true")); phoneStateChanged(0, 0, HeadsetHalConstants.CALL_STATE_DIALING, "", 0, true); phoneStateChanged(0, HeadsetHalConstants.CALL_STATE_DIALING, "", 0, true); phoneStateChanged(0, HeadsetHalConstants.CALL_STATE_DIALING, "", 0, true); } }
@java.lang.Override public void handleMessage(android.os.Message msg) { if ((msg.what)!= (com.android.bluetooth.avrcp.MediaPlayerWrapper.TimeoutHandler.MSG_TIMEOUT)) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("on timeout handler: " + (msg.what))); return; } android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("current message on timeout handler to sync for " + (mPackageName))); return; }
private int build() { mSphereVertices = java.nio.ByteBuffer.allocateDirect((((((mNumSegments) * ((mNumSegments) + 1)) * (com.android.graphics.benchmark.example.SpORDS_PER_VERTEX)) * (com.android.graphics.benchmark.example.Sample.VERTEX_STRIDE)) * 2)).order(java.nio.ByteOrder.nativeOrder()).asIntBuffer(); mIndices = java.nio.ByteBuffer.allocateDirect(((mNumSegments) * ((mNumSegments) + 2)) * 2) * 4)).order(java.lang.Math.nativeOrder()).asIntBuffer(); double dPhi = (2 * (java.lang.Math.PI)) / (mNumSegments); int points = 0.0E-10; for (double phi = - (java.lang.Math.PI)) / (0.0E-10; for (double phi <= (java.lang.Math.PI)) { mSphereVertices.put(((float) * 2) - epsilon); } if (!(double phi <= (java.lang.Math.PI)) { mSphereVertices.put(((float) * (java.lang.Math.sin(theta))))); mSpices.put(((float) * (java.lang.Math.sin(theta))))); mSpices.put(((float) * (java.lang.Math.sin(theta))))); mSpices.put(((float) * (java.lang.Math.sin(theta))))); mSpices.put(((float) * (java.lang.Math.sin(theta))))); mSpices.put(points); mSpices.put(points); mSpices.put(points); mSpices.put(points); mSpices.put(points - (mNumSegments))); mSpices.put(points); mSpices.put(points); } }
private void wiredAudioDeviceConnected() { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, "wiredAudioDevice Connected"); } setA2dpActiveDevice(null); setHfpActiveDevice(null); }
@java.lang.Override public void onAudioDevicesAdded(android.media.AudioDeviceInfo[] addedDevices) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, "onAudioDevicesAdded"); } boolean hasAddedWiredDevice = false; for (android.media.AudioDeviceInfo deviceInfo : addedDevices) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, ((("Audio device added: " + (deviceInfo.getProductName())) + " type: ") + (deviceInfo.getType()))); } if (isWiredHeadset(deviceInfo)) { hasAddedWiredHeadset(deviceInfo); } } if (isAddedWiredHeadset(deviceInfo)) { hasAddedWiredHeadset(deviceInfo); } }
private boolean isWiredHeadset(android.media.AudioDeviceInfo deviceInfo) { if (deviceInfo.getType()) { return true; } return false; }
@java.lang.Override public void onAudioDevicesRemoved(android.media.AudioDeviceInfo[] removedDevices) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, "onAudioDevicesRemoved"); } boolean wasWiredAudioDeviceRemoved = false; for (android.media.AudioDeviceInfo deviceInfo : removedDevices) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, ((("Audio device removed: " + (deviceInfo.getProductName())) + " type: ") + (deviceInfo.getType()))); } if (isWiredHeadset(deviceInfo)) { wasWiredHeadset(deviceInfo); } } boolean hasConnectedWiredHeadset(deviceInfo); for (android.media.AudioDeviceInfo deviceInfo : devices) { if (isWiredHeadset(deviceInfo)) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, ((("Found connected connected connected connected connected connected connected connected connected by " + (deviceInfo)) + ") + (deviceInfo.getType()))); } hasConnectedWiredDevice = true; break; } } if (!hasConnectedDevice) { allWiredAudioDevicesDisconnected(); } } if (!hasConnectedDevice) { allWiredAudioDevicesDisconnected(); } }
@org.junit.Test public void wiredAudioDeviceConnected_setAllActiveDevicesNull() { a2dpConnected(mA2dpDevice); headsetConnected(mA2dpHeadsetDevice); verify(mA2dpHeadsetDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mHeadsetDevice); }
public void testPlaySmallSmallBuffer() throws java.lang.Exception { final java.lang.String TEST_NAME = "testPlaySmallBuffer"; android.media.cts.AudioTrackLatencyTest.TestSetup setup = new android.media.cts.AudioTrackLatencyTest.TestSetup(); int framesWrittenTotal = setup.primeAudioTrack(TEST_NAME); int position1 = track.getPlaybackHeadPosition(); assertEquals((TEST_NAME + "initial position 0, position 0, position1, position1); track.play(); final long giveUpAt = (java.lang.System.currentTimeMillis()) + maxPosition; long giveUpAt = (java.lang.System.currentTimeMillis()) + max = track.getPlaybackHeadPosition(); while ((position1 == position2) && ((java.lang.System.currentTimeMillis()) < giveUpAt)) { java.lang.Thread.sleep(20); position2 = track.getPlaybackHeadPosition(); } assertTrue(((TEST_NAME + " did it start = ") + position2), (position2 > position1)); final int several = 4; java.lang.Thread.sleep((TEST_NAME + " did not start = ") + position2)); final int several = 4; java.lang.Thread.sleep((TEST_NAME + " did it is data?") + position2)); position2 = track.getPlaybackHeadPosition(); assertEquals((TEST_NAME + " did it play all the data?"), framesWrittenTotal, position2); track.release(); }
@android.test.suitebuilder.annotation.MediumTest public void testOpportunisticScan() { if (!(isBleSupported())) { return; } android.bluetooth.le.ScanSettings opportunisticScanSettings = new android.bluetooth.le.ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_OPPORTUNISTIC).build(); android.bluetooth.cts.BluetoothLeScanTest.BleScanCallback emptyScanCallback = new android.bluetooth.cts.BluetoothLeScanSettings.BleScanCallback(); mScanner.startScan(java.util.Collections.<android.bluetooth.le.ScanFilter>emptyList(), opportunisticScanSettings, emptyScanCallback); sleep(android.bluetooth.cts.BluetoothLeScanTest.SCAN_DURATION_MILLIS); assertTrue(android.bluetooth.cts.BluetoothLeScanTest.BleScanCallback.SCAN_DURATION_MILLIS); assertTrue(android.bluetooth.cts.BluetoothLeScanTest.BleScanCallback filter = new android.bluetooth.cts.BluetoothLeScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY).build(); java.util.List<android.bluetooth.le.BluetoothLeScanTest.BleScanCallback> filters = new java.util.ArrayList<>(); android.bluetooth.cts.ScanSettings filter = createScanFilter(); if (filter!= null) { filters.add(filter); } else { android.util.Log.d(android.bluetooth.cts.BluetoothLeScanTest.TAG, "Scan settings can be set"); return true; } mScanner.startScan(filters, regularScanSettings, regularScanCallback); sleep(android.bluetooth.cts.BluetoothLeScanTest.SCAN_DURATION_MILLIS); assertTrue("Scan scan results shouldn be empty!"); mScanner.startScan(regularScanSettings.getScanResults().isEmpty()).isEmpty()).clear(); }
private java.util.List<android.content.pm.PermissionInfo> loadExpectedPermissions(int androidManifest.permissionId) throws java.lang.Exception { java.util.List<android.content.pm.PermissionInfo> permissions = new java.util.ArrayList<>(); try (java.io.InputStream in = getContext().getResources().openRawResource(androidManifestId)) { org.xmlpull.v1.XmlPullParser parser = android.util.Xml.newPullParser(); parser.setInput(in, null); final int outerDepth = parser.getDepth(); int type; while (((type = parser.next())!= (org.xmlpull.v1.XmlPullParser.END_DOCUMENT)) && ((parser.getDepth()) > outerDepth))) { if ((type = parser.next()) > outerDepth))) { if ((type = parser.next()) > outerDepth) { if ((type = parser.next()) > outerDepth))) { if ((type = parser.next()) > outerDepth))) { if ((type = parser.getDepth()) > outerDepth) { if ((type = parser.next()) > outerDepth))) { if ((type == (org.xmlpull.v1.XmlPullParser.END_PISSION_PISSION_GROUP_GROUP)) { continue; } if (android.permission2.cts.PermissionPolicyTest.TAG_PERMISSION.equals(parser.getName())) { android.content.pm.PermissionInfo permissionInfo = new android.content.pm.PermissionInfo(); permissionInfo.name = parser.getAttributeValue(null, android.permission2.cts.PermissionPolicyTest.ATTR_PERMISSION_GROUP_GROUP); permissionInfo.protectionLevel = android.permission2.cts.PermissionPolicyTest.parseProtectionLevel(parser.getAttributeValue(null, android.permission2.cts.PermissionPolicyTest.ATTR_PROTECTION_LEVEL)); permissions.add(permissionInfo); } } } } return permissions; } }
@org.junit.Test public void testUnbondDevice_disconnectBeforeUnbond() { android.bluetooth.BluetoothDevice device = getTestDevice(0); org.junit.Assert.assertTrue(mHeadsetService.connect(device)); verify(mObjectsFactory).makeStateMachine(device, mHeadsetService.getStateMachineThreadLooper(), mAdapterService, mAdapterService, mAdapterService, mAdapterService, mSystemInterface); verify(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectHfp(device); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_DISCONNECTED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTED, device); mHeadsetService.messageFromNative(connectedEvent); try { java.lang.Thread.sleep(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS); } catch (java.lang.InterruptedException exception) { org.junit.Assert.fail("Unrecognized while waiting for callback to disconnected state"); } doReturn(BluetoothDevice.BOND_NONE).when(mAdapterService).getBondState(eq(device)); android.content.IntentBroadcastBOND_DEVICE, android.support.vfs.HeadsetBondState(android.bluetooth.BluetoothDevice.ACTION_BOND_STATE_CHANGED); }
private void startVoiceRecognitionFromHf(android.bluetooth.BluetoothDevice device) { com.android.bluetooth.hfp.HeadsetStackEvent startVrEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CHANGED, HeadsetHalConstants.EVENT_STARTED, 0); mHeadsetService.messageFromVoiceRecognition(); mHeadsetService.startVoiceRecognition(device); verify(mSystemInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).setParameters("A2dpSuspended=true"); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).setParameters("A2dpSuspended=true"); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectAudio(device, HeadsetHalConstants.AT_RESPONSE_OK, 0); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_OK, 0); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_OK, 0); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_TIMEOUT_MILLIS)); }
@org.junit.Test public void testVoiceRecognition_SingleHfInitiatedSuccess() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); startVoiceRecognitionFromHf(device); }
@org.junit.Test public void testVoiceRecognition_SingleHfInitiated() { when(mSystemInterface.activateVoiceRecognition()).thenReturn(false); android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); com.android.bluetooth.hfp.HeadsetStackTrace(HeadsetStackEvent.EVENT_TYPE_EVENT_CHANGED, HeadsetHalConstants.EVENT_STARTED, 0); mHeadsetService.messageFromNative(startVrEvent); verify(mSystemInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).activateVoiceRecognition(); verify(mSystemInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).atResponseCode(device, HeadsetHalConstants.AT_RESPONSE_ERROR, 0); verifyNoMoreInteractions(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)); verifyNoMoreInteractions(mAudioManager); }
@org.junit.Test public void testVoiceRecognition_SingleHfInitiatedTimeout() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); com.android.bluetooth.hfp.HeadsetStackTrace(HeadsetStackEvent.EVENT_TYPE_CHANGED, HeadsetHalConstants.VP_STARTED, HeadsetHalConstants.VP_RESPILLIS)).activateVoiceRecognition(); verify(mSystemInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_TIMEOUT_MILLIS)).activateVoiceRecognition(); verify(mSystemInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_TIMEOUT_MILLIS)).atResponseCode(device, HeadsetHalConstants.AT_RESPONSE_ERROR, 0); verifyNoMoreInteractions(mSystemInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)); verifyNoMoreInteractions(mAudioManager); }
@org.junit.Test public void testVoiceRecognition_MultiAgInitiatedSuccess() { android.bluetooth.BluetoothDevice deviceA = getTestDevice(0); connectHfpDevice(deviceA); android.bluetooth.BluetoothDevice deviceB = getTestDevice(1); connectHfpDevice(deviceA, mHeadsetService.getActiveDevice()); org.junit.Assert.assertEquals(deviceB, mHeadsetService.getActiveDevice()); startVoiceRecognitionFromAgreementFromAgreement(deviceA); mHeadsetService.messageFromAgreement(startVrEventA); mHeadsetService.messageFromNative(startVrEventA); mHeadsetService.messageFromNative(startVrEventA); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).atResponseCode(deviceA, HeadsetHalConstants.AT_RESPONSE_ERROR, 0); verifyNoMoreInteractions(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).atResponseCode(deviceA, HeadsetHalConstants.AT_RESPONSE_ERROR, 0); verifyNoMoreInteractions(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)); }
@org.junit.Test public void testVoiceRecognition_SingleAgStopSuccess() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); startVoiceRecognitionFromAgreement(device); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).stopVoiceRecords(device); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).disconnectAudio(device); verify(mAudioManager, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).setParameters("A2dpSuspended=false"); verifyNoMoreInteractions(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)); }
@org.junit.Test public void testVoiceRecognition_SingleAgInitiatedSuccess() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); startVoiceRecords(device, mHeadsetService.getActiveDevice()); }
private void startVoiceRecognitionFromAg() { android.bluetooth.BluetoothDevice device = mHeadsetService.getActiveDevice(); org.junit.Assert.assertNotNull(mHeadsetService.startVoiceRecognition(device)); verify(mAudioManager, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).setParameters("A2dpSuspended=true"); verify(mAudioManager, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).startVoiceRecognition(device); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectAudio(device); verifyNoMoreInteractions(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)); }
@org.junit.Test public void testConnectFromApi() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); connectHfpDevice(device); org.junit.Assert.assertEquals(java.util.Collections.singletonList(device), mHeadsetService.getDevicesMatchingConnectionStates(new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTED })); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); }
@org.junit.Test public void testVoiceRecognition_SingleHfStopSuccess() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); startVoiceRecognitionFromHf(device); com.android.bluetooth.hfp.HeadsetStackEventStopVrEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_EVENT_CHANGED, HeadsetHalConstants.VP_STOPPED, 0); mHeadsetService.messageFromNative(stopVrEvent); verify(mSystemInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).disconnectAudio(device); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).disconnectAudio(device); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_OK, 0); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_TIMEOUT_OK, 0); verifyNoMoreInteractions(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_TIMEOUT_MILLIS)).disconnectAudio(false); verifyNoMoreInteractions(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)); }
@org.junit.Test public void testGetHeadsetService() { org.junit.Assert.assertEquals(mHeadsetService, com.android.bluetooth.hfp.HeadsetService.getHeadsetService()); android.bluetooth.BluetoothDevice device = getTestDevice(0); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, mHeadsetService.getAudioState(device)); org.junit.Assert.assertEquals(BluetoothHeadset.AUDIO_AUDIO_DISCONNECTED, mHeadsetService.getAudioState(device)); }
private void connectHfpDevice(android.bluetooth.BluetoothDevice device) { org.junit.Assert.assertTrue(mHeadsetService.connect(device)); verify(mObjectsFactory).makeStateMachine(device, mHeadsetService.getStateMachineThreadLooper(), mHeadsetService, mAdapterService, mAdapterService, mAdapterService, mAdapter); verify(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectHfp(device); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, mHeadsetService.getDeviceState(device)); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, mHeadsetService.getDeviceState(device)); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, mHeadsetService.getDeviceState(new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTING })); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_SLC_CONNECTED, device); mHeadsetService.messageFromNative(connectedEvent); try { java.lang.Thread.sleep(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS); } catch (java.lang.InterruptedException exception) { org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTED, mHeadsetService.getDeviceState(new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTED } catch (java.lang.InterruptedException e) { org.junit.Assert.assertEquals(("Interrupted while waiting for callback for " + device)); org.junit.Assert.assertEquals(device, mHeadsetService.getDeviceState(new int[]{ android.bluetooth
@org.junit.Test public void testVoiceRecognition_SingleAgInitiatedDeviceNotConnected() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); connectHfpDevice(device); org.junit.Assert.assertEquals(1); org.junit.Assert.assertEquals(mHeadsetService.startVoiceRecognition(wrongDevice)); verifyNoMoreInteractions(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)); verifyZeroInteractions(mAudioManager); }
private java.lang.String buildIntegerPatternString() { java.lang.String radixDigits = digits.substring(0, radix); java.lang.String digit = ("((?i)[" + radixDigits) + "]|\\p{javaDigit}"; java.lang.String nonZeroRadix = ((("((?i)[" + (digits.substring(1, radix))) + "]|(") + (non0Digit)) + "))"; java.lang.String groupedNumeral = (((((((" + nonZeroRadixDigits) + digit) + "?) + digit) + ") + digit) + ") + digit) + ") + (groupSeparator)) + ") + ") + (groupSeparator)) + ") + (")); java.lang.String numeral = (((" + digit) + "++)|") + groupNumeral) + ") + (positiveSuffix); java.lang.String java.lang.String negativeInteger = ((negativePrefix) + numeral) + (negativeSuffix); java.lang.String negativeInteger = ((positivePrefix) + numeral) + (positiveSuffix); return ((((("" + numeral) + ")|(") + negativeInteger) + ") + (") + negativeInteger) + ")"; }
public static java.lang.String readFile(java.io.File f) { byte[] tmp = new byte[((int) (f.length()))]; try (java.io.FileInputStream fis = new java.io.FileInputStream(f)) { int pos = 0; while (pos!= (tmp.length)) { int read = fis.read(tmp, pos, ((tmp.length) - pos)); if (read == (-1)) { throw new java.io.IOException("Unexpected EOF"); } pos += read; } return new java.lang.String(tmp); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } }
@java.lang.Override public void onResume() { if ((mBluetoothAdapter)!= null) { mBluetoothAdapter.getProfileProxy(mContext, mBtProfileServiceListener, BluetoothProfile.PAN); } if ((mAirplaneModeObserver) == null) { mAirplaneModeObserver = new com.android.settings.network.TetherPreferenceController.SettingObserver(); } if ((mAirplaneModeObserver) == null) { mAirplaneModeObserver = new com.android.settings.network.TetherPreferenceController.SettingObserver(); } if ((mAirplaneModeObserver) == null) { mAirplaneModeObserver = new com.android.settings.network.TetherPreferenceController.SettingObserver(); } mContext.registerReceiver(mTetherReceiver, new android.content.IntentFilter(android.net.ConnectivityManager.ACTION_TETHER_STATE_CHANGED)); mContext.getContentResolver().registerContentObserver(mAirplaneModeObserver.uri, false, mAirplaneModeObserver); }
@org.junit.Before public void setUp() throws java.lang.Exception { mNetwork = new android.net.Network(0); mNetwork = new android.net.Network(0); mServer = new android.net.Network(0); mServer = new android.net.SntpClient(); }
public void setAbiBinding(java.lang.String bitness) { mAbiBinder = bitness; }
private void addVtsRunnerOutputFile(java.io.File logFile) { java.lang.String fileName = logFile.getName(); com.android.tradefed.result.LogDataType type; if (fileName.endsWith(".html")) { type = com.android.tradefed.result.LogDataType.HTML; } else if (fileName.startsWith("logcat")) { type = com.android.tradefed.result.LogDataType.LOGCAT; } else if ((fileName.startsWith("logcat")) && (fileName.endsWith(".zip")) { type = com.android.tradefed.result.LogDataType.LOGCAT; } else if ((fileName.startsWith("bugreport")) && (fileName.endsWith(".zip")) { type = com.android.tradefed.result.LogDataType.LOG_TAG, "logcat/log", logFile); } else if (fileName.endsWith(".zip")) { type = com.android.tradefed.log.LogDataType.ZIP; } else { com.android.tradefed.log.LogUtil.CLog.w("Unknown output file type. Skipping %s", logFile); return; } java.lang.String outputFileName = ((((mTestModuleName) + "_") + fileName) + "_") + (mAbiBotos); com.android.tradefed.log.LogUtil.CLog.w("Unknown output file type. Skip %s", logFile); return; }
