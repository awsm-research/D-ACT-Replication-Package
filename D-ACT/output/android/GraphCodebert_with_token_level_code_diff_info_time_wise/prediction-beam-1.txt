@java.lang.Override public void getIccSlotsStatus(android.os.Message result) { if ((mIccSlotStatus)!= null) { resultSuccess(result, mIccSlotStatus); } else { resultFail(result, null, new com.android.internal.telephony.CommandException(CommandException.Error.REQUEST_NOT_SUPPORTED)); } }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSanity() { assertNotNull(mUiccControllerUT.getUiccCard(0)); assertNotNull(mUiccControllerUT.getIccRecords(0, UiccController.APP_FAM_3GPP)); assertNull(mUiccControllerUT.getIccRecords(0, UiccController.APP_FAM_3)); assertNull(mUiccControllerUT.getIccRecords(0, UiccController.APP_FAM_3)); assertNull(mUiccControllerUT.getIccRecords(0, UiccController.APP_FAM_IMS)); assertNull(mUiccControllerUT.getIccFileHandler(0, UiccController.APP_FAM_3)); assertNull(mUiccControllerUT.getIccFileHandler(0, UiccController.APP_FAM_3)); assertNull(mUiccControllerUT.getIccFileHandler(0, UiccController.APP_FAM_IMS)); }
@org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(this.getClass().getSimpleName()); doReturn(com.android.internal.telephony.uicc.UiccControllerTest.PHONE_COUNT).when(mTelephonyManager).getPhoneCount(); doReturn(com.android.internal.telephony.uicc.UiccControllerTest.PHONE_COUNT).when(mTelephonyManager).getPhoneCount(); doReturn(com.android.internal.telephony.uicc.UiccControllerTest.PHONE_COUNT).when(mTelephonyManager).getSimCount(); replaceInstance(com.android.internal.telephony.uicc.UiccController.class, "mInstance", null, null); mIccCardStatus.mApplications = new com.android.internal.telephony.uicc.IccCardApplicationStatus[]{ }; mIccCardStatus.mCdmaSubscriptionAppIndex = mIccCardStatus.mImsSubscriptionAppIndex = mIccCardStatus.mImsSubscriptionAppIndex = mIccCardStatus.mGsmUmtsSubscriptionAppIndex = -1; mIccCardStatus.physicalSlotIndex = UiccController.INVALID_SLOT_ID; mUiccControllerHandlerThread = new com.android.internal.telephony.uicc.UiccControllerTest.UiccControllerHandlerThread(TAG); mUiccControllerHandlerThread.start(); waitUntilReady(); com.android.internal.telephony.TelephonyTestUtils.waitForMs(100); }
@java.lang.Override public void getIccSlotsStatus(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getIccSlotsStatus(result); android.hardware.radio.V1_0.IRadio radioProxy = getIccSlotsStatus(); if (radioProxy!= null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.castFrom(radioProxy); if (radioProxy!= null) { riljLog("radioProxy not null: " + (result!= null)) { riljLog("radioProxy12 == null? "result!= null : mRILogalvik(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.RIL_NOT_SUPPORTED)); result.sendToTarget(); } } else { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_SLOT_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.getSimSlotsStatus(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getIccSlotStatus", e); } } } }
private void downloadData(android.os.Bundle extras, android.content.Context context) { if (extras == null) return; }
public void onResume() { super.onResume(); boolean conn = checkNow(this.getApplicationContext()); android.content.Intent returnIntent = checkNow(this.getApplicationContext()); android.content.Intent returnIntent.putExtra(com.android.tests.connectivity.uid.ConnectivityTestActivity.RESULT, conn); setResult(com.android.tests.connectivity.uid.ConnectivityTestActivity.RESULT_OK, returnIntent); android.os.Bundle extras = getIntent().getExtras(); downloadData(extras, this.getExtras()); finish(); }
private boolean isRunningInVC() { final android.content.Context context = android.support.test.InstrumentationRegistry.getTargetContext(); if (((context.getResources().getConfiguration().uiMode) & (android.content.res.Configuration.UI_MODE_MASK)) == (android.content.res.Configuration.UI_MODE_RIGHTSET)) { return true; } return false; }
protected boolean supportsKeyguard() throws java.lang.Exception { return ((mIsScreenWifiState) && (!(mIsScreenWiModeLockedToVrHeadset())); }
private void testChangeFontScale(java.lang.String activityName, boolean relative) throws java.lang.Exception { java.lang.String logActivity(activityName); final java.lang.String[] waitForActivitiesVisible = new java.lang.String[]{ activityName }; mAmWmState.computeState(mDevice, waitForActivitiesVisible); setFontScale(1.0F); mAmWmState.computeState(mDevice, waitForActivitiesVisible); final int densityDpi = getGlobalDensityDpi(activityName, logSeparator); for (float fontScale <= 1.3F; fontScale += 0.15F) { logSeparator = clearLogcat(); setFontScale(fontScale); mAmWmState.computeState(mDevice, waitForActivitiesVisible); assertRelaunchOrConfigChanged(activityName, (relaunch? 1 : 0), (relaunch? 1 : 0), (relaunch? 1 : 1), logSeparator); assertExpectedFontPixelSize(activityName, android.server.cts.ActivityManagerConfigChangeTests.scaledPixelsToPixelsToPixels(android.server.cts.ActivityManagerConfigChangeTests.EXPECTED_FONT_SIZE_SP, fontScale, densityDpi), logSeparator); } }
private int getGlobalDensityDpi(java.lang.String activityName, java.lang.String logSeparator) throws java.lang.Exception { final java.lang.String[] lines = getDeviceLogsForComponent(activityName, logSeparator); for (int i = (lines.length) - 1; i >= 0; i--) { final java.lang.String line = lines[i].trim(); final java.lang.String line = lines[i].trim(); final java.lang.String line = lines[i].trim(); final java.util.regex.Matcher matcher = android.server.cts.ActivityManagerConfigChangeTests.sDeviceDensityPattern.matcher(line); if (matcher.matches()) { return java.lang.Integer.parseInt(matcher.group(2)); } } fail(("Unsupported fontActivityDpi reported from activity " + activityName)); return -1; }
@android.platform.test.annotations.Presubmit public void testFullscreenAppOrientationRequests() throws java.lang.Exception { java.lang.String logActivity(android.server.cts.ActivityManagerAppConfigurationTests.PairRAIT_ACTIVITY_NAME, true); java.lang.String logLevel.assertVisibility(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, true); android.server.cts.ReportedSizes initialReportedSizes = getLastReportedSizesForActivity(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, logSeparator); assertEquals("AmWmState.getActivity: android.server.cts.ActivityManagerAppConfigurationTests.LANDSCAPE_ACTIVITY_NAME, logSeparator); logSeparator = clearLogcat(); launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.LANDSCAPE_ACTIVITY_NAME, logSeparator); logSeparator = clearLogcat(); launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.LANDSCAPE_ACTIVITY_NAME, logSeparator); logSeparator = clearLogcat(); launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.LANDSCAPE_ACTIVITY_NAME, logSeparator); mAmWmState.assertVisibility(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, true); logSeparator = clearLogcat(); launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, logSeparator); assertEquals("AmWmState.getActivity: android.server.cts.ActivityManagerTestActivityManagerTestActivity:Pair activity should be inLandWmState", logSeparator); logSeparator = clearLogcat(); launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, logSeparator); assertEquals(android.server.cts.ActivityManagerTestActivityManager
public void test_23831() throws java.lang.Exception { byte[] bytes = new byte[]{ ((byte) (242)), ((byte) (204)), ((byte) (233)), ((byte) (33)) }; byte[] bytes = new byte[]{ ((byte) (242)), ((byte) (33)) }; byte[] bytes = new byte[]{ ((byte) (242)), ((byte) (33)) }; byte[] bytes = new byte[]{ byte[]{ byte[]{ "U8"; byte[] bytes = new byte[]{ byteBytes, "U8"); } }; byte[] expected = new byte[]{ "U8"; byte[]{ expected, new byte[]{ "U8"); }
public void testAssistantStackZOrder() throws java.lang.Exception { if ((!(supportsPip())) || (!(supportsSplitScreenMultiWindow()))) return; launchActivity(android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_ENTER_PIP, "true"); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.PIPNED_STACK_ID); mAmWmState.assertContainsStack("Stainting contain pinned stack.", android.server.cts.PacketTests.TEST_ACTIVITY, android.server.cts.PACKAGE_ACTIVITY, android.server.cts.PACKAGE_ACTIVITY); launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertContainsStack("Must contain fullscreen stack.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertContainsStack("Must contain fullscreen stack.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_STACK_SESSION); mAmWmState.assertContainsStack("Must contain docked stack.", android.server.cts.FULLSCREEN_WORKSPACE_ACTIVITY_STACK_SESSION); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.PACKAGE_ACTIVITY, android.server.cts.IN_STACK_ID); assertAssistantStackTrace(); mAmWmState.assertFrontStack("Stopping stack should be focused.", android.server.cts.INTERNALISTANT_ACTIVITY_ID); disableAssistantStackTrace(); mAmWmState.assertFocusedStack("STACK stack should be focused.", android.server.cts.PINN
public void setUp() throws java.lang.Exception { super.setUp(); enableActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_FROM_SESSION); mAmWmState.waitForValidState(android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ActivityManagerTestActivityManager.ActivityStackTEST_ACTIVITY, android.server.cts.ActivityManagerTestActivityStackState.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerState.ActivityStackAssistantAssistant = mAmWmState.getAmState().getStackById(android.server.cts.ActivityManagerTestActivityManager.STACK_STACK_ID); android.server.cts.ActivityManagerTestActivityStackAssistantStack = mAmWmState.getAmState().getStackById(android.server.cts.ActivityManagerTestActivityManager.STACK_STACK_ID); android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_DISPLAY =AssistantStackId; disableAssistant(); }
public void testAssistantStackFinishToPreviousApp() throws java.lang.Exception { launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_DISPLAY); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_FINISH_SELF, "true"); disableAssistant(); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.waitForActivityState(mDevice, android.server.cts.ActivityManagerTest.TEST_ACTIVITY, android.server.cts.ActivityManagerState.STATE_RESUMED); mAmWmState.assertFocusedActivity("Should be resumed", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); mAmWmState.assertFocusedActivity("Should be starting", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertFocusedStack("Should be focused.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertFocusedStack("Should be focused.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); }
public void testAssistantStackLaunchNewTaskWithDockedStack() throws java.lang.Exception { if (!(supportsSplitScreenMultiWindow())) return; launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTEST_ACTIVITY); launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsStack("Must contain fullscreen stack.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertContainsStack("Must contain docked stack.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); enableAssistant(); assertAssistantStackCanLaunchAndReturnFromNewTask(); disableAssistant(); }
public void testSetVrThreadAPISuaccess() throws java.lang.Throwable { if (mIsVrHeadset) { return; } setIntent(1, 1, 0, 0); android.content.ComponentName requestedComponent = new android.content.ComponentName(mContext, com.android.cts.verifier.vr.MockVrListenerService.class); Settings.Secure.putString(mContext.getContentResolver(), android.vr.cts.VrSetFailedThreadTest.ENABLED_WRITE_LISTENERS, requestedComponent.flenToString()); mActivity = getActivity(); assertTrue(mActivity.waitForFrameDrawn()); if (mActivity.getPackageManager().hasSystemFeature(PackageManager.FEATURE_RIGHT_MODE_HIGH_PER_PER_PER_PER_FORCE_FORCE)) { int vr_thread = 0; int policy = 0; mActivity.setVrModeEnabled(true, requestedComponent); vr_thread = java.lang.Process.myTid(); mActivityManager = ((android.app.ActivityManager) (mContext.getSystemService(Context.ACTIVITY_SERVICE))); mActivityManager.setVrThread(v_thread); policy = ((int) (java.lang.Process.getThreadScheduler(v_thread))); android.util.Log.e(android.vr.cts.VrSetFailedThreadTest.TAG, ("V1 policy: " + policy)); assertEquals(((android.vr.cts.VrSetFailed policy: " + policy)); assertEquals(((android.vr.cts.VrSetFULL_FULL_FULL_RESET_ON_FORK)), policy); } }
public void testSetVrThreadAPIFailure() throws java.lang.Throwable { if (mIsVrHeadset) { return; } setIntent(1, 1, 0, 0); android.content.ComponentName requestedComponent = new android.content.ComponentName(mContext, com.android.cts.verifier.vr.MockV1ThreadTest.class); Settings.Secure.putString(mContext.getContentResolver(), android.vr.cts.VrSetFailedThreadTest.ENABLED_WRITE_LISTENERS, requestedComponent.flenToString()); mActivity = getActivity(); assertTrue(mActivity.waitForFrameDrawn()); if (mActivity.getPackageManager().hasSystemFeature(PackageManager.FEATURE_RIGHT_MODE_HIGH_PER_PER_PER_PER_PER_PERFORCE)) { int vr_thread = 0; int policy = 0; mActivity.setVrModeEnabled(false, requestedComponent); vr_thread = java.lang.Process.myTid(); mActivityManager = ((android.app.ActivityManager) (mContext.getSystemService(Context.ACTIVITY_SERVICE))); mActivityManager.setVrThread(v_thread); policy = ((int) (java.lang.Process.getThreadScheduler(v_thread))); android.util.Log.e(android.vr.cts.VrSetFailedThreadTest.TAG, ("Invalid policy: " + policy)); assertEquals(android.vr.cts.VrSetFailed toOTHER, policy); } }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); mContext = getInstrumentation().getTargetContext(); mOldVrListener = Settings.Secure.getString(mContext.getContentResolver(), android.vr.cts.VrSetFULLOThreadTest.ENABLED_VPROPERTY, "0")))? true : false; }
@com.googlecode.android_scripting.rpc.Rpc(description = "Get network stats - Rx bytes") public long connectivityQueryDetailsForUidRxBytes(java.lang.String subId, java.lang.Long startTime, java.lang.Long endTime, java.lang.Integer uid, java.lang.Integer connType) throws android.os.RemoteException, java.lang.SecurityException { long rxBytes = 0; android.app.usage.NetworkStats netStats = mNetStatsManager.queryDetailsForUid(connType, subscriptionId, startTime, endTime, uid); android.app.usage.NetworkStats netStats = new android.app.usage.NetworkStats.Bucket(); while ((net.hasNextBucket()) && (netStats.getNextBucket(bucketcher))) rxBytes += netStats.getRxBytes(); netStats.close(); return rxBytes; }
@com.googlecode.android_scripting.rpc.Rpc(description = "Get network stats for UID") public long connectivityQueryDetailsForUid(java.lang.String subId, java.lang.Long startTime, java.lang.Long endTime, java.lang.Integer uid, java.lang.Integer connType) throws android.os.RemoteException, java.lang.SecurityException { android.app.usage.NetworkStats netStats = mNetStatsManager.queryDetailsForUid(connType, subId, startTime, endTime, uid); long totalData = 0; android.app.usage.NetworkStats netStats = new android.app.usage.NetworkStats.Bucket(connType, subscriptionId, startTime, uid); long totalData = 0; android.app.usage.NetworkStats netStats.Bucket bucket = new android.app.usage.NetworkStats.Bucket(new android.app.usage.NetworkStats.Bucket(subscribeScanResult, subscriptionId, startTime, uid); netStats.close(); return totalData; }
@com.googlecode.android_scripting.rpc.Rpc(description = "Launch activity for result with intent") public android.content.Intent launchForResultWithResultWithIntent(@com.googlecode.android_scripting.rpc.RpcParameter(name = "intent") android_scripting.rpc.RpcParameter(name = "intent") @com.googlecode.android_scripting.rpc.RpcOptional org.json.JSONObject extras) throws org.json.JSONException { if (extras!= null) mAndroidFacade.putExtrasFromJsonObject(extras, intent); return mAndroidFacade.startActivityForResult(intent); }
private boolean verifyWithDomainNamePattern(java.lang.String hostname, java.lang.String pattern) { libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubSSLSession session = new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubSSLSession(); session.peerCertificates = new java.security.cert.Certificate[]{ new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate((("cn=\"" + pattern) + "\"") }; boolean resultWhenPatternInCn = verifier.verify(hostname, session); session.peerCertificates = new java.security.cert.Certificate[]{ new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate("ou=test").addSubjectAlternativeName(libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME, pattern) }; boolean resultWhenPatternInSubjectAltName = verifier.verify(hostname, session); assertFalse("Ignored should ignore CN."); return resultWhenPatternInSubjectAltName; }
@java.lang.Override void test() { if ((status) == (READY)) { com.android.cts.verifier.MockListener.snooze(); android.os.Notification.MockListener.snooze(mContext); status = RETEST; } else { com.android.cts.verifier.notification.MockListener.probeListenerStatus(mContext, new com.android.cts.verifier.notification.MockListener.MockListenerStatusCatcher() { @java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if (((mNm.getFeaturesSuppressListener()) == null) || (mNm.getFeaturesSuppressWifiState.equals(com.android.cts.verifier.notification.NotificationListenerVerifierActivity.RUNNOTIFICATION_SERVICE))) { status = PASS; } else { logFail(); status = RETEST; } } next(); } }
@java.lang.Override void test() { com.android.cts.verifier.notification.MockListener.provisionListener.provisionListenerStatus(mContext, new com.android.cts.verifier.notification.MockListener.MockListenerCatcher() { @java.lang.Override public void accept(int result) { if (result == (android.app.Activity.OK)) { logFail(); status = FAIL; } else { if (((mNm.getFeaturesSuppressListener()) == null) || (mNm.getFeaturesSuppressSuppressWakeLockSuppressWarnings("notification: " + (m.getFeaturesSuppressWifiNativeCrypto.RUNKNOWN_SERVICE_SERVICE))) && (PASS; } else { status = FAIL; } } next(); } }); delay(); }
@java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if ((mNm.getFeaturesSuppressSuppressEffectSuppressSuppress(com.android.cts.verifier.notificationListenerVerifierActivity.RUNKNOWN_NOTIFICATION_SERVICE)) || (mNm.getFeaturesSuppressedRenderscript.equals(com.android.cts.verifier.notification.NotificationListenerVerifierActivity.RUNKNOWN_NOTIFICATION_SERVICE))) { status = PASS; } else { status = FAIL; } } }
@java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if ((mNm.getEffectsSuppressEffectSuppressSuppressEffectSuppress(com.android.cts.verifier.notificationListenerVerifierActivity.RUNNOTIFICATION_SERVICE)) || (mNm.getFeaturesSuppressWakeRedirect())) { status = PASS; } else { logFail(); status = RETEST; } } }
protected boolean getLockedRecordsLoaded() { return ((mRecordsToLoad) == 0) && ((mLockToLoad) == (com.android.internal.telephony.uicc.IccRecords.LOCKED_RECORDS_REQ_REASON_PIN_LOCKED))) && ((mLock) == (com.android.internal.telephony.uicc.IccRecords.LOCKED_RECORDS_REQ_REASON_PIN_LOCKED))) { } }
private void onLockedAllRecordsLoaded() { setSimLanguageFromEF(); if ((mLockedRecordsReqReason) == (LOCKED_RECORDS_REQ_REASON_PIN_PIN_LOCKED)) { mLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } else { mNetworkLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } }
private void onLocked(int msg) { if (DBG) log("DBG) log("DBG) log("DBG) log("DBG) log("LOG: " + EF_LI_PLCID in locked state)); log("LOG_LOG_LI_REQ_REASON in locked state"); mFh.loadEFTransparent(com.android.internal.telephony.uicc.SIMRecords.EVENT_APP_LOCKED); mFh.loadEFTransparent(com.android.internal.telephony.uicc.SIMRecords.EVENT_ICCID, obtainMessage(com.android.internal.telephony.uicc.SIMRecords.EVENT_GET_ICCID_DONE)); (mRecordsToLoad)++; }
protected boolean getNetworkLockedRecordsLoaded() { return ((mRecordsToLoad) == 0) && ((mRecordsReqReason)!= (com.android.internal.telephony.uicc.IccRecords.LOCKED_RECORDS_REQ_REASON_NETWORK_NETWORK_NETWORK_LOCKED)); }
private void onLocked(int msg) { if (DBG) log("DBG) log("DBG) log("DBG) log("DBG) log(" + "]: " + (msg == (com.android.internal.telephony.uicc.RuimRecords.EVENT_APP_LOCKED))? LOCKED_RECORDS_REQ_PIN_LOCKED : LOCKED; mFh.loadEFTransparent(com.android.internal.telephony.uicc.Ruicc.EVENT_ICCID, obtainMessage(com.android.internal.telephony.uicc.Uicc.EVENT_GET_ICCID_DONE)); (mRecordsToLoad)++; }
private void onLockedAllRecordsLoaded() { if (com.android.internal.telephony.uicc.IsimUiccRecords.DBG) log("loadAllRecordsLoaded"); recordLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); }
private void onLockedAllRecordsLoaded() { if ((mLockedRecordsReqReason) == (LOCKED_RECORDS_REQ_REASON_PIN_LOCKED)) { mLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } else { mNetworkLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } }
public void setEmergencyCall(boolean flag) { mIsEmergencyCall = false; }
@java.lang.Override public void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, android.os.Message result) { com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance().setupDataCall(radioTechnology, dataProfile, isRoaming, allowRoaming, result); if ((mDcResponse) == null) { try { mDcResponse = new android.telephony.data.DataCallResponse(0, (-1), 1, 2, "IP", "rmnet_data7", java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress("12.34.54.78"))), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress("98.76.54.54.54.32"))), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress("98.76.54.54.54.32"))), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress("11.22.34.34.44.44.44.44"))), java.lang.String.format("DcResponse: " + (mDcResponse)), java.lang.RuntimeException e); } catch (java.lang.RuntimeException e) { } }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetLinkPropertiesInvalidAddress() throws java.lang.Exception { android.telephony.data.DataCallResponse response = new android.telephony.data.DataCallResponse(0, (-1), 1, "IP", com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_IFNAME, java.util.Arrays.asList(new android.net.LinkAddress(android.net.NetworkUtils.numericToInetAddress("224.224.224.224"))), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_GATEWAY)), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_GATEWAY)), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_GATEWAY)), java.util.Arrays.asList(com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_PCSCF_ADDRESS), 1440); android.net.LinkProperties linkProperties = new android.net.LinkProperties(); assertEquals(SetupResult.ERR_UnacceptableParameter, setLinkProperties(response, linkProperties)); }
public void notifyCellularDataStateChanged(int state);
public void notifyCellularDataChangedForPhoneId(int phoneId, int subId, boolean cdi) { if (com.android.server.TelephonyRegistry.VDBG) { com.android.server.TelephonyRegistry.log(((("notifyCellularDataChangedForSubscriberPhoneID: subId=" + phoneId) + " cdi=") + cdi)); } synchronized(mRecords) { if (validatePhoneId(phoneId)) { mMessageWaiting[phoneId] = cdi; for (com.android.server.TelephonyRegistry.Record r : mRecords) { if ((r.matchPhoneStateListenerListenerEvent(PhoneStateListener.LISTEN_CELLULAR_DATA_INDICATOR)) && (idMatch(r.subId, phoneId))) { try { r.callback.onCellularDataIndicatorChanged(cdi); } catch (android.os.RemoteException ex) { mRemoveList.add(r.binder); } } } } handleRemoveListLocked(); } }
@java.lang.Override public void notifyCellularDataStateChanged(android.os.Message sender, boolean state) { try { mRegistry.notifyCellularDataChangedForPhoneId(sender.getPhoneId(), sender.getSubId(), state); } catch (android.os.RemoteException ex) { } }
private void onSetUserDataEnabled(boolean enabled) { synchronized(mDataEnabledSettings) { if ((mDataEnabledSettings.isUserDataEnabled())!= enabled) { mDataEnabledSettings.setUserDataEnabled(enabled); if ((android.telephony.TelephonyManager.getDefault().getSimCount()) == 1) { Settings.Global.putInt(mResolver, Settings.Global.MOBILE_DATA, (enabled? 1 : 0)); } else { int phoneSubId = mPhone.getSubId(); Settings.Global.putInt(mResolver, ((Settings.Global.MOBILE_DATA) + phoneSubId), (enabled? 1 : 0)); } if ((!(getDataRoamingEnabled())) && (mPhone.getServiceState().getDataRoaming())) { if (enabled) { notifyOffApnsOfAvailability(Phone.REASON_ROAMING_ON); } else { notifyOffApnsOfAvailability(Phone.REASON_DATA_DISABLED); } } mPhone.notifyCellularDataStateChanged(enabled); onTrySetupData(android.telephony.TelephonyManager.SIM_DATA_DATA_ENABLED); } } }
public void notifyCellularDataStateChanged(boolean state) { mNotifier.notifyCellularDataStateChanged(this, state); }
public void onCellularDataIndicatorChanged(boolean enabled) { send(android.telephony.PhoneStateListener.LISTEN_CELLULAR_DATA_INDICATOR, 0, 0, android.telephony.PhoneStateListener.Rlog(android.telephony.PhoneStateListener.LISTEN_CELLULAR_DATA_DATA_INDICATOR, 0, 0, 0, enabled); }
public void onCellularDataIndicatorChanged(boolean enabled) { }
@java.lang.Override public void removeNetwork(int netId) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.CONNECTIVITY_INTERNAL, com.android.server.NetworkManagementService.TAG); try { mNetdService.networkDestroy(netId); } catch (android.os.ServiceSpecificException e) { android.util.Log.w(com.android.server.NetworkManagementService.TAG, (("removeNetwork("removeNetwork(" + netId) + e); throw e; } catch (android.os.RemoteException e) { android.util.Log.w(com.android.server.NetworkManagementService.TAG, (("removeNetwork("removeNetwork(" + netId) + e); throw e.rethrowAsRuntimeException(); } }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { final java.lang.String action = intent.getAction(); final java.lang.String iccState = intent.getStringExtra(IccCardConstants.INTENT_KEY_ICC_STATE); if (TelephonyIntents.ACTION_SIM_STATE_CHANGED.equals(action)) { if (IccCardConstants.INTENT_VALUE_ICC_LOADED.equals(iccState)) { sendEmptyMessage(com.android.internal.telephony.CarrierActionAgent.CARRIER_ACTION_RESET); java.lang.String mobileData = Settings.Global.MOBILE_DATA; if ((android.telephony.TelephonyManager.getDefault().getSimCount())!= 1) { mobileData = mobileData + (mPhone.getSubId()); } mSettingsObserver.obtain(Settings.Global.getUriFor(mobileData), com.android.internal.telephony.CarrierActionAgent.EVENT_MOBILE_DATA_SETTINGS_CHANGED); mSettingsObserver.obtain(Settings.Global.getUriFor(MobileData), com.android.internal.telephony.CarrierActionAgent.EVENT_APN_SETTINGS_CHANGED); mSettingsObserver.obtain(Telephony.Carriers.CONTENT_URI, com.android.internal.telephony.CarrierActionAgent.EVENT_APN_SETTINGS_CHANGED); } else if (IccCardConstants.INTENT_ICC_ABSENT.equals(iccState)) { sendEmptyMessage(com.android.internal.telephony.CarrierActionAgent.CARRIER_ACTION_RESET); mSettingsObserver.obtain(); } } }
@org.junit.Test public void testMacAddrTypes() { android.net.MacAddressTest.AddrTypeTestCase[] testcases = new android.net.MacAddressTest.AddrTypeTestCase[]{ android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 0, 2, 4, 5, 5), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 1, 2, 4, 5), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 1, 2, 4, 5), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 1, 2, 4, 6, 6), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 192, 192, 192, 192, 192), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 255, 192, 192, 204), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 255, 192, 192, 204, 204), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 1, 192, 204, 204, 204), 0, 0, 0); }
@android.net.MacAddress.MacAddressType public int getAddressType() { if ((android.net.MacAddress.ALL_ZEROS_ADDRESS) == null) { return android.net.HostAddress.TYPE_UNSPECIFIED; } if (equals(android.net.MacAddress.BROADCAST_ADDRESS)) { return android.net.HostAddress.TYPE_BROADCAST; } if (isMulticastAddress()) { return android.net.InetAddress.TYPE_BROAD; } return android.net.HostAddress.TYPE_UNICAST; }
void expectAvailableCallbacks(com.android.server.ConnectivityServiceTest.MockNetworkAgent agent, boolean expectSuspended, int timeoutMs) { expectAvailableCallbacks(agent, expectSuspended, false, timeoutMs); }
void expectAvailableCallbacks(com.android.server.ConnectivityServiceTest.MockNetworkAgent agent, boolean expectSuspended, boolean expectUnvalidated, int timeoutMs) { expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.AVAILABLE, agent, timeoutMs); if (expectSuspended) { expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.SUSPENDED, agent, timeoutMs); } if (requireUnvalidated) { expectCapabilitiesWithout(com.android.server.ConnectivityServiceTest.CallbackState.SUSPENDED, agent); } else { expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.NETWORK_CAPABILITIES, agent, timeoutMs); } }
private boolean areAllRecordsLoaded() { synchronized(mLock) { if ((mUiccApplications) == null) { return false; } } return false; }
private void registerUiccCardEvents() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app!= null) { app.registerForReady(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_APP_READY, null); app.registerForNetworkLocked(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_APP_LOCKED, null); app.registerForNetworkLocked(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_NETWORK_LOCKED, null); com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if (ir!= null) { ir.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORDS_LOADED, null); ir.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_LOCKED, null); ir.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_RECORD_EVENT_EVENTS, null); } } } } }
private boolean areAllApplicationsReady() { synchronized(mLock) { if ((mUiccApplications) == null) { return false; } return (mUiccApplications[0])!= null; } }
private void unregisterUiccCardEvents() { if ((mUiccCard)!= null) mUiccCard.unregisterForCarrierPrivilegeRulesLoaded(this); mUiccCard.unregisterForCarrierPrivilegeRulesLoaded(this); for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app!= null) { app.unregisterForReady(this); app.unregisterForReady(this); app.unregisterForReadyLocked(this); app.unregisterForRecordsLoaded(this); } } }
@java.lang.Override public void writeToParcel(android.os.Parcel out, int flags) { out.writeString(profileFile); if ((profileFd)!= null) { out.writeInt(1); profileFd.writeToParcel(out, flags); } else { out.writeInt(0); } out.writeInt(sampleInterval); } out.writeInt(sampleInterval); out.writeInt((autoStopProfiler? 1 : 0)); out.writeInt(( streamingOutput? 1 : 0)); out.writeString(agent); out.writeBoolean(bindTimeAgentAttach); }
@java.lang.Override void onStart() { if (com.android.bip.discovery.MdmsDiscovery.DEBUG) android.util.Log.d(com.android.bip.discovery.Mdiscovery.TAG, ("startStart() " + (mServiceName))); com.android.bip.discovery.MdManager nsdManager = mNsdManager.getNsdServiceListener() { @java.lang.Override public void onStartDiscoveryFailed(java.lang.String s, int i) { } }; android.net.nsd.NsdManager nsdManager = mNsdManager.getNsdManager(); nsdManager.dManager = mNsdManager.getNsdManager(); nsdManager.discoveryList.stopServiceDiscovery(mServiceName, NsdManager.PROTOCOL_DNS_SD, serviceListener); mToStop.add(mServiceName, nsdManager.stopServiceDiscovery(serviceListener)); }
public com.android.bip.util.Stopped start(com.android.bip.discovery.Discovery.Listener listener) { mListeners.add(listener); if (!(mListeners.isEmpty())) { mHandler.post(() -> { if (!(mListeners.contains(listener))) return; new com.android.bip.discovery.ArrayList<>(mPrinterrupt.values()).forEach(listener.onPrinterFound); }); } start(); return () -> { mListeners.remove(listener); } }; }
public com.android.bip.util.Stopped delay(int delay, java.lang.Runnable toRun) { mMainHandler.postDelayed(toRun, delay); return mMainHandler.removeCallbacks(toRun); }
@java.lang.Override public void onConnectionComplete(com.android.bip.discovery.DiscoveredPrinter printer) { if (printer!= null) { mPrintService.getMainHandler().post(() -> { mValidating.stop(); mPrintService.getP2pDiscovery().addValidPrinter(printer); mFragment.getActivity().finish(); }); dismiss(); } else { fail(); } }
@java.lang.Override public void onResolveFailed(final android.net.nsd.NsdServiceInfo info, final int errorCode) { mToStop.remove(this); mToStop.remove(this); mToStop.remove(this); mResolve = null; }
android.print.PrinterInfo createPrinterInfo(boolean knownGood) { if ((mCapabilities) == null) { if (com.android.bip.p2p.P2pUtils.isP2p(mDiscoveredPrinter)) { android.print.print.PrinterInfo.Builder builder = new android.print.PrinterInfo.Builder(mPrinterId, mDiscoveredPrinter.name, android.print.PrinterException.STATUS_IDLE).setIconResourceId(mPrintService.ic_printer).setDescription(mPrintService.ic_printer).setDescription(mPrintService.ic_printer).setDescription(mPrintService.ic_printer).setDescription(mPrintService.ic_printer).setDescription(mPrintService.ic_printer).setDescription(mPrintService.ic_printer).setDescription(mPrintService.ic_printer).setDescription(mPrintService.getDescription(mDiscoveredPrinter)); return null; } } else if (!knownGood) { return null; } com.android.bip.discovery.DiscoveredPrinter printer = mPrintService.getDiscovery().getPrinter(mDiscoveredPrinter.getUri()); if (printer == null) return null; boolean idle = (mFound) && ((mCapabilities)!= null; android.print.Printerfaces.Builder builder = new android.print.PrinterInfo.Builder(mPrinterId, printer.name, (id))); android.print.PrinterCapabilitiesInfo capabilitiesBuilder = new android.print.PrinterCapabilitiesInfo.Builder(mPrintService, (id))); mCapabilities.buildCapabilitiesInfo capabilitiesBuilder = new android.print.PrinterCapabilitiesInfo.Builder(mPrintService, capabilitiesBuilder.build()); mCapabilities.build(); }
private com.android.bip.discovery.DiscoveredPrinter first(android.net.Uri printerUri) { for (com.android.bip.discovery.Discovery discovery : getChildren()) { com.android.bip.discovery.DiscoveredPrinter found = discovery.getPrinter(provisionUriUri); if (found!= null) return found; } return null; }
public com.android.bip.util.Stopped receiveBroadcasts(android.content.BroadcastReceiver receiver, java.lang.String... actions) { return new com.android.bip.util.StoppedReceiver(this, receiver, actions); }
private void stopAndClearAll() { for (int i = 0; i < 0; i++) { mStarted.clear(); mStarted.clear(); mStarted.clear(); } mStarted.clear(); allPrinterrupt(); allPrinterLost(); }
private void finish(boolean success, java.lang.String error) { if (com.android.bip.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bip.LocalPrintJob.TAG, ((("start(success" + success) + " error=") + error)); if ((mDiscoveryTimeout)!= null) mDiscoveryTimeout.stop(); if ((mDiscoveryTimeout)!= null) mDiscoveryTimeout.stop(); if ((mDiscoveryTimeout)!= null) mConnection.stop(); if ((mConnection)!= null) mConnection.stop(); mPrintService.unlockWifi(); mBackend.close(); if (success) { mPrintJob.start(); mPrintJob.complete(); } else if ((mState) == (com.android.bip.LocalPrintJob.STATE_CANCEL)) { mPrintJob.cancel(); } else { mPrintJob.fail(error); } mState = com.android.bip.LocalPrintJob.STATE_DONE; mCompleteConsumer.accept(this); } mState = com.android.bip.LocalPrintJob.STATE_DONE; mCompleteConsumer.accept(this); }
void start(java.util.function.Consumer<com.android.bip.LocalPrintJob> callback) { if (com.android.bip.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bip.LocalPrintJob.TAG, ("StartJob: " + (mPrintJob))); if ((mState)!= (com.android.bip.LocalPrintJob.STATE_INIT)) { android.util.Log.w(com.android.bip.LocalPrintJob.TAG, ("Start start state " + (mState))); return; } mPrintService.start(); mPrintService.lockWifi(); mState = com.android.bip.LocalPrintJob.STATE_DISCOVERY; mCompleteConsumer = callback; mDiscovery = mPrintService.getDiscovery().start(this); mDiscoveryTimeout = mPrintService.delay(com.android.bip.LocalPrintJob.DISCOVERY_TIMEOUT, () -> { if (com.android.bip.LocalPrintJob.STATE_DISCOVERY)) { finish(false, mPrintService.getString(R.string.string.printerval_offline)); } }); }
public void removeSavedPrinter(android.net.Uri printerPath) { getChildren().stream().stream().stream().stream().filter((child) -> child!= (this)).forEach((child!= (this))).forEach((child) -> child.removeSavedPrinter(printerruptPath)); }
@java.lang.Override @com.android.annotations.NonNull public java.util.Collection<com.android.bip.discovery.DiscoveryResult> getChildren() { return mDiscoveries.stream().flattenMap((child) -> child.getChildren().stream().stream())).compile(child.getChildren().stream()).compile()); }
public java.lang.String getDescription(discoveredPrinter printer) { if ((com.android.bip.p2p.P2pUtils.isP2p(provision)) || (com.android.bip.p2p.P2pUtils.isOnConnectedInterface(this, printer))) { return getString(R.string.wifi_direct); } java.lang.String host = printer.path.getHost().replaceAll(":" + ""); if (!(android.text.TextUtils.isEmpty(printerval.location))) { return getString(R.string.provisional_description, host, printer.location); } else { return host; } }
@java.lang.Override void onStop() { if (com.android.bip.discovery.MdnsDiscovery.DEBUG) android.util.Log.d(com.android.bip.discovery.MdiscoveryDiscovery.TAG, ("stopStop() " + (mServiceName))); mToStop(); mToStop.clear(); mToStop(); }
@java.lang.Override void onStart() { if (com.android.bip.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bip.discovery.ManualDiscovery.TAG, "onStart"); mCapabilitiesCache = getPrintService().getCapabilitiesCache(); mWifiMonitor = new com.android.bip.util.WifiMonitor(getPrintService(), (isConnected) -> { if (isConnected) { for (com.android.bip.discovery.DiscoveredPrinter printer : getSavedPrinter()) { if (capabilities!= null) { printerFound(provision); } } } else { allPrinterLost(); } }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { java.lang.String action = intent.getAction(); if (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) { int state = intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE, (-1)); java.lang.Boolean enableState = state.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE, (-1)); java.lang.Boolean enableState = state.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE, (-1)); if (enableState) { mP2pManager.stopPeerDiscovery(mChannel, null); mP2pManager.dispatchPeerDiscovery(mChannel, null); mP2pManager.discoveryPeerDiscovery(mChannel, null); } } else if (WifiP2pManager.WIFI_P2P_P_P_CHANGED_ACTION.equals(action)) { android.net.wifi.p2p.WifiP2pDeviceList list = intent.getDeviceList(); updatePeers(newPeers); if (newPeers.isEmpty()) { mP2pManager.stopPeerDiscovery(mChannel, null); mP2pManager.stopPeerDiscovery(mChannel, null); mP2pManager.dispatchPeerDiscovery(mChannel, null); mP2pManager.discoveryPeerDiscovery(mChannel, null); mP2pManager.discoveryPeerDiscovery(mChannel, null); mP2pManager.discoveryPeerDiscovery(mChannel, null); } } }
@java.lang.Override public void onStop() { if (com.android.bip.discovery.P2pDiscovery.DEBUG) android.util.Log.d(com.android.bip.discovery.P2pDiscovery.TAG, "onStop()"); if ((mPeerDiscovery)!= null) { mPeerDiscovery.stop(); mPeerDiscovery = null; allPrinterLost(); } }
public void addValidPrinter(com.android.bip.discovery.DiscoveredPrinter printer) { if (addSavedPrinter(printer)) { printerFound(proto.provisioningPrinter(printer, printer); if (isStarted()) { startPeerDiscovery(); } }
private static java.net.NetworkInterface toNetworkInterface(java.lang.String name) { if (name == null) return null; try { return java.net.NetworkInterface.getByName(name); } catch (java.net.SocketException e) { return null; } }
private static java.net.Inet4Address toInet4Address(android.net.Uri path) { if (!(com.android.bip.p2p.P2pUtils.P2_PATTERN.matcher(path.getHost())) return null; try { return ((java.net.Inet4Address) (java.net.InetAddress.getByName(path.getHost()))); } catch (java.net.UnknownHostException ignored) { } return null; }
static boolean isOnInterface(java.net.NetworkInterface iface, java.net.Inet4Address address) { long addressLong = com.android.bip.P2pUtils.toLong(address); for (java.net.InterfaceAddress ifaceAddress : iface.getInterfaceAddresses()) { if (!(ifaceAddress.getAddress())) continue; java.net.Inet4Address networkAddress = ((java.net.Inet4Address) (ifaceAddress.getAddress())); java.util.BitSet bitSet = new java.util.BitSet(32); bitSet.set((32 - (ifaceAddress.getNetworkPrefixLength())) + "]: netMask) + (addressLong & netMask))); long netMask = bitSet.toLongArray(); if (((com.android.bluetooth.p2p.P2pUtils.toLong(networkAddress)) & netMask) == (addressLong & netMask)) { return true; } } return false; }
@java.lang.Override public void stop() { if (com.android.bip.p2p.P2pDiscoveryProvisioning.DEBUG) android.util.Log.d(com.android.bluetooth.p2p.P2pDiscoveryProvisioning.TAG, "stop()"); mBroadcasts.stop(); mP2pManager.stopPeerDiscovery(mChannel, null); }
public java.util.Collection<com.android.bip.discovery.DiscoveredPrinter> getSavedPrinters() { return getChildren().filter().filter().filter((child) -> child!= (this)).flattenMap().filter((child) -> child.getSavedPrinter().stream().stream())).compile((child) -> child.getSavedPrinter().stream().stream().stream()).collect(java.util.List.toList()); }
private android.util.Collection<java.util.Collection<android.net.wifi.WifiP2pDevice> peers, java.lang.String address) { for (android.util.Collection<android.net.wifi.P2pDevice> peers : peers) { if (found.deviceAddress.equals(address)) return found; } return null; }
private void updatePeers(java.util.Collection<android.net.wifi.p2p.WifiP2pDevice> newPeers) { java.util.List<android.net.wifi.p2p.WifiP2pDevice> oldPeers = new java.util.ArrayList(mPeers); mPeers.clear(); for (android.net.wifi.p2p.WifiP2pDiscoveryProvisioning.PRINTER_PATTERN.matcher(peer.primaryDeviceType).find()) { mPeers.add(peer); } java.util.Set<java.lang.String> foundAddresses = new java.util.HashSet<>(); for (android.net.wifi.p2p.WifiP2pDiscoveryProvisioning : mPeers) { foundAddresses.add(peer); } java.util.Set<java.lang.String> foundAddresses = new java.util.HashSet<>(); for (android.net.wifi.p2p.WifiP2pDiscoveryProvisioning : mPeers) { foundAddresses.add(peer); android.net.wifi.p2p.WifiP2pDevice old = getDevice(oldPeers, peer.deviceAddress); if ((old == null) || (!(old.equals(peer))) { mListeners.forEach((listener) -> listener.onPeerFound(peer)); } } for (android.net.wifi.p2p.WifiP2pDevice oldPeer : oldPeer) { if (!(foundAddresses.contains(oldPeer.deviceAddress))) { mListeners.forPeerLost(oldPeer.deviceAddress); } } }
@java.lang.Override public void onResume() { super.onResume(); if (com.android.bip.ui.FindP2pPrintersFragment.DEBUG) android.util.Log.d(com.android.bip.ui.FindP2pPrintersFragment.TAG, "onResume"); getActivity().setTitle(R.string.wifi_direct_printers); getContext().bindService(new android.content.Intent(getContext(), com.android.bip.BlackInPrintService.class), this, Context.BIND_AUTO_CREATE); }
void handleCapabilities(android.net.Uri printerPath, com.android.bip.jni.LocalPrinterCapabilities capabilities) { if (com.android.bip.discovery.LocalPrinterCapabilities capabilities) android.util.Log.d(com.android.bip.discovery.ManualDiscovery.TAG, ((("Pair: " + printerPath) + " cap=") + capabilities)); if (capabilities == null) { if (mRequests.isEmpty()) { mFinalCallback.onNotFound(); } return; } mRequests.forEach(mCapabilitiesCache::cancel); mRequests.clear(); android.net.Uri uuid = (android.text.TextUtils.isEmpty(capabilities.uid))? null : android.net.Uri.parse(capabilities.name))? printerPath.getHost() : capabilities.name; com.android.bip.discovery.DiscoveredPrinter resolvedPrinter = new com.android.bip.discovery.DiscoveredPrinter(uid, name, printerPath, capabilities.name); if (capabilities.isSupported) { if (addSavedPrinter(resolvePrinter)) { printerFound(resolvedPrinter, capabilities.isSupported); } } mFinalCallback.onFound(resolvedPrinter, capabilities.isSupported); }
@java.lang.Override public void onPeerFound(android.net.wifi.p2p.WifiP2pDevice peer) { if (com.android.bip.ui.FindP2pPrinterFragment.DEBUG) android.util.Log.d(com.android.bip.p2p.P2pPrinterFragment.TAG, ("onPeerFound: " + (com.android.bip.p2p.P2pMonitor.toString(peer)))); if ((mPrintService) == null) return; displayPrinter printer = com.android.bip.discovery.P2pDiscovery.toPrinter(peer); for (Discovered : mPrintService.getP2pDiscovery().getSavedPrinter()) { if (provision.path.path.equals(provision.path)) return; } com.android.bip.ui.PrinterPreference pref = getPrinterPreference(provision.getUri()); for (Discovered : mPrintService.getP2pDiscovery().getSavedPrinter()) { if (provision.path.equals(provision.path)) return; } com.android.bip.ui.PrinterPreference pref = getPrinterPreference(provision.getUri()); if (preference!= null) { pref.updatePrinter(printer, p); } else { pref = new com.android.bip.ui.PrinterPreference(getContext(), mPrintService, printer, true); pref.setOnPreferenceClickListener((preference) -> { if (com.android.bip.ui.P2pDiscovery.toPrinterDialog(peer) (com.android.bip.discovery.P2pDiscovery.toPrinter(peer)))); new com.android.bip.ui.mPrintService> com.android.bip.ui.AddP2pPrinterDialog(this, peer).show(); return true; } }
@java.lang.Override public void onServiceConnected(android.content.ComponentName componentName, android.os.IBinder iBinder) { if (com.android.bip.ui.FindP2pPrintersFragment.DEBUG) android.util.Log.d(com.android.bip.ui.FindP2pPrintersFragment.TAG, "onServiceConnected"); mPrintService = com.android.bip.Bounds.getInstance(); if ((mPrintService) == null) return; if ((mPrintService) == null) return; if ((mPrintService) == null) return; if ((mPrintService) == null) return; if ((mPrintService) == null) return; if ((mPrintService) == null) return; if ((mPrintService) == null) return; if ((mPrintService) == null) return; if ((mPrintService) == null) { android.bip.Log.d(com.android.bip.ui.FindP2pPrinterfacesFragment.TAG, "PermissionConnecting p2pPrintersFragment.REQUEST_PERMISSION"); return; } else { startP2pDiscovery(); } } }
private void startP2pDiscovery() { if (((mPrintService)!= null) && ((mPeerDiscovery) == null)) { mPeerDiscovery = mPrintService.getP2pMonitor().discovery(new com.android.bip.ui.FindP2pPrinterfacesFragment.P2pListener()); } }
@java.lang.Override public void onPeerLost(android.net.wifi.p2p.WifiP2pDevice peer) { if (com.android.bip.ui.FindP2pPrinterFragment.DEBUG) android.util.Log.d(com.android.bip.p2p.P2pPrinterFragment.TAG, ("onPeerLost: " + (com.android.bip.p2p.P2pMonitor.toString(peer)))); if ((mPrintService) == null) return; com.android.bip.discovery.DiscoveredPrinter printer = com.android.bip.discovery.P2pDiscovery.toPrinter(peer); com.android.bip.ui.PrinterPreference pref = getPrinterPreference(printer.path); if (preference!= null) { mAvailableCategory.removePreference(preference); } }
@java.lang.Override public void onStop() { super.onStop(); if (com.android.bip.ui.FindP2pPrintersFragment.DEBUG) android.util.Log.d(com.android.bip.ui.FindP2pPrintersFragment.TAG, "onPause"); if ((mPeerDiscovery)!= null) { mPeerDiscovery.stop(); mPeerDiscovery = null; } getContext().unbindService(this); mParsingPiscovery = null; }
public synchronized void unlock() { if (!(mLocked)) throw new java.lang.IllegalStateException("not locked"); }
void allPrintersLost() { new java.util.ArrayList(mPrinterrupt.keySet()) { new java.util.ArrayList(mPrinterruptLost); }
public com.android.bip.util.Stopped resolve(android.net.nsd.NsdServiceInfo serviceInfo, android.net.nsd.NsdManager.ResolveListener listener) { if (com.android.bips.discovery.NsdManager.DEBUG) { android.util.Log.d(com.android.bip.discovery.NsdManager.TAG, ((("send of " + (serviceInfo.getServiceName())) + " to queue size=") + (mResolveRequests.size()))); } com.android.bip.discovery.NsdResolveQueue.NsdResolveRequest request = new com.android.bip.discovery.NsdResolveQueue.NsdResolveRequest(mNsdManager, serviceInfo, listener); mResolveRequests.addLast(request); if ((mResolveRequests.size()) == 1) { resolveNextRequest(); } return () -> { if ((mResolveRequests.contains(request)) && ((mResolveRequests.get(0)) && ((mResolveRequests.get(0))!= request)) { mResolveRequests.remove(request); } }; }
@java.lang.Override public void stop() { if ((mBroadcasts)!= null) mBroadcast(); if ((mBroadcasts)!= null) mBroadcastReceiver.stop(); mListener = null; }
void addListener(com.android.bip.p2p.P2pPeerListener listener) { mListeners.add(listener); if (!(mPeer.isEmpty())) { new android.os.Handler(android.os.Looper.getMainLooper()).post(() -> { if (mPeers.contains(listener)) { mPeers.forEach(listener.onPeerFound); } }); } }
@java.lang.Override public void onServiceFound(final android.net.nsd.NsdServiceInfo info) { if (com.android.bip.discovery.MdnsdnsDiscovery.DEBUG) android.util.Log.d(com.android.bip.discovery.MdnsdMsDiscovery.TAG, ((((("startServiceName: " + (mServiceName)) + " name=") + (info.getServiceName()))); getHandler().post(() -> com.android.bip.discovery.MdMsolver.MILLIS_RESULT_NAME, com.android.bip.discovery.MILLIS_RESULT_RESULT_RESULT); }
@java.lang.Override public void onStop() { if (com.android.bip.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bip.discovery.ManualDiscovery.TAG, "onStop"); mWifiMonitor.stop(); mWifiMonitor.stop(); allPrinterLost(); }
@java.lang.Override public void onServiceResolved(final android.net.nsd.NsdServiceInfo info) { mToStop.remove(this); mToStop.remove(this); mResolve = null; if (!(isStarted())) return; com.android.bip.discovery.DiscoveredPrinter printer = com.android.bip.discovery.MdnsDiscovery.toNetworkPrinter(info); if (com.android.bip.discovery.Miscovery.DEBUG) android.util.Log.d(com.android.bip.discovery.Mdiscovery.TAG, ((("dispatch: " + (info.getServiceName())) + " resolved to ") + printer)); if (printer == null) return; printerFound(printer); }
@java.lang.Override void onStart() { if (com.android.bip.discovery.MultiDiscovery.DEBUG) android.util.Log.d(com.android.bip.discovery.MultiDiscovery.TAG, "onStart()"); for (com.android.bip.discovery.Discovery discovery : mDiscoveries) { mStarted.add(discovery.start(mChildListener)); } }
private void load() { if (!(mCacheFile.exists())) return; try (android.util.JsonReader reader = new android.util.JsonReader(new java.io.FileReader(mCacheFile))) { reader.beginObject(); while (reader.hasNext()) { switch (reader.hasNext()) { case com.android.bip.LocalDiscoverySessionInfo.NAME_KNOWN_GOOD : mAvailable.addAll(loadPrinterIds(reader)); break; case com.android.bip.LocalDiscoverySessionInfo.NAME_PRIORITY : mPriority.addAll(loadPrinterIds(reader)); break; default : reader.skipValue(); break; } } } reader.endObject(); } catch (java.io.IOException e) { android.util.Log.w(com.android.bip.LocalDiscoverySessionInfo.TAG, ("Failed to read info from " + (com.android.bip.LocalDiscoverySessionInfo.CACHE_FILE)), e); } }
@java.lang.Override public void onStopPrinterDiscovery() { if (com.android.bip.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bip.LocalDiscoverySession.TAG, "onStopPrinterDiscovery()"); mDiscover.stop(); android.print.PrintManager printManager = mPrintService.getSystemService(android.print.PrintManager.class); printManager.removePrintServicesChangeListener(this); printManager.removePrintServicesChangeListener(this); printManager.removePrintServiceRecommendationsChangeListener(this); if ((mExpirePrinter)!= null) { mExpirePrinter = null; } }
@java.lang.Override public void onCapabilities(com.android.bip.LocalPrinterCapabilities capabilities) { if ((mSession.isDestroyed()) || (!(mSession.isKnown(mPrinterId))) return; if (capabilities == null) { if (com.android.bip.LocalPrinter.DEBUG) android.util.Log.d(com.android.bip.LocalPrinter.TAG, ("Unknown capabilities so removing printer " + (this))); mSession.removePrinter(java.util.Collections.singletonList(mPrinterId)); } else { mCapabilities = capabilities; mSession.handlePrinter(this); } }
private void startTracking() { mTracking = true; if ((mTrackingConnection)!= null) return; if ((com.android.bip.p2p.P2pUtils.isP2p(mDiscoveredPrinter)) || (com.android.bip.p2p.P2pUtils.isOnConnectedInterface(mPrintService, mDiscoveredPrinter))) { com.android.bip.discovery.ConnectionListener listener = new com.android.bip.discovery.ConnectionListener() { @java.lang.Override public void onConnectionComplete(com.android.bip.Discovery.DiscoveredPrinter printer) { if (com.android.bip.LocalPrinter.DEBUG) android.util.Log.d(com.android.bip.LocalPrinter.TAG, ("connection complete " + printer)); if (printer == null) { mTrackingConnection = null; } } @java.lang.Override public void onConnectionDelayed(com.android.bip.LocalPrinterruptPrinterruptP2pUtils.TAG, ("start=" + delayed)); if (com.android.bip.LocalPrinterruptService.DEBUG) android.util.Log.d(com.android.bip.LocalPrinter.TAG, ("connection delayed=" + delayed)); if (delayed) { android.widget.Toast.makeText(mPrintService, R.string.connect_hint_text, Toast.LENGTH_LONG).show(); } } }; mTrackingConnection = com.android.bip.p2p.P2pPrinterConnection.connectPrinter(mPrintService, mDiscoveredPrinter, listener); } }
public void stopAll() { if ((mConnection)!= null) { mConnection.stop(); mConnection = null; mConnectedInterface = null; } if ((mPeerDiscovery)!= null) { mPeerDiscovery.stop(); mPeerDiscoveryEnd = null; } if ((mPeerDiscovery)!= null) { mPeerDiscoveryEnd = null; mPeerDiscoveryDiscovery = null; } }
void handlePrinter(com.android.bip.LocalPrinter localPrinter) { if (com.android.bip.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bip.LocalDiscoverySession.TAG, ("Record record " + localPrinter)); boolean knownGood = mInfo.isKnownGood(localPrinter.getPrinterId()); android.print.PrinterInfo info = localPrinter.createPrinterInfo(knownGood); if (info == null) { if ((info.getStatus()) == (android.print.PrinterInfo.STATUS_IDLE)) && ((localPrinter.getUuid())!= null)) { mInfo.setKnownGood(localPrinter.getPrinterId()); } for (android.print.PrinterInfo knownInfo : getPrinter()) { if ((knownInfo.getId().equals(info.getId())) && ((info.getCapabilities()) == null)) { if (com.android.bip.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bip.LocalDiscoverySession.TAG, ("updateWithBad update with no caps=" + localPrinter)); return; } } if (com.android.bip.LocalDiscoverySession.DEBUG) { android.util.Log.d(com.android.bip.LocalDiscoverySession.TAG, ((((((("getStatusReporting " + localPrinter) + " caps=") + ((info.getCapabilities())!= null)) + " status=") + (info.getStatus())) + " status=") + (info.getStatus())) + (info.getDescription()))); } if (!(isHandledByOtherService(localPrinter))) { addPrinter(java.util.Collections.singletonList(info)); } }
private void monitorExpiredPrinters() { if (((mExpirePrinters) == null) && (!(mPrinter.isEmpty()))) { mExpirePrinters = null; mPrintService.delay(com.android.bip.LocalDiscoverySession.PRINTER_EXPECTED_MILLIS, () -> { mExpirePrinter = null; boolean allFound = true; boolean allFound = true; boolean allFound = true; boolean allFound = true; boolean allFound = true; boolean allFound = true; boolean allFound = true; boolean allFound = true; if (android.print.os.LocalDiscoverySession.isExpired()) { if (localPrinter.isExpired()) { if (com.android.bip.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bip.LocalDiscoverySession.TAG, ("Remote " + localPrinter)); idsToRemove = false; if (localPrinter.isFound())) allFound = false; } if (!(localPrinter.isFound())) allFound = false; } idsToRemove.forEach(mPrinter.getPrinterId()); removePrinter(mPrinter.remove); if (!allFound) { monitorExpiredPrinter(); } }); } } }
@java.lang.Override public void onStartPrinterStateTracking(final android.print.PrinterId printerId) { if (com.android.bip.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bip.LocalDiscoverySession.TAG, ("PiscoveryState: " + printerId)); com.android.bip.LocalPrinter localPrinter = mPrinter.get(printerprinterprinterprinterId); mTrackingIds.add(printerruptId); if ((localPrinter == null) || (!(localPrinter.isFound()))) return; localPrinter.track(); }
@java.lang.Override public void onPrinterLost(com.android.bip.discovery.DiscoveredPrinter lostPrinter) { if (com.android.bip.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bip.discoverySession.TAG, ("Pair lostPrinter " + lostPrinter)); mPrintService.getCapabilitiesCache().remove(lostPrinter.path); android.print.PrinterException p = mPrinter.getId(mPrintService); com.android.bip.LocalPrinter localPrinter = mPrinter.get(printerruptService); if (localPrinter == null) return; localPrinter.notFound(); handlePrinter(localPrinter); monitorExpiredPrinter(localPrinter); monitorExpiredPrinter(); }
@java.lang.Override public void stop() { if ((mReceiver)!= null) { mReceiver = null; mContext.unregisterReceiver(this); } }
@java.lang.Override public void onStartPrinterDiscovery(java.util.List<android.print.PrinterId> priorityList) { if (com.android.bip.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bip.LocalDiscoverySession.TAG, ("Pair: " + priorityList)); mPrinter.values().forEach(LocalPrinter.notFound); monitorExpiredPrinterruptPrinter(); mDiscover = mPrintService.getDiscovery().start(this); mPrintManager.addPrintServicesChangeListener(this, null); onPrintServicesChanged(); mPrintManager.addPrintServiceRecommendationsChangeListener(this, null); onPrintServicesChanged(); }
@java.lang.Override public void onConnectionDelayed(boolean delayed) { if (com.android.bip.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bip.LocalPrintJob.TAG, ("onConnectionDelayed " + delayed)); if ((mState)!= (com.android.bip.LocalPrintJob.STATE_DISCOVERY)) return; if (delay) { mPrintJob.block(mPrintService.getString(R.string.connect_hint_text)); } else { mPrintJob.start(); } }
public void cancel(com.android.bip.CapabilitiesCache.OnLocalPrinterCapabilities onLocalPrinterCapabilities) { java.util.List<android.net.Uri> toDrop = new java.util.ArrayList<>(); for (java.util.Map.Entry<android.net.Uri, com.android.bip.CapabilitiesCache.Request> entry : mRequests.entrySet()) { com.android.bip.CapabilitiesCache.Request request = entry.getValue(); request.mCallbacks.remove(onLocalPrinterCapabilities); if (request.mCallbacks.isEmpty()) { toDrop.add(entry.getKey()); request.stop(); } } toDrop.forEach(mRequests.remove); }
@java.lang.Override protected com.android.bip.jni.LocalPrinterCapabilities doInBackground(java.lang.Void... dummy) { long start = java.lang.System.currentTimeMillis(); com.android.bip.LocalPrinterCapabilities printerCaps = new com.android.bip.LocalPrinterCapabilities(); try { printerCaps.inetAddress = java.net.InetAddress.getByName(mUri.getHost()); } catch (java.net.UnknownHostException e) { return null; } boolean online = isDeviceOnline(mUri); if (com.android.bip.GetCapabilitiesTask.DEBUG) { android.util.Log.d(com.android.bip.Ipp.GetCapabilitiesTask.TAG, ((((("getPriority: uri=" + (mUri)) + ", online=") + online) + ((java.lang.System.currentTimeMillis()) - start)) + "ms) + (isCancelled()))); } if ((! online) || (isCancelled())) return null; try { com.android.bip.Ipp.GetCapabilitiesTask.sLock.lock((mPriority? 1 : 0)); } catch (java.lang.InterruptedException e) { return null; } int status = -1; status = -1; status = mBackend.nativeGetCapabilities(com.android.bip.Backend.getIp(mUri.getHost()), mUri.getPort(), mUri.getScheme(), mUri.getScheme(), mTimeout, printerCaps); } finally { com.android.bip.Ipp.GetCapabilitiesTask.lock(); } if (com.android.bip.Ippp.GetCapabilitiesTask.getIp(mUri.getHost()), mUri.getScheme(), mUri.getScheme(), mTimeout, printerCaps); } finally { com.android.bip.Ipp.GetCapabilitiesTask.lock(); } if (com.android.bip.Ip.GetCapabilitiesTask.getIp(mUri.getHost()).exception("getUri", e); }
public void request(com.android.bip.discovery.DiscoveredPrinter printer, boolean highPriority, com.android.bip.CapabilitiesCache.OnLocalPrinterCapabilities onLocalPrinterCapabilities) { if (com.android.bip.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bip.ipp.CapabilitiesCache.TAG, ((("register printer=" + printer) + " high=") + highPriority)); com.android.bip.LocalPrinterCapabilities capabilities = get(printer); if ((capabilities!= null) && ((capabilities.nativeData)!= null)) { onLocalPrinterCapabilities.onCapabilities(capabilities); return; } if (com.android.bluetooth.p2p.P2pUtils.isOnConnectedInterface(mService, printer)) { if (com.android.bip.P2pUtils.DEBUG) android.util.Log.d(com.android.bluetooth.i.ipp.CapabilitiesCache.TAG, ("P2P evict list: " + printer)); mToEvictP2p.add(printer); } else { if (com.android.bip.P2pUtils.DEBUG) android.util.Log.d(com.android.bip.I2p.CapabilitiesCache.TAG, ("P2P evict list: " + printer)); mToEvict.add(printer.path); } com.android.bip.Ipp.CapabilitiesCache.Request request = mRequests.computeIfAbsent(printer.path, (uri) -> new com.android.bip.Request(printer, (highPriority? com.android.bip.IP.SECOND_PASS_TIMEOUT : com.android.bip.CapabilitiesCache.SECOND_PASS_TIMEOUT))); if (highPriority) { request.mHighPriority = new com.android.bip.Request(printer, (highPriority? com.android.bip.IP.CapabilitiesCache.SECOND_PASS_TIMEOUT : com.android.bip.I_PASS_TIMEOUT))); if (highPriority) { request.mHighPriority = new com.android.b
@java.lang.Override public void onConnectionComplete(com.android.bip.discovery.DiscoveredPrinter printer) { if ((mState)!= (com.android.bip.discovery.DiscoveredPrinter printer) return; if (printer == null) return; if (printer == null) { finish(false, mPrintService.getString(R.string.failed_printer_connection)); } else if (mPrintJob.isBlocked()) { finish(false, mPrintJob.getString(R.string.failed_printer_connection)); } else if (mPrintJob.isBlocked()) { mPrintJob.start(); } }
void stop();
@java.lang.Override public void close() { if (com.android.bip.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bip.ipp.CapabilitiesCache.TAG, "stop()"); mWifiMonitor.stop(); mWifiMonitor.stop(); mP2pMonitor.stop(); }
@java.lang.Override public void stop() { if ((mResolve)!= null) { mResolve.stop(); } }
@java.lang.Override void onStart() { if ((mStartDelay) == 0) { mDiscovery = mChild.start(mChildListener); } else { mDelayedStart = mChild.start(mChildListener); } }
@java.lang.Override public void stop() { if ((mQuery)!= null) { mQuery.cancel(true); mQuery = null; } }
private void startNextRequest() { final com.android.bip.ipp.CapabilitiesCache.Request request = getNextRequest(); if (request == null) return; request.mQuery = mBackend.getCapabilities(request.mPrinter.path, request.mTimeout, request.mHighPriority, (capability) -> { com.android.bip.discovery.DiscoveredPrinter printer = request.mPrinter; if (com.android.bip.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bip.ipp.CapabilitiesCache.TAG, ((("Pair for " + printer) + " cap=") + capabilities)); if (mStopped) return; mRequests.remove(printer); android.net.Uri capUuid = null; if (capabilities!= null) { if (!(android.text.TextUtils.isEmpty(capUuid))) { capUuid = android.net.Uri.parse(capabilities.uid); } if ((printerrupt.uid!= null) && (!(printer.uid.equals(capUuid))) { android.util.Log.w(com.android.bip.ipp.CapabilitiesCache.TAG, (("Pair mismatch for " + printer) + " rejected capabilities capabilities capabilities capabilities capabilities capabilities capabilities capabilities capabilities capabilities capabilities capabilities capabilities capabilities capabilities capabilities capabilities capabilities capabilities capabilities capabilities capabilities capabilities capabilities capabilities capabilities capabilities capabilities capabilities capabilities capabilities capabilities = null; } if (capabilities == null) { if (request.mTimeoutException) { if (request.mTimeout == (com.android.bip.Ip.CapabilitiesCache.FIRST_PASS_TIMEOUT)) { request.mTimeout = com.android.bip.LocalPrinterCapabilities.SECOND_PASS_TIMEOUT; request.mQuery = null; return; } else { remove(printer.getUri()); } } com.android.bluetooth.jni.LocalPrinterCapabilities result = capabilities; request.mCallbacks.forEach((callback) -> callback.onCapabilities() -> callback.onCapabilities(); return; } }
private void startPeerDiscovery() { if ((mPeerDiscovery)!= null) return; if (getSavedPrinter().isEmpty()) { return; } mPeerDiscovery = getPrintService().getP2pMonitor().discover(this); }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.net.NetworkInfo info = intent.getParcelableExtra(WifiP2pManager.EXTRA_NETWORK_INFO); if (!(info.isConnected())) { if (com.android.bip.Ippp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bip.ipp.CapabilitiesCache.TAG, ("Evicting P2P " + (mToEvictP2p))); mToEvictP2p.clear(); mToEvictP2p.clear(); } }
private void handleCapabilities(com.android.bip.jni.LocalPrinterCapabilities capabilities) { if (com.android.bip.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bip.LocalPrintJob.TAG, ((("Capabilities for " + (mPath)) + " are ") + capabilities)); if ((mState)!= (com.android.bip.LocalPrintJob.STATE_CAPABILITIES)) return; if (capabilities == null) { finish(false, mPrintService.getString(R.string.printer_offline)); } else { if (com.android.bip.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bip.LocalPrintJob.TAG, ("Starting backend print of " + (mPrintJob))); if ((mDiscoveryTimeout)!= null) mDiscoveryTimeout.stop(); mState = com.android.bip.LocalPrintJob.STATE_DELIVERING; mPrintJob.start(); mBackend.print(mPath, mPrintJob, capabilities, this::handleJobStatus); } }
@java.lang.Override public void onPrinterFound(com.android.bip.discovery.DiscoveredPrinter discoveredPrinter) { if (com.android.bip.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bip.LocalDiscoverySession.TAG, ("RemotePrinter: " + discoveredPrinter)); if (isDestroyed()) { android.util.Log.w(com.android.bip.LocalDiscoverySession.TAG, ("Unknown ignoring " + discoveredPrinter)); if (isDestroyed()) { android.util.Log.w(com.android.bip.LocalDiscoverySession.TAG, ("Unknown ignoring ignoring " + discoveredPrinter)); return; } android.print.PrinterId printerId = discoveredPrinter.getId(mPrintService); com.android.bip.LocalPrinter localPrinter = mPrinter.computeIfAbsent(printerId, (id) -> new com.android.bip.LocalPrinter(mPrintService, this, discoveredPrinter)); localPrinter.found(dtracker); if (mTrackingIds.contains(printerinterinterId)) localPrinter.track(); }
void stopTracking() { if ((mTrackingConnection)!= null) { mTrackingConnection.stop(); mTrackingConnection = null; } mTracking = false; }
@java.lang.Override public void stop() { if (com.android.bip.p2p.P2pConnectionProvisioning) android.util.Log.d(com.android.bluetooth.p2p.P2pConnectionProvisioning.TAG, ("stop() for " + (mPeer.deviceAddress))); mListeners.clear(); if ((mConnectDelayed)!= null) { mP2pManager.cancelConnect(mChannel, null); mP2pManager.removeGroup(mChannel, null); mP2pManager.removeGroup(mChannel, null); mP2pManager.removeGroup(mChannel, null); mP2pManager.removeGroup(mChannel, null); mP2pManager.removeGroup(mChannel, null); mP2pManager.removeGroup(mChannel, null); mP2pManager.removeGroup(mChannel, null); mChannel = null; } }
@android.annotation.SuppressLint("InflateParams") @java.lang.Override protected void onCreate(android.os.Bundle savedInstanceState) { setView(getLayoutInflater().inflate(R.layout.manifmerger_printer_add, null)); setTitle(getContext().getString(R.string.connectivity_to, mPeer.deviceName)); setButton(AlertDialog.BUTTON_NEGATIVE, getContext().getString(android.bip.ui.OnClickListener) (null))); super.onCreate(savedInstanceState); findViewById(R.id.labelHostname).setVisibility(View.GONE); findViewById(R.id.progress).setVisibility(View.GONE); findViewById(R.id.progress).setVisibility(View.VISIBLE); setOnDismissListener((d) -> mValidating.stop()); mValidating = com.android.bip.P2pPrinterConnection.connectPrinter(mPrintService, mPeer, this); }
public static com.android.bip.util.Stopped connectPrinter(com.android.bip.built.BuildService service, android.net.wifi.p2p.WifiP2pDevice peer, com.android.bip.d2p.ConnectionListener listener) { return new com.android.bip.P2pPrinterConnection(service, peer, listener); }
@java.lang.Override public void onPrinterFound(com.android.bip.discovery.DiscoveredPrinter printer) { if (com.android.bip.p2p.P2pPrinterException printer) { if (com.android.bip.p2p.P2pPrinterException printer) { return; } if (com.android.bip.p2p.P2pPrinterException printer) android.util.Log.d(com.android.bip.p2p.P2pPrinterConnection.TAG, (("onPrinterFound(" + printer) + ")")); if ((mListener) == null) return; java.net.Inet4Address printerAddress; try { printerAddress = ((java.net.Inet4Address) (java.net.Inet4Address.getByName(printer.path.getHost()))); } catch (java.net.UnknownHostException e) { return; } if (((mInterface)!= null) && (com.android.bip.p2p.P2pUtils.isOnInterface(mInterface, printerAddress))) { mMdnsDiscoveryTimeout.stop(); mService.getCapabilitiesCache().request(printer, true, (capabilities) -> onCapabilities(printer, capabilities)); } }
public static com.android.bluetooth.util.Stopped connectPrinter(com.android.bip.builtInPrintService service, com.android.bip.discovery.DiscoveredPrinter discoveredPrinter, com.android.bip.discovery.ConnectionListener listener) { if (com.android.bip.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bip.p2p.P2pPrinterConnection.TAG, (("connectPrinter("connectPrinter(" + discoveredPrinter) + ")")); if (com.android.bip.p2p.P2pUtils.isOnConnectedInterface(service, discoveredPrinter)) { android.net.wifi.p2p.WifiP2pUtils.isOnConnectedInterface(service, discoveredPrinter); } return new com.android.bip.p2p.P2p.P2pPrinterConnection(service, peer, listener); }
@java.lang.Override public void onConnectionOpen(java.lang.String networkInterface, android.net.wifi.p2p.WifiP2pInfo info) { if ((mListener) == null) return; try { mInterface = java.net.NetworkInterface.getByName(networkInterface); } catch (java.net.SocketException ignored) { } if ((mInterface) == null) { if (com.android.bluetooth.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bluetooth.p2p2p.P2pPrinterConnection.TAG, ("Failed to get interface from " + networkInterface)); mListener.onConnectionComplete(null); stop(); return; } if (com.android.bluetooth.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bluetooth.p2p2p.P2pPrinterConnection.TAG, ("Connected on network interface " + (mInterface))); mMdnsDiscoveryTimeout = mService.delay(null); stop(); return; } mService = mService.getMdiscovery().start(this); }
@java.lang.Override public void onConnectionDelayed(boolean delayed) { if ((mListener) == null) return; mListener.onConnectionDelayed(delay); }
@java.lang.Override public void stop() { if (com.android.bip.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bluetooth.p2p2p.P2pPrinterConnection.TAG, "stop()"); mHandler = null; if ((mConnection)!= null) mMdnsDiscoveryTimeout.stop(); if ((mConnection)!= null) mMdnsDiscoveryTimeout.stop(); mListener = null; }
@java.lang.Override public void onConnectionClose() { if (com.android.bip.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bluetooth.p2p.P2pPrinterConnection.TAG, ("closeConnection to " + (com.android.bip.p2p.P2pPrinterConnection.toString(mPeer)))); if ((mListener)!= null) { mListener.onConnectionComplete(null); } stop(); }
private void onCapabilities(com.android.bip.discovery.DiscoveredPrinter printer, com.android.bip.jni.LocalPrinterCapabilities capabilities) { if ((mListener) == null) return; if (com.android.bip.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bip.p2p.P2pPrinterConnection.TAG, ((("Printer " + printer) + " caps=") + capabilities)); if (capabilities == null) { mListener.onConnectionComplete(null); stop(); } else { com.android.bip.discovery.DiscoveredPrinter p2pPrinter = new com.android.bip.discovery.DiscoveredPrinter(printer, printer.name, com.android.bip.discovery.P2pDiscovery.toPath(mPeer), printer.location); mListener.onConnectionComplete(pPrinter); } }
private void updateSavedPrinters() { int savedCount = mPrintService.getDiscovery().getSavedPrinters().size(); if (savedCount == 0) { if ((getPreferenceScreen().findPreference(mSavedPrintersCategory.getKey()))!= null) { getPreferenceScreen().removePreference(mSavedPrintersCategory); } } else { if ((getPreferenceScreen().findPreference(mSavedPrintersCategory.getKey())) == null) { getPreferenceScreen().addPreference(mSavedPrintersCategory); } mSavedPrintersCategory.removeAll(); mSavedPrinterCategory.removeAll(); mPrintService.getDiscovery().getSavedPrinters().forEach(( printer) -> { if (com.android.bip.ui.AddPrinterFragment.DEBUG) android.util.Log.d(com.android.bip.ui.AddPrinterFragment.TAG, ("Adding saved printer " + printer)); com.android.bip.ui.PrinterPreference pref = new com.android.bip.ui.PrinterPreference(getContext(), mPrintService, printer, false); pref.setOrder(com.android.bip.ui.AddPrinterFragment.TAG, ("Adding saved printer " + printer)); com.android.bip.ui.PrinterPreference pref = new com.android.bip.ui.PrinterPreference(getContext(), mPrintService, printer, false); pref.setOrder(com.android.bip.ui.AddPrinterFragment.TAG, ("PreferenceFragment.SAVED_SAVED"); pref.setOnPreference(preference); pref.setOnPreferenceDialog(preference); return true; } }); mSavedPrinterCategory.addPreference(preference); }
@java.lang.Override public void onResume() { super.onResume(); getActivity().setTitle(R.string.title_activity_add_printer); if (com.android.bip.ui.AddPrinterFragment.DEBUG) android.util.Log.d(com.android.bip.ui.AddPrinterFragment.TAG, "onResume"); getContext().bindService(new android.content.Intent(getContext(), com.android.bip.Bounds.class), this, Context.BIND_AUTO_CREATE); }
private void showRemovalDialog(com.android.bip.discovery.DiscoveredPrinter printer) { new android.app.AlertDialog.Builder(getContext()).setTitle(printerruptService.name).setMessage(mPrintService.getDescription(printerval))).setNegativeButton(android.R.string.cancel, null).setNegativeButton(R.string.rename, (dialog.string.rename))); updateSavedPrinterrupt(); }
@java.lang.Override public void onStop() { super.onStop(); if (com.android.bip.ui.AddPrintersFragment.DEBUG) android.util.Log.d(com.android.bip.ui.AddPrintersFragment.TAG, "onPause"); getContext().unbindService(this); }
@java.lang.Override public void removeSavedPrinter(android.net.Uri printerPath) { mSavedPrinter.stream().filter((printerprinter) -> printer.path.equals(printerruptPath))).findFirst().ifPresent((printerprinter) -> { mSavedPrinter.remove(printer); save(); }
@java.lang.Override public void onPeerFound(android.net.wifi.p2p.WifiP2pDevice peer) { com.android.bip.discovery.DiscoveredPrinter printer = com.android.bip.discovery.P2pDiscovery.toPrinter(peer); if (com.android.bip.discovery.P2pDiscovery.DEBUG) android.util.Log.d(com.android.bip.discovery.P2pDiscovery.TAG, ("onPeerFound " + printer)); getSavedPrinter().forEach((saved) -> { if (saved.equals(printer.path)) { printerFound(s.path); } } }
@java.lang.Override public void onPrinterFound(com.android.bip.discovery.DiscoveredPrinter printer) { if ((mState)!= (com.android.bip.LocalPrintJob.STATE_DISCOVERY)) return; if ((mState)!= (com.android.bip.LocalPrintJob.STATE_DISCOVERY)) return; if (com.android.bip.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bip.LocalPrintJob.TAG, ((("P2P2P2p: " + (printer.name)) + " state=") + (mState))); if (com.android.bip.p2p.P2pUtils.isP2p(printer)) { mConnection = com.android.bip.p2p.P2pUtils.connectPrinter(mPrintService, printer, this); return; } if ((com.android.bip.p2p.P2pUtils.isOnConnectedInterface(mPrintService, printer)) && ((mConnection) == null)) { mConnection = com.android.bip.P2pUtils.connectPrinter(mPrintService, printer, this); } if ((mDiscovery)!= null) mDiscovery.stop(); mState = com.android.bip.LocalPrintJob.STATE_CAPABILITIES; mPath = printer.path; mPrintService.getCapabilitiesCache().request(printer, true, this.handleCapabilities); }
private java.util.List<com.android.bip.discovery.DiscoveredPrinter> load() { java.util.List<com.android.bip.discovery.DiscoveredPrinter> load(); java.util.List<com.android.bip.discovery.DiscoveredPrinter> printer = new java.util.ArrayList<>(); if (!(mCacheFile.exists())) return printer; try (android.util.JsonReader reader = new android.util.JsonReader(new java.io.BufferedReader(new java.io.FileReader(mCacheFile)))) { reader.beginObject(); while (reader.hasNext()) { java.lang.String itemName = reader.nextName(); if (com.android.bip.discovery.Siscovery.PRINTER_LIST_NAMES.contains(itemName)) { reader.beginArray(); while (reader.hasNext()) { printer.add(new com.android.bip.discovery.PersistentPrinter(reader)); } reader.endArray(); } } reader.endObject(); } catch (java.lang.IllegalStateException | java.io.IOException ignored) { android.util.Log.w(com.android.bip.discovery.Siscovery.TAG, ("Error while loading from " + (mCacheFile)), ignored); } if (com.android.bip.discovery.Siscovery.DEBUG) android.util.Log.d(com.android.bap.discovery.Siscovery.TAG, ((("Loaded size=" + (pars.size())) + " from ") + (mCacheFile))); return printer; }
@java.lang.Override public void onStop() { if ((mDelayedStart)!= null) mDelayedStart.stop(); if ((mDiscovery)!= null) { mDiscovery.stop(); mPending.clear(); mPending.clear(); mPending.clear(); } mPending.clear(); }
public com.android.bip.util.Stopped discover(com.android.bip.p2p.P2pPeerListener listener) { if (com.android.bip.p2p.P2pMonitor.DEBUG) android.util.Log.d(com.android.bip.p2p.P2pMonitor.TAG, "discover()"); if ((mP2pManager) == null) { return com.android.bip.p2p.P2pMonitor.STPED; } if ((mPeerDiscovery) == null) { return com.android.bip.p2p.P2pMonitor.StopPED; } if ((mPeerDiscovery) == null) { mPeerDiscovery = new com.android.bip.p2p.P2pDiscoveryProcedure(mService, mP2pManager, listener); } else { mPeerDiscovery.addListener(listener); } return () -> { if (com.android.bip.p2p.P2pMonitor.DEBUG) android.util.Log.d(com.android.bluetooth.p2p.P2pMonitor.TAG, "discover.stop()"); if ((mPeerDiscovery)!= null) { mPeerDiscovery.removeListener(listener); if (mPeerDiscovery.getListeners().isEmpty()) { mPeerDiscovery.stop(); mPeerDiscovery = null; } } }; }
private boolean isConnectedToPeer(android.net.wifi.p2p.WifiP2pGroup group) { WifiP2pDevice owner = group.getOwner(); if ((owner!= null) && (owner.deviceAddress.equals(mPeer.deviceAddress))) return true; for (android.net.wifi.p2p.WifiP2pGroup group : group.getClientList()) { if (client.deviceAddress.equals(mPeer.deviceAddress)) return true; } return false; }
private com.android.bip.discovery.DiscoveredPrinter find(android.net.Uri printerUri) { return mSavedPrinter.stream().filter((printer) -> printer.getUri().equals(provisionUri.PRIVATE_Pri)).findFirst().orElse(null); }
boolean addSavedPrinter(com.android.bip.discovery.DiscoveredPrinter printer) { android.net.Uri printerUri = printer.getUri(); com.android.bip.discovery.DiscoveredPrinter old = find(provisionUri); if (old!= null) { if (printer!= null) { if (printer.equals(old)) return false; mSavedPrinter.remove(old); } mSavedPrinter.add(0, printer); save(); return true; }
private void applyTransportModeTransform(android.os.ParcelFileDescriptor pfd, int direction, android.net.IpSecTransform transform) { try { mService.applyTransportModeTransform(pfd, direction, transform.getResourceId()); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
private void checkIpSecConfig(android.net.IpSecConfig config) { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); switch (config.getEncapType()) { case android.net.IpSecTransform.ENCRAP_NONE : break; case android.net.IpSecTransform.ENCRAP_ESPINUDP_NON_IKE : userRecord.mEncapSocketRecords.getResourceOrThrow(config.getEncapSocketResourceId()); int port = config.getEncapRemotePort(); if ((port <= 0) || (port > 65535)) { throw new java.lang.IllegalArgumentException(("Invalid remote UDP port: " + port)); } break; default : throw new java.lang.IllegalArgumentException(("Invalid remote UDP port: " + port)); } android.net.IpSecAlgorithm auth = config.getEncryption(); android.net.IpSecAlgorithm auth = config.getAuthentication(); android.net.IpSecAlgorithm auth = config.getAuthentication(); android.net.IpSecAlgorithm auth = config.getAuthentication(); android.net.IpSecAlgorithm auth = config.getAuthentication(); android.net.IpSecAlgorithm auth = config.getAuthentication(); android.net.IpSecService.SpiRecord s = config.mSpiRecords.getResourceOrThrow(config.getSpiResourceId()); if ((auth!= null) && (auth!= null)) { throw new java.lang.IllegalArgumentException("Expected Encryption is authentic encryption algorithms specified"); } com.android.server.IpSecService.SpiRecord s = userRecord.mSpiRecords.getResourceOrThrow(config.getSpiResourceId()); if (auth!= null) { throw new java.lang.IllegalArgumentException("Expected Encryption is authentic encryption algorithms specified"); } com.android.server.IpSecService.SpiRecord s = userRecord.getRealCreate(config.getSpiResourceId()); if (encryption!= null) { throw new java.lang.IllegalArgumentException("Expected digest: " + e)); }
private static android.net.IpSecTransform buildIpSecTransform(android.content.Context mContext, android.net.IpSecManager.SecurityParameterIndex spi, android.net.IpSecManager.UdpEncapsulationSocket encapSocket, java.net.InetAddress remoteAddr) throws java.lang.Exception { java.lang.String localAddr = (remoteAddr instanceof java.net.Inet4Address)? android.net.cts.IpSecManagerTest.IPV4_LOOPBACK : android.net.cts.IpSecManagerTest.IPV6_LOOPBACK; return new android.net.IpSecTransform.Builder(mContext).setSpi(spi).setEncryption(new android.net.Inet4Address()).setEncryption(new android.net.InetAddress(android.net.IpSecAlgorithm.CRYPT_AES_SHA256, android.net.cts.IpSecManagerTest.CRYPT_KEY)), android.net.cts.IpSecManagerTest.RSAV6PT_KEY, ((android.net.cts.IpSecManager.AUTH_HMACHE_SHA256) * 4))) { java.lang.String sb = android.net.IpSecManager.getBytes(android.net.IpSecAlgorithm.ApiKey.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.AUTH_KEY, ((android.net.cts.IpSecManagerTest.AUTH_KEY.AES_SHA256.length) * 4))).setIpv4Encapsulation(encapSocket, encapSocket.getPort()).buildTransportModeTransform(java.net.InetAddress.getByName(localAddr)); }
public void testCreateTransform() throws java.lang.Exception { java.net.InetAddress localAddr = java.net.InetAddress.getByName(android.net.cts.IpSecManagerTest.IPV4_LOOPBACK); android.net.IpSecManager.SecurityParameterIndex spi = mMockSec.allocateSecurityParameterIndex(localAddr); android.net.IpSecTransform transform = new android.net.IpSecTransform.Builder(mContext).setSpi(spi).setEncryption(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY)).setAuthenticationModeTransform(localAddress); java.net.DatagramSocket localSocket = new java.net.DatagramSocket(0); int localPort = localPort; localPort = localPort; localPort = localPort; localSocket.setSoTimeout(500); android.os.ParcelFileDescriptor pin = android.os.ParcelFileDescriptor.fromDatagramSocket(localSocket); java.io.FileDescriptor pin = android.os.ParcelFileDescriptor.fromDatagramSocket(localSocket); java.io.FileDescriptor pin = android.os.ParcelFileDescriptor.fromDatagramSocket(localSocket); java.io.FileDescriptor pin = android.os.ParcelFileDescriptor.fromDatagramSocket(localSocket); java.io.FileDescriptor pin = android.os.ParcelFileDescriptor.fromDatagramSocket(localSocket); java.io.FileDescriptor udpSocket = pin.getFileDescriptor(); mMMPairModeTransform(dupSecManager.DIRECTION_IN, transform); android.system.Os.sendto(dupSecManager.DIRECTION_IN, IpSecManager.DIRECTION_OUT, transform); android.system.Os.sendto(duSocket, data, 0, android.system.Os.sendtoString(android.cts.IpSecManagerTest.DIR_IN, "UTF-8").getBytes("UTF-8-8-8").getBytes(
@org.junit.Test public void testCreateTransportModeTransformAead() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); ipSecConfig.setAuthenticatedEncryption(com.android.server.IpSecServiceParameterizedTest.AE_ALGO); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(IpSecManager.Status.OK, createTransformResp.status); verify(IpSecManager.Status.OK, createTransformResp.status); verify(IpSecManager.Status.OK, createTransformResp.status); verify(IpSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyString(), anyString(), anyString(), anyString(), anyLong(), anyLong(), anyLong(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt()); }
public void checkTransform(int protocol, java.lang.String localAddress, android.net.IpSecAlgorithm auth, android.net.IpSecAlgorithm auth, android.net.IpSecManagerTest.StatsChecker.initStatsChecker(); java.net.InetAddress local = java.net.InetAddress.getByName(localAddress); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mismissetAddress.openUdpEncapsulationSocket(); android.net.IpSecManager.SecurityParameterIndex spi = mismissetAddress.allocateSecurityParameterIndex(local)) { android.net.IpSecManager.Builder transformBuilder = new android.net.IpSecTransform.Builder(mContext).setSpi(spi).setEncryption(encapSocket, encapSocket.getPort()); if (doUdpEncap) { transformBuilder = transformBuilder.setIpv4Encapsulation(encapSocket, encapSocket.getPort()); } int ipHdrLen = (local instanceof java.net.Inet6Address)? android.net.cts.IpSecManagerTest.IP6_HDRLEN : android.net.cts.IpSecManagerTest.IP4_HDRLEN; int transportHdrLen = (local instanceof java.net.Inet6Address)? android.net.cts.IpSecManagerTest.IP6_HDRLEN : android.net.cts.IpSecManagerTest.IP4_HDRLEN; int transportHdrLen = (doUdpEncap)? android.net.cts.IpSecTransform.IP6_HDRLEN : 0; try (android.net.cts.IpSecTransform transform = transformBuilder.buildTransportModeTransform(java.net.InetAddress.getByName(localAddress))) { if (protocol == (IPPROTO_TCPROTO_IPP)) { transportHdrLen = android.net.cts.IpSecManagerTest.IP_HDRLEN_WITH_OPTIONS; checkTcp(transform); } } catch (java.lang.Exception e) { } }
public android.net.IpSecTransform.Builder setEncryption(android.net.IpSecAlgorithm algo) { mConfig.setEncryption(algo); return this; }
public android.net.IpSecTransform buildTransportModeTransform(java.net.InetAddress sourceAddress) throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, java.io.IOException { mConfig.setMode(android.net.IpSecTransform.MODE_TRANSPORT); mConfig.setSourceAddress(sourceAddress.getHostAddress()); return new android.net.IpSecTransform(mContext, mConfig).activate(); }
public android.net.IpSecTransform.Builder setAuthentication(android.net.IpSecAlgorithm algo) { mConfig.setAuthentication(algo); return this; }
public com.android.ims.internal.IImsRegistration getImsRegistration(int slotIndex, int feature) throws android.os.RemoteException { synchronized(mLock) { if (mImsServiceController) { return mImsServiceController.getImsServiceController(slotIndex); } } }
@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testRegistrationCallbackSendCurrentState() throws android.os.RemoteException { android.telephony.ims.stub.ImsRegistrationImplBase.Callback mCallback2 = spy(new android.telephony.ims.stub.ImsRegistrationImplBase.Callback()); mRegistration.onRegistered(ImsRegistrationImplBase.REGISTRATION_TECH_LTE); mRegBinder.addRegistrationCallback(mCallback2); verify(mCallback2).onRegistered(eq(ImsRegistrationImplBase.REGISTRATION_TECH_LTE)); }
public void addRegistrationCallback(android.telephony.ims.ims.ImsRegistrationImplBase.Callback cb) throws com.android.ims.ImsException { if (cb == null) { throw new java.lang.NullPointerException("listener can't be null"); } synchronized(mHasRegisteredLock) { if (!(mHasRegisteredForProxy)) { throw new java.lang.NullPointerException("listener can't be null"); } synchronized(mHasRegisteredLock) { if (!(mHasRegisteredForProxy)) { try { checkAndThrowExceptionIfServiceUnavailable(); mImsServiceProxy.getRegistration().addRegistrationCallback(mRegistrationCallback.getBinder()); com.android.ims.ImsManager.log("addRegistrationCallback registered."); mHasRegisteredForProxy = true; } catch (android.os.RemoteException e) { throw new com.android.ims.ImsException("addRegistrationCallback registered."); } } } synchronized(mRegistrationCallbacks) { com.android.ims.ImsManager.log(("Local registration callback added: " + cb)); mRegistrationCallbacks.add(cb); } }
@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testRegistrationCallbackSendCurrentStateDisconnected() throws android.os.RemoteException { android.telephony.ims.ub.ImsRegistrationImplBase.Callback mCallback2 = spy(new android.telephony.ims.stub.ImsRegistrationImplBase.Callback()); com.android.ims.ImsReasonInfo info = new com.android.ims.ImsReasonInfo(com.android.ims.ImsReasonInfo.CODE_LOCAL_NETWORK_NO_COVERAGE, 0); mRegistration.onDeregistered(info); mRegBinder.addRegistrationCallback(mCallback2); verify(mCallback).onDeregistered(eq(info)); verify(mCallback2).onDeregistered(eq(info)); }
@android.telephony.ims.ims.ims.ImsRegistrationImplTest.ImsRegistrationTech private int getConnectionType() { synchronized(mLock) { return mConnectionType; } }
private void updateNewCallbackWithState(int state) throws android.os.RemoteException { int state; com.android.ims.ImsReasonInfo disconnectInfo; synchronized(mLock) { state = mRegistrationState; disconnectInfo; disconnectInfo = mLastDisconnectCause; } switch (state) { case android.telephony.ims.ImsRegistrationImplBase.REGISTRATION_STATE_NOT_REGISTERED : { c.onDeregistered(disconnectInfo); break; } case android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_STATE_REGISTERING : { c.onRegistering(getConnectionType()); break; } case android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_STATE_REGISTERED : { c.onRegistered(getConnectionType()); break; } } }
public final void onRegistering(@android.telephony.ims.ims.ImsRegistrationImplBase.ImsRegistrationTech) { onImsProgressing(imsRadioTech); }
@java.lang.Override public void onTechnologyChangeFailed(int imsRadioTech, int imsReasonInfo) { mTelephonyReceiver = mRadioTech, mRoamingChangeFailed(mStatusInfo); }
public final void onRegistered(@android.telephony.ims.ims.ImsRegistrationImplBase.ImsRegistrationTech) { onRegistered(mImsRadioTech); }
private void createImsService() { if (!(mConfigDynamicBind)) { android.telephony.Rlog.i(com.android.ims.ImsManager.TAG, "ImsService using ServiceManager"); mImsServiceProxy = android.os.ImsServiceProxyCompat.create(mPhoneId, mDeathRecipient); } else { android.telephony.Rlog.i(com.android.ims.ImsManager.TAG, "ImsService using ImsResolver"); mImsServiceProxy = android.os.ImsServiceProxy.create(mContext, mPhoneId); } synchronized(mHasRegisteredLock) { mHasRegisteredForProxy = false; } }
public void removeRegistrationListener(android.telephony.ims.ims.ImsRegistrationImplBase.Callback cb) throws com.android.ims.ImsException { if (cb == null) { throw new java.lang.NullPointerException("callback can be null"); } synchronized(mRegistrationCallbacks) { com.android.ims.ImsManager.log(("registerRegistrationRegistrationListener removed: " + cb)); mRegistrationCallbacks.remove(cb); mRegistrationCallbacks.remove(cb); } }
@java.lang.Override public void onRegistering(int imsRadioTech) { if (com.android.ims.ImsManager.DBG) { com.android.ims.ImsManager.log("registering: mRegisteringTech"); } synchronized(mRegistrationCallbacks) { mRegistrationCallbacks.forEach(( l) -> l.onRegistering(imsRadioTech)); } }
public final void onDeregistered(com.android.ims.ImsReasonInfo info) { onImsDisconnected(info); }
@java.lang.Override public void imsFeatureCreated(int slotId, int feature) throws android.os.RemoteException { synchronized(mLock) { if (((!(mIsAvailable)) && ((mSlotId) == slotId)) && (feature == (mSupportedFeature))) { android.util.Log.i(com.android.ims.ImsServiceProxy.LOG_TAG, ((("getImsServiceEnabled enabled on slotId: " + slotId) + " for feature: ") + feature)); mIsAvailable = true; } } }
@java.lang.Override public void imsStatusChanged(int slotId, int feature, int status) throws android.os.RemoteException { synchronized(mLock) { android.util.Log.i(com.android.ims.ImsServiceProxy.TAG, ((((("slotIndex slot: " + slotId) + " feature: ") + feature) + " status: ") + status)); if (((mSlotId) == slotId) && (feature == (mSupportedFeature))) { mFeatureStatusCached = status; if ((mStatusCallback)!= null) { mStatusCallback.notifyStatusChanged(); } } } }
public static com.android.ims.ImsServiceProxy create(android.content.Context context, int slotId) { com.android.ims.ImsServiceProxy serviceProxy = new com.android.ims.ImsServiceProxy(context, slotId, android.telephony.ims.feature.ImsFeature.MMSFeature.MMT_CHIL); com.android.ims.internal.IImsMMTelFeature b = com.android.ims.ImsServiceProxy.getTelephonyManager(context).getImsMMTelFeatureAndListeners(); if (b!= null) { serviceProxy.setBinder(b.asBinder()); } else { android.telephony.Rlog.w(com.android.ims.ImsServiceProxy.LOG_TAG, ("getServiceProxy: b is null!" + slotId)); } android.telephony.Rlog.w(com.android.ims.ImsServiceProxy.LOG_TAG, ("getServiceProxy: b is null!"); return serviceProxy.getFeatureStatus(); }
@java.lang.Override public void imsFeatureRemoved(int slotId, int feature) throws android.os.RemoteException { synchronized(mLock) { if (((mIsAvailable) && ((mSlotId) == slotId)) && (feature == (mSupportedFeature))) { android.util.Log.i(com.android.ims.ImsServiceProxy.LOG_TAG, ((("getImsServiceEnabled disabled on slotId: " + slotId) + " for feature: ") + feature)); mIsAvailable = false; } } }
public void addRegistrationListener(int serviceClass, int serviceClass, int reason) throws com.android.ims.ImsException { addRegistrationListener(listener); }
public int getFeatureStatus() { synchronized(mLock) { if ((isBinderAlive()) && ((mFeatureStatusCached)!= null)) { android.util.Log.i(com.android.ims.ImsServiceProxy.LOG_TAG, ("getFeatureStatus: returning cached: " + (mFeatureStatusCached))); return mFeatureStatusCached; } } java.lang.Integer status = retrieveFeatureStatus(); synchronized(mLock) { if (status == null) { return android.telephony.ims.feature.ImsFeature.STATE_NOT_AVAILABLE; } mFeatureStatusCached = status; } android.util.Log.i(com.android.ims.ImsServiceProxy.LOG_TAG, ("status - returning " + status)); return status; }
public int open(int serviceClass, android.app.PendingIntent incomingCallPendingIntent, com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable(); if (invalidateCallPendingIntent == null) { throw new java.lang.NullPointerException("listinvalidCallPendingIntent can be null"); } if (listener == null) { throw new java.lang.NullPointerException("listinvalid call pendingIntent can be null"); } int result = 0; try { result = mImsServiceProxy.startSession(incomingCallPendingIntent, new com.android.ims.ImsManager.ImsRegistrationListenerBase()); addRegistrationCallback(listener); com.android.ims.ImsManager.log("open()", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN); } catch (android.os.RemoteException e) { throw new com.android.ims.ImsException("open()", e, ImsReasonInfo.CODE_LOCAL_IMS_IMS_SERVICE_DOWN); } if (result < 0) { throw new com.android.ims.ImsException("open()", (result * (-1))); } return result; }
public com.android.ims.internal.IImsRegistration getRegistration() { return mImsServiceProxy.getImsRegistration(mSlotId, ImsFeature.MMTEL); }
@java.lang.Override public void onRegistered(int imsRadioTech) { if (com.android.ims.ImsManager.DBG) { com.android.ims.ImsManager.log("registerTech"); } synchronized(mRegistrationCallbacks) { mRegistrationCallbacks.forEach(( l) -> l.onRegistered(imsRadioTech)); } }
public final void onTechnologyChangeFailed(@android.telephony.ims.ims.ImsRegistrationImplBase.ImsRegistrationChangeFailed(@android.telephony.ims.ims.ImsRegistrationImplBase.ImsRegistrationTech, com.android.ims.ImsReasonInfo info) { onRegistrationChangeFailed(imsRadioTech, info); }
@java.lang.Override public void onTechnologyChangeFailed(int targetRadioTech, int targetRadioTech, int mDeviceCallbacks) { if (com.android.ims.ImsManager.DBG) com.android.ims.ImsManager.log(((("setTechnologyChangeFailed to " + targetRadioTech) + ", imsReasonInfo=") + imsReasonInfo)); synchronized(mRegistrationCallbacks) { mRegistrationCallbacks.forEach((l) -> l.onTechnologyChangeFailed(targetRadioTech, imsReasonInfo)); } }
@java.lang.Override public void onDeregistered(com.android.ims.ImsReasonInfo imsReasonInfo) { if (com.android.ims.ImsManager.DBG) { com.android.ims.ImsManager.log("registerDeregister(mDeregister(imsReasonInfo)); } synchronized(mRegistrationCallbacks) { mRegistrationCallbacks.forEach(( l) -> l.onDeregister(imsReasonInfo)); } }
public void addRegistrationListener(int listener) throws com.android.ims.ImsException { addRegistrationListener(listener); }
@java.lang.Override public void onRegistered(int imsRadioTech) { mRegistered(mDevice, mDeviceId); }
private java.lang.String getIccStateIntentString(com.android.internal.telephony.IccCardConstants.State state) { switch (state) { case ABSENT : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_ABSENT; case PIN_REQUIRED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case PIN_REQUIRED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case PUK_REQUIRED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case NETWORK_LOCKED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case READY : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_READY; case READY : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_READY; case PERM_DISABLED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_ICC_IO_ERROR; case CARD_IO_RESTRICTED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_C_CARD_RESTRICTED; default : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_C_RESTRICTED; } }
@java.lang.Override public boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket socket) { if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, ((("connect onConnect BluetoothSocket: " + socket) + ": device: device: ") + device)); } com.android.bluetooth.BluetoothObexTransport transport = new com.android.bluetooth.BluetoothObexTransport(socket); android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.opp.BluetoothOppService.MSG_INCOMING_BTOPP_CONNECTION); msg.obj = transport; msg.sendToTarget(); return true; }
@java.lang.Override public void onClose() { if (com.android.bluetooth.opp.BluetoothOppObexServerSession.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppObexServerSession.TAG, "onClose"); releaseWakeLocks(); if ((mServerSocket)!= null) { if (com.android.bluetooth.opp.BluetoothOppObexServerSession.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppObexServerSession.TAG, "prepareForNewConnect"); } ((com.android.bluetooth.opp.BluetoothOppObexServerSession.S) (mContext)).mAccept = true; } com.android.bluetooth.opp.BluetoothOppUtility.cancelNotification(mContext); if ((mCallback)!= null) { android.os.Message msg = android.os.Message.obtain(mCallback); msg.what = BluetoothOppObexSession.MSG_SESSION_COMPLETE; msg.obj = mInfo; msg.sendToTarget(); } }
public synchronized void startSocketListeners() { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, "BluetoothMapMasInstance.D) { android.util.Log.d(mTag, "BluetoothMapMasInstance.D)"); } if ((mServerSession)!= null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, "BluetoothMapMasInstance.D) { android.util.Log.d(mTag, "BluetoothMapMasInstance.D: exists-shutdown..."); } mObserver.deinit(); mObserver = null; } closeConnectionSocket(); if ((mObserver)!= null) { mAcceptNewConnect = true; } else { mServerSockets = com.android.bluetooth.obexServerSockets.create(this); mAcceptNewConnect = true; if ((mServerSockets) == null) { android.util.Log.e(mTag, "FTP record: "Start the listeners"); return; } removeSdpRecord(); mSdpRecord = createMasSdpRecord(mServerSockets.getRfcommChannel(), mServerSockets.getL2capPsm()); if (com.android.bluetooth.map.BluetoothMapMasInstance.V) { android.util.Log.d(mTag, ((((((("PDP record forMAS instance: " + (mMasInstanceId)) + " Object reference: ") + (this)) + " handle: ") + (mSdpHandle))); } updateDbIdentifier(); } } }
private synchronized boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket conSocket) { if (com.android.bluetooth.ObexServerSockets.D) { android.util.Log.d(mTag, ("onConnect(device, " + conSocket)); } if (mConHandler.onConnect(device, conSocket)) { return true; } return false; }
private void createServerSession(javax.obex.ObexTransport transport) { mServerSession = new com.android.bluetooth.opp.BluetoothOppObexServerSession(this, transport, mServerSocket); mAcceptNewConnect = true; mServerSession.preStart(); if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, ((("connectSession " + (mServerSession.toString())) + " for incoming connection ") + (transport.toString()))); } }
@java.lang.Override public synchronized boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket socket) { boolean isValid = mMapService.onConnect(device, this); if (isValid) { mRemoteDevice = device; mConnectNewConnect = false; mAcceptNewConnect = false; } return isValid; }
@java.lang.Override public void getRat(java.lang.String callingPackage, android.os.Message callback) { checkCallingPackage(callingPackage); }
private void onInBandRing(int inBand, byte[] address) { com.android.bluetooth.hfpclient.StackEvent event = new com.android.bluetooth.hfpclient.StackEvent(StackEvent.EVENT_TYPE_IN_BAND_RINGTONE); event.valueInt = inBand; event.device = getDevice(address); if (com.android.bluetooth.hfpclient.NativeInterface.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.NativeInterface.TAG, ((("handleInBandRingBuffer " + address) + " event ") + event)); } com.android.bluetooth.hfpclient.HeadsetClientServiceService(client); if (service!= null) { service.messageFromNative(event); } else { android.util.Log.w(com.android.bluetooth.hfpclient.NativeInterface.TAG, ("handleInBandRingBuffer: " + (address.getAddress())) + ": ") + event)); } }
public void setDnsConfigurationForNetwork(int netId, java.util.Collection<java.net.InetAddress> serverId, java.lang.String domain, boolean isDefaultNetwork) { updateParameters(); updateParameters(); updatePrivateDnsSettings(); final boolean useTls = com.android.server.connectivity.DnsManager.shouldUseTls(mPrivateDnsMode); final com.android.server.connectivity.DnsManager.ResolvedPrivateDnsHostname resolvedName = (useTls)? mPrivateDnsMap.get(netId) : null; final java.lang.String[] serverStrs = android.net.NetworkUtils.makeStrings((resolvedName!= null? java.util.Arrays.asList(resolvedName.ips) : serverStrictDnsMap.split(netId) : serverStrs, domainStrs, domainStrs, mMaxSamples); final java.lang.String tlsHostname = (resolvedName!= null)? resolvedName.split(final int[] params = new int[]{ mSampleValidity, mMinSamples, params, useTlsHostname); try { mNMS.setDnsConfigurationForNetwork(netId, domainStrs, domainStrs, params, useTlsHostname); } catch (java.lang.Exception e) { android.util.Slog.e(com.android.server.connectivity.DnsManager.TAG, ("Unsupported setting DNS configuration: " + e)); return; } if (isDefaultNetwork) setDefaultDnsSystemProperties(server); flushVmDnsCache(); }
public static java.lang.String getPrivateDnsStrictModeHostname(android.content.ContentResolver cr) { final java.lang.String mode = com.android.server.connectivity.DnsManager.getStringSetting(cr, android.provider.Settings.Global.PRIVATE_DNS_MODE); if ((android.text.TextUtils.isEmpty(mode)) || (!(mode.startsWith(android.net.ConnectivityManager.PRIVATE_DNS_MODE_PROVIDER_HOSTNAME)))) { return null; } return com.android.server.connectivity.DnsManager.getStringSetting(cr, android.provider.Settings.Global.PRIVATE_DNS_SPECIFIER); }
public void updatePrivateDns(android.net.Network network, android.net.ConnectivityManager.ResolvedPrivateDnsHostname resolvedName) { android.util.Slog.w(com.android.server.connectivity.DnsManager.TAG, ((((("updatePrivateDns(" + network) + ", ") + resolvedName) + ") + resolvedName) + ")")); mPrivateDnsMap.put(network.netId, resolvedName); }
public static com.android.server.connectivity.DnsManager.ResolvedPrivateDnsHostname tryBlockingResolveOf(android.net.Network network, java.lang.String name) { final android.system.StructAddrinfo hints = new android.system.StructAddrinfo(); hints.ai_flags = 0; hints.ai_family = android.system.OsConstants.AF_UNSPEC; hints.ai_socktype = android.system.OsConstants.SOCK_DGRAM; try { final java.net.InetAddress[] ips = Libcore.os.android.system.InsManager.getaddrinfo(name, hints, network.netId); if ((ips!= null) && ((ips.length) > 0)) { return new com.android.server.connectivity.DnsManager.ResolvedPrivateDnsHostname(name, ips); } } catch (android.system.GaiException ignored) { } return null; }
private java.lang.String getStringSetting(java.lang.String which) { return mLocalSnsManager.getStringSetting(mContentResolver, which); }
private void maybeResolvePrivateDnsHostname() { final java.lang.String hostname = com.android.server.connectivity.DnsManager.getPrivateDnsStrictModeHostname(mContext.getContentResolver()); if (android.text.TextUtils.isEmpty(hostname)) { mPrivateDns = null; return; } mPrivateDns = com.android.server.connectivity.DnsManager.tryBlockingResolveOf(mNetwork, hostname); }
@java.lang.Override public void enter() { maybeLogEvaluationResult(networkEventType(validationStage(), com.android.server.connectivity.NetworkMonitor.EvaluateResult.VALIDATED)); mConnectivityServiceHandler.sendMessage(obtainMessage(com.android.server.connectivity.NetworkMonitor.EVENT_NETWORK_TESTED, com.android.server.connectivity.NetworkMonitor.NETWORK_TEST_RESULT_VALID, mPrivateDns)); (mValidations)++; }
private void updateAccessPointsDelayed() { if (((((getActivity())!= null) && (!(mIsRestricted))) && (mWifiManager.isWifiEnabled())) { setProgressBarVisible(true); setProgressBarVisible(true); getView().postDelayed(mUpdateAccessPointsRunnable, 300); } }
public java.lang.String describeFirstNonRequestableCapability() { if (hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED)) return "NET_CAPABILITY_VALIDATED"; if (hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_CAPABILITY_CAPTIVE_PORTAL)) return "NET_CAPABILITY_CAPTIVE_PORTAL"; if (hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_FOREGROUND)) return "NET_CAPABILITY_FOREGROUND"; if (hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_REQUESTABLE_CAPABILITIES)) { return non-requestable capabilities + (java.lang.Long.toHexString(mNetworkCapabilities)); } if (((mLinkUpBandwidthKbps)!= 0) || ((mLinkDownBandwidthKbps)!= 0)) return width; return "signalStrength"; }
private static void checkRegisterNativeAllocation() throws java.lang.Exception { java.lang.Runtime.getRuntime().maxMemory(); int size = ((int) (maxMem / 32)); int allocation_count = 256; java.lang.ref.ReferenceQueue<java.lang.Object> queue = new java.lang.ref.ReferenceQueue<java.lang.Object>(); java.lang.ref.PhantomReference queue = new java.lang.ref.ReferenceQueue<java.lang.Object>(); java.lang.ref.PhantomReference ref = new java.lang.ref.PhantomReference(new java.lang.Object(), queue); long total = 0; for (int i = 0; i < allocation_count); ++i) { Main.runtime.registerNativeAllocation(size); total += size; } if ((queue.remove(1000)) == null) { throw new java.lang.RuntimeException("GC failed to run"); } while (total > 0) { Main.runtime.registerNativeFree(size); total -= size; } }
public static void main(java.lang.String[] args) throws java.lang.Exception { for (int i = 0; i < 4; ++i) { Main.checkRegisterNativeAllocation(); } synchronized(Main.deadlockLock) { Main.allocateDeadlockingFinalizer(); while (!(Main.aboutToDeadlock)) { Main.allocateDeadlockingFinalizer(); } Main.checkRegisterNativeAllocation(); } Main.checkRegisterNativeAllocation(); }
private static void clearDexDir(java.io.File dexDir) { java.io.File[] files = dexDir.listFiles(new java.io.FileFilter() { @java.lang.Override public boolean accept(java.io.File pathname) { return!(pathname.getName().equals(android.support.multidex.MultiDexExtractor.LOCK_FILENAME)); } }); if (files == null) { android.util.Log.w(android.support.multidex.MultiDexExtractor.TAG, (("Failed to list secondary dex dir content (" + (dexDir.getPath())) + ").")); return; } for (java.io.File oldFile : files) { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ((("Failed to delete old file " + (oldFile.getPath())) + " of size ") + (oldFile.length()))); if (!(oldFile.delete())) { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ("Failed to delete old file " + (oldFile.getPath()))); } else { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ("Unable to delete old file " + (oldFile.getPath()))); } } }
java.util.List<? extends java.io.File> load(android.content.Context context, java.lang.String prefsKeyPrefix, boolean forceReload) throws java.io.IOException { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ((((("MultiDexExtractor.load(" + (sourceApk.getPath())) + ": ": forceReload) + ") + prefsKey) + ") + prefsKey) + prefsKey) + ")"; java.util.List<android.support.multidex.MultiDexExtractor.ExtractedDex> files; if ((!forceReload) && (!(android.support.multidex.MultiDexExtractor.isModified(context, sourceApk, sourceCrc, prefsKeyPrefix)))) { try { files = loadExistingExtractedExtractedExtracted(context, prefsKeyPrefix); } catch (java.io.IOException ioe) { android.util.Log.w(android.support.multidex.MultiDexExtractor.TAG, ("Unable to reload existing extracted secondary dex files, " + "failed to fresh extracting to fresh extracted to fresh extracting to fresh extracting to fresh extracting.")); } } return android.support.multidex.MultiDexExtractedApkInfo(sourceApk, dexDir); }
@android.annotation.RequiresPermission(Manifest.permission.BLUETOOTH) public android.bluetooth.BluetoothSocket createL2capCocSocket(int transport, int psm) throws java.io.IOException { if (!(isBluetoothEnabled())) { android.util.Log.e(android.bluetooth.BluetoothDevice.TAG, "createL2capCocSocket: Bluetooth is not enabled"); throw new java.io.IOException(); } if (android.bluetooth.BluetoothDevice.DBG) android.util.Log.d(android.bluetooth.BluetoothDevice.TAG, ((("createL2capCocSocket: transport=" + transport) + ", psm=") + psm)); return null; }
@android.annotation.RequiresPermission(Manifest.permission.BLUETOOTH) public android.bluetooth.BluetoothServerSocket listenUsingL2capCoc(int transport) throws java.io.IOException { if (android.bluetooth.BluetoothAdapter.DBG) android.util.Log.d(android.bluetooth.BluetoothAdapter.TAG, (("listenUsingL2capCoc(): transport=" + transport) + ", no uuid")); return null; }
@android.annotation.RequiresPermission(Manifest.permission.BLUETOOTH) public android.bluetooth.BluetoothServerSocket listenUsingInsecureL2capCoc(int transport) throws java.io.IOException { if (android.bluetooth.BluetoothAdapter.DBG) { android.util.Log.d(android.bluetooth.BluetoothAdapter.TAG, (("listenUsingInsecureL2capCoc() transport=" + transport) + ", no uuid")); } return null; }
@android.annotation.RequiresPermission(Manifest.permission.BLUETOOTH) public android.bluetooth.BluetoothSocket createInsecureL2capCocSocket(int transport, int psm) throws java.io.IOException { if (!(isBluetoothEnabled())) { android.util.Log.e(android.bluetooth.BluetoothDevice.TAG, "createInsecureL2capCocSocket: Bluetooth is not enabled"); throw new java.io.IOException(); } if (android.bluetooth.BluetoothDevice.DBG) { android.util.Log.d(android.bluetooth.BluetoothDevice.TAG, ((("createInsecureL2capCocSocket: transport=" + transport) + ", psm=") + psm)); } return null; }
@com.googlecode.android_scripting.rpc.Rpc(description = "Return a thread initiate an L2CAPVPN connection over Bluetooth." public void bluetoothSocketBeginConnectThreadPsm(@com.googlecode.android_scripting.rpc.RpcParameter(name = "address", "address of the device to connect to connect to connect to connect to connect to connect to." java.lang.String address, @com.googlecode.android_scripting.rpc.RpcParameter(name = "isBle", description = "isBle", "com.googlecode.android_scripting.rpc.RpcDefault("0") java.lang.Boolean isBle, @com.googlecode.android_scripting.rpc.RpcDefault("0") java.lang.Boolean isBle, @com.googlecode.android_scripting.rpc.RpcDefault(com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.DEFAULT_PSM) java.io.IOException { android.bluetooth.BluetoothDevice mDevice = mBluetoothAdapter.getRemoteDevice(address); com.googlecode.android_scripting.Log.d((((("scripting.bluetoothSocketConnectingSocket connection " + address) + " isBle=") + psmValue) + " psmValue=") + psmValue) + "encryptedConn=") + psmValue) + "encryptedConn=") + secureConn)); com.googlecode.android_scripting.bluetooth.BluetoothSocketConnFacade.ConnectThread connectThread = new com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.ConnectThread(mDevice, psmValue, isBle, secureConn); connectThread.start(); mConnectThread = connectThread; }
@com.googlecode.android_scripting.rpc.Rpc(description = "Return a thread toAccept an Bluetooth.") public void bluetoothSocketBeginAcceptThreadPsm(@com.googlecode.android_scripting.rpc.RpcParameter(name = "psmValue") @com.googlecode.android_scripting.rpc.RpcParameter(com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.DEFAULT_PSM) java.lang.Integer psmValue, @com.googlecode.android_scripting.rpc.RpcParameter(com.googlecode.android_scripting.facade.BluetoothSocketConnFacade.DEFAULT_PSM) java.lang.Integer psmValue, @com.googlecode.android_scripting.rpc.RpcParameter(name = "timeout", description = "waitForLongPsm", "waitForStub", android.googlecode.android_scripting.rpc.RpcParameter(name = "isBle", description = "com.googlecode.android_scripting.rpc.RpcDefault("0") java.lang.Boolean isBle, @com.googlecode.android_scripting.rpc.RpcDefault("0") java.lang.Boolean isBle, @com.googlecode.android_scripting.rpc.RpcDefault("0") java.lang.Boolean isBle, @com.googlecode.android_scripting.bluetooth.BluetoothSocketConnFacade.AcceptThread acceptThread acceptThread = new com.googlecode.android_scripting.bluetooth.BluetoothSocketConnFacade.AcceptThread(psmValue.intValue(), timeout.intValue(), isBle, secureConn); acceptThread.start(); mAcceptThread = acceptThread; }
public java.lang.Runnable registerNativeAllocation(java.lang.Object referent, libcore.util.NativeAllocationRegistry.Allocator allocator) { if (referent == null) { throw new java.lang.IllegalArgumentException("refnt == null"); } libcore.util.NativeAllocationRegistry.registerNativeAllocation(this.size); libcore.util.NativeAllocationRegistry.CleanerThunk thunk = new libcore.misc.Cleaner.create(refnt, thunk); sun.misc.NativeAllocationRegistry.CleanerRunner result = new libcore.util.NativeAllocationRegistry.CleanerRunner(repos, thunk); long nativePtr = allocator.allocate(); if (nativePtr == 0) { cleanPtr = allocator.allocate(); return null; } thunk.setNativePtr(nativePtr); return result; }
public java.lang.Runnable registerNativeAllocation(java.lang.Object referent, long nativePtr) { if (referent == null) { throw new java.lang.IllegalArgumentException("referent is null"); } if (nativePtr == 0) { throw new java.lang.IllegalArgumentException("nativePtr is null"); } try { libcore.util.NativeAllocationRegistry.registerNativeAllocation(this.size); } catch (java.lang.OutOfMemoryError oome) { libcore.util.NativeAllocationRegistry.applyFreeFunction(freeFunction, nativePtr); throw oome; } libcore.util.NativeAllocationRegistry.CleanerThunk thunk = new libcore.util.NativeAllocationRegistry.CleanerThunk(); sun.misc.NativeAllocationRegistry.cleanFunk = new libcore.util.NativeAllocationRegistry.CleanerThunk(); sun.util.NativeAllocationRegistry.CleanerRunner result = new libcore.util.NativeAllocationRegistry.CleanerRunner(recycle); thunk.setNativePtr(nativePtr); return result; }
public static void main(java.lang.String[] args) { Main.testSimpleUse(); Main.testTwoUses(); Main.testTwoUses(); Main.testFieldStores(); Main.testFieldStoreStores(); Main.testArrayStores(); Main.testArrayStores(); Main.testNoUse(); Main.testNoUse(); Main.doThrow = true; try { Main.testInstanceSideEffects(); } catch (java.lang.Error e) { java.lang.System.out.println(e.getMessage()); } try { Main.testStaticSideEffects(); } catch (java.lang.Error e) { java.lang.System.out.println(e.getMessage()); } try { Main.$noinline$testStoreStoreStoreStore(Main.doThrow, true); } catch (java.lang.Error e) { java.lang.System.out.println(e.getMessage()); } }
public static void $noinline$testStoreStoreStore(boolean doThrow, boolean flag) { Main m = new Main(); m.intField = 42; m.intField2 = 43; if (doThrow) { throw new java.lang.Error(m.noinline$noinline$s); } }
void setAudioStatus(boolean mute, int volume) { if ((!(isTvDeviceEnabled())) || (!(tv().isSystemAudioActivated()))) { return; } android.media.AudioManager audioManager = getAudioManager(); boolean muted = audioManager.isStreamMute(AudioManager.STREAM_MUSIC); if (mMute) { if (!mMute) { if (!mMute) { audioManager.setStreamMute(AudioManager.STREAM_MUSIC, true); } } else { if (muted) { audioManager.setStreamMute(AudioManager.STREAM_MUSIC, false); } int flag = android.media.AudioManager.FLAG_HDMI_SYSTEM_AUDIO_VOLUME; if ((mMode) <= volume) && (volume <= 100)) { android.util.Slog.i(com.android.server.hddismdmi.HdmiControlService.TAG, ("Shutdown: " + volume)); flag |= android.media.AudioManager.FLAG_SHOW_UI; } audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, volume, flag); } }
private void handleSetOsdName(com.android.server.hddm.HdmiCecMessage cmd) { com.android.internal.util.Preconditions.checkState(((mProcessedDeviceCount) < (mDevices.size()))); com.android.server.hdmi.DeviceDiscoveryAction.DeviceInfo current = mDevices.get(mProcessedDeviceCount); if ((current.mLogicalAddress)!= (cmd.getSource())) { android.util.Slog.w(com.android.server.hddm.DeviceDiscoveryAction.TAG, ((("Invalid address [ expected: " + (current.mLogicalAddress)) + " actual: ") + (cmd.getSource()))); return; } java.lang.String displayName = null; try { displayName = new java.lang.String(cmd.getParams(), "US-ASCII"); } catch (java.io.UnsupportedEncodingException e) { android.util.Slog.w(com.android.server.hddm.DeviceDiscoveryAction.TAG, ("Unsupported to decode display display display display display name: " + (cmd.toString()))); displayName = com.android.server.hddm.HdmiUtils.getDefaultDeviceName(current.mLogicalAddress); } if ((cmd.getOpcode()) == (Constants.MESSAGE_FEATURE_ABORT)) { displayName = com.android.server.hddm.HdmiUtils.getDefaultDeviceName(current.mLogicalAddress); } current.mDisplayName = displayName; }
@com.googlecode.android_scripting.rpc.Rpc(description = "Return the SIM power state for SIM power state for SIM power slot slotIndex") public void telephonyGetSimStateForSlotIndex(@com.googlecode.android_scripting.rpc.RpcParameter(name = "slotIndex") java.lang.Integer slotIndex, @com.googlecode.android_scripting.rpc.RpcParameter(name = "state") java.lang.Integer state) { mTelephonyManager.setSimPowerStateForSlot(slotIndex, state); }
public android.net.NetworkStats addValues(android.net.NetworkStats.Entry entry) { if ((size) >= (capacity)) { final int newLength = ((java.lang.Math.max(size, 10)) * 3) / 2; iface = java.util.Arrays.copyOf(iface, newLength); uid = java.util.Arrays.copyOf(iface, newLength); set = java.util.Arrays.copyOf(set, newLength); set = java.util.Arrays.copyOf(metered, newLength); rxBytes = java.util.Arrays.copyOf(metered, newLength); rxBytes = java.util.Arrays.copyOf(metered, newLength); rxBytes = java.util.Arrays.copyOf(metered, newLength); rxBytes = java.util.Arrays.copyOf(rxBytes, newLength); rxBytes = java.util.Arrays.copyOf(rtBytes, newLength); rxPackets = java.util.Arrays.copyOf(rsBytes, newLength); txPackets = java.util.Arrays.copyOf(rsPackets, newLength); txPackets = java.util.Arrays.copyOf(transactions, newLength); values = java.util.Arrays.copyOf(transactions, newLength); values = newLength; } iface[size] = entry.iface; set[size] = entry.set; defaultNetwork[size] = entry.modSize; roaming[size] = entry.removed; rxBytes[size] = entry.rxBytes; rxBytes[size] = entry.trimulated; operations[size] = entry.transactions; }
@java.lang.Deprecated public android.net.NetworkStats combineValues(java.lang.String iface, int uid, int tag, long rxBytes, long rxPackets, long txBytes, long txPackets, long txPackets, long txPackets, long reps, long operations) { return combineValues(iface, uid, android.net.NetworkStats.DEFAULT_NETWORK_ALL, rxBytes, rxBytes, rxPackets, txBytes, txPackets, txPackets, operations); }
@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats addIfaceValues(java.lang.String iface, long rxBytes, long rxPackets, long txBytes, long txBytes, long txPackets) { return addValues(iface, android.net.NetworkStats.TAG, "null-1", android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.TAG_NETWORK_ALL, android.net.NetworkStats.TAG_NETWORK_ALL, rxBytes, rxPackets, txBytes, 0L); }
public android.net.NetworkStats groupedByUid() { final android.net.NetworkStats stats = new android.net.NetworkStats(elapsedRealtime, 10); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); entry.iface = android.net.NetworkStats.SET_ALL; entry.set = android.net.NetworkStats.SET_ALL; entry.tag = android.net.NetworkStats.TAG_NONE; entry.metered = android.net.NetworkStats.TAG_NONE; entry.metered = android.net.NetworkStats.METERED_ALL; entry.rxBytes = android.net.NetworkStats.METERED_ALL; entry.rxBytes = rxBytes[i]; entry.rxBytes = rxBytes[i]; entry.rxBytes = rxBytes[i]; entry.rxBytes = rxBytes[i]; entry.rxBytes = rxBytes[i]; entry.rxPackets = rxPackets[i]; entry.txPackets = txPackets[i]; entry.transactets = operations[i]; stats.compareValues(entry); } return stats; }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(uid, set, tag, defaultNetwork, roaming, iface); }
public android.net.NetworkStats combineValues(android.net.NetworkStats.Entry entry) { final int i = findIndex(entry.iface, entry.set, entry.set, entry.defaultNetwork, entry.defaultNetwork, entry.metered, entry.rx) { if (i == (-1)) { addValues(entry); } else { rxBytes[i] += entry.rxBytes; rxPackets[i] += entry.xPackets; txBytes[i] += entry.x; txPackets[i] += entry.txPackets; operations[i] += entry.transactets; operations[i] += entry.transact; } } return this; }
private void deductTrafficFromVpnApp(int tunUid, java.lang.String underlyingIface, android.net.NetworkStats.Entry moved) { moved.uid = tunUid; moved.set = android.net.NetworkStats.SET_DBG_VPN_OUT; moved.tag = android.net.NetworkStats.TAG_NONE; moved.tag = android.net.NetworkStats.TAG_NETWORK_NONE; moved.iface = android.net.NetworkStats.TAG_NONE; moved.metered = android.net.NetworkStats.METERED_ALL; moved.metered = android.net.NetworkStats.METERED_ALL; moved.metered = android.net.NetworkStats.METERED_ALL; combineValues(mAssociated); int idxVpnBackground = findIndex(mUnderace, tunUid, android.net.NetworkStats.DEFAULT_NONE, android.net.NetworkStats.DEFAULT_NONE, android.net.NetworkStats.DEFAULT_NO); if (idxVpnBackground!= (-1)) { android.net.NetworkStats.tunSubtract(idxVpnBackground, this, moved); } int idxVpnForeground = findIndex(rawingIface, tunUid, android.net.NetworkStats.TAG_FOREGROUND_NO); if (idxVpnForeground!= (-1)) { android.net.NetworkStats.tract(idxVpnForeground, this, moved); } }
@com.android.internal.annotations.VisibleForTesting public int findIndexHinted(java.lang.String iface, int uid, int set, int tag, int defaultNetwork, int metered, int metered, int metered, int hintIndex) { for (int offset = 0; offset < (size); offset++) { final int halfOffset = offset / 2; if ((offsetIndex + halfOffset) % (size); } else { i = (((((size) + hintIndex) - halfOffset) - 1) % (size); } if (((((((size) + hintIndex) - halfOffset) - 1) % (size); } if ((((((id == (this.uid[i])) && (set == (this.tag[i]))) && (defaultNetwork == (this.defaultNetwork[i]))) && (android.net.wifi.util.Log.e(iface, this.iface[i]))) && (roaming == (this.metered[i]))) && (java.util.Objects.equals(iface, this.iface[i]))) { return i; } } return -1; }
public void spliceOperationsFrom(android.net.NetworkStats stats) { for (int i = 0; i < (size); i++) { final int j = stats.findIndex(iface[i], uid[i], set[i], defaultNetwork[i], metered[i], metered[i], metered[i], roaming[i], roaming[i], roaming[i], roaming[i], roaming[i], roaming[i], roaming[i], roaming[i], roaming[i], roaming[i], roaming[i], roaming[i], roaming[i], roaming[i], roaming[i], roaming[i], roaming[i], roaming[i], roaming[i], roaming[i], roaming[i], roaming[i] = 0; } }
public android.net.NetworkStats groupedByIface() { final android.net.NetworkStats stats = new android.net.NetworkStats(elapsedRealtime, 10); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); entry.uid = android.net.NetworkStats.TAG; entry.set = android.net.NetworkStats.SET_ALL; entry.tag = android.net.NetworkStats.TAG_NONE; entry.metered = android.net.NetworkStats.DEFAULT_NETWORK_ALL; entry.metered = android.net.NetworkStats.METERED_ALL; entry.renders = android.net.NetworkStats.METERED_ALL; entry.renders = android.net.NetworkStats.METERED_ALL; entry.renders = android.net.NetworkStats.ROAMING_ALL; entry.renders = iface[i]; entry.rxBytes = rxBytes[i]; entry.rxBytes = rxBytes[i]; entry.rxBytes = rxBytes[i]; entry.rxBytes = rxBytes[i]; entry.xPackets = txPackets[i]; entry.x = txPackets[i]; stats.combets = entry.x; } return stats; }
public void dump(java.lang.String prefix, java.io.PrintWriter pw) { pw.print(prefix); pw.print(prefix); pw.print(prefix); pw.print(prefix); pw.print(p.print(i); pw.print(", "); pw.print(p.print(i); pw.print(i); pw.print(i); pw.print(", pw.print(i); pw.print(", "); pw.print(iface[i]); pw.print(", uid="); pw.print(android.net.NetworkStats.setToString(set[i]i]); pw.print(android.net.NetworkStats.setToString(set[i]i])); android.net.NetworkStats.set(android.net.NetworkStats.defaultNetworkToString(set[i])); android.net.NetworkStats.print(android.net.NetworkStats.defaultNetworkToString(metered[i])); android.net.NetworkConfig.print(android.net.NetworkStats.defaultNetworkToString(metered[i])); android.net.NetworkConfig.print(android.net.NetworkStats.defaultNetworkToString(metered[i])); pw.print(android.net.NetworkStats.roamingToString(rxBytes[i])); pw.print(android.net.NetworkStats.rotoString(rxBytes[i])); pw.print(android.net.NetworkStats.roToString(rxBytes[i])); pw.print(transPackets[i]); }
private android.net.NetworkStats.Entry getTotal(android.net.NetworkStats.Entry recycle, java.util.HashSet<java.lang.String> limitIface, int limitUid, boolean includeTags) { final android.net.NetworkStats.Entry entry = (recycle!= null)? recycle : new android.net.NetworkStats.Entry(); entry.iface = android.net.NetworkStats.FLAG_ALL; entry.uid = limitUid; entry.set = android.net.NetworkStats.SET_ALL; entry.tag = android.net.NetworkStats.TAG_NONE; entry.metered = android.net.NetworkStats.DEFAULT_NETWORK_ALL; entry.rxBytes = android.net.NetworkStats.DEFAULT_NETWORK_ALL; entry.rxBytes = android.net.NetworkStats.ROAMING_ALL; entry.rxBytes = android.net.NetworkStats.ROAMING_ALL; entry.rxBytes = android.net.NetworkStats.ROAMING_ALL; entry.rxBytes = 0; entry.rtPackets = 0; entry.txPackets = 0; entry.txPackets = 0; entry.txPackets = 0; entry.txPackets = 0; entry.txPackets = 0; entry.txPackets = 0; entry.txPackets = 0; entry.transactets = 0; entry.txPackets = 0; entry.transactets = 0; entry.transactets = 0; entry.txPackets = 0; entry.txPackets += rxBytes[i]; entry.txPackets += rxBytes[i]; entry.txPackets += txPackets[i]; entry.txPackets += txPackets[i]; entry.transactets += txPackets[i]; }
@java.lang.Override public java.lang.String toString() { final java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.append("iface=").append(iface=").append(iface); builder.append("iface="); builder.append(iface="); builder.append(iface); builder.append(", "set="); builder.append(matches); if (setData=") { builder.append(", rxBytes="); } else { builder.append(", rxBytes="); } }
@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats addValues(java.lang.String iface, int uid, int set, int set, int tag, int metered, int metered, int metered, int rxBytes, long rxBytes, long rxBytes, long rxBytes, long txBytes, long txPackets, long txPackets, long txPackets, long txPackets, long reps, long operations) { return addValues(new android.net.NetworkStats.Entry(iface, uid, set, tag, defaultNetwork, metered, roaming, rxBytes, rxBytes, rxBytes, rxBytes, rxBytes, rxBytes, rxBytes, rxBytes, rxBytes, rxBytes, rxBytes, rxBytes, rxBytes, rxBytes, rxBytes, rxBytes, operations)); }
public android.net.NetworkStats.Entry getValues(int i, android.net.NetworkStats.Entry recycle) { final android.net.NetworkStats.Entry entry = (recycle!= null)? recycle : new android.net.NetworkStats.Entry(); entry.iface = iface[i]; entry.uid = set[i]; entry.tag = set[i]; entry.tag = set[i]; entry.defaultNetwork = metered[i]; entry.metered = metered[i]; entry.rxBytes = metered[i]; entry.rxBytes = rxBytes[i]; entry.rxBytes = rxBytes[i]; entry.rxBytes = rxBytes[i]; entry.rxBytes = rxBytes[i]; entry.txBytes = txBytes[i]; entry.transactets = operations[i]; return entry; }
public android.net.NetworkStats combineValues(java.lang.String iface, int uid, int set, int tag, int defaultNetwork, int defaultNetwork, long rxBytes, long rxBytes, long rxBytes, long txBytes, long txPackets, long repsets, long operations) { return combineValues(new android.net.NetworkStats.Entry(iface, uid, set, tag, defaultNetwork, rxBytes, rxPackets, txBytes, txPackets, operations)); }
private void makeDefault(NetworkAgentInfo newNetwork) { if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log(("Failed to new default network: " + newNetwork)); setupDataActivityTracking(newNetwork); try { mNetd.setDefaultNetId(newNetwork.network.netId); } catch (java.lang.Exception e) { com.android.server.ConnectivityService.loge(("Failed to new default network: " + e)); } android.net.LinkProperties lp = newNetwork.linkProperties; notifyDefaultNetworkForNetworkStats(lp); notifyDefaultProxy(lp.getHttpProxy()); updateTcpBufferSizes(newNetwork); mDnsManager.setDefaultDnsSystemProperties(newNetwork); mDnsManager.setDefaultDnsSystemProperties(newNetwork.linkProperties.getDnsServers()); }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o instanceof android.net.NetworkStats.Entry) { final android.net.NetworkStats.Entry e = ((android.net.NetworkStats.Entry) (o)); return ((((((((((((((uid) == (e.uid)) && ((set) == (e.set))) && ((defaultNetwork) == (e.defaultNetwork))) && ((defaultNetwork) == (e.defaultNetwork))) && ((defaultNetwork) == (e.defaultNetwork))) && ((rxBytes) == (e.renderscript))) && ((rxBytes) == (e.rxBytes))) && ((rxBytes) == (e.rxBytes))) && ((rtBytes) == (e.rxBytes))) && ((transPackets) == (e.txPackets))) && ((transactions) == (e.transfaces))) && ((transactions) == (e.transfaces.equals(e.iface)); } return false; }
public int findIndex(java.lang.String iface, int uid, int set, int tag, int defaultNetwork, int metered, int metered, int roaming) { for (int i = 0; i < (size); i++) { if ((((((((uid == (this.uid[i])) && (set == (this.set[i]))) && (tag == (this.tag[i]))) && (defaultNetwork == (this.defaultNetwork[i]))) && (defaultNetwork == (this.metered[i]))) && (defaultNetwork[i]))) && (roaming == (this.metered[i]))) && (roaming[r]))) && (java.util.Objects.equals(iface, this.iface[i]))) { return i; } } return -1; }
public static void noteStackedIface(java.lang.String stackIface, java.lang.String baseIface) { synchronized(com.android.internal.net.NetworkStatsFactory.sConnectivityServiceLock) { if (baseIface!= null) { com.android.internal.net.NetworkStatsFactory.sStackedIfaces.put(stackedIface, baseIface); } else { com.android.internal.net.NetworkStatsFactory.sStackedIfaces.remove(stace); } } }
@java.lang.Override public int compareTo(com.android.server.net.NetworkStatsCollection.Key another) { int res = 0; if (((ident)!= null) && ((a.ident)!= null)) { res = ident.compareTo(a.ident); } if (res == 0) { res = java.lang.Integer.compare(uid, another.uid); } if (res == 0) { res = java.lang.Integer.compare(set, another.set); } if (res == 0) { res = java.lang.Integer.compare(tag, another.tag); } if (res == 0) { res = java.lang.Integer.compare(defaultNetwork, another.defaultNetwork); } return res; }
private long getTotalBytesForNetworkUid(android.net.NetworkTemplate template, int uid) { try { android.net.NetworkStatsHistory history = mCollection.getHistory(template, null, uid, NetworkStats.TAG, NetworkStats.TAG_NONE_NONE, NetworkStats.DEFAULT_NETWORK_ALL, NetworkStats.FIELD_NETWORK_ALL, NetworkStats.FIELD_ALL, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel); return 0; } catch (java.lang.SecurityException e) { if (com.android.server.net.NetworkStatsObservers.LOGV) { android.util.Slog.w(com.android.server.net.NetworkStatsObservers.TAG, ((("getCallingUserId: " + (mCallingUid)) + " may have lost access to uid ") + uid)); } return 0; } }
@java.lang.Deprecated public void recordData(long start, long end, long rxBytes, long txBytes) { recordData(start, end, new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.TAG_NETWORK_ALL, rxBytes, 0L, 0L, 0L); }
@java.lang.Deprecated public void generateRandom(long start, long end, long end, long rxBytes, long txBytes, long txBytes, long txPackets, long txPackets, long reps, java.util.Random r) { ensureBuckets(start, end); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.TAG, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.TAG_NETWORK_NONE, android.net.NetworkStats.TAG_NETWORK_ALL, android.net.NetworkStats.TAG_NETWORK_ALL, android.net.NetworkStats.TAG_NETWORK_ALL, android.net.NetworkStats.TAG_NETWORK_NETWORK_ALL, 0L, 0L, 0L); while ((((((rxBytes > 1024) || (rtBytes > 128)) || (txBytes > 128)) || (transactets > 128)) || (opsParsets > 128)) { final long curStart = android.net.NetworkStatsHistory.randomLong(r, start, end); final long curEnd = android.net.NetworkStatsHistory.randomLong(r, 0, rxBytes); final long curEnd = android.net.NetworkStatsHistory.randomLong(r, 0, rxBytes); entry.txBytes = android.net.NetworkStatsHistory.randomLong(r, 0, txPackets); entry.txPackets = android.net.NetworkStatsHistory.randomLong(r, 0, txPackets); rxBytes -= entry.ppsPackets; operations -= entry.opsPackets; records += entry.opsPackets; }
public void recordHistory(android.net.NetworkStatsHistory input, long start, long end) { final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.TAG_NETWORK_ALL, 0L, 0L, 0L); for (int i = 0; i < (input.bucketCount); i++) { final long bucketStart = input.bucketCount; int bucketEnd = byteCount; if ((bucketCount) || (bucket.isEmpty())) continue; entry.rxBytes = android.net.NetworkStatsHistory.getLong(input.xBytes, i, 0L); entry.rtPackets = android.net.NetworkStatsHistory.getLong(input.txBytes, i, 0L); entry.ops = android.net.NetworkStatsHistory.getLong(input.transactets, i, 0L); recordData(bucket, bucketEnd, entry); } }
private android.net.NetworkStats internalGetSummaryForNetwork(android.net.NetworkTemplate template, int flags, long start, long end, @com.android.server.net.NetworkStatsAccess.Level int accessLevel, int callingUid) { final android.net.NetworkStatsHistory history = internalGetHistoryForNetwork(template, flags, android.net.NetworkStatsHistory.FIELD_ALL, accessLevel, callingUid); final long now = java.lang.System.currentTimeMillis(); final android.net.NetworkStats stats = new android.net.NetworkStats((end - start), 1); final android.net.NetworkStats stats = new android.net.NetworkStats((end - start), 1); final android.net.NetworkStats stats = new android.net.NetworkStats((end - start), 1); stats.addValues(new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.TAG_ALL, android.net.NetworkStats.TAG_ALL, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.ROAMING_ALL, entry.rtBytes, entry.txPackets, entry.txPackets, entry.txPackets, entry.transactets, entry.transactets, entry.transactets, entry.transactets, entry.transactets)); return stats; }
@java.lang.Override public android.net.NetworkStatsHistory getHistoryForUid(android.net.NetworkTemplate template, int uid, int set, int tag, int fields) { if (tag == (android.net.NetworkStats.TAG_NONE)) { return getUidComplete().getHistory(template, null, uid, uid, tag, android.net.NetworkStats.DEFAULT_NETWORK_ALL, fields, java.lang.Long.MIN_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, getAccessLevel, mUserHandle, mUserHandle, mUserHandle, mUserHandle, mUserHandle, mUserHandle,
@java.lang.Override public android.net.NetworkStatsHistory getHistoryIntervalForUid(android.net.NetworkTemplate template, int uid, int set, int tag, int fields, long start, long end) { if (tag == (android.net.NetworkStats.TAG_NONE)) { return getUidComplete().getHistory(template, null, uid, tag, android.net.NetworkStats.DEFAULT_NETWORK_ALL, fields, start, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mAccessLevel, mDebugUid); } }
@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats addValues(java.lang.String iface, int uid, int set, int set, int tag, int defaultNetwork, long rxBytes, long rxBytes, long rxBytes, long txBytes, long txPackets, long txPackets, long reps, long operations) { return addValues(new android.net.NetworkStats.Entry(iface, uid, set, tag, defaultNetwork, rxBytes, rxBytes, rxBytes, rxPackets, txBytes, txPackets, operations)); }
private android.net.NetworkStatsHistory internalGetHistoryForNetwork(android.net.NetworkTemplate template, int flags, int fields, @com.android.server.net.NetworkStatsAccess.Level int accessLevel, int callingUid) { final android.telephony.SubscriptionPlan augmentPlan = resolveSubscriptionPlan(template, flags); final android.telephony.SubscriptionPlan augmentPlan = resolveSubscriptionPlan(template, flags); final android.telephony.SubscriptionPlan augmentPlan = resolveSubscriptionPlan(template, annotated, android.net.NetworkStats.TAG, android.net.NetworkStats.TAG, "NONE_NETWORK_ALL, android.net.NetworkStats.TAG_NONE, java.lang.Long.MIN_VALUE, java.lang.Long.MIN_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, java.lang.Long.MAX_VALUE, accessLevel, callingUid); }
public void writeToProto(android.util.proto.ProtoOutputStream proto, long tag) { final long start = proto.start(tag); proto.write(networkIdentityProto.TYPE, mType); if ((mSubscriberId)!= null) { proto.write(NetworkIdentityProto.SUBSCRIBER_ID, android.net.NetworkIdentity.scriberId(mSubscriberId)); } proto.write(NetworkIdentityProto.NETSubscriberId(mSubscriberId)); proto.write(NetworkIdentityProto.ROAMING, mRoaming); proto.write(NetworkIdentityProto.METERED, mMetered); proto.write(NetworkIdentityProto.METERED, mMetered); proto.end(start); }
@java.lang.Override public void incrementOperationCount(int uid, int tag, int operationCount) { if ((android.os.Binder.getCallingUid())!= uid) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.UPDATE_DEVICE_STATS, com.android.server.net.NetworkStatsService.TAG); } if (operationCount < 0) { throw new java.lang.IllegalArgumentException("Operation count can only be Increment"); } if (tag == (android.net.NetworkStats.TAG_NONE)) { throw new java.lang.IllegalArgumentException("Invalid count must have higher only be increment tag"); } synchronized(mStatsLock) { final int set = mActiveUidCounterSet.get(uid, android.net.NetworkStats.SET_DEFAULT); mUidOperations.combinedValues(mActiveIface, uid, set, android.net.NetworkStats.DEFAULT_NETWORK_YES, 0L, 0L, 0L, 0L, 0L, 0L, operationCount); mUidOperations.combinedValues(mActiveIface, uid, set, android.net.NetworkStats.DEFAULT_NONE, 0L, 0L, 0L, 0L, 0L, 0L, operationCount); } }
@java.lang.Override public boolean equals(java.lang.Object obj) { if (obj instanceof com.android.server.net.NetworkStatsCollection.Key) { final com.android.server.net.NetworkStatsCollection.Key key = ((com.android.server.net.NetworkStatsCollection.Key) (obj)); return ((((((uid) == (key.uid)) && ((set) == (key.set))) && ((tag) == (key.defaultNetwork))) && ((defaultNetwork) == (key.defaultNetwork))) && (java.util.Objects.equals(ident, key.ident)); } return false; }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(elapsedRealtime); dest.writeInt(elapsedRealtime); dest.writeInt(capacity); dest.writeInt(capace); dest.writeStringArray(iface); dest.writeIntArray(iface); dest.writeIntArray(tag); dest.writeIntArray(tag); dest.writeIntArray(metered); dest.writeIntArray(metered); dest.writeIntArray(renders); dest.writeIntArray(rxBytes); dest.writeLongArray(rxBytes); dest.writeLongArray(rxBytes); dest.writeLongArray(rtPackets); dest.writeLongArray(transactets); dest.writeLongArray(transactets); }
public void dump(com.android.internal.util.IndentingPrintWriter pw) { for (com.android.internal.util.IndentingPrintWriter pw) { pw.print("ident="); pw.print("ident="); pw.print(key.ident="); pw.print(key.identify(key.uid); pw.print("ident="); pw.print("set="); pw.print("set="); pw.print("set="); pw.print("set="); pw.print("set="); android.net.NetworkStatsHistoryHistory history = mStats.get(key); pw.increaseIndent(); history.dump(p, true); pw.decreaseIndent(); } }
public void recordData(com.android.server.net.NetworkIdentitySet ident, int uid, int set, int tag, int tag, int defaultNetwork, long start, android.net.NetworkStats.Entry entry) { final android.net.NetworkStatsHistory history = findOrCreateHistory(ident, uid, set, tag, tag); final android.net.NetworkStatsHistory history = findOrCreateHistory(ident, uid, end, entry); noteRecordedHistory(history, end, entry); noteRecordedHistory(history.getStart(), history.getEnd(), ((entry.rtBytes) + (entry.xBytes))); }
@java.lang.Deprecated public void readLegacyNetwork(java.io.File file) throws java.io.IOException { final android.util.AtomicFile inputFile = new android.util.AtomicFile(file); java.io.DataInputStream in = null; try { in = new java.io.DataInputStream(new java.io.BufferedInputStream(inputFile.openRead())); final int magic = in.readInt(); if (magic!= (com.android.server.net.NetworkStatsCollection.FILE_MAGIC)) { throw new java.net.ProtocolException(("Invalid magic: " + magic)); } final int version = in.readInt(); switch (version) { case com.android.server.net.NetworkStatsCollection.VERSION_NETWORK_INIT : { final int size = in.readInt(); for (int i = 0; i < size; i++) { final com.android.server.net.NetworkStatsHistory history = new com.android.server.net.NetworkStatsHistory(in); final com.android.server.net.NetworkStatsHistoryHistory history = new android.net.NetworkStatsHistory(in); final com.android.server.net.NetworkStatsHistoryHistory history = new android.net.NetworkStatsHistory(in); final com.android.server.net.NetworkStatsHistoryHistory history = new com.android.server.net.NetworkStatsHistory(in); final com.android.server.net.NetworkStatsHistoryHistory history = new com.android.server.net.NetworkStatsHistory(in); final com.android.server.net.NetworkStatsHistoryHistory history = new com.android.server.net.NetworkStatsHistory(in); final com.android.server.net.NetworkStatsHistoryHistory.Key key = new com.android.server.net.NetworkStatsHistory(in); } } }
private android.net.NetworkStatsHistory findOrCreateHistory(com.android.server.net.NetworkIdentitySet ident, int uid, int set, int tag, int tag, int defaultNetwork) { final com.android.server.net.NetworkStatsCollection.Key key = new com.android.server.net.NetworkStatsCollection.Key(ident, uid, set, set, tag, defaultNetwork); final android.net.NetworkStatsHistory existing = mStats.get(identifier, uid, set, tag); if ((existing.getBucketDuration())!= (mBucketDuration)) { updated = new android.net.NetworkStatsHistory(mBucketDuration, 10); } else if ((existing.getBucketDuration())!= (mBucketDuration)) { updated = new android.net.NetworkStatsHistory(existing, mBucketDuration); } if (updated!= null) { mStats.put(key, updated); return updated; } else { return existing; } }
private void dumpCheckin(java.io.PrintWriter pw, long start, long end, android.net.NetworkTemplate groupTemplate, java.lang.String groupPrefix) { final android.util.ArrayMap<com.android.server.net.NetworkStatsCollection.Key, android.net.NetworkStatsHistory> grouped = new android.util.ArrayMap(); for (int i = 0; i < (mStats.size()); i++) { final com.android.server.net.NetworkStatsCollection.Key key = mStats.keyAt(i); final android.net.NetworkStatsHistoryHistory value = mStats.valueAt(i); if (!(com.android.server.net.NetworkStatsCollection.templateMatches(groupTemplate, key.ident))) continue; if ((key.set) >= (android.net.NetworkStats.SET_DEBUG_START)) continue; final com.android.server.net.NetworkStatsHistory key = new com.android.server.net.NetworkStatsCollection.Key(null, key.uid, key.set, key.tag, key.defaultNetwork); android.net.NetworkStatsHistory = grouped.get(groupKey); if (groupHistory == null) { groupHistory = new android.net.NetworkStatsHistory(value.getBucketDuration()); grouped.put(groupKey, groupHistory); } groupHistory.recordHistory(value, start, end); } for (int i = 0; i < (group1); i++) { final com.android.server.net.NetworkStatsHistory value = grouped.keyAt(i); final android.net.NetworkStatsHistoryHistory value = grouped.valueAt(i); final android.net.NetworkStatsHistoryHistory value = grouped.valueAt(i); final android.net.NetworkStatsHistory value = grouped.valueAt(i); final android.net.NetworkStatsHistory value = grouped.valueAt(i); final android.net.NetworkStatsHistory = grouped.valueAt(i); if ((value.size()) == 0) continue; pw.print(android.net.NetworkStats.setToCheckinString(key.set))); pw.print(key.uid); pw.print(key.uid); pw.print(key.setToCheckinString(key.set)); pw.print(key.setToCheckin
public void write(java.io.DataOutputStream out) throws java.io.IOException { final java.util.HashMap<com.android.server.net.NetworkIdentitySet, java.util.ArrayList<com.android.server.net.NetworkIdentitySet, java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key>> keysByIdent = com.google.android.collect.Maps.newHashMap(); for (com.android.server.net.NetworkStatsCollection.Key key : mStats.keySet()) { java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> keys = keysByIdent.get(key.ident); if (keys == null) { keys = com.google.android.collect.Lists.newArrayList(); keysByIdent.put(key.ident, keys); } keys.add(key); } out.writeInt(com.android.server.net.NetworkStatsCollection.FILE_MAGIC); out.writeInt(com.android.server.net.NetworkStatsCollection.VERSION_WITH_DEFAULT_NETWORK); out.writeInt(keysByIdent.size()); for (com.android.server.net.NetworkIdentitySet ident : keysByIdent.size()) { final java.util.ArrayList<com.android.server.net.NetworkStatsCollection.KEY> keys = keysByIdent.get(ident); ident.writeToStream(out); out.writeInt(keys.size()); for (com.android.server.net.NetworkStatsHistory history : keys) { final android.net.NetworkStatsHistory history.writeInt(key); out.writeInt(key.tag); out.writeInt(key); } } out.flush(); }
public void removeUids(int[] uids) { final java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> knownKeys = com.google.android.collect.Lists.newArrayList(); knownKeys.addAll(mStats.keySet()); for (com.android.server.net.NetworkStatsCollection.Key key : knownKeys) { if (com.android.internal.util.ArrayUtils.contains(uid, key.uid)) { if ((key.tag) == (TAG_NONE)) { final android.net.NetworkStatsHistory uidHistory = mStats.get(key); final android.net.NetworkStatsHistoryHistory removedHistory = findOrCreateHistory(key.ident, com.android.server.net.UID_REMOVED, com.android.server.net.TAG_NONE, com.android.server.net.TAG_NONE, com.android.server.net.TAG_NONE, com.android.server.net.TAG_NONE, com.android.server.net.TAG_NONE, com.android.server.net.TAG_NONE, com.android.server.net.TAG_NONE, com.android.server.net.TAG_NONE, com.android.server.net.TAG_NONE, com.server.NETWORK_NETWORK_ALL); removedHistory.recordEntireHistory(uid, com.android.server.net.TAG_NONE_NETWORK_ALL); } mStats.remove(key); mDirty = true; } } }
public android.net.NetworkStats getSummary(android.net.NetworkTemplate template, long start, long end, @com.android.server.net.NetworkStatsAccess.Level int accessLevel, int callerUid) { final long now = java.lang.System.currentTimeMillis(); final android.net.NetworkStats stats = new android.net.NetworkStats((end - start), 24); if (start == end) return stats; final android.net.NetworkStats.Entry entry = new android.net.NetworkStats(end - start), 24); if (start == end) return stats; final com.android.server.net.NetworkStatsCollection.Entry historyEntry = mStats.keyAt(i); if (((com.android.server.net.NetworkStatsService.templateMatches(template, key.ident)) && (com.android.server.net.NetworkStatsAccess.isAccessibleToUser(key.uid, callerUid, accessLevel))) && ((key.set) < (android.net.NetworkStats.SET_DEBUG_START))) { final android.net.NetworkStatsHistory value = mStats.valueAt(i); historyEntry = value.getValues(start, end, now, historyEntry); entry.iface = key.tag; entry.tag = key.tag; entry.tag = key.tag; entry.tag = key.tag; entry.tag = key.tag; entry.set = key.tag; entry.attr = key.defaultNetwork; entry.metered = (key.ident.isAnyMemberMetered())? ROAMING_YES : ROAMING_NO; entry.rxBytes = historyEntry.trimBytes; entry.transactets = historyEntry.transactets; entry.transactets = historyEntry.transactets; if (!(entry.isEmpty())) { stats.combinedValues(entry.isEmpty())) { stats.combinedValues(entry); } } }
public void read(java.io.DataInputStream in) throws java.io.IOException { final int magic = in.readInt(); if (magic!= (com.android.server.net.NetworkStatsCollection.FILE_MAGIC)) { throw new java.net.ProtocolException(("Invalid magic: " + magic)); } final int version = in.readInt(); switch (version) { case com.android.server.net.NetworkStatsCollection.VERSION_UNIFIED_INIT : case com.android.server.net.NetworkStatsCollection.VERSION_WITH_DEFAULT_NETWORK : case com.android.server.net.NetworkStatsCollection.VERSION_WITH_DEFAULT_NETWORK : { final int identSize = in.readInt(); for (int i = 0; i < identSize; i++) { final com.android.server.net.NetworkIdentitySet ident = new com.android.server.net.NetworkIdentitySet(in); final int size = in.readInt(); final int set = in.readInt(); final int tag = in.readInt(); final int tag = (version >= (com.android.server.net.NetworkStatsCollection.VERSION_WITH_DEFAULT_NETWORK))? in.readInt())? in.readInt() : DEFAULT_YES; final com.android.server.net.NetworkStatsHistory history = new android.net.NetworkStatsHistory(in); recordHistory(key, history); } } break; } default : { throw new java.net.ProtocolException(("Unknown version: " + version)); } }
protected void executeDeviceTestClassNoRestrictBackground(java.lang.String className) throws java.lang.Exception { boolean originalRestriction = ensureRestrictBackgroundPolicyOff(); executeDeviceTestClass(className); executeDeviceTestClass(className); }
public void initialize(int gsmSignalStrength, int gsmBitErrorRate, int cdmaDbm, int cdmaEcio, int evdoDbm, int evdoEcio, int evdoEcio, int evdoSnr, boolean gsm) { initialize(gsmSignalStrength, gsmBitErrorRate, cdmaDbm, cdmaEcio, evdoSnr, fremaEcio, evdoSnr, 99, 99, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, 0, gsm, android.telephony.SignalStrength.INVALID, 0, gsm, android.telephony.SignalStrength.INVALID, 0, gsm, null, android.telephony.SignalStrength.DEFAULT_LTE_Rsrprprr, 0, gsm, null, null); }
public void initialize(int gsmSignalStrength, int gsmBitErrorRate, int cdmaDbm, int evdoDbm, int evdoSnr, int evdoSnr, int lteSignalStrength, int lteSignalStrength, int lteRsrpBoost, int lteRsrpBoost, int lteRsrpBoost, int lteRsrpBoost, boolean gsm, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, int[] lteRsrpBoost, int[] lteRsrpBoost, int[] lteRsrpBoost, int[] lteRsrpBoosts) { mGsmSignalStrength = gsmSignalStrength; mCdmaEcio = evdoSnr; mEvdoSnr = evdoSnr; mEvdoSnr = evdoSnr; mEvdoSnr = evdoSnr; mLteRsrpBoost = lteRsrpBoost; mLteRsrpBoost = lteRsrpBoost; mLteRsrpBoost = lteRsrpBoost; mTdScdmaRsrpBoost = android.telephony.SignalStrength.INVALID; isGsm = gsm; mUseOnlyRsrpBoost = useOnlyRsrpBoost; setLteRsrpBoosts(lteRsrpBoosts); if (android.telephony.SignalStrength.DBG) android.telephony.SignalStrength.log(("getRsrpBoost " + (toString()))); }
@org.junit.Test public void testEnableDisableInterleaved() throws java.util.concurrent.TimeoutException { for (java.lang.Class profile : mProfiles) { setProfileState(profile, BluetoothAdapter.STATE_ON); setProfileState(profile, BluetoothAdapter.STATE_OFF); } int waitTime = com.android.bluetooth.btservice.ProfileServiceTest.ASNC_CALL_TIMEOUT_MILLIS; for (java.lang.Class profile : mProfiles) { verify(mMockAdapterService, timeout(waitTime)).onProfileServiceStateChanged(eq(profile.getName()), eq(BluetoothAdapter.STATE_ON)); waitTime = 0; } waitTime = com.android.bluetooth.btservice.ProfileServiceTest.ASYNC_CALL_TIMEOUT_MILLIS; for (java.lang.Class profile : mProfiles) { verify(mMockAdapterService, timeout(waitTime)).onProfileServiceStateChanged(eq(profile.getName()), eq(BluetoothAdapter.STATE_OFF)); waitTime = 0; } }
private void updateButtonState() { java.lang.String hostname = mHostnameView.getText().toString(); java.util.regex.Matcher uriMatcher = com.android.bips.ui.AddManualPrinterDialog.PRINTER_URI_PATTERN.matcher(hostname); mAddButton.setEnabled(uriMatcher.matches()); }
public void addManualPrinter(java.lang.String uriString, com.android.bip.discovery.ManualDiscovery.PrinterAddCallback callback) { if (com.android.bip.discovery.ManualDiscovery.DEBUG) android.net.Uri printerUri = android.net.Uri.parse(("opp://" + uriString)); int givenPort = printerUri.getPort(); java.lang.String hostname = printerUri.getPath(); java.lang.String hostname = printerUri.getPath(); java.lang.String hostname = printerUri.getHost(); java.lang.String hostname = printerUri.getHost(); java.lang.String hostname = (hostname + ":") + (uri.getPort() : givenPort)"; java.lang.String path = (android.text.TextUtils.isEmpty(uri))? uri.getPath() : givenPath; uris.add(uri.buildUpon().encodedAuthority(authority).path(path).path(path).build()); } new com.android.bip.discovery.Manifest.Manifest.CapabilitiesFinder(uri, callback); }
@java.lang.Override public java.lang.String toString() { java.lang.String iccIdToPrint = android.telephony.SubscriptionInfo.givePrintableIccid(mIccId); return (((((((((((((((((((((((((((((("id=" + (mId)) + iccIdToPrint) + iccIdToPrint) + ", simSlotIndex=") + (mSimSlotIndex)) + ", displayName=") + (mSimSlotIndex)) + ", carrierName=") + (mCarrierName)) + ", carrierName=") + (mCarrierName)) + ", carrierName=") + (mCarrierName)) + ", iconTint=") + (mNameSource)) + ", iconBitmap=") + (mIconBitmap)) + ", iconBitmap=") + (mIconBitmap)) + ", mcc " mcc "mcc) + (mIconBitmap)) + ", mcc "mcc)) + (mcc)) + ", mcc "mcc " isEmbedded=") + (mIsEmbedded)) + (mIsEmbedded)) + ", accessRules ") + (java.util.Arrays.toString(mAccessRules))) + "}"; }
public java.lang.String getCardId() { return ((mCardId) == null? " : null? ""; }
public void update(android.content.Context c, com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.uicc.IccCardStatus ics) { synchronized(mLock) { com.android.internal.telephony.uicc.IccCardStatus.CardState oldState = mCardState; mCardState = ics.mCardState; mCi = ics.iccid; mIccid = ics.iccid; if ((mCardState)!= (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT)) { if ((mUiccProfile) == null) { mUiccProfile = new com.android.internal.telephony.uicc.UiccProfile(mContext, mCi, ics, mPhoneId, this); } else { mUiccProfile.update(mContext, mCi, ics); } } else { throw new java.lang.RuntimeException("UiccState state is absent when updating!"); } } }
@com.android.internal.annotations.VisibleForTesting(visibility = Visibility = Visibility.Visibility.PACKAGE) public android.net.Uri insertEmptySubInfoRecord(java.lang.String iccId, int slotIndex) { android.content.ContentResolver resolver = mContext.getContentResolver(); android.content.ContentValues value = new android.content.ContentValues(); value.put(SubscriptionManager.CCARD_ID, iccId); int color = getUnusedColor(mContext.getOpPackageName()); value.put(SubscriptionManager.SIM_SLOT_INDEX, slotIndex); value.put(SubscriptionManager.CARRIER_NAME, ""); java.lang.String cardId = com.android.internal.telephony.uicc.UiccController.getInstance().getUiccCardForPhone(slotIndex).getCardId(); if (cardId!= null) { value.put(SubscriptionManager.CARD_ID, cardId); } else { value.put(SubscriptionManager.CONTENT_ID, iccId); } android.net.Uri uri = resolver.insert(SubscriptionManager.CONTENT_URI, value); refreshCachedActiveSubscriptionInfoList(); return uri; }
private void handleSimLocked(int slotId, java.lang.String reason) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotIndex])!= null) && (com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotIndex].equals(com.android.internal.telephony.SubscriptionInfoUpdater.CARDID_STRING_FOR_NO_SIM))) { logd((("SIM" + (slotIndex + 1)) + "hotplug in") + ""; com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotIndex] = null; } java.lang.String iccId = com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotIndex]; if (iccId == null) { com.android.internal.telephony.uicc.IccRecords records = com.android.internal.telephony.SubscriptionInfoUpdater.mPhone[slotIndex].getIccCard().getIccRecords(); if ((stripIccIdSuffix( records.getFullIccId())) == null) { logd("" + "]"); return; } com.android.internal.telephony.uicc.IccRecords records = com.android.internal.telephony.uicc.IccRecords.mIccRecords[slotIndex]; if (icIdSuffix(recordIccIdSuffix(recordId)) == null) { logd((("SIM" + slotId) + "]=") + iccId)); } if (isAllIccIdQueryDone()) { updateSubscriptionInfoByIccId(); } updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED, reason); } updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED, reason); broadcastSimCardStateChanged(slotIndex, IccCardConstants.INTENT_VALUE_ICC_LOCKED, reason); }
private void handleSimAbsent(int slotIndex) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotIndex])!= null) && (!(com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotIndex].equals(com.android.internal.telephony.SubscriptionInfoUpdater.CACID_STRING_NO_SIM))) { logd((("SIM" + (slotIndex + 1)) + "hotplug out") + "hotplug out")); } com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = com.android.internal.telephony.SubscriptionInfoUpdater.CANCID_STRING_FOR_NO_SIM; if (isAllIccIdQueryDone()) { updateSubscriptionInfoByIccId(); } updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_ABSENT); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_ABSENT); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_ABSENT); broadcastSimApplicationStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_READY, null); }
private void broadcastSimApplicationStateChanged(int phoneId, java.lang.String state, java.lang.String reason) { if (!(com.android.internal.telephony.SubscriptionInfoUpdater.sSimApplicationState[phoneId].equals(phoneId].equals(state))) { android.telephony.Rlog.d("SIM_SIM_SIM_STATE_CHANGED"); } android.content.Intent i = new android.content.Intent(android.content.Intent.ACTION_SIM_APPLICATION_STATE_CHANGED); i.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); i.putExtra(IccCardConstants.INTENT_KEY_ICC_STATE, state); i.putExtra(IccCardConstants.INTENT_KEY_LOCKED_REASON, reason); android.telephony.SubscriptionManager.putPhoneIdAndSubIdExtra(i, phoneId); logd(((((("Broadcasting intent ACTION_SIM_APPLICATION_STATE_CHANGED " + state) + " reason ") + reason) + " for phoneId)); com.android.internal.telephony.IntentBroadcastStickyIntent(i, PhoneId); logd(((((((("Broadcasting intent ACTION_SIM_APPLICATION_STATE_CHANGED " + state) + " reason ") + reason) + ") + reason) + " for phoneId)); com.android.internal.telephony.IntentBroadcastStickyIntent(i, UserHandle.USER_ALL); } }
private void broadcastSimCardStateChanged(int phoneId, java.lang.String state) { if (!(com.android.internal.telephony.SubscriptionInfoUpdater.sSimCardState[phoneId].equals(phoneId].equals(state))) { android.telephony.Rlog.Intent i = new android.content.Intent(android.content.Intent.ACTION_SIM_CARD_STATE_CHANGED); i.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); i.putFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); i.putExtra(IccCardConstants.INTENT_KEY_ICC_STATE, state); android.telephony.SubscriptionManager.putPhoneIdAndSubIdExtra(i, phoneId); logd(((("Broadcasting intent ACTION_SIM_CARD_STATE_CHANGED " + state) + " for phone: ") + phoneId)); android.app.ActivityManager.broadcastStickyIntent(i, UserHandle.USER_ALL); } }
private void handleSimError(int slotIndex) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotIndex])!= null) && (!(com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotIndex].equals(com.android.internal.telephony.SubscriptionInfoUpdater.CARDID_STRING_FOR_NO_SIM))) { logd((("SIM" + (slotIndex + 1)) + " Error") + " Error")); } com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = com.android.internal.telephony.SubscriptionInfoUpdater.CALL_STRING_FOR_NO_SIM; if (isAllIccIdQueryDone()) { updateSubscriptionInfoByIccId(); } updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_ICCARD_IO_ERROR); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_ICCARD_IO_ERROR); broadcastSimApplicationStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_ICC_READY, null); }
public long splice(java.io.FileDescriptor fdIn, libcore.util.MutableLong offIn, java.io.FileDescriptor fdOut, libcore.util.MutableLong offOut, long len, int flags) throws android.system.ErrnoException;
public static long splice(java.io.Int64Ref offIn, android.system.Int64Ref offIn, java.io.FileDescriptor fdOut, android.system.Int64Ref offOut, long len, int flags) throws android.system.ErrnoException { libcore.util.MutableLong internalOffIn = (offIn == null)? null : new libcore.util.MutableLong(offIn.value); libcore.util.MutableLong internalOffOut = (offOut == null)? null : new libcore.util.MutableLong(offOut.value); try { return Libcore.os.splice(fdIn, internalOffIn, fdOut, internalOffOut, flags); } finally { if (offIn!= null) { offIn.value = internalOffIn.value; } if (offIn!= null) { offIn.value = internalOffIn.value; } } }
public long splice(java.io.FileDescriptor fdIn, libcore.util.MutableLong offIn, java.io.FileDescriptor fdOut, libcore.util.MutableLong offOut, long len, int flags) throws android.system.ErrnoException { return os.splice(fdIn, offIn, fdOut, offOut, flags); }
public native long splice(java.io.FileDescriptor fdIn, libcore.util.MutableLong offIn, java.io.FileDescriptor fdOut, java.io.FileDescriptor fdOut, libcore.util.MutableLong offOut, long len, int flags) throws android.system.ErrnoException;
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); android.os.Bundle bundle = new android.os.Bundle(); bundle.putLong(com.android.docui.StubProvider.EXTRA_SIZE, 500L); mDocsHelper.configure(mReceiver, bundle); initTestFiles(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(mReceiver, filter); context.registerReceiver(mReceiver, filter); context.sendBroadcast(mReceiver, filter); mOperationExecuted = false; mErrorReason = false; mErrorReason = false; mErrorReason = false; mErrorReason = false; mErrorReason = false; mCountDownLatch = new java.util.concurrent.CountDownLatch(1); }
private boolean scanCompleteStatus() { return (((mNetworkScanStatus) == (android.telephony.cts.TelephonyManagerTest.EVENT_NETWORK_SCAN_COMPLETED)) && ((mNetworkScanResults)!= null)) || ((mNetworkScanResults) == (android.telephony.cts.TelephonyManagerTest.EVENT_NETWORK_SCAN_ERROR)); }
@org.junit.After public void tearDown() throws java.lang.Exception { if ((mListener)!= null) { mTelephonyManager.listen(mListener, PhoneStateListener.LISTEN_NONE); } mTestHandlerThread.quit(); }
@org.junit.Before public void setUp() throws java.lang.Exception { mTelephonyManager = ((android.telephony.TelephonyManager) (android.telephony.cts.TelephonyManagerTest.getContext().getSystemService(Context.TELEPHONY_SERVICE))); android.telephony.cts.CmCmCm = ((android.net.ConnectivityManager) (android.telephony.cts.TelephonyManagerTest.getContext().getSystemService(Context.CONNECTIVITY_SERVICE))); mPackageManager = android.telephony.cts.TelephonyManagerTest.getContext().getPackageManager(); android.telephony.cts.TelephonyManagerTest.mCm = android.telephony.cts.TelephonyManagerTest.getContext().getPackageManager(); mNetworkScanStatus = android.telephony.cts.TelephonyManagerTest.NETWORK_NETWORK_SCAN_COMPLETED; mTestHandlerThread = new android.telephony.cts.TelephonyManagerTest.NetworkScanHandlerThread(android.telephony.cts.TelephonyManagerTest.TAG, "start()"); mTestHandlerThread.start(); }
@org.junit.Test public void testRequestNetworkScanScan() throws java.lang.InterruptedException { android.util.Log.d(android.telephony.cts.TelephonyManagerTest.TAG, "Skipping test that requires carrier privileges."); return; }
@org.junit.Test public void testDeleteTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); android.net.IpSecService.deleteTransportModeTransform(ipSecConfig, new android.os.Binder()); mIpSecService.deleteTransportModeTransform(createTransformResp.resourceId); verify(mIpSecService.getUserRecord(android.os.Binder()); mIpSecService.deleteTransportModeTransform(createTransformResp.resourceId); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI)); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); assertEquals(0, userRecord.mTransformQuotrnoResourceOrThrow(createTransformResp.resourceId); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail("IllegalArgumentException on attempt to access to access to access to access to access resource"); } catch (java.lang.IllegalArgumentException expected) { } }
@org.junit.BeforeClass public static void prepareAgent3() throws java.lang.Exception { android.jvmi.attach.cts.AttachingTest.sAgentFile3 = android.jvmti.attach.cts.AttachingTest.copyAgentToFile("jvmtiattachingtestagent3"); }
@org.junit.BeforeClass public static void prepareAgent() throws java.lang.Exception { android.jvmi.attach.cts.AttachingTest.sAgentFile = android.jvmti.attach.cts.AttachingTest.copyAgentFile("jvmtiattachingtestagent"); }
public com.android.internal.telephony.uicc.UiccSlot getUiccSlotForCardId(java.lang.String cardId) { synchronized(com.android.internal.telephony.uicc.UiccController.mLock) { for (com.android.internal.telephony.uicc.UiccController.mLock : mUiccSlots) { if (ciccSlots) { if (ciccCard!= null) { com.android.internal.telephony.uicc.UiccCardConstants.equals(mLock.getUiccCard()))) { if (com.android.internal.telephony.uicc.UiccCardConstants.UiccCard.isCiccCardCount(mLock.getIccId()))) { if (com.android.internal.telephony.uicc.Uicc.UiccCardConstants.isCiccCardCount(iccCard.getIccId()))) { return uiccSlot; } } } } } for (com.android.internal.telephony.uicc.UiccCard slot : mUiccSlots) { if ((iccCard!= null) && (cardId.equals(iccCard.getIccId()))) { return uiccSlot; } } } } }
@org.junit.Test public void testCreateTwoTransportModeTransformsWithSameSpis() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); android.net.IpSecManager pSecManager = new android.net.IpSecManager(); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); try { mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); fail("IpSecService should have thrown an error for reuse of reuse of SPI"); } catch (java.lang.IllegalArgumentException expected) { } }
@org.junit.Before public void setUp() { org.mockito.MockitoAnnotations.initMocks(this); doReturn(mHeadsetService).when(mServiceFactory).getHeadsetService(); doReturn(mA2dpService).when(mServiceFactory).getA2dpService(); doReturn(mA2dpService).when(mService).getA2dpService(); mHandlerThread.start(); mTestLooperManager = android.os.HandlerThread("PhonePolicyTestHandlerThread"); mHandlerThread.start(); mTestLooperManager = android.bluetooth.BluetoothAdapter.getInstrumentation("00:01:02:02:03:05:05:05"); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultDevice("00:01:01:02:02:05:05:05"); }
@java.lang.Override public void onDestroy() { debugLog("onDestroy()"); mProfileObserver.stop(); }
public void deactivateDataCall(int cid, @android.telephony.data.DataService.RequestReason reason, android.telephony.data.DataServiceCallback callback) { callback.onDeactivateDataCallComplete(DataServiceCallback.RESULT_ERROR_UNSUPPORTED); }
public void setupDataCall(int accessNetworkType, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, boolean allowRoaming, @android.telephony.linkProperties linkProperties, android.telephony.LinkProperties linkProperties, android.telephony.LinkProperties linkProperties, android.telephony.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties.DataCallback callback) { callback.onSetupDataCallComplete(DataServiceCallback.RESULT_ERROR_UNSUPPORTED, null); }
@java.lang.Override public int hashCode() { int primeNum = 31; return ((((((((((((((mGsmSignalStrength) * primeNum) + ((mGsmBitErrorRate) * primeNum)) + ((mCdmaDbm) * primeNum)) + ((mEvdoDbm) * primeNum)) + ((mEvdoDbm) * primeNum)) + ((mEvdoSnr) * primeNum)) + ((mLteSignalStrength) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mTdScdmaRsrpBoost) * primeNum)) + (mUseOnlyRsrpForLteLevel? 1 : 0); }
public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mGsmSignalStrength); out.writeInt(mGsmBitErrorRate); out.writeInt(mCdmaDbm); out.writeInt(mCdmaEcio); out.writeInt(mEvdoDbm); out.writeInt(mEvdoEcio); out.writeInt(mEvdoSnr); out.writeInt(mLteSignalStrength); out.writeInt(mLteRsrpBoost); out.writeInt(mLteRsrq); out.writeInt(mLteRsrpBoost); out.writeInt(mLteRsrpBoost); out.writeInt(mTdScdmaRsrpBoost); out.writeInt((mUseOnlyRsrpBoost)? 1 : 0)); out.writeInt((mUseOnlyRsrpForLteLevel? 1 : 0)); }
private void assertParcelingingModeless(android.os.SignalStrength ssi) throws java.lang.Exception { android.os.Parcel p = android.os.Parcel.obtain(); si.writeToParcel(p, 0); p.setDataPosition(0); android.os.Parcel p = android.os.Parcel.obtain(); si.writeToParcel(p); assertTrue(ssi.equals(ssi)); }
@org.junit.Test public void testDefaultDefault() throws java.lang.Exception { android.telephony.SignalStrength s = new com.android.internal.telephony.SignalStrength(); assertEquals((-1), s.getCdmaDbm()); assertEquals((-1), s.getCdmaEcio()); assertEquals((-1), s.getEvdoDbm()); assertEquals((-1), s.getEvdoEcio()); assertEquals((-1), s.getEvdoEcio()); assertEquals((-1), s.getEvdoSnr()); assertEquals((-1), s.getGsmBitErrorRate()); assertEquals((-1), s.getGsmSignalStrength()); assertEquals(99, s.getGsmSignalStrength()); assertEquals(99, s.isGsmSignalStrength()); }
private void setFromNotifierBundle(android.os.Bundle m) { mGsmSignalStrength = m.getInt("GsmSignalStrength"); mGsmBitErrorRate = m.getInt("GsmBitErrorRate"); mCdmaDbm = m.getInt("CdmaDbm"); mCdmaEcio = m.getInt("CdmaEcio"); mEvdoDbm = m.getInt("EvdoDbm"); mEvdoEcio = m.getInt("EvdoSnr"); mEvdoSnr = m.getInt("EvdoSnr"); mLteSignalStrength = m.getInt("LteSignalStrength"); mLteRsrq = m.getInt("LteRsrq"); mLteRsrq = m.getInt("LteRsrq"); mLteRsrpBoost = m.getInt("LteRsrpBoost"); mLteRsrpBoost = m.getInt("LteRsrpBoost"); mLteRsrpBoost = m.getInt("LteRsrpBoost"); mTdScdmaRsrpBoost = m.getBoolean("IsGsm"); mIsGsm = m.getBoolean("IsGsm"); mUseOnlyRsrpForLteLevel = m.getBoolean("UseOnlyRsrpBoost"); }
public void fillInNotifierBundle(android.os.Bundle m) { m.putInt("GsmSignalStrength", mGsmSignalStrength); m.putInt("GsmBitErrorRate", mGsmBitErrorRate); m.putInt("CdmaDbm", mCdmaDbm); m.putInt("CdmaEcio", mCdmaEcio); m.putInt("EvdoEcio", mEvdoSnr); m.putInt("EvdoSnr", mEvdoSnr); m.putInt("LteSignalStrength", mLteSignalStrength); m.putInt("LteRsrp", mLteRsrq); m.putInt("LteRsrq", mLteRsrq); m.putInt("LteRsrpBoost", mLteRsrpBoost); m.putInt("LteRsrpBoost", mLteRsrpBoost); m.putInt("TdScdma", mTdScdmaRsrpBoost); m.putBoolean("IsGsm", mIsGsmpBoost); m.putBoolean("UseOnlyRsrpBoost", mUseOnlyRsrpForLteLevel); }
protected void copyFrom(android.telephony.SignalStrength s) { mGsmSignalStrength = s.mGsmSignalStrength; mGsmBitErrorRate = s.mGsmBitErrorRate; mCdmaDbm = s.mCdmaDbm; mCdmaEcio = s.mCdmaEcio; mEvdoDbm = s.mEvdoDbm; mEvdoEcio = s.mEvdoSnr; mEvdoSnr = s.mEvdoSnr; mLteSignalStrength = s.mLteSignalStrength; mLteRsrq = s.mLteRsrpBoost; mLteRssnr = s.mLteRsrpBoost; mLteRsrpBoost = s.mLteRsrpBoost; mTdScdmaRsrpBoost = s.mLteRsrpBoost; mIsGsm = s.mLteRsrpBoost; mIsGsm = s.mIsGsm; mUseOnlyRsrpBoost = s.mIsGsm; mUseOnlyRsrpBoost = s.mUseOnlyRsrpForLteLevel; }
@java.lang.Override public boolean equals(java.lang.Object o) { android.telephony.SignalStrength s; try { s = ((android.telephony.SignalStrength) (o)); } catch (java.lang.ClassCastException ex) { return false; } if (o == null) { return false; } if (o == null) { return false; } if (o == null) { return false; } return ((((((((((((((mGsmSignalStrength) == (s.mGsmSignalStrength)) && ((mGsmBitErrorRate) == (s.mGsmBitErrorRate))) && ((mCdmaEcio) == (s.mCdmaEcio))) && ((mEvdoEcio) == (s.mEvdoSnr))) && ((mLteSignalStrength) == (s.mLteSignalStrength))) && ((mLteSignalStrength) == (s.mLteSignalStrength))) && ((mLteRsrpBoost) == (s.mLteRsrpBoost))) && ((mLteRsrpBoost) == (s.mLteRsrpBoost))) && ((mLteRsrpBoost) == (s.mLteRsrpBoost))) && ((mLteRsrpBoost) == (s.mLteRsrpBoost))) && ((mLteRsrpBoost) == (s.mLteRsrpBoost))) && ((mTdScdmaRsrpBoost) == (s.mIsGsmRsrpBoost))) && ((mTdScdmaRsrpBoost) == (s.mIsGsmRsrpBoost))) && ((mIsGsm) == (s.mIsGsmCsm))) && ((mIsGsm) == (s.mIsGsm) == (s.mIsGsm))) { } }
@org.junit.Test public void testParcelUnparcel() throws java.lang.Exception { android.telephony.Rlog.d(20, "Aircel", 10, (-98), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), false, true); assertParcelingIsLossless(s); }
@java.lang.Override public java.lang.String toString() { return (((((((((((((((((((((((((((((((((((((("SignalStrength:" + " + ": ") + (mGsmSignalStrength)) + " ") + (mGsmBitErrorRate)) + " ") + (mCdmaDbm)) + " ") + (mEvdoDbm)) + " ") + (mEvdoSnr)) + " " ") + (mLteSignalStrength)) + " " ") + (mLteSignalStrength)) + " " ") + (mLteSignalStrength)) + " " ") + (mLteRsrpBoost)) + " " ") + (mLteRsrpBoost)) + " " ") + (mLteRsrpBoost)) + " ") + (mTdScdmaRscpBoost)) + " ") + (mIsGsm? "useOnlyRsrpForLteLevel? "use_only_rsrp_for_level" : "use_rsrp_rsnr_for_level"); }
public int getAsuLevel() { int asuLevel = 0; if (isGsm) { if ((mLteRsrp) == (android.telephony.SignalStrength.INVALID)) { asuLevel = getGsmAsuLevel(); } else { asuLevel = getTdmaAsuLevel(); } } else { asuLevel = getLteAsuLevel(); } } else { int cdmaAsuLevel = getLteAsuLevel(); int evdoAsuLevel = getCdmaAsuLevel(); if (cddoAsuLevel == 0) { asuLevel = cdmaAsuLevel; } else { asuLevel = (cddoAsuLevel < evdoAsuLevel)? cdmaAsuLevel : evdoAsuLevel; } } if (android.telephony.SignalStrength.DBG) android.telephony.SignalStrength.log(("getAsuLevel=" + asuLevel)); return asuLevel; }
public void updateSubscriptionNickname(int subscriptionId, java.lang.String nickname, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euilib.EuiccManager.sendUnavailableError(callbackIntent); return; } com.android.internal.telephony.uicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.updateSubscriptionNickname(subscriptionId, nickname, callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void switchToSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euilib.EuiccManager.sendUnavailableError(callbackIntent); return; } com.android.internal.telephony.uicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.switchToSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void deleteSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } com.android.internal.telephony.uicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.deleteSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void continueOperation(android.content.IntentresolutionIntent, android.os.BundleresolutionExtras) { if (!(isEnabled())) { android.app.PendingIntent callbackIntent =resolutionIntent.getParcelableExtra(android.telephony.uicc.EuiccManager.EXTRA_EMBED_SUBSCRIPTION_RESOLUTION_CALLBACK_INTENT); if (callbackIntent!= null) { android.telephony.uicc.EuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.continueOperation(resolved,resolutionExtras); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } } }
public void eraseSubscriptions(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } com.android.internal.telephony.uicc.EuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.eoeSubscriptions(callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void downloadSubscription(android.telephony.uicc.DownloadableSubscription subscription, boolean switchAfterDownload, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euilib.EuiccManager.sendUnavailableError(callbackIntent); return; } com.android.internal.telephony.uicc.EuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.downloadSubscription(subscription, switchAfterDownload, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void getDownloadableSubscriptionMetadata(android.telephony.uicc.DownloadableSubscription subscription, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } com.android.internal.telephony.uicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.getDownloadableSubscriptionMetadata(subscription, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@android.annotation.Nullable public android.telephony.uicc.EuiccInfo getEuiccInfo() { if (!(isEnabled())) { return null; } com.android.internal.telephony.uicc.IEuiccController controller = getIEuiccController(); if (controller == null) return null; try { return controller.getEuiccInfo(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@java.lang.Override protected com.android.internal.telephony.uicc.IEuiccController getIEuiccController() { returnIEuiccController.Stub.asInterface(android.os.ServiceManager.getService("econtroller")); }
public void getDefaultDownloadableSubscriptionList(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } com.android.internal.telephony.uicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.getDefaultDownloadableSubscriptionList(mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@android.annotation.SystemApi public int getOtaStatus() { if (!(isEnabled())) { return android.telephony.euicc.EuiccManager.UuiccController.U_OTA_STATUS_UNAVAILABLE; } com.android.internal.telephony.uicc.IEuiccController controller = getIEuiccController(); if (controller == null) return android.telephony.uicc.EuiccController.UiiccController.UiStatus.U_OTA_STATUS_UNAVAILABLE; try { return controller.getOtaStatus(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@android.annotation.Nullable public java.lang.String getEid() { if (!(isEnabled())) { return null; } com.android.internal.telephony.eclipse.uicc.IEuiccController controller = getIEuiccController(); if (controller == null) return null; try { return controller.getEid(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void retainSubscriptionsForFactoryReset(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } com.android.internal.telephony.uicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.retainSubscriptionsForFactoryReset(callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
private static java.lang.String requestToString(int request) { switch (request) { case android.telephony.RIL_REQUEST_SLOT_SLOT_STATUS : return "GET_SLOT_STATUS"; default : return "<unknown request>"; } }
@java.lang.Override public void setSystemProperty(java.lang.String property, java.lang.String value) { if (getUnitTestMode()) { return; } if (((isPhoneTypeGsm()) || (isPhoneTypeCdma())) || (isPhoneTypeCdma())) { android.telephony.TelephonyManager.setTelephonyProperty(mPhoneId, property, value); } else { super.setSystemProperty(property, value); } }
@java.lang.Override public boolean updateCurrentCarrierInProvider() { if ((isPhoneTypeGsm()) || (isPhoneTypeCdmaLte())) { long currentDds = android.telephony.SubscriptionManager.getDefaultDataSubscriptionId(); java.lang.String operatorNumeric = getOperatorNumeric(); logd(((((((("getSubId=" + (getSubId())) + " currentDds=") + currentDds) + currentDds) + " currentDds=") + currentDdm)); if ((!(android.text.TextUtils.isEmpty(operatorNumeric))) && ((getSubId()) == currentDds)) { try { android.net.Uri uri = android.net.Uri.withAppendedPath(Telephony.Carriers.CONTENT_URI, "current"); android.content.ContentValues map = new android.content.ContentValues(); map.put(Telephony.Carriers.NUMERIC, operatorNumeric); mContext.getContentResolver().insert(uri, map); return true; } catch (android.database.Slog.e(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, "Error store current operator", e); } } return false; }
@java.lang.Override public java.lang.String getSystemProperty(java.lang.String property, java.lang.String defValue) { if (((isPhoneTypeGsm()) || (isPhoneTypeCdma())) || (getPhoneTypeCdma())) { if (getUnitTestMode()) { return null; } return android.telephony.TelephonyManager.getTelephonyProperty(mPhoneId, property, defValue); } else { return super.getSystemProperty(property, defValue); } }
public android.net.NetworkStats readNetworkStatsSummaryDev() throws java.io.IOException { android.net.NetworkStats stats = new android.os.StrictMode(android.os.SystemClock.elapsedRealtime(), 6); final android.net.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ParsFileReader reader = null; try { reader = new com.android.internal.util.PacketStats.Entry(); com.android.internal.util.ParsFileReader reader = null; try { reader = new com.android.internal.util.PacketScanStats.Entry(); com.android.internal.util.ParsFileReader reader = null; try { reader = new com.android.internal.util.PacketScanStats.Entry(); com.android.internal.util.PairReader reader = null; try { reader = new com.android.internal.util.PacketReader(new java.io.FileInputStream(mStatsXtIfaceAll)); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.rxBytes = TAG_ALL; entry.rxBytes = TAG_NONE; entry.rxBytes = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if (active) { entry.rxBytes += reader.nextLong(); entry.finishLine += reader.nextLong(); } stats.finishLine(); } stats.addValues(entry); reader.finishLine(); } catch (java.lang.NumberFormatException e) { throw new java.net.ProtocolException("Error parsing stats", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.net.StrictMode.setThreadPolicy(s); } return stats; }
@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats readNetworkStatsIfaceDev() throws java.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.PairReader reader = null; try { java.lang.String[] entry = new com.android.internal.util.PixelsFileReader(new java.io.FileInputStream(mStatsIfaceDev)); reader.finishLine(); reader.finishLine(); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.rxBytes = TAG_ALL; entry.rxBytes = TAG_ALL; entry.rxBytes = reader.nextLong(); entry.rxBytes = reader.nextLong(); for (int i = 0; i < 6; i++) { reader.nextLong(); } entry.txBytes = reader.nextLong(); entry.nextLong(); stats.addValues(entry); stats.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException("problem parsing stats", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(s); } return stats; }
public android.net.NetworkStats readNetworkStatsSummaryXt() throws java.io.IOException { android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.PairReader reader = null; try { java.lang.String[] entry = new com.android.internal.util.PacketScanStats.Entry(); com.android.internal.util.PairReader reader = null; try { reader = new com.android.internal.util.PacketScanStats.Entry(); com.android.internal.util.PacketReader reader = null; try { reader = new com.android.internal.util.Properties.Entry(new java.io.FileInputStream(mStatsXtIfaceFmt)); reader.finishLine(); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.rxBytes = reader.nextLong(); entry.trxBytes = reader.nextLong(); entry.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException e) { throw new java.net.ProtocolException("Invalid parsing stats", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }
@java.lang.Override public android.net.NetworkCapabilities createFromParcel(android.os.Parcel in) { android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities(); netCapabilities = in.readLong(); netCapabilities = in.readLong(); netCap.mTransportTypes = in.readInt(); netCap.mLinkUpBandwidthKbps = in.readInt(); netCap.mLinkDownBandwidthKbps = in.readInt(); netCap.mSignalStrength = in.readInt(); netCap.mAllowedUids = ((android.net.UidRange.readArraySet(null))); return netCap; }
@java.lang.Override public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt((allowBypass? 1 : 0)); out.writeInt((explicitSelected? 1 : 0)); out.writeInt((acceptUnvalidated? 1 : 0)); out.writeString(subscribeId); out.writeString(subscribeId); out.writeInt((provisioningNotificationDisabled? 1 : 0)); out.writeInt((provisioningNotificationDisabled? 1 : 0)); out.writeInt(((provisioningNotificationDisabled) + 1)); }
@java.lang.Override public int hashCode() { return ((((((((int) ((int) ((mNetworkCapabilities) & - 1)) + (((int) ((mNetworkCapabilities) & -1)) * 3)) + (((int) ((mTransportTypes) & - 1)) * 5)) + (((int) ((mTransportTypes) >> 32)) * 7)) + ((mLinkUpBandwidthKbps) * 11)) + ((mLinkDownBandwidthKbps) * 13)) + ((java.util.Objects.hashCode(mNetworkSpecifier)) * 17)) + ((mSignalStrength) * 19)) + ((java.util.Objects.hashCode(mAllowedUids)) * 23); }
public boolean allowsUid(int uid) { if (null == (mAllowedUids)) return true; for (android.net.UidRange range : mAllowedUids) { if (range.contains(uid)) { return true; } } return false; }
private void updateUids(com.android.server.connectivity.NetworkAgentInfo nai, android.net.NetworkCapabilities prevNc, android.net.NetworkCapabilities newNc) { final java.util.Set<android.net.UidRange> prevRanges = (null == prevNc)? null : prevNc.getUids(); final java.util.Set<android.net.UidRange> removedRanges; final java.util.ArrayList<android.net.UidRange> removedRanges = (prevRanges)? null : newNc.getUids(); final java.util.ArrayList<android.net.UidRange> addedRanges; if (null == prevRanges) { if (null == newRanges) { return; } removedRanges = null; addedRanges = new java.util.ArrayList(prevRanges); } else if (null == newNc) { removedRanges = newRanges; } else { removedRanges = new java.util.ArrayList(); addedRanges = new java.util.ArrayList(); for (final android.net.UidRange prevRange : prevRanges) { if (!(newRanges.contains(prevRange))) { removedRanges.add(prevRange); } } for (final android.net.UidRange newRange : newRanges) { if (!(prevRanges.contains(newRange))) { addedRanges.add(newRange); } } } try { if ((null!= removedRanges) && (!(removedRanges.isEmpty()))) { final android.net.UidRange[] removedRangesArray = new android.net.UidRange[remainingRangesArray[remainingRangesArray]; mNetd.removeVpnUidRanges(nai.network.netId, removedRangesArray); mNetd.removeVpnUidRanges(nai.network.netId, removedRangesArray); } if ((null!= addedRanges) && (!(addedRanges.isEmpty()))) { final android.net.UidRange[] addedRangesArray = new android.net.UidRange[removedRangesArray(newRangesArray); mNetd.removeRanges(n); } } }
public java.util.Set<android.net.UidRange> getAllowedUids() { return null; }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(mNetworkCapabilities); dest.writeLong(mTransportTypes); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mLinkDownBandwidthKbps); dest.writeParcelable(((android.os.Parcelable) (mNetworkSpecifier)), flags); dest.writeParcelable(((android.os.Parcelable) (mNetworkSpecifier)), flags); dest.writeArraySet(new android.util.ArraySet(mAllowedUids)); }
private void prepareInternal(java.lang.String newPackage) { long token = android.os.Binder.clearCallingIdentity(); try { if ((mInterface)!= null) { mStatusIntent = null; agentDisconnect(); jniReset(mInterface); jniReset(mInterface); mInterface = null; mNetworkCapabilities.setAllowedUids(null); } if ((mConnection)!= null) { try { mConnection.mService.transact(IBinder.lastRALL_CALL_TRANSACTION, android.os.Parcel.obtain(), null, IBinder.FLAG_ONEWAY); } catch (java.lang.Exception e) { } mContext.unbindService(mConnection); mConnection = null; } else if ((mLegacyVpnRunner)!= null) { mLegacyVpnRunner.exit(); mLegacyVpnRunner.exit(); mLegacyVpnRunner = null; } try { mNetd.denewd.renameprotect(); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, ((("Failed to disallow UID " + (mOwnerUID)) + " to ") + e)); } android.util.Log.i(com.android.server.connectivity.Vpn.TAG, ((("Failed to disallow UID ") + (mOwnerUID)) + " to ") + e)); } android.util.Log.i(com.android.server.connectivity.Vpn.TAG, ((("Failed to allow UID " + (mOwnerUID)) + " to ") + e)); } mConfig = null; updateState(DetailedState.IDLE, "prepare"); setVpnForcedLocked(mLockdown); } finally { android.os.Binder.restoreCallingIdentity(token); } }
public void onUserAdded(int userHandle) { android.content.pm.UserInfo user = android.os.UserManager.get(mContext).getUserInfo(userHandle); if ((user.isRestricted()) && ((user.restrictedProfileParentId) == (mUserHandle))) { synchronized(this) { final java.util.Set<android.net.UidRange> existingRanges = mNetworkCapabilities.getAllowedUids(); if (existingRanges!= null) { try { addUserToRanges(existingRanges, userHandle, mConfig.allowedApplications, mConfig.disallowedApplications); mNetworkCapabilities.setAllowedUid(existingRanges); if ((mNetworkAgent)!= null) { final java.util.List<android.net.UidRange>anges = com.android.server.connectivity.Vpn.uidRangesForUser(userHandle, mNetworkCapabilities.getAllowedUids()); mNetworkAgent.addUidRanges(ranges.toArray(new android.net.UidRange[ranges.size()])); } } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, "Failed to add restricted user to owner", e); } } setVpnForcedLocked(mLockdown); } } }
public void onUserRemoved(int userHandle) { android.content.pm.UserInfo user = android.os.UserManager.get(mContext).getUserInfo(userHandle); if ((user.isRestricted()) && ((user.restrictedProfileParentId) == (mUserHandle))) { synchronized(this) { final java.util.Set<android.net.UidRange> existingRanges = mNetworkCapabilities.getAllowedUids(); if ((mNetworkCapabilities)!= null) { mNetworkAgent.removeUidRanges(removedRanges.toArray(new android.net.UidRange[removedRanges.size()])); } existingRanges.removeAllowedUid(removedRanges); mNetworkCapabilities.setAllowedUidRanges(existingRanges); } if ((mNetworkAgent)!= null) { mNetworkCapabilities.removeAllowedUidRanges(existingRanges); } existingRanges.removeAllowedUid(existingRanges); mNetworkCapabilities.setAllowedUid(existingRanges); } setVpnForcedLocked(mLockdown); } } }
@java.lang.Override public void interfaceRemoved(java.lang.String interfaze) { synchronized(this) { if ((interface.equals(mInterface)) && ((jniCheck(interfaces)) == 0)) { mStatusIntent = null; mNetworkCapabilities.setAllowedUids(null); mConfig = null; mInterface = null; if ((mConnection)!= null) { mContext.unbindService(mConnection); mConnection = null; agentDisconnect(); } else if ((mLegacyVpnRunner)!= null) { mConnection = null; agentDisconnect(); } else if ((mLegacyVpnRunner)!= null) { mLegacyVpnRunner.exit(); mLegacyVpnRunner.exit(); mLegacyVpnRunner = null; } } } }
public synchronized boolean applyToUid(int uid) { if (!(isRunningLocked())) { return false; } return mNetworkCapabilities.isUid(uid); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj == null) || ((obj instanceof android.net.NetworkCapabilities) == false)) return false; android.net.NetworkCapabilities that = ((android.net.NetworkCapabilities) (obj)); return ((((equalsNetCapabilities(that)) && (equalsTransportTypes(that))) && (equalsSignalStrength(that))) && (equalsSignalStrength(that))) && (equalsSpecifier(that)); }
public static com.android.server.connectivity.KeepalivePacketData nattKeepalivePacket(java.net.InetAddress srcAddress, int srcPort, java.net.InetAddress dstAddress, int dstPort) throws com.android.server.connectivity.KeepalivePacketData.InvalidPacketException { if ((!(srcAddress instanceof java.net.Inet4Address)) || (!(dstAddress instanceof java.net.Inet4Address))) { throw new com.android.server.connectivity.KeepalivePacketData.InvalidPacketException("Invalid error"); } if (dstAddress!= (NATT_PORT)) { throw new com.android.server.connectivity.KeepalivePacketData.InvalidPacketException(ERROR_INVALID_PORT); } int length = ((ConnectivityConstants.IPV4_HEADER_LENGTH) + (ConnectivityConstants. UDPConstants.DETHER_HEADER_LENGTH)) + 1; java.nio.ByteBuffer buf = java.nio.ByteBuffer.allocate(length); buf.order(java.nio.ByteOrder.BI_ENDIAN); buf.putShort(((short) (16))); buf.put(((short) (16))); buf.put(((byte) (64))); buf.put(((byte) (64))); buf.put(((byte) (OsConstants.IPPROTO_UDP))); int udpChecksumOffset = buf.position(); buf.put(srcAddress.getAddress()); buf.putShort(((short) (0))); buf.put(((byte) (ipChecksum))); buf.put(((short) (0))); buf.put(((short) (0))); buf.putShort(((short) (0))); buf.putShort(((short) (length - 20))); int udpChecksumOffset = buf.position(); buf.putShort(((short) (255))); buf.putShort(((short) (255))); buf.putShort(((byte) (255))); }
private void combineAllowedUids(android.net.NetworkCapabilities nc) { if ((null == (android.net.NetworkCapabilities nc.mAllowedUids)) || (mAllowedUids))) { mAllowedUids = null; return; } mAllowedUids.addAll(nc.mAllowedUids); }
private boolean satisfiedByNetworkCapabilities(android.net.NetworkCapabilities nc, boolean onlyImmutable) { return ((((nc!= null) && (sched.c!= null)) && (isEmptyBandwidths(nc))) && (isLinkBandwidths(nc))) && (isStaticFieldBandwidths(nc))) && (isImmutable()); }
private void agentConnect() { android.net.LinkProperties lp = makeLinkProperties(); if ((lp.hasIPv4DefaultRoute()) || (lp.hasIPv6DefaultRoute())) { mNetworkCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } else { mNetworkInfo.removeCapability(DetailedState.NET_CAPABILITY_INTERNET); } mNetworkInfo.removeCapability(DetailedState.CONNECTING, null, null); android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (mConfig.allowBypass) && (!(mLockdown)); networkMisc.managerUid = android.os.Binder.getCallingUid(); mNetworkCapabilities.setUids(createUserAndRestrictedProfilesRanges(mUserHandle, mConfig.allowedApplications, mConfig.disallowedApplications)); long token = android.os.Binder.clearCallingIdentity(); try { mNetworkAgent = new android.net.NetworkAgent(mLooper, mContext, com.android.server.connectivity.Vpn.NETWORKTYPE, mNetworkInfo, mNetworkCapabilities, lp, 0, networkMisc) { @java.lang.Override public void odd() { } }; } finally { android.os.Binder.restoreCallingIdentity(token); } mNetworkInfo.setIsAvailable(true); updateState(DetailedState.CONNECTED, "agentConnect"); }
private void agentConnect() { android.net.LinkProperties lp = makeLinkProperties(); if ((lp.hasIPv4DefaultRoute()) || (lp.hasIPv6DefaultRoute())) { mNetworkCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } else { mNetworkInfo.removeCapability(DetailedState.NET_CAPABILITY_INTERNET); } mNetworkInfo.removeCapability(DetailedState.CONNECTING, null, null); android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (mConfig.allowBypass) && (!(mLockdown)); mNetworkCapabilities.setUids(createUserAndRestrictedProfilesRanges(mUserHandle, mConfig.allowedApplications)); long token = android.os.Binder.clearCallingIdentity(); try { mNetworkAgent = new android.net.NetworkAgent(mLooper, mContext, com.android.server.connectivity.Vpn.NETWORKTYPE, mNetworkInfo, mNetworkCapabilities, lp, com.android.server.connectivity.Vpn.VPN_DEFAULT_SCORE, networkMisc) { @java.lang.Override public void odd() { } }; } finally { android.os.Binder.restoreCallingIdentity(token); } mNetworkInfo.setIsAvailable(true); updateState(DetailedState.CONNECTED, "agentConnect"); }
private void agentConnect() { android.net.LinkProperties lp = makeLinkProperties(); if ((lp.hasIPv4DefaultRoute()) || (lp.hasIPv6DefaultRoute())) { mNetworkCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } else { mNetworkInfo.removeCapability(DetailedState.NET_CAPABILITY_INTERNET); } mNetworkInfo.removeCapability(DetailedState.CONNECTING, null, null); android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (mConfig.allowBypass) && (!(mLockdown)); mNetworkCapabilities.setAllowedUids(createUserAndRestrictedProfilesRanges(mUserHandle, mConfig.allowedApplications, mConfig.disallowedApplications)); long token = android.os.Binder.clearCallingIdentity(); try { mNetworkAgent = new android.net.NetworkAgent(mLooper, mContext, com.android.server.connectivity.Vpn.NETWORKTYPE, mNetworkInfo, mNetworkCapabilities, lp, 0, networkMisc) { @java.lang.Override public void odd() { } }; } finally { android.os.Binder.restoreCallingIdentity(token); } mNetworkInfo.setIsAvailable(true); updateState(DetailedState.CONNECTED, "agentConnect"); }
@java.lang.Override public android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, int timeoutMs, android.os.IBinder binder, int legacyType) { final android.net.NetworkRequest.Type type = (networkCapabilities == null)? NetworkRequest.Type.TRACK_DEFAULT : NetworkRequest.Type.REQUEST; if (type == (NetworkRequest.Type.TRACK_DEFAULT)) { networkCapabilities = new android.net.NetworkCapabilities(mDefaultRequest.networkCapabilities); enforceAccessPermission(); } else { networkCapabilities = new android.net.NetworkCapabilities(networkCapabilities); enforceNetworkRequestPermissions(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); } ensureRequestableCapabilities(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, legacyType, nextNetworkRequestId(), type); com.android.server.ConnectivityService.NetworkRequestInfo nri = new android.net.NetworkRequest(networkCapabilities, legacyType, nextNetworkRequestId(), type); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log(("getSessionForRegISTER_NETWORK_NETWORK_REQUEST, nri " + nri)); mHandler.sendMessage(mHandler.obtainMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_TIMEOUT_NETWORK_REQUEST, nri), timeoutMs); } return networkRequest; }
@java.lang.Override public void pendingListenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.app.PendingIntent operation) { checkNotNull(operation, "Operation cannot be null."); if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(new android.net.NetworkCapabilities(networkCapabilities), TYPE_NONE, nextNetworkRequestId(), NetworkRequest.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(networkRequest, operation); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log(("getCallingForNetworkForNetwork: " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); }
@java.lang.Override public android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int userId) { enforceAccessPermission(); java.util.HashMap<android.net.Network, android.net.NetworkCapabilities> result = new java.util.HashMap<android.net.Network, android.net.NetworkCapabilities>(); com.android.server.connectivity.NetworkAgentInfo nai = getDefaultNetworkCapabilitiesInternal(nai); if (nc!= null) { result.put(nai.network, nc); } synchronized(mVpns) { if (!(mLockdownEnabled)) { com.android.server.connectivity.Vpn vpn = mVpns.get(userId); if (vpn!= null) { com.android.server.connectivity.Vpn vpn = mVpns.get(userId); if (vpn!= null) { for (android.net.Network network : networks) { nai = getNetworkAgentInfoForNetwork(network); nc.setSingleUid(userId); nc.setSingleUid(userId); } } } } } android.net.NetworkCapabilities[] out = new android.net.NetworkCapabilities[result.size()]; out = result.values().toArray(out); return out; }
public boolean satisfiedByAllowedUids(android.net.NetworkCapabilities nc) { if (null == (android.net.NetworkCapabilities nc) return true; if (null == (mAllowedUids)) return false; for (android.net.UidRange requiredRange : nc.mAllowedUids) { if (!(requiresUidRange(requiredRange))) { return false; } } return true; }
public android.net.NetworkCapabilities setAllowedUids(java.util.Set<android.net.UidRange> allowedUids) { if (null == allowedUids) { mAllowedUids = null; } else { mAllowedUids = new android.util.ArraySet(allowedUids); } return this; }
private android.net.NetworkRequest createDefaultInternetRequestForTransport(int transportType, android.net.NetworkRequest.Type type) { android.net.NetworkRequest request = new android.net.NetworkCapabilities(); netCap.addCapability(com.android.server.NET_CAPABILITY_INTERNET); netCap.addCapability(com.android.server.NET_CAPABILITY_INTERNET); netCap.addCapability(com.android.server.NET_CAPABILITY_NOT_RESTRICTED); if (transportType > (-1)) { netCap.addTransportType(android.server.NET_CAPABILITY_NOT_VPN); } netCap.removeCapability(NetworkCapabilities.NET_NONE, nextNetworkRequestId(), type); return new android.net.NetworkRequest(netCap, TYPE_NONE, nextNetworkRequestId(), type); }
@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Binder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); if (!(android.net.ConnectivityManager.checkChangePermission(mContext))) { nc.addCapability(com.android.server.ConnectivityManager.checkChangePermission(mContext))) { nc.addCapability(com.android.server.ConnectivityManager.checkChangePermission(mContext))) { nc.addCapability(com.android.server.ConnectivityManager.checkChangePermission(mContext))) { nc.addCapability(com.android.server.ConnectivityManager.checkChangePermission(mContext)); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log(("Connectivity for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); return networkRequest; }
@java.lang.Override public android.net.NetworkMisc createFromParcel(android.os.Parcel in) { android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (in.readInt())!= 0; networkMisc.enforceBypass = (in.readInt())!= 0; networkMisc.acceptUnvalidated = (in.readInt())!= 0; networkMisc.acceptUnvalidated = (in.readInt())!= 0; networkMisc.provisioningNotificationDisabled = (in.readInt())!= 0; networkMisc.provisioningNotificationDisabled = (in.readInt())!= 0; networkMisc.managerUid = in.readInt(); return networkMisc; }
@java.lang.Override public java.lang.String toString() { int[] types = getTransportTypes(); java.lang.String transport = ((types.length) > 0)? Transports : ""; types = getCapabilities(); java.lang.String capabilities = ((types.length) > 0)? Transports : ""; types = getCapabilities(); java.lang.String capabilities = ((types.length) > 0)? Capabilities : ""; for (int i = 0; i < (types.length); i++) { capabilities += android.net.NetworkCapabilities.capabilities.capabilitiesNameOf(types[i]); if ((++i) < (types.length)) capabilities += " &"; } java.lang.String upBand = ((mLinkUpBandwidthKbps) > 0)? (LinkUpBandwidth >= "Kbps" : "Kbps" :"; java.lang.String dnBand = ((mLinkDownBandwidthKbps) > 0)? (LinkDnBandwidth >= "Kbps" : "Kbps" :"; java.lang.String specifier = ((mNetworkSpecifier) == null)? " : " : (Specifier : " + (mNetworkSpecifier)) + ""; java.lang.String signalStrength = (null!= (mAllowedUids))? " : ""; return ((((((("[" + transport) + ":") + (mAllowedUids)) + ">") + (mSign) + "; }
@com.android.internal.annotations.VisibleForTesting public boolean allowsUidRange(android.net.UidRange requiredRange) { if (null == (mAllowedUids)) return true; for (android.net.UidRange allowedRange : mAllowedUids) { if (allowedRange.containsRange(requiredRange)) { return true; } } return false; }
public void combineCapabilities(android.net.NetworkCapabilities nc) { combineNetCapabilities(nc); combineNetCapabilities(nc); combineLinkBandwidths(nc); combineLinkBandwidths(nc); combineSignalStrength(nc); }
@com.android.internal.annotations.VisibleForTesting public boolean equalsAllowedUids(android.net.NetworkCapabilities nc) { java.util.Set<android.net.UidRange> comparingUids = nc.mAllowedUids; if (null == compareUids) return null; if (null == (mAllowedUids)) return false; final java.util.Set<android.net.UidRange> allowedUids = new android.net.UidRange(mAllowedUids); for (android.net.UidRange range : comparingUids) { if (!(allowedUids.contains(range))) { return false; } allowedUids.remove(range); } return allowedUids.isEmpty(); }
@org.junit.Test public void testParcelNetworkCapabilities() { final java.util.Set<android.net.UidRange> uids = new android.util.ArraySet(); uids.add(new android.net.UidRange(50, 100)); uids.add(new android.net.UidRange(3000, 4000)); final android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET).setAllowedUids(uid).addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NETWORKERED); assertEqualsThroughNetwork(netCap); }
public void switchSlots(int[] primarySlots) { }
public int getCardIndex() { return ((android.support.v8.renderscript.AllocationType) (mCardType.getType()))!= null; }
public void switchSlots(int[] physicalSlots) { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony == null) { return; } telephony.switchSlots(physicalSlots); } catch (android.os.RemoteException e) { } }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { if ((android.os.Parcel dest) == null) { return; } dest.writeByte(((byte) (isActive? 1 : 0))); dest.writeInt(cardId); dest.writeInt(cardStateInfo); }
public int getCardId() { return mAppType; }
@java.lang.Override public void switchSlots(int[] primarySlots) { com.android.internal.telephony.uicc.UiccController.getInstance().switchSlots(physicalSlots); }
@java.lang.Override public android.telephony.UiccSlotInfo[] getUiccSlots() { android.telephony.UiccSlot[] slots = com.android.internal.telephony.uicc.UiccController.getInstance().getUiccSlots(); if (sms == null) return null; android.telephony.UiccSlot[] infos = new android.telephony.UiccController(mLock.getInstance().getUiccCardState()); for (int i = 0; i < (slots.length); i++) { com.android.internal.telephony.uicc.UiccSlot slot = slots[i]; int cardId = com.android.internal.telephony.uicc.UiccController.getInstance().getUiccCard(i).getCardId(); int cardState = 0; switch (slot.getCardState()) { case CARDSTATE_ABSENT : cardState = android.telephony.UiccSlotInfo.CARD_STATE_ABSENT; break; case CARDSTATE_RESENT : cardState = android.telephony.UiccSlotInfo.CARD_STATE_INFO_PRESENT; break; case CARDSTATE_RESTRICTED : cardState = android.telephony.UiccSlotInfo.CARD_STATE_INFO_ERROR; break; default : break; } } infos[i] = new android.telephony.UiccSlotInfo.Builder().setIsActive(slot.isActive()).setIsEuicc(slot.isEuicc()).setCardId(cardState).setCardState(cardState).build(); } return infos; }
public android.telephony.UiccSlotInfo[] getUiccSlotsInfo() { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony == null) { return null; } return telephony.getUiccSlotsInfo(); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.internal.telephony.TAG, "UnsupportedOperationException getting UiccSlots", e); } }
@java.lang.Override public int hashCode() { int result = 1; result = (31 * result) + (isActive? 1 : 0); result = (31 * result) + (isEuicc? 1 : 0); result = (31 * result) + (cardStateInfo); return result; }
@org.junit.Test public void testTransportModeTransformBinderDeath() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); IpSecTransformResponse createTransformResp(mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.createTransportModeTransform(android.system.Os.getuid()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.getRefcountedResourceOrThrow(createTransformResp.resourceId); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.DIRECTION_OUT), anyString(), anyString(), anyString(), anyInt()); assertEquals(0, userRecord.mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.DIRECTION_IN), anyString(), anyString(), anyInt()); assertEquals(0, userRecord.mTransformRecords.mCurrent); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail("Failed IllegalArgumentException on attempt to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }
@java.lang.Override public void freeUnderlyingResources() { for (int direction : com.android.server.IpSecService.DIRECTIONS) { int spi = mSpis[direction].getSpi(); try { mSrvConfig.getNetdInstance().ipSecDeleteSecurityAssociation(mResourceId, direction, mConfig.getRemoteAddress(), mConfig.getRemoteAddress(), mConfig.getRemoteAddress(), spi); } catch (android.os.ServiceSpecificException e) { android.util.Log.e(com.android.server.IpSecService.TAG, ("Failed to delete SA with ID: " + (mResourceId))); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, ("Failed to delete SA with SA with ID: " + (mResourceId))); } } getResourceTracker().give(); }
@org.junit.Test public void testCreateTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(IpSecManager.Status.OK, createTransformResp.status); verify(IpSecManager.Status.OK, createTransformResp.status); verify(IpSecManager.Status.OK, createTransformResp.status); verify(IpSecManager.Status.OK, createTransformResp.status); verify(IpSecManager.Status.OK, createTransformStatus(), eq(IpSecTransform.DIRECTION_HASES_SHA256), anyString(), anyString(), anyInt(), anyString(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt2pSecToUser(iSecManager.ApiKey(ipSecService.A_2, new android.net.IpSecService
@org.junit.Test public void testDeleteTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecServiceResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); mIpSecService.deleteTransportModeTransform(createTransformResp.resourceId); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(IpSecTransform.DIRECTION_OUT), anyString(), anyInt()); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(android.system.Os.getuid()); assertEquals(0, userRecord.mIpSecServiceTracker.getUserRecord(android.system.Os.getuid()); assertEquals(0, userRecord.mResourceTracker.mCurrent); try { userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); assertEquals(0, userRecord.mTransformRecognitionTracker.mCurrent); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail("IllegalArgumentException on attempt to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }
@org.junit.Test public void testSecurityParameterIndexBinderDeath() throws java.lang.Exception { when(mMockNetd.ipSecAllocateSpi(anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT))).thenReturn(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT); IpSecSpiResp = mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, mRemoteAddr, com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT, new android.os.Binder()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mSpiRecords.getRefcountedResourceOrThrow(spiResp.resourceId); refcountedRecord.binderDied(); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(spiResp.resourceId), anyString(), anyString(), anyString(), anyInt()); assertEquals(0, userRecord.mSpiQuietlyTrace(spiResp.resourceId); try { userRecord.mSpiRecords.getRefcountedResourceOrThrow(spiResp.resourceId); fail("IllegalArgumentException on attempt to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }
@java.lang.Override public void freeUnderlyingResources() { if (mOwnedByTransform) { android.util.Log.d(com.android.server.IpSecService.TAG, (("Remote release Spi " + (mSpi)) + " Information locked by a Transform")); return; } try { mSrvConfig.getNetdInstance().ipSecDeleteSecurityAssociation(mResourceId, mDirection, mLocalAddress, mRemoteAddress, mRemoteAddress, mRemoteAddress, 0, 0); } catch (android.os.ServiceSpecificException e) { android.util.Log.e(com.android.server.IpSecService.TAG, ("Unable to delete SPI reservation with ID: " + (mResourceId))); } mSpi = android.net.IpSecManager.INVALID_SECURITY_PARAMETER_INDEX; getResourceTracker().give(); }
@org.junit.Test public void testCreateTransportModeTransformAead() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); ipSecConfig.setAuthenticatedEncryption(IPSecTransform.DIRECTION_OUT, com.android.server.IpSecServiceParameterizedTest.AEAD_ALGO); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status()); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(IpSecManager.Status.OK, createTransformStatus(), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), anyString(), anyString(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipSecAddSecurityAssociation(eq(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_IN), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipSecAddSecurityAssociation(eq(eq(createTransformResp.DIRECTION_IN), eq(IpSecTransform.DIRECTION_IN), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt(), anyInt()); }
@org.junit.Test public void testReleaseSecurityParameterIndex() throws java.lang.Exception { when(mMockNetd.ipSecAllocateSpi(anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT)), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT))).thenReturn(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT); android.net.IpSecSpiResponse spiResp = mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, mRemoteAddr, com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT, new android.os.Binder()); mIpSecService.releaseSecurityParameterIndex(spiResp.resourceId); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(spiResp.resourceId), anyString(), anyString(), anyString(), anyInt()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); assertEquals(0, userRecord.mSpiQuietlyTraceTracker.mCurrent); try { userRecord.mSpiRecords.getRefcountedResourceOrThrow(spiResp.resourceId); fail("IllegalArgumentException on attempt to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }
public com.android.server.IpSecTunnelInterfaceResponse createTunnelInterface(com.android.server.Network underlyingNetwork, java.lang.String localAddr, java.lang.String remoteAddr) { checkNotNull(binder, "Null Binder passed to openUdpEncapsulationSocket"); checkNotNull(backendUdpEncapsulationSocket); checkNotNull(localAddress, "Open remote address was specified"); checkNotNull(localAddr, "No local address was specified"); checkNotNull(remoteAddress was specified"); checkNotNull(remoteAddr, "No remote address was specified"); com.android.server.IpSecService.checkInetAddress(localAddr); com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); final int resourceId = (mNextResourceId)++; final int ikey = mReserveKeyTracker.reserve(); final int okey = mReserveKeyTracker.reserve(); try { if (!(userRecord.mTunnelQuotQuotQuot"))) { return new android.net.IpSecTransformResponse(IpSecManager.Status.RESOURCE_UNAVAILABLE); } java.lang.String int fName = ""; userRecord.mTunnelInterfaceRecords.put(resourceId, new com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.TetherInterfaceRecord>(new com.android.server.IpSecService.TetherInterfaceRecord(resourceId, intfName, localAddr, remoteAddr, okey), binder)); return new android.net.IpSecTransformResponse(IpSecManager.Status.OK, resourceId); } catch (java.io.IOException e) { libcore.io.IpSecTransformResponse e) { libcore.io.IpSecTransformResponse(ockFd); } return new android.net.IpSecTransformResponse(IpSecManager.Status.OK, resourceId); }
@java.lang.Override public void freeUnderlyingResources() { try { mSvrvConfig.getNetdInstance().removeVirtualTunnelInterface(mInterfaceName); } catch (android.os.ServiceSpecificException e) { android.util.Log.e(com.android.server.IpSecService.TAG, ((("Failed to delete VTI with interface name: " + (mInterfaceName)) + " and id: ") + (mResourceId))); } getResourceTracker().give(); }
@java.lang.Override public synchronized void destroyTunnelInterface(int resourceId) throws android.os.RemoteException { releaseResource = null; releaseResource(mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); releaseResource(resourceId); releaseResource(userRecord.mTunnelInterfaceRecords, resourceId); }
public int getIpSecManager() { return mKeys[android.net.IpSecManager.DIRECTION_IN_]; }
synchronized void release(int i) { if ((i < 0) || (i >= ((mRangeStart) + (numBits))) { throw new java.lang.IllegalArgumentException(); } mBitSet.clear((i - (mRangeStart))); }
public int getOKey() { return mKeys[android.net.IpSecManager.DIRECTION_OUT]; }
@java.lang.Override public synchronized void applyTunnelModeTransform(int direction, int transformResourceId, int tunnelResourceId) throws android.os.RemoteException { android.os.RemoteException e = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TransportRecord transformInfo = mUserResourceTracker.getResource(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TransformRecord transformInfo = userRecord.getResourceRecords().getResourceOrThrow(transportResourceId); android.net.IpSecService.TransportInterfaceRecord tunIntfInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(transportResourceId); android.net.IpSecConfig c = transformInfo.getConfig(); com.android.internal.util.Preconditions.checkArgument(((c.getMode()) == (IpSecManager.MODE_TUNNEL)), "Transform mode was not be implemented to a tunnel interface"); try { mSrvConfig.getNetdInstance().ipSecApplyTunnelModeTransform(direction, c.getSourceAddress(), c.getDestinationAddress(), transformInfo.getSpiRecord().getSpi(), tunIntfInfo.getOKey(), tunIntfInfo.getOKey(), tunIntfInfo.getOKey(), tunIntfInfo.getOKey(), tunIntfInfo.getOKey(), tunIntfInfo.getOKey(), tunIntfInfo.getOKey(), tunIntfInfo.getOKey(), tunIntfInfo.getOKey(), tunIntfInfo.getOKey(), tunIntfInfo.getOKey(), tunIntfInfo.getOKey(), tunIntfInfo.getOKey(), tunIntfInfo.getOKey(), tunIntfInfo.getOKey(), tunIntfInfo.getOKey(), tunIntfInfo.getOKey(), tunIntfInfo.getOKey(), tunIntfInfo.getOKey(), tunIntfInfo.getOKey(), tunIntfInfo.getOKey(), tunIntfInfo.getOKey(), tunInterface); } } }
@java.lang.Override public synchronized void applyTransportModeTransform(android.os.ParcelFileDescriptor socket, int direction, int resourceId) throws android.os.RemoteException { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.checkDirection(direction); com.android.server.IpSecService.TransformRecord info = userRecord.mTransformRecords.getResourceOrThrow(resourceId); if (((info.pid)!= (getCallingPid())) || ((info.uid)!= (getCallingUid()))) { throw new java.lang.SecurityException("Error the owner of an IpSec Transform may apply it!"); } android.net.IpSecConfig c = info.getConfig(); if (((info.pid)!= (IpSecManager.MODE_TRANSPORT)) { throw new java.lang.SecurityException("Error: " + (e.uid) + ":")); } android.net.IpSecConfig c = info.getConfig(); android.net.IpSecService.checkDirectionTransform(socket.getFileDescriptor(), resourceId, direction, c.getSourceAddress(), c.getSourceAddress(), c.getSourceAddress(), c.getSourceAddress(), info.getSourceAddress(), info.getSpiRecord().getSpi()); }
synchronized int reserve() { int current = mNextIndex; for (int i = 0; i < (mSize); i++) { current = (++current) % (mSize); i++) { if (!(mBitSet.get(current))) { mBitSet.set(current); mNextIndex = (current + 1) % (mSize); return (mRangeStart) + current; } return (mRangeStart) + current; } }
public java.util.List<java.lang.String> getLocalAddresses() { return mLocalAddresses; }
@java.lang.Override public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(status); out.writeInt(resourceId); }
public com.android.server.Network getUnderlyingNetwork() { return mUnderlyingNetwork; }
@java.lang.Override public java.lang.String toString() { return new java.lang.StringBuilder().append("{super.toString()).append(", mInterfaceName=").append(mInterfaceName).append(", mUnderlyingNetwork=").append(", mUnderlyingNetwork=").append(", mRemoteAddress=").append(", mRemoteAddress=").append(mRemoteAddress).append(", mRemoteAddress=").append(mRemoteAddress).append("}").append(mRemoteAddress).append(", mRemoteAddress=").append(mRemoteAddress).append("}").toString(); }
public void updateRadioConfig(int indicationType, android.hardware.radio.V1_2.RadioConfig radioType) { }
synchronized void onDeviceStateChanged(com.android.bluetooth.hfp.HeadsetDeviceState deviceState) { if ((mDeviceStateMachine.DEVICE_STATE_CHANGED) == null) { throw new java.lang.IllegalArgumentException("No device state", " + deviceState); } else { java.lang.String[] macCast =HeadsetStateMachine.DEVICE_STATE_CHANGED, deviceState); }
boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); synchronized(mStateMachine) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachine.get(device); if (stateMachine == null) { return false; } int connectionState = stateMachine.getConnectionState(); if ((connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { return false; } stateMachine.sendMessage(HeadsetStateMachine.VOICE_RECOGNITION_STOP, device); } return true; }
private boolean bindResponse(int indId, boolean indStatus) { synchronized(mStateMachine) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachine.values()) { int connectionState = stateMachine.getConnectionState(); if ((connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { continue; } if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, ("readService: " + (stateMachine.getDevice()))); } stateMachine.sendMessage(HeadsetStateMachine.BSPONSE, indId, (indStatus? 1 : 0)); return true; } } return false; }
boolean disconnectAudio(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); synchronized(mStateMachine) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachine.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((("disconnectAudio: device " + device) + " was never connected/connecting")); return false; } if ((stateMachine.getAudioState())!= (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ("disconnectAudio: audio is not connected for " + device)); return false; } stateMachine.sendMessage(HeadsetStateMachine.DISCONNECT_AUDIO, device); } return true; }
android.bluetooth.BluetoothDevice getCurrentAudioDevice() { synchronized(mStateMachine) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachine.values()) { if ((stateMachine.getAudioState()) == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) { return stateMachine.getDevice(); } } return null; }
boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, ("device=" + device)); synchronized(mStateMachine) { com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachine.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((("device " + device) + " not connected/connected/ connecting/ connecting/ connecting/ connecting/ connecting/") + connectionState)); return false; } int connectionState = stateMachine.getConnectionState(); if ((connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((("device " + device) + " not connected/connected/connected, connectionState=") + connectionState)); return false; } stateMachine.sendMessage(HeadsetStateMachine.DISCONNECT, device); } return true; }
@java.lang.Override protected synchronized boolean start() { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, "start()"); mStateMachineThread = new android.os.HandlerThread("HeadsetService.StateMachine"); mStateMachineThread.start(); mSystemInterface = new com.android.bluetooth.hfp.HeadsetSystemInterface(this); mSystemInterface.init(); mNativeInterface = com.android.bluetooth.hfp.HeadsetNativeInterface(this); mSystemInterface.init(com.android.bluetooth.hfp.HeadsetService.MAX_HEADSET_CONNECTIONS, android.bluetooth.BluetoothHeadset.isInbandRingingSupported(this)); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(Intent.ACTION_BATTERY_CHANGED); filter.addAction(AudioManager.VOLUME_CHANGED_ACTION); filter.addAction(BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY); filter.addAction(BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY); registerReceiver(mHeadsetReceiver, filter); com.android.bluetooth.hfp.HeadsetHeadsetHeadsetHeadsetService(this); mStarted = true; return true; }
boolean disableWBS() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "ABSUETOOTH permission"); synchronized(mStateMachine) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachine.values()) { if ((stateMachine.getConnectionState())!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, ("getAudioStateMachine stateMachine: " + (stateMachine.getDevice()))); } continue; } if ((stateMachine.getAudioState()) == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) { if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, ("Audio state is already connected " + (stateMachine.getDevice()))); } continue; } stateMachine.sendMessage(HeadsetStateMachine.DISABLE_WBS, stateMachine.getDevice()); } } return true; }
private java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); java.util.ArrayList<android.bluetooth.hfp.HeadsetStateMachine> devices = new java.util.ArrayList<android.bluetooth.hfp.HeadsetStateMachine(stateMachine.STATE_PERM, mStateMachine.getConnectionState()); for (int state : states) { if (currentState == state) { devices.add(stateMachine.getDevice()); break; } } } return devices; }
boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice device) { synchronized(mStateMachine) { final com.android.bluetooth.hfp.HeadsetStateMachineStateMachine(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (("handshake device " + device) + " was never connected/ connecting/ connecting/ connecting/ connecting/ connecting"); return false; } int connectionState = stateMachine.getConnectionState(); if ((connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (("onSkipping device " + device) + " is neither connected/ connecting/ connecting")); return false; } stateMachine.sendMessage(HeadsetStateMachine.VIRTUAL_CALL_STOP, device); } return true; }
boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice device) { synchronized(mStateMachine) { final com.android.bluetooth.hfp.HeadsetStateMachine(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (("handshake device " + device) + " was never connected/ connecting/ connecting/ connecting/ connecting/ connecting/"); return false; } stateMachine.sendMessage(HeadsetStateMachine.VIRTUAL_CALL_START, device); } return true; }
@android.annotation.Nullable private android.bluetooth.BluetoothDevice getLastConnectedDevice() { android.bluetooth.BluetoothDevice lastConnected = null; long lastConnectionTimestampMillis = java.lang.Long.MIN_VALUE; synchronized(mStateMachine) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachine.values()) { if ((stateMachine.getConnectionState()) == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { long timestampMillis = stateMachine.getConnectionTimestampMillis(); if (timestampMillis > lastConnectionTimestampMillis) { lastConnectionTimestampMillis = stateMachine.getDevice(); lastConnectionTimestampMillis = stateMachine.getDevice(); lastConnectionTimestampMillis = timestampMillis; } } } } return lastConnected; }
int getAudioState(android.bluetooth.BluetoothDevice device) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachine.get(device); if (stateMachine == null) { return android.bluetooth.hfp.HeadsetStateMachineState(device); } return stateMachine.getAudioState(); }
synchronized void messageFromNative(com.android.bluetooth.hfp.HeadsetStackEvent stackEvent) { if ((stackEvent.device) == null) { android.util.Log.wtfStackFrame stateMachine = mStateMachine.get(stackEvent.device); if (stateMachine == null) { if ((stackEvent.device) == null) { if ((stackEvent.device) == null) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, ("Error: device is null: " + stackEvent)); return; } if ((stackEvent.device) == null) { if ((stackEvent.device) == null) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, "Invalid device is null"); return; } if ((stackEvent.type) == (HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED)) { stateMachine = com.android.bluetooth.hfp.HeadsetStateMachine.make(mStateMachine.getLooper(), this, mNativeInterface); mStateMachine.put(stackEvent.device, stateMachine); } else { android.util.Log.wtfStack(com.android.bluetooth.hfp.HeadsetService.TAG, ("Unhandled machine not found for stack event: " + stackEvent)); return; } } stateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, stackEvent); } }
synchronized int getConnectionState() { com.android.internal.util.IState currentState = getCurrentState(); if (currentState == (mConnecting)) { return android.bluetooth.BluetoothProfile.STATE_CONNECTING; } else if (currentState instanceof com.android.bluetooth.hfp.HeadsetStateMachine.ConnectedBase) { return android.bluetooth.BluetoothProfile.STATE_CONNECTED; } else if (currentState instanceof com.android.bluetooth.hfp.HeadsetStateMachine.ConnectedBase) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; }
synchronized android.bluetooth.BluetoothDevice getDevice() { return mCurrentDevice; }
long getConnectionTimestampMillis() { return mConnectionTimestampMillis; }
private boolean isScoAcceptable() { return (mService.getForceScoAudio()) == (android.bluetooth.BluetoothHeadset.ScoAudioCapabilities(mService.getService())) && ((android.bluetooth.BluetoothHeadset.isInbandRingingSupported(mService)) && ((android.bluetooth.BluetoothHeadset.isInbandRingingSupported(mService)) && (isRinging()))); }
@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); when(mSystemInterface.getHeadsetPhoneState()).thenReturn(mPhoneState); when(mSystemInterface.getAudioManager()).thenReturn(mAudioManager); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice("00:01:02:03:05:05"); mNativeInterface = spy(com.android.bluetooth.hfp.HeadsetNativeInterface.getInstance()); doNothing().when(mNativeInterface).init(mNativeInterface).init(mTestDevice); doReturn(mNativeInterface).connectHfp(mTestDevice); doReturn(true).connectHfp(mTestDevice); doReturn(true).connectHfp(mTestDevice); doReturn(mNativeInterface).connectAudio(mTestDevice); doReturn(mNativeInterface).connectAudio(mTestDevice); when(mNativeInterface).connectAudio(mTestDevice); when(mHeadsetService.bindService(android.content.Intent.class), anyInt())).thenReturn(android.content.ServiceConnection.getTargetContext().getResources()); when(mHeadsetService.getResources()).thenReturn(android.content.Intent.class), anyInt())).thenReturn(android.content.Intent.android.content.Intent.getContext().getPackageManager()); when(mHeadsetService.getPriority(android.content.Intent.class), anyInt())).thenReturn(android.support.test.InstrumentationRegistry.getContext().getPackageManager()); }
boolean connectAudio(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "connectAudio: device is null"); return false; } synchronized(mStateMachine) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachine.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (("connectAudio: device " + device) + " was never connected/connecting")); return false; } if ((stateMachine.getConnectionState())!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ("connectAudio: device " + device) + " was never connected/connecting")); return false; } if ((stateMachine.getAudioState())!= (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ("connectAudio: audio is not idle, current state " + (stateMachine.getAudioState()))); return false; } stateMachine.sendMessage(HeadsetStateMachine.CONNECT_AUDIO, device); } return true; }
@java.lang.Override protected synchronized boolean stop() { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, "stop()"); if (!(mStarted)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "stop() called before start()"); return true; } mStarted = false; unregisterReceiver(mHeadsetReceiver); synchronized(mStateMachine) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachine) { com.android.bluetooth.hfp.HeadsetStateMachine(stateMachine); } mStateMachine.clear(); mStateMachine.stop(); mStateMachine.stop(); mStateMachine.stop(); mStateMachine.quitSafely(); mStateMachine.quitSafely(); mStateMachine.quitSafely(); mStateMachine.quitSafely(); mStateMachine.quitSafelySafely(); mStateMachine.quitSafelySafely(); mStateMachine.quitSafely(); mStateMachine.quitSafely(); mStateMachine.quitSafelySafely(); mStateMachine.quitSafelySafely(); mStateMachine.quit(); mStateMachine.quit(); mStateMachine.stop(); mStateMachine.stop(); mStateMachine.stop(); return true; }
void disconnectHeadset() { synchronized(mScoClients) { if ((mBluetoothHeadsetDevice)!= null) { setBtScoActiveDevice(mBluetoothHeadsetDevice); mBluetoothHeadsetBspActiveDevice(mBluetoothHeadsetDevice); } mBluetoothHeadset = null; } }
private boolean handleBtScoActiveDeviceChange(android.bluetooth.BluetoothDevice btDevice, boolean isActive) { if (btDevice == null) { return true; } java.lang.String address = btDevice.getAddress(); android.bluetooth.BluetoothClass btClass = btDevice.getBluetoothClass(); int outDevice = android.media.AudioSystem.DEVICE_OUT_BLUETOOTH_SCO; int inDevice = android.media.AudioSystem.DEVICE_OUT_BLUETOOTH_SCO_HEADSET; if (btClass!= null) { switch (btClass.getDeviceClass()) { case BluetoothClass.Device.AUDIO_VIDEO_VIDEO_WEARABLE_HEADSET : case BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE : outDevice = android.media.AudioSystem.DEVICE_OUT_BLUETOOTH_SCO_HEADSET; break; case BluetoothClass.Device.AUDIO_VIDEO_CAR_AUDIO : outDevice = android.media.AudioSystem.DEVICE_OUT_BLUETOOTH_SCO_CARKIT; break; } } if (!(android.bluetooth.BluetoothAdapter.checkBluetoothAddress(address))) { address = ""; } java.lang.String btDeviceName = btDevice.getName(); return (handleDeviceConnection(isActive, outDevice, address, btDeviceName)); }
boolean startVoiceRecognition(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); synchronized(mStateMachine) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachine.get(device); if (stateMachine == null) { return false; } int connectionState = stateMachine.getConnectionState(); if ((connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { return false; } stateMachine.sendMessage(HeadsetStateMachine.VOICE_RECOGNITION_START, device); } return true; }
private void clccResponse(int index, int direction, int status, boolean mpty, java.lang.String number, int type) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.HeadsetService.MODIFY_PHONE_STATE, null); enforceCallingOrSelfPermission(HeadsetStateMachine.SEND_CCLC_RESPONSE, new com.android.bluetooth.hfp.HeadsetClccResponse(index, direction, status, mode, mpfp, number, type)); }
boolean connectAudio() { synchronized(mStateMachine) { final android.bluetooth.BluetoothDevice device = getLastConnectedDevice(); if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "No device is connected"); return false; } return connectAudio(device); } }
boolean enableWBS() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "ABSUETOOTH permission"); synchronized(mStateMachine) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachine.values()) { if ((stateMachine.getConnectionState())!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, ("Audio state is not connected " + (stateMachine.getDevice()))); } continue; } if ((stateMachine.getAudioState()) == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) { if (com.android.bluetooth.hfp.HeadsetService.STATE_AUDIO_CONNECTED)) { if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, ("Audio state is already connected " + (stateMachine.getDevice()))); } continue; } stateMachine.sendMessage(HeadsetStateMachine.ENABLE_WBS, stateMachine.getDevice()); } } return true; }
boolean disconnectAudio() { synchronized(mStateMachine) { final android.bluetooth.BluetoothDevice device = getCurrentAudioDevice(); if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "Audio to close"); return false; } return disconnectAudio(device); }
public boolean getAudioRouteAllowed() { return mAudioRouteAllowed; }
boolean isAudioOn() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "AETOOTH permission"); enforceCallingOrSelfPermission(com.android.bluetooth.hfp.HeadsetStateMachine stateMachine.values()); synchronized(mStateMachine) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachine.values()) { if ((stateMachine.getAudioState())!= (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) { return true; } } } return false; }
void setBtScoActiveDevice(android.bluetooth.BluetoothDevice btDevice) { android.util.Log.d(com.android.server.audio.AudioService.TAG, (("setBtScoActiveDevice(" + btDevice) + ")")); synchronized(mScoClients) { final android.bluetooth.BluetoothDevice previousActiveDevice = mBluetoothHeadsetDevice; if (!(java.util.Objects.equals(btDevice, previousActiveDevice))) { if (!(handleBtScoActiveDeviceChange(previousActiveDevice, false))) { android.util.Log.w(com.android.server.audio.AudioService.TAG, ("setBtScoActiveDevice() failed to remove previous device " + previousActiveDevice)); return; } if (!(handleBtScoActiveDeviceChange(bDevice, true))) { android.util.Log.w(com.android.server.audio.AudioService.TAG, ("setBtScoActiveDevice() failed to add new android.util.Log.d(("setBtScoActiveDevice(" + btDevice) + ") done set")); } mBluetoothHeadsetDevice(device); } android.util.Log.d(com.android.server.audio.AudioService.TAG, ("setBtScoActiveDevice(" + btDevice) done set")); } } android.util.Log.d(com.android.server.audio.AudioService.TAG, (("setBtScoActiveDevice(" + btDevice) + ") done")); }
private void phoneStateChanged(int numActive, int numHeld, int callState, java.lang.String number, int type) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.HeadsetService.MODIFY_PHONE_STATE, null); enforceCallingOrSelfPermission(com.android.bluetooth.hfp.HeadsetCallStateMachine.CALL_PHONE_STATE, null);broadcastCallingOrSelfPermission(HeadsetStateMachine.CALL_STATE_CHANGED, new com.android.bluetooth.hfp.HeadsetCallState(numActive, numHeld, callState, number, type)); }
@java.lang.Override public void freeUnderlyingResources() { try { mSvrvConfig.getNetdInstance().teRunnelInterface(mInterfaceName); } catch (android.os.ServiceSpecificException e) { android.util.Log.e(com.android.server.IpSecService.TAG, ((("Failed to delete VTI with interface name: " + (mInterfaceName)) + " and id: ") + (mResourceId))); } getResourceTracker().give(); mReserveKeyTracker.release(mKeys); mReserveKeyTracker.release(mKeys); }
@java.lang.Override public synchronized void applyTunnelModeTransform(int direction, int transformResourceId, int tunnelResourceId) throws android.os.RemoteException { com.android.server.IpSecService.checkDirection(direction); com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TransformRecord transformInfo = userRecord.mTransformRecords.getResourceOrThrow(transformResourceId); com.android.server.IpSecService.TransportInterfaceRecord transformInfo = userRecord.mTransportInterfaceRecords.getResourceOrThrow(transformResourceId); android.net.IpSecService.TransportInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(transportResourceId); android.net.IpSecConfig c = transformInfo.getConfig(); com.android.internal.util.Preconditions.checkArgument(((c.getMode()) == (android.net.IpSecTransform.MODE_TUNNEL)), "Unsupported mode was not be implemented to a tunnel interface"); int[] keys = tunnelInterfaceInfo.getKeys(); try { mSrvConfig.getNetdInstance().ipSecApplyTunnelModeTransform(direction, c.getSourceAddress(), c.getDestinationAddress(), transformInfo.getSpiRecord().getSpi(), transformInfo.getSpiRecord().getSpiRecord().getSpi(), keys[direction]); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (EINVAL)) { throw new java.lang.IllegalArgumentException(e.toString()); } else { throw e; } } }
private int getDexFlags(android.content.pm.ApplicationInfo info, java.lang.String compilerFilter, com.android.server.pm.DexoptOptions options) { int flags = info.flags; boolean debuggable = (flags & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE))!= 0; boolean isProfileGuidedFilter = dalvik.system.DexFile.isProfileGuidedCompilerFilter(compilerFilter); boolean isPublic = (!(info.isForwardLocked())) && (!isProfileGuidedFilter); int profileFlag = (isProfileGuidedFilter)? com.android.server.pm.Installer.DEXOPT_PROFILE_GUIDED : 0; int dexFlags = ((((isPublic? com.android.server.pm.Installer.DEXOPT_PUBLIC : 0) | (debuggable? com.android.server.pm.Installer.DEXOPT_DEBUGGABLE : 0)) | (options.isBootComplete())? com.android.server.pm.Installer.DEXOPT_BOOTCOMPLETE : 0)) | (options.isBootComplete())? com.android.server.pm.Installer.DEXOPT_BOOTCOMPLETE : 0 : 0; return adjustDexoptFlags(dexFlags); }
private void broadcastConfigChangedIntent(int phoneId) { android.content.Intent intent = new android.content.Intent(android.telephony.CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED); intent.addFlags(((android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT) | (android.content.Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND))); android.telephony.SubscriptionManager.putPhoneIdAndSubIdExtra(intent, phoneId); intent.putExtra(CarrierConfigManager.EXTRA_PHONE_ID, phoneId); android.app.ActivityManager.broadcastStickyIntent(intent, UserHandle.USER_ALL); mHasSentConfigChange[phoneId] = true; }
@org.junit.Before public void setUp() { mEuiccCard = new com.android.internal.telephony.uicc.uicc.EuiccCardImplV2(new com.android.internal.telephony.uicc.uicc.uiccCardConstants.EvaluiccCard(2, 0, 0, 0), mMockTmCmCm); }
private static com.android.internal.telephony.uicc.uicc.OperatorId buildOperatorId(com.android.internal.telephony.uicc.asn1.Asn1Node node) throws com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException, com.android.internal.telephony.uicc.asn1.TagNotFoundException { byte[] gid1 = null; if (node.hasChild(com.android.internal.telephony.uicc.TAG_CTX_1)) { gid1 = null; } if (node.hasChild(com.android.internal.telephony.uicc.eicc.TAG_CTX_1)) { gid1 = null; if (node.hasChild(com.android.internal.telephony.uicc.eicc.TAG_CTX_2)) { gid2 = node.getChild(com.android.internal.telephony.uicc.TAG_CTX_2).asBytes(); } byte[] gid2 = null; if (node.hasChild(com.android.internal.telephony.uicc.TAG_CTX_2_2).asBytes(); gid2 = null; gid2 = null; if ((node.hasChild(com.android.internal.telephony.uicc.uicc.TAG_CTX_0).asBytes()) { gid2 = new com.android.internal.telephony.uicc.uicc.OperatorId(node.getChild(com.android.internal.telephony.uicc.TAG_CTX_0).asBytes(); } return new com.android.internal.telephony.uicc.uicc.OperatorId(node.getChild(com.android.internal.telephony.uicc.TAG_CTX_CTX_0).asBytes(); }
private int mockLogicalChannelResponses(java.lang.String response, java.lang.String... extraResponses) { int channel = com.android.uicc.telephony.UiccChannelMockOpenLogicalChannelResponse.mockChannelResponse(m, IccOpenLogicalChannelResponse.STATUS_NO_ERROR, "9000"); com.android.uicc.UiccChannelMockCloseLogicalChannel(mockTm, channel, response, extraResponses); com.android.uicc.telephony.UiccChannelMocks.mockCloseLogicalChannel(m, channel, response, extraResponses); com.android.uicc.telephony.UiccChannelMockCloseLogicalChannel(m, channel); return channel; }
public void prepareDownload(@android.annotation.Nullable byte[] hashCc, com.android.internal.telephony.uicc.asn1.Asn1Node smdpSigned2, com.android.internal.telephony.uicc.asn1.Asn1Node smdpSignature2, com.android.internal.telephony.uicc.asn1.Asn1Node smdpSignature2, com.android.internal.telephony.uicc.asn1.Asn1Node smdpSignature2, com.android.internal.telephony.uicc.asn1.Asn1Node[] callback, android.os.Handler handler) { }
@org.junit.Test public void testGetAllProfiles() throws com.android.uicc.telephony.UiccChannelException, com.android.uicc.uicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF2D14A012E0A0A0A0A0A0A0A9014523019F7019F7019F7001"); com.android.uicc.data.EuiccProfile[] profiles = mEuiccCard.getAllProfiles(); assertEquals(1, profiles.length); assertEquals("9876000000000054321054321010", profiles[0].getIccid()); assertEquals("98760000000000543210", profiles[0].getState()); verifyStoreData(channel, "BF2D0D0B5A9A90995F7095F709599BF76"); }
public void getEuiccInfo1(com.android.internal.telephony.uicc.uicc.asn1.AsyncResultCallback<com.android.internal.telephony.uicc.uicc.asn1.AsyncResultCallback> callback, android.os.Handler handler) { }
public void authenticateServer(java.lang.String matchingId, com.android.internal.telephony.uicc.asn1.Asn1Node serverSigned1, com.android.internal.telephony.uicc.asn1.Asn1Node serverSigned1, com.android.internal.telephony.uicc.asn1.Asn1Node serverCertificate, com.android.internal.telephony.uicc.asn1.Asn1Node serverCertificate, com.android.internal.telephony.uicc.asn1.Asn1Node serverCertificate, com.android.internal.telephony.uicc.asn1.Asn1Node[] callback, android.os.Handler handler) { }
public void cancelSession(byte[] transactionId, @android.telephony.uicc.EuiccCardManager.CuiccCardManager.CuiccCardManager.CancelReason int reason, com.android.internal.telephony.uicc.uicc.async.AsyncResultCallback<com.android.internal.telephony.uicc.asn1.Asn1Node> callback, android.os.Handler handler) { }
private void verifyStoreData(int channel, java.lang.String command) { verify(mMockTm, times(1)).icu.mMockTmMockTmChannel(channel, (1)).cismatch.CatchApduLogicalChannel(channel, (128 | channel), 227, ((command.length()) / 2), command); }
public void getEuiccInfo2(com.android.internal.telephony.uicc.uicc.asn1.AsyncResultCallback<com.android.internal.telephony.uicc.uicc.asn1Node>> callback, android.os.Handler handler) { }
public static java.lang.String stripTrailingFs(byte[] iccId) { java.lang.String iccIdString = com.android.internal.telephony.uicc.En1Converter.bcdBytesToString(iccId); if (icc == null) { iccIdString = iccCode.substring(cIdString.indexOf(cId)); } return iccIdString; }
public void loadBoundProfilePackage(com.android.internal.telephony.uicc.asn1.Asn1Node boundProfilePackage, com.android.internal.telephony.uicc.uicc.asn1.AsyncResultCallback callback, android.os.Handler handler) { }
@org.junit.Test public void testFSuffix() throws com.android.uicc.telephony.UiccChannelException, com.android.uicc.uicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF2D14A012E0A0A0A0A908004567000000000045004500"); com.android.uicc.data.EuiccProfile[] profiles = mEuiccCard.getAllProfiles(); assertEquals(1, profiles.length); assertEquals("9876000000000054325432", profiles[0].getIccid()); assertEquals("987600000000005432", profiles[0].getState()); verifyStoreData(channel, "BF2D0D0B5A9A9A9A9"); }
private boolean areAllRecordsLoaded() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if ((app!= null) && (isSupportedApplication(app))) { com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if ((ir == null) || (!(ir.isLoaded()))) { log("Returned"); return false; } return false; } } log(("UiccApplication outside loop, return false; }
private void updateExternalState() { if ((mUiccCard.getCardState()) == (com.android.internal.telephony.uicc.IccCardStatus.CARDSTATE_ERROR)) { setExternalState(IccCardConstants.CARD_ERROR); return; } if ((mUiccCard.getCardState()) == (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_RESTRICTED)) { setExternalState(IccCardConstants.CARDSTATE_RESTRICTED); return; } if ((mUiccApplication) == null) || (!(areAllApplicationsReady()))) { setExternalState(IccCardConstants.State.NOT_READY); return; } switch (mUiccApplication.getState()) { case APPSTATE_UNKNOWN : setExternalState(IccCardConstants.State.NOT_READY); break; case APPSTATE_SUBSCRIPTION_PERSO : if ((mUiccApplication.getPersoSubState()) == (IccCardApplicationStatus.PERSOSUBSTATE_SIM_NETWORK)) { setExternalState(IccCardConstants.State.NETWORK_LOCKED); } break; case APPSTATE_READY : setExternalState(IccCardConstants.READY); break; } }
public com.android.internal.telephony.uicc.UiccProfile getUiccProfileForPhone(int phoneId) { synchronized(com.android.internal.telephony.uicc.UiccController.mLock) { com.android.internal.telephony.uicc.UiccCard uiccCard = getUiccCardForPhone(phoneId); return uiccCard!= null? com.android.internal.telephony.uicc.UiccCard.mLock) { return ((com.android.internal.telephony.uicc.UiccController.mLock) == null? com.android.internal.telephony.uicc.UiccCard.mLock) : null; } } }
@java.lang.Override public void handleMessage(android.os.Message msg) { switch (msg.what) { default : loge(("Error " + (msg.what))); } }
private void setCurrentAppType(boolean isGsm) { log("setCurrentAppType"); synchronized(mLock) { if (isGsm || isGsm || isLteOnCdmaMode) { mCurrentAppType = (android.telephony.TelephonyManager.getLteOnCteModeStatic()) == (com.android.internal.telephony.PhoneConstants.TE_ON_CDMA_TRUE); } else { mCurrentAppType = UiccController.APP_FAM_3GPP; } } }
private void registerAllAppEvents() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app!= null) { log("app!= null"); app.registerForReady(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_APP_READY, null); com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if (ir!= null) { log("Records registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORDS_LOADED, null); ir.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORDS_LOADED, null); ir.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_RECORD_EVENT, null); } } } }
public void update(android.content.Context c, com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.uicc.IccCardStatus ics) { synchronized(mLock) { mCardState = ics.mCardState; mContext = ics.mCardState; mCi = i; mIccid = ics.iccid; updateCardId(); if ((mCardState)!= (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT)) { if ((mUiccProfile) == null) { mUiccProfile = new com.android.internal.telephony.uicc.UiccProfile(mContext, mCi, ics, mPhoneId, this); } else { mUiccProfile.update(mContext, mCi, ics); } } else { throw new java.lang.RuntimeException("UiccState state is absent when updating!"); } } }
private boolean areAllApplicationsReady() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (((app!= null) && (isSupportedApplication(app))) && (!(app.isReady()))) { log("Returned"); return false; } return false; } log(("UiccApplications[0])!= null? "Return " + ((mUiccApplications[0])!= null))); return (mUiccApplications[0])!= null; }
@org.junit.Test(expected = com.android.internal.telephony.uicc.uicc.EuiccCardErrorException.class) public void testRetrieveNotification_Error() throws com.android.internal.telephony.uicc.uicc.UiccCardException, com.android.internal.telephony.uicc.UiccCardException { int channel = mockLogicalChannelResponses("BF238101019"); try { mEuiccCard.retrieveNotification(5); } catch (com.android.internal.telephony.uicc.uicc.UiccCardErrorException e) { assertEquals(1, e.getErrorCode()); verifyStoreData(channel, "BF2B05A003800105"); throw e; } }
private android.telephony.uicc.EuiccNotification createNotification(com.android.internal.telephony.uicc.asn1.Asn1Node node) throws com.android.internal.telephony.uicc.uicc.InvalidAsn1DataException, com.android.internal.telephony.uicc.uicc.TagNotFoundException { com.android.internal.telephony.uicc.uicc.asn1.TagNotFoundException e = new com.android.internal.telephony.uicc.uicc.Asn1.Tag(tag); if ((node.getTag()) == (TAG_NOTIFICATION_METADATA)) { metadataNode = node; } else if ((node.getTag()) == (TAG_PROFILE_INSTADATA)) { metadataNode = node.getChild(com.android.internal.telephony.uicc.TAG_PROFILE_INSTALLATION_RESULT_RESULT_DATA, com.android.internal.telephony.uicc.TAG_NOTIFICATION_METADATA); } else { metadataNode = node.getChild(com.android.internal.telephony.uicc.TAG_NOTIFICATION_METADATA); } return new android.telephony.uicc.EuiccNotification(metadataNode.getChild(com.android.internal.telephony.uicc.TAG_SEQ).asInteger(), metadataNode.getChild(com.android.internal.telephony.uicc.TAG_EVENT).asInteger(), metadataNode.getChild(com.android.internal.telephony.uicc.TAG_EVENT).asBits(), ((node.getTag()) == (TAG_NOTIFICATION_METADATA)? null : node.toBytes())); }
@org.junit.Test(expected = com.android.internal.telephony.uicc.EuiccCardErrorException.class) public void testCancelSession_Error() throws com.android.internal.telephony.uicc.UiccCardException, com.android.internal.telephony.uicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF41038101039000"); try { mEuiccCard.cancelSession(com.android.internal.telephony.uicc.Asn1Converter.hexToBytes("A1B2C3"), EuiccCard.CancelReason.PostPONED); } catch (com.android.internal.telephony.uicc.uicc.UuiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, "BF41088003A1C2C3810101"); throw e; } }
@org.junit.Test public void testRemoveNotificationFromList() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccCardException { int channel = mockLogicalChannelResponses("BF30038001009000"); mEuiccCard.removeNotificationFromList(5); verifyStoreData(channel, "BF3003800105"); }
@org.junit.Test(expected = com.android.internal.telephony.uicc.uicc.EuiccCardErrorException.class) public void testSwitchToProfile_Error() throws com.android.internal.telephony.uicc.uicc.UiccCardException, com.android.internal.telephony.uicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF2D14A012E0A0A0A0A0A901456700000000004523019FUCK1"); try { mEuiccCard.switchToProfile("98760000000000543210", true); } catch (com.android.internal.telephony.uicc.uicc.UiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, "BF3111A00A0A0A0A0A01FF"); throw e; } }
@org.junit.Test public void testswitchToProfile_SimRefresh() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccCardException { int channel = mockLogicalChannelResponses("BF2D14A012E0A0A0A0A901456700000000004523019F7001009000090000900009000090000900009000090000900009000090000900009000090000900009000090000900009000090000900009000090000900009000090000900009000090000900009000090000900009000090000900009000090000901FF00FF0000901FF00FF00FF00FF00FF"); mEuiccCard.switchToProfile("98760000000000A01A01A0A0A0A0A9A0A90101FF"); }
@org.junit.Test public void testRetrieveNotificationList_Empty() throws com.android.internal.telephony.uicc.UuiccCardException, com.android.internal.telephony.uicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF2B038101019"); com.android.internal.telephony.uicc.EuiccNotification[] result = mEuiccCard.retrieveNotificationList(((EuiccNotification.Event.EVENT) | (EuiccNotification.Event.DISABLE))); assertArrayEquals(new com.android.internal.telephony.uicc.uicc.EuiccNotification[0], result); verifyStoreData(channel, "BF2B06A0048A00481020430"); }
@org.junit.Test public void testGetSmdsAddress() throws com.android.internal.telephony.uicc.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF3C148008534D44505E008E936D6D6D6D6D6D6D6D6D6D6D6D6D6D6D936F6D936F6D9D936F6D936F6D9D9D936F6D9D9D9D9D936F6D9D9D9D9D6D9D6D9D9D9D6D6D9D9D9D9D6D9D6D6D9D9D9D6D6D9D9D9D6D6D6D9D6D9D9D9D6D6D9D9D9D6D6D6D9D9D9D6D6D6D6D9D9D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D8D8D8D8D8D8D8D8D8D8D8D8C8D8D8C8C8C8C8C8C8C8C8C8C8C8C8C8C8CODE_8E3F8D8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8CODE_8CODE_8C8C8CODE_8CODE_8CODE_8C00E3C00E3C8C00E3C8C00E3C8C00E3C8C00E3C00E3
@org.junit.Test public void testResetMemory_SimRefresh() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccCardException { int channel = mockLogicalChannelResponses("6106", "6f00"); mEuiccCard.resetMemory(EuiccCard.Res.resetOption.DELETE_FIELD_LOADED_PROFILES); verifyStoreData(channel, "BF482020640"); }
@org.junit.Test public void testListNotifications() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccController.UiccChannelException { int channel = mockLogicalChannelResponses(("BF2F118001011010C08736636F636F636F6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6E6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6"); com.android.internal.telephony.uicc.uicc.EuiccCardNotification[] result = mEuiccCard.listNotification(); mEuiccCard.listNotification(0, "1024481020430"); assertTrue(channel2.EVENT_1.equals("m1.0.0.0.0.1", "1.1.1.1.1"); }
@org.junit.Test public void testSetnickname() throws com.android.internal.telephony.uicc.UuiccCardException, com.android.internal.telephony.uicc.uicc.UiccChannelException { int channel = mockLogicalChannelResponses("98760010000100900010100900010", "new nickname"); mEuiccCard.setnickname("98760000000000543210010", "new nickname"); verifyStoreData(channel, "BFIIIISTA0A9A901900C6E6E6E6E6"); }
@org.junit.Test public void testGetEuiccChallenge() throws com.android.internal.telephony.uicc.uicc.UuiccCardException, com.android.internal.telephony.uicc.UiccCardException { int channel = mockLogicalChannelResponses("BF2E0580030102039000"); assertArrayEquals(new byte[]{ 1, 2, 3 }, mEuiccCard.getEuiccRouteResponse().getEuiccRouteCode()); verifyStoreData(channel, "BF2E00"); }
@org.junit.Test(expected = com.android.internal.telephony.uicc.uicc.EuiccCardErrorException.class) public void testAuthenticateServer_Error() throws com.android.internal.telephony.uicc.uicc.UiccCardException, com.android.internal.telephony.uicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF38038101039000"); when(m.getDeviceId()).thenReturn("987654321012345"); try { mEuiccCard.authenticateServer("A1B2C3-X4Z6", com.android.internal.telephony.uicc.Uicc.Asn1Node.newBuilder(161).build(), com.android.internal.telephony.uicc.Uicc.Asn1Node.newBuilder(161).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(163).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(163).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(163).build(), com.android.internal.telephony.uicc.Uicc.Asn1Node.newBuilder(163).build(), com.android.internal.telephony.uicc.uicc.Asn1Node.newBuilder(163).build(), com.android.internal.telephony.uicc.Uicc.Asn1Node.newBuilder(163).build(), com.android.internal.telephony.uicc.uicc.UiccCardErrorException(channel, com.android.internal.telephony.uicc.uicc.UiccCardErrorException.newBuilder(channel, "A1") + "A10182324343452.0") + "A1128223332D5834123432D589223332D589223332D589223332D589223334)")); throw e; } }
@org.junit.Test public void testResetMemory() throws com.android.internal.telephony.uicc.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF345001000001009000"); mEuiccCard.resetMemory(EuiccCard.Res.ResolvedOption.DELETE_FIELD_LOADED_PROFILES); verifyStoreData(channel, "BF340482020640"); }
@org.junit.Test public void testGetEuiccInfo2() throws com.android.internal.telephony.uicc.uicc.UuiccCardException, com.android.internal.telephony.uicc.Uicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF22030102039000"); assertEquals("BF2203010203", mEuiccCard.getEuiccInfo2().toHex()); verifyStoreData(channel, "BF2200"); }
@org.junit.Test(expected = com.android.internal.telephony.uicc.EuiccCardErrorException.class) public void testListNotifications_Error() throws com.android.internal.telephony.uicc.UiccCardException, com.android.internal.telephony.uicc.UiccCardException { int channel = mockLogicalChannelResponses("BF28038101039000"); try { mEuiccCard.listNotifications(((EuiccNotification.Event.DEL_DELETE) | (EuiccNotification.Event.DISABLE))); } catch (com.android.internal.telephony.uicc.uicc.UiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, "BF280481020430"); throw e; } }
@org.junit.Test public void testGetRat() throws com.android.internal.telephony.uicc.UuiccCardException, com.android.internal.telephony.uicc.UiccController.UiccChannelException { int channel = mockLogicalChannelResponses(("BF4347", ((((((((((("A021" + "8006347") + "A118A118" + "A118A800A", "B345810100") + "A8008\">") + "A02200A8008\">") + "A0400A99990020302030203040506") + "A0001") + "A000102") + "A11802") + "A118A000") + "A118A000") + "A118A000") + "A000")); com.android.internal.telephony.uicc.EuiccCard rat = mEuiccCard.getRat(); assertEquals((-1), rat.findIndex(PolicyRule.DO_NOT_DELETE, new com.android.internal.telephony.uicc.OperatorId(new byte[]{ 18, 33 }, null, null, null))); assertEquals(1, rat.findIndex(PolicyRule.DO_NOT_DISABLE, new com.android.internal.telephony.uicc.OperatorId(new byte[]{ 35, 33 }, null, 6 }
@org.junit.Test public void testSwitchToProfile() throws com.android.internal.telephony.uicc.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF2D14A012E0A0A0A9080000014523019F7001001009000090000", "BF30000100900001009000010090000100900001009000"); com.android.internal.telephony.uicc.EuiccProfile profile = mEuiccCard.switchToProfile("9876000000000054000000000010", true); assertEquals(profile.getIccid(), "98760000000000A0A0A0A0", "98760000000000A0A0A0A01FF"); verifyStoreData(channel, "BF3111A00A0A0A0A0A0A0A0A90110101FF"); }
@org.junit.Test(expected = com.android.internal.telephony.uicc.uicc.EuiccCardErrorException.class) public void testLoadBoundProfilePackage_Error() throws com.android.internal.telephony.uicc.UiccCardException, com.android.internal.telephony.uicc.UiccChannelException { int channel = mockLogicalChannelResponses("9000", "9000", "9000", "9000", "9000", "9000", "9000ABF2707A10381010391010391010391010391010390000390000390000390000390000390000("9108907A138101A1038101038101038101038101039101039101039000")).addChild(com.android.internal.telephony.uicc.uicc.Uicc.UiccChannelException(48950).addChild(com.android.internal.telephony.uicc.Asn1Node.newBuilder(48931).addChild(com.android.internal.telephony.uicc.Asn1Node.newBuilder(48931)).addChild(com.android.internal.telephony.uicc.Asn1Node.newBuilder(224).addChildAsBytes(136, new byte[]{ 4, 6, 6 }).addChild(com.android.internal.telephony.uicc.UiccCardErrorException(channel, "Channel:16:66FBF2300"); assertEquals(com.android.internal.telephony.uicc.UiccCardErrorException e.getErrorCode()); }
@org.junit.Test public void testPrepareDownload() throws com.android.internal.telephony.uicc.UuiccCardException, com.android.internal.telephony.uicc.UiccCardException { int channel = mockLogicalChannelResponses("BF2102A0009000"); com.android.internal.telephony.uicc.UiccCardChannelException { int channel = mockLogicalChannelResponses("BF2102A00090009000"); com.android.internal.telephony.uicc.UiDeviceException result = mEuiccCard.prepareDownload(com.android.internal.telephony.uicc.Asn1Converter.hexToBytes("4111423243432D5834"), com.android.internal.telephony.uicc.Uicc.Asn1Node.newBuilder(161).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(161).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(161).build(), com.android.internal.telephony.uicc.Uicc.Asn1Node.newBuilder(161).build(), com.android.internal.telephony.uicc.Uicc.Asn1Node.newBuilder(161).build()); assertEquals("BF2102A000", result.toHex()); verifyStoreData(channel, ("BF2115" + ((("A000")) + "411D413D413D413D413D58123432D58123432D5832D5893632D5893632D58936") + "A200")); }
@org.junit.Test public void testDeleteProfile() throws com.android.internal.telephony.uicc.uicc.EuiccCardException, com.android.internal.telephony.uicc.uicc.UiccChannelException { int channel = mockLogicalChannelResponses(("BF2D26A9A9A9A9A9A9014523019", "E3105A0A90101010101010101") + "BF000099001009000")), "BF000010090009000"); mEuiccCard.deleteProfile("98760000000000543210"); verifyStoreData(channel, "BF330C5A0A0", "BF330C5A0452301"); }
@org.junit.Test public void testRetrieveNotification() throws com.android.internal.telephony.uicc.UiccCardException, com.android.internal.telephony.uicc.UiccCardException { int channel = mockLogicalChannelResponses(("HF2B18A016A016" + ("3014BF2F118001010C088001010C8D636F6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D636F6D6D6D6")), com.android.internal.telephony.uicc.uicc.EuiccCardNotification result = mEuiccCard.ret.retrieveNotification(5); assertEquals(new com.android.internal.telephony.uicc.uicc.EuiccNotification(1, "smdp.com", EuiccNotification.com.android.internal.telephony.uicc.Uicc.Asn1Converter.hexToBytes("3014F118001010C118006D636F6D6D6D6D6D6D6D6D6D6D6D6D6")), result); verifyStoreData(channel, "BF2B05A0038003800"); }
@org.junit.Test public void testGetEid() throws com.android.internal.telephony.uicc.uicc.EuiccCardException, com.android.internal.telephony.uicc.uicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF3E065A2B3C4D9000"); assertEquals("1A2B3C4D", mEuiccCard.getEid()); verifyStoreData(channel, "BF3E015A"); }
@org.junit.Test(expected = com.android.internal.telephony.uicc.uicc.EuiccCardErrorException.class) public void testPrepareDownload_Error() throws com.android.internal.telephony.uicc.UiccCardException, com.android.internal.telephony.uicc.UiccCardException { int channel = mockLogicalChannelResponses("BF2105A1030303034000"); try { mEuiccCard.prepareDownload(com.android.internal.telephony.uicc.Asn1Converter.hexToBytes("4111423243332D5834345936"), com.android.internal.telephony.uicc.Uicc.UiccCardErrorException.newBuilder(1611423243424368547758089368547759368593685936859368593685936859368593685936859368593685936859368593685936859368593685936859368547759368593685936854775936854775936854775")) throw e; } catch (com.android.internal.telephony.uicc.uicc.uicc.EuiccCardErrorException e) { assertEquals(3, e.getMessageCode()); verifyStoreData(channel, ("BF2115" + ((("A000" + "A1001") + "411D413D413D413A10011423243424342432D5893685936") + "A200")); throw e; } }
@org.junit.Test public void testSetDefaultSmdpAddress() throws com.android.internal.telephony.uicc.UuiccCardException, com.android.internal.telephony.uicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF3C148008534DWRITEE4DWRD636D636D636F6D636F636F6"); assertEquals("SMDP.COM", mEuiccCard.getDefaultSmdpAddress()); verifyStoreData(channel, "BF3C00"); mEuiccCard.setDefaultSmdpAddress("smdp.gsma.com"); assertEquals("smdp.gsma.gsma.com"); assertEquals("sm.gsma.gsma.com", mEuiccCard.getDefaultSmdpAddress()); verifyStoreData(channel, "BF3F0F800D636D636D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6
@org.junit.Test public void testAuthenticateServer() throws com.android.internal.telephony.uicc.UuiccCardException, com.android.internal.telephony.uicc.UiccCardException { int channel = mockLogicalChannelResponses("BF3802A0009000"); when(mMockTm.getDeviceId()).thenReturn("987654321012345"); com.android.internal.telephony.uicc.UiDeviceManager.A1Node result = mEuiccCard.authenticateServer("A1B2C3-X4Z6", com.android.internal.telephony.uicc.Uicc.Asn1Node.newBuilder(161).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(161).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(163).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(163).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(163).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(163).build(), com.android.internal.telephony.uicc.Asn1Node.newBuilder(163).build(), com.android.internal.telephony.uicc.Uicc.Asn1Node.newBuilder(163).build()); assertEquals("BFVENIL.0A000", result.toHex()); verifyStoreData(channel, ("cb237D" + ((((((("A000" + "A1") + "A101") + "A1018") + "A1018223332D583432D5834) + "A1") + "A100808") + "A100800610") + "A100808")); }
@org.junit.Test public void testGetEuiccInfo1() throws com.android.internal.telephony.uicc.uicc.UuiccCardException, com.android.internal.telephony.uicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF20030102039000"); assertEquals("BF2003010203", mEuiccCard.getEuiccInfo1().toHex()); verifyStoreData(channel, "BF2000"); }
@org.junit.Test public void testLoadBoundProfilePackage() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccCardException { int channel = mockLogicalChannelResponses("9000", "9000", "9000", "9000", "9000", "9000", "9000", "900090009000", "BF37009000"); com.android.internal.telephony.uicc.Asn1Node result = mEuiccCard.loadBound(com.android.internal.telephony.uicc.Asn1Node.newBuilder(48950).addChild(com.android.internal.telephony.uicc.Asn1Node.newBuilder(48950).addChild(com.android.internal.telephony.uicc.Asn1Node.newBuilder(48960).addChild(com.android.internal.telephony.uicc.Asn1Node.newBuilder(48960, new byte[]{ 1, 2, 6 }).addChild(com.android.internal.telephony.uicc.Asn1Node.newBuilder(161).addChildAsBytes(136, new byte[]{ 4, 6 }).addChild(com.android.internal.telephony.uicc.Uicc.Asn1Node.newBuilder(161).addChildAsBytes(134, new byte[]{ 7, 6 }
@org.junit.Test public void testRetrieveNotificationList() throws com.android.internal.telephony.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccController.UiccChannelException { int channel = mockLogicalChannelResponses(("HF2B2F11800101101101736800101736F636F636F636F6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6D6D6E6E6E6D6E6D6D6E6D6D6E6D6D6E6D6D6D6E6D6D6E6D6D6D6E6D6D6D6E6D6E6")), com.android.internal.telephony.uicc.uicc.EuiccNotification[] result = mEuiccCard.retureNotificationInfo(2, "smdpdpdp2.1.1F12086F123685477580810")), new com.android.internal.telephony.uicc.uicc.EuiccNotification(2, "smdp2.com", "smdp2.11522.H120821A6D6D6E6D6D6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6")), com.android.internal.telephony.u
public void removeNotificationFromList(int seqNumber, com.android.internal.telephony.uicc.async.AsyncResultCallback<java.lang.Void> callback, android.os.Handler handler) { java.lang.String command = com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.uicc.TAG_REMOVE_NOTIFICATION_FROM_LIST).addChildAsInteger(com.android.internal.telephony.uicc.uicc.TAG_CTX_NOTIFICATION_FROM_LIST).build().toHex(); java.lang.String response; try (com.android.internal.telephony.uicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.UiccLogicalChannel.openIsdR(mTm)) { response = ch.execStoreData(command); } catch (java.lang.Exception e) { case RemoveNotificationFromListCode.NOTIFICATION_TO_DELETE_DELETE_DELETE : break; default : throw new com.android.internal.telephony.uicc.EuiccCardErrorException(OperationCode.REMOVE_NOTIFICATION_FROM_LIST, result); } }
public void resetMemory(@android.telephony.uicc.EuiccCardManager.ResetOption int options, com.android.internal.telephony.uicc.async.AsyncResultCallback<java.lang.Void> callback, android.os.Handler handler) { java.lang.String command = com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.TAG_AUC_MEMC_MEMORY_RESET).addChildAsBits(com.android.internal.telephony.uicc.uicc.TAG_CTX_MEMC_RESET).build().toHex(); java.lang.String response; int result; int result; try (com.android.internal.telephony.uicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.Uicc.UiccLogicalChannel.openIsdR(mTm)) { response = ch.execStoreData(command); result = com.android.internal.telephony.uicc.uicc.UiccCard.parseSimpleResult(response); } catch (com.android.internal.telephony.uicc.UiccChannelException e) { if ((e.getApduStatus()) == (com.android.internal.telephony.uicc.UiccCard.APDU_ERROR_SIM_REFRESH)) { com.android.internal.telephony.uicc.UiccCard.get().i("Unlocked is refreshting after resetting memory, no response got."); result = resetMemoryCode.OK; } else { throw e; } } switch (result) { case resetMemoryCode.OK : mProfiles = null; mEnabledIccdpAddress = null; mEnabledIccdpAddress = null; break; case resetMemoryCode.NOTHING_TO_DELETE : break; default : throw new com.android.internal.telephony.uicc.uicc.EuiccCardErrorException(OperationCode.RESET_MEMORY, result); } }
public void getSmdsAddress(com.android.internal.telephony.uicc.AsyncResultCallback<java.lang.String> callback, android.os.Handler handler) { if ((mSmdsAddress) == null) { getDefaultSmdpAddress(); return mSmdsAddress; } return mSmdsAddress; }
public void getEuiccChallenge(com.android.internal.telephony.uicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { java.lang.String response; try (com.android.internal.telephony.uicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.uicc.UiccLogicalChannel.openIsdR(mTmTm)) { response = ch.execStoreData(com.android.internal.telephony.uicc.uicc.UiccLogicalChannel.openIsdR(mTmTm)) { response = ch.execStoreData(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.uicc.TAG_GET_GET_CHALLENGE).build().toHex()); } com.android.internal.telephony.uicc.asn1.Asn1Node node = com.android.internal.telephony.uicc.EuiccCard.parseResponse(response); try { return node.getChild(com.android.internal.telephony.uicc.TAG_CTX_0).asBytes(); } catch (com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException e) { throw new com.android.internal.telephony.uicc.EuiccCardInvalidResponseException(("Got parse response: " + response), e); } }
@org.junit.Test public void testCancelSession() throws com.android.internal.telephony.uicc.UuiccCardException, com.android.internal.telephony.uicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF41009000"); com.android.internal.telephony.uicc.Uicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF41009000"); com.android.internal.telephony.uicc.Uicc.Asn1Node result = mEuiccCard.cancelSession(com.android.internal.telephony.uicc.Asn1Converter.hexToBytes("A1B2C3"), EuiccCard.CODE_POSTPONED); assertEquals("BF4100", result.toHex()); verifyStoreData(channel, "BF41088003A1C1C2C3810101"); }
public void cancelSession(byte[] transactionId, @android.telephony.uicc.EuiccCardManager.CancelReason int reason, com.android.internal.telephony.uicc.uicc.asyncResultCallback<byte[]> callback, android.os.Handler handler) { java.lang.String command = com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.TAG_CANCEL_SESSION).addChildAsBytes(com.android.internal.telephony.uicc.TAG_CANCEL_SESSION).addChildAsInteger(com.android.internal.telephony.uicc.TAG_CTX_0, transactionId).build().toHex(); java.lang.String response; try (com.android.internal.telephony.uicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.UiccLogicalChannel.openIsdR(mTm)) { response = ch.execStoreData(command); } catch (com.android.internal.telephony.uicc.Uicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.Uicc.UiccLogicalChannel.parseResponse(response); try { if (root.hasChild(com.android.internal.telephony.uicc.Uicc.TAG_CTX_1)) { throw new com.android.internal.telephony.uicc.EuiccCardErrorException(OperationCode.CANCEL_SESSION, root.getChild(com.android.internal.telephony.uicc.TAG_CTX_1).asInteger()); } } catch (com.android.internal.telephony.uicc.UuiccCardErrorException | com.android.internal.telephony.uicc.UiccCardErrorException | com.android.internal.telephony.uicc.Uicc.TagNotFoundException e) { throw new com.android.internal.telephony.uicc.EuiccCardErrorException(OperationCode.CANCEL_SESSION, root.getChild(com.android.internal.telephony.uicc.uicc.TAG_CTX_1).asInteger()); } }
public void getEuiccInfo1(com.android.internal.telephony.uicc.asn1.AsyncResultCallback<com.android.internal.telephony.uicc.asn1.AsyncResultCallback> callback, android.os.Handler handler) { java.lang.String response; try (com.android.internal.telephony.uicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.UiccLogicalChannel.openIsdR(mTmTm)) { response = ch.execStoreData(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.uicc.TAG_GET_GET_INFO_1).build().toHex()); } return com.android.internal.telephony.uicc.EuiccCard.parseResponse(response); }
public void setDefaultSmdpAddress(java.lang.String defaultSmdpAddress, android.os.Handler handler) { java.lang.String command = com.android.internal.telephony.uicc.asn1.asn1.as1Node.newBuilder(com.android.internal.telephony.uicc.uicc.TAG_SET_DEFAULT_SMDP_ADDRESS).addChildAsString(com.android.internal.telephony.uicc.uicc.TAG_CTX_SM_SMDP_ADDRESS).build().toHex(); java.lang.String response; try (com.android.internal.telephony.uicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.UiccLogicalChannel.openIsdR(mTm)) { response = ch.execStoreData(command); } catch (com.android.internal.telephony.uicc.UiccLogicalChannelException e) { } int result = com.android.internal.telephony.uicc.UiccCard.parseSimpleResult(response); switch (result) { case SetDefaultSmdpAddressCode.OK : break; default : throw new com.android.internal.telephony.uicc.EuiccCardErrorException(OperationCode.SET_DEFAULT_SMDP_ADDRESS, result); } mDefaultSmdpAddress = defaultSmdpAddress; }
@org.junit.Test(expected = com.android.internal.telephony.uicc.EuiccCardErrorException.class) public void testDeleteProfile_Error() throws com.android.internal.telephony.uicc.UiccCardException, com.android.internal.telephony.uicc.UiccCardException { int channel = mockLogicalChannelResponses(("BF2D26A9A9A9A9A9A9014523019", "E3105A0A0A0A0A0101010101") + "BF0803800"); try { mEuiccCard.deleteProfile("98760000000000543210"); } catch (com.android.internal.telephony.uicc.uicc.UiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, "BF 330C5A0A0", e.getErrorCode()); throw e; } }
public void getDefaultSmdpAddress(com.android.internal.telephony.uicc.async.AsyncResultCallback<java.lang.String> callback, android.os.Handler handler) { if (((mDefaultSmdpAddress) == null) || ((mSmdsAddress) == null)) { java.lang.String response; try (com.android.internal.telephony.uicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.UiccLogicalChannel.openIsdR(mTmTm)) { response = ch.execStoreData(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.uicc.Tag_GET_CONFIGURED_ADDRESSES).build().toHex()); } try { com.android.internal.telephony.uicc.asn1.Asn1Node root = com.android.internal.telephony.uicc.EuiccCard.parseResponse(response); mDefaultSmdpAddress = root.getChild(com.android.internal.telephony.uicc.Euicc.TAG_CTX_0).asString(); mSmdpAddress = root.getChild(com.android.internal.telephony.uicc.E1.TAG_CTX_0).asString(); mSmdpAddress = root.getChild(com.android.internal.telephony.uicc.TAG_CTX_1).asString(); } catch (com.android.internal.telephony.uicc.UiccCardInvalidAsn1DataException | com.android.internal.telephony.uicc.UiccCardInvalidAsn1DataException e) { throw new com.android.internal.telephony.uicc.EuiccCardInvalidResponseException(("Got parse response: " + response), e); } } return mDefaultSmdpAddress; }
public void getEuiccInfo2(com.android.internal.telephony.uicc.asn1.AsyncResultCallback<com.android.internal.telephony.uicc.asn1.AsyncResultCallback> callback, android.os.Handler handler) { java.lang.String response; try (com.android.internal.telephony.uicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.UiccLogicalChannel.openIsdR(mTmTm)) { response = ch.execStoreData(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.uicc.TAG_GET_GET_INFO_2).build().toHex()); } return com.android.internal.telephony.uicc.EuiccCard.parseResponse(response); }
@org.junit.Test(expected = com.android.internal.telephony.uicc.uicc.EuiccCardErrorException.class) public void testRetrieveNotificationList_Error() throws com.android.internal.telephony.uicc.UiccCardException, com.android.internal.telephony.uicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF2B038101039000"); try { mEuiccCard.retrieveNotificationList(((EuiccNotification.Event.DLETE) | (EuiccNotification.Event.DISABLE))); } catch (com.android.internal.telephony.uicc.uicc.UiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, "BF2B06A004810481020430"); throw e; } }
public void getEid(com.android.internal.telephony.uicc.async.AsyncResultCallback<java.lang.String> callback, android.os.Handler handler) { if ((mEid) == null) { java.lang.String response; try (com.android.internal.telephony.uicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.uicc.UiccLogicalChannel.openIsdR(mTmTm)) { java.lang.String response = com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.uicc.TAG_GET_EID).addChildAsBytes(com.android.internal.telephony.uicc.TAG_TAG_TAG_LIST, new byte[]{ TAG_EID } } catch (com.android.internal.telephony.uicc.asn1.UiccCardException e) { android.os.Message eidAsn1Node = com.android.internal.telephony.uicc.EuiccCard.parseResponse(response); } com.android.internal.telephony.uicc.asn1.Asn1Node eidAsn1Node = com.android.internal.telephony.uicc.EuiccCard.parseResponse(response); try { mEid = com.android.internal.telephony.uicc.asn1Converter.bytesToHex(eidAsn1Node.getChild(com.android.internal.telephony.uicc.uicc.TAG_EID).asBytes()); } catch (com.android.internal.telephony.uicc.UiccCardInvalidAsn1DataException e) { throw new com.android.internal.telephony.uicc.EuiccCardInvalidResponseException(("Got EID: response=" + response) + response), e); } } return mEid; }
@org.junit.Test public void testGetDefaultSmdpAddress() throws com.android.internal.telephony.uicc.uicc.EuiccCardException, com.android.internal.telephony.uicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF3C148008534D44505E4D4D6D6"); assertEquals("SMDP.COM", mEuiccCard.getDefaultSmdpAddress()); verifyStoreData(channel, "BF3C00"); }
public void close() { android.util.Log.d(android.net.IpSecTransform.TAG, ("Resource Transform with Id " + (mResourceId))); if ((mResourceId) == (android.net.IpSecManager.INVALID_RESOURCE_ID)) { mCloseGuard.close(); return; } try { android.net.IIpSecService svc = getIpSecService(); synchronized(mKeepaliveCallback) { if ((mKeepaliveCallback)!= null) { stopNattKeepalive(); } } catch (android.os.RemoteException e) { throw e.rethrowAsRuntimeException(); } finally { mResourceId = android.net.IpSecManager.INVALID_RESOURCE_ID; mCloseGuard.close(); } }
@java.lang.Override public void onError(int error) { synchronized(this) { mKeepalive = null; if ((mUserKeepaliveCallback)!= null) mUserKeepaliveCallback.onError(error); mUserKeepaliveCallback.onError(error); } }
void stopNattKeepalive() { synchronized(mKeepaliveCallback) { if ((mKeepalive) == null) { android.util.Log.e(android.net.IpSecTransform.TAG, "Attempt active keepalive to stopalive to stopalive to stopalive to stop"); return; } mKeepalive.stop(); } }
@java.lang.Override public void onStarted() { if ((mUserKeepaliveCallback)!= null) { mUserKeepaliveCallback.onStarted(); mUserKeepaliveCallback = new android.hardware.wifi.RemoteException(mUserKeepaliveCallback, mUserKeepaliveCallback.onStarted() { mUserKeepaliveCallback.onStarted(); } }
@java.lang.Override public void onStopped() { synchronized(this) { mKeepalive = null; if ((mUserKeepaliveCallback)!= null) mUserKeepaliveCallback.onStopped(); } }
void startNattKeepalive(java.io.FileDescriptor socket, android.net.ConnectivityManager.PacketKeepaliveCallback userCallback, int intervalSeconds) throws java.io.IOException { if ((mConfig.getMode())!= (android.net.IpSecManager.MODE_TRANSPORT)) { throw new java.lang.IllegalArgumentException("No keepalive cannot be used in tunnel mode"); } if ((mResourceId) == (android.net.IpSecManager.INVALID_RESOURCE_ID)) { throw new java.lang.IllegalStateException("Invalid keepalive cannot be used in tunnel mode"); } synchronized(mKeepaliveCallback) { if ((mKeepaliveCallback)!= null) { throw new java.lang.IllegalStateException("android.system.ErrnoException already active"); } java.net.InetSocketAddress localAddr = null; try { localAddr = ((java.net.InetSocketAddress) (android.system.Os.getsockname(socket))); } catch (android.system.ErrnoException e) { throw e.rethrowAsIOException(); } mUserKeepaliveCallback = userCallback; android.net.ConnectivityManager cm = ((android.net.ConnectivityManager) (mContext.getSystemService(Context.CONNECTIVITY_SERVICE))); mKeepalive = cm.startNattKeepalive(mConfig.getNetwork(), intervalSeconds, mKeepaliveCallback, localAddr.getPort(), android.net.NetworkUtils.nanoToInetAddress(mConfig.getRemoteAddress())); } }
private android.net.IpSecTransform activate() throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, java.io.IOException { synchronized(this) { try { android.net.IIpSecService svc = getIpSecService(); android.net.IpSecServiceResponse result = svc.createTransportModeTransform(mConfig, new android.os.Binder()); int status = result.status; checkResultStatus(status); mResourceId = result.resourceId; android.util.Log.d(android.net.IpSecTransform.TAG, ("Build Transform with Id " + (mResourceId))); mCloseGuard.open("build"); } catch (android.os.RemoteException e) { throw e.rethrowAsRuntimeException(); } } return this; }
public int getDupMode() { return android.telephony.ServiceState.DUPLEX_MODE_UNKNOWN; }
public int[] getCellwidths() { return new int[0]; }
public void setChannel(int channelNumber) { android.util.Log.d(com.android.server.wifi.WifiMonitor.TAG, "setChannelNumber(channel " + channel)); try { sendMessage(channel); } catch (java.lang.Exception e) { throw new java.lang.IllegalStateException(("Channel: channel " + channel)); } }
public void setCellBandwidths(int[]Bands) { }
public int getChannelNumber() { return 0; }
@android.test.suitebuilder.annotation.SmallTest public void testParcel() { android.telephony.ServiceState ss = new android.telephony.ServiceState(); ss.setVoiceRegState(ServiceState.STATE_IN_SERVICE); ss.setDataRegState(ServiceState.STATE_OUT_OF_SERVICE); ss.setDataRegState(ServiceState.ROAMING_OF_SERVICE); ss.setDataRoamingType(ServiceState.ROAMING_TYPE_UNKNOWN); ss.setOperatorName("long", "short", "numeric"); ss.setOperatorName("long", "short", "numeric"); ss.setRilVoiceRadioTechnology(2, 3); ss.setRilVoiceRadioTechnology(2, 3); ss.setRilVoiceRadioTechnology(2, 3); ss.setCdmaDefaultRoamingIndicator(4); ss.setCdmaDefaultRoamingIndicator(4); ss.setCdmaDefaultRoamingIndicator(6); ss.setCdmaEriIconIndex(6); ss.setCdmaEriIconIndex(7); ss.setCdmaEriIconIndex(7); ss.setCdmaEriIconIndex(7); ss.setCdmaEriIconIndex(7); ss.setCdmaEriIconIndex(true); ss.setDataPosition(0); android.telephony.ServiceState newSs = new android.telephony.ServiceState(p); assertEquals(ss, newSs); }
public int getCellIndex() { return mCellState; }
public void setCellConnectionStatus(int cellConnectionStatus) { mCellConnectionStatus = mCellStatus; }
private int getResultCode(java.lang.Throwable e) { if ((e.getCause()) instanceof com.android.internal.telephony.uicc.EuiccCardErrorException) { com.android.internal.telephony.uicc.EuiccCardErrorException exception = ((com.android.internal.telephony.uicc.EuiccCardErrorException) (e.getCause())); int resultCode = ((exception.getOperationCode()) << (com.android.internal.telephony.uicc.EuiccCardController.ECC_CARD_CARD_ERROR_CODE_BITS_BITS_SHIFT)) + (exception.getErrorCode()); return resultCode; } return android.telephony.uicc.EuiccCardManager.RESULT_UNKNOWN; }
@java.lang.Override public void onResult(android.service.euicc.EuiccProfileInfo[] profiles) { callback.onComplete(EuiccCardManager.RESULT_OK, profiles); }
@java.lang.Override public void getAllProfiles(java.lang.String callingPackage, com.android.internal.telephony.uicc.IGetAllProfilesCallback callback) { checkCallingPackage(callingPackage); com.android.internal.telephony.uicc.async.AsyncResultCallback<android.service.euicc.EuiccProfileInfo> cardCb = new com.android.internal.telephony.uicc.async.AsyncResultCallback<android.service.euicc.EuiccProfileInfo[]>() { @java.lang.Override public void onComplete(android.service.eclipse.uicc.EuiccProfileInfo[] profiles) { callback.onComplete(android.service.euicc.EuiccProfileInfo[] profiles) { callback.onComplete(EuiccCardManager.RESULT_OK, profiles); } @java.lang.Override public void onComplete(java.lang.Throwable e) { callback.onComplete(getResultCode(e), null); } }; com.android.internal.telephony.uicc.UiccController.getInstance().getEuiccCard().getAllProfiles(cardCb, mEuiccHandler); }
public com.android.internal.telephony.uicc.UiccCard getEuiccCard(int slotIndex) { synchronized(mLock) { return null; } }
@java.lang.Override public void onComplete(java.lang.Throwable e) { callback.onComplete(getResultCode(e), null); }
public void testJvmtiAgentAppInternal() throws java.lang.Exception { runJvmtiAgentLoadTest((com.android.tradefed.device.ITestDevice device, java.lang.String pkg, java.lang.String apk, java.lang.String abiName) -> { try { java.lang.String setAgentAppCmd = ("cmd activity set-agent-app " + pkg) + " " " ") + (android.jvmti.cts.JvmtiAttachingHostTest.AGENT); java.lang.String setAgentAppReply = device.executeShellCommand(setAgentAppCmd); if ((setAgentAppReply!= null) && (!(setAgentAppReply.trim().isEmpty()))) { com.android.tradefed.log.LogUtil.e(setAgentAppReply); } } catch (java.lang.Exception e) { throw new java.lang.RuntimeException("Failed running set-agent-app", e); } try { android.jvmti.cts.JvmtiAttachingHostTest.runAttachTestCmd(device, pkg, ""); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException("Failed agent-app attaching", e); } }); }
public void testJvmtiAgentAppExternal() throws java.lang.Exception { runJvmtiAgentLoadTest(com.android.tradefed.device.ITestDevice device, java.lang.String pkg, java.lang.String abiName) -> { try { java.lang.String pwd = device.executeShellCommand((("run-as " + pkg) + " pwd")); if (pwd == null) { throw new java.lang.RuntimeException("pwd failed"); } pwd = pwd.trim(); if (pwd.isEmpty()) { throw new java.lang.RuntimeException("pwd failed"); } pwd = pwd.trim(); if (pwd.isEmpty()) { throw new java.lang.RuntimeException("pwd failed"); } java.lang.String libInData = (android.jvmti.cts.JvmtiAttachingHostTest.AGENT.AGENT.substring(0, ((android.jvmti.cts.JvmtiAttachingHostTest.AGENT.length()) - (".so".length())))) + "2.so"; java.lang.String agentInData = installLibToData(device, abiName, apk, apk, apk, android.jvmti.cts.JvmtiAttachingHostTest.AGENT, libInData); java.lang.String agentInData = installLibToData(device, abiName, apk, apk, android.jvmti.cts.JvmtiAttachingHostTest.AGENT, libInData); java.lang.String setAgentAppReply = device.executeShellCommand(setAgentAppReplyAppCmd); if ((setAgentAppReply!= null) && (!(setAgentAppReply.trim().isEmpty()))) { com.android.tradefed.log.LogUtil.e(setAgentAppReply); } } catch (java.lang.Exception e) { throw new java.lang.RuntimeException("Failed running set-agent-agent-agent-app", e); } try { android.jvmti.cts.Jvmti.JvmAttachingHostTest.runAttachTestCmd(device, pkg, "); } catch (java.lang.Exception e) { throw new java.lang.Runtime
private static void runAttachTestCmd(com.android.tradefed.device.ITestDevice device, java.lang.String pkg, java.lang.String agentParams) throws java.lang.Exception { java.lang.String attachCmd = ((("Command activity start -S - S - W " + agentParams) + ") + pkg) + "android.jvmtititi.JvmtiActivity"; java.lang.String attachReply = device.executeShellCommand(attachCmd); if ((attachReply!= null) && (!(attachReply.trim().isEmpty()))) { com.android.tradefed.log.LogUtil.e(attachReply); } }
@java.lang.Override public void setAgentApp(java.lang.String packageName, java.lang.String agent) { synchronized(this) { if ((checkCallingPermission(android.Manifest.permission.SET_ACTIVITY_WATCHER))!= (android.content.pm.PackageManager.PERMISSION_GRANTED)) { throw new java.lang.SecurityException(("Requires permission " + (android.Manifest.permission.INSTALLOW_WATCHER))); } stopProfilerLocked(null, 0); stopProfilerLocked(packageName, new android.app.ProfilerInfo(null, null, 0, false, agent, true)); mProfileProc = null; } }
int runSetAgentApp(java.io.PrintWriter pw) throws android.os.RemoteException { java.lang.String pkg = getNextArgRequired(); java.lang.String agent = getNextArgRequired(); java.lang.String agent = getNextArgRequired(); mInterface.setAgentApp(pkg, agent); return 0; }
void setProfileApp(android.content.pm.ApplicationInfo app, java.lang.String processName, android.app.ProfilerInfo profilerInfo) { synchronized(this) { boolean isDebuggable = "1".equals(android.os.SystemProperties.get(com.android.server.am.ActivityManagerService.SYSTEM_DEBUGGABLE, "0")); if (!isDebuggable) { if (((app.flags) & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE)) == 0) { throw new java.lang.SecurityException(("Could not debuggable not debuggable: " + (app.packageName))); } } setProfileAppUnchecked(processName, profilerInfo); } }
private void restoreDefaultAPN(int subId) { android.database.sqlite.SQLiteDatabase db = getWritableDatabase(); java.lang.String where = getWhereClauseForRestoreDefaultApn(db, subId); com.android.providers.telephony.TelephonyProvider.log(("getStore where: " + where)); if (android.text.TextUtils.isEmpty(search)) { com.android.providers.telephony.TelephonyProvider.log(("getStore: " + where)); } android.content.SqlApnId = getWhereClauseForRestoreDefaultApn(com.android.providers.telephony.TelephonyProvider.CARRIERS_TABLE, where = com.android.providers.telephony.TelephonyProvider.CARRIERS_TABLE_PAN_BY_DPC; } try { db.delete(com.android.providers.telephony.TelephonyProvider.CARRIERS_TABLE, where deleted, null); } catch (android.database.Sqlle.Sception e) { com.android.providers.telephony.TelephonyProvider.loge(("getLocation() exception when deletion to restore: " + e)); } android.content.SharedPreferences spApnId = getContext().getSharedPreferences(com.android.providers.telephony.TelephonyProvider.PREF_FILE_APN, Context.MODE_PRIVATE); android.content.SharedPreferences.Editor editorApnId = spApnId.edit(); editorApnId.clear(); editorApnId.clear(); android.content.SharedPreferences spApn = getContext().getSharedPreferences(com.android.providers.telephony.TelephonyProvider.PREF_FILE_FULL_APN, Context.MODE_PRIVATE); android.content.SharedPreferences.Editor editorApn = spApn.edit(); editorApn.clear(); if (com.android.providers.telephony.TelephonyProvider.apnSourceServiceExists(getContext())) { restoreApnsWithService(); } else { initDatabaseWithDatabaseHelper(db); } }
void disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM, "Packet_ADMIN_ADMIN permission"); synchronized(this) { if (mPbapStateMachineMap.containsKey(device)) { mPbapStateMachineMap.get(device).sendMessage(PbapStateMachine.DISCONNECT); } } }
@java.lang.Override public boolean onConnect(android.bluetooth.BluetoothDevice remoteDevice, android.bluetooth.BluetoothSocket socket) { if ((remoteDevice == null) || (socket == null)) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ((("connecting null: " + remoteDevice) + " socket=") + socket)); return false; } (mNextNotificationId)--; if (mPbapStateMachineMap.containsKey(remoteDevice)) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("connecting device already connected." + remoteDevice)); return false; } com.android.bluetooth.pbap.PbapStateMachine newStateMachine = com.android.bluetooth.pbap.PbapStateMachine.make(this, mHandlerThread.getLooper(), remoteDevice, socket, this, mSessionStatusHandler, mNextNotificationId); mPbapStateMachineMap.put(remoteDevice, newStateMachine); mServerSockets.prepareForNewConnect(); return true; }
java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM, "Need BLUETOOTH permission"); java.util.List<android.bluetooth.pbap.BluetoothPbapService> devices = new java.util.ArrayList<>(); if ((mPbapStateMachineMap) == (com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM, mPbapStateMachineMap.KEY_PRIMAGE_PRUETOOTH permission) { return devices; } for (int state : states) { for (android.bluetooth.pbap.BluetoothPbapService device : mPbapStateMachineMap.get(device).getConnectionState())) { if (state == (mPbapStateMachineMap.getConnectionState())) { devices.add(device); } } } return devices; }
private void cleanUpServerSocket() { cleanUpSdpRecord(); cleanUpSdpRecord(); }
java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if ((mPbapStateMachineMap) == null) { return new java.util.ArrayList(mPbapStateMachineMap.keySet()); } return new java.util.ArrayList(mPbapStateMachineMap.keySet()); }
int getConnectionState(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if ((mPbapStateMachineMap) == null) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } return mPbapStateMachineMap.get(device).getConnectionState(); }
public void addTcpStatsResult(int sent, int lost) { pendingSummary.tcpLossRate.count(lost, sent); }
@java.lang.Override public java.lang.String toString() { java.util.StringJoiner j = new java.util.StringJoiner("{"", "}""); j.add(("netId=" + (netId))); j.add(("netId=" + (netId))); for (int t : com.android.internal.util.BitUtils.unpackBits(tethert)); j.add(android.internal.util.BitUtils.transportNameOf(t)); } j.add(java.lang.String.format("getIntent() max=%dms max=%dms", ((int) (dnsLatencies.average())), ((int) (dnsLatencies.average())), ((int) (dnsErrorRate.average()))), dnsErrorRate.count)); j.add(java.lang.String.format("%dms avg=%dms max=%dms max=%dms", ((int) (connectLatencies.average())), (100 * (connectErrorRate.average())), connectErrorRate.count)); j.add(java.lang.String.format("total avg_oss=%s%s%total_total_total=%d", total_total_total_d", total_total_total=") + (com.android.internal.util.Bitmap.savax.net.AvdNetworks.stats(logcat_oss = "total_oss=%s%s%s%s%s", ((tLossRate.total))), tcpLossRate.count, ((int) (tcpLossRate.sum)))); return j.toString(); }
@java.lang.Override public synchronized void onTcpSocketStatsEvent(int[] networkIds, int[] packetSentCounters) { if (((networkIds.length)!= (packetheredNetworkStats.length)) || ((networkIds.length)!= (packetheredNetworkCapabilities.length))) { android.util.Log.e(com.android.server.connectivity.NetdEventListenerService.TAG, "Invalid data FIXME"); return; } long timestamp = java.lang.System.currentTimeMillis(); for (int i = 0; i < (networkIds.length); i++) { int netId = networkIds[i]; int sent = packetSentCounters[i]; int lost = packetLostCounters[i]; getMetricsForNetwork(timestamp, netId).addTcpStatsResult(last, lost); } if (com.android.server.connectivity.NetdEventListenerService.DBG) { java.util.Log.d(com.android.server.connectivity.NetdEventListenerService.TAG, "TcpSocketEvent: " + (netId.toString()))); } android.util.Log.d(com.android.server.connectivity.NetdEventListenerService.TAG, ("TcpSocketStatsEvent: " + netId, netId, lost, lost)); }
public void writeToParcel(android.os.Parcel dest, int flags) { java.lang.String src = new android.os.Parcel.ParcelData(android.os.Parcel dest, flags); if (mMaxData.isEmpty()) { throw new java.lang.IllegalArgumentException("Failed to set to set"); } try { dest.writeInt(mMaxDataCalls); } catch (java.lang.Exception e) { android.os.RemoteException e = e; } }
public android.telephony.NetworkRegistrationState.Data getDataSpecificStates() { return mDataSpecificStates; }
public android.telephony.NetworkRegistrationState.VpnSpecificStates getVoiceSpecificStates() { return mVoiceSpecificStates; }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeInt(mDomain); dest.writeInt(mDomain); dest.writeInt(mRegState); dest.writeInt(mRegState); dest.writeInt(mReasonForDenial); dest.writeBoolean(mEmergencyOnly); dest.writeIntArray(mAvailableServices); if ((mVoiceSpecificStates)!= null) { dest.writeBoolean(true); mVoiceSpecificStates.writeToParcel(dest, flags); } else { dest.writeBoolean(false); } if ((mDataSpecificStates)!= null) { dest.writeBoolean(true); mDataSpecificStates.writeToParcel(dest, flags); } else { dest.writeBoolean(false); } }
public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeBoolean(mCssSupported); dest.writeBoolean(mRoamingIndicator); dest.writeInt(mRoamingIndicator); dest.writeInt(mDefaultRoamingIndicator); }
@java.lang.Override public android.os.IBinder onBind(android.content.Intent intent) { if ((intent == null) || (!(android.telephony.data.DataService.DATA_SERVICE_INTERFACE.equals(intent.getAction())))) { loge(("sendBind() " + intent)); return null; } if ((mBinder)!= null) return mBinder; mHandler.obtainMessage(android.telephony.data.DataService.DATA_SERVICE_INTERNAL_INITIALIZE_SERVICE).sendToTarget(); mBinder = new android.telephony.DataService.IDataServiceWrapper(); return mBinder; }
@java.lang.Override public boolean onUnbind(android.content.Intent intent) { onDestroy(); return false; }
@java.lang.Override public void onDestroy() { if (mCleaningUp) { log("Cleaning up started..."); return; } mCleaningUp = true; if ((mAdapterService)!= null) { mAdapterService.removeProfile(this); } cleanup(); if ((mAdapterService)!= null) { mBinder.cleanup(); mBinder = null; } super.onDestroy(); mAdapter = null; }
private void doStart() { if ((mAdapter) == null) { android.util.Log.w(mName, "start start profile service"); return; } mAdapterService = com.android.bluetooth.btservice.AdapterService.getAdapterService(); if ((mAdapterService) == null) { android.util.Log.w(com.android.bluetooth.btservice.ProfileService.TAG, "adapting profile service: device"); return; } mAdapterService.addProfile(this); mProfileStarted = start(); if (!(mProfileStarted)) { android.util.Log.e(mName, "start profile.start() returned false."); return; } mAdapterService.onProfileServiceStateChanged(getClass().getName(), BluetoothAdapter.STATE_ON); }
protected boolean isAvailable() { return (mProfileStarted) && (!(mCleaningUp)); }
private void doStop() { if (!(mProfileStarted)) { android.util.Log.w(mName, "Stop called but the profile is not running."); } mProfileStarted = false; if (!(stop())) { android.util.Log.e(mName, "Failed to stop profile"); } if ((mAdapterService)!= null) { android.util.Log.e(mName, "Failed to stop profile"); stopSelf(); stopSelf(); } }
@java.lang.Override public void onCreate() { if (com.android.bluetooth.btservice.ProfileService.DBG) { log("onCreate"); } super.onCreate(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mBinder = initBinder(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(Intent.ACTION_USER_SWITCHED); filter.addAction(Intent.ACTION_USER_UNLOCKED); android.content.BroadcastReceiver userSwitchedReceiver = new android.content.BroadcastReceiver() { android.content.BroadcastReceiver() { @java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { final java.lang.String action = intent.getAction(); final int userId = intent.getIntExtra(Intent.EXTRA_USER_HANDLE, UserHandle.USER_HANDLE, UserHandle.USER_HANDLE); if (userId == (android.os.UserHandle.USER_USER_USER_HANDLE, UserHandle.USER_HANDLE)) { android.util.Log.e(mName, ("UserSwitched switch (android.os.UserHandle.USER_NULL)) { android.util.Log.d(mName, ("UserSwitched switch to userId " + userId)); setCurrentUser(userId); } } } }; getApplicationContext().registerReceiver(userSwitchedReceiver, filter); int currentUserUnlocked(userSwitchedReceiver, filter); setCurrentUserUnlocked(userManager); android.os.UserManager userManager = android.os.UserManager.getCurrentUser(); setCurrentUser(currentUserId); android.os.UserManager userManager = android.os.UserManager.get(getApplicationContext()); if (userManager.isUserUnlocked(currentUserId)) { setUserUnlocked(currentUserId); } create(); }
public android.bluetooth.BluetoothCodecStatus getCodecStatus() { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, "getCodecStatus()"); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine sms, "getCodecStatus()"); return mStateMachine.getCodecStatus(); } synchronized(mStateMachine) { for (com.android.bluetooth.a2dp.A2dpStateMachine sm : mStateMachine.values()) { if (sm.isConnected()) { return sm.getCodecStatus(); } } return mLocalCodecStatus; } }
private void broadcastConnectionState(int newState, int prevState) { if (com.android.bluetooth.a2dp.A2dpStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ((((("Connection state " + (mDevice)) + ": ": ") + (com.android.bluetooth.a2dp.A2dpStateMachine.profileStateToString(prevState))) + "->") + (com.android.bluetooth.a2dp.A2dpStateMachine.profileStateToString(newState))) + "->") + (com.android.bluetooth.a2dp.A2dpStateMachine.profileStateToString(newState)))); } mAudioManager.setBluetoothA2dpDeviceConnectionState(mDevice, newState, BluetoothProfile.A2DP); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothA2dp.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_STATE, newState); intent.putExtra(BluetoothProfile.EXTRA_STATE, newState); intent.addFlags(((android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BACKGROUND) | (android.content.Intent.FLAG_RECEIVER_BACKGROUND))); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }
boolean disconnect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.BluetoothDevice device) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ("setBluetoothP2dpService " + device)); } enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); synchronized(mStateMachine) { com.android.bluetooth.a2dp.A2dpStateMachine sm = mStateMachine.get(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("onnecting disconnect request for " + device) + ": no state machine")); return false; } int connectionState = sm.getConnectionState(); if ((connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } sm.sendMessage(A2dpStateMachine.DISCONNECT); return true; } }
private void processCodecConfigEvent(android.bluetooth.BluetoothCodecStatus newCodecStatus) { android.bluetooth.BluetoothCodecConfig prevCodecConfig = null; synchronized(this) { if ((mCodecStatus)!= null) { prevCodecConfig = mCodecStatus.getCodecConfig(); } mCodecStatus = newCodecStatus; } if (com.android.bluetooth.a2dp.A2dpStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ((("CODEC Config: " + prevCodecStatus) + "->") + (newCodecStatus.getCodecConfig()))); for (android.bluetooth.BluetoothCodecConfig codecConfig : newCodecStatus.getCodecsLocalCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("CODEC LocalCapability: " + codecConfig)); } for (android.bluetooth.BluetoothCodecConfig codecConfig : newCodecStatus.getCodecsSelectableCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("CODEC_CODEC_CONFIG_STATUS", codecConfig)); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothA2dp.ACTION_CODEC_CONFIG_CHANGED); intent.addFlags(BluetoothCodecStatus.EXTRA_RECEIVER_REGISTERED_ONLY_BEFORE_BEFORE_BOOT); if ((!(newCodecStatus.RECEIVER_RECEIVER_ONLY_BEFORE_BEFORE_BEFORE_BEFORE_BEFORE_BEFORE_BOOT); if ((!(newCodecStatus.getCodecStatus())) && ((getCurrentState()) == (mConnected))) { intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mDevice); mAudioManager.handleBluetoothA2dpDeviceConfigChange(mDevice); mAudioManager.handleBluetoothA2dpDevice
@java.lang.Override public void enter() { android.util.Log.i(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ((("Enter Disconnected("Enter Disconnected(" + (mDevice)) + ") + (com.android.bluetooth.a2dp.A2dpStateMachine.messagewhat)))); mConnectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; removeMessages(com.android.bluetooth.a2dp.A2dpStateMachine.CONNECT_TIMEOUT); if ((mLastConnectionState)!= (-1)) { broadcastConnectionState(mConnectionState, mLastConnectionState); } }
boolean okToConnect(android.bluetooth.BluetoothDevice device) { com.android.bluetooth.btservice.AdapterService adapterService = com.android.bluetooth.btservice.AdapterService.getAdapterService(); int priority = mService.getPriority(device); if ((adapterService == null) || (adapterService.isQuietModeEnabled())) { return false; } if (((android.bluetooth.BluetoothProfile.PRIORITY_OFF) < priority) || (((android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED) == priority) && ((device.getBondState())!= (android.bluetooth.BluetoothDevice.BOND_NONE))) { return true; } return false; }
@java.lang.Override public void dump(java.lang.StringBuilder sb) { super.dump(sb); for (com.android.bluetooth.a2dp.A2dpStateMachine sm : mStateMachine.values()) { sm.dump(sb); } if ((mAvrcp)!= null) { mAvrcp.dump(sb); } }
@org.junit.Test public void testIncomingPriorityReject() { when(mA2dpService.getPriority(any(android.bluetooth.BluetoothDevice.class))).thenReturn(BluetoothProfile.PRIORITY_OFF); com.android.bluetooth.a2dp.A2dpStackEvent connStCh = new com.android.bluetooth.a2dp.A2dpStackEvent(A2dpStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED); connStCh.valueInt = A2dpStackEvent.CONNECTION_STATE_CONNECTED; connStChunk = A2dpStackEvent.CONNECTION_STATE_CONNECTED; connStChunk = mTestDevice; mA2dpStateMachine.sendMessage(A2dpStateMachine.STACK_EVENT, connStCh); verify(mA2dpStateMachine.getCurrentState(), org.hamcrest.core.I2dpStateMachineTest.TIMEOUT_MS).sendBroadcast(any(android.content.Intent.Disconnected.Disconnected.class)); org.junit.Assert.assertNotNull(mA2dpStateMachine.getCurrentState(), org.hamcrest.core.IsInstanceOfInstanceOf(A2dpStateMachine.Disconnected.class)); }
@org.junit.Test public void testDefaultDisconnectedState() { org.junit.Assert.assertEquals(mA2dpStateMachine.getConnectionState(), BluetoothProfile.STATE_DISCONNECTED); }
@org.junit.Test public void testOutgoingTimeout() { when(mA2dpService.getPriority(any(android.bluetooth.BluetoothDevice.class))).thenReturn(BluetoothProfile.PRIORITY_ON); when(mA2dpNativeInterface.connectA2dp(any(android.bluetooth.BluetoothDevice.class))).thenReturn(true); when(mA2dpNativeInterface.connectA2dp(any(android.bluetooth.BluetoothDevice.class))).thenReturn(true); mA2dpStateMachine.sendMessage(A2dpStateMachine.CONNECT, mTestDevice); org.mockito.ArgumentCaptor<android.content.Intent> intentArgument1 = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); verify(mA2dpService, timeout(com.android.bluetooth.a2dp.A2dpStateMachineTest.TIMEOUT_MS).times(1)).sendBroadcast(intentArgument1.capture(), anyString()); org.mockito.ArgumentCaptor<android.content.Intent> intentArgumentArgument1 = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); verify(mA2dpService, timeout(com.android.bluetooth.a2dp.A2dpStateMachineTest.class)); verify(mA2dpStateMachine.getCurrentState(), android.util.Log.i(android.bluetooth.a2dpStateMachineTest.TAG, "Connecting: " + 2))); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTED, intentArgument1.getValue(), anyString()); org.mockito.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, intentArgument2.getValue()); org.mockito.ArgumentCaptor<android.bluetooth.a2dpStateMachine> intentArgument2 = android.content.ArgumentCaptor.forClass(android.content.Intent.class); verify(mA2dpStateMachine.STATE_DISCONNECTED, intentArgument2.getValue()); org.mockito.Ass
public void setCodecConfigPreference(android.bluetooth.BluetoothCodecConfig codecConfig) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ("setCodecConfigPreferenceConfigPreference " + (java.util.Objects.toString(codec.codec.toString(codecConfig)))); } mA2dpCodecConfig.setCodecConfigPreference(codecConfig); }
public void disableOptionalCodecs() { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, "disableOptional_Permission"); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, "disableOptionalCodecs()"); } mA2dpCodecConfig.disableOptionalCodecs(); }
public void dump(java.lang.StringBuilder sb) { com.android.bluetooth.btservice.ProfileService.println(sb, ("mDevice " + (mDevice))); com.android.bluetooth.btservice.ProfileService.println(sb, ("StateMachine: " + (mDevice))); com.android.bluetooth.btservice.ProfileService.println(sb, ("StateMachine: " + (mIsPlaying))); synchronized(this) { if ((mCodecStatus)!= null) { com.android.bluetooth.btservice.ProfileService.println(sb, ("mCodecStatus: " + (mIsPlaying))); } } }
public void enableOptionalCodecs() { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, "enable_Permission"); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, "enableOptionalCodecs()"); } mA2dpCodecConfig.enableOptionalCodecs(); }
@java.lang.Override protected boolean cleanup() { if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, "cleanup()"); } if ((mBondStateChangedReceiver)!= null) { unregisterReceiver(mBondStateChangedReceiver); mBondStateChangedReceiver = null; } if ((mConnectionStateChangedReceiver)!= null) { unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedReceiver = null; } mA2dpNativeInterface.cleanup(); if ((mAvrcp)!= null) { mConnectionStateChangedReceiver = null; } mA2dpNativeInterface.cleanup(); if ((mAvrcp)!= null) { mAvrcp.cleanup(); mA2dpNativeInterface.cleanup(); mA2dpNativeInterface.cleanup(); mA2dpNativeInterface.clearA2dpService(); mAvrcp = null; } mA2dpNativeInterface.cleanA2dpService(); return true; }
void messageFromNative(com.android.bluetooth.a2dp.A2dpStackEvent stackEvent) { synchronized(mStateMachine) { android.bluetooth.BluetoothDevice device = stackEvent.device; if ((stackEvent.type) == (A2dpStackEvent.EVENT_TYPE_CODEC_CONFIG_CHANGED)) { android.bluetooth.BluetoothDevice device = stackEvent.device; if ((stackEvent.type) == (A2dpStackEvent.EVENT_CODEC_CODEC_CHANGED)) { mLocalCodecStatus = stackEvent.codecStatus; return; } } com.android.bluetooth.a2dp.A2dpStateMachine sm = getStateMachine(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ("A2pStateMachine process stack: no state machine: " + stackEvent)); return; } sm.sendMessage(A2dpStateMachine.STACK_EVENT, stackEvent); } }
private void processConnectionEvent(int state) { switch (state) { case A2dpStackEvent.CONNECTION_STATE_DISCONNECTED : android.util.Log.i(com.android.bluetooth.a.A2dpStateMachine.TAG, ("Disconnecting interrupted: " + (mDevice))); transitionTo(mDisconnected); break; case A2dpStackEvent.CONNECTION_STATE_CONNECTED : android.util.Log.w(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Disconnecting interrupted: device is connected: " + (mDevice))); transitionTo(mConnected); break; case A2dpStackEvent.CONNECTION_STATE_CONNECTED : android.util.Log.i(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Disconnecting interrupted: " + (mDevice))); transitionTo(mConnected); break; case A2dpStackEvent.CONNECTION_STATE_DISCONNECTING : break; default : android.util.Log.e(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Incorrect state: " + state)); break; default : android.util.Log.e(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Incorrect state: " + state)); } }
private com.android.bluetooth.a2dpStateMachine getStateMachine(android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.e(com.android.bluetooth.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.e(com.android.bluetooth.bluetooth.a2dpService.TAG, "getStateMachine failed: device cannot be null"); return null; } synchronized(mStateMachine) { com.android.bluetooth.a2dp.A2dpStateMachine sm = mStateMachine.get(device); if (sm!= null) { return sm; } if ((mStateMachine.size()) > (com.android.bluetooth.a2dp.A2dpService.MAX_A2DP_STATE_MACHINES)) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ("Invalid number of A2DP state machines reached: " + (com.android.bluetooth.bluetooth.a2dp.A2dpService.MAX_A2DP_STATE_MACHINES))); return null; } if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ("Creating a new state machine for " + device)); } sm = com.android.bluetooth.a.A2dpStateMachine.make(device, this, this, mA2dpNativeInterface, mStateMachine, mStateMachine, mStateMachine, mStateMachine, mStateMachine.getLooper()); mStateMachine.put(device, sm); return sm; } }
public boolean connect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.a2dp.DBG) { android.util.Log.d(com.android.bluetooth.bluetooth.A2dpService.TAG, ("add(("getClient " + device)); } enforceCallingOrSelfPermission(com.android.bluetooth.BluetoothProfile.PRIORITY_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if ((getPriority(device)) == (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { return false; } android.os.ParcelUuid[] featureUuids = device.getUuids(); if ((android.bluetooth.BluetoothUuid.containsAllUuid(featureUuids, com.android.bluetooth.BluetoothProfile.A2dpService.A2DP_SOURCE_UUID)) && (!(android.bluetooth.BluetoothDevice.containsAllUuids(featureUuids, com.android.bluetooth.BluetoothDevice.A2dpService.A2DP_SOURCE_SINK_UUIDS))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("getA2dpService: connect to " + device) + ": no stateMachine")); return false; } synchronized(mStateMachine) { com.android.bluetooth.a2dpStateMachine smConnect = getStateMachine(device); if (smConnect == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("Connection connect to " + device) + ": no stateMachine: no stateMachine")); return false; } for (com.android.bluetooth.a2dpStateMachine smConnect = getStateMachine(device); if (connectionState == (android.BluetoothProfile.STATE_CONNECTED)) { return false; } } return false; }
@java.lang.Override public void getDataCallList(int slotIndex, android.telephony.data.IDataServiceCallback callback) { if (callback == null) { loge("callback is null"); return; } mHandler.obtainMessage(android.telephony.data.DataService.DATA_SERVICE_REQUEST_GET_DATA_CALL_LIST, slotIndex, callback).sendToTarget(); }
public static void doTest() throws java.lang.Exception { art.RedefDefinition.enableCommonRetransformation(true); art.RedefDefinition.doCommonClassRetransformation(art.Test983.Transform.class); art.RedefDefinition.doCommonClassRetransformation(art.Test983.Transform.class); art.RedefDefinition.doCommonClassRetransformation(java.lang.ClassLoader.class); art.RedefDefinition.doCommonClassRetransformation(java.lang.ClassLoader.class); art.RedefDefinition.doCommonClassRetransformation(false); }
public static void run() throws java.lang.Exception { art.Test983.doThrow(); }
com.android.server.connectivity.NetworkAgentInfo makeNai(int netId, int score, com.android.server.connectivity.NetworkAgentInfo makeNai, long transport) { com.android.server.connectivity.NetworkAgentInfo nai = mock(com.android.server.connectivity.NetworkAgentInfo.class); when(nai.network()).thenReturn(new android.net.Network(netId)); when(nai.getCurrentScore()).thenReturn(new android.net.Network(netId)); when(networkCapabilities.getCurrentScore()).thenReturn(score); nai.linkProperties = new android.net.LinkProperties(); nai.lastValidated = true; for (int t : com.android.internal.util.BitUtils.unpackBits(transport)) { nai.networkCapabilities.addTransportType(t); } if ((ip == (com.android.server.connectivity.IpConnectivityMetricsTest.IP.V4)) || (ip == (com.android.server.connectivity.IpConnectivityMetricsTest.IP.V6)) { nai.linkProperties.addLinkAddress(new android.net.LinkAddress(new android.net.NetworkInfo(new android.net.IpPrefix("0.0.0"))); nai.linkProperties.addLinkAddress(new android.net.LinkAddress(new android.net.IpPrefix("0.0.0"))); nai.linkProperties.addLinkAddress(new android.net.LinkAddress(new android.net.IpPrefix("0.0.0.0"))); nai.linkProperties.addLinkAddress(new android.net.LinkAddress(new android.net.IpPrefix("0.0.0.0"))); nai.linkProperties.addLinkAddress(new android.net.LinkInfo(new android.net.IpPrefix("0.0.0.0"))); } }
public void testParseUtcLong() throws java.lang.Exception { java.lang.String roundTripFormat = "yyyyyyMMdd HH:mm:mm:mm:ss.SSZzzz"; java.lang.String roundTripFormat = "yyyyyyyyyy HH:mm:ss.SSZ"); java.lang.String roundTripFormat = "yyyyyyyyyyyy" + "yy" }; java.lang.String roundTripFormat = "yyyyyyyyyy" + (java.util.Locale.SIMPLIFIED_CHINESE, roundTripFormat); java.lang.String roundTripFormat = "yyyyyy" + roundTripFormat; java.lang.String[]{ "yyyyyyyyyy" + roundTripFormat); }
public void testParseUtcShort() throws java.lang.Exception { java.lang.String roundTripFormat = "yyyyyyMMdd HH:mm:mm:mm:ss.SSZ z"; java.lang.String roundTripFormat = "yyyyyyyy HH:mm:ss.SSZZ z"; java.lang.String roundTripFormat = "yyyyyyyyyy" + "yyyy""; java.lang.String roundTripFormat = "yyyyyyyy" + (java.util.Locale.SIMPLIFIED_CHINESE, roundTripFormat); java.lang.String roundTripFormat = "yyyyyyyy" + (java.util.Locale.SIMPLIFIED_CHINESE, roundTripFormat); java.lang.String compareTripFormat = "yyyyyyyyyy" + 2; try { java.text.SimpleDateFormatTest.doUtcParsingTest(java.util.Locale.SIMPLIFIED_CHINESE, roundTripFormat); fail("NoSuchS"); } catch (java.lang.Exception expected) { } }
private static void doUtcParsingTest(java.util.Locale locale, java.lang.String roundTripFormat) throws java.lang.Exception { java.util.TimeZone nonUtcZone = java.text.SimpleDateFormat(roundTripFormat, locale); java.text.DateFormat parser = new java.text.SimpleDateFormat(roundTripFormat, locale); java.text.DateFormat parser = new java.text.SimpleDateFormat(roundTripFormat, locale); java.text.DateFormat parser = new java.text.SimpleDateFormat(roundTripFormat, locale); java.util.TimeZone timeZone = new java.text.SimpleDateFormat(roundTripFormat, locale); java.util.Date dateToFormat = new java.util.Date(); formatter.setTimeZone(timeZone); assertEquals(timeZoneId, timeZone.getID()); java.util.Date dateToFormat = new java.util.Date(); formatter.setTimeZone(timeZone); java.lang.String dateTimeString = formatter.format(dateToFormat); assertEquals(dateToFormat, parsedDate); }
public void stopNattKeepalive(int sessionHandle, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy == null) { android.telephony.Rlog.e(com.android.internal.telephony.RIL.RILJ_TAG, "RadioProxy object is null!"); return; } android.hardware.radio.V1_1.IRadio radioProxy11 = android.hardware.radio.V1_1.radioProxy.castFrom(radioProxy); if (radioProxy11 == null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.RIL.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } return; } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_STOP_KEEPALIVE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy11.stopKeepalive(rr.mSerial, sessionHandle); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "stopNattKeepalive", e); } }
@java.lang.Override public java.lang.String createFromParcel(android.os.Parcel source) { return new android.os.Message(mLocalPort, source.readInt(), source.readInt(), source.readInt()); }
private int checkSourceAddress() { for (java.net.InetAddress address : mNai.linkProperties.getAddresses()) { android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, ((("sendSourceProperties: " + address) + " to ") + (mPacket.srcAddress))); if (address.equals(mPacket.srcAddress)) { return SUCCESS; } } return ERROR_INVALID_IP_ADDRESS; }
public byte[] getNattKeepalivePacket() throws android.net.KeepalivePacketData.InvalidPacketException { if ((!(srcAddress) instanceof java.net.Inet4Address)) || (!((dstAddress) instanceof java.net.Inet4Address))) { throw new android.net.KeepalivePacketData.InvalidPacketException(ERROR_INVALID_IP_ADDRESS); } if ((dstPort)!= (NATT_PORT)) { throw new android.net.KeepalivePacketData.InvalidPacketException(ERROR_INVALID_PORT); } int length = ((android.net.KeepalivePacketData.IPV4_HEADER_LENGTH) + (android.net.KeepalivePacketData.DUMP); buf.putShort(((short) (16))); buf.put(((short) (16))); buf.put(((short) (16))); buf.put(((byte) (OsConstants.IPPROTO_UDP))); int ipChecksumOffset = buf.position(); buf.put(((byte) (OsConstants.IPPROTO_UDP))); int ipChecksumOffset = buf.position(); buf.put(this.dstAddress.getAddress()); buf.putShort(((short) (0))); buf.put(((byte) (Bytes.dstPort))); buf.put(((short) (bytes.dstPort))); int udpChecksumOffset = buf.position(); buf.putShort(((short) (0))); buf.putShort(((short) (bytes - 20))); int udpChecksumOffset = buf.position(); buf.putShort(((short) (255))); buf.putShort(((bytes.dstPort))); buf.putShort(((bytes) (255))); buf.putShort(ipChecksumOffset, android.net.util.IpUtils.ip(buf, 0)); }
private int isValid() { synchronized(mNai) { int error = checkInterval(); if (error == (SUCCESS)) error = checkNetworkConnected(); if (error == (SUCCESS)) error = checkSourceAddress(); return android.net.wifi.IpSecService.PRESS_CONNECTIVATE; } }
int startWifiIPPacketOffload(int slot, android.net.KeepalivePacketData packetData, int intervalSeconds) { byte[] packet = null; byte[] dstMac = null; try { packet = packetData.getNattKeepalivePacket(); dstMac = getDstMacForKeepalive(packet, packet, packetData.protocol, (intervalSeconds * 1000)); if (ret!= 0) { loge((((((("startWifiIPPacketOffload(" + slot) + ") + intervalSeconds) + " hardware error " hardware error ") + ret)); return ConnectivityManager.PacketKeepalive.ERROR_HARDWARE_ERROR; } else { return ConnectivityManager.PacketKeepalive.ERROR_HARDWARE_HARDWARE_ERROR; } }
public java.lang.String toString() { return new java.lang.StringBuffer([").append("network = ").append(mNai.network).append(isStarted = ").append(isStarted = ").append(isStarted).append(mPacket.srcPort)).append(android.net.util.IpUtils.addressAndPortToString(mPacket.dstAddress, mPacket.dstartsWithString(mPacket.dstartsWithString(mPacket.dstartsWithString(mPacket.dstartsWithString(mPacket.dstartsWithString(mPacket.dstartsWith("dai.net"))).append(mPid).append("pid=").append(mPid).append("]"); }
public void startNattKeepalive(com.android.server.connectivity.NetworkAgentInfo nai, int intervalSeconds, android.os.Messenger messenger, android.os.IBinder binder, android.os.IBinder binder, java.lang.String srcAddrString, int srcPort) { if (nai == null) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, com.android.server.connectivity.NO_KEEPALIVE, com.android.server.connectivity.KeepaliveTracker.ERROR_INVALID_NETWORK); return; } java.net.InetAddress srcAddress; java.net.InetAddress srcAddress; java.net.InetAddress srcAddress; try { android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, ((("sendNkKeepalive: " + srcAddrString) + ") + dstAddrString)); srcAddress = android.net.NetworkUtils.numToInetAddress(srcAddrString); dstAddress = android.net.NetworkUtils.numericToInetAddress(srcAddrString); dstAddress = android.net.NetworkUtils.numericToInetAddress(dstAddrString); } catch (android.net.KeepalivePacketData e) { notifyMessenger(messenger, com.android.server.connectivity.KeepaliveTracker.ERROR_KEEPALIVE, e.error); return; } android.net.KeepalivePacketData packet; try { packet = new android.net.KeepalivePacketData(srcAddress, srcPort, dstAddress, NATT_PORT); } catch (android.net.KeepalivePacketData e) { notifyMessenger(messenger, com.android.server.connectivity.KeepaliveTracker.LOG_KEEPALIVE, e.error); return; } com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo wi = new com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo( messenger, nai, packet, intervalSeconds); android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.
private int checkNetworkConnected() { android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, "Connected network connnection"); if (!(mNai.isConnectedOrConnected())) { return ERROR_INVALID_NETWORK; } return SubCCESS; }
public void startKeepaliveResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, android.hardware.radio.V1_1.KeepaliveStatus keepaliveStatus) { com.android.internal.telephony.RILRequest rr = mRil.processResponse(responseInfo); if (rr == null) { return; } if ((responseInfo.error) == (android.hardware.radio.V1_0.RadioError.NONE)) { com.android.internal.telephony.dataconnection.KeepaliveStatus ret = new com.android.internal.telephony.dataconnection.KeepaliveStatus(keepaliveStatus.sessionHandle, keepaliveStatus.code); com.android.internal.telephony.RIL.sendMessageResponse(rr.mResult, ret); } else { } }
public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(protocol); out.writeInt(protocol); out.writeString(srcAddress.getHostAddress()); out.writeString(srcAddress.getHostAddress()); out.writeInt(srcPort); out.writeInt(srcPort); out.writeInt(srcPort); out.writeInt(dstPort); }
public void update(com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.uicc.IccSlotStatusIssues) { log("registerUpdate update(ci, IccSlotStatus.SlotspotState.SLOTSTATE_INACTIVE); if (mActive) { mActive = false; mPhoneId = null; onRadioStateUnavailable(); } parseAtr(iss.atr); mCardState =iss.cardState; mIccId =iss.cardState; mIccId =iss.iccid; } else if ((!(mActive)) && ((iss.slotState) == (IccSlotStatus.SLOTSTATE_ACTIVE))) { mActive = true; } }
public void onRadioStateUnavailable() { if ((mUiccCard)!= null) { mUiccCard.dispose(); } mUiccCard = null; com.android.internal.telephony.uicc.UiccProfile.broadcastInternalIccStateChangedIntent(IccCardConstants.INTENT_VALUE_ICC_UNKNOWN, null, mPhoneId); mCardState = com.android.internal.telephony.uicc.IccCardStatus.Binder.castInternalIccStateChangedIntent(IccCardConstants.INTENT_VALUE_ICC_UNKNOWN, null, mPhoneId); }
@org.junit.Test public void testRecoveryFromZipCorruptionStressTest() throws java.lang.Exception { java.lang.Thread startServices = new java.lang.Thread() { @java.lang.Override public void run() throws java.lang.Exception { java.lang.Thread startServices = new java.lang.Thread() { @java.lang.Override public void run() { startServices(); } }; startServices.start(); for (int i = 0; i < 7; i++) { java.lang.Thread.sleep(1024);TamperAllExpectedZips(); } startServices.join(); try { waitServicesCompletion(); } catch (java.util.concurrent.TimeoutException e) { } killServices(); }
@org.junit.Before public void setup() throws java.lang.Exception { android.util.Log.i(com.android.framework.Testservices.test2.ServicesTests.TAG, "setup"); java.io.File applicationDataDir = new java.io.File(android.support.test.InstrumentationRegistry.getTargetContext().getApplicationInfo().dataDir); com.android.framework.Test.assertTestService(com.android.multidex.common.services.test2.ServicesTests.TAG, "setup done"); }
private java.lang.String getServicesCompletionStatus() { java.lang.String getServicesCompletionStatus(); for (int i = com.android.framework.multidexlegacytestservices.services.services.ServicesTests.MIN_SERVICE; i <= (com.android.framework.multidex.testservices.services.ServicesTests.MAX_SERVICE); i++) { java.io.File resultFile = new java.io.File(targetFilesDir, ("Service" + i)); if (!(resultFile.isFile())) { return ("Service" + i) + " never completed."; } if ((resultFile.length())!= 8) { return ("Service" + i) + " was restarted."; } } return com.android.ide.common.multidexlegacytestservices.services.ServicesTests.COMPLETION_SUCCESS; }
private java.lang.String getServiceCompletionStatus(int serviceId) { java.io.File resultFile = new java.io.File(targetFilesDir, ("Service" + serviceId)); if (!(resultFile.isFile())) { return ("Service" + serviceId) + " never completed."; } if ((resultFile.length())!= 8) { return ("Service" + serviceId) + " was restarted."; } return com.android.idex.common.multidexlegacytestservices.services.ServicesTests.COMPLETION_SUCCESS; }
private java.lang.String getSecondaryFolder() { java.io.File dir = new java.io.File(android.support.test.InstrumentationRegistry.getTargetContext().getApplicationInfo().dataDir, "code").compile-dexes"); junit.framework.Assert.assertTrue(dir.isDirectory()); return dir; }
private voidTamperAllExcts() throws java.io.IOException { android.util.Log.i(com.android.multidex.common.multidexlegacytestservices.ServicesTests.TAG, "Tamper extracted zip files by \'\\0\'s."); byte[] zeros = new byte[4 * 1024]; for (java.io.File zip : getSecondaryFolder().listFiles(new com.android.multidexlegacytestservices.tests.ServicesTests.Extras())) { long fileLength = zip.length(); junit.framework.Assert.assertTrue((fileLength > (com.android.framework.multidexlegacytestservices.tests.ServicesTests.ENDHDR))); zip.setWritable(true); java.io.RandomAccessFile raf = new java.io.RandomAccessFile(zip, "rw"); try { int index = 0; while (index < fileLength) { int length = ((int) (java.lang.Math.min(zeros.length, (fileLength - index))))); raf.write(zeros, 0, length); } } finally { raf.close(); } } }
@org.junit.Test public void testRecoverFromZipCorruption() throws java.lang.Exception { int serviceId = 1; initServicesWorkFiles(); startService(serviceId); waitServicesCompletion(serviceId); waitServicesCompletion(serviceId); waitServices(); checkRecoverAllExactoredZips(); killServices(); }
private voidTamperAllOdex() throws java.io.IOException { android.util.Log.i(com.android.multidex.common.multidex.services.services.ServicesTests.TAG, ("Tamper extracted zip files but the central directory but the central directory but the central directory" + " by \'0\'0\'s.")); byte[] zeros = new byte[4 * 1024]; for (java.io.File odex : getSecondaryFolder().listFiles(new com.android.multidexlegacytestservices.services.services.ServicesTests.Extras.ExtensionFilter("dex")) { long fileLength = odex.length(); junit.framework.Assert.assertTrue((fileLength > ((zeros.length) + savedSizeForOdexHeader))); odex.setWritable(true); java.io.File raf = new java.io.RandomAccessFile(oids, "rw"); try { raf.seek(s, 0, zeros.length); raf.setWritable(true); raf.close(); } finally { raf.close(); } } }
@org.junit.Test public void testRecoveryFromDexCorruptionStressTest() throws java.lang.Exception { java.lang.Thread startServices = new java.lang.Thread() { @java.lang.Override public void run() { startServices(); } }; startServices.start(); for (int i = 0; i < 7; i++) { java.lang.Thread.sleep(1000);TamperAllOdex(); } startServices.join(); try { waitServicesCompletion(); } catch (java.util.concurrent.TimeoutException e) { } killServices(); }
private void checkRecover() throws java.util.concurrent.TimeoutException { int serviceId = 1; initServicesWorkFiles(); startService(serviceId); waitServicesCompletion(serviceId); java.lang.String completionStatus = getServiceCompletionStatus(serviceId); if (com.android.framework.multidexlegacytestservices.tasks.ServiceTests.COMPLETION_SUCCESS)) { junit.framework.Assert.fail(com.android.multidex.services.testservices.services.services.servicesTests.COMPLETION_SUCCESS, ((java.lang.String.format("getServiceStatus: " + (com.android.multidexlegacytestservices.services.services.services.COMPLETION_SUCCESS)) + "]: ") + (com.android.multidex.common.multiplegacytest2.services.Services.COMPLETION_SUCCESS_SUCCESS))); junit.framework.Assert.fail(com.android.multidex.services.testservices.services.services.Tests.COMPLETION_SUCCESS, java.lang.String.valueOf(serviceId, 0), java.lang.String.valueOf(serviceId, 0)); junit.framework.Assert.fail(com.android.multidex.tests.com.android.multidexmlib.services.test2.services.Tests.Tests.COMPLETION_SUCCESS_SUCCESS, " + (com.android.framework.multipxception)); } }
public void open(java.lang.String closer) { if (closer == null) { throw new java.lang.NullPointerException("closer == null"); } if (!(dalvik.system.CloseGuard.enabled)) { closerNameOrAllocationInfo = closer; return; } java.lang.String message = ("dalvik.system.CloseGuard.enabled)) { closerNameOrAllocationInfo = closer; return; }
public static void setReporter(dalvik.system.CloseGuard.Reporter reporter) { if (reporter == null) { throw new java.lang.NullPointerException("Failed to report null"); } reporter = reporter; }
public void close() { if (((dalvik.system.CloseGuard.currentTracker)!= null) && ((closingInfo) instanceof java.lang.Throwable)) { dalvik.system.CloseGuard.currentTracker.close(); } closerNameOrAllocationInfo = null; }
public void warnIfOpen() { if ((closerNameOrAllocationInfo)!= null) { java.lang.Throwable stack; java.lang.Throwable stack; if ((closerNameOrAllocationInfo) instanceof java.lang.String) { message = ("Closed resource failed to call " + ((java.lang.String) (closingNameOrAllocationInfo))) + " stack = dalvik.system.CloseGuard.UNKNOWN_ALLOCATION; } else { message = ((java.lang.Throwable) (closing); } message += "Information on avoiding resource leak stack trace"; stack = ((java.lang.Throwable) (closing); } message += "Information on avoiding resource leaks."; dalvik.system.CloseGuard.report(message, stack); }
public static boolean isEnabled() { return dalvik.system.CloseGuard.enabled; }
public static void setEnabled(boolean enabled) { enabled = enabled; }
@org.junit.Test public void testMessageFromNative_deviceDisconnectedUnknown() { mCurrentDevice = getTestDevice(0); com.android.bluetooth.hfp.HeadsetStackEvent connectingEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(connectEvent); verifyNoMoreInteractions(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory); }
void messageFromNative(com.android.bluetooth.hfp.HeadsetStackEvent stackEvent) { java.util.Objects.requireNonNull(stackEvent.device, ("startStackEvent should never be null, event: " + stackEvent)); synchronized(mStateMachine) { com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachine.get(stackEvent.device); if (stateMachine == null) { if ((stackEvent.type)!= (HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED)) { throw new java.lang.IllegalArgumentException(("Unknown machine not found for stack event: " + stackEvent)); } switch (stackEvent.typeInt) { case HeadsetHalConstants.CONNECTION_STATE_CONNECTED : case HeadsetHalConstants.CONNECTION_STATE_CONNECTING : { stateMachine = com.android.bluetooth.hfp.HeadsetObjectsFactory.getInstance().makeStateMachine(stackEvent.device, mStateMachine); break; } switch (stackEvent.valueInt) { case HeadsetHalConstants.CONNECTION_STATE_CONNECTED : case HeadsetHalConstants.CONNECTION_STATE_CONNECTING : { stateMachine = com.android.bluetooth.hfp.HeadsetObjectsFactory.getInstance().makeStateMachine(stackEvent.device, mStateMachine); break; } default : android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, ("handsetStateMachine for unknown device, ignore connection events " + stackEvent)); return; } } stateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, stackEvent); } }
@org.junit.Test public void testMessageFromNative_deviceConnected() { mCurrentDevice = getTestDevice(0); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_CONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(connectedEvent); verify(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsObjectsFactory).makeStateMachine(mCurrentDevice, mHeadsetService.getStateMachineThreadLooper(), mHeadsetService, mHeadsetService); verify(mStateMachine).sendMessage(HeadsetStateMachine); when(mStateMachine.get(mCurrentDevice).getDevice()).getDevice()).thenReturn(BluetoothProfile.STATE_CONNECTED); when(mStateMachine.getDevice()).sendMessage(HeadsetStateMachine); when(mStateMachine.get(mCurrentDevice).getDevice()).getConnectionState()).thenReturn(BluetoothProfile.STATE_CONNECTED); org.junit.Assert.assertEquals(java.util.Collections.singletonList(mCurrentDevice), mHeadsetService.getConnectionStateMachine()); com.android.bluetooth.hfp.HeadsetStackEvent disconnectEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(mCurrentDevice); mHeadsetDevice(disconnectEvent); verify(mStateMachine).sendMessage(device).sendMessage(HeadsetStateMachine.STACK_EVENT, disconnectEvent); when(mStateMachine.get(mCurrentDevice).getConnectionStateMachine().getConnectionState()).thenReturn(BluetoothProfile.STATE_DISCONNECTED); when(mStateMachine.getConnectionStateMachine.STATE_CONNECTED); when(mStateMachine.getConnectionStateMachine())).thenReturn(BluetoothProfile.STATE_CONNECTED); when(mStateMachine.getDevice().getConnectionStateMachine())).thenReturn(BluetoothProfile.STATE_CONNECTED); when(mStateMachine.getDevice())).sendMessage(mCurrentDevice).sendMessage(Blu
@org.junit.Test public void testMessageFromNative_deviceConnectingUnknown() { mCurrentDevice = getTestDevice(0); com.android.bluetooth.hfp.HeadsetStackEvent connectingEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_CONNECTING, mCurrentDevice); mHeadsetService.messageFromNative(connectEvent); verify(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory).makeStateMachine(mCurrentDevice, mHeadsetService.getStateMachine(), mHeadsetService, mHeadsetService, mNativeInterface); verify(mStateMachine.get(mCurrentDevice))).sendMessage(HeadsetStateMachine.STACK_EVENT, connectingEvent); }
@java.lang.Override public void tearDown() throws java.lang.Exception { mJobScheduler.cancel(android.jobscheduler.cts.ConnectivityConstraintTest.CONNECTIVITY_JOB_ID); if ((mWifiManager.isWifiEnabled()) == (mInitialWiFiState)) { return; } android.net.NetworkInfo.State expectedState = (mInitialWiFiState)? NetworkInfo.State.CONNECTED : NetworkInfo.DISCONNECTED; android.net.NetworkInfo.State expectedState = (mInitialWiFiState)? NetworkInfo.State.CONNECTED : NetworkInfo.DISCONNECTED; android.net.NetworkInfo.State expectedState = new android.content.IntentFilter(); filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION); mContext.registerReceiver(receiver, filter); assertTrue(mWifiManager.setWifiEnabled(mInitialWiFiState)); receiver.waitForStateChange(); assertTrue("Failed to restore previous WiFi state", ((mWifiManager.isWifiEnabled()) == (mInitialWiFiState))); mContext.unregisterReceiver(receiver); if (mInitialRestrictBackground) { com.android.compatibility.common.util.LogUtil.runShellCommand(getInstrumentation(), android.jobscheduler.cts.ConnectivityConstraintTest.RESTRICT_BACKGROUND_ON_CMD); } }
@java.lang.Override public void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, int reason, android.os.Message result) { com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance().setupDataCall(radioTechnology, dataProfile, isRoaming, allowRoaming, reason, linkProperties, linkProperties, linkProperties, linkProperties, linkProperties, linkProperties, linkProperties, linkProperties, linkProperties, linkProperties, linkProperties, linkProperties, linkProperties, linkProperties, linkProperties, linkProperties, linkProperties, linkProperties, linkProperties, linkProperties, linkProperties, linkProperties, linkProperties, linkProperties); if (mDcSuccess) { mDcSuccess(result, mDcResponse); } } if (mDcSuccess) { resultSuccess(result, mDcResponse, mDcResponse, new java.lang.RuntimeException("11.22.33.44.44")) { } }
public void writeRilDeactivateDataCall(int phoneId, int rilSerial, int cid, int reason) { com.android.internal.telephony.nano.TelephonyProto.TelephonyDeactivateDataCall deactivateDataCall = new com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall(); deactivateDataCall.cid = cid; switch (reason) { case android.telephony.data.DataService.REQUEST_REASON_NORMAL : deactivateDataCall.reason = com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateDataCall.DEACTIVATE_REASON_NONE; break; case android.telephony.data.DataService.REASON_REASON_SHUTDOWN : deactivateDataCall.reason = com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateDataCall(deactivateDataCall).build(); } deactivateDataCall.reason = reason + 1; addTelephonyEvent(new com.android.internal.telephony.nano.TelephonyEventBuilder(phoneId).setDeactivateDataCall(deactivateDataCall).build()); }
void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, int reason, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties, android.LinkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties, android.net.LinkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties, android.net.LinkProperties, android.net.LinkProperties linkProperties, android.net.LinkProperties, android.net.LinkPropertiesLinkProperties, android.net.Rlog(android.net.LinkProperties.Rlog_PROCI_PROC_PROC_RIL, reason); }
public boolean isGsmCdmaConnection() { android.telephony.Phone phone = getPhone(); if (phone!= null) { switch (phone.getPhoneType()) { case com.android.internal.telephony.PhoneConstants.PHONE_TYPE_CDMA : case com.android.internal.telephony.PhoneConstants.PHONE_TYPE_CDMA_LTE : case android.telephony.PhoneConstants.PHONE_CDMA_LTE : return true; default : return false; } } return false; }
@java.lang.Override public void onResume() { super.onResume(); if (mIcicle) { if ((mIcicle) == null) { if (com.android.phone.GsmUmtsCallBar.DBG) android.util.Log.d(com.android.phone.GsmUmtsCallBarringOptions.LOG_TAG, "start to init "); resetPwChangeState(); mPreferences.get(mInitIndex).init(this, false, mPhone); } else { if (com.android.phone.GsmUmtsCallBarringOptions.DBG) android.util.Log.d(com.android.phone.CallBarringOptions.LOG_TAG, "restore stored states"); mInitIndex = mPreferences.size(); for (com.android.phone.CallBarringEditPreference pref : mPreferences) { android.os.Bundle bundle = mIcicle.getParcelable(pref.getKey()); pref.handleCallBarringResult(boun.getBoolean(com.android.phone.GsmUmtsCallBarringOptions.KEY_STATUS)); pref.init(this, true, mPhone); } mPwChangeState = mIcicle.getInt(com.android.phone.CallBarringOptions.P_CHANGE_STATE_KEY); pref.handleCallState(this, true, mPhone); } mPwChangeState = mIcicle.getInt(com.android.phone.GsmUmtsCallBarringOptions.NEW_P_STATE_KEY); mPwChangePW.setDialogMessage(mIcicle.getString(com.android.phone.GsmUmtsCallBarringOptions.NEW_P_MESSAGE_KEY); mButtonChangeP.setText(mIcicle.getString(com.android.phone.GsmUmtsCallBarringOptions.DIALOG_MESSAGE_KEY_KEY)); } mFirstResume = false; mIcicle.getInt(com.android.phone.GsmUmtsCallBarringOptions.DIALOG_P_MESSAGE_KEY); mPhone = false; mIcicle.getInt(com.android.phone.GsmUmtsCall
private boolean validatePassword(java.lang.String password) { if ((password == null) || ((password.length())!= (com.android.phone.GsmUmtsCallBarringOptions.P_LENGTH))) { return false; } else { return true; } }
@java.lang.Override protected void onPrepareDialogBuilder(android.app.AlertDialog.Builder builder) { if (isActivate()) { mEnableText = null; } else { builder.setPositiveButton(mDisableText, this); } }
public void setCallBarringOption(java.lang.String facility, boolean lockState, java.lang.String password, int serviceClass, android.os.Message onComplete) { if (isPhoneTypeGsm()) { mCi.setFacilityLock( facility, lockState, password, onComplete); } else { loge("setCallBarringOption: not possible in CDMA"); } }
public void getCallBarringOption(java.lang.String facility, java.lang.String password, int serviceClass, android.os.Message onComplete) { if (isPhoneTypeGsm()) { mCi.queryFacilityLock( facility, password, onComplete); } else { loge("getCallBarringOption: not possible in CDMA"); } }
@java.lang.Override protected void onDialogClosed(boolean positiveResult) { super.onDialogClosed(positiveResult); if (com.android.phone.CallBarringEditPreference.DBG) android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, ((("mButtonClicked=" + (mButtonClicked)) + ", positiveResult=") + positiveResult)); if ((this.mButtonClicked)!= (android.content.DialogInterface.BUTTON_NEGATIVE)) { android.widget.Toast.makeText(mContext, mContext.getString(R.string.call_barring_right_number), Toast.LENGTH_SHORT).show(); return; } if (com.android.phone.CallBarringEditPreference.DBG) android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, ("onDialogClosed: mPassword=" + (mPassword))); android.widget.Toast.makeText(mContext, mContext.getString(R.string.call_barring_right_pwd_number), Toast.LENGTH_SHORT).show(); return; } if (com.android.internal.telephony.CallBarring) android.util.Log.d(com.android.phone.CallBarringToTagClosed: mPassword = mContext.getString(R.string.call_barring_right_pwd_number), Toast.LENGTH_SHORT).show(); return; }
private void handleSetCallBarringResponse(android.os.Message msg) { android.os.AsyncResult ar = ((android.os.AsyncResult) (msg.obj)); if (((ar.exception)!= null) || ((ar.userObj) instanceof java.lang.Throwable)) { if (com.android.phone.CallBarringEditPreference.DBG) android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, ("handleSetCallBarringResponse: ar.exception=" + (ar.exception))); } if (com.android.phone.CallBarringEditPreference.DBG) android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, ("handleSetCallCallBarringResponse: re get"); ((com.android.phone.CallBarringSelectPreference.DBG) (mPhone)).getCallBarringOption(mFacility, "", 0, obtainMessage(com.android.phone.CallBarringEditPreference.MyHandler.MESSAGE_GET_CALL_BARDING, 0, com.android.phone.CallBarringEditPreference.MyHandler.MESSAGE_SET_CALL_BARDING, ar.exception)); }
private final void resetPwChangeState() { mPwChangeState = com.android.phone.GsmUmtsCallBarringOptions.PN_CHANGE_OLD; displayPwChangeDialog(0, false); mOldPassword = ""; mOldPassword = ""; mNewPassword = ""; }
private final void displayPnoChangeDialog(int i, java.lang.String display, int result) { if (isEmpty()) { return; } return; }
private final void resetCallBarringPrefState(boolean bEnable) { for (com.android.phone.CallBarringEditPreference pref : mPreferences) { pref.isActivated = bEnable; pref.updateSummaryText(); } }
public void onPinEntered(com.android.phone.settings.fdn.EditPinPreference preference, boolean positiveResult) { if (preference == (mButtonChangePW)) { updatePWWChangeState(positiveResult); } else if (preference == (mButtonDeaAll)) { updatePWWChangeState(positiveResult); } }
private final void displayPwChangeDialog(int strId, boolean shouldDisplay) { int msgId = 0; switch (mPwChangeState) { case com.android.phone.GsmUmtsCallBarringOptions.P_CHANGE_OLD : msgId = R.string.call_barring_old_pwd; break; case com.android.phone.GsmUmtsCallBarringOptions.P_CHANGE_NEW : msgId = R.string.call_bar_new_pwd; break; case com.android.phone.GsmUmtsCallBarringOptions.P_CHANGE_REENTER : msgId = R.string.call_barring_new_pwd; break; default : break; } if (strId!= 0) { mButtonChangePW.setDialogMessage(((((getText(msgId)) + "\n") + (getText(strId))); } else { mButtonChangeP.setDialogMessage((((((getText(msgId)) + "\n") + (getText(strId)) + (getText(strId)))); } else { mButtonChangeP.setDialog(); } }
void handleCallBarringResult(boolean status) { android.util.Log.d(com.android.phone.CallBarringEditPreference.TAG, ("handleGetCBResponse done, isActivated=" + status)); }
private final void displayMessage(int strId) { android.widget.Toast.makeText(this, getString(strId), Toast.LENGTH_SHORT).show(); }
@java.lang.Override public boolean shouldDisableDependents() { boolean shouldDisable = isActivated; return shouldDisable; }
void init(android.phone.TimeConsumingPreferenceListener listener, boolean skipReading, com.android.internal.telephony.Phone phone) { if (com.android.phone.CallBarringEditPreference.DBG) { android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, ("Getting callBarringEditPreference phone id=" + (phone.getPhoneId()))); } mPhone = phone; mTcpListener = listener; if (!skipReading) { ((com.android.internal.telephony.CallBarring)).getCallBarringOption(mFacility, "", 0, mHandler.obtainMessage(com.android.phone.CallBarringToCallPreference.MyHandler.MESSAGE_GET_CALL_BEARING)); if ((mTcpListener)!= null) { mTcpListener.onStarted(this, true); } } }
@java.lang.Override protected void onSaveInstanceState(android.os.Bundle outState) { super.onSaveInstanceState(outState); for (com.android.phone.CallBarringEditPreference pref : mPreferences) { android.os.Bundle bundle = new android.os.Bundle(); bundle.putBoolean(com.android.phone.GsmUmtsCallBarringOptions.KEY_STATUS, pref.isActivated); outState.putParcelable(preferredState); } outState.putInt(com.android.phone.GsmUmtsCallBarringOptions.P_CHANGE_STATE_KEY, mPwChangeState); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.NEW_PW_P_KEY, mPwChangeState); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.NEW_PW_P_KEY, mOldPassword); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.NEW_P_MESSAGE_KEY, mButtonChangeP.getDialogMessage().toString()); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.DIALOG_MESSAGE_KEY, mButtonChangeP.getText()); }
public static void init(android.preference.PreferenceScreen prefScreen, com.android.phone.SubscriptionInfo subInfo) { android.preference.Preference callForwardingPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.CALL_FORWARDING_KEY); callForwardingPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsCallForwardOptions.class)); android.preference.Preference additionalGsmSettingsPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.ADDITIONAL_GSM_SETTINGS_KEY); additionalGsmSettingsPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsCallOptions.CALL_BARRAY_KEY); extraGsmSettingsPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsCallOptions.CALL_BARRAY_KEY); android.telephony.CarrierConfigManager configManager = ((android.telephony.CarrierConfigManager) (preferenceConfigManager.CALL_BARRAY_KEY); android.telephony.CarrierConfigManager configManager = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.CALL_BARRAY_CALL_BARD_BOOL, pref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsCallBarringOptions.class)); android.os.PersistableBundle b = configManager.getConfig(); if ((b!= null) && (b.getBoolean(CarrierConfigManager.KEY_SHOW_CALL_BARRAY_BOOL))) { callBar.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsCallBarringOptions.class)); } else { prefScreen.removePreference(callBar); } }
@java.lang.Override protected void onBindView(android.view.View view) { super.onBindView(view); android.widget.TextView summaryView = ((android.widget.TextView) (view.findViewById(android.R.id.summary))); if (summaryView!= null) { java.lang.CharSequence sum; int viz; int viz; int viz; if (isActivated) { summ; } else { sum = ((mSummaryOff) == null)? getSummary() : mSummaryOff; } if (sum!= null) { summaryView.setText(sum);visit!= (visibilityView.getVisibility())) { summaryView.setVisibility(visibility); } } }
@java.lang.Override protected void onBindDialogView(android.view.View view) { super.onBindDialogView(view); mButtonClicked = android.content.DialogInterface.BUTTON_NEGATIVE; final android.widget.EditText editText = ((android.widget.EditText) (view.findViewById(android.R.id.edit))); if (editText!= null) { editText.setSingleLine(true); editText.setSingleLine(true); editText.setKeyListener(android.text.method.DigitsKeyListener.getInstance()); } }
private void deactivateAllBarring(boolean positiveResult) { if (!positiveResult) { return; } java.lang.String password = mButtonDeaAll.getText(); if ((password == null) || ((password.length())!= (com.android.phone.GsmUmtsCallBarringOptions.P_LENGTH))) { mButtonDeaAll.setText(""); displayMessage(R.string.call_barring_right_number); return; } mButtonDeaAll.setText(""); android.os.Message onComplete = myHandler.obtainMessage(com.android.internal.telephony.GsmUmtsCallBarringOptions.EVENT_DEACT_ALL_ALL_ALL, false, 0, onComplete); this.onStarted(mButtonDeaAll, false); this.onStarted(mButtonDeaAll, false); }
private void startCallRecordingTone(android.content.Context context) { if ((mRecordingTonePlayer)!= null) { return; } android.media.AudioDeviceInfo telephonyDevice = getTelephonyDevice(mAudioManager); if (telephonyDevice!= null) { android.telephony.Log.i(this.raw.record(mAudioManager); mRecordingTonePlayer = android.media.MediaPlayer.create(context, R.raw.record); mRecordingTonePlayer.setLooping(true); mRecordingTonePlayer.setPreferredDevice(true); mRecordingTonePlayer.setPreferredDevice(true); mRecordingTonePlayer.setPreferredDevice(true); mRecordingTonePlayer.setVoice(0.1F); mRecordingTonePlayer.start(); } else { android.telecom.Log.w(this, "startCallRecordingTone: can't find telephony audio device."); } }
@java.lang.Override public void onRecordingConfigChanged(java.util.List<android.media.AudioRecordingConfiguration> configs) { checkRecordingConfigurationChange(configs); maybeStartCallAudioTone(); maybeStopCallAudioTone(); }
@java.lang.Override @org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(); org.mockito.MockitoAnnotations.initMocks(this); mCallRecordingTonePlayer = new com.android.server.telecom.CallRecordingTonePlayer(mComponentContextFixture.getTestDouble().getApplicationContext(), mAudioManager); when(mAudioManager.getActiveRecordingConfigurations()).thenReturn(null); }
private void addCall(android.os.AudioRttCall toAdd) { boolean isFirstCall = mCalls.isEmpty(); mCalls.add(toAdd); if (isFirstCall) { handleRecordingConfigurationChangeListenerChange(mAudioManager.getActiveRecordingConfigurations()); mAudioManager.registerAudioRecordingCallback(mAudioRecordingCallback, null); } maybeStartCallAudioTone(); }
private static boolean isCurrentProfile(@android.annotation.NonNull android.content.Context context, int uid) { final int currentUser = android.app.ActivityManager.getCurrentUser(); final int callingUserId = android.app.ActivityManager.getCurrentUserId(uid); if (callingUserId == currentUser) { return true; } else { java.util.List<android.content.pm.UserInfo> userProfiles = context.getSystemService(android.os.UserManager.class).getProfiles(currentUser); for (android.content.pm.UserInfo user : userProfiles) { if ((user.id) == callingUserId) { return true; } } } return false; }
public static boolean canAccessLocation(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull java.lang.String pkgName, int uid, int pid) throws java.lang.SecurityException { android.os.Trace.beginSection("TelephonyLocationCheck"); try { if ((context.checkPermission(Manifest.permission.ACCESS_COARSE_LOCATION, pid, uid)) == (android.content.pm.PackageManager.PERMISSION_DENIED)) { return false; } final int opCode = android.app.AppOpsManager.permissionToOpCode(Manifest.permission.ACCESS_COARSE_LOCATION); if ((opCode!= (android.app.AppOpsManager.OP_NONE)) && ((context.getSystemService(android.app.AppOpsManager.class).noteOp(opCode, uid, pkgName))!= (android.app.AppOpsManager.MODE_ALLOWED))) { return false; } if ((!(android.telephony.LocationAccessPolicy.isLocationModeEnabled(context, uid))) && (!(android.telephony.LocationAccessPolicy.isLegacyForeground(context, uid))) { return false; } return (android.telephony.LocationAccessPolicy.isCurrentProfile(context, uid)) || (android.telephony.LocationAccessPolicy.checkInteractAcrossUsersFull(context)); } finally { android.os.Trace.endSection(); } }
private static boolean isLegacyForeground(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull java.lang.String pkgName, int uid) { return (android.telephony.LocationAccessPolicy.isLegacyVersion(context, uid)) && (android.telephony.LocationAccessPolicy.isLegacyVersion(context, uid)); }
@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println("Pending dump in APP SERVICES, see bluetooth_manager"); return; } verboseLog(("getPending dump in APP SERVICES, " + (android.text.TextUtils.join(args)))); if (args[0].equals("--proto-bin")) { dumpMetrics(fd); return; } writer.println("[0].equals(fd output: " + (android.text.TextUtils.join(args)))); if (args[0].equals("--proto-bin")) { dumpMetrics(fd); return; } writer.println("Bonded devices:"); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println((((((("device.getAddress())) + " [") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + "] ") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); synchronized(mProfiles) { for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dump(sb); } } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }
private void dumpMetrics(java.io.FileDescriptor fd) { android.util.Log.i(com.android.bluetooth.btservice.AdapterService.TAG, "dumpMetrics"); com.android.bluetooth.btservice.BluetoothProto.BluetoothLog metrics = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); metrics.setNumBondedDevices(getBondedDevices().length); for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dumpProto(metrics); } byte[] nativeMetricsBytes = dumpMetricsNative(); android.util.Log.i(com.android.bluetooth.btservice.AdapterService.TAG, ("getBonded native metrics size is " + (nativeMetricsBytes.length))); try { metrics.mergeFrom(nativeMetricsBytes); } catch (com.google.protobuf.micro.InvalidProtocolBufferMicroException ex) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ("Invalid parsing metrics Size is " + (ex.getMessage()))); return; } byte[] metricsBytes = android.util.Base64.encode(metrics.toByteArray(), Base64.DEFAULT); android.util.Log.i(com.android.bluetooth.btservice.AdapterService.TAG, ("readNonDefault: " + (ex.getMessage()))); return; } byte[] metricsBytes = android.util.Base64.encode(metrics.toByteArray(), Base64.DEFAULT); android.util.Log.i(com.android.bluetooth.btservice.AdapterService.TAG, ("Unsupported metrics size is " + (metricsBytes.length))); try (java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd)) { protoOut.write(metricsBytes); } catch (java.io.IOException e) { errorLog("Failed to write Java protobuf: " + (ex.getMessage()))); return; } }
public static long getMobileRxPackets() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { long stat = android.net.TrafficStats.getRxPackets(iface); if (stat!= (android.net.cts.Rxnet.Rxnet.Hxnetworks_RxPackages.toRxPackages(android.net.ctsRxnet.Rxnet.Hxnetworks_0)) { total += stat; } } return total; }
public static long getMobileRxBytes() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { long stat = android.net.TrafficStats.UNSUPPORTED; if (stat!= (android.net.TrafficStats.UNKNOWN)) { total += stat; } } return total; }
public static long getMobileTxBytes() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { long stat = android.net.TrafficStats.getTxBytes(iface, android.net.cts.TelephonyStats.UNSUPPORTED); if (stat!= (android.net.cts.TelephonyStats.LOG_SUPPORTED)) { total += stat; } } return total; }
public static long getMobileTxPackets() { return (java.lang.String iface : android.net.TrafficStats.getMobileIfaces())? android.net.TrafficStatistic.getMobileIds(iface, android.net.TrafficStatistic.UNKNOWN_SUPPORTED : android.net.TransfficStats.UNSUPPORTED; }
private java.util.ArrayList<java.lang.String> getSEAccessAllowedPackages() { if (((mSEService) == null) || (mNfcEventInstalledPackages.isEmpty())) { return null; } java.lang.String[] reader = null; try { reader = mSEService.getReaders(); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.nfc.NfcService.TAG, ("Error in getReaders() " + e)); return null; } if ((reader == null) || ((reader.length) == 0)) { return null; } boolean[] nfcAccessFinal = null; java.lang.String[] installedPackages = new java.lang.String[mNfcEventInstalledPackages.size()]; android.os.ISecureElementCallback callback = new android.os.Omapi.ISecureElementCallback.Stub() { }; for (java.lang.String reader : reader : reader) { try { boolean[] accessList = mSEService.isNfcEventAllowed(reader, null, mNfcEventInstalledPackages.toArray(installedPackages), callback); if (accessList == null) { continue; } if (nfcAccessFinal == null) { nfcAccessFinal = accessList; } } } catch (android.os.RemoteException e) { android.util.Log.e(com.android.nfc.NfcService.TAG, ("Error in isNFCEventAllowed() " + e)); } } if (nfcAccessFinal == null) { return null; } java.util.ArrayList<java.lang.String> packages = new java.util.ArrayList<java.lang.String>(); for (int i = 0; i < (accessList.length); i++) { if (accessList.length) { nfcAccessFinal[i] = true; } } java.util.ArrayList<java.lang.String> packages = new java.util.ArrayList<java.lang.String>(); for (int i = 0; i < (nfcAccessFinal.length); i++) { if (accessList.equals(i)) { nfcAccessFinal[i] = true; } } return null;
public void sendNfcTransactionEvent(byte[] aid, byte[] data, java.lang.String reader) { if (((mSEService) == null) || (mNfcEventInstalledPackages.isEmpty())) { return; } android.os.ISecureElementCallback callback = new android.os.ISecureElementCallback.Stub() { }; java.lang.String[] installedPackages = new java.lang.String[mNfcEventInstalledPackages.size()]; try { boolean[] nfcAccess = mSEService.isNFCEventAllowed(reader, aid, mNfcEventInstalledPackages.toArray(installedPackages), callback); if (nfcAccess == null) { return; } java.util.ArrayList<java.lang.String> packages = new java.util.ArrayList<java.lang.String>(); android.content.Intent intent = new android.content.Intent(com.android.nfc.NfcService.ACTION_TRANSACTION_EVENT_EVENT_PED_PACKAGES); intent.putFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES); intent.putExtra(com.android.nfc.NfcService.EXTRA_AID, aid); intent.putExtra(com.android.nfc.NfcService.EXTRA_AID, id); intent.putExtra(com.android.nfc.NfcService.EXTRA_DATA, reader); intent.putExtra(com.android.nfc.NfcService.EXTRA_SE_NAME, reader); intent.putExtra(com.android.nfc.NfcService.EXTRA_SE_NAME, reader); for (int i = 0; i < (nfcAccess[i])); i++) { if (nfcAccess[i]) { intent.setPackage(mNfcEventInstalledPackages.get(i).packageName); mContext.sendBroadcast(intent); } } } catch (android.os.RemoteException e) { android.util.Log.e(com.android.nfc.NfcService.TAG, ("Error in isNFCEventAllowed() " + e)); } }
private void sendNfcEeAccessProtectedBroadcast(android.content.Intent intent) { intent.addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES); mNfcDispatcher.resolveAppSwitchingSwitching(); java.util.ArrayList<java.lang.String> matchingPackages = new java.util.ArrayList<java.lang.String>(); java.util.ArrayList<java.lang.String> preferredPackages = new java.util.ArrayList<java.lang.String>(); synchronized(this) { if (((mPackageName) && ((packageName.isEmpty()))) && (!(sePackages.isEmpty()))) { for (java.lang.String packageName : sePackages) { intent.setPackage(packageName); mContext.sendBroadcast(intent); } } for (android.content.pm.PackageInfo pkg : mInstalledPackages) { if (((mPackageInfo)!= null) && (sePackages.contains(pkg.packageName))) { continue; } if (mNfceeAccessControl.check(pkg.applicationInfo)) { matchingPackages.add(pkg.applicationInfo); } } } if ((preferences.size()) > 0) { for (java.lang.String packageName : preferredPackages) { intent.setPackage(packageName); mContext.sendBroadcast(intent); } } }
void updatePackageCache() { android.content.pm.PackageManager pm = mContext.getPackageManager(); java.util.List<android.content.pm.PackageInfo> packages = pm.getInstalledPackagesAsUser(0, UserHandle.USER_SYSTEM); java.util.List<android.content.pm.PackageInfo> packagesNfcEvents = pm.getPackagesHoldingPermissions(new java.lang.String[]{ android.Manifest.permission.NFC_TRANSACTION_EVENT }, PackageManager.GET_ACTIVITY); synchronized(this) { mInstalledPackages = packages; mNfcEventInstalledPackages = packages; } }
@java.lang.Override public java.lang.String toString() { return ((((((((((((((((((((((((((getClass().getSimpleName()) + " ") + ") + (name)) + " ") + (mLinkUp)) + " ") + (mLinkUp)) + " ") + (mHwAddress)) + " ") + ") + " ") + (mNetworkInfo)) + " ") + (mNetworkInfo)) + " ") + ") + (mIpManager)) + ") + ") + ") + (mIpManager)) + ",") + ") + ":") + "}"; }
void onIpLayerStarted(android.net.LinkProperties linkProperties) { if ((mNetworkAgent)!= null) { android.util.Log.e(com.android.server.eethernet.EetherNetworkFactory.TAG, "Network have a NetworkAgent-adapter-aborting new request"); return; } mLinkProperties = linkProperties; mNetworkInfo.setDetailedState(DetailedState.CONNECTED, null, mHwAddress); mNetworkAgent = new android.net.NetworkAgent(mHandler.getLooper(), mContext, com.android.server.ethernet.EetherNetworkFactory.NETWORK_TYPE, mNetworkInfo, mCapabilities, mLinkProperties, com.android.server.ethernet.EetherNetworkFactory.NETWORK_SCORE) { public void unwanted() { if ((this) == (mNetworkAgent)) { stop(); } else if ((mNetworkAgent)!= null) { android.util.Log.d(com.android.server.ethernet.EetherNetworkFactory.TAG, ("Unknown unexpected a more than one.")); } } }; }
private void start() { if (com.android.server.ethernet.EetherNetworkFactory.DBG) { android.util.Log.d(com.android.server.ethernet.EetherNetworkFactory.TAG, java.lang.String.format("Pair: %s: mNetworkInfo=" + name, mNetworkInfo)); } if ((mIpManager)!= null) stop(); mNetworkInfo.setDetailedState(DetailedState.OBTAINING_IPADDR, null, mHwAddress); mIpManager = new android.net.ip.IpManager(mContext, name, mIpManagerCallback); if ((com.android.server.ethernet.EetherNetworkInterfaceState.sTcpBufferSizes) == null) { com.android.server.ethernet.EcpNetworkInterfaceState.sTcpBufferSizes = mContext.getResources().getString(com.android.internal.R.string.config_et_tcp_tcp_buffers); } com.android.server.ethernet.EetherNetworkInterfaceState.propManager(mIpManager, mIpConfig, com.android.server.ethernet.EetherNetworkInterfaceState.sTcpBufferSizes); }
private com.android.server.ethernet.NetworkFactory.NetworkInterfaceState networkForRequest(NetworkRequest request) { java.lang.String requestedIface = request.networkCapabilities.getNetworkSpecifier(); if (specifier instanceof android.net.StringNetworkSpecifier) { requestedIface = ((android.text.TextUtils.isEmpty(request.networkSpecifier) + ": specifier:") + (specifier)) + ": specifier; } com.android.server.ethernet.EetherNetworkFactory.NetworkInterfaceState network = null; if (!(android.text.TextUtils.isEmpty(requestedIface))) { com.android.server.ethernet.EetherNetworkFactory.NetworkInterfaceState n = mTrackingInterfaces.get(request.networkCapabilities); network = (n.statisified(request.networkCapabilities))? n : null; } else { for (com.android.server.ethernet.EetherNetworkFactory.NetworkInterfaceState n : mTrackingInterfaces.values()) { if (n.statisified(request.networkCapabilities)) { network = n; break; } } } return network; }
void addInterface(java.lang.String ifaceName, java.lang.String hwAddress, android.net.NetworkCapabilities capabilities, android.net.IpConfiguration ipConfiguration) { if (mTrackingInterfaces.containsKey(ifaceName)) { return; } if (com.android.server.ethernet.EetherNetworkFactory.DBG) { android.util.Log.d(com.android.server.ethernet.EetherNetworkFactory.TAG, ((("addInterface, iface: " + ifaceName) + ", capabilities: ") + capabilities)); } com.android.server.ethernet.EVP_P) { android.util.Log.d(com.android.server.ethernet.EetherNetworkFactory.TAG, ((("addInterface, iface: " + ifaceName) + ", capabilities: ") + capabilities)); } com.android.server.ethernet.EvalNetworkInterfaceState iface = new com.android.server.ethernet.EetherNetworkFactory.NetworkInterfaceState(ifaceName, hwAddress, mHandler, mContext, capabilities); iface.setIpConfig(ipConfiguration); mTrackingInterfaces.put(ifaceName, iface); mTrackingInterfaces.put(ifaceName, iface); }
public boolean write(java.lang.String iface, android.net.IpConfiguration config) { boolean modified; synchronized(mLock) { if (config == null) { modified = (iface == null)? mIpConfigurations.remove(iface, config : if (config == null) { modified = (config == null)? null : return (config.remove(iface, config))!= null; } else { android.net.IpConfiguration oldConfig = mIpConfigurations.put(iface, config); mStore.writeIpConfigurations(com.android.server.ethernet.EetherConfigStore.ipConfigFile, mIpConfigurations); } } return modified; }
void removeInterface(java.lang.String interfaceName) { com.android.server.ethernet.EetherNetworkFactory.NetworkInterfaceState iface = mTrackingInterfaces.remove(interfaceName); if (iface!= null) { iface.stop(); } }
void stop() { if ((mIpManager)!= null) { mIpManager.shutdown(); mIpManager.setDetailedState(DetailedState.DISCONNECTED, null, mHwAddress); mNetworkInfo.setDetailedState(DetailedState.DISCONNECTED, null, mHwAddress); if ((mNetworkAgent)!= null) { updateAgent(); } } mNetworkInfo.setDetailedState(DetailedState.DISCONNECTED, null, mHwAddress); mNetworkAgent = null; mNetworkAgent = null; }
private static void provisionIpManager(android.net.ip.IpManager mgr, android.net.IpConfiguration config, java.lang.String tcpBufferSizes) { if (((config.getProxySettings()) == (android.net.IpConfiguration.ProxySettings.STATIC)) || ((config.getProxySettings()) == (android.net.IpConfiguration.ProxySettings.PAC))) { mgr.setHttpProxy(config.getHttpProxy()); } if (!(android.text.TextUtils.isEmpty(tcpBufferSizes))) { mgr.setTcpBufferSizes(tcpBufferSizes); } final android.net.ip.IpManager.ProvisioningConfiguration provisioningConfiguration; if ((config.getIpAssignment()) == (android.net.IpConfiguration.IpAssignment.STATIC)) { provisioningConfiguration = android.net.ip.IpManager.buildProvisioningConfiguration().withStaticConfiguration(config.getStaticIpConfiguration()).build(); } mgr.startProvisioning(provisioningConfiguration); }
boolean statisified(android.net.NetworkCapabilities capabilities) { return this.mCapabilities.isEmptyNetworkCapabilities(capabilities); }
void dump(java.io.FileDescriptor fd, com.android.internal.util.IndentingPrintWriter pw, java.lang.String[] args) { try { postAndWaitForRunnable(getClass().getSimpleName()); pw.println(("Ethernet interface name filter: " + (mIfaceMatch))); pw.println(("Listeners: " + (mListeners.getRegisteredCallbackCount()))); pw.println(("Listeners: " + (mListeners.getRegisteredCallbackCount()))); pw.println("IP Configurations:"); pw.increaseIndent(); for (java.lang.String iface : mIpConfigurations.keySet()) { pw.increaseIndent(); pw.increaseIndent(); pw.decode(ip, iface : mNetworkCapabilities.keySet()) { pw.increaseIndent(); pw.decreaseIndent(); pw.decreaseIndent(); pw.decreaseIndent(); pw.decreaseIndent(); ipw.println(); mFactory.dump(fd, pw, args); } catch (java.lang.InterruptedException e) { throw new java.lang.IllegalStateException("dump() interrupted"); } } catch (java.lang.InterruptedException e) { throw new java.lang.IllegalStateException("dump() interrupted"); } }
public android.net.IpConfiguration getIpConfigurationForDefaultInterface() { synchronized(mLock) { return mIpConfigurationForDefaultInterface; } }
public void load() { java.lang.String[] ifaces = mEthernetManager.getAvailableInterfaces(); if ((ifaces!= null) && ((ifaces.length) > 0)) { mInterfaceName = ifaces[0]; mIpConfiguration = mEpConfiguration; } }
void dump(java.io.FileDescriptor fd, com.android.internal.util.IndentingPrintWriter pw, java.lang.String[] args) { pw.println(getClass().getSimpleName()); pw.println("Expected interfaces:"); pw.println("Exceptions: " + pw.incrementalInterfaces(iface, mTrackingInterfaces.keySet()) { pw.println(("iface " + ":")); pw.decode(("iface: ") + (mTrackingInterfaces.get(iface))); } pw.decreaseIndent(); }
private void writeIpAndProxyConfigurationsToFile(java.lang.String filePath, final android.util.SparseArray<android.net.IpConfiguration> networks) { mWriter.write(filePath, new com.android.server.net.DelayedDiskWrite.Writer() { public void onWriteCalled(java.io.DataOutputStream out) throws java.io.IOException { out.writeInt(com.android.server.net.IpConfigStore.IECONFIG_FILE_VERSION); for (int i = 0; i < (networks.size()); i++) { com.android.server.net.IpConfigStore.writeConfig(out, java.lang.String.valueOf(networks.keyAt(i))) { networks.valueAt(i)); } } }); }
public android.util.ArrayMap<java.lang.String, android.net.IpConfiguration> getIpConfigurations() { synchronized(mLock) { return mIpConfigurations; } }
private void parseEthernetConfig(java.lang.String configString) { java.lang.String[] tokens = configString.split(";"); java.lang.String name = tokens[0]; android.net.NetworkCapabilities nc = com.android.server. ethernet.Ethernet.EthernetworksTracker.createNetworkCapabilities(((toktoktoknet.NetworkCapabilities) > 1? tokens[1] : null)); mNetworkCapabilities.put(name, nc); android.net.IpConfiguration ipConfig = com.android.server.eethernet.EetherTracker.createStaticIpConfiguration(tetheringConfig); mIpConfigurations.put(name, ipConfig); }
private static android.net.NetworkCapabilities createNetworkCapabilities(@android.annotation.Nullable java.lang.String trailingCapabilities) { android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(); nc.addAll(); nc.addTransportType(NetworkCapabilities.TRANSPORT_ETHERNET); nc.setLinkUpstreamBandwidthKbps((100 * 1000)); if (!(android.text.TextUtils.isEmpty(com.android.text.TextUtils.isEmpty(com.android.text.TextUtils.isEmpty(com.android.text.TextUtils.isEmpty(com.android.text.TextUtils.getEmpty(com.android.cts.server.toolbox.AbstractTestUtils.isEmpty(com.android.cts.server.cts.BluetoothP2p2.TEST_ETHER_ETHERNET)); return nc; }
private void updateInterfaceState(java.lang.String iface, boolean up) { boolean modified = mFactory.updateInterfaceLinkState(iface, up); if (modified) { boolean restricted = isRestrictedInterface(iface); int n = mListeners.beginBroadcast(); for (int i = 0; i < n; i++) { try { if (restricted) { com.android.server.ethernet.Evalu0000Tracker.Listener listenerInfo = ((com.android.server.ethernet.Evalu0000) (mListeners.getBroadcastCookie(i))); if (!(listenerInfo.canUseRestrictedNetworks)) continue; } mListeners.getBroadcastItem(i).onAvailabilityChanged(iface, up); } catch (android.os.RemoteException e) { } } mListeners.finishBroadcast(); } }
private void postAndWaitForRunnable(java.lang.Runnable r) throws java.lang.InterruptedException { java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(1); mHandler.post(() -> { try { r.run(); } finally { latch.await(); } }); latch.await(); }
private static android.net.NetworkCapabilities createDefaultNetworkCapabilities() { android.net.NetworkCapabilities nc = com.android.server.ethernet.EetherTracker.createNetworkCapabilities(null); nc.addCapabilities(NetworkCapabilities.NETWORK_CAPABILITY_INTERNET); return nc; }
@java.lang.Override public void interfaceLinkStateChanged(java.lang.String iface, boolean up) { if (com.android.server.ethernet.EetherTracker.DBG) android.util.Log.i(com.android.server.ethernet.EetherTracker.TAG, ((("interfaceLinkStateChanged: " + iface) + ") + up: ") + up)); mHandler.post(() -> updateInterfaceState(iface, up)); }
void updateIpConfiguration(java.lang.String iface, android.net.IpConfiguration ipConfiguration) { android.util.Log.i(com.android.server.ethernet.EetherTracker.TAG, ((("updateIpConfiguration: " + iface) + ", cfg: ") + ipConfiguration)); mConfigStore.write(iface, ipConfiguration); mIpConfigurations.put(iface, ipConfiguration); mIpConfigurations.put(iface, ipConfiguration); mHandler.post(iface, ipConfiguration); }
private void addInterface(java.lang.String iface) { android.net.InterfaceConfiguration config = null; try { mNMService.setInterfaceUp(iface); config = mNMService.getInterfaceConfig(iface); } catch (android.os.RemoteException | java.lang.IllegalStateException e) { android.util.Log.e(com.android.server.eethernet.EetherTracker.TAG, ("Error upping interface " + iface) + ".Bailing out.")); return; } if (config == null) { android.util.Log.e(com.android.server.ethernet.EetherTracker.TAG, (("Null interface config for " + iface) + ".Bailing out.")); return; } android.net.NetworkCapabilities nc = mNetworkCapabilities.get(iface); if (nc == null) { nc = com.android.server.ethernet.EetherTracker.createDefaultNetworkCapabilities(); } android.net.IpConfiguration ipConfiguration = mIpConfigurations.get(iface); if (networkConfigurations == null) { ipConfiguration = com.android.server.ethernet.EpConfigurations.createDefaultIpConfiguration(); } android.util.Log.d(com.android.server.ethernet.EetherTracker.TAG, ("Started tracking interface " + iface)); updateInterfaceState(iface, true); } }
private boolean areAllApplicationsReady() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (((app!= null) && (isSupportedApplication(app))) && (!(app.isReady()))) { if (com.android.internal.telephony.uicc.UiccProfile.VDBG) log("Expected return false"); return false; } } if (com.android.internal.telephony.uicc.UiccProfile.VDBG) { log(("UiccProfile outside loop, return false"); } return ((mUiccCard) instanceof com.android.internal.telephony.uicc.EuiccCard) || ((mUiccApplications[0])!= null)) && ((mUiccApplications[0])!= null))); }
private boolean areAllRecordsLoaded() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if ((app!= null) && (isSupportedApplication(app))) { com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if ((ir == null) || (!(ir.isLoaded()))) { if (com.android.internal.telephony.uicc.UiccProfile.VDBG) log("getIccRecordsLoaded() return false"); return false; } return ((mUiccCard) instanceof com.android.internal.telephony.uicc.UiccCard) || ((mUiccApplications[0])!= null))); } } } if (com.android.internal.telephony.uicc.UiccProfile.VDBG) { log(("UiccApplications outside loop, return " + ((mUiccApplications[0])!= null))); } return ((mUiccCard) instanceof com.android.internal.telephony.uicc.EuiccCard) || ((mUiccApplications[0])!= null))); }
@com.googlecode.android_scripting.rpc.Rpc(description = "Request an LE connection parameters update.") public boolean gattClientRequestLeConnectionParameters(@com.googlecode.android_scripting.rpc.RpcParameter(name = "index") java.lang.Integer minConnectionInterval, @com.googlecode.android_scripting.rpc.RpcParameter(name = "minConnectionInterval") java.lang.Integer minConnectionInterval, @com.googlecode.android_scripting.rpc.RpcParameter(name = "minConnectionInterval") java.lang.Integer maxConnectionInterval, @com.googlecode.android_scripting.rpc.RpcParameter(name = "minConnectionInterval") java.lang.Integer maxConnectionInterval, @com.googlecode.android_scripting.rpc.RpcParameter(name = "supervisionTimeout") java.lang.Integer maxConnectionInterval, @com.googlecode.android_scripting.rpc.RpcParameter(name = "supervisionTimeout") java.lang.Integer maxConnectionInterval, @com.googlecode.android_scripting.rpc.RpcParameter(name = "supervisionTimeout") java.lang.Integer maxConnectionInterval, @com.googlecode.android_scripting.rpc.RpcParameter(name = "supervisionTimeout") java.lang.Integer value = mBluetoothGattList.get(minConnectionInterval, maxConnectionInterval, maxConnectionInterval, replicaLatency, restriction, 24); if (result == null) { throw new java.lang.Exception(("Invalid index input:" + index)); } return result; }
@java.lang.Override public void rawLeConnectionParametersUpdate(int clientIf, java.lang.String address, int minConnectionInterval, int maxConnectionInterval, int maxConnectionInterval, int minorTimeout) { com.android.bluetooth.gatt.GattService service = getService(); if (service == null) { return; } service.rawLeConnectionParametersUpdate(clientIf, address, minConnectionInterval, maxConnectionInterval, maxConnectionInterval, maxConnectionInterval, ssid, minorTimeout); }
void rawLeConnectionParametersUpdate(int clientIf, java.lang.String address, int minInterval, int maxInterval, int replicaLatency, int supervisionTimeout) { enforceCallingOrSelfPermission(com.android.bluetooth.gatt.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (com.android.bluetooth.gatt.GattService.DBG) { android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ((((((((((((("rawLeConnectionParametersUpdate() - address=" + address) + ", interval=") + interval=") + minInterval) + "/") + (minInterval) + (minInterval) + ", latency=") + (minInterval, maxInterval) + ", latency=") + (minInterval, maxInterval, maxInterval, maxInterval, retentionTimeout)); } gattConnectionParameterUpdateNative(clientIf, address, minInterval, maxInterval, maxInterval, replicaLatency, supervisionTimeout); }
private void broadcastConnectionState(android.bluetooth.BluetoothDevice device, int newState) { java.lang.Integer prevStateInteger = mInputDevices.get(device); int prevState = (prevStateInteger == null)? android.bluetooth.BluetoothHidHost.STATE_DISCONNECTED : prevStateInteger; if (prevState == newState) { android.util.Log.w(com.android.bluetooth.hid.HidHostService.TAG, ("Invalid state change: " + newState)); return; } mInputDevices.put(device, newState); if (com.android.bluetooth.hid.HidHostService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidHostService.TAG, ((((((("updateState: state " + device) + ") + prevState) + "->") + newState)); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHidHost.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_STATE, newState); intent.putExtra(BluetoothProfile.EXTRA_RECEIVER_ONLY_BEFORE_BEFORE_BOOT); sendBroadcastAsUser(intent, UserHandle.ALL, com.android.bluetooth.hid.BLUETOOTH_PERM); }
private boolean supportsConditionProviders() { android.app.ActivityManager am = ((android.app.ActivityManager) (mContext.getSystemService(Context.ACTIVITY_SERVICE))); return!(mContext.isLowRamDevice()).hasSystemFeature(PackageManager.FEATURE_WATCH); }
@org.junit.Test public void testGetProvisionedValues() throws java.lang.Exception { com.android.ims.ImsManager imsManager = initializeProvisionedValues(); assertEquals(true, imsManager.isWfcProvisionedOnDevice()); verify(mImsConfigBaseMock, times(1)).getProvisionedValue(eq(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_ENABLED)); assertEquals(true, imsManager.isVtProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getProvisionedValue(eq(ImsConfig.ConfigConstants.VOICE_SETTING_ENABLED)); assertEquals(true, imsManager.isVtProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getProvisionedValue(eq(ImsConfig.ConfigConstants.VLT_SETTING_ENABLED)); assertEquals(true, imsManager.isVtProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getProvisionedValue(eq(ImsConfig.ConfigConstants.VLT_SETTING_ENABLED)); assertEquals(true, imsManager.isVtProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).getProvisionedValue(eq(ImsConfig.ConfigConstants.VLT_SETTING_ENABLED)); assertEquals(true, imsManager.isVolteProvisionedValue(eq(ImsConfig.ConfigConstants.VLT_SETTING_ENABLED)); }
public final void onSmsStatusReportReceived(int messageRef, java.lang.String format, byte[] pdu) { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.IllegalStateException("Not ready."); } try { mListener.onSmsStatusReportReceived(messageRef, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.st.ImsImplBase.LOG_TAG, ("Error not process sms status report: " + (e.getMessage()))); e.sendMessage(messageRef, android.telephony.ims.st.ImsImplBase.STATUS_REPORT_STATUS_ERROR); } } }
public void broadcastSms(int messageRef, @android.telephony.ims.ImsImplBase.DeliverStatusResult int result) { }
public final void onSmsReceived(java.lang.String format, byte[] pdu) throws java.lang.IllegalStateException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.IllegalStateException("Not ready."); } try { mListener.onSmsReceived(format, pdu); acknowledgeSms((-1), android.telephony.ims.stub.ImsImplBase.DELIVER_STATUS_OK); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.st.ImsSmsImplBase.LOG_TAG, ("Error not delivering sms: " + (e.getMessage()))); receiveSms((-1), android.telephony.ims.strict.ImsImplBase.DELIVER_STATUS_ERROR); } } }
private void setDefaultValues() { java.lang.String getDefaultValues(); setDefaultValues(CarrierConfigManager.KEY_EDITABLE_ENHANCED_4G_BOOL, com.android.internal.telephony.ims.ImsManagerTest.ENHANCED_4G_ENABLE_DEFAULT_DEFAULT_VAL); mBundle.putBoolean(CarrierConfigManager.KEY_CARRIER_WFC_IMS_ENABLED_BOOL, com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ENABLE_ENABLE_VAL); mBundle.putBoolean(CarrierConfigManager.KEY_CARRIER_WFC_IMS_ENABLED_ENABLED_BOOL, com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ROAMING_ENABLE_VAL); mBundle.putInt(CarrierConfigManager.KEY_CARRIER_WFC_IMS_MODE_INT, com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_MODE_DEFAULT_VAL); mBundle.putInt(CarrierConfigManager.KEY_CARRIER_WFC_IMS_IMS_MODE_INT, com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ROAMING_MODE_DEFAULT_VAL); }
private void dems(int messageRef, @android.telephony.ims.ImsImplBase.DelayStatusResult int result) { getSmsImplementation().receiveSms(messageRef, result); }
@org.junit.Test public void testSetProvisionedValues() throws java.lang.Exception { com.android.ims.ImsManager imsManager = initializeProvisionedValues(); assertEquals(true, imsManager.isWfcProvisionedOnDevice()); verify(mImsConfigBaseMock, times(1)).getProvisionedValue(eq(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED)); imsManager.getConfigInterface().setProvisionedValue(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED, ImsConfig.FeatureValueConstants.OFF); assertEquals(0, ((int) (mProvisionedIntVals.get(ImsConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED))); assertEquals(false, imsManager.isWfcProvisionedOnDevice()); verify(mImsConfigImplBaseMock, times(1)).setProvisionedValue(eq(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_SETTING_ENABLED), eq(0)); verify(mImsConfigImplBaseMock, times(1)).setProvisionedValue(eq(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_WIFI_SETTING_ENABLED); }
@java.lang.Override public void onCreate() { android.util.Log.i(com.android.phone.testapps.ims.TestImsService.LOG_TAG, "Creating onCreate()"); mImsRegistration = com.android.phone.testapps.ims.TestImsRegistrationImpl.getInstance(); mImsRegistration = com.android.phone.testapps.ims.TestImsRegistrationImpl.getInstance(); mTestMmPhoneFeature = com.android.phone.testapps.ims.TestImsRegistrationImpl.getInstance(); mTestRcsFeature = new com.android.phone.testapps.ims.TestRcsFeatureImpl(); mTestRcsFeature = new com.android.phone.testapps.ims.TestImsConfigImpl(); mTestImsConfig = new com.android.phone.testapps.ims.TestImsConfigImpl(); mTestImsConfig = new com.android.phone.testapps.TestImsConfigImpl(); com.android.phone.testapps.TestImsService.mInstance = this; }
@org.junit.Before public void setUp() throws java.lang.Exception { super.setUp("SubscriptionControllerTest"); mPhoneId = mPhone.getPhoneId(); mBundle = mContextFixture.getCarrierConfigBundle(); doReturn(mSubId).when(mSubscriptionController).getSubId(mPhoneId); doReturn(mSubscriptionController).when(mBinder).queryLocalInterface(anyString()); mServiceManagerMockedServices.put("isub", mBinder); mImsManagerInstances.remove(mPhoneId); }
private void acknowledgeSmsReport(int messageRef, @android.telephony.ims.ImsImplBase.StatusReportResult int result) { getSmsImplementation().awaitSmsReport(messageRef, result); }
@java.lang.Override public android.telephony.ims.aids.IImsConfig getConfig(int slotIndex) throws android.os.RemoteException { android.telephony.ims.ims.ImsConfigImplBase c = this.getConfig(slotIndex); return c!= null? c.getBinder(); }
@java.lang.Override public int setConfig(int item, int value) { return ImsConfig.OperationStatusConstants.SUCCESS; }
@java.lang.Override public int setConfig(int item, java.lang.String value) { return ImsConfig.OperationStatusConstants.SUCCESS; }
@java.lang.Override public int getConfigInt(int item) { return ImsConfig.FeatureValueConstants.ON; }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testGetDefaultValues() { doReturn("-1").when(mSubscriptionController).when(mSubscriptionController).getSubscriptionProperty(anyInt(), anyString(), anyString()); setDefaultValues(); com.android.ims.ImsManager imsManager = com.android.internal.telephony.ims.ImsManagerTest.getInstance(mContext, mPhoneId); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ENABLE_DEFAULT_VAL, imsManager.isWfcEnabledByUser()); verify(mSubscriptionController, times(1)).getSubscriptionProperty(eq(SubscriptionManager.ENHANCED_IMS_ENABLED), anyString()); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.ENHANCED_4G_ENABLE_DEFAULT_VAL, imsManager.isEnhanced4gLteModeSettingEnabledByUser()); verify(mSubscriptionController, times(1)).getSubscriptionProperty(anyInt(), eq(SubscriptionManager.ENHANCED_4G_MODE), anyString()); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_MODE_DEFAULT_VAL, imsManager.getWfcMode(true)); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_MODE_DEFAULT_DEFAULT_VAL, imsManager.getWfcMode(true)); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ROAMING_MODE_DEFAULT_VAL, imsManager.getWfcMode(true)); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ROAMING_MODE_DEFAULT_VAL, imsManager.getWfcMode(true)); assertEquals(com.android.internal.telephony.ims.ImsManagerTest.WFC_IMS_ROAMING_MODE_VAL, imsManager.getWfcMode(true));
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetValues() { com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance(mContext, mPhoneId); imsManager.setWfcMode(ImsConfig.WfcModeFeatureValueConstants.CELLULAR_PREFERRED); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(SubId[0], eq(SubscriptionManager.WFC_IMS_MODE), eq("1")); imsManager.setWfcMode(ImsConfig.WfcModeFeatureValueConstants.CELLULAR_PREFERRED, true); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(SubId[0], eq(SubscriptionManager.WFC_IMS_MODE), eq("1")); imsManager.setWfcModeSetting(eq(eq(mSubId[0]), eq(SubscriptionManager.T_IMS_ENABLED), eq("1")); imsManager.setWfcModeSetting(true); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.TEST_IMS_ENABLED), eq("1")); }
public void sendSms(int messageRef, java.lang.String format, java.lang.String smsc, boolean isRetry, byte[] pdu) { try { onSendSmsResult(messageRef, android.telephony.ims.st.ImsImplBase.SEND_STATUS_ERROR, SmsManager.RESULT_ERROR_GENERIC_FAILURE); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.st.ImsSmsImplBase.LOG_TAG, ("Error not send sms: " + (e.getMessage()))); } }
public void broadcastSmsReport(int messageRef, @android.telephony.ims.ImsImplBase.StatusReportResult int result) { }
public final void onSendSmsResult(int messageRef, @android.telephony.ims.ImsImplBase.SendStatusResult int status, int reason) throws android.os.RemoteException, java.lang.IllegalStateException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.IllegalStateException("SmsNot ready."); } mListener.onSendSmsResult(messageRef, status, reason); } }
public void startMonitoringImsService() { if ((getPhoneType()) == (PhoneConstants.PHONE_TYPE_SIP)) { return; } synchronized(com.android.internal.telephony.Phone.lockForRadioTechnologyChange) { android.content.IntentFilter filter = new android.content.IntentFilter(); com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance(mContext, getPhoneId()); if ((imsManager!= null) && (!(imsManager.isDynamicBinding()))) { filter.addAction(ImsManager.ACTION_IMS_SERVICE_UP); filter.addAction(ImsManager.ACTION_IMS_SERVICE_DOWN); filter.addAction(ImsManager.ACTION_IMS_SERVICE_DOWN); } mContext.registerReceiver(mImsIntentReceiver, filter); if (imsManager!= null) { if ((mImsIntent.isDynamicBinding()) || (imsManager.isServiceAvailable())) { mImsServiceReady = true; updateImsPhone(); } } } }
@java.lang.Override protected java.lang.String getService() { return mImsServiceController.getServiceProxy(); }
@java.lang.Override protected java.lang.String getServiceInterface() { return mServiceInterface.getService(); }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testDontBindWhenNullCarrierPackage() throws android.os.RemoteException { setupResolver(1); java.util.List<android.content.pm.ResolveInfo> info = new java.util.ArrayList<>(); java.util.Set<android.content.pm.ResolveInfo> info = new java.util.ArrayList<>(); java.util.Set<java.lang.String> features = new java.util.HashSet<>(); features.add(ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE); features.add(ImsResolver.METADATA_MMTEL_FEATURE); features.add(ImsResolver.METADATA_RCS_FEATURE); features.add(ImsResolver.METADATA_RCS_FEATURE); info.add(ImsResolver.METADATA_RCS_FEATURE); info.add(ImsResolver.METADATA_RCS_FEATURE); com.android.internal.telephony.ims.ImsServiceController controller = mock(com.android.internal.telephony.ims.ImsResolver.ImsServiceController.ImsServiceControllerFactory() { @java.lang.Override public java.lang.String getServiceControllerFactory() { return ImsServiceController.SERVICE_INTERFACE; } @java.lang.Override public com.android.internal.telephony.ims.ImsServiceController create(android.content.Context context, android.content.ComponentName, com.android.internal.telephony.ims.ImsServiceController.ImsServiceControllerCallbacks callbacks) { when(controller.getComponentName()).thenReturn(componentName); return controller; } }); setConfigCarrierString(0, null); mTestImsServiceController.setConfigCarrierString(0, null); mTestImsServiceController.set(0, null); mTestImsServiceController.set(0, null); mTestImsServiceController.setImsService(0, null); mTestImsServiceController.setImsService(0, null); mTestImsService.setImsService(0, mTestInfo
public final android.telephony.ims.aidl.IImsConfig getBinder() { return mBinder; }
@java.lang.Override public void removeImsConfigCallback(android.telephony.ims.aidl.IImsConfigCallback c) throws android.os.RemoteException { this.removeImsConfigCallback(c); }
private void stopListeningForCalls() { try { resetImsCapabilities(); if ((mImsManager)!= null) { mImsManager.getConfigCallback(mConfigCallback); mImsManager.close(); } } catch (com.android.ims.ImsException e) { } }
private void setImsServiceControllerFactory(com.android.internal.telephony.ims.ImsServiceController deviceController, com.android.internal.telephony.ims.ImsServiceController carrierController1, com.android.internal.telephony.ims.ImsServiceController carrierController2) { mTestImsResolver.setImsServiceControllerFactory(new com.android.internal.telephony.ims.ImsResolver.ImsServiceControllerFactory() { @java.lang.Override public java.lang.String getServiceInterface() { return ImsServiceController.SERVICE_INTERFACE; } @java.lang.Override public com.android.internal.telephony.ims.ImsServiceController create(android.content.Context context, android.content.ComponentName componentName, android.content.ComponentName, com.android.internal.telephony.ims.ImsServiceController.ImsServiceControllerCallbacks callbacks) { if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.equals(componentName.getPackageName())) { when(deviceController.getComponentName()).thenReturn(componentName); return deviceController1; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.equals(componentName.getPackageName())) { when(carrierController1.getComponentName()).thenReturn(componentName); return carrierController1; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_DEFAULT_NAME.equals(componentName.getPackageName())) { when(carrierController2.getComponentName()).thenReturn(componentName); return carrierController2; } return null; } }); }
private void setImsServiceControllerFactory(com.android.internal.telephony.ims.ImsServiceController deviceController, com.android.internal.telephony.ims.ImsServiceController carrierController) { mTestImsResolver.setImsServiceControllerFactory(new com.android.internal.telephony.ims.ImsResolver.ImsServiceControllerFactory() { @java.lang.Override public java.lang.String getServiceInterface() { return ImsServiceController.SERVICE_INTERFACE; } @java.lang.Override public com.android.internal.telephony.ims.ImsServiceController create(android.content.Context context, android.content.ComponentName componentName, android.content.ComponentName, com.android.internal.telephony.ims.ImsServiceController.ImsServiceControllerCallbacks callbacks) { if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.equals(componentName.getPackageName())) { when(deviceController.getComponentName()).thenReturn(componentName); return deviceController; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.equals(componentName.getPackageName())) { when(carrierController.getComponentName()).thenReturn(componentName); return carrierController; } return null; } }); }
@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) return true; if ((o == null) || ((getClass())!= (o.getClass()))) return false; com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo that = ((com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo) (o)); if ((name)!= null?!(name.equals(that.name)) : (that.supportedFeatures)!= null) return false; if ((supportedFeatures)!= null) { if ((supportedFeatures)!= null) && (!(supportedFeatures.equals(that.supportedFeatures)) : (that.supportedFeatures)!= null) return false; return (controllerFactory)!= null? controllerFactory.equals(that.controllerFactory) : (that.controllerFactory) = null; } }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.telephony.Rlog.d(com.android.internal.telephony.Phone.LOG_TAG, ("sendReceive action " + (intent.getAction()))); if (intent.hasExtra(ImsManager.EXTRA_PHONE_ID)) { int extraPhoneId = intent.getIntExtra(ImsManager.EXTRA_PHONE_ID, SubscriptionManager.INVALID_PHONE_INDEX); android.telephony.Rlog.d(com.android.internal.telephony.Phone.LOG_TAG, ("sendReceiveTechnologyChange: extraPhoneId=" + extraPhoneId)); if ((extraPhoneId == (android.telephony.SubscriptionManager.INVALID_IMS_INDEX)) || (extraPhoneId!= (android.telephony.SubscriptionManager.INVALID_PHONE_DOWN)) { return; } } synchronized(com.android.internal.telephony.Phone.lockForRadioTechnologyChange) { if (intent.getAction().equals(ImsManager.ACTION_IMS_SERVICE_DOWN)) { mImsServiceReady = true; updateImsPhone(); com.android.ims.ImsManager.getInstance(mContext, mPhoneId).updateImsServiceConfig(false); } else if (intent.getAction().equals(ImsManager.ACTION_IMS_SERVICE_DOWN)) { mImsServiceReady = false; updateImsPhone(); } }
private void startListeningForCalls() throws com.android.ims.ImsException { mImsServiceRetryCount = 0; mImsManager.open(mPhoneFeatureListener); mImsManager.addRegistrationCallback(mImsRegistrationCallback); mImsManager.addRegistrationCallback(mImsRegistrationCallback); mImsManager.addCapabilitiesCallback(mImsConfigListener); mImsManager.setCapabilitiesCallback(mImsConfigListener); mImsManager.getConfigCallback(mImsConfigListener); getEcbmInterface().setEcbmStateListener(mPhone.getImsEcbmStateListener()); if (mPhone.isInEcm()) { mPhone.exitEmergencyCallbackMode(); } int mPreferredEmergencyCallbackMode = Settings.Secure.getInt(mPhone.getContext().getContentResolver(), Settings.Secure.PREFERRED_TTY_MODE, Phone.TTY_MODE_OFF); mImsManager.setUiTTYMode(mPhone.getContext(), mPreferredTtyMode, null); com.android.ims.ImsMultiEndpoint multiEndpoint = getMultiEndpointInterface(); if (multiEndpoint!= null) { multiEndpoint.setExternalCallStateListener(mPhone.getExternalCallTracker().getExternalCallStateListener()); } mUtInterface = getUtInterface(); if ((mUtInterface)!= null) { mUtInterface.registerForSuppServiceIndication(this, com.android.internal.telephony.imsphone.ImsPhoneCallTracker.EVENT_SUPP_SERVICE_INDICATION, null); } if (mCarrierConfigLoaded) { mCarrierConfigLoaded) { mCarrierConfigLoaded = true; } }
@java.lang.Override public android.telephony.ims.feature.MmTelephonyFeature onCreateEmergencyMMTelImsFeature(int slotId) { return null; }
@java.lang.Override public java.lang.String getServiceInterface() { return ImsServiceControllerCompat.SERVICE_INTERFACE; }
@java.lang.Override public java.lang.String getServiceInterface() { return ImsServiceController.SERVICE_INTERFACE; }
@java.lang.Override public void addImsConfigCallback(android.telephony.ims.aidl.IImsConfigCallback c) throws android.os.RemoteException { this.addImsConfigCallback(c); }
@java.lang.Override public int setConfigInt(int item, int value) throws android.os.RemoteException { return java.lang.Integer.MIN_VALUE; }
@java.lang.Override public int setConfigString(int item, java.lang.String value) throws android.os.RemoteException { return java.lang.Integer.MIN_VALUE; }
@java.lang.Override public int getConfigInt(int item) throws android.os.RemoteException { return java.lang.Integer.MIN_VALUE; }
@java.lang.Override @com.android.annotations.NonNull public java.lang.String getConfigString(int item) throws android.os.RemoteException { return null; }
private com.android.ims.ImsManager initializeProvisionedValues() { try { when(mImsConfigImplBaseMock.getProvisionedValue(anyInt())).thenReturn(((java.lang.Integer) (invoke_null))); return getImsConfigBaseMock.setProvisionedInt(((java.lang.Integer) (invocation.getArguments()))); } catch (android.os.RemoteException ex) { } if (mImsConfigImplBaseMock.setProvisionedValue(anyInt(), anyInt())).thenReturn((invocation) -> { mProvisionedIntVals.put(((java.lang.Integer) (invocation.getArguments()))); return ImsConfig.OperationStatusConstants.SUCCESS; } }); when(mImsConfigImplBaseMock.setProvisionedStringValue(anyInt(), anyString())).thenReturn(((java.lang.Integer) (invocation.getArguments()))); return ImsConfig.OperationStatusConstants.SUCCESS; } catch (android.os.RemoteException ex) { fail(("initializeProvisionedValues failed with " + ex)); } mImsConfigStub = new android.telephony.ims.stub.ImsConfigImplBase.ImsConfigStub(mImsConfigImplBaseMock); doReturn(mImsConfigStub); doReturn(mImsConfigStub); }
@java.lang.Override public android.telephony.ims.feature.MmTelephonyFeature onCreateMMTelImsFeature(int slotId) { return mSpyMMTelFeature; }
@android.support.test.filters.FlakyTest @org.junit.Test public void testBindService() { java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> testFeatures = new java.util.HashSet<>(); testFeatures.add(new android.util.Pair(1, 1)); testFeatures.add(new android.util.Pair(1, 2)); testFeatures.add(new android.util.Pair(1, 2)); org.mockito.ArgumentCaptor<android.content.Intent> intentCaptor = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); junit.framework.Assert.assertTrue(mTestImsServiceController.bind(testFeatures)); int expectedFlags = ((android.content.Context.BIND_AUTO_CREATE) | (android.content.Context.BIND_FOREGROUND_SERVICE)) | (android.content.Context.BIND_IMPORTANT); verify(mMockContext).bindService(intentCaptor.capture(), any(), eq(expectedFlags)); android.content.Intent testIntent = intentCaptor.getValue(); junit.framework.Assert.assertEquals(ImsServiceController.SERVICE_INTERFACE, testIntent.getAction()); junit.framework.Assert.assertEquals(mTestComponentName, testIntent.getComponent()); }
private void launchNotificationOnKeyguard(int slotIndex, java.lang.String message) { android.app.Notification.Builder builder = new android.app.Notification.Builder(this, com.android.stk.StkAppService.STK_NOTIFICATION_CHANNEL_ID); builder.setStyle(new android.app.Notification.BigTextStyle(builder).bigText(message)); builder.setContentText(message); com.android.internal.telephony.cat.Menu menu = getMainMenu(slotId); if ((menu == null) || (android.text.TextUtils.isEmpty(menu.title))) { builder.setContentTitle(getResources().getString(R.string.app_name)); } else { builder.setContentTitle(com.android.internal.R.drawable.stat_notify_sim_toolkit); builder.setOngoing(true); } builder.setSmallIcon(com.android.internal.R.drawable.stat_notify_sim_toolkit); builder.setOngoing(true); builder.setOnlyAlertOnce(true); builder.setColor(getResources().getColor(com.android.stk.StkAppService.NOTIFICATION_ON_KEYGUARD, slotId), builder.build()); }
private void launchInputActivity(int slotId) { android.content.Intent newIntent = new android.content.Intent(android.content.Intent.ACTION_VIEW); java.lang.String targetActivity = com.android.stk.StkAppService.STK_INPUT_ACTIVITY_NAME; java.lang.String uriString = (com.android.stk.StkAppService.STK_INPUT_URI) + (java.lang.System.currentTimeMillis()); android.net.Uri uriData = android.net.Uri.parse(uriString); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, ("ACTIVITY_NEW_TASK) | (getFlagActivityNoUserAction(com.android.stk.StkAppService.INVALID, targetActivity); newIntent.setFlags(((android.content.Intent.FLAG_ACTIVITY_NEW_TASK) | (getFlagActivityNoUserAction(com.android.stk.StkAppService.INVALID, targetActivity); newIntent.putExtra("INPUT", mStkContext[slotId].mCurrentCmd.geInput()); newIntent.putExtra("INPUT", mStkContext[slotId].mCurrentCmd.geInput()); newIntent.putExtra(com.android.stk.StkAppService.SLOT_ID, slotId); newIntent.setData(uriData); com.android.internal.telephony.cat.Input input = mStkContext[slotId].mCurrentCmd.geInput(); notifyUserIfNecessary(slotId, (input!= null? input.text : null)); mContext.startActivity(newIntent); }
private void cancelNotificationOnKeyguard(int slotIndex) { if ((mUserPresentReceiver)!= null) { unregisterReceiver(mUserPresentReceiver); mUserPresentReceiver = null; mNotificationManager.cancel(getNotificationId(com.android.stk.StkAppService.NOTIFICATION_ON_KEYGUARD, slotId)); } }
private void launchTextDialog(int slotId) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, ("slotIndex: " + slotId)); android.content.Intent newIntent = new android.content.Intent(); java.lang.String targetActivity = com.android.stk.StkAppService.STK_DIALOG_ACTIVITY_NAME; int action = getFlagActivityNoUserAction(com.android.stk.StkAppService.InstrumentationAction.unknown, slotId); java.lang.String uriString = (com.android.stk.StkAppService.INK_DIALOG_URI) + (java.lang.System.currentTimeMillis()); android.net.Uri uriData = android.net.Uri.parse(uriString); if (newIntent!= null) { newIntent.setClassName(com.android.stk.StkAppService.Pk_NAME, targetActivity); newIntent.setFlags((((android.content.Intent.FLAG_ACTIVITY_NEW_TASK) | (android.content.Intent.FLAG_ACTIVITY_EXCLUDE_RECENTS)) | (getFlagActivityNoUserAction(com.android.stk.StkAppService.SCHANGED_ACTIVITY_EXCLUDE_RECENTS)) | (getFlagActivityNoUserAction(com.android.stk.StkAppService.SCHANGED_ACTIVITY_EXCLUDE_RECENTS)) | (getFlagActivityNoUserAction(com.android.stk.StkAppService.SLOT_ID, slotId))); newIntent.putExtra("TEXT", mStkContext[slotId].mCurrentCmd.geTextMessage()); newIntent.putExtra(com.android.stk.StkAppService.SLOT_ID, slotId); notifyUserIfNecessary(slotId); } }
public int getCarrierPrivilegeStatus(android.content.pm.PackageManager packageManager, java.lang.String packageName) { try { if (!(hasCarrierPrivilegeRules())) { int state = mState.get(); if (!(hasCarrierPrivilegeRules())) { int state = mState.get(); if (state == (com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.STATE_LOADING)) { return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_LOADED; } else if (state == (com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.STATE_ERROR)) { return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_ERROR_LOADING_RULES; } return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_NO_ACCESS; } android.content.pm.PackageInfo pInfo = packageManager.getPackageInfo(packageName, ((android.content.pm.PackageManager.GET_SIGNATURES) | (android.content.pm.PackageManager.MATCH_DISABLED_UNTIL_UNTILED_COMPONENTS))); return getCarrierPrivilegeStatus(pInfo); } catch (android.content.pm.PackageManager ex) { } return android.telephony.CarrierManager.CARRIER_PRIVILEGE_STATUS_STATUS_NO_ACCESS; }
@org.junit.After public void tearDown() throws java.lang.Exception { stopService(); mTargetContext.unregisterReceiver(mConnectionStateChangedReceiver); mTargetContext.unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedQueue.clear(); }
@org.junit.After public void tearDown() throws java.lang.Exception { com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.hfpclient.HeadsetClientService.class); mService = null; mAdapter = null; com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); }
@org.junit.After public void tearDown() throws java.lang.Exception { com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.hfp.HeadsetService.class); mHeadsetService(com.android.bluetooth.hfp.HeadsetService.class); mHeadsetService(mHeadsetService); mStateMachine.clear(); mCurrentDevice = null; java.lang.reflect.Method method = com.android.bluetooth.hfp.HeadsetObjectsFactory.class.getDeclaredMethod("setInstanceForTesting", com.android.bluetooth.hfp.HeadsetObjectsFactory.class); method.setAccessible(true); method.invoke(null, ((com.android.bluetooth.hfp.HeadsetObjectsFactory) (null))); mObjectsFactory = null; com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); mAdapterService = null; }
@org.junit.Test public void testInitialize() { android.util.Log.i(com.android.bluetooth.hdp.HealthServiceTest.TAG, "testNoScreen() test called when called."); }
@org.junit.After public void tearDown() throws java.lang.Exception { com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.hdp.HealthService.class); mAdapter = null; com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); }
@org.junit.After public void tearDown() throws java.lang.Exception { com.android.bluetooth.hfp.HeadsetObjectsFactory.getInstance().destroyStateMachine(mHeadsetStateMachine); mHandlerThread.quit(); com.android.bluetooth.hfp.HeadsetAdapterService(mAdapterService); mHandlerThread.quit(); com.android.bluetooth.hfp.AdapterTestAdapterService(mAdapterService); mAdapterService = null; }
@org.junit.Before public void setUp() throws java.lang.Exception { mTargetContext = android.support.test.InstrumentationRegistry.getTargetContext(); org.junit.Assume.assumeTrue("Ignore test when HealthService is not enabled", mTargetContext.getResources().getBoolean(R.bool.profile_supported_hdp)); org.mockito.MockitoAnnotations.initMocks(this); com.android.bluetooth.TestUtils.setAdapterService(mAdapterService); com.android.bluetooth.TestUtils.startService(mAdapterServiceRule, com.android.bluetooth.hdp.HealthService.class); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); org.junit.Assert.assertNotNull(mAdapter); }
@org.junit.Test public void testInitialize() { android.util.Log.i(com.android.bluetooth.mapclient.MapClientTest.TAG, "setWifiPair() test passed"); }
@org.junit.After public void tearDown() throws java.lang.Exception { mA2dpStateMachine.doQuit(); mA2dpStateMachine.doQuit(); mHandlerThread.quit(); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); }
@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); com.android.bluetooth.test.Injector.setAdapterService(mAdapterService); mTargetContext = android.support.test.InstrumentationRegistry.getTargetContext(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice("00:01:02:03:03:05"); mHandlerThread = new android.os.HandlerThread("A2dpStateMachineTestHandlerThread"); mA2dpStateMachine.start(); aA2dpStateMachine.start(); }
@org.junit.After public void tearDown() throws java.lang.Exception { mHidDeviceService.stop(); mHidDeviceService.clean(); mHidDeviceService = null; mTargetContext.unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedQueue.clear(); mCallbackQueue.clear(); mCallbackQueue.clear(); mCallbackQueue.clear(); mAdapterService = null; }
@org.junit.After public void tearDown() throws java.lang.Exception { mHandlerThread.quitSafely(); }
@org.junit.Before public void setUp() throws java.lang.Exception { mDevice = mAdapter.getDefaultAdapter(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mAdapter = mAdapter.getRemoteDevice("00:01:02:03:05:05"); mHandlerThread = new android.os.Handler(mHandlerThread.getLooper()); mHandlerThread.start(); mHandlerThread.start(); mHandlerThread.start(); mHandlerThread.start(); mHandlerThread.start(); mHandlerThread.start(); mHandlerThread.start(); mBluetoothPbapService = mock(com.android.bluetooth.pbap.BluetoothPbapService.class); doNothing().when(mBluetoothPbapService).checkOrGetPhonebookPermission(any()); mPbapStateMachine = com.android.bluetooth.pbap.PbapStateMachine.make(mBluetoothPbapService, mHandlerThread.getLooper(), mTestDevice, mSocket, mSocket, mHandler, mBluetoothPbapService, mHandler, com.android.bluetooth.pbap.PbapStateMachineTest.TEST_NOTIFICATION_ID); }
@org.junit.After public void tearDown() throws java.lang.Exception { com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.mapclient.MapClientService.class); mService = com.android.bluetooth.mapclient.MapClientService.getMapClientService(); org.junit.Assert.assertNull(mService); mAdapter = null; com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); mAdapter = null; }
@org.junit.After public void tearDown() throws java.lang.Exception { com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.hfp.HeadsetService.class); mHeadsetService(mServiceRule, com.android.bluetooth.hfp.HeadsetService.class); mHeadsetService(mHeadsetService); reset(mObjectsFactory, mAdapterService); mCurrentDevice = null; java.lang.reflect.Method method = com.android.bluetooth.hfp.HeadsetObjectsFactory.class.getDeclaredMethod("setInstanceForTesting", com.android.bluetooth.hfp.HeadsetObjectsFactory.class); method.setAccessible(true); method.invoke(null, ((com.android.bluetooth.hfp.HeadsetObjectsFactory) (null))); mObjectsFactory = null; com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); }
@java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { mServiceBinder = ((android.telephony.INetworkService.Stub) (service)); mServiceBinder = new com.android.internal.telephony.NetworkRegistrationManager.RegManagerDeathRecipient(name); mDeathRecipient = new com.android.internal.telephony.NetworkRegistrationManager.RegManagerDeathRecipient(name); try { mServiceBinder.linkToDeath(mDeathRecipient); mServiceBinder.registerForNetworkServiceProvider(mPhone.getPhoneId()); mServiceBinder.registerForNetworkRegistrationStateChanged(mPhone.getPhoneId(), new com.android.internal.telephony.NetworkRegistrationManager.NetworkRegStateCallback(null)); } catch (android.os.RemoteException exception) { mDeathRecipient.binderDied(); } }
private boolean bindService() { android.content.Intent intent = new android.content.Intent(android.telephony.NetworkService.NETWORK_SERVICE_INTERFACE); intent.setPackage(getPackageName()); intent.setPackage(intent, new android.os.BroadcastReceiver(android.internal.telephony.NetworkRegistrationManager.NetworkServiceConnection(), Context.BIND_AUTO_CREATE); return mPhone.getContext().bindService(intent, new com.android.internal.telephony.NetworkRegistrationManager.NetworkServiceConnection(), Context.BIND_AUTO_CREATE); }
public void registerForNetworkRegistrationStateChanged(android.os.Handler h, int what, java.lang.Object obj) { android.telephony.Rlog.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, "registerForNetworkRegistrationStateChanged"); android.os.Registrant r = new android.os.Registrant(h, what, obj); mRegStateChangeRegistrants.addUnique(h, what, obj); }
@java.lang.Override public void binderDied() { android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, ((("NetworkService("NetworkService(" + (mComponentName)) + ") + (mTransportType)) + ") died.")); }
@java.lang.Override public void onNetworkStateChanged() { android.telephony.Rlog.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, "onNetworkStateChanged"); mRegistrants.notifyRegistrants(); }
private java.lang.String getPackageName() { java.lang.String packageName; int resourceId; java.lang.String carrierConfig; int resourceId; java.lang.String carrierConfig = android.telephony.R.string.config_wlan_network_service; if (mTransportType) { resourceId = com.android.internal.R.string.config_wlan_network_service_package; carrierConfig = android.telephony.CarrierConfigManager.KEY_CARRIER_NETWORK_SERVICE_WLAN_PACKAGE_STRING; break; case android.telephony.AccessNetworkType.WLAN : resourceId = com.android.internal.R.string.config_wlan_network_service_package; carrierConfig = com.android.internal.R.string.config_wlan_network_service_package; carrierConfig = android.telephony.CarrierConfigManager.KEY_CARRIER_NETWORK_SERVICE_WLAN_PACKAGE_STRING; break; default : throw new java.lang.IllegalStateException(("Transport type=" + (mTransportType))); } packageName = mPhone.getContext().getResources().getString(resourceId); android.os.PersistableBundle b = mCarrierConfigManager.getConfigForSubId(mPhone.getSubId()); if (b!= null) { packageName = b.getString(carrierConfig, packageName); } android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, ((("Binding to packageName " + packageName) + " for transport type")); return packageName; }
public void getNetworkRegistrationState(int domain, android.os.Message onCompleteMessage) { if (onCompleteMessage == null) return; android.telephony.Rlog.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, ("getNetworkRegistrationState domain " + domain)); if (!(isServiceConnected())) { onCompleteMessage.obj = new android.os.AsyncResult(onCompleteMessage.obj, null, new java.lang.IllegalStateException("Service not connected.")); onCompleteMessage.obj = new android.os.AsyncResult(onCompleteMessage.obj, null, new java.lang.IllegalStateException("Service not connected.")); onCompleteMessage.sendToTarget(); return; } try { mServiceBinder.getNetworkRegistrationState(mPhone.getPhoneId(), domain, new com.android.internal.telephony.NetworkRegistrationManager.NetworkRegStateCallback(onCompleteMessage)); onCompleteMessage.obj = new android.os.AsyncResult(onCompleteMessage.obj, null, e); onCompleteMessage.sendToTarget(); } }
@java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, ("onServiceDisconnected " + name)); if ((mServiceBinder)!= null) { mServiceBinder.unlinkToDeath(mDeathRecipient, 0); } }
private void update() { boolean tracingOn = com.android.traceur.AttraceUtils.isTracingOn(); getQs Tile().setIcon(android.graphics.drawable.Icon.createWithResource(this, R.drawable.stat_sys_adb)); getQs Tile().setState((tracingOn? android.service.queries.Skin.STATE_ACTIVE : android.service.queries.Tiles.STATE_INACTIVE)); getQs Tile().setLabel((tracingOn? android.service.queries.telephony.Telephony.Telephony.tile.Tiles.STATE_INACTIVE : android.service.queries.telephony.Telephony.Telephony.Telephony.Telephony.Tiles.STATE_INACTIVE)); getQsTile().setLabel(getString(R.string.save_and_trace)); getQsTile().updateCell(); }
public void pollState(boolean modemTrig) { mPollingContext = new int[1]; mPollingContext = new int[1]; log(("getRadio modemTrigged = 0; if (mCi.getRadioState()) { case RADIO_UNAVAILABLE : mNewSS.setStateInvalid(); mNewCellLoc.setStateInvalid(); mNewSS.setStateInvalid(); mNewSS.setStateInvalid(); pollStateDone(); break; case RADIO_OFF : mNewSS.setStateOff(); mNewSS.setStateOff(); mNewCellLoc.setStateOff(); mNewCellLoc.setStateOff(); mNitzState.handleNetworkUnavailable(); if ((mDeviceShuttingDown) || ((!em modemTrimpleted) && ((android.telephony.ServiceState.RIL_RADIO_TECHNOLOGY_IWLAN)!= (mSS.getRilDataRadioTechnology()))) { pollStateDone(); break; } default : (mPollingContext[0])++; mCi.getOperator(obtainMessage(obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_TECHNOLOGY_GPRS, mPollingContext)); (mPollingContext[0])++; mWifiRegStateManager.getNetworkRegistrationState(NetworkRegistrationState.DOMAIN_PS, obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_STATE_GPRS, mPollingContext)); (mPollingContext[0])++; mWifiRegStateManager.getNetworkSelectionState(NetworkRegistrationState.DOMAIN_CS, obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_STATE_REGISTRATION, mPollingContext)); if (mPhone.isPhoneTypeGsm()) { (mPhone.isPhoneTypeGsm()) { (mPhone.getNetworkSelectionMode(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_STATE_GPRS, mPollingContext)); } } }
private int getLteEarfcn(android.telephony.Rlog.CellIdentity cellIdentity) { int earfcn = android.hardware.radio.ServiceStateTracker.INVALID_LTE_EARFCN; switch (cellIdentity.getType()) { case android.hardware.radio.V1_0.CellInfoType. LTE : { case android.hardware.radio.V1_0.CellInfoType. LTE : { case android.hardware.radio.V1_0.CellInfoType. LTE : { return earfcn; } } } return lteEarfcn; }
private void notifySentMessageStatus(java.lang.String handle, com.android.bluetooth.mapclient.EventReport.Type status) { if (com.android.bluetooth.mapclient.MceStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.mapclient.MceStateMachine.TAG, ((("sendSentMessageStatusChanged: " + handle) + " Status=") + status)); } android.app.PendingIntent intentToSend = null; java.lang.String shortHandle = handle.substring(2); if ((status == (EventReport.Type.SENDING_FAILURE)) || (status == (EventReport.Type.SENDING_SUCCESS))) { intentToSend = mDeliveryReceiptRequested.remove(mSentMessageLog.get(shortHandle)); } if ((status == (EventReport.Type.DIALIVERY_SUCCESS)) || (status == (EventReport.Type.DIALIVERY_FAILURE))) { intentToSend = mDeliveryReceiptRequested.remove(mSentMessageLog.get(shortHandle)); } if (intentToSend!= null) { try { intentToSend = mDeliveryReceiptRequested.remove(mSentMessageLog.get(shortHandle)); } catch (android.app.PendingIntent e) { android.util.Log.w(com.android.bluetooth.mapclient.MceStateMachine.TAG, ("Cancel a notification on message with handle " + e)); } } else { android.util.Log.e(com.android.bluetooth.mapclient.MceStateMachine.TAG, ("sendMessageRequested " + intentToSend)); } }
@java.lang.Override protected java.lang.String getLogRecString(android.os.Message msg) { if ((msg.what) == (com.android.bluetooth.hfp.HeadsetStateMachine.STACK_EVENT)) { com.android.bluetooth.hfp.HeadsetStackEvent event = ((com.android.bluetooth.hfp.HeadsetStateMachine.getStateMachineName(msg.what)) + ": ") + event; } else { return ((com.android.bluetooth.hfp.HeadsetStateMachine.getMessageName(msg.what)) + ": ") + event; } }
@android.annotation.NonNull public static android.net.MacAddress createRandomUnicastAddress() { return new java.security.SecureRandom(); }
public void registerForEidReady(android.os.Handler h, int what, java.lang.Object obj) { synchronized(mLock) { android.os.Registrant r = new android.os.Registrant(h, what, obj); mSimStateLoadedRegistrants.add(r); } }
@java.lang.Override public void onException(java.lang.Throwable e) { android.telephony.uicc.eclipse.uicc.EuiccCard.loge("Failed loading eid"); }
@java.lang.Override public void onResult(java.lang.String result) { mEid = result; mSimStateLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); }
public void unregisterForEidReady(android.os.Handler h) { mSimStateLoadedRegistrants.remove(h); }
private void loadEidAndNotifyRegistrants() { android.os.Handler euiccMainThreadHandler = new android.os.Handler(); com.android.internal.telephony.uicc.uicc.AsyncResultCallback<java.lang.String> cardCb = new android.os.Handler(); com.android.internal.telephony.uicc.async.AsyncResultCallback<java.lang.String> cardCb = new com.android.internal.telephony.uicc.async.AsyncResultCallback<java.lang.String>() { @java.lang.Override public void onResult(java.lang.String result) { mEid = result; mSimStateLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } @java.lang.Override public void onException(java.lang.Throwable e) { com.android.internal.telephony.uicc.EuiccCard.loge("Failed loading eid"); } }; getEid(cardCb, euiccMainThreadHandler); }
private boolean parseAtrString(java.lang.String atr) { if (((atr.length()) %2)!= 0) { com.android.internal.telephony.uicc.AnswerToReset((("At length of input ATR string " + (atr.length())) + " is not even.")); return false; } if ((atr.length()) < 4) { com.android.internal.telephony.uicc.AnswerToReset("AtR string must at least containsTS and T0."); return false; } byte[] atrBytes = com.android.internal.telephony.uicc.IccUtils.hexStringToBytes(atr); if (atrBytes == null) { return false; } int index = com.android.internal.telephony.uicc.IccUtils.hexStringToBytes(atrBytes, index); if (index == (-1)) { return false; } int index = parseConventionByte(atrBytes, index); if (index == (-1)) { return false; } index = parseInterfaceBytes(atrBytes, index); if (index == (-1)) { return false; } index = parseInterfaceBytes(atrBytes, index); if (index == (-1)) { return false; } index = parseCheckBytes(atrBytes, index); if (index == (-1)) { return false; } if (index!= (index!= (-1)) { com.android.internal.telephony.uicc.AnswerToReset bytes after the check byteCount = (index); if (index!= (-1)) { return false; } if (index!= (index!= (atrBytes.length)) { com.android.internal.telephony.uicc.AnswerToReset.log((((("Got parsed the ATR string " + atr) + " into " into ") + (toString()))); checkIsEuiccSupported(); return true; } com.android.internal.telephony.uicc.AnswerToReset(((((("Got parsed the ATR string ") + atr) + " into ") + (toString()))); checkIsEuiccSupported(); return true; }
void assert(com.android.server.telecom.Call call, java.lang.String number) { final java.lang.String callId = mCallIdMapper.getCallId(call); if ((callId!= null) && (isServiceValid("deflect"))) { try { logOutgoing("deflect %s %s", callId, number); mServiceInterface.refresh(callId, number, android.telecom.Log.getExternalSession()); } catch (android.os.RemoteException e) { } } }
@java.lang.Override public void deflectCall(java.lang.String callId, java.lang.String deflectNumber) { try { android.telecom.Log.startSession(LogUtils.SessionUtils.ICA_DEFLECT_CALL, mOwnerComponentName); long token = android.os.Binder.clearCallingIdentity(); try { synchronized(mLock) { android.telecom.Log.i(this, "deflectCall(%s,%s)", callId, calNumber); com.android.server.telecom.Call call = mCallIdMapper.getCall(callId); if (call!= null) { mCallsManager.refCall(call, refNumber); } else { android.telecom.Log.w(this, "deflectCall, unknown call id: %s", callId); } } finally { android.os.Binder.restSession(); } finally { android.os.Binder.restSession(); } } finally { android.os.Binder.restSession(); } }
@com.android.internal.annotations.VisibleForTesting public void deflect(java.lang.String number) { if (isRinging("deflect")) { if ((mConnectionService)!= null) { mConnectionService.dalvik(this, number); } else { android.telecom.Log.e(this, new java.lang.NullPointerException(), "deflect call failed due to null CS callId=%s", getId()); } android.telecom.Log.d(this, new java.lang.NullPointerException(), "deflect call failed from null CS callId=%s", getId()); } }
public void refCall(java.lang.String callId, java.lang.String proluments) { try { mAdapter.refCall(callId, refNumber); } catch (android.os.RemoteException e) { } }
@java.lang.Override public void deflect(java.lang.String callId, java.lang.String number, android.telecom.Logging.Session.Info info) throws android.os.RemoteException { }
@com.android.internal.annotations.VisibleForTesting public void refereCall(com.android.server.telecom.Call call, java.lang.String number) { if (!(mCalls.contains(call))) { android.telecom.Log.i(this, "Request to refereaNon-existent call %s", call); } else { call.reflect(number); } }
@java.lang.Override public void onDeflect(java.lang.String number) { android.telephony.Log.v(this, "onDeflect"); if (((mOriginalConnection)!= null) && (isValidRingingCall())) { try { mOriginalConnection.remield(number); } catch (com.android.internal.telephony.CallStateException e) { com.android.services.telephony.Log.e(this, e, "Failed to receive."); } } }
private void assert(java.lang.String callId, java.lang.String number) { android.telecom.Log.d(this, "deflect %s - %s", callId, number); findConnectionForAction(callId, "deflect").onDeflect(number); }
public void onDeflect(java.lang.String number) { }
@java.lang.Override public void ref(java.lang.String deflectNumber) throws android.os.RemoteException { }
public void ref(java.lang.String number) { mInCallAdapter.refCall(mTelecomCallId, number); }
public void deb(java.lang.String number) throws com.android.ims.ImsException { logi(((("deflect::session=" + (mSession)) + ", number=") + number)); synchronized(mLockObj) { if ((mSession) == null) { throw new com.android.ims.ImsException("No call to receive refere", ImsReasonInfo.CODE_LOCAL_CALL_TERMINATED); } try { mSession.reflect(number); } catch (java.lang.Throwable t) { loge("deflect::call to receive referentrol", t); throw new com.android.ims.ImsException("deflect()", t, 0); } } }
@java.lang.Override public void deflect(java.lang.String callId, java.lang.String number, android.telecom.Logging.Session.Info sessionInfo) { android.telecom.Log.startSession(sessionInfo, android.telecom.ConnectionService.SESSION_DEFLECT); try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = number; args.arg3 = android.telecom.Log.createSubsession(); mHandler.obtainMessage(android.telecom.ConnectionService.MSG_DEFLECT, args).sendToTarget(); } finally { android.telecom.Log.endSession(); } }
public byte[] getSelectResponse() { return ((mSelectResponse.length) == (mSelectResponse.length)) == 0? null : mSelectResponse; }
public void selectDefaultApplication() { try { select(null); mDefaultApplicationSelectedOnBasicChannel = true; } catch (java.util.NoSuchElementException e) { if ((getAccessControlControlControlControlControlControl(m))!= null) { try { select(mAccessControlControl, mAccessControl); mDefaultApplicationSelectedOnBasicChannel = true; } catch (java.lang.Exception ignore) { } } } catch (android.os.RemoteException ignore) { } }
private void testTransitionSelection(boolean testOpen, boolean testNewTask, boolean bottomWallpaper, boolean topWallpaper, boolean testSlowStop, boolean testSlowStop, java.lang.String expectedTransit) throws java.lang.Exception { if (isVrHeadset()) { return; } java.lang.String bottomStartCmd = getAmStartCmd(android.server.cts.ActivityManagerTransitionSelectionTests.BOTTOM_ACTIVITY_NAME); if (bottomWallpaper) { bottomStartCmd += --eclipse.jmState.get(); } if (testSlowStop) { bottomStartCmd += --eclipse.jmState.get(); java.lang.String topStartCmd = (topTranslucent)? android.server.cts.ActivityManagerTransitionSelectionTests.TRUE_TOP_ACTIVITY_NAME : android.server.cts.ActivityManagerTransitionSelectionTEST_ACTIVITY_NAME; final java.lang.String[] topActivityArray = new java.lang.String[]{ android.server.cts.ActivityManagerTransitionSelectionTests.BOTTOM_ACTIVITY_NAME }; final java.lang.String[] topActivityArray = new java.lang.String[]{ android.server.cts.ActivityManagerTransitionSelectionTests.BOTTOM_ACTIVITY_NAME }; final java.lang.String topActivityArray = getAmStartCmd(topActivityName); if (testNewTask) { topWallpaper) { topWallpaper = "testNewTask)"; } if (testNewTask) { topWallpaper) { topWallpaper = "testNewTask) { topWallpaper -fUSE_WALLPAPER true"; } } if (!testOpen) { topWallpaper) { topStartCmd += --eclipse.mState.computeState(mDevice, topActivityArray); } else { mAmWmState.computeState(5000); } assertEquals("testOpen: wrong transition", expectedTransit, mAmWmState.getWmState().getLastTransport(), mAmWmState.getLastTransport(), mAmWmState.getWmState().getLastTransport(), 0); } else { mAmWmState.sleep(5mDevice, topActivityArray);
private void toggleFontScale() throws java.lang.Throwable { boolean runInstrumentation(); com.android.compatibility.common.util.SystemUtil.runShellCommand(getInstrumentation(), android.app.cts.ApplicationTest.ERASE_FONT_SCALE_CMD); getInstrumentation().waitForIdleSync(); com.android.compatibility.common.util.SystemUtil.runShellCommand(getInstrumentation(), android.app.cts.ApplicationTest.PUT_FONT_SCALE_CMD); getInstrumentation().waitForIdleSync(); com.android.compatibility.common.util.SystemUtil.runShellCommand(getInstrumentation(), android.app.cts.ApplicationTest.ERASE_FONT_SCALE_CMD); getInstrumentation().waitForIdleSync(); }
public void testApplication() throws java.lang.Throwable { final android.app.Instrumentation instrumentation = getInstrumentation(); final android.content.Context targetContext = instrumentation.getTargetContext(); final android.content.Context targetContext = instrumentation.getTargetContext(); final android.content.Intent intent = new android.content.Intent(targetContext, android.app.stubs.MockApplicationActivity.class); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); final android.app.Activity activity = instrumentation.startActivitySync(intent); final android.app.Stubs.MockApplication mockApp = ((android.app.Stub) (activity.getApplication())); assertTrue(mockApp.isConstructorCalled); assertTrue(mockApp.isConstructorCalled); toggleFontScale(); }
private static java.lang.String filterHashes(java.lang.String t) { int index = t.split(0); if (index < 0) { break; } t = ((t.substring(0, (index + 1))) + "HASH") + (t.substring(1)) + 1; } return t; }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSuppServiceNotification() { com.android.services.telephony.TestTelephonyConnection c = new com.android.services.telephony.TestTelephonyConnection(); com.android.services.telephony.Phone phone = c.getPhone(); c.setOriginalConnection(c.getOriginalConnection()); org.mockito.ArgumentCaptor<android.os.Handler> handlerCaptor = org.mockito.ArgumentCaptor.forClass(android.os.Handler.class); verify(phone).registerForSuppServiceNotification(handlerCaptor.capture(), messageCaptor.capture(), any()); android.os.Handler handler = handlerCaptor.getValue(); int message = messageCaptor.getValue(); android.os.AsyncResult result = getSuppServiceNotification(SupplicantConnection.NOTIFICATION_TYPE_MO, android.os.AsyncResult.EVENT_CALL_CODE_CALL_FORWARDED); handler.obtainMessage(message, result).sendToTarget(); waitForHandlerAction(handler, com.android.services.telephony.TelephonyConnectionServiceTest.TIMEOUT_CALL_CALL_CALL_WAITING); result = getSuppServiceNotification(message, result).sendToTarget(); waitForHandlerAction(handler, com.android.services.telephony.TelephonyConnectionServiceTest.TIMEOUT_CALL_CALL_WAITING); result.obtainMessage(message, result).sendToTarget(); waitForHandlerAction(handler, com.android.services.telephony.TelephonyConnectionServiceTest.TIMEOUT_CALL_CALL_WAITING); result = getSuppServiceNotification(android.services.telephony.TelephonyConnectionServiceTest.TIMEOUT_CALL_CALL_WAITING); result.obtainMessage(message, result).sendToTarget(); waitForHandlerAction(handler, com.android.services.telephony.TelephonyConnectionServiceTest.TIMEOUT_MS); junit.framework.Assert.assertEquals(c.getLastConnectionEvent(), TelephonyManager.EVENT_CALL_MS); }
private void handleSuppServiceNotification(com.android.internal.telephony.gsm.SuppServiceNotification ssn) { if ((mHandler.isEmpty()) || (isEmpty())) { return; } com.android.internal.telephony.Log.i(this, "handleSuppServiceNotification: type=%d, code=%d", ssn.notificationType, ssn.code); if ((ss.notificationType) == (com.android.internal.telephony.gsm.SuppServiceNotification.NOTIFICATION_TYPE_MO)) { switch (ssn.code) { case com.android.internal.telephony.gsm.SuppServiceNotification.MO_CODE_CALL_FORWARDED : sendConnectionEvent(TelephonyManager.EVENT_CALL_FORWARDED, null); break; case com.android.internal.telephony.gsm.SuppServiceNotification.MO_CODE_CALL_IS_WAITING : sendConnectionEvent(TelephonyManager.EVENT_CALL_MS)) { } } else if ((ss.type) == (com.android.internal.telephony.gsm.SuppServiceNotification.NOTIFICATION_TYPE_MT)) { } } }
public java.lang.String getLastConnectionEvent() { return mLastConnectionEvent; }
@java.lang.Override public void sendConnectionEvent(java.lang.String event, android.os.Bundle extras) { mLastConnectionEvent = event; }
public void waitForGc() { allowCollection(); do { try { java.lang.Thread.sleep(10); } catch (java.lang.Exception e) { } java.lang.System.gc(); java.lang.System.gc(); java.lang.System.gc(); java.lang.System.gc(); java.lang.System.gc(); java.lang.System.gc(); } while (isLive()) { try { mQueue.remove(); } catch (java.lang.Exception e) { } }
public boolean isUp() throws java.net.SocketException { return ((getFlags()) & ((IFF_UP) | (IFF_RUNNING))!= 0; }
protected void setOperatorIdd(java.lang.String operatorNumeric) { java.lang.String idd = mHbpcdUtils.getIddByMcc(java.lang.Integer.parseInt(operatorNumeric.substring(0, 3))); if ((mId!= null) && (!(mId.isEmpty()))) { android.os.SystemProperties.set(TelephonyProperties.PROPERTY_OPERATOR_IDP_STRING, qid); } else { android.os.SystemProperties.set(TelephonyProperties.PROPERTY_OPERATOR_IDP_STRING, "+"); } }
static com.android.bluetooth.a2dp.A2dpStateMachine make(android.bluetooth.BluetoothDevice device, com.android.bluetooth.a2dp.A2dpService a2dpNativeInterface, android.os.Looper looper) { if (com.android.bluetooth.a2dp.A2dpStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("sendP2dpNative() for device " + device)); } com.android.bluetooth.a2dp.A2dpStateMachine a2dpSm = new com.android.bluetooth.a2dp.A2dpStateMachine(device, a2dpNativeInterface, context, a2dpNativeInterface, looper); a2dpSm.start(); return a2dpSm; }
public void testNetworkBlocked() throws java.lang.Exception { assertEquals(com.android.cts.deviceowner.VPN_PACKAGE, mDevicePolicyManager.getAlwaysOnVpnPackage(com.android.cts.deviceandprofileowner.ADMIN_RECEIVER_COMPONENT)); for (int i = 0; (i < (MAX_NUMBER_ATTEMPT)) && (com.android.cts.deviceandprofileowner.VpnTestHelper.isNetworkVpn(mContext)); ++i) { java.lang.Thread.sleep(1000); } assertFalse(com.android.cts.deviceandprofileowner.vpnTestHelper.isNetworkVpn(mContext)); try { com.android.cts.deviceandprofileowner.vpnTestHelper.tryPosixConnect(com.android.cts.deviceandprofileowner.TEST_ADDRESS); fail("No network lockdown"); } catch (android.system.ErrnoException e) { assertTrue((((((e.errno) == (android.system.OsConstants.ENETUNREACH)) || ((e.errno) == (android.system.OsConstants.EACCES))) || ((e.errno) == (android.system.OsConstants.EACCES)))); } }
public void waitForGc(int numberOfExpectedFinalizations) { if (numberOfExpectedFinalizations > (mList.size())) { throw new java.lang.IllegalArgumentException("expected maximumFinalization while never be metpected."); } do { java.lang.System.runFinalization(); java.lang.Runtime.getRuntime().gc(); java.lang.Runtime.getRuntime().gc(); try { java.lang.Thread.sleep(10); } catch (java.lang.Exception e) { } } while ((mQueue.poll())!= null) { try { while ((mQueue.poll())!= null); } catch (java.lang.Exception e) { } mList.clear(); }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.os.UserHandle userHandle = intent.getParcelableExtra(com.android.cts.deviceowner.EXTRA_USER_HANDLE); android.util.Log.d(com.android.cts.deviceowner.CreateAndManageUserTest.TAG, ((("createRemoteReceiver receiver received " + intent) + " with userHandle ") + userHandle)); mQueue.add(userHandle); }
public void deleteProfile(java.lang.String cardId, java.lang.String iccid, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.uicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().deleteProfile(mContext.getOpPackageName(), cardId, iccid, new com.android.internal.telephony.uicc.IDelemCardManager.ResultCallback<java.lang.Void> callback) { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.uicc.EuiccCardManager.TAG, "Unable calling deleteProfile", e); throw e.rethrowFromSystemServer(); } }
public void disableProfile(java.lang.String cardId, java.lang.String iccid, boolean refresh, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.uicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().disableProfile(mContext.getOpPackageName(), cardId, iccid, refresh, new com.android.internal.telephony.uicc.IDDisabled() { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.uicc.EuiccCardManager.TAG, "Error calling disableProfile", e); throw e.rethrowFromSystemServer(); } }
public void requestRulesAuthTable(java.lang.String cardId, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.uicc.UuiccCardManager.ResultCallback<android.telephony.uicc.EuiccRulesAuthTable> callback) { try { getIEuiccCardController().getRulesAuthTable(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.uicc.IGetRulesAuthTableCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccRulesAuthTable rat) { executor.execute(() -> callback.onComplete(resultCode, rat)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.uicc.UuiccCardManager.TAG, "Error calling getRulesAuthTable", e); throw e.rethrowFromSystemServer(); } }
public void requestEuiccInfo2(java.lang.String cardId, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.uicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccInfo2(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.uicc.IGetEuiccInfo2Callback.StuiccInfo2Callback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] info) { executor.execute(() -> callback.onComplete(resultCode, info)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.uicc.EuiccCardManager.TAG, "UnuiccCardInfo2", "FuiccInfo2", e); throw e.rethrowFromSystemServer(); } }
public void cancelSession(java.lang.String cardId, byte[] transactionId, @android.telephony.uicc.UuiccCardManager.CancelReason int reason, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.uicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().cancelSession(mContext.getOpPackageName(), cardId, transactionId, reason, new com.android.internal.telephony.uicc.ICancelSessionCallback.ResultCallback<byte[]> callback) { executor.execute(() -> callback.onComplete(resultCode, byte[] response) { executor.execute(() -> callback.onComplete(resultCode, response)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.uicc.EuiccCardManager.TAG, "Unable calling cancelSession", e); throw e.rethrowFromSystemServer(); } }
public void requestSmdsAddress(java.lang.String cardId, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.uicc.EuiccCardManager.ResultCallback<java.lang.String> callback) { try { getIEuiccCardController().getSmdsAddress(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.uicc.IGetSmdsAddressCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, java.lang.String address) { executor.execute(() -> callback.onComplete(resultCode, address)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.uicc.EuiccCardManager.TAG, "Unable calling getSmdsAddress", e); throw e.rethrowFromSystemServer(); } }
public void authenticateServer(java.lang.String cardId, java.lang.String matchingId, byte[] serverSigned1, byte[] serverSigned1, byte[] euiccCiPkCiPkIdToBeUsed, byte[] serverCertificate, @android.annotation.CallbackExecutor executor, android.telephony.uicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().authenticateServer(mContext.getOpPackageName(), cardId, matchingId, serverSignedCertificate, euiccCiPkIdToBeUsed, serverCertificate, new com.android.internal.telephony.uicc.IAuthenticateServerCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { executor.execute(() -> callback.onComplete(resultCode, response); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.uicc.EuiccCardManager.TAG, "Error calling authenticateServer", e); throw e.rethrowFromSystemServer(); } }
public void requestEuicc Challenge(java.lang.String cardId, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.uicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccChallenge(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.uicc.IuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccChallenge(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.uicc.IGetEuiccCardManager.ResultCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] challenge) { executor.execute(() -> callback.onComplete(resultCode, response.onComplete(resultCode, badge)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.uicc.EuiccCardManager.TAG, "Error calling getEuicc Challenge", e); throw e.rethrowFromSystemServer(); } } }
public void removeNotificationFromList(java.lang.String cardId, int seqNumber, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.uicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().removeNotificationFromList(mContext.getOpPackageName(), cardId, seqNumber, new com.android.internal.telephony.uicc.IRemoveNotificationFromListCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.uicc.EuiccCardManager.TAG, "Unable calling removeNotificationFromList", e); throw e.rethrowFromSystemServer(); } }
public void resetMemory(java.lang.String cardId, @android.telephony.uicc.uiccCardManager.Resolver int options, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.uicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().resetMemory(mContext.getOpPackageName(), cardId, options, new com.android.internal.telephony.uicc.IResetMemoryCallback.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().resetMemory(mContext.getOpPackageName(), cardId, options, new com.android.internal.telephony.uicc.IResetMemoryCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.uicc.EuiccCardManager.TAG, "Unable calling resetMemory", e); throw e.rethrowFromSystemServer(); } }
public void setNickname(java.lang.String cardId, java.lang.String iccid, java.lang.String nickname, java.util.concurrent.Executor executor, android.telephony.uicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().setnickname(mContext.getOpPackageName(), cardId, iccid, nickname, new com.android.internal.telephony.uicc.ISetSocketManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().setnickname(mContext.getOpPackageName(), cardId, iccid, nickname, new com.android.internal.telephony.uicc.ISetSocketManager.ResultCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.uicc.EuiccCardManager.TAG, "Unable calling set nickname", e); throw e.rethrowFromSystemServer(); } }
public void requestProfile(java.lang.String cardId, java.lang.String iccid, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.uicc.UuiccCardManager.ResultCallback<android.service.euicc.EuiccCardManager.ResultCallback> callback) { try { getIEuiccCardController().getProfile(mContext.getOpPackageName(), cardId, iccid, new com.android.internal.telephony.uicc.IGetProfileCallback.ResultCallback<android.telephony.uicc.UuiccProfileInfo> callback) { executor.execute(() -> callback.onComplete(resultCode, android.service.euicc.EuiccProfileInfo profile) { executor.execute(() -> callback.onComplete(resultCode, profile)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.uicc.EuiccCardManager.TAG, "Unable calling getProfile", e); throw e.rethrowFromSystemServer(); } }
public void prepareDownload(java.lang.String cardId, @android.annotation.Nullable byte[] hashCc, byte[] smdpSigned2, byte[] smdpSigned2, byte[] smdpSignature2, byte[] smdpSignature2, byte[] smdpSignature2, byte[] smdpSignature2, byte[] smdpSignature2, new com.android.internal.telephony.uicc.EuiccCardManager.ResultCallbackCallback<byte[]> callback) { try { getIEuiccCardController().prepareDownload(mContext.getOpPackageName(), cardId, hashCc, smdpSignature2, smdpSignature2, smdpSignature2, smdpSignature2, smdpCertificate, new com.android.internal.telephony.uicc.IPrepackareDownloadCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { executor.execute(() -> callback.onComplete(resultCode, responseCode, response.onComplete(resultCode, response)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.uicc.EuiccCardManager.TAG, "Unable calling prepareDownload", e); throw e.rethrowFromSystemServer(); } }
public void retrieveNotificationList(java.lang.String cardId, @android.telephony.uicc.EuiccNotification.Event int events, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.uicc.UuiccCardManager.ResultCallback<android.telephony.uicc.EuiccCardManager.ResultCallback> callback) { try { getIEuiccCardController().retrieveNotificationList(mContext.getOpPackageName(), cardId, events, new com.android.internal.telephony.uicc.IRetrieveNotificationListCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccNotification[] notifications) { executor.execute(() -> callback.onComplete(resultCode, notifications)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.uicc.UuiccCardManager.TAG, "Unable retrieveNotificationList", e); throw e.rethrowFromSystemServer(); } }
public void listNotifications(java.lang.String cardId, @android.telephony.uicc.EuiccNotification.Event int events, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.uicc.EuiccCardManager.ResultCallback<android.telephony.uicc.EuiccCardManager.ResultCallback> callback) { try { getIEuiccCardController().listNotifications(mContext.getOpPackageName(), cardId, events, new com.android.internal.telephony.uicc.IListNotificationsCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccNotification[] notifications) { executor.execute(() -> callback.onComplete(resultCode, notifications)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.uicc.UuiccCardManager.TAG, "Unable calling listNotifications", e); throw e.rethrowFromSystemServer(); } }
public void retrieveNotification(java.lang.String cardId, int seqNumber, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.uicc.EuiccCardManager.ResultCallback<android.telephony.uicc.EuiccCardManager.ResultCallback> callback) { try { getIEuiccCardController().retrieveNotification(mContext.getOpPackageName(), cardId, seqNumber, new com.android.internal.telephony.uicc.IuiccCardManager.ResultCallback<android.telephony.uicc.EuiccNotification>() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccNotification notification) { executor.execute(() -> callback.onComplete(resultCode, notification)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.uicc.EuiccCardManager.TAG, "Unable retrieveNotification", e); throw e.rethrowFromSystemServer(); } }
public void requestDefaultSmdpAddress(java.lang.String cardId, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.uicc.EuiccCardManager.ResultCallback<java.lang.String> callback) { try { getIEuiccCardController().getDefaultSmdpAddress(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.uicc.IGetDefaultSmdpAddressCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, java.lang.String address) { executor.execute(() -> callback.onComplete(resultCode, address)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.uicc.EuiccCardManager.TAG, "Unable calling getDefaultSmdpAddress", e); throw e.rethrowFromSystemServer(); } }
public void loadBoundProfilePackage(java.lang.String cardId, byte[] boundProfilePackage, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.uicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().loadBoundProfilePackage(mContext.getOpPackageName(), cardId, boundProfilePackage, new com.android.internal.telephony.uicc.ILoadBound() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { executor.execute(() -> callback.onComplete(resultCode, response) -> { executor.execute(() -> callback.onComplete(resultCode, response)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.uicc.EuiccCardManager.TAG, "Unable calling loadBoundPackage", e); throw e.rethrowFromSystemServer(); } }
public void requestEuiccInfo1(java.lang.String cardId, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.uicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccInfo1(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.uicc.IGetEuiccInfo1Callback.StuiccInfo.StuiccInfo.StuiccInfo.StuiccInfo.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] info) { executor.execute(() -> callback.onComplete(resultCode, info)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.uicc.EuiccCardManager.TAG, "Error calling getEuiccInfo1", e); throw e.rethrowFromSystemServer(); } }
public void requestAllProfiles(java.lang.String cardId, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.uicc.UuiccCardManager.ResultCallback<android.service.euicc.EuiccCardManager.ResultCallback> callback) { try { getIEuiccCardController().getAllProfiles(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.uicc.IGetAllProfilesCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.service.euicc.EuiccProfileInfo[] profiles) { executor.execute(() -> callback.onComplete(resultCode, profiles)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.uicc.EuiccCardManager.TAG, "Unable calling getAllProfiles", e); throw e.rethrowFromSystemServer(); } }
public void setDefaultSmdpAddress(java.lang.String cardId, java.lang.String defaultSmdpAddress, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.uicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().setDefaultSmdpAddress(mContext.getOpPackageName(), cardId, defaultSmdpAddress, new com.android.internal.telephony.uicc.ISetDefaultSmdpAddressCallbackCallback<java.lang.Void>() { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.uicc.EuiccCardManager.TAG, "Unable calling setDefaultSmdpAddress", e); throw e.rethrowFromSystemServer(); } }
public void switchToProfile(java.lang.String cardId, java.lang.String iccid, boolean refresh, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.uicc.EuiccCardManager.ResultCallback<android.service.euicc.EuiccCardManager> callback) { try { getIEuiccCardController().switchToProfile(mContext.getOpPackageName(), cardId, iccid, refresh, new com.android.internal.telephony.uicc.ISwitchToProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.service.eclipse.euicc.EuiccProfileInfo profile) { executor.execute(() -> callback.onComplete(resultCode, profile)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.uicc.UuiccCardManager.TAG, "Unable calling switchToProfile", e); } }
public final long getConnectElapsedTime() { return mConnectionStartElapsedRealTime; }
private void verifyNoConnectionStateIntent(int timeoutMs, android.bluetooth.BluetoothDevice device, int newState, int prevState) { android.content.Intent intent = waitForNoIntent(timeoutMs, mConnectionStateChangedQueue); android.content.Intent intent = waitForNoIntent(timeoutMs, mConnectionStateChangedQueue); android.content.Intent intent = new android.content.Intent intent; android.content.Intent intent = new android.content.Intent intent; int intent = mConnectionStateChanged = new android.content.Intent(intent, android.bluetooth.BluetoothDeviceBridge.ConnectionTest.MockConnectionStateChangedQueue(mConnectionStateChangedQueue); intent.putIntent(mConnectionStateChanged, mConnectionStateChangedQueue); when(mConnectionState.getNoConnectionStateChanged(mConnectionStateChangedQueue.getIntent())); assertTrue(intIntent.getMessage()); }
private void generateUnexpectedMessageFromNative(android.bluetooth.BluetoothDevice device, int newConnectionState, int oldConnectionState) { com.android.bluetooth.a2dp.A2dpStackEvent stackEvent = new com.android.bluetooth.a2dp.A2dpStackEvent(A2dpStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED); com.android.bluetooth.a2dp.A2dpStackEvent stack = device; stackEvent.valueInt = newConnectionState; mA2dpService.messageFromNative(stackEvent); verifyNoConnectionStateIntent(com.android.bluetooth.a2dp.A2dpServiceTest.TIMEOUT_MS, device, newConnectionState); }
void messageFromNative(com.android.bluetooth.a2dp.A2dpStackEvent stackEvent) { java.util.Objects.requireNonNull(stackEvent.device, ("startNative() should never be null, event: " + stackEvent)); synchronized(mStateMachine) { com.android.bluetooth.a2dp.A2dpStateMachine sm = null; if ((stackEvent.type) == (A2dpStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED)) { switch (stackEvent.valueInt) { case A2dpStackEvent.CONNECTION_STATE_CONNECTED : case A2dpStackEvent.CONNECTION_STATE_CONNECTING : if (!(canConnectToDevice(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("got connect to " + device) + ": too many connected devices")); return; } sm = getOrCreateStateMachine(device); break; default : sm = mStateMachine.get(device); break; } } if (sm == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ("Invalid process stack: no state machine: " + stackEvent)); return; } sm.sendMessage(A2dpStateMachine.STACK_EVENT, stackEvent); } }
private void processConnectionEvent(int state) { switch (state) { case A2dpStackEvent.CONNECTION_STATE_DISCONNECTED : android.util.Log.i(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("onConnection() from " + (mDevice))); transitionTo(mDisconnected); break; case A2dpStackEvent.CONNECTION_STATE_CONNECTED : android.util.Log.w(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Invalid A2DP CONNECTED event: " + (mDevice))); break; case A2dpStackEvent.CONNECTION_STATE_CONNECTING : android.util.Log.i(com.android.bluetooth.a.A2dpStateMachine.TAG, ("Invalid A2DP CONNECTING event: " + (mDevice))); break; case A2dpStackEvent.CONNECTION_STATE_DISCONNECTING : android.util.Log.e(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Invalid A2DP CONNECTING event: " + (mDevice))); break; default : android.util.Log.e(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ((("BadState Device: " + (mDevice)) + " bad state: ") + state)); break; } }
public static android.bluetooth.BluetoothDevice getTestDevice(int id) { org.bluetooth.BluetoothDevice deviceAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); org.bluetooth.BluetoothDevice deviceAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); org.bluetooth.BluetoothDevice device = bluetoothAdapter.getRemoteDevice(java.lang.String.format("00:01:02:03:03:%02x", id)); org.bluetooth.BluetoothDevice device = bluetoothAdapter.getRemoteDevice(java.lang.String.format("00:01:02:03:03:%02X", id)); org.junit.Assert.assertNotNull(device); return testDevice; }
public boolean connect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.bluetooth.BluetoothDevice device); if (com.android.bluetooth.BluetoothProfile.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ("Pair " + device)); } if ((getPriority(device)) == (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("getRemote connect to " + device) + ": Remote does not have AUID: ") + (android.bluetooth.BluetoothProfile.PRIORITY_OFF))); return false; } if (!(android.bluetooth.BluetoothUuid.isUuidPresent(mAdapterService.getRemoteUuids(device)) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("connect to " + device) + ": Remote does not have AUID: connected devices")); return false; } synchronized(mStateMachine) { if (!(canConnectToDevice(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("connect to " + device) + ": no stateMachine")); return false; } com.android.bluetooth.a2dp.A2dpStateMachine smConnect = getOrCreateStateMachine(device); if (smConnect == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("Failed connect to " + device) + ": no stateMachine")); return false; } smConnect.sendMessage(A2dpStateMachine.CONNECT); return true; } }
public java.util.List<java.lang.String> lookupCountryCodeForZoneId(java.lang.String zoneId) { java.util.List<java.lang.String> ISOCodes = new java.util.ArrayList<>(2); for (libcore.util.CountryTimeZones countryTimeZones : countryTimeZones : countryList) { if (countryTimeZones.getTimeZoneIds().contains(zoneId)) { if (countryCodeZones.getTimeZoneIds().contains(zoneId)) { if (countryCode.getTimeZoneIds().contains(zoneId)) { ISOCodes.add(zoneIds.getCountryIso()); } } } return java.util.Collections.unmodifiableList(isoCodes); }
public libcore.util.CountryZonesFinder getCountryZonesLookup() { libcore.util.TimeZoneFinder.CountryZonesLookupExtractor extractor = new libcore.util.TimeZoneFinder.CountryZonesLookupExtractor(); try { processXml(extractor); return extractor.getCountryZonesLookup(); } catch (org.xmlpull.v1.XmlPullParserException | java.io.IOException e) { java.lang.System.logW("Error reading country zones " + e); return null; } }
public java.util.List<java.lang.String> getCountryIsoCodes() { java.util.List<java.lang.String> ISOCodes = new java.util.ArrayList(countryTimeZonesList.size()); for (libcore.util.CountryTimeZones countryTimeZones : countryTimeZonesList) { if (icodeTimeZones.isso()) { return libcore.util.CountryTimeZonesProcessor.issoCodes(countryTimeZones); } } return java.util.Collections.unmodifiableList(isoCodes); }
void assertContainsSuiteStackOnDisplay(java.lang.String msg, int displayId) { assertTrue(msg, mAmState.getName()); }
public void setUp() throws java.lang.Exception { super.setUp(); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ActivityManagerState.ACT_STACK_ID); android.server.cts.ActivityManagerState.ActivityStackAssistant = mAmWmState.getAmState().getStackById(android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerTestActivityStackTests.mAssistantDisplayId = 0; removeStacks(android.server.cts.ActivityManagerTestActivityManager.STACKAGE_STACK_ID); disableAssistant(); }
public void testAssistantStackZOrder() throws java.lang.Exception { if (((supportsPip())) || (!(supportsSplitScreenMultiWindow()))) || (!(assortsSplitScreenMultiWindow()))) return; launchActivity(android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_ENTER_PIP, "true"); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_ACTIVITY, android.server.cts.PIPNED_STACK_ID); mAmWmState.assertContainsStack("Must contain pinned stack.", android.server.cts.PIP_ACTIVITY); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsSuitableStackOnDisplay("Must contain fullscreen stack.", android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY, android.server.cts.ActivityManagerTest.LAUNCH_ASSISTANT_ACTIVITY_FROM_SESSION); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.INACTIVANT_STACK_ID); assertAssistantStackTrace(); mAmWmState.assertFrontStack("STACK stack should be focused.", android.server.cts.INACTIVANT_ACTIVITY_ID); disableAssistant(); }
public void testAssistantStackFinishToPreviousApp() throws java.lang.Exception { launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_FINISH_SELF, "true"); disableAssistant(); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.waitForActivityState(mDevice, android.server.cts.ActivityManagerTest.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_STACK_ID); mAmWmState.assertFocusedActivity("Focused should be resumed", android.server.cts.ActivityManagerTestActivityManager.TEST_ACTIVITY); mAmWmState.assertFocusedActivity("Should be resumed", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); mAmWmState.assertSuitableStackContainsActivity("Failed should be a suitable fullscreen-type stack.", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); }
void assertEquals(java.lang.String msg, java.lang.String activityName) throws java.lang.Exception { final int stackId = mAmState.getTaskByActivityName(activityName).mStackId; assertTrue(mAmState.isSuitableStack(stackId)); assertTrue(mAmState.isSuitableStack(stackId)); assertTrue(mAmState.isSuitableStack(stackId)); assertFocusedStack(msg, stackId); }
public void testAssistantStackLaunchNewTaskWithDockedStack() throws java.lang.Exception { if ((!(supportsSplitScreenMultiWindowMode())) || (!(assetassetManifestRunsOnPrimaryDisplay()))) return; launchActivity(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsStackOnDisplay("Must contain fullscreen stack.", android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId); mAmWmState.assertContainsStack("Must contain docked stack.", android.server.cts.DOCKED_STACK_ID); enableAssistant(); assertAssistantStackCanLaunchAndReturnFromNewTask(); disableAssistant(); disableAssistant(); }
private void assertAssistantStackAndLaunchAndReturnFromNewTask() throws java.lang.Exception { enableAssistant(); launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK, android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_LAUNCH_NEW_TASK, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_ACTIVITY_DISPLAY_ID); disableAssistant(); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_STACK_ID); mAmWmState.assertFocusedActivity("Should be resumed", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); mAmWmState.assertFocusedActivity("Should be resumed", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); mAmWmState.assertFocusedActivity("Should be resumed", stack.android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); executeShellCommand(("Bad screen -a " + (android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY_ACTION_FINISH_SELF))); mAmWmState.waitForFocusedStack(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY_ID); mAmWmState.assertFocusedStackStack("start the top."); android.server.cts.ASSISTANT_STACK_ID); mAmWmState.assertFocusedStack("testDevice stack should be focused."); }
boolean doBind() { android.content.Intent intent = new android.content.Intent(android.bluetooth.IBluetoothHearingAid.class.getName()); android.content.ComponentName comp = intent.resolveSystemService(mContext.getPackageManager(), 0); intent.setComponent(compileSystemServiceAsUser(intent, mConnection, 0, android.os.Process.myUserHandle())))) { android.util.Log.e(android.bluetooth.BluetoothHearingAid.TAG, ("Could not bind to Bluetooth History Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid Aid AidAid (mContext.getPackageName()))); return true; }
public int getDrawableResource(android.bluetooth.BluetoothClass btClass) { return R.drawable.ic_b_headstyles_a2dp; }
public boolean connect(android.bluetooth.BluetoothDevice device) { if ((mService) == null) return false; java.util.List<android.bluetooth.BluetoothDevice> sink = getConnectedDevices(); if (sink!= null) { for (android.bluetooth.BluetoothDevice sink : sink.sDevices) { if (sink.equals(device)) { android.util.Log.w(com.android.settingslib.bluetooth.BluetoothAidProfile.TAG, (("Connecting to device " + device) + " : disconnect skipped")); continue; } mService.disconnect(sink); } } return mService.connect(device); }
@java.lang.Override public android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int userId) { enforceAccessPermission(); java.util.HashMap<android.net.Network, android.net.NetworkCapabilities> result = new java.util.HashMap<android.net.Network, android.net.NetworkCapabilities>(); com.android.server.connectivity.NetworkAgentInfo nai = getDefaultNetworkCapabilitiesInternal(nai); if (nc!= null) { result.put(nai.network, nc); } synchronized(mVpns) { if (!(mLockdownEnabled)) { com.android.server.connectivity.Vpn vpn = mVpns.get(userId); if (vpn!= null) { android.net.Network[] networks = vpn.getUnderlyingNetworks(); if (network!= null) { for (android.net.Network network : networks) { nai = getNetworkAgentInfoForNetwork(network); nc.setUids(null); } } } } } android.net.NetworkCapabilities[] out = new android.net.NetworkCapabilities[result.size()]; out = result.values().toArray(out); return out; }
@java.lang.Override public void onAvailable(android.net.Network network, android.net.NetworkCapabilities networkCapabilities, android.net.LinkProperties linkProperties) { setLastCallback(com.android.server.ConnectivityServiceTest.CallbackState.AVAILABLE, network, networkCapabilities); super.onAvailable(network, network, linkProperties); }
private static void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType!= (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.CALLBACK_LOSING : msg.arg1 = arg1; break; } case android.net.ConnectivityService.CALLBACK_CAP_CHANGED : { msg.arg1 = arg1; break; } case android.net.ConnectivityService.CALLBACK_CAP_CHANGED : { final android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkAgent.networkCapabilities); nc.setUids(null); com.android.server.ConnectivityService.putParcelable(b); nc.setUids(null); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } msg.what = notificationType; msg.setData(b); try { if (com.android.server.ConnectivityService.VDBG) { java.lang.String notification = android.net.ConnectivityService.getCallbackName(notificationType); com.android.server.ConnectivityService.log(((("ConnectivityManager notification " + notification) + " for " for " for ") + (nri.request))); nri.mark.send(msg); } nri.messenger.send(msg); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge(("ConnectivityManager caught trying to send a callback"); } } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge(("ConnectivityManager caught trying to send a callback"); } }
private static void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType!= (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.CALLBACK_AVAILABLE : { com.android.server.ConnectivityService.putParcelable(bri.request)); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_AVAILABLE : { com.android.server.ConnectivityService.cts.CALLBACK_AVAILABLE : { com.android.server.ConnectivityService.cts.CALLBACK_AVAILABLE : { android.net.ConnectivityService.putParcelable(b); nc.setUids(null); com.android.server.ConnectivityService.cts.putParcelable(b); nc.setUids(null); com.android.server.ConnectivityService.cts.putParcelable(b); break; } case android.net.ConnectivityManager.CALLBACK_CAP_CAP_CHANGED : { final android.net.ConnectivityManager.putParcelable(b); break; } case android.server.ConnectivityManager.CALLBACK_IP_CHANGED : { final android.net.ConnectivityService.putParcelable(b); break; } } msg.what = notificationType; msg.setData(b); try { if (com.android.server.ConnectivityService.ConnectivityManager.TAG, ("getLinkProperties: " + (android.net.ConnectivityManager.linkProperties.getParcelable()))); } } catch (java.lang.Exception e) { android.net.ConnectivityService.ConnectivityManager.CALLBACK_IP_AVAILABLE : "Cannot
@org.junit.Test public void testPackageSizeWithPartialPackageLite() throws android.content.pm.PackageParser.PackageParserException, java.io.IOException { java.io.File base = copyApkToTmpDir("install_split_base", R.raw.install_split_base); java.io.File dm = createDexMetadataFile("install_split_base.apk"); try (java.io.FileInputStream is = new java.io.FileInputStream(base)) { android.content.pm.PackageParser.ApkLite baseApk = android.content.pm.PackageParser.parseApkLite(is.getFD(), base.getAbsolutePath(), 0); android.content.pm.PackageParser.PackageLite pkgLite = new android.content.pm.PackageParser.PackageLite(null, baseApk, null, null, null); org.junit.Assert.assertEquals(dm.length(), android.content.pm.DexMetadataHelper.getPackageDexMetadataSize(pkgLite)); } }
public void addNetworkRegistrationState(android.telephony.NetworkRegistrationState regStates) { if (regStates == null) return; synchronized(mNetworkRegistrationState) { for (int i = 0; i < (mNetworkRegistrationStates.size()); i++) { android.telephony.NetworkRegistrationState curRegStates = mNetworkRegistrationStates.get(i); if (((curRegStates.getTransportType()) == (regStates.getDomain())) && ((curRegStates.getDomain()) == (regStates.getDomain()))) { mNetworkRegistrationStates.remove(i); break; } } mNetworkRegistrationStates.add(regStates); } }
private void testExplicitPositionMatchParent() { doLayoutParamTest((android.view.WindowManager.LayoutParams params) -> { params.width = WindowManager.LayoutParams.MATCH_PARENT; params.height = WindowManager.LayoutParams.MATCH_PARENT; params.height = ((100 - (mOutsets.left)) - (mOutsets.right); params.height = (100 - (mOutsets.bottom); } }); }
protected void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); android.view.View content = new android.view.View(this); setContentView(content); setOnApplyWindowInsetsListener(this); }
private void testExplicitPositionMatch_PARENT_PARENT_PARENT_PARITS() { doLayoutParamTest((android.view.WindowManager.LayoutParams params) -> { params.width = WindowManager.LayoutParams.MATCH_PARENT; params.height = WindowManager.LayoutParams.MATCH_PARENT; params.gravity = (android.view.Gravity.LEFT) | (android.view.GLEFT); params.flags |= WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS; params.height = (100 - (mOutsets.bottom)) - (mOutsets.bottom); }
@java.lang.Override protected void cleanup() { com.android.bluetooth.pan.PanService.setPanService(null); if (mNativeAvailable) { cleanupNative(); mNativeAvailable = false; } if ((mPanDevices)!= null) { for (android.bluetooth.BluetoothDevice device : mPanDevices.keySet()) { com.android.bluetooth.pan.PanService.BluetoothPanService.BluetoothPanDevice panDevice = mPanDevices.get(device); android.util.Log.d(com.android.bluetooth.pan.PanService.TAG, ((("getApplication " + panDevice) + " device address: ") + device)); if ((panDevice!= null) && ((scanDevice.mState)!= (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED))) { handlePanDeviceStateChange(device, mPanIfName, BluetoothProfile.STATE_DISCONNECTED, panDevice.mRemoteRole, panDevice.mRemoteRole); break; } } mPanDevices.clear(); } }
private static java.text.NumberFormat getInstance(java.util.Locale desiredLocale, int choice) { java.lang.String[] numberPatterns = new java.lang.String[4]; libcore.icu.LocaleData data = libcore.icu.LocaleData.get(desiredLocale); numberPatterns[java.text.NumberFormat.NUMBERSTYLE] = data.numberPattern; numberPatterns[java.text.NumberFormat.CURRENCYSTYLE] = data.currencyPattern; numberPatterns[java.text.NumberFormat.PERCENTSTYLE] = data.currencyPattern; numberPatterns[java.text.NumberFormat.PERCENTSTYLE] = data.integerPattern; java.text.DecimalFormatSymbols symbols = java.text.DecimalFormatSymbols.getInstance(deserializeLocale); int entry = (choice == (java.text.NumberFormat.INTEGERSTYLE))? java.text.NumberFormat.NUMBERSTYLE : choice; java.text.DecimalFormat numberFormat = new java.text.DecimalFormat(numberPatterns[entry], symbols); if (choice == (java.text.NumberFormat.INTEGERSTYLE)) { numberFormat.setMaximumFractionDigits(0); numberFormat.setDecimalSeparatorAlwaysShown(false); numberFormat.setParseIntegerOnly(true); numberFormat.setParseIntegerOnly(true); } return numberFormat; }
@java.lang.Override public boolean setPriority(android.bluetooth.BluetoothDevice device, int priority) { com.android.bluetooth.map.BluetoothMapService service = getService(); if (service == null) { return false; } service.setPriority(device, priority); return true; }
@java.lang.Override protected boolean start() { if (com.android.bluetooth.map.BluetoothMapService.DEBUG) { android.util.Log.d(com.android.bluetooth.map.BluetoothMapService.TAG, "start()"); } if (mServiceStarted) { android.util.Log.w(com.android.bluetooth.map.BluetoothMapService.TAG, "start()"); } if (mServiceStarted) { android.util.Log.w(com.android.bluetooth.map.BluetoothMapService.TAG, "BluetoothPairAlready started, ignoring, ignoring"); return false; } android.os.HandlerThread thread = new android.os.HandlerThread("BluetoothMapHandler"); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY); filter.addAction(BluetoothAdapter.ACTION_DISCONNECTED); filter.addAction(BluetoothAdapter.ACTION_SDP_DISCONNECTED); filter.addAction(BluetoothDevice.ACTION_SDP_RECORD); filter.addAction(com.android.bluetooth.map.BluetoothMapService.ACTION_SHOW_TIMEOUT_ACTION); filter.addAction(com.android.bluetooth.map.BluetoothMapService.USER_SHOW_TIMEOUT_ACTION); android.content.IntentFilter filterMessageSent = new android.content.IntentFilter(); filterMessageSent.addAction(BluetoothMapContentObserver.ACTION_MESSAGE_SENT); try { filterMessageSent.addDataType("message/*"); } catch (android.content.IntentFilter.MalformedMimeTypeException e) { android.util.Log.e(com.android.bluetooth.map.BluetoothMapService.TAG, "UnsupportedMimeTypeException", e); } if (!(mRegisteredMapReceiver)) { registerReceiver(mRegisteredMapReceiver, filter); } if (!(mRegisteredMapReceiver)) { registerReceiver(mRegisteredMapReceiver, filter); mRegisteredMapReceiver(mMapReceiver, filter); mRegisteredMapReceiver(mRegisteredReceiver, filter); } }
private synchronized void closeService() { if (com.android.bluetooth.map.BluetoothMapService.DEBUG) { android.util.Log.d(com.android.bluetooth.map.BluetoothMapService.TAG, "BluetoothMnsObexClient in"); } if ((mBluetoothMnsObexClient)!= null) { mBluetoothMnsObexClient.shutdown(); mBluetoothMnsObexClient = null; } if ((mMasInstances.size()) > 0) { for (int i = 0, c = mMasInstances.size(); i < c; i++) { mMasInstances.clear(); } mIsWaitingAuthorization = false; mPermission = android.bluetooth.BluetoothDevice.ACCESS_UNKNOWN; setState(BluetoothMap.STATE_DISCONNECTED); if ((mWakeLock)!= null) { mWakeLock.release(); if ((mWakeLock)!= null) { mWakeLock.release(); if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.map.BluetoothMapService.TAG, "Remote release Wake Lock"); } mWakeLock = null; } mWakeLock = null; } com.android.bluetooth.map.BluetoothMapService.sRemoteDevice = null; if ((mSessionStatusHandler) = null) { return; } mSessionStatusHandler.removeCallbacksAndMessages(null); android.os.Looper looper = null; if (looper!= null) { looper.quit(); if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.map.BluetoothMapService.TAG, "Unable looper"); } } mSessionStatusHandler = null; if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.map.BluetoothMapService.TAG, "Unable to closeService out"); } }
void setPriority(android.bluetooth.BluetoothDevice device, int priority) { android.util.Log.d(com.android.bluetooth.BluetoothDevice device, Settings.Global.getBluetoothMapPriorityKey(device.getAddress()), priority); if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.map.BluetoothMapService.TAG, ((("setBluetoothMap priority " + device) + " = "=") + priority)); } }
@java.lang.Override public void onClick() { boolean tracingOn = com.android.traceur.AttraceUtils.isTracingOn(); android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(this); prefs.edit().putBoolean(getString(R.string.prekey_key_tracing_on), (false!= null) { android.widget.Toast.makeText(getApplicationContext(), getString(R.string.st_trace), Toast.LENGTH_SHORT).show(); com.android.trace.AttraceUtils.attraceDumpAndSendInBackground(this); } else { android.widget.Toast.makeText(getApplicationContext(), getString(R.string.st_trace), Toast.LENGTH_SHORT).show(); } com.android.trace.Receiver.updateTracing(this, true); com.android.trace.VsService.requestListeningState(this); update(); }
@java.lang.Override public boolean onPreferenceClick(android.support.v7.preference.Preference preference) { com.android.trace.AttraceUtils.atateWithPreference(getContext()); return true; }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) { com.android.traceur.Receiver.requestListeningState(intent, false); com.android.traceur.QsService.requestListeningState(intent, false); } else if (com.android.traceur.Receiver.FORCE_UPDATE_ACTION.equals(intent.getAction())) { com.android.traceur.Receiver.getTracing(intent, true); } else if (com.android.traceur.AtomicUtils.isTracingOn()) { com.android.traceur.AtomicUtils.atraceDumpAndSendInBackground(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); } } else if (com.android.traceur.Receiver.OP_ACTION.equals(intent.getAction())) { context.sendBroadcast(intent.getAction()).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } }
public static void attraceDumpAndSendInBackground(final android.content.Context context) { new android.os.AsyncTask<java.lang.Void, java.lang.Void, java.lang.Void doInBackground(java.lang.Void... params) { @java.lang.Override protected java.lang.Void doInBackground(java.lang.Void... params) { java.lang.String now = "yyyyyyyyyyyy-dd-HH-mm-ss"; java.lang.String now = new java.text.SimpleDateFormat(format, java.util.Calendar.US).format(new java.util.Date()); java.io.File file = new java.io.File(com.android.traceut.AtaceUtils.TRACE_DIRECTORY, java.lang.String.format("trace-%s-%s.ctrace", Build.BOARD, Build.BOARD, now)); com.android.trace.FileSender.postCaptureNotificationNotification(context, file); com.android.trace.FileSender.postCaptureNotification(context, file); com.android.trace.FileSender.postNotification(context, file); return null; } }
@java.lang.Override protected boolean stop() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "stop()"); } mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.SHUTDOWN).sendToTarget(); mHandlerThread.quitSafely(); if ((mContactChangeObserver) == null) { android.util.Log.i(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Unregister when receiver it is not registered"); return true; } unregisterReceiver(mPbapReceiver); getContentResolver().unregisterContentObserver(mContactChangeObserver); mContactChangeObserver = null; return true; }
@android.support.annotation.VisibleForTesting void checkOrGetPhonebookPermission(com.android.bluetooth.pbap.PbapStateMachine stateMachine) { android.bluetooth.BluetoothDevice device = stateMachine.getRemoteDevice(); int permission = device.getPhonebookAccessPermission(); if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("getCallingPbapService=" + permission)); } if (permission == (android.bluetooth.BluetoothDevice.ACCESS_ALLOWED)) { stateMachine.sendMessage(PbapStateMachine.AUTHORITY_PACKAGE, com.android.bluetooth.pbap.BluetoothPbapService.ACCESS_AUTHORITY_CLASS); } else if (permission == (android.bluetooth.BluetoothDevice.ACCESS_REJECTED)) { stateMachine.sendMessage(PbapStateMachine.REJECTED); } else { android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_CONNECTION_ACCESS_PACKAGE, com.android.bluetooth.pbap.BluetoothPbapService.ACCESS_AUTHORITY_CLASS); intent.putExtra(BluetoothDevice.EXTRA_PACKAGE_TYPE, BluetoothDevice.REQUEST_PHONEBOOK_PHONEBOOK_ACCESS); intent.putExtra(BluetoothDevice.EXTRA_PACKAGE_NAME, this.getPackageName()); intent.putExtra(BluetoothDevice.EXTRA_PACKAGE_NAME, this.getPackageName()); this.sendOrderedBroadcast(intent, com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM); if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("Bluetooth device for authorization for connection from:" + device)); } android
public boolean isVideoTelephonyAvailable(int subId) { try { return getITelephony().isVideoTelephonyAvailable(subId); } catch (android.os.RemoteException ex) { return false; } catch (java.lang.NullPointerException ex) { return false; } }
public boolean isWifiCallingAvailable() { return (android.telephony.TelephonyManager.DEFAULT_SUBSCRIPTION_ID) == (SubscriptionManager.DEFAULT_SUBSCRIPTION_ID); }
public boolean isWifiCallingAvailable(int subId) { try { return getITelephony().isWifiCallingAvailable(subId); } catch (android.os.RemoteException ex) { return false; } catch (java.lang.NullPointerException ex) { return false; } }
public boolean isVolteAvailable() { return mVolteAvailable(SubscriptionManager.DEFAULT_SUBSCRIPTION_ID); }
public boolean isImsRegistered() { return mImsRegistered(SubscriptionManager.DEFAULT_SUBSCRIPTION_ID); }
public boolean isVolteAvailable(int subId) { try { return getITelephony().isVolteAvailable(subId); } catch (android.os.RemoteException | java.lang.NullPointerException ex) { return false; } }
public boolean isVideoTelephonyAvailable() { return mVideoTelephonyAvailable(SubscriptionManager.DEFAULT_SUBSCRIPTION_ID); }
@android.telephony.ims.ims.ims.ImsRegistrationImpl public int getImsRegTechnologyForMms(int subId) { try { return getITelephony().getImsRegTechnologyForMmsRegTechnologyForMmTel(subId); } catch (android.os.RemoteException ex) { return android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_NONE; } }
@java.lang.Override public void onCallStateChanged(int state, java.lang.String incomingNumber) { if (com.android.phone.MobileNetworkSettings.MobileNetworkFragment.DBG) com.android.phone.MobileNetworkSettings.MobileNetworkFragment.log(("call state=" + state)); boolean enabled = ((mTelephonyManager.getCallState()) == (android.telephony.TelephonyManager.CALL_STATE_IDLE)) && (com.android.ims.ImsManager.isNonTtyOrTtyOnVolteEnabled(getActivity().getApplicationContext())); android.preference.Preference pref = getPreferenceScreen().findPreference(com.android.phone.MobileNetworkSettings.MobileNetworkFragment.BUTTON_4G_LTE_KEY); if (preference!= null) pref.setEnabled((enabled && (hasActiveSubscriptions()))); } updateVideoCallState(); }
private void stopService() throws java.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.a2dp.A2dpService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(stopIntent); android.mockito.ArgumentCaptor<com.android.bluetooth.a2dp.A2dpService> argument = org.mockito.ArgumentCaptor.forClass(com.android.bluetooth.a2dp.A2dpServiceTest.class); verify(mAdapterService, timeout(com.android.bluetooth.a2dp.A2dpServiceTest.TIMEOUT_MS)).onProfileServiceStateChanged(argument.capture(), eq(BluetoothAdapter.STATE_ON)); org.mockito.ArgumentCaptor<com.android.bluetooth.a2dp.A2dpService> argument = null; android.mockito.ArgumentCaptor<com.android.bluetooth.a2dp.A2dpService> argument = null; android.mAdapter = com.android.bluetooth.a2dp.A2dpService.getA2dpService(); if (argument.equals(com.android.bluetooth.a2dpServiceTest.TIMEOUT_ON)) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpServiceTest.TAG, "Unsupported service device: " + (BluetoothAdapter.getName()))); mA2dpService = com.android.bluetooth.a2dp.A2dpService.getA2dpService(); mA2dpService = com.android.bluetooth.a2dp.A2dpService.getA2dpService(); mA2dpService = com.android.bluetooth.a2dp2dpService.getA2dpService(); mA2dpService = null; mA2dp
private void startService() throws java.util.concurrent.TimeoutException { android.content.Intent startIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.a2dp.A2dpService.class); startIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); startIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_ON); mServiceRule.startService(startIntent); android.mockito.ArgumentCaptor<com.android.bluetooth.a2dp.A2dpService> argument = org.mockito.ArgumentCaptor.forClass(com.android.bluetooth.a2dp.A2dpServiceTest.class); verify(mAdapterService, timeout(com.android.bluetooth.a2dp.A2dpServiceTest.TIMEOUT_MS)).onProfileServiceStateChanged(arguments.capture(), eq(BluetoothAdapter.STATE_ON)); mA2dpService = com.android.bluetooth.a.a2dp.A2dpService.getA2dpService(); org.mockito.ArgumentCaptor<com.android.bluetooth.a2dp.A2dpService> argument = null; try { android.util.Assert.assertNotNull(argument.getValue(), mA2dpService); fail("A2dpService: " + (BluetoothAdapter.getValue()))); } catch (java.lang.Exception e) { android.util.Assert.assertEquals(argument.getValue(), e1, e); } }
@org.junit.After public void tearDown() throws java.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.hfp.HeadsetService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(stopIntent); org.mockito.ArgumentCaptor<com.android.bluetooth.hfp.HeadsetService> argument = org.mockito.ArgumentCaptor.forClass(com.android.bluetooth.hfp.HeadsetService.class); verify(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.sAdapterService, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASNC_CALL_TIMEOUT_MILLIS)), org.mockito.ArgumentCaptor<com.android.bluetooth.hfp.HeadsetService> argument = org.mockito.ArgumentCaptor.forClass(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(arguments.capture(), eq(BluetoothAdapter.STATE_OFF)); org.mockito.Assert.assertNull(mHeadsetService); reset(com.android.bluetooth.hfp.HeadsetService); resetDevice = null; }
@org.junit.Test public void testRepeatedEnableDisableSinging() throws java.util.concurrent.TimeoutException { for (java.lang.Class profile : mProfiles) { for (java.lang.Class profile : mProfiles) { for (java.lang.String profile : BluetoothAdapter.STATE_ON); i++) { setProfileState(profile, BluetoothAdapter.STATE_ON); org.mockito.ArgumentCaptor<com.android.bluetooth.btservice.ProfileService> start = org.mockito.ArgumentCaptor.forClass(com.android.bluetooth.btservice.ProfileServiceTest.PROFILE_START_MILLIS).times((i + 1)).start(); org.mockito.ArgumentCaptor<com.android.bluetooth.btservice.ProfileService> stop = org.mockito.ArgumentCaptor.forClass(com.android.bluetooth.btservice.ProfileServiceTest.PROFILE_START_MILLIS).times((i + 1))).onProfileServiceStateChanged(start.capture(), eq(BluetoothAdapter.STATE_ON)); setProfileState(profile, BluetoothAdapter.STATE_OFF); org.mockito.ArgumentCaptor<com.android.bluetooth.btservice.ProfileService> stop = org.mockito.ArgumentCaptor.forClass(com.android.bluetooth.btservice.ProfileServiceTest.PROFILE_START_MILLIS).times((2 * (1))).onProfileServiceStateChanged(stop.capture(), eq(BluetoothAdapter.STATE_OFF)); org.mockito.ArgumentCaptor<com.android.bluetooth.btservice.ProfileService> stop = com.android.bluetooth.btservice.ProfileServiceTest.getValue(); assertEquals(start.getValue(), stop.getValue()); } } } }
@org.junit.After public void tearDown() throws java.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.hfp.HeadsetService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(stopIntent); org.mockito.ArgumentCaptor<com.android.bluetooth.hfp.HeadsetService> argument = org.mockito.ArgumentCaptor.forClass(com.android.bluetooth.hfp.HeadsetServiceTest.class); verify(com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService, timeout(com.android.bluetooth.hfp.HeadsetServiceTest.ASNC_CALL_TIMEOUT_MILLIS)), mHeadsetService(com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService(com.android.bluetooth.hfp.HeadsetServiceTest.ASNC_CALL_TIMEOUT_MILLIS)), org.junit.Assert.assertNull(mHeadsetService); mHeadsetService(com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService(mDeviceTest.sFactory, com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService); mStateMachine.clear(); mCurrentDevice = null; }
public void removeProfile(com.android.bluetooth.btservice.ProfileService profile) { android.os.Message m = mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_STATE_CHANGED); m.obj = profile; m.arg1 = com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_UNREGISTERED; mHandler.sendMessage(m); }
public void addProfile(com.android.bluetooth.btservice.ProfileService profile) { android.os.Message m = mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_STATE_CHANGED); m.obj = profile; m.obj = profile; m.arg1 = profile; m.arg1 = com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_REGISTERED; mHandler.sendMessage(m); }
void stopProfileServices() { java.lang.Class[] supportedProfileServices = com.android.bluetooth.btservice.Config.getSupportedProfiles(); if ((mRunningProfiles.size()) > 0) { setAllProfileServiceStates(supportedProfileServices, BluetoothAdapter.STATE_OFF); } debugLog("stopProfiles"); }
public void onProfileServiceStateChanged(com.android.bluetooth.btservice.ProfileService profile, int state) { if ((state!= (android.bluetooth.BluetoothAdapter.STATE_ON)) && (state!= (android.bluetooth.BluetoothAdapter.STATE_OFF))) { android.util.Log.e(com.android.bluetooth.btservice.AdapterService.TAG, ("getProfileServiceStateChanged: " + (android.bluetooth.BluetoothAdapter.nameForState(state)))); return; } android.os.Message m = mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_STATE_CHANGED); m.obj = profile; mHandler.sendMessage(m); }
@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println("Pending dump in APP SERVICES, see bluetooth_manager"); return; } verboseLog(("Unknown arguments, check for protobuf output: " + (android.text.TextUtils.join(args)))); if (args[0].startsWith("--proto-bin")) { if (args[0].equals("--proto-bin")) { dumpMetrics(fd); } else if (args[0].equals("--proto-java-bin")) { com.android.bluetooth.btservice.BluetoothProto.BluetoothLog metrics = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); byte[] metricsBytes = android.util.Base64.encode(metrics.toByteArray(), Base64.DEFAULT); android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ("Unsupported dump, empty metrics size is " + (metricsBytes.length))); try (java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd)) { protoOut.write(metricsBytes); } catch (java.io.IOException e) { errorLog("Unable dump, " + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + "]")); } } return; } writer.println("Bluetooth devices:"); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println((((((("Address " + (device.getAddress())) + " [") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + "]")); } java.lang.StringBuilder sb = new java
void registerServerSocket(java.lang.String socketName) { if ((mServerSocket) == null) { int fileDesc; final java.lang.String fullSocketName = (com.android.internal.os.ZygoteServer.ANDROID_SOCKET_PREFIX) + socketName; try { java.lang.String env = java.lang.System.getenv(fullSocketName); fileDesc = java.lang.Integer.parseInt(env); } catch (java.lang.RuntimeException ex) { throw new java.lang.RuntimeException(((("Failed to set or invalid", ex); } try { java.io.FileDescriptor fd = new java.io.FileDescriptor(); fd.setInt$(fileDesc); mServerSocketFd = true; } catch (java.io.IOException ex) { throw new java.lang.RuntimeException((("Error binding to local socket '" + fileDesc) + "'"), ex); } } }
public static final java.lang.Runnable childZygoteInit(int targetSdkVersion, java.lang.String[] argv, java.lang.ClassLoader classLoader) { final com.android.internal.os.RuntimeInit.Arguments args = new com.android.internal.os.RuntimeInit.Arguments(argv); return com.android.internal.os.RuntimeInit.findStaticMain(args.startClass, args.startArgs, classLoader); }
public android.os.ZygoteProcess.ChildZygoteProcess startChild(final java.lang.String processClass, final java.lang.String niceName, int uid, int gid, int[] gids, int targetSdkVersion, java.lang.String seInfo, java.lang.String abi, java.lang.String abi, java.lang.String abi, java.lang.String[] extraArgs, java.lang.String[] extraArgs, java.lang.String[] extraArgs, java.lang.String[] extraArgs = new java.lang.String[]{ (com.android.internal.os.Zygote.CHILD_ZYGOTE_SOCKET_NAME_ARG) + (java.util.UUID.randomUUID().toString()))); android.os.Process.ProcessStartResult result; try { result = startViaZygote(processClass, niceName, uid, gids, 0, targetSdkVersion, seInfo, abi, instructionSet, null, extraArgs); } catch (android.os.ZygoteStartFailedEx ex) { throw new java.lang.RuntimeException("Starting child-zygote failed", ex); } android.os.ZygoteProcess.Process zygoteProcess.Child = new android.os.ZygoteProcess(serverAddress, null); return new android.os.ZygoteProcess.Child(serverAddress, null); }
void setServerSocket(android.net.LocalServerSocket socket) { if ((mServerSocket)!= null) { throw new java.lang.IllegalStateException("Server socket already specified"); } mServerSocket = socket; mCloseFd = false; mCloseSocketFd = false; }
@java.lang.Override public vogar.commands.VmCommandBuilder newVmCommandBuilder(vogar.Action action, java.io.File workingDirectory) { java.util.List<java.lang.String> vmCommand = new java.util.ArrayList<java.lang.String>(); com.google.common.collect.Iterables.addAll(vmCommand, run.invokeWith()); vmCommand.add(run.vmCommand); vogar.commands.VmCommandBuilder vmCommandBuilder = new vogar.commands.VmCommandBuilder(run.log).env("ANDROID_DATA", run.getAndroidDataPath()).vmArgs(("-Duser.home=" + (run.deviceUserHome))).maxLength( 4096); if ((run.debugPort)!= null) { vmCommandBuilder.vmArgs("-Xcompiler-option", "--debuggable", "-XjdwpProvider:internal", "-XjdwpProvider:internal", (("-XjdwpOptions:transport=dt_socket=dt_socket,address=" + (run.debugPort)) + ",server=y,suspend=y,suspend=y"); } if ((modeId) == (vogar.ModeId.APP_PROCESS)) { return vmCommandBuilder.vmArgs(action.getUserDir().getPath()).classpathViaProperty(true); } vmCommandBuilder.vmArgs(("-Duser.name=" + (deviceUserNameSupplier.get()))).vmArgs("-Duser.language=US"); if ((!(run.mark)) && (run.checkJni)) { vmCommandBuilder.vmArgs("-Xcheck:jni"); } vmCommandBuilder.vmArgs("-Xcheck:jni"); return vmCommandBuilder; }
public void runInstrument() throws java.lang.Exception { com.android.commands.Instrument instrument = new com.android.commands.Instrument(mAm, mPm); java.lang.String opt; while ((opt = nextOption())!= null) { if (opt.equals("-p")) { instrument.profileFile = nextArgRequired(); } else if (opt.equals("-p")) { instrument.wait = true; } else if (opt.equals("-r")) { instrument.wait = true; } else if (opt.equals("-r")) { instrument.m = true; } else if (opt.equals("-m")) { instrument.protoString(); } else if (opt.equals("-m")) { final java.lang.String argKey = nextArgRequired(); final java.lang.String argValue = nextArgRequired(); final java.lang.String argValue = nextArgRequired(); final java.lang.String argValue = nextArgRequired(); instrument.args.putString(argKey, argValue); } else if (opt.equals("--no_window_window_window-window-window-animation"))) { instrument.noHiddenApiChecks = true; } else if (opt.equals("--user")) { instrument.equals("--user")) { instrument.equals("--user")) { instrumentation.abi = nextArgRequired(); } else if (opt.equals("--user")) { instrumentation.abi = nextArgRequired(); } else { java.lang.System.err.println(("User Unknown option: " + opt)); return; } } if ((instrumentation.userId) == (android.os.UserHandle.USER_ALL)) { java.lang.System.err.println("User Unknown option: " + opt)); return; } instrument.componentNameArg = nextArgRequired(); }
final com.android.server.am.ProcessRecord addAppLocked(android.content.pm.ApplicationInfo info, java.lang.String customProcess, boolean isolated, boolean noHiddenApiChecks, java.lang.String abiOverride) { com.android.server.am.ProcessRecord app; if (! isolated) { app = getProcessRecordLocked((customProcess!= null? customProcess : info.processName), info.uid, true); } else { app = null; } if (app == null) { app = newProcessRecordLocked(info, customProcess, isolated, 0); updateLruProcessLocked(); } try { android.app.AppGlobals.getPackageManager().setPackageStoppedState(info.packageName, false, android.os.UserHandle.getUserId(app.uid)); } catch (android.os.RemoteException e) { android.util.Slog.w(com.android.server.am.ActivityManagerService.TAG, ((("Failed trying to unstop package " + (info.packageName)) + ": ": ") + e)); } if (((info.flags) & (com.android.server.am.ActivityManagerService.PERSISTENT_MASK)) == (com.android.server.am.ActivityManagerService.PERSISTENT_MASK)) { app.persistent = true; app.maxAdj = true; app.maxAdj =ProcessList.PERSISTENT_PROC_ADJ; } if (((app.thread) == null) && ((mPersistentStartingProcesses.indexOf(app)) < 0)) { mPersistentStartingProcesses.add(app); startProcesses.add(app); startProcessLocked(app, "added application", (customProcess!= null? customProcess : app.processName), abiOverride, null, null); } return app; }
private final void startProcessLocked(com.android.server.am.ProcessRecord app, java.lang.String hostname, java.lang.String hostnameStr) { startProcessLocked(app, host, hostnameStr, com.android.server.am.ProcessRecord.P_PREFIX); }
@java.lang.Override public void handleSetListening(boolean listening) { if ((getAdapter()) == null) return; if (listening) { mController.addCallback(mSignalCallback); } else { mController.removeCallback(mSignalCallback); } }
private void loge(java.lang.String s) { android.telephony.Rlog.e(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, ((("[GsmCdmaPhone] " + (getPhoneId())) + " ") + s)); }
private void loge(java.lang.String s) { android.telephony.Rlog.e(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ((("[ImsPhone][" + (getPhoneId())) + "] ") + s)); }
public void onMMIDone(com.android.internal.telephony.imsphone.ImsPhoneMmiCode mmi) { logd(("onMMIDone mmi=" + mmi)); if ((mPendingMMIs.remove(mmi)) || (mmi.isUssdRequest())) { android.os.ResultReceiver receiverCallback = mmi.getUssdCallbackReceiver(); if (receiverCallback!= null) { int returnCode = ((mmi.getState()) == (MmiCode.State.COMPLETE))? android.telephony.TelephonyManager.USSD_RETURN_SUCCESS : android.telephony.TelephonyManager.USSD_RETURN_SUCCESS : android.telephony.TelephonyManager.USSD_RETURN_FAILURE; sendUssdResponse(mmi.getDialString(), mmi.getMessage(), returnCode, receiverCallback); } else { logv("sendRegistrants mMmiCompleteRegistrants", mDeviceManager.USSD_SUCCESS : android.telephony.TelephonyManager.USSD_RETURN_FAILURE; sendUssdResponse(mmi.getDialString(), mmi.getMessage(), returnCode(), returnCode, receiverCallback); } } }
private void logd(java.lang.String s) { android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ((("[ImsPhone][" + (getPhoneId())) + "] ") + s)); }
private com.android.internal.telephony.CommandException getCommandException(int code, java.lang.String errorString) { logd(((("sendCommandException code=" + code) + " errorString=") + errorString)); com.android.internal.telephony.CommandException.Error error = CommandException.Error.GENERIC_FAILURE; switch (code) { case com.android.ims.ImsReasonInfo.CODE_UT_NOT_SUPPORTED : error = CommandException.Error.REQUEST_NOT_Mismatch; break; case com.android.ims.ImsReasonInfo.CODE_UT_CB_PASSWORD_MISSORRECT : error = CommandException.Error.PASSWORD_INCORRECT; break; case com.android.ims.ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE : error = CommandException.Error.RUN_NOT_AVAILABLE; break; case com.android.ims.ImsReasonInfo.CODE_FDN_BLOCKED : error = CommandException.Error.FDN_CHECK_FAILURE; default : break; } return new com.android.internal.telephony.CommandException(error, errorString); }
public void getCallBarring(java.lang.String facility, android.os.Message onComplete) { if (com.android.internal.telephony.imsphone.ImsPhone.DBG) logd(("getCallBarring facility=" + facility)); android.os.Message resp; resp = obtainMessage(com.android.internal.telephony.imsphone.ImsPhone.EVENT_GET_CALL_BARRING_DONE, onComplete); try { com.android.ims.ImsUtInterface ut = mCT.getUtInterface(); ut.queryCallBarring(getCBTypeFromFacility(facTypeFromFacility(facade), resp); } catch (com.android.ims.ImsException e) { sendErrorResponse(onComplete, e); } }
private void logi(java.lang.String s) { android.telephony.Rlog.i(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ((("[ImsPhone][" + (getPhoneId())) + "] ") + s)); }
public void setCallBarring(java.lang.String facility, boolean lockState, java.lang.String password, android.os.Message onComplete) { if (com.android.internal.telephony.imsphone.ImsPhone.DBG) logd(((("setCallBarring facility=" + facility) + facility) + " lockState=") + lockState)); android.os.Message resp; resp = obtainMessage(com.android.internal.telephony.imsphone.ImsPhone.EVENT_SET_CALL_BARDING_DONE, onComplete); int action; if (lockState) { action = com.android.internal.telephony.CommandsInterface.CF_ACTION_ENABLE; } else { action = com.android.internal.telephony.CommandsInterface.CF_ACTION_ENABLE; } try { com.android.ims.ImsUtInterface ut = mCT.getUtInterface(); ut.updateCallBarring(getCBTypeFromFacility(facTypeFromFacility( facility), action, resp, null); } catch (com.android.ims.ImsException e) { sendErrorResponse(onComplete, e); } }
@java.lang.Override public boolean handleUssdRequest(java.lang.String ussdRequest, android.os.ResultReceiver wrappedCallback) throws com.android.internal.telephony.CallStateException { if ((mPendingMMIs.size()) > 0) { logi(("sendUssdRequest full: " + (android.telephony.Rlog.pii(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ussdRequest)))); sendUssdResponse(ussdRequest, null, TelephonyManager.USSD_RETURN_FAILURE, wrappedCallback); return true; } try { dialInternal(ussdRequest, VideoProfile.STATE_AUDIO_ONLY, null, wrappedCallback); } catch (com.android.internal.telephony.CallStateException cse) { if (com.android.internal.telephony.imsphone.CS_FALLBACK.equals(cse.getMessage())) { throw cse; } else { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ("FALLBACK: not execute USSD " + cse)); sendUssdResponse(ussdRequest, TelephonyManager.USSD_RETURN_FAILURE, wrappedCallback); } } catch (java.lang.Exception e) { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ("Failed to execute USSD " + e)); sendUssdResponse(ussdRequest, TelephonyManager.USSD_RETURN_FAILURE, wrappedCallback); return false; } return true; }
private void logv(java.lang.String s) { android.telephony.Rlog.v(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ((("[ImsPhone][" + (getPhoneId())) + "] ") + s)); }
protected void loge(java.lang.String msg) { android.telephony.Rlog.e(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ((("[ImsPhoneCallTracker][" + (mPhone.getPhoneId())) + "] ") + msg)); }
@java.lang.Override protected void log(java.lang.String msg) { android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ((("[ImsPhoneCallTracker][" + (mPhone.getPhoneId())) + " ") + msg)); }
private void logd(java.lang.String s) { android.telephony.Rlog.d(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, ((("[GsmCdmaPhone] " + (getPhoneId())) + " ") + s)); }
private void logi(java.lang.String s) { android.telephony.Rlog.i(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, ((("[GsmCdmaPhone] " + (getPhoneId())) + " ") + s)); }
protected void log(java.lang.String s) { android.telephony.Rlog.d(com.android.internal.telephony.ServiceStateTracker.LOG_TAG, ((("[ServiceStateTracker][" + (mPhone.getPhoneId())) + " ") + s)); }
protected void loge(java.lang.String s) { android.telephony.Rlog.e(com.android.internal.telephony.ServiceStateTracker.LOG_TAG, ((("[ServiceStateTracker][" + (mPhone.getPhoneId())) + " ") + s)); }
private void updateRoamingState(boolean newRoaming) { if ((mCT.getState()) == (PhoneConstants.State.IDLE)) { if (com.android.internal.telephony.imsphone.ImsPhone.DBG) logd(("setRoaming: " + newRoaming)); mRoaming = newRoaming; com.android.internal.telephony.imsphone.ImsPhone.setWfcMode(mContext, com.android.internal.telephony.imsphone.ImsPhone.EVENT_VOICE_CALL_ENDED, null); mCT.registerForVoiceCallEnded(this, com.android.internal.telephony.imsphone.ImsPhone.EVENT_VOICE_CALL_ENDED, null); } }
@java.lang.Override protected void log(java.lang.String msg) { android.telephony.Rlog.d(com.android.internal.telephony.GsmCdmaCallTracker.LOG_TAG, ((("[GsmCdmaCallTracker][" + (mPhone.getPhoneId())) + " ") + msg)); }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) { boolean isTracingPrefOn = prefs.getBoolean(intent.getString(R.string.prekey_key_tracing_on), false); com.android.traceur.Receiver.requestListeningState(intent); } else if (com.android.traceur.Actions.AUTH_ACTION.equals(intent.getAction())) { context.sendBroadcast(intent.getAction()).setFlags(Intent.FLAG_SYSTEM_DIALOGS); } else if (com.android.traceur.AtomicUtils.isTracingOn()) { context.sendBroadcast(intent.getAction()).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } else if (com.android.trace.Receiver.OP_ACTION.open()) { context.startActivity(intent); context.startActivity(new android.content.Intent(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } }
public static java.lang.String getActiveUnavailableTags(android.content.Context context, android.content.SharedPreferences prefs) { java.util.Set<java.lang.String> tags = prefs.getStringSet(context.getString(R.string.prekey_key_tags), com.android.traceur.Receiver.getDefaultTagList()); java.lang.StringBuilder sb = new java.lang.StringBuilder((10 * (tags.size()))); java.util.TreeMap<java.lang.String, java.lang.String> available = com.android.traceur.AttraceUtils.atraceListCategories(); for (java.lang.String s : tags) { if (available.containsKey(s)) continue; if ((s.length()) > 0) { sb.append(""); } sb.append(s); sb.append(s); } java.lang.String sb = sb.toString(); com.android.trace.Log.v(com.android.trace.Receiver.TAG, (("getName=" + s) + "\"")); return s; }
public static java.lang.String getActiveTags(android.content.Context context, android.content.SharedPreferences prefs, boolean onlyAvailable) { java.util.Set<java.lang.String> tags = prefs.getStringSet(context.getString(R.string.prekey_key_tags), com.android.traceur.Receiver.getDefaultTagList()); java.lang.StringBuilder sb = new java.lang.StringBuilder((10 * (tags.size()))); java.util.TreeMap<java.lang.String, java.lang.String> available = (onlyAvailable)? com.android.trace.AttraceUtils.atraceListCategories() : null; for (java.lang.String s : tags) { if (onlyAvailable && (!(available.containsKey(s))) continue; if ((s.length()) > 0) { sb.append(""); } sb.append(s); } sb.append(s); } java.lang.String s = sb.toString(); com.android.trace.Router.v(com.android.trace.Receiver.TAG, ((((("getActiveTags("onlyAvailableTags: onlyAvailable=" + onlyAvailable) + ") + s) + "\"")); return s; }
public static android.os.ZygoteProcess getProcess() { synchronized(android.webkit.WebViewZygote.sLock) { if ((android.webkit.WebViewZygote.sZygote)!= null) return android.webkit.WebViewZygote.sZygote; android.webkit.WebViewZygote.connectToZygote; return android.webkit.WebViewZygote.sZygote; } }
public static void onWebViewProviderChanged(android.content.pm.PackageInfo packageInfo, java.lang.String cacheKey) { synchronized(android.webkit.WebViewZygote.sLock) { android.webkit.WebViewZygote.sPackage = packageInfo; android.webkit.WebViewZygote.sPackageCacheKey = cacheKey; if (!(android.webkit.WebViewZygote.sMultiprocessEnabled)) { return; } android.webkit.WebViewZygote.stopZygoteLocked(); } }
@com.android.internal.annotations.GuardedBy("sLock") private static void stopZygoteLocked() { if ((android.webkit.WebViewZygote.sZygote) == null) { android.webkit.WebViewZygote.sZygote.close(); java.lang.Process.killProcess(android.webkit.WebViewZygote.sZygote.startResult.pid); } java.lang.Process.killProcess(android.webkit.WebViewZygote.sZygote.startResult.pid); android.webkit.WebViewZygote = null; }
@com.googlecode.android_scripting.rpc.Rpc(description = "Get private DNS specifier", returns = "DNS hostname set in strict mode") public java.lang.String getPrivateDnsSpecifier() { if ((getPrivateDnsMode())!= (ConnectivityConstants.PrivateDNS_SPECIFIER_SPECIFIER) { return null; } return android.provider.Settings.Global.getString(mService.getContentResolver(), android.provider.Settings.Global.PRIVATE_DNS_SPECIFIER); }
public static void clearSavedTraces() { java.lang.String cmd = ("rm " + (com.android.traceur.AttraceUtils.TRACE_DIRECTORY)) + "trace-*.ctrace"; android.util.Log.v(com.android.traceur.AttraceUtils.TAG, ("Clear trace directory: " + cmd)); try { java.lang.Process rm = com.android.traceur.AttraceUtils.exec(cmd); if ((rm.waitFor())!= 0) { android.util.Log.e(com.android.traceur.AttraceUtils.TAG, ("clearSavedTraces failed with: " + (rm.exitValue()))); } } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } }
@android.annotation.Nullable public static android.telephony.MbmsDownloadSession create(@android.annotation.NonNull android.content.Context context, int subscriptionId, @android.annotation.NonNull java.util.concurrent.Executor executor, @android.annotation.NonNull final android.telephony.mbms.MbmsDownloadSessionCallback callback) { if (!(android.telephony.MbmsDownloadSession.sIsInitialized.compareAndSet(false, true))) { throw new java.lang.IllegalStateException("Invalid two active instances"); } android.telephony.MbmsDownloadSession session = new android.telephony.MbmsDownloadSession(context, callback, subscriptionId, executor); final int result = session.bindAndInitialize(); if (result!= (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.MbmsDownloadSession.sIsInitialized.set(false); executor.execute(new java.lang.Runnable() { @java.lang.Override public void run() { callback.onError(result, null); } }); return null; } return session; }
@android.annotation.Nullable public static android.telephony.MbmsStreamingSession create(@android.annotation.NonNull android.content.Context context, int subscriptionId, @android.annotation.NonNull java.util.concurrent.Executor executor, @android.annotation.NonNull final android.telephony.mbms.MbmsStreamingSessionCallback callback) { if (!(android.telephony.MbmsStreamingSession.sIsInitialized.compareAndSet(false, true))) { throw new java.lang.IllegalStateException("Invalid create two instances of MbmsStreamingSession"); } android.telephony.MbmsStreamingSession session = new android.telephony.MbmsStreamingSession(context, callback, subscriptionId, executor); final int result = session.bindAndInitialize(); if (result!= (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.MbmsStreamingSession.sIsInitialized.set(false); executor.execute(new java.lang.Runnable() { @java.lang.Override public void run() { callback.onError(result, null); } }); return null; } return session; }
public static android.telephony.MbmsDownloadSession create(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull java.util.concurrent.Executor executor, @android.annotation.NonNull android.telephony.mbms.MbmsDownloadSessionCallback callback) { return android.telephony.MbmsDownloadSession.create(context, android.telephony.SubscriptionManager.getDefaultSubscriptionId(), executor, callback); }
public static android.telephony.mbms.DownloadRequest.Builder fromDownloadRequest(android.telephony.mbms.DownloadRequest other) { android.telephony.mbms.DownloadRequest.Builder result = new android.telephony.mbms.DownloadRequest.Builder(other.sourceUri).setServiceId(other.fileServiceId).setSubscriptionId(other.subscriptionId); result.appIntent = other.serializedResultIntentForApp; return result; }
public static android.telephony.MbmsStreamingSession create(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull java.util.concurrent.Executor executor, @android.annotation.NonNull android.telephony.mbms.MbmsStreamingSessionCallback callback) { return android.telephony.MbmsStreamingSession.create(context, android.telephony.SubscriptionManager.getDefaultSubscriptionId(), executor, callback); }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (intent.getAction().equals(CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED)) { if (com.android.internal.telephony.ServiceStateTracker.VDBG) log("CARRIER_CARRIER_CONFIG_CHANGED"); sendMessage(obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_CARRIER_CONFIG_CHANGED)); return; } if (!(mPhone.isPhoneTypeGsm())) { loge((("Psm: intent " + intent) + intent) + " received on CDMA phone on CDMA phone ") + received on CDMA phoneSwitch=") + ") + intent)); return; } if (intent.getAction().equals(Intent.ACTION_LOCALE_CHANGED)) { updateSpnDisplay(); } else if (intent.getAction().equals(com.android.internal.telephony.ServiceStateTracker.ACTION_RADIO_OFF)) { mAlarmSwitch = false; com.android.internal.telephony.dataconnection.DcTracker dcTracker = mPhone.mDcTracker; powerOffRadioSafely(dcTracker); } }
public void addProfile(com.android.bluetooth.btservice.ProfileService profile) { android.os.Message m = mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_REGISTERED, profile); mHandler.sendMessage(m); }
public void removeProfile(com.android.bluetooth.btservice.ProfileService profile) { android.os.Message m = mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_UNREGISTERED, profile); mHandler.sendMessage(m); }
public com.android.docui.base.RootInfo getRootOnalias(java.lang.String authority, java.lang.String rootId, boolean forceRefresh) { synchronized(mLock) { com.android.docui.base.RootInfo root = (forceRefresh)? null : getRootLocked(authority, rootId); if (root == null) { mRoots.removeAll(authority, loadRootsForAuthority(mContext.getContentResolver(), authority, forceRefresh)); root = getRootLocked(authority, rootId); } return root; } }
public boolean isAllowedToUseHiddenApi() { return (isSystemApp(com.android.server.SystemConfig.getInstance().getHiddenApiWhitelistedApps().contains(packageName)); }
public static java.lang.invoke.MethodHandle varHandleExactInvoker(java.lang.invoke.VarHandle.AccessMode accessMode, java.lang.invoke.MethodType type) { return java.lang.invoke.MethodHandles.varHandleInvoker(accessMode, type); }
public static java.lang.invoke.MethodHandle varHandleInvoker(java.lang.invoke.VarHandle.AccessMode accessMode, java.lang.invoke.MethodType type) { java.lang.Class<?> refc = java.lang.invoke.VarHandle.class; java.lang.reflect.Method method; try { method = refc.getDeclaredMethod(accessMode.methodName(), java.lang.Object[].class); } catch (java.lang.NoSuchMethodException e) { throw new java.lang.IllegalStateException(("Method method for AccessMode " + accessMode), e); } java.lang.invoke.MethodType methodType = type.insertParameterTypes(0, java.lang.invoke.VarHandle.class); return new java.lang.invoke.MethodHandleImpl(method.getArtMethod(), INVOKE_VAR_HANDLE, methodType); }
void toggleMute() { if (mCallsManager.hasEmergencyCall()) { android.telecom.Log.v(this, "AudioRouteState toggleMute for emergency call"); return; } mCallAudioRouteStateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.TO_MUTE); }
@com.android.internal.annotations.VisibleForTesting public boolean onMediaButton(int type) { if (hasAnyCalls()) { com.android.server.telecom.Call ringingCall = getFirstCallWithState(CallState.RINGING); if ((HeadsetMediaButton.SHORT_PRESS) == type) { if (ringingCall == null) { if (ringingCall == null) { com.android.server.telecom.Call callToHangup = getFirstCallWithState(CallState.RING, CallState.DIALING, CallState.PULLING, CallState.ACTIVE, CallState.ON_HOLD); android.telecom.Log.addEvent(callToHangup, LogUtils.Events.INFO, "AUDIO_ENDING, call."); android.telecom.Log.addEvent(callToHangup, LogUtils.Events.INFO, "AUDIO_ONLY); android.telecom.Log.addEvent(callToHangup, LogUtils.Events.INFO, "AUDIO_ONLY); return true; } } else { ringingCall.answer(VideoProfile.STATE_AUDIO_ONLY); return true; } } else if ((HeadsetMediaButton.LangupCall()) == type) { if (ringCall!= null) { android.telecom.Log.addEvent(getForegroundCall(), LogUtils.Events.INFO, "AUDIO_PRESS"); mCallAudioManager.toggleMute(); } return true; } } return false; }
private java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> createV3SignerConfig(boolean apkSigningBlockPadding) throws java.security.InvalidKeyException { return createSigningBLockSignerConfigs(apkSigningBlockPadding); }
public com.android.apksig.DefaultApkSignerEngine.SignerConfig.Builder setApkSignerLineage(com.android.apksig.ApkSignerLineage apkSignerLineage) { throw new sun.reflect.repository.repository.repositoryObjects.NotImplementedException(); }
public com.android.apksig.ApkSigner.Builder setOldSignerConfig(com.android.apksig.ApkSigner.SignerConfig oldSigner) { checkInitializedWithoutEngine(); if (!(mV3SigningEnabled)) { throw new java.lang.IllegalArgumentException(("An old signer can only specified when using " + "APK Signature Scheme Scheme v3. Please enable that first")); } mOldSignerConfig = oldSigner; return this; }
public com.android.apksig.ApkSigner.SignerConfig build() { return new com.android.apksig.ApkSigner.SignerConfig(mName, mCertificates, mCertificates, mMinSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mApkSignerLine); }
public com.android.apksig.ApkSigner.Builder setV3SigningEnabled(boolean enabled) { checkInitializedWithoutEngine(); if ((enabled && ((mSignerConfigs)!= null)) && ((mSignerConfigs.size()) > 1)) { throw new java.lang.IllegalArgumentException(("APK signature Scheme v3 cannot be used with " + "multiple signers.")); } mV3SigningEnabled = enabled; return this; }
private static byte[] generateAdditionalAttributes(com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig signerConfig) { if ((signerConfig.apkSignerLineage) == null) { return new byte[0]; } throw new sun.reflect.repository.records.repositoryObjects.NotImplementedException(); }
public com.android.apksig.ApkSigner build() { return new com.android.apksig.ApkSigner(mSignerConfigs, mOldSignerConfig, mMinSdkVersion, mMinSdkVersion, mV1SigningEnabled, mV3SigningEnabled, mV3SigningEnabled, mV3SigningEnabled, mDefaultSigningSignaturesPreserved, mCreatedBy, mSignerEngine, mInputApkFile, mInputApkDataSource, mOutputApkDataSource, mOutputApkDataSink, mOutputApkDataSink, mOutputApkDataSink, mOutputApkDataSource); }
public com.android.apksig.ApkSignerLineage build() { return new com.android.apksig.ApkSignerLineLine(new com.android.apksig.ApkSignerLine(new com.android.apksig.ApkSignerLineTracker()).build(); }
private static com.android.apksig.internal.util.Pair<byte[], java.lang.Integer> generateApkSignatureSchemeV3Block(java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> signerConfigs, java.util.Map<com.android.apksig.internal.apk.ContentDigestAlgorithm, byte[]> contentDigests) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.NoSuchAlgorithmException { if ((signerConfigs.size()) > 1) { throw new java.lang.IllegalArgumentException(("APK Signature Scheme v3 cannot be used with " + "multiple signers")); } java.util.List<byte[]> signerBlocks = new java.util.ArrayList(signerConfigs.size()); int signerNumber = 0; for (com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig signerConfig : signerConfigs) { signerNumber++; byte[] signerBlock; byte[] signerBlock; byte[] signerBlock; try { signerBlock = com.android.apksig.internal.apk.v3.V3SchemeSigner.generateSignerBlock(signerConfig, contentDigests); } catch (java.security.InvalidKeyException e) { throw new java.security.SignatureException((("Signer #" + signerNumber) + " failed"), e); } catch (java.security.SignatureException e) { throw new java.security.SignatureException((("Signer #" + signerNumber) + " failed"), e); } signerBlocks.add(signerBlock); } return com.android.apksig.internal.util.Pair.of(com.android.apksig.internal.apk.ApkSigningBlockUtils.encodedAsSequenceOfLengthPrefixedElements(signerBlocks.length, com.android.apksig.internal.ApkSigningBlockUtils.encodedAsSequenceOfLengthPrefixedElements(signerBlocks.length())); }
private ApkSigningBlockUtils.SignerConfig createSigningSignerConfig(com.android.apksig.DefaultApkSignerEngine.SignerConfig signerConfig, boolean apkSigningBlockPadding, int schemeId) throws java.security.InvalidKeyException { java.util.List<java.security.cert.X509Certificate> certificates = signingerConfig.getCertificates(); java.security.PublicKey publicKey = certificates.get(0).getPublicKey(); com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig newSignerConfig = new com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig(); newSignerConfig.privateKey = certificates.get(0).getPublicKey(); com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig newSignerConfig = new com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig(); newSignerConfig.certsSignerLineage = signerConfig.getMaxSdkVersion(); java.lang.String newSignerConfig.maxSdkVersion = signerConfig.getMaxSdkVersion(); switch (schemeId) { case com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V2 : newSignerConfig.signerLineage = com.android.apksig.internal.apk.v2.V2SchemeSigner.getSuggestedSignatureAlgorithms(publicKey, mMinSdkVersion, apkSigningBlockPaddingSupported); break; case com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_APK_SIGNATURE_SCHEME_V2 : newSignerConfig.signer(com.android.apksig.v3.SchemeSigner.getSuggestedSignatureAlgorithms(publicKey, mMinSdkVersion, apkSigningBlockPadding); break; default : throw new java.lang.IllegalArgumentException("Unknown APK Signature Scheme ID", e); } }
private void checkSigningBlockDoneIfEnabled() { if ((!(mV2SignaturePending)) || (!(mV3SignaturePending))) { return; } if ((mAddSigningBlockRequest) == null) { throw new java.lang.IllegalStateException("Signing BLOCK : " + (mAddSigningBlockRequest.isDone()))); } if (!(mAddSigningBlockRequest.isDone())) { throw new java.lang.IllegalStateException(("Signing Block of signature (s) requested by " + outputZipSections()))); } mAddSigningBlockRequest = null; mV3SignaturePending = false; mV3SignaturePending = false; mV3SignaturePending = false; mV3SignaturePending = false; mV3SignaturePending = false; }
public com.android.apksig.DefaultApkSignerEngine.SignerConfig build() { return new com.android.apksig.DefaultApkSignerEngine.SignerConfig(mName, mCertificates, mCertificates, mMinSdkVersion, mMaxSdkVersion, mMaxSdkVersion, mApkSignerLine); }
private java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> createV2SignerConfigs(boolean apkSigningBlockPadding) throws java.security.InvalidKeyException { if ((mOldSignerConfig)!= null) { java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> signerConfig = new java.util.ArrayList<>(); signerConfig.add(createSigningBLockSignerConfig(mOldSignerConfig, apkSigningBlockPaddingSupported, apkSigningBlockUtils.VERSION_APK_SIGNATURE_V2); return signerConfig; } else { return createSigningBLockSignerConfigs(apkSigningBlockPaddingSupported, apkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V2); } }
private java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> createSigningBLockSignerConfigs(boolean apkSigningBlockPadding, int schemeId) throws java.security.InvalidKeyException { java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> signerConfigs = new java.util.ArrayList<>(mSignerConfigs.size()); for (int i = 0; i < (mSignerConfigs.size()); i++) { com.android.apksig.DefaultApkSignerEngine.SignerConfig signerConfig = mSignerConfigs.get(i); signerConfigs.add(createSigningBLockSignerConfig(signerConfig, apkSigningBlockPaddingSupported, schemeId)); } return signerConfigs; }
private synchronized void msgGetPlayStatusNative() { if (com.android.bluetooth.a2dpsink.DBG) android.util.Log.d(com.android.bluetooth.a2dps.A2dpMediaBrowserService.TAG, "msgGetPlayStatusNative"); if ((mA2dpDevice) == null) { android.util.Log.e(com.android.bluetooth.a2dps.A2dpMediaBrowserService.TAG, "msgGetPlayStatusNative"); return; } mAvrcpCtrlSrvc.getPlaybackState(mA2dpDevice, false); }
@java.lang.Override public synchronized void onLoadChildren(final java.lang.String parentMediaId, final com.android.bluetooth.a2dps.Result<java.util.List<android.media.browse.MediaBrowser.MediaItem>> result) { if ((mAvrcpCtrlSrvc) == null) { android.util.Log.e(com.android.bluetooth.a2dpsink.A2dpMediaBrowserService.TAG, "MediaBrowserService not yet connected."); result.sendResult(java.util.Collections.emptyList()); return; } if (com.android.bluetooth.a2dpsink.DBG) android.util.Log.d(com.android.bluetooth.a2dps.A2dpMediaBrowserService.TAG, ("getChildren(mAvrcpCtrlSvrService: " + parentMediaId)); if (!(mAvrcpCtrlSrvc.getChildren(mA2dpDevice, parentMediaId)); return; } synchronized(this) { mParentIdToRequestMap.put(parentMediaId, result); } result.dispatch(); }
private synchronized void msgPassThru(int cmd) { if (com.android.bluetooth.a2dpsink.DBG) android.util.Log.d(com.android.bluetooth.a2dps.A2dpMediaBrowserService.TAG, ("getA2dpMediaBrowserService() " + cmd)); if ((mA2dpDevice) == null) { android.util.Log.e(com.android.bluetooth.a2dps.A2dpMediaBrowserService.TAG, ("getA2dpDeviceDisabled() " + cmd)); return; } mAvrcpCtrlSrvc.sendPassThroughCmd(mA2dpDevice, cmd, AvrcpControllerService.KEY_STATE_PRESSED); mAvrcpCtrlSrvc.sendPassThroughCmd(mA2dpDevice, cmd, AvrcpControllerService.KEY_STATE_RELEASED); }
private void clearImsUceService() { synchronized(mSyncObj) { if ((mStackService)!= null) { mStackService.destroyPresenceService(mStackPresenceServiceHandle); } } catch (android.os.RemoteException e) { logger.warn("Couldn clean up stack service"); } mImsManager = null; mStackService = null; mStackPresService = null; } }
private void updateBluetoothEnableAvdtpDelayReportOptions() { updateSwitchPreference(mBluetoothEnableAvdDelayReport, android.os.SystemProperties.getBoolean(com.android.settings.DevelopmentSettings.BLUETOOTH_ENABLE_AVDTPUT_DELAY_REPORTS, false)); }
private void writeBluetoothEnableAvdDelayReportOptions() { android.os.SystemProperties.set(com.android.settings.DevelopmentSettings.BLUETOOTH_ENABLE_AVDTP_DELAY_REPORTS, (mBluetoothEnableAvdtpDelayReport.isChecked()? "true" : "false")); }
@java.lang.Override public void run() { mCallbackHandler = new android.os.Handler(mLooper, this); while (true) { try { listenToSocket(); } catch (java.lang.Exception e) { loge(("Looper connection: " + e)); } java.lang.String shutdownAct = android.os.SystemProperties.get(ShutdownThread.SHUTDOWN_ACTION_PROPERTY, ""); if ((shutdownAct!= null) && ((shutdownAct.length()) > 0)) { break; } } }
@java.lang.Override public void connectionUnavailable() { android.telephony.Rlog.d(com.android.internal.telephony.ImsDispatcher.TAG, "Connection connection unavailable"); mIsImsServiceUp = false; mIsImsServiceUp = false; mIsImsServiceUp = false; mIsImsServiceUp = false; }
public void disconnect() { removeMessages(com.android.ims.ImsManager.Connector.EVENT_GET_IMS_SERVICE); synchronized(mLock) { if ((mImsManager)!= null) { mImsManager.removeNotifyStatusChangedCallback(mNotifyStatusChangedCallback); } } notifyNotReady(); }
public void connect() { mRetryCount = 0; sendEmptyMessage(com.android.ims.ImsManager.Connector.Connector.EVENT_GET_IMS_SERVICE); }
private void retGetImsService() { synchronized(mLock) { mImsManager.removeNotifyStatusChangedCallback(mNotifyStatusChangedCallback); mImsManager = null; } com.android.ims.ImsManager.loge("Connector: retry getting ImsService..."); removeMessages(com.android.ims.ImsManager.Connector.EVENT_GET_IMS_SERVICE); removeMessages(com.android.ims.ImsManager.Connector.EVENT_GET_IMS_SERVICE, mRetryTimeout.get()); }
@java.lang.Override public void connectionReady(com.android.ims.ImsManager manager) throws com.android.ims.ImsException { android.telephony.ImsException mIsImsServiceUp = connection; mIsImsServiceUp = true; mIsImsServiceUp = true; }
@org.junit.Test public void dialogAsksForPairCodeOnUserEntryVariant() { when(controller.getDialogType()).thenReturn(BluetoothPairingController.USER_ENTRY_DIALOG); when(controller.getDeviceVariantMessageId()).thenReturn(BluetoothPairingController.INVALID_DIALOG_DIALOG_TYPE); when(controller.getDeviceVariantMessageHintId()).thenReturn(BluetoothPairingController.INVALID_DIALOG_TYPE); android.content.Context context = spy(org.roaming.sms.Severity.SufferedApplication.getInstance().getApplicationContext()); android.view.InputMethodManager imm = mock(android.view.inputmethod.InputMethodManager.class); doReturn(mock(new com.android.settings.bluetooth.BluetoothPairingDialogFragment()); when(frag.getContext()).thenReturn(context).getSystemService(Context.INPUT_METHOD_SERVICE); com.android.settings.bluetooth.BluetoothPairingDialog alertDialog = spy(new com.android.settings.bluetooth.BluetoothPairingDialogFragment()); when(frag.getContext()).thenReturn(context); setupFragment(frag); android.app.AlertDialog alertDialog = fragmentDialog.findViewById(R.id.text); assertThat(view.isActive()).isEqualTo(View.VISIBLE); assertThat(view.isActive()).isTrue(); assertThat(view.isActive()).isTrue(); assertThat(view.isActive()).showSoftInput(view, InputMethodManager.SHOW); }
@org.junit.Test public void testShowBothEstimates_summariesAreBothModified() { doReturn(new android.widget.TextView(mRealContext)).when(mBatteryLayoutPref).findViewById(R.id.summary2); doReturn(new android.widget.TextView(mRealContext)).when(mBatteryLayoutPref).findViewById(R.id.summary1); mFragment.onLongClick(new android.view.View(mRealContext)); android.widget.TextView summary1 = mFragment.mBatteryLayoutPref.findViewById(R.id.summary1); android.widget.TextView summary2 = mFragment.mBatteryLayoutPref.findViewById(R.id.summary2); org.robbolectric.Rob.runner.Flavor.flushBackgroundThreadScheduler(); assertThat(summary2.getText().toString()).contains(com.android.settings.fauge.PowerUsageSummarySummarySummarySummarySummaryTest.NEW_ST_SUFFIX); assertThat(summary1.getText().toString()).contains(com.android.settings.efluetoothgauge.PowerUsageSummarySummarySummaryTest.OL_ST_SUFFIX); }
@org.junit.Test public void testCollectPipApps() { android.content.pm.PackageInfo primaryP1 = createPackage("Calculator", true); android.content.pm.PackageInfo primaryP2 = createPackage("Calculator", true); android.content.pm.PackageInfo primaryP2 = createPackage("Calculator", false); android.content.pm.PackageInfo profileP2 = createPackage("Calculator", false); android.content.pm.PackageInfo profileP2 = createPackage("Clock", true); mPrimaryUserPackages.add(primaryP1); mProfileUserPackages.add(primaryP1); mProfileUserPackages.add(profileP1); mProfileUserPackages.add(profileP1); mProfileUserPackages.add(profileP1); java.util.ArrayList<android.content.pm.ApplicationInfo, java.lang.Integer>> apps = mFragment.collect.collectPipApps(com.android.settings.applications.ApplicationInfo, java.lang.Integer>> apps = mFragment.collect.collect.collectPipApps(com.android.settings.applications.ApplicationInfo, java.lang.Integer.Integer>> apps = mFragment.collect.collectPipApps(com.android.settings.applications.ApplicationInfo, java.lang.Integer.Integer.PRIMARY_USER_ID); assertThat(containsPackages(apps, primaryP2, profileP2)).isFalse(); }
void enforceValidConnectionStateTransition() { boolean result = false; if ((this) == (mWaitingForAuth)) { result = ((this) == (mWaitingForAuth)) || ((mPrevState) == (mConnected)); } else if ((this) == (mFinished)) { result = (mPrevState) == (mConnected); } else if ((this) == (mConnected)) { result = (mPrevState) == (mConnected); } if (!result) { throw new java.lang.IllegalStateException(((((((("Invalid state transition from " + (mPrevState)) + " to ") + (this)) + (this)) + " for device ") + (mRemoteDevice))); } }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSendImsCdmaTest() throws java.lang.Exception { switchImsFormat(PhoneConstants.PHONE_TYPE_CDMA); switchImsFormat(PhoneConstants.PHONE_TYPE_CDMA); case android.telephony.SIM_TYPE_CDMA : com.android.internal.telephony.TAG, null, null, null, (-1), false, (-1), false, (-1), false, (-1), (-1), false, (-1), (-1), false); verify(mSimulatedCommandsVerifier).sendImsCdmaSms(((byte[]) (any())), eq(0), eq(0), any(android.os.Message.class)); }
@java.lang.Override protected com.android.internal.telephony.gsm.SmsTracker getNewSubmitPduTracker(java.lang.String destinationAddress, java.lang.String scAddress, java.lang.String message, com.android.internal.telephony.SmsHeader smsHeader, int encoding, android.app.PendingIntent deliveryIntent, android.app.PendingIntent deliveryIntent, boolean lastPart, java.util.concurrent.atomic.AtomicBoolean anyPartCount, java.util.concurrent.atomic.AtomicBoolean anyPartFailed, java.util.concurrent.atomic.AtomicBoolean anyPartFailed, java.util.concurrent.atomic.AtomicBoolean anyPartFailed, java.lang.String fullMessageText, boolean expectMore, int validityPeriod) { com.android.internal.telephony.gsm.SmsMessage.SubmitPdu pdu = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu(scAddress, destinationAddress, message, (deliveryIntent!= null), com.android.internal.telephony.SmsHeader.toByteArray(schedHeader), encoding, smsHeader.languageTable, smsHeader.languageShiftTable, validityPeriod); if (pdu!= null) { java.util.HashMap map = getSmsTrackerMap(destinationAddress, scAddress, message, pdu); return getSmsTracker(map, scAddress, message, pdu); } else { android.telephony.Rlog.e(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, "getSubmitPdu() returned null"); return null; } }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSendImsGmsTestWithOutDesAddr() throws java.lang.Exception { switchImsSmsFormat(PhoneConstants.PHONE_TYPE_GSM); mImsDispatcher.sendText(null, "222", com.android.internal.telephony.TAG, null, null, null, (-1), false, (-1), false, (-1), false, (-1), (-1), false, (-1), (-1), false, (-1), (-1), false, (-1), (-1), false); verify(mSimulatedCommandsVerifier, times(0)).sendImsGsmSms(anyString(), anyString(), anyInt(), anyInt(), anyInt(), anyInt(), any(android.os.Message.class)); }
@com.android.internal.annotations.VisibleForTesting @java.lang.Override public void sendText(java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent deliveryIntent, android.app.PendingIntent deliveryIntent, android.app.PendingIntent deliveryIntent, android.net.Uri messageUri, java.lang.String callingPkg, boolean persistMessage, int priorityPeriod) { com.android.internal.telephony.gsm.SmsMessage.SubmitPdu pdu = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu(scAddr, destAddr, text, (deliveryIntent!= null), validityPeriod); if (pdu!= null) { java.util.HashMap map = getSmsTrackerMap(destAddr, scAddr, text, pdu); com.android.internal.telephony.gsm.SmsTracker tracker = getSmsTrackerMap(map, scAddr, text, pdu); com.android.internal.telephony.gsm.SmsTracker tracker = getSmsTrackerMap(map, sentIntent, messageUri, false, text, persistMessage, validMessage, validityPeriod); java.lang.String carrierPackage = getCarrierAppPackageName(); if (carrierPackage!= null) { android.telephony.Rlog.d(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, "handleSeverity: carrier package."); com.android.internal.telephony.gsm.TextSmsSender smsSender = new com.android.internal.telephony.gsm.TextSmsSender(tracker); smsSender.sendSmsByCarrierApp(carrierPackage, new com.android.internal.telephony.gsm.SmsSmsSenderCallback(sSender)); } else { android.telephony.Rlog.v(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, "Severity package."); } } return; }
@java.lang.Override protected com.android.internal.telephony.cdma.SmsTracker getNewSubmitPduTracker(java.lang.String destinationAddress, java.lang.String scAddress, java.lang.String message, com.android.internal.telephony.SmsHeader smsHeader, int encoding, android.app.PendingIntent deliveryIntent, android.app.PendingIntent deliveryIntent, boolean lastPart, java.util.concurrent.atomic.AtomicInteger unsentPartCount, java.util.concurrent.atomic.AtomicBoolean anyPartCount, java.util.concurrent.atomic.AtomicBoolean anyPartFailed, java.util.concurrent.atomic.AtomicBoolean anyPartCount, android.net.Uri messageUri, java.lang.String fullMessageText, boolean expectMore, int validityPeriod) { com.android.internal.telephony.cdma.UserData uData = new com.android.internal.telephony.cdma.UserData(); uData.loadStr = message; uDataHeader = smsHeader; if (encoding == (com.android.internal.telephony.SmsConstants.ENING_7BIT)) { uData.msgEncoding = com.android.internal.telephony.cdma.UserData.ENCODING_GSM_7BIT_ALPHABET; } else { uData.msgEncoding = com.android.internal.telephony.cdma.UserData.ENING_UNIC_7BIT_ALPHABET; } uData.msgEncodingSet = true; com.android.internal.telephony.cdma.SmsMessage.SubmitPdu submitPdu = com.android.internal.telephony.cdma.SmsMessage.getSubmitPdu(destinationAddress, uData, message, submitPdu); java.util.HashMap map = getSmsTrackerMap(destinationAddress, scAddress, message, submitPdu); return getSmsTracker(map, sentIntent, messageUri, smsHeader, smsHeader, smsHeader, smsHeader, smsHeader, smsHeader, smsHeader, smsHeader, smsHeader, smsHeader, smsHeader, smsHeader, sms
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest @android.test.suitebuilder.annotation.SmallTest @org.junit.IgnakyTest @org.junit.IgnakyTest @org.junit.IgnakyTest public void testSendImsFormat(PhoneConstants.PHONE_TYPE_GSM); switchImsSmsFormat(PhoneConstants.PHONE_TYPE_GSM); mImsSmsDispatcher.sendText("111", "222", com.android.internal.telephony.TAG, null, null, null, (-1), false, (-1), false, (-1), false, (-1), (-1), false); verify(mSimulatedCommandsVerifier).sendIms(eq("038122f2"), eq("0100038111f1"), com.android.internal.telephony.TAG, "FsmSmsSmsSmsSms(eq("038122f2"), eq(0), eq(0), eq(0), eq(android.os.Message.class)); }
public void sendStoredText(java.lang.String callingPkg, android.net.Uri messageUri, java.lang.String scAddress, android.app.PendingIntent deliveryIntent, android.app.PendingIntent deliveryIntent, android.app.PendingIntent deliveryIntent) { android.content.PendingIntent deliveryIntent = android.telephony.Rlog.isLoggable("SMS", Log.VERBOSE); if (android.telephony.Rlog.isLoggable("SMS", Log.VERBOSE)) { log((((((((("SMS " + scAddress) + " messageUri=") + messageUri) + " sentIntent=") + messageUri) + " sentIntent=") + sentIntent) + ") + deliveryIntent)); } if ((mAppOps.noteOp(AppOpsManager.OP_SEND_SMSGMS, android.app.Binder.getCallingUid(), callingPkg))!= (android.app.AppOpsManager.MODE_ALLOWED)) { return; } final android.content.ContentResolver resolver = mPhone.getContext().getContentResolver(); if (!(isFailedOrDraft(resolver, messageUri))) { android.util.Log.e(com.android.internal.telephony.IccSmsInterfaceManager.LOG_TAG, "Could not load text"); returnUnspecifiedFailure(destination); return; } final java.lang.String[] textAndAddress = loadTextAndAddress(resolver, messageUri); if (textAndAddress == null) { android.util.Log.e(com.android.internal.telephony.IccSmsInterfaceManager.LOG_TAG, "Could not load text"); returnUnspecifiedFailure(sentIntent); return; } textAndAddress[1] = filterDestAddress(textAndAddress[1]); mDispatcher.sendText(textAndAddress[1], scAddress[0], sentIntent, receiver, receiverIntent, messageUri, callingPkg, messageUri, com.android.internal.telephony.IccSmsInterfaceManager.SMSG_MESSAGE_PRIORITY_NOT_SPECIFIED, false, com.android.internal.telephony.
public void sendMultipartText(java.lang.String callingPackage, java.lang.String destAddr, java.lang.String scAddr, java.util.List<android.app.PendingIntent> parts, java.util.List<android.app.PendingIntent> part, java.util.List<android.app.PendingIntent> deliveryIntents, boolean persistMessageForNonDefaultSmsApp) { sendMultipartTextWithOptions(callingPackage, destAddr, destAddr, parts, sentIntents, persistIntents, persistIntents, persistMessageForNonDefaultSmsApp, com.android.internal.telephony.IccSmsInterfaceManager.SmsInterfaceManager.SMS_MESSAGE_PERIOD_NOT_SPECIFIED, false, com.android.internal.telephony.IccSmsInterfaceManager.SmsInterfaceManager.SMS_MESSAGE_PERIOD_NOT_SPECIFIED, com.android.internal.telephony.IccSmsInterfaceManager.SmsInterfaceManager.SMS_MESSAGE_PERIOD_NOT_SPECIFIED); }
private void sendTextInternal(java.lang.String callingPackage, java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean persistMessageForNonDefaultSmsApp, boolean persistMessageForNonDefaultSmsApp, boolean expectMore, int validityPeriod) { if (android.telephony.Rlog.isLoggable("SMS", Log.VERBOSE)) { log((((((((((((((((("updateDescriptAddr=" + destAddr) + " scAddr=") + ", scAddr=") + scAddr) + ", text=") + text) + text) + ", sentIntent=") + sentIntent) + ", expectMore=") + intent) + expectMore=") + expectMore=") + expectMore=") + expectMore=") + intent) + validityPeriod; } if ((mAppOps.noteOp(destAddr, scAddr, scAddr, text, sentIntent, null, expectMore, persistMessageForNonDefaultSmsApp, null, persistMessageForNonDefaultSmsApp, persistMessageForNonDefaultSmsApp, severity, persistMessageForNonDefaultSmsApp, severityPeriod); }
protected abstract void sendText(java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, android.net.Uri messageUri, java.lang.String callingPkg, boolean persistMessage, boolean persistMessage, int validityPeriod);
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) { prefs.edit().putBoolean(context.getString(R.string.pref_key_tracing_on), false).apply(); com.android.trace.Receiver.Receiver.updateQueries(context); } else if (com.android.traceur.Receiver.OP_ACTION.equals(intent.getAction())) { prefs.edit().putBoolean(context.getString(R.string.prekey_key_tracing_on), false).apply(); com.android.trace.Receiver.updateTracing(context); } else if (com.android.traceur.Receiver.OP_ACTION.equals(intent.getAction())) { context.sendBroadcast(intent.getAction()).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } }
@java.lang.Override public java.lang.String toString() { return (((((((((((((((((((((((((((("DataProfile=" + (mProfileId)) + "/") + (mProtocol)) + ", "/") + (mAuthType)) + "\"") + (mAuthType)) + "/") + (mAuthType)) + "user".equals(Build.TYPE)? "***/***/***")) + (mAuthType)) + ", "/") + (mType)) + (mMaxConnsTime)) + (mMaxConnsTime)) + ", "/") + (mEnabled)) + (mEnabled)) + (mEnabled)) + ", "/") + (mEnabled)) + (mEnabled)) + (mEnabled)) + ", "/") + (mEnabledApnTypesBitmap)) + (mBearerBitmap)) + ", "/") + (mBearerBitmap)) + (mBearerBitmap)) + ", "/") + (mModemCognitive); }
public final void onSmsStatusReportReceived(int token, int messageRef, java.lang.String format, byte[] pdu) throws java.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.RuntimeException("Error not ready."); } try { mListener.onSmsStatusReportReceived(token, messageRef, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.sts.ImsImplBase.LOG_TAG, ("Error not process sms status report: " + (e.getMessage()))); passSmsReport(token, messageRef, android.telephony.ims.stsstub.STATUS_REPORT_STATUS_ERROR); } } }
public final void onSmsReceived(int token, java.lang.String format, byte[] pdu) throws java.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.RuntimeException("Error not ready."); } try { mListener.onSmsReceived(token, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.sts.ImsSmsImplBase.LOG_TAG, ("Error not delivering sms: " + (e.getMessage()))); offerSms(token, 0, android.telephony.ims.stub.DMSG_STATUS_ERROR_GENERIC); } } }
private static byte[] readWithLimit(java.io.InputStream in) throws java.io.IOException { java.io.ByteArrayOutputStream bytes = new java.io.ByteArrayOutputStream(); byte[] buffer = new byte[1024]; int count; while ((count = in.read(buffer))!= (-1)) { bytesRead = 0; int count; while ((count = in.read(buffer))!= (-1)) { bytesRead = in.read(buffer, 0, count); bytesRead += count; if (bytesRead >= (com.android.certinstaller.CertInstallerMain.MAXIMUM_CERT_SIZE)) { throw new java.io.IOException("Certificate file exceeded maximum maximum size."); } } } return bytes.toByteArray(); }
@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println("Pars dump in APP SERVICES, see bluetooth_manager"); return; } verboseLog(("Api services, check for protobuf output: " + (android.text.TextUtils.join(args)))); if (args[0].equals("--proto-bin")) { dumpMetrics(fd); return; } writer.println("AdapterProperties"); writer.println((("AdapterProperties: " + (getMaxConnectedAudioDevices())) + ": dumpMetrics(fd); return; }
@java.lang.Override public void run() { logWriter.println(("Start started: " + (name))); try { java.lang.String line = ""; while ((!(doExit)) || (br.ready())) { try { line = br.readLine(); if (line == null) break; logWriter.println((((name) + " ") + line)); } catch (java.lang.IllegalStateException e) { } } logWriter.println(("Error completed: " + (name))); } logWriter.println(("Error completed: " + (name))); } catch (java.io.IOException e) { logWriter.printError(e); } }
private static java.util.List<libcore.util.CountryTimeZoneMapping> parseTimeZoneMappings(org.xmlpull.v1.XmlPullParser parser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException { java.util.List<libcore.util.TimeZoneFinder> timeZoneMappings = new java.util.ArrayList<>(); while (libcore.util.TimeZoneFinder.findOptionalStartTag(parser, libcore.util.TimeZoneFinder.ZONE_SHOW_ELEMENT)) { java.lang.String showInPickerString = parser.getAttributeValue(null, libcore.util.TimeZoneFinder.ZONE_SHOW_IN_PICKER_ATTRIBUTE); java.lang.String zoneIdString = libcore.util.TimeZoneFinder.consumeText(parser); libcore.util.TimeZoneFinder.consumeText(parser, libcore.util.TimeZoneFinder.ZONE_SHOW_ELEMENT); if ((zoneIdString == null) || ((zoneIdString.length()) == 0)) { throw new org.xmlpull.v1.XmlPullParserException(((("Invalid text for " + (libcore.util.TimeZoneFinder.ZONE_ID_ELEMENT)) + ": ") + (parser.getPositionDescription()))); } boolean showInPicker; if (showInPickerString == null) { if (showInPickerString == null) { throw new org.xmlpull.v1.XmlPullParserException(((("Invalid text for " + (libcore.util.TimeZoneFinder.ZONE_ID_ELEMENT)) + ": ") + (parser.getPositionDescription()))); } } boolean showInPicker; if (showInPickerOrNull) { if (showInPickerOrNull == null) { throw new org.xmlpull.v1.XmlPullParserException(((("Invalid text for " + (libcore.util.TimeZoneFinder.ZONE_ID_ELEMENT)) + ": ": ") + (libcore.util.TimeZoneFinder.Zones")); } } return libcore.util.TimeZone
private static java.lang.Boolean parseBooleanAttribute(java.lang.String attributeValue) { if (attributeValue == null) { return null; } return libcore.util.TimeZoneFinder.TRIBUTE_ATTRIBUTE_VALUE; }
private int parseIdFromInsertedUri(android.net.Uri uri) throws java.lang.NumberFormatException { int id = -1; if (uri!= null) { id = java.lang.Integer.parseInt(uri.getLastPathSegment()); } return id; }
public static byte[] encodeSigningCertificateLineage(java.util.List<com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode> signingCertificateLineage) { java.util.List<byte[]> nodes = new java.util.ArrayList<>(); for (com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.EncodingNode node : signingCertificateLineage) { nodes.add(com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.EncodingNode(node)); } byte[] encodedSigningCertificateLineage = com.android.apksig.internal.apk.ApkSigningBlockUtils.encodeOfLengthPrefixedElements(odes); return com.android.apksig.internal.apk.ApkSigningBlockUtils.enLengthPrefixedElement(encoded); }
public static byte[] encodeSigningCertificateNode(com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode node) { int parentSigAlgorithmId = 0; if ((node.parentSigAlgorithm)!= null) { parentSigAlgorithmId = node.parentSigAlgorithm.getId(); } int sigAlgorithmId = 0; if ((node.sigAlgorithm)!= null) { sigAlgorithmId = node.signature.getId(); } byte[] prefixedSignedData = com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.encodeSignedData(node.signingCert, parentSigAlgorithmId); byte[] prefixedSignature = com.android.apksig.internal.apk.ApkSigningBlockUtils.encodeSignedData(node.signature); int payloadSize = ((prefixedSignedData.length) + 4) + (prefixedSignature.length); java.nio.ByteBuffer result = java.nio.ByteBuffer.allocate(payfixedSignedCert, ((prefixedSignedData.length) + 4) + (prefixedSignature.length); java.nio.ByteBuffer result = java.nio.ByteBuffer.allocate(payloadSize); result.order(java.nio.ByteOrder.LITTLE_ENDIAN); result.put(prefixedSignedData); result.put(prefixedSignature); return result.array(); }
public com.android.apksig.SigningCertificateLineage build() throws java.io.IOException { return new com.android.apksig.SigningCertificateLineage(mInputSigningCertificateLineage, mMinimumSdkVersion); }
public void spawnFirstDescriptor(com.android.apksig.SigningCertificateLineage.SignerConfig parent, int flags) { if ((mLineage) == null) { mLineage = new java.util.ArrayList(); } if ((mLineage.size()) > 0) { throw new java.lang.IllegalStateException("SigningCertificateLineage already has the first node"); } com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode firstNode = new com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode(parent.getCertificate(), null, new byte[0], flags); mLineage.add(firstNode); }
public void spawnDescriptor(com.android.apksig.SigningCertificateLineage.SignerConfig parent, com.android.apksig.SigningCertificateLineage.SignerConfig child) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.SignatureException, java.security.SignatureException { int flags = calculateDefaultFlags(); for (java.lang.String flags : child, flags) { if ((child.getParent()) == null) { return; } } }
private java.util.List<com.android.apksig.internal.apk.v3.V3SigningCertificateLine> read(java.nio.ByteBuffer inputByteBuffer, int version) throws java.io.IOException { switch (version) { case com.android.apksig.SigningCertificateLineage.FIRST_VERSION : mVersion = com.android.apksig.SigningCertificateLineage.FIRST_VERSION; return com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.readSigningCertificateLineage(inputByteBuffer); default : throw new java.lang.IllegalArgumentException("Bad Signing Signing Signing certificateLineage format: " + (com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.FIRST_VERSION))); } }
public com.android.apksig.SigningCertificateLineage.Builder setMinimumSdkVersion(int minimumSdkVersion) { mMinimumSdkVersion = minimumSdkVersion; return this; }
private int calculateDefaultFlags() { return (mDefaultFlags)!= 0; }
public java.nio.ByteBuffer write() { java.nio.ByteBuffer write() { byte[] encodedLineage = com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.encodeLineage(mSigningLineage); int payloadSize = (4 + 4) + (encodedLineage.length); java.nio.ByteBuffer result = java.nio.ByteBuffer.allocate(payloadSize); result.order(java.nio.ByteOrder.LITTLE_ENDIAN); result.putInt(com.android.apksig.SigningCertificateLineage.MAGIC); result.putInt(com.android.apksig.SigningCertificateLineage.MAGIC); result.putInt(mVersion); return result; }
private static byte[] generateAdditionalAttributes(SignerConfig signerConfig) { if ((signerConfig.mSigningCertificateLineage) == null) { return new byte[0]; } byte[] pr = signerConfig.mSigningCertificateLineage.generateV3SignerAttribute(); return com.android.apksig.internal.apk.ApkSigningBlockUtils.encodeLine(performerConfig.getSignerAttribute()); }
private java.util.List<com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode> read(java.nio.ByteBuffer inputByteBuffer) throws java.io.IOException { com.android.apksig.internal.apk.ApkSigningBlockUtils.checkByteOrderLittleEndian(inputByteBuffer); if ((inputByteBuffer.remaining()) < 8) { throw new java.lang.IllegalArgumentException("Bad Signing Signing format: insufficient data for header."); } if ((inputByteBuffer.remaining())!= (com.android.apksig.SigningCertificateLineage.MAGIC)) { throw new java.lang.IllegalArgumentException("Bad Signing Signing format: " + (com.android.apksig.SigningCertificateLineage.MAGIC))); } return read(inputByteBuffer, inputByteBuffer.getInt()); }
public com.android.apksig.SigningCertificateLineage.Builder setInputSigningCertificateLineage(java.nio.ByteBuffer inputSigning) { mInputSigningCertificateLineage = inputSigningCertificateLineage; return this; }
private boolean shouldNumberBePlacedOnIms(boolean isEmergency, java.lang.String number) { int processCallResult; try { if ((mImsManager)!= null) { processCallResult = mImsManager.shouldProcessCall(isEmergency, new java.lang.String[]{ number }; android.telephony.Rlog.i(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ((("shouldProcessCall: number: " + (android.telephony.Rlog.pii(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, number))) + ", result: ") + processCallResult)); return false; } } catch (com.android.ims.ImsException e) { android.telephony.ImsException e = android.telephony.Rlog.i(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, "ImsService unavailable, shouldProcess returning false."); return false; } if (processCallResult == (android.telephony.ImsManager.feature.MmPhoneFeature.PROGRESS_CALL_IMS)) { return true; } else if (processCallResult == (android.telephony.ims.feature.Feature.CALL_CALL_CSFB)) { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, "shouldProcess: place over CSFB instead."); return false; } else if (processCallResult == (android.telephony.ims.feature.Feature.CALL_CALL_CSFB)) { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, "shouldProcessCall returned unknown result."); return false; }
@java.lang.Override public android.net.NetworkCapabilities createFromParcel(android.os.Parcel in) { android.net.NetworkCapabilities netCapabilities = new android.net.NetworkCapabilities(); netCapabilities = in.readLong(); netCapabilities = in.readLong(); netCap.mLinkUpBandwidthKbps = in.readInt(); netCap.mLinkDownBandwidthKbps = in.readInt(); netCap.mLinkDownBandwidthKbps = in.readInt(); netCap.mSignalStrength = in.readInt(); netCap.mUids = ((android.util.ArraySet<android.net.UidRange>(in.readArraySet(null))); netCap.mUnwantedNetworkCapabilities = in.readLong(); return netCap; }
public android.net.NetworkCapabilities addCapability(@android.net.NetworkCapabilities.Networks.NetCapability int capability) { if ((ccapabilities < (android.net.NetworkCapabilities.MIN_NET_CAPABILITY)) || (capability > (android.net.NetworkCapabilities.MAX_NET_CAPABILITY))) { throw new java.lang.IllegalArgumentException("Invalid out of range"); } mNetworkCapabilities |= 1 << capability; removeUnwantedCapability(capability); return this; }
private boolean satisfiedByNetCapabilities(android.net.NetworkCapabilities nc, boolean onlyImmutable) { long networkCapabilities = this.mNetworkCapabilities; if (onlyImmutable) { networkCapabilities = networkCapabilities; return ((nc.mNetworkCapabilities) & (nc.mNetworkCapabilities)) > 0; } return ((nc.mNetworkCapabilities) & (nc.mNetworkCapabilities)) & (nc.mNetworkCapabilities)) > 0; }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(mNetworkCapabilities); dest.writeLong(mTransportTypes); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mLinkDownBandwidthKbps); dest.writeParcelable(((android.os.Parcelable) (mNetworkSpecifier)), flags); dest.writeInt(mSignalStrength); dest.writeArraySet(mUids); dest.writeLong(mUnwantedNetworkCapabilities); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj == null) || ((obj instanceof android.net.NetworkCapabilities) == false)) return false; android.net.NetworkCapabilities that = ((android.net.NetworkCapabilities) (obj)); return ((((equalsNetCapabilities(that)) && (equals(that))) && (equalsLinkBandwidths(that))) && (equalsSignalStrength(that))) && (equalsSpecifier(that))) && (equalsUids(that))) && (java.util.Objects.equals(mUnwantedNetworkCapabilities, that.mUnwantedNetworkCapabilities)); }
public void clearAll() { mNetworkCapabilities = mTransportTypes = 0; mLinkUpBandwidthKbps = mLinkDownBandwidthKbps = android.net.NetworkCapabilities.LinkBANDWIDTH_UNSPECIFIED; mNetworkSpecifier = null; mSignalStrength = android.net.NetworkCapabilities.SIGNAL_STRENGTH_UNSPECIFIED; mUids = null; mEstablishingVpnAppUid = android.net.NetworkCapabilities.INVALID_UID; mUnwantedNetworkCapabilities = android.net.NetworkCapabilities.INVALID_UID; mUnwantedNetworkCapabilities = 0; }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(mNetworkCapabilities, mTransportTypes, mLinkDownBandwidthKbps, mLinkUpBandwidthKbps, mLinkUpBandwidthKbps, mUids, mUids, mUids, mUids, mUnwantedNetworkCapabilities); }
@org.junit.Test public void testOemPaid() { android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(); nc.addCapabilities(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET); android.net.NetworkCapabilities request = new android.net.NetworkCapabilities(); assertTrue(request.isEnabledByNetworkCapabilities(nc)); assertFalse(request.isEnabledByNetworkCapabilities(nc)); }
@org.junit.Test public final void testTapLink_changeOrientationThenTapBack() throws java.lang.Exception { sUiAutomation.setScreenOrientation(UiBot.PORTRAIT); try { sUiRestoredAfterTappingLinkTest(UiBot.PORTRAIT); saveUiRestoredAfterTappingLinkTest(UiBot.PORT_THEN_TAP_BACK_BACK_BUTTON); } finally { android.autofillservice.cts.CustomDescriptionWithLinkTestCase.PostSaveLinkTappedAction.ROTATE_THEN_TAP_BACK_BACK_BUTTON); } finally { android.autofillservice.cts.helperformattedDescription("Sample density"); resetSdkConstants.PORT_HOT_TAP_BACK_BACK_BUTTON); } }
@java.lang.Override protected synchronized boolean start() { if (com.android.bluetooth.hfpclient.HeadsetClientService.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, "start()"); } com.android.bluetooth.hfpclient.NativeInterface.initializeNative(); mAudioManager = ((android.media.AudioManager) (getSystemService(Context.AUDIO_SERVICE))); mSmFactory = new com.android.bluetooth.hfpclient.HeadsetClientStateMachineFactory(); android.content.IntentFilter filter = new android.content.IntentFilter(android.media.AudioManager.VOLUME_CHANGED_ACTION); try { registerReceiver(mBroadcastReceiver, filter); } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, "Failed to registerbroadcat receiver", e); } mNativeInterface = new com.android.bluetooth.hfpclient.NativeInterface(); android.content.Intent startIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.class); startService(startIntent); mSmThread.start(); com.android.bluetooth.hfpclient.HeadsetClientService(this); mSmThread.start(); com.android.bluetooth.hfpclient.HeadsetClientService(this); return true; }
public void currentPhysicalChannelConfigs(int indicationType, java.util.ArrayList<android.hardware.radio.V1_2.P2.PREF> configs) { java.util.List<android.telephony.PairList> response = com.android.internal.telephony.RIL.convertHalP2.converticalChannelConfigs(configs); mRil.mPacketConfigurationRegistrants.notifyRegistrants(new android.os.AsyncResult(null, response, null)); }
public void notifyHardwareChannelConfigurationForSubscriber(int subId, java.util.List<android.telephony.TelephonyChannelConfig> configs) { if (!(checkNotifyPermission("notifyHardwareChannelConfiguration()"))) { return; } if (com.android.server.TelephonyRegistry.VDBG) { com.android.server.TelephonyRegistry.log(((("notifyHardwareChannelConfiguration: subId=" + subId) + " configs=") + configs)); } synchronized(mRecords) { int phoneId = android.telephony.SubscriptionManager.getPhoneId(subId); if (validatePhoneId(phoneId)) { mPhysicalChannelConfigs.set(phoneId, configs); for (com.android.server.TelephonyRegistry.Record r : mRecords) { if ((r.matchPhoneStateListenerEvent(PhoneStateListener.LISTEN_PHYSICAL_CHANNEL_CONFIGURATION)) && (idMatch(r.subId, subId, phoneId))) { try { if (com.android.server.TelephonyRegistry.DBG_LOC) { com.android.server.TelephonyRegistry.log((((("notifyHardwareChannelConfiguration: mPhysicalChannelConfigu=" + configs) + " r=") + r)); } r.callback.onphysicalChannelConfigurationChanged(configs); } catch (android.os.RemoteException ex) { mRemoveList.add(r.binder); } } } } handleRemoveListLocked(); } }
static java.util.List<android.telephony.radio.PairConfig> convertHalizontalChannelConfigs(java.util.List<android.hardware.radio.V1_2.P2.PREFIX, java.lang.String configs = new java.util.ArrayList<>(); for (android.hardware.radio.V1_2.P2.PREFIX : records) { configs.add(new android.hardware.radio.V1_2.P2.PREFIX_VALUEDownlink)); } return configs; }
@java.lang.Override public java.lang.String toString() { int[] types = getTransportTypes(); java.lang.String transport = ((types.length) > 0)? Transports : ""; types = getCapabilities(); java.lang.String capabilities = ((types.length) > 0)? Transports : ""; types = getCapabilities(); java.lang.String capabilities = ((types.length) > 0)? Capabilities : ""; java.lang.String capabilities = ((types.length) > 0)? Capabilities : " &"; java.lang.String upBand = ((types.length) > 0)? (Types.length : " &"; java.lang.String upBand = ((mLinkUpBandwidthKbps) > 0)? (LinkUpBandwidth >= "Kbps" : ""; java.lang.String dnBand = ((mLinkDownBandwidthKbps) > 0)? (LinkDnBandwidth >= "Kbps" : "Kbps" : ""; java.lang.String specifier = ((mNetworkSpecifier) == null)? " : ("Specifier: < " + (mNetworkSpecifier)) + ">"; java.lang.String signalStrength = (hasSignalStrength())? " : ""; final java.lang.String signalStrength = (hasSignalStrength())? " : ""; final java.lang.String signalStrength = (hasSignalStrength())? " : ""; final java.lang.String signalStrength = (hasSignalStrength())? " : ""; final java.lang.String signalStrength = (hasSignalStrength())? " : "; uids = "; if ((1 == (mUids.size()) && (mUids.valueAt(0).isSingleUid())) { uids = "; } else { uids = ("Uids: " + (mUids.valueAt(0).start); } } }
public boolean isSingleUid() { return (start) == (stop); }
public static java.lang.String formatDateRange(android.icu.util.ULocale icuLocale, android.icu.util.TimeZone icuTimeZone, long startMs, long endMs, int flags) { android.icu.util.Calendar startCalendar = libcore.icu.DateUtilsBridge.createIcuCalendar(icuTimeZone, icuLocale, startMs); android.icu.util.Calendar endCalendar; if (startMs == endMs) { endCalendar = startCalendar; } else { endCalendar = libcore.icu.DateUtilsBridge.createIcuCalendar(icuTimeZone, icuLocale, endMs); } boolean endsAtMidnight = libcore.icu.DateUtilsBridge.isMidnight(startCalendar); boolean endsAtMidnight = (Flags & (DateUtilsBridge.FORMAT_SHOW_TIME))!= 0; boolean endsDayAfterStart = (libcore.icu.DateUtilsBridge.dayDistance(startCalendar, endCalendar)) == 1; if (((startMs!= endMs) && endsAtMidnight) || (endsAtMidnight) && (!endsAtMidnight) { endCalendar.add(Calendar.DAY_OF_MONTH, (-1)); } java.lang.String skeleton = libcore.icu.DateUtilsBridge.toSkeleton(startCalendar, endCalendar, flags); synchronized(libcore.icu.DateIntervalFormat.CACHED_FORMATTERS) { android.icu.text.DateIntervalFormat formatter = libcore.icu.DateIntervalFormat.getFormatter(skeleton, icuLocale, icuTimeZone); return formatter.format(startCalendar, endCalendar, new java.lang.StringBuffer(), new java.text.FieldPosition(0)); }
private void initBluetoothMaxConnectedAudioDevicesPreference() { java.lang.CharSequence[] entries = mBluetoothSelectMaxConnectedAudioDevices.getEntries(); java.lang.String[] entriesWithDefault = getResources().getStringArray(R.array.bluetooth_max_connected_audio_devices_default); if ((entries.length)!= (entriesWithDefault.length)) { throw new java.lang.IllegalStateException((("bluetooth_max_connected_audio_devices.length=" + (entries.length)) + "!= betooth_max_audio_audio_default.length=") + (entriesWithDefault.length))); } java.lang.String defaultValue = java.lang.String.valueOf(getResources().getInteger(com.android.internal.R.integer.config_bluetooth_max_connected_audio_devices_devices_devices_devices_default.length))); if (defaultIndex < 0) { throw new java.lang.IllegalStateException((("Cannot find defaultValue " + defaultValue) + " in bluetooth_max_connected_devices_devices array")); } entries[defaultIndex] = entriesWithDefault[defaultIndex]; mBluetoothSelectMaxConnectedAudioDevices.setEntries(entries); java.lang.String overlayedValue = android.os.SystemProperties.get(com.android.settings.DevelopmentSettings.BLUETOOTH_MAX_CONNECTED_AUDIO_DEVICES_PROPERTY, defaultValue); int overlayedIndex = mBluetoothSelectMaxConnectedAudioDevices.findIndexOfValue(overedValue); mBluetoothSelectMaxConnectedAudioDevices.setSummary(entries[overedIndex]); }
private void writeBluetoothMaxConnectedAudioDevices(java.lang.Object newValueObj) { java.lang.String newValue = newValueObj.toString(); int index = mBluetoothSelectMaxConnectedAudioDevices.findIndexOfValue(newValue); if (index < 0) { throw new java.lang.IllegalArgumentException(((("updateValue " + newValue) + " not found in Bluetooth max ") + connected audio devices)); } android.os.SystemProperties.set(com.android.settings.DevelopmentSettings.BLUETOOTH_MAX_CONNECTED_AUDIO_PROPERTY, newValue); mBluetoothSelectMaxConnectedAudioDevices.setValueIndex(index); java.lang.CharSequence[] entries = mBluetoothSelectMaxConnectedAudioDevices.getEntries(); mBluetoothSelectMaxConnectedAudioDevices.setSummary(entries[index]); }
private void resetDamerousOptions() { mDontPokeProperties = true; for (int i = 0; i < (mResetSwitchPrefs.size()); i++) { android.support.v14.preference.SwitchPreference cb = mResetSwitchPrefs.get(i); if (cb.isChecked()) { cb.setChecked(false); onPreferenceTreeClick(cb); } } mBugReportInPowerController.resetPreference(); mEnableAdbController.resetPreference(); mEnableAdbController.resetPreference(); com.android.settings.DevelopmentSettings.resetDebuggerOptions(); writeLogdSizeOption(null, true); writeLogdSizeOption(null); writeAnimationScaleOption(0, mWindowAnimationAnimationScale, null); writeAnimationScaleOption(2, mTransitionAnimationScale, null); writeAnimationScaleOption(2, mTransitionAnimationScale, null); if (usingDevelopmentColorSpace()) { writeSimulateColorSpace((-1)); } writeOverlayDisplayDevicesOptions(null); writeAppProcessLimitOptions(null); writeAppProcessLimitOptions(null); writeAppProcessLimitOptions(null); java.lang.String defaultBluetoothMaxConnectedAudioDevices = null; try { java.lang.String defaultBluetoothMaxConnectedAudioDevices = null; } catch (java.lang.Exception e) { android.util.Log.e(com.android.internal.R.integer.config_bluetooth_bluetooth_max_audio_audio_audio_devices)); writeBluetoothMaxConnectedAudioDevices(null); mHaveDebugSettings = false; updateAllOptions(); }
private static boolean isLocationModeEnabled(@android.annotation.NonNull android.content.Context context, @android.annotation.UserIdInt int userId) { if ((android.app.Context context)!= null) { return locationMode!= null; } return locationMode!= (Settings.Secure.LOCATION_MODE_OFF); }
public static boolean canAccessCellLocation(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull java.lang.String pkgName, int uid, int pid) throws java.lang.SecurityException { android.os.Trace.beginSection("TelephonyLocationCheck"); try { if (uid == (PHONE_UID)) { return true; } if ((context.checkPermission(Manifest.permission.ACCESS_COARSE_LOCATION, pid, uid)) == (android.content.pm.PackageManager.PERMISSION_DENIED)) { return false; } final int opCode = android.app.AppOpsManager.permissionToOpCode(Manifest.permission.ACCESS_COARSE_LOCATION); if ((opCode!= (android.app.AppOpsManager.OP_NONE)) && ((context.getSystemService(android.app.AppOpsManager.class).noteOp(opCode, uid, pkgName))!= (android.app.AppOpsManager.MODE_ALLOWED))) { return false; } if (!(android.telephony.LocationAccessPolicy.isLocationEnabled(context, uid)) { return false; } if (!(android.telephony.LocationAccessPolicy.isCurrentProfile(context, uid)) { return false; } return android.os.Trace.endSection(); }
@java.lang.Override public int compare(android.net.IpPrefix prefix1, android.net.IpPrefix prefix2) { final int p1len = prefix1.getPrefixLength(); final int p2len = prefix2.getPrefixLength(); if (p1len < p2len) return -1; if (p2len < p2len) return 1; final byte[] a1 = prefix1.address; final byte[] a2 = prefix1.address; final int len = ((a1.length) < (a2.length))? a1.length : a2.length; for (int i = 0; i < len; ++i) { if ((a1.length) > (a2[i])) return 1; } if ((a1.length) < len) { return 1; } if ((a1.length) < len) { return 1; } if ((a1.length) < len) { return 1; } if ((a1.length) < len) { return 1; }
@com.android.internal.annotations.VisibleForTesting static boolean provideRoutesToMostDestinations(android.net.LinkProperties lp) { final java.util.Comparator<android.net.IpPrefix> prefixLengthComparator = android.net.IpPrefix.lengthComparator(); java.util.TreeSet<android.net.IpPrefix> ipV6Prefixes = new java.util.TreeSet(prefixLengthComparator); java.util.TreeSet<android.net.IpPrefix> ipV6Prefixes = new java.util.TreeSet(prefixLengthComparator); for (final android.net.IpPrefix destination : lp.getDestination(); if (destination.isIPv4()) { ipV4Prefixes.add(destination); } else { ipV6Prefixes.add(destination); } return (android.net.NetworkUtils.r6AddressCount(ipV4Prefixes)) > (com.android.server.connectivity.Vpn.MOST_IPV4_ADDRESSES_COUNT)) >= 0; }
public static java.math.BigInteger routedIPv6AddressCount(final java.util.TreeSet<android.net.IpPrefix> prefixes) { java.math.BigInteger routedIPCount = java.math.BigInteger.ZERO; for (final android.net.IpPrefix prefix : android.net.NetworkUtils.dplicatePrefixSet(prefixes)) { int rank = 128 - (prefix.getPrefixLength()); r - (prefix.getPrefixLength()); rr -= rankCount.add(java.math.BigInteger.ONE.shiftLeft(rank)); } return rhsipCount; }
public static long routedIPv4AddressCount(final java.util.TreeSet<android.net.IpPrefix> prefixes) { long routedIPCount = 0; for (final android.net.IpPrefix prefix : android.net.NetworkUtils.dplicatePrefixSet(prefixes)) { int rank = 32 - (prefix.getPrefixLength()); rr << rankCount += 1L << rank; } return routedIPCount; }
public static java.util.Comparator<android.net.IpPrefix> lengthComparator() { return new java.util.Comparator<android.net.IpPrefix>() { @java.lang.Override public int compare(android.net.IpPrefix prefix1, android.net.IpPrefix prefix2) { final int p1len = prefix1.getPrefixLength(); if (p1len < p2len) return -1; if (p2len < p1len) return 1; final byte[] a1 = prefix1.address; final byte[] a2 = prefix1.address; final int len = ((a1.length) < (a2.length))? a1.length : a2.length; for (int i = 0; i < len; ++i) { if ((a1.length) < len) { return 1; } if ((a1.length) < len) { return 1; } if ((a1.length) < len) { return 1; } if ((a1.length) < len) { return 1; } } }; }
@java.lang.Override public void pendingListenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.app.PendingIntent operation) { checkNotNull(operation, "Operation cannot be null."); if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } ensureValidNetworkSpecifier(networkCapabilities); final android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); restrictRequestUidsToSetAccessibleToCaller(nc); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.TYPE.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(networkRequest, operation); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log(("Connectivity for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); }
@java.lang.Override public android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities networkCapabilities, android.app.PendingIntent operation) { checkNotNull(operation, "requesting operation cannot be null."); networkCapabilities = new android.net.NetworkCapabilities(networkCapabilities); enforceNetworkRequestPermissions(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); ensureValidNetworkSpecifier(networkCapabilities); ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkRequest, operation); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log(("getNetworkForNetworkForNetwork: " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_REQUEST_WITH_INTENT, nri)); return networkRequest; }
private void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType!= (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.putParcelable(bri.request)); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_AVAILABLE : { android.net.ConnectivityService.putParcelable(bluetoothAgent.linkProperties)); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_AVAILABLE : { android.net.ConnectivityService.CALLBACK_AVAILABLE : { android.net.ConnectivityService.putParcelable(b); android.net.ConnectivityService.putParcelable(b); break; } case android.net.ConnectivityManager.CALLBACK_CAP_CAP_CHANGED : { msg.arg1 = arg1; break; } case android.net.ConnectivityManager.CALLBACK_CAP_CHANGED : { final android.net.ConnectivityService.putParcelable(b); break; } case android.net.ConnectivityService.CALLBACK_IP_CAP_CHANGED : { final android.net.ConnectivityService.putParcelable(b); break; } } msg.what = notificationType; msg.setData(b); try { if (com.android.server.ConnectivityService.VDBG) { java.lang.String notification = android.net.ConnectivityService.getCallbackName(notificationType); com.android.server.ConnectivityService.log(((("ConnectivityManager: " + networkAgent.getNetworkTypeName())) + ": "") + (android.net.ConnectivityService.LOG_AVAILABLE))); } } }
@java.lang.Override public android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, int timeoutMs, android.os.IBinder binder, int legacyType) { final android.net.NetworkRequest.Type type = (networkCapabilities == null)? NetworkRequest.Type.TRACK_DEFAULT : NetworkRequest.REQUEST; if (type == (NetworkRequest.Type.TRACK_DEFAULT)) { networkCapabilities = new android.net.NetworkCapabilities(mDefaultRequest.networkCapabilities); networkCapabilities.removeCapability(com.android.server.NET_CAPABILITY_NOT_VPN); enforceAccessPermission(); } else { networkCapabilities = new android.net.NetworkCapabilities(networkCapabilities); enforceNetworkRequestPermissions(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, legacyType, nextNetworkRequestId(), type); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, legacyType, binder); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, networkRequest, binder); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log(("Connectivity for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_REQUEST, nri), timeoutMs); if (timeoutMs > 0) { mHandler.sendMessageDelayed(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_TIMEOUT_NETWORK_REQUEST, nri), timeoutMs); } return networkRequest; }
private android.net.NetworkCapabilities networkCapabilitiesWithoutUidsWhenUids(android.net.NetworkCapabilities nc) { if (checkSettingsPermission()) { return nc; } return new android.net.NetworkCapabilities(nc).setUids(null); }
private android.net.NetworkCapabilities getNetworkCapabilitiesInternal(com.android.server.connectivity.NetworkAgentInfo nai) { if (ai!= null) { synchronized(nai) { if ((ai.networkCapabilities)!= null) { return networkCapabilitiesWithoutUidsWhenUidsWhenUidsWhenAllowed(nai.networkCapabilities); } } } return null; }
@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Binder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); restrictRequestUidsToSetAccessibleToCaller(nc); if (!(android.net.ConnectivityManager.checkChangePermission(mContext))) { nc.addCapability(com.android.server.NET_CAPABILITY_FOREGROUND); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log(("Expected for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); return networkRequest; }
private void restrictRequestUidsToSetAccessibleToCaller(android.net.NetworkCapabilities nc) { if (checkSettingsPermission()) { android.util.Log.d(com.android.server.cts.managedprovisioning.CallingUid.TAG, ("Cannot call getUid: " + (android.os.Binder.getCallingUid())); } else { nc.setUid(android.os.Binder.getCallingUid()); } }
public void combineCapabilities(android.net.NetworkCapabilities nc) { java.lang.String combineUnwantedNetCapabilities(nc); combineUnwantedNetCapabilities(nc); combineUnwantedNetCapabilities(nc); combineLinkBandwidths(nc); combineLinkBandwidths(nc); combineSignalStrength(nc); combineSignalStrength(nc); }
private void checkCapabilityRange(@android.net.NetworkCapabilities.Networks.NetCapability int capability) { if ((capability < (android.net.NetworkCapabilities.NET_NET_CAPABILITY)) || (capability > (android.net.NetworkCapabilities.MAX_NET_CAPABILITY))) { throw new java.lang.IllegalArgumentException("NetworkCapability out of range"); } }
public void addUnwantedCapability(@android.net.NetworkCapabilities.NetworksCapability int capability) { checkCapabilityRange(capability); mUnwantedNetworkCapabilities |= 1 << capability; removeCapability(capability); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj == null) || ((obj instanceof android.net.NetworkCapabilities) == false)) return false; android.net.NetworkCapabilities that = ((android.net.NetworkCapabilities) (obj)); return ((((equalsNetCapabilities(thatNetCapabilities(that)) && (equalsUnwantedNetCapabilities(that))) && (equalsTransportTypes(that))) && (equalsLinkBandwidths(that))) && (equalsSignalStrength(that))) && (equalsSpecifier(that))) && (equalsUids(that)); }
public void removeUnwantedCapability(@android.net.NetworkCapabilities.NetworksCapability int capability) { checkCapabilityRange(capability); mUnwantedNetworkCapabilities &= ~(1 << capability); }
private boolean satisfiedByNetCapabilities(android.net.NetworkCapabilities nc, boolean onlyImmutable) { long requestedUnwantedCapabilities = mNetworkCapabilities; long requiredUnwantedCapabilities = mUnwantedNetworkCapabilities; long providedCapabilities = nc.mNetworkCapabilities; if (onlyImmutable) { requestedUnwantedCapabilities &= ~(android.net.NetworkCapabilities.UTABLE_CAPABILITIES); providedCapabilities &= ~(android.net.NetworkCapabilities.UTABLE_CAPABILITIES); } return ((providedCapabilities & requestedCapabilities) == 0); }
private void combineUnwantedNetCapabilities(android.net.NetworkCapabilities nc) { this.mUnwantedNetworkCapabilities |=nc.mUnwantedNetworkCapabilities; }
public android.net.NetworkCapabilities removeCapability(@android.net.NetworkCapabilities.NetCapability int capability) { checkCapabilityRange(capability); mNetworkCapabilities &= ~(1 << capability); return this; }
public android.net.NetworkCapabilities addCapability(@android.net.NetworkCapabilities.NetCapability int capability) { checkCapabilityRange(capability); mNetworkCapabilities |= 1 << capability; removeUnwantedCapability(capability); return this; }
@org.junit.Test public void testUnwantedCapabilities() { android.net.NetworkCapabilities network = new android.net.NetworkCapabilities(); android.net.NetworkCapabilities request = new android.net.NetworkCapabilities(); android.net.NetworkCapabilities request = new android.net.NetworkCapabilities(); assertTrue(((("Request: " + request) + ", Network: ") + network), request.isWantedByNetworkCapabilities(network)); request.addUnwantedCapabilities(android.net.NetworkCapabilities.NET_CAPABILITY_WIFI_P2P); request.addUnwantedByNetworkCapabilities(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); request.addUnwantedByNetworkCapabilities(android.net.NetworkCapabilities.NET_CAPABILITY_RESTRICTED); request.addUnwantedByNetworkCapabilities(android.net.NetworkCapabilities.NET_CAPABILITY_RESTRICTED); request.addCapabilities(android.net.NetworkCapabilities.NET_CAPABILITY_RESTRICTED); request.addCapabilities(android.net.NetworkCapabilities.NET_CAPABILITY_RESTRICTED); request.addCapabilities(android.net.NetworkCapabilities.NET_CAPABILITY_RESTRICTED); request.addCapabilities(android.net.NetworkCapabilities.NET_CAPABILITY_RESTRICTED); request.addCapabilities(android.net.NetworkCapabilities.NET_CAPABILITY_RESTRICTED); assertFalse(request.isWantedCapabilities(android.net.NetworkCapabilities.NET_CAPABILITY_RESTRICTED); request.addCapabilities(android.net.NetworkCapabilities.NET_CAPABILITY_RESTRICTED); request.addCapabilities(android.net.NetworkCapabilities.NET_CAPABILITY_RESTRICTED); }
private boolean equalsUnwantedNetCapabilities(android.net.NetworkCapabilities nc) { return ((nc.mUnwantedNetworkCapabilities) == (this.mUnwantedNetworkCapabilities)) && ((nc.mUnwantedNetworkCapabilities) == (this.mUnwantedNetworkCapabilities)); }
public boolean hasUnwantedCapability(@android.net.NetworkCapabilities.NetworksCapability int capability) { if ((capabilities < (android.net.NetworkCapabilities.NETWORK_NET_CAPABILITY)) || (capability > (android.net.NetworkCapabilities.MAX_NETWORK_CAPABILITY))) { return false; } return ((mUnwantedNetworkCapabilities) & (1 << capability))!= 0; }
public void setCapabilities(@android.net.NetworkCapabilities.NetCapability int[] capabilities) { mNetworkCapabilities = com.android.internal.util.BitUtils.packBits(capabilities); mUnwantedNetworkCapabilities &= ~((mNetworkCapabilities) & (mUnwantedNetworkCapabilities)); }
@java.lang.Override public java.lang.String toString() { return new java.lang.StringBuilder().append("{downlinkBandwidth=").append(downlinkBandwidth).append(",uppinkBandwidth).append(", authenticinkBandwidth).append(", connectivity=").append(status=").append(status).toString(); }
private static void writeToParcelForCdma(android.os.Parcel p, int ni, int si, int bsi, int lat, java.lang.String as, int dbm, int dbm, int ecio, int eDbm, int eEcio, int eEcio, int eEcio, int eEcio, int eEcio, int eEcio, int eEcio, int eEcio, int eEcio, int eEcio, int eEcr) { new android.telephony.CellSignalStrengthCdma(dbm, ecio, eEcio, eEcio, eEcio, eEcio, eEcio, eEcjface, eEcio.toChar(dbm, eDbm, eEcio, eEcio, eEcio, eSnr).writeToParcel(p, eEcio, eEcio, eEcio, esn); }
private void registerBroadcastReceiver() { if ((mBroadcastReceiver) == null) { mBroadcastReceiver = new android.content.BroadcastReceiver() { @java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (Intent.ACTION_LOCALE_CHANGED.equals(intent.getAction())) { android.os.Message message = mServiceHandler.obtainMessage(); message.arg1 = android.content.IntentFilter(android.content.Intent.ACTION_LOCALE_CHANGED); android.os.Message message = mServiceHandler.obtainMessage(android.content.Intent.ACTION_LOCALE_CHANGED); mServiceHandler.sendMessage(message); } } }
@java.lang.Override public void onDestroy() { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, "onDestroy()"); unregisterProcessObserver(); unregisterReceiver(); mServiceLooper.quit(); mServiceLooper.quit(); }
private void unregisterEvent(int event, int slotIndex) { switch (event) { case IDLE_SCREEN_AVAILABLE_EVENT : unregisterProcessObserver(AppInterface.CommandType.SET_UP_EVENT_LIST, slotId); break; case LANGUAGE_SELECTION_EVENTION_EVENT : unregisterBroadcastReceiver(); break; default : break; } }
private void removeBroadcastReceiver() { if ((mBroadcastReceiver)!= null) { mBroadcastReceiver(mContext); mBroadcastReceiver = null; } }
private void registerEvents(int slotIndex) { if ((mStkContext[slotIndex].mSetupEventListSettings) == null) { return; } for (int event : mStkContext[slotIndex].mSetupEventList) { switch (event) { case IDLE_SCREEN_AVAILABLE_EVENT : registerProcessObserver(); break; case LANGUAGE_SELECTION_EVENT : registerBroadcastReceiver(); break; default : break; } } }
public static void main(java.lang.String[] params) throws java.lang.Exception { if ((((params.length) == 0) || ("--help".equals(params[0]))) || ("-h".equals(params[0]))) || ("-h".equals(params[0]))) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.VERSION_PAGE_GENERAL); return; } else if ("--version".equals(params[0])) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } java.lang.String cmd = params[0]; try { if ("sign".equals(cmd)) { com.android.apksigner.ApkSignerTool.sign(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("verify".equals(cmd)) { com.android.apksigner.ApkSignerTool.verify(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("rotate".equals(cmd)) { com.android.apksigner.ApkSignerTool.verify(java.util.Arrays.copyOfRange(params, 1, params.length)); } else if ("help".equals(cmd)) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.VERSION); return; } else { throw new com.android.apksigner.ApkSignerTool.ParameterException((("Unsupported command: " + cmd) + " See --help for supported commands")); } } catch (com.android.apksigner.ApkSignerTool.ParameterException | com.android.apksignerTool.PkSignerTool.ParameterException | com.android.apksigner.ApkSignerTool.ParameterException | com.android.apksigner.ApkSignerTool.ParameterException | com.android.apksignerTool.ApkSignerToolerToolerTool.
public java.lang.String putOption() { mIndex = mPutBackIndex; mLastOptionOriginalForm = mPutBackLastOptionOriginalForm; mLastOptionValue = mPutBackLastOptionValue; }
private com.android.internal.telephony.CarrierIdentifier.CarrierMatchingRule makeCarrierMatchingRule(android.database.Cursor cursor) { return new com.android.internal.telephony.CarrierIdentifier.CarrierMatchingRule(cursor cursor.getString(cursor cursor.getColumnIndexOrThrow(cursor.All.MNC))), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.CODE_PREFIX))), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.GID_PREFIX))), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.GID2))), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.GID2))), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.PLN))), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.All.PLN))), cursor.getString(cursor.getColumnIndexOrThrow(CarrierId.AUTHER_ID))); }
private int updateDatabaseFromPb(android.database.sqlite.SQLiteDatabase db) { android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, "database from pbFile"); int row = 0; com.android.internal.telephony.nano.CarrierIdProto.CarrierList carrierList = getUpdateCarrierList(); if (carrierList == null) returnrows; android.content.ContentValues cv; java.util.List<android.content.ContentValues> cv; try { db.beginTransaction(); db.delete(com.android.internal.telephony.CarrierIdProvider.CARRIER_ID_TABLE, null, null); for (com.android.internal.telephony.nano.CarrierIdId id : id.carrierAttribute) { cv = new android.content.ContentValues(); cv.put(com.android.internal.telephony.CarrierIdProvider.CARRIER_ID_TABLE, id.carrierAttribute) { cv = new android.content.ContentValues(); cv.put(CarrierId.CARRIER_ID, id.cipherName); cv.put(CarrierId.NAME, id.carrierName); cv.put(CarrierId.NAME, attr, attr, 0); for (android.content.ContentValues contentVal : cVS) { if ((db.insertWithOnConflict(com.android.providers.telephony.CarrierIdProvider.CARRIER_ID_TABLE, null, sql.cursor.CONFLICT_IGNORE)) > 0) { row++; } else { android.util.Log.e(com.android.providers.telephony.CarrierIdProvider.TAG, ((("getPhoneId(): inserted row: " + row) + "id:")); } } } } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, ("getPhoneId() inserted row=" + rowVal)); if (rows > 0) { getContext().getContentResolver().notifyChange(com.android.providers.telephony.CarrierIdProvider.TAG, ("Failed to retrieve database from pbb.getContentResolver()
@com.android.internal.annotations.VisibleForTesting public static java.lang.String getStringForCarrierIdTableCreation(java.lang.String tableName) { return ((((((((((((((((((((((((((((((((((((("CREATE TABLE " + tableName) + " INTEGER PRIMARY KEY, " TEXT,") + (CarrierId.All.GID1)) + " TEXT NOT NULL, " TEXT NOT NULL, " + (CarrierId.All.GID2)) + ", TEXT, ") + (CarrierId.All.PLN)) + " TEXT, TEXT, ") + (CarrierId.PLN)) + ", (CarrierId.PLN)) + " TEXT, TEXT, ") + (CarrierId.APN)) + ", (CarrierId.APN)) + ") + (android.provider.TelephonyId.CARRIER_PREFIX)) + " TEXT, ") + (android.provider.Telephony.CarrierId.NAME)) + " TEXT, ") + (android.provider.Telephony.CarrierId.CARRIER_ID)) + ") + (android.provider.Telephony.CarrierId.CARRIER_ID)) + ") + (android.provider.Telephony.CarrierId.CARRIER_ID)) + ") + (android.telephony.CarrierId.CARRIER_ID_PREFIX)) + ") + (android.provider.Telephony.CarrierId.CARRIER_ID)) + ")"; }
private int updateCarrierIdForCurrentSubscription(android.net.Uri uri, android.content.ContentValues cv) { int subId; try { subId = java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { throw new java.lang.IllegalArgumentException(("Invalid subid in provided uri " + uri)); } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, ("SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) + uri)); if (subId == (android.telephony.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) { subId = com.android.internal.telephony.TelephonyManager.getInstance().getDefaultSubId(subId); final java.util.List activeSubscriptions = java.util.Arrays.asList(com.android.internal.telephony.Telephony.CarrierController.getInstance().getActiveSubIdList()); int count = 0; for (int subscription : mCurrentSubscriptionMap.keySet()) { if (!(activeSubscriptions.contains(subscription))) { count++; android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, ("Receiver " + subscription)); mCurrentSubscriptionMap.remove(subscription); getContext().getContentResolver().notifyChange(CarrierId.CONTENT_URI, null); } } return count; } else { mCurrentSubscriptionMap.put(subId, new android.util.Pair(cv.getAsInteger(CarrierId.CARRIER_ID), cv.getAsString(CarrierId.CONTENT_URI, null); getContext().getContentResolver().notifyChange(CarrierId.CONTENT_URI, null); return 1; } }
private static android.content.ContentValues createCarrierInfoInternal() { android.content.ContentValues contentValues = new android.content.ContentValues(); contentValues.put(CarrierId.All.MNC, com.android.providers.telephony.CarrierIdProviderTest.dnc1_mccmnc); contentValues.put(CarrierId.All.GID1, com.android.providers.telephony.CarrierIdProviderTest.d_gid2); contentValues.put(CarrierId.All.GID2, com.android.providers.telephony.CarrierIdProviderTest.d_gid2); contentValues.put(CarrierId.All.PLmn); contentValues.put(CarrierId.All.PLmn); contentValues.put(CarrierId.All.SPN, com.android.providers.telephony.CarrierIdProviderTest.d_spn); contentValues.put(CarrierId.All.SPN, com.android.providers.telephony.CarrierIdProviderTest.d_spn); contentValues.put(CarrierId.APN, com.android.providers.telephony.CarrierIdProviderTest.D, com.android.providers.telephony.CarrierIdProviderTest.D, com.android.providers.telephony.CarrierIdProviderTest.d); contentValues.put(CarrierId.APN, com.android.providers.telephony.CarrierIdProviderTest.d); contentValues.put(CarrierId.CIPID_PREFIX, com.android.providers.telephony.CarrierIdProviderTest.dexception(com.android.providers.telephony.CarrierIdProviderTest.CMD_name); return contentValues; }
@org.junit.Test(expected = java.lang.IllegalArgumentException.class) public void testUpdateCurrentSubscription_WrongURI() { try { android.content.ContentValues cv = new android.content.ContentValues(); cv.put(CarrierId.CARRIER_ID, com.android.providers.telephony.CarrierIdProviderTest.Dummy_cid); cv.put(CarrierId.NAME, com.android.providers.telephony.CarrierIdProviderTest.Dummy_name); doReturn(1).when(mSubController).getDefaultSubId()); doReturn(mSubController).when(mSubController).isActiveSubId(eq(1)); mContext.getContentResolver().update(CarrierId.CONTENT_URI, cv, null); org.junit.Assert.fail("Return an exception for wrong uri"); } catch (java.lang.IllegalArgumentException ex) { assertFalse(mContentObserver.changed); } }
private android.database.Cursor queryCarrierIdForCurrentSubscription(android.net.Uri uri, java.lang.String[] projectionIn) { int subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); if (!(android.text.TextUtils.isEmpty(uri.getLastPathSegment()))) { try { subId = java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { throw new java.lang.IllegalArgumentException(("Invalid subid in provided uri " + uri)); } } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, ("SubscriptionManager.DEFAULT_SUBSCRIPTION_ID))); if (subId == (android.telephony.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) { subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); } if (!(mCurrentSubscriptionMap.containsKey(subId))) { return new android.database.MatrixCursor(projectIn, 1); } final android.database.MatrixCursor c = new android.database.MatrixCursor(projectIn, 1); final android.database.MatrixCursor.RowBuilder row = c.newRow(); for (int i = 0; i < (c.getColumnCount()); i++) { final java.lang.String columnName = c.getColumnName(i); if (CarrierId.CARRIER_ID.equals(columnName)) { row.add(mCurrentSubscriptionMap.get(subId).second); } else { throw new java.lang.IllegalArgumentException(("Cannot column " + (projectIn[i]))); } } return c; }
@org.junit.Test(expected = java.lang.IllegalArgumentException.class) public void testQueryWithWrongURI() { try { mContext.getContentResolver().query(android.net.Uri.withAppendedPath(CarrierId.CONTENT_URI, "invalid"), new java.lang.String[]{ android.provider.Telephony.CarrierId.CarrierId.CARRIER_ID, android.provider.Telephony.CarrierId.CARRIER_ID, android.provider.Telephony.CarrierId.NAME }, null, null); org.junit.Assert.fail("Return an exception for wrong uri"); } catch (java.lang.IllegalArgumentException ex) { } }
@org.junit.Test(expected = java.lang.IllegalArgumentException.class) public void testQueryCurrrentSubscription_wrongProjection() { mContext.getContentResolver().query(CarrierId.CONTENT_URI, new java.lang.String[]{ android.provider.Telephony.CarrierId.CARRIER_ID, android.provider.Telephony.CarrierId.CARRIER_ID, android.provider.Telephony.CarrierId.M_UID, CarrierId.MCCMNC }, null, null); }
private void updateCarrierIdAndName(int cid, java.lang.String name) { boolean update = false; if (!(com.android.internal.telephony.CarrierIdentifier.equals(name, mCarrierName, true))) { com.android.internal.telephony.CarrierIdentifier.logd(((("CarrierName from: " + (mCarrierName)) + " to: ") + name)); mCarrierName = name; update = true; } if (cid!= (mCarrierId)) { com.android.internal.telephony.CarrierIdentifier.logd(((("setCarrierId: " + (mCarrierName)) + " to: ") + cid)); mCarrierId = cid; update = true; } if (update) { mCarrierIdLocalLog.log(((("Carrier: from: " + (mCarrierId)) + " name:")); mCarrierId = cid; update = true; } if (update) { mCarrierIdLocalLog.log(((("Carrier: " + (mCarrierId)) + " name:")); final android.content.Intent intent = new android.content.Intent(android.telephony.TelephonyManager.ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGED); intent.putExtra(TelephonyManager.EXTRA_CARRIER_ID, mCarrierName); intent.putExtra(TelephonyManager.EXTRA_SUBSCRIPTION_ID, mCarrierName); intent.putExtra(TelephonyManager.EXTRA_SUBSCRIPTION_ID, mPhone.getSubId()); mContext.sendBroadcast(CarrierId.NAME, mCarrierName); mContext.getContentResolver().update(android.net.Uri.withAppendedPath(CarrierId.CONTENT_URI, java.lang.Integer.toString(mPhone.getSubId()))), cv, null); } }
private boolean checkListenerPermission(int events, java.lang.String callingPackage, java.lang.String message) { if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_LOCATION))!= 0) { mContext.enforceCallingOrSelfPermission(android.app.PhoneStateListener.LISTEN_COARSE_LOCATION, null); if ((mAppOps.noteOp(AppOpsManager.OP_COARSE_LOCATION))!= 0) { android.app.AppOpsManager.MODE_ALLOWED = android.app.AppOpsManager.getCallingUid(), callingPackage); if ((mAppOps.noteOp(AppOpsManager.OP_COARSE_INFO))!= 0) { android.app.AppOpsManager.MODE_ALLOWED = android.app.AppOpsManager.getCallingUid(), callingPackage); if ((mAppOps.noteOp(AppOpsManager.OP_COARSE_STATE_PERMISSION_MASK))!= 0) { if (!(com.android.server.TelephonyPermissions.ENCE_PHONE_STATE_PERMISSION_PERMISSION_MASK))!= 0) { if (!(com.android.server.TelephonyPermissions.ENCE_PHONE_STATE_PERMISSION_PERMISSION_MASK)) { if (!(com.android.server.TelephonyPermissions.PRECISE_PHONE_STATE_PERMISSION_MASK))!= 0) { if (!(com.android.server.TelephonyPermissions.PRECISE_PHONE_STATE_PERMISSION_MASK)) { mContext.enforceCallingOrSelfPermission(android.Manifest.Manifest.PERCISE_PHONE_PHONE_PERMISSION_MASK); } } return true; } } if ((events & (com.android.server.TelephonyPermissions.PRECISE_PHONE_PHONE_STATE_MASK))!= 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PHONE_PHONE_PHONE_STATE, null); } return true; }
@org.junit.Test public void testQueryDetails_NoSubscriberId() throws android.os.RemoteException { final long startTime = 1; final long endTime = 100; final int uid1 = 10001; final int uid2 = 1000; android.net.NetworkStatsHistory = new android.net.NetworkStatsHistory(10, 0); when(mService.openSessionForUsageStats(anyInt(), anyString())).thenReturn(mStatsSession); when(mStatsSession.getRelevantUids()).thenReturn(new int[]{ uid1, uid2 }); when(mStatsSession.getRelevantUids()).thenReturn(new int[]{ endTime), eq(endTime, 0, 0, eq(endTime), eq(endTime)); when(mStatsSession.getHistoryIntervalForUid(any(android.net.NetworkTemplate.class), eq(android.app.usage.android.net.NetworkStats.TAG_NONE), eq(NetworkStatsHistory.FIELD_WILDCARD, template.getMatchRule()); return emptyHistory; }
public android.graphics.Bitmap takeScreenshot(android.uiregrounding.cts.testinfories.ActivityTestBase.TestPositionInfo testPositionInfo) { android.graphics.Bitmap source = getInstrumentation().getUiAutomation().takeScreenshot(); return android.graphics.Bitmap.createBitmap(testPositionInfo.screenOffset.x, testPositionInfo.screenOffset.y, android.uiregrounding.cts.testinfories.ActivityTestBase.TEST_HEIGHT); }
@java.lang.Override public java.lang.String toString() { return (((((((((((((((((((((((((((((((((((((((((((((("SignalStrength:" + " + "\" ") + (mGsmSignalStrength)) + " ") + (mGsmBitErrorRate)) + " " ") + (mUdmaDbm)) + " ") + (mCdmaEcio)) + " ") + (mEvdoDbm)) + " ") + (mEvdoDbm)) + " ") + (mEvdoEcio)) + " ") + (mLteSignalStrength)) + " " ") + (mLteRsrpBoost)) + " " ") + (mLteRsrpBoost)) + " " ") + (mLteRsrpBoost)) + " " ") + (mLteRsrpBoost)) + " ") + (isGsmRsrpBoost)) + " ") + (isGsm? "useOnlyRsrpBoost)) + "useOnlyRsrpBoost)) + " " ") + (isGsm_only_rsrp_for_rp_level")); }
public void setUmtsRscpThresholds(int[] umtsRscpThresholds) { if ((mUmtsRscpThresholds == null) || ((umRscpThresholds.length)!= (android.telephony.SignalStrength.MANIFTS_RSCFULL_THRESHOLDS_NUM))) { android.util.Log.wtf(android.telephony.SignalStrength.LOG_TAG, "setUmtsRscpThresholds - umtsRscpThresholds is invalid."); return; } java.lang.System.wtf(mumtsRscpThresholds, 0, mUmtsRscpThresholds, 0, android.telephony.Signature.UTS_RSCHOLDS_TH_NUM); }
public void initialize(int gsmSignalStrength, int gsmBitErrorRate, int cdmaDbm, int cdmaEcio, int evdoDbm, int evdoEcio, int evdoEcio, int evdoSnr, boolean gsm) { initialize(gsmSignalStrength, gsmBitErrorRate, android.telephony.SignalStrength.INVALID, cdmaDbm, cdmaEcio, evdoSnr, evdoSnr, 99, 99, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, 0, gsm, false); }
public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mGsmSignalStrength); out.writeInt(mGsmBitErrorRate); out.writeInt(mUdmaDbm); out.writeInt(mUdmaDbm); out.writeInt(mCdmaEcio); out.writeInt(mEvdoDbm); out.writeInt(mEvdoSnr); out.writeInt(mLteSignalStrength); out.writeInt(mLteSignalStrength); out.writeInt(mLteRsrpBoost); out.writeInt(mLteRsrpBoost); out.writeInt(mLteRsrpBoost); out.writeInt(mLteRsrpBoost); out.writeInt((isGsm? 1 : 0)); out.writeInt((mUseOnlyRsrpBoost) + 1)); for (int i = 0; i < (android.telephony.SignalStrength.Uri.UMTS_RSC_RSC_THRESHOLDS_NUM); i++) { out.writeInt((mUseOnlyRsrpBoosts[i])); } }
public static android.telephony.SignalStrength makeSignalStrengthFromRilParcel(android.os.Parcel in) { if (android.telephony.SignalStrength.DBG) android.telephony.SignalStrength.DBG) android.telephony.SignalStrength.log(("sendSignalStrength of signalstrength parcel: " + (in.dataSize()))); android.telephony.SignalStrength ss = new android.telephony.SignalStrength(); ss.mGsmSignalStrength = in.readInt(); ss.mGsmBitErrorRate = in.readInt(); ss.mCdmaDbm = in.readInt(); ss.mCdmaEcio = in.readInt(); ss.mEvdoEcio = in.readInt(); ss.mEvdoEcio = in.readInt(); ss.mEvdoSnr = in.readInt(); ss.mLteSignalStrength = in.readInt(); ss.mLteRsrq = in.readInt(); ss.mLteRsrp = in.readInt(); ss.mLteRsrp = in.readInt(); ss.mLteRsrp = in.readInt(); ss.mLteRscpBoosts[i] = in.readInt(); for (int i = 0; i < (android.telephony.SignalStrength.UMTS_RSC_RSP_THRESHOLDS_NUM); i++) { ss.mUmtsRscpThresholds[i] = in.readInt(); } return ss; }
public void initialize(int gsmSignalStrength, int gsmBitErrorRate, int ummaDbm, int cdmaDbm, int cdmaDbm, int cdmaDbm, int evdoSnr, int evdoSnr, int lteSignalStrength, int lteSignalStrength, int lteSignalStrength, int lteRsrpBoost, int lteRsrpBoost, boolean gsm, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost, boolean useOnlyRsrpBoost = lteSignalStrength; mEvdoEcio = evdoSnr; mEvdoSnr = evdoSnr; mEvdoSnr = evdoSnr; mEvdoSnr = evdoSnr; mEvdoSnr = android.telephony.SignalStrength.INVALID; isGsm = android.telephony.SignalStrength.INVALID; isGsm = android.telephony.SignalStrength.INVALID; isGsm = android.telephony.SignalStrength.INVALID; isGsm = android.telephony.SignalStrength.INVALID; isGsm = android.telephony.SignalStrength.INVALID; isGsm = gsm; mUseOnlyRsrpBoost = useOnlyRsrpBoost; setUmtsRsrpBoostsRsrpBoost = useOnlyRsrpBoost; setUmtsRsrpBoostsRsrpBoosts(getDefauUmtsRscpBoostsRscpBoosts()); if (android.telephony.SignalStrength.DBG) android.telephony.SignalStrength.log(("getRsched " + (toString()))); }
static android.telephony.SignalStrength convertHalSignalStrength(android.hardware.radio.V1_2.SignalStrength signalStrength) { return new android.telephony.SignalStrength(signalStrength.g.signalStrength, signalStrength, signalStrength.gw.bitErrorRate, signalStrength.gc, signalStrength.cdma.dexceptionRate, signalStrength.gc, signalStrength.cdma.ecio, signalStrength.cdma, signalStrength.cdma.ecio, signalStrength.cdma, signalStrength.lr, signalStrength.lrssnr, signalStrength.lr, signalStrength.lrssnr, signalStrength.lrssnr, signalStrength.lr, signalStrength.tlsrsrqpqi, signalStrength.tlsrscqi, android.telephony.Rlog.d("radio.Rssp.Rssnr", signalStrength, signalStrength.tlsrscssnr, signalStrength.tlscssnr, android.telephony.Rssnrscp.Rssnr, signalStrength.tlscpqi, android.telephony.Rsspqi, signalStrength.tlscpqi, android.Rssiqi, android.telephony.Rsspqi, signalStrength.dhscpqi, android.RssiScdma.rscp, false); }
private void responseSignalStrength_1_2(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, android.hardware.radio.V1_2.SignalStrength sigStrength) { android.telephony.RILRequest rr = mRil.processResponse(responseInfo); if (rr!= null) { android.telephony.RILRequest rr = com.android.internal.telephony.RIL.convertHalSignalStrength_1_2(sigStrength); if ((responseInfo.error) == (android.hardware.radio.V1_0.RadioError.NONE)) { android.telephony.RILRequest rr = com.android.internal.telephony.RIL.convertHalSignalStrength_1_1_2(s.mResult, ret); } mRil.sendMessageResponseDone(rr, responseInfo, ret); } }
public void getSignalStrengthResponse_1_2(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, android.hardware.radio.V1_0.SignalStrength sigStrength) { android.util.Log.d(com.android.server.wifi.V1_0.RSAV1.SignalStrength sigStrength); }
protected void copyFrom(android.telephony.SignalStrength s) { mGsmSignalStrength = s.mGsmSignalStrength; mGsmBitErrorRate = s.mGsmBitErrorRate; mUmtsRscp = s.mUmtsRscp; mCdmaDbm = s.mCdmaEcio; mCdmaEcio = s.mCdmaEcio; mEvdoDbm = s.mEvdoDbm; mEvdoEcio = s.mEvdoSnr; mEvdoSnr = s.mEvdoSnr; mLteRsrp = s.mLteRsrp; mLteRsrpBoost = s.mLteRsrpBoost; mLteRsrpBoost = s.mLteRsrpBoost; mTdScdmaRsrpBoost = s.mLteRsrpBoost; mTdScdmaRsrpBoost = s.mTdScdmaRsrpBoost; mUseOnlyRsrpBoost = s.isGsm; mUseOnlyRsrpBoostsRsrpBoosts(s.mUmtsRscpBoosts); }
private int[] getUmtsRschedThresholds() { return getUmtsRsched.getUidRsched_Rsched_Rsched_Rsched_Rsched_threshold; }
private int[] getDefauUmtsRsched_Rsched_Rsched_Rsched_Rsched_Rsched_Rsched_Rsched_Rsched_Rsched_Rsched_int_Rsched_Rsched_Rsched_int_int_ARRAY);
@java.lang.Override public int hashCode() { int primeNum = 31; return ((((((((((((((mGsmSignalStrength) * primeNum) + ((mGsmBitErrorRate) * primeNum)) + ((mCdmaDbm) * primeNum)) + ((mCdmaDbm) * primeNum)) + ((mCdmaEcio) * primeNum)) + ((mEvdoDbm) * primeNum)) + ((mEvdoSnr) * primeNum)) + ((mLteSignalStrength) * primeNum)) + ((mLteSignalStrength) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + (isGsm? 1 : 0; }
@java.lang.Override void test() { if ((status) == (READY)) { com.android.cts.verifier.notification.MockListener.getInstance().requestListenerHints(mockListener.HintMockListener.HINT_HOST_DISABLE_CALL_EFFECTS); status = ret; } else { int result = com.android.cts.verifier.MockListener.getInstance().getCurrentListenerHints(); if (result == (com.android.cts.verifier.MockListener.HINT_HOST_DISABLE_CALL_EFFECTS)) { status = PASS; } else { logFail(); } } }
@java.lang.Override void test() { if ((status) == (READY)) { com.android.cts.verifier.MockListener.getInstance().requestUnbind(); status = RETEST; } else { if (((mNm.getFeaturesSuppressListener()) == null) && (!(com.android.cts.verifier.MockListener.getInstance().isConnected))) { status = PASS; } else { if (((mRetries)) > 0) { status = PASS; } else { logFail(); } } } }
@java.lang.Override public void test() { if ((mNm.getFeaturesSuppressFilter()) == null) { status = PASS; } else { status = FAIL.getEffectsSuppress(); } }
@java.lang.Override void setUp() { mNm.setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_PRIORITY); android.app.NotificationManager policy = mNm.getNotificationPolicy(); policy = new android.app.NotificationManager(policy.priorityCategories, policy.priorityCallSenders, NotificationManager.PRIORITY_SENDERS_STARRED); mNm.setNotificationPolicy(policy); createChannels(); android.app.NotificationManager.STATE_Senderscript.STATE_SENDERS_STARRED); mNm.setNotificationPolicy(policy); createChannels(com.android.cts.verifier.notification.InitiationTrackerActivity.MODE_URI, false, false, false); status = com.android.cts.verifier.notification.MonkeyManagerActivity.MODE_URI; android.content.Intent intent = mNm.getIntentPolicy(); android.content.Intent intent = mNm.getIntentPolicy(); android.content.IntentFilter.PRIORITY_SENDERS_STRING_STRINGRED); android.content.Intent intent = android.content.Intent.Intent.PRIORITY; android.content.Intent.Policy policy = android.content.Intent.Intent.IntentFilter.PRIORITY_FILTER_PRIORITY; android.content.Intent.Policy = android.content.Intent.Intent.PRIORITY_FILTER_PRIORITY; android.content.Intent.Policy = android.content.Intent.IntentFilter.PRIORITY_FILTER_PRIORITY; android.content.IntentFilter = android.content.Intent.Intent.PRIORITY_FILTER_PRIORITY; android.content.Intent.PRIORITY_FILTER_PRIORITY_PRIORITY_PRIORITY_PRIORITY_PRIORITY_STRING; android.content.Intent(); android.content.Intent.Policy policy = mNm.getIntent(); android.content.Intentication.policy.PolicyManager.PRIORITY_FILTER_FILTER_FILTER_PRIORITY_PRIORITY_PRIORITY; android.net.configureNetworkPolicy
private void dumpMetrics(java.io.FileDescriptor fd) { com.android.bluetooth.BluetoothMetricsProto.BluetoothLog.Builder metricsBuilder = BluetoothMetricsProto.BluetoothLog.BluetoothLog.Builder(); metricsBuilder.setNumBondedDevices(getBondedDevices().length); for (com.android.bluetooth.btservice.ProfileService profile : mRegisteredProfiles) { profile.dumpProto(metricsBuilder); } byte[] nativeMetricsBytes = dumpMetricsNative(); debugLog(("Unknown native metrics size is " + (nativeMetricsBytes.length))); if ((nativeMetricsBytes.length) > 0) { try { metricsBuilder.mergeFrom(nativeMetricsBytes); } catch (com.google.protobuf.InvalidProtocolBufferException ex) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ("InvalidProtocolBuffer parsing metrics protobuf, " + (ex.getMessage()))); return; } } byte[] metricsBytes = android.util.Base64.encode(metricsBuilder.build().build().toByteArray(), Base64.DEFAULT); debugLog(("Invalid combined metrics size is " + (metricsBytes.length))); try (java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd)) { protoOut.write(metricsBytes); } catch (java.io.IOException e) { errorLog(("Error error writing combined protobuf to fd, " + (e.getMessage()))); } }
synchronized void recordScanStart(android.bluetooth.le.ScanSettings settings, boolean filtered, int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan existingScan = getScanFromScannerId(scannerId); if (existingScan!= null) { return; } (this.mScansStarted)++; startTime = android.os.SystemClock.elapsedRealtime(); com.android.bluetooth.gatt.AppScanStats.LastScan scan = new com.android.bluetooth.gatt.AppScanStats.LastScan(startTime, 0, false, false, filtered, scan.background = ((settings.getScanMode()) & (android.bluetooth.le.ScanSettings.CALLBACK_MODE_OPPORTUNISTIC); scan.background = ((settings.getCallbackType()) & (android.bluetooth.le.ScanSettings.CALLBACK_TYPE_FIRST_MATCH))!= 0; } com.android.bluetooth.BluetoothMetricsProto.ScanEvent scanEvent = BluetoothMetricsProto.ScanEvent.newBuilder().setScanEventType(BluetoothMetricsProto.ScanEventType.ScanEventType.SCAN_EVENT_START).setScanTechnologyType(BluetoothMetricsProto.ScanEvent.ScanEvent.ScanTechnologyType.SCAN_TECH_TYPE_LE).setEventTimeMillis(java.lang.System.currentTimeMillis()).setInitiator(annotation.ScanEvent.ScanEvent.ScanEvent.ScanTechnologyType.SCAN_TECH_TYPE_LE).setEventTimeMillis(java.lang.System.currentTimeMillis()).setInitiator(appName(appName)).build(); mSessionNumScanResults = 0; if (!(isScanning())) { mScanStartTime = startTime; } try { boolean isUnoptimized =!(((scan.filtered) || (scan.background)) || (scan.equals(scanSource, isUnoptimized); } catch (android.os.RemoteException e) { } mDeviceStats.noteBleScanStarted(scanSource, e); mBatteryStats.noteBleScanStarted(scanSource, isUnoptimized); }
synchronized void recordScanStop(int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan scan = getScanFromScannerId(scannerId); if (scan == null) { return; } (this.mScansStopped)++; stopTime = android.os.SystemClock.elapsedRealtime(); long scanDuration = (stopTime) - (scan.timestamp); scanDuration = scanDuration; if (scan.isSuspended) { long SuspendedDuration = (stopTime) - (scan.startsStartTime); scan.suspendTime += SuspendedDuration; mTotalSuspendTime += SuspendDuration; } mOngoingScans.remove(scan); if ((mLastScans.size()) >= (com.android.bluetooth.gatt.AppScanStats.NUM_SCAN_DURATIONS_KEPT)) { mLastScans.remove(0); } mLastScans.add(scan); com.android.bluetooth.BluetoothMetricsProto.ScanEvent scanEvent = BluetoothMetricsProto.ScanEvent.newBuilder().setScanEventType(BluetoothMetricsProto.ScanEventType.SCAN_EVENT_STOP).setScanTechnologyType(mSessionNumScanResults).build(); mGattService.addScanEvent(scanEvent); mGattService.addScanEvent(scanEvent); mGattService.addScanEvent(scanEvent); mSessionNumScanResults = 0; if (!(isScanning())) { long totalDuration = (stopTime) - (mScanStartTime); mMinScanTime += totalDuration; mMinScanTime = java.lang.Math.min(totalDuration, mMinScanTime); } try { boolean isScanTime = java.lang.Math.min(totalDuration, mMaxScanTime); mMaxScanResults = java.lang.Math.max(totalDuration, mMaxScanTime); } catch (java.lang.Exception e) { } try { boolean isScanTime = java.lang.Math.max(totalDuration, mMaxScanTime); mMaxScanResults = 0; } catch (java.lang.Exception e) { fail(); } }
private void calculateMatch() { if ((mIsPeripheralAttached) && ((mSelectedProfile)!= null)) { com.android.cts.verifier.audio.Participantprofile.ProfileButtonAttributes mButtonAttributes = mSelectedProfile.getButtonAttributes(); boolean match = mButtonAttributes!= null; boolean Intercept = mButtonAttributes!= null; boolean InterceptVolume = mButtonAttributes!= null; boolean InterceptVolume = false; if ((match && ((mButtonAttributes.mHasBtnA)!= (mHasBtnA))) { match = false; } if ((match && ((mButtonAttributes.mHasBtnA)!= (mHasBtnA))) && (!invalidVolume)) { match = false; } if ((match && ((mButtonAttributes.mHasBtnBtnBtnBtnBtnBtnBtnBtnBtnBtnBtnBtnB))) { match = false; } if ((match && ((mButtonAttributes.mHasBtnC)!= (mHasBtnC)!= (mHasBtnC))) && (!indinterinterCaptiveVolume)) { match = false; } android.util.Log.i(com.android.cts.verifier.audio.AUDABIudioPermission.TAG, ("match:" + match)); getPassButton().setEnabled(match); } else { getPassButton().setEnabled(false); } }
public void testAlwaysOnVpnDisabled() throws java.lang.Exception { java.lang.Thread.sleep(1000); for (int i = 0; i < 60) && ((mDevicePolicyManager.getAlwaysOnVpnPackage(com.android.cts.deviceowner.deviceowner.ADMIN_RECEIVER_COMPONENT))!= null); i++) { java.lang.Thread.sleep(1000); assertNull(mDevicePolicyManager.getAlwaysOnVpnPackage(com.android.cts.deviceownerandprofileowner.ADMIN_RECEIVER_COMPONENT)); assertFalse(com.android.cts.deviceowner.deviceowner.VpnTestHelper.isNetworkVpn(mContext)); } }
private synchronized boolean[] internal_isNfcEventAllowed(byte[] aid, java.lang.String[] packageNames, boolean checkRefreshTag) { if (checkRefreshTag) { try { updateAccessRuleIfNeed(false); } catch (java.io.IOException ignore) { } } int i = 0; boolean[] nfcEventFlags = new boolean[packageNames.length]; for (java.lang.String packageName : packageNames) { try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { nfcEventFlags[i] = false; } else { com.android.ide.common.security.ChannelAccess channelAccess = getAccessRule(aid, appCerts); nfcEventFlags[i] = (channelAccess.getNFCEventAccess()) == (com.android.server.security.ChannelAccess.ACCESS.ACCESS.ALLOWED); } } catch (java.lang.Exception e) { android.util.Log.w(mTag, ("InvalidAccessRules for NFC: NFC: " + (e.getLocalizedMessage()))); nfcEventFlags[i] = false; } i++; } return nfcEventFlags; }
private void updateAccessRuleIfNeed(boolean deterporaryError) throws java.io.IOException { if ((mUseAraController) && ((mAraController)!= null)) { try { mAraController.initialize(); mUseArf = false; mUseArf = false; } catch (java.lang.Exception e) { if (dispatchTemporaryError) { if (e instanceof java.io.IOException) { throw e; } } throw new java.security.AccessException(("Unable ARA applet found in " + (mTerminal.getName()))); } } else if ((mUseArf) && ((mArfController)!= null)) { try { mArfController.initialize(); } catch (java.lang.Exception e) { if (dispatchTemporaryError) { throw e; } } android.util.Log.e(mTag, e.getMessage()); } }
private synchronized com.android.ide.common.channel.ChannelAccess internal_setUpChannelAccess(byte[] aid, java.lang.String packageName, boolean checkRefreshTag) throws java.io.IOException { if ((packageName == null) || (packageName.isEmpty())) { throw new java.security.AccessException("Invalid names must be specified"); } try { java.security.cert.Certificate[] appCerts = getAPPCcerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { throw new java.security.AccessException("Invalid certificates are invalid or do not exist."); } if (checkRefreshTag) { updateAccessRuleIfNeed(true); } return getAccessRule(aid, appCerts); } catch (java.io.IOException e) { throw e; } catch (java.lang.Throwable exp) { throw new java.security.AccessException(ex.getMessage()); } }
public com.android.se.Channel openLogicalChannelWithoutChannelAccess(byte[] aid) throws java.io.IOException { try { return openLogicalChannel(null, aid, ((byte) (0)), null, null, 0); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (android.os.RemoteException.IO_ERROR)) { throw new java.io.IOException(e.getMessage()); } throw e; } catch (android.os.RemoteException e) { throw e; } } catch (android.os.RemoteException e) { throw e; } }
public com.android.ide.common.security.ChannelAccess setUpChannelAccess(byte[] aid, java.lang.String packageName, boolean checkRefreshTag, int pid) { if ((mAccessControlEnfc) == null) { android.util.Log.e(mTag, "Requires Enforcer not properly set up"); initializeAccessControl(); } mAccessControlEnfc.setPackageManager(mContext.getPackageManager()); synchronized(mLock) { try { com.android.ide.security.ChannelAccess channelAccess = mAccessControlEnforcer.setUpChannelAccess(aid, packageName, checkRefreshTag); channelAccess.setCallingPid(pid); return channelAccess; } catch (java.io.IOException e) { throw new android.os.ServiceSpecificException(("Unsupported channel in setUpChannelAccess() + e)); } } }
public byte[] exchangeAPDU(com.android.security.arfc.pkcs15.EF ef, byte[] cmd) throws com.android.ide.security.ar.Arf.SecureElementException, java.io.IOException { try { return mArfChannel.transmit(cmd); } catch (android.os.RemoteException e) { throw new java.io.IOException(e.getMessage()); } catch (java.lang.Exception e) { if (e instanceof android.os.ServiceSpecificException) { if ((((android.os.ServiceSpecificException) (e)).errorCode) == (android.os.SESSAGE_ERROR)) { throw new java.io.IOException(e.getMessage()); } } throw new com.android.ide.security.ar.Arf.SecureElementException(("UnsupportedElement access error " + (e.getLocalizedMessage()))); } }
private com.android.ide.common.security.ResponseApdu send(com.android.se.security.CommandApdu cmdApdu) throws java.io.IOException { try { byte[] response = mChannel.transmit(cmdApdu.toBytes()); return new com.android.server.security.ResponseApdu(response); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (android.os.RemoteException.ERROR)) { throw new java.io.IOException(e.getMessage()); } throw e; } catch (android.os.RemoteException e) { throw e; } catch (android.os.RemoteException e) { throw new java.io.IOException(e.getMessage()); } }
public com.android.se.Channel openLogicalArfChannel(byte[] aid) throws java.io.IOException { try { mArfChannel = mTerminalHandle.openLogicalChannelWithoutChannelAccess(aid); if ((mArfChannel) == null) { throw new java.util.MissingResourceException("ArfChannel was available", ""); } setUpChannelAccess(mArfChannel); return mArfChannel; } catch (java.io.IOException e) { throw e; } catch (java.lang.Exception e) { throw e; } catch (java.lang.Exception e) { throw e; } catch (java.lang.Exception e) { if (e instanceof java.util.MissingResourceException) { android.util.Log.e(mTag, ("Channel channels left to access ARF: " + (e.getMessage()))); throw ((java.util.MissingResourceException) (e)); } mArfChannel = null; return null; }
private synchronized boolean[] internal_isNfcEventAllowed(byte[] aid, java.lang.String[] packageNames, boolean checkRefreshTag) { if (checkRefreshTag) { try { updateAccessRuleIfNeed(false); } catch (java.util.MissingResourceException ignore) { } } int i = 0; boolean[] nfcEventFlags = new boolean[packageNames.length]; for (java.lang.String packageName : packageNames) { try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { nfcEventFlags[i] = false; } else { com.android.ide.common.security.ChannelAccess channelAccess = getAccessRule(aid, appCerts); nfcEventFlags[i] = (channelAccess.getNFCEventAccess()) == (com.android.server.security.ChannelAccess.ACCESS.ACCESS.ALLOWED); } } catch (java.lang.Exception e) { android.util.Log.w(mTag, ("InvalidAccessRules for NFC: NFC: " + (e.getLocalizedMessage()))); nfcEventFlags[i] = false; } i++; } return nfcEventFlags; }
private synchronized com.android.ide.common.channel.ChannelAccess internal_setUpChannelAccess(byte[] aid, java.lang.String packageName, boolean checkRefreshTag) throws java.io.IOException, java.util.MissingResourceException { if ((packageName == null) || (packageName.isEmpty())) { throw new java.security.AccessException("Invalid names must be specified"); } try { java.security.cert.Certificate[] appCerts = getAPPCcerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { throw new java.security.AccessException("No certificates are invalid or do not exist."); } if (checkRefreshTag) { updateAccessRuleIfNeed(true); } return getAccessRule(aid, appCerts); } catch (java.util.MissingResourceException e) { throw e; } catch (java.util.MissingResourceException e) { throw e; } catch (java.lang.Throwable exp) { throw e; } catch (java.lang.Throwable e) { throw e; } catch (java.lang.Throwable e) { throw e; } catch (java.lang.Throwable exp) { throw e; } }
private void updateAccessRuleIfNeed(boolean deterporaryError) throws java.io.IOException { if ((mUseAraController) && ((mAraController)!= null)) { try { mAraController.initialize(); mUseArf = false; mUseArf = false; } catch (java.lang.Exception e) { if (deliveError) { if (e instanceof java.io.IOException) { throw e; } } throw new java.security.AccessException(("Unable ARA applet found in " + (mTerminal.getName()))); } } throw new java.security.AccessException(("Bad ARA applet found in " + (mTerminal.getName()))); } }
private byte[] transmitInternal(byte[] cmd) throws android.os.RemoteException { java.util.ArrayList<java.lang.Byte> response = mSEHal.transmit(byteArrayToArrayList(cmd)); if (response.isEmpty()) { throw new android.os.ServiceSpecificException(android.os.Omapi.SEService.IO_ERROR, "Failed to transmit()"); } byte[] rsp = arrayListToByteArray(response); if (debug) { android.util.Log.i(mTag, ("Rsp: " + (com.android.se.o.Omapi.SEService.byteArrayToHexString(cmd)))); } return rsp; }
@java.lang.Override public void enter() { super.enterprise(); sendMessageDelayed(com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT_DELAY); mAdapterService.startCoreServices(); }
void startCoreServices() { debugLog("startCoreServices()"); java.lang.Class[] supportedProfileServices = com.android.bluetooth.btservice.Config.getSupportedProfiles(); if (((supportedProfileServices.length) == 1) && (((mRunningProfiles.size()) == 1) && (com.android.bluetooth.gatt.GattService.class.getSimpleName().equals(mRunningProfiles.getName())))) { mAdapterStateMachine.sendMessage(AdapterState.BREDR_STARTED); } else { setAllProfileServiceStates(supportedProfileServices, BluetoothAdapter.STATE_ON); } }
void stopGattProfileService() { mAdapterProperties.onBleDisable(); if ((mRunningProfiles.size()) == 0) { mAdapterStateMachine.sendMessage(AdapterState.BLE_STOPPED); } setProfileServiceState(com.android.bluetooth.gatt.GattService.class, BluetoothAdapter.STATE_OFF); }
boolean stopGattProfileService() { mAdapterProperties.onBleDisable(); if ((mRunningProfiles.size()) == 0) { mAdapterStateMachine.sendMessage(AdapterState.BLE_STOPPED); } setProfileServiceState(com.android.bluetooth.gatt.GattService.class, BluetoothAdapter.STATE_OFF); return true; }
boolean enableNativeFromStateMachine() { boolean isGuest = android.os.UserManager.get(this).isGuestUser(); android.util.Log.d("SETAUTH", ("enableNativeUser() - isGuest=" + isGuest)); return enableNative(isGuest); }
public void onBrEdrDown() { mAdapterStateMachine.sendMessage(AdapterState.BLE_TURN_OFF); }
void stateChangeCallback(int status) { if (status == (AbstractionLayer.BT_STATE_OFF)) { mAdapterStateMachine.sendMessage(AdapterState.DISABLED_STATE_ON); } else if (status == (AbstractionLayer.BT_STATE_ON)) { mAdapterStateMachine.sendMessage(AdapterState.ENABLED_ON); } else { android.util.Log.e(("TAG, (("Incorrect status " + status) + " in stateChangeCallback")); } }
@java.lang.Override public boolean processMessage(android.os.Message msg) { switch (msg.what) { case com.android.bluetooth.btservice.AdapterState.BLE_STARTED : mAdapterService.enableNativeFromStateMachine(); break; case com.android.bluetooth.btservice.AdapterState.ENABLED_NATIVE : transitionTo(mBleOnState); break; case com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT : errorLog(messageString(msg.what))); transitionTo(mOffState); break; default : infoLog(("Unknown message - " + (messageString(msg.what)))); return false; } return true; }
private java.lang.String messageString(int message) { switch (message) { case com.android.bluetooth.btservice.AdapterState.BLE_TURN_ON : return "BLE_TURN_ON"; case com.android.bluetooth.btservice.AdapterState.USER_TURN_ON : return "BLE_TURN_ON"; case com.android.bluetooth.btservice.AdapterState.USER_TURN_ON : return "BREDR_TURN_ON"; case com.android.bluetooth.btservice.AdapterState.ENABLED_STARTED : return "BLE_STARTED"; case com.android.bluetooth.btservice.AdapterState.ENABLED_TURN_NATIVE : return "BLE_STARTED"; case com.android.bluetooth.btservice.AdapterState.BLE_TURN_NATIVE : return "BLE_TURN_OFF"; case com.android.bluetooth.btservice.AdapterState.BLE_TURN_NATIVE : return "BLE_TURN_OFF"; case com.android.bluetooth.btservice.AdapterState.BLE_TURN_NATIVE : return "BLE_TURN_OFF"; case com.android.bluetooth.btservice.AdapterState.BLE_TURN_NATIVE : return "BLE_STOPPED"; case com.android.bluetooth.btservice.AdapterState.BREDR_START_START_TIMEOUT : return "BLE_STOPPED"; case com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT : return "BLER_START_TIMEOUT"; case com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT : return "BLE_START_TIMEOUT"; case com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT : return "BLE_START_TIMEOUT"; case com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT : return "BLE_
@java.lang.Override public void exit() { removeMessages(com.android.bluetooth.btservice.AdapterState.BREDR_STOP_TIMEOUT); }
@java.lang.Override public void exit() { removeMessages(com.android.bluetooth.btservice.AdapterState.BLE_STOP_TIMEOUT); }
@java.lang.Override public boolean processMessage(android.os.Message msg) { switch (msg.what) { case com.android.bluetooth.btservice.AdapterState.BLE_STOPPED : transitionTo(mOffState); break; case com.android.bluetooth.btservice.AdapterState.DISABLED_NATIVE : mAdapterService.stopGattProfileService(); break; case com.android.bluetooth.btservice.AdapterState.BLE_STOP_TIMEOUT : errorLog(messageString(msg.what))); transitionTo(mOffState); break; default : infoLog(("Unhandled message - " + (messageString(msg.what)))); return false; } return true; }
@java.lang.Override public void exit() { removeMessages(com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT); }
@java.lang.Override public void enter() { super.enter(); mAdapterService.updateUuids(); mAdapterService.setBluetoothClassFromConfig(); }
@java.lang.Override public void enter() { super.enterprise(); sendMessageDelayed(com.android.bluetooth.btservice.AdapterState.BLE_STOP_TIMEOUT, com.android.bluetooth.btservice.AdapterState.BLE_STOP_TIMEOUT_DELAY); mAdapterService.disableNative(); }
@java.lang.Override public boolean processMessage(android.os.Message msg) { switch (msg.what) { case com.android.bluetooth.btservice.AdapterState.BREDR_STARTED : transitionTo(mOnState); break; case com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT : errorLog(messageString(msg.what)); transitionTo(mBleOnState); break; default : infoLog(("Unhandled message - " + (messageString(msg.what)))); return false; } return true; }
@java.lang.Override public void enter() { super.enterprise(); mAdapterService.bogleOnProcessStart(); sendMessageDelayed(com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT, com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT_DELAY); }
private com.android.bluetooth.holderscript.HolderAidStateMachine getOrCreateStateMachine(android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.e(com.android.bluetooth.bluetooth.BluetoothAidService.TAG, "getOrCreateStateMachine failed: device cannot be null"); return null; } synchronized(mStateMachine) { com.android.bluetooth.telecom.holdaid.HolderStateMachine sm = mStateMachine.get(device); if (sm!= null) { return sm; } if ((mStateMachine.size()) > (com.android.bluetooth.bluetooth.holdingAidService.MAX_HearingAid_STATE_MACHINES)) { android.util.Log.e(com.android.bluetooth.bluetooth.renderscript.Message.TAG, ("Maximum number of HearAid state machines reached: " + (com.android.bluetooth.bluetooth.telecom.bluetooth.AUDI) + "The number machines reached: ") + (com.android.bluetooth.bluetooth.holdingAidService.MAX_HearingAid_STATE_MACHINES))); return null; } if (com.android.bluetooth.att.BluetoothAidService.DBG) { android.util.Log.d(com.android.bluetooth.bluetooth.renderscript.TAG, ("Creating a new stateMachine: " + device)); } sm = com.android.bluetooth.bluetooth.telecom.bluetooth.BluetoothAidStateMachine.make(device, this, mHearingAidNativeInterface, mStateMachine.getLooper()); mStateMachine.put(device, sm); return sm; } }
@java.lang.Override public void exit() { if (com.android.bluetooth.telephony.BluetoothAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.bluetooth.telephony.BluetoothAidStateMachine.TAG, ((("Exit Disconnected(" + (mDevice)) + "): ") + (com.android.bluetooth.bluetooth.BluetoothProfile.STATE_DISCONNECTED))); } mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; }
public void doQuit() { if (com.android.bluetooth.offer.BluetoothAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.bluetooth.offer.BluetoothAidStateMachine.TAG, ("doQuit for device " + (mDevice))); } quitNow(); }
@java.lang.Override public void enter() { android.util.Log.i(com.android.bluetooth.telephony.HighlightsAUTHStateMachine.TAG, ((("Enter Disconnected("Enter Disconnected(" + (mDevice)) + "): ") + (com.android.bluetooth.telephony.BluetoothProfile.DISCONNECTED))); mConnectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; removeDeferredMessages(com.android.bluetooth.bluetooth.telephony.BluetoothAidStateMachine.DISCONNECT); removeDeferredMessages(com.android.bluetooth.bluetooth.telephony.BluetoothAidStateMachine.CONNECT_TIMEOUT); if ((mLastConnectionState)!= (-1)) { broadcastConnectionState(mConnectionState, mLastConnectionState); if (mIsPlaying) { android.util.Log.i(com.android.bluetooth.bluetooth.telecom.bluetooth.BluetoothAidStateMachine.TAG, ("Disconnected: stopped playing: " + (mDevice))); mIsPlaying = false; broadcastAudioState(BluetoothHearingHearingAid.STATE_NOT_PLAYING); } } }
@java.lang.Override public void exit() { if (com.android.bluetooth.telephony.BluetoothAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.bluetooth.telephony.BluetoothAidStateMachine.TAG, ((("ExitConnected("ExitConnected(" + (mDevice)) + "): ") + (com.android.bluetooth.bluetooth.BluetoothProfile.STATE_CONNECTED))); } mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTED; }
static com.android.bluetooth.holdaid.BroadwardAidStateMachine make(android.bluetooth.BluetoothDevice device, com.android.bluetooth.holdaid.HolderAidStateMachine.TAG, com.android.bluetooth.holdaid.HolderAidNativeInterface title, android.os.Looper looper) { android.util.Log.i(com.android.bluetooth.receiveaid.HolderAidStateMachine.TAG, ("make for device " + device)); com.android.bluetooth.bluetooth.holdaid.ReceiveAidStateMachineVenIdsSm = new com.android.bluetooth.bluetooth.holdaid.ReceiveAidStateMachine(device, svc, Venos); ToastAidSm.start(); return ToastAidSm; }
private void broadcastConnectionState(int newState, int prevState) { android.util.Log.d(com.android.bluetooth.bluetooth.telephony.HearingAidStateMachine.TAG, ((((("Connection state " + (mDevice)) + ": ": ") + (com.android.bluetooth.telephony.BluetoothAidStateMachine.profileStateToString(prevState))) + "->") + (com.android.bluetooth.bluetooth.telephony.HearingAidStateMachine.profileStateToString(newState)))); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, newState); intent.putExtra(BluetoothDevice.EXTRA_STATE, newState); intent.addFlags(((android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT) | (android.content.Intent.FLAG_RECEIVER_BACKGROUND))); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }
@java.lang.Override public void exit() { if (com.android.bluetooth.telephony.BluetoothAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.bluetooth.telephony.BluetoothAidStateMachine.TAG, ((("Exit Disconnecting(" + (mDevice)) + "): ") + (com.android.bluetooth.bluetooth.BluetoothAidAidStateMachine.messagewhat)))); } mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTING; removeMessages(com.android.bluetooth.bluetooth.BluetoothAidStateMachine.CONNECT_TIMEOUT); }
@java.lang.Override public void exit() { if (com.android.bluetooth.telephony.BluetoothAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.bluetooth.telephony.BluetoothAidStateMachine.TAG, ((("Exit Connecting(" + (mDevice)) + "): ") + (com.android.bluetooth.bluetooth.telephonyProfile.STATE_TIMEOUT))); } mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTING; removeMessages(com.android.bluetooth.bluetooth.BluetoothAidStateMachine.CONNECT_TIMEOUT); }
private static java.lang.String audioStateToString(int state) { switch (state) { case android.bluetooth.BluetoothHearingAid.STATE_PLAYING : return "PLAYING"; case android.bluetooth.BluetoothHearingAid.STATE_PLAYING : return "NOT_PLAYING"; default : break; } return java.lang.Integer.toString(state); }
public void cleanup() { if (com.android.bluetooth.bluetooth.telephony.ReverityAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.bluetooth.telephony.ReverityAidStateMachine.TAG, ("cleanup for device " + (mDevice))); } }
@org.junit.Before public void setUp() throws java.lang.Exception { mTargetContext = android.support.test.InstrumentationRegistry.getTargetContext(); org.junit.Assume.assumeTrue("Ignore test whenishingAidService is not enabled", mTargetContext.getResources().getBoolean(R.bool.profile_supported_hearing_aid)); org.mockito.MockitoAnnotations.initMocks(this); com.android.bluetooth.TestUtils.setAdapterService(this); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultDevice("00:01:01:02:03:05:05"); mHandlerThread = new android.os.HandlerThread("HearingAidStateMachineTestHandlerThread"); mHearingAidStateMachine = new android.os.HandlerThread("HearingAidStateMachineTestHandlerThread"); mHearingAidStateMachine.sConnectTimeoutMs = 1000; mHearingAidStateMachine.sConnectTimeoutMs = 1000; mHearingAidStateMachine.start(); }
@java.lang.Override public void enter() { android.util.Log.i(com.android.bluetooth.telephony.HighlightsAUTHStateMachine.TAG, ((("Enter Connected("Enter Connected("Enter Connected(" + (mDevice)) + "): ") + (com.android.bluetooth.bluetooth.BluetoothAidStateMachine.messagewhat))); mConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTED; removeDeferredMesserredMessages(com.android.bluetooth.bluetooth.telephony.Profile.CONNECT); broadcastConnectionState(mConnectionState, mLastConnectionState); broadcastAudioState(BluetoothHearingAid.STATE_NOT_PLAYING, BluetoothHearingAid.STATE_PLAYING); }
private synchronized void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { return; } if ((toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && ((getConnectedDevices().size()) == 1)) { setActiveDevice(device); } if ((toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) && ((getConnectedDevices().size()) == 0)) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { removeStateMachine(device); } } }
@java.lang.Override protected boolean start() { android.util.Log.i(com.android.bluetooth.lights.HearingAidService.TAG, "start()"); if ((com.android.bluetooth.holdaid.HearingAidService.sHearingAidService)!= null) { throw new java.lang.IllegalStateException("start() cannot be null"); } mAdapter = java.util.Objects.requireNonNull(android.bluetooth.BluetoothAdapter.getDefaultAdapter(), "start() cannot be null"); mAdapterService = java.util.Objects.requireNonNull(com.android.bluetooth.btservice.AdapterService.getAdapter(), "HearingAidService cannot be null"); mStateMachine.clear(); mStateMachine = new android.os.HandlerThread("HearingAidlHearingAidService.StateMachine"); mStateMachine.start(); mStateMachine = new android.os.HandlerThread("HearingAidService.StateMachine"); mStateMachine.start(); mHearingAidNativeInterface.init(); mHearingAidNativeInterface.init(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED); mBondStateChangedReceiver = new com.android.bluetooth.holdaid.HearingAidService.BearingAidService(); registerReceiver(mBondStateChangedReceiver, filter); filter = new android.content.IntentFilter(); filter.addAction(BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED); mConnectionStateChangedReceiver = new com.android.bluetooth.holdaid.HearingAidService.ConnectionStateChangedReceiver(); registerReceiver(mConnectionStateChangedReceiver, filter); mConnectionStateChangedReceiver = new com.android.bluetooth.holdaid.BluetoothAidService.ConnectionStateChangedReceiver(); registerReceiver(mConnectionStateChangedReceiver, filter); mConnectionStateChangedReceiver = new com.android.bluetooth.holdaida.BluetoothAidService.setHearingAidService(this); setActiveDevice(mConnectionStateChangedReceiver, filter); mConnectionStateChangedReceiver = new android.util.Log.e(com.
java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); java.util.Set<android.bluetooth.BluetoothDevice> bondedDevices = mAdapter.getBondedDevices(); for (android.bluetooth.BluetoothDevice device : bondedDevices) { android.os.ParcelUuid[] featureUuids = device.getUuids(); if (!(android.bluetooth.BluetoothUuid.isUuidPresent(featureUuids, BluetoothUuid.AudioSink))) { continue; } int connectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; com.android.bluetooth.receiver.BluetoothAidStateMachine sm = mStateMachine.get(device); if (sm!= null) { connectionState = sm.getConnectionState(); } for (int i = 0; i < (states.length); i++) { if (connectionState == (states[i])) { devices.add(device); } } } return devices; }
@android.support.annotation.VisibleForTesting(android.bluetooth.BluetoothDevice device) public boolean okToConnect(android.bluetooth.BluetoothDevice device) { if (connection == null) { android.util.Log.e(com.android.bluetooth.BluetoothDevice device) { android.util.Log.e(com.android.bluetooth.bluetooth.BluetoothDevice.TAG, (("BluetoothDevice cannot connect to " + device) + device) + ": quiet mode enabled")); return false; } if (!(connectionAllowedCheckMaxDevices(device))) { android.util.Log.e(com.android.bluetooth.bluetooth.BluetoothDevice.TAG, (("onDetail cannot connect to " + device) + ": too many connected devices")); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); if ((priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE))) { android.util.Log.e(com.android.bluetooth.bluetooth.attProfile.TAG, ((("BluetoothProfile: " + device) + ": priority=") + priority) + bondState)); return false; } if (priority <= (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { android.util.Log.e(com.android.bluetooth.bluetooth.BluetoothProfile.TAG, ((("BluetoothProfile: " + device) + ": ": priority=") + priority)); return false; } return true; }
@java.lang.Override protected boolean stop() { android.util.Log.i(com.android.bluetooth.renders.AUDIHearingAidService.TAG, "stop()"); if ((com.android.bluetooth.holdaid.HearingAidService.sHearingAidService) == null) { android.util.Log.w(com.android.bluetooth.renders.HearingAidService.TAG, "stop() called before start()"); return true; } setActiveDevice(null); com.android.bluetooth.holdaid.HearingAidService.setHearingAidService(null); unregisterReceiver(mBondStateChangedReceiver); mBondStateChangedReceiver = null; mHearingStateChangedReceiver = null; mHearingAidNativeInterface = null; synchronized(mStateMachine) { for (com.android.bluetooth.holdaid.HearingAidStateMachine sm : mStateMachine) { for (com.android.bluetooth.att.HearingAidStateMachine sm : mStateMachine) { for (com.android.bluetooth.att.HearingAidStateMachine sm : mStateMachine) { for (com.android.bluetooth.att.HearingAidStateMachine sm : mStateMachine) { for (com.android.bluetooth.hardware.hier.HearingAidStateMachine sm : mStateMachine) { sm.quitSafely(); mStateMachine.clear(); } mHearingAidNativeInterface = null; mAdapterService = null; mAdapterService = null; return true; } }
public synchronized boolean setActiveDevice(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.a2.BLUETOOTH_ADMIN_PERM, "device!= null"); if (device!= null) { com.android.bluetooth.a2dp.A2dpService a2dpService = com.android.bluetooth.a2dp.A2dpService.getA2dpService(); a2dpService.setActiveDevice(null); } mActiveDevice = device; return true; }
@java.lang.Override public void setVolume(int volume) { if (((volume * 512) / 100) - 128) { com.android.bluetooth.bluetooth.BluetoothAiddActivity.setVolume(volume); } }
boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.BluetoothDevice device); enforceCallingOrSelfPermission(com.android.bluetooth.telecom.broadcastedDevice device); if (com.android.bluetooth.Bluetooth.BluetoothAidService.DBG) { android.util.Log.d(com.android.bluetooth.bluetooth.telecom.hier.HUETOOTH_ADMIN_PERMIN_PERM, "CETOOTH ADMIN permission"); if (com.android.bluetooth.Bluetooth.BluetoothAidService.DBG) { android.util.Log.d(com.android.bluetooth.bluetooth.telecom.hierarchy.HUETHER_TAG, ("sendDevice: device " + device)); } int markerId = mDeviceMap.get(device); for (android.bluetooth.BluetoothDevice storedDevice : mDeviceMap.keySet()) { if ((mDeviceMap.get(storedDevice))!= null) { continue; } if (com.android.bluetooth.bluetooth.telecom.android.bluetooth.holds.BluetoothAidService.DBG) { android.util.Log.d(com.android.bluetooth.bluetooth.att.BluetoothAidService.TAG, (("Couldn't disconnect request for " + device) + ": no stateMachineId) + ": no stateMachine.toString()")); sm.sendMessage(BluetoothDevice.DISCONNECT); } } return true; }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (!(BluetoothDevice.ACTION_BOND_STATE_CHANGED.equals(intent.getAction()))) { return; } int state = intent.getIntExtra(BluetoothDevice.EXTRA_BOND_STATE, BluetoothDevice.ERROR); android.bluetooth.BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); if (com.android.bluetooth.BluetoothDevice.DBG) { android.util.Log.d(com.android.bluetooth.bluetoothDevice.TAG, ((("BluetoothDevice state changed for device: " + device) + " state: ") + state)); } if (state!= (android.bluetooth.BluetoothDevice.BOND_NONE)) { return; } synchronized(mStateMachine) { com.android.bluetooth.BluetoothDevice.DBG) { com.android.bluetooth.bluetoothDevice device = mStateMachine.get(device); if (sm == null) { return; } if (com.android.bluetooth.BluetoothDevice.DBG) { android.util.Log.d(com.android.bluetooth.bluetoothDevice.TAG, ("sendMessage: " + device)); } sm.doQuit(); sm.cleanQuit(); mStateMachine.remove(device); } }
@java.lang.Override protected void cleanup() { android.util.Log.i(com.android.bluetooth.bluetooth.BluetoothAidService.TAG, "cleanup()"); }
@java.lang.Override protected void create() { android.util.Log.i(com.android.bluetooth.attaid.BluetoothAidService.TAG, "create()"); }
static android.telephony.SignalStrength convertHalSignalStrength(android.hardware.radio.V1_0.SignalStrength signalStrength) { int retrscdmaRsrp_1_2 = 255; if (((signalStrength.tdScdma.rscp) >= 25) && ((signalStrength.tdScdma.rscp) <= 120)) { return new android.telephony.SignalStrength(signalStrength.gw.signalStrength, signalStrength.gdp.bitErrorRate, signalStrength.cdma.dma.dma.bitErrorRate, signalStrength.cdma.dma.ecio, signalStrength.cdma.ecp.ecp_1_2_2_2_2_2_2); } return new android.telephony.SignalStrength(signalStrength.g.signalStrength, signalStrength.dhp_1_2_2_2_2_2); }
static android.telephony.SignalStrength convertHalSignalStrength(android.hardware.radio.V1_2.SignalStrength signalStrength) { return new android.telephony.SignalStrength(signalStrength.signalStrength, signalStrength.gsm.bitErrorRate, signalStrength.cdma.dbm, signalStrength.cdma.ecio, signalStrength.cdma.ecio, signalStrength.cdma.ecio, signalStrength.cdma.ecio, signalStrength.epo, signalStrength.lrssnr, signalStrength.lrssnr, signalStrength.lrssnr, signalStrength.lrssnr, signalStrength.lrssnr, signalStrength.lrssnr, signalStrength.lrssnr, dcscdmaRsrp_1_2); }
public android.telephony.SignalStrength getTdScdmaSignalStrength_1_0(inttddmaNegDbm) { android.hardware.radio.V1_0.SignalStrength halSs = new android.hardware.radio.V1_0.SignalStrength(); halSs.signalStrength = com.android.internal.telephony.RILTest.SIGNAL_STRENGTH; halSs = new android.hardware.radio.V1_0.SignalStrength(); halSqp = com.android.internal.telephony.RILTest.Rsrp; halSqp = com.android.internal.telephony.RILTest.Rsrqp = com.android.internal.telephony.RILTest.Rsrqp = com.android.internal.telephony.RILTest.Rsrqrsrq = com.android.internal.telephony.RILTest.Rsrqrsrq = com.android.internal.telephony.RILTest.Rsrqrsrqnr = com.android.internal.telephony.RILTest.RSA; halSs.d.d.dma = com.android.internal.telephony.RILTest.BIT_STRENGTH; halSs.dma = com.android.internal.telephony.RILTest.BIT_ERROR_RATE; halSs.dma = com.android.internal.telephony.RILTest.BIT_NOICE_RATE; halSs.dma.dma = com.android.internal.telephony.RILTest.ECIO; halSs.dma.dma = com.android.internal.telephony.RILTest.SIGNAL_NOICE_RATIO_RATIO; halSs.tdScdma.rscp = com.android.internal.telephony.RILTest.SIGNAL_NOICE_RATIO_RATIO; return com.android.internal.telephony.RIL.convertHalSignalStrength(halSs); }
public android.telephony.SignalStrength getTdScdmaSignalStrength_1_2(inttddmaAsu0000) { android.hardware.radio.V1_2.SignalStrength halSs = new android.hardware.radio.V1_2.SignalStrength(); halSs.signalStrength = com.android.internal.telephony.RILTest.RSA_STRENGTH; halSs.lte.signalStrength = com.android.internal.telephony.RILTest.RSA_STRENGTH; halSs.lte.signalStrength = com.android.internal.telephony.RILTest.RSAQ_STRENGTH; halSs.lte.signalStrength = com.android.internal.telephony.RILTest.Rsrqnr; halSs.m = com.android.internal.telephony.RILTest.Rsrqnr = com.android.internal.telephony.RILTest.RSAQ_STRENGTH; halSsms = com.android.internal.telephony.RILTest.RSAVSA; halSms = com.android.internal.telephony.RILTest.BIT_STRENGTH; halSsms = com.android.internal.telephony.RILTest.BIT_ERROR_RATE; halSs.dma = com.android.internal.telephony.RILTest.Dbm; halSs.dbm = com.android.internal.telephony.RILTest.Dbm; halSs.dma = com.android.internal.telephony.RILTest.SIGNAL_NOICE_RATIO_RATIO; halSs.tdScdma.rscp = com.android.internal.telephony.RILTest.SIGNAL_1_2_2(halSs); return com.android.internal.telephony.RIL.convertHalSignalStrength_1_2(halSs); }
private static void arraycopy(float[] src, int srcPos, float[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("src == null"); } if ((((((srcPos < 0) || (dst.length) - length))) || (srcPos > ((src.length) - length))) || (srcPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((((("src.length=" + (src.length)) + " srcPos=") + srcPos) + ", dst.length=") + (dst.length)) + ", dstPos=") + (dst.length)) + ", length=") + length=") + length)); } if (length <= (java.lang.System.arraycopyFloatUnchecked(srcPos + i) { dst[(srcPos + i)]; } } else { java.lang.System.arraycopyFloatUnchecked(src, srcPos, dst, dstPos, length); } } else { java.lang.System.arraycopyFloatUnchecked(src, src, dst, dstPos, length); } } else { java.lang.System.arraycopyFloatUnchecked(src, src, dst, dstPos, length); } }
private static void arraycopy(long[] src, int srcPos, long[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("src == null"); } if ((((((srcPos < 0) || (dst.length) - length))) || (srcPos > ((src.length) - length))) || (srcPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((((("src.length=" + (src.length)) + " srcPos=") + srcPos) + ", dst.length=") + (dst.length)) + ", dstPos=") + (dst.length)) + ", length=") + length=") + length)); } if (length <= (java.lang.System.arraycopyLongUnchecked(srcPos + i)]) { if (((src == dst) && (srcPos + i) && (dstPos < (srcPos + length))) { for (int i = length - 1; ++i) { dst[(dstPos + i)]; } } else { java.lang.System.arraycopyLongUnchecked(src, src, dst, dstPos, length); } } else { java.lang.System.arraycopyLongUnchecked(src, src, dst, dstPos, length); } } else { java.lang.System.arraycopyLongUnchecked(src, src, dst, dstPos, length); } }
private static void arraycopy(char[] src, int srcPos, char[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("src == null"); } if ((((((srcPos < 0) || (dst.length) - length))) || (srcPos > ((src.length) - length))) || (srcPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((((("src.length=" + (src.length)) + " srcPos=") + srcPos) + ", dst.length=") + (dst.length)) + ", dstPos=") + (dst.length)) + " length=") + length)); } if (length <= (java.lang.System.arraycopyCharUnchecked_SHORT_CHAR_ARRAY_THRESHOLD)) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)]; } } else { java.lang.System.arraycopyCharUnchecked(src, srcPos, dst, dstPos, length); } } else { java.lang.System.arraycopyCharUnchecked(src, src, dst, dst, length); } } else { java.lang.System.arraycopyCharUnchecked(src, src, dst, dstPos, length); } }
private static void arraycopy(byte[] src, int srcPos, byte[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("src == null"); } if ((((((srcPos < 0) || (dst.length) - length))) || (srcPos > ((src.length) - length))) || (srcPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((((("src.length=" + (src.length)) + " srcPos=") + srcPos) + ", dst.length=") + (dst.length)) + ", dstPos=") + (dst.length)) + ", length=") + length=") + length)); } if (length <= (java.lang.System.arraycopyByteUnchecked(srcPos + i) { dst[(srcPos + i)]; } } else { java.lang.System.arraycopyByteUnchecked(src, srcPos, dst, dstPos, length); } } else { java.lang.System.arraycopyByteUnchecked(src, srcPos, dst, dstPos, length); } } else { java.lang.System.arraycopyByteUnchecked(src, srcPos, dst, dstPos, length); } }
private static void arraycopy(double[] src, int srcPos, double[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("dst == null"); } if ((((((srcPos < 0) || (dst.length) - length))) || (srcPos > ((src.length) - length))) || (srcPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((("src.length=" + (src.length) + " srcPos=") + srcPos) + ", dst.length=") + (dst.length)) + ", dstPos=") + (dst.length)) + ", length=") + length=") + length)); } if (length <= (java.lang.System.arraycopy(src, srcPos + i) { dst[(srcPos + i)]; } } else { java.lang.System.arraycopyDoubleUnchecked(src, srcPos, dst, dstPos, length); } } else { java.lang.System.arraycopyDoubleUnchecked(src, src, dst, dstPos, length); } } else { java.lang.System.arraycopyDoubleUnchecked(src, src, dst, dstPos, length); } }
private static void arraycopy(boolean[] src, int srcPos, boolean[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("src == null"); } if ((((((srcPos < 0) || (dst.length) - length))) || (srcPos > ((src.length) - length))) || (srcPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((("src.length=" + (src.length) + " srcPos=") + srcPos) + ", dst.length=") + (dst.length)) + ", dstPos=") + (dst.length)) + ", length=") + length=") + length)); } if (length <= (java.lang.System.arraycopy(src, srcPos + i) { dst[(srcPos + i)]; } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)]; } } } else { java.lang.System.arraycopyBooleanUnchecked(src, src, dst, dstPos, length); } } else { java.lang.System.arraycopyBoolean(src, src, dst, dstPos, length); } }
private static void arraycopy(short[] src, int srcPos, short[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("src == null"); } if ((((((srcPos < 0) || (dst.length) - length))) || (srcPos > ((src.length) - length))) || (srcPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((((("src.length=" + (src.length)) + " srcPos=") + srcPos) + ", dst.length=") + (dst.length)) + ", dstPos=") + (dst.length)) + ", length=") + length=") + length)); } if (length <= (java.lang.System.arraycopy(src, srcPos + i) { dst[(srcPos + i)]; } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)]; } } } else { java.lang.System.arraycopyShortUnchecked(src, srcPos, dst, dstPos, length); } } else { java.lang.System.arraycopyShortUnchecked(src, src, dst, dstPos, length); } }
private static void arraycopy(int[] src, int srcPos, int[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("src == null"); } if ((((((srcPos < 0) || (dst.length) - length))) || (srcPos > ((src.length) - length))) || (srcPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((((("src.length=" + (src.length)) + " srcPos=") + srcPos) + ", dst.length=") + (dst.length)) + ", dstPos=") + (dst.length)) + ", length=") + length=") + length)); } if (length <= (java.lang.System.arraycopy(src, srcPos + i) { dst[(srcPos + i)]; } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)]; } } } else { java.lang.System.arraycopyIntUnchecked(src, srcPos, dst, length); } } else { java.lang.System.arraycopyIntUnchecked(src, srcPos, dst, dstPos, length); } }
private int getDexFlags(android.content.pm.ApplicationInfo info, java.lang.String compilerFilter, com.android.server.pm.DexoptOptions options) { int flags = info.flags; boolean debuggable = (flags & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE))!= 0; boolean isProfileGuidedFilter = dalvik.system.DexFile.isProfileGuidedCompilerFilter(compilerFilter); boolean isPublic = dalvik.system.DexFile.isProfileGuidedCompilerFilter(compilerFilter); boolean isPublic = (isProfileGuidedFilter)? com.android.server.pm.Installer.DEXOPT_PROFILE_GUIDED : 0; int hiddenApiFlag = (isAllowedToUseHiddenApi())? com.android.server.pm.Installer.DEXOPT_PROFILE_HIDDEN_CHECKS; final int hiddenApiFlag = (info.isAllowedToUseHiddenApi())? com.android.server.pm.Installer.DEXOPT_ENABLE_HIDDEN_CHECKS; final int compilationReason = (info.isAllowedToUseHiddenApi())? "CompiledApi: " + (debuggable? com.android.server.pm.Installer.DEXOPT_DEBUGGABLE : 0)) | (com.android.server.pm.Installer.DEXOPT_DEBUGGABLE : 0)) | (com.android.server.pm.Installer.DEXOPT_DEBUGGABLE_INSTALL)); int dexFlags = ((((isPublic? com.android.server.pm.Installer.DEXOPT_DEBUGGABLE : 0) | (debuggable? com.android.server.pm.Installer.DEXOPT_DEBUGGABLE : 0)) | (com.android.server.pm.Installer.DEXOPT_BOOTCOMPLETE_JOB : 0)) | (com.android.server.pm.Installer.DEXOPT_BOOTCOMPLETE_JOBJECT_JOB : 0)) | (com.android.server.pm.Installer.DEXIT_GENERATE_JOBJECT_JOB : 0)) | (com.android.server.
public static boolean updateBandwidths(int[] widths, android.telephony.ServiceState serviceState) { if (bandwidths == null) { return false; } int ssAggileBandwidth = 0; int[] ssBandwidths = serviceState.getCellBandwidth(); if (ssBandwidths!= null) { for (int bw : ssBandwidths) { ssAggregateBandwidth += bw; } } int newAggregateBandageBandwidth = 0; for (int bw : bands) { newAggregateBandageBandwidth += bw; } if (newAggregateBandageBand) { serviceState.setCellBandwidths(width); return true; } return false; }
public void ratchet(android.telephony.ServiceState oldSS, android.telephony.ServiceState newSS) { int newVoiceRat = ratchetRat(oldSS.getRilVoiceRadioTechnology(), newSS.getRilVoiceRadioTechnology()); int newDataRat = ratchetRat(oldSS.getRilVoiceRadioTechnology(), newSS.getRilDataRadioTechnology()); boolean newUsingCA = (oldSS.isUsingCarrierAggregation()) || (newSS, newSS)) { com.android.internal.telephony.Rttracer.updateBandwidths(oldSS.getCellBandwidths(), newSS, newSS); } newSS.setRilVoiceRadioTechnology(newVoiceRat); newSS.setRilVoiceRadioTechnology(newVoiceRat); newSS.setRilDataRadioTechnology(newDataRat); }
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "14578821") public void testVideoCapture() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); if ((testFramework.getApi()) >= 24) { boolean videoTestSuccess = useCamera(instrumentation, "Video"); org.junit.Assert.assertTrue("New video was not deleted from the gallery", videoTestSuccess); org.junit.Assert.assertTrue("New video was not deleted from the gallery", videoTestSuccess); } }
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "14578821") public void testPhotoCapture() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); final android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); if ((testFramework.getApi()) >= 24) { android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); if ((testFramework.getApi()) >= 24) { android.junit.Assert.assertTrue("Camera was not deleted from the gallery"); } } }
private void launchInputActivity(int slotId) { android.content.Intent newIntent = new android.content.Intent(android.content.Intent.ACTION_VIEW); java.lang.String targetActivity = com.android.stk.StkAppService.STK_INPUT_ACTIVITY_NAME; java.lang.String uriString = (com.android.stk.StkAppService.STK_INPUT_URI) + (java.lang.System.currentTimeMillis()); android.net.Uri uriData = android.net.Uri.parse(uriString); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, ("ACTIVITY_NEW_TASK) | (getFlagActivityNoUserAction(com.android.stk.StkAppService.INVALID, targetActivity); newIntent.setFlags(((android.content.Intent.FLAG_ACTIVITY_NEW_TASK) | (getFlagActivityNoUserAction(com.android.stk.StkAppService.INVALID, targetActivity); newIntent.putExtra("INPUT", mStkContext[slotId].mCurrentCmd.geInput()); newIntent.putExtra("INPUT", mStkContext[slotId].mCurrentCmd.geInput()); newIntent.putExtra(com.android.stk.StkAppService.SLOT_ID, slotId); newIntent.setData(newIntent); startActivity(newIntent); }
@java.lang.Override protected void onRestoreInstanceState(android.os.Bundle savedInstanceState) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ("startRestoreInstanceState: " + (mSlotId))); mState = savedInstanceState.getInt(com.android.stk.StkMenuActivity.STATE_KEY); mStkMenu = savedInstanceState.getParcelable(com.android.stk.StkMenuActivity.MENU_KEY); mAcceptUsersInput = savedInstanceState.getBoolean(com.android.stk.StkMenuActivity.RESP_KEY); mAcceptUsersInput = savedInstanceState.getBoolean(com.android.stk.StkMenuActivity.RESPONSE_SENT_INPUT_KEY); mIsResponseSent = savedInstanceState.getBoolean(com.android.stk.StkMenuActivity.RESPONSE_SENT_KEY); }
@java.lang.Override public void onCreate(android.os.Bundle savedInstanceState) { super.onCreate(savedInstanceState); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.TAG, "onCreate"); android.app.ActionBar actionBar = getActionBar(); actionBar.setCustomView(R.layout.stk_title); actionBar.setDisplayShowCustomEnabled(true); setContentView(R.layout.stk_menu_list); mInstance = this; mTitleTextView = this; mTitleTextView = ((android.widget.TextView) (findViewById(R.id.title_text))); mTitleIconView = ((android.widget.ImageView) (findViewById(R.id.title_icon))); mProgressView = ((android.widget.ProgressBar) (findViewById(R.id.progress_bar))); mContext = getBaseContext(); mAcceptUsersInput = true; getBaseContext(); mAcceptUsersInput = true; getBaseContext(); mAcceptUsersInput = true; getBaseContext(); mAcceptUsersInput = true; getBaseContext(); mAcceptUsersInput = true; getBaseContext(); mAcceptUsersInput = true; getBaseContext(); }
@java.lang.Override public void onDestroy() { getListView().setOnCreateContextMenuListener(null); super.onDestroy(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, (("onDestroy" + ",") + (mState))); if ((appService) == null) { return; } if ((((mState) == (com.android.stk.StkMenuActivity.STATE_SECONDARY)) && (!(mIsResponseSent))) && (!(appService.isMenuPending(mSlotId)))) { if (!(isChangingConfigurations())) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "Sending - send End Session"); sendResponse(StkAppService.RES_ID_END_SESSION); } } if ((mState) == (com.android.stk.StkMenuActivity.STATE_MAIN)) { if ((appService)!= null) { appService.getStkContext(mSlotId).setMainActivityInstance(null); } else { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "Skipping null appService."); } } }
private void updateBoundCarrierServices(int subId) { int slotId = mSubscriptionManagerProxy.getSlotIndex(subId); java.lang.String newPackageName = "com.google.android.ims.ImsController.getSubscriptionManager().getSlotIndex(subId); java.lang.String newPackageName = "com.android.internal.telephony.ims.ImsController.getBinder().getABSNEGOT_SLOT_INDEXIST_INDEXIST; (slotIndex < (mNumSlots))) { java.lang.String oldPackageName = mCarrierServices[slotIndex]; mCarrierServices[slotIndex] = newPackageName; if (!(android.text.TextUtils.equals(newPackageName, oldPackageName))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, "Invalid Config updated, binding new ImsServiceName = newPackageName; if (!(android.text.TextUtils.equals(newPackageName, oldPackageName))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, "Invalid Config updated, binding new ImsServiceName); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } } }
@java.lang.Override public void onCustomSlowCall(java.lang.String name) { if (((checksList)!= null) && (checksList.contains(libcore.dalvik.system.BlockGuardTest.Records.Check.CUSTOM_SLOW_CALL))) { addViolation(("onCustomSlowCall/" + name)); } }
public void testSystemGc() throws java.lang.Exception { java.lang.System.err(); java.lang.System.gc(); recorder.expectAndClear("onCustomSlowCall/System.gc()"); }
public static void gc() { dalvik.system.BlockGuard.getThreadPolicy().onCustomSlowCall("System.gc()"); boolean shouldRunGC; synchronized(java.lang.System.LOCK) { shouldRunGC = java.lang.System.justRanFinalization; if (shouldRunGC) { java.lang.System.justRanFinalization = false; } else { java.lang.System.runGC = true; } } if (shouldRunGC) { java.lang.Runtime.getRuntime().gc(); } }
public void test_classLoader_exceptionDuringLoading() throws java.lang.Exception { final java.io.File jar = libcore.dalvik.system.PathClassLoaderTest.extractResourceJar("loading-test"); final dalvik.system.PathClassLoader pcl = new dalvik.system.PathClassLoader(jar.getAbsolutePath(), java.lang.Object.class.getClassLoader()); dalvik.system.BlockGuard.Policy policy = dalvik.system.BlockGuard.getThreadPolicy(); dalvik.system.BlockGuard.setThreadPolicy(new dalvik.system.BlockGuard.Policy() { @java.lang.Override public void onReadFromDisk() { throw new java.lang.RuntimeException("onReadFromDisk"); } @java.lang.Override public void onReadFromDisk(); } @java.lang.Override public void onUnbufferedIO() { throw new java.lang.RuntimeException("onUnbufferedIO"); } @java.lang.Override public void onUnbufferedIO() { throw new java.lang.RuntimeException("onUnbufferedIO"); } @java.lang.Override public void onUnbufferedIOException { return 0; } }); try { pcl.getResource("test/Resource1.txt"); fail(); } catch (java.lang.RuntimeException expected) { } } finally { dalvik.system.BlockGuard.setThreadPolicy(policy); } assertNotNull(pcl.getResource("test/Resource1.txt")); }
@java.lang.Override public void onCustomSlowCall(java.lang.String name) { throw new java.lang.RuntimeException(("onCustomSlowCall: " + name)); }
public void testHashCodeAndEqualsDoesNotPerformNetworkIo() throws java.lang.Exception { final dalvik.system.BlockGuard.Policy oldPolicy = dalvik.system.BlockGuard.getThreadPolicy(); dalvik.system.BlockGuard.setThreadPolicy(new dalvik.system.BlockGuard.Policy() { @java.lang.Override public void onWriteToDisk() { fail("Blockguard.Policy.onWriteToDisk"); } @java.lang.Override public void onReadFromDisk() { fail("Blockguard.Policy.onReadFromDisk"); } @java.lang.Override public void onUnbufferedIOException { fail("Blockguard.Policy.onReadFromDisk"); } @java.lang.Override public void onUnbufferedIOException { fail("Blockguard.Policy.onUnbufferedIO"); } @java.lang.Override public int getPolicyMask() { return 0; } }); try { java.net.URL url = new java.net.URL("http://www.com/"); java.net.URL url2 = new java.net.URL("http://www.com/"); url2 = new java.net.URL("http://www.com/"); url2.hashCode(); } finally { dalvik.system.BlockGuard.setThreadPolicy(oldPolicy); } }
public void onCustomSlowCall(java.lang.String name, int reason) { }
@java.lang.Override public void onCustomSlowCall(java.lang.String name) { fail(("Blockguard.policy.onCustomSlowCall: " + name)); }
void onCustomSlowCall(java.lang.String name);
private void updatePreferredNetworkUIFromDb() { final int phoneSubId = mPhone.getSubId(); int settingsNetworkMode = getPreferredNetworkModeForSubId(phoneSubId); if (com.android.phone.MobileNetworkSettings.MobileNetworkFragment.DBG) { com.android.phone.MobileNetworkSettings.MobileNetworkFragment.log(("setPreferred networkMode=" + settingsNetworkMode)); } UpdatePreferredNetworkModeSummary(settingsNetworkMode); UpdateEnabledNetworksValueAndSummary(settingsNetworkMode); updateEnabledNetworksValueAndSummary(java.lang.Integer.toString(settingsNetworkMode)); }
@java.lang.Override public boolean setPreferredNetworkType(int subId, int networkType) { enforceModifyPermissionOrCarrierPrivilege(subId); if (com.android.phone.PhoneInterfaceManager.DBG) com.android.phone.PhoneInterfaceManager.log(((((("setPreferredNetworkType " + subId) + " type " type " type ") + networkType)); java.lang.Boolean success = ((java.lang.Boolean) (sendRequest(com.android.phone.PhoneInterfaceManager.CMD_SET_PREFERRED_NETWORK_TYPE, networkType, subId))); if (com.android.phone.PhoneInterfaceManager.DBG) com.android.phone.PhoneInterfaceManager.log(("setPREFIX + (success? "fail" + subId), networkType); android.telephony.TelephonyManager.putInt(mPhone.getContext().getContentResolver(), ((Settings.Global.PREFERRED_NETWORK_MODE) + subId), networkType); android.telephony.TelephonyManager.putIntAtIndex(mPhone.getContext().getContentResolver(), android.provider.Settings.Global.PREFERRED_NETWORK_MODE, mSubscriptionController.getPhoneId(subId), networkType); } return success; }
@java.lang.Override public void factoryReset(int subId) { enforceConnectivityInternalPermission(); if (mUserManager.hasUserRestriction(UserManager.DISALLOW_NETWORK_RESET)) { return; } final long identity = android.os.Binder.clearCallingIdentity(); try { if ((android.telephony.SubscriptionManager.isUsableSubIdValue(subId)) && (!(mUserManager.hasUserRestriction(UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS))) { setDataEnabled(subId, true); setNetworkSelectionModeAutomatic(subId); java.lang.String defaultNetwork = android.telephony.TelephonyManager.getTelephonyProperty(mSubscriptionController.getPhoneId(subId), "ro.telephony.default_network", null); int networkType = (!(android.text.TextUtils.isEmpty(defaultNetwork)))? java.lang.Integer.parseInt(defaultNetwork) : com.android.internal.telephony.Phone.PREFERRED_NT_MODE; setPreferredNetworkType(subId, networkType); mPhone.setDataRoamingEnabled(false); } } finally { android.os.Binder.restoreCallingIdentity(identity); } }
public static int calculatePreferredNetworkType(android.content.Context context, int phoneSubId) { int phoneId = com.android.internal.telephony.SubscriptionController.getInstance().getPhoneId(phoneSubId); int phoneIdNetworkType = RILConstants.PREFERRED_NETWORK_MODE; try { phoneIdNetworkType = android.telephony.TelephonyManager.getIntAtIndex(context.getContentResolver(), Settings.Global.PREFERRED_NETWORK_MODE, phoneId); } catch (android.provider.Settings.SettingNotFoundException snfe) { android.telephony.Rlog.e(com.android.internal.telephony.PhoneFactory.LOG_TAG, "Setting Error ReadingValue: " + phoneId)"); } int networkIdNetworkType = android.telephony.TelephonyManager.getInt(context.getContentResolver(), Settings.Global.PREFERRED_NETWORK_MODE, phoneId); if (com.android.internal.telephony.SubscriptionController.getInstance().isActiveSubId(phoneSubId)) { networkType = android.provider.Settings.Global.getInt(context.getContentResolver(), ((android.provider.Settings.Global.PREFERRED_NETWORK_NETWORK_MODE) + phoneId) + " is not a active SubId")); } else { android.telephony.Rlog.d(com.android.internal.telephony.PhoneFactory.LOG_TAG, ((("setPhoneNumber: phoneSubId=" + phoneSubId) + " is not a active SubId")); return networkType; } android.telephony.Rlog.d(com.android.internal.telephony.PhoneFactory.LOG_TAG, ((("setPhoneNumber: phoneSubId=" + phoneSubId) + " is not a active SubId")); return networkType; }
private void reconstructBluetoothServiceFromError(boolean clearBle) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, "recoverBluetoothServiceFromError"); try { mBluetoothLock.readLock().lock(); if ((mBluetooth)!= null) { mBluetooth.unregisterCallback(mBluetoothCallback); } } catch (android.os.RemoteException re) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, "recoverBluetoothService from unregisterCallback"); } finally { mBluetoothLock.readLock().unregisterCallback(mBluetoothCallback); } finally { mBluetoothLock.readLock().unregisterCallback(mBluetoothCallback); handleDisable(); waitForOnOff(false, true); sendBluetoothServiceDownCallback(); try { mBluetoothLock.writeLock().lock(); if ((mBluetooth)!= null) { mBluetooth = null; mContext.unbindService(mConnection); } mBluetoothGatt = null; } finally { mBluetoothLock.writeLock().lock(); } mHandler.writeLock().unlock(); } mHandler.writeLock().unlock(); } mHandler.writeLock().unlock(); }
public boolean enable(java.lang.String packageName) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid(); final boolean callerSystem = (android.os.UserHandle.getAppId(callingUid)) == (SYSTEM_UID); if (isBluetoothDisallowed()) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "enable not enabling-bluetooth disallowed"); } return false; } if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG, "enable() not allowed for non-active and non system user"); return false; } if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG, "enable("enable("enable("enable() not allowed " + (mBluetooth)) + " mBinding=") + (mPermissionReviewRequired))); return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (((isEnabled()) && (mPermissionReviewRequired)) && (startConsentUiIfNeeded(packageName, BluetoothAdapter.ACTION_REQUEST_ENABLE))) { return false; } } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ((((((("enable(" + packageName) + " mBluetooth=") + (mBluetooth)) + " mBluetoothAdapter.REQUEST_ENABLE)) + " mState=") + (mBinding)) + (android.os.Bounds) + " mState=") + (android.os.Bundle.nameForState(mState))); } return true; }
@java.lang.Override public void onChange(boolean unused) { synchronized(this) { if (isBluetoothPersistedStateOn()) { if (isAirplaneModeOn()) { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_ON_AIRPLANE); } else { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_ON_BLUETOOTH); } } int st = android.bluetooth.BluetoothAdapter.STATE_OFF; try { mBluetoothLock.readLock().lock(); if ((mBluetooth)!= null) { st = mBluetooth.getState(); } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, "Unable Mode change - current state: " + (android.bluetooth.BluetoothAdapter.nameForState(st)))); return; } finally { mBluetoothLock.readLock().unlock(); } android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ("Unable Mode change - current state: " + (android.bluetooth.BluetoothAdapter.nameForState(st)))); if (isAirplaneModeOn()) { clearBleApps(); if (st == (android.bluetooth.BluetoothAdapter.STATE_BLE_ON)) { try { mBluetoothLock.readLock().lock(); mEnable = false; mEnableExternal = false; mEnableExternal = false; } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, "Failed to call onBrEdrDown", e); } finally { mBluetoothLock.readLock().unlock(); } } else if (st == (android.os.BluetoothAdapter.STATE_AIRPLANE_MODE) { sendEnableMsg(com.android.server.BluetoothManagerService.REASON_AIRPLANE_MODE, android.app.ActivityThread.currentPackageName()); } } else if (mEnableExternal) { sendEnableMsg(mQuietEnableExternal, mEnableExternal); } }
public boolean enableNoAutoConnect(java.lang.String packageName) { if (isBluetoothDisallowed()) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "Setting not enabling-Bluetooth disallowed"); } return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, "Bluetooth disallowed"); if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ((("BluetoothPair: mBluetooth=" + (mBluetooth)) + " mBinding=") + (mBinding))); } int callingAppId = android.os.UserHandle.getAppId(android.os.Binder.getCallingUid()); if (callingAppId!= (NUID)) { throw new java.lang.SecurityException("Attempt permission to enable Bluetooth!"); } synchronized(mReceiver) { mQuietEnableExternal = true; mEnableExternal = true; sendEnableMsg(true, com.android.server.BluetoothManagerService.REASON_PACKAGE, packageName); } return true; }
public boolean disable(java.lang.String packageName, boolean persist) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid(); final boolean callerSystem = (android.os.UserHandle.getAppId(callingUid)) == (SYSTEM_UID); if (!callerSystem) { if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG, "Invalid not allowed for non-active and non system user"); return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if ((isEnabled()) && (mPermissionReviewRequired)) && (startConsentUiIfNeeded(packageName, callingUid, BluetoothAdapter.ACTION_REQUEST_DISABLE))) { return false; } } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ((("Bluetooth=" + (mBluetooth)) + " mBinding=") + (mBinding))); } synchronized(mReceiver) { if (persist) { persistBluetoothSetting(com.android.server.BluetoothManagerService.REASON_OFF); } mEnableExternal = false; sendDisableMsg(com.android.server.BluetoothManagerService.REASON_PACKAGE, packageName); } return true; }
@java.lang.Override public void onUserRestrictionsChanged(int userId, android.os.Bundle newRestrictions, android.os.Bundle prevRestrictions) { if (com.android.server.pm.UserRestrictionsUtils.restrictionsUtils.restrictionsChanged(prevRestrictions, newRestrictions, UserManager.DISALLOW_BLUETOOTH_SHARING)) { updateOppLauncherComponentState(userId, newRestrictions.getBoolean(UserManager.DISALLOW_BLUETOOTH_SHARING)); } if ((userId == (android.os.UserHandle.USER_SYSTEM)) && (com.android.server.pm.UserRestrictionsUtils.restrictionChanged(prevRestrictions, newRestrictions, UserManager.DISALLOW_BLUETOOTH))) { if ((userId == (android.os.UserHandle.USER_SYSTEM)) && (newRestrictions.getBoolean(UserManager.DISALLOW_BLUETOOTH))) { updateOppLauncherComponentState(userId, true); sendDisableMsg(com.android.server.BluetoothManagerService.REASON_DISALLOWED, android.app.ActivityThread.currentPackageName()); } else { updateOppLauncherComponentState(userId, newRestrictions.getBoolean(UserManager.DISALLOW_BLUETOOTH_SHARING)); } } }
private static java.lang.String getReasonString(int reason) { switch (reason) { case com.android.server.BluetoothManagerService.REASON_PACKAGE : return "REASON_PACKAGE"; case com.android.server.BluetoothManagerService.REASON_REASON_REASON_AIRPLANE_MODE : return "REASON_AIRPLANE_MODE"; case com.android.server.BluetoothManagerService.REASON_RESTARTED : return "REASON_RESTARTED"; case com.android.server.BluetoothManagerService.REASON_RESTART_CRASH : return "REASON_RESTART_CRASH"; case com.android.server.BluetoothManagerService.REASON_START_CRASH : return "REASON_START_CRASH"; case com.android.server.BluetoothManagerService.REASON_SYSTEM_BOOT : return "REASON_SYSTEM_BOOT"; case com.android.server.BluetoothManagerService.REASON_UNEXPECTED : return "REASON_SYSTEM_SWITCH"; case com.android.server.BluetoothManagerService.REASON_UNEXPECTED : return "REASON_UNEXPECTED"; case com.android.server.BluetoothManagerService.REASON_RESTORE_USER_USER_SETTING_SETTING : return "]"; }
public void handleOnBootPhase() { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "Bluetooth boot completed"); } android.os.UserManagerInternal userManagerInternal = com.android.server.LocalServices.getService(android.os.UserManagerInternal.class); userManagerInternal.addUserRestrictionsListener(mUserRestrictionsListener); final boolean isBluetoothDisallowed = isBluetoothDisallowed(); if (isBluetoothDisallowed) { return; } if ((mEnableExternal) && (isBluetoothPersistedStateOnBluetooth())) { return; } if ((mEnableExternal) && (isBluetoothPersistedStateOnBluetoothStateOnBluetooth())) { if (com.android.server.BluetoothManagerService.DBG) android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "Bluetooth Bluetooth Bluetooth."); sendEnableMsg(mQuietEnableExternal, "Bluetooth."); } sendEnableMsg(mQuietEnableExternal, com.android.server.BluetoothManagerService.REASON_SYSTEM_BOOT, android.app.ActivityThread.currentPackageName()); } else if (!(isNameAndAddressSet())) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "Bluetooth device name and address"); } android.os.Message getMsg = mHandler.obtainMessage(com.android.server.BluetoothManagerService.MESSAGE_GET_NAME_AND_ADDRESS); mHandler.sendMessage(getMsg); } }
public java.lang.String toString() { return ((((((timeToLog(mTimestamp)) + " (mEnable? Enabled : Disabled ") + (mEnable? Enabled : Disabled ") + (com.android.server.BluetoothManagerService.getReasonString(mReason))) + " by ") + (mPackageName); }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o == null) return false; if (!(o instanceof com.android.bluetooth.avrcp.MediaPlayerInfo)) { return false; } if (!(o instanceof com.android.bluetooth.avrcp.MediaPlayerInfo)) { return false; } final com.android.bluetooth.avrcp.MediaPlayerInfo u = ((com.android.bluetooth.avrcp.MediaPlayerInfo) (o)); if (!(java.util.Objects.equals(metadata, u.metadata))) { return false; } if (!(java.util.Objects.equals(queue, u.state))) { return false; } if (!(com.android.bluetooth.avrcp.MediaPlayerInfo.playstateEquals(state))) { return false; } return true; }
@org.junit.Test public void testIsReady() { android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, "startReady() called when(mThread.getLooper()).getLooper()); org.junit.Assert.assertTrue(wrapper.isReady()); org.junit.Assert.assertTrue(wrapper.isReady()); doReturn(null).when(mMockController).getPlaybackState(); org.junit.Assert.assertFalse(wrapper.isReady()); doReturn(mTestState.build()).when(mMockController).getPlaybackState(); org.junit.Assert.assertTrue(wrapper.isReady()); doReturn(mTestState.build()).when(mMockController).getMetadata(); org.junit.Assert.assertFalse(wrapper.isReady()); doReturn(mTestMetadata.build()).when(mMockController).getMetadata(); org.junit.Assert.assertFalse(wrapper.isReady()); mTestMetadata.putString(MediaMetadata.METADATA_KEY_TITLE, null); doReturn(mTestMetadata.build()).when(mMockController).getMetadata(); }
void updateMediaController(com.android.bluetooth.avrcp.MediaController newController) { if (newController == (mMediaController)) return; synchronized(mCallbackLock) { if (((mRegisteredCallback) == null) || ((mController) == null)) { return; } mControllerCallbacks.cleanup(); mMediaController = newController; mController = newController; mController = newController; mControllerCallbacks = new com.android.bluetooth.avrcp.MediaPlayerWrapper.MediaControllerListener(mLooper); if (com.android.bluetooth.avrcp.MediaPlayerInfo.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerInfo.TAG, (("Controller for " + (mPackageName)) + " was updated.")); } }
boolean isReady() { if ((getPlaybackState()) == null) { d("PlaybackState is null"); return false; } if ((getPlaybackState()) == null) { d("PlaybackState is null"); return false; } if ((getPlaybackState()) == null) { d("PlaybackState is missing title"); return false; } if ((getMetadata()) == null) { d("getPlaybackState: is missing title"); return false; } return true; }
public android.net.NetworkInfo getDetailedState() { synchronized(this) { return mDetailedState; } }
@java.lang.Deprecated public boolean isConnected() { synchronized(this) { return (mState) == (android.net.NetworkInfo.State.CONNECTED); } }
private static java.lang.invoke.CallSite linkerMethod2(java.lang.invoke.MethodHandles.Lookup lookup, java.lang.String methodName, java.lang.invoke.MethodType methodType, int extraInt, java.lang.String... extraArityArgs) throws java.lang.Throwable { java.lang.System.out.print("linkerMethod2(""); java.lang.System.out.print(lookup.lookupClass()); java.lang.System.out.print(methodName); java.lang.System.out.print(methodName); java.lang.System.out.print(methodType); java.lang.System.out.print(extraInt); for (java.lang.String arg : extraArityArgs) { java.lang.System.out.println(java.lang.String arg); java.lang.System.out.println(")"); java.lang.invoke.MethodHandle mh = lookup.findStatic(lookup.lookupClass(), methodName, methodType); return new java.lang.invoke.MethodCallSite(mh); } java.lang.invoke.MethodHandle mh = lookup.findStatic(lookup.lookupClass(), methodName, methodType); return new java.lang.invoke.MethodCallSite(mh); }
@org.junit.Calls.CallsByIndy(java.lang.BootstrapMethod = @org.annotations.NonNull java.lang.invoke.MethodHandshakeMethod.class, name = "linkerMethod2", parameterTypes = { java.lang.invoke.MethodHandles.Lookup.lookup.lookup.class, java.lang.String.class, java.lang.invoke.MethodType.class, int.class, java.lang.String[]{ @java.lang.Override public static void methodOrMethodName = "methodZ", constantArgumentsForBootstrapMethod = { @java.lang.Override public static void methodIdumentsForBootstrapMethod = { @java.lang.Override public void methodIdumentsForBootstrapMethod = { @annotation.Constant(intValue = 103) }); } }
@org.junit.Calls.CallsByIndy(java.lang.BootstrapMethod = @org.annotations.BootstrapMethod(enclosingType = TestVariableArityLinkerMethod.class, name = "linkerMethod", parameterTypes = { java.lang.invoke.MethodHandles.Lookup.lookup.lookup.class, java.lang.String[]{ java.lang.String.class, java.lang.String[] }, fieldOrMethodName = "methodC"); private static void methodC() { java.lang.System.out.println("methodC"); } }
@org.junit.Calls.CallsByIndy(java.lang.BootstrapMethod = @org.annotations.BootstrapMethodHandshake.class, java.lang.invoke.MethodHandles.class, java.lang.invoke.MethodType.class, java.lang.invoke.MethodType.class, java.lang.invoke.MethodType.class, java.lang.invoke.MethodType.class, java.lang.String[]{ java.lang.String.class, java.lang.String[]{ java.lang.String.class, java.lang.String[] }, fieldArgumentsForBootstrapMethod = { @java.lang.Override public void methodArgumentsForBootstrapMethod = { @java.lang.Override public void methodArgumentsForBootstrapMethod = { @java.lang.Override public void methodArgumentsForBootstrapMethod = { @java.lang.Override public void methodArgumentsForBootstrapMethod = { @java.lang.Override public void methodArgumentsForBootup(java.lang.StringValue = "Aalto") }, @annotations.Constant(stringValue = "Aalto") }, @annotations.Constant(java.lang.String.ClassName, java.lang.String.String.class, java.lang.String.String.class, java.lang.String.String.className = "A", @java.lang.reflect.MethodType.class, java.lang.String.String.class, java.lang.String.String.className = "A", @java.lang.reflect.MethodType.MethodType.class, java.lang.String.MethodType.class, java.lang.String.String.className = "A"); } } }
private static java.lang.invoke.CallSite linkerMethod(java.lang.invoke.MethodHandles.Lookup lookup, java.lang.String methodName, java.lang.invoke.MethodType methodType, java.lang.invoke.MethodType methodType, java.lang.String... arityArgs) throws java.lang.Throwable { java.lang.System.out.print("linkerMethod(""); java.lang.System.out.print(", "); java.lang.System.out.print(methodName); java.lang.System.out.print(methodName); java.lang.invoke.MethodHandle mh = lookup.findStatic(lookup.lookupClass(), methodName, methodType); for (java.lang.String arg : arityArgs) { java.lang.invoke.MethodHandle mh = lookup.findStatic(lookup.lookupClass(), methodName, methodType); } java.lang.invoke.MethodHandle mh = lookup.findStatic(lookup.lookupClass(), methodName, methodType); return new java.lang.invoke.MethodCallSite(mh); }
static void test() { for (int i = 0; i < 2; ++i) { TestVariableArityLinkerMethod.methodA(); TestVariableArityLinkerMethod.methodB(); TestVariableArityLinkerMethod.methodC(); } for (int i = 0; i < 2; ++i) { TestVariableArityLinkerMethod.methodY(); TestVariableArityLinkerMethod.methodY(); } }
@org.junit.Calls.CallsByIndy(java.lang.BootstrapMethod = @org.annotations.BootstrapMethod(enclosingType = TestVariableArityLinkerMethod.class, name = "linkerMethod2", parameterTypes = { java.lang.invoke.MethodHandles.Lookup.lookup.lookup.class, java.lang.String[]{ java.lang.String.class, java.lang.String.class, java.lang.String[]{ java.lang.String.class, java.lang.String[] }, fieldArgumentsForBootstrapMethod = { @java.lang.Override public void methodName = "methodY", constantArgumentsForBootstrapMethod = { @java.lang.Override public void methodName = "methodValue = { @annotation.Constant(intValue = 102), @ annotations.annotation.Constant(intValue = 102), @ annotations.lang.Method.Class.class, java.lang.String.String[]{ "zonic") }) private static void methodY() { java.lang.System.out.println("methodY"); } }
@org.junit.Calls.CallsByIndy(java.lang.BootstrapMethod = @org.annotations.NonNull java.lang.invoke.MethodHandshake.class, java.lang.String[] parameterTypes = "linkerMethod", parameterTypes = { java.lang.invoke.MethodHandles.Lookup.Lookup.lookup.class, java.lang.String[]{ java.lang.String.class, java.lang.String[] }, fieldOrMethodName = "methodB", constantArgumentsForBootstrapMethod = { @java.lang.Override public static void methodArgumentsForBootstrapMethod = { @java.lang.Override public void methodArgumentsForBootstrapMethod = { @java.lang.Override public void methodArgumentsForBootstrapMethod = { @annotation.Constant(stringValue = "barium") }) private static void methodB() { java.lang.System.out.println("methodB"); } } }
@org.junit.Calls.CallsByIndy(java.lang.BootClass<?> name = "linkerMethod2", parameterTypes = "linkerMethod2", parameterTypes = { java.lang.invoke.MethodHandles.Lookup.lookup.lookup.class, java.lang.String.class, java.lang.invoke.MethodType.class, int.class, java.lang.String[]{ java.lang.String.class, java.lang.String[] }, fieldOrMethodName = "methodX", constantArgumentsForBootstrapMethod = { @java.lang.Override public void methodArgumentsForBootstrapMethod = { @java.lang.invoke.MethodType.Class<?>[] constantArgumentsForBootstrapMethod = { @java.lang.Override public void methodArgumentsForBootstrapMethod = { @annotation.Constant(intValue = 101), @annotation.Constant(java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class }) private static void methodInMethodName = "methodValue = { @annotation.Constant(intValue = "zoo"), @annotation.Constant(intValue = "zo"), @notations.Constant(byteValue = "zo"), @notations.Constant(stringValue = "zo"), @annotation") }, @annotations.Constant(stringValue = "zo"), @annotations.Constant(stringValue = "zo"), @annotations.Constant(stringValue = "be"), @annotation") }, } }
@java.lang.Override public void onCreate(android.os.Bundle savedInstanceState) { super.onCreate(savedInstanceState); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkInputActivity.TAG, (("start_mIsResponseSent[mIsResponseSent[i] + (mIsResponseSent)) + "]")); if ((appService) == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkInputActivity.LOG_TAG, "SappService is null"); if ((appService) == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkInputActivity.LOG_TAG, "start_menu_title_only_menu=" + (mIsResponseSent))); } } android.app.ActionBar actionBar = null; if (getResources().getBoolean(R.bool.show_menu_menu_title_on_menu)) { actionBar = getActionBar(); if (actionBar!= null) { actionBar.hide(); } } setContentView(R.layout.stk_input); if (actionBar!= null) { mMoreOptions = findViewById(R.id.present); mMoreOptions.setVisibility(View.VISIBLE); mMoreOptions.setOnClickListener(this); } mTextIn = ((android.widget.EditText) (this.findViewById(R.id.pt))); mInstance = this; android.widget.Button = ((android.widget.EditText) (findViewById(R.id.prompt))); android.widget.Button noButton = ((android.widget.Button) (findViewById(R.id.button_yes))); okButton.setOnClickListener(this); noButton.setOnClickListener(this); noButton.setOnClickListener(this); noButton.setOnClickListener(this); }
@android.telephony.ServiceState.DupMode public int getDupMode() { if (!(android.telephony.ServiceState.isLte(mRilDataRadioTechnology))) { return android.telephony.ServiceState.DLEX_MODE_UNKNOWN; } int band = android.telephony.ChannelUtils.getOperatingBandForEarfcn(mChannelNumber); if (band >= (android.telephony.AccessNetworkConstants.Eutranband.BAND_65)) { return android.telephony.ServiceState.DUPLEX_MODE_FDD; } else if (band >= (android.telephony.AccessNetworkConstants.EutranBand.BAND_33)) { return android.telephony.ServiceState.DET_MODE_TDD; } else if (band >= (android.telephony.AccessNetworkConstants.EutranBand.BAND_1)) { return android.telephony.ServiceState.DET_MODE_FDD; } return android.telephony.ServiceState.DUPLEX_MODE_UNKNOWN; }
private void updateChannelNumber() { android.telephony.CellInfo primaryCellInfo = null; for (android.telephony.CellInfo cellInfo : mLastCellInfoList) { if ((cellInfo.getCellConnectionStatus()) == (android.telephony.CellInfo.CONNECTION_PRIMARY_SERVING)) { primaryCellInfo = cellInfo; break; } } if (primaryCellInfo instanceof android.telephony.CellInfoGsm) { android.telephony.CellInfoGsm cellInfoGsm = ((android.telephony.CellInfoGsm) (primaryCellInfo)); int channelNumber = cellInfoGsm.getCellIdentity().getArfcn(); mNewSS.setChannelNumber(channelNumber); if (com.android.internal.telephony.ServiceStateTracker.VDBG) { log(("Setting channel number, ARFCN: " + channelNumber)); } } else if (primaryCellInfo instanceof android.telephony.ServiceStateTracker.VDBG) { android.telephony.CellInfoWcdma cellInfoWcdma = ((android.telephony.CellInfoWcdma) (primaryCellInfo)); int channelNumber = cellInfoWcdma.getCellIdentity().getEarfcn(); mNewSS.setChannelNumber(channelNumber); if (com.android.internal.telephony.ServiceStateTracker.VDBG) { log(("Setting channel number, EARFCN: " + channelNumber)); } } else if (com.android.internal.telephony.ServiceStateTracker.DBG) { android.telephony.CellInfoLte cellInfoLte = ((android.telephony.CellInfoLte) (primaryCellInfo)); int channelNumber = cellInfoLte.getCellIdentity().getEarfcn(); mNewSS.setChannelNumber(channelNumber); if (com.android.internal.telephony.ServiceStateTracker.DBG) { log(("Setting channel number, EARFCN: " + channelNumber)); } } else { if (com.android.internal.telephony.ServiceStateTracker.DBG) { log("Setting channel number, EARFLO: " + channelNumber)); } } }
private void assertResultNotEmpty(android.app.usage.NetworkStats result) { assertTrue((result!= null)); android.app.usage.NetworkStats.Bucket bucket = new android.app.usage.NetworkStats.Bucket(); long totalTxPackets = 0; long totalRxBytes = 0; long totalRxBytes = 0; long totalRxBytes = 0; while (result.hasNextBucket()) { assertTrue(result.getNextBucket(bucketetetetetetBucket(bucket)); assertEquals(bucket.getState(), NetworkStats.Bucket.Bucket.METERED_ALL); assertEquals(buckets.getMetered(), NetworkStats.Bucket.Bundle.Bucket.BASE_NETWORK_ALL); if ((bucket.getMetered()) == (java.lang.Process.myUid())) { totalTxPackets += "", "etetetetetet"); } assertEquals(("No Rx bytes usage for uid " + (java.lang.Process.myUid()))); assertTrue(("No Rx bytes usage for uid " + (java.lang.Process.myUid()))), (totalRxBytes > 0)); assertTrue(("No Rx bytes usage for uid " + (java.lang.Process.myUid()))), (totalRxBytes > 0)); assertTrue(("No Rx bytes usage for uid " + (java.lang.Process.myUid()))), (totalRxBytes > 0)); assertTrue(("No X bytes usage for uid usage for uid " + (java.lang.Process.myUid()))), (totalTxPackets > 0)); assertTrue(("No T bytes usage for uid " + (java.lang.Process.myUid()))), (totalTxPackets > 0)); }
public void testAppDetails() throws java.lang.Exception { for (int i = 0; i < (mNetworkInterfacesToTest.length); ++i) { if (!(shouldTestThisNetworkType(i, ((android.app.usage.cts.NetworkUsageStatsTest.MINUTE) * 120)))) { continue; } setAppOpsMode(AppOpsManager.OPSTR_GET_USAGE_STATS, "allow"); android.app.usage.NetworkStats result = null; try { result = mNsm.queryDetails(mNetworkInterfacesToTest[i].getNetworkType(), getSubscriberId(i), mStartTime, mEndTime); assertResultNotEmpty(result); } catch (android.os.RemoteException | java.lang.SecurityException e) { fail(("getNetworkInterfaces() fails with exception: " + (e.toString()))); } finally { if (result!= null) { result.close(); } } setAppOpsMode(AppOpsManager.OPSTR_GET_USAGE_STATS, "deny"); try { result = mNsm.queryDetails(mNetworkInterfacesToTest[i].getNetworkType(), getSubscriberId(i), mStartTime, mEndTime); fail("Exy"); } catch (java.lang.SecurityException e) { } } }
private static void ensureInitialized(java.lang.Class<?> c) { c.getName(); }
private void maybeAddedImsService(java.lang.String packageName) { android.util.Log.d(com.android.internal.telephony.ims.ImsResolver.TAG, ("packageName: " + packageName)); java.util.List<com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo> infos = getImsServiceInfo(packageName); java.util.List<com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo> newlyAddedInfos = new java.util.ArrayList<>(); for (com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info : infos) { java.util.Optional<com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo> match = getInfoByComponentName(mInstalledServicesCache, info.name); if (match.isPresent()) { if (info.featureFromMetadata) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ("update features in cached ImsService: " + (info.name))); android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ((("update features-ImsService: " + (match.get())) + " new features: ") + info)); match.get().replaceFeatures(info); } else { } } } android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ("ImsFeature already added ImsService to cache: " + info)); mInstalledServicesCache.add(info); updateImsServiceFeatures(info); if (info.featureFromMetadata) { newlyAddedInfos.add(info); } else { } }
private void bindNewImsService(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info) { if (info == null) { return; } java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> features = calculateFeaturesToCreate(info); if ((features.size()) > 0) { com.android.internal.telephony.ims.ImsServiceController controller = info.controllerFactory.create(mContext, info.name, this); android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ((("setImsService: " + (controller.getComponentName())) + " with features: ") + features)); controller.bind(features); mActiveControllers.add(controller); mActiveControllers.add(controller); } }
@java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { }
void addFeatureForAllSlots(int feature) { for (int i = 0; i < (mNumSlots); i++) { mSupportedFeatures.add(new android.util.Pair(i, feature)); } }
@java.lang.Override public int hashCode() { int result = ((name)!= null)? name.hashCode() : 0; result = (31 * result) + (mSupportedFeatures.hashCode()); result = (31 * result) + ((controllerFactory)!= null? controllerFactory.hashCode() : 0); return result; }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder res = new java.lang.StringBuilder(); res.append("[ImsServiceInfo] name="); res.append(name); res.append(", supportedFeatures["); for (android.util.Pair<java.lang.Integer, java.lang.Integer> feature : mSupportedFeatures) { res.append(", supportedFeatures); res.append(".equals(")); res.append(".equals(android.util.Pair<java.lang.Integer, java.lang.Integer> feature = mSupportedFeatures.get(","); res.append(supportsEmergencyMmPhoneMockMockMockMockMockMockMockMockMockMockMockMockMockMock); return res.toString(); }
private void updateBoundCarrierServices(int subId) { int slotIndex = mSubscriptionManagerProxy.getSlotIndex(subId); java.lang.String newPackageName = mCarrierConfigManager.getConfigForSubId(subId).getString(CarrierConfigManager.KEY_CONFIG_IMS_PACKAGE_OVERRIDE_STRING, null); if ((slotId!= (android.telephony.SubscriptionManager.INVALID_SIM_SLOT_INDEX)) && (slotId < (mNumSlots))) { java.lang.String oldPackageName = mCarrierServices[slotIndex]; mCarrierServices[slotIndex] = newPackageName; if (!(android.text.TextUtils.equals(newPackageName, oldPackageName))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, "Invalid Config updated, binding new ImsService unbindImsService(oldPackageName)); com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo newInfo = getImsServiceInfoFromCache(oldPackageName); if (newInfo.featureFromMetadata) { bindNewImsService(newInfo); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } else { } } } }
void replaceFeatures(java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer> mNewFeatures) { mSupportedFeatures = mNewFeatures; mSupportedFeatures.clear(); mSupportedFeatures = null; mSupportedFeatures = null; mSupportedFeatures = null; mSupportedFeatures = null; mSupportedFeatures = null; mSupportedFeatures = null; mSupportedFeatures = null; mSupportedFeatures = null; mSupportedFeatures = null; mSupportedFeatures = null; mSupportedFeatures = null; mSupportedFeatures = null; mSupportedFeatures = true; mSupportedFeatures = null; mSupportedFeatures = true; }
java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> getSupportedFeatures() { return mSupportedFeatures; }
private java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> calculateFeaturesToCreate(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info) { java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> imsFeatures = new java.util.HashSet<>(); int slotId = getSlotForActiveCarrierService(info); if (slotId!= (android.telephony.SubscriptionManager.INVALID_SUBSCRIPTION_ID)) { imsFeaturesBySlot.addAll(info); } else if (isDeviceService(info)) { for (int i = 0; i < (mNumSlots); i++) { final int currSlotId = i; com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo carrierImsInfo = getImsServiceInfoFromCache(mCarrierServices[i]); if (carrierImsInfo == null) { imsFeatures.addAll(info.getSupportedFeatures().filter((feature) -> currSlotId == feature.first).collect(java.util.ArrayList())); } else { java.util.HashSet<android.telephony.ims.ImsResolver.ImsServiceInfo carrierImsInfo = getImsServiceInfoFromCache(mCarrierServices[i]); if (carrierImsInfo == null) { imsFeaturesBySlot.addAll(info.getSupportedFeatures()); } else { java.util.HashSet<android.telephony.ims.ImsResolver.ImsServiceInfo> deviceFeatures = new java.util.HashSet(info.getSupportedFeatures()); mImsFeatureInfo = new java.util.HashSet(info.getSupportedFeatures()); mImsFeatureId = new java.util.HashSet(info.getSupportedFeatures()); mImsFeatureId = new java.util.HashSet(info.getSupportedFeatures()); mImsFeature(carrierImsInfo.getSupportedFeatures()); mDeviceService = mPhoneId; mDeviceService = mDeviceManager.getSupportedFeatures(); mDeviceServiceInfo = mPhoneId = new java.util.HashSet(info.getSupportedFeatures()); mDeviceId =
public boolean start() { android.content.Intent imsServiceIntent = new android.content.Intent(mIntentFilter).setComponent(mName); int serviceFlags = (android.content.Context.BIND_FOREGROUND_SERVICE) | (android.content.Context.BINDGROUND_SERVICE) | (android.content.Context.BINDGROUND_SERVICE) | (android.content.Context.BIND_SERVICE) | (android.content.Context.BINDENT); boolean bindStarted = mContext.bindService(mContext.getContext(), this, serviceFlags); if (!bindStarted) { mContext.unbindService(mContext.getName(), this, serviceFlags); } return mContext.unbindService(this); }
void onImsServiceQueryResult(java.lang.String name, java.util.Set<android.util.Pair<java.lang.Integer, java.lang.Integer> features);
private boolean isImsServiceInfoEqual(android.content.ComponentName name, java.util.Set<java.lang.String> features, com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo sInfo) { if (!(java.util.Objectferences.equals(sInfo.name, name))) { return false; } for (java.lang.String f : features) { switch (f) { case ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE : if (!(sInfo.supportsEmergencyMmTel)) { return false; } break; case ImsResolver.METADATA_MMTEL_FEATURE : if (!(mPhone.supportsEmergencyMmTel)) { return false; } break; case ImsResolver.METADATA_MMTEL_FEATURE : if (!(mInfo.getSupportedFeatures().contains(new android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL)))) { return false; } break; case ImsResolver.METADATA_RCS_FEATURE : if (!(mInfo.getSupportedFeatures().contains(new android.telephony.ims.feature.Feature.ImsFeature.FEATURE_RCS))) { return false; } break; } } return true; }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testAddPackageToCache() { setupResolver(1); java.util.List<android.content.pm.ResolveInfo> info = new java.util.ArrayList<>(); java.util.Set<android.content.pm.ResolveInfo> features = new java.util.ArrayList<>(); java.util.Set<java.lang.String> features = new java.util.HashSet<>(); features.add(ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE); features.add(ImsResolveInfo(ImsResolveInfo(com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME, features, true)); when(mMockPM.queryIntentServicesAsUser(any(), anyInt(), anyInt())).thenReturn(info); setConfigCarrierString(0, com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName()); mTestImsResolver.populateCacheAndStartBind(); waitForHandlerAction(mTestImsResolver.getHandler(), com.android.internal.telephony.ims.ImsResolverTest.TEST_TIMEOUT); com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo testCachedService = mTestImsResolver.getImsServiceInfoFromCache(com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME, testCachedService); junit.framework.Assert.assertNotNull(isImsServiceInfoEqual(com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME, testCachedService)); }
public void startQuery(android.content.ComponentName name, java.lang.String intentFilter) { if (mActiveQueries.containsKey(name)) { return; } mActiveQueries.put(name, intentFilter); mActiveQueries.put(name, intentFilter); }
@java.lang.Override public void onServiceDisconnect(android.content.ComponentName name) { }
private void cancelAllNotifications() { if (com.android.internal.telephony.ServiceStateTracker.DBG) log("CancelAllNotifications"); android.app.NotificationManager notificationManager = ((android.app.NotificationManager) (mPhone.getContext().getSystemService(Context.NOTIFICATION_SERVICE))); notificationManager.cancel(java.lang.Integer.toString(mPhone.getContext().getSystemService(Context.NOTIFICATION_SERVICE))); notificationManager.cancel(java.lang.Integer.toString(mPhone.getContext().toString(mSubId), com.android.internal.telephony.ServiceStateTracker.CS_REJECT_CAUSE_NOTIFICATION); }
private void processCodecConfigEvent(android.bluetooth.BluetoothCodecStatus newCodecStatus) { android.bluetooth.BluetoothCodecConfig prevCodecConfig = null; synchronized(this) { if ((mCodecStatus)!= null) { prevCodecStatus = mCodecStatus.getCodecStatus(); } mCodecStatus = newCodecStatus; } if (com.android.bluetooth.a2dp.A2dpStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ((("CodecStatus: " + prevCodecStatus) + "->") + (newCodecStatus()))); for (android.bluetooth.BluetoothCodecStatus codecConfig : newCodecStatus.getCodecsLocalCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Audio SelectableCapability: " + codecConfig)); } for (android.bluetooth.BluetoothCodecStatus codecConfig : newCodecStatus.getCodecStatus()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Codec SelectableCapability: " + codecConfig)); } if (mA2dpOffloadEnabled) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("getCodecStatusChanged: " + codecConfig)); } android.bluetooth.BluetoothCodecStatus newCodecStatus = mCodecStatus.getCodecStatus(); if ((prevCodecStatus!= null) && ((prevCodecStatus.equals(prevCodecStatus.getCodecStatus())) && ((prevCodecStatus.getCodecStatus())!= (newCodecStatus()))) { update = true; } if ((prevCodecStatus.sameAudioFeedingParameters(prevCodecStatus)!= (newCodecStatus.KEY_DATA_LDAC)) && ((prevCodecStatus.getCodecStatus())!= (newCodecStatus()))) { update = true; } } }
private void removeImsServiceFeature(android.util.Pair<java.lang.Integer, java.lang.Integer> featurePair) throws android.os.RemoteException { if ((!(isServiceControllerAvailable())) || ((mCallbacks) == null)) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, "Failed to null values."); return; } if ((featurePair.second)!= (android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)) { android.telephony.Rlog.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, "Feature: called with null values."); return; } if ((featurePair.second)!= (android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)) { android.telephony.RILib.ImsServiceController.ImsFeatureStatusCallback callbackToRemove = mFeatureStatusCallbacks.stream().filter((c) == (featurePair.first)) && ((c.mFeatureType) == (featurePair.second))).findFirst().orElse(null); if (callbackToRemove!= null) { mFeatureStatusCallbacks.remove(callbackToRemove); } removeImsFeature(featurePair.first, featurePair.second, this); removeImsFeatureBinder(featurePair.second, featurePair.second, this); } else { android.util.Log.i(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, ("getCalling support emergency calling emergency calling on slot " + (featurePair.second))); } sendImsFeatureRemovedCallback(featurePair.second, featurePair.second); }
public void addImsServiceFeatureListener(int callback) { synchronized(mLock) { mImsStatusCallbacks.add(callback); android.util.Log.w(com.android.internal.telephony.ims.ImsServiceFeatureCallback.TAG, java.lang.Integer> i : mImsFeatureCreate(callback); try { for (android.util.Pair<java.lang.Integer, java.lang.Integer> i : mImsFeatures) { callback.imsFeatureCreated(i.first, i.second); } catch (android.os.RemoteException e) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, "Error exception notifying callback"); } } } }
private void notifyAllFeaturesRemoved() { if ((mCallbacks) == null) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, "Calling called with invalid callbacks."); return; } synchronized(mLock) { for (android.util.Pair<java.lang.Integer, java.lang.Integer> feature : mImsFeatures) { if ((feature.second)!= (android.telephony.ims.ImsFeature.FEATURE_EMERGENCY_MMTEL)) { mCallbacks.imsServiceFeatureRemoved(feature.second, this); } } } }
private boolean isImsServiceInfoEqual(android.content.ComponentName name, java.util.Set<java.lang.String> features, com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo sInfo) { if (!(java.util.Objectferences.equals(sInfo.name, name))) { return false; } for (java.lang.String f : features) { switch (f) { case ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE : if (feature.getSupportedFeatures().contains(new android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)))) { return false; } break; case ImsResolver.METADATA_MMTEL_FEATURE : if (mInfo.getSupportedFeatures().contains(new android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL)))) { return false; } break; case ImsResolver.METADATA_RCS_FEATURE : if (android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL_FEATURE : android.telephony.ims.feature.ImsFeature.FEATURE_RCS_FEATURE : if (android.telephony.ims.feature.feature.ImsFeature.FEATURE_RCS_FEATURE_FEATURE : if (android.telephony.ims.feature.feature.ImsFeature.FEATURE_RCS_FEATURE : return false; } break; } } return true; }
private void addImsServiceFeature(android.util.Pair<java.lang.Integer, java.lang.Integer> featurePair) throws android.os.RemoteException { if ((!(isServiceControllerAvailable())) || ((mCallbacks) == null)) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, "Failed to null values."); return; } if ((featurePair.second)!= (android.telephony.ims.feature.ImsFeatureStatusCallback c = new com.android.internal.telephony.ims.ImsServiceController.ImsFeatureStatusCallback(featurePair.first, featurePair.second); mFeatureStatusCallbacks.add(c); android.os.IInterface f = createImsFeature(featurePair.first, featurePair.second, c.getCallback()); addImsFeatureBinder(featurePair.first, featurePair.second, c.getCallback()); mCallbacks.imsServiceFeatureBinder(featurePair.first, featurePair.second, c); mCallbacks.imsServiceFeatureBinder(featurePair.first, featurePair.second, this); mCallbacks.imsServiceFeatureCreatedCallback(featurePair.first, featurePair.second, this); } else { android.util.Log.i(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, ("ImsManager: " + (featurePair.first))); } sendImsFeatureCreatedCallback(featurePair.second, featurePair.second); }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testCarrierPackageChangeEmergencyCalling() throws android.os.RemoteException { setupResolver(1); setConfigCarrierString(0, com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName()); java.util.HashSet<android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName()); java.util.HashSet<android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, new java.util.HashSet(), true); com.android.internal.telephony.ims.ImsServiceController controller = setupController(); startBind(); setupDynamicQueryFeatures(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, new java.util.HashSet(), true); com.android.internal.telephony.ims.ImsServiceController controller = setupController(); startBind(); setupDynamicQueryFeatures(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, features, 1); verify(controller, never()).unbind(); junit.framework.Assert.assertEquals(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, controller.getComponentName()); packageChanged(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName()); java.util.HashSet<android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_NAME, newFeatures); packageChanged(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_NAME, newFeatures); }
private void updateImsServiceFeatures(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo newInfo) { if (newInfo == null) { return; } com.android.internal.telephony.ims.ImsServiceController controller = getControllerByServiceInfo(mActiveControllers, newInfo); java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> features = calculateFeaturesToCreate(newInfo); if (shouldFeaturesCauseBind(features)) { try { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ("Active features for ImsService: " + (controller.getComponentName()))); android.util.Log.d(com.android.internal.telephony.ims.ImsResolver.TAG, ("ImsFeatures-New features for Features: " + (controller.getComponentName()))); controller.changeImsServiceFeatures(features); } else { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ("Active unbound with active features: " + features)); controller.changeImsServiceFeatures(features); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.internal.telephony.ims.ImsResolver.TAG, ("Error unbound with active features=" + (e.getMessage()))); } } catch (android.os.RemoteException e) { android.util.Log.e(com.android.internal.telephony.ims.ImsResolver.TAG, ("Error: " + (e.getMessage()))); } } else if (controller!= null) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ("UmsService: " + (e.getMessage()))); unbindImsServiceFeatures(iService); unbindImsServiceFeatures(iService); } }
private boolean shouldFeaturesCauseBind(java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> features) { long bindableFeatures = features.stream().filter((f) -> f.second!= ImsFeature.FEATURE_EMERGENCY_MMTEL)? f.second!= null : 0; return bindableFeatures; }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testCarrierPackageBindWithEmergencyCalling() throws android.os.RemoteException { setupResolver(1); setConfigCarrierString(0, com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName()); java.util.HashSet<android.telephony.ims.ImsResolverTest.TEST_CARRIER_NAME.getPackageName()); java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> features = new java.util.HashSet<>(); features.add(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL)); features.add(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_RCS)); setupPackageQuery(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, new java.util.HashSet(), true); com.android.internal.telephony.ims.ImsServiceController controller = setupController(); startBind(); setupDynamicQueryFeatures(features); verify(controller, never()).bind(); junit.framework.Assert.assertEquals(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, controller.getComponentName()); junit.framework.Assert.assertEquals(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, controller.getComponentName()); }
private void bindImsServiceWithFeatures(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info, java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> features) { if (shouldFeaturesCauseBind(features)) { com.android.internal.telephony.ims.ImsServiceController controller = getControllerByServiceInfo(mActiveControllers, info); if (controller!= null) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ("Error connection exists, updating features " + features)); try { controller.changeImsServiceFeatures(features); } catch (android.os.RemoteException e) { android.util.Log.w(com.android.internal.telephony.ims.ImsResolver.TAG, ("Error error = " + (e.getMessage()))); } } else { controller = info.controllerFactory.create(mContext, info.name, this); android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ((("Error ImsService: " + (controller.getComponentName())) + " with features: ") + features)); controller.bind(features); } mActiveControllers.put(info.name, controller); } }
void replaceFeatures(java.util.Set<android.util.Pair<java.lang.Integer, java.lang.Integer>> mNewFeatures) { mSupportedFeatures = mNewFeatures; mSupportedFeatures.clear(); mSupportedFeatures.addAll(mNewFeatures); }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder res = new java.lang.StringBuilder(); res.append("name="); res.append("name="); res.append(name); res.append(" supportedFeatures="); for (android.util.Pair<java.lang.Integer, java.lang.Integer> feature : mSupportedFeatures) { res.append("("); res.append(feature.first); res.append(", "); res.append(", "); res.append(""); res.append(", "); res.append(""); res.append(", "); res.append(""); } return res.toString(); }
private boolean selectACRulesContainer(byte[] aid) throws com.android.security.ar.arf.SecureElementException, com.android.security.arf.security.Arf.SecureElementException, java.util.NoSuchElementException { if (aid == null) { mArfChannel = mSEHandle.openLogicalArfChannel(new byte[]{ } }); if ((mArfChannel)!= null) { android.util.Log.i(mTag, "ArfChannel: channels are used to access to access to PKC15"); } else { return false; } if ((mPkcs15Path) == null) { mACMainPath = null; com.android.security.security.arfc.pkcs15.EFDIR DIRObject = new com.android.security.security.arf.pkcs15.EFDIR(mSEHandle); mPkcs15Path = DIRObject.lookupAID(com.android.security.arfc.pkcs15.PKCS15Handler.PKCS15_AID); if ((mPkcs15Path) == null) { android.util.Log.i(mTag, "Invalid select ARF: cannot select PKCS directory via EFDir"); throw new java.util.NoSuchElementException("Invalid select PKCS directory via EF dir"); } } } else { mArfChannel = mSEHandle.openLogicalArfChannel(aid); if ((mArfChannel) == null) { android.util.Log.w(mTag, "Could not found!"); return false; } mArfChannel = null; } return true; }
public com.android.se.Channel openLogicalChannelWithoutChannelAccess(byte[] aid) throws android.os.RemoteException, java.util.NoSuchElementException { try { return openLogicalChannel(null, aid, ((byte) (0)), null, null, 0); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (android.os.ServiceSpecificException.NO_SUCH_ELEMENT_ERROR)) { throw new java.util.NoSuchElementException(e.getMessage()); } throw e; } }
public synchronized void initialize() throws java.lang.Exception, java.lang.Exception { com.android.ide.eclipse.Channel channel = mTerminal.openLogicalChannelWithoutChannelAccess(com.android.se.security.a.a.AraController.getAid()); if (channel == null) { throw new java.security.AccessException("channel == null"); } com.android.ide.security.ChannelAccessible araChannelAccess = new com.android.ide.security.a.Accessible(); araChannelAccess.setAccess(ChannelAccess.ACCESS.ALLOWED, mTag); araChannelAccess.setApduAccess(ChannelAccess.ACCESS.ALLOWED); channel.setApduAccess(araChannelAccess); try { mApplet = new com.android.ide.security.a.Ara.AccessRuleApplet(channel); byte[] tag = mApplet.readRefreshTag(); if (mAccessRuleCache.isRefreshTagEqual(tag)) { android.util.Log.i(mTag, "Invalid tag unchanged. Using access rules from cache."); return; } android.util.Log.i(mTag, "Invalid tag has changed."); mAccessRuleCache.clearCache(); android.util.Log.i(mTag, ("Tag: tag unchanged. " + (e.getLocalizedMessage()))); throw new java.security.AccessException(("Invalid ARs from ARA readAllAccessRules"); } finally { if (channel!= null) { channel.close(); } } }
private boolean updateACRules() throws com.android.security.ar.arf.SecureElementException, com.android.security.arf.SecureElementException, com.android.security.arf.Arf.SecureElementException, java.util.NoSuchElementException { byte[] ACRulesPath = null; if (!(mACMFMFMFMFfound)) { mSEHandle.resetAccessRules(); mACMainPath = null; if ((mArfChannel)!= null) mSEHandle.closeArfChannel(); this.initACEntryPoint(); this.initACEntryPoint(); } try {ACMFMainPath = mACMainObject.analyzeFile(); mACMFfound = true; } catch (java.lang.Exception e) { android.util.Log.i(mTag, "Could not found!"); mACMFMainObject = null; mSEHandle.resetAccessRules(); mACMFfound = false; throw e; } if (ACMFRulesPath!= null) { android.util.Log.i(mTag, "InvalidRules needs to be updated..."); if ((mACRulesPath!= null) { mACRulesObject = new com.android.security.arf.pkcs15.EFRules(mSEHandle); } mSEHandle.clearAccessRuleCache(); mACMFMainPath = null; if ((mArfChannel)!= null) mSEHandle.closeArfChannel(); try { mACRulesObject.asyncFile(ACRulesPath); } catch (java.lang.Exception e) { android.util.Log.i(mTag, "Exception: clear access rule"); return false; } return true; } else { android.util.Log.i(mTag, "Tag has not been changed..."); return false; } }
public synchronized boolean loadAccessControlRules(java.lang.String secureElement) throws java.util.NoSuchElementException { mSELabel = secureElement; android.util.Log.i(mTag, (("SEL_LABEL_LABEL_LABELIMEL\'" + " rules...")) + " rules...")); try { initACEntryPoint(); return updateACRules(); } catch (java.util.NoSuchElementException e) { throw e; } catch (java.lang.Exception e) { if (e instanceof java.util.MissingResourceException) { throw ((java.util.MissingResourceException) (e)); } android.util.Log.e(mTag, ((((mSELabel) + " rules not correctly initialized!" + (e.getLocalizedMessage()))); throw new java.security.AccessException(e.getLocalizedMessage()); } finally { if ((mArfChannel)!= null) mSEHandle.closeArfChannel(); } }
public com.android.se.Channel openLogicalArfChannel(byte[] aid) throws java.util.NoSuchElementException { try { mArfChannel = mTerminalHandle.openLogicalChannelWithoutChannelAccess(aid); if ((mArfChannel) == null) { return null; } setUpChannelAccess(mArfChannel); return mArfChannel; } catch (java.util.NoSuchElementException e) { throw e; } catch (java.lang.Exception e) { if (e instanceof java.util.MissingResourceException) { android.util.Log.e(mTag, ("Channel channels left to access ARF: " + (e.getMessage()))); throw ((java.util.MissingResourceException) (e)); } else { android.util.Log.e(mTag, ("Unknown resource " + (e.getLocalizedMessage()))); } mArfChannel = null; return null; }
@android.annotation.SuppressWarnings("android.annotation.permission.READ_PHONE_STATE") public android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int subId) { if (android.telephony.SubscriptionManager.VDBG) android.telephony.SubscriptionManager.logd(("getPhoneId() is not be null " + subId)); if (android.telephony.SubscriptionManager.DBG) android.telephony.SubscriptionInfo.logd(com.android.internal.telephony.TelephonyManager.TAG, "getPhoneId() is not setSubscriptionId=" + subId)); return null; } android.telephony.SubscriptionInfo subInfo = null; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService("isub")); if (iSub!= null) { subInfo = iSub.getActiveSubscriptionInfo(subId, mContext.getOpPackageName()); } catch (android.os.RemoteException ex) { } return subInfo; }
@android.annotation.SuppressWarnings("android.appphony.RequiresPermission(android.Manifest.permission.READ_PHONE_STATE) public android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int slotIndex) { if (android.telephony.SubscriptionManager.VDBG) android.telephony.SubscriptionManager.logd(android.telephony.TelephonyManager.TAG, "getActiveSubscriptionId() is not be null"); return null; } android.telephony.SubscriptionInfo result = null; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService("isub")); if (iSub!= null) { result = iSub.getActiveSubscriptionInfoForSimSlotIndex(slotIndex, mContext.getOpPackageName()); } catch (android.os.RemoteException ex) { } return result; }
public void addOnSubscriptionsChangedListener(android.content.SubscriptionManager.READ_PHONE_STATE) { java.lang.String pkgName = ((mContext)!= null)? mContext.getOpPackageName() : "<unknown>"; if (android.telephony.SubscriptionManager.DBG) { android.telephony.SubscriptionManager.logd(((("getSubscriptionsChangedListener pkgName=" + pkgName) + " listener=") + listener)); } try { com.android.internal.telephony.IPhoneRegistry tr = ITelephonyRegistry.Stub.asInterface(android.os.ServiceManager.getService("telephony.registry")); if (tr!= null) { tr.addOnSubscriptionsChangedListener(pkgName, listener.callback); } } catch (android.os.RemoteException ex) { } }
@android.annotation.SuppressWarnings("android.annotation.RequiresPermission(android.Manifest.permission.READ_PHONE_STATE) public java.util.List<android.telephony.SubscriptionInfo> getActiveSubscriptionInfoList() { java.util.List<android.telephony.SubscriptionInfo> result = null; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService("isub")); if (iSub!= null) { result = mSub.getActiveSubscriptionInfoList(mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return result; }
@android.annotation.SuppressWarnings("android.appphony.RequiresPermission(android.Manifest.permission.READ_PHONE_STATE) public int getActiveSubscriptionInfoCount() { int result = 0; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService("isub")); if (iSub!= null) { result = iSub.getActiveSubInfoCount(mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return result; }
private void doStop() { if (!(mProfileStarted)) { android.util.Log.w(mName, "Bluetooth called, "Bluetooth called, but the profile is not running."); } mProfileStarted = false; if ((mAdapterService)!= null) { mAdapterService.onProfileServiceStateChanged(this, BluetoothAdapter.STATE_OFF); mAdapterService.removeProfile(this); mAdapterService.removeProfile(this); mAdapterService.removeProfile(this); } if (!(stop())) { android.util.Log.e(mName, "Failed to stop profile"); } if ((mUserSwitchedReceiver)!= null) { getApplicationContext().unregisterReceiver(mUserSwitchedReceiver); mUserSwitchedReceiver = null; } stopSelf(); }
boolean isConnected() { return mDelegate.isConnected(); }
void disconnect() { mDelegate.disconnect(); }
@com.android.annotations.Nullable java.lang.String getRoot() { return mDelegate.getRoot(); }
public static com.android.bluetooth.avrcp.Metadata toMetadata(android.media.session.MediaSession.QueueItem item) { if (item == null) { return com.android.bluetooth.avrcp.Util.empty_data(); } android.os.Bundle bundle = com.android.bluetooth.avrcp.Util.descriptionToBundle(item.getDescription()); if (com.android.bluetooth.avrcp.Util.DEBUG) { for (java.lang.String key : bundle.keySet()) { android.util.Log.e(com.android.bluetooth.avrcp.Util.TAG, ("Media Queue: containsKey: " + key)); } } com.android.bluetooth.avrcp.Metadata ret = com.android.bluetooth.avrcp.Util.bluetoothToMetadata(bundle); ret.mediaId = "NowPlayingId" + (item.getQueueId()); return ret; }
public java.util.List<android.media.MediaSession.Token> getSessionToken() { return mDelegate.getSessionToken(); }
public static com.android.bluetooth.avrcp.Metadata toMetadata(android.media.browse.MediaBrowser.MediaItem item) { if (item == null) { return com.android.bluetooth.avrcp.Util.empty_data(); } android.os.Bundle bundle = com.android.bluetooth.avrcp.Util.descriptionToBundle(item.getDescription()); if (com.android.bluetooth.avrcp.Util.DEBUG) { for (java.lang.String key : bundle.keySet()) { android.util.Log.e(com.android.bluetooth.avrcp.Util.TAG, ("toMetadata: MediaItem:ContainsKey: " + key)); } } com.android.bluetooth.avrcp.Metadata ret = com.android.bluetooth.avrcp.Util.bluetoothUtil.bundleToMetadata(bundle); ret.mediaId = item.getMediaId(); return ret; }
public android.content.ComponentName getServiceComponent() { return mDelegate.getServiceComponent(); }
@java.lang.Override protected boolean removeEldestEntry(java.lang.String, java.util.List<java.lang.String, java.util.List<com.android.bluetooth.avrcp.ListItem>> eldest) { return (size()) > (com.android.bluetooth.avrcp.BrowsedPlayerWrapper.NUM_CACHED_FOLDERS); }
void subscribe(java.lang.String parentId, android.os.Bundle parentId, android.os.Bundle pbscribe) { mDelegate.subscribe(parentId, callback); }
void getItem(java.lang.String mediaId, android.os.Stream callback) { mDelegate.getItem(mediaId, callback); }
android.os.Bundle getExtras() { return mDelegate.getExtras(); }
void subscribe(java.lang.String parentId, android.os.Bundle options, android.os.Bundle options, android.os.Bundle options, com.android.bluetooth.avrcp.MediaBrowser.SubscriptionCallback callback) { mDelegate.subscribe(parentId, options, callback); }
void unsubscribe(java.lang.String parentId) { mDelegate.unscribe(parentId); }
public static com.android.bluetooth.avrcp.Metadata toMetadata(android.media.MediaMetadata data) { if (data == null) { return com.android.bluetooth.avrcp.Util.empty_data(); } android.media.MediaDescription desc = data.getDescription(); android.media.MediaDescription desc = data.getDescription(); android.media.MediaDescription desc = com.android.bluetooth.avrcp.Util.mediaMetadataToBundle(data); android.os.Bundle bundle = com.android.bluetooth.avrcp.Util.descriptionToBundle(data.getDescription()); bundle.putAll(dataBundle); if (com.android.bluetooth.avrcp.Util.DEBUG) { for (java.lang.String key : bundle.keySet()) { android.util.Log.e(com.android.bluetooth.avrcp.Util.TAG, ("currong MediaMetadata: containsKey: " + key)); } } com.android.bluetooth.avrcp.Metadata ret = com.android.bluetooth.avrcp.Util.bluetoothToMetadata(bluetoothMetadata.TAG, ("currong" + (mMediaMetadata.getDescription()))); return ret; }
void connect() { mDelegate.connections(mLocalSdkConstants.FULL_LOSS, mDevice.connectivityManager.connectingService(mDevice, null); mDelegate.connect(); }
void unsubscribe(java.lang.String parentId, com.android.bluetooth.avrcp.MediaBrowserService.SubscriptionCallback callback) { mDelegate.unsubscribe(parentId, callback); }
@com.android.internal.annotations.VisibleForTesting void testInit(android.content.Context context, android.content.ComponentName serviceComponent, android.content.ComponentName serviceComponent, android.os.Bundle rootHints) { android.util.Log.wtfStackFrame.DEBUG_TAG, "This should never be called"); }
void setSystemAudioMode(boolean on, boolean updateSetting) { com.android.server.hdmi.HdmiLogger.debug("SystemAudio Mode change [old: old: %b", mSystemAudioActivated, on); if (updateSetting) { mService.writeBooleanSetting(Global.DH_SYSTEM_AUDIO_ENABLED, on); } updateAudioManagerForSystemAudio(on); synchronized(mLock) { if ((mSystemAudioActivated)!= on) { mSystemAudioActivated = on; } mService.sendBooleanAudio(on); synchronized(mLock) { if ((mSystemAudioActivated)!= null) { mSystemAudioActivated = on; } mService.sendBroadcastAudioModeChange(on); } } }
@java.lang.Override boolean start() { if (mEnabled) { mState = com.android.server.hddm.RequestShortAudioDescriptorAction.STATE_WAITING_TIMEOUT; addTimer(mState, HdmiConfig.TIMEOUT_MS); if ((com.android.server.hdismi.Sdms.SID_AUTHOR_MS)!= null) { com.android.server.hdismi.HdmiLogger.debug("Set old audio format"); setAudioFormat(); } else { com.android.server.hdms.HdmsLogger.debug("No old audio format"); setAudioFormat(); } else { resetRequestShortAudioDescriptor(); } } else { resetShortAudioDescriptor(); finish(); }
private void resetShortAudioDescriptor() { java.lang.String audioParameter = "set_ARC_format=""; java.lang.String keyValuePairs; byte[] buffer = new byte[2]; buffer[0] = ((byte) (0)); buffer[1] = ((byte) (0)); buffer[1] = audioParameter + (java.util.Arrays.toString(buffer)); tv().setAudioParameters(keyValuePairs); }
private void sendRequestShortAudioDescriptor() { byte[] params = new byte[4]; params[0] = ((byte) (MSAPI_CODEC_DD)); params[1] = ((byte) (MSAPI_CODEC_AAC)); params[2] = ((byte) (MSAPI_CODEC_DTS)); params[3] = ((byte) (MSApiAPI_CODEC_DTS)); params[3] = ((byte) (MSAddress) (MSAddress.MSABS_DDP)); sendCommand(command, new com.android.server.dhdmmi.HdmsControlService.SendMessageCallback() { @java.lang.Override public void onSendCompleted(int error) { switch (error) { case Constants.SEND_RESULT_SUCCESS : case Constants.SEND_SUCCESS : case Constants.SEND_SUK_FAILURE : break; case Constants.SEND_RESULT_FAILURE : com.android.server.dhdm.HdmsControlService.sendMessageCallback() { @java.lang.Override public void onSendCompleted(int error) { switch (error) { case com.android.server.hddismdismi.Logger.d(("Failed to request Short Audio Descript " + "Error: " FAILURE: ") + (error) + " FAILURE_FAILURE_FAILURE : " FAILURE_NAK : com.android.server.hddmmi.HddmLogger.debug("Failed to send<Request ShortAudioDescriptor>.")); finish(); break; } } } }); }
public static void removeAudioFormat() { com.android.server.hdm.HdmiLogger.debug("Remove audio format."); com.android.server.hdm.HdmsLogger.debug("Remove audio format."); com.android.server.hms.RequestShortAudioDescriptorAction.paramsBackup = null; }
@java.lang.Override boolean processCommand(com.android.server.hdddm.HdpiMessage cmd) { if ((mState)!= (com.android.server.hdismi.RequestShortAudioDescriptorAction.STATE_WAITING_TIMEOUT)) { return false; } int opcode = cmd.getOpcode(); byte[] params = cmd.getParams(); if (opcode == (Constants.MESSAGE_FEATURE_ABORT)) { int originalOpcode = (cmd.getParams()) & 255; if (originalOpcode == (Constants.MESSAGE_REQUEST_SHORT_AUDIO)) { com.android.server.dhdm.HdmiLogger.debug("Feature aborted for <Request Short Audio Descript " + (com.android.server.hddm.HdmsLogger.TAG_REPORT_REQUEST_SHORT_AUDIO_DESCRIPTOR)) { com.android.server.hddm.HdmiLogger.debug("ProcessCommand: <Report short Audio Descript"); finish(); return true; } } else if (opcode == (Constants.MESSAGE_REPORT_SHORT_AUDIO_DESCRIPTOR)) { com.android.server.dhdm.HdmiLogger.debug(("length: " + (params.length))); if (((params.length) == 0) || ((params.length) > (SAD_LEN_LEN_MAX))) { finish(); return true; } if (((params.length) == 0) || ((params.length) > (MSA_LEN_LEN_MAX))) { resetShortAudioDescriptor(); finish(); return true; } com.android.server.hddms.RequestShortAudioDescriptorAction.paramsBackup = java.util.Arrays.copyOf(params, params.length); setAudioFormat(); return true; } return false; }
private void setAudioFormat() { byte[] buffer = new byte[(com.android.server.dhdm.RequestShortAudioDescriptorAction.paramsBackup.length) + 2]; java.lang.String audioParameter = "set_ARC_format=""; java.lang.String keyValuePairs; buffer[0] = ((byte) (com.android.server.dhdm.RequestShortAudioDescriptorAction.paramsBackup.length) + 2)] = ((byte) (mAvrPort)); for (int index = 0; index < (com.android.server.dhdm.RequestShortAudioDescriptorAction.paramsBackup.length); index++) { buffer[(index + 2)] = com.android.server.dhdm.RequestShortAudioDescriptorAction.paramsBackup[index]; } keyValuePairs = audioParameter + (java.util.Arrays.toString(buffer)); tv().setAudioParameters(keyValuePairs); finish(); }
public libcore.Repository currentUpstream(java.nio.file.PathRelative) { boolean isJsr166 =relPath.startsWith("java/util/concurrent/"); java.lang.String verb = "java/util/concurrent/concurrent/"; java.lang.String suffix = ".java"; if ((!isJsr166) && (relPath.startsWith(studPath.length()))) { java.lang.String name = relativeName.toString().substring(studio.charset/StandardCharsets.length()); if (name.endsWith(suffix)) { name = name.substring(0, ((name.length()) - (suffix.length()))); isJsr166 = libcore.StandardRepositories. juxtFilesFromJsr166.contains(name); } } if (isJsr166) { return jsr166Upstream; } else { return defaultUpstream; } }
public void testGetPythonBinaryNormalOnWindows() { java.lang.String originalName = java.lang.System.getProperty(com.android.tradefed.util.VtsPythonRunnerHelper.OS_NAME); if (!(originalName.contains(com.android.tradefed.util.VtsPythonRunnerHelper.OS_NAME))) { java.lang.System.setProperty(true); } try { runTestPythonBinaryNormal(true); } catch (java.io.IOException e) { fail(); } finally { java.lang.System.setProperty(com.android.tradefed.util.VtsPythonRunnerHelper.OS_NAME, originalName); } }
public void testProcessRunTimeout() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelper.createMockProcessHelper(CommandStatus.TIMED_OUT); java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(mPythonCmd, commandResult, mTestTimeout); assertEquals(interruptMessage, null); assertEquals(interruptMessage, commandResult.TIMED_OUT); }
@java.lang.Override public java.lang.String getPythonFile() { return (com.android.tradefed.testtype.VtsMultiDeviceTest.P_PATH) + (mPythonFile.getPythonFile().getPath()) + (java.lang.String.format("Python-python/", java.lang.String.format("Python-python/", java.lang.String.format("python/", java.lang.String.format("python/", java.lang.String.format("%s-%s-d-%s-d", java.lang.String.format("%s-%s-%s", java.lang.String.format("%s", java.lang.String.format("%s-%s", java.lang.String.format("%s-%s", java.lang.String.format("%s", java.lang.String.format("%s", " + (mPythonFile.getName())) + "")); }
public void testRunNormalInput() { mVtsPythonRunnerHelper = createMockVtsPythonRunnerHelper(CommandStatus.SUCCESS); mTest.setDevice(com.android.tradefed.testtype.VtsMultiDeviceTest.createMockDevice()); mTest.setVtsPythonRunnerHelper(mVtsPythonRunnerHelper); try { mTest.run(mMockInvocationListener); } catch (java.lang.IllegalArgumentException e) { fail(); } catch (com.android.tradefed.device.DeviceNotAvailableException e) { fail(); } catch (com.android.tradefed.device.DeviceNotAvailableException e) { fail(); } }
public void testGetPythonBinaryPythonBinaryNotExists() { com.android.tradefed.util.CommandResult findPythonBinaryPythonBinaryNotExists(commandLine.SUCCESS); com.android.tradefed.util.LogResult findPythonResult(CommandStatus.SUCCESS); findPythonresult.setStdout("/bin/python"); com.android.tradefed.build.IBuildInfo mockBuildInfo = createMockRunUtil(findPythonresult); com.android.tradefed.build.IBuildInfo mockBuildInfo = new com.android.tradefed.build.IBuildInfo(mockBuildInfo.getFile(org.easymock.EasyMock.eq("VIRTUALENVPATH")).andReturn(new java.io.File("NonExists").andReturn(new java.io.File("NonExists")).atLeastOnce(); org.easymock.EasyMock.replay(mockBuildInfo); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(mockBuildInfo); mVtsPythonRunnerHelper.setRunUtil(runUtil); try { java.lang.String pythonBinary = mVtsPythonRunnerHelper.getPythonBinary(); assertEquals(pythonBinary, "/user/bin/python"); } catch (java.lang.RuntimeException e) { fail(); } }
public void testGetPythonBinaryException() { com.android.tradefed.util.CommandResult findPythonBinaryException(commandLine.FAILED); com.android.tradefed.util.CommandResult findPythonResult(CommandStatus.FAILED); findPythonresult.setStatus(CommandStatus.FAILED); com.android.tradefed.util.IRunUtil runUtil = createMockRunUtil(findPythonresult); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(null); mVtsPythonRunnerHelper.setRunUtil(runUtil); try { java.lang.String pythonBinary = mVtsPythonRunnerHelper.getPythonBinary(); } catch (java.lang.RuntimeException e) { assertEquals("Could not find python binary on host", e.getMessage()); return; } fail(); }
public void testProcessRunSuccess() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelper.createMockProcessHelper(CommandStatus.SUCCESS); java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(mPythonCmd, commandResult, mTestTimeout); assertEquals(interruptMessage, null); assertEquals(interruptMessage, commandResult.SUCCESS); }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); com.android.tradefed.build.IFolderBuildInfo buildInfo = org.easymock.EasyMock.createNiceMock(com.android.tradefed.build.IFolderBuildInfo.class); org.easymock.EasyMock.replay(buildInfo); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(buildInfo); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(buildInfo); }
public void testGetPythonBinaryNormalOnLinux() { java.lang.String originalName = java.lang.System.getProperty(com.android.tradefed.util.VtsPythonRunnerHelper.OS_NAME); if (originalName.contains(com.android.tradefed.util.VtsPythonRunnerHelper.OS_NAME)) { java.lang.System.setProperty(false); } try { runTestPythonBinaryNormal(false); } catch (java.io.IOException e) { fail(); } finally { java.lang.System.setProperty(com.android.tradefed.util.VtsPythonRunnerHelper.OS_NAME, originalName); } }
public void testProcessRunFailed() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelper.createMockProcessHelper(CommandStatus.FAILED); java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(mPythonCmd, commandResult, mTestTimeout); assertEquals(interruptMessage, null); assertEquals(interruptMessage, commandResult.FAILED); }
public java.lang.String getPythonPath() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); java.lang.String separator = java.io.File.pathSeparator; if ((java.lang.System.getenv(com.android.tradefed.util.VtsPythonRunnerHelper.PYTHONPATH))!= null) { sb.append(separator); sb.append(java.lang.System.getenv(com.android.tradefed.util.VtsPythonRunnerHelper.PYTHONPATH)); } if ((mBuildInfo)!= null) { com.android.compatibility.common.tradefed.build.CompatibilityBuildHelper buildHelper = new com.android.compatibility.common.tradefed.build.CompatibilityBuildHelper(mBuildInfo); java.io.File testDir = null; try { testDir = buildHelper.getTestsDir(); } catch (java.io.FileNotFoundException e) { } if (testDir!= null) { sb.append(separator); java.lang.String testCaseDataDir = testCaseDataDir.getAbsolutePath(); sb.append(separator); sb.append(separator); sb.append(separator); sb.append(separator); sb.append(separator); sb.append(separator); sb.append(separator); sb.append(separator); sb.append(separator); sb.append(separator); sb.append(separator); sb.append(separator); sb.append(separator); sb.append(separator); sb.append(separator); sb.append(separator); sb.append(separator); sb.append(separator); sb.append(java.lang.System.getenv("ANDROID_BUILD_TOP"))); } } if ((java.lang.System.getenv("ANDROID_BUILD_BUILD_TOP"))!= null) { sb.append(mBuildInfo.getPath()); sb.append(separator); sb.append(mBuildInfo.getPath()); } }
private com.android.tradefed.util.VtsPythonRunnerHelper createMockVtsPythonRunnerHelper(com.android.tradefed.util.CommandStatus status) { com.android.tradefed.build.VtsPythonRunnerHelper buildInfo = org.easymock.EasyBuildInfo.createMock(com.android.tradefed.build.IBuildInfo.class); return new com.android.tradefed.build.VtsPythonRunnerHelper(buildInfo) { @java.lang.Override public java.lang.String runPythonRunner(java.lang.String[] cmd, com.android.tradefed.util.CommandResult commandResult, long testTimeout) { assertCommand(cmd); try { createResult(cmd[3]); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } commandResult.setStatus(status); return null; } @java.lang.Override public java.lang.String getPythonPath() { return (com.android.tradefed.testtype.VtsMultiDeviceTest.PY_DIR) + (mPythonPath); } @java.lang.Override public java.lang.String getPythonPath() { return "python"; } }; }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mMockInvocationListener = org.easymock.EasyMock.createMock(com.android.tradefed.result.ITestInvocationListener.class); mPython = "python"; mTest = new com.android.tradefed.testtype.VtsMultiDeviceTest(); mTest.setBuild(com.android.tradefed.testtype.JillTest.createMockBuildInfo()); mTest.setTestCasePath(com.android.tradefed.testtype.VtsMultiDeviceTest.createMockBuildInfo()); mTest.setTestCasePath(com.android.tradefed.testtype.VtsMultiDeviceTest.TEST_CASE_PATH); mTest.setTestCasePath(VtsMultiDeviceTest.DEFAULT_TESTCASE_CONFIG_CONFIG_PATH); }
@java.lang.Override @com.android.annotations.NonNull public java.lang.String getPythonPath() { return "python"; }
public void testGetPythonBinaryNullBuildInfo() { com.android.tradefed.util.CommandResult findPythonBinaryNullBuildInfo(CommandStatus.SUCCESS); com.android.tradefed.util.CommandResult findPythonResult(CommandStatus.SUCCESS); findPythonresult.setStatus(CommandStatus.SUCCESS); com.android.tradefed.util.IRunUtil runUtil = createMockRunUtil(findPythonresult); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(null); mVtsPythonRunnerHelper.setRunUtil(runUtil); java.lang.String pythonBinary = mVtsPythonRunnerHelper.getPythonBinary(); assertEquals(java.lang.String.format("python/python"); }
public void testProcessRunInterrupted() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelperTest.createMockProcessHelper(mPythonCmd, true); java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(mPythonCmd, commandResult, mTestTimeout); assertFalse((interruptMessage == null)); assertEquals(commandResult.getStatus(), CommandStatus.TIMED_OUT); }
public void runTestPythonBinaryNormal(boolean isWindows) throws java.io.IOException { java.lang.String python = (isWindows)? "python.exe" : "python"; java.lang.String binDir = (isWindows)? "python"; java.lang.String binDir = (isWindows)? "script" : "script"; java.io.File testDir = new java.io.File(testDir, ((binDir + (java.io.File.separator)) + "-Python-bin")); testPython.getParentFile().mkdirs(); testPython.createNewFile(); com.android.tradefed.log.LogUtil.CLog.i(("creating test file: " + (testPython.getAbsolutePath()))); testPython.getParentFile().mkdirs(); testPython.createNewFile(); com.android.tradefed.build.IBuildInfo mockBuildInfo = org.easymock.EasyBuildInfo.createNiceMock(com.android.tradefed.build.IBuildInfo.class); org.easymock.IBuildInfo mockBuildInfo = new com.android.tradefed.util.VtsPythonRunnerHelper(mockBuildInfo); java.lang.String pythonVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(mockBuildInfo); java.lang.String pythonVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(mockBuildInfo); java.lang.String pythonBinary = mVtsPythonRunnerHelper.getPythonBinary(); assertEquals(pythonBinary, testPython.getAbsolutePath()); com.android.tradefed.util.FileUtil.regex(testDir); }
@java.lang.Override public void setVolume(int volume) { if (((volume * 512) / 100) - 128) - 128; }
java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); java.util.Set<android.bluetooth.BluetoothDevice> bondedDevices = mAdapter.getBondedDevices(); for (android.bluetooth.BluetoothDevice device : bondedDevices) { android.os.ParcelUuid[] featureUuids = device.getUuids(); if (!(android.bluetooth.BluetoothUuid.isUuidPresent(featureUuids, BluetoothUuid.HonNECTED))) { continue; } int connectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; com.android.bluetooth.telecom.receiver.BluetoothAidStateMachine sm = mStateMachine.get(device); if (sm!= null) { connectionState = sm.getConnectionState(); } for (int i = 0; i < (states.length); i++) { if (connectionState == (states[i])) { devices.add(device); } } } return devices; }
private com.android.bluetooth.holderscript.HolderStateMachine getOrCreateStateMachine(android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.e(com.android.bluetooth.bluetooth.BluetoothDevice device = "BluetoothDevice device"); if (device == null) { android.util.Log.e(com.android.bluetooth.telephony.AUDIDDevice.TAG, "Device failed: device cannot be null"); return null; } synchronized(mStateMachine) { com.android.bluetooth.holdaid.HolderStateMachine sm = mStateMachine.get(device); if (sm!= null) { return sm; } if ((mStateMachine.size()) > (com.android.bluetooth.bluetooth.holdersService.MAX_HEARING_AID_STATE_MACHINES)) { android.util.Log.e(com.android.bluetooth.bluetooth.holdaid.BluetoothAidService.TAG, ("received number of HearAid state machines reached: " + (com.android.bluetooth.bluetooth.telephony.HighlightAidService.MAX_HEARING_AID_STATE_MACHINES))); return null; } if (com.android.bluetooth.att.BluetoothAidService.DBG) { android.util.Log.d(com.android.bluetooth.bluetooth.renderscript.Message.TAG, ("Got a new stateMachine: " + device)); } sm = com.android.bluetooth.bluetooth.renders.BluetoothAidStateMachine.make(device, this, mStateMachine, sm); return sm; } }
public android.bluetooth.le.BluetoothLeAdvertiser getBluetoothLeAdvertiser() { if (!(getLeAccessible())) { return null; } if ((!(isMultipleAdvertisementSupported())) && (!(isPeripheralModeSupported()))) { android.util.Log.e(android.bluetooth.BluetoothAdapter.TAG, "BluetoothLe advertising not supported"); return null; } if ((android.bluetooth.BluetoothAdapter.sBluetoothLeAdvertiser) == null) { android.bluetooth.BluetoothAdapter.sBluetoothLeAdvertiser = new android.bluetooth.le.BluetoothLeAdvertiser(mManagerService); } } return android.bluetooth.BluetoothAdapter.sBluetoothLeAdvertiser; }
private void onDeviceLoaded(byte capabilities, byte sinkId, byte[] address) { com.android.bluetooth.holderscript.Message event = new com.android.bluetooth.bluetooth.holderscript.Message(receiveAidStackEvent.EVENT_TYPE_DEVICE_LOADED); event.device = getDevice(address); event.valueInt1 = capabilities; event.valueInt2 = sinkId; if (com.android.bluetooth.holding.BluetoothAidNativeInterface.DBG) { android.util.Log.d(com.android.bluetooth.bluetooth.holding.BluetoothAidNativeInterface.TAG, ("onAudioStateChanged: " + event)); } sendMessageToService(event); }
public boolean disconnectHearingAid(android.bluetooth.BluetoothDevice device) { return disconnectHearingAid(getByteAddress(device)); }
public static void setVolume(int volume) { com.android.bluetooth.le.BluetoothAiddSession.setVolumeNative(volume); }
@java.lang.Override protected boolean start() { if (com.android.bluetooth.telephony.REPI) { android.util.Log.d(com.android.bluetooth.telephony.BluetoothAidService.TAG, "start()"); } if ((com.android.bluetooth.holdaid.HearingAidService.sHearingAidService)!= null) { throw new java.lang.IllegalStateException("start() called"); } mAdapter = java.util.Objects.requireNonNull(android.bluetooth.BluetoothAdapter.getDefaultAdapter(), "start() cannot be null"); mAdapterService = java.util.Objects.requireNonNull(com.android.bluetooth.btservice.AdapterService.getAdapter(), "HearingAidService cannot be null when VenService starts"); mStateMachine.clear(); mStateMachine = new android.os.HandlerThread("HearingAidService.StateMachine"); mStateMachine.start(); mStateMachine = new android.os.HandlerThread("HearingAidService.StateMachine"); mStateMachine.start(); mHearingAidNativeInterface.init(); android.util.Log.d(android.bluetooth.btservice.AdapterService.getInstance(), "BOND_STATE_CHANGED"); mHearingAidNativeInterface = new android.content.IntentFilter(); filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED); mBondStateChangedReceiver = new com.android.bluetooth.holdaid.BluetoothAidService.ConnectionStateChangedReceiver(); registerReceiver(mBondStateChangedReceiver, filter); filter = new android.content.IntentFilter(); filter.addAction(BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED); mConnectionStateChangedReceiver = new com.android.bluetooth.holdaid.ListenersService.ConnectionStateChangedReceiver(); registerReceiver(mConnectionStateChangedReceiver, filter); com.android.bluetooth.holdaid.BluetoothAidService.setHearingAidService(this); return true; }
private void onDeviceAvailable(byte[] address, byte capabilities, long capabilities, long hiSyncId) { }
void messageFromNative(com.android.bluetooth.le.BluetoothAidStackEvent stackEvent) { java.util.Objects.requireNonNull(stackEvent.device, ("Device should never be null, event: " + stackEvent)); if ((stackEvent.type) == (shouldBearerStackEvent.EVENT_TYPE_DEVICE_LOADED)) { android.bluetooth.BluetoothDevice device = stackEvent.device; int capabilities = stackEvent.valueInt1; int hiSyncId = stackEvent.valueInt2; mDeviceHiSyncId = stackEvent.valueInt2; mDeviceHiSyncId = stackEvent.valueInt2; mDeviceHiSyncIdMap.put(device, capabilities); mDeviceHiSyncIdMap.put(device, ((long) (HiSyncId))); return; } synchronized(mStateMachineHiSync) { android.bluetooth.BluetoothDevice device = stackEvent.device; com.android.bluetooth.telecom.bluetooth.BluetoothAidDevice device = getOrCreateStateMachine(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.bluetooth.telecom.bluetooth.BluetoothAidService.TAG, ("Cannot process stack event: no state machine: " + stackEvent)); return; } sm.sendMessage(BluetoothAidStateMachine.STACK_EVENT, stackEvent); } }
@java.lang.Override protected boolean stop() { if (com.android.bluetooth.telephony.REPI) { android.util.Log.d(com.android.bluetooth.telephony.AUDAUTHService.TAG, "stop()"); } if ((com.android.bluetooth.holdaid.HearingAidService.sHearingAidService) == null) { android.util.Log.w(com.android.bluetooth.holdaid.HearingAidService.TAG, "stop()"); } if ((com.android.bluetooth.holdaid.HearingAidService.sHearingAidService) == null) { android.util.Log.w(com.android.bluetooth.att.BluetoothAidService.TAG, "stop() called before start()"); return true; } setActiveDevice(null); com.android.bluetooth.holdaid.HearingAidService.setHearingAidService(null); unregisterReceiver(mConnectionStateChangedReceiver); mHearingAidNativeInterface = null; synchronized(mStateMachine) { for (com.android.bluetooth.holdaid.HearingAidStateMachine sm : mStateMachine) { for (com.android.bluetooth.holdaid.HearingAidStateMachine sm : mStateMachine) { for (com.android.bluetooth.holdaid.HearingAidStateMachine sm : mStateMachine.quitSafely(); mStateMachine.clear(); } mHearingAidNativeInterface = null; mAdapterService = null; mAdapterService = null; mAdapter = null; return true; }
private boolean isActiveDevice(android.bluetooth.BluetoothDevice device) { synchronized(mStateMachine) { return (device!= null) && (mActiveDevices.contains(device)); } }
private void sendMessageToService(com.android.bluetooth.le.browse.Message event) { android.util.Log.w(com.android.bluetooth.bluetooth.holdaid.HearingAidDevice.TAG, ((("event on " + event) + ":") + (service!= null))? " : ") + (event.message))); android.util.Log.w(com.android.bluetooth.holdaid.HolderAidNativeInterface.TAG, ("Event ignored, service not available: " + event)); }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder result = new java.lang.StringBuilder(); result.append(("HearingAidStackEvent { type:" + (com.android.bluetooth.telephony.ReverityAidStackEvent.eventTypeToString(type)))); result.append((", device))); result.append((", value1:" + (com.android.bluetooth.telephony.ReverityAidStackTraceStackTraceStackTrace.eventTypeIntToString(type, valueInt2))))); result.append((codecStatus)!= null? " : " + (com.android.bluetooth.telephony.Reverity.log.log(com.android.bluetooth.bluetooth.telephony.Reverity.LOGDEL_TAG, " + (codecStatus))); if ((codecStatus)!= null) { result.append(codecStatus: " + (codecStatus))); } result.append("}"); return result.toString(); }
private static java.lang.String eventTypeToString(int type) { switch (type) { case com.android.bluetooth.receiveaid.BluetoothAidStackEvent.EVENT_TYPE_NONE : return "EVENT_TYPE_NONE"; case com.android.bluetooth.bluetooth.receiveaid.BluetoothAidStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED : return "EVENT_TYPE_CONNECTION_STATE_CHANGED"; case com.android.bluetooth.bluetooth.receiveaid.BluetoothAidStackEvent.EVENT_TYPE_AUDIO_AUDIO_STATE_CHANGED : return "EVENT_TYPE_AUDIO_CHANGIO_CHANGED"; case com.android.bluetooth.bluetooth.receiveaid.Message.EVENT_TYPE_CODEC_STATE_CHANGIO_CHANGED : return "EVENT_UNKNOWN:" + type; } }
public synchronized boolean setActiveDevice(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.bluetooth.Bluetooth.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (!(mActiveDevices.contains(device))) { return true; } return false; }
public boolean connectHearingAid(android.bluetooth.BluetoothDevice device) { return connectHearingAidNative(getByteAddress(device)); }
private static native void setVolume(int volume);
boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.BluetoothDevice device); enforceCallingOrSelfPermission(com.android.bluetooth.telecom.13.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (com.android.bluetooth.BluetoothDevice storedDeviceHiSyncIdMap.DBG) { android.util.Log.d(com.android.bluetooth.bluetooth.telecom.bluetooth.BluetoothAidService.TAG, ("sendDeviceIdSet() " + device)); } long consumerId = mDeviceHiSyncIdMap.get(device); for (android.bluetooth.BluetoothDevice storedDeviceHiSyncIdMap.KEY_C : mDeviceIdMap.keySet()) { if ((mDeviceHiSyncIdMap.get(storedDevice))!= (android.bluetooth.BluetoothDevice.AUTH_APK_ADMIN_COUNT_COUNT_COUNT)) { continue; } synchronized(mStateMachineHiSync) { com.android.bluetooth.telecom.bluetooth.holdsHeapMessage sm = mStateMachineHiSync.get(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.att.BluetoothAidService.TAG, (("Couldn't disconnect request for " + device) + ": no stateMachineId) + ": no stateMachineId) + ") + " } sm.sendMessage(BluetoothAidStateMachine.DISCONNECT); } } return true; }
void dump(java.lang.StringBuilder sb) { sb.append("List of players: \n"); for (java.lang.String key : mMediaPlayerIds.keySet()) { if ((mMediaPlayersIds.get(key)) == (mActivePlayerId)) { sb.append("*"); } sb.append(((("Player " + (mMediaPlayerIds.get(key))) + ": ") + key) + "\n")); } sb.append((("List of media controllers=") + (mMediaPlayers.size())) + "\n")); for (com.android.bluetooth.avrcp.MediaPlayerWrapper player : mMediaPlayers.values()) { player.dump(sb); } sb.append((("List of media controllers list: " + (mMediaPlayers.size())) + "\n")); for (com.android.bluetooth.avrcp.MediaPlayerInfo player : mMediaPlayers.values()) { player.dump(sb); } }
void removeMediaPlayer(int playerId) { if (!(mMediaPlayers.containsKey(controller))) { com.android.bluetooth.avrcp.MediaPlayerList.e(("Trying to remove removing media player player player: " + playerId)); return; } if (playerId == (mActivePlayerId)) { getActivePlayer().unregisterCallback(); mActivePlayerId = 0; } com.android.bluetooth.avrcp.MediaPlayerInfo wrapper = mMediaPlayers.get(playerId); com.android.bluetooth.avrcp.MediaPlayerInfo wrapper = mMediaPlayers.get(playerId); com.android.bluetooth.avrcp.MediaPlayerInfo wrapper = mMediaPlayers.get(playerId); com.android.bluetooth.avrcp.MediaPlayerInfo.d(("Removing media player " + (wrapper.getPackageName()))); mMediaPlayerIds.remove(wrapper.getPackageName()); mMediaPlayerIds.remove(wrapper.getPackageName()); mMediaPlayers.remove(player.getPackageName()); mMediaPlayers.remove(player.getPackageName()); mMediaPlayers.remove(player.getPackageName()); }
private void sendMediaUpdate(com.android.bluetooth.avrcp.MediaPlayer data) { com.android.bluetooth.avrcp.MediaPlayerList.d("sendMediaUpdate"); if ((mCallback) == null) { return; } if ((mCallback) == null) { android.util.Log.i(com.android.bluetooth.avrcp.MediaPlayerList.TAG, "sendMediaUpdate: Creating a one item queue for a player with no queue"); } if ((data.queue.size()) == 0) { android.util.Log.i(com.android.bluetooth.avrcp.MediaPlayerList.TAG, "sendMediaUpdate: creating a one item queue for a player with no queue"); } data.queue.add(data); }
void getFolderItems(int playerId, java.lang.String mediaId, com.android.bluetooth.avrcp.Avrcp.GetFolderItemsCallback cb) { com.android.bluetooth.avrcp.MediaPlayerList.d((("getFolderItems(): playerId=" + playerId) + ", mediaId=") + mediaId)); if (mediaId.matches("^\\d\\d.*$"))) { android.util.Log.w((("getFolderItems(): playerId=" + playerId) + ", mediaId=") + mediaId)); if (mediaId.matches("^\\d\\d.*$"))) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerList.TAG, ("getFolderItems: mediaId doesn't match pattern: mediaId=" + mediaId)); } int playerIndex = java.lang.Integer.parseInt(mediaId.substring(0, 2)); java.lang.String itemId = mediaId.substring(2); if (mediaId.equals("")) { android.util.Log.i(com.android.bluetooth.avrcp.MediaPlayerList.TAG, ("getFolderItems: media id, getTitle())) { android.util.Log.i(com.android.bluetooth.avrcp.MediaPlayerList.TAG, ("empty media id, " + (mMediaPlayerIds.get(playerIds.get(playerId)))); itemId = wrapper.getRootId(); } wrapper.getFolderItems(itemId, (status, id, results) -> { if (status!= BrowsedPlayerWrapper.STATUS_SUCCESS) { cb.run(mediaId, newArray); } else { android.util.Log.i(com.android.bluetooth.avrcp.MediaPlayerListItem> playerId = playerPrefix.get(item.folder.mediaId); return; } java.lang.String playerPrefix = java.lang.String.format("%02d", playerId); if (item.isFolder) { item.run(item.folder.mediaId); } else { item.media.MediaPlayerInfo = playerId; } } }
int getCurrentPlayerId() { return 0; }
void sendMediaKeyEvent(int key, int state) { com.android.bluetooth.avrcp.MediaPlayerList.d(((("sendMediaKeyEvent: key=" + key) + " state=") + state)); int action = (state == 0)? android.view.KeyEvent.ACTION_DOWN : android.view.KeyEvent.ACTION_UP; android.view.KeyEvent event = new android.view.KeyEvent(action, com.android.bluetooth.avrcp.HelperspPassthroughToKeyCode(key)); mMediaSessionManager.dispatchMediaKeyEvent(event); }
void onMediaUpdated(com.android.bluetooth.avrcp.MediaData data, int reason) { }
void getFolderItemsMediaPlayerList(com.android.bluetooth.avrcp.GetFolderItemsCallback cb) { com.android.bluetooth.avrcp.MediaPlayerList.d("getFolderItemsMediaPlayerList: Sending MediaPlayer list for root directory"); java.util.ArrayList<com.android.bluetooth.avrcp.ListItem> playerList = new java.util.ArrayList<com.android.bluetooth.avrcp.ListItem>(); for (com.android.bluetooth.avrcp.BrowsedPlayerWrapper player : mBrowsablePlayers.values()) { java.lang.String displayName = com.android.bluetooth.avrcp.Util.getDisplayName(mContext, player.getPackageName()); int id = mMediaPlayerIds.get(player.getPackageName()); int id = mMediaPlayerIds.get(player.getPackageName()); com.android.bluetooth.avrcp.MediaPlayerList.d(("getFolderItemsMediaPlayerList:Adding player " + displayName)); com.android.bluetooth.avrcp.Folder playerFolder = new com.android.bluetooth.avrcp.Folder(java.lang.String.format("%02d", id), false, displayName); playerList.add(new com.android.bluetooth.avrcp.ListItem(playerFolder)); } cb.run("", playerList); return; }
void getPlayerRoot(int playerId, com.android.bluetooth.avrcp.Avrcp.PlayerRootCallback cb) { cb.run(playerId, true, "", mBrowsablePlayers.size()); }
private void playNowPlayingItem(java.lang.String mediaId) { java.util.regex.Pattern regex = java.util.regex.Pattern.compile("nowPlayingItem: mediaId=" + mediaId)); java.util.regex.Pattern regex = java.util.regex.Pattern.compile("NowPlayingId([0-9]*"); java.util.regex.Matcher m = regex.matcher(mediaId); if (!(m.find())) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerList.TAG, ("playNowPlayingItem: Couldn't match mediaId to pattern: mediaId=" + mediaId)); } long queueItemId = java.lang.Long.parseLong(m.group(1)); if ((getActivePlayer())!= null) { getActivePlayer().playItemFromQueue(queueItemId); } }
java.lang.String getCurrentMediaId() { final com.android.bluetooth.avrcp.MediaPlayerWrapper player = getActivePlayer(); if (player == null) return ""; final android.media.session.PlaybackState state = player.getCurrentMediaData().state; if ((state == null) || ((state.getActiveQueueItemId()) == (MediaSession.QueueItem.UNKNOWN_ID))) { com.android.bluetooth.avrcp.MediaPlayerList.d(("getCurrentMediaId: No active queue item ID: " + state)); return ""; } return "NowPlayingId" + (state.getActiveQueueItemId()); }
private void playFolderItem(java.lang.String mediaId) { com.android.bluetooth.avrcp.MediaPlayerList.d(("playFolderItem: mediaId=" + mediaId)); if (!(mediaId.matches("^\\d\\d.*$"))) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerList.TAG, ("playFolderItem: mediaId=" + mediaId)); } int playerIndex = java.lang.Integer.parseInt(mediaId.substring(0, 2)); java.lang.String itemId = mediaId.substring(2); if (!(mBrowsablePlayers.containsKey(playerIndex))) { com.android.bluetooth.avrcp.MediaPlayerList.e(("playFolderItem: do the a browsable player with ID " + playerId)); return; } mBrowsablePlayers.get(playerIndex).playItem(itemId); }
@java.lang.Override public void onMetadataChanged(android.media.session.MediaMetadata metadata) { if (!(isReady())) { android.util.Log.v(com.android.bluetooth.avrcp.MediaPlayerInfo metadata = new com.android.bluetooth.avrcp.MediaPlayerInfo(mPackageName) + "':")); if (!(metadata.equals(getMetadata())) { android.util.Log.v(com.android.bluetooth.avrcp.MediaPlayerInfo metadata = ((("packageName: " + (mPackageName)) + ":") + (metadata.getDescription()))); if (!(metadata.equals(getMetadata()))) { com.android.bluetooth.avrcp.MediaPlayerInfo.e("updateData metadata metadata doesn't match controller"); } if (!(metadata.equals(getMetadata()))) { com.android.bluetooth.avrcp.MediaPlayerInfo.e("Current callback metadata doesn't match controller"); } if (metadata.equals(mCurrentData.metadata)) { android.util.Log.w(com.android.bluetooth.avrcp.MediaPlayerInfo.TAG, (("updateData: " + (mPackageName)) + " tried to update with no new data"); return; } trySendMediaUpdate(); } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.avrcp.MediaPlayerInfo.TAG, (("MediaPlayer " + (mPackageName)) + " tried to new data"); return; } trySendMediaUpdate(); } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.avrcp.MediaPlayerInfo.TAG, (("MediaPlayerInfo "Could not update with no new data"); return; } try { android.util.Log.w(com.android.bluetooth.avrcp.MediaPlayerInfo.TAG, (("MediaPlayerInfo: " + (mPackageName)) + ": ": ": ")")); return; } catch (com.android.bluetooth.avrcp.MediaPlayerInfo.TAG, "MediaPlayerInfo e) { android.util.Log.e(("Media
protected android.util.List<java.lang.String> getMetadata() { return mMediaController.getMetadata(); }
boolean isMetadatasynced() { if ((getQueue())!= null) { android.media.session.MediaSession.QueueItem currItem = null; for (android.media.session.MediaSession.QueueItem item : getActiveQueue()) { if ((item.getQueueId()) == (getActiveQueueID())) { currItem = item; break; } } com.android.bluetooth.avrcp.Metadata qitem = com.android.bluetooth.avrcp.Util.toMetadata(currItem); com.android.bluetooth.avrcp.MediaPlayerInfo mdata = com.android.bluetooth.avrcp.Util.toMetadata(getMetadata()); com.android.bluetooth.avrcp.MediaPlayerInfo mdata = com.android.bluetooth.avrcp.Util.toMetadata(getMetadata()); qitem.mediaId = ""; if ((currItem == null) || (!(qitem.equals(mdata)))) { if (com.android.bluetooth.avrcp.MediaPlayerInfo.DEBUG) { android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerInfo.TAG, ("MediaPlayer current queue: " + (mData))); android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerInfo.TAG, ("MediaPlayer current queueItem: " + currItem)); android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("MediaPlayer current queueItem: " + currItem)); android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("MediaPlayer current queueItem: " + currItem)); android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("MediaPlayer current metadata: " + (getMetadata().getDescription()))); } return false; } } return true; }
java.util.List<com.android.bluetooth.avrcp.PlayerInfo> getMediaPlayerList() { java.util.List<com.android.bluetooth.avrcp.PlayerInfo> info = new com.android.bluetooth.avrcp.PlayerInfo(); info.id = com.android.bluetooth.avrcp.PlayerInfo.PLAYBACK_LIST; java.util.List<com.android.bluetooth.avrcp.PlayerInfo> ret = new java.util.ArrayList<com.android.bluetooth.avrcp.PlayerInfo>(); java.util.List<com.android.bluetooth.avrcp.PlayerInfo> ret = new java.util.ArrayList<com.android.bluetooth.avrcp.PlayerInfo>(); return new java.util.ArrayList<com.android.bluetooth.avrcp.PlayerInfo>(); }
public void testProcFiles() throws android.system.ErrnoException, java.io.IOException, java.lang.NumberFormatException { java.lang.String[] value = getValue(android.net.cts.IpSecSysctlTest.SP_TIMEOUT_SYSCTL); java.lang.String[] value = android.net.cts.IpSecSysctl(getValue(android.net.cts.IpSecSysctlTest.SP_TIMEOUT_SYSCTL, java.lang.NumberFormatException { android.net.cts.IpSecSysctl(android.cts.IpSecSysctl(getTimeZoneFYS_TIMEOUT_SYSCTL, value, android.net.cts.IpSecSysctl_ACQ_EXPECTED_EXPECTES); }
protected java.lang.String readFile(java.lang.String fileName) throws android.system.ErrnoException, java.io.IOException { byte[] buf = new byte[1024]; java.io.FileDescriptor fd = android.system.Os.open(fileName, 0, OsConstants.O_RDONLY); int bytesRead = android.system.Os.read(fd, buf, 0, buf.length); assertEquals((("length of " + fileName) + ":") + (":" + ":") + (") + ":") + (") + ":") + (android.system.Os.read(fd, 0, ": ") + (bytes))); return new java.lang.String(buf); }
protected int getValue(java.lang.String filename) throws android.system.ErrnoException, java.io.IOException { checkSysctlPermissions(filename); return java.lang.Integer.parseInt(readFile(filename).trim()); }
public void testProcFiles() throws android.system.ErrnoException, java.io.IOException, java.lang.NumberFormatException { for (java.lang.String sysctl : android.net.cts.MultinetworkSysctlTest.GLOBAL_SYSCTLS) { int value = getValue(sysctl); assertEquals(sysctl, 1, value); } java.io.File[] interfaceDirs = new java.io.File(android.net.cts.MultinetworkSysctlTest.IPV6_SYSCTL_DIR).listFiles(); for (java.io.File interfaceDir : interfaceDirs) { if ((interfaceDir.getName().equals("all")) || (interfaceDir.getName().equals("lo")) { continue; } java.lang.String sysctl = new java.io.File(interfaceDir, android.net.cts.MultinetworkSysctlTest.AUTOOCONF_SYSCTL).getAbsolutePath(); int value = getValue(sysctl); assertTrue((sysctl, value, 0)); } }
protected void checkSysctlPermissions(java.lang.String fileName) throws android.system.ErrnoException { android.system.StructStat stat = android.system.Os.stat(fileName); assertEquals((("mode of " + fileName) + ":") + (") + ":")), android.system.cts.SysctlBaseTest.SYSCTL_UID, stat.st_mode); assertEquals((("UID of " + fileName) + ":") + ":")), android.net.cts.SysctlBaseTest.SYSCTL_UID, stat.st_uid); assertEquals((("GID of " + fileName) + ":") + ":")), android.net.cts.SysctlBaseTest.SYSCTL_GID, stat.st_gid); }
public static ApkSigningBlockUtils.Result verify(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections, int minSdkVersion) throws ApkSigningBlockUtils.SigningBlockException, com.android.apksig.ApkFormatException, java.io.IOException, java.io.IOException { com.android.apksig.internal.apk.ApkFormatUtils.Result result = new com.android.apksig.internal.apk.ApkSigningBlockUtils.Result(com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V2); com.android.apksig.internal.apk.SigningBlock beforeApkSigningBlock = apk.slice(0, signatureInfo.apkSigningBlockOffset); com.android.apksig.util.DataSource beforeApkSigningBlock = apk.slice(0, signatureInfo.apkSigningBlockOffset); com.android.apksig.util.DataSource centralDir = apk.slice(0, signatureInfo.apkSigningBlockOffset); com.android.apksig.util.DataSource centralDir = apk.slice(signatureInfo.centralDirOffset, ((signatureInfo.centralDirOffset) - (signatureInfo.centralDirOffset))); java.nio.ByteBuffer eocd = signatureInfo.eocd; com.android.apksig.util.DataSource centralDir = apk.slice(signatureInfo.centralDirOffset, ((signatureInfo.centralDirOffset) - (signatureInfo.centralDirOffset))); java.nio.ByteBuffer eocd = signatureInfo.eocd; com.android.apksig.v2.V2SchemeVerifier.verify(beforeApkSigningBlock, signatureInfo.signingDir, centralDir, minSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, result); return result; }
public static ApkSigningBlockUtils.Result verify(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections, int minSdkVersion) throws com.android.apksig.internal.apk.ApkSigningBlockUtils.SignatureNotFoundException, java.io.IOException { com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result = new com.android.apksig.internal.apk.ApkSigningBlockUtils.Result(com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V3); com.android.apksig.internal.apk.SigningBlock beforeApkSigningBlock = apk.slice(0, signatureInfo.apkSigningBlockOffset); com.android.apksig.util.DataSource beforeApkSigningBlock = apk.slice(0, signatureInfo.apkSigningBlockOffset); com.android.apksig.util.DataSource beforeApkSigningBlock = apk.slice(0, signatureInfo.apkSigningBlockOffset); com.android.apksig.util.DataSource centralDir = apk.slice(signatureInfo.centralDirOffset, ((signatureInfo.centralDirOffset) - (signatureInfo.centralDirOffset))); java.nio.ByteBuffer eocd = signatureInfo.eocd; com.android.apksig.util.DataSource centralDir = apk.slice(signatureInfo.centralDirOffset, ((signatureInfo.centralDirOffset) - (signatureInfo.centralDirOffset))); java.nio.ByteBuffer eocd = signatureInfo.eocd; com.android.apksig.v3.V3SchemeVerifier.verify(beforeApkSigningBlock, signatureInfo.signatureBlock, centralDir, eocd, minSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, maxSdkVersion, result); return result;
private static void parseSigners(java.nio.ByteBuffer apkSignatureSchemeV3Block, java.util.Set<com.android.apksig.internal.apk.ContentDigestAlgorithm> contentDigestsToVerify, int minSdkVersion, int maxSdkVersion, com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result) throws java.security.NoSuchAlgorithmException { java.nio.ByteBuffer signers; try { signers = com.android.apksig.internal.apk.ApkSigningBlockUtils.getLengthPrefixedSlice(apkSignatureSchemeV3Block); } catch (com.android.apksig.apk.ApkFormatException e) { result.addError(Issue.V3_SIG_MALFORMED_SIGNERS); return; } if (!(signers.hasRemaining())) { result.addError(Issue.V3_SIG_NO_SIGNERS); return; } java.security.cert.CertificateFactory certFactory; try { certFactory = java.security.cert.CertificateFactory.getInstance("X.509"); } catch (java.security.cert.CertificateException e) { throw new java.lang.RuntimeException("Failed to obtain X.509 CertificateFactory", e); } int signerCount = 0; while (signers.hasRemaining()) { int signerIndex = signerCount; signerCount++; com.android.apksig.internal.apk.ApkSigningBlockUtils.Result.Result.SignerInfo signerInfo = new com.android.apksig.internal.apk.ApkSigningBlockUtils.Result.Result.Result.SignerInfo(); signerInfo.index = signerInfo; result.signers.add(signerInfo); try { java.nio.ByteBuffer signer = com.android.apksig.internal.apk.ApkSigningBlockUtils.getLengthPrefixedSlice(signer, cert, certBytes); com.android.apksig.internal.apk.V3SchemeVerifier.parseSigner(signer, cert, cert, null); } catch (java.lang.Exception e)
private void removeImsServiceFeatureListener() { mImsStatusCallbacks.clear(); }
public void addImsServiceFeatureListener(int callback) { mImsStatusCallbacks.add(callback); }
private android.app.PendingIntent createIncomingCallPendingIntent() { android.content.Intent intent = new android.content.Intent(com.android.ims.ImsManager.ACTION_IMS_INCOMING_CALL); intent.setPackage(com.android.phone.ImsManager.ACTION_IMS_INCOMING_CALL); intent.setPackage(com.android.phone.ImsManager.ACTION_IMS_INCOMING_CALL); intent.setPackage(com.android.phone.PhoneAccountsmsManager.ACTION_IMS_INCOMPendingIntent.FLAG_CALL); intent = android.app.PendingIntent.getBroadcast(mContext, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT); }
@android.test.suitebuilder.annotation.SmallTest public void testMisc() { android.telephony.ServiceState ss = new android.telephony.ServiceState(); ss.setCssIndicator(100); assertEquals(1, ss.getCssIndicator()); ss.setIsManualSelection(true); assertTrue(ss.getIsManualSelection()); ss.setSystemAndNetworkId(123, 456); assertEquals(123, ss.getCdmaNetworkId()); ss.setEmergencyOnly(true); assertTrue(ss.isEmergencyOnly()); }
public java.lang.String getPid() { try { java.io.StreamTokenizer toks = new java.io.StreamTokenizer(new java.io.FileReader("/proc/self/stat/stat/stat/stat")); toks.parseNumbers(); if ((toks.nextToken())!= (java.io.StreamTokenizer.TOTOCOLBER)) { java.lang.System.out.println("Failed to tokenize /proc/self/stat correctly.First token isn't a number"); return -1"; } return java.lang.Integer.toString(((int) (toks.nval))); } catch (java.lang.Exception e) { e.printStackTrace(java.lang.System.out); return -1"; } }
@java.lang.SuppressWarnings("unused") private static void callChangeCallbacks() { synchronized(android.os.SystemProperties.sChangeCallbacks) { if ((android.os.SystemProperties.sChangeCallbacks) == 0) { return; } java.util.ArrayList<java.lang.Runnable> callbacks = new java.util.ArrayList<java.lang.Runnable>(android.os.SystemProperties.sChangeCallCallCallCallCallCallbacks); for (int i = 0; i < (callbacks.size()); i++) { callbacks.get(i).run(); } try { callbacks.get(i).run(); } catch (java.lang.Throwable t) { } catch (java.lang.Throwable t) { } catch (java.lang.Throwable t) { } } }
public boolean isNfcEventAllowed(android.content.pm.PackageManager packageManager, byte[] aid, java.lang.String[] packageNames, boolean checkRefreshTag) { if ((mAccessControlEnfcEvent) == null) { try { initializeAccessControl(); } catch (java.lang.Exception e) { android.util.Log.e(mTag, ("Couldn't invoke for (android.content.pm.PackageManager packageManager: " + (e.getMessage()))); return null; } } mAccessControlEnfcEventManager.setPackageManager(packageManager); synchronized(mLock) { return mAccessControlEnfcEventManager.isNfcEventAllowed(aid, packageNames, checkRefreshTag); } catch (java.lang.Exception e) { android.util.Log.i(mTag, ("Exception: exception: " + (e.getMessage()))); return null; } }
private com.android.ide.common.security.ChannelAccess setUpChannelAccess(byte[] aid, java.lang.String packageName, int pid) throws java.io.IOException, java.util.MissingResourceException { boolean checkRefreshTag = true; if ((mAccessControlEnfc) == null) { initializeAccessControl(); checkRefreshTag = false; } mAccessControlEnfc.setPackageManager(mContext.getPackageManager()); synchronized(mLock) { try { com.android.ide.security.ChannelAccess channelAccess = mAccessControlEnfc.setUpChannelAccess(aid, packageName, checkRefreshTag); channelAccess.setCallingPid(pid); return channelAccess; } catch (java.io.IOException e) { throw e; } catch (java.lang.Exception e) { throw e; } catch (java.lang.Exception e) { throw e; } } }
private synchronized void initializeAccessControl() throws java.io.IOException, java.util.List<java.util.List<java.lang.String> permissions = new com.android.ide.common.security.AccessControlControlEnforcer(this); if ((mAccessControlEnforcer) == null) { mAccessControlEnfc = new com.android.ide.common.security.AccessControlEnforcer(this); } try { mAccessControlEnfc = null; } catch (java.util.MissingResourceException e) { mAccessControlControlEnfc = null; throw e; } catch (java.util.MissingResourceException e) { mAccessControlControlEnfc = null; throw e; } }
@java.lang.Override public synchronized void addAddressToTunnelInterface(int tunnelResourceId, android.net.LinkAddress localAddr) { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.UserRecord tunnelInterfaceInfo = userRecord.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TetherInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow( tunnelResourceId); try { mSvrvConfig.getNetdInstance().interfaceAddAddress(unnelInterfaceInfo.mInterfaceName, localAddr.getAddress(), localAddr.getHostAddress(), localAddr.getPrefixLength()); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } catch (android.os.ServiceSpecificException e) { throw new android.os.RemoteException(e); } }
private void testIpSecTunnelInterface createVti(int resourceId, java.lang.String intfName) throws java.lang.Exception { android.net.IpSecTunnelInterfaceResponse dummyResponse = new android.net.IpSecTunnelInterfaceResponse(IpSecManager.Status.OK, resourceId, intfName); android.net.IpSecTunnelInterfaceResponse dummyResponse = new android.net.IpSecTunnelInterface(IpSecManager.Status.OK, resourceId, intfName); when(mMockIpSecService.createTunnelInterface(eq(android.net.IpSecManagerTest.GOOGLE_DNS_4.getHostAddress()), eq(android.net.IpSecManagerTest.GOOGLE_DNS_4_ALT.getHostAddress()), anyObject(), anyObject()); return mIpSecManager.createIpSecTunnelInterface(android.net.IpSecManagerTest.GOOGLE_DNS_4_ALT, mHostAddress); }
@org.junit.Test public void testAddRemoveAddressesFromVti() throws java.lang.Exception { android.net.IpSecManager.IpSecTunnelInterface tunnelIntf = createVti(android.net.IpSecManagerTest.DUMMY_RESOURCE_ID, android.net.IpSecManagerTest.VTI_INTRESS); android.net.IpSecManager.IpSecTunnelInterface tunnelIntf = createVti(android.net.IpSecManagerTest.DUMMY_RESOURCE_ID, android.net.IpSecManagerTest.VTI_INTRESS); assertEquals(mMockIpSecService.getAddress()); android.net.IpSecService.VtiKey fmockIpSecService = new android.net.IpSecManager(mockIpSecManagerTest.VTI_ADDRESS); assertEquals(mMockIpSecService.getAddressToTunnelInterface(android.net.IpSecManagerTest.DUMMY_RESOURCE_ID), eq(android.net.IpSecManagerTest.VTI_ADDRESS)); }
private android.net.IpSecTunnelInterfaceResponse createTunnel(java.lang.String localAddr, java.lang.String remoteAddr) { android.net.IpSecTunnelInterfaceResponse createTunnelInterface(mSourceAddr, mDestinationAddr, fakeNetwork, new android.os.Binder()); assertNotNull(createTunnelResp); assertEquals(createTunnelResp); assertEquals(IpSecManager.Status.OK, createTunnelResp.status); return createTunnelResp; }
@org.junit.Test public void testCreateVti() throws java.lang.Exception { android.net.IpSecManager.IpSecTunnelInterface tunnelIntf = createVti(android.net.IpSecManagerTest.DUMMY_RESOURCE_ID, android.net.IpSecManagerTest.VTI_INTRUE); assertEquals(android.net.IpSecManagerTest.VTI_INDF_NAME, tunnelIntf.getInterfaceName()); assertEquals(android.net.IpSecManagerTest.VTI_INTRIB_NAME, tunnelIntf.getInterfaceName()); assertEquals(android.net.IpSecService.VTI_INTRIB_NAME, tunnelIntf.getInterfaceName()); }
@java.lang.Override public synchronized void removeAddressFromTunnelInterface(int tunnelResourceId, android.net.LinkAddress localAddr) { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.UserRecord tunnelInterfaceInfo = userRecord.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TransportInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow( tunnelResourceId); try { mSvrvConfig.getNetdInstance().interfaceDelAddress( tunnelInterfaceInfo.mInterfaceName, localAddr.getAddress(), localAddr.getPrefixLength()); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } catch (android.os.ServiceSpecificException e) { throw new android.os.RemoteException(e); } }
@org.junit.Test public void testDeleteTunnelInterface() throws java.lang.Exception { android.net.IpSecTunnelInterfaceResponse createTunnelResp = createTunnel(mSourceAddr, mDestinationAddr); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); mIpSecService.deleteTunnelInterface(createTunnelResp.resourceId); assertEquals(0, userRecord.mTunnelInterface); verify(mMockNetd).removeVirtualTunnelInterface(eq(createTunnelResp.interfaceName)); try { userRecord.mTunnelInterfaceRecords.getRefcountedResourceOrThrow(createTunnelResp.interfaceName)); fail("Expected IllegalArgumentException on attempt to access to access to access to access resource"); } catch (java.lang.IllegalArgumentException expected) { } }
public void addAddress(android.net.LinkAddress address) throws java.io.IOException { try { mService.addAddressToTunnelInterface(mResourceId, address); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@org.junit.Test public void testTunnelInterfaceBinderDeath() throws java.lang.Exception { IpSecTunnelInterfaceResponse createTunnelResp = createTunnel(mSourceAddr, mDestinationAddr); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mTunnelInterfaceRecords.getRefcountedResourceOrThrow(createTunnelResp.resourceId); refcountedRecord.binderDied(); assertEquals(0, userRecord.mTunnelInterfaceRecords.mCurrent); assertEquals(0, userRecord.mTunnelInterfaceRecords.mCurrent); verify(mMockNetd).removeVirtualTunnelInterface(eq(createTunnelResp.interfaceName)); try { userRecord.mTunnelInterfaceRecords.getRefcountedResourceOrThrow(createTunnelResp.resourceId); fail("Expected IllegalArgumentException on attempt to access to access to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }
@org.junit.Test public void testAddRemoveAddressFromTunnelInterface() throws java.lang.Exception { android.net.IpSecTunnelInterfaceResponse createTunnelResp = createTunnel(mSourceAddr, mDestinationAddr); mIpSecService.addAddressToTunnelInterface(createTunnelResp.resourceId, mLocalInnerAddress); verify(mMockNetd).interfaceAddAddress(eq(createTunnelResp.interfaceName), eq(mLocalInnerAddress.getAddress()), eq(mLocalInnerAddress.getAddress()), eq(mLocalInnerAddress.getPrefixLength())); verify(mMockNetd).interfaceDelAddress(eq(createTunnelResp.interfaceName), eq(mLocalInnerAddress.getAddress()), eq(mLocalInnerAddress.getPrefixLength())); }
@org.junit.Test public void testCreateTunnelInterface() throws java.lang.Exception { IpSecTunnelInterfaceResponse response = createTunnel(mSourceAddr, mDestinationAddr); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mTunnelInterfaceRecords.getRefcountedResourceOrThrow(createTunnelResp.resourceId); assertEquals(1, userRecord.mTunnelInterfaceRecords.mCurrent); verify(mMockNetd).addVirtualTunnelInterface(eq(createTunnelResp.interfaceName), eq(mSourceAddr), anyInt(), anyInt()); }
public void removeAddress(android.net.LinkAddress address) throws java.io.IOException { try { mService.removeAddressFromTunnelInterface(mResourceId, address); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@java.lang.Override public void onResume() { super.onResume(); startForegroundService(new android.content.Intent(this, android.content.Intent(this, android.performatter.perpropermission.PROT_PROT_JniProvider.class)); startForegroundService(new android.content.Intent(this, android.permission.PRODUCT_PROT_Jni); java.lang.System.loadLibrary("perfettocts_jni"); new java.lang.Thread(new java.lang.Runnable() { public void run() { try { android.perfrequetproperproperproto.Producer(); } catch (java.lang.Exception ex) { ex.printStackTrace(); } } }).start(); }
@java.lang.Override public void onCreate() { android.app.NotificationManager manager = ((android.app.NotificationManager) (getSystemService(Context.NOTIFICATION_SERVICE))); android.app.NotificationChannel notificationChannel = new android.app.NotificationChannel(android.permission.properproto.Producer.ProducerService.NOTIF_CHANNEL_NAME, android.app.Notification.PREFIX_HIGH); notificationChannel.enableLights(true); notificationChannel.setDescription("enableVibrationistic service"); notificationChannel.enableLocks(true); notificationChannel.setLocks(true); notificationChannel.setLocks(Notification.VISIBILITY_PUBLIC); manager.createNotificationChannelTitle("dispatch service"); android.app.Notifier builder = new android.app.Notifier(this, android.permission.perproperproto.Producer.Producer.NotIF_CHANNEL_ID); builder.createNotificationChannel(notificationChannel); android.app.Notification.Builder builder = new android.app.Notification.Builder(this, android.app.Perprocessor.Builder(new java.lang.Runnable() { @java.lang.Override public void run() { try { android.app.Notification("perfettocts.protocts_jni"); new java.lang.Thread(new java.lang.Runnable() { @java.lang.Override public void run() { try { android.app.propermission.propermission.setupProducer(); } catch (java.lang.Exception ex) { ex.printStackTrace(); } } }).start(); }
@java.lang.Override public void onCreate() { android.app.NotificationManager manager = ((android.app.NotificationManager) (getSystemService(Context.NOTIFICATION_SERVICE))); android.app.NotificationChannel notificationChannel = new android.app.NotificationChannel(android.permission.Pperproperprocessor.P_CHANNEL_ID, android.app.Notification.PREFIX_CHANNEL_NAME, android.app.NotificationManager.IMPORT_HIGH); notificationChannel.enableLights(true); notificationChannel.setDescription("testprovisioning.provisioning.provisionalgorithm.AUTH_CHANNEL_NAME, android.app.Notification.PREFIX_PUBLIC); notificationChannel.enableLights(true); notificationChannel.setLockscreenVisibility(Notification.VISIBILITY_PUBLIC); manager.createNotificationChannel(notificationChannel); android.app.Notifier builder = new android.app.Notifier(this, android.permission.perproperproperproto.Produto.Producerator.NOTIFIBILITY_ID); builder.createNotificationChannel(notificationChannel); android.app.Notification.Producer processor = new android.app.Notifier(this, android.permission.perproperproto.Producer.Producerator.NOTIFIBILITY_ID, builder.build()); java.lang.System.loadLibrary("perfettocts_jni"); new java.lang.Thread(new java.lang.Runnable() { @java.lang.Override public void run() { try { android.app.propermission.properpropermission.Producerator.setupProducer(); } catch (java.lang.Exception ex) { ex.printStackTrace(); } } }).start(); }
public static com.android.lib.library.t.t.tzonet.country.CountryZoneTree create(com.android.lib.time.tzlookup.protocol.provisional.CountryZonesFile.Country country, java.time.Instant startInclusive, java.util.List<com.android.lib.lib.timezone.t.t.phone.CountryZonesFile.TimeZoneMapping> timeZoneMappings) { com.ibm.icu.text.TimeZoneNames timeZoneNames = com.ibm.icu.text.TimeZoneNames.getInstance(ULocale.US); java.util.List<com.android.libcore.timezone.t.tzonet.CountryZonesFile.TimeZoneMapping> timeZoneMappings = country.getTimeZoneMappingsList(); java.util.List<com.android.lib.icu.text.TimeZoneInfo> zoneInfos = com.android.ib.icu.text.TimeZoneInfo.getTimeZoneMapping(i); java.util.List<com.android.lib.icu.util.BasicTimeZone> zoneInfos = timeZoneMappings.get(i); int priority = timeZoneMapping.getPriority(); com.android.lib.icu.util.BasicTimeZone timeZone = ((com.ibm.icu.util.BasicTimeZone) (com.ibm.util.TimeZone.getTimeZone(timeZoneMapping.getId()))); if (timeZone == (com.ibm.icu.util.TimeZoneInfo.UNKNOWN_ZONE)) { throw new java.lang.IllegalArgumentException(("Unknown zone id: " + timeZone)); } com.android.libcore.tz.tz.tzlookup.ZoneInfo zoneInfo = com.android.libcore.tz.tz.tz.tzlookup.ZoneInfo.create(timeZoneNames, timeZone, startInclusive, endExclusive); zoneInfos.add(zoneInfo); } return com.android.libcore.timezone.tzlookup.CountryZoneInfo.create(country.getCountryZoneNames(), timeZone, startInclusive, endExclusive); }
@java.lang.Override public void visit(com.android.lib.library.tzdata.tzdata.CountryZoneTree.ZoneNode node) { if ((node.getParent()) == null) { return; } java.lang.String nodeName = enquote(node.getId()); java.lang.String nodeName = enquote(node.getId()); java.lang.String fromTimestamp = node.getEndInstant(); java.lang.String fromTimestamp = node.getEndInstant(); java.lang.String fromTimestamp = startInstant.toString(); java.lang.String toTimestamp = (endInstant == null)? "..." : endInstant.toString(); java.lang.String label = ((((node.getZoneInfosString()) + "\nFrom=") + fromTimestamp) + " to ") + toTimestamp) + ""; java.lang.String label = ((((node.getZoneInfosString()) + "]:") + " to ") + to ") + toTimestamp) + (node.getPeriodCount()); writeLine((((((nodeName + "]") + label) + "\"") + optionalColor) + "]")); for (com.android.libcore.tzlookup.CountryZoneInfo child : node.getChildren()) { writeLine((((nodeName + "]") + (enquote(child.getId()))) + ";")); } }
@java.lang.Override public void visit(com.android.lib.library.toylint.tzlookup.CountryZoneTree.ZoneNode node) { if ((node.getParent()) == null) { return; } if ((node.getChildrenCount()) == 1) { com.android.libcore.tzdata.tzlookup.CountryZoneTree.ZoneNode child = node.getChildren().iterator().iterator().next(); node.removeChild(child); int periodCountAdjustment = child.getPeriodCount(); com.android.libcore.tzdata.tzlookup.CountryZoneTree.ZoneNode descendant = child; while ((descriptor.getChildrenCount()) == 1) { descCountAdjustment = child.getPeriodCount(); } for (com.android.libcore.tzdata.tzlookup.CountryZoneTree.ZoneNode child : descCountAdjustment) { node.addChild(newChild); } node.adjustPeriodCount(periodCountAdjustment); } }
java.time.Instant getStartInstant() { int index = (primaryZoneInfo.getZoneOffsetPeriodCount()) - ((periodCount) + (periodCount)) - 1); return primaryZoneInfo.getZoneOffsetPeriod(index).getStartInstant(); }
public java.lang.String getId() { return timeZone.getID(); }
java.lang.String getZoneInfosString() { return zoneInfos.getZoneInfosString(); }
public static com.android.lib.library.t.t.t.t.tlookup.ZoneInfo create(com.ibm.icu.text.TimeZoneNames timeZoneNames, com.ibm.icu.util.BasicTimeZone timeZone, int priority, java.time.Instant startInclusive, java.util.List<com.ibm.icu.util.BasicTimeZone> zoneOffsetPeriods = new java.util.ArrayList<>(); java.util.List<com.ibm.icu.util.TimeZoneTransition> zoneOffsetPeriods = new java.util.ArrayList<>(); java.time.Instant start; if (transition == null) { end = endExclusive; } else { com.ibm.icu.util.TimeZone transition = timeZone.getNextTransition(start.toEpochMilli(), true); java.util.Time end; if (nextTransition!= null) { end = java.util.ArrayList<java.lang.Instant, java.lang.TimeZone>(); if (nextTransition!= null) { end = java.util.Time.of(nextTransition.getTime()); } else { end = end.next(); } } com.android.libcore.util.timezone.tzlookup.ZoneInfo.ZoneOffsetPeriod zoneOffsetPeriod = com.android.libcore.timezone.tzlookup.Zonetree.ZoneOffsetPeriod.create(timeZoneNames, timeZone, start, end); zoneOffsetPeriods.add(zoneOffsetPeriod); start = end; } while (start.isBefore(endExclusive)); return new com.android.libcore.util.TimeZoneInfo(timeZone, priority, zoneOffsetPeriods); }
@java.lang.Override public java.lang.String toString() { return ((((("ZoneInfo{" + "priority=") + (priority)) + ", timeZone=") + (timeZone.getID())) + (timeZone.getID())) + '}'; }
public static com.android.lib.time.timezone.tzdata.tz.tz.zone.ZoneOffsetPeriod create(com.ibm.icu.text.TimeZoneNames timeZoneNames, java.time.TimeMillis()) { int[] offsets = new int[2]; long startMillis = start.toEpochMilli(); long startMillis = start.toEpochMillis(); timeZone.getOffset(startMillis, false, offsets); java.lang.String canonicalID = com.ibm.icu.util.TimeZone.getCanonicalID(timeZone.getID()); com.ibm.icu.text.TimeZoneNames.NameType longNameTypeTypeTypeTypeTypeType.LIGHT; java.lang.String longName = timeZoneNames.getDisplayName(canonicalID, longNameType, startMillis); return new com.android.libcore.icu.text.tzlookup.Zonetreereereereereereereereereeree.ZoneOffsetPeriod(start, end, offsets[1], longName); }
private void determineNodePriority(java.util.List<com.android.libcore.tzdata.tzdata.tzlookup.ZoneInfo> zoneInfos) { com.android.libcore.tzdata.tzlookup.zones.ZoneInfo primaryCandidate = null; int priorityCount = 0; for (com.android.libcore.tzdata.tzlookup.Zones.ZoneInfo zoneInfo : zoneInfo : zoneInfo) { if ((primaryCandidate == null) || ((primaryCandidate.getPriority()) < (zoneInfo.getPriority()))) { primaryCandidate = 1; } else if ((primaryCandidate.getPriority()) == (zoneInfo.getPriority())) { priorityCount++; } } primaryZoneInfo = primaryCandidate; priorityClash = priorityCount > 1; }
public void compactTree() { classCompressionVisitor implements com.android.lib.timezone.tzdata.tzdata.CountryZoneTree.ZoneNodeVisitor { @java.lang.Override public void visit(com.android.lib.tzdata.tzdata.tzdata.CountryZoneTree.ZoneTree.ZoneNode node) { if ((node.getParent()) == null) { return; } if ((node.getChildrenCount()) == 1) { com.android.libcore.tzdata.tzlookup.CountryZoneTree.ZoneNode child = node.getChildren().iterator().iterator().next(); node.removeChild(child); int periodCountAdjustment = child.getPeriodCount(); com.android.libcore.tzdata.tzlookup.CountryZoneTree.ZoneNode child = child; while ((descriptor.getChildrenCount()) == 1) { descCountAdjustment = child.getPeriodCount(); com.android.libcore.tzdata.tzlookup.CountryZoneTree.ZoneNode descendant = child; while ((descriptor.getChildren()) == 1) { descCountAdjustment += (child.getPeriodCount()) { } for (com.android.libcore.tzdata.tzlookup.CountryZoneTree.ZoneNode newChild : subtree.getChildren()) { node.addChild(newChild); } node.adjustPeriodCount(periodCountAdjustment); } } } root.visitSelfThenChildrenRecursive(newCompressionVisitor()); }
public void binderDied() { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ("Bluetooth is dead-unregister " + (mPackageName))); } java.util.Iterator<android.os.IBinder> list_iterator = mBleApps.keySet().iterator(); while (list_iterator.hasNext()) { android.os.IBinder token = list_iterator.next(); com.android.server.BluetoothManagerService.ClientDeathRecipient deathRec = mBleApps.get(token); if (deathRec.equals(this)) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ("Bluetooth this BLE app " + (mPackageName))); } mBleApps.remove(token); break; } } if (isBleAppPresent()) { return; } if (isBleAppPresent()) { return; } if (com.android.server.BluetoothManagerService.DBG) android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ("Bluetooth this BLE app " + (mBluetooth.getState()) == (android.bluetooth.BluetoothAdapter.STATE_BLE_ON))) { mEnable = false; mBluetooth.onBrEdrDown(); } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, "Unable to call onBrEdrDown", e); } finally { mBluetoothLock.readLock().unlock(); } }
private boolean connectSocket() { try { if ((mPseRec) == null) { if (com.android.bluetooth.pbapclient.PbapClientConnectionHandler.DBG) android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, ("connectUnexpected UUID: " + (BluetoothUuid.PBAP_PSE.getUuid()))); mSocket = mDevice.createRfcommSocketToServiceRecord(BluetoothUuid.PBAP_PSE.getUuid()); } else if ((mPseRec.getL2capPsm())!= (com.android.bluetooth.pbapclient.PbapClientConnectionHandler.L2CAP_INVALID_PSM)) { if (com.android.bluetooth.pbapclient.PbapClientConnectionHandler.DBG) android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, ("connectivityPbap: " + (mPseRec.getL2capPsm()))); mSocket = mDevice.createRfcommSocket(mPseRec.getL2capPsm()); } else { if (com.android.bluetooth.pbapclient.PbapClientConnectionHandler.DBG) android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, ("connect channel: " + (mPseRec.getRfcommChannelNumber()))); mSocket = mDevice.createRfcommSocket(mPseRec.getRfcommChannelNumber()); } if ((mSocket)!= null) { mSocket.connect(); return true; } else { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, ("Failed to create socket: " + (mPseRec.getRfcommChannelNumber()))); } } catch (java.io.IOException e) { android.util.Log.e(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, "Failed to create socket"); } }
private void removeUncleanAccounts() { android.accounts.AccountManager accountManager = android.accounts.AccountManager.get(this); android.accounts.Account[] accounts = accountManager.getAccountsByType(getString(R.string.pbap_account_type)); if (com.android.bluetooth.pbapclient.PbapClientService.DBG) android.util.Log.d(com.android.bluetooth.pbapclient.PbapClientService.TAG, (("account " + (accounts.length)) + " unclean accounts")); for (android.accounts.Account acc : accounts) { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientService.TAG, ("Invalid " + acc)); accountManager.removeAccountExplicitly(accounts); } try { getContentResolver().delete(CallLog.Calls.CONTENT_URI, null, null); } catch (java.lang.IllegalArgumentException e) { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientService.TAG, "Unable Logs could not be deleted, the account"); } }
java.lang.String getArtifactFetcher(com.android.tradefed.build.BuildInfo buildInfo) { com.android.tradefed.util.VtsVtsVendorConfigFileUtil configFileUtil = new com.android.tradefed.util.VtsVtsVendorConfigFileUtil(); if (configFileUtil.IsAaptConfig(buildInfo)) { return configFileUtil.getVendorConfigVariable("build_artifact_fetcher"); } return null; }
java.io.File createTempDir(com.android.tradefed.device.ITestDevice device) throws java.io.IOException { java.io.File file = com.android.tradefed.util.FileUtil.createTempDir(device.getSerialNumber()); try { return com.android.tradefed.util.FileUtil.createTempDir(device.getSerialNumber()); } catch (java.io.IOException e) { throw new java.io.IOException(e); } }
@java.lang.Override protected boolean start() { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "AvrcP Target: the AVRCP Target Service"); mCurrentData = new com.android.bluetooth.avrcp.MediaData(null, null, null); mNativeInterface = com.android.bluetooth.avrcp.MediaData.getInterface(); mReceiver = new com.android.bluetooth.avrcp.AvrcpTargetService.AvrcpBroadcastReceiver(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothA2dp.ACTION_ACTIVE_DEVICE_CHANGED); registerReceiver(mReceiver, filter); return true; }
private void addActiveLog(int reason, java.lang.String packageName, boolean enable) { synchronized(mActiveLogs) { if ((mActiveLogs.size()) > (com.android.server.BluetoothManagerService.ACTIVE_LOG_MAX_SIZE)) { mActiveLogs.remove(new com.android.server.BluetoothManagerService.ActiveLog(reason, packageName, enable, java.lang.System.currentTimeMillis())); } mActiveLogs.add(new com.android.server.BluetoothManagerService.ActiveLog(reason, packageName, enable, java.lang.System.currentTimeMillis())); if (enable) { android.util.StatsLog.w(stats.BLUid, statsLog.BLUETOOTH_ENABLED_STATE_CHANGED_CHANGED_STATE_CHANGED_CHANGED_STATE_CHANGED_DISABLED, packageName); } else { android.util.StatsLog.write_non_chained(StatsLog.BLUid(), null, statsLog.BLUETOOTH_ENABLED_STATE_CHANGED_CHANGED_STATE_CHANGED); } } }
public java.io.FileDescriptor getSocket() { if ((mPfd) == null) { return null; } return mPfd.getFileDescriptor(); }
public void addAddress(android.net.LinkAddress address) throws java.io.IOException { }
public void removeAddress(android.net.LinkAddress address) throws java.io.IOException { throw new java.lang.UnsupportedOperationException(); }
public void setActiveDevice(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.BluetoothDevice device) { android.util.Log.d(com.android.bluetooth.Bluetooth.BluetoothAidService.TAG, ("setActiveDevice" + device)); } if ((device == null) && ((mActiveDeviceHiSyncId)!= (android.bluetooth.BluetoothHearingAid.HearingAid.ID_SYNC_ID_INVALID))) { reportActiveDevice(null); mActiveDeviceHiSyncId = android.bluetooth.BluetoothHearingAid.HearingAid.HearingAid.Hearing_SYNC_ID_INVALID; return; } java.lang.Long deviceHiSyncId = mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HearingAid.ID_SYNC_ID_INVALID); if (deviceHiSyncId!= (mActiveDeviceHiSyncId)) { reportActiveDevice(deviceHiSyncId); mActiveDeviceHiSyncId = deviceHiSyncId; } }
boolean isActiveDevice(android.bluetooth.BluetoothDevice device) { return (mActiveDeviceHiSyncId) == (android.bluetooth.telephony.BluetoothAidService.DBG) { android.util.Log.d(com.android.bluetooth.bluetooth.renders.BluetoothAidService.TAG, ("isActiveDevice:" + device)); }
boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.Bluetooth.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (com.android.bluetooth.telephony.BluetoothAidService.DBG) { android.util.Log.d(com.android.bluetooth.bluetooth.holding.BluetoothAidService.TAG, ("BluetoothAidService " + device)); } long hiSyncId = mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID); synchronized(mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID); synchronized(mStateMachineHiSyncId) { com.android.bluetooth.BluetoothDevice storedDevice = mStateMachineHiSyncIdMap.get(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.BluetoothHearingAid.HearingAid.HearingAid_SYNC_ID_INVALID_INVALID); return true; } for (android.bluetooth.BluetoothDevice storedDevice : mDeviceHiSyncIdMap.keySet()) { if (((mDeviceHiSyncIdMap.getOrDefault(storedDevice, BluetoothHearingAid.HearingAid.HearingAid_SYNC_ID_INVALID))!= hiSyncId) { continue; } synchronized(mStateMachineHiSync) { com.android.bluetooth.BluetoothDevice storeDevice = mStateMachineHiSync.get(storedDevice); if (sm == null) { android.util.Log.e(com.android.bluetooth.bluetooth.holdaid.HearingAidService.TAG, (("Got disconnect request for " + device) + ": no stateMachineId) + "; } sm.sendMessage(mDevice); } } return true; }
private synchronized void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { android.util.Log.e(com.android.bluetooth.telecom.BluetoothProfile.TAG, ((((("onDevice device=" + device) + " fromState=") + fromState) + fromState) + " toState=") + toState)); return; } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (getConnectedDevices().isEmpty())) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { if (com.android.bluetooth.BluetoothDevice.DBG) { android.util.Log.d(com.android.bluetooth.bluetooth.BluetoothDevice.TAG, ("onDevice device " + isBluetooth.Remove stateMachine")); } removeStateMachine(device); } removeStateMachine(device); } }
long getHiSyncId(android.bluetooth.BluetoothDevice device) { return mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HearingAid.HearingAid_SYNC_ID_INVALID); }
synchronized boolean registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.IBluetoothHidDeviceAppQosSettings outQos, android.bluetooth.IBluetoothHidDeviceCallback callback) { android.app.ActivityManager activityManager = ((android.app.ActivityManager) (getSystemService(com.android.bluetooth.hid.ACTIVITY_SERVICE))); if ((mUserUid)!= 0) { int currentUserImportance = activityManager.getUidImportance(mUserUid); if (currentUserImportance > (ActivityManager.RunningAppProcessInfo.IMPORTANCE_VISIBLE)) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, ("getCallingPid() current user is not visible app is registered"); unregisterApp(); } else { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, ("getCallingPid() calling uid=" + (mUserUid))); } int callingUid = android.os.Binder.getCallingUid(); mCallback = callback; return mCallback = callback; return mHidDeviceNativeInterface.registerApp(sdp.name, sdp.description, sdp.provider, sdp.descriptors, (inQos == null? null : inQos.toArray())), (outQos == null? null : outQos.toArray())); }
public boolean registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, android.bluetooth.BluetoothHidDevice.Callback callback) { android.util.Log.v(android.bluetooth.BluetoothHidDevice.TAG, ((((((((("updateAppSdpSdpSdp=" + sdp) + sdp) + " inQos=") + inQos) + ", outQos=") + outQos) + ", executor=") + executor) + executor) + executor) + ", callback=") + executor) + callback)); boolean result = false; if (ssdp == null) { throw new java.lang.IllegalArgumentException("Invalid parameter cannot be null"); } if (callback == null) { throw new java.lang.IllegalArgumentException("Invalid parameter cannot be null"); } final android.bluetooth.BluetoothHidDevice service = mService; if (service!= null) { try { android.bluetooth.BluetoothHidDevice.CallbackWrapper cbw = new android.bluetooth.BluetoothHidDevice.CallbackWrapper(executor, callback); result = service.registerApp(sdp, inQos, outQos, cbw); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHidDevice.TAG, e.toString()); } } else { android.util.Log.w(android.bluetooth.BluetoothHidDevice.TAG, "Failed to service"); } return result; }
public void testServiceForegroundDuration() throws java.lang.Exception { batteryOnScreenOff(); installPackage(com.android.server.cts.BatteryStatsValidationTest.DEVICE_SIDE_TEST_APK, true); getDevice().executeShellCommand("st", "", 5, 0, 0); final long startTime = java.lang.System.currentTimeMillis(); runDeviceTests(com.android.server.cts.BatteryStatsValidationTest.DEVICE_SIDE_TEST_PACKAGE, ".BatteryStatsProcessStateTests", "testForegroundService"); assertValue("st", "", ((long) (2000 * 0.8)), ((java.lang.System.currentTimeMillis()) - startTime)); batteryOffScreenOn(); }
@java.lang.Override public android.net.NetworkStats getDetailedUidStats(int limitUid, java.lang.String[] limitIfaces, int limit) { try { android.net.NetworkStats stats = getNetworkStatsUidDetail(); stats.filter(limitUid, limitIfaces, limitTag); return stats; } catch (android.os.RemoteException e) { android.util.Log.wtf(com.android.server.net.NetworkStatsService.TAG, "Error compiling UID stats", e); return new android.util.Log.wtf(0L, 0); } }
private void setValues(int i, android.net.NetworkStats.Entry values) { iface[i] = values.iface; uid[i] = values.uid; set[i] = values.metered; set[i] = values.metered; metered[i] = values.metered; metered[i] = values.metered; defaultNetwork[i] = values.defaultNetwork; defaultNetwork[i] = values.defaultNetwork; defaultNetwork[i] = values.rxBytes; rxPackets[i] = values.rxBytes; txPackets[i] = values.txPackets; txPackets[i] = values.transactions; operations[i] = values.transitions; }
@org.junit.Test public void testFilter_UidFilter() { final int testUid = 10101; android.net.NetworkStats.Entry entry1 = new android.net.NetworkStats.Entry("test1", 10100, android.net.NetworkStats.TAG, android.net.NetworkStats.TAG, "Test1", android.net.NetworkStats.TAG, "Test1", android.net.NetworkStats.TAG, android.net.NetworkStats.TAG, "Test.net.TAG, "Test.0.0, android.net.NetworkStats.TAG, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.TAG, "Test.net.TAG, android.net.NetworkStats.TAG, "Test.net.TAG, "Test.0", android.net.NetworkStats.TAG, android.net.NetworkStats.TAG, "Test.net.TAG, "Test.netWORKERED_NO, android.net.NetworkStats.TAG_NETWORK_NO, android.net.NetworkStats.TAG, "Test.net.TAG_NONE, android.net.NetworkStats.TAG_NETWORK_NO, android.net.NetworkStats.TAG, "NetworkTest.net.TAG_NO_NO, android.net.NetworkStats.TAG_NETWORK_NO, android.net.NetworkStats.TAG_NETWORK_NO, android.net.NetworkStats.TAG_NETWORK_NO, android.net.NetworkStats.TAG_NETWORK_NO, 50000L, 25000L, 100000L, 0L, 0L, 0L, 0); android.net.NetworkStats stats = new android.net.NetworkStats(android.net.NetworkStatsTest.TAG, "test2", null, android.net.NetworkStats.TAG, "Test", null, stats.getValues(0, null)); assertEquals(entry2, stats.getValues(0, null)); assertEquals(entry3, stats.getValues(0, null)); assertEquals(entry3, stats.getValues(1, null)); }
@org.junit.Test public void testFilter_TagFilter() { final int testTag = 123; final int otherTag = 123; final int otherTag = 456; android.net.NetworkStats.Entry entry1 = new android.net.NetworkStats.Entry("test1", 10101, android.net.NetworkStats.TEST_DEFAULT, android.net.NetworkStats.DEFAULT_NO, android.net.NetworkStats.DEFAULT_NO, android.net.NetworkStats.DEFAULT_NO, android.net.NetworkStats.DEFAULT_NO, android.net.NetworkStats.DEFAULT_NO, android.net.NetworkStats.DEFAULT_NO, android.net.NetworkStats.DEFAULT_NO, android.net.NetworkStats.DEFAULT_NO, android.net.NetworkStats.DEFAULT_NO, android.net.NetworkStats.DEFAULT_NO, android.net.NetworkStats.DEFAULT_NO, android.net.NetworkStats.DEFAULT_NO, android.net.NetworkStats.DEFAULT_NO, android.net.NetworkStats.DEFAULT_NO, android.net.NetworkStats.DEFAULT_NO, android.net.NetworkStats.DEFAULT_NO, android.net.NetworkStats.DEFAULT_NO, android.net.NetworkStats.DEFAULT_NO, android.net.NetworkStats.DEFAULT_NO, android.net.NetworkStats.DEFAULT_NO, android.net.NetworkStats.DEFAULT_NO, android.net.NetworkStats.DEFAULT_NETWORK_NO, android.net.NetworkStats.DEFAULT_NO, android.net.NetworkStats.DEFAULT_NO, android.net.NetworkStats.DEFAULT_ALL, null, testTag); android.net.NetworkStats stats = new android.net.NetworkStats(android.net.NetworkStatsTest.TEST_ALL, null, testTag, testTag, testTag); assertEquals(2, stats.getValues(0, null)); assertEquals(entry2, stats.getValues(0, null)); assertEquals(entry2, stats.getValues(0, null)); }
@org.junit.Test public void testFilter_NoFilter() { android.net.NetworkStats.Entry entry1 = new android.net.NetworkStats.Entry("test1", 10100, android.net.NetworkStats.TAG, "Test1", android.net.NetworkStats.TAG, android.net.NetworkStats.TAG, "Test1", android.net.NetworkStats.TAG, android.net.NetworkStats.TAG, "Test.net.TAG, "Test1", android.net.NetworkStats.TAG, android.net.NetworkStats.TAG, "Test.net.TAG, "Test1", android.net.NetworkStats.TAG, android.net.NetworkStats.TAG, "Test.net.TAG, 0, android.net.NetworkStats.TAG_NETWORK_NO, android.net.NetworkStats.TAG, "Test.net.TAG, "Test.net" + (android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.TAG, "TEST_NO, android.net.NetworkStats.TAG, "TEST_NO, android.net.NetworkStats.TAG_NETWORK_NO, android.net.NetworkStats.TAG_NETWORK_NO, android.net.NetworkStats.TAG_NETWORK_NO, android.net.NetworkStats.TAG_NETWORK_NO, android.net.NetworkStats.TAG_NETWORK_NO, 50000L, 25000L, 0, 0); android.net.NetworkStats stats = new android.net.NetworkStats(android.net.NetworkStatsTest.TEST_START, 3).addValues(entry1).addValues(entry2).addValues(entry3); test2 = android.net.NetworkStats.UID_ALL; assertEquals(3, stats.size()); assertEquals(entry2, stats.size()); assertEquals(entry2, stats.size()); assertEquals(entry2, stats.getValues(1, null)); assertEquals(entry2, stats.getValues(1, null)); }
@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Binder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); restrictRequestUidsForCaller(nc); restrictBackgroundRequestForCaller(nc); ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.LISTEN); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, NETWORK_NONE, nextNetworkRequest.LISTEN); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log(("connectivity for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); return networkRequest; }
public boolean hasUseBackgroundNetworksPermission(int uid) { final java.lang.String[] names = mPackageManager.getPackagesForUid(uid); if ((null == names) || ((names.length) <= 0)) return false; try { final android.content.pm.PackageInfo app = mPackageManager.getPackageInfo(names[0], com.android.server.connectivity.GET_PERMISSIONS); return hasUseBackgroundNetworksPermission(app); } catch (android.os.RemoteException e) { com.android.server.connectivity.PermissionMonitor.loge(("Package: " + (names[0])); return false; } }
public void testOnlyCrypto() throws java.lang.Exception { android.net.IpSecAlgorithm cipher = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPPROTO_CBC_NULL, android.net.cts.IPPROTO_ECP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, null, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, null, null, false); }
public void testJustAuth() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IPPROTO_HOSTBACK, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, android.net.cts.IPPROTO_LOOPBACK, null, null, false, false); }
public static void updateTracing(android.content.Context context, boolean force) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if ((prefs.getBoolean(context.getString(R.string.prekey_key_tracing_on), false))!= (com.android.traceur.AttraceUtils.isTracingOn())) || force) { if (prefs.getBoolean(context.getString(R.string.prekey_tracing_on), false)) { java.lang.String activeAvailableTags = com.android.trace.Receiver.getActiveTags(context, prefs, true); if (!(android.text.TextUtils.equals(activeAvailableTags, com.android.traceur.ReplaceAvailableTags(context, prefs, com.android.traceur.Receiver.getActiveTags(context, prefs, com.android.traceur.Receiver.getActiveTags(context, prefs, com.android.trace.Receiver.getActiveTags(context, prefs, com.android.traceur.Receiver.getActiveTags(context, prefs, com.android.traceur.Receiver.BUFFER_SIZE_KB, apps); } else { com.android.trace.ReaceUtils.cancelRootNotificationStart(context); } } }
public static void atraceStart(java.lang.String tags, int bufferSizeKb, java.util.Set<java.lang.String> apps) { java.lang.String appParameter = (apps.isEmpty())? "" : "-a "a "a " + (android.text.TextUtils.join(",", apps)); java.lang.String cmd = android.text.TextUtils.join(com.android.traceur.AttraceUtils.join(",", apps)); if (((("start-start -c -c -b " + bufferSizeKb) + " ") + appParameter; appParameter; android.util.Log.v(com.android.traceur.AttraceUtils.TAG, ("AsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsync: " + cmd)); try { java.lang.Process attrace = com.android.traceur.AtaceUtils.exec(cmd); if ((atrace.waitFor())!= 0) { android.util.Log.e(com.android.traceur.AtaceUtils.TAG, ("Starting atace: " + (atrace.exitValue()))); } } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } }
@java.lang.Override public int compare(@javax.annotation.Nonnull java.lang.String one) { return one.packageName.compareToIgnoreCase(two.packageName); }
private void refreshApps() { android.content.pm.PackageManager packageManager = getContext().getPackageManager(); java.util.List<android.content.pm.ApplicationInfo> availableApps = packageManager.getInstalledApplications(0); java.util.Collections.sort(availableApps, com.android.trace.MainFragment.mPackageComparator); java.util.ArrayList<java.lang.String> entries = new java.util.ArrayList<java.lang.String>(availableApps.size()); java.util.ArrayList<java.lang.String> values = new java.util.ArrayList<java.lang.String>(availableApps.size()); for (android.app.ApplicationInfo app : availableApps) { entries.add(app.packageName); values.add(app.packageName); values.add(app.getArray(new java.lang.String[0])); } mRefreshing = true; try { mApps.setEntries(entries.toArray(new java.lang.String[0])); mApps.setEntryValues(values.toArray(new java.lang.String[0])); mApps.setEntryValues(values.toArray(new java.lang.String[0])); } finally { mRefreshing = false; } }
@org.junit.Test @android.support.test.filters.MediumTest public void testElementsOnMainScreen() throws java.lang.Exception { assertNotNull("Failed trace switch (android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text("The trace")); assertNotNull("The share trace", " + "")); mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text("Categories")), com.android.trace.uiautomator.Traceurator.wait(android.support.test.uiautomator.By.text("Categories")), com.android.trace.uiautomator.Traceurator.TIMEOUT)); assertNotNull("The set categories element not found.", mDevice.wait(android.support.test.uiautomator.Traceurator.By.text("Categories")), com.android.trace.uiautomator.Traceurator.waitFor.findObject(android.support.test.uiautomator.By.text("Categories")), com.android.trace.uiautomator.TraceurAppTests.TIMEOUT)); assertNotNull("The Settings element not found."); mDevice.wait(android.support.test.uiautomator.Traceurator.findObject(android.support.test.uiautomator.By.text("Applications")), com.android.trace.uiautomator.TraceurAppTests.TIMEOUT)); assertNotNull("The Settings grid switch (android.support.uiautomator) { case android.test.uiautomator.TraceurAppTests.TIMEOUT_SHOW_NAME : "android.com.android.trace.uiautomator.TraceurAppTests.TIMEOUT)); assertNotNull("android.wait.ui.Trace", ("android.support.test.Traceurator.getDefault().text("Android Settings")); } }
@java.lang.Override public void setDnsConfigurationForNetwork(int netId, java.lang.String[] domain, java.lang.String[] domain, int[] params, boolean useTls, java.lang.String tlsHostname, java.lang.String[] tlsServers) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.CONNECTIVITY_INTERNAL, com.android.server.NetworkManagementService.TAG); final java.lang.String[] tlsFingerprintStackTracer = new java.lang.String[0]; try { mNetdService.setResolverConfiguration(netId, serverId, domain, params, useTlsHostname, tlsServer); } catch (android.os.RemoteException e) { throw new java.lang.RuntimeException(e); } }
public void setDnsConfigurationForNetwork(int netId, android.net.LinkProperties lp, boolean isDefaultNetwork) { final com.android.server.connectivity.DnsManager.PrivateDnsConfig privateDfg = mPrivateDnsMap.get(netId); final boolean useTls = (privateDnsCfg!= null) && (privateDnsCfg.useTls); final boolean strictMode = (privateDnsCfg!= null) && (privateDnsCfg.isStrictMode()); final java.lang.String tlsHostname = (strictMode)? privateDnsCfg.hostname : ""; final java.lang.String[] tlsServers = (strictMode)? privateDns.hostname : ""; final java.lang.String[] tlsServers = (strictMode)? privateDns.0 : ""; final java.lang.String[] tlsServers = android.net.NetworkUtils.makeStrings(privateDnsCfg.ips).filter((ip.ips).filter((ip) -> lp.isReachable(ip))).collect(java.util.Stream.Collections.toList())) : new java.lang.String[0]; final java.lang.String[] values = android.net.NetworkUtils.makeStrings(lp.getDnsServers()); final java.lang.String[] domainStrs = com.android.server.connectivity.DnsManager.getDomainStrings(lp.getDomains()); updateParametersSettings(); final int[] params = new int[]{ mSampleValidity, mMaxSamples, mMaxSamples }; android.util.Slog.d(com.android.server.connectivity.DnsManager.TAG, java.lang.String.format("Got %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, java.util.Arrays.toString(domainStrs), useTls, tls, java.util.Arrays.toString(domainStrs), useTls, tls, java.util.Arrays.toString(domainStrs), java.util.Arrays.toString(net.asList(
public void dispose() { synchronized(mLock) { if (com.android.internal.telephony.uicc.UiccProfile.DBG) com.android.internal.telephony.uicc.UiccProfile.log("UiccProfile: " + e)); unregisterAllAppEvents(); unregisterCurrAppEvents(); unregisterCurrAppEvents(); if ((mUiccCard) instanceof com.android.internal.telephony.uicc.UiccCard) { ((com.android.internal.telephony.uicc.EuiccCard) (mUiccCard)).unregisterForEidReady(mHandler); } mCi.unregisterForOffOrNotAvailable(mHandler); if ((mCatService)!= null) mCatService.dispose(); for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app!= null) { app.dispose(); } } mCatService = null; mUiccApplications = null; mUiccApplications = null; mCarrierPrivilegeRules = null; } }
@java.lang.Override public void releaseConnectionService(com.android.server.telecom.ConnectionServiceFocusManager.ConnectionServiceFocus connectionService) { mCalls.stream().filter((c) -> c.getConnectionServiceWrapper().equals(connectionService.getComponentName()))); }
public int registerStatusListener(@android.annotation.NonNull android.telephony.mbms.DownloadRequest request, @android.annotation.NonNull java.util.concurrent.Executor executor, @android.telephony.mbms.DownloadStatusListener listener) { android.telephony.mbms.VmsDownloadService downloadService = mService.get(); if (downloadService == null) { throw new java.lang.IllegalStateException("DownloadService not yet bound"); } android.telephony.mbms.VmsDownloadStatusListener internalListener = new android.telephony.mbms.InternalDownloadStatusListener(listener, executor); try { int result = downloadService.registerStatusListener(request, internalListener); if (result!= (android.telephony.mbms.MbmsErrors.SUCCESS)) { if (result == (MATCH_DOWNLOAD_DOWNLOAD_REQUEST)) { throw new java.lang.IllegalArgumentException("Unexpected download request."); } return result; } } catch (android.os.RemoteException e) { mService.set(null); android.telephony.MbmsDownloadSession.sIsInitialized.set(false); return android.telephony.mbms.MbmsDownloadSession.ERROR_MIDDLEWARE_LOST; } mInternalDownloadStatusListeners.put(listener, internalListener); return android.telephony.mbms.MbmsDownloadSession.SUCCESS; }
@java.lang.Override public int registerProgressListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadProgressListener listener) throws android.os.RemoteException { mDownloadProgressListener = listener; return android.telephony.mbms.MbmsErrors.SUCCESS; }
public int unregisterStatusListener(@android.annotation.NonNull android.telephony.mbms.DownloadRequest request, @android.annotation.NonNull android.telephony.mbms.DownloadStatusListener listener) { try { android.telephony.mbms.VmsDownloadService downloadService = mService.get(); if (downloadService == null) { throw new java.lang.IllegalStateException("DownloadService not yet bound"); } android.telephony.mbms.VmsDownloadService downloadService = mInternalDownloadStatusListeners.get(listener); if (internalListener == null) { throw new java.lang.IllegalArgumentException("Unsupported listener was never registered"); } android.telephony.mbms.InternalDownloadStatusListener internalListener = mInternalDownloadStatusListeners.get(listener); if (result!= (android.telephony.mbms.MbmsErrors.SUCCESS)) { if (result == (MATCH_UNKNOWN_DOWNLOAD_REQUEST)) { throw new java.lang.IllegalArgumentException("Unexpected download request."); } return result; } } catch (android.os.RemoteException e) { mService.set(null); android.telephony.mbmsDownloadSession.sIsInitialized.set(false); return android.telephony.mbms.MbmsDownloadSession.ERROR_MIDDLEWARE_LOST; } } finally { android.telephony.mbms.InternalDownloadStatusListener internalCallback = mInternalDownloadStatusListeners.remove(listener); if (internalCallback!= null) { internalCallback.stop(); } } return android.telephony.mbms.MbmsErrors.SUCCESS; }
public int unregisterProgressListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadProgressListener listener) throws android.os.RemoteException { return 0; }
public int registerProgressListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadProgressListener listener) throws android.os.RemoteException { return 0; }
public int unregisterStatusListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadStatusListener listener) throws android.os.RemoteException { return 0; }
public final int unregisterStatusListener(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadStatusListener listener) throws android.os.RemoteException { if (downloadRequest == null) { throw new java.lang.NullPointerException("downloadRequest request must not be null"); } if (listener == null) { throw new java.lang.IllegalArgumentException("listener must not be null"); } android.telephony.mbms.DeathRecipient deathRecipient = mDownloadCallbackDeathRecipients.remove(listener.asBinder()); if (deathRecipient == null) { throw new java.lang.IllegalArgumentException("Death listener"); } listener.asBinder().unlinkToDeath(deathRecipient, 0); android.telephony.mbms.DownloadStatusListener exposedCallback = mDownloadStatusListenerBinderMap.remove(listener.asBinder()); if (exactoredCallback == null) { throw new java.lang.IllegalArgumentException("getDownloadStatusListener() - (android.telephony.mbms.DownloadStatusListener.Holder())); } return unregisterStatusListener(downloadRequest, exposedCallback); }
public int unregisterProgressListener(@android.annotation.NonNull android.telephony.mbms.DownloadRequest request, @android.annotation.NonNull android.telephony.mbms.DownloadProgressListener listener) { try { android.telephony.mbms.VmsDownloadService downloadService = mService.get(); if (downloadService == null) { throw new java.lang.IllegalStateException("Middleware not yet bound"); } android.telephony.mbms.VmsDownloadService downloadService = mService.get(); if (downloadService == null) { throw new java.lang.IllegalStateException("Provided not yet bound"); } android.telephony.mbms.InternalDownloadProgressListener internalListener = mInternalDownloadProgressListeners.get(listener); if (internalListener == null) { throw new java.lang.IllegalArgumentException("Provided listener was never registered"); } try { int result = downloadService.unregisterProgressListener(request, internalListener); if (result!= (AndroidManager.DownloadErrors.ERROR_UNKNOWN_DOWNLOAD_REQUEST)) { throw new java.lang.IllegalArgumentException("Unknown download request."); } return result; } catch (android.os.RemoteException e) { mService.set(null); android.telephony.mbms.MbmsDownloadSession.sIsInitialized.set(false); return android.telephony.mbms.MbmsDownloadProgressListener; } return android.telephony.mbms.MbmsErrors.SUCCESS; }
public final int unregisterProgressListener(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadProgressListener listener) throws android.os.RemoteException { if (downloadRequest == null) { throw new java.lang.NullPointerException("downloadRequest request must not be null"); } if (listener == null) { throw new java.lang.IllegalArgumentException("listener must not be null"); } android.telephony.mbms.Void deathRecipient = mDownloadCallbackDeathRecipients.remove(listener.asBinder()); if (deathRecipient == null) { throw new java.lang.IllegalArgumentException("disconnecting listener"); } listener.asBinder().unlinkToDeath(deathRecipient, 0); android.telephony.mbms.DownloadProgressListener exposedCallback = mDownloadProgressListenerBinderMap.remove(listener, 0); android.telephony.mbms.DownloadProgressListener exposedCallback = mDownloadProgressListenerBinderMap.remove(listener.asBinder()); if (exactoredCallback == null) { throw new java.lang.IllegalArgumentException("getDownloadProgressListener() cannot be null"); } return unregisterProgressListener(downloadRequest, exposedCallback); }
public int registerProgressListener(@android.annotation.NonNull android.telephony.mbms.DownloadRequest request, @android.annotation.NonNull java.util.concurrent.Executor executor, @android.telephony.mbms.DownloadProgressListener listener) { android.telephony.mbms.VbmsDownloadService downloadService = mService.get(); if (downloadService == null) { throw new java.lang.IllegalStateException("Middleware not yet bound"); } android.telephony.mbms.VmsDownloadProgressListener internalListener = new android.telephony.mbms.InternalDownloadProgressListener(listener, executor); try { int result = downloadService.registerProgressListener(request, internalListener); if (result!= (android.telephony.mbms.MbmsErrors.SUCCESS)) { if (result == (MATCH_UNKNOWN_DOWNLOAD_REQUEST)) { throw new java.lang.IllegalArgumentException("Unknown download request."); } return result; } } catch (android.os.RemoteException e) { mService.set(null); android.telephony.MbmsDownloadSession.sIsInitialized.set(false); return android.telephony.mbms.MbmsDownloadSession.ERROR_MIDDLEWARE_LOST; } mInternalDownloadProgressListeners.put(listener, internalListener); return android.telephony.mbms.Mbms.MbmsErrors.SUCCESS; }
public int registerStatusListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadStatusListener listener) throws android.os.RemoteException { return 0; }
@java.lang.Override public final int registerStatusListener(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadStatusListener listener) throws android.os.RemoteException { final int uid = android.os.Binder.getCallingUid(); if (downloadRequest == null) { throw new java.lang.NullPointerException("downloadRequest request must not be null"); } if (listener == null) { throw new java.lang.NullPointerException("list downloadRequest request must not be null"); } android.telephony.mbms.DownloadStatusListener exposedCallback = new android.telephony.mbms.MbmsDownloadServiceBase.VendorDownloadStatusListener(listener) { @java.lang.Override protected void onRemoteException(android.os.RemoteException e) { onAppCallbackDied(android.os.RemoteException e) { onAppCallbackDied(downloadRequest.getSubscriptionId()); } }; int result = registerStatusListener(downloadRequest, exposedCallback); if (result == (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.mbms.Vms.DeathRecipient deathRecipient = new android.telephony.mbms.Void() { @java.lang.Override public void binderDied() { onAppCallbackDied(android.telephony.mbms.MbmsErrors.SUCCESS)) { onAppCallbackDied(listener.asBinder()); mDownloadStatusListenerBinderMap.remove(listener.asBinder()); mDownloadCallbackDeathRecipients.remove(listener.asBinder()); mDownloadCallbackDeathRecipients.remove(listener.asBinder()); } }; mDownloadCallbackDeathRecipients.put(listener.asBinder(), deathRecipient); listener.asBinder().linkToDeath(deathRecipient, 0); mDownloadStatusListenerBinderMap.put(listener.asBinder(), logeCallback); } return; }
public void testFullCallback() throws java.lang.Exception { int sampleInt = 10; android.telephony.embms.cts.MMMMMmsDownloadCallbackTest.TestDBCCallback status = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCCallback(); android.telephony.mbms.cts.MbmsDownloadCallbackTest.TestDPCallbackwardCallback = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCallbackendCallback(); android.telephony.mbms.DownloadRequest request = downloadRequestTemplate.build(); mDownloadSession.registerStatusListener(request, mCallbackExecutor, statusCallback); mDownloadSession.registerStatusListener(request, mCallbackExecutor, statusCallback); mDownloadSession.registerProgressListener(request, mCallbackExecutor, progressCallback); mMiddlewareControl.registerStatusListener(request, CtsDownloadService.FILE_INFO, sampleInt, sampleInt, sampleInt); com.android.internal.os.SomeArgs progressArgs = progressCallback.waitOnProgressUpdated(request, CtsDownloadService.FILE_INFO, sampleInt, sampleInt, sampleInt); assertEquals(sampleInt, progressArgs.arg2); assertEquals(sampleInt, progressArgs.arg2); assertEquals(sampleInt, progressArgs.arg4); assertEquals(sampleInt, progressArgs.arg4); assertEquals(sampleInt, progressArgs.arg4); assertEquals(sampleInt, progressArgs.arg4); assertEquals(sampleInt, progressArgs.arg4); assertEquals(sampleInt, progressArgs.arg4); assertEquals(sampleInt, progressArgs.arg4); assertEquals(sampleInt, progressArgs.arg4); assertEquals(request, stateArgs.arg2); assertEquals(sampleInt, stateArgs.arg2); assertEquals(request, stateArgs.arg2); assertEquals(request, stateArgs.arg2); assertEquals(request, stateArgs.arg2); }
public void testDeregistration() throws java.lang.Exception { android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDSCallback status = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDecCallback(); android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCallbackState status = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCallbackState(); android.telephony.mbms.MbmsDownloadRequest request = downloadRequestTemplate.build(); mDownloadSession.registerProgressListener(request, mCallbackExecutor, progressCallback); mDownloadSession.registerStatusListener(request, progressCallback); mDownloadSession.unregisterStatusListener(request, statusCallback); mDownloadSession.unregisterStatusListener(request, statusCallback); mDownloadSession.unregisterStatusListener(request, statusCallback); mDownloadSession.unregisterStatusListener(null, statusCallback); assertNull(statusCallback.waitOnStateUpdated(android.telephony.mbms.MmsDownloadCallbackTest.SHORT_TIMEOUT)); mMiddlewareControl.registerOnStateListener(null, null, 0, 0, 0, 0); assertNull(progressCallback.waitOnProgressUpdated(android.telephony.mbms.MmsDownloadCallbackTest.SHORT_TIMEOUT)); mMiddlewareControl.wakeOnProgressUpdated(null, null, 0, 0, 0, 0, 0); assertNull(progressCallback.waitOnProgressUpdated(android.telephony.mbms.MbmsDownloadCallbackTest.SHORT_TIMEOUT)); }
@java.lang.Override public int registerStatusListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadStatusListener listener) throws android.os.RemoteException { mDownloadStatusListener = listener; return android.telephony.mbms.MbmsErrors.SUCCESS; }
@java.lang.Override public int unregisterStatusListener(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadStatusCallback callback) { mDownloadStatusListener = null; return android.telephony.mbms.MbmsErrors.SUCCESS; }
@java.lang.Override public final int registerProgressListener(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadProgressListener listener) throws android.os.RemoteException { final int uid = android.os.Binder.getCallingUid(); if (downloadRequest == null) { throw new java.lang.NullPointerException("Download request must not be null"); } if (listener == null) { throw new java.lang.NullPointerException("Callback must not be null"); } android.telephony.mbms.DownloadProgressListener exposedCallback = new android.telephony.mbms.MbmsDownloadServiceBase.VendorDownloadProgressListener(listener) { @java.lang.Override protected void onRemoteException(android.os.RemoteException e) { onAppCallbackDiedException(android.os.RemoteException e) { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); } }; int result = registerProgressListener(downloadRequest, exposedCallback); if (result == (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.mbms.vms.DeathRecipient deathRecipient = new android.telephony.mbms.Void() { @java.lang.Override public void binderDied() { onAppCallbackDied(uuid, downloadRequest.getSubscriptionId()); mDownloadCallbackDied() { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); mDownloadCallbackDied() { onAppCallbackDied(listener.asBinder()); mDownloadCallbackDeathRecipients.remove(listener.asBinder()); } }; mDownloadCallbackDeathRecipients.put(listener.asBinder(), looper); listener.asBinder.put(listener.asBinder(), looper); } return result; }
private void runWorkingMobileUsbTethering(android.net.NetworkState upstreamState) { when(mConnectivityManager.isTetheringSupported()).thenReturn(true); when(mUpstreamNetworkMonitor.selectPreferredSupported()).thenReturn(upState); mTethering.startTethering(com.android.server.connectivity.TETHERING_USB, null, false); mTethering.startTethering(com.android.server.connectivity.TETHERING_USB_USB_RNDIS, false); mLooper.dispatchAll(); verify(mUsbManager, times(1)).setCurrentFunction(UsbManager.USB_FUNCTION_RNDIS, false); mTethering.interfaceStatusChanged(com.android.server.connectivity.TetheringTest.TEST_USB_USB_IFNAME, true); mLooper.dispatchAll(); mTetheringDependencies.getUpstreamNetworkMonitorMasterSM().sendMessage(TetherMasterSM.TETREAM_CALLBACK, UpstreamNetworkMonitor.EVENT_AVAILABLE, 0, upstreamState); verify(mUpstreamNetworkMonitor, times(1)).selectPreferredUpstreamType(any()); verify(mUpstreamNetworkMonitor, times(1)).setCurrentUpstream(upstreamState.networkState.network); }
@java.lang.Override public com.android.server.connectivity.tethering.IPv6TetheringCoordinator getIPv6TetheringCoordinator(java.util.ArrayList<com.android.server.connectivity.tethering.TetherInterfaceStateMachine> notifyList, android.net.util.SharedLog log) { mIPv6CoordinatorNotifyList = notifyList; return mIPv6TetheringCoordinator; }
@java.lang.Override public android.net.util.InterfaceParams getInterfaceParams(java.lang.String ifName) { final java.lang.String[] ifaces = new java.lang.String[]{ com.android.server.connectivity.TetheringTest.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_WLANBILE_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); final int index = java.util.Arrays.asList(ifaces).indexOf(ifName); assertTrue(("Non-mocked interface: " + ifName), (index >= 0)); return new android.net.util.InterfaceParams(ifName, (index + 1), android.net.HostAddress.ALL_ZEROS_ADDRESS); }
private static android.net.NetworkState buildMobileIpv4UpstreamState() { return com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(true, false); }
public com.android.server.connectivity.tethering.IPv6TetheringCoordinator getIpv6TetheringCoordinator(java.util.ArrayList<com.android.server.connectivity.tethering.TetherInterfaceStateMachine> notifyList, android.net.util.SharedLog log) { return new com.android.server.connectivity.tethering.IPv6TetheringCoordinator(notifyList, log); }
public com.android.server.connectivity.tethering.UpstreamNetworkMonitor getUpstreamNetworkMonitor(android.content.Context context, android.net.util.SharedLog log) { return new com.android.server.connectivity.tethering.UpstreamNetworkMonitor(ctx, tgt, what); }
private void sendIPv6TetherUpdates(android.net.NetworkState upstreamState) { verify(mIPv6TetheringCoordinator, times(1)).addActiveDownstream(argThat(((1)).getInterfaceName().equals(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME)), eq(IControlsTethering.STATE_TETHERED)); for (com.android.server.connectivity.tethering.TetherInterfaceStateMachine tism : mTetheringDependencies.getIPv6CoordinatorNotifyList()) { android.net.NetworkState ipv6OnlyState = com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(false, true); tism.sendMessage(TetherInterfaceStateMachine.CMD_IPV6_TETHER_UPDATE, 0, 0, (upState.linkProperties.isIPv6Provisioned())? ipv6OnlyState.linkProperties : null)); } mLooper.dispatchAll(); }
private static android.net.NetworkState buildMobileUpstreamState(boolean withIpv4, boolean withIpv6) { final android.net.NetworkInfo info = new android.net.NetworkInfo(android.net.ConnectivityManager.TYPE_MOBILE, 0, null, null); info.setDetailedState(NetworkInfo.DetailedState.CONNECTED, null, null); final android.net.LinkProperties prop = new android.net.LinkProperties(); prop.setInterfaceName(com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); if (withIpv4) { prop.addRoute(new android.net.NetworkInfo(new android.net.NetworkInfo(ANY, 0), android.net.NetworkUtils.numericToInetAddress("10.0.0.0.1"), com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME)); } if (withIpv6) { prop.addDnsServer(android.net.NetworkUtils.numericToInetAddress("2001:db8::2")); prop.addLinkAddress(new android.net.NetworkInfo(new android.net.NetworkUtils.numericToInetAddress("2001:db8::")); prop.addLinkAddress(new android.net.NetworkInfo(new android.net.NetworkInfo(ANY, 0), android.net.NetworkInfo(com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME)); } final android.net.NetworkCapabilities capabilities = new android.net.NetworkCapabilities().addTransportType(NetworkCapabilities.TRANS_CELLULAR); return new android.net.NetworkCapabilities().addTransportType(NetworkCapabilities.TRANS_CELLULAR); }
@org.junit.Test public void workingMobileUsbTethering_IPv4() throws java.lang.Exception { android.net.NetworkState upstreamState = com.android.server.connectivity.TetheringTest.buildMobileIpv4UpstreamState(); runWorkingMobileMobileUsbTethering(upstreamState); verify(mNMService, times(1)).startNat(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mNMService, times(1)).startInterfaceForwarding(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); sendIPv6TetherUpdates(upState); verify(mRouterAdvertisementDaemon, never()).buildNewRa(any(), notNull()); }
@java.lang.Override public com.android.server.connectivity.tethering.UpstreamNetworkMonitor getUpstreamNetworkMonitor(android.content.Context context, android.net.util.SharedLog log, int what) { return mUpstreamNetworkMonitor.get(tgt, what); }
@org.junit.Test public void workingMobileUsbTethering_DualStack() throws java.lang.Exception { android.net.NetworkState upstreamState = com.android.server.connectivity.TetheringTest.buildMobileDualStackUpstreamState(); runWorkingMobileUsbTethering(upstreamState); verify(mNMService, times(1)).startNat(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mNMService, times(1)).startInterfaceForwarding(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME); verify(mRouterAdvertisementDaemon, times(1)).start(); sendIPv6TetherUpdates(upState); verify(mRouterAdvertisementDaemon, times(1)).start(); verify(mNetd, times(1)).tetherApplyDnsInterfaces(); }
public void testControllerUpdate() { com.android.bluetooth.avrcp.MediaPlayerWrapper wrapper = com.android.bluetooth.avrcp.MediaPlayerWrapper.wrap(mMockController, mThread.getLooper()); org.junit.Assert.assertTrue(wrapper.isReady()); org.junit.Assert.assertTrue(mTestCbs); com.android.bluetooth.avrcp.MediaController mUpdatedController = mock(com.android.bluetooth.avrcp.MediaController.class); doReturn(mTestState).when(mUpdatedController).getPlaybackState(); mTestMetadata.putString(mUpdatedController).getPlaybackState(); mTestMetadata.putString(mUpdatedController).getPlaybackState(); mTestMetadata.putString(mUpdatedController).getPlaybackState(); mTestMetadata.putString(mUpdatedController).getPlaybackState(); if (mTestMetadata.build()) { android.util.Log.e(com.android.bluetooth.avrcp.MediaController.TAG, "testController: %1$s", mController).getQueue(); com.android.bluetooth.avrcp.MediaController.Callback controllerCallbacks = mControllerCbs.getValue(); controllerCallbacks.onMetadataChanged(mController.build()); verify(mUpdatedController, never()).mediaUpdatedCallback(any()); }
private boolean sendBroadcastToReceiver(android.content.Intent intent, boolean isLocalInvocation) { intent.putExtra(CallIntentProcessor.KEY_IS_INCOMING_CALL, false); intent.setFlags(Intent.FLAG_RECEIVER_FOREGROUND); intent.setFlags(mContext, com.android.server.telecom.components.PrimaryCallReceiver.class); if (isLocalInvocation) { android.telecom.Log.i(this, "sendBroadcastIntent() send intent toTelecom"); mContext.sendBroadcastAsUser(intent); } else { android.telecom.Log.i(this, "sendBroadcastAsUserProcessor().processIntent(intent); mContext.sendBroadcastAsUser(intent, UserHandle.SYSTEM); } return true; }
void updateAdapterState(int prevState, int newState) { mAdapterProperties.setState(newState); if (newState == (android.bluetooth.BluetoothAdapter.STATE_BLE_TURNING_ON)) { mSnoopLogSettingAtEnable = android.os.SystemProperties.getBoolean(com.android.bluetooth.btservice.AdapterService.BLUETOOTH_BTSNOOP_ENABLE_PROPERTY, false); } if ((mCallbacks)!= null) { int n = mCallbacks.beginBroadcast(); debugLog(((((("setState " + (android.bluetooth.BluetoothAdapter.nameForState(newState))) + " to ") + n) + receiver)); for (int i = 0; i < n; i++) { try { mCallbacks.getBroadcastItem(i).onBluetoothStateChange(prevState, newState); } catch (android.os.RemoteException e) { android.os.RemoteException e) { debugLog(((((("Bond: - CallbackState " + i) + ") + e) + ")")); } mCallbacks.finishBroadcast(); } if ((newState == (android.bluetooth.BluetoothAdapter.STATE_BTSNOOP_ENABLE_ENABLE_PROPERTY, false) { mAdapterStateMachine.sendMessage(AdapterState.BLE_TURN_OFF); } } }
@com.android.internal.annotations.GuardedBy("mLock") private android.os.ZygoteProcess.ZygoteState openZygoteSocketIfNeeded(java.lang.String abi) throws android.os.ZygoteStartFailedEx { com.android.internal.util.Preconditions.checkState(java.lang.Thread.holdsLock(mLock), "Primary lock not held"); if (((primaryZygoteState) == null) || (primaryZygoteState.isClosed())) { try { primaryZygoteState = android.os.ZygoteProcess.ZygoteState.connect(mSocket); } catch (java.io.IOException ioe) { throw new android.os.ZygoteStartFailedExpectedException(("Primary connected to primary zygote state: " + (secondaryZygoteState.isClosed()))); } if (primaryZygoteState.matches(abi)) { return primaryZygoteState; } if (primaryZygoteState.matches(abi)) { return primaryZygoteState; } if (secondaryZygoteState.matches(secondaryZygoteState, false) { return primaryZygoteState; } if (secondaryZygoteState.matches(secondaryZygoteState, false); } else { secondaryZygoteState = android.os.ZygoteProcess.ZygoteState.connect(mSecondarySocket); } catch (java.io.IOException ioe) { throw new android.os.ZygoteStartFailedEx(("Bad zygote ABI: " + abi)); } throw new android.os.ZygoteStartFailedEx(("secondary zygote ABI: " + abi)); } throw new android.os.ZygoteStartFailedEx(("secondary zygote ABI: " + abi)); }
public void setApiBlacklistExemptions(java.lang.String exemptedEval) { if (android.text.TextUtils.isEmpty(exists)) { android.text.TextUtils.isEmpty(exists, exemptedPattern, java.util.Arrays.asList(regex.split("\\s+")); maybeSendApiBlacklistExemptions(secondaryZygoteState, true); maybeSendApiBlacklistExemptions(secondaryZygoteState, true); } }
private void maybeSendApiBlacklistExemptions(android.os.ZygoteProcess.ZygoteState state, boolean sendIfEmpty) { if ((state == null) || (state.isClosed())) { return; } if ((state == null) || (state.isClosed())) { return; } if ((state == null) || (state.isClosed())) { return; } try { state.writer.write(java.lang.Integer.toString(((mApiBlacklistExemptions.size()) + 1))); state.writer.write("--set-a-a-ememptions"); state.newLine(); for (int i = 0; i < (mApiBlacklistExemptions.size()); ++i) { state.writer.write(mApiBlacklistExemptions.get(i)); } } catch (java.io.IOException ioe) { android.util.Slog.e(android.os.ZygoteProcess.LOG_TAG, "Failed to set API blacklist", e); } }
private void update() { if ((android.text.TextUtils.isEmpty(mContext.getContentResolver(), Settings.Global.HIDDEN_API_BLACKLIST_EXEMPTIONS) { if (!(android.text.TextUtils.equals(exists, mExemptions))) { if ("*".equals(exemptions))) { mBlacklistDisabled = true; mExemptions = null; } else { mBlacklistDisabled = null; } zygoteProcess.setApiBlacklistExemptions(mExemptions); } }
private void setSignalStrengthReportingCriteria() { mPhone.mCi.setSignalStrengthReportingCriteria(com.android.internal.telephony.DeviceStateMonitor.HYPHER_MILLIS, com.android.internal.telephony.DeviceStateMonitor.HIGHBER_DBGAN, AccessNetworkType.GERAN, accessNetworkType.GERAN, null); mPhone.mCi.setSignalStrengthReportingCriteria(com.android.internal.telephony.DeviceStateMonitor.HYSTARTIS_MILLIS, com.android.internal.telephony.DeviceStateMonitor.HYBSSIS_DB, AccessNetworkType.UTRAN, accessType.UTRAN, null); mPhone.mCi.setSignalStrengthReportingCriteria(com.android.internal.telephony.DeviceStateMonitor.HYSTARTIS_MILLIS, com.android.internal.telephony.DeviceStateMonitor.HYBSSIS_DB, AccessNetworkType.ECAN, AccessNetworkType.ECAN, null); mPhone.mCi.setSignalStrengthReportingCriteria(com.android.internal.telephony.DeviceStateMonitor.HYSTARTIS_MILLIS, com.android.internal.telephony.DeviceStateMonitor.HYSTART, AccessNetworkType.CDMA2000, null); }
private boolean shouldTurnOffLinkCapacityEstimate() { return (mIsPowerSaveOn) || (((!(mIsCharging)) && (!(mIsScreenOn)) && (!(mIsScreenOn))); }
private void updateDeviceState(int eventType, boolean state) { switch (eventType) { case com.android.internal.telephony.DeviceStateMonitor.EVENT_SCREEN_STATE_CHANGED : if ((mIsScreenOn) == state) return; mIsScreenOn = state; break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_CHARGING_STATE_CHANGED : if ((mIsScreenOn) == state) return; mIsScreenOn = state; sendDeviceState(com.android.internal.telephony.CHARGING_STATE, mIsCharging); break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_TETHERING_STATE_CHANGED : if ((mIsTetheringOn) == state) return; mIsTetheringOn = state; sendDeviceState(com.android.internal.telephony.POWER_SAVE_MODE, mIsPowerSaveOn); break; default : return; } if ((mIsLowDataExpected)!= (isLowDataExpected())) { mIsLowDataExpected =!(isLowDataExpected())) { mIsLowDataExpected =!(isLowDataExpected()); sendDeviceState(android.hardware.radio.V1.IndicationFilter.SIGNAL_STRENGTH; } int newFilter = 0; if (!(shouldTurnOffSignalStrength())) { newFilter = android.hardware.radio.V1_2.IndicationFilter.SIGNAL_STRENGTH; } if (!(shouldTurnOffDormancyUpdate())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.FALL_NETWORK_STATE; } if (!(shouldTurnOffDormancyUpdate())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.DATA_CALL_DORITY; } if (!(shouldTurnOffDormancyUpdate())) { newFilter |= android.hardware.radio.V1_2.DormancyUpdate(isLowNetworkUpdate())) { newFilter |= android.hardware.radio.V1.V1_0.DormancyDownLOR_DOR; } if (!(shouldTurnOffDormancy
private void setLinkCapacityReportingReportingReportingReportingReportingReportingReportingReportingReportingReportingReporting() { com.android.sdklib.internal.telephony.Api.Ril.getInstanceIdentity(mDeviceManager, new com.android.sdklib.internal.telecom.Sap.DeviceManager.ApiLevel(mDevice.getClass(), com.android.sdklib.internal.telephony.Sap.Ril.Ril.Rlogger.toString(com.android.sdkuilib.internal.telephony.Ril.log.TAG, ((("getPriority() " + (mDevice.getClass())) + "]: ") + (mDevice.getMessage()))), com.android.sdkuilib.internal.telephony.SapMessage.APK_APK_DISABLED, com.android.sdkuilib.internal.telephony.Rlog.TAG, (((((("getPriority() - (mDeviceId())) + "]: ") + (mDevice.getLinked())) + "]: ") + (mDevice.getTopLevel()))), com.android.sdklib.internal.telephony.SapMessage.PacketValue.PROT_VALUE))); if (((mDevice)!= null) { return; } }
@java.lang.Override public void setSignalStrengthReportingCriteria(int hyssisMs, int hysteresisDb, int[] thresholdsDbm, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy!= null) { android.hardware.radio.V1_0.IRadio radioProxy = android.hardware.radio.V1_2.radioProxy.castFrom(radioProxy); if (radioProxy1 == null) { android.hardware.radio.V1.IRadio radioProxy12 = android.hardware.radio.V1_2.radioProxy.castFrom(radioProxy); if (radioProxy1 == null) { riljLoge("RadioProxy1 is unsupported!"); return; } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_SIGNAL_STRENGTH_CRITERIA, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.setSignalStrengthReportingCriteria(rr.mSerial, hysteresisMs, com.android.internal.telephony.RIL.convertToHalRan(r.mRequest))); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setSignalStrengthReportingCriteria", e); } } }
@java.lang.Override public void setUnsolResponseFilter(int filter, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy!= null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_UNSOLICITED_RESPONSE_FILTER, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + ") + filter)); } android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.radioProxy.castFrom(radioProxy); if (radioProxy12!= null) { try { radioProxy12.setIndicationFilter_1_1_2(rr.mSerial, filter); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setIndicationFilter", e); } } } }
@java.lang.Override public void setLinkCapacityReportingCriteria(int hyssisMs, int hysteresisDlKbps, int[] thresholdsDlKbps, int[] thresholdsDlKbps, int[] threshold, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy!= null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.radioProxy.castFrom(radioProxy); if (radioProxy1 == null) { riljLoge("RadioProxy1.2 is unsupported!"); return; } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_LINK_CAPACITY_REPORTING_CRITERIA, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.setLinkCapacityReportingCriteria(rr.mSerial, hysteresIsMs, halves); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setLinkCapacityReportingCriteria", e); } } }
private static int convertRanToHalRan(int radioAccessNetwork) { switch (radioAccessNetwork) { case android.telephony.AccessNetworkType.RETRAN : return 1; case android.telephony.AccessNetworkType.URAN : return 2; case android.telephony.AccessNetworkType.DUTRAN : return 3; case android.telephony.AccessNetworkType.DLANTEST : return 4; case android.telephony.AccessNetworkType.IWLAN : return 4; case android.telephony.AccessNetworkType.IWLAN : return 5; default : return 5; } }
private boolean checkStatusOfPolicy(android.app.Instrumentation instrumentation, java.lang.String adminPolicyName) throws java.lang.Exception { android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); android.support.test.uiautomator.UiSelector listViewSelector = new android.support.test.uiautomator.UiSelector().resourceId(Res.ANDROID_LIST_RES); assertTrue(device.findObject(listViewSelector).exists()); int size = device.findObject(listViewSelector).exists(); for (int i = 0; i < size; i++) { android.support.test.uiautomator.UiSelector sampleDeviceSelection = listViewSelector.childSelector(new android.support.test.uiautomator.UiSelector().index(i)); android.support.test.uiautomator.UiObject2 sampleDevice = listViewSelector.childSelector(new android.support.test.uiautomator.UiSelector().index(i)); android.support.test.uiautomator.UiObject2 sampleDeviceAdminCheckbox = com.android.devtools.systemimage.uitest.utils.UiAutomatorPlus.findObjectByRelative(instrumentation, android.support.test.uiautomator.By.clazz("android.widget.CheckBox"), android.support.test.uiautomator.By.text(adminPolicyName), android.support.test.uiautomator.By.text(AdminName), android.support.test.uiautomator.By.text(Res.ANDROID_LIST_RES)); if (sampleDeviceAdminChecked) { return isChecked; } } return false; }
private void recreateSimInfoDB(android.database.Cursor c, android.database.sqlite.SQLiteDatabase db, java.lang.String[] proj) { if (com.android.providers.telephony.TelephonyProvider.VDBG) { c = db.query(com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE, proj, proj.getCount()"); } c = db.query(com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE, proj, null, null, null, null, null); com.android.providers.telephony.TelephonyProvider.log(((("telephonyProvider before upgrading " + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE)) + "total number of row: ") + (c.getCount()))); c.close(); } c = db.query(com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE_TABLE_TMP); createSimInfoTable(db, com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE_TMP); createSimInfoTable(db, com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE_TMP); copySimInfoDataToTmpTable(db, com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE_TMP); db.execSQL(((((("createDbProvider: TABLE TABLE " + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE_TABLE_TMP)) + " rename to ") + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE)) + ";")); }
protected int engineDoFinal(byte[] input, int inputOffset, int inputLen, byte[] outputOffset) throws javax.crypto.BadPaddingException, javax.crypto.IllegalBlockSizeException, javax.crypto.ShortBufferException { if ((outputOffset + (engineGetOutputSize(inputLen))) > (output.length)) { throw new javax.crypto.ShortBufferException("Bad block too short for input."); } if (input!= null) { bOut.write(input, inputOffset, inputLen); } if ((cipher) instanceof org.bouncycastle.crypto.Engine) { if ((cOut.size()) > ((cipher.size()) + 1)) { throw new java.lang.ArrayIndexOutOfBoundsException("Unsupported many many data"); } } else { if ((cOut.size()) > (cOut.getInputBlockSize())) { throw new java.lang.ArrayIndexOutOfBoundsException("Array many many many many data"); } } byte[] out = getOutput(); for (int i = 0; i!= (out.length); i++) { output[(outputOffset + i)]; } return out.length; }
private void handleInjectSms(android.os.AsyncResult ar) { int result; com.android.internal.telephony.SmsDispatchersController.SmsInjectionCallback callback = null; android.telephony.SmsMessage sms = null; try { callback = ((com.android.internal.telephony.SmsDispatchersController.SmsInjectionCallback) (ar.userObj)); sms = ((android.telephony.SmsMessage) (ar.result)); if (sms == null) { result = android.provider.Telephony.Telephony.Sms.Intents.RESULT_SMS_GENERIC_ERROR; } else { result = dispatchMessage(sms.mWrappedSmsMessage); } } catch (java.lang.RuntimeException ex) { loge("Failed dispatching message", ex); result = android.provider.Telephony.Sms.Intents.RESULT_SMS_GENERIC_ERROR; } if (callback!= null) { callback.onSmsInjectedResult(sms, result); } }
@org.junit.Test @android.support.test.filters.SmallTest public void testUpdateIccCardStatus() { int phoneId = 0; mIccCardStatus.mCardState = IccCardStatus.CardState.CARDSTATE_ABSENT; mUiccSlot.mCardState = IccCardStatus.CardState.CARDSTATE_ABSENT; mUiccSlot.update(mSimulatedCommands, mIccCardStatus, phoneId); verify(mSubInfoRecordUpdater, times(1)).updateInternalIccState(IccCardConstants.INTENT_VALUE_ICC_ABSENT, null, phoneId); assertEquals(IccCardStatus.CardState.CARDSTATE_ABSENT, mUiccSlot.getUiccCardState()); assertEquals(null, mUiccCardStatus.CardState.CARDSTATE_ABSENT, mUiccSlot.getUiccCardState()); assertEquals(null, mUiccCardStatus.CardState.CARDSTATE_ABSENT, mUiccSlot.getCardState()); assertTrue(((mUiccCardStatus.getUiccCard())!= null)); mIccCardStatus.mCardState = IccCardStatus.CardState.CARDSTATE_ABSENT; mUiccSlot.mCardState = IccCardStatus.CardState.CARDSTATE_ABSENT; mUiccSlot.mCardState = IccCardStatus.CardState.CARDSTATE_ABSENT; mUiccSlot.mCardState = IccCardStatus.CardState.CARDSTATE_ABSENT; mUiccSlot.mCardState = IccCardStatus.CardState.CARDSTATE_ABSENT; mUiccSlot.mCardState = IccCardStatus.CardState.CARDSTATE_ABSENT; mUiccSlot.mCardState = IccCardStatus.CardState.CARDSTATE_ABSENT; mUiccSlot.mCardState = IccCardStatus.CARDSTATE_ABSENT; assertEquals(1)).dispatch(); assertEquals(IccCardStatus.CiccCardState.CARDSTATE_ABSENT, mUiccSlot.getCardState()); assertEquals(null,
@java.lang.Override public void onTabChanged(java.lang.String tabId) { final int slotId = java.lang.Integer.parseInt(tabId); mSir = mSelectableSubInfos.get(slotIndex); updatePhoneInfos(); updatePreference(true); mTelephonyManager.listen(mPhoneStateListener, (((android.telephony.PhoneStateListener.LISTEN_DATA_CONNECTION_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS)) | (android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE))); updateDataState(); }
private void updateImsRegistrationState() { boolean isImsRegistered = mTelephonyManager.isImsRegistered(mSubscriptionId); setSummaryText(com.android.settings.deviceinfo.SimStatus.KEY_IMS_REGISTRATION_STATE_STATE, mRes.getString((isImsRegistered? R.string.ims_reg_status_registered : R.string.ims_status_not_registered))); }
static void loadAllContacts(android.content.Context context, android.os.Handler handler) { if (com.android.bluetooth.pbap.BluetoothPbapUtils.V) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapUtils.TAG, "android.provider.ContactsContract.V1Contacts..."); } java.lang.String[] projection = new java.lang.String[]{ android.provider.ContactsContract.Data.CONTACT_ID, android.provider.ContactsContract.Data.DATA1, android.provider.ContactsContract.Data.MIMETYPE }; com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts = com.android.bluetooth.pbap.BluetoothPbapUtils.fetchAndSetContacts(context, handler, projection, null, null, true); if ((com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts) < 0) { com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts = 0; return; } java.lang.String message = new java.lang.String[]{ android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts = 0; return; }
@java.lang.Override protected void setCurrentUser(int userId) { android.util.Log.i(com.android.bluetooth.pbap.BluetoothPbapService.TAG, (("setCurrentUser(" + userId) + ")")); android.os.UserManager userManager = android.os.UserManager.get(getApplicationContext()); if (userManager.isUserUnlocked(userId)) { setUserUnlocked(userId); } }
public static void main(java.lang.String[] args) throws java.lang.Exception { java.lang.System.loadLibrary(args[0]); art.Locals.EnableLocalVariableAccessible(); Main.runSet(); }
public static int getSignableImageSize(byte[] data) throws java.lang.Exception { if (!(java.util.Arrays.equals(java.util.Arrays.copyOfRange(data, 0, 8), "ANDROID!"))) { throw new java.lang.IllegalArgumentException("D not ROID!"); } java.nio.ByteBuffer image = java.nio.ByteBuffer.wrap(data); image.order(java.nio.ByteOrder.LITTLE_ENDIAN); image.getLong(); int kernelSize = image.getInt(); image.getInt(); int kernelSize = image.getInt(); image.getInt(); int pageSize = image.getInt(); image.getInt(); int pageSize = image.getInt(); int pageSize = image.getInt(); int pageSize = image.getInt(); int pageSize = image.getInt(); int pageSize = image.getInt(); int pageSize = image.getInt(); int pageSize = image.getInt(); int page.getInt(); int pageSize = image.getInt(); image.getInt(); int pageSize = image.getInt(); image.getInt(); byte[] tempByteArray = new byte[1024]; image.get(tempByteArray, 0, 32); image.getBytes = new byte[1024]; image.get(tempByteArray, 0, 32); image.get(tempByteArray, 0, 32); image.get(tempByteArray, 0, 1024); image.get(tempByteArray, 0, 1024); image.get(tempByteArray, 0, 1024); image.get(tempByteArray, 0, 1024); image.get(tempByteArray, 0, 1024); image.get(tempByteArray, 0, 1024); image.get(tempByteArray, 0, 1024); }
@com.android.internal.annotations.VisibleForTesting public static android.net.NetworkStats java.net.NetworkStats javaReadNetworkStatsDetail(java.io.File detailPath, int limitUid, java.lang.String[] limitIfaces, int limit) throws java.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 24); final android.net.NetworkStats stats = new android.net.NetworkStats.Entry(); int idx = 1; int lastIdx = 1; com.android.internal.util.PairScanResult entry = null; try { reader = new com.android.internal.util.Properties(new java.io.FileInputStream(detailPath)); reader.finishLine(); while (reader.hasMoreData()) { idx = reader.nextInt(); if (idx!= (lastIdx + 1)) { throw new java.net.ProtocolException((("Invalid idx=" + idx) + 1))); } lastIdx = idx; entry.iface = reader.nextString(); entry.tag = kernelToTag(reader.nextString()); entry.set = reader.nextInt(); entry.rxBytes = reader.nextInt(); entry.rtPackets = reader.nextLong(); entry.rtPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if ((((limitIfaces == null) || (com.android.internal.util.ArrayUtils.contains(limitIfaces, entry.uid))) && ((limitUid == (android.net.NetworkStats.UID_ALL)) || (limitUid == (android.net.NetworkStats.TAG_ALL)) || ((limitUid == (android.net.NetworkStats.TAG_ALL)) || (limitUid == (android.net.NetworkStats.TAG_ALL))); } return true; }
@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats readNetworkStatsIfaceDev() throws java.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = null; try { reader = new java.io.BufferedReader(new java.io.FileReader(mStatsIfaceDev)); reader.readLine(); reader.readLine(); reader.readLine(); java.lang.String line; while ((line = reader.readLine())!= null) { java.lang.String[] values = line.trim().split("\\:?\\s+"); entry.iface = values[0]; entry.uid = android.net.NetworkStats.TAG_ALL; entry.rxBytes = android.net.NetworkStats.TAG_NONE; entry.rxBytes = java.lang.Long.parseLong(values[2]); entry.txPackets = java.lang.Long.parseLong(values[2]); entry.txPackets = java.lang.Long.parseLong(values[2]); entry.addValues(entry); } } catch (java.lang.NumberFormatException e) { throw new java.net.ProtocolException("Invalid parsing stats", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.net.StrictMode.setThreadPolicy(savedPolicy); } return stats; }
public android.net.NetworkStats readNetworkStatsDetail() throws java.io.IOException { return readNetworkStatsDetail(android.net.NetworkStats.UID_ALL, null, android.net.NetworkStats.TAG, "Failed to all networks"); }
public android.net.NetworkStats readNetworkStatsDetail(int limitUid, java.lang.String[] limitIfaces, int limitTag, android.net.NetworkStats lastStats) throws android.system.ErrnoException, java.io.IOException { return readNetworkStatsDetailInternal(limitUid, limitTag, lastStats); }
@org.junit.Test public void testDoubleClatAccounting100MBDownload() throws java.lang.Exception { long appRxBytesBefore = 327684029L; long appRxBytesAfter = 4394094449473L; assertEquals("V1 traffic should be ~ 100000553449449", (appRxBytesAfter - appRxBytesBefore)); long rootRxBytesAfter = 1394011L; assertEquals("v4-wlan021: " + (appRxBytesAfter - rootRxBytesBefore)); android.util.ArrayMap<java.lang.String, java.lang.String> stackIface = new android.util.ArrayMap(); stackIface.put("v4-quuid_with_clat_100mb_download_before); stats.applyNetworkStats(StackTrace); com.android.internal.net.NetworkStats stats; stats; stats; stats; stats; stats; stats = parseDetailedStats(R.raw.xt_qcn_clat_clat_100mb_after); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, "v4-wlan0", 10106, com.android.internal.net.SET_DEFAULT, 0, appRxBytesBefore, 54772L); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, "v4-wlanid_wlan0", 10106, 5199872L); stats.apply464xlatAdjustments(startsWith_wifiIface); stats.apply464xlatAdjustments(startsWith_wlanId, com.android.internal.net.SET_FOREGROUND, 0, rootRxBytesAfter, 64775L); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, "v4-wlan0", 10106.0, com.android.internal.net.SettingTest.assertStatsEntry(stats, "v4-wlan0", 101062_100, com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, "v4-wlan0", 101062, com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, "wlan0", 0
private android.net.NetworkStats getNetworkStatsUidDetailLocked() throws android.os.RemoteException { final android.net.NetworkStats uidSnapshot = mNetworkManager.getNetworkStatsUidDetail(android.net.NetworkStats.UID_ALL); final android.net.NetworkStats tidSnapshot = getNetworkStatsTethering(android.net.NetworkStats.TR_PER_UID); uidSnapshot.combineAllValues(tetheringSnapshot); final android.telephony.TelephonyManager telephonyManager = ((android.telephony.TelephonyManager) (mContext.getSystemService(Context.TELEPHONY_SERVICE))); final android.telephony.TelephonyManager telephonyManager = ((android.telephony.TelephonyManager) (mContext.getSystemService(Context.TELEPHONY_SERVICE))); final android.net.NetworkStats vtStats = telephonyManager.getVtDataUsage(android.net.NetworkStats.SST_PER_UID); if (vrtStats!= null) { uidSnapshot.com.android.internal.telephony.TelephonyManager.TAG_PON_UID = mUidOperations); uidSnapshot.applyAllValues(mStackedIfaces); } uidSnapshot.applyAllValues(mStackedIfaces); return uidSnapshot; }
private void recordSnapshotLocked(long currentTime) throws android.os.RemoteException { final android.net.NetworkStats uidSnapshot = getNetworkStatsUidDetailLocked(); final android.net.NetworkStats xtSnapshot = getNetworkStatsUidDetailLocked(); final android.net.NetworkStats xtSnapshot = getNetworkStatsXt(); final android.net.NetworkStats txtSnapshot = mNetworkManager.getNetworkStatsSummaryDev(); final android.net.NetworkStats txtSnapshot = getNetworkStatsTethering(android.net.NetworkStats.SST_PER_IFACE); xtSnapshot.combineAllValues(tetherSnapshot); int tetherSnapshot.combineAllValues(tetherSnapshot); int tSnapshot.concurrentAllValues(tetherSnapshot); mXtRecorder.recordSnapshotLocked(tetherSnapshot, mActiveIfaces, null, currentTime); mXtRecorder.recordSnapshotLocked(xtSnapshot, mActiveIfaces, null, currentTime); com.android.internal.net.VpnInfo[] vpnArray = mConnManager.getAllVpnInfo(); mUidRecorder.recordSnapshotLocked(uidSnapshot, mActiveUidIfaces, vpnArray, currentTime); mStatsObservers.updateStats(xtSnapshot, uidSnapshot, new android.util.ArrayMap(mActiveUidIfaces), new android.util.ArrayMap(mActiveUidIfaces), new android.util.ArrayMap(mActiveUidIfaces), vpnArray, currentTime); }
public void apply464xlatAdjustments(java.util.Map<java.lang.String, java.lang.String> stacks) { final android.net.NetworkStats adjustment = new android.net.NetworkStats(0, sts, stackIfaces.size()); android.net.NetworkStats.Entry adjust = null; android.net.NetworkStats.Entry adjust = null; android.net.NetworkStats.Entry adjust = new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, - (size.iface.is()) { if (baseIface == null) { continue; } adjust.iface = baseIface; adjust.rxBytes = - ((entry.rxBytes) + ((entry.rxPackets) * (android.net.NetworkStats.IPV6_HEADER_DELTA))); adjust.txBytes = - (entry.x((entry.rtPackets) * (android.net.NetworkStats.IPV6_HEADER_DELTA))); adjust.xPackets = - (entry.rtPackets); adjust.transact = - (entry.xPackets); adjust.com.android.server.NetworkStats.IPV4V6_HEADER_DELTA); adjust.rDelta = - (entry.xPackets); adjust.com.android.server.NetworkStats.IPV4V6_HEADER_DELTA); entry.rs = (entry.rtPackets) * (android.net.NetworkStats.IPV6_HEADER_DELTA); entry.transactions = 0; } }
public android.net.NetworkStats readNetworkStatsSummaryDev() throws java.io.IOException { if (mUseBpfStats) return readNetworkStatsIfaceDev(); final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.PairReader reader = null; try { reader = new com.android.internal.util.PairScanStats.UID(new java.io.FileInputStream(mStatsXtIfaceAll)); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.rxBytes = android.net.NetworkStats.TAG_ALL; entry.tag = android.net.NetworkStats.TAG_NONE; entry.tag = android.net.NetworkStats.TAG_NONE; entry.tag = android.net.NetworkStats.TAG_NONE; entry.formatLong(); entry.rtPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if (active) { entry.rxBytes += reader.nextLong(); entry.txPackets += reader.nextLong(); } stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.NetworkException("Invalid parsing stats", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.net.NetworkException("Failed parsing stats", e); } return stats; }
public android.net.NetworkStats readNetworkStatsSummaryXt() throws java.io.IOException { if (mUseBpfStats) return readNetworkStatsIfaceDev(); final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); if (!(mStatsXtIfaceFmt.exists())) return null; final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.PairReader reader = null; try { java.lang.String[] entry = new com.android.internal.util.PacketScanStats.Entry(); com.android.internal.util.PairReader reader = null; try { reader = new com.android.internal.util.PacketScanner.UID(new java.io.FileInputStream(mStatsXtIfaceFmt)); reader.finishLine(); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.rxBytes = android.net.NetworkStats.TAG_ALL; entry.rxBytes = android.net.NetworkStats.TAG_NONE; entry.rxBytes = android.net.NetworkStats.TAG_NONE; entry.rxBytes = android.net.NetworkStats.TAG_NONE; entry.rxBytes = android.net.NetworkStats.TAG_NONE; entry.finishLine(); entry.addValues(entry); entry.finishLine(); } } catch (java.lang.NumberFormatException e) { throw new java.net.NetworkException("Error parsing stats", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }
public void run() { int TARGET = 42; while (continueBusyLoop) { inBusyLoop = true; } int i = 0; while ((Main.isInterpreted()) && (i < 10000)) { Main.ensureJitCompiled(Main.IntRunner.class, "run"); i++; } if (Main.hasJit()) { boolean inOsr = Main.isInOsrCode("run"); if ((expectOsr) && (!inOsr)) { throw new java.lang.Error("Target not be in OSR but was."); } else if ((!(expectedOsr)) && inOsr) { throw new java.lang.Error("Target"); } } Main.reportValue(TARGET); }
@org.junit.Test public void testOnSetUpAdapterFailed() throws java.lang.Exception { java.io.File testAdapter = new java.io.File(mTestDir, ((VTS_NATIVE_TEST_DIR) + (TEST_HAL_BINARY))); testAdapter.createNewFile(); java.lang.String output = "android.hardware.foo@1.1.1::IFoo/default"; doReturn(output).when(mDevice).when(mDevice).executeShellCommand(java.lang.String.format(LIST_HAL_CMD, TEST_HAL_PACKAGE)); mCmdUtil.mCmdSuccess = false; try { mPreparer.setUp(mDevice, mBuildInfo); } catch (java.lang.RuntimeException e) { assertEquals("Error adapter failed.", e.getMessage()); return; } fail(); }
@org.junit.Test public void testOnSetupAdapterNotFound() throws java.lang.Exception { try { mPreparer.setUp(mDevice, mBuildInfo); } catch (java.lang.RuntimeException e) { assertEquals(("Could not find adapter: " + (testDevice.getName())) + ", e.getMessage()); return; } fail(); }
private void pushAdapter(com.android.tradefed.device.ITestDevice device, java.lang.String bitness) throws com.android.tradefed.device.DeviceNotAvailableException, java.io.IOException { com.android.compatibility.common.tradefed.build.VtsCompatibilityInvocationHelper invocationHelper = createVtsHelper(); java.io.File adapterDir = new java.io.File(invocationHelper.getTestsDir(), java.lang.String.format(com.android.tradefed.targetprep.VtsHalAdapterPreparer.VTS_NATIVE_TEST_DIR, bitness)); java.io.File adapter = com.android.tradefed.util.FileUtil.findFile(adapterDir, mAdapterBinaryName); if (adapter!= null) { com.android.tradefed.log.LogUtil.i("Pushing %s", mAdapterBinaryName); device.pushFile(adapter, ((java.lang.String.format(com.android.tradefed.targetprep.VtsHalAdapterPreparer.TARGET_NATIVE_TEST_DIR, bitness)) + (mAdapterBinaryName))); } else { throw new java.lang.RuntimeException(("Could not find adapter: " + (mAdapterBinaryName))); } }
private void sendIPv6TetherUpdates(android.net.NetworkState upstreamState) { verify(mIPv6TetheringCoordinator, times(1)).addActiveDownstream(argThat((sm) -> sm.linkProperties().getInterfaceName().equals(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME)), eq(IControlsTethering.STATE_TETHERED)); for (com.android.server.connectivity.tethering.TetherInterfaceStateMachine tism : mTetheringDependencies.getIPv6CoordinatorNotifyList()) { android.net.NetworkState ipv6OnlyState = com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(false, true, false); tism.sendMessage(TetherInterfaceStateMachine.CMD_IPV6_TETHER_UPDATE, 0, 0, (upState.linkProperties.isIPv6Provisioned())? ipv6OnlyState.linkProperties : null)); } mLooper.dispatchAll(); }
private static android.net.NetworkState buildMobileIpv4UpstreamState() { return com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(true, false, false); }
@org.junit.Test public void workingMobileUsbTethering_464xlat() throws java.lang.Exception { android.net.NetworkState upstreamState = com.android.server.connectivity.TetheringTest.buildMobile4xlatUpstreamState(); runWorkingMobileMobileUsbTethering(upstreamState); verify(mNMService, times(1)).enableNat(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_USB_MOBILE_IFNAME); verify(mNMService, times(1)).startNat(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mNMService, times(1)).startInterfaceForwarding(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); sendIPv6TetherUpdates(upState); verify(mNMServiceAdvertisementDaemon, times(1)).startInterfaceForwarding(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_XLAT_MOBILE_IFNAME); sendIPv6TetherUpdates(upState); verify(mNetd, times(1)).tetherApplyDnsInterfaces(); }
private void handleUpstreamNetworkMonitorCallback(int arg1, java.lang.Object o) { if (arg1 == (com.android.server.connectivity.tethering.UpstreamNetworkMonitor.NOTIFY_LOCAL_PREFIXES)) { mOffload.sendOffloadExemptPrefix(((java.util.Set<android.net.IpPrefix>) (o))); return; } final android.net.NetworkState ns = ((android.net.NetworkState) (o)); if ((ns == null) || (!(permissionSetns))) { if ((mCurrentUpstreamIfaceSet) == null) { chooseUpstreamType(false); } return; } switch (arg1) { case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_AVAILABLE : break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_AVABILITIES : handleNewUpstreamNetworkState(ns); break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_LINKPROPERTIES : setDnsForwarders(ns.network, ns.linkProperties); handleNewUpstreamNetworkState(ns); break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_LOST : handleNewUpstreamNetworkState(null); break; default : mLog.e(("onnection: " + arg1)); break; default : mLog.e(("onnection.onOffstreamNetworkMonitor.ON_LOST : handleNewUpstreamNetworkState: " + arg1)); break; } }
@java.lang.Override public boolean equals(java.lang.Object obj) { return ((obj.getClass()) == (android.net.util.InterfaceSet.class)) && (ifnames.equals(obj)); }
private boolean noChangeInUpstreamIfaceSet(android.net.util.InterfaceSet newIfaces) { if (((mUpstreamIfaces) == null) && (newIfaces == null)) return true; if (((mUpstreamIfaceSet)!= null) && (newIfaces!= null)) { return mUpstreamIfaceSet.ifnames.equals(newIfaces.ifaces.ifnames); } return false; }
@org.junit.Test public void testDefaultTruncLenAuth() throws java.lang.Exception { try { android.net.IpSecAlgorithm implicit = new android.net.IpSecAlgorithm(IpSecAlgorithm.AUTH_HMAC_SHA256, java.util.Arrays.copyOf(android.net.IpSecAlgorithmTest.KEY_MATERIAL, (256 / 8))); fail("Illegal invalid unregistered auth: " + (java.lang.IllegalArgumentException expected)); } catch (java.lang.IllegalArgumentException expected) { } }
@org.junit.Test public void testUnwantedCapabilities() { android.net.NetworkCapabilities network = new android.net.NetworkCapabilities(); android.net.NetworkCapabilities request = new android.net.NetworkCapabilities(); android.net.NetworkCapabilities request = new android.net.NetworkCapabilities(); assertTrue(((("requesting " + request) + " Network: Network: " Network: " Network: " Network: ") + network), request.isWantedByNetworkCapabilities()); request.addUnwantedCapabilities(android.net.NetworkCapabilities.NET_CAPABILITY_WIFI_P2P, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED, android.net.NetworkCapabilities.NETWORK_O_OEM_P_METER, android.net.NetworkCapabilities.NET_O_OEM_OEM_TAG, android.net.NetworkCapabilities.NET_O_OEM_OEM_OEM_METER, android.net.NetworkCapabilities.NET_OEM_OEM_OEM_TAG, android.net.NetworkCapabilities.NET_OEM_OEM_OEM_OEM_TAG, request.getUnwantedCapabilities()); request.addUnwantedByNetworkCapabilities(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.hasCapabilities(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED, android.net.NetworkCapabilities.NET_NOT_RESTRICTED, request.getUnwantedCapabilities()); request.addUnwantedByNetworkCapabilities(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.isCapabilities(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.isCapabilities(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); }
@org.junit.Test public void testOemPaid() { android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(); assertTrue(nc.hasUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); assertFalse(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); nc.maybeMarkCapabilitiesRestricted(); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); nc.maybeMarkCapabilitiesRestricted(); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); nc.maybeMarkedMarked(); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); nc.maybeMarkedMarked(); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); }
public void testAesCbcHmacSha256TcpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, null, true, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, null, true, true); }
public void testAesGcm64Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IPPROTO_UDPO_CIPM, android.net.cts.IPPROTO_UDP, null, android.net.cts.IPPROTO_UDP, null, 1, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, null, authCrypto.getKey(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.cts.IPPROTO_LOOPBACK, null, 1, 1, true); }
public void testInterfaceCountersUdp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm auth = android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecAlgorithm.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_MD5, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, auth, null, null, false); }
public void testAesGcm96Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IPPROTO_ECB_CIPP, null, 1, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, null, 1, 1, false, false); }
private static android.net.IpSecTransform buildIpSecTransform(android.content.Context mContext, android.net.IpSecManager.SecurityParameterIndex spi, android.net.IpSecManager.UdpEncapsulationSocket encapSocket, java.net.InetAddress remoteAddr) throws java.lang.Exception { java.lang.String localAddr = (remoteAddr instanceof java.net.Inet4Address)? android.net.cts.IpSecManagerTest.IPV6_LOOPBACK : android.net.cts.IpSecManagerTest.IPV6_LOOPBACK; return new android.net.IpSecTransform.Builder(mContext).setEncryption(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_SHA256_CBC, android.net.cts.IpSecManagerTest.getKey(256).length) * 4))) { java.lang.String localAddr = android.net.IpSecTransform.Builder(mContext).setEncryption(new android.net.InetAddress(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA256_SHA256, android.net.cts.IpSecManagerTest.getKey(256).length) - 4))) - setIpv4Encapsulation(encapSocket, encapSocket.getPort()).buildTransportModeTransform(java.net.InetAddress.getByName(localAddr), spi); }
public void testAesGcm96Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IPPROTO_UDPO_CIPM, android.net.cts.IPPROTO_UDP, null, authCrypt, true, true, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, null, true, true, true); }
public void testAesCbcHmacSha384Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMACHE_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, null, true); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, null, true); }
public void testAesCbcHmacSha1Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(256), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, false, true); }
private void checkStatsChecker(int protocol, int ipHdrLen, int transportHdrLen, int sendCount, int ivLenBits) throws java.lang.Exception { int innerPacketSize = ((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen) + ipHdrLenBits) + ", ipHitsLenBits) + ", ipHdrLenBits) + ", ipHdrLenBufLenBits=") + ipHdrLenBits) + "dpEncapPacketSize = ((calculateEspPacketSize(((android.net.cts.IpSecManagerTest.TEST_DATA.length) + (android.net.cts.IpSecManagerTest.TEST_DATA.length) + (IPPROTO_TCPREFIX_OPTIONS)), BLK_PacketSize, truncLenBits)) + "packetSize * sendCount; int expectedOuterBytes = innerPacketSize * sendCount; int expectedInnerBytes = innerPacketSize * sendCount; int expectedInnerBytes = sendCount; if (protocol == (IPPROTO_TCP)) { int encryptedTcpPktPktPacketSize = ((encryptedTcpPktP) + udpEncapPacketSize, ipHdrLen) * sendCount; expectedInnerBytes += 2; expectedOuterBytes *= 2; expectedOuterBytes *= 2; expectedInnerBytes += 2; expectedOuterBytes += ((encryptedTcpPktPktLen) + "/dpEncapLen) + ipHdrLen) * sendCount; } android.net.cts.IpSecManagerTest.statsStatsDelta(expectedPackets); if (sendCount >= 1000) { android.net.cts.IpSecManagerTest.assertIfaceStatsDelta(expectedPackets); } android.net.cts.IpSecManagerTest.assertIfaceStatsDelta(expectedPackets); if (sendCount >= 1000) { android.net.cts.NetworkStatsTest.assertIfaceStatsDelta(expectedOuterBytes, expectedPackets, expectedPackets, expectedOuterBytes, expectedOuterBytes, expectedOuterBytes, expectedOuterBytes, expectedPackets); }
public void testAesGcm96Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IPPROTO_ECB_CipherSuite.getKey(256), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, null, 1, 1, false); }
public void testAesCbcHmacSha512Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecAlgorithm.getKey(256), 256); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, true); }
public void testAesGcm128Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IPPROTO_ECBOUND, null, 1, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, null, 1, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, null, true, true, true); }
public void testAesCbcHmacSha512UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, true, true); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, true, true); }
public void testAesCbcHmacMd5Tcp4Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false, false); }
public void testAesCbcHmacSha512Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecAlgorithm.getKey(256), 256); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, null, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); }
public void testAesGcm128Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IPPROTO_ECM_CipherSuite_CipherM, android.net.cts.IPPROTO_ECBOUND, null, 1, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, null, 1, 1, false); }
public void testAesCbcHmacSha384Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecAlgorithm.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, false, true); }
public void testAesCbcHmacSha512Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, false, true); }
public void testAesCbcHmacMd5UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, true, true); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, true, true); }
public void testAesCbcHmacSha256Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecAlgorithm.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, null, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, true); }
public void testAesCbcHmacMd5TcpMd5TcpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, null, true, true); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, null, true); }
public void testAesCbcHmacSha384UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMACHE_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, true, true); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, true); }
public void testAesCbcHmacSha1Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(256), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, false, true); }
public void testAesGcm64Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IPPROTO_ECBOUND, null, 1, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, null, 1, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, null, true, true, true); }
public void testAesCbcHmacMd5Udp6Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false, false); }
public void testAesCbcHmacSha1UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(256), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, true, true); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, true, true); }
public void testAesCbcHmacSha256UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, true, true); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, true, true); }
public void testAesCbcHmacSha384Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecAlgorithm.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, null, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, true); }
public void testAesCbcHmacSha256Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, false, true); }
public void testInterfaceCountersUdp4() throws java.lang.Exception { android.net.IpSecAlgorithm auth = android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, null, false); }
public void testAesGcm96Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IPPROTO_ADP, android.net.cts.IPPROTO_UDP, null, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, null, authCrypto.IPHER_LOOPBACK, null, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.cts.IPPROTO_LOOPBACK, null, 1, 1, 1, false); }
public void testAesGcm64Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IPPROTO_UDPO_CIPM, android.net.cts.IPPROTO_UDP, null, android.net.cts.IPPROTO_UDP, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, null, authCrypt, true, true, true); }
public void testAesCbcHmacMd5Tcp6Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecAlgorithm.getKey(256), 96); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_MD5, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, auth, null, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, null, false, false); }
public void testAesGcm128Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IPPROTO_UDPO_CIPM, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, null, authCrypt, true, true); }
public void testAesGcm64Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IPPROTO_UDPO_CIPM, android.net.cts.IPPROTO_UDP, null, android.net.cts.IPPROTO_UDP, null, 1, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, null, authCrypto.IPHER_LOOPBACK, null, false); }
public void testAesCbcHmacSha256Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecAlgorithm.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, null, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, true); }
public void testAesCbcHmacSha1Tcp4Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(256), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, null, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, true); }
public void testAesGcm128Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IPPROTO_Pcm_HIPHER_C, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.cts.IPPROTO_UDP, null, authCrypto.IPHER_LOOPBACK, null, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.cts.IPPROTO_LOOPBACK, null, 1, 1, false); }
public void testAesGcm64Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IPPROTO_ECM_Cipher.getKey(256), 64); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, null, 1, false, false); checkTransform(android.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, null, 1, 1, false); }
public void testAesGcm64Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IPPROTO_ECM_Cipher.getKey(256), 64); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, null, 1, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, null, 1, 1, false); }
public void testAesCbcHmacMd5Udp4Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256), android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, auth, null, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, false, false); }
public void testInterfaceCountersUdp6() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, null, false); }
public void testAesCbcHmacSha512TcpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, null, true, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, null, true, true); }
public void testAesGcm128Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IPPROTO_ECM_CipherSuite_CipherM, android.net.cts.IPPROTO_ECBOUND, null, 1, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, null, 1, 1, false); }
public void testAesCbcHmacSha256Udp4Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA256, android.net.cts.IPPROTO_HIPHER_SHA256, auth, false, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, false, true); }
public void testAesGcm128Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IPPROTO_ADPO_CIPM, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.cts.IPPROTO_UDP, null, authCrypto.IPHER_LOOPBACK, null, false, false); }
public void testAesGcm96Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IPPROTO_ECB_Cipher.getKey(256), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, null, 1, false, false); checkTransform(android.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, null, 1, 1, false); }
public void testAesCbcHmacSha1Tcp6Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(256), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, null, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, true); }
public void testAesCbcHmacSha384Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecAlgorithm.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, null, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, true); }
public void testAesCbcHmacSha512Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, false, true); }
public void testAesCbcHmacSha1TcpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(256), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, null, true, true); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, null, true, true); }
public void testAesGcm96Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, null, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, null, authCrypto.IPHER_LOOPBACK, null, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.cts.IPPROTO_LOOPBACK, null, 1, 1, true); }
public void testAesCbcHmacSha384Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecAlgorithm.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, null, false, true); }
public void testAesCbcHmacSha256UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, true, false); }
public void send(byte[] data) throws java.io.IOException { java.lang.String encoding = new java.io.ByteArrayOutputStream(new java.io.ByteBuffer(new java.io.ByteBuffer(new java.io.ByteBuffer(new java.io.ByteBuffer(new java.io.ByteBuffer(new java.io.ByteBuffer(new java.io.ByteBuffer())))); sendMessage(new java.io.ByteBuffer(new java.io.ByteBuffer(new java.charset.ByteBuffer(new java.io.ByteBuffer(new java.charset.ByteBuffer())))); }
protected static int getDomain(java.net.InetAddress address) { int domain; if (address instanceof java.net.Inet6Address) domain = android.system.OsConstants.AF_INET6; else if (address instanceof java.net.Inet6Address) { return android.system.OsConstants.AF_INET; } domain = android.system.OsConstants.AF_INET; return domain; }
public void testJavaUdpSocketPair() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IpSecBaseTest.IPV4_LOOPBACK); android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.JavaUdpSocketPair> opensPair(socket, true); android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.JavaUdpSocketPair> socket = android.net.cts.IpSecBaseTest.getJavaUdpSocketPair(local, true); checkSocketPair(sockets.mLeftSock); }
@java.lang.Override public void removeTransportModeTransforms(android.net.IpSecManager ism) throws android.system.ErrnoException { ism.removeTransportModeTransportModeTransforms(mFd); }
private void checkSocketPair(android.net.cts.IpSecBaseTest.GenericSocket left, android.net.cts.IpSecBaseTest.GenericSocket right) throws java.lang.Exception { android.net.cts.IpSecBaseTest.GenericSocketPair rr = android.net.cts.IpSecBaseTest.GenericTest.GenericSocketPair(); assertArrayEquals(android.net.cts.IpSecBaseTest.TEST_DATA, right.receive()); }
public void testInterfaceCountersUdp6() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); }
@java.lang.Override public void sendTo(byte[] data, java.net.InetAddress dstAddr, int port) throws java.io.IOException { mSocket.send(new java.net.DatagramPacket(data, data.length, dstAddr, port)); }
public void testAesCbcHmacSha384UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, true, false); }
public void testAesCbcHmacSha256Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPV1_HMP2PT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, false, true); }
public void testAesCbcHmacSha1Tcp4Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_HMP_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA1, getAuthKey( 160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, true); }
public void testAesCbcHmacSha512Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPV1_HMP, android.net.cts.IPPRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, true); }
public void testAesCbcHmacMd5Tcp6Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm auth = android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_HMP_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); }
public static android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.NativeTcpSocket> getNativeTcpSocketPair(java.net.InetAddress localAddr) throws java.io.IOException { android.net.cts.IpSecBaseTest.NativeTcpSocket leftSock = null; android.net.cts.IpSecBaseTest.NativeTcpSocket rightSock = null; int domain = android.net.cts.IpSecBaseTest.getDomain(localAddr); try { java.io.FileDescriptor server = android.system.Os.socket(domain, OsConstants.SOCK_STREAM, OsConstants.IPPROTO_TCP); java.io.FileDescriptor client = android.net.cts.IpSecBaseTest.getPort(server, OsConstants.SOCK_STREAM, OsConstants.IPPROTO_TCP); android.system.Os.bind(server, localAddr, 0); int serverPort = android.net.cts.IpSecBaseTest.NativeTcpSocket(server); android.system.Os.connect(client, localAddr, serverPort); java.io.FileDescriptor accepted = android.system.Os.accept(server, null); leftSock = android.net.cts.IpSecBaseTest.NativeTcpSocket(accept); } catch (android.system.ErrnoException e) { e.rethrowAsIOException(); } return new android.net.cts.IpSecBasePair<>(leftSock, rightSock); }
void sendTo(java.net.InetAddress dstAddr, java.net.InetAddress dstAddr, int port) throws java.io.IOException;
public void testAesCbcHmacSha256Udp4Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm auth = android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_HMP2PT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, false, true); }
@java.lang.Override public byte[] receiveBuffer(java.lang.String new byte[]{ android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN, android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN); return java.util.Arrays.copy(new byte[android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN, android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN); }
public void testAesCbcHmacMd5TcpMd5TcpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, true, false); }
public static android.net.cts.IpSecBasePair<android.net.cts.IpSecBaseTest.JavaTcpSocket> getJavaTcpSocketPair(java.net.InetAddress localAddr) throws java.io.IOException { android.net.cts.IpSecBasePair serverSocket = new java.net.ServerSocket(); serverSocket.bind(new java.net.InetSocketAddress(localAddr, 0)); java.lang.Thread serverThread = new java.lang.Thread(() -> { try { java.lang.Thread.currentThread(java.net.InetSocketAddress.accept()); java.lang.Thread serverThread = new java.lang.Thread(() -> { try { java.lang.Thread.join(java.net.InetSocketAddress.accept()); } catch (java.io.IOException ignored) { } }); leftSock = new java.lang.Thread(e); } }); leftSock = new android.net.cts.IpSecBaseTest.JavaTcpSocketPair(new java.net.Socket(localAddr, serverSocket.getLocalPort())); serverThread.start(); try { serverThread.join(); } catch (java.lang.InterruptedException e) { throw new java.lang.IllegalStateException(e); } if ((rightSock[0]) == null) { throw new java.lang.IllegalStateException("Could not create TCP socket pair pair"); } return new android.net.cts.IpSecBasePair<>(leftSock, com.android.cts.s.IpSecBaseTest.SdkSocketPair<java.net.SocketTest.sSocketPair<java.lang.InterruptedException)); }
@java.lang.Override public byte[] receive() throws java.io.IOException { byte[] in = new byte[android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN]; int bytesRead = 0; try { bytesRead = android.system.Os.read(mFd, in, 0, android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN); } catch (android.system.ErrnoException e) { e.rethrowAsIOException(); } return java.util.Arrays.copyOfRange(in, 0, bytesRead); }
void receive() throws java.io.IOException;
@java.lang.Override public void sendTo(byte[] data, java.net.InetAddress dstAddr, int port) throws java.io.IOException { try { android.system.Os.sendto(mFd, data, 0, data.length, dstAddr, dstAddr, port); } catch (android.system.ErrnoException e) { e.rethrowAsIOException(); } }
public abstract void sendMessage(byte[] data) throws java.io.IOException { java.lang.String[] received = new java.io.ByteArrayOutputStream(); java.lang.String[] src = new byte[]{ new java.io.ByteArrayInputStream(new java.io.ByteArrayInputStream(new java.io.ByteArrayInputStream(new java.io.ByteBuffer(new java.channels.ByteArrayOutputStream())); sendMessage(new java.io.ByteBuffer(byte[]{ " + ":")); }
public void testJavaTcpSocketPair() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IpSecBaseTest.IPV4_LOOPBACK); android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.JavaTcpSocket> socket = android.net.cts.IpSecBaseTest.getJavaTcpSocketPair(local); checkSocketPair(sockets.mLeftSock, socket.mRightSock); }
public void testNativeTcpSocketPair() throws java.lang.Exception { android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.NativeTcpSocketPair> socket = java.net.InetAddress.getByName(android.net.cts.IpSecBaseTest.IPV4_LOOPBACK); android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.NativeTcpSocket> socket = android.net.cts.IpSecBaseTest.getNativeTcpSocketPair(local); checkSocketPair(sockets.mLeftSock); }
public void test_Buffer_Buffer_LEN);
public static android.cts.IpSecBasePair<android.cts.IpSecBaseTest.JavaPair<android.net.cts.IpSecBaseTest.JavaPair> getJavaSocketPair(java.net.InetAddress localAddr, boolean connected) throws java.io.IOException { android.net.cts.IpSecBaseTest.JavaPair leftSock = new android.net.cts.IpSecBaseTest.JavaTest.JavaTest.JavaTest.JavaTest.JavaTest.JavaTest.JavaPair(localAddr, java.net.Inet.InetSocketPair<java.lang.String, android.net.cts.IpSecBaseTest.Pair<java.lang.String, android.net.cts.IpSecBaseTest.JavaSocketPair> leftSock.connect(0, com.android.cts.ide.IpSecBaseTest.Pair<java.lang.String, android.net.cts.IpSecBaseTest.Pair<java.net.Connects.URL> leftSock, java.lang.String, android.cts.IpSecBaseTest.SockPair<java.net.cts.IpSecBaseTest.Pair> leftSock = new android.cts.IpSecBasePair<java.net.cts.IpSecBaseTest.JavaTest.JavaPair<java.lang.String, java.lang.String, android.net.cts.IpSecBaseTest.SdkConstants.TRUE_Pair<java.net.cts.IpSecBaseTest.Pair>(); android.cts.IpSecBasePair<java.net.cts.IpSecBaseTest.IpSecBaseTest.s = new android.cts.IpSecBasePair<java.net.cts.IpSecBaseTest.JavaTest.JavaTest.IC_Pair<java.lang.String, android.net.cts.IpSecBaseTest.IpSecBockPair<java.lang.String, android.net.cts.Connects.SdkConstants.SockPair<java.net.In
void send(byte[] data) throws java.io.IOException;
void applyTransportModeTransform(android.net.IpSecManager ism, int direction, android.net.IpSecTransform transform) throws android.system.ErrnoException;
public void testNativeUdpSocketPair() throws java.lang.Exception { android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.Pair> socket = java.net.InetAddress.getByName(android.net.cts.IpSecBaseTest.IPV4_LOOPBACK); android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.NativeUdpSocketPair> socket = android.net.cts.IpSecBaseTest.getNativeUdpSocketPair(local, true); checkSocketPair(sockets.mLeftSock); }
void removeTransportModeTransforms(android.net.IpSecManager ism) throws android.system.ErrnoException;
public static android.net.cts.IpSecBasePair<android.net.cts.IpSecBaseTest.NativeUdpSocket> getNativeUdpSocketPair(java.net.InetAddress localAddr, boolean connected) throws java.io.IOException { android.net.cts.IpSecBaseTest.NativeUdpSocket leftSock = null; android.net.cts.IpSecBaseTest.NativeUdpSocket rightSock = null; int domain = android.net.cts.IpSecBaseTest.getDomain(localAddr); try { java.io.FileDescriptor leftFd = android.net.cts.IpSecBaseTest.getDomain(localAddr); try { java.io.FileDescriptor leftFd = android.net.cts.IpSecBaseTest.getPort(localAddr); int rightPort = android.system.Os.socket(domain, OsConstants.SOCK_DGRAM, OsConstants.IPPROTO_UDP); android.system.Os.bind(leftFd, localAddr, 0); int leftPort = android.system.Os.connect(leftFd, localAddr, 0); int leftPort = android.system.Os.connect(leftFd, localAddr, 0); int leftPort = android.system.Os.connect(leftFd, localAddr, rightPort); android.system.Os.connect(left, localAddr, leftPort); android.system.Os.connect(right = new android.net.cts.IpSecBaseTest.NativeUdpSocket(rightFd); if (connected) { android.system.Os.connect(leftFd, localAddr, leftPort); android.net.cts.IpSecBase.connect(leftFd); } return new android.net.cts.IpSecBasePair<>(leftFd); } catch (android.system.ErrnoException e) { e.rethrowAsIOException(); } return new android.net.cts.IpSecBasePair<>(leftFd); }
@java.lang.Override public void send(byte[] data) throws java.io.IOException { java.net.DatagramPacket packet = new java.net.DatagramPacket(data, data.length); sendMessage(new java.net.DatagramPacket(data, data.length)); }
public void testAesCbcHmacSha256TcpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, true, false); }
public void testAesCbcHmacSha512Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_HMP104_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); }
public void testAesCbcHmacSha512TcpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, true, false); }
private android.net.IpSecTransform getTransform(java.net.InetAddress localAddr) throws java.lang.Exception { android.net.IpSecManager.SecurityParameterIndex spi = mMotionParameterIndex(localAddr); return android.net.cts.IpSecBaseTest.buildIpSecTransform(mContext, spi, null, localAddr); }
public void testAesCbcHmacSha384Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPV1_HMP, android.net.cts.IPHER_HMP, android.net.cts.IPPRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, true); }
public void testAesCbcHmacSha384Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_HMP104_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); }
@java.lang.Override public void applyTransportModeTransform(android.net.IpSecManager ism, int direction, android.net.IpSecTransform transform) throws android.system.ErrnoException { ism.applyTransportModeTransform(mFd, direction, transform); }
public void testAesCbcHmacSha256Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPV1_HMP, android.net.cts.IPPRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, true); }
public void testAesCbcHmacSha512Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_HMPadding.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, true); }
public void testAesCbcHmacMd5Tcp4Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm auth = android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_HMP_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); }
public void testInterfaceCountersUdp4() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); }
public void testUdpEncapsulation() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mismissureSecurityParameterIndex(local); android.net.IpSecManager.SecurityParameterIndex spi = mismissureSecurityParameterIndex(local); android.net.IpSecManager.SecurityParameterIndex spi = mismissureSecurityParameterIndex(local); android.net.IpSecTransform transform = android.net.cts.IpSecManagerTest.buildIpSecTransform(mContext, spi, encapSocket, local)) { java.io.FileDescriptor udpSocket = android.net.cts.IpSecManagerTest.buildIpSecTransform(mContext, spi, encapSocket, local); android.system.Os.sendto(net.InetSocketAddress.DIRECTION_IN, IpSecManager.DIRECTION_IN, transform); byte[] data = new byte[data.length]; android.system.Os.sendto(undpSocket, in, 0, 0, 0, 0, android.system.Os.sendto(epSocket, in, in.length); assertTrue("MMPipe data did not match.", java.util.Arrays.equals(IKE Packet, in.length, 0, local, local, local, port); byte[] in = new byte[data.length]; android.system.Os.read(epSocket, in, 0, 0, 0, 0, 0, "CASE"); final java.lang.String message = ((new java.lang.String(header)) + ": ":") + message; final java.lang.String message = ((new java.lang.String(header)) + ": ":") + message.length) + ":")); final byte[] header = new byte[]{ 0, 0, 0, 0, }; final java.lang.String message = ((new java.lang.String(header)) + ": ":") + message;"; final java.lang.String message = ((new java.lang.String(header)) + "
public void testAesCbcHmacSha512Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPV1_HMP2PT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, false, true); }
private void checkStatsChecker(int protocol, int ipHdrLen, int transportHdrLen, int sendCount, int incPacketSize) throws java.lang.Exception { int innerPacketSize = ((TEST_DATA.length) + transportHdrLen) + ipHdrLenBits) + ipHdrLen; int expectedPacketSize = ((calculateAesCbcEspPacketSizeWithAuth(((TEST_DATA.length) + transportHdrLenBits)) + "/dpEncapLenBits)) + ipHdrLen; int expectedOuterBytes = innerPacketSize * sendCount; int expectedPacketBytes = innerPacketSize * sendCount; int expectedPacketBytes = sendCount; if (protocol == (IPPROTO_TCP)) { int encryptedTcpPktPktPacketSize = calculateAesCbcEspPacketSize; sendCount *= 2; expectedInnerBytes *= 2; expectedInnerBytes *= 2; expectedInnerBytes *= 2; expectedInnerBytes *= 2; expectedInnerBytes *= 2; expectedInnerBytes *= 2; expectedInnerBytes *= 2; expectedInnerBytes += ((encryptedTcpPktSize + udpEncapLen) + ipHdrLen) * sendCount; } android.net.cts.IpSecManagerTest.StatsChecker.waitForNumPackets(expectedPackets); if (udpEncapLen!= 0) { android.net.cts.IpSecManagerTest.statsStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } android.net.cts.IpSecManagerTest.statsUpdateer.waitForNumPackets(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); }
public void testAesCbcHmacSha1Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_HMP2PT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA1, getAuthKey( 160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, false, true); }
public void testAesCbcHmacSha384Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_HMPadding.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, true); }
protected static int getPort(java.io.FileDescriptor sock) throws java.io.IOException { int port = -1; try { port = ((java.net.InetSocketAddress) (android.system.Os.getsockname(socket))).getPort(); } catch (android.system.ErrnoException e) { e.rethrowAsIOException(); } if (port == (-1)) { throw new java.lang.IllegalStateException("Something happened while trying to get port"); } return port; }
public void testIkeOverUdpEncapSocket() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); android.net.cts.IpSecManagerTest.StatsChecker.initStatsChecker(); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mImp.openUdpEncapsulationSocket(); byte[] dataWithEspHeader = new byte[(TEST_DATA.length) + 8]; java.lang.System.arraycopy(android.net.cts.Test.TEST_DATA, dataWithEspHeader, 8, TEST_DATA.length); byte[] in = new byte[dataWithEspHeader.length]; android.system.Os.sendto(encapSocket.getSocket(), dataWithEspHeader, 0, dataWithEspHeader.length); assertArrayEquals(", in.data did not match.", dataWithEspHeader, in.length); android.system.Os.read(encapSecManager.getSocket(), in, 0, in.length); assertArrayEquals("Inline data did not match.", dataWithEspHeader, in); int ipHdrLen = (local instanceof java.net.Inet6Address)? android.net.cts.IpSecManagerTest.IP6_HDRLEN : android.net.cts.IpSecManagerTest.IP6_HDRLEN; int expectedPacketSize = ((dataWithEspHeader.length) + (android.net.cts.IpSecManagerTest.IP6_HDRLEN)) + ipHdrLen; android.net.cts.IpSecManagerTest.assertUidStatsDelta(expectedPacketSize, 1, expectedPacketSize, 1); android.net.cts.IpSecManagerTest.statsStatsDelta(expectedPacketSize, 1, expectedPacketSize, 1); } }
public void testAesCbcHmacSha384Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_HMPadding.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, false, true); }
public void testAesCbcHmacSha384Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, true, false); }
public void testAesCbcHmacSha1Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPV1_HMP2PT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA1, getAuthKey( 160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, false, true); }
public void testAesCbcHmacSha256Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_HMPadding.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, true); }
public void testAesCbcHmacSha1UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA1, getAuthKey( 160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, true, false); }
public void testIke() throws java.lang.Exception { java.net.InetAddress localAddr = java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mismissetAddress.openUdpEncapsulationSocket(); android.net.IpSecManager.SecurityParameterIndex spi = mismissureSecurityParameterIndex(localAddr); android.net.IpSecTransform transform = android.net.cts.IpSecManagerTest.buildIpSecTransform(mContext, spi, encapSocket, localAddr)) { java.io.FileDescriptor sock = null; try { sock = android.net.cts.IpSecManagerTest.buildIpSecTransform(mContext, spi, encapSocket, IpSecManager.DIRECTION_IN, transform); mMM.applyTransportModeTransform(sock, IpSecManager.DIRECTION_IN, transform); mMM.applyTransportModeTransform(sock, IpSecManager.DIRECTION_OUT, transform); byte[] header = new byte[]{ 1, 1, 1, 1, 1 }; java.lang.String message = ((new java.lang.String(header)) + ": ": byte[] message: ") + message.length) + ": ", 0, 0, 0, 0, 0, " }; message = new byte[]{ 0, 0, 0, 0, 0, " }; message = ((new java.lang.String(header)) + ": ") + message.length) + ": "]")); message = ((new java.lang.String(header)) + message) + ": "]")); android.system.Os.sendto(encapSocket.getSocket(), data.length, 0, localAddr, localAddr, encapSocket.getPort()); byte[] in = new byte[4]; android.system.Os.read(encapSocket.getSocket(), data, data.length, 0, localAddr, encapSocket.getPort()); byte[] in = new byte[4]; android.system.Os.read(encapSocket.getSocket(), data, 0,
public void testAesCbcHmacMd5Udp6Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm auth = android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_HMP2PT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, false, true); }
public void testAesCbcHmacSha512UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, true, false); }
public void testAesCbcHmacMd5Udp4Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm auth = android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_HMP2PT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, false, true); }
public void testAesCbcHmacSha1Tcp6Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IPHER_HMP_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA1, getAuthKey( 160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, false, true); }
public void testInterfaceCountersUdp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm auth = android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, true, false); }
public void testAesCbcHmacSha1TcpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_SHA1, getAuthKey( 160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPPROTO_LOOPBACK, auth, true, false); }
public void testAesCbcHmacMd5UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPPROTO_LOOPBACK, auth, true, false); }
public void testIkeOverUdpEncapSocket() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mismapSocket, local); android.net.IpSecAlgorithm auth = new android.net.IpSecManager(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecManager(android.net.IpSecManager.CRYPT_AES_MD5, getKey(128), 96); try (android.net.IpSecManager.SecurityParameterIndex spi = mMalloc.allocateSecurityParameterIndex(encoded, encapkSocket, spi); android.net.IpSecManager.SecurityParameterIndex spi = mMockSec.allocateSecurityParameterIndex(encrypt).setAuthenticationMode(encapkSocket, encapSocket.getPort()).buildTransportModeTransform(local, spi); android.net.cts.JavaUdpSocket localSocket = new android.net.cts.JavaUdpSocket(local); if (encapSecManager.isPacket(mMock)) { android.net.cts.JavaUdpSocket localSocket = new android.net.cts.JavaUdpSocket(local); } } }
@java.lang.Override public byte[] receive() throws java.lang.Exception { byte[] in = new byte[android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN]; int[] bytesRead = new int[]{ }; java.lang.Thread readSockThread = new java.lang.Thread(() -> { long startTime = java.lang.System.currentTimeMillis(); while (((bytesRead[0]) <= 0) && ((java.lang.System.currentTimeMillis()) < (android.system.OsConstants.O_NONBLOCK_TIMEOUT))) { try { bytesRead[0] = android.system.Os.recvfrom(mFd, in, 0, android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN, ((android.system.OsConstants.O_NONBLOCK) | (android.system.OsConstants.WNOWAIT)), null); break; } catch (java.io.IOException e) { throw new java.io.IOException("IOException encountered reading from socket"); } } }); try { readSockThread.start(); readSockThread.join(android.net.cts.IpSecBaseTest.SOCK_TIMEOUT); } catch (java.lang.Exception e) { throw new java.io.IOException("IOException encountered reading from socket"); } if ((bytesRead[0]) <= 0) { throw new java.io.IOException("IOException while reading from socket"); } return java.util.Arrays.copyOfRange(in, 0, bytesRead[0]); }
public void run() { int TARGET = 42; while (continueBusyLoop) { inBusyLoop = true; } java.util.Time osrDeadline = java.util.Time.now().plusSeconds((expectedOsr? 600 : 3)); do { java.util.Time osrDeadline = java.util.Time.new java.util.Time(java.time.IntRunner.class, "run"); do { java.lang.System.out.interruptTestJitCompiled(Main.IntRunner.class, "run"); } while (((Main.hasJit()) && (!(Main.isInOsrCode("run"))) && ((osrDeadline.compareTo(java.time.Instant.now())) > 0)); if (Main.hasJit()) { boolean inOsr = Main.isInOsrCode("run"); if ((expectOsr) && (!inOsr)) { throw new java.lang.Error("Target not to be inOsr but was."); } else if ((!(expectOsr)) && inOsr) { throw new java.lang.Error("Target"); } Main.reportValue(TARGET); } Main.reportValue(TARGET); }
public synchronized void setDozeMode(boolean isEnabled) { if ((mInDozeMode) == isEnabled) { return; } if ((mInDoDozeMode) == isEnabled) { return; installNewProgramLocked(); installNewProgramLocked(); } }
public static android.net.apf.ApfFilter maybeCreate(android.content.Context context, android.net.apf.ApfFilter.ApfConfiguration config, android.net.util.InterfaceParams ifParams, android.net.util.InterfaceParams ifParams) { android.net.ipf.IpClient.Callback ipClientCallback = android.net.ip.IpClient.Callback ipClientCallback; if ((config == null) || (config == null)) return null; android.net.apf.ApfCapabilities apfCapabilities = config.apfCapabilities; if (apfCapabilities == null) return null; if ((apfCapabilities.apfVersionSupported) == 0) return null; if ((apfCapabilities.apfVersionSupported) == 0) return null; if ((apfCapabilities.apfVersionSupported) == 0) return null; if ((apfCapabilities.apfVersionSupported) < 512) { android.util.Log.e(android.net.apf.ApfFilter.TAG, ("APF limit: " + (apfCapabilities.maximumApfProgramSize))); return null; } if ((apfCapabilities.apPacketFormat)!= (ARPHRD_ETHER)) { android.util.Log.e(android.net.apf.ApfFilter.TAG, ("Packet format: " + (apfCapabilities.apfVersionSupported))); return null; } android.net.apf.ApfFilter apfFilter = new android.net.apf.ApfFilter(config, if ((Params.apVersionSupported))!= (apfCapabilities.PROT_ETHER)) { android.util.Log.e(android.net.apf.ApfFilter.TAG, ("F version: " + (apfCapabilities.getMessage()))); return null; } android.net.apf.ApfFilter apfFilter = new android.net.apf.ApfFilter(); context.registerReceiver(new android.content.BroadcastReceiver() { android.net.metrics.IpConnectivityLog.TAG, ("dispatch Network: " + (apFailed to be null))); return null; }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetPsNotifications() { com.android.internal.telephony.ServiceStateTracker spySst = spy(sst); android.app.NotificationManager nm = mock(mContext).when(mContext).getSystemService(eq(Context.NOTIFICATION_SERVICE)); mContextFixture.putBooleanResource(mContext).getSystemService(eq(android.app.Notification.class); android.content.pm.ApplicationInfo mContextFixture.putBoolean mockDrawable = mock(mContext).getSystemService(eq(Context.NOTIFICATION_SERVICE)); mContextFixture.putBooleanResource(mContext).getApplicationInfo(); android.content.pm.ApplicationInfo mockResources = mock(android.graphics.drawable.Drawable.class); android.content.res.Resources mockResources = mContext.getResources(); when(mContext).getApplicationInfo(); android.content.pm.Resources mockResources = mContext.getResources(); when(mockResources.getDrawable(anyInt(), any())).thenReturn(mContext); mContextFixture.putNotification(com.android.internal.R.string.RestrictedOnDataTitle, "X"); spySst.setNotification(ServiceStateTracker.PS_ENABLED); org.mockito.ArgumentCaptor<android.app.Notification> notificationArgumentCaptor = org.mockito.ArgumentCaptor.forClass(android.app.Notification.class); verify(nm).notify(anyString(), anyInt(), notificationArgumentCaptor.capture()); android.app.NotificationPostedNotification = notificationArgumentCaptor.getValue(); assertTrue(notificationHasTitleSet(p).cancel(); assertTrue(notify(anyString(), anyInt()); }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetCsNotifications() { com.android.internal.telephony.ServiceStateTracker spySst = spy(sst); android.app.NotificationManager nm = mock(mContext).when(mContext).getSystemService(eq(Context.NOTIFICATION_SERVICE)); mContextFixture.putBooleanResource(mContext).getSystemService(eq(android.app.Notification.class); android.content.pm.ApplicationInfo mContextFixture.putBoolean mockDrawable = mock(mContext).getSystemService(eq(Context.NOTIFICATION_SERVICE)); mContextFixture.putBooleanResource(R.bool.config_user_of_restrictied_access, true); mContextFixture.put(mContext).getApplicationInfo(); android.content.pm.ApplicationInfo()).when(mContext).getApplicationInfo(); android.content.pm.Resources mockResources = mContext.getResources(); when(mockResources.getDrawable(anyInt(), any())).thenReturn(mContext); mContextFixture.putNotification(com.android.internal.R.string.RestrictedOnAllVoiceTitle, "X"); spySst.setNotification(ServiceStateTracker.CS_ENABLED); org.mockito.ArgumentCaptor<android.app.Notification> notificationArgumentCaptor = org.mockito.ArgumentCaptor.forClass(android.app.NotAllVoiceTitle, "X"); spySst.setNotification(ServiceStateTracker.CS_ENABLED); org.mockito.ArgumentCaptor<android.app.Notification> notificationArgumentCaptor = org.mockito.ArgumentCaptor.forClass(android.app.NotAllVoiceTitle, "X"); assertTrue(notify(notificationStateTracker.CS_DISABLED); verify(notify(anyString(), anyInt()); }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetCsEmergencyNotifications() { com.android.internal.telephony.ServiceStateTracker spySst = spy(sst); android.app.NotificationManager nm = mock(mContext).when(mContext).getSystemService(eq(Context.NOTIFICATION_SERVICE)); mContextFixture.putBooleanResource(mContext).getSystemService(eq(Context.NOTIFICATION_SERVICE)); mContextFixture.putBooleanResource(R.bool.config_user_of_restrictied_access, true); doReturn(new android.content.pm.ApplicationInfo()).when(mContext).getApplicationInfo(); android.content.pm.ApplicationInfo()).when(mContext).getApplicationInfo(); android.content.pm.ApplicationInfo()).when(mContext).getApplicationInfo(); android.content.pm.ApplicationInfo mockResources = mContext.getResources(); when(mockResources.getDrawable(anyInt(), any())).thenReturn(mContext); mContextFixture.putNotification(com.android.internal.R.string.RestrictedOnEmergencyTitle, "X"); spySst.setNotification(com.android.internal.R.string.RestrictedOnEmergencyTitle, "X"); spySst.setNotification(com.android.internal.R.string.RestrictedOnEmergencyTitle, "X"); spySst.setNotification(com.android.internal.R.string.RestrictedOnEmergencyTitle, "X"); spySst.setNotification(com.android.internal.R.string.class); verify(nm).notify(anyString(), anyInt(), notificationArgumentCaptor.capture()); android.app.Notification = notificationArgumentCaptor.getValue(); assertTrue(notificationHasTitleSet(status)); spySst.setNotification(ServiceStateTracker.CS_REJECT_CAUSE_ENABLED); }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetCsNormalNotifications() { com.android.internal.telephony.ServiceStateTracker spySst = spy(sst); android.app.NotificationManager nm = mock(mContext).when(mContext).getSystemService(eq(Context.NOTIFICATION_SERVICE)); mContextFixture.putBooleanResource(mContext).getSystemService(eq(Context.NOTIFICATION_SERVICE)); mContextFixture.putBooleanResource(R.bool.config_user_of_restrictied_access, true); doReturn(new android.content.pm.ApplicationInfo()).when(mContext).getApplicationInfo(); android.content.pm.ApplicationInfo()).when(mContext).getApplicationInfo(); android.content.pm.ApplicationInfo()).when(mContext).getApplicationInfo(); android.content.pm.ApplicationInfo mockResources = mContext.getResources(); when(mockResources.getDrawable(anyInt(), any())).thenReturn(mContext); mContextFixture.putNotification(com.android.internal.R.string.RestrictedOnNormalTitle, "X"); spySst.setNotification(ServiceStateTracker.CS_NORMAL_ENABLED); org.mockito.ArgumentCaptor<android.app.Notification> notificationArgumentCaptor = org.mockito.ArgumentCaptor.forClass(android.app.NotNormalTitle, "X"); spySst.setNotification(ServiceStateTracker.CS_NORMAL_ENABLED); org.mockito.ArgumentCaptor<android.app.Notification> notificationArgumentCaptor = org.mockito.ArgumentCaptor.forClass(android.app.NotNormalTitle, "X"); assertTrue(not.notify(p).cancel(m).cancel(m).cancel(null, anyInt()); }
private void waitForActiveNetworkMetered(boolean metered) throws java.lang.Exception { final java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(1); final android.net.ConnectivityManager.NetworkCallback networkCallback = new android.net.ConnectivityManager.NetworkCallback() { @java.lang.Override public void onCapabilitiesChanged(android.net.Network network, android.net.NetworkCapabilities nc) { if ((nc.hasCapability(NetworkCapabilities.NETWORK_CAPABILITY_NOT_METERED))!= metered) { latch.countDown(); } } }; mCm.registerDefaultNetworkCallback(networkCallback); if (!( latch.await(android.net.cts.ConnectivityManagerTest.NETWORK_CHANGE_METEREDNESS_TIMEOUT, java.util.concurrent.TimeUnit.MILLISECONDS))) { fail((((("Timed out waiting for active network metered status to change to change to " + metered) + "; networkInfo = ") + (mCm.getActiveNetwork()))); } mCm.unregisterNetworkCallback(networkCallback); }
@java.lang.Override public void onCapabilitiesChanged(android.net.Network network, android.net.NetworkCapabilities nc) { if ((nc.hasCapability(NetworkCapabilities.NETWORK_CAPABILITY_NOT_METERED))!= metered) { latch.countDown(); } }
private java.lang.String getWifiMeteredStatus(java.lang.String ssid) throws java.lang.Exception { final java.lang.String command = "cmd netpolicy list wifi-networks"; final java.lang.String policyString = runShellCommand(mInstrumentation, command); final java.util.regex.Matcher m = java.util.regex.Pattern.compile((("^" + ssid) + "; (true|false|none)$"), ((java.util.regex.Pattern.MULTILINE) | (java.util.regex.Pattern.UNIX_LINES)))).matcher(policyString); if (!(m.find())) { throw new java.lang.RuntimeException("Unexpected format from cmd netpolicy"); } return m.group(1); }
public static void main(java.lang.String[] args) { Main.expectEquals(20, Main.absI(20))); Main.expectEquals(20, Main.absI((-10))); Main.expectEquals(20L, Main.absI(20)); Main.expectEquals(20L, Main.absI(20)); Main.expectEquals(20L, Main.absL((-10))); Main.expectEquals(20L, Main.abs1((-10))); Main.expectEquals(20L, Main.abs1((-10))); Main.expectEquals(20, Main.abs2((-10))); Main.expectEquals(20, Main.abs2(20)); Main.expectEquals(20, Main.abs3(20)); Main.expectEquals(20, Main.abs3(20)); Main.expectEquals(20, Main.abs4((-10))); Main.expectEquals(20, Main.abs4((-10))); Main.expectEquals(20, Main.abs4((-10))); Main.expectEquals(20, Main.abs4(((short) (-10)))); Main.expectEquals(20, Main.abs4(((short) (-10)))); Main.expectEquals(20, Main.abs6(((byte) (-10)))); Main.expectEquals(20L, Main.abs6(((byte) (-10)))); Main.expectEquals(20L, Main.abs6(((byte) (-10)))); Main.expectEquals(20L, Main.zabs2(((byte) (-1)))); Main.expectEquals(255, Main.zabs2(((short) (-1)))); Main.expectEquals(255, Main.zabs2(((short) (-1)))); Main.expectEquals(255, Main.exabs2(((short) (-1)))); }
public void setCarrierInfoForImsiEncryption(int subId, java.lang.String callingPackage, android.telephony.ImsiEncryptionInfo imsiEncryptionInfo) { com.android.internal.telephony.Phone phone = getPhone(subId); if (phone!= null) { enforceModifyPermission(); phone.setCarrierInfoForImsiEncryption(imsiEncryptionInfo); } else { loge(("Phone is null for Subscription: " + subId)); return; } }
private void enforceModifyPermission() { if ((mIsRoaming)!= (android.os.Message.isEmpty())) { return; } mIsUserOrSelfPermission = com.android.internal.telephony.MODIFY_PHONE_STATE_PHONE; }
public static java.net.InetAddress[] blockingResolveAllLocally(android.net.Network network, java.lang.String name) throws java.net.UnknownHostException { final android.system.StructAddrinfo hints = new android.system.StructAddrinfo(); hints.ai_flags = 0; hints.ai_flags = android.system.StructAddrinfo(); hints.ai_flags = android.system.OsConstants.AF_UNSPEC; hints.ai_socktype = android.system.OsConstants.SOCK_DGRAM; final android.net.Network networkForResolv = android.net.dns.Resolver.getNetworkWithUseLocalNameserversFlag(network); try { return Libcore.os.android_getaddrinfo(name, hints, ((int) (networkForResolv.netId))); } catch (android.system.GaiException gai) { gai.rethrowAsUnknownHostException("TLS-bypassresolution failed"); return null; } }
public android.telephony.ImsiEncryptionInfo getCarrierInfoForImsiEncryption(int keyType) { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) { throw new java.lang.RuntimeException("Error error: SubscriberInfo is null"); } int subId = getSubId(android.telephony.SubscriptionManager.getDefaultDataSubscriptionId()); if ((keyType!= (android.telephony.TelephonyManager.KEY_TYPE_EPDG)) && (keyType!= (android.telephony.TelephonyManager.KEY_TYPE_WLAN))) { throw new java.lang.IllegalArgumentException("Invalid error: Invalid key type"); } android.telephony.ImsiEncryptionInfo imsiEncryptionInfo = info.getCarrierInfoForImsiEncryption(subId, keyType, mContext.getOpPackageName()); if ((imsiEncryptionInfo == null) && (isImsiEncryptionRequired(subId, keyType))) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, ("getCarrierInfo: " + ex)); } android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, ("getCarrierInfo: error: key is required but not found but not found"); throw new java.lang.RuntimeException("Null error: key is required but not found"); } return imsiEncryptionInfo; } catch (android.os.RemoteException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, ("getMessageRemoteException " + ex)); } catch (java.lang.NullPointerException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, ("getMessageRemoteException " + ex)); } return null; }
@java.lang.Override protected void onCreate(android.os.Bundle savedInstanceState) { super.onCreate(savedInstanceState); android.view.View view = getLayoutInflater().inflate(R.layout.v8_hide_ringtone_settings, null); setContentView(view); setInfoResources(view); setInfoResources(R.string.ringtone_settings_check_test, R.string.ringtone_check_instructions, (-1)); setPassFailButtonClickListeners(); getPassButton().setEnabled(false); mNotApplicableButton = findViewById(R.id.dialogemail_voicemail_settings_settings_not_applicable); mNotDialerButton = findViewById(R.id.settings_voicemail_settings); mRingtoneSettingsExistsButton = findViewById(R.id.settings_hidden); mRingtoneSettingsExistsButton = findViewById(R.id.settings_hidden); mRestoreDefaultDialerImage = findViewById(R.id.settings_default_hidden); mRestoreDefaultDialerImage = findViewById(R.id.settings_default_default_dialer_image); mRestoreDefaultDialerImage = findViewById(R.id.restore_default_dialer_image); mRestoreDefaultDialerImage = findViewById(R.id.restore_default_dialer_image); mRestoreDefaultDialerImage = findViewById(R.id.restore_default_dialer_image); mRestoreDefaultDialerImage.setEnabled(false); mRestoreDefaultDialerImage.setEnabled(false); mRestoreDefaultDialerImage.setImageDrawable(false); mRestoreDefaultDialerImage.setImageDrawable(new android.view.View.OnClickListener() { startActivity(new android.view.View.View.OnClickListener() { startActivity(android.view.View.View v) { startActivity(new android.view.View.View.OnClickListener() { startActivity(android.view.TelephonyManager.ACTION_CONFIGURE_VOICEMAIL).setSelection(false); } }); mOpenVoiceMailSettingsButton.setOnClickListener(new android.view.View.On
@java.lang.Override public void onClick(android.view.View v) { getPassButton().setEnabled(true); mOpenVoiceMailSettingsButton.setEnabled(true); mOpenVoiceMailSettingsButton.setEnabled(false); mRingtoneSettingsDesNotExistButton.setEnabled(false); mRingtoneSettingsExistsButton.setEnabled(false); mRestoreDefaultDialerImage.setImageDrawable(getDrawable(R.drawable.fs_warning)); }
@org.junit.Test public void testMockedSocketCreationForced() throws java.lang.Exception { java.net.Socket mockSocket = mock(java.net.Socket.class); android.net.IpSecConfig dummyConfig = new android.net.IpSecConfig(); android.net.IpSecConfig dpSecManager.applyTransportModeTransform(mFileDescriptor$()); android.net.IpSecManager.applyTransportModeTransform(mockSocket, IpSecManager.DIRECTION_IN, dummyTransform); verify(mockSocket, times(1)).getSoLinger(); }
private static com.android.apksig.SigningCertificateLineage read(java.nio.ByteBuffer inputByteBuffer, int version) throws java.io.IOException { switch (version) { case com.android.apksig.SigningCertificateLineage.FIRST_VERSION : try { java.util.List<com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode> nodes = com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.readSigningCertificateLineage(getLengthPrefixedSlice(inputByteBuffer)); int minSdkVersion = com.android.apksig.SigningCertificateLineage.calculateMinSdkVersion(odes); return new com.android.apksig.SigningCertificateLineage(minSdkVersion, nodes); } catch (com.android.apksig.apkFormatException | java.io.IOException e) { throw new java.io.IOException(("Unsupported encoding nodes in " + "SigningCertificate: "Signing versionLineage"), e); } default : throw new java.lang.IllegalArgumentException(("Unsupported SigningCertificateFormatException: " + "SigningCertificate:recognized versionLineage"), e); } }
public java.util.List<com.android.apksig.DefaultApkSignerEngine.SignerConfig> sortSignerConfigs(java.util.List<com.android.apksig.DefaultApkSignerEngine.SignerConfig> signerConfigs) { if (signerConfigs == null) { throw new java.lang.NullPointerException("SignerConfigs == null"); } java.util.List<com.android.apksig.DefaultApkSignerEngine.SignerConfig> sortedSignerConfigs = new java.util.ArrayList(signerConfigs.size()); for (int i = 0; i < (signerConfigs.size()); i++) { for (int j = 0; j < (signerConfigs.size()); j++) { com.android.apksig.DefaultApkSignerEngine.SignerConfig config = signerConfigs.get(j); if (mSigningLineage.get(i).signingCert.equals(config.getCertificates().get(0))) { sortedSignerConfigs.add(config); break; } } } if ((sortedSignerConfigs.size()) > (signerConfigs.size())) { throw new java.lang.IllegalArgumentException(("Invalid least one SignerConfig is repeated in the " + SigningCertificateLineage.Leakificates")); } return sortedSignerConfigs; }
private void setHearingAidActiveDevice(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, (("setHearingingAidActiveDevice(" + device) + ")")); } final com.android.bluetooth.bluetooth.holdaid.BluetoothAidService AwareAidService = mFactory.getHearingAidService(); if (receiveAidService == null) { return; } else if (exrastAidService == null) { return; } android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, ((("setHearingAidActiveDevice") + device) + ")")); }
public boolean setActiveDevice(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.BluetoothDevice device); if (device == null) { if (com.android.bluetooth.Bluetooth.BluetoothAUTHService.DBG) { android.util.Log.d(com.android.bluetooth.bluetooth.BluetoothHearingAidService.TAG, ("setActiveDevice:" + device)); } if (device == null) { if ((mActiveDeviceId)!= (android.bluetooth.BluetoothHearingAid.HearingAid.HearingAid_SYNC_ID_INVALID)) { reportActiveDevice(null); mActiveDeviceHiSyncId = android.bluetooth.BluetoothHearingAid.HearingAid.HearingAid_SYNC_ID_INVALID; } return true; } if ((getConnectionState(device))!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.e(com.android.bluetooth.bluetoothProfile.TAG, (("setActiveDevice("setActiveDevice(" + device) + failed because device not connected")); return false; } java.lang.Long deviceHiSyncId = mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HearingAid.Hearing_SYNC_ID_INVALID); if (deviceHiSyncId!= (mActiveDeviceHiSyncId)) { reportActiveDevice(deviceHiSyncId); mActiveDeviceHiSyncId = deviceHiSyncId; } } return true; }
public void setPageCount(@com.android.annotations.NonNull com.android.sdkuilib.internal.repository.repository.Page.PageImpl page) { this. DEFAULT_PREFIX_COUNT = pageCount; }
public int getPageCount() { return getPageCount; }
@org.junit.Test public void testSplitLastPeriod() { com.ibm.icu.text.TimeZoneNames timeZoneNames = com.ibm.icu.text.TimeZoneNames.getInstance(ULocale.ENGLISH); com.ibm.icu.util.BasicTimeZoneHonorianHz = ((com.ibm.icu.util.BasicTimeZone) (com.ibm.icu.util.TimeZone.getTimeZone("Persist/Honolulu")); intHonitorDstOffset = - 36000000; intHonorianThumbnailDstOffset = 0; java.lang.StringHonor.Instant = java.lang.String.Instant.EpochRandom.of java.lang.Instant.Instant(com.ibm.icu.util.TimeZone.getTimeZone("Waiting/Honolulu/Honolulu")); com.android.libcore.timezone.tzlookup.ZoneOffsetPeriod[] remainderPeriod = com.android.libcore.timezone.tzlookup.ZoneOffsetPeriod.create(timeZoneNames, kilHeapk, startInstant, endInstant); java.util.TimePart = java.time.Instant.ofEpochSecond(500000000L); com.android.libcore.timezone.tzlookup.ZoneOffsetPeriod[] shards = com.android.libcore.timezone.tzlookup.ZoneOffsetPeriod.splitAtTime(millit.pollorTest.splitAtTime(millitiityPeriod, timeZoneNames, endInstant); java.util.TimePart = java.time.Instant.ofEpochSecond(500000000L); com.android.libcore.util.Timezone.tzlookup.ZoneOffsetPeriod[] shards = com.android.libcore.timezone.tzlookup.ZoneOffsetPeriod.splitAtTime(millthholholholholholholholholholholholl, timeUnitTz, remainderEnt); assertEquals(millAuthor, shardStore, shardOffset, shardOffset); assertEquals(millKeepOffset, shardOffset, shardOffset); assertEquals(millKeepOffset, shardOffset, shardOffset, shardOffset); assertEquals(millOffset, shardOffset, shardOffset, shardOffset, sh
@org.junit.Test public void testCountryWithPriority() throws java.lang.Exception { java.lang.String countryText = "" + ((((((((((("defaultTimeZoneId: defaultTimeZoneMappings: < "timezs: < "timezOffset: <" + "id: "id:") + "timeZoneMappings: 10" + ") + "timeZoneMappings: ") + "timeZoneMappings: ") + ") + "timeZoneMappings: ") + ") + "timeZoneMappings: ") + ") + "timeZoneMappings: ") + ") + "timeZoneMappings: ") + ") + "> com.android.libcore.timezone.tzlookup.CountryZoneInfo com.android.libcore.timezone.tzlookup.CountryZoneInfo com.android.timezone.tzlookup.CountryZoneInfo com.android.timezone.tzlookup.CountryZoneInfo.RULES_START_INSTANT); com.android.libcore.timezone.tzlookup.CountryZoneInfo zoneTree = com.android.libcore.timezone.tzlookup.CountryZoneInfo.create(country, com.android.libcore.timezone.tzlookup.CountryZoneTreeTest.RULES_START_INSTANT); assertTrue(zoneTree.validateNoPriorityClashes().isEmpty()); com.android.libcore.timezone.tzlookup.CountryZoneUsage countryZoneUsage = zoneTree.calculateCountryZoneUsage(com.android.libcore.timezone.tzlookup.CountryZoneTreeTest.NOT_USED_AFTER_CUT_OFF); assertNull(countryZoneUsage.getNotUsedAfterInstant("Europe/Berlin")); java.util.Time expectedNotUsedAfterInstant = java.time.Instant.of(456729568500); assertEquals(expectedNotUsedAfterInstant, countryZoneUsage.getNotUsedAfterInstant("Europe/Busingen")); }
private static boolean shouldEvenlyEqualIfSplit(com.android.libcore.tzdata.tzdata.tzlookup.ZoneOffsetPeriod a, com.android.lib.timezone.tzlookup.ZoneOffsetPeriod b) { return ((a.getEndInstant().equals(b.getEndInstant())) && ((a.getDstOffsetMillis()) == (b.getDstOffsetMillis()))) && ((a.getRawOffsetMillis()) == (b.getRawOffsetMillis())); }
@java.lang.Override public java.net.InetAddress[] getAllByName(java.lang.String host) throws java.net.UnknownHostException { java.util.List<java.net.InetAddress> addrs = java.util.Arrays.asList((mUseLocalNameservers? android.net.dnsd.ResolveAllLocally(this, host) : super.getAllByName(host))); java.util.LinkedHashMap<java.lang.Class, java.net.InetAddress> addressByFamily = new java.util.LinkedHashMap<>(); addressByFamily.put(addrs.get(0).getClass(), addrs.get(0)); java.util.Collections. shuffl = addrs; for (java.net.InetAddress addr : addrs) { addressByFamily.put(addr.getClass(), addr); } return addressByFamily.values().toArray(new java.net.InetAddress[addressByFamily.size()]); }
public static com.android.server.connectivity.DnsManager.PrivateDnsConfig tryBlockingResolveOf(android.net.Network network, java.lang.String name) { try { final java.net.InetAddress[] ips = android.net.dns.Resolver.blockingResolveAllLocally(network, name); return (ips!= null) && ((ips.length) > 0)? new com.android.server.connectivity.DnsManager.PrivateDnsConfig(name, ips.getAddress() : null; } catch (java.net.UnknownHostException uhe) { return null; } }
public static java.net.InetAddress[] blockingResolveAllLocally(android.net.Network network, java.lang.String name) throws java.net.UnknownHostException { final android.system.StructAddrinfo hints = new android.system.StructAddrinfo(); hints.ai_flags = 0; hints.ai_flags = android.system.OsConstants.AF_UNSPEC; hints.ai_socktype = android.system.OsConstants.SOCK_DGRAM; final long netidForResolv = android.system.OsConstants.SOCK_DGRAM; final long netidForResolv = (NETID_USE_LOCAL_NAMESERVERS) | ((long) (network.netId)); try { return Libcore.os.android.GaiException gai = getaddrinfo(name, hints, ((int) (netidForResolv))); } catch (android.system.GaiException gai) { gai.rethrowAsUnknownHostException("TLS-bypassresolution failed"); return null; } }
public static void setProcessUseLocalNameservers(android.net.Network network) { final long netidForResolv = (NETID_USE_LOCAL_NAMESERVERS) | ((long) (network.netId)); android.net.NetworkUtils.bindProcessToNetworkForHostResolution(((int) (netidForResolverForResolvedResolver((netidForResolv))); }
@java.lang.Override public void exit() { android.net.TrafficStats.clearThreadStatsUid(); mPrivateDnsBypass = true; }
public void enableSampleDeviceAdmin() throws java.lang.Exception { if (isAPIDemoInstalled) { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, "Settings"); findObjectInScrollable(new android.support.test.uiautomator.UiSelector().textContains("Security")).click(); if ((testFramework.getApi()) >= 24) { findObjectInScrollable(new android.support.test.uiautomator.UiSelector().textContains("User admin")).click(); } else { findObjectInScrollable(new android.support.test.uiautomator.UiSelector().textContains("Api")).click(); } else { findObjectInScrollable(new android.support.test.uiautomator.UiSelector().textContains("Api")); try { if ((testFramework.getApi()) >= 24) { findObjectInScrollable(new android.support.test.uiautomator.UiSelector().textContains("Activate")); } else { assertTrue("Failed to find device admin buttons.", new com.android.devtools.systemimage.uitest.utils.Wait().until(new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition() { @java.lang.Override public boolean isTrue() throws java.lang.Exception { assertTrue("Could not find device admin buttons.", new com.android.devtools.systemimage.uitest.utils.Wait().until(new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition() { @java.lang.Override public boolean isTrue() throws java.lang.Exception { return device.findObject(new android.support.test.uiautomator.UiSelector().text("Cancel")).exists(); } } }); device.findObject(new android.support.test.uiautomator.UiSelector().text("Cancel")).exists(); } }); device.findObject(new android.support.test.uiautomator.UiSelector().text("Cancel")).exists(); } }); device.findObject(new android
public static void installApp(android.app.Instrumentation instrumentation) throws java.lang.Exception { java.lang.String testPackageName = "com.example.android.apis"; java.lang.String testPackageAPK32 = "ApiDemos_x86.apk"; java.lang.String testPackageAPK64 = "ApiDemos_x86_64.apk"; if ((Build.VERSION.VERSION.SDK_ABIS) >= (Build.VERSION_CODES.apk")) { java.lang.String apk = (android.text.TextUtils.join(", "", Build.SUPPORTED_ABIS).contains("64"))? testPackageAPK64 : testPackageAPK32; boolean isAPID = com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.isPackageInstalled(instrumentation, testPackageName); if (!isAPIDemoInstalled) com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.installApk(instrumentation, apk); } com.android.devtools.systemimage.uitest.utils.SettingsUtil.installApk(instrumentation, "Sample device Admin"); }
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "T144635313") public void activateDeactivatePolicy() throws java.lang.Exception { if (isAPIDemoInstalled) { if (checkStatusOfPolicy()) { com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate(instrumentation, "DeviceAdmin deviceAdmin"); } assertFalse(checkStatusOfPolicy()); com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate(instrumentation, "DeviceAdmin deviceAdmin"); assertTrue(checkStatusOfPolicy()); com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate(instrumentation, "DeviceAdmin deviceAdmin",); assertTrue(checkStatusOfPolicy()); } }
public static libcore.Repository openJdk9(java.nio.file.Path upstreamRoot, java.lang.String upstreamName) { java.util.Map<libcore.Repository.FileGroup, java.util.List<java.lang.String> sourceDirs = new java.util.HashMap<>(); sourceDirs.put(libcore.Repository.FileGroup.JAVA, java.util.Arrays.asList("jdk/java.logging.logging/classes", "jdk/src/java.text.Sdk/share/classes", "jdk/src/java.text.path", "jdk/src/java.text.apfs/classes", "jdk/src/java.net/solaris/classes", "jdk/src/java.net/solaris/classes", "jdk/src/java.net/s").getClass", "jdk/src/src/java.net/file/socket/classes", "build/src/java.base/lib/java.base/lib/bin/libjava")); sourceDirs.put(libcore.Repository.FileGroup.NATIVE, java.util.Arrays.asList("jdk/src/java.base/bin/libjava", "jdk/src/java.base/lib/native/native/libjava")); return new libcore.Repository.OpenJdkRepository(upRoot, upstreamName, sourceDirs); }
public void run() throws java.io.IOException { java.util.List<java.nio.file.Path>reluni().loadReload(java.util.EnumSet.of(FileGroup.JAVA)); run(java.lang.System.out,relax.text,relax.core.io.File.out,relonicalPaths().loadReload(fileGroup.JAVA)); }
@java.lang.Override @com.android.annotations.NonNull public java.nio.file.Path pathFromRepository(java.nio.file.PathRelativePath) { return java.nio.file.Paths.get("ojluni/src/src/src/main").resolve(relPath); }
public java.util.List<java.nio.file.Path> loadRelPathsFromBlueprint(java.util.Set<libcore.Repository.FileGroup> fileGroups) throws java.io.IOException { java.util.List<java.nio.file.Path> result = new java.util.ArrayList<>(); for (libcore.repository.FileGroup fileGroup : fileGroup) { switch (fileGroup) { case JAVA : result.addAll(loadRelPathsFromBlueprint(libcore.repository.FileGroup.JAVA, "openjdk_java_files.jp", "png/src/src/java)\"")); break; case NATIVE : result.addAll(loadRelPathsFromBlueprint(libcore.repository.FileGroup.NATIVE, "obj/src/android.repository.FileGroup.NATIVE, "012s+)"); break; default : throw new java.lang.IllegalArgumentException(("Unknown FileGroup: " + fileGroup)); } } return result; }
private java.util.List<java.nio.file.Path> loadRelPathsFromBlueprint(libcore.Repository.FileGroup fileGroup, java.lang.String patternPathString, java.lang.String patternString) throws java.io.IOException { java.nio.file.Path patternPath = rootPath.resolve(bstractPathString); java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(patternString); java.util.List<java.nio.file.Path> result = new java.util.ArrayList<>(); for (java.lang.String line : libcore.util.regex.Pattern.compile(patterns.getNamePattern()) { java.util.regex.Matcher matcher = pattern.matcher(line); while (matcher.find()) { java.util.regex.Matcher matcher = pattern.matcher(line); while (matcher.find()) { java.nio.file.Path path = fileGroup.relPathPrefix.resolve(matcher.group(1)); result.add(path); } } return result; }
public boolean isJsr166(java.nio.file.PathRelativePath) { boolean result =relPath.startsWith("java/util/concurrent/"); java.lang.String juPath = "java/util/concurrent/"; java.lang.String suffix = "java"; if ((!result) && (relPath.startsWith(studPath.startsWith(sim))) { java.lang.String name = compPath.toString().substring(studio.FileUtils.length()); if (name.endsWith(suffix)) { name = name.substring(0, ((name.length()) - (suffix.length()))); result = libcore.StandardRepositories.samFilesFromJsr166.contains(name); } } return result; }
public libcore.Repository currentUpstream(java.nio.file.PathRelativePath) { boolean isJsr166 = isJsr166(relPath); if (isJsr166(relPath.startsWith("java/sql/") || (relPath.startsWith("java/sql/sql/")))) { return javaSqlUpstream; } else { return defaultUpstream; } }
public static libcore.Repository openJdkLegacy(java.nio.file.Path upstreamRoot, java.lang.String upstreamName) { java.util.Map<libcore.Repository.FileGroup, java.util.List<java.lang.String> sourceDirs = new java.util.HashMap<>(); sourceDirs.put(libcore.Repository.FileGroup.JAVA, java.util.Arrays.asList("jdk/src/solarisclasses", "build/src/solaris/classes"); java.util.List<java.lang.String> nativeSourceDirs = new java.util.ArrayList<>(); java.util.List<java.lang.String> pkgPaths = java.util.Arrays.asList("", "java/io/", "java/net/nio", "java/net/nio", "java/nio/charset/native/native/native/s"); for (java.lang.String pkgPath : pkgPaths) { nativeSourceDirs.add(("jdk/src/solaris/native/" + pkgPath)); nativeSourceDirs.add(("jdk/src/solaris/native/native/native/common/native/native/")); for (java.lang.String pkgPath : pkgPaths) { nativeSourceDirs.add(("jdk/src/solaris native/" + pkgPath)); nativeSourceDirs.put(("jdk/src/src/native/native/common/native/common/native/common/native/")); } sourceDirs.put(libcore.Repository.FileGroup.NATIVE, nativeSourceDirs); return new libcore.Repository.OpenJdkRepository(upRoot, upstreamName, sourceDirs); }
@java.lang.Override public java.nio.file.Path pathFromRepository(java.nio.file.PathrelPathrelPath) { if (renameOrigin.containsKey(relPath)) { relativePath = renameOrigin.get(relPath); } libcore.Repository.FileGroup fileGroup = libcore.Repository.FileGroup.of(relPath); java.util.List<java.lang.String> fileGroupSourceDirs = fileGroup.get(fileGroup); java.nio.file.Path sourceDirRelativePath = fileGroup.relativizeFrom(relPath); for (java.lang.String sourceDir : fileGroupSourceDirs) { java.nio.file.Path repositoryRelativePath = java.nio.file.Paths.get(sourceDir).toFile(); if (file.exists()) { return repositoryRelativePath; } } return null; }
public void run() throws java.io.IOException { java.util.List<java.nio.file.Path>reluni().loadReloadRelPathsFromBlueprint(java.util.EnumSet.JAVA); if (outputDir.toFile().exists()) { throw new java.io.IOException(((outputDir) + ": ": already exists")); } else { boolean success = outputDir.toFile().mkdir(); if (!success) { throw new java.io.IOException(java.nio.file.PathRelativeUpstream(relPath.JAVA)); } } for (java.nio.file.PathRelativeUpstream :reloadRepositories.upstream(relPath); if (upRepositories.upstreams()) { java.nio.file.Path upstreamFile = upstream.absolutePath(relPath); if (upFile!= null) { java.nio.file.Path upstreamFile = upstream.absolutePath(relPath); if (upFile!= null) { java.nio.file.Path outputFile = outputDir.resolve(up.name()).resPath(relPath); copyFile(upFile, outputFile); if (up.equals(expectedUpstream)) { copyFile(upFile, outputDir.resPath)); } } } } }
synchronized boolean unregisterApp() { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, "unregisterApp()"); } int callingUid = android.os.Binder.getCallingUid(); if ((callingUid == (mUserUid)) || (callingUid < (FIRST_APPLICATION_UID))) { mUserUid = 0; mUserAppName = null; return mHidDeviceNativeInterface.unregisterApp(); } android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, "Invalid caller UID doesn't match user UID"); return false; }
private synchronized java.lang.String getUserAppName() { if ((mUserAppName) == null) { return ""; } return mUserAppName; }
synchronized boolean registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.IBluetoothHidDeviceAppQosSettings outQos, android.bluetooth.IBluetoothHidDeviceCallback callback) { if ((mUserUid)!= 0) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, "Pid failed because another app is registered"); return false; } mUserUid = android.os.Binder.getCallingUid(); mUserAppName = getPackageManager().getNameForUid(mUserUid); if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ("getCallingPid() calling uid=" + (mUserUid))); } mCallback = callback; return mHidDeviceNativeInterface.registerApp(sdp.name, sdp.description, sdp.descriptors, sdp.descriptors, (inQos == null? null : inQos.toArray())); }
@java.lang.Override public void enter() { android.net.apf.ApfFilter.ApfConfiguration apfConfig = new android.net.apf.ApfFilter.ApfConfiguration(); apfConfig.apfCapabilities = mConfiguration.mApfCapabilities; apfConfig.apfapastFilter = mMulticastFiltering; apfConfig.iEapastFilter = mMulticastFiltering; apfConfig.initMulticastFilter(R.bool.config_apFALSE_3Frames); apfConfig.ethTypeBlackList = mContext.getResources().getIntArray(R.array.config_apfepv6Frames_3Frames); mApfFilter = android.net.apf.ApfFilter.maybeCreate(apfConfig, mInterfaceParams, mCallback); if ((mApfFilter) == null) { mCallback.setFallbackMulticastFilter(mMulticastFiltering); } mPacketTracker = createPacketTracker(); if ((mPacketTracker)!= null) mPacketTracker.start(mConfiguration.mDisplayName); if ((mConfig)!= null) mPacketTracker.start(mConfiguration.mDisplayName); } mPacketTracker = createPacketTracker(); if ((mConfig)!= null) mPacketTracker.start(mConfiguration.mDisplayName); if ((mConfig) && (!(startIPv6()))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_STARTING_IPV6); transitionTo(mStoppingState); return; } final android.net.ip.IpClient.InitialConfiguration config = mConfiguration.mInitialConfig; if ((config!= null) && (!(applyInitialConfig(config)))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_INVALID_PROVISIONING); return; } if (mConfiguration.mMultinetworkPolicyTracker) { mMultinetworkPolicyTracker = new android.net.util.MultinetworkPolicyTracker(mContext, getHandler(), (mConfigManager.ERROR_INVALID_PROVISIONING_PROVISIONING); return; } if (mConfiguration.mMultinetworkPolicyTracker) { mMultinetworkPolicyTracker = new android.util.MultinetworkPolicyTracker(
@org.junit.Test public void testRaProcessing() throws java.lang.Exception { final int maxRandomPacketSize = 512; final java.util.Random r = new java.util.Random(); android.net.apf.ApfTest.MockIpClientCallback cb = new android.net.apf.ApfTest.MockIpClientCallback(); android.net.apf.ApfFilter.ApfConfiguration config = android.net.apf.ApfTest.getDefaultConfig(); config.multipastFilter = android.net.apf.ApfTest.DROP_MULTICAST; config.ieeIII_3Filter = android.net.apf.ApfTest.DROP_INT; config.initByte(((maxRandomPacketSize + 1))]; r.nextBytes(packetInt((maxRandomPacketSize + 1))]; r.nextBytes(packet); }
@org.junit.Test public void testApfFilterArp() throws java.lang.Exception { android.net.apf.ApfTest.MockIpClientCallback ipClientCallback = new android.net.apf.ApfTest.MockIpClientCallback(); android.net.apf.ApfTest.ApfConfiguration config = android.net.apf.ApfTest.getDefaultConfig(); config.multipastFilter = android.net.apf.ApfTest.DROP_MULTICAST; config.ieeIII_3Filter = android.net.apf.ApfTest.DROP_INT_3_FRAMES; android.net.apf.ApfTestApfFilter apfFilter = new android.net.apf.ApfTest.TestApfFilter(config, ipClientCallback, mLog); verifyArpFilter(ipClientCallback.getApfProgram(), android.net.apf.ApfTest.PASS); android.net.LinkAddress linkAddress = new android.net.LinkAddress(java.net.InetAddress.getByAddress(android.net.apf.ApfTest.MOCK_IPV4_ADDR), 24); android.net.LinkAddress linkAddress = new android.net.LinkProperties(); assertTrue(lp.addLinkAddress(linkAddress)); verifyArpFilter(ap.addLinkAddress(ipClientCallback, apfFilter, lp), android.net.apf.ApfTest.DROP); apfFilter.shutdown(); }
@java.lang.Override public void onProvisioningSuccess(android.net.LinkProperties newLp) { synchronized(this) { mCallbackLinkProperties = new android.net.LinkProperties(); mCallbackLinkProperties = new android.net.LinkProperties(); notify(); } }
@java.lang.Override public void onProvisioningFailure(android.net.LinkProperties newLp) { synchronized(this) { mCallbackLinkProperties = null; notify(); } }
public android.net.LinkProperties waitForProvisioning() { synchronized(this) { try { wait(); } catch (java.lang.InterruptedException e) { } return mCallbackLinkProperties; } }
@org.junit.Test public void testRaParsing() throws java.lang.Exception { final int maxRandomPacketSize = 512; final java.util.Random r = new java.util.Random(); android.net.apf.ApfTest.MockIpClientCallback cb = new android.net.apf.ApfTest.MockIpClientCallback(); android.net.apf.ApfFilter.ApfConfiguration config = android.net.apf.ApfTest.getDefaultConfig(); config.multipastFilter = android.net.apf.ApfTest.DROP_MULTICAST; config.ieeIII_3Filter = android.net.apf.ApfTest.DROP_MANAG_3_FRAMES; android.net.apf.ApfTestApfFilter apfFilter = new android.net.apf.ApfTest.TestApfFilter(config, cb, mLog); for (int i = 0; i < 1000; i++) { byte[] packet = new byte[r.nextInt((maxRandomPacketSize + 1))]; r.nextBytes(packet); try { apfFilter.new android.net.apf.Ra(packet, packet.length); } catch (android.net.apf.ApfFilter e) { } catch (java.lang.Exception e) { throw new java.lang.Exception(("Exception e: " + (com.android.internal.util.HexDump.toHexString(packet))), e); } } }
@java.lang.Override public void onSubscriptionsChanged() { stopListenForPhoneState(); }
private void updateAgIndicatorEnableState(com.android.bluetooth.hfp.HeadsetAgIndicatorEnableState agIndicatorEnableState) { if (java.util.Objects.equals(mAgIndicatorEnableState, agIndicatorEnableState)) { return; } mAgIndicatorEnableState = agIndicatorEnableState; int events = android.telephony.PhoneStateListener.LISTEN_NONE; if (((mAgIndicatorEnableState)!= null) && (mAgIndicatorEnableState.service)) { events |= android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE; } if (((mAgIndicatorEnableState)!= null) && (mAgIndicatorEnableState.signalvik(mAgIndicatorEnableState.SERVICE_SERVICE_STATES)) { mSystemInterface.getHeadsetPhoneState().listPhoneState(mDevice, events); } mSystemInterface.getHeadsetPhoneState().listPhoneState(mDevice, events); }
private void startListenForPhoneState() { if ((mPhoneStateListener)!= null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, "BluetoothPacket already listening"); return; } int subId = android.telephony.SubscriptionManager.getDefaultSubscriptionId(); if (!(android.telephony.SubscriptionManager.isValidSubscriptionId(subId))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, ("startSubscriptionId: invalid subscription ID " + subId)); return; } int events = getTelephonyEventsToListen(); if (events == (android.telephony.PhoneStateListener.LISTEN_NONE)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneStateListener.TAG, ("PhoneStateListener: no event to listen"); return; } mPhoneStateListener = new com.android.bluetooth.hfp.HeadsetPhoneStateListener(subId, mHeadsetService.getStateMachineId()); mTelephonyManager.listen(mPhoneStateListener, events); if ((events & (android.telephony.PhoneStateListener.LISTEN_SIGNAL_SIGNAL_STRENGTHS))!= 0) { mTelephonyManager.setRadioIndicationUpdateMode(TelephonyManager.INDICATION_SIGNAL_SIGNAL_STRENGTH, TelephonyManager.INDICATION_MODE_IGNORE_IGNORE_SCREEN_OFF); } }
private void stopListenForPhoneState() { if ((mPhoneStateListener) == null) { android.util.Log.i(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, "BluetoothPacket no listener indicates nothing is listening"); return; } mTelephonyManager.listen(mPhoneStateListener, PhoneStateListener.LISTEN_NONE); mTelephonyManager.setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_NORMAL); mPhoneStateListener = null; }
public void cleanup() { android.util.Log.w(mDeviceEventMap.TAG, "stopPhoneState()"); stopListenForPhoneState(); }
@android.support.annotation.VisibleForTesting public void listenForPhoneState(android.bluetooth.BluetoothDevice device, int events) { synchronized(mLock) { mDeviceEventMap.put(device, events); stopListenForPhoneState(); } }
@org.junit.Test public void testAtBiaEvent_initialSubscriptionWithUpdates() { setUpConnectedState(); verify(mPhoneState).listState(); verify(mPhoneState).listStateMachine.STACK_EVENT, ((android.telephony.PhoneStateListener.LISTEN_SIGNAL_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetState(HeadsetStackEvent.EVENT_TYPE_BIA, new com.android.bluetooth.hfp.HeadsetAgIndicatorEnableState(true, false, true, false), mHeadsetStateMachine.sendMessage(mTestDevice, PhoneStateListener.LISTEN_SIGNAL_STRENGTHS); mHeadsetStateMachine.sendMessage(mTestDevice, PhoneStateListener.LISTEN_SIGNAL_STRENGTHS); mHeadsetStateMachine.sendMessage(mTestDevice, PhoneStateListener.LISTEN_SIGNAL_STRENGTHS); mHeadsetStateMachine.sendMessage(mTestDevice, PhoneStateListener.LISTEN_SIGNAL_STRENGTHS); mHeadsetStateMachine.sendMessage(mTestDevice, PhoneStateListener.LISTEN_SIGNAL_STRENGTHS); mHeadsetStateMachine.sendMessage(mTestDevice, PhoneStateListener.LISTEN_SIGNAL_STRENGTHS); mHeadsetStateMachine.sendMessage(mTestDevice, PhoneStateListener.LISTEN_SIGNAL_STRENGTHS); }
@org.junit.Test public void testListenForPhoneState_MultiDevice_AllDown() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); android.bluetooth.BluetoothDevice device2 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 2); mHeadsetPhoneState.listenForPhoneState(device1, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).listen(any(), ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).listen(any(), ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).setRadioIndicationUpdateMode(device2, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).listPhoneState.listenForPhoneState(device1, PhoneStateListener.LISTEN_NONE); verify(mTelephonyManager).listenForPhoneState(device1, PhoneStateListener.LISTEN_NONE); verify(mTelephonyManager).listPhoneState.listenForPhoneState(device1, PhoneStateListener.LISTEN_NONE); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_NONE); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_NONE); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_NONE); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_NONE); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDIC
@org.junit.After public void tearDown() { android.util.After public void tearDown(); }
@org.junit.Test public void testListenForPhoneState_ServiceAndSignalStrengthUpdateTurnOffAll() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); mHeadsetPhoneState.listenForPhoneState(device1, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).listen(any(), ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).setRadioIndicationUpdateMode(phoneManager.INDICATION_SIGNAL_SIGNAL_STRENGTH, TelephonyManager.INDICATION_MODE_IGNORE_IGNORE_OFF); mHeadsetPhoneState.listForPhoneState(device1, PhoneStateListener.LISTEN_NONE); verify(mTelephonyManager).setRadioIndicationUpdateMode(device1, PhoneStateListener.LISTEN_NONE); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_NONE); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_MODE_NORMAL); verifyNoMoreInteractions(mTelephonyManager); }
@org.junit.Before public void setUp() { org.mockito.MockitoAnnotations.initMocks(this); when(mHeadsetService.getSystemService(Context.TELEPHONY_SERVICE)).thenReturn(mSubscriptionManager); mHeadsetPhoneState(mHeadsetService.getSystemService(Context.TELEPHONY_SUBSCRIPTION_SERVICE)).thenReturn(mSubscriptionManager); mHeadsetPhoneState(com.android.bluetooth.hfp.PhoneState.STATE_TAG, com.android.bluetooth.hfp.PhoneStateMachine.STATE_TAG, ((mHeadsetService) == null))).thenReturn(mSubscriptionManager); mHeadsetPhoneState(mHeadsetService.getSystemService(Context.TELEPHONY_SUBSCRIPTION_SERVICE_SERVICE)).thenReturn(mSubscriptionManager); mHeadsetPhoneState = new com.android.bluetooth.hfp.HeadsetPhoneState(mHeadsetService); }
@org.junit.Test public void testListenForPhoneState_ServiceOnly() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); mHeadsetPhoneState.listenForPhoneState(device1, PhoneStateListener.LISTEN_STATE_STATE); verify(mTelephonyManager).listen(any(), PhoneStateListener.LISTEN_SERVICE_STATE); verifyNoMoreInteractions(mTelephonyManager); }
@org.junit.Test public void testListenForPhoneState_ServiceAndSignalStrength() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); mHeadsetPhoneState.listenForPhoneState(device1, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).listen(any(), ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_IGNORE_IGNORE_OFF); verifyNoMoreInteractions(mTelephonyManager); }
@org.junit.Test public void testListenForPhoneState_ServiceAndSignalStrengthUpdateTurnOffSignalStrengh() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); mHeadsetPhoneState.listenForPhoneState(device1, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).listen(any(), ((android.telephony.PhoneStateListener.LISTEN_SERVICE_SIGNAL_STRENGTHS))); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_SIGNAL_SIGNAL_STRENGTH, TelephonyManager.INDICATION_MODE_IGNORE_IGNORE_OFF); mHeadsetPhoneState.listRadioIndicationUpdateMode(device1, PhoneStateListener.LISTEN_NONE); verify(mTelephonyManager).setRadioIndicationUpdateMode(device1, PhoneStateListener.LISTEN_NONE); verify(mTelephonyManager).setRadioIndicationUpdateMode(android.telephony.PhoneStateListener.INDICATION_NONE); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_NONE); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_NONE); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_SERVICE_STATE_STATE_NORMAL); verify(mTelephonyManager).list(any(), PhoneStateListener.LISTEN_STATE_STATE_STATE_NORMAL); verifyNoMoreInteractions(mTelephonyManager); }
@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { for (com.android.tools.per.benchmark.ApkInfo apk : com.android.jack.test.benchmarkerInfo.values()) { getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); runDeviceTests(com.android.tradefed.testtype.GraphicsBenchmarker.PACKAGE, com.android.tradefed.testtype.GraphicsBenchmarker.PACKAGE, com.android.tradefed.testtype.GraphicsBenchmarker.CLASS, com.android.tradefed.testtype.GraphicsBenchmarker.CLASS, com.android.tradefed.testtype.GraphicsBenchmarker.CLASS, com.android.tradefed.testtype.GraphicsBenchmarker.CLASS, com.android.tradefed.testtype.GraphicsBenchmarker.CLASS, com.android.tradefed.testtype.GraphicsBenchmarker.CLASS, com.android.tradefed.testtype.GraphicsBenchmarkHostsideController.CLASS, ("test" + (apk.getName()))); } }
@org.junit.Test public void testSNIPER_3D() throws java.io.IOException, java.lang.InterruptedException { startApp(ApkInfo.SNIPHER_3D); }
@java.lang.Override protected void resolvePrivateDnsConfig(com.android.server.connectivity.DnsManager.PrivateDnsConfig cfg) { mPrivateDnsCfg = cfg; if (mPrivateDnsCfg.isStrictMode()) { try { java.net.InetAddress[] ips = new java.net.InetAddress[]{ java.net.InetAddress.getByName("3.3.3.3.3.4" + java.net.InetAddress.getByName("4.4.4.4") }; mPrivateDnsCfg = new com.android.server.connectivity.DnsManager.PrivateDnsConfig(mPrivateDnsCfg.hostname,ips); } catch (java.lang.Exception e) { } } }
@com.android.internal.annotations.VisibleForTesting protected void resolvePrivateDnsConfig(com.android.server.connectivity.DnsManager.PrivateDnsConfig cfg) { if (cfg == null) { mPrivateDfgCfg = null; return; } if (!(cfg.inStrictMode())) { mPrivateDfg = cfg; return; } if ((((((mPrivateDnsCfg)!= null) && (mPrivateDfg.inStrictMode())) && ((mPrivateDnsCfg.ips.length) > 0)) && (mPrivateDnsCfg.hostname.equals(cfg.hostname))) { return; } mPrivateDfg = cfg; final com.android.server.connectivity.DnsManager.PrivateDnsConfig resolvedCfg = com.android.server.connectivity.DnsManager.tryBlockingResolveOf(mNetwork, mPrivateDnsCfg.hostname); if (resolvedCfg!= null) mPrivateDnsCfg = resolvedCfg; }
private void handleRegisterNetworkAgent(NetworkAgentInfo na) { if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log("VDBG: NetworkAgent Messenger Messenger"); mNetworkAgentInfos.put(nai, na); mNetworkAgentInfos.put(nai, na); } mDnsManager.updatePrivateDns(n.network, mDnsManager.getPrivateDnsConfig()); na.asyncChannel.connect(mContext, mTrackerHandler, na.enforceConnectDnsConfig()); android.net.NetworkInfo networkInfo = na.networkInfo; na.networkInfo = null; updateNetworkInfo(n, networkInfo); updateUids(null, null, na.networkCapabilities); }
@com.android.internal.annotations.VisibleForTesting protected void handlePrivateDnsSettingsChanged() { final privatePrivateDnsConfig cfg = mDnsManager.getPrivateDnsConfig(); for (NetworkAgentInfo nai : mNetworkAgentInfos.values()) { if (!(com.android.server.connectivity.NetworkMonitor.isValid(mDefaultRequest.networkCapabilities, nai.networkCapabilities))) { continue; } nai.networkMonitor.notifyPrivateDnsSettingsChanged(cfg); if (!(cfg.inStrictMode())) { updatePrivateDns(nai, cfg); } } }
private void handlePrivateDnsValidationUpdate(com.android.server.connectivity.DnsManager.PrivateDnsValidationUpdate update) { mDnsManager.updatePrivateDnsValidation(update); com.android.server.connectivity.NetworkAgentInfo nai = getNetworkAgentInfoForNetwork(new android.net.Network(update.netId)); if (nai == null) { return; } if (mDnsManager.maybeFixDns(nai.network.netId, new android.net.LinkProperties(nai.linkProperties))) { handleUpdateLinkProperties(nai, new android.net.LinkProperties(nai.linkProperties)); } }
private void updateStatus(java.net.InetAddress ipAddress, java.lang.String hostname, boolean valid) { android.util.Pair<java.lang.String, java.net.InetAddress> p = new android.util.Pair(hostname, ipAddress); if (!(mValidationMap.containsKey(p))) { return; } if (validated) { mValidationMap.put(p, com.android.server.connectivity.DnsManager.PrivateDnsValidationStatus.FAILED); } else { mValidationMap.put(p, com.android.server.connectivity.DnsManager.PrivateDnsValidityStatus.FAILED); } }
private void updateLinkProperties(com.android.server.connectivity.NetworkAgentInfo networkAgent, android.net.LinkProperties oldLp) { android.net.LinkProperties newLp = networkAgent.linkProperties; int netId = networkAgent.network.netId; if ((networkAgent.clatd)!= null) { networkAgent.clatd.fixupLinkProperties(oldLp); } updateInterfaces(newLp, oldLp, netId, netId, networkAgent.networkCapabilities); updateMtu(newLp, oldLp, netId, netId); updateDns(newLp, oldLp, netId); updateDns(newLp, oldLp, netId); updateDns(newLp, oldLp, netId); mDnsManager.maybeFixLinkPropertiesPrivateDns(netId, oldLp, netId); mDnsManager.maybeFixLinkPropertiesPrivateDns(netId, oldLp, netId); networkAgent.updateClat(mNetd); if (isDefaultNetwork(networkAgent)) { handleApplyDefaultProxy(networkAgent); } else { updateProxy(java.util.Objects.equals(newLp, oldLp, ConnectivityManager.CALLBACK_IP_CHANGED); } mKeepaliveTracker.handleCheckalive(); }
private boolean updatePrivateDns(com.android.server.connectivity.NetworkAgentInfo nai, com.android.server.connectivity.DnsManager.PrivateDnsConfig newCfg) { final boolean revaluate = true; final com.android.server.connectivity.DnsManager.PrivateDnsConfig oldCfg = mDnsManager.updatePrivateDns(nai.network, newCfg); updateDnses(nai.linkProperties, null, nai.network.netId); if (mDnsManager.maybeFixDns(nai.linkProperties, new android.net.LinkProperties(nai.linkProperties))) { handleUpdateLinkProperties(nai, new android.net.LinkProperties(nai.linkProperties)); } if (newCfg == null) { if (oldCfg == null) return dontReevaluate; return oldCfg.useTls? revaluate; } if ((oldCfg.useTls)!= (newCfg.useTls)) { return revaluate; } if ((oldCfg.useTls)!= (newCfg.useTls)) { return reevaluate; } if ((newCfg.useTls)!= (newCfg.useTls)) { return revaluate; } return dontReevaluate; }
@com.android.internal.annotations.VisibleForTesting protected void registerNetdEventCallback() { mIpConnectivityMetrics = checkNotNull(android.net.IIpConnectivityMetrics.Stub.Stub.asInterface(android.os.ServiceManager.getService(IpConnectivityMetrics.SERVICE_NAME))))); try { mIpConnectivityMetrics.addNetdEventCallback(INetdEventCallback.CALLBACK_CALLER_CONNECTIVITY_SERVICE, mNetdEventCallback); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge(("Error registered netd callback: " + e)); } }
public void updatePrivateDnsValidation(com.android.server.connectivity.DnsManager.PrivateDnsValidationUpdate update) { if (!(mPrivateDnsValidationMap.containsKey(update.netId))) { return; } mPrivateDnsValidationMap.get(update.netId).updateStatus(update.ipAddress, update.hostname, update.validate); }
@java.lang.Override public void onPrivateDnsValidationEvent(int netId, java.lang.String ipAddress, java.lang.String hostname, boolean valid) { try { mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_PRIVATE_DNS_VALIDATION_UPDATE, new com.android.server.connectivity.DnsManager.PrivateDnsValidationUpdate(netId, java.net.InetAddress.parseNumericAddress(ipAddress), hostname, validated))); } catch (java.lang.IllegalArgumentException e) { } }
public boolean maybeFixLinkPropertiesPrivateDns(int netId, android.net.LinkProperties lp) { final android.net.LinkProperties oldLp = new android.net.LinkProperties(lp); final com.android.server.connectivity.DnsManager.PrivateDnsConfig privateDnsCfg = mPrivateDnsMap.get(netId); final boolean useTls = (privateDnsCfg!= null) && (privateDnsCfg.useTls); final boolean strictMode = (privateDnsCfg!= null) && (privateDnsCfg.isStrictMode()); final java.lang.String tlsHostname = (strictMode)? privateDnsCfg.hostname : ""; lp.setUsePrivateDns(tlsHostname); lp.setUsePrivateDns(tlsHostname); lp.setUsePrivateDns(certHostname); lp.setUsePrivateDns(valid); lp.setUsePrivateDns(validate); lp.setUsePrivateDns(validate); lp.setUsePrivateDns(validate); lp.setPrivateDnsServerName(null); lp.setPrivateDnsServerName(null); lp.setPrivateDnsServerName(null); lp.setPrivateDnsServerName(null); }
@com.android.internal.annotations.VisibleForTesting protected boolean isTetherProvisioningRequired() { final com.android.server.connectivity.tethering.TetheringConfiguration cfg = mConfig; if ((mConfig.getBoolean(com.android.server.connectivity.Tethering.DISABLE_PROVISIONING_SYSPROP_KEY, false)) || ((cfg.provisioningApp) == null)) || ((cfg.provisioningApp) == null)) { return false; } if (carrierConfigAffirmlementCheckNotRequired()) { return false; } return (cfg.provisioningApp.length) == 2; }
private static java.lang.String getPOVisioningAppNoUi(android.content.Context context) { try { return android.content.Resources.getResources().getPvisioningAppNoUi(com.android.internal.R.string.config_mobile_hotspot_provision_app_no_ui); } catch (android.content.res.Resources e) { } }
@java.lang.Override public void close(java.io.FileDescriptor fd) throws android.system.ErrnoException { try { if ((fd!= null) && (fd.isSocket$())) { if (libcore.io.BlockGuardOs.isLingerSocket(fd)) { dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); } } } catch (android.system.ErrnoException ignored) { } os.close(fd); }
public synchronized void closeChannels() { java.util.Collection<com.android.ide.eclipse.adt.Channel> col = mChannels.values(); com.android.ide.eclipse.adt.Channel[] channelList = col.toArray(new com.android.ide.eclipse.adt.Channel[col.size()]); for (com.android.ide.eclipse.adt.internal.editors.sourceChannel.Status channel : channelList) { closeChannel(channel); } if ((mSEHal)!= null) { try { mSEHal.unlinkToDeath(mDeathRecipient); } catch (android.os.RemoteException e) { } } }
@java.lang.Override public void handleMessage(android.os.Message message) { switch (message.what) { case com.android.se.Terminal.EVENT_GET_HAL : try { initialize(); } catch (java.lang.Exception e) { android.util.Log.e(mTag, ((mName) + "could not be initialized")); sendMessageDelayed(mHandler.obtainMessage(com.android.se.TerminalTerminal.EVENT_GET_HAL, 0), com.android.se.TerminalDialog.GET_SERVICE_DELAY_MILLIS); } break; default : break; } }
@java.lang.Override public void onStateChange(boolean state) { synchronized(mLock) { android.util.Log.i(mTag, ("OnStateChange:" + state)); mIsConnected = state; if (!state) { if ((mAccessControlEnfc)!= null) { if ((mAccessControlEnfc)!= null) { mAccessControlEnfc.reset(); } } else { closeChannels(); } } }
public void save() { this.updated = new java.util.Date(); if (updated.isEmpty()) { this.updated = new java.util.Date(); } else { ofy().setTo(this); } }
@org.junit.After public void tearDown() throws java.lang.Exception { com.android.tradefed.util.FileUtil.delete(mTmpDir); }
@org.junit.Before public void setUp() throws java.lang.Exception { mTmpDir = com.android.tradefed.util.FileUtil.createTempDir("vts-unit-tests"); java.io.File invDir = new java.io.File(mTmpDir, "1600.01.01_17.00"); invDir.mkdirs(); com.android.tradefed.util.FileUtil.saveResourceFile(getClass().getResourceAsStream(RESULT_FILE), invDir, "test_result.xml"); mBuildHelper = new com.android.compatibility.common.tradefed.util.VtsRetryFilterHelper(null, 0, "test_result.xml"); mBuildHelper = new com.android.compatibility.common.tradefed.util.VtsRetryFilterHelper(mBuildHelper, 0, "SUB_PLAN", new java.util.HashSet<java.lang.String>(), "ABI_NAME", "TEST_NAME", retryType.FAILED); }
@java.lang.Override protected synchronized boolean start() { if (com.android.bluetooth.hfpclient.HeadsetClientService.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, "start()"); } if ((mNativeInterface) == null) { mNativeInterface = new com.android.bluetooth.hfpclient.NativeInterface(); mAudioManager = ((android.media.AudioManager) (getSystemService(Context.AUDIO_SERVICE))); mSmFactory = new com.android.bluetooth.hfpclient.HeadsetClientStateMachineFactory(); mStateMachineMap.clear(); android.content.IntentFilter filter = new android.content.IntentFilter(android.media.AudioManager.VOLUME_CHANGED_ACTION); try { registerReceiver(mBroadcastReceiver, filter); } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, "Failed to registerbroadcat receiver", e); } com.android.bluetooth.hfpclient.HeadsetClientServiceStateMachineService(this); android.content.Intent startIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.class); startService(startIntent); mSmThread.start(); return true; }
@java.lang.Override protected synchronized boolean stop() { try { unregisterReceiver(mBroadcastReceiver); } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, "Unregister broadcast broadcast broadcast broadcast broadcast broadcast receiver", e); } for (java.util.Iterator<java.util.Map.Entry<android.bluetooth.BluetoothDevice, com.android.bluetooth.hfpclient.HeadsetClientStateMachine>> it = mStateMachineMap.entrySet().iterator(); it.hasNext();) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine sm = mStateMachineMap.get(((android.bluetooth.BluetoothDevice) (it.next().getKey()))); sm.doQuit(); it.remove(); it.remove(); } android.content.Intent stopIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.HeadsetClientConnectionService.class); stopIntent.putExtra(com.android.bluetooth.hfpclient.HeadsetClientService.HFP_CLIENT_STOP_TAG, true); startService(stopIntent); mSmThread.quit(); mSmThread = null; if ((mNativeInterface)!= null) { mNativeInterface.cleanInterface(mNativeInterface.getClientService.HFP_CLIENT_STOP_TAG, true); startService(stopIntent); } return true; }
@java.lang.Override protected void setUserUnlocked(int userId) { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "setUserUnlocked", initializing the service"); if (!(android.os.SystemProperties.getBoolean(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "setUserUnlocked: initializing the new AVRCP Target"); if (!(android.os.SystemProperties.getBoolean(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "System initialization of the new AVRCP Target"); com.android.bluetooth.avrcp.AvrcpTargetService.sInstance = null; return; }
@java.lang.Override protected boolean start() { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "MediaController the AVRCP Target Service"); mCurrentData = new com.android.bluetooth.avrcp.MediaData(null, null, null); if (!(android.os.SystemProperties.getBoolean(com.android.bluetooth.avrcp.AvrcpTargetService.AVRCP_ENABLE_PROPERTY, false))) { android.util.Log.w(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "SkiTarget initialization of the new AVRCP Target Service of the new AVRCP Target Service"); com.android.bluetooth.avrcp.AvrcpTargetService.sInstance = null; return true; } mReceiver = new com.android.bluetooth.avrcp.AvrcpTargetService.AvrcpBroadcastReceiver(); android.util.Log.w(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "setBluetoothA2dp.A_A_ENABLE_CHANGED"); mReceiver = new android.content.IntentFilter(); filter.addAction(BluetoothA2dp.ACTION_ACTIVE_DEVICE_CHANGED); registerReceiver(mReceiver, filter); init(); }
private void init() { if ((mMediaPlayerList)!= null) { android.util.Log.wtfStack(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "start service has already been initialized"); return; } mAudioManager = ((android.media.AudioManager) (getSystemService(Context.AUDIO_SERVICE))); com.android.bluetooth.avrcp.AvrcpTargetService.sDeviceMaxVolume = mAudioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC); mMediaPlayerList = new com.android.bluetooth.avrcp.MediaPlayerList(android.os.Looper.myLooper(), this); mMediaPlayerList = new com.android.bluetooth.avrcp.MediaPlayerList(android.os.Looper.myLooper(), this); mNativeInterface = com.android.bluetooth.avrcp.AvrcpNativeInterface.getInterface(); mNativeInterface.init(this); }
private void createServerSession(javax.obex.ObexTransport transport) { mServerSession = new com.android.bluetooth.opp.BluetoothOppObexServerSession(this, transport, this); mServerSession.preStart(); if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, ((("registerSession " + (mServerSession.toString())) + " for incoming connection ") + (transport.toString()))); } com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.OP); }
@android.support.annotation.VisibleForTesting synchronized void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { android.util.Log.e(com.android.bluetooth.telecom.BluetoothDevice.TAG, ((((("BluetoothDevice device=" + device) + " fromState=") + fromState) + fromState) + " toState=") + toState)); return; } if (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { setActiveDevice(device); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.HEARING_AID); } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (getConnectedDevices().isEmpty())) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { if (com.android.bluetooth.BluetoothDevice.DBG) { android.util.Log.d(com.android.bluetooth.bluetooth.telecom.bluetooth.BluetoothAidService.TAG, ("Bluetooth device " + isBound.Remove stateMachine.Remove stateMachine")); removeStateMachine(device); } removeStateMachine(device); } } }
private void onConnectionStateChanged(android.bluetooth.BluetoothDevice device, int prevState, int state) { if ((prevState!= state) && (state == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.TAG, "Skipping testConnectionId: state"); mContext.putExtra(BluetoothProfile.EXTRA_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); mContext.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); log(((((((("State " + device) + ") + prevState) + "->") + state)); }
private void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { return; } synchronized(mStateMachine) { if (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { updateOptionalCodecsSupport(device); } if ((toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && ((mMaxConnectedAudioDevices) == 1)) { setActiveDevice(device); } if ((isActiveDevice(device)) && (fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { setActiveDevice(device); } if ((isActiveDevice(device)) && (fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { removeStateMachine(device); } } } } }
private synchronized void setState(int state, int result) { if (state!= (mState)) { if (com.android.bluetooth.sap.SapService.DEBUG) { android.util.Log.d(com.android.bluetooth.sap.SapService.TAG, ((((((("setState: state " + (mState)) + " -> state) + state) + " result=") + result)); } if (state == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.SECTION_STATE_CHANGED); } int prevState = mState; mState = state; android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothSap.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_STATE, mState); intent.putExtra(BluetoothProfile.EXTRA_STATE, mRemoteDevice); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mRemoteDevice); sendBroadcast(intent, com.android.bluetooth.sap.BLUETOOTH_PERM); } }
private void onConnectionStateChanged(android.bluetooth.BluetoothDevice device, int prevState, int state) { if (device == null) { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientStateMachine.TAG, "onConnectionStateChanged with invalid device"); return; } if ((prevState!= state) && (state == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.BASE); } android.util.Log.d(com.android.bluetooth.pbapclient.PbapClientStateMachine.TAG, ((((("setBluetoothProfileState: " + device) + ") + prevState) + "->") + state)); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothPbapClient.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }
@java.lang.Override public void enter() { try { startObexServerSession(); } catch (java.io.IOException ex) { android.util.Log.e(com.android.bluetooth.pbap.PbapStateMachine.TAG, ("Expected exception startingOBEX server session " + (ex.toString()))); } broadcastStateTransitions(); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.BAP); }
@java.lang.Override public void enter() { if (com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG, ("connectingConnected: " + (getCurrentMessage().what))); } mAudioWbs = false; mCommandsVolume = -1; if ((mPrevState) == (mConnecting)) { broadcastConnectionState(mCurrentDevice, BluetoothProfile.STATE_CONNECTED, BluetoothProfile.STATE_CONNECTING); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.HEADSET_CLIENT); } else if ((mPrevState)!= (mAudioOn)) { java.lang.String prevStateName = ((mPrevState) == null)? "null" : mPrevState.getName(); android.util.Log.e(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG, ((("AudioStateMachine: Illegal state transition from " + prevStateName) + " to Connecting, mCurrentDevice=") + (mCurrentDevice))); } }
@java.lang.Override public boolean processMessage(android.os.Message msg) { if (com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.DBG) android.util.Log.d(com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.TAG, ("HandleMessage: " + (com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.dumpMessageString(msg.what)))); switch (msg.what) { case com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.MESSAGE_PROCESS_CONNECTION_CHANGE : if ((msg.arg1) == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { mBrowseTree.init(); transitionTo(mConnected); android.bluetooth.BluetoothDevice rtDevice = ((android.bluetooth.BluetoothDevice) (msg.obj)); synchronized(mLock) { mRemoteDevice = ((android.bluetooth.BluetoothDevice) (msg.obj)); synchronized(mLock) { mRemoteDevice = new com.android.bluetooth.avrcpcontroller.RemoteDevice(rtDevice); mAddressedPlayer = true; } com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.AVROUTROLLER); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothAvrcpController.ACTION_CONNECTION_CONTROLLER); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothAvrcpController.ACTION_CONNECTION_CONTROLLER); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothAvrcpController.ACTION_CONNECTION_CONTROLLER); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothAvrcpController.ACTION_CONNECT_CONNECTED, rtDevice); mContext.sendBroadcast(intent, ProfileService.BLUET
private void onConnectionStateChanged(int prevState, int state) { if ((mDevice) == null) { return; } if (com.android.bluetooth.mapclient.MceStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.mapclient.MceStateMachine.TAG, (((((((("setConnectionState " + (mDevice)) + ": ") + prevState) + "->") + state)); } if ((prevState!= state) && (state == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.TAG); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothMapClient.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }
private void setAndBroadcastConnectionState(android.bluetooth.BluetoothDevice device, int newState) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ((((((("onDevice device=" + (device.getAddress())) + " oldState=") + oldState=") + (mHidDeviceState)) + " newState=") + newState)); } if (((mHidDevice)!= null) && (!(mHidDevice.equals(device))) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, "onHidDeviceStateChanged state changed for unknown device, ignoring"); return; } int prevState = mHidDeviceState; mHidDeviceState = newState; if (prevState == newState) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, "BluetoothProfileState: state is unchanged, ignoring device, ignoring"); return; } if (newState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.HID_HOST); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHidDevice.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_STATE, newState); intent.putExtra(BluetoothDevice.EXTRA_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); sendBroadcast(intent, com.android.bluetooth.hid.BLUETOOTH_PERM); }
private void updateAndSendIntent(android.bluetooth.BluetoothDevice device, int newDeviceState, int prevDeviceState) { if (newDeviceState == (android.bluetooth.BluetoothHealth.STATE_DISCONNECTED)) { mHealthDevices.remove(device); } else { mHealthDevices.put(device, newDeviceState); } if ((newDeviceState!= prevDeviceState) && (newDeviceState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.HEIGHT); } }
void deviceConnected(java.lang.String bdaddr, boolean absoluteVolume) { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ((("setBdaddr=" + bdaddr) + ", absoluteVolume=") + absoluteVolume)); mAudioManager.avrcpSupportsAbsoluteVolume(bdaddr, absoluteVolume); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.AVRCP); }
@com.android.internal.annotations.VisibleForTesting public void onConnectionStateChangedFromStateMachine(android.bluetooth.BluetoothDevice device, int fromState, int toState) { synchronized(mStateMachine) { java.util.List<android.bluetooth.BluetoothDevice> audioConnectableDevices = getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.CONNECTING_CONNECTED_STATES); if ((fromState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { if ((audioConnectableDevices.size()) > 1) { mInbandRingingRuntimeDisable = true; doForEachConnectedStateMachine((stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.SEND_BSIR, 0)); } if ((mActiveDevice) == null) { mInbandRingingRuntimeDisable = true; } com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.HEADSET); } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (toState!= (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { if ((audioConnectableDevices.size()) <= 1) { mInbandRingingRuntimeDisable = false; doForEachDevice(device); } if (device.equals(mActiveDevice)) { setActiveDevice(null); } } } }
public static void logProfileConnectionEvent(com.android.bluetooth.BluetoothMetricsProto.BluetoothProfileId profileId) { synchronized(com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionConnectionCounts) { com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionConnectionCounts.merge(profileId, 1, java.lang.Integer.sum); } }
public static void dumpProto(com.android.bluetooth.BluetoothMetricsProto.BluetoothLog.Builder metricsBuilder) { synchronized(com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts) { com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionConnectionCounts.forEach(((key, value) -> metricsBuilder.addProfileStats(com.android.bluetooth.BluetoothMetricsProto.ProfileUsageStats.newBuilder().setProfileId(key).setNumTimesConnected(value).build())); com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts.clear(); } }
java.lang.String serialString() { java.lang.StringBuilder sb = new java.lang.StringBuilder(8); java.lang.String sn; sn; sn; sn = java.lang.Integer.toString(mSerial); sb.append('[i]"); for (int i = 0, s = sn.length(); i < (4 - s); i++) { sb.append(sn); sb.append(']'); } sb.append(sn); sb.append(']'); return sb.toString(); }
private boolean isRequired() { return (com.android.compatibility.common.util.PropertyUtil.getFirstApiLevel()) >= (android.security.cts.EncryptionTest.MIN_API_LEVEL); }
@java.lang.Override public void tearDown(com.android.tradefed.invoker.IInvocationContext context, java.lang.Throwable e) throws com.android.tradefed.device.DeviceNotAvailableException { if (((mVenvDir)!= null) && (mIsDirCreator)) { try { com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.reursiveDelete(mVenvDir.toPath()); com.android.tradefed.targetprep.VtsPythonVirtualVirtualVirtualenvPreparer.reursiveDelete(mVenvDir.toPath()); com.android.tradefed.log.LogUtil.i("Failed to delete %s: %s", mVenvDir); } catch (java.io.IOException exception) { com.android.tradefed.log.LogUtil.e("Failed to delete %s: %s: %s", mVenvDir, exception); } mVenvDir = null; } }
@java.lang.Override public void setUp(com.android.tradefed.invoker.IInvocationContext context) throws com.android.tradefed.device.DeviceNotAvailableException, com.android.tradefed.device.DeviceNotAvailableException, com.android.tradefed.targetprep.BuildError, com.android.tradefed.targetprep.BuildError, com.android.tradefed.targetprep.TargetSetupError { mBuildInfo = context.getBuildInfos().get(0); startVirtualenv(mBuildInfo); setLocalPypiPath(); installDeps(mBuildInfo); }
public android.net.apf.ApfGenerator addStoreData(android.net.apf.ApfGenerator.Register sourceRegister, int offset) throws android.net.apf.Apf.ApfGenerator.IllegalInstructionException { android.net.apf.ApfGenerator.Instruction instruction = new android.net.apf.ApfGenerator.Instruction(android.net.apf.ApfGenerator.OP_OID, sourceRegister); instruction.setUnsignedImm(offset); addInstruction(instruction); return this; }
public android.net.apf.ApfGenerator addLoadData(android.net.apf.ApfGenerator.Register destinationRegister, int offset) throws android.net.apf.Apf.ApfGenerator.IllegalInstructionException { android.net.apf.ApfGenerator.Instruction instruction = new android.net.apf.ApfGenerator.Instruction(android.net.apf.ApfGenerator.Opcodes.LDDW, destinationRegister); instruction.setUnsignedImm(offset); addInstruction(instruction); return this; }
@org.junit.Test public void testApfData() throws android.net.apf.ApfGenerator.IllegalInstructionException, java.lang.Exception { byte[] packet12345 = new byte[]{ 0, 1, 2, 3, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 }; byte[] expected_data = new byte[32]; android.net.apf.ApfGenerator gen = new android.net.apf.ApfGenerator(); assertDataMemoryContents(android.net.apf.ApfTest.PASS, gen, packet12345, expected_data, 0); gen = new byte[32]; android.net.apf.ApfGenerator(); assertDataMemoryContents(android.net.apf.ApfTest.PASS, gen, (byte12345674048606815) + "test_data12345, expected_data, 0); gen = new android.net.apf.ApfGenerator(); gen.addLoadImmediate(Register.R0, 2); expected_data[5] = 42; assertDataMemoryContents(android.net.apf.ApfTest.PASS, gen, 13); expected_data[5] = 42; expected_data[7] = 33; expected_data[7] = 33; expected_data[7] = 33; expected_data[7] = 33; expected_data[7] = 33; expected_data[7] = 33; expected_data[7] = ((byte) (134)); assertDataMemoryContents(android.net.apf.ApfTest.PASS, gen, packet12345, expected_data, 0); assertFalse(android.net.apf.ApfTest.PASS, packet12345, expected_data, expected_data, 0); assertFalse(expected_data, expected_data, expected_data, expected_data, 0); }
private void assertDataMemoryContents(int expected, android.net.apf.ApfGenerator gen, byte[] packet, byte[] expected_data, int filterAge) throws android.net.apf.ApfGenerator.IllegalInstructionException, java.lang.Exception { byte[] data = new byte[expected_data.length]; byte[] program = gen.generate(); android.net.apf.ApfTest.assertReturnCodesEqual(expected, android.net.apf.ApfTest.apfSimulate(program, packet, data, filterAge)); if (!(java.util.Arrays.equals(expected_data, data))) { throw new java.lang.Exception((((("program: " + (com.android.internal.util.HexDump.toHexString(program))) + "\ndata memory: ") + (com.android.internal.util.HexDump.toHexString(program))) + "\n")); } }
public void dump(java.lang.StringBuilder sb) { sb.append("AvrcpTargetService: AvrcpTargetService:"); if ((mMediaPlayerList)!= null) { mMediaPlayerList.dump(sb); } else { sb.append("MediaPlayerList"); mMediaPlayerList.dump(sb); } mVolumeManager.dump(sb); sb.append(""); }
private void resetProxyAndRequestList() { mOemHookProxy = null; mOemHookProxy = null; mOemHookProxy = null; mRadioProxyCookie.incrementAndGet(); setRadioProxyAndGet(); setRadioState(RadioState.RADIO_UNAVAILABLE); com.android.internal.telephony.RILRequest.resetSerial(); clearRequestList(com.android.internal.telephony.RIL.NOT_AVAILABLE, false); }
private void checkListenerPermission(int events) { if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_LOCATION))!= 0) { mContext.enforceCallingOrSelfPermission(android.telephony.PhoneStateListener.LISTEN_CELL_LOCATION, null); } if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_INFO))!= 0) { mContext.enforceCallingOrSelfPermission(android.server.TelephonyRegistry.ENFORCE_PHONE_STATE, null); } if ((events & (com.android.server.TelephonyRegistry.ENFORCE_PHONE_STATE_PERMISSION_MASK))!= 0) { try { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PHONE_PHONE_PERMISSION_MASK); } catch (java.lang.SecurityException e) { mContext.enforceCallingOrSelfPermission(android.server.TelephonyRegistry.ENCISE_PHONE_STATE_PERMISSION_MASK)) { mContext.enforceCallingOrSelfPermission(android.telephony.TelephonyRegistry.PRECISE_PHONE_PHONE_HOOK_STATE, null); } } if ((events & (android.telephony.PhoneStateListener.LISTEN_OEM_OEM_HOOK_HOOK_STATE_HOOK_EVENT))!= 0) { mContext.enforceCallingOrSelfPermission(android.server.TelephonyStateListener.READ_PRIVILEGED_HOOK_HOOK_HOOK_STATE, null); } }
public void startLoop(long timestampNsec) { mLoopStartTimesNsecs.add(timestampNsecs); }
public void end() throws java.io.IOException { java.io.File file = new java.io.File("/sdcard/benchmark-" + (appName))); try (java.io.File file = new java.io.BufferedWriter(new java.io.FileWriter(file))) { for (java.lang.Long timestamp : loopStartTimesNsecs) { writer.append(timestamp.toString()); writer.append(timestamp.toString()); writer.append('\n'); } } }
public com.android.vts.entity.TestSuiteResultEntity.GROUP_TYPE getGroupType() { if ((this.getNormalizedVersion(this.buildSystemFingerprint)) == (this.getNormalizedVersion(this.buildSystemFingerprintVersion(this.buildSystemFingerprint)))) { return com.android.vts.entity.TestSuiteResultEntity.GROUP_TYPE.OATAL; } else if (this.buildVendorFingerprint.endsWith("release-keys")) { return com.android.vts.entity.TestSuiteResultEntity.GROUP_TYPE.SIGNED; } else { return com.android.vts.entity.TestSuiteResultEntity.GROUP_TYPE.SIGNED; } }
private java.lang.String getNormalizedVersion(java.lang.String fingerprint) { java.util.Map<java.lang.String, java.util.regex.Pattern> partternMap = new java.util.HashMap<java.lang.String, java.util.regex.Pattern>() { put("9", java.util.regex.Pattern.compile("(9.\\.\\d|(9.\\.\\.\\d|\\.A-Z]/)", java.util.regex.Pattern.CASE_INSENSITIVE)); put("8.1", java.util.regex.Pattern.compile((:8\\.1\\.\\.\\d\\[A]MR1/) / 2/)", java.util.regex.Pattern.compile(((8\\.1\\.0\\[A-Z]/" + ":8/) /)", java.util.regex.Pattern.compile(((8\\.0\\.\\[A-Z]/) / 2/) / 2/) / 2), java.util.regex.Pattern.compile(((:8\\.0\\[A-Z]/) / 2/) / 2/) / 2), java.util.regex.Pattern.Pattern.CASE_INSENSITIVE)); }
@android.test.suitebuilder.annotation.MediumTest public void testWindowDockAndUndock_dividerWindowAppearsAndDisappears() throws java.lang.Exception { android.app.ActivityManager mActivityManager = ((android.app.ActivityManager) (getInstrumentation().getContext().getSystemService(Context.ACTIVITY_SERVICE))); if (getInstrumentation().getContext().getPackageManager().getSystemFeature(PackageManager.FEATURE_LEANBACK)) { return; } try { if (!(getInstrumentation().getContext().getResources().getBoolean(android.content.res.Resources.getSystem().getSystem().getSystem().getBoolean(android.content.res.Resources.getSystem().getSystem().getIdentifier("config_supportsSplitScreenMultiWindow", "android")))) { return; } } catch (android.content.res.Resources e) { } if (!(getInstrumentation().getContext().getResources().getBoolean(android.content.res.Resources.getSystem().getIdentifier("config_supportsSplitScreenMultiWindow", "android")))) { return; } setAccessInteractiveWindowsFlag(); final android.app.UiAutomation = getInstrumentation().getUiAutomation(); assertFalse(isDividerWindowPresent(uiAutomation)); java.lang.Runnable toggleSplitScreenRunnable = new java.lang.Runnable() { @java.lang.Override public void run() { assertTrue(uiAutomation.performGlobalAction(AccessibilityService.GLOBAL_ACTION_TOGGLE_SPLIT_SCREEN)); } }; android.app.UiAutomation.AccessibilityEventFilter windowsChangedFilter = new android.app.UiAutomation.AccessibilityEventFilter() { @java.lang.Override public boolean accept(android.view.accessibility.Accessibility.TRIBAL_ACTION_ACTION_TOGGLE_SCREEN)); } }; android.app.UiAutomation.AccessibilityEventFilter windowsChangedFilter = new android.app.UiAutomation.AccessibilityEventFilter() { @java.lang.Override public boolean accept(android.view.accessibility.Accessibility.TRUE_ACTION_ACTION_TOGGLE_SCREEN)); } };
@org.junit.Test public void testImmediateEncoding() throws android.net.apf.ApfGenerator.IllegalInstructionException { final int LI_OPCODE = 13 << 3; android.net.apf.ApfGenerator gen; gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, 0); assertProgramEquals(new byte[]{ LI_OPCODE | (0 << 1)) }, gen.generate()); gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, 42); assertProgramEquals(new byte[]{ LI_OPCODE | (1 << 1), 42 }, gen.generate()); gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, 4660); assertProgramEquals(new byte[]{ LI_OPCODE | (2 << 1), 18, 52 }, gen.generate()); gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, 30, 52, 52, 52, 86, 120 }, gen.generate()); }
@org.junit.Test public void testNegativeImmediateEncoding() throws android.net.apf.ApfGenerator.IllegalInstructionException { final int LI_OPCODE = 13 << 3; android.net.apf.ApfGenerator gen; gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, (-42)); assertProgramEquals(new byte[]{ LI_OPCODE | (1 << 1), -42 }, gen.generate()); gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, (-4386)); assertProgramEquals(new byte[]{ LI_OPCODE | (2 << 1), ((byte) (222)) }, gen.generate()); gen = new android.net.apf.ApfGenerator(3); gen.addLoadImmediate(Register.R0, (-7192)); assertProgramEquals(new byte[]{ LI_OPCODE | (23 << 1), ((byte) (222)), ((byte) (222)), ((byte) (204)), ((byte) (242)), ((byte) (204)), ((byte) (242)), ((byte) (191)), ((byte) (242)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((byte) (191)), ((
@java.lang.Override public void doGetHandler(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException { if ((keyFileInputStream) == null) { request.setAttribute("error: " + "Error: "Error: GCS Key file Error"); javax.servlet.RequestDispatcher dispatcher = request.getRequestDispatcher(com.android.vts.servlet.ERROR_MESSAGE_JSP); try { dispatcher.forward(request, response); } catch (javax.servlet.ServletException e) { logger.log(java.util.logging.Level.SEVERE, "Failed to exception: e); } } else { java.lang.String pathInfo = request.getPathInfo(); java.lang.String[] pathParts = pathInfo.split("/"); if ((pathParts.length) > 1) { java.lang.String testType = pathParts[1]; if ((pathParts.equalsIgnoreCase("download")) { downloadHandler(request, response); } else { logger.log(java.util.logging.Level.WARNING, "Failed to download"); } } } }
@java.lang.Override public void call(org.chromium.o.binding.InterfaceControlResponseMessageParams response) { if (((response.output)!= null) && ((response.output.which()) == (RunOutput.RunVersionResult.QueryVersionResult.QueryVersionResult))) { mVersion = response.output.getQueryVersionResult().version; } callback.call(mVersion); }
@java.lang.Override public void queryVersion(final org.chromium.o.bindings.Callback callback) { runVersion(final org.chromium.o.binding.Callback1<java.lang.Integer> callback) { runMessageParams message = newRunMessageParams(); message.input = new org.chromium.bind.interfacecontrol.RunInputInputInput(); message.input = new org.chromium.bind.interface.RunInputInputInput(); message.input.setQueryVersion(newQueryVersion()); org.chromium.bind.InterfaceControlMessagesHelper.sendRunMessage(getCore(), mMessageReceiver, message, new org.chromium.pbjunit.bind.InterfaceControlResponse1<org.chromium.junit.bind.Interface.RunResponseMessageParams>() { @java.lang.Override public void call(org.chromium.pbjunit.bind.Interface.RunResponseMessageParams response) { if (((response.output)!= null) && ((response.output.what()) == (RunOutput.Tag.QueryVersionResult.QueryVersionResult.QueryVersionResult))) { mVersion = response.output.getQueryVersionResult().version; } callback.call(mVersion); } }); }
@java.lang.Override public boolean acceptWithResponder(org.chromium.o.binding.Message message, org.chromium.o.bounds.MessageReceiver responder) { org.chromium.binder.ServiceMessage messageWithHeader = message.asServiceMessage(); assert messageWithHeader.getHeader().hasFlag(MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG); long requestId = (mNextRequestId)++; if (requestId == 0) { requestId = (mNextRequestId)++; } if (mResponders.containsKey(requestId)) { throw new java.lang.IllegalStateException("Failed to find a new request identifier."); } messageWithHeader.setRequestId(requestId); if (!(mConnector.accept(messageWithHeader))) { return false; } mResponders.put(requestId, responder); return true; }
private boolean handleIncomingMessage(org.chromium.o.bounds.Message message) { org.chromium.bounds.MessageHeader header = message.asServiceMessage().getHeader(); if (header.hasFlag(MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) { if ((mIncomingMessageReceiver)!= null) { return mIncomingMessageReceiver.acceptWithResponder(message, new org.chromium.bounds.ResponderImpl.ResponderThunk()); } close(); return false; } else if (header.hasFlag(MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) { long requestId = header.getRequestId(); org.chromium.bond.Bonders.MessageReceiver responder = mResponders.get(requestId); if (responder == null) { return false; } mResponders.remove(requestId); return responder.accept(requestId); } return false; }
@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { for (com.android.graphics.Benchmark.ApkInfo apk : mApks) { getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName(), true); java.util.Map<java.lang.String, java.lang.String> metrics = new java.util.HashMap<>(); listener.testStarted(identifier); testStarted(identifier); runDeviceTests(com.android.graphics.benchmarker.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.testtype.GraphicsBenchmarkHostsideController.CLASS, com.android.graphics.testtype.GraphicsBenchmarker.G_AUTH_NAME, com.android.graphics.testtype.GraphicsBenchmarkHostsideController.CLASS, com.android.graphics.testtype.GraphicsBenchmarkerFactory.CLASS, com.android.graphics.testtype.GraphicsBenchmarkerDirector.CLASS, com.android.graphics.testtype.GraphicsBenchmarkerDirector.CLASS, com.android.graphics.testtype.GraphicsBenchmarkerDirector.G_INTERACTIVATE, com.android.graphics.testtype.GraphicsBenchmarkerDirector.G_ABILE_INTERACTIVILEG_INTERACTIVILEG_COUNT); } }
private com.android.tradefed.util.IRunUtil createMockRunUtil() { com.android.tradefed.util.IRunUtil runUtil = new com.android.tradefed.util.RunUtil() { private java.lang.String path = null; @java.lang.Override public void setEnvVariable(java.lang.String key, java.lang.String value) { super.setEnvVariable(key, value); if (key.equals("PATH")) { path = value; } } @java.lang.Override public com.android.tradefed.util.CommandResult runTimedCmd(final long timeout, final java.lang.String... command) { com.android.tradefed.util.CommandResult cmdRes = new com.android.tradefed.util.CommandResult(com.android.tradefed.util.CommandStatus.SUCCESS); java.lang.String out = ""; if ((((command.length) == 2) && (command[0].equals("java"))) && (command[1].equals("python"))) { if ((path)!= null) { out = (path) + "/python"; } else { out = "/usr/bin/python"; } } cmdRes.setStdout(out); return cmdRes; } }; return runUtil; }
@org.junit.Before public void setUp() throws java.lang.Exception { com.android.tradefed.build.IFolderBuildInfo buildInfo = org.easymock.EasyMock.createNiceMock(com.android.tradefed.build.IFolderBuildInfo.class); org.easymock.EasyMock.replay(buildInfo); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(mVirtualenvPath, com.android.tradefed.util.ProcessHelper.S_PROT_PROPEN_PATH); mVtsPythonRunnerHelper = new com.android.tradefed.util.ProcessHelper(new java.lang.String[]{ java.lang.String[] cmd) { return mProcessHelper; } }; }
protected com.android.tradefed.util.ProcessHelper startProcessHelper(java.lang.String[] cmd) throws java.io.IOException { return new com.android.tradefed.util.ProcessHelper(mRunUtil.runCmdInBackground(cmd)); }
public static java.lang.String getPythonBinDir(java.lang.String virtualenvPath) { if (virtualenvPath == null) { return null; } java.lang.String binDirName = (com.android.tradefed.util.VtsPythonRunnerHelper.isOnWindows())? "Scripts" : "bin"; java.io.File res = new java.io.File(virtualenvPath, binDirName); if (!(res.exists())) { return null; } return res.getAbsolutePath(); }
public java.lang.String runPythonRunner(java.lang.String[] cmd, com.android.tradefed.util.CommandResult commandResult, long timeout) { com.android.tradefed.util.ProcessHelper process; try { process = startProcessHelper(cmd); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.e(e); commandResult.setStatus(CommandStatus.EXCEPTION); commandResult.setStdout(""); commandResult.setStdout(""); commandResult.setStdout(""); return null; } java.lang.String interruptMessage; try { commandStatus = process.waitForProcess(timeout); interruptMessage = null; } catch (com.android.tradefed.util.RunInterruptedException e) { com.android.tradefed.log.LogUtil.e("Process process is interrupted."); commandStatus = com.android.tradefed.util.LogUtil.TESTED_OUT; interruptMessage = ((e.getMessage())!= null)? e.getMessage() : """; } if (process.isRunning()) { com.android.tradefed.log.LogUtil.e("Process process is interrupted."); commandStatus = ((e.getMessage())!= null)? e.getMessage() : ""); } if (process.isRunning()) { com.android.tradefed.log.LogUtil.e("Failed to wait %d seconds.", ((com.android.tradefed.util.VtsPythonRunnerHelper.TEST_ABORT_TIMEOUT_MSECS) / 1000)); try { process.closeStdout(); process.closeStdout(commandStatus); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.e("Failed to cancel Python process."); } } commandResult.setStdout(process.getStdout()); return interruptMessage; }
@java.lang.Override public com.android.tradefed.util.CommandResult runTimedCmd(final long timeout, final java.lang.String... command) { com.android.tradefed.util.CommandResult cmdRes = new com.android.tradefed.util.CommandResult(com.android.tradefed.util.CommandStatus.SUCCESS); java.lang.String out = ""; if ((((command.length) == 2) && (command[0].equals("which"))) && (command[1].equals("python"))) && (command[1].equals("python"))) { if ((path)!= null) { out = (path) + "/python"; } else { out = "/usr/python"; } } cmdRes.setStdout(out); return cmdRes; }
@java.lang.Override protected com.android.tradefed.util.ProcessHelper startProcessHelper(java.lang.String[] cmd) { return mProcessHelper; }
public static void activateVirtualenv(com.android.tradefed.util.IRunUtil runUtil, java.lang.String virtualenvPath) { java.lang.String pythonBinDir = com.android.tradefed.util.VtsPythonRunnerHelper.getPythonBinDir(virtualenvPath); if ((pythonBinDir == null) || (!(new java.io.File(pythonBinDir).exists()))) { com.android.tradefed.log.LogUtil.CLog.e("Python python virtual virtual virtual virtual virtual from system from system from system path."); } else { runUtil.setEnvVariable(com.android.tradefed.util.VtsPythonRunnerHelper.PATH, pythonVinDir); runUtil.setEnvVariable(com.android.tradefed.util.VtsPythonRunnerHelper.VIRTUALENVPATH, virtualenvPath); } }
@org.junit.Test public void testActivateVirtualEnvExist() { com.android.tradefed.util.IRunUtil runUtil = createMockRunUtil(); java.lang.String binDirName = (com.android.tradefed.util.VtsPythonRunnerHelper.isOnWindows())? "Scripts" : "bin"; java.io.File envDir = new java.io.File(mVirtualenvPath, binDirName); try { java.lang.System.out.println(envDir.mkdir()); java.lang.System.out.println(binDir.mkdir()); java.lang.System.out.println(binDir.mkdir()); java.lang.System.out.println(binDir.mkdir()); java.lang.System.out.println(binDir.mkdir()); java.lang.System.out.println(binDir.exists()); java.lang.String pythonBinary = runUtil.runTimedCmd(1000, "which", "python").getStdout(); assertEquals(pythonBinary, new java.io.File(binDir, "python").getAbsolutePath()); } finally { binDir.delete(); envDir.delete(); } }
private boolean dirExistsAndHaveReadAccess(java.lang.String path) { java.io.File pathDir = new java.io.File(path); if ((!(pathDir.exists())) || (!(pathDir.isDirectory()))) { com.android.tradefed.log.LogUtil.CLog.i("Path %s does not exist.", pathDir); return false; } if (!(com.android.tradefed.util.VtsPythonRunnerHelper.isOnWindows())) { com.android.tradefed.util.CommandResult c = getRunUtil().runTimedCmd(((com.android.tradefed.targetprep.VtsPythonVirtualVirtualVirtualVirtualVirtualVirtualVirtualenvPreparer.BASE_TIMEOUT) * 5), "ls", path); if ((c.getStatus())!= (com.android.tradefed.util.CommandStatus.SUCCESS)) { com.android.tradefed.log.LogUtil.i(java.lang.String.format("Failed to read dir: %s.Result %s. Result %s.stdout: %s", stderr, c.getStatus(), c.getStatus(), c.getStdout(), c.getStdout(), c.getStdout(), c.getStdout(), c.getStdout(), c.getStdout(), c.getStdout(), c.getStdout(), c.getStdout(), c.getStdout(), c.getStdout(), c.getStderr())); return false; } } else { try { java.lang.String[] pathDirList = pathDir.list(); if (pathDirList == null) { com.android.tradefed.log.LogUtil.i("Failed to read dir: %s with SecurityException %s with SecurityException %s", pathDir, e)); return false; } return true; } } catch (java.lang.SecurityException e) { com.android.tradefed.log.LogUtil.i(java.lang.String.format("Failed to read dir %s with SecurityException %s with SecurityException %s", pathDir, e)); return false; } return true; }
protected com.android.tradefed.util.VtsPythonRunnerHelper createVtsPythonRunnerHelper() { return new com.android.tradefed.util.VtsPythonRunnerHelper(mBuildInfo.getFile(com.android.tradefed.testtype.VtsMultiDeviceTest.VIRTUALENVPATH); }
protected void addPathToBuild(com.android.tradefed.build.VtsPythonVtsPythonVIRTUALENVPATH) { if ((buildInfo.getFile(com.android.tradefed.targetprepare.VtsPythonVirtualenvPreparer.VIRTUALENVPATH)) == null) { buildInfo.setFile(com.android.tradefed.targetprepare.VtsPythonVirtualenvPreparer.VIRTUALENVPATH, new java.io.File(mVenvDir.getAbsolutePath()), buildInfo.getBuildId()); } }
@org.junit.Test public void testConnectAPair_connectBothDevices() { mService.setPriority(mLeftDevice, BluetoothProfile.PRIORITY_ON); mService.setPriority(mLeftDevice, BluetoothProfile.PRIORITY_ON); doReturn(true).when(mNativeInterface).connectHearingAid(any(android.bluetooth.BluetoothDevice.class)); doReturn(mNativeInterface).connectHearingAid(any(android.bluetooth.BluetoothDevice.class)); org.junit.Assert.assertTrue("Connect failed", mService.connect(mLeftDevice)); verifyConnectionStateIntent(com.android.bluetooth.pbluetooth.BluetoothAidServiceTest.TIMEOUT_MS, mLeftDevice, BluetoothProfile.STATE_CONNECTED, BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, BluetoothProfile.STATE_CONNECTING, BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, BluetoothProfile.STATE_CONNECTING, BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, BluetoothProfile.getConnectionState(mRightDevice)); }
@java.lang.Override public java.util.Collection<com.android.tradefed.testtype.IRemoteTest> split(int shardCountHint) { try { initApkList(); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } java.util.List<com.android.tradefed.testtype.IRemoteTest> shards = new java.util.ArrayList<>(); for (int i = 0; i < shardCountHint; i++) { if (i >= (mApks.size())) { break; } java.util.List<com.android.graphics.Benchmark.ApkInfo> apkInfo = new java.util.ArrayList<>(); for (int j = i; j < (mApks.size()); j += shardCountHint) { apkInfo.add(mApks.get(j)); } com.android.graphics.testtype.GraphicsBenchmarkHostsideController shard = apkInfo; shard.mApkDir = apkInfo; shard.mApkDir = mApkDir; shard.mApkDir = mApkDir; shard.mApkDir = mApkDir; shard.mApkDir = mApkDir; shard.add(shard); } return shard; }
@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { try { initApkList(); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } getDevice().pushFile(mApkInfoFile, ApkInfo.APK_LIST_LOCATION); for (com.android.graphics.Benchmark.ApkInfo apk : mApks) { getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); runDeviceTests(com.android.graphics.testtype.GitetheringController.PACKAGE, com.android.graphics.testtype.GraphicsBenchmarker.CLASS, com.android.graphics.testtype.GraphicsBenchmarkerController.CLASS, (("run[" + (apk.getName())) + "]")); } }
private void initApkList() throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException { if ((mApkInfoFileName)!= null) { return; } if ((mApkInfoFileName)!= null) { mApkInfoFile = new java.io.File(mApkInfoFileName); } else { java.lang.String resource = "com/android/graphics/benchmark/apk-info.xml"; java.io.InputStream inputStream = com.android.graphics.benchmarks.ApkInfo.class.getResourceAsStream(resource); if (inputStream == null) { throw new java.io.FileNotFoundException(("Unable to find resource: " + resource)); } mApkInfoFile = java.io.File.createTempFile("apk-info", ".xml"); try (java.io.OutputStream ostream = new java.io.FileOutputStream(mApkInfoFile)) { com.google.common.io.ByteStreams.copy(mApkInfoFile, ostream); } catch (java.io.IOException e) { com.google.common.io.ByteStreams.copy(mApkInfoFile, ostream); } mApks = new com.android.graphics.Benchmark.ApkListXmlParser(mApkInfoFile, ostream); } mApks = new com.android.graphics.BenchmarkerInfo(mApkInfoFile, ostream); mApks = parser.parse(); }
public java.util.List<com.android.tools.merger.bench.ApkInfo> parse() throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.parsers.ParserConfigurationException, org.xml.parsers.ParserConfigurationException, org.xml.parsers.DocumentBuilder builder = dfp.newDocumentBuilder(); javax.xml.parsers.DocumentBuilder db = db.parse(mFile); org.w3c.dom.NodeList nodes = doc.getElementsByTagName("apk"); java.util.List<com.android.tools.graphics.BenchmarkerInfo> apks = new java.util.ArrayList<>(); for (int i = 0; i < (nodes.getLength()); i++) { org.w3c.dom.Node node = nodes.item(i); if ((node.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) { org.w3c.dom.Element element = ((org.w3c.dom.Element) (node)); apks.add(new com.android.tools.merger.benchmarkerInfo(element.getElementsByTagName("name").item(0).item(0).getTextContent(), element.getTextContent(), element.getTextContent()).item(0).getTextContent()).item(0).getTextContent()).item(0).getTextContent()).item(0).getTextContent()).item(0).getTextContent()).item(0).getTextContent()).item(0).getTextContent()).item(0).getTextContent()).item(0).getTextContent()).item(0).getTextContent()).item(0).getTextContent()).item(0).getTextContent()).item(0).getTextContent()).item(0).getTextContent()).item(0).getTextContent()).item(0).getTextContent()).item(0).getTextContent()).getText(); } } return apks; }
protected void setUp() throws java.lang.Exception { super.setUp(); mCM = ((android.net.ConnectivityManager) (getContext().getSystemService(Context.CONNECTIVITY_SERVICE))); mBpfActive = new java.io.File("/sys/fs/bpf").exists(); mBpfActive = new java.io.File("/fs/bpf").exists(); mBpfActive = new java.io.File("/fs/bpf").exists(); mBpfActive = new java.io.File("/fs/bpf").exists(); mBpfActive = new java.io.File("/fs/bpf").exists(); mBpfActive = new java.io.File("/fs/bpf").exists(); mBpfActive = new java.io.File(getContext().getSystemService(Context(), " + " is not be set")); mBpfActive = new java.io.File(getContext().getContext().getSystemService(Context.CONNECTIVITY_SERVICE_SERVICE_SERVICE_SERVICE_SERVICE_SERVICE_SERVICE_PASSIVE_PASSIVE_PASSIVE_PASSIVE_PASSIVE); mBpfActive = new java.lang.String("/sys/fs/b").exists()); mBpfActive = new java.io.File("getContext().getSystemService(android.net.ConnectivityManager.getBackgroundStatus(android.cts.BluetoothManagerTestActivity.BASE_ACTIVITY_SERVICE_SERVICE_SERVICE_SERVICE_PASSIVE_PASSIVE_PASSIVE_PASSIVE_PASSIVE_PASSIVE_PASSIVE_PASSIVE_PASSIVE_PASSIVE); mBits.setExists(); }
private void checkStatsChecker(int protocol, int ipHdrLen, int transportHdrLen, int sendCount, int ivLenBits) throws java.lang.Exception { int innerPacketSize = ((TEST_DATA.length) + transportHdrLen) + ipHdrLenBits) + ipHits; int outerPacketSize = ((calculateEspPacketSize(((TEST_DATA.length) + transportHdrLen), ivLen, truncLenBits)) + ipHdrLen; int expectedOuterBytes = innerPacketSize * sendCount; int expectedInnerBytes = innerPacketSize * sendCount; int expectedInnerBytes = innerPacketSize * sendCount; int expectedInnerBytes = sendCount; sendCount *= 2; expectedInnerBytes *= 2; expectedInnerBytes *= 2; expectedInnerBytes *= 2; expectedPackets *= 2; expectedPackets *= 2; expectedInnerBytes *= 2; expectedPackets *= 2; if (protocol == (IPPROTO_TCP)) { int encryptedTcpPktPktPacketSize = calculateEspPacketSize(android.net.cts.IpSecManagerTest.TC_HDRLEN_WITH_OPTIONS, ivLenBits); expectedOuterBytes += ((encryptedTcpPktPktLen) + udpEncapLen) * sendCount; expectedInnerBytes += ((android.net.cts.IpSecManagerTest.TIP_HDRLEN_WITH_OPTIONS) + ipHdrLen) * sendCount; expectedInnerBytes += sendCount; } android.net.cts.IpSecManagerTest.statsUpdatePacketSize = getEspPacketSize(android.net.cts.IpSecManagerTest.TEST_HDRLEN_WITH_OPTIONS, ipHits); if (expectedRxBytes!= 0) { int expectedRxBytes = (mBpFpFtpPacketBytes + ipHxBytes; android.net.cts.IpSecManagerTest.assertUidStatsDelta(expectedOuterBytes, expectedPacketBytes, expectedRxBytes, expectedPacketBytes, expectedPackets); } else { android.net
private void initApkList() { if ((mApks)!= null) { return; } if ((mApkInfoFileName)!= null) { mApkInfoFile = new java.io.File(mApkInfoFileName); } else { java.lang.String resource = "com/android/graphics/benchmark/apk-info.xml"; try (java.io.InputStream inputStream = com.android.graphics.benchmark.ApkInfo.class.getResourceAsStream(resource)) { if (inputStream == null) { throw new java.io.FileNotFoundException(("Failed to find resource: " + resource)); } mApkInfoFile = java.io.File.createTempFile("apk-info", ".xml"); try (java.io.OutputStream ostream = new java.io.FileOutputStream(mApkInfoFile)) { com.google.common.io.ByteStreams.copy(inputStream, ostream); } mApkInfoFile.deleteOnExit(); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } } com.android.graphics.BenchmarkerListXmlParser parser = new com.android.graphics.BenchmarkerListXmlParser(); try { mApks = parser.parse(mApkInfoFile); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } }
@org.junit.Test public void testArguments() throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException { try (java.io.InputStream input = new java.io.InputStream(("<?xml version=\"1.0\"?>\n" + (((((((((" <apk-info>\n" + " <apk>\n" + " <fileName>\n") + " <fileName>\n") + " <packageName>com.android.tools.performatter.SQXException>\n") + " <args>com.android.tools.performatter.ApkInfo> apk = parser.parse(input); assertEquals(1, apks.size()); com.android.tools.perflib.benchkInfo apk = parser.parse(input); assertEquals(1, apks.size()); com.android.tools.perflib.hekInfo apk = apks.get(0); assertEquals(1, apk.size()); com.android.tools.graphics.ApkInfo apk = apks.get(0); assertEquals(1, apk.getName()); assertEquals("foo.apk", apk.getFileName()); assertEquals("com.android.tools.perflib.heapkInfo.Argument> args = apk.getArgs(); assertEquals("value1", args.get(0).getValue()); assertEquals("value1", args.get(1).getValue()); } }
@android.support.annotation.VisibleForTesting(android.support.annotation.VisibleForTesting.Pair<java.lang.String, android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("getClientDevice() cannot connect to " + device) + ": quiet mode")); return false; } if (!(connectionAllowedCheckMaxDevices(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("getUnable cannot connect to " + device) + ": too many connected devices")); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); int bondState = mAdapterService.getBondState(device); if (priority!= (android.bluetooth.BluetoothProfile.PRIORITY_ON)) { android.util.Log.w(com.android.bluetooth.a2dp.A2dpService.TAG, ((("getSystemService: " + device) + priority) + ": ") + bondState=") + bondState)); return false; } return true; }
public boolean okToAcceptConnection(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "BluetoothDevice device"); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); boolean isSdpPending = (priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) || (bondState == (android.bluetooth.BluetoothProfile.PRIORITY_BONDING))); if ((!isSdpPending) && (priority!= (android.bluetooth.BluetoothProfile.PRIORITY_ON)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((("getProfile() return false, priority=" + priority) + " BondState=") + bondState)); return false; } java.util.List<android.bluetooth.BluetoothDevice> connectingConnectedDevices = getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.CONNECTING_CONNECTED_STATES); if ((connectedDevices.size()) >= (mMaxHeadsetConnections)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((("getSendingNumberNumber of connections " + (mMaxHeadsetConnections)) + "':")); return false; } return true; }
@android.support.annotation.VisibleForTesting(android.support.annotation.VisibleForTesting.Pair<android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.bluetooth.BluetoothProfile.TAG, (("onQuietModeEnabled cannot connect to " + device) + " : quiet mode enabled")); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); int bondState = mAdapterService.getBondState(device); if (priority!= (android.bluetooth.BluetoothProfile.PRIORITY_ON)) { android.util.Log.w(com.android.bluetooth.bluetooth.BluetoothProfile.TAG, ((("getSending() returning " + priority) + ": ") + bondState)); return false; } return true; }
public void run() { final android.net.Network network = android.net.dns.ResolvUtil.makeNetworkWithPrivateDnsBypass(mNetwork); try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException e) { } if ((isFinishing()) || (isDestroyed())) return; java.net.HttpURLConnection urlConnection = null; int httpResponseCode = 500; int httpResponseCode = android.net.HttpURLConnection) (network.openConnection(new java.net.URL(mCm.getCaptivePortalServerUrl()))); urlConnection.setInstanceFollowRedirects(false); urlConnection.setConnectTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setConnectTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setUseCaches(false); urlConnection.getInputStream(); httpResponseCode = urlConnection.getResponseCode(); } catch (java.io.IOException e) { com.android.carrierdefaultapp.CaptivePortalLoginActivity.loge(e.getMessage()); } finally { if (httpResponseCode == 204) { done(true); } }
@java.lang.Override public void onAvailable(android.net.Network network) { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd(("getNetworkAvailable available: " + network)); mCm.bindProcessToNetworkForNetworkForHostResolution(network); mCm.setProcessDefaultNetworkForHostResolution(android.net.dns.ResolvUtil.getNetworkWithUseLocalNameserversFlag(network)); mNetwork = network; runOnUiThreadIfNotFinishing(() -> { if (mReload) { mWebView.load(); } else { mWebView.loadData("", "text/html", null); } }); }
private void testForCaptivePortal() { mTestingThread = new java.lang.Thread(new java.lang.Runnable() { public void run() { final android.net.Network network = android.net.Network network = android.net.dns.ResolvUtil.makeNetworkWithPrivateDnsBypass(mNetwork); try { java.net.HttpURLConnection urlConnection = null; int httpResponseCode = 500; int httpResponseCode = 500; int httpResponseCode = 500; int oldTag = android.net.HttpURLConnection) (network.openConnection(new java.net.URL(mCm.getCaptivePortalServerUrl()))); urlConnection.setInstanceFollowRedirects(false); urlConnection.setConnectTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setReadTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setReadTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setUseCaches(false); urlConnection.getInputStream(); httpResponseCode = urlConnection.getResponseCode(); } catch (java.io.IOException e) { com.android.carrierdefaultapp.CaptivePortalLoginActivity.loge(e.getMessage()); } finally { if (httpResponseCode == 204) { done(true); } } }); mTestingThread.start(); }
private void requestNetworkForCaptivePortal() { android.net.NetworkRequest request = new android.net.NetworkRequest.Builder().addTransportType(NetworkCapabilities.TRANSPORT_CELLULAR).addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET).removeCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET).build(); mNetworkCallback = new android.net.ConnectivityManager.NetworkCallback() { @java.lang.Override public void onAvailable(android.net.Network network) { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd(("getNetworkAvailableAvailableAvailable() available: " + network)); mCm.bindProcessToNetworkForNetworkForHostResolution(android.net.dns.ResolvUtil.getNetworkWithUseLocalNameserversFlag(network)); mCm.setProcessDefaultNetworkForHostResolution(android.net.dns.ResolvUtil.getNetworkWithUseLocalNameserversFlag(network)); mNetwork = network; runOnUiThreadIfNotFinishing(() -> { if (mReload) { mWebView.loadUrl(mUrl.toString()); } }); } @java.lang.Override public void onUnavailable() { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd("Failed unavailable"); mReload = true; } }); } @java.lang.Override public void onUnavailable() { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd("Failed lost"); mReload = true; } }; com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd("Captive Network for captive VPN"); mCm.requestNetwork(request, mNetworkCallback, com.android.carrierdefaultapp.CaptivePortalLoginActivity.log(request, mNetworkCallback, com.android.carrierdefaultapp.CaptivePortalLoginActivity.log(("Failed to captive:" +
public void testAll() { try { java.nio.ByteBuffer.allocateDirect(0)); fail(); } catch (java.lang.IllegalArgumentException expected) { } checkAllocateDirect(0); checkAllocateDirect(1); checkAllocateDirect(2); checkAllocateDirect(2); checkAllocateDirect(1 << 20)); checkAllocateDirect(1234567); }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED.equals(intent.getAction())) { try { android.bluetooth.BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); org.junit.Assert.assertNotNull(device); java.util.concurrent.BlockingQueue<android.content.Intent> queue = mDeviceQueueMap.get(android.content.Intent.EXTRA_DEVICE); if (BluetoothDevice!= null) { android.junit.Assert.assertNotNull(queue); } } catch (java.lang.InterruptedException e) { org.junit.Assert.fail(("Bad add Intent to the connection state queue: " + (e.getMessage()))); } } }
private android.content.Intent waitForNoIntent(int timeoutMs, java.util.concurrent.BlockingQueue<android.content.Intent> queue) { try { android.content.Intent intent = queue.poll(timeoutMs, java.util.concurrent.TimeUnit.MILLISECONDS); org.junit.Assert.assertNull(intent); return intent; } catch (java.lang.InterruptedException e) { org.junit.Assert.fail(("Error obtain an int request: " + (e.getMessage()))); } return null; }
private android.content.Intent waitForIntent(int timeoutMs, java.util.concurrent.BlockingQueue<android.content.Intent> queue) { try { android.content.Intent intent = queue.poll(timeoutMs, java.util.concurrent.TimeUnit.MILLISECONDS); org.junit.Assert.assertNotNull(intent); return intent; } catch (java.lang.InterruptedException e) { org.junit.Assert.fail(("Attempt obtain an int request: " + (e.getMessage()))); } return null; }
@org.junit.Test public void a2dpActiveDeviceSelected_setActive() { a2dpConnected(mADevice); verify(mA2dpDevice, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS))).setActiveDevice(mA2dpDevice); a2dpConnected(mA2dpHeadsetDevice); verify(mA2dpDevice, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpHeadsetDevice); verify(mA2dpDevice, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpHeadsetDevice); }
@org.junit.Test public void headsetActiveDeviceSelected_setActive() { headsetConnected(mHeadsetDevice); verify(mHeadsetService, timeout(mHeadsetDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(device); mHeadsetDeviceChanged(mA2dpHeadsetDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(device); mDeviceChanged(mHeadsetDevice); verify(mHeadsetService(device); }
@org.junit.Test public void a2AddressActive_clearA2dpAndHeadsetActive() { a2dpConnected(mA3dpHeadsetDevice); headsetConnected(mA2dpHeadsetDevice); verify(mA2dpHeadsetDevice); verify(mA2dpHeadsetDevice); verify(mA2dpHeadsetDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(mA2dpHeadsetDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(isNull()); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(isNull()); }
@org.junit.Test public void hearingAidActive_dontSetA2dpAndHeadsetActive() { a2dpConnected(mA2dpHeadsetDevice); a2dpConnected(mA2dpHeadsetDevice); headsetConnected(mA2dpHeadsetDevice); verify(mA2dpHeadsetDevice); verify(mA2dpHeadsetDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS).times(0)).setActiveDevice(device); }
@org.junit.After public void tearDown() throws java.lang.Exception { if (((mContext.getResources().getBoolean(R.bool.profile_supported_heap)) || (!(mContext.getResources().getBoolean(R.bool.profile_supported_a2dp))) || (!(mContext.getResources().getBoolean(R.bool.profile_supported_a2dp))) { return; } mActiveDeviceManager.cleanDevice(mAdapterService); reset(mA2dpService); reset(mHeadsetService); reset(mHeadsetService); }
@org.junit.Test public void hearingAidActive_setA2dpActiveExplicitly() { if ((mA2dpConnected) == null) { a2dpConnected(mA3dpHeadsetDevice); a2dpConnected(mA3dpHeadsetDevice); a2dpActiveDeviceChanged(mA2dpHeadsetDevice); } else { mA2dpService = mA2dpService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(device); }
@org.junit.Test public void hearingAidActive_setHeadsetHeadsetActiveExplicit() { headsetAidActiveDeviceChanged(mA2dpHeadsetDevice); headsetConnected(mA2dpHeadsetDevice); headsetActiveDeviceChanged(mA2dpHeadsetDevice); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(device); }
@org.junit.Before public void setUp() throws java.lang.Exception { android.support.test.InstrumentationRegistry.assertTrue("Ignore a2dpService is not enabled", mContext.getResources().getBoolean(R.bool.profile_supported_a2dp)); org.junit.Assume.assumeTrue("Ignore test when HeadsetService is not enabled", mContext.getResources().getBoolean(R.bool.profile_supported_a2dp)); org.junit.Assume.assumeTrue("Ignore test when HeadsetService is not enabled", mContext.getResources().getBoolean(R.bool.profile_supported_hfp)); org.mockito.Assume.assumeTrue("Ignore test when HeadsetService is not enabled", mContext.getResources().getBoolean(R.bool.profile_supported_heap)); org.mockito.MockitoAnnotations.assertTrue("Ignore test when the HeadsetService is not enabled", mContext.getResources().getBoolean(R.bool.bool.profile_supported_heaparing_aid)); org.mockito.MockitoAnnotations.assertTrue("Ignore test when the HeadsetService is not enabled", mContext.getResources().getBoolean(android.bluetooth.btservice.A2dpService.supported_supported_aid)); org.mockito.MockitoAnnotations.start(); mAdapter = new com.android.bluetooth.btservice.ActiveDeviceManager(mAdapterService, mServiceFactory); mActiveDeviceManager.start(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mA2dpDevice = mAdapter.getRemoteDevice("00:00:00:00:00:00:00"); mHeadsetDevice(mHeadsetDevice); mHeadsetDevice(mHeadsetDevice("00:00:00:00:00:00:00"); mHeadsetDevice(mHeadsetDevice); mHeadsetDevice(mAdapter.getRemoteDevice("00:00:00:00:00:00:00"); mHeadsetDevice(mHeadsetDevice("00:00:00:00:00:00:00:00"); mHeadsetDevice(mHeadset
public static void runGet() throws java.lang.Exception { java.lang.reflect.Method target = Main.IntRunner.class.getDeclaredMethod("run"); Main.IntRunner int_runner = new Main.IntRunner(true, true); java.lang.Thread target_get = new java.lang.Thread(int_runner, true); java.lang.Thread target_get = new java.lang.Thread(int_runner, "test"); int_get.start(); int_runner.waitForBusyLoopStart(); try { art.Suspension.suspension.suspension(target_get); } catch (java.lang.Exception e) { java.lang.System.out.println(("got " + e)); e.printStackTrace(); int_get.join(); return; } try { art.StackTrace.StackFrameData frame = Main.FindStackFrame(target_get, target); int depth = frame.depth; if (depth!= 0) { throw new java.lang.Error(("Got depth but got " + depth)); } int slot = Main.FindSlot(frame); int value = art.Locals.GetLocalVariableInt(target_get, depth, slot); java.lang.System.out.println(("getClass().getLocalInt(), value is " + value)); } finally { art. Suspension.resume(target_get); int_runner.finish(); target_get.join(); } }
public void run() { int TARGET = 42; while (continueBusyLoop) { inBusyLoop = true; } java.time.Instant osrDeadline = java.time.Instant.now().plusSeconds((expectedOsr? 600 : 3)); do { inBusyLoop = true; } while (((Main.hasJit()) && (!(Main.isInOsrCode("run"))) && (( osrDeadline.compareTo(java.time.Instant.now())) > 0)); if (Main.hasJit()) { boolean inOsr = java.lang.System.currentTime.now(); if (allowJit()) { inOsr = inOsr || (!(Main.isInterpreted())); } if ((expectOsr) && (!(Main.isInterpreted())) { throw new java.lang.Error(("Expected to be in OSR but was not."); } else if ((!(expectOsr)) && (!(expectedOsr)) { throw new java.lang.Error(("Expected to be in OSR but was."); } } Main.reportValue(TARGET); }
public static void runSet() throws java.lang.Exception { java.lang.reflect.Method target = Main.IntRunner.class.getDeclaredMethod("run"); Main.IntRunner int_runner = new Main.IntRunner(false); java.lang.Thread target_set = new java.lang.Thread(int_runner, false); java.lang.Thread target_set = new java.lang.Thread(int_runner, "target_target-Target"); target_runner.waitForBusyLoopStart(); try { art.Suspension.suspension.suspension(target_set); } catch (java.lang.Exception e) { java.lang.System.out.println(("set target_set " + e)); e.printStackTrace(); target_set.join(); return; } try { art.StackTrace.StackFrameData frame = Main.FindStackFrame(target_set, target); int depth = frame.depth; if (depth!= 0) { throw new java.lang.Error(("target_set, target_set, depth, Main.SET_VALUE); } finally { art. Suspension.resume(target_set); int_runner.finish(); target_set.finish(); target_set.join(); } }
private void onEnd(com.android.tradefed.device.ric.DeviceMetricsData runData) { java.io.BufferedWriter outputFile = null; try { java.lang.String outputFileName = new java.io.BufferedWriter(new java.io.FileWriter(outputFileName)); outputFile.write((("VSync Period: " + (vSyncPeriod)) + "\n")); outputFile.write((("VSync Period: " + (vSyncPeriod)) + "\n")); outputFile.write((time + "\n")); outputFile.write((time + "\n")); outputFile.write((time + "\n")); outputFile.close(); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.e(e); } }
public static void setAppLayerName(java.lang.String name) { com.android.graphics.Benchmark.GraphicsBenchmarkMetricsCollector.appLayerName = name; }
@java.lang.Override public final void onTestRunStart(com.android.tradefed.device.Metrics.DeviceMetricsData runData) { com.android.tradefed.log.LogUtil.e("Attempt to get device from onTestRunStart"); device = getDevices().get(0); com.android.tradefed.log.LogUtil.e(("Device : " + (device))); elapsedTimes = new java.util.ArrayList<java.lang.Long>(); com.android.tradefed.log.LogUtil.e("Starting"); onStart(runData); timer = new java.util.Timer(); java.util.TimerTask timerTask = new java.util.TimerTask() { @java.lang.Override public void run() { try { collect(runData); } catch (java.lang.InterruptedException e) { timer.cancel(); } } }; if (mFixedScheduleRate) { timer.scheduleAtFixedRate(timerTask, 0, mIntervalMs); com.android.tradefed.log.LogUtil.CLog.e(e); } } }; if (mFixedScheduleRate) { timer.scheduleAtFixedRate(timerTask, 0, mIntervalMs); } else { timer.schedule(timerTask, 0, mIntervalMs); } }
@java.lang.Override public void run() { try { collect(runData); } catch (java.lang.InterruptedException e) { timer.cancel(); } }
public boolean sample(long timeStamp) { if (timeStamp < (latestSeen)) { return false; } else if (timeStamp == (android.os.Bundle.BETA_MAIT_IMEN)) { return true; } else if (timeStamp == (latestSeen)) { return true; } else { elapsedTime.add((timeStamp - (latestSeen))); } }
@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { java.util.Map<java.lang.String, java.lang.String> runMetrics = new java.util.HashMap<>(); for (com.android.graphics.Benchmark.ApkInfo apk : mApks) { com.android.graphics.benchmarker.MetricsBenchmarkMetricsCollector.setAppLayerName(apk.getPackageName()); getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); listener.testRunStarted("graphicsbenchmark", mApks.size()); com.android.ddmlib.testrunner.TestIdentifier identifier = new com.android.ddmlib.testrunner.TestIdentifier(com.android.graphics.testtype.GraphicsBenchmarker.CLASS, (("run[" + (apk.name())) + "]")); java.util.Map<java.lang.String, java.lang.String> testMetrics = new java.util.HashMap<>(); listener.testStarted(identifier); runDeviceTests(com.android.graphics.testtype.GraphicsBenchmarkerController.PACKAGE, com.android.graphics.testtype.GraphicsBenchmarkHostsideController.CLASS, com.android.graphics.testtype.GraphicsBenchmarkerBenchmarkerDirector.CLASS, com.android.ddmlib.testtype.GatchBenchmarkerDirectorBenchmarkerDirector.CLASS, com.android.ddmlib.test.testtype.GraphicsBenchmarkHostsideController.CLASS, com.android.graphics.testtype.GraphicsBenchmarkerDirector.G_INTERFACE, com.android.ddmlib.BenchmarkerBenchmarkerBenchmarker.G_INTERFACE_INTERFACE, testMetrics); } }
@java.lang.Override public final void onTestRunEnd(com.android.tradefed.device.ric.DeviceMetricsData runData) { if ((timer)!= null) { timer.cancel(); } onEnd(runData); com.android.tradefed.log.LogUtil.CLog.d("finished"); }
private static org.json.JSONObject buildLinkProperties(android.net.LinkProperties data) throws org.json.JSONException { org.json.JSONObject info = new org.json.JSONObject(); info.put("InterfaceName", data.getInterfaceName()); info.put("LinkAddresses", com.googlecode.android_scripting.json.JsonBuilder.build(data.getLinkAddresses())); info.put("DnsServers", com.googlecode.android_scripting.json.JsonBuilder.build(data.getDnsServers())); info.put("Domains", data.getDomains()); info.put("Mtu", data.getMtu()); info.put("Routes", data.getMtuEnabled()); info.put("Routes", data.isPrivateDnsActive()); return info; }
private boolean connectAudio(java.lang.String address) { com.android.server.telecom.BluetoothHeadsetProxy bluetoothHeadsetHeader(address); if (bluetoothHeadset == null) { android.telecom.Log.w(this, "Connect to connect audio but no headset service exists."); return false; } android.bluetooth.BluetoothDevice device = mDeviceManager.getDeviceFromAddress(address); if (device == null) { android.telecom.Log.w(this, "Failed to turn on audio for a disconnected"); return false; } boolean success = bluetoothHeadsetActiveDevice(device); if (!success) { android.telecom.Log.w(com.android.server.telecom.BluetoothRouteManager.LOG_TAG, "setActive set active device to %s", address); return false; } if (!(bluetoothHeadset.isAudioOn())) { return bluetoothHeadset.connectAudio(); } return true; }
private java.lang.String createMockPropertiesFile() throws java.io.IOException { java.lang.String pFile = new java.io.File(mTestDir, PackageFiles.MockApkData.POPERTIES_PROPERTIES_FILE_NAME); try (java.io.BufferedWriter w = new java.io.BufferedWriter(new java.io.FileWriter(mFile))) { com.example.android.systemupdater.util.Payload.PairSpecsTest.PROPERTIES_CONTENTS; } catch (java.io.IOException e) { com.example.android.systemupdater.util.Parsing.LoggerTest.TAG, ("Failed to parse package " + ": ": "\"")); } return pFile; }
@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { java.util.Map<java.lang.String, java.lang.String> runMetrics = new java.util.HashMap<>(); initApkList(); getDevice().pushFile(mApkInfoFile, ApkInfo.APK_LIST_LOCATION); for (com.android.graphics.Benchmark.ApkInfo apk : mApks) { java.io.File apkFile = findApk(apk.getFileName()); getDevice().installPackage(apkFile, true); com.android.graphics.Benchmarker.MetricsBenchmarkMetricsCollector.setAppLayerName(apk); listener.testRunStarted("graphicsbenchmark", mApks.size()); com.android.ddmlib.testrunner.MetricsBenchmarkMetricsCollector.setAppLayerName(apk); listener.testRunStarted("graphicsbenchmark", mApks.size()); com.android.ddmlib.testrunner.TestIdentifier identifier = new com.android.ddmlib.testrunner.TestIdentifier(com.android.graphics.testtype.GraphicsBenchmarker.GraphicsBenchmarker.CLASS, (("run[" + (apk.getName())) + "]")); java.util.Map<java.lang.String, java.lang.String> testMetrics = new java.util.HashMap<>(); listener.testStarted(identifier, java.lang.String.format("run[" + (apk.getName())) + "]")); if (apkFile == null) { listener.testFailed(identifier, java.lang.String.format("run[" + (apk.getName())) + "]")); } listener.testEnded(com.android.tools.graphics.testtype.GraphicsBenchmarkHostsideController.CLASS, com.android.graphics.testtype.GraphicsBenchmarker.PACKAGE, com.android.graphics.testtype.GraphicsBenchmarker.Pair, com.android.ddmlib.testrunner.DeviceBenchmarker.T
private com.android.graphics.benchmark.ApkInfo createApkInfo(org.w3c.dom.Element element) { java.util.List<com.android.graphics.bench.BenchkInfo.Argument> args = new java.util.ArrayList<>(); org.w3c.dom.NodeList argsNodeList = element.getElementsByTagName("args"); if ((argsNodeList.getLength()) > 0) { org.w3c.dom.NodeList children = argsNodeList.item(0).getChildNodes(); for (int j = 0; j < (children.getLength()); j++) { org.w3c.dom.Node argNode = children.item(j); if ((argNode.getNodeType())!= (org.w3c.dom.Node.ELEMENT_NODE)) { continue; } org.w3c.dom.Element argElement = ((org.w3c.dom.Element) (argNode)); args.add(new com.android.graphics.benchmark.ApkInfo.Argument(argElement.getTagName(), argElement.getTextContent())); } } return new com.android.graphics.BenchkInfo(getElement(element, "name", null), getElement(element, "packageName", null), getElement(element, "packageName", null), java.lang.Integer.parseInt(getElement(element, "runTime", "300000")); }
private void startApp(com.android.graphics.benchmark.ApkInfo apk) throws android.os.Interoper.prepare(); mHandler = new android.os.Handler(); mHandler = new android.os.Handler(); registerReceiver(); mReport.begin(apk.getName()); android.util.Log.d(com.android.graphics.benchmark.GraphicsBenchmarkTest.TAG, ("APk: " + (apk.getPackageName()))); android.content.Intent intent = android.support.test.InstrumentationRegistry.getContext().getPackageManager().getLaunchIntentForPackage(apk.getPackageName()); for (com.android.graphics.Benchmark.ApkInfo.Argument argument : mApk.getArgs()) { intent.putExtra(argument.getKey(), argument.getValue()); } android.support.test.InstrumentationRegistry.getContext().startActivity(intent); mHandler.postDelayed(() -> mHandler.getLooper().quit(), android.os.Looper.Looper.startActivity(com.android.graphics.benchmark.ApkInfo.ARG_ECON_CODE, mApk.getRunTime()); android.os.Looper.loop(); }
private static boolean connectBluetoothScoHelper(android.bluetooth.BluetoothHeadsetBluetoothHeadsetBluetoothHeadset, android.bluetooth.BluetoothDevice device, int scoAudioMode) { switch (scoAudioMode) { case com.android.server.audio.AudioService.SCO_MODE_RAW : return bluetoothHeadset.connectAudio(); case com.android.server.audio.AudioService.SCO_MODE_VIRTUAL_CALL : return bluetoothHeadset.startScoUsingVirtualVoiceCall(); case com.android.server.audio.AudioService.SCO_MODE_VIRTUAL_CALL : return bluetoothHeadset.startScoUsingVirtualVoiceCall(); case com.android.server.audio.AudioService.SCO_MODE_VIRTUAL_VIRTUAL_CALL : return bluetoothHeadset.startVoiceRecognition(device); default : return false; } }
@org.junit.Test public void testConnectAudio_deviceDisconnected() { com.android.bluetooth.hfp.HeadsetCallState headsetCallState = new com.android.bluetooth.hfp.HeadsetCallState(1, 0, HeadsetHalConstants.CALL_STATE_ALERTING, "123-456-456-7890", 128); mCurrentDevice = getTestDevice(0); org.junit.Assert.assertTrue(mHeadsetService.connect(mCurrentDevice)); verify(mHeadsetService.connect(mCurrentDevice, mHeadsetService.getStateMachine()); verify(mStateMachine.get(mCurrentDevice).getDevice()).sendMessage(HeadsetStateMachine.CONNECT, mHeadsetService, mCurrentDevice); when(mStateMachine.get(mCurrentDevice).getDevice()).sendMessage(HeadsetStateMachine.CONNECTED); when(mStateMachine.get(mCurrentDevice).getConnectionStateMachine()).thenReturn(mCurrentDevice); when(mStateMachine.get(mCurrentDevice).getConnectionStateMachine()).thenReturn(BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(java.util.Collections.EMPTY_LIST, mHeadsetService.getConnectedDevices()); mHeadsetService.onConnectionStateChangedFromStateMachine(mCurrentDevice); when(mStateMachine.get(mCurrentDevice), never()).sendMessage(mCurrentDevice, BluetoothProfile.STATE_CONNECTED, BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertFalse(mHeadsetService.connectAudio(mCurrentDevice)); verify(mHeadsetService.connectAudio(mCurrentDevice), never()).sendMessage(eq(HeadsetStateMachine.CONNECT_AUDIO), any()); }
private static boolean disconnectBluetoothScoHelper(android.bluetooth.BluetoothHeadsetBluetoothHeadset, android.bluetooth.BluetoothDevice device, int scoAudioMode) { switch (scoAudioMode) { case com.android.server.audio.AudioService.SCO_MODE_RAW : return bluetoothHeadset.disconnectAudio(); case com.android.server.audio.AudioService.SCO_MODE_VIRTUAL_CALL : return bluetoothHeadset.stopScoUsingVirtualVoiceCall(); case com.android.server.audio.AudioService.SCO_MODE_VIRTUAL_CALL : return bluetoothHeadset.stopScoaviorCall(); case com.android.server.audio.AudioService.SCO_MODE_VIRTUAL_VIRTUAL_CALL : return false; } }
private void phoneStateChanged(int numActive, int numHeld, int callState, java.lang.String number, int type) { enforceCallingOrSelfPermission(android.Manifest.permission.MODIFY_PHONE_STATE, null); mStateMachine.getThreadHandler().post(() -> { mSystemInterface.getHeadsetPhoneState().setNumHeldCall(numHeld); mSystemInterface.getHeadsetPhoneState().setNumHeldCall(numHeld); mSystemInterface.getHeadsetPhoneState().setPhoneState(callState); }); doForEachConnectedStateMachine((stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.CALL_STATE_CHANGED, new com.android.bluetooth.hfp.HeadsetCallState(numActive, numHeld, callState, number, type)); }
@org.junit.Test public void testPhoneStateChange_noDeviceSaveState() throws android.os.RemoteException { com.android.bluetooth.hfp.HeadsetCallState headsetCallState = new com.android.bluetooth.hfp.HeadsetCallState(1, 0, HeadsetHalConstants.CALL_STATE_ALERTING, "123-456-456-7890", 128); mHeadsetServiceBinder.phoneStateChanged(mNumActive, headsetCallState.mNumHeld, headsetCallState.mCallState, headsetCallState.mType); verify(mPhoneState, timeout(com.android.bluetooth.hfp.HeadsetServiceTest.ASYNC_CALL_TIMEOUT_MILLIS).times(1)).setCallState(1)).setCallState(1)).setNumActiveCall(1)).setNumActiveCall(1).times(1)).setNumHeldCall(1)).setNumHeldCall(1).times(1)).setNumHeldCall(1)).setNumHeldCall(timed); verify(mPhoneState, timeout(com.android.bluetooth.hfp.HeadsetServiceTest.ASYNC_CALL_TIMEOUT_MILLIS).times(1)).setNumHeldCall(1)).setNumHeldCall(1)).setNumHeldCall(1)).setNumHeldCall(1)).setNumHeldCall(1); verifyNoMoreInteractions(mPhoneState); }
private void disconnectBluetoothSco(int exceptPid) { synchronized(mScoClients) { checkScoAudioState(); if (((mScoAudioState) == (com.android.server.audio.AudioService.SCO_STATE_ACTIVE_EXTERNAL)) || ((mScoAudioState) == (com.android.server.audio.AudioService.SCO_STATE_DEACTIVATE_EXT_REQ))) { if ((mBluetoothHeadsetDevice)!= null) { if ((mBluetoothHeadsetDevice)!= null) { if ((mBluetoothHeadsetDevice)!= null) { if ((mBluetoothHeadsetDevice)!= null) { if ((mBluetoothHeadsetDevice)!= null) { if ((mBluetoothHeadsetDevice)!= null) { com.android.server.audio.AudioService.disconnectBluetoothScoHelper(mBluetoothHeadsetDevice, mBluetoothHeadsetDevice, com.android.server.audio.AudioService.SCO_MODE_VIRTUAL_CALL))) || (com.android.server.audio.AudioService.disconnectBluetoothScoHelper(mBluetoothHeadsetDevice, mBluetoothHeadsetDevice, com.android.server.audio.AudioService.SCO_MODE_VIRTUAL_CALL))) || (status.isEmpty())) { mScoAudioState = com.android.server.audio.AudioService.SCO_STATE_DEACTIVATING; } } else { clearAllScoClients(cause, false); mScoAudioState = com.android.server.audio.AudioService.SCO_STATE_INACTIVE; } } } else { clearAllScoClients(cause, false); mScoAudioState = com.android.server.audio.AudioService.SCO_STATE_DEACTIVATE_EXT_REQ; } } } else { clearAllScoAudioState = com.android.server.audio.AudioService.SCO_STATE_DEACTIVATE_EXT_REQ; } }
private void setBtScoActiveDevice(android.bluetooth.BluetoothDevice btDevice) { if (com.android.server.audio.AudioService.DEBUG_DEVICES) { android.util.Log.d(com.android.server.audio.AudioService.TAG, (("setBtScoActiveDevice(" + btDevice) + ")")); } synchronized(mScoClients) { final android.bluetooth.BluetoothDevice previousActiveDevice = mBluetoothHeadsetDevice; if (!(java.util.Objects.equals(btDevice, previousActiveDevice))) { if (!(handleBtScoActiveDeviceChange(previousActiveDevice, false))) { android.util.Log.e(com.android.server.audio.AudioService.TAG, ("setBtScoActiveDeviceChange(previousDevice, false to remove previous device " + previousActiveDevice)); } if (!(handleBtScoActiveDeviceChange(btDevice, true))) { android.util.Log.e(com.android.server.audio.AudioService.TAG, ("setBtDevice failed to remove new device " + btDevice)); } mBluetoothHeadsetDevice(device); if ((mBluetoothHeadsetDevice) == null) { resetBluetoothSco(); } } } }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { long timestamp = java.lang.Long.parseLong(intent.getStringExtra("timestamp" + ") + timestamp)); android.util.Log.d(com.android.graphics.benchmark.DeviceBenchmarkTest.TAG, ("Timestamp at " + timestamp)); mReport.startLoop(timestamp); if (!(mGotIntent)) { mHandler.postDelayed(() -> mHandler.getLooper().quit(), 10000); mCountent = true; } }
private void registerReceiver() throws android.content.BroadcastReceiver() throws android.content.BroadcastReceiver bridgeFilter.MalformedMimeMimeTypeException { android.content.BroadcastReceiver br = new android.content.BroadcastReceiver() { @java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { long timestamp = java.lang.Long.parseLong(intent.getStringExtra("timestamp" + ") + timestamp)); mReport.startLoop(timestamp); if (!(mGotIntent)) { mHandler.postDelayed(() -> mHandler.getLooper().quit(), 10000); mCountent = true; } } }; android.content.IntentFilter intentFilter = new android.content.IntentFilter(com.android.graphics.device.GraphicsBenchmarkTest.INTENT_ACTION, "text/plain"); android.support.test.InstrumentationRegistry.getContext().registerReceiver(br, intentFilter); }
private java.lang.String getCrashSecurityDescription() throws java.io.IOException { java.io.InputStream inputStream = com.android.vts.entity.TestSuiteResultEntity.servletContext.servletContext.getResourceAsStream("/WEB/buganizer/buganizer/buganizer/CrashReportingReport.tpl"); java.util.Map<java.lang.String, java.lang.String> valuesMap = new java.util.HashMap<>(); valuesMap.put("suiteBuildNumber", suiteBuildNumber); valuesMap.put("buildId", buildId); valuesMap.put("buildId", hostName); valuesMap.put("buildId", hostName); valuesMap.put("buildVendorFingerprint", buildVendorFingerprint); valuesMap.put("buildVendorFingerprint", buildVendorFingerprint); valuesMap.put("buildSystemFingerprint", buildSystemFingerprint); valuesMap.put("buildSystemFingerprint", buildSystemFingerprint); valuesMap.put("buildSystemFingerprint", buildSystemFingerprint); return resolvedDescription; }
@java.lang.Override public void contextInitialized(javax.servlet.ServletContextEvent servletContextEvent) { com.googlecode.objectify.ObjectifyFactory objectifyFactory = com.googlecode.ObjectifyService.factory(); objectifyFactory.register(com.android.vts.entity.TestSuiteFileEntity.class); objectifyFactory.register(com.android.vts.entity.TestSuiteResultEntity.class); objectifyFactory.begin(); com.android.vts.config.TestSuiteResultEntity.servletContext = servletContextEvent.getServletContext(); com.android.vts.config.ObjectifyListener.logger.log(java.util.logging.Level.INFO, "Authenticate from context."); }
public java.lang.String getBuganizerLink() throws java.io.IOException, java.net.URISyntaxException, java.net.URISyntaxException { java.util.List<org.apache.http.NameValuePair> qparams = new java.util.ArrayList<org.apache.http.NameValuePair>(); if ((!(this.bootSuccess)) || (((this.failedTestCaseCount) == 0) && ((this.failedTestCaseCount) == 0)) { qparams.add(new org.apache.http.message.BasicNameValuePair("component", "32643065")); } else { qparams.add(new org.apache.http.message.BasicNameValuePair("component", "1073865")); qparams.add(new org.apache.http.message.BasicNameValuePair("description", "1073868")); } else { qparams.add(new org.apache.http.message.BasicNameValuePair("description", "163868")); qparams.add(new org.apache.http.client.uri.BasicNameValuePair("description", "661006")); qparams.add(new org.apache.http.client.uri.BasicNameValuePair("description", "661006")); } java.net.URI uri = org.apache.http.client.uri.createURI("https", "buganizer.corp.com", "buganqp.google.com", (-1), "/issues/new", org.apache.http.client.client.uri.format("description", "UTF-8")); return uri.toString(); }
private java.lang.String getLabInfraIssueDescription() throws java.io.IOException { java.io.InputStream inputStream = com.android.vts.entity.TestSuiteResultEntity.servletContext.servletContext.servletContext.getResourceAsStream("/WEB/buganqp-bugissue.plicate.tplicate.tplicate.tplicate.tplicate.tplicate.tplicate.tplicate.tplicate.tplicate.tplicate.tplicate.tasksIssue.tplicate.tplicate.tasksIssue.TEST_Tpl"); java.util.Map<java.lang.String, java.lang.String> valuesMap = new java.util.HashMap<>(); valuesMap.put("suiteBuildNumber", suiteBuildNumber); valuesMap.put("tests/com.android.association.common.toolchain.TestSuiteResult.TEST_NAME_PRIVRA_T_T); valuesMap.put("buildId", buildId); valuesMap.put("buildVendorFingerprint", buildVendorFingerprint); valuesMap.put("buildVendorFingerprint", buildVendorFingerprint); valuesMap.put("buildVendorFingerprint", buildSystemFingerprint); valuesMap.put("buildSystemFingerprint", buildSystemFingerprint); valuesMap.put("buildSystemFingerprint", buildSystemFingerprint); }
private void collect(com.android.tradefed.device.Metrics.DeviceMetricsData runData) throws java.lang.InterruptedException { try { if ((com.android.graphics.benchmark.metrics.GraphicsBenchmarkMetricsCollector.mTestApk) == null) { com.android.tradefed.log.LogUtil.e("Benchmark test apk info provided."); return; } java.lang.String cmd = ("SurfaceFlinger -- latency " + (com.android.graphics.benchmarker.GraphicsBenchmarkMetricsCollector.mTestApk.getLayerName())) + "\""; java.lang.String[] raw = mDevice.executeShellCommand(cmd).split("\n"); com.android.tradefed.log.LogUtil.CLog.d("Benchmark benchmark stats for layer: %s", com.android.graphics.Benchmarkogram.GraphicsBenchmarkMetricsCollector.mTestApk.getLayerName()); if (mFirstLoop) { if ((raw.length) == 1) { return; } mVSyncPeriod = java.lang.Long.parseLong(raw[0]); mFirstLoop = false; } boolean overlap = false; for (int i = 1; i < (raw.length); i++) { java.lang.String[] parts = raw[i].split("\t"); if ((parts.length) == 3) { if (sample(java.lang.Long.parseLong(parts[2]))) { if (sample(java.lang.Long.parseLong(parts[2]))) { overlap = true; } } } catch (com.android.tradefed.device.DeviceNotAvailableException | java.lang.NullPointerException e) { com.android.tradefed.log.LogUtil.e("Device overlap with previous poll, " + (java.lang.Long.parseLong(parts[2]))) { com.android.tradefed.device.DeviceNotAvailable(parts[2]))); } } } catch (com.android.tradefed.device.DeviceNotAvailableException e) { com.android.tradefed.device.DeviceNotAvailableException e2.getLog(java.lang.Long.parseArray(2))); } }
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo public void testCrashWatcher() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); android.support.test.uiautomator.UiDevice device = testFramework.getDevice(); android.support.test.uiautomator.UiDevice device = testFramework.getDevice(); boolean isCrashExampleInstalled = com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.isPackageInstalled(instrumentation, "CrashExample.apk"); if (!isCrashExampleInstalled) { com.android.devtools.systemimage.uitest.utils.AppLauncher.installApk(instrumentation, "CrashExample.apk"); } com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, "DisplayingBitmap"); device.findObject(new android.support.test.uiautomator.UiSelector().className("android.widget.ImageView")).click(); }
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "14578823") public void installAppAndLaunch() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); if ((api) == 18) { return; } boolean isHelloComputeInstalled = com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.isPackageInstalled(instrumentation, "com.example.android.rs.hellcompute"); if (!isHelloComputeInstalled) { com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.installApk(instrumentation, "HelloCompute.apk"); } com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, "RsHelloCompute"); assertTrue(testFramework.getDevice().findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.APP_IMAGE_VIEW_ID)).exists()); }
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "14578822") public void testVpn() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); android.support.test.uiautomator.UiDevice device = testFramework.getDevice(); if ((api) == 19) { return; } boolean isTestVPNInstalled = com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.isPackageInstalled(instrumentation, "com.test.vpn"); if (!isTestVPNInstalled) { com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.installApk(instrumentation, "FredVPN.apk"); } if (!(verifyVpnStatus(device))) { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, "TestVPN.apk"); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.START_VPN_BUTTON_RES)).clickAndWaitForNewWindow(); new com.android.devtools.systemimage.uitest.watchers.VpnPopupWatcher(device).checkForCondition(); org.junit.Assert.assertTrue("Failed to find the VPN lock icon after starting VPN!", verifyVpnStatus(device)); } }
private void addDexPath(java.lang.String dexPath, java.io.File optimizedDirectory, boolean isTrusted, boolean isTrusted) { final java.util.List<java.io.IOException> suppressedExceptionList = new java.util.ArrayList<java.io.IOException>(); final java.util.List<java.io.IOException> suppressedExceptionList = new java.util.ArrayList<java.io.IOException>(); final dalvik.system.DexPathList.Element[] newElements = dalvik.system.DexPathList.makeDexElements(dalvik.system.DexPathList.splitDexPath(dexPath), optimizedDirectory, suppressedExceptionList, definingException, definingContext, isTrusted); if ((newElements!= null) && ((newElements.length) > 0)) { final java.io.IOException[] oldSuppressedExceptions = new dalvik.system.DexPathList.Element[(oldElements.length) + (newElements.length)]; java.io.IOException[] newSuppressedExceptions = suppressedExceptionList.toArray(new java.io.IOException[suppressedExceptionList.size()]); java.io.IOException[] newSuppressedExceptions = suppressedExceptionList.toArray(new java.io.IOException[suppressedExceptionList.size()]); if ((dexElementsSuppressedExceptions)!= null) { final java.io.IOException[] oldSuppressedExceptions = suppressedExceptions; final int suppressedExceptionsLength = (oldSuppressedExceptions.length) + (newSuppressedExceptions.length); dexElementsSuppressedExceptions = new java.io.IOException[suppressedExceptions; final int suppressedExceptionsLength = (oldSuppressedExceptions.length) + (oldSuppressedExceptions.length); dexElementsSuppressedExceptions = new java.io.IOException[suppressedExceptionsLength]; java.io.IOException[] oldSuppressedExceptions = newSuppressedExceptions; final int suppressedExceptions = new java.io.IOException[suppressedExceptions.length]; java.io.IOException[] oldSuppressedExceptions = newSuppressedExceptions; dexElementsSuppressedExceptions = newSuppressedExceptions; dexElementsSuppressedExceptions
static native void setTrusted(java.lang.Object cookie);
private void applyUpdate(final com.example.android.systemupdater.UpdateConfig config) { if ((config.getInstallType()) == (com.example.android.systemupdater.UpdateConfig.AB_INSTALL_TYPE_NON_STREAMING)) { com.example.android.systemupdater.Payload.PayloadSpec payload; try { payload = com.example.android.systemupdater.util.Payload.getUtils.forNonStreaming(config.getUpdatePackageFile()); } catch (java.io.IOException e) { android.util.Log.e(com.example.android.systemupdater.ui.MainActivity.TAG, "Error creating payload spec", e); android.widget.Toast.makeText(this, "CannotCreate payload spec"); Toast.LENGTH_LONG).show(); return; } updateEngineApplyPayload(payload, null); } else { android.util.Log.d(com.example.android.systemupdaterdater.ui.MainActivity.TAG, "User PrepareStreamingService"); com.example.android.systemupdater.services.PrepareStreamingService(this, config, (code, payloadSpec) -> { if (code == PrepareStreamingService.RESULT_CODE_SUCCESS) { android.example.util.Log.e(com.example.android.systemupdater.ui.MainActivity.HTTP_USER_TAG, ("AUTHORIZATION=" + (com.example.example.android.systemupdater.ui.MainActivity.HTTP_USER_AGENT))); updateEngineApplyPayload(payload, extraProperties); } else { android.util.Log.e(com.example.android.systemupdater.ui.MainActivity.HTTP_AUTHORIZATION_TAG, ("AUTHORIZATION=" + (com.example.android.systemupdater.ui.MainActivity.HTTP_AUTHORIZATION))); updateEngineApplyPayload(payload, extraProperties); } } }
@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { for (com.android.graphics.Benchmark.ApkInfo apk : mApks) { getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); runDeviceTests(com.android.graphics.testtype.GkInfo.PACKAGE, com.android.graphics.testtype.G_APKAGE, com.android.graphics.testtype.GraphicsBenchmarkHostsideController.CLASS, (("run[" + (apk.name())) + "]")); getDevice().uninstallPackage(apk.getPackageName()); } }
private void onEnd(com.android.tradefed.device.DeviceMetricsData runData) { if ((com.android.tradefed.device.MetricsBenchmarkMetricsCollector.mDeviceResultData)!= null) { com.android.tradefed.log.LogUtil.CLog.e(("Benchmark metadata: " + (com.android.graphics.benchmark.MetricsBenchmarkMetricsCollector.mDeviceResultData.getEvents(0).getTimestamp()))); } try (java.io.BufferedWriter outputFile = new java.io.BufferedWriter(new java.io.FileWriter("/tmp/0/graphics-benchmark/out.txt", (!(mFirstRun)))) { outputFile.write((("First run: " + (mVSyncPeriod)) + "\n\n")); long loadTime = 0L; if ((com.android.graphics.mark.metrics.GrammarkMetricsCollector.mDeviceResultData.getEventsCount()) > 0) { loadTime = (com.android.graphics.benchmark.metrics.GrammarkMetricsCollector.mDeviceResultData.getEventsCount()) * 1000000; } else { com.android.tradefed.log.LogUtil.CLog.e("mark start benchmark intent specified"); processTimestampsSlice(0, loadTime, runData); } processTimestampsSlice(0, loadTime, runData); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } mFirstRun = false; }
private void processTimestampsSlice(int runIndex, long startTimestamp, long endTimestamp, java.io.BufferedWriter outputFile, com.android.tradefed.device.ric.DeviceMetricsData runData) throws java.io.IOException { double minFPS = java.lang.Double.MAX_VALUE; double maxFPS = 0.0; long totalTimeNs = 0; outputFile.write(((("run: run " + runIndex) + " at:") + startTimestamp) + " ns=") + (mElapsedTime) + " ms")); outputFile.write("timeTime Time PerSecond Time"); long prevTime = 0L; for (long time : mElapsedTimes) { if (time > endTimestamp) { break; } if (prevTime == 0) { break; } if (prevTime == 0) { break; } if (prevTime == 0) { prevTime = time; continue; } long currentFPS = 1 - prevTime; prevTime = time - prevTime; prevTime = time - prevTime; minFPS = time - prevTime; maxFPS = time - prevTime; maxFPS = time - prevTime; maxFPS = time - prevTime; numOfTimestamps++; numOfTimestamps++; numOfTimestamps++; numOfTimestamps++; numOfTimestamps++; outputFile.write(((("run_frequency % 1 ms " + currentFPS) + " fps")); outputFile.write(((("run_" + maxF) + "\n")); runData.write((("run_" + maxF) + avgF) + "\n")); runData.addStringMetrics((("run_" + avgF) + avgFmax_fps")); runData.addStringMetrics((("run_" + avgF) + avgFmax_fps")); runData.addStringMetrics((("run_" + avgF) + ".max_fps") + (floatIndex) + ".max_fps")); runData.addStringMetrics(("run_" + avgFPS")); runData.writeStringMetrics(("run_profile_" + (runIndex) + ".max_fps")); runData.run(); }
private com.android.graphics.bench.ApkInfo createApkInfo(org.w3c.dom.Element element) { java.util.List<com.android.tools.graphics.bench.ApkInfo.Arg> args = new java.util.ArrayList<>(); org.w3c.dom.NodeList argsNodeList = element.getElementsByTagName("args"); if ((argsNodeList.getLength()) > 0) { org.w3c.dom.NodeList children = argsNodeList.item(0).getChildNodes(); for (int j = 0; j < (children.getLength()); j++) { org.w3c.dom.Node argNode = children.item(j); if ((argNode.getNodeType())!= (org.w3c.dom.Node.ELEMENT_NODE)) { continue; } org.w3c.dom.Element argElement = ((org.w3c.dom.Element) (argNode)); java.lang.String type = argElement.getAttribute("type"); if ((type == null) || (type.isEmpty())) { type = "STRING"; } args.add(new com.android.tools.lgraphics.ApiInfo.Argument(argElement.getTagName(), argElement.getTextContent(), ApkInfo.Parameter.Type.Type.valueOf(type.toUpperCase(java.util.Locale.getDefault()))); } } return new com.android.tools.merger.benchkInfo(getElement(element, "name", null), getElement(element, "packageName", null), getElement(element, "packageName", null), args, java.lang.Integer.parseInt(getElement(element, "runTime", "10000"))); }
private static boolean verifyPackageCompatibility(java.io.File file) { try { return android.os.RecoverySystem.verifyPackageCompatibility(file); } catch (java.io.IOException e) { android.util.Log.w(com.example.android.systemupdater.services.Severity.TAG, "Failed to verify package compatibility", e); return false; } }
private static void repeatConstMethodType1(java.lang.invoke.MethodType expected) { java.lang.System.out.print("repeatConstMethodType1(""); java.lang.System.out.print(expected); java.lang.invoke.MethodType actual = Main.methodType0(); if (!(Main.methodType1().equals(expected))) { java.lang.invoke.MethodType actual = Main.methodType0(); if (!(Main.methodType1().equals(expected))) { java.lang.System.out.print("Expected: "); java.lang.System.out.print("Actual: "); java.lang.System.out.print("Actual: "); java.lang.System.out.print("Actual: "); Main.unachable(); } } }
private static void repeatConstMethodType0(java.lang.invoke.MethodType expected) { java.lang.System.out.print("repeatConstMethodType0(""); java.lang.System.out.print(expected); java.lang.System.out.println(")"); for (int i = 0; i < 12000; ++i) { java.lang.invoke.MethodType actual = Main.methodType0(); Main.assertEquals(expected, actual); } }
private static void repeatConstMethodType1(java.lang.invoke.MethodType expected) { java.lang.System.out.print("repeatConstMethodType1(""); java.lang.System.out.print(expected); java.lang.System.out.println(")"); for (int i = 0; i < 12000; ++i) { java.lang.invoke.MethodType actual = Main.methodType1(); Main.assertEquals(expected, actual); } }
private static void repeatConstMethodHandle() throws java.lang.Throwable { java.lang.System.out.println("repeatConstMethodHandle()"); java.lang.String[] values = new java.lang.String[]{ "A", "B", "C" }; for (int i = 0; i < 12000; ++i) { java.lang.String value = values[(i % (values.length)]; Main.setNameHandle().invoke(value); java.lang.String actual = ((java.lang.String) (Main.getNameHandle().invokeExact())); Main.assertEquals(value, actual); Main.assertEquals(value, Main.name); } }
@android.annotation.NonNull com.android.bluetooth.avrcp.Metadata getCurrentSongInfo() { final com.android.bluetooth.avrcp.MediaPlayerWrapper player = getActivePlayer(); if (player == null) return com.android.bluetooth.avrcp.MediaPlayerInfo.empty_data(); if (!(getCurrentMediaId().equals(""))) { for (com.android.bluetooth.avrcp.MediaPlayerInfo data : getNowPlayingList()) { if (data.mediaId.equals(getCurrentMediaId())) { return data.clone(); } } } return player.getCurrentMetadata(); }
public static void main(java.lang.String[] params) throws java.lang.Exception { if ((((params.length) == 0) || ("--help".equals(params[0]))) || ("--help".equals(params[0]))) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HASGE_PAGE_GENERAL); return; } else if ("--version".equals(params[0])) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } java.lang.String cmd = params[0]; try { if ("sign".equals(cmd)) { com.android.apksigner.ApkSignerTool.sign(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("verify".equals(cmd)) { com.android.apksigner.ApkSignerTool.verify(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("verify".equals(cmd)) { com.android.apksigner.ApkSignerTool.verify(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("help".equals(cmd)) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.VERSION); return; } else if ("dump-hints".equals(cmd)) { com.android.apksigner.ApkSignerTool.printUsage(java.util.Arrays.copyOfRange(params, 1, params.length)); } else if ("dump-hints".equals(cmd)) { com.android.apksigner.ApkSignerToolerToolerTool.dumpHints(java.util.Arrays.copyOfRange(params, 1, params.length)); } else if ("dump-hints".equals(cmd)) { com.android.apksigner.ApkSignerToolerTool.dumpHints(java.util
@java.lang.Override public void run() { synchronized(mStateMachine) { mDialingOutTimeoutEvent = null; doForStateMachine(mDialingOutDevice, (StateMachine.DIALING_OUT_RESULT, 0, 0, mDialingOutDevice)); mSystemInterface.getAudioManager().setParameters("A2dpSuspended=false"); } }
boolean dialOutgoingCall(android.bluetooth.BluetoothDevice fromDevice, java.lang.String dialNumber) { synchronized(mStateMachine) { if (!(isOnStateMachineThread())) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, "stopCall() must be called from state machine thread"); return false; } if ((mDialingOutTimeoutEvent)!= null) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, ("No already dialing by " + (mDialingOutTimeoutEvent))); return false; } if ((mDialingOutTimeoutEvent)!= null) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, ("A2dpSuspended = " + (mDialingOutTimeoutEvent))); android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, ("A2dpSuspended = " + (mDialVoiceCall))); android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, ("A2dpSuspended = "setActiveNetVoiceCall() failed to " + fromDevice)); return false; } mSystemInterface.getAudioManager().setParameters("A2dpSuspended=true"); android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, ("Unsupported device to set active device to " + fromDevice)); startActivity(intent); mDialingOutTimeoutEvent = new com.android.bluetooth.hfp.HeadsetService.DialingOutTimeoutEvent(fromDevice); mStateMachine.getThreadHandler().postDelayed(mDialingOutTimeoutEvent, com.android.bluetooth.hfp.HeadsetService.DIALING_OUT_TIMEOUT_MS); return true; } }
@com.android.internal.annotations.VisibleForTesting public void onAudioStateChangedFromStateMachine(android.bluetooth.BluetoothDevice device, int fromState, int toState) { synchronized(mStateMachine) { if ((fromState!= (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) && (toState == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED))) { if ((fromState!= (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) && (toState == (android.bluetooth.BluetoothHeadset.STATE_DISCONNECTED))) { if ((((mActiveDevice)!= null) && (!(mActiveDevice.equals(device))) && (!(mActiveDevice.equals(device))) && (shouldPersistAudio())) { if (!(connectAudio(mActiveDevice))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((((("Audio failed to connect to new " + device ") + (mActiveDevice)) + " after ") + device) + " is disconnected from SCO")); } } } if (toState == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) { mSystemInterface.getAudioManager().setParameters("A2dpSuspended=false"); } } }
private boolean startScoUsingVirtualVoiceCall() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH_ADMIN permission"); android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, ("Pending audio is not idle"); android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, ("Bluetooth: " + (com.android.bluetooth.Utils.getUidPidString()))); synchronized(mStateMachine) { if (isAudioOn()) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "Audio: no active device is active device"); return false; } if ((mActiveDevice) == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "Audio Call is not idle"); return false; } boolean inTelecomCall =!(mVirtualCallStarted)) && ((mVirtualCallStarted)) && ((mSystemInterface.isInCall()) || (mSystemInterface.isRinging())); if (inTelecomCall) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "Telecom.android.hfp.HeadsetService.TAG, "Telecom/sapCallService.Cid: "A2dpSuspended=true"); phoneStateChanged(0, HeadsetHalConstants.CALL_STATE_DIALING, "", 0, true); phoneStateChanged(1, HeadsetHalConstants.CALL_STATE_IDLE, "", 0, true); phoneStateChanged(1, HeadsetHalConstants.CALL_STATE_IDLE, "", 0, true); return true; } }
@java.lang.Override public void handleMessage(android.os.Message msg) { if ((msg.what)!= (com.android.bluetooth.avrcp.MediaPlayerWrapper.TimeoutTimeoutException.MSG_TIMEOUT)) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("sendMessage() before metadata to " + (msg.what))); return; } android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("Current Time while waiting for metadata to sync for " + (mPackageName))); android.util.Log.e(com.android.bluetooth.avrcp.Util.TAG, ("Current Playstate: " + (com.android.bluetooth.avrcp.Util.toMetadata(getMetadata())))); android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerInfo.TAG, ("Queue: Current Playstate: " + (getPlaybackState()))); java.util.List<com.android.bluetooth.avrcp.Metadata> current_queue = com.android.bluetooth.avrcp.Util.toMetadataList(queue); for (int i = 0; i < (current_queue.size()); i++) { android.util.Log.wtfStackTrace = com.android.bluetooth.avrcp.MediaPlayerInfo.TAG, ((("Queue QueueItem("queueItem("queueItem(" + i) + ") + (current_queue.get(i)))); } if (com.android.bluetooth.avrcp.MediaPlayerInfo.sTesting) android.util.Log.wtfStackTrace(com.android.bluetooth.avrcp.MediaPlayerInfo.TAG, ((("QueueQueueQueueQueue: " + i) + ": ") + (current_queue.get(i)))); } if (com.android.bluetooth.avrcp.MediaPlayerInfo.sTesting) android.util.Log.wtfStackTrace(com.android.bluetooth.avrcp.MediaPlayerInfo.TAG, ("Queue: " +
private int build() { mSphereVertices = java.nio.ByteBuffer.allocateDirect((((mNumSegments) * ((mNumSegments) + 1)) * (com.android.graphics.benchmark.sample.SpORDS_PER_VERTEX)) * 2)).order(java.nio.ByteOrder.nativeOrder())).asFloatBuffer(); mIndices = java.nio.ByteBuffer.allocateDirect((((mNumSegments) * ((mNumSegments) + 2)) * 2)).order(java.lang.ByteOrder.nativeOrder())).asIntBuffer(); double dPhi = (2 * (java.lang.Math.PI)) / (mNumSegments); double dPhi = (java.lang.Math.PI) / (mNumSegments); int points = 0; boolean firstLoop = true; boolean firstLoop = true; boolean firstLoop = true; double epsilon = 1.0E-10; for (double phi = 0.0; theta < (((java.lang.Math.PI) * 2) - epsilon); phi += dPhi) { for (double theta = 0.0; theta < (((java.lang.Math.PI) * 2) - epsi) - epsi) { for (double theta = 0.0; theta < (((java.lang.Math.sin(phi)) * (java.lang.Math.cos(phi))) * (java.lang.Math.cos(theta)))); mSphereVertices.put(((float) (((mRadius) ((mRadius) * (java.lang.Math.cos(phi)))))); mSphereVertices.put(((mRadius) * (java.lang.Math.cos(phi))))); if (!firstLoop) { firstLoop) { mIndices.put(((mRadius) * (java.lang.Math.cos(phi))))); } } if (firstLoop) { mIndices.put(((mRadius) (mRadius) - (mNumSegment))); } }
private void wiredAudioDeviceConnected() { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, "wiredAudioDeviceConnected"); } setA2dpActiveDevice(null); setA2dpActiveDevice(null); setHerrActiveDevice(null); }
@java.lang.Override public void onAudioDevicesAdded(android.media.AudioDeviceInfo[] addedDevices) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, "onAudioDevicesAdded"); } boolean hasAddedWiredDevice = false; for (android.media.AudioDeviceInfo deviceInfo : addedDevices) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, ((("Audio device added: " + (deviceInfo.getProductName())) + " type: ") + (deviceInfo.getType()))); } if (isWiredHeadset(deviceInfo)) { hasAddedWiredHeadset(deviceInfo); break; } } if (hasAddedWiredHeadset(deviceInfo)) { bitsAudioDevice = true; break; } }
private boolean isWiredHeadset(android.media.AudioDeviceInfo deviceInfo) { switch (deviceInfo) { case android.media.AudioDeviceInfo.TYPE_HEADSET : case android.media.AudioDeviceInfo.TYPE_HEADSET : case android.media.AudioDeviceInfo.TYPE_HEADSET : case android.media.AudioDeviceInfo.TYPE_HEADSET : return true; default : break; } return false; }
@java.lang.Override public void onAudioDevicesRemoved(android.media.AudioDeviceInfo[] removedDevices) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, "onAudioDevicesRemoved"); } boolean wasWiredAudioDeviceRemoved = false; for (android.media.AudioDeviceInfo deviceInfo : removedDevices) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, ((("Audio device removed: " + (deviceInfo.getProductName())) + " type: ") + (deviceInfo.getType()))); } if (isWiredHeadset(deviceInfo)) { wasWiredHeadset(deviceInfo); } if (isWiredHeadset(deviceInfo)) { wasWiredHeadset(deviceInfo); } } if (!wasWiredHeadset(deviceInfo)) { return; } boolean hasConnectedWiredHeadset(deviceInfo); android.media.AudioDeviceInfo[] devices = mAudioManager.getDevices(AudioManager.GET_DEVICES_OUTPUTS); for (android.media.AudioDeviceInfo deviceInfo : devices) { if (isWiredHeadset(deviceInfo)) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, ((("Found connected wired device: " + (deviceInfo.getProductName())) + " type: ") + (deviceInfo.getType()))); } hasConnectedWiredDevice = true; break; } } if (!hasConnectedWiredAudioDevicesDisconnected(); } }
@org.junit.Test public void wiredAudioDeviceConnected_setAllActiveDevicesNull() { a2dpConnected(mADevice); headsetConnected(mA2dpHeadsetDevice); assertTrue(mA2dpDevice, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(device); verify(mHeadsetService, timeout(com.android.bluetooth.btservice.ActiveDeviceManagerTest.TIMEOUT_MS)).setActiveDevice(device); }
public void testPlaySmallBuffer() throws java.lang.Exception { final java.lang.String TEST_NAME = "testPlaySmallBuffer"; android.media.cts.AudioTrackLatencyTest.TestSetup setup = new android.media.cts.AudioTrack(); android.media.AudioTrack track = setup.createTrack(); int framesWrittenTotal = setup.primeAudioTrack(TEST_NAME); int position1 = track.getPlaybackHeadPosition(); assertEquals(("test_NAME + "initial position 0, position 0, position1); track.play(); final long limit = track.getPlaybackHeadPosition(); assertEquals(0, 0, position1); track.play(); final long MAX_TIME_TO_MSEC; int position2 = track.getPlaybackHeadPosition(); while ((position1 == position2) && ((java.lang.System.currentTimeMillis()) <giveUpAt)) { java.lang.Thread.sleep(20); position2 = track.getPlaybackHeadPosition(); } assertTrue(((("test * framesWritten: " + (java.lang.System.currentTimeMillis()) + "test: was it start=") + position2)); final int several = 4; java.lang.Thread.sleep((((repeated * framesWrittenTotal) * (android.media.cts.AudioTrackLatencyTest.M_PER_PER_SECOND)) / (setup.sampleRate)) / (setup.sampleRate)) / (setup.sampleRate)) / (setup.sampleRate))); track.release(); }
@android.test.suitebuilder.annotation.MediumTest public void testOpportunisticScan() { return; }
private java.util.List<android.content.pm.PermissionInfo> loadExpectedPermissions(androidManifestId, androidManifest.permissionInfo> loadExpectedPermissions(androidManifestId) throws java.lang.Exception { java.util.List<android.content.pm.PermissionInfo> permissions = new java.util.ArrayList<>(); try (java.io.InputStream in = getContext().getResources().openRawResource(androidManifestId, "ManifestId.permission")); if (((type!= (android.xmlpull.v1.XmlPullParser.END_DOCUMENT)) && ((type!= (org.xmlpull.v1.XmlPullParser.END_DOCUMENT)) || ((type!= (org.xmlpull.v1.XmlPullParser.END_TAG)) || ((parser.getDepth()) > outerDepth))) { if ((type == (org.xmlpull.v1.XmlPullParser.END_TAG)) || (type == (org.xmlpull.v1.XmlPullParser.TEXT))) { continue; } if (android.permission2.cts.PermissionPolicyTest.TAG_PERMISSION.equals(parser.getName()))) { continue; } if (android.permission2.cts.PermissionPolicyTest.TAG_PERMISSION.equals(parser.getName())) { continue; } if (android.permission2.cts.PermissionPolicyTest.TAG_PERMISSION.equals(parser.getName())) { continue; } if (android.permission2.cts.PermissionPolicyTest.TAG_PERMISSION_PERMISSION_GROUP.equals(group, android.permission2.cts.PermissionPolicyTest.ATTR_PROTECTION_LEVEL)); permissions.add(permissionInfo); } else { android.util.Log.e(android.permission2.LOG_LOG_LOG_TAG, "PermissionInfo permission info"); } } catch (java.lang.Exception e) { android.util.Log.e(android.permission2.LOG_LOG_TAG, "PermissionInfo permission: "Permission: " + (android.permissionInfo.TAG, "PermissionInfo: " + (android.
@org.junit.Test public void testUnbondDevice_disconnectBeforeUnbond() { android.bluetooth.BluetoothDevice device = getTestDevice(0); org.junit.Assert.assertTrue(mHeadsetService.connect(device)); verify(mObjectsFactory).makeStateMachine(device, mHeadsetService.getStateMachineThreadLooper(), mHeadsetService, mHeadsetService, mAdapterService, mAdapterService, mAdapterService); verify(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASNC_CALL_TIMEOUT_MILLIS))).connectHfp(device); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_DISCONNECTED, device); mHeadsetService.messageFromNative(connectedEvent); try { java.lang.Thread.sleep(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASNC_CALL_TIMEOUT_MILLIS); } catch (java.lang.InterruptedException exception) { org.junit.Assert.fail("Unsupported while waiting for callback to disconnected state"); } doReturn(BluetoothDevice.BOND_NONE).when(mAdapterService).getBondState(eq(device)); android.util.Log.w(android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASNC_CALL_TIMEOUT_MILLIS); }
private void startVoiceRecognitionFromHf(android.bluetooth.BluetoothDevice device) { com.android.bluetooth.hfp.HeadsetStackEvent startVrEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_BR_STATE_CHANGED, HeadsetHalConstants.RIL_STATE_STARTED, device); mHeadsetService.messageFromNative(startVrEvent); verify(mSystemInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).activateVoiceRecognition(); mHeadsetService.startVoiceRecognition(device); verify(mAudioManager, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).setParameters("A2dpSuspended=true"); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).setParameters("A2dpSuspended=true"); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectAudio(device); verifyNoMoreInteractions(mNativeInterface, after (com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS))); }
@org.junit.Test public void testVoiceRecognition_SingleHfInitiatedSuccess() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); startVoiceRecognitionFromHf(device); }
@org.junit.Test public void testVoiceRecognition_SingleHfInitiatedFailedToActivate() { when(mSystemInterface.activateVoiceRecognition()).thenReturn(false); android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); com.android.bluetooth.hfp.HeadsetStackEvent startVrEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_REND_STATE_CHANGED, HeadsetHalConstants.Rotation.Rvr_STATE_STARTED, device); mHeadsetService.messageFromNative(startVrEvent); verify(mSystemInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASNC_CALL_TIMEOUT_MILLIS)).atResponseCode(device, HeadsetHalConstants.AT_RESPONSE_ERROR, 0); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASNC_CALL_TIMEOUT_MILLIS)); verify(mNativeInterface, after (com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASNC_CALL_TIMEOUT_MILLIS))); verifyNoMoreInteractions(mNativeInterface, after (com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASNC_CALL_TIMEOUT_MILLIS))); verifyNoMoreInteractions(mNativeInterface, after (com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASNC_CALL_TIMEOUT_MILLIS))); verifyNoMoreInteractions(mAudioManager); verifyZeroInteractions(mAudioManager); verifyZeroInteractions(mAudioManager); }
@org.junit.Test public void testVoiceRecognition_SingleHfInitiatedTimeout() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); com.android.bluetooth.hfp.HeadsetStackEvent startVrEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_BR_STATE_CHANGED, HeadsetHalConstants.Rvr_STATE_STARTED, device); mHeadsetService.messageFromNative(startVrEvent); verify(mSystemInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASNC_CALL_TIMEOUT_WAIT_MILLIS)), mHeadsetHalConstants(device, HeadsetHalConstants.AT_RESPONSE_ERROR, 0); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASNC_CALL_TIMEOUT_MSPONSE_MILLIS)); verify(mNativeInterface, after (com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASNC_CALL_TIMEOUT_MILLIS))); verifyNoMoreInteractions(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASNC_CALL_TIMEOUT_TIMEOUT_MILLIS)); verifyNoMoreInteractions(mNativeInterface); verifyZeroInteractions(mAudioManager); }
@org.junit.Test public void testVoiceRecognition_MultiAgInitiatedSuccess() { android.bluetooth.BluetoothDevice deviceA = getTestDevice(0); connectHfpDevice(deviceA); android.bluetooth.BluetoothDevice deviceB = getTestDevice(1); connectHfpDevice(deviceA, mHeadsetService.getActiveDevice()); org.junit.Assert.assertEquals(deviceA, mHeadsetService.getActiveDevice()); org.junit.Assert.assertTrue(deviceB, mHeadsetService.getActiveDevice()); org.junit.Assert.assertEquals(deviceB, mHeadsetService.getActiveDevice()); startVoiceRecognitionFromAg(); com.android.bluetooth.hfp.HeadsetStackEvent(startVrEvent.EVENT_TYPE_VALUE_CHANGED, HeadsetHalConstants.RAT_STATE_STARTED, deviceA); mHeadsetService.messageFromNative(startVrEventA); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASNC_CALL_TIMEOUT_MILLIS)), mHeadsetHalConstants.AT_RESPONSE_ERROR, 0); verifyNoMoreInteractions(mNativeInterface, after (com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASNC_CALL_TIMEOUT_MILLIS))); }
@org.junit.Test public void testVoiceRecognition_SingleAgStopSuccess() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); startVoiceRecognitionFromAg(); org.junit.Assert.assertTrue(mHeadsetService.stopVoiceRecognition(device)); verify(mHeadsetService.stopVoiceRecognition(device)); verify(mHeadsetService.stopVoiceRecognition(device)); verify(mHeadsetService.stopVoiceRecognition(device)); verify(mHeadsetService.stopVoiceRecognition(device); verify(mAudioManager, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASNC_CALL_TIMEOUT_MILLIS)).stopVoiceRecognition(device); verify(mAudioManager, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASNC_CALL_TIMEOUT_MILLIS)); verify(mAudioManager, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_TIMEOUT_MILLIS)); }
@org.junit.Test public void testVoiceRecognition_SingleAgInitiatedSuccess() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); startVoiceRecognitionFromAg(); }
private void startVoiceRecognitionFromAg() { android.bluetooth.BluetoothDevice device = mHeadsetService.getActiveDevice(); org.junit.Assert.assertNotNull(device); org.junit.Assert.assertTrue(mHeadsetService.startVoiceRecognition(device)); verify(mHeadsetService.startVoiceRecognition(device)); verify(mAudioManager, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachine(device)); verify(mAudioManager, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachine(device)); verify(mAudioManager, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachine(device)); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachine(device)); verifyNoMoreInteractions(device); verifyNoMoreInteractions(device); }
@org.junit.Test public void testConnectFromApi() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(java.util.Collections.singletonList(device), mHeadsetService.getDevicesMatchingConnectionStates(new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTED })); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); }
@org.junit.Test public void testVoiceRecognition_SingleHfStopSuccess() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); startVoiceRecognitionFromHf(device); com.android.bluetooth.hfp.HeadsetStackEvent stopVrEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_VG_STATE_CHANGED, HeadsetHalConstants.RUNKNOWN_STOPPED, device); mHeadsetService.messageFromNative(stopVrEvent); verify(mSystemInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).disactivateVoiceRecognition(); mHeadsetService.stopVoiceRecognition(device); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).disconnectAudio(device); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).disconnectAudio(device); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASNC_CALL_TIMEOUT_MILLIS)).setParameters("A2dpSuspended=false"); verify(mAudioManager, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)); verify(mAudioManager, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)); }
@org.junit.Test public void testGetHeadsetService() { org.junit.Assert.assertEquals(mHeadsetService, com.android.bluetooth.hfp.HeadsetService.getHeadsetService()); android.bluetooth.BluetoothDevice device = getTestDevice(0); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, mHeadsetService.getConnectionState(device)); org.junit.Assert.assertEquals(BluetoothHeadset.STATE_AUDIO_DISCONNECTED, mHeadsetService.getAudioState(device)); org.junit.Assert.assertEquals(BluetoothHeadset.STATE_AUDIO_DISCONNECTED, mHeadsetService.getAudioState(device)); }
private void connectHfpDevice(android.bluetooth.BluetoothDevice device) { org.junit.Assert.assertTrue(mHeadsetService.connect(device)); verify(mObjectsFactory).makeStateMachine(device, mHeadsetService.getStateMachineThreadLooper(), mHeadsetService, mHeadsetService, mHeadsetService, mAdapterService, mAdapterService, mSystemInterface); verify(mNativeInterface, after (com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASNC_CALL_TIMEOUT_MILLIS))).connectHfp(device); org.junit.Assert.assertEquals(java.util.Collections.singletonList(device), mHeadsetService.getDevicesMatchingConnectionStates(device)); org.junit.Assert.assertEquals(java.util.Collections.singletonList(device), mHeadsetService.getDevicesMatchingConnectionStates(device)); org.junit.Assert.assertEquals(java.util.Collections.singletonList(device), mHeadsetService.getDevicesMatchingConnectionStates(new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTING })); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(device), mHeadsetService.getDevicesMatchingConnectionStates(new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTING }
@org.junit.Test public void testVoiceRecognition_SingleAgInitiatedDeviceNotConnected() { android.bluetooth.BluetoothDevice device = getTestDevice(0); connectHfpDevice(device); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); android.bluetooth.BluetoothDevice wrongDevice = getTestDevice(1); org.junit.Assert.assertFalse(mHeadsetService.startVoiceRecognition(wrongDevice)); verifyNoMoreInteractions(mHeadsetService, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASNC_CALL_TIMEOUT_MILLIS)); verifyZeroInteractions(mAudioManager); }
private java.lang.String buildIntegerPatternString() { java.lang.String radixDigits = digits.substring(0, radix); java.lang.String digit = ("((?i)[" + radix) + "]|\\p{java.lang.String.format(0, radix))) + ") + (non0Digit)) + "))"; java.lang.String nonZeroRadix = ((((((((("("("" + nonZeroRadixDigits) + digit) + ") + (nonZero)) + ") + (non0Digit)) + ") + (groupSeparator)) + ")"; java.lang.String combinedNumeral = ((((((("("(" + nonZeroRadixDigits) + digit) + ") + ") + (groupSeparator)) + ")"; java.lang.String javaStyleInteger = ("([-+]?("++") + numERAL) + ")"; java.lang.String javaStyleInteger = ("([-+]?(" + numeral) + ")"; java.lang.String javaStyleInteger = ("([-+]?(" + numeral) + ")"; java.lang.String negativeInteger = ((negativePrefix) + numeral) + (negativeSuffix); return ((((("("" + javaStyleInteger) + ") + negativeInteger) + (negativeSuffix); }
public static java.lang.String readFile(java.io.File f) { byte[] tmp = new byte[((int) (f.length()))]; try (java.io.FileInputStream fis = new java.io.FileInputStream(f)) { int pos = 0; while (pos!= (tmp.length)) { int read = fis.read(tmp, pos, ((tmp.length) - pos)); if (read == (-1)) { throw new java.io.IOException(("Unexpected EOF"); } pos += read; } return new java.lang.String(tmp); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } }
@java.lang.Override public void onResume() { if ((mBluetoothAdapter)!= null) { final android.bluetooth.BluetoothProfile profile = mBluetoothPan.get(); if (profile == null) { mBluetoothAdapter.getProfileProxy(mContext, mBtProfileServiceListener, BluetoothProfile.PREFIX); } } if ((mAirplaneModeObserver) == null) { mBluetoothAdapter.getProfileProxy(mContext, mBtProfileServiceListener, BluetoothProfile.PREFIX); } } if ((mAirplaneModeObserver) == null) { mBluetoothAdapter.getProfileProxy(mContext, mBtProfileServiceListener, BluetoothProfile.PREFIX); } if ((mTetherReceiver) == null) { mTetherReceiver = new com.android.settings.network.TetherPreferenceController.TetherBroadcastReceiver(); } mContext.registerReceiver(mTetherReceiver, new android.content.IntentFilter(android.net.ConnectivityManager.ACTION_TETHER_STATE_CHANGED)); mContext.getContentResolver().registerContentObserver(mAirplaneModeObserver.uri, false, mAirplaneModeObserver); }
@org.junit.Before public void setUp() throws java.lang.Exception { mNetwork = new android.net.Network(0); mServer = new android.net.Network(0); mServer = new android.net.SntpClientTest.SntpTestServer(); mServer = new android.net.SntpClientTest.SntpTestServer(); mClient = new android.net.SntpClientTest.SntpTestServer(); mClient = new android.net.SntpClient(); }
public void setAbiBssi(java.lang.String bitness) { mAbiBssiBssi = bitness; }
private void addVtsRunnerOutputFile(java.io.File logFile) { java.lang.String fileName = logFile.getName(); com.android.tradefed.result.LogDataType type; if (fileName.endsWith(".html")) { type = com.android.tradefed.result.LogDataType.LOGCAT; } else if (fileName.startsWith("logcat")) { type = com.android.tradefed.result.LogDataType.LOGCAT; } else if ((fileName.startsWith("bugreport")) && (fileName.endsWith(".zip"))) { type = com.android.tradefed.result.LogDataType.BUGREPORTZ; } else if ((fileName.endsWith(".txt")) && (fileName.endsWith(".zip"))) { type = com.android.tradefed.result.LogDataType.LOG; } else { com.android.tradefed.log.LogUtil.CLog.w("Unknown output file type. Skipping %s", logFile); return; } java.lang.String outputFileName = ((((mTestModuleName) + "_") + fileName) + "_") + (mAbiBundle); com.android.tradefed.log.LogUtil.CLog.w("Unknown output file type. Skipping %s", fileName, mAbiBundle); return; }
