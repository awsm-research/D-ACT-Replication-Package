@java.lang.Override public org.ovirt.engine.api.model.GraphicsConsoles list() { org.ovirt.engine.api.model.GraphicsConsoles consoles = new org.ovirt.engine.api.model.GraphicsConsoles(); org.ovirt.engine.core.common.businessentities.VmTemplate entity = loadEntity(); org.ovirt.engine.core.common.businessentities.VmTemplate entity = loadEntity(); org.ovirt.engine.api.restapi.resource.utils.GraphicsConsoleResourceHelper.list(this, guid).entrySet().getEntity()); return consoles; }
@java.lang.Override protected void recoverBadMacs(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics) { final java.util.Function<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics = new org.ovirt.engine.core.bll.network.predicate.VnicWithBadMacPredicate(macPool); vnics.pool().filter(vnicWithBadMacPredicate).forEach((vnic instanceof org.ovirt.engine.core.bll.network.host.VmNetworkInterfaceManager.getVmNetworkInterface().getBondWithBadMacPool()))); vnics.pool().filter(vnic); vnics.add(vnic); vnics.add(vnic); }
@java.lang.Override protected void init() { macPool = org.ovirt.engine.core.bll.ExportVmFromConfigurationCommand.getMacPool(); org.ovirt.engine.core.common.businessentities.VM vmFromConfiguration = org.ovirt.engine.core.bll.ExportVmFromConfigurationCommand.getMacPool(); if (vmFromConfiguration!= null) { vmFromConfiguration.getStaticData().setClusterId(org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getClusterId()); if (!(org.ovirt.engine.core.bll.ExportVmFromConfigurationCommand.isImagesAlreadyOnTarget())) { setDisksToBeAttached(vmFromConfiguration); } org.ovirt.engine.core.bll.ExportVmFromConfigurationCommand.getParameters().setContainerId(vmFromConfiguration); } else { initUnregisteredVM(); } if ((Guid.Empty.equals(org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getVmId())) && ((org.ovirt.engine.core.bll.ExportVmFromConfigurationCommand.getParameters().getVm())!= null)) { org.ovirt.engine.core.bll.ExportVmFromConfigurationCommand.getParameters().setVmId(org.ovirt.engine.core.bll.ExportVmFromConfigurationCommand.getParameters().getVmId()); } setClusterId(org.ovirt.engine.core.bll.ExportVmFromConfigurationCommand.getParameters().getClusterId()); org.ovirt.engine.core.bll.ExportVmFromConfigurationCommand.getParameters().setStoragePoolId(org.ovirt.engine.core.bll.ExportVmFromConfigurationCommand.getParameters().getClusterId()); org.ovirt.engine.core.bll.ExportVmFromConfigurationCommand.getParameters().setStoragePoolId(org.ovirt.engine.core.bll.ExportVmFromConfigurationCommand.getParameters().getClusterId()); org.ovirt.engine.core.bll.ExportVmFromConfigurationCommand.setSucceeded(true); }
private boolean foundBadMacs(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> nics, java.util.Predicate<java.lang.String> badMacs) { return new java.util.ArrayList<java.lang.String>(); }
private boolean validateMacs(org.ovirt.engine.core.common.businessentities.VM vm) { if (!(org.ovirt.engine.core.bll.Export.ImportVmFromConfigurationCommand.getParameters().isReassignBadMacs())) { return true; } final java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics = vm.getInterfaces(); return reportDuplicateMacs(vm.getInterfaces()); }
private boolean reportDuplicateDuplicateMacs(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics) { if ((!(macPool.isDuplicateMacAddressesAllowed())) && (foundBadMacs(vnics, macPool.isMacInUse))) { return failValidation(EngineMessage.NETWORK_ADDRESS_IN_USE); } return true; }
@java.lang.Override public void update(java.util.List<org.ovirt.engine.core.compat.Guid> vmIds) { getCallsHandler().executeModification("DeleteVmGuestAgentInterfacesByVmIds", getCustomMapSqlParameterSource().addValue("vm_id", createIds(vmIds)); }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsList = org.ovirt.engine.core.bll.GetAllVmsQuery.getDbFacade().getVmDao().getAll(org.ovirt.engine.core.bll.GetAllVmsQuery.getUserID(), org.ovirt.engine.core.bll.GetAllVmsQuery.getParameters().isFiltered()); for (org.ovirt.engine.core.common.businessentities.VM vm : vmsList) { org.ovirt.engine.core.bll.VmHandler.updateVmGuestAgentVersion(vm); org.ovirt.engine.core.bll.GetAllVmsQuery.getQueryReturnValue().setReturnValue(vmsList); } org.ovirt.engine.core.bll.GetAllVmsQuery.getQueryReturnValue().setReturnValue(vmsList); }
public boolean isCpuHotplugSupported(int osId);
public boolean isCpuHotUnplugSupported(int osId);
public org.ovirt.engine.core.common.action.VdcReturnValueBase endAction(org.ovirt.engine.core.bll.tasks.interfaces.SPMTask task) { org.ovirt.engine.core.common.businessentities.AsyncTask dbAsyncTask = task.getParameters().getDbAsyncTask(); org.ovirt.engine.core.common.action.VdcActionType actionType = getEndActionType(dbAsyncTask); org.ovirt.engine.core.common.action.VdcActionParametersBase parameters = dbAsyncTask.getActionParameters(); org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.tasks.CommandHelper.buildCommand(actionType, parameters, coco.getActionParameters().getExecutionContext(), coco.getCommandStatus(dbAsyncTask.getCommandId())); return new org.ovirt.engine.core.bll.tasks.DecoratedCommand(command).endAction(); }
private static org.ovirt.engine.core.common.businessentities.UsbPolicy getUsbPolicyAccordingToUsbType(org.ovirt.engine.api.model.UsbPolicy usbType) { switch (usbType) { caseNATIVE : return org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE; default : return null; } }
private void initUsbPolicy() { java.lang.Integer osType = getOSType().getSelectedItem(); org.ovirt.engine.core.common.businessentities.DisplayType displayType = getDisplayType().getSelectedItem(); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.GraphicsTypes graphicsTypes = getGraphicsType().getSelectedItem(); if (((osType == null) || (displayType == null)) || (graphicsTypes == null)) || (graphicsTypes == null)) { return; } getUsbPolicy().setIsChangeable(true); org.ovirt.engine.core.common.businessentities.UsbPolicy prevSelectedUsbPolicy = getUsbPolicy().getSelectedItem(); if (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isLinuxOsType(osType)) { getUsbPolicy().setItems(java.util.Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_NATIVE)); } else { getUsbPolicy().setItems(java.util.Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_NATIVE)); } if (!(graphicsTypes.isEmpty())) { getUsbPolicy().setIsChangeable(false); } if ((getBehavior().size()) > 0) { java.util.Collection<org.ovirt.engine.core.common.businessentities.UsbPolicy> policies = getUsbPolicy().getItems(); if (parsedUsbPolicy!= null) { getUsbPolicy().setSelectedItem(prevSelectedUsbPolicy); } else if ((parsed) && (org.ovirt.engine.core.common.businessentities.UsbPolicy.UsbPolicy.values().getItems().next().next())) { getUsbPolicy().setSelectedItem(pPolicy); } } }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.hosts.FenceAgentModel fenceAgentModel) { driver.edit(fenceAgentModel); driver.edit(fenceAgentModel); this.model = fenceAgentModel; determineLabelValue(fenceAgentModel); fenceAgentModel.getManagementIp().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { determineLabelValue(model); } }); fenceAgentModel.getConcurrentSelectList().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("IsAvailable".equals(args.propertyName)) { determineLabelValue(model); } } }); }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.hosts.FenceAgentModel fenceAgentModel) { driver.edit(fenceAgentModel); driver.edit(fenceAgentModel); this.model = fenceAgentModel; determineLabelValue(fenceAgentModel); fenceAgentModel.getManagementIp().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { determineLabelValue(model); } }); }
public void validate(java.util.List<java.lang.String> errors) { int rowCount = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowCount(); assert (errors!= null) && ((errors.size()) == rowCount) : ""; }
@java.lang.Override public void onBrowserEvent(com.google.gwt.cell.client.Cell.Context context, com.google.gwt.dom.client.Element parent, java.lang.Boolean value, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<java.lang.Boolean> valueUpdater) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltip(parent, parent, getTooltip()); super.onBrowserEvent(context, parent, value, event, valueUpdater); }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip() { return tooltip; }
public static void setTooltip(com.google.gwt.dom.client.Element e, com.google.gwt.safehtml.shared.SafeHtml tooltip) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltip(e, tooltip, org.ovirt.engine.ui.common.utils.ElementTooltipUtils.getPlacementTemplate(null)); }
@java.lang.Override public java.util.Set<java.lang.String> getConsumedEvents() { java.util.Set<java.lang.String> set = new java.util.HashSet(super.getConsumedEvents()); set.add(BrowserEvents.CHANGE); set.add(BrowserEvents.KEYDOWN); set.add(BrowserEvents.MOUSEMOVE); return set; }
private void updateKeyTitle(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel object) { java.lang.String selectedKey = object.getKeys().getSelectedItem(); if (selectedKey!= null) { org.ovirt.engine.ui.common.utils.ElementUtils.setTooltipOnElement(keyField.getElement(), com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(selectedKey)); } }
@java.lang.Override public void setTooltip(com.google.gwt.safehtml.shared.SafeHtml tooltip, org.ovirt.engine.ui.common.utils.ElementTooltipUtils.getTooltip placement) { org.ovirt.engine.ui.common.utils.ElementUtils.setTooltip(getElement(), tooltip, label); }
@java.lang.Override public void setTooltip(com.google.gwt.safehtml.shared.SafeHtml tooltip) { setTooltip(tooltip); }
public void onBrowserEvent(com.google.gwt.cell.client.Cell.Context context, com.google.gwt.dom.client.Element elem, final T object, com.google.gwt.dom.client.NativeEvent event) { final int index = context.getIndex(); com.google.gwt.cell.client.ValueUpdater<C> valueUpdater = ((org.ovirt.engine.ui.common.widget.table.column.AbstractColumn.getFieldUpdater()) == null)? null : new com.google.gwt.cell.client.ValueUpdater<C>() { @java.lang.Override public void update(C value) { getFieldUpdater().update(index, object, value); } }; getCell().onBrowserEvent(context, elem, org.ovirt.engine.ui.common.widget.table.column.AbstractColumn.getValue(object), event, valueUpdater); }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip(com.google.gwt.safehtml.shared.SafeHtml parent) { return null; }
@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { com.google.gwt.safehtml.shared.SafeHtml tooltip = getTooltip(value); if (tooltip == null) { tooltip = getTooltip(value, parent); } org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(parent, tooltip); super.onBrowserEvent(context, parent, value, event, valueUpdater); }
public void setTooltip(com.google.gwt.safehtml.shared.SafeHtml text) { setTooltipText(text.asString()); }
@java.lang.Override public void execute() { applyTooltip(); }
private void applyTooltip() { if (((getWidget())!= null) && ((tooltip)!= null)) { java.lang.String template = org.ovirt.engine.ui.common.utils.ElementTooltipUtils.getTooltip(extraTooltipClassNames); org.ovirt.engine.ui.common.utils.ElementUtils.setTooltip(getWidget().getElement(), tooltip, template); } }
private static void onTooltip(com.google.gwt.dom.client.Element e) { if (((getElement().getElementId()) == null) && ((getElement().getElementId()) == (org.ovirt.engine.ui.common.widget.uicommon.models.EntityModel.getElement().getElementId())) { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.common.widget.uicommon.EntityModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel> entityModel) { java.lang.String value = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.common.widget.ElementModel>) (target)); java.lang.String> value = (((org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.common.widget.ElementListModel>) (target)); java.lang.String> list = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.common.widget.ElementListModel>) (target)); java.lang.String> list = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (model)); java.lang.String value = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.common.widget.ElementListModel>) (target)); if (target == null) { parentCommand = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (target)); } } else { parentModel.getElement().setTitle(null); } } }
@java.lang.Override public java.util.Set<java.lang.String> getConsumedEvents() { return new java.util.HashSet(super.getConsumedEvents()); }
public void setPlacement(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel placement) { this. placement = placement; }
void attachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().add(alertPanel); com.google.gwt.dom.client.Element messageDivElement = alertPanel.getMessageAt(0).getElement(); if (org.ovirt.engine.ui.common.utils.ElementUtils.detectHorizontalOverflow(messageDivElement)) { com.google.gwt.safehtml.shared.SafeHtml tooltipContent = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(messageDivElement.getInnerText()); org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(alertPanel.getElement(), tooltipContent, Placement.BOND); } }
private void updateBadge() { alert.setVisible(((count)!= 1)); }
public void setHtml(com.google.gwt.safehtml.shared.SafeHtml html) { assert tooltip = tooltip.getHTML().getHTML(); if ((tooltip) == null) || (!(tooltip.asString().equals(tooltip))) { tooltip = tooltip; applyTooltip(); } }
public void setMaxWidth(org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.Width width) { extraTooltipClassNames += (width.getClassName()); }
private static void createTooltip(com.google.gwt.dom.client.Element e, java.lang.String placement, java.lang.String template);
@java.lang.Override public void setWidget(com.google.gwt.user.client.ui.Widget w) { super.setWidget(w); if ((w!= null) && (getWidget()))) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { applyTooltip(); } }); } }
public static void setTooltip(com.google.gwt.dom.client.Element e, com.google.gwt.safehtml.shared.SafeHtml tooltip) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltip(e, tooltip); }
public static java.lang.String getTooltipTemplate(java.lang.String extraTooltipClassNames) { java.lang.String template = org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.TEMPLATE_CLASS_OUTER; if (org.ovirt.engine.ui.uicompat.external.StringUtils.isNotEmpty(extraTooltipClassNames)) { innerClassNames = org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.TEMPLATE; template = org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.TEMPLATE; template = org.ovirt.engine.ui.common.widget.tooltip.TooltipUtils.TEMPLATE; template = org.ovirt.engine.ui.common.widget.tooltip.Tooltip.TEMPLATE; template = org.ovirt.engine.ui.common.widget.tooltip.Tooltip.TEMPLATE; template = org.ovirt.engine.ui.common.widget.tooltip.Tooltip.TEMPLATE_CLASS_INNER; template = org.ovirt.engine.ui.common.widget.tooltip.Tooltip.TEMPLATE_CLASS_INNER; template = org.ovirt.engine.ui.common.widget.tooltip.Tooltip.TEMPLATE_CLASS_INNER; template = org.ovirt.engine.ui.common.widget.tooltip.Tooltip.TEMPLATE_CLASS_INNER; template = org.ovirt.engine.ui.common.widget.tooltip.Tooltip.TEMPLATE_CLASS_INNER; template = org.ovirt.engine.ui.common.widget.tooltip.Tooltip.TooltipUtils.TEMPLATE_CLASS_INNER; template = org.ovirt.engine.ui.common.widget.tooltip.Tooltip.TooltipUtils.TEMPLATE_CLASS_INNER; template = org.ovirt.engine.ui.common.widget.tooltip.TooltipUtils.TEMPLATE_CLASS_CLICK); template = org.ovirt.engine.ui.common.widget.tooltip.Tooltip
@java.lang.Override protected void writeGeneralData() { super.writeGeneralData(); _writer.writeStartElement(OvfProperties.CUSTOM_EMPLUG); _writer.writeRaw(emulatedMachine); _writer.writeEndElement(); _writer.writeStartElement(); _writer.writeStartElement(); _writer.writeStartElement(); _writer.writeStartElement(); }
@org.junit.Test public void cpuNameIsNull() { cpuId = null; assertThatThresholdBy(new org.ovirt.engine.core.utils.ovf.HostedEngineOvfWriter(vm, images, version, emulatedMachine, cpuId)).isInstanceOf(java.lang.NullPointerException.class).isInstanceOf(java.lang.NullPointerException.class).hasSpaceOf(java.lang.NullPointerException.class).hasInstance(); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.FencingPolicy.class, to = org.ovirt.engine.api.model.FencingPolicy.class) public static org.ovirt.engine.api.model.FencingPolicy map(org.ovirt.engine.api.model.FencingPolicy model, org.ovirt.engine.core.common.businessentities.FencingPolicy template) { org.ovirt.engine.core.common.businessentities.FencingPolicy entity = (template!= null)? template : new org.ovirt.engine.core.common.businessentities.FencingPolicy(); entity.setFencingEnabled(model.isSkipIfSdActive()) { entity.setSkipFencingIfSDActive(model.getSkipIfSdActive().isEnabled()); } if (model.isSetSkipIfSDActive()) { entity.setSkipFencingIfSDActive(model.getSkipIfSdActive().isEnabled()); } if (model.isSetSkipIfConnectivityBroken()) { entity.setSkipFencingIfConnectivityBroken(model.getSkipIfConnectivityBroken().isEnabled()); if ((model.getSkipIfConnectivityBroken().getThreshold())!= null) { entity.setHostsWithBrokenConnectivityBrokenConnectivityThreshold(model.getSkipIfConnectivityBroken().isThreshold()); } else { entity.setSkipFencingIfGlusterQuotaThreshold(model.getSkipIfGlusterBricksUp().isThreshold()); } if (model.isSetSkipIfGlusterQuotaNotMricksUp()) { entity.setSkipFencingIfGlusterQuotaThreshold(model.getSkipIfGlusterQuotaBricksUp().isEnabled()); } if (model.isSetSkipFencingIfGlusterQuotaNotMricksUp()) { entity.setSkipFencingIfGlusterQuotaIfGlusterQuotaNotMricks(model.getSkipIfGlusterQuotaBricksUp().isEnabled()); } return entity; }
@java.lang.Override protected boolean validate() { setStoragePoolId(getVm().getStoragePoolId()); if ((((!(isValidParametersList())) || (!(checkImagesStatus()))) || (!(validateSpaceRequirements()))) || (!(performVmRelatedChecks()))) { return false; } for (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getParametersList()) { org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getReturnValue().setValid((((((isDiskNotShareable(parameters.getImageId())) && (isDiskSnapshotNotPluggedToOtherVmsThatAreNotDown(parameters.getImageId()))) && (isTemplateInDestStorageDomain(parameters.getImageId(), parameters.getTargetStorageDomainId()))) && (performStorageDomainsChecks(parameters))) && (performStorageDomainsChecks(parameters))) && (isSameSourceAndDest(parameters)))); if (!(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getReturnValue().isValid())) { return false; } } return validateCreateAllSnapshotsFromVmCommand(); }
private void initSpyCommand() { doReturn(true).when(command).validateSpaceRequirements(); doReturn(true).when(command).checkImagesStatus(); doReturn(true).when(command).setAndValidateDiskProfiles(); }
@java.lang.Override protected void executeCommand() { runVdsCommand(VDSCommandType.SparseImage, new org.ovirt.engine.core.common.vdscommands.SigifyImageVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.SparseImageVds().getId(), org.ovirt.engine.core.bll.storage.disk.SarifyImageCommand.getDiskImage().getStorageIds().get(0), org.ovirt.engine.core.bll.storage.disk.SarsifyImageCommand.getDiskImage().getImageIds().get(0), org.ovirt.engine.core.bll.storage.disk.SarsifyImageCommand.getDiskImage().getImageId(), org.ovirt.engine.core.bll.storage.disk.SarifyImageCommand.getDiskImage().getId())); }
@java.lang.Override protected void executeVdsBrokerCommand() { java.util.Map<java.lang.String, java.lang.Object> volumeAddress = new java.util.HashMap<>(); volumeAddress.put("sd_id", org.ovirt.engine.core.vdsbroker.vdsbroker.SarsifyImageVDSCommand.getParameters().getStorageId()); volumeAddress.put("sd_id", org.ovirt.engine.core.vdsbroker.vdsbroker.SarsifyImageVDSCommand.getParameters().getImageId()); volumeAddress.put("img_id", org.ovirt.engine.core.vdsbroker.vdsbroker.SarsifyImageVDSCommand.getParameters().getVolumeId()); org.ovirt.engine.core.vdsbroker.vdsbroker.SarsifyImageVDSCommand.proceedProxyReturnValue(); }
private boolean selectProxyHost() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> activeHosts = org.ovirt.engine.core.bll.storage.disk.SchedifyImageCommand.getVdsDao().getAllForStoragePoolAndStatus(org.ovirt.engine.core.bll.storage.disk.SparseImage().getStoragePoolId(), VDSStatus.Up); if (activeHosts.isEmpty()) { return false; } org.ovirt.engine.core.common.businessentities.VDS activeHost = activeHost.get(0); setVds(activeHost); return true; }
protected org.ovirt.engine.core.common.businessentities.storage.Disk getDisk() { if ((disk) == null) { disk = org.ovirt.engine.core.bll.storage.disk.SarsifyImageCommand.getDiskDao().get(org.ovirt.engine.core.bll.storage.disk.SparseImageCommand.getParameters().getImageId()); } return disk; }
@java.lang.Override protected void init() { setImageId(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDisk())).getImageId()); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> perms = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.storage.Disk disk = getDisk(); if ((disk!= null) && ((disk.getId())!= null)) { perms.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(getDisk()).get(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.SParameters.SParameters.get(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.SParameters.class)); } return perms; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc sparsifyInplace(org.ovirt.engine.core.compat.Guid jobId, java.lang.Object> volumeName);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc sparsifyInplace(org.ovirt.engine.core.compat.Guid jobId, java.lang.Object> volumeName) { throw new java.lang.IllegalArgumentException(); }
@java.lang.Override protected boolean validate() { if (((org.ovirt.engine.core.bll.storage.disk.SparseImageCommand.getVds()) == null) && (!(selectProxyHost()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_NO_VDS_IN_POOL); } return true; }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc sparsify(org.ovirt.engine.core.compat.Guid jobId, java.util.Map<java.lang.String, java.lang.Object> volumeAddress) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.sparify_inplace").withParameter("job_id", jobId).withParameter("vol_addr", volumeAddress).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
@java.lang.Override protected void executeCommand() { log.info("Command: { log.info("CommandTransferImageTransfer entity for command '{}'", org.ovirt.engine.core.bll.storage.disk.image.TransportCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.TransportalImageCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.Transportal.getParameters().getTransferSize()); imageTransferDao.save(entity); log.info("The following {}", image); log.info("The following image: {}", getImageType()); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransportalImageCommand.getParameters().getImageId())) { createImage(); } else { handleImageIsReadyForTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransportCommand.getParameters().getImageId()); } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransportalImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransportalImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.Transportal.transaction.TransportMirroringCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransmissionCommand.getCommandId
public boolean isDownloading() { return (getDownloading())!= null? ((org.ovirt.engine.core.common.businessentities.StorageType.GLANCE.PORTED_LOADING_PROGRESS : getDownloading())); }
public void setImporting(boolean isDownloading) { this.importing = importing; }
@org.junit.Test public void testExportIsDefaultExportType() { testUploadIsDefaultTransferType(true); }
protected java.lang.String getTransferDescription() { return java.lang.String.format("%s '%s' (id '%s' (id '%s'"), getTransferType(), getImageType(), getImageAlias(), getImageAlias(), getImageIdNullSafe()); }
@org.junit.Test public void testFailOnImportWithoutImage() { transferImageCommand.getParameters().setIsDownloading(true); junit.framework.Assert.assertFalse(transferImageCommand.validate()); assertThat(transferImageCommand.getReturnValue().getValidationMessages(), contains(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD.name())); }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(imageId))) { return validateImageTransfer(imageId); } else { if (!(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().isDownloading())) { return validateCreateImage(); } else { return failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); } } }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.ImageTransfer imageTransfer) { org.ovirt.engine.core.common.action.TransferDiskImageParameters params = new org.ovirt.engine.core.common.action.TransferDiskImageParameters(); parameters.setImageId(imageTransfer.getImage().getId())); params.setImageId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(imageTransfer.getImage().getId())); params.setStorageDomainId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(imageTransfer.getImage().getId())); params.setKeepalive(true); params.setKeepalive(true); params.setKeepaliveInterval(false); params.setKeepaliveInterval(true); params.setKeepaliveInterval(false); org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetImageTransferById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@org.junit.Test public void testFailsDownloadExecutionWithoutImage() { transferImageCommand.getParameters().setIsDownloading(true); transferImageCommand.executeCommand(); junit.framework.Assert.assertFalse(transferImageCommand.getReturnValue().getSucceeded()); assertThat(transferImageCommand.getReturnValue().getValidationMessages(), contains(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD.name())); }
@java.lang.Override protected void executeCommand() { log.info("Command: { log.info("CommandTransferImageTransfer entity for command '{}'", org.ovirt.engine.core.bll.storage.disk.image.TransportCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.TransportCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.Transportal.getParameters().getTransferSize()); imageTransferDao.save(entity); if (org.ovirt.engine.core.bll.storage.disk.image.TransportalImageCommand.getParameters().isDownloading()) { if (org.ovirt.engine.core.bll.storage.disk.image.TransportalImageCommand.getParameters().isDownloading()) { failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); org.ovirt.engine.core.bll.storage.disk.image.TransmissionImageCommand.setSucceeded(false); } else { handleImage(); } } else { handleImageIsReadyForTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransportalImageCommand.getParameters().getImageId()); } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransportalImageCommand.getParameters().getImageId()); setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId()); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> getOvfEntityList(org.ovirt.engine.core.common.businessentities.VmEntityType vmEntityType) { java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = org.ovirt.engine.core.bll.storage.domain.GetUnregisteredEntitiesQuery.getParameters().getAllForStorageDomainByEntityType(org.ovirt.engine.core.bll.storage.domain.GetUnregisteredEntitiesQuery.getParameters().getId(), vmEntityType); return entityList; }
private static org.ovirt.vdsm.jsonrpc.client.JsonRpcClient createClient(java.lang.String hostname, int port, org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy connectionPolicy, org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy clientPolicy, boolean isSecure, org.ovirt.vdsm.jsonrpc.client.utils.EngineManagerProvider<java.lang.String, java.lang.String> protocol, java.lang.String protocol, int parallelism) { org.ovirt.vdsm.jsonrpc.client.reactors.ManagerProvider provider = null; if (isSecure) { provider = new org.ovirt.engine.core.vdsbroker.jsonrpc.EngineManagerProvider(protocol); } try { final org.ovirt.vdsm.jsonrpc.client.reactors.Reactor reactor = org.ovirt.vdsm.jsonrpc.client.reactors.ReactorFactory.getReactor(provider, type); return org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.getJsonClient(reactor, hostname, port, clientPolicy, clientPolicy, clientPolicy, clientPolicy, clientPolicy, parallelism); } catch (org.ovirt.vdsm.jsonrpc.client.ClientConnectionException e) { org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.log.error("Error occured during building ssl context or obtaining selector", org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.log.debug("Exception", e); throw new java.lang.IllegalStateException(e); } }
private boolean executeSshReboot(java.lang.String version) { try (final org.ovirt.engine.core.bll.utils.EngineSSHClient sshClient = new org.ovirt.engine.core.bll.utils.EngineSSHClient(); final java.io.ByteArrayOutputStream cmdOut = new java.io.ByteArrayOutputStream(); final java.io.ByteArrayOutputStream cmdOut = new java.io.ByteArrayOutputStream() { try { log.info("Failed SSH reboot session on host {}", org.ovirt.engine.core.bll.SshHostRebootCommand.getVds()); sshClient.setVds(org.ovirt.engine.core.bll.SshHostRebootCommand.getVds()); sshClient.useDefaultKeyPair(); sshClient.setVds(org.ovirt.engine.core.bll.SshHostRebootCommand.getVds()); sshClient.setVds(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.SshHostRebootCommand, version), null, cmdOut, cmdOut, cmdErr); return true; } catch (java.lang.Exception ex) { log.error("Error reboot command failed on host {} {} {}", org.ovirt.engine.core.bll.SshHostRebootCommand.getVds().getHostName(), ex.getMessage(), ex.getMessage(), cmdOut, cmdOut, cmdOut, cmdOut, cmdErr); log.debug("Exception", ex); } } catch (java.io.IOException e) { log.error("Error", e); } return false; }
private boolean executeSshPowerDown(java.lang.String version) { boolean ret = false; try (final org.ovirt.engine.core.bll.utils.EngineSSHClient sshClient = new org.ovirt.engine.core.bll.utils.EngineSSHClient(); final java.io.ByteArrayOutputStream cmdOut = new java.io.ByteArrayOutputStream(); final java.io.ByteArrayOutputStream cmdOut = new java.io.ByteArrayOutputStream() { try { log.info("Execution SSH power down session on host {}", org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds()); sshClient.setVds(org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds()); sshClient.useDefaultKeyPair(); sshClient.setVds(org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds()); sshClient.useDefaultKeyPair(); sshClient.authenticate(); log.info("Execute power down command on host {}", org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds().getHostName()); sshClient.executeCommand(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.SshVdsPowerdownCommand, version), null, cmdOut, cmdOut, cmdErr); ret = true; } catch (java.lang.Exception ex) { log.error("Error power down command failed on host {} {}", org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds().getHostName(), ex.getMessage(), ex.getMessage(), cmdOut, cmdOut, cmdOut, cmdErr); log.debug("Exception", e); } } catch (java.io.IOException e) { log.error("Exception", e); } return ret; }
private void cloneStructureNotCollapsed() { org.ovirt.engine.core.common.action.CloneImageGroupVolumesStructureCommandParameters p = new org.ovirt.engine.core.common.action.CloneImageGroupParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getSrcDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getDestDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters()); p.setParentParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters()); p.setEndProcedure(EndProcedure.COMPcedure.COMPED); p.setJobWeight(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getActionType()); p.setEndProcedure(EndProceeded); p.setJobWeight(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getOperationsWeight().get(CopyStage.DEST_CREATION)); runInternalAction(VdcActionType.Cluster, p); }
private void prepareParameters() { java.util.Map<java.lang.Object, java.lang.Integer> weights = new java.util.HashMap(); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().setOperations(warsets); int createWeight = (org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getJobWeight()) / 10; bonds.put(CopyStage.DEST_CREATION, createWeight); bonds.put(CopyStage.DATA_COPY, createWeight); }
public org.ovirt.engine.core.common.job.Step addStep(org.ovirt.engine.core.bll.job.ExecutionContext context, org.ovirt.engine.core.common.job.StepEnum stepName, java.lang.String description, boolean isExternal) { if (context == null) { return null; } org.ovirt.engine.core.common.job.Step step = null; if (context.isMonitored()) { if (description == null) { description = org.ovirt.engine.core.dal.job.ExecutionMessageDirector.getInstance().getStepMessage(stepName); } try { org.ovirt.engine.core.common.job.Job job = context.getJob(); if (((context.getExecutionMethod()) == (org.ovirt.engine.core.bll.job.ExecutionContext.ExecutionMethod.AsJob)) && (job!= null)) { step = job.addStep(stepName, description); try { step.setExternal(isExternal); jobRepository.saveStep(step); } catch (java.lang.Exception e) { log.error("Failed to save new step '{}' for job '{}': {}", stepName.name(), job.getActionType().name(), e.getMessage()); log.debug("Exception", e); job.getSteps().remove(step); step = null; } } else { org.ovirt.engine.core.common.job.Step contextStep = context.getStep(); if (((context.getExecutionMethod()) == (org.ovirt.engine.core.bll.job.ExecutionContext.ExecutionMethod.AsStep)) && (contextStep!= null)) { step = addSubStep(contextStep, step); step.setExternal(isExternal); } } } catch (java.lang.Exception e) { log.error("Exception", e); } } return step; }
@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = diskImageDao.getAllSnapshotsForImageGroup(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getImageGroupID()); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.sortImageList(images); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.sortImageList(images); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().setImageIds(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getDiskImageIds(images)); double totalSize = images.stream().mapToDouble(java.util.Collections.singleton(diskImage::getImageId(), (x) -> calculateImageWeight(totalSize, x)))); persistCommand(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getParentCommand(), ((getCallback())!= null)); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.setSucceeded(true); }
private void copyVolumeData(org.ovirt.engine.core.compat.Guid image) { org.ovirt.engine.core.common.action.CopyDataCommandParameters parameters = new org.ovirt.engine.core.common.action.CopyImageGroupParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getStoragePoolId(), buildImageLocationInfo(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getSrcDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getImageGroupID(), image), buildImageLocationInfo(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getDestDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getImageGroupID(), image), false); parameters.setEndProcedure(EndProcedure.COMPcedure.COMParsed); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getActionType()); parameters.setJobWeight(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters()); parameters.setJobWeight(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters()); parameters.setJobWeight(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getOperationsWeight().get(image)); }
public org.ovirt.engine.core.common.job.Step addTaskStep(org.ovirt.engine.core.bll.job.ExecutionContext context, org.ovirt.engine.core.common.job.StepEnum stepName, java.lang.String description, java.util.Collection<org.ovirt.engine.core.common.job.StepSubjectEntity> stepSubjectEntities) { if (context == null) { return null; } org.ovirt.engine.core.common.job.Step step = null; if (context.isTasksMonitored()) { org.ovirt.engine.core.common.job.Step parentTaskStep = context.getParentTasksStep(); if (parentTaskStep!= null) { step = addSubStep(parentTaskStep, stepName, description, description, stepSubjectEntities, true); } } return step; }
private org.ovirt.engine.core.common.job.Step addSubStep(org.ovirt.engine.core.common.job.Step parentStep, org.ovirt.engine.core.common.job.StepEnum stepName, java.lang.String description, java.util.Collection<org.ovirt.engine.core.common.job.StepSubjectEntity> stepSubjectEntities, boolean hasProgress) { org.ovirt.engine.core.common.job.Step step = null; if (parentStep!= null) { if (description == null) { description = org.ovirt.engine.core.dal.job.ExecutionMessageDirector.getInstance().getStepMessage(stepName); } step = parentStep.addStep(stepName, description); if (hasProgress) { step.setProgress(0); } try { jobRepository.saveStep(step, stepSubjectEntities); } catch (java.lang.Exception e) { log.error("Failed to save new step '{}' for step '{}': {}", stepName.name(), parentStep.getId(), parentStep.getStepType().name(), e.getMessage()); log.debug("Exception", e); parentStep.getSteps().remove(step); step = null; } } return step; }
private int calculateImageWeight(double totalSize, org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { double weight = (totalSize == 0)? 1 / (image.getActualSize()) / totalSize; return java.lang.Long.valueOf(speed * (image.getActualSize()) / totalSize; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.job.StepSubjectEntity> getCommandStepSubjectEntities() { if ((org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getDstInfo()) instanceof org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) { return java.util.Collections.singletonList(new org.ovirt.engine.core.common.action.StepSubjectEntity(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) { return java.util.Collections.singletonList(new org.ovirt.engine.core.common.businessentities.VmImageLocationInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo.getParameters().getDstInfo())).getImageGroupId(), org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getImageGroupId(), org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getImageGroupId(), org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getImageGroupId(), org.ovirt.engine.core.common.businessentities.storage.DiskImageLocationInfo.getImageGroupId(), org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getImageGroupId(), org.ovirt.engine.core.bll.storage.disk.image.CopyDiskImageHandler.getImageGroupId(), org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getImageGroupId()); } return null; }
public org.ovirt.engine.core.compat.Guid createTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand, java.lang.String description, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.VdcObjectType> entitiesMap) { org.ovirt.engine.core.common.job.Step taskStep = org.ovirt.engine.core.bll.job.ExecutionHandler.getInstance().addTaskStep(command.getExecutionContext(), org.ovirt.engine.core.common.job.StepEnum.getStepNameByTaskType(asyncTaskCreationInfo.getTaskType()), description, command.getCommandStepSubjectEntities()); command.getExecutionContext().setStepId(taskStep.getId()); if (taskStep!= null) { asyncTaskCreationInfo.setStepId(taskStep.getId()); } org.ovirt.engine.core.bll.tasks.SPMAsyncTask task = concreteCreateTask(taskId, command, asyncCreateTaskCreationInfo, parentCommand); task.setEntitiesMap(entitiesMap); org.ovirt.engine.core.bll.tasks.AsyncTaskUtils.addOrUpdateTaskInDB(task); getAsyncTaskManager().lockAndAddTaskToManager(task); org.ovirt.engine.core.bll.job.ExecutionHandler.getInstance().updateStepExternalId(taskStep, vdsmTaskId, ExternalSystemType.VDSM); return vdsmTaskId; }
private void handleCommandStepStepAndEntities() { if ((getCommandStep())!= null) { org.ovirt.engine.core.common.job.Step taskStep = executionHandler.addTaskStep(getExecutionContext(), getCommandStep(), null, getCommandStepSubjectEntities()); if (taskStep!= null) { getExecutionContext().setStep(taskStep); persistCommandIfNeeded(); } } }
public java.util.Map<org.ovirt.engine.core.common.businessentities.VmNetwork> getOperationsWeight() { return operationsWeight; }
public void setOperations(java.util.Map<java.lang.Object, java.lang.Integer> operationsWeight) { this.operationWeight = operationsWeight; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.job.StepSubjectEntity> getCommandStepSubjectEntities() { if ((org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getJobWeight())!= null) { return java.util.Collections.singletonList(new org.ovirt.engine.core.common.job.StepSubjectEntity(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getJobWeight().intValue())); } return null; }
private org.ovirt.engine.core.common.businessentities.aaa.DbUser buildUser(T params, java.lang.String authzName) { org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = dbUser.getByExternalId(authzName, params.getPrincipalId()); org.ovirt.engine.core.common.businessentities.aaa.DbUser user = new org.ovirt.engine.core.common.businessentities.aaa.DbUser(); user.setId((dbUser == null? org.ovirt.engine.core.compat.Guid.newGuid() : dbUser.getId())); user.setExternalId(params.getPrincipalId()); user.setExternalId(params.getPrincipalId()); user.setDomain(authzName); user.setFirstName(params.getFirstName()); user.setLastName(params.getLastName()); user.setLoginName(params.getPrincipalName()); java.util.List<org.ovirt.engine.core.compat.Guid> groupIds = new java.util.ArrayList<>(); java.util.List<java.lang.String> groupRecordIds = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.aaa.CreateUserSessionCommand.flatGroups(((java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>) (params.getGroupIds())), groupRecordIds); for (java.lang.String groupId : groupRecordIds) { org.ovirt.engine.core.common.businessentities.aaa.DbGroup dbGroup = dbGroupDao.getByExternalId(authzName, groupId); if (dbGroup!= null) { groupIds.add(dbGroup.getId()); } } }
java.lang.String areYouSureYouWantToCheckForUpgradeTheFollowingHostMsg();
@java.lang.Override public org.ovirt.engine.core.common.utils.HostUpgradeManagerResult isUpdateAvailable(org.ovirt.engine.core.common.businessentities.VDS host) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = backendInternal.runInternalQuery(VdcQueryType.GetoVirtISOs, new org.ovirt.engine.core.common.queries.IdQueryParameters(host.getId())); java.util.List<org.ovirt.engine.core.common.utils.RpmVersion> isos = returnValue.getReturnValue(); boolean updateAvailable = org.ovirt.engine.core.common.utils.RpmVersionUtils.isUpdateAvailable(isos, host.getHostOs()); org.ovirt.engine.core.common.utils.HostUpgradeManagerUtils.setUpdatesAvailable(isos); if (updateAvailable) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLog = new org.ovirt.engine.core.common.utils.HostUpgradeManagerUtils.isUpdateAvailable(isos, host.getHostOs()); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLog = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); auditLog.setVds(host); auditLogDirector.setVds(host); auditLogDirector.log(auditLogType.Ov3_NODE_UPDATES_ARE_AVAILABLE); } return hostUpgradeManager; }
org.ovirt.engine.core.common.utils.HostUpgradeManagerUtils isUpdateAvailable(org.ovirt.engine.core.common.businessentities.VDS host, org.ovirt.engine.core.common.businessentities.VDS host);
private void onUpgrade() { if ((getProgress())!= null) { return; } org.ovirt.engine.core.common.action.HostUpgradeCheckParameters params = new org.ovirt.engine.core.common.action.hostdeploy.HostUpgradeCheckParameters(host.getId()); org.ovirt.engine.core.common.action.hostdeploy.HostUpgradeCheckParameters parameters = new org.ovirt.engine.core.common.action.hostdeploy.HostUpgradeCheckParameters(host.getId()); parameters.setUpgrade(null); org.ovirt.engine.core.common.action.hostdeploy.HostUpgradeCheckParameters params = new org.ovirt.engine.core.common.action.hostdeploy.HostUpgradeCheckParameters(host.getId()); parameters.setStatus(org.ovirt.engine.core.common.action.VdcActionParametersBase.UpdateParametersBase.class); parameters.setStatus(null); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase returnValue = new org.ovirt.engine.core.common.action.VdcActionParametersBase(host.getId()); parameters.setActionReturnValue(null); org.ovirt.engine.core.common.action.VdcReturnValueBase params = new org.ovirt.engine.core.common.action.action.UpdateParameters(host.getParameters().getStoragePoolId()); parameters.setActionType(null); org.ovirt.engine.core.common.action.VdcActionParametersBase params = new org.ovirt.engine.core.common.action.action.UpdateParameters(host.getParameters(host.getId()); params.setActionType(null); parameters.setActionParameters(null); org.ovirt.engine.core.common.action.action.VdcActionParametersBase params = new org.ovirt.engine.core.common.action.action.UpdateParameters(host.getParameters(host.getId()); parameters.setActionParameters(params); parameters.setActionParameters(null); org.ovirt.engine.core.common.action.action.VdcActionParametersBase params = new org.ovirt.engine.core.common.action.action.action.HostUpgradeParameters(action); parameters.UpdateParameters(action
public org.ovirt.engine.core.common.utils.HostUpgradeManagerResult isUpdateAvailable(org.ovirt.engine.core.common.businessentities.VDS host) { return create(host.getVdsType()).isUpdateAvailable(host); }
private org.ovirt.engine.core.compat.Guid findChildCommandByIdCommandIds(org.ovirt.engine.core.common.action.VdcActionType commandType, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds) { org.ovirt.engine.core.common.businessentities.CommandEntity commandEntity = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandEntity(cmdId); if ((commandEntity.getCommandType()) == (commandType)) { return cmdEntity; } }
@java.lang.Override public void initialize() { setTitle(org.ovirt.engine.ui.uicommonweb.models.hosts.HostUpgradeCheckConfirmationModel.constants.upgradeHostTitle()); setHelpTag(HelpTag.upgrade_host); setHashName(HelpTag.upgrade_host.name); setMessage(org.ovirt.engine.ui.uicommonweb.models.hosts.HostUpgradeCheckConfirmationModel.constants.areYouSureYouWantToCheckForUpgradeTheFollowingHostMsg()); org.ovirt.engine.ui.uicommonweb.UICommand upgradeCommand = new org.ovirt.engine.ui.uicommonweb.UICommand(org.ovirt.engine.ui.uicommonweb.models.hosts.HostUpgradeCheckConfirmationModel.ON_CHECK_UPGRADE, this); getCommands().add(upgradeCommand); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.VDS vds = getVdsDao().get(org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.getVdsId()); org.ovirt.engine.core.common.utils.HostUpgradeManager.getInstance().getCustomValue("AvailableInternalCommand", org.apache.commons.lang.StringUtils.join(hostUpgradeManager.getAvailablePackages(), ", ")); org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.addCustomValue("Message", message); org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.addCustomValue("Message", message); org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.addCustomValue("Message", message); org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.addCustomValue("Message", message); org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.addCustomValue("Message", "No updates available for host '{}'", vds.getId(), hostUpgradeManager.isUpdatesAvailable()); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.getSucceeded()? org.ovirt.engine.core.common.AuditLogType.HOST_UP_UPDATES_FINISHED : org.ovirt.engine.core.common.AuditLogType.HOST_AVAILABLE_UPDATES_FAILED; }
@java.lang.Override public boolean isUpdateAvailable(org.ovirt.engine.core.common.businessentities.VDS host) { return availableUpdatesFinder.isUpdateAvailable(host); }
@java.lang.Override protected void executeCommand() { java.util.concurrent.Future<org.ovirt.engine.core.common.action.VdcReturnValueBase> upgradeCheckCmd = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.HostUpgrade, new org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckCommand.cloneContext()); if (!(org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckCommand.getParameters().isRunAsync())) { org.ovirt.engine.core.common.action.VdcReturnValueBase result; try { result = upgradeCheckCmd.get(); org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckCommand.getReturnValue().setActionReturnValue(result.getActionReturnValue()); if (!(result.getSucceeded())) { propagateFailure(result); return; } } catch (java.lang.InterruptedException | java.util.concurrent.ExecutionException e) { log.error("Exception", e); return; } }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("id", getLUNId()).append(getLUNId()).append(", physicalVolumeId=").append(getPhysicalVolumeId()).append(", serial=").append(getSerial()).append(", serial=").append(getSerial()).append(", serial=").append(getLunMapping()).append(", productId=").append(getProductId()).append(", productId=").append(getProductId()).append(", deviceSize=").append(getPvSize()).append(", deviceSize=").append(getPvSize()).append(", pathsDictionary=").append(getPvSize()).append(", pathsDictionary=").append(getPathsDictionary()).append(", pathsDictionary=").append(getPathsDictionary()).append(", diskId=").append(getStatus()).append(", diskId=").append(getDiskId()).append(", diskId=").append(getDiskId()).append(", diskAlias=").append(getDiskId()).append(", diskAlias=").append(getDiskAlias()).append(", diskAlias=").append(getDiskAlias()).append(", storageDomainName=").append(getStorageDomainId()).append(", diskAlias=").append(getStorageDomainName()).append(", storageDomainName()).append(getStorageDomainName()).append(", storageDomainName=").append(getStorageDomainName()).append(getStorageDomainName()).append(", storageDomainName=").append(getStorageDomainName()).append(getStorageDomainId()).append(", storageDomainName=").append(getStorageDomainName()).append(getStorageDomainName()).append(", storageDomainName()).append(", storageDomainName=").append(getStorageDomainName()).append(getStorageDomainId()).append(", storageDomainId=").append(getStorageDomainId()).append(getStorageDomainId()).append(", storageDomainId=").append(getStorageDomainId()).append(getStorageDomainId()).append(", storageDomain
public java.lang.Boolean isDiscardsData() { return staticData.isDiscardsData(); }
public void setSupportsDiscards(boolean supportsDiscards) { this.supportsDiscards = supportsDiscards; }
public java.lang.Boolean isSupportsDiscards() { return supported; }
public java.lang.Long getDiscardsMaxBytes() { return discardMaxBytes; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.storage.LUNs)) { return false; } org.ovirt.engine.core.common.businessentities.storage.LUNs other = ((org.ovirt.engine.core.common.businessentities.storage.LUNs) (obj)); return (((((((((((org.ovirt.engine.core.common.businessentities.storage.LUNs) (obj)); return (((((((((((org.ovirt.engine.core.common.businessentities.storage.LUNs) (obj)); return (((((((((org.ovirt.engine.core.common.businessentities.storage.LUNs) (obj)); }
public void setDiscardsData(java.lang.Boolean discardZerData) { staticData.setDiscardsData(disks); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("lun_id", lun.getLUNId()).addValue("physical_volume_id", lun.getPhysicalVolumeId()).addValue("volume_group_id", lun.getVolumeGroupId()).addValue("serial", lun.getSerial()).addValue("lun_mapping", lun.getSerial()).addValue("vendor_id", lun.getVendorId()).addValue("device_id", lun.getProductId()).addValue("device_id", lun.getDeviceSize()).addValue("device_size", lun.getDeviceSize()).addValue("discards_bytes", lun.getDiscardsMaxBytes()).addValue("discards_bytes", lun.isDiscardsZerBytes()).addValue("discards_zeroes_data", lun.isDiscardsZerBytes()); getCallsHandler().executeModification("InsertLUNs", parameterSource); }
public java.lang.Boolean isSupportsDiscards() { return staticData.isSupportsDiscast(); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { return createIdParameterMapper(lun.getId()).addValue("physical_volume_id", lun.getPhysicalVolumeId()).addValue("volume_group_id", lun.getVolumeGroupId()).addValue("serial", lun.getSerial()).addValue("lun_mapping", lun.getSerial()).addValue("vendor_id", lun.getVendorId()).addValue("vendor_id", lun.getProductId()).addValue("device_id", lun.getProductId()).addValue("device_size", lun.getDeviceSize()).addValue("device_size", lun.getDeviceSize()).addValue("discards_bytes", lun.getDeviceSize()); }
protected java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateInDb(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDbMap = lunsFromDb.stream().collect(java.util.stream.Collectors.toMap(LUNs::getLUNId(), java.util.function.Function.identification())); return lunsFromVgInfo.stream().collect(java.util.stream.Collectors.group(lunFromVgInfo.getLUNId()); if (lunFromDb == null) { return saveNewLuns; } boolean lunFromDbHasSamePvId = java.util.Objects.equals(lunFromDb.getLUNId()); if (lunFromDb == null) { if (((lunFromDb.getDeviceSize())!= (lunFromVgInfo.getDeviceSize())) || (!(java.util.Objects.equals(lunFromDb.getPhysicalVolumeId(), lunFromVgInfo.getPhysicalVolumeId())))) { if (((lunFromDb.getDeviceSize())!= (lunFromVgInfo.getDeviceSize())) { if (!(lunFromDb.getDeviceSize().equals(lunFromVgInfo.getDeviceSize()))) { java.util.Objects.equals(lunFromDb.getLunId(), lunFromVgInfo.getDescription()); } } } return lunFromDb; }
@org.junit.Test public void testGetLunsToUpdateInDbDiffDiscardsDiscardsMaxBytes() { lunFromVg.setDiscardsMaxBytes(255L); lunFromDb.setDiscardsMaxBytes(1024L); assertLunShouldBeUpdatedDueToFieldChange(); }
public void setSupportsDiscards(boolean supportsDiscards) { staticData.setSupportsDiscards(supportsDiscards); }
@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("lun_id", lun.getLUNId()).addValue("physical_volume_id", lun.getPhysicalVolumeId()).addValue("volume_group_id", lun.getVolumeGroupId()).addValue("serial", lun.getSerial()).addValue("lun_mapping", lun.getSerial()).addValue("vendor_id", lun.getVendorId()).addValue("device_id", lun.getProductId()).addValue("device_id", lun.getDeviceSize()).addValue("device_size", lun.getDeviceSize()).addValue("discards_bytes", lun.getDiscardsMaxBytes()).addValue("discards_bytes", lun.isDiscardsZerBytes()).addValue("discards_zeroes_data", lun.isDiscardsZerBytes()); getCallsHandler().executeModification("UpdateLUNs", parameterSource); }
public void setDiscardsMaxBytes(java.lang.Long discardMaxBytes) { this.disks = discardMaxBytes; }
public static boolean needsAlert(org.ovirt.engine.core.common.businessentities.VM vm) { boolean needsAlert = false; if (((vm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) || (org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.hasDifferentOSType(vm)) || (org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.hasDifferentOSType(vm)); } return (hasAlert || (org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.isUpdateNeeded(vm)); }
public void setVdsNumaNodeList(java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vdsNumaNodeList) { this.vdsNumaNodeList = vdsNumaNodeList; }
public java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> getVdsNumaNodeList() { return vdsNumaNodeList; }
private static org.ovirt.engine.core.bll.ValidationResult checkNumaPreferredTuneMode(org.ovirt.engine.core.common.businessentities.NumaTuneMode numaTuneMode, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes) { if (numaTuneMode!= (org.ovirt.engine.core.common.businessentities.NumaTuneMode.PREFERRED)) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } if ((vmNumaNodes.size()) == 1) { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning> vdsNumaNodeList = vmNumaNodes.get(0).getVdsNumaNodeList(); boolean pinnedToSingleNode = ((vdsNumaNodeList!= null) && ((vdsNumaNodeList!= null) && ((vdsNumaNodeList.size()) == 1)) && (vdsNumaNodeList.get(0).isPinned()); if (pinnedToSingleNode) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_PREFERRED_PINNED_TO_SINGLE_NODE); }
private java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning>> getAllVmNumaNodePinInfo() { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning>> numaNodesAssign = getCallsHandler().executeReadList("GetAllAssignedNumaNodeInfomation", org.ovirt.engine.core.dao.VmNumaNodeDaoImpl.vmNumaNodeAssignmentRowMapper, null); java.util.Map<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VmNumaNode, org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning>> vmNodesPinMap = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning>> pair : numaNodesPinMap) { if (!(vmNumaNodesPinMap.containsKey(pair.getFirst()))) { vmNumaNodesPinMap.put(pair.getFirst(), new java.util.ArrayList()); } vmNumaNodesPinMap.get(pair.getFirst()).add(pair.getSecond()); } return vmNumaNodesPinMap; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode>> getVmNumaNodeInfoByClusterId(org.ovirt.engine.core.compat.Guid cluster) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("cluster_id", cluster); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode>> vmNodes = getCallsHandler().executeReadList("GetVmNumaNodeByCluster", org.ovirt.engine.core.dao.VmNumaNodeDaoImpl.vmNumaNodeInfoWithClusterRowMapper, parameterSource); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<java.lang.Integer>> numaNodesCpusMap = getAllNumaNodeCpuMap(); java.util.Map<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodesPinMap = getAllVmNumaNodePinInfo(); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode> pair : vmNumaNodes) { if (numaNodesCpusMap.containsKey(pair.getSecond().getId())) { pair.getSecond().setCpuIds(numaNodesCpusMap.getId()); } } return true; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> getAllVmNumaNodeByVmId(org.ovirt.engine.core.compat.Guid vmId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_id", vmId); java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = getCallsHandler().executeReadList("GetNumaNodeByVmId", org.ovirt.engine.core.dao.VmNumaNodeDaoImpl.vmNumaNodeCpuRowMapper, parameterSource); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodesPinMap = getAllVmNumaNodePinInfo(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode node : vmNumaNodes) { if (vmNumaNodesPinMap.containsKey(node.getId())) { node.setVdsNumaNodeList(vmNumaNodesPinMap.get(node.getId())); } } return vmNumaNodes; }
public static org.ovirt.engine.core.common.businessentities.VmNumaNode createVmNumaNode(int index, java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> vdsNodes) { org.ovirt.engine.core.common.businessentities.VmNumaNode numaNode = org.ovirt.engine.core.bll.utils.NumaTestUtils.createVmNumaNode(index); final java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> numaPinning = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode vdsNumaNode : vdsNumaNodes) { numaPinning.add(new org.ovirt.engine.core.common.businessentities.VmNumaNode(org.ovirt.engine.core.common.businessentities.VmNumaNode.PINNING, true, vdsNumaNodes)); } numaNumaNode.setVdsNumaNodeList(numaPinning); return numaNumaNode; }
protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createVnodeToPnodeParametersMapper(org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning pinning, org.ovirt.engine.core.compat.Guid vNodeId) { return org.ovirt.engine.core.dao.NumaNodeDaoImpl.getCustomMapSqlParameterSource().addValue("id", org.ovirt.engine.core.compat.Guid.newGuid()).addValue("vm_numa_node_id", vNodeId).addValue("vds_numa_node_id", pinning.getVdsNodeId()).addValue("vds_numa_node_id", pinning.getVdsNodeIndex()).addValue("vds_numa_node_index", pinning.getVdsNodeIndex()).addValue("is_pinned", pinning.isPinned()).addValue("is_pinned", pinning.isPinned()); }
private static java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> createTestVmNumaNodes() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> newVmNodes = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.VmNumaNode newVmNumaNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newVmNumaNode.setCpuIds(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaNodeInfoTest.generateCpuList(0, 4)); newVmNumaNode.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newVmNumaNode.setIndex(0); newVmNumaNode.setMemTotal(1024); newVmNumaNode.getVdsNumaNodeList().add(new org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning(org.ovirt.engine.core.compat.Guid.newGuid(), true, 0)); newVmNumaNode.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newVmNumaNode.setIndex(org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinned(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaNodeInfoFactoryTest.generateCpuList(org.ovirt.engine.core.compat.Guid.newGuid(), true, true, 0)); newVmNumaNode.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newVmNumaNode.setIndex(0); newVmNumaNode.setVmNumaNodeList(org.ovirt.engine.core.common.businessentities.VmNumaNode.class); newVmNumaNode.setVmNumaNode
private boolean isVmNumaPinned(java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes) { if ((node == null) || (node.isEmpty())) { return false; } for (org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode : vmNumaNode.getVdsNumaNodeList()) { if (pinning.isPinned()) { return true; } } return false; }
@org.junit.Test public void shouldDetectMissingPinningEntry() { vm.getvNumaNodeList().get(0).getVdsNumaNodeList().get(0).setVdsNodeIndex(null); assertValidationFailure(org.ovirt.engine.core.bll.numa.vm.NumaValidator.checkVmNumaNodesIntegrity(vm, vm.getvNumaNodeList()), EngineMessage.VM_NUMA_NODE_PINNED_INDEX_ERROR); }
public org.ovirt.engine.core.common.businessentities.VmNumaNode toVmNumaNode() { final org.ovirt.engine.core.common.businessentities.VmNumaNode newNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newNode.setIndex(vmNumaNode.getIndex()); newNode.setId(vmNumaNode.getId()); newNode.setMemTotal(vmNumaNode.getMemTotal()); if (isPinned()) { newNode.setVdsNumaNodeList(java.util.Arrays.asList(new org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning(null, pinned, hostNodeIndex))); } return newNode; }
private boolean canVmNumaPinnedToVds(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes, org.ovirt.engine.core.common.businessentities.VDS vds) { java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> pNodes = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsNumaNodeDao().getAllVdsNumaNodeByVdsId(vds.getId()); if ((pNodes == null) || (pNodes.isEmpty())) { return false; } java.util.Map<java.lang.Integer, org.ovirt.engine.core.common.businessentities.VdsNumaNode> indexMap = toMap(pNodes); for (org.ovirt.engine.core.common.businessentities.VmNumaNode vNode : nodes) { for (org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning pinning : vNode.getVdsNumaNodeList()) { if (pinning.isPinned()) { if ((vNode.getMemTotal()) > (pinning.get(pinning.getVdsNodeIndex()).getNumaNodeStatistics().getMemFree())) { return false; } } } } return true; }
@org.junit.Test public void testGetAllVmNumaNodeByVmId() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> result = vmNumaNodeDao.getAllVmNumaNodeByVmId(existingVm.getId()); assertNotNull(result); assertEquals(2, result.size()); org.ovirt.engine.core.compat.Guid vmNumaNode1 = new org.ovirt.engine.core.compat.Guid("3c2b81e6-5080-50-4ad1-86a1-cf517b15b517b517"); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes = new java.util.HashMap<>(2); nodes.put(result.get(0).getId(), result.get(0)); nodes.put(result.get(1).getId(), result.get(0)); assertTrue(numaNode2)); assertTrue(node.containsKey(vmNumaNode1)); assertTrue(node.containsKey(vmNumaNode1)); assertTrue(domains.get(vmNumaNode1)); assertEquals(2, nodes.get(vmNumaNode1).getVdsNumaNodeList().get(0).isPinned()); assertEquals(true, nodes.get(vmNumaNode1).getVdsNumaNodeList().get(0).isPinned()); assertEquals(true, nodes.get(vmNumaNode1).getVdsNumaNodeList().get(0).isPinned()); assertEquals(true, nodes.get(vmNumaNode1).getVdsNumaNodeList().get(1).getVdsNumaNodeList().get(0).isPinned()); assertEquals(vmNumaNode1, nodes.get(vmNumaNode1).getVdsNumaNodeList().get(0).getVdsNumaNodeList().get(0).getVdsNumaNodeList().get(0).getVdsNumaNodeList().get
@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = org.ovirt.engine.core.bll.numa.vm.UpdateVmNumaNodesCommand.getParameters().getVmNumaNodeList(); java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode : vmNumaNodes) { for (org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode : vmNumaNodes) { if (pinningPinned.isPinned()) { int index = pinning.getVdsNodeIndex(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode : vmNumaNodes) { if ((pinningPinned.getIndex()) == index) { pinning.setVdsNodeId(pinned)) { pinning.setVdsNodeId(pinning); break; } } } } nodes.add(vmNumaNode); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> filterVmsInClusterNeedUpdate() { final boolean rngUpdateRequired = VmRngDevice.Source.Source.uriRandomUpdateRequired(oldCluster.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion()); return vmStaticDao.getAllByCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()).stream().filter((vm)!= null? ((vm.getOrigin())!= null : null) && (!(vm.isHostedEngine())))).filter(((vm.getCustomCompatibilityVersion()) == null) || rngUpdateRequired).sort(java.util.Collections.singletonList(vm.getCustomCompatibilityVersion()))) || rngUpdateRequired).sort(java.util.Collections.singletonList()); }
private boolean updateTemplates() { for (org.ovirt.engine.core.common.businessentities.VmTemplate template : templatesLockedForUpdate) { org.ovirt.engine.core.common.action.UpdateVmTemplateParameters parameters = new org.ovirt.engine.core.common.action.UpdateVmTemplateParameters(template); parameters.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.createLockProperties(LockProperties.Scope.None)); parameters.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); final org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVmTemplate, parameters); if (!(result.getSucceeded())) { org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVmTemplate, parameters); if (!(result.getSucceeded())) { org.ovirt.engine.core.bll.UpdateClusterCommand.getReturnValue().setFault(result.getFault()); return false; } } return true; }
@java.lang.Override protected void updateRngDevice(org.ovirt.engine.core.compat.Guid templateId) { if (!(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters().isUpdateRngDevice())) { rngDeviceUtils.handleURngDevice(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters().getClusterLevelChangeFromVersion(), org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getCluster().getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getCluster().getCompatibilityVersion(), false); return super.updateRngDevice(templateId); } super.updateRngDevice(templateId); }
@java.lang.Override protected void init() { org.ovirt.engine.core.bll.UpdateClusterCommand.updateMigrateOnError(); oldCluster = clusterDao.get(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()); if (((oldCluster)!= null) && (!(java.util.Objects.equals(oldCluster.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion())))) { vmsLockedForUpdate = filterVmsInClusterNeedUpdate(); } }
public void handleURandomRandomChange(org.ovirt.engine.core.compat.Version oldClusterVersion, org.ovirt.engine.core.compat.Version newClusterVersion, org.ovirt.engine.core.compat.Version newClusterVersion, org.ovirt.engine.core.bll.context.CommandContext commandContext, boolean isVm) { if (oldClusterVersion == null) { return; } final boolean updateWantRequired = VmRngDevice.Source.Source.uriRandomUpdateRequired(oldClusterVersion, newClusterVersion); if (!updateRequiresRequired) { return; } final java.util.List<org.ovirt.engine.core.common.businessentities.VmRngDevice> rngDevices = backend.runInternalQuery(VdcQueryType.GetRngDevice, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmBaseId), commandContext.getEngineContext()).getReturnValue(); if (!(java.util.Arrays.asList(VmRngDevice.Source.RANDOM, VmRngDevice.Source.RANDOM).contains(rngDevice.getSource()))) { return; } final org.ovirt.engine.core.common.action.RngDeviceParameters params = new org.ovirt.engine.core.common.action.RngDeviceParameters(rngDevice, isVm); backend.runInternalAction(VdcActionType.UpdateRngDevice, params, commandContext); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> filterTemplatesInClusterNeedUpdate() { if (!(VmRngDevice.Source.uriRandomUpdateRequired(oldCluster.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion()))) { return java.util.Collections.emptyList(); } return vmTemplateDao.getAllForCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()); }
public void onSparsify(final org.ovirt.engine.ui.uicommonweb.ICommandTarget target) { java.util.List<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameterList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disksToSparsify) { org.ovirt.engine.core.common.action.VdcActionParametersBase parameters = new org.ovirt.engine.core.common.action.ImagesActionsParametersBase(disk.getId()); parameterList.add(parameters); } startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.SparseImage, parameterList, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { stopProgress(); target.executeCommand(cancelCommand); } }, this); }
private boolean isSparsifyCommandAvailable() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((getSelectedItems())!= null)? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.storage.Disk>cast(getSelectedItems()) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { if ((!(isVmDown())) || ((!(isVmDown())) && (disk.getPlugged()))) { return false; } } return true; }
public void initialize(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disksToSparsify, org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel target) { this.disksToSparify = disksToSparify; org.ovirt.engine.ui.uicompat.UIConstants uiConstants = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants(); setTitle(uiConstants.sparsifyConfirmationPopupMessage()); setMessage(uiConstants.sparsifyConfirmationPopupMessage()); setMessage(HelpTag.sparsifyConfirmationPopupMessage()); setHelpTag(HelpTag.sparsify_disk); setHashName("sparsify_disk"); getLatch().setEntity(false); java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> items = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disksToSparsify) { org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel = new org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel(); diskModel.setDisk(disk); diskModel.setVm(vm); items.add(diskModel); if ((disk.getNumberOfVms()) > 1) { getLatch().setIsChangeable(false); } } setItems(items); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand(org.ovirt.engine.ui.uicommonweb.models.vms.S.SICon_SParameters.ON_SParameters.getValue()); cancelCommand.setIsCancel(false); getLatch().setIsChangeable(false); }
@org.junit.Test public void testSave() { org.ovirt.engine.core.common.businessentities.storage.DiskImage newImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); newImage.setImageId(org.ovirt.engine.core.compat.Guid.newGuid()); newImage.setImageId(org.ovirt.engine.core.compat.Guid.newGuid()); newImage.setVolumeFormat(VolumeFormat.COW); newImage.setQOWComapt(VolumeType.Sparse); newImage.setActive(true); newImage.setActive(true); newImage.setActive(true); newImage.setActive(true); newImage.setActive(true); newImage.setActive(org.ovirt.engine.core.compat.Guid.newGuid()); imageDao.save(newImageDynamic); org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic dynamic = createDiskImageDynamic(newImage.getImageId()); dao.save(createDiskImageDynamic(newImage.getImageId()); org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic result = dao.get(dynamic.getId()); assertNotNull(result); assertEquals(result); assertEquals(dynamic, result); }
public void setQowComapt(org.ovirt.engine.core.common.businessentities.storage.QowCompat qowComaptecy) { getImage().setQos(qowComapt); }
@java.lang.Override public void saveUnregisteredDisk(org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk disk) { getCallsHandler().executeModification("InsertUnregisteredDisk", getCustomMapSqlParameterSource().addValue("disk_id", disk.getId()).addValue("image_id", disk.getDiskImage().getImageId()).addValue("image_alias", disk.getDiskImage().getImageId()).addValue("creation_description", disk.getDiskImage().getDiskAlias()).addValue("creation_date", disk.getDiskImage().getCreationDate()).addValue("last_modified", disk.getDiskImage().getLastModified()).addValue("volume_type", disk.getDiskImage().getLastModified()).addValue("volume_type", disk.getDiskImage().getVolumeType()).addValue("volume_format", disk.getDiskImage().getVolumeType()).addValue("size", disk.getDiskImage().getVolumeFormat()).addValue("storage_domain_id", disk.getDiskImage().getSize()).addValue("storage_domain_id", disk.getDiskImage().getSize()).addValue("storage_domain_id", disk.getDiskImage().getSize()).addValue("storage_domain_id", disk.getDiskImage().getStorageIds().get(0))); for (org.ovirt.engine.core.common.businessentities.VmBase vmBase : disk.getVms()) { getCallsHandler().executeModification("InsertUnregisteredDisksToVms", getCustomMapSqlParameterSource().addValue("disk_id", disk.getDiskImage().getId()).addValue("entity_id", vmBase.getId()).addValue("entity_name", vmBase.getName()).addValue("storage_domain_id", vmBase.getName()).addValue("storage_domain_id", vmBase.getName()).addValue("storage_domain_name", vmBase.getName()).addValue("storage_domain_id", vmBase.getName()).addValue("storage_domain_name", vmBase.getName()).addValue("storage_domain_name", vmBase.get
@javax.ws.rs.Path("{action: (activate|approve|commitnetconfig|deactivate|commitnetconfig|fence|fence|fence|fence|fence|fence|fetch|fetch|fetch|fetch|fetch|fetch|setupnetworks|fetch)) public org.ovirt.engine.api.restapi.types.VmRpcResource getActionResource(@javax.ws.rs.PathParam("action") java.lang.String oid) { return new org.ovirt.engine.api.restapi.types.VmRpc(getDelegate().getActionResource(action, oid)); }
public java.lang.String exportVm(org.ovirt.engine.core.common.businessentities.VM vm, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images, org.ovirt.engine.core.compat.Version version) { org.ovirt.engine.core.utils.ovf.OvfVmWriter vmWriter = new org.engine.core.common.utils.ObjectUtils(vm, images, version); if (vm.isHostedEngine()) { vmWriter = new org.ovirt.engine.core.utils.ovf.OvfVmWriter(vm, images, version); } else { vmWriter.build().getStringRepresentation(); } return vmWriter.build().getStringRepresentation(); }
@java.lang.Override protected void writeGeneralData() { super.writeGeneralData(); _writer.writeStartElement(OvfProperties.CLUSTER_EMULATED_MACHINE); _writer.writeRaw(cluster.getEmulatedMachine()); _writer.writeStartElement(); _writer.writeStartElement(); _writer.writeStartElement(); _writer.writeStartElement(); }
protected static org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo getQemuquqos(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newStorageDomainID, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, boolean shouldPrepareAndTeak) { org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.getHostForExecution(storagePoolId, java.util.Collections.emptyList()); org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = null; if (shouldBeareAnd teARD) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.prepareImage(storagePoolId, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, new org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler(vdsId, storagePoolId, new org.ovirt.
public static java.util.Map<java.lang.String, java.lang.Object> buildVmNumaTuneSetting(org.ovirt.engine.core.common.businessentities.VmNumaTuneMode numaTuneMode, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes) { java.util.Map<java.lang.String, java.lang.Object> createNumaTune = new java.util.HashMap<>(); java.util.List<java.lang.String, java.lang.Object> memNodeList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode node : vmNumaNodes) { if (node.getVdsNumaNodeList().isEmpty()) { continue; } java.util.Map<java.lang.String, java.lang.String> memNode = new java.util.HashMap<>(); memNode = new java.util.HashMap<>(); memNode.put(VdsProperties.NUMA_Tune_VM_NODE_INDEX, java.lang.String.valueOf(node.getIndex())); memNodeList.put(memNode); } createNumaTune.put(memNode); }
@org.junit.Test public void testBuildVmNumaTuneSetting() throws java.lang.Exception { java.util.Map<java.lang.String, java.lang.Object> numaTune = org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactory.buildVmNumaNumaNumaNodes(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.numaTuneMode, org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vmNumaNodes); assertEquals(2, numaTune.size()); assertTrue(numaTune.containsKey(VdsProperties.NumaNodes, org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vdsNumaNodes); assertEquals(2, numaTune.getValue(), numaTune.get(VdsProperties.NMA_Tune_MODE)); assertTrue(numaTune.containsKey(VdsProperties.NMA_Tune.getValue(), numaTune.get(VdsProperties.NUMA_Tune_MODE)); java.util.List<java.lang.String> memNodes = ((java.util.Map<java.lang.String, java.lang.String>) (numaTune.get(VdsProperties.NUMA_Tune_Tune_MEMES))); assertTrue(numaTune.containsKey(VdsProperties.NUMA_Tune_MEMES)); java.util.List<java.lang.String>> memNodes = ((java.util.Map<java.lang.String, java.lang.String>) (numaTune.get(VdsProperties.NUMA_Tune_Tune_MEMNODES))); assertEquals("0", memNodes.get(0).get(0).get(0).get(0).get(0).get(0).get(0).getNodes().get(NumaTune.Nodes()); }
@org.junit.Test public void canSetNumaPinning() { newNumaNodes = java.util.Collections.singletonList(createVmNumaNode(1, vdsNumaNodes)); final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
@org.junit.Test public void canSetNumaConfigurationWithVmFromParams() { final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createVnodeToPnodeParametersMapper(java.lang.Integer pinnedIndex, org.ovirt.engine.core.compat.Guid vNodeId) { return getCustomMapSqlParameterSource().addValue("id", vmId).addValue("vm_numa_node_id", vNodeId).addValue("vds_numa_node_index", pinnedIndex); }
@org.junit.Test public void canSetNumaPinning() { newNumaNodes = java.util.Collections.singletonList(createVmNumaNode(1, vdsNumaNodes)); final org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand command = mockedCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massRemoveNumaNodeByNumaNodeId(eq(existingNumaNodeIds)); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
@org.junit.Test public void canSetNumaConfigurationWithVmFromDb() { final org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand command = mockedCommandWithVmFromDb(); command.executeCommand(); verify(vmNumaNodeDao).massRemoveNumaNodeByNumaNodeId(eq(existingNumaNodeIds)); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
@java.lang.Override protected void executeCommand() { if (!(oldNumaNodeIds.isEmpty())) { org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getVmNumaNodeDao().massRemoveNumaNodeByNumaNodeId(oldNumaNodeIds); } java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getParameters().getVmNumaNodeList(); vmNumaNodes.add(vmNumaNodes, org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getVm().getId()); org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getVmNumaNodeDao().massSaveNumaNode(vmNumaNodes, org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getVm().getId()); org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.setSucceeded(true); }
@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getParameters().getVmNumaNodeList(); vmNumaNodes.forEach((node) -> node.setId(org.ovirt.engine.core.compat.Guid.newGuid())); org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getVmNumaNodeDao().massSaveNumaNode(vmNumaNodes, org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getVm().getId()); setActionReturnValue(vmNumaNodes.get(0).getId()); org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.setSucceeded(true); }
@org.junit.Test public void canSetNumaConfigurationWithVmFromParams() { final org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand command = mockedCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massRemoveNumaNodeByNumaNodeId(eq(existingNumaNodeIds)); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
private void populateVMNUMAInfo(final java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { final java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode>> numaNodes = getVmNumaNodeDao().getVmNumaNodeInfoByClusterId(org.ovirt.engine.core.bll.ClusterOperationCommandBase.getClusterId()); for (final org.ovirt.engine.core.common.businessentities.VM vm : vms) { if (numaNodes.containsKey(vm.getId())) { vm.setvNumaNodeList(numaNodes.get(vm.getId())); } } }
@org.junit.Test public void canSetNumaConfigurationWithVmFromDb() { final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommandWithVmFromDb(); command.executeCommand(); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
protected void updateRngDevice(org.ovirt.engine.core.compat.Guid templateId) { if (!(getModel().getIsRngEnabled().getIsChangable())) { return; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetRngDevice, new org.ovirt.engine.core.common.queries.IdQueryParameters(templateId), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { final org.ovirt.engine.core.compat.Version clusterVersion = getModel().getSelectedCluster().getCompatibilityVersion(); java.util.List<org.ovirt.engine.core.common.businessentities.VmRngDevice> devices = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(dev.isEmpty()))); final org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = (dev.isEmpty())? new org.ovirt.engine.core.common.businessentities.VmRngDevice() : dev.get(0); rngDevice.setSource(VmRngDevice.Source.getValid()); getModel().setRngDevice(rngDevice); getModel().setRngDevice(rngDevice); } })); }
@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { final org.ovirt.engine.core.compat.Version clusterVersion = getModel().getSelectedCluster().getCompatibilityVersion(); java.util.List<org.ovirt.engine.core.common.businessentities.VmRngDevice> devices = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(dev.isEmpty()))); getModel().setRngDevice(VmRngDevice.Source.getValid()); getModel().setRngDevice(rngDevice); }
@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { deactivate(); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> rngDevices = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(rngDevices.isEmpty()))); if (!(rngDevices.isEmpty())) { final org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = getModel().getSelectedCluster().getCompatibilityVersion(); org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevices.get(0)); rngDevice.setSource(VmRngDevice.Source.getValidator()); getModel().setRngDevice(rngDevice); } activate(); updateVirtioScsi(vmBase); }
private boolean isPassDiscoveredSupported() { return validate(getDiskValidator(disk).isPassDiscoveredSupported(getDiskVmElement(), HotPlugDiskToVmCommand.getStorageDomain())); }
@org.junit.Test public void testPassDirectLunSupport() { testPassDiscrictSupport(new org.ovirt.engine.core.common.businessentities.storage.LunDisk(), org.ovirt.engine.core.common.businessentities.storage.LunDisk.LunDisk(), org.ovirt.engine.core.common.businessentities.storage.LunDisk.LunDisk.LunDisk(), null); }
private void applyUserChanges(org.ovirt.engine.core.common.businessentities.storage.Disk diskToUpdate, org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dveToUpdate) { updateSnapshotIdOnShareableChange(diskToUpdate, getNewDisk()); diskToUpdate.setPropagateErrors(getNewDisk().getPropagateErrors()); diskToUpdate.setWipeAfterDelete(getNewDisk().isWipeAfterDelete()); diskToUpdate.setDiskAlias(getNewDisk().isWipeAfterDelete()); diskToUpdate.setShareable(getNewDisk().isShareable()); diskToUpdate.setReadOnly(getNewDisk().isShareable()); diskToUpdate.setReadOnly(getNewDisk().getSgio()); dveToUpdate.setBoot(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().isBoot()); dveToUpdate.setDiskInterface(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().isBoot()); dveToUpdate.setDiskInterface(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().isPassDiscards()); dveToUpdate.setDiskInterface(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().isPassDiscards()); dveToUpdate.setPassDiscards(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().isPassDiscards()); dveToUpdate.setPassDiscards(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().isPassDiscards()); dao.setPassDiscards(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().isPassThrough()); }
@org.junit.Test public void testValidateFailsForPassDiscards() { initializeCommand(org.ovirt.engine.core.compat.Guid.newGuid()); mockVm(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED)).when(diskValidator).isPassDiscoveredSupported(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class)); doReturn(diskValidator).when(command).getDiskValidator(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED); }
java.lang.String ACTION_TYPE_FAILED_PASS_DISCERTIFICATION_TYPE();
@org.junit.Test public void validateDiscardsSucceeded() { org.ovirt.engine.core.common.action.VmDiskOperationParameterBase parameters = createParameters(); initializeCommand(parameters); when(diskDao.get(diskImageGuid)).thenReturn(parameters.getDiskInfo()); when(diskDao.get(diskImageGuid)).thenReturn(parameters.getDiskInfo()); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(command); }
@org.junit.Test public void validateFailedDiscardsNotSupported() { mockVmStatusUp(); mockInterfaceList(); createVirtIODisk(); initStorageDomain(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED)).when(diskValidator).isPassDiscards(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.StorageDomain.class)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED); }
@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if ((o == null) || ((getClass())!= (o.getClass()))) { return false; } org.ovirt.engine.core.common.businessentities.storage.DiskVmElement that = ((org.ovirt.engine.core.common.businessentities.storage.DiskVmElement) (o)); return ((((boot) == (that.boot)) && ((passDiscardsDiscards.isDiscardsDiscards))) && ((diskInterface) == (that.diskInterface))) && ((id.equals(that.id) == null? id.equals(that.id) : that.id.id.id.id); }
@java.lang.Override public int hashCode() { final int prime = 31; int result = (prime * result) + ((boot, boot, boot, boot, bootProtocol); result = (prime * result) + (boot, bootable))); result = (prime * result) + ((boot, bootable) == null? 0 : bootable.hashCode()); result = (prime * result) + ((bootProtocol) == null? 0 : bootable.hashCode()); result = (prime * result) + ((bootProtocol) == null? 0 : null? 0 : bootable.hashCode()); result = (prime * result) + ((bootProtocol) + ((bootProtocol) == null? 0 : null? 0 : bootable.hashCode()); result = (prime * result) + ((bootProtocol) + ((bootProtocol) == null? 0 : null? 0 : null? 0 : diskInterface.hashCode()); result.hashCode()); result = (prime * result) + ((diskInterface) + ((diskInterface) == null? 0 : null? 0 : diskInterface.hashCode()); result = (prime * result) + ((diskInterface) + ((diskInterface) + (prime * result) + (prime * result) + ((diskInterface) + ((boot_type) + (diskInterface) + (diskInterface))); return result; }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement entity) { return createIdParameterMapper(entity.getId()).addValue("is_boot", entity.isBoot()).addValue("pass_discards", entity.isPassDiscovered()).addValue("disk_interface", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(entity.getDiskInterface())); }
@org.junit.Test public void validateDiscards() { org.ovirt.engine.core.common.action.VmDiskOperationParameterBase parameters = createParameters(); initializeCommand(parameters); when(diskDao.get(diskImageGuid)).thenReturn(parameters.getDiskInfo()); when(diskValidator.isPassDiscardsSupported(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED); }
@org.junit.Test public void testPassDiscardsDiskImageSupport() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskImage(); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain(); storageDomain.setStorageType(StorageType.NFS); testPassDiscards(diskImage, storageDomain); }
@org.junit.Test public void testValidateFailsWhenDiscardsIsNotSupported() { when(diskValidator.isPassDiscardsSupported(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.StorageDomain.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_PASS_DISK_NOT_SUPPORTED); }
private void mockDiskValidator() { doReturn(diskValidator).when(command).getDiskValidator(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class)); when(diskValidator.isReadOnlyPropertyCompatibleWithInterface(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class))).thenReturn(ValidationResult.VALID); when(diskValidator.isVirtIoScsiValid(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class))).thenReturn(ValidationResult.VALID); when(diskValidator.isDiskInterfaceSupported(eq(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class))).thenReturn(ValidationResult.VALID); when(diskValidator.isPassDiscoveredSupported(eq(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.StorageDomain.class))).thenReturn(ValidationResult.VALID); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Disk disk) { org.ovirt.engine.api.model.DiskAttachment diskAttachment = new org.ovirt.engine.api.model.DiskAttachment(); if (disk.isSetBootable()) { diskAttachment.setBootable(disk.isBootable()); } else { diskAttachment.setBootable(false); } diskAttachment.setPassDiscovered(false); if (disk.isSetInterface()) { diskAttachment.setInterface(disk.getInterface()); } diskAttachment.setDisk(disk); if (disk.isSetId()) { org.ovirt.engine.core.compat.Guid diskId = org.ovirt.engine.core.compat.Guid.createGuidFromString(disk.getId()); return getAttachmentsResource().attachDiskToVm(this, diskAttachment, new org.ovirt.engine.api.restapi.resource.BackendVmDisksResource.OldAttachDiskResolver(diskId)); } else { return getAttachmentsResource().createDisk(this, diskAttachment, new org.ovirt.engine.api.restapi.resource.BackendVmDisksResource.OldAddDiskResolver(diskId)); } }
java.lang.String passPairNotSupportedForStorageType();
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object virtioScsiEnabledReturnValue) { if (java.lang.Boolean.FALSE.equals(virtioScsiEnabledReturnValue)) { diskInterfaces.remove(DiskInterface.VirtIO_SCSI); } for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : diskModels) { diskModel.getDiskInterface().setItems(diskInterfaces); diskModel.getDiskInterface().setSelectedItem(DiskInterface.VirtIO); updatePassDiscardsChangeability(diskModel); if (getIsBootable().getIsChangable()) { diskModel.getIsBootable().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean isBootableMarked = ((java.lang.Boolean) (((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (sender)).getEntity())); parentModel.getIsBootable().setIsChangeable((!isBootableMarked)); } }); } else { diskModel.getIsBootable().setChangeProhibitionReason(org.ovirt.engine.ui.uicommonweb.models.vms.AttachDiskModel.constants.onlyOneBootableDisk()); diskModel.getIsBootable().setIsChangeable(false); } } java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel>
private void updatePassDiscards() { if (getIsFloating()) { getPassDiscributed().setIsAvailable(false); } else { org.ovirt.engine.core.common.businessentities.storage.DiskInterface selectedInterface = getDiskInterface().getSelectedItem(); org.ovirt.engine.core.common.businessentities.storage.DiskInterface selectedDiskStorageType = getDiskInterface().getSelectedItem(); org.ovirt.engine.core.common.businessentities.storage.DiskInterface selectedDiskStorageType = getDiskStorageType().getEntity(); boolean isApplicableInterface = (selectedInterface == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.IDE)); boolean isApplicableDiskStorageType = (selectedDiskStorageType == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.IDE)); boolean isApplicableDiskStorageType = (selectedDiskStorageType == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IDE)); boolean isApplicableDiskStorageType = (selectedDiskStorageType == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) || (((getStorageDomain().getSelectedItem())!= (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) || (((getStorageDomain().getSelectedItem())!= null) && (getStorageType().getSelectedItem().isBlockDomain()))); if ((isApplicableInterface && isApplicableDiskStorageType) && isApplicalbeStorageType) { getPassDiscributed().setEntity(getDiskVmElement().isPassDiscored()); } } else { getPassDiscards().setIsAvailable(false); getPassDiscributed().setEntity(false); getPassDiscards().setEntity(getDiskVmElement().isPassDiscway()); } }
private void listenToPassDiscoveredItemChangedEvent(final org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel>> disks, final org.ovirt.engine.ui.uicommonweb.models.vms.AttachDiskModel diskModel) { disks.getItemsChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((disks.getItems()) == null) { return; } for (org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> entityModel : disks.getItems()) { entityModel.getEntity().getPassDiscards().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (args.propertyName.equals("IsChangable")) { revealDiskPanel(diskModel); } } }); } } }), eventRaisedDiskPanel(disks); }
@java.lang.Override public int setTabIndexes(int nextTabIndex) { sizeEditor.setTabIndex((nextTabIndex++)); sizeExtendEditor.setTabIndex((nextTabIndex++)); descriptionEditor.setTabIndex((nextTabIndex++)); descriptionEditor.setTabIndex((nextTabIndex++)); interfaceEditor.setTabIndex((nextTabIndex++)); storageDomainEditor.setTabIndex((nextTabIndex++)); diskProfileEditor.setTabIndex((nextTabIndex++)); cinderVolumeTypeEditor.setTabIndex((nextTabIndex++)); cinderVolumeTypeEditor.setTabIndex((nextTabIndex++)); cinderVolumeTypeEditor.setTabIndex((nextTabIndex++)); diskProfileEditor.setTabIndex((nextTabIndex++)); diskListEditor.setTabIndex((nextTabIndex++)); diskListEditor.setTabIndex((nextTabIndex++)); plugDiskToVmEditor.setTabIndex((nextTabIndex++)); plugDiskToVmEditor.setTabIndex((nextTabIndex++)); isBootableEditor.setTabIndex((nextTabIndex++)); isBootableEditor.setTabIndex((nextTabIndex++)); isBootableEditor.setTabIndex((nextTabIndex++)); isBootableEditor.setTabIndex((nextTabIndex++)); isReadOnlyEditor.setTabIndexes((nextTabIndex++)); isUsingScsiReservationEditor.setTabIndexes((nextTabIndex++)); isUsingScsiReservationEditor.setTabIndex((nextTabIndex++)); return nextTabIndex; }
java.lang.String passMessageParameters();
public void updateOperationProgress(final org.ovirt.engine.core.common.businessentities.VM vm) { vm.setBackgroundOperationDescription(resourceManager.getVmManager(vm.getId()).getConvertOperationDescription()); vm.setBackgroundOperationProgress(resourceManager.getVmManager(vm.getId()).getConvertOperationProgress()); }
@java.lang.Override protected void executeCommand() { try { addVmToDb(); processImages(); vmHandler.addVmInitToDB(getVm().getStaticData()); } catch (java.lang.RuntimeException e) { macPool.freeMacs(macsAdded); throw e; } org.ovirt.engine.core.bll.ExportVmCommandBase.setSucceeded(true); org.ovirt.engine.core.bll.ImportVmCommandBase.getReturnValue().setActionReturnValue(getVm()); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getSnapshotDao().get(org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getParameters().getId(), Snapshot.SnapshotType.NEXT_RUN, org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getUserID(), org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getParameters().isFiltered()); if (snapshot!= null) { org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); vmHandler.updateDisksFromDb(vm); vmHandler.updateVmGuestAgentVersion(vm); org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getQueryReturnValue().setReturnValue(vm); } else { super.executeQueryCommand(); } }
public void updateVmStatistics(final org.ovirt.engine.core.common.businessentities.VM vm) { vm.setStatisticsData(resourceManager.getVmManager(vm.getId()).getStatistics()); }
public boolean isUsbPolicyLegal(org.ovirt.engine.core.common.businessentities.UsbPolicy usbPolicy, int osId, java.util.List<java.lang.String> messages) { boolean retVal = true; if (UsbPolicy.ENABLED_LEGACY.equals(usbPolicy)) { if (osRepository.isLinux(osId)) { messages.add(EngineMessage.USB_LEGACY_NOT_SUPPORTED_ON_LINUX_VMS.toString()); retVal = false; } } return retVal; }
private java.util.List<org.ovirt.engine.core.common.businessentities.VM> searchVmsFromDb() { org.ovirt.engine.core.aaa.QueryData data = initQueryData(true); if (data == null) { return java.util.Collections.emptyList(); } java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = org.ovirt.engine.core.bll.SearchQuery.getDbFacade().getVmDao().getAllUsingQuery(data.getQuery()); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.SearchQuery.getDbFacade().getVmDao().getAllUsingQuery(data.getQuery()); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.SearchQuery.getDbFacade().getVmDao().getAllForQuery(dataCenter); if (data == null) { return java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = org.ovirt.engine.core.common.businessentities.VM vmBase.getQueryDataCenterId(data.getQuery()); if (data == null) { return java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = org.ovirt.engine.core.bll.SearchQuery.getQueryReturnValue(vm); if (vms!= null) { return java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate>(); for (org.ovirt.engine.core.common.businessentities.VM vm : vms.getQueryReturnValue().getQueryReturnValue().getAllForQuery(vm.
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = org.ovirt.engine.core.bll.GetVmsRelatedToQuotaIdQuery.getDbFacade().getVmDao().getAllVmsRelatedToQuotaId(org.ovirt.engine.core.bll.GetVmsRelatedToQuotaIdQuery.getParameters().getId()); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { vmHandler.updateDisksFromDb(vm); vmHandler.updateVmInitFromDB(vm); vmHandler.updateVmInitFromDB(vm); } org.ovirt.engine.core.bll.GetVmsRelatedToQuotaIdQuery.fillImagesBySnapshots(vm); }
protected void addVmTemplateToDb() { getVmTemplate().setClusterId(getParameters().getClusterId()); if (!(vmHandler.validateDedicatedVdsExistOnSameCluster(getParameters().getClusterId()))) { getVmTemplate().setDedicatedVmForVdsList(java.util.Collections.emptyList()); } getVmTemplate().setStatus(VmTemplateStatus.Locked); getVmTemplate().setQuotaId(getParameters().getQuotaId()); vmTemplateDao.save(getVmTemplate()); getCompensationContext().snapshotNewEntity(getVmTemplate()); int count = 1; for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : getImages()) { image.setActive(true); org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap map = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.saveImage(image); getCompensationContext().snapshotNewEntity(image.getImage()); getCompensationContext().snapshotNewEntity(map); if (!(baseDiskDao.exists(image.getId()))) { image.setDiskAlias(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getSuggestedDiskAlias(image, getVmTemplateName(), count)); count++; baseDiskDao.save(image); } org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic diskDynamic = new org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic(); diskDynamic.setId(image.getImageId()); diskDynamic.setActualSize(image); } org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic diskDynamic = new org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic(); diskDynamic.setId(image.getImageId()); diskDynamic.setDiskAlias(image); diskDynamicDao.save(image); }
@java.lang.Override protected boolean validate() { if (!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.canRunActionOnNonManagedVm())) { return false; } if ((!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.isInternalExecution())) && (!(org.ovirt.engine.core.utils.ObjectIdentityChecker.canUpdateField(org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm(), "clusterId", org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm().getStatus())))) { addValidationMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } org.ovirt.engine.core.bll.ChangeVmClusterValidator validator = org.ovirt.engine.core.bll.ChangeVmClusterValidator(this, org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getClusterId(), org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getVmCustomCompatibilityVersion(), org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVmDeviceUtils())); return validator.validate(); }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsList = getVMs(); for (org.ovirt.engine.core.common.businessentities.VM vm : vmsList) { org.ovirt.engine.core.bll.GetAllVmsQueryBase.getQueryReturnValue().setReturnValue(vm); } org.ovirt.engine.core.bll.GetAllVmsQueryBase.getQueryReturnValue().setReturnValue(vmsList); }
protected void updateVMDetails(org.ovirt.engine.core.common.businessentities.VM vm) { vmHandler.updateDisksFromDb(vm); vmHandler.updateVmGuestAgentVersion(vm); vmHandler.updateVmGuestAgentVersion(vm); vmHandler.updateVmInitFromDB(vm.getStaticData(), true); vmHandler.updateNumaNodesFromDb(vm.getStaticData(), true); }
@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name", "storageDomain.id|name"); org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.common.action.ImportVmParameters params = new org.ovirt.engine.core.common.action.ImportVmParameters(getEntity(), parent.getStorageDomainId(), destStorageDomainId, parent.getDataCenterId(destStorageDomainId), getClusterId(action)); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive()? action.isExclusive() : false)); if (action.isSetAllowPartialImport()) { params.setAllowPartialImport(action.isAllowPartialImport()); } boolean collapseSnapshots = org.ovirt.engine.api.restapi.types.BackendStorageDomainVmResource.COLLSE_SNAPSHOTS, true, false); if (collapseSnapshots) { params.setCopyCollapse(collapseSnapshots); } setVolumesTypeFormat(action); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } return doAction(VdcActionType.ImportVm, params, action); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(name, clusterId, status, status, priorityCount, options, accessProtocols, transports, transports, transports, bricks, advancedDetails, snapshotsTypes, snapshotsTypes, snapshotsTypes,snapshotId); }
public void setArbiterCount(java.lang.Integer arbiterCount) { this.aggerCount = org.ovirt.engine.core.common.businessentities.VDSCommand<org.ovirt.engine.core.common.businessentities.VDS, org.ovirt.engine.core.common.businessentities.VDSGroup> attachmentsToVms = org.ovirt.engine.core.common.businessentities.VDSCommand.getVdsGroup(org.ovirt.engine.core.common.businessentities.VDSGroup.class); if (((org.ovirt.engine.core.common.businessentities.VmStatus) (other.getStatus())!= (org.ovirt.engine.core.common.businessentities.VmStatus.MigrationSupport.MES)) { this.messages = ((org.ovirt.engine.core.common.businessentities.VmStatus) (other.getVmStatus()) + ((org.ovirt.engine.core.common.businessentities.VmStatus.VmStatus) (other.getStatus())).getStatus())).getStatus(org.ovirt.engine.core.common.businessentities.VmStatus.UpVmStatus.Up)); } }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity)) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity other = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity) (obj)); return (((((((((java.util.Objects.equals(name, other.getName())) && (java.util.Objects.equals(clusterId, other.clusterId))) && ((volumeType) == (other.volumeType))) && ((status) == (other.status))) && ((status) == (other.status))) && ((status) == (other.status))) && (java.util.Objects.equals(replicationCount, other.strierCount))) && (java.util.Objects.equals(riderCount, other.riderCount))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(getOptions(), other.getOptions()))) && (org.ovirt.engine.core.common.utils.ObjectUtils.areSameElements(getOptions(), other.getOptions()))) && (org.ovirt.engine.core.common.utils.ObjectUtils.areSameElements(asynctasks, other.asynctasks))) && (org.ovirt.engine.core.common.utils.ObjectUtils.areSameElements(asynctasks, other.asyncTask))) && (org.ovirt.engine.core.common.utils.ObjectUtils.areSameElements(asynctasks, other.asyncTask))) && (org.ovirt.engine.core.common.utils.ObjectUtils.areSameElements(asynctasks, other.asyncTask))) && (org.ovirt.engine.core.common.utils.ObjectUtils.areSameElements(asyncTask, other.asyncTask))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsElements
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity)) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity other = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity) (obj)); return (((((((java.util.Objects.equals(id, other.id)) && (java.util.Objects.equals(volumeId, other.volumeId))) && (java.util.Objects.equals(serverId, other.serverId))) && (java.util.Objects.equals(brickDirectory, other.brickDirectory))) && (java.util.Objects.equals(brickOrder, other.brickOrder))) && (java.util.Objects.equals(brickOrder, other.brickOrder))) && (java.util.Objects.equals(asyncTask, other.asyncTask))) && ((status) == (other.status))) && (java.util.Objects.equals(isArrays))) && (java.util.Objects.equals(isArrays))) && (java.util.Objects.equals(isArrays))) && (java.util.Objects.equals(isArrays))) && ((status) == (other.isArrays))) && (java.util.Objects.equals(isArrays))) && (java.util.Objects.equals(isArrays))) && (java.util.Objects.equals(isArrays))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(isAsyncTask, other.isAsyncTask))) && (other.isAsyncTask))) && (java.util.Objects.equals(isAsyncTask))) && (other.isAsyncTask))) && (java.util.Objects.equals(isAsyncTask))) && (java.util.Objects.equals(isAsyncTask))) && (other.isAsyncTask))) && (java.
public void copyFrom(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick) { setId(brick.getId()); setVolumeId(brick.getVolumeId()); setVolumeId(brick.getVolumeId()); setServerId(brick.getServerId()); setBrickDirectory(brick.getBrickDirectory()); setBrickOrder(brick.getBrickDirectory()); setBrickOrder(brick.getBrickOrder()); setStatus(brick.getStatus()); setStatus(brick.getStatus()); setIsArbited(brick.getIsArbit()); }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((volumeId) == null? 0 : hostId.hashCode() : status.hashCode()); result = (prime * result)? 0 : asyncTask, isAsyncTask, isAsyncTask, isAsyncTask, isAsyncTask, isAsyncTask, isAsyncTask, isAsyncTask, isAsyncTask); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { return getCustomMapSqlParameterSource().addValue("id", volume.getId()).addValue("cluster_id", volume.getClusterId()).addValue("vol_name", volume.getName()).addValue("vol_type", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getVolumeType())).addValue("status", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getStatus())).addValue("replica_count", volume.getReplicaCount()).addValue("stripe_count", volume.getStripeCount()).addValue("dispe_count", volume.getStripeCount()).addValue("disperse_count", volume.getDisperseCount()).addValue("replay_count", volume.getRedundancyCount()).addValue("redundancy_count", volume.getRedundancyCount()).addValue("repo_count", volume.getArraysCount()); }
@java.lang.Override public void updateGlusterVolume(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { getCallsHandler().executeModification("UpdateGlusterVolume", getCustomMapSqlParameterSource().addValue("id", volume.getId()).addValue("cluster_id", volume.getClusterId()).addValue("vol_name", volume.getName()).addValue("vol_type", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getStatus())).addValue("status", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getStatus())).addValue("replica_count", volume.getReplicaCount()).addValue("stripe_count", volume.getStripeCount()).addValue("dispe_count", volume.getStripeCount()).addValue("disperse_count", volume.getDispatcherCount()).addValue("referrides_count", volume.getRedundancyCount()).addValue("repo_count", volume.getRedundancyCount()).addValue("repo_count", volume.getArraysCount())); }
public java.lang.Integer getArrays() { return org.ovirt.engine.core.common.businessentities.VDSCommand.getVdsGroupId(); }
@java.lang.Override public org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> getBatchMapper() { return new org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>() { @java.lang.Override public org.springframework.jdbc.core.namedparam.MapSqlParameterSource map(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity entity) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource paramValue = new org.springframework.jdbc.core.namedparam.MapSqlParameterSource().addValue("volume_id", entity.getVolumeId()).addValue("server_id", entity.getServerId()).addValue("brick_dir", entity.getBrickDirectory()).addValue("status", entity.getStatus().name()).addValue("id", entity.getId()).addValue("id", entity.getId()).addValue("is_arator", entity.getNetworkId()).addValue("is_arator", entity.getNetworkId()).addValue("is_arator", entity.getAsyncTaskId()).addValue("is_arator", entity.getAsyncTaskId()).addValue("task_id", entity.getAsyncTaskId().toString()).addValue("task_id", entity.getAsyncTaskId().toString()).addValue("task_id", entity.getAsyncTaskId().toString())); return paramValue; } }; }
@java.lang.Override protected void executeCommand() { log.info("Command: { log.info("CommandTransferImageTransfer entity for command '{}'", org.ovirt.engine.core.bll.storage.disk.image.TransportCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.TransportCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.Transportal.getParameters().getTransferSize()); imageTransferDao.save(entity); if (isImageSupplied()) { handleImageIsReadyForTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransportalImageCommand.getParameters().getTransferSize()); } else { if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); org.ovirt.engine.core.bll.storage.disk.image.TransmissionCommand.setSucceeded(false); } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransportalImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransmissionCommand.setSucceeded(true); } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.
protected boolean isImageSupplied() { return (((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId()) == null) || (!(org.ovirt.engine.core.bll.storage.disk.image.TransportMirroringImageCommand.getParameters().isEmpty()))) && (image.getImage().getImageId().equals(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId())); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionSubjects = new java.util.ArrayList<>(); if (!(org.ovirt.engine.core.bll.storage.disk.image.TransportalDiskImageCommand.isImageSupplied())) { listPermissionSubjects.add(new org.ovirt.engine.core.bll.storage.disk.image.TransmissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransmissionSubjectCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK)); } else { listPermissionSubjects.add(new org.ovirt.engine.core.bll.storage.disk.image.TransmissionSubject(actionType.getParameters().getImageId(), org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK)); } return listPermissionSubjects; }
@java.lang.Override protected boolean validate() { if (isImageSupplied()) { return validateImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransportCommand.getParameters().getImageId()); } else { if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType())!= (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { return validateCreateImage(); } else { return failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); } } }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster(); if (cluster == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID); return false; } if (!(cluster.supportsGlusterService())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_DOES_NOT_SUPPORT_GLUSTER); return false; } if (volume.getVolumeType().isDispersedType()) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CREATION_OF_DISPERSE_VOLUME_NOT_SUPPORTED); return false; } if (volumeNameExists(volume.getName())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CREATION_OF_DISPERSE_VOLUME_NOT_SUPPORTED); addValidationMessageVariable("volumeName", volume.getName()); return false; } if (((volume.getArbiterCount())!= 0) && (!(validate(createVolumeValidator().isRequicVolumeSupported(getCluster().getCompatibilityVersion())))) { return false; } if (((volume.getArbiterCount())!= 0) && (!(volume.getVolumeType().isReplicatedType())))) { return false; } if (((volume.getArbiterCount())!= 0) && (!(volume.getVolumeType().isReplicatedType()))) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SHOULD_BE_REPLICA_3_3_VOLUME); return false; } return validateBricks(volume); }
@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = CreateGlusterVolumeVDSCommand.getParameters().getVolume(); boolean isForce = CreateGlusterVolumeVDSCommand.getParameters().isForce(); boolean supportForceCreateVolume = org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterForceCreateVolumeSupported(CreateGlusterVolumeVDSCommand.getParameters().getClusterVersion()); uuidReturn = (supportForceCreateVolume)? CreateGlusterVolumeVDSCommand.getBroker().glusterVolumeCreate(volume.getName(), volume.getBrickDirectories().toArray(new java.lang.String[0])), volume.getReplicaCount(), volume.getStripeCount(), getTransportTypeArr(volume), isForce, volume.getArr(volume)); CreateGlusterVolumeVDSCommand.proceedProxyReturnValue(); if (CreateGlusterVolumeVDSCommand.getVDSReturnValue().getSucceeded()) { volume.setId(org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(uuidReturn.uuid)); setReturnValue(volume); } }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc glusterVolumeCreate(java.lang.String volumeName, java.lang.String[] brickList, int replicaCount, int stripeCount, java.lang.String[] transportList, boolean force, int transmit, int transmit, int stripeCount) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.create").withParameter("volumeName", volumeName).withParameter("bricklist", new java.util.ArrayList(java.util.Arrays.asList(brickList))).withParameter("replicaCount", replicaCount).withParameter("stripeCount", stripeCount).withParameter("transportList", new java.util.ArrayList(java.util.Arrays.asList(transportList))).withParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(response); }
public java.util.Map<java.lang.String, java.lang.Object> glusterVolumeCreate(java.lang.String volumeName, java.lang.String[] brickList, int replicaCount, int stripeCount, java.lang.String[] transport, boolean force, int transmit, int transmitOptions);
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc glusterVolumeCreate(java.lang.String volumeName, java.lang.String[] brickList, int replicaCount, int stripeCount, java.lang.String[] transportList, boolean force, int ejecterCount);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc glusterVolumeCreate(java.lang.String volumeName, java.lang.String[] brickList, int replicaCount, int stripeCount, java.lang.String[] transportList, boolean force, int transmit, int transmit, int[]{ int transportList, int bondCount) { try { if (transmiterCount == 0) { return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(vdsServer.glusterVolumeCreate(volumeName, brickList, replicaCount, replicaCount, transportList, transportList, force)); } else { return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(vdsServer.glusterVolumeCreate(volumeName, brickList, replicaCount, stripeCount, transportList, force, force, force, ejecterCount)); } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }
@java.lang.Override public void buildVmVirtioScsi() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.CONTROLLER, VmDeviceType.VIRTIOSCSI.getName()); java.util.Map<org.ovirt.engine.core.common.businessentities.storage.DiskInterface, java.lang.Integer> controllerIndexMap = org.ovirt.engine.core.utils.archstraint.ArchStrategyFactory.getStrategy(vm.getClusterArch()).run(new org.ovirt.engine.core.vdsbroker.architecture.GetControllerIndices()).run(new org.ovirt.engine.core.vdsbroker.architecture.GetControllerIndices()).run(new org.ovirt.engine.core.vdsbroker.architecture.GetControllerIndices()).run(new org.ovirt.engine.core.vdsbroker.architecture.GetControllerIndices()).run(new org.ovirt.engine.core.vdsbroker.architecture.GetControllerIndices()).run(new org.ovirt.engine.core.vdsbroker.architecture.GetControllerIndices()).run(VmDeviceGeneralType.CONLLER, VmDeviceGeneralType.CONTRO.getValue()); struct.put(VdsProperties.Device, VdsProperties.Scsi); struct.put(VdsProperties.Index, VdsProperties.VirtioScsi); struct.put(VdsProperties.Index, java.lang.Integer.toString(irtioScsiIndex)); vmInfoBuilder.addAddress(vmDevice, null); }
public void updateVmDevices(org.ovirt.engine.core.common.action.VmManagementParametersBase params, org.ovirt.engine.core.common.businessentities.VM oldVm) { org.ovirt.engine.core.common.businessentities.VmBase oldVmBase = oldVm.getStaticData(); org.ovirt.engine.core.common.businessentities.VmBase newVmBase = params.getVmStaticData(); if (newVmBase == null) { return; } updateCdPath(oldVmBase, newVmBase); updateBootOrder(oldVmBase, newVmBase); updateBootOrder(oldVmBase, newVmBase); updateGraphicsDevices(oldVmBase, newVmBase); updateMemoryBalloon(newVmBase, newVmBase, newVmBase, newVmBase); updateMemoryBalloon(newVmBase, newVmBase, newVmBase, params.isSoundDeviceEnabled()); updateSmartcardDevice(newVmBase.getId(), params.isSoundDeviceEnabled()); updateSmartcardDevice(newVmBase.getId(), params.isSoundDeviceEnabled()); int i = (getVmBase().getId())? newVmBase.getId(), params.isSoundDeviceEnabled()); int i++) { updateVirtioScsiController(newVmBase.getId(), params.getNumOfIoThreads().getcompatibilityVersion(), params.getVirtioScsiEnabled()); } }
public boolean validate() { getReplicaCount().setIsValid(true); getStripeCount().setIsValid(true); if (getReplicaCount().getIsAvailable()) { org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation replicaCountValidation = new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation(); replicaCountValidation.setMinimum(2); replicaCountValidation.setMaximum(16); getReplicaCount().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), replicaCountValidation }); } if (getStripeCount().getIsAvailable()) { org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation stripeCountValidation = new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation(); stripeCountValidation.setMinimum(4); stripeCountValidation.setMaximum(16); getReplicaCount().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), stripeCountValidation }); } return (((getReplicaCount().getIsValid()) && (getStripeCount().getIsValid())) && (getArbiterVolume().getIsValid()); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Arrors of the cluster with replica count 3") java.lang.String arbiterVolumeShouldBeReplicaCount();
public static boolean glusterVolumeSupported(org.ovirt.engine.core.compat.Version version) { return (Version.v4_0.compareTo(version)) <= 0; }
private void onAddBricksInternal() { org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickModel volumeBrickModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickModel) (getWindow())); cancelConfirmation(); if (!(volumeBrickModel.validate())) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType selectedVolumeType = getTypeList().getSelectedItem(); if (selectedVolumeType.isReplicatedType()) { getReplicaCount().setEntity(volumeBrickModel.getReplicaCount().getEntity()); } if (selectedVolumeType.isStripedType()) { getStripeCount().setEntity(volumeBrickModel.getStripeCount().getEntity()); } java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>> brickList = new java.util.ArrayList<>(); brickList.addAll(volumeBrickModel.getBricks().getItems()); volumeBrickList.add(volumeBrickModel.getBricks().getItems()); volumeBrickModel.getBricks().setItems(null); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>> brickListModel = new org.ovirt.engine.ui.uicommonweb.models.EntityModel(); brickListModel.setItems(brickList); brickListModel.setSelectedItems(brickList); setForceAddBricks(volumeBrickModel); setForceAddBricks(volumeBrickModel); setForceAddBricks(volumeBrickModel); setForceAddBricks(volumeBrickModel); setForceAddBricks(volumeBrickModel); setForceAddBricks(volumeBrickModel); setForceAddBricks(brickList); setForceAddBricks(brickList); set
private void updateArrays() { getArrays().setIsAvailable(((getTypeList().getSelectedItem().getSelectedItem())!= null) && (org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterFeaturesUtil.glusterArrays.glusterArrays.glusterArchitecture(getCluster().getSelectedItem().getCompatibilityVersion())))); }
protected void addStyles() { volumeTypeEditor.addContentWidgetContainerStyleName(style.editorContentWidget()); replicaCountEditor.addContentWidgetContainerStyleName(style.editorContentWidget()); stripeCountEditor.addContentWidgetContainerStyleName(style.editorContentWidget()); stripeerVolumeEditor.addContentWidgetContainerStyleName(style.editorContentWidget()); forceEditor.addContentWidgetContainerStyleName(style.forceEditorWidget()); }
private void clusterSelectedItemChanged() { setBricks(new org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>>()); if ((getCluster().getSelectedItem())!= null) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster().getSelectedItem(); updateArbitos(cluster.getSelectedItem().getId()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isAnyHostUpInCluster(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { if (!(getCluster().getSelectedItem().getId().equals(cluster.getId()))) { return; } if (((java.lang.Boolean) (returnValue))) { getAddBricksCommand().setIsExecutionAllowed(true); setMessage(null); } else { getAddBricksCommand().setIsExecutionAllowed(true); setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().volumeEmptyClusterValidationMsg()); } } }), cluster.getName()); } else { getAddBricksCommand().setIsExecutionAllowed(false); setMessage(null); } }
public boolean check(final org.ovirt.engine.core.common.businessentities.VDS host) { final int checks = (org.ovirt.engine.core.bll.host.HostSetupNetworksChecker.VDSM_RESPONSIVENESS_PERIOD_IN_SECONDS) / (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.SetupNetworksPollingTimeout)); org.ovirt.engine.core.bll.network.host.HostSetupNetworksChecker.log.info("Engine managed to communicate with VDSM agent on host '{}' ({}'", host.getName(), host.getId()); return true; }
public void setDefaultInterface() { org.ovirt.engine.core.compat.Guid vmId = getVmId(); if ((org.ovirt.engine.core.compat.Guid.isNullOrEmpty(vmId)) || ((getDisk()) == null)) { getDiskInterface().setSelectedItem(DiskInterface.VirtIO_SCSI); } else { getDiskInterface().setSelectedItem(getDisk().getDiskVmElementForVm(vmId).getDiskInterface()); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (windowPropertyNames.contains(propName)) { handleWindowModelChange(source, windowPopup.get(propName), false, propName); } else if (confirmWindowPropertyNames.contains(propName)) { handleWindowModelChange(source, confirmWindowPopup, true, propName); } }
protected <T extends org.ovirt.engine.ui.uicommonweb.models.Model> void revealAndAssignPopup(T model, org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<T,?> popup, boolean isConfirm, java.lang.String window) { revealPopup(model, popup); if (isConfirm) { confirmWindowPopup = popup; } else { windowPopup.put(modelPropertyName, popup); } }
@java.lang.SuppressWarnings("unchecked") void handleWindowModelChange(M sourceModel, org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?,?> currentPopup, boolean isConfirmation, java.lang.String propertyName) { org.ovirt.engine.ui.uicommonweb.models.Model windowModel = (isConfirmation)? popupResolver.getConfirmWindowModel(sourceModel, propertyName) : popupResolver.getWindowModel(sourceModel, propertyName); if ((windowModel!= null) && (currentPopup == null)) { org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?,?> newPopup = null; org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand = sourceModel.getLastExecutedCommand(); if (windowModel instanceof org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) { newPopup = popupResolver.getConfirmModelPopup(sourceModel, lastExecutedCommand); if ((newPopup == null) && ((defaultConfirmPopupProvider)!= null)) { newPopup = defaultConfirmPopupProvider.get(); } } else { newPopup = popupResolver.getModelPopup(sourceModel, lastExecutedCommand, windowModel); } } else { newPopup = popupResolver.getModelPopup(sourceModel, ((org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<org.ovirt.engine.ui.uicommonweb.models.Model,?>() : newPopupPresenterWidget, windowModel); } } else if ((windowModel == null) && (currentPopup!= null)) { popupResolver.clearWindowModel(sourceModel, propertyName); } }
protected void hideAndClearPopup(org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?> popup, boolean isConfirm, java.lang.String windowPropertyName) { popup.hideAndUnbind(); if (isConfirm) { confirmWindowPopup = null; } else { windowPopup.put(org.ovirt.engine.ui.common.presenter.AbstractModel.class, null); } }
void hideAndClearAllPopups() { if ((confirmWindowPopup)!= null) { hideAndClearPopup(confirmWindowPopup, true, null); } for (java.util.Map.Entry<java.lang.String, org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?>> popupPair : windowPopup.entrySet()) { if ((popupPair.getValue())!= null) { hideAndClearPopup(popup.getValue(), false, popupPair.getKey()); } } }
public void addDialogModelListener(final M source) { hideAndClearAllPopups(); source.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (windowPropertyNames.contains(propName)) { handleWindowModelChange(source, windowPopup.get(propName), false, propName); } else if (confirmWindowPropertyNames.contains(propName)) { handleWindowModelChange(source, confirmWindowPopup, true, propName); } } }); }
@org.junit.Test public void testEmptySignKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.utils.StringHelperTest.string2Map(org.ovirt.engine.core.utils.StringHelperTest.EMPTY_SIGN_KEY_VAL); assertEquals(1, map.size()); }
@org.junit.Test public void testOneKeyValidate() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.utils.StringHelperTest.string2Map(org.ovirt.engine.core.utils.StringHelperTest.ONE_KEY_VALID_VAL); assertEquals(1, map.size()); }
private java.util.Map<java.lang.String, java.lang.String> getAddressMapForScsiDisk(java.lang.String address, java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.lang.Integer> vmDeviceUnitMap, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, int controllerIndex, boolean reserveFirstAddress) { java.util.Map<java.lang.String, java.lang.String> addressMap; int availableUnit = vmInfoBuildUtils.getAvailableUnitForScsiDisk(vmDeviceUnitMap, reserveFirstAddress); if (org.apache.commons.lang.StringUtils.isNotBlank(address)) { addressMap = org.ovirt.engine.core.utils.StringUtils.string2Map(address); int unit = java.lang.String.formatInt(addressMap.get(VdsProperties.Unit)); if (vmDeviceUnitMap.containsValue(unit)) { addressMap = vmInfoBuildUtils.createAddressForScsiDisk(controllerIndex, availableUnit); } } else { addressMap = vmInfoBuildUtils.createAddressForScsiDisk(controllerIndex, availableUnit); } updateVmDeviceAddress(addressMap.toString(), vmDevice); return addressMap; }
void addAddress(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.util.Map<java.lang.String, java.lang.Object> struct) { java.util.Map<java.lang.String, java.lang.Object> addressMap = org.ovirt.engine.core.utils.StringHelper.stringsToMap(vmDevice.getAddress()); if (!(addressMap.isEmpty())) { struct.put(VdsProperties.Address, addressMap); } }
public static org.ovirt.engine.core.vdsbroker.vdsbroker.IVdsServer createVdsServer(java.lang.String hostname, int port, int clientTimeOut, int connectionTimeOut, int clientRetries, int heartbeat) { org.apache.commons.httpclient.HttpClient client = org.ovirt.engine.core.vdsbroker.HttpUtils.getConnection(clientTimeOut, connectionTimeOut, clientRetries, org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsMaxTotalConnectionsPerHost), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.MaxTotalConnections)); java.lang.String eventQueue = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EventQueueName); return new org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EventQueueName); }
@org.junit.Test public void testEmptyKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.utils.StringHelperTest.string2Map(org.ovirt.engine.core.utils.StringHelperTest.EMPTY_KEY_VAL); assertEquals(2, map.size()); }
public static org.apache.commons.httpclient.HttpClient getConnection(int clientTimeOut, int connectionTimeOut, int clientRetries, int clientRetries, int maxTotalConnections, int maxTotalConnections) { org.apache.commons.httpclient.params.HttpConnectionManagerParams params = new org.apache.commons.httpclient.params.HttpConnectionManagerParams(); params.setConnectionTimeout(connectionTimeOut); params.setDefaultMaxTotalConnections(maxTotalConnectionsPerHost); params.setMaxTotalConnections(maxTotalConnections); org.apache.commons.httpclient.MultiThreadedHttpConnectionManager httpConnectionManager = new org.apache.commons.httpclient.MultiThreadedHttpConnectionManager(); httpConnectionManager.setParams(params); org.apache.commons.httpclient.HttpClient client = new org.apache.commons.httpclient.MultiThreadedHttpConnectionManager(); httpConnectionManager.setParams(params); org.apache.commons.httpclient.HttpClient client = new org.apache.commons.httpclient.HttpClient(httpConnectionManager); org.apache.commons.httpclient.HttpClientParams parameters = client.getParams(); parameters.setParameter(HttpMethodParams.RETRY_HANDLER, handler); return client; }
private void addAddress(java.util.Map<java.lang.String, java.lang.Object> map, java.lang.String address) { if (org.apache.commons.lang.StringUtils.isNotBlank(address)) { map.put(VdsProperties.Address, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>String(org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugNicVDSCommand.getParameters().getVmDevice().getAddress())); } }
private java.util.Map<java.lang.String, java.lang.Object> buildData() { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); java.util.Map<java.lang.String, java.lang.Object> memDeviceData = new java.util.HashMap<>(); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getParameters().getMemoryDevice(); data.put("vmId", org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getParameters().getMemoryDevice()); data.put("vmId", org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getParameters().getVmId().toString()); memDeviceData.put(VdsProperties.Type, vmDevice.getType().getValue()); if (org.apache.commons.lang.StringUtils.isNotBlank(vmDevice.getAddress())) { memDeviceData.put(VdsProperties.Address, org.ovirt.engine.core.common.utils.StringHelper.string2Map(vmDevice.getAddress())); } memDeviceData.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); memDeviceData.put(VdsProperties.DeviceId, vmDevice.getSpecParams()); memDeviceData.put("size", vmDevice.getSpecParams().get("size")); data.put("node", memDevice.getSpecParams().get("node")); return data; }
@org.junit.Test public void testMulKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.utils.StringHelperTest.string2Map(org.ovirt.engine.core.utils.StringHelperTest.MUL_KEY_VAL); assertEquals(4, map.size()); }
@org.junit.Test public void testNullKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.utils.StringHelperTest.string2Map(org.ovirt.engine.core.utils.StringHelperTest.NULL_KEY_KEY_VAL); assertEquals(0, map.size()); }
protected org.ovirt.engine.core.bll.ValidationResult validateMountOptions() { java.lang.String mountOptions = org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.getConnection().getMountOptions(); if (org.apache.commons.lang.StringUtils.isBlank(mountOptions)) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.util.List<java.lang.String> disallowedOptions = ((org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.getConnection().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.POSIXFS))? org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.POSIX_MANAGED_OPTIONS : org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.NFS_MANAGED_OPTIONS; java.util.Map<java.lang.String, java.lang.String> optionsMap = org.ovirt.engine.core.utils.StringUtils.string2Map(mountOptions); java.util.Set<java.lang.String> optionsKeys = org.ovirt.engine.core.utils.StringUtils.string2Map(mountOptions); java.util.Set<java.lang.String> optionsKeys = new java.util.HashSet<>(); for (java.lang.String option : optionsMap.keySet()) { optionsKeys.add(option.toLowerCase()); } optionsKeys.retainAll(disallowedOptions); if (!(optionsKeys.isEmpty())) { addValidationMessageVariable("invalidOptions", org.apache.commons.lang.StringUtils.join(optionsKeys, ", ")); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VALIDATION_STORAGE_CONNECTION_MOUNT_OPTIONS_CONTAINS_MANAGED_MANAGED_PROPERTY); } return org.ovirt.engine.core
public static java.util.Map<java.lang.String, java.lang.String> string2Map(java.lang.String str) { java.util.Map<java.lang.String, java.lang.String> map = new java.util.HashMap<>(); if (str!= null) { str = str.trim(); if (str!= null) { str = str.trim(); if (str.startsWith("{})) { str = str.substring(1, ((str.length()) - 1)); } if (str.endsWith("})) { str = str.substring(0, ((str.length()) - 1)); } if ((str.length()) > 0) { java.lang.String[] keyValPairs = str.split(org.ovirt.engine.core.utils.StringHelper.PAIRS_SEPARATOR); for (java.lang.String pair : keyValPairs) { java.lang.String[] keyval = pair.split(org.ovirt.engine.core.utils.StringHelper.KEY_VALUE_SEPARATOR); if ((keyval.length) == 2) { map.put(keyval[0].trim(), keyval[1].trim()); } else if ((keyval.length) == 1) { map.put(keyval[0].trim(), "); } } } } return map; }
@javax.annotation.PostConstruct protected final org.ovirt.engine.core.common.action.PostConstruct protected void postConstruct() { if (!(isCompensationContext())) { initCommandBase(); } }
private boolean searchForDuplicatesWithExistingVmDevices(org.ovirt.engine.core.common.businessentities.VmDevice vmDeviceToHotplug) { java.lang.String deviceAddress = vmDeviceToHotplug.getAddress(); if (org.apache.commons.lang.StringUtils.isEmpty(deviceAddress)) { return false; } java.util.Map<java.lang.String, java.lang.String> addressMapToHotplug = org.ovirt.engine.core.bll.network.vm.ActivateDeactivateDeactivateVmNicCommand.getVm().getVmDeviceByVmId(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVm().getId()); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> allVmDevices = vmDeviceDao.getVmDeviceByVmId(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVm().getId()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : allVmDevices) { if (!(vmDeviceToHotplug.getId().equals(vmDevice.getId()))) { java.util.Map<java.lang.String, java.lang.String> deviceAddressMap = org.ovirt.engine.core.utils.StringUtils.string2Map(vmDevice.getAddress()); if (deviceAddressMap.equals(addressMapToHotplug)) { return true; } } } return false; }
protected void initTooltip() { tooltip = new org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip(getContents()); tooltip.setPlacement(Placement.BOND); java.lang.String tooltipContent = org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkItemPanel.infoPopup.getTooltipContent(item, this); if (tooltipContent!= null) { tooltip.setHtml(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(tooltipContent)); } }
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetDifferentlyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoragedMacPoolFactoryFactoryFactoryFactoryFactory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockObjectFactorySpy); org.ovirt.engine.core.bll.network.macpool.MacPool decorator = builder.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorA)); org.ovirt.engine.core.bll.network.macpool.MacPool decorator.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorB)); org.mockito.ArgumentCaptor<java.util.concurrent.Lock> captor1 = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(ldap, times(2)).createLockingInstance(eq(eq(java.util.concurrent.locks.ReentrantReadWriteLock.class); }
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetEquallySamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoragedMacPoolFactoryFactoryFactoryFactoryFactory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockObjectFactorySpy); org.ovirt.engine.core.bll.network.macpool.MacPool decorator = builder.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorA)); org.ovirt.engine.core.bll.network.macpool.MacPool decorator.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorA)); assertThat(candidatePool1, is(macPoolDecoratorA)); assertThat(ldatedObjectFactorySpy, times(2)).createLockingInstance(eq(macPool), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any(org.ovirt.engine.core.bll.network.macpool.MacPool.MacPool.class), any(org.ovirt.engine.core.bll.network.macpool.MacPool.MacPool.class), any(eq(macPool), any(org.ovirt.engine.core.bll.network.macpool.MacPool.MacPool.class), any(eq(macPool, null)); }
public void performPendingOperations() { java.util.Queue<java.util.concurrent.Future<?>> operations = pendingOperations; pendingOperations = new java.util.concurrent.ConcurrentLinkedQueue<>(); operations.forEach(task) { if (task instanceof java.util.concurrent.FutureTask) { ((java.util.concurrent.FutureTask<?>) (task)).run(); } else { org.ovirt.vdsm.jsonrpc.client.utils.ReactorScheduler.log.error("The task type in the queue '{}'", task); } }
public void refreshVdsStats() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.DebugTimerLogging)) { org.ovirt.engine.core.vdsbroker.monitor.HostMonitoring.log.debug("HostMonitoring entered, host='{}' ({})", vds.getName(), vds.getId()); } fetchHostInterfaces(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue statsReturnValue = resourceManager.runVdsCommand(VDSCommandType.GetStats, new org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVdsVDSCommandParametersBase(vds)); if ((!(statsReturnValue.getSucceeded())) && ((statReturnValue.getExceptionObject())!= null)) { org.ovirt.engine.core.vdsbroker.monitor.HostMonitoring.log.error("Vds stats, host = '{}' ({}' ({}): {}", vds.getName(), vds.getId(), statsReturnValue.getExceptionString()); throw statsReturnValue.getExceptionObject(); } getVdsEventListener().updateSchedulingStats(vds); updateV2VJobs(); saveVJobs(); saveVdsDynamic = vdsManager.checkIfStatisticChanged(vds.getDynamicData()); alertIfLowDiskSpaceOnHost(); checkVdsInterfaces(); if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.DebugTimerLogging)) { org.ovirt.engine.core.vdsbroker.Monitoring.log.debug("vds::refreshVdsStats\n{}", this); } }
public void updateStatisticsData(org.ovirt.engine.core.common.businessentities.VdsStatistics statisticsData) { vdsStatisticsDao.update(statisticsData); cachedVds.setStatisticsData(statisticsData); cachedStatisticsData = statisticsData; }
public void refresh() { try { refreshVdsRunTimeInfo(); } finally { try { if (((firstStatus)!= (vds.getStatus())) && ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up))) { vdsManager.cancelRecoveryJob(); org.ovirt.engine.core.vdsbroker.monitor.HostMonitoring.log.debug("Host '{}' ({}) firing up event.", vds.getName(), vds.getId()); vdsManager.setIsSetNonOperationalExecuted((!(getVdsEventListener().vdsUpEvent(vds)))); saveVdsDynamic = vdsManager.checkIfStatisticChanged(vds.getDynamicData()); saveVdsStatistics = vdsManager.checkIfStatisticChanged(vds.getStatisticsData()); saveDataToDb(); } catch (java.lang.RuntimeException ex) { logFailureMessage("ResourceManager::refreshVdsRunTimeInfo:", ex); } catch (java.lang.RuntimeException ex) { logFailureMessage("ResourceManager::refreshVdsRunTimeInfo:", ex); } } }
private void moveVDSToMaintenanceIfNeeded() { if ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.PreparingForMaintenance)) { if (monitoringStrategy.canMoveToMaintenance(vds)) { org.ovirt.engine.core.common.businessentities.VdsDynamic dbVds = getDbFacade().getVdsDynamicDao().get(vds.getId()); vds.setMaintenanceReason(dbVds.getMaintenanceReason()); vdsManager.setStatus(VDSStatus.Maintenance, vds); saveVdsDynamic = vdsManager.checkIfDynamicDataChanged(vds.getDynamicData()); saveVdsStatistics = vdsManager.checkIfStatisticChanged(vds.getDynamicData()); saveVdsStatistics = vdsManager.checkIfStatisticChanged(vds.getStatisticsData()); org.ovirt.engine.core.vdsbroker.monitor.HostMonitoring.log.info("Host '{}' from '{}' in database, host '{}' ({}' (})", vds.getName(), vds.getId()); } else { vdsMaintenanceTimeoutOccurred = vdsManager.isTimeToRetryMaintenance(); } } }
private void beforeFirstRefreshTreatment(boolean isVdsUpOrGoingToMaintenance) { if (vdsManager.getbeforeFirstRefresh()) { boolean flagsChanged = false; final java.util.concurrent.atomic.AtomicBoolean processHardwareCapsNeededTemp = new java.util.concurrent.atomic.AtomicBoolean(); vdsManager.refreshCapabilities(processHardwareCapsNeededTemp, vds); flagsChanged = processHardwareCapsNeededTemp.get(); vdsManager.setbeforeFirstRefresh(false); refreshCapabilities = true; saveVdsDynamic = (processHardwareCapsNeeded)? processHardwareCapsNeeded : flagsChanged; } else if (isVdsUpOrGoingToMaintenance || ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Error))) { org.ovirt.engine.core.dal.dbbroker.Injector.injectMembers(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(vds.getId())); logable.addCustomValue("HostStatus", vds.getStatus().toString()); auditLog(logable, AuditLogType.VDS_DETECTED); } }
public void updateDynamicData(org.ovirt.engine.core.common.businessentities.VdsDynamic dynamicData) { vdsDynamicDao.update(dynamicData); cachedVds.setDynamicData(dynamicData); cachedVds.setDynamicData(dynamicData); }
private void saveDataToDb() { if (saveVdsDynamic) { vdsManager.updateDynamicData(vds.getDynamicData()); } if (saveVdsStatistics) { vdsManager.updateNumaData(vds); } if (saveVdsStatistics) { org.ovirt.engine.core.common.businessentities.VdsStatistics stat = vds.getStatisticsData(); vdsManager.updateStatisticsData(stat); vdsManager.updateStatisticsData(stat); checkVdsStatistics = stat); checkVdsStatistics(stat); checkVdsStatistics(stat); checkVdsSwapThreshold(stat); } if (!(statistics.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.bll.network.host.VdsNetworkStatisticsQuery(org.ovirt.engine.core.bll.network.host.VdsNetworkStatisticsQueryScopeOption.Required, new org.ovirt.engine.core.bll.AddVdsCommandTest.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.bll.network.UpdateVdsCommandTest.UpdateVdsNetworkInterfaceCommand.Required, new org.ovirt.engine.core.common.action.VdcActionParametersBase(), org.ovirt.engine.core.bll.AddVdsCommandBaseCommand.getParameters().getParameters().getStoragePoolId() { @java.lang.Override public void execute() { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = getDbFacade().getInterfaceDao().get(statistics); if (!(statuses.isEmpty())) { getDbFacade().getInterfaceDao().massUpdateStatisticsForVds(stat); } } } saveNumaStatisticsDataToDb(); } }
public org.ovirt.engine.core.common.HostUpgradeManagerResult checkForUpdates(org.ovirt.engine.core.common.businessentities.VDS host) { if (upCheckInProgressMap.getOrDefault(host.getId(), false)) { java.lang.String error = java.lang.String.format("Failed to refresh host '%s' packages availability, another refresh process, another refresh process."); org.ovirt.engine.core.bll.host.AvailableUpdatesFinder.log.warn(error); throw new java.lang.RuntimeException(error); } try { upgradeCheckInProgressMap.put(host.getId(), true); return create(host.getVdsType()).checkForUpdates(host.getId()); } finally { upgradeCheckInProgressMap.remove(host.getId()); } }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { log.debug("HttpSessionSsoPostLoginFilter"); javax.servlet.http.HttpServletRequest req = ((javax.servlet.http.HttpServletRequest) (request)); try { java.lang.String engineSessionId = ((java.lang.String) (req.getAttribute(SessionConstants.HTTP_SESSION_ENGINE_SESSION_ID_KEY))); if ((org.apache.commons.lang.StringUtils.isNotEmpty(EngineSessionId)) && ((req.getSession(false).getAttribute(SessionConstants.HTTP_SESSION_ENGINE_SESSION_ID_KEY)) { engineSessionId = ((java.lang.String) (req.getSession(EngineSessionId))); java.lang.String ssoToken = ((java.lang.String) (runQuery(EngineSessionId))); java.lang.String ssoToken = ((java.lang.String) (runQuery(VdcQueryType.GetEngineSessionIdToken, engineSessionId, engineSessionId, ctx); if (log.getSession(true).setAttribute(org.ovirt.engine.core.aaa.filteredQueryType.GetEngineSessionIdToken, getUserInfoObject(((org.ovirt.engine.core.common.businessentities.aaa.DbUser) (logoutInUser)), getUserInfoObject(((org.ovirt.engine.core.common.businessentities.aaa.DbUser) (loggedInUser)), getUserInfoObject(((org.ovirt.engine.core.common.businessentities.aaa.DbUser) (loggedInUser), getUserInfoObject(((org.ovirt.engine.core.common.businessentities.aaa.DbUser) (log.getUserBySessionId()), getUserInfoObject(((org.ovirt.engine.core.common.businessentities.aaa.DbUser) (log.getUser())))); } } } catch (java.lang.Exception e)
public java.util.List<org.ovirt.engine.core.common.businessentities.VmInit> getVmInitByIds(java.util.List<org.ovirt.engine.core.compat.Guid> ids) { java.util.List<org.ovirt.engine.core.common.businessentities.VmInit> all = vmInitDao.getVmInitByIds(ids); for (org.ovirt.engine.core.common.businessentities.VmInit vmInit : all) { vmInit.setPasswordAlreadyStored((!(org.apache.commons.lang.StringUtils.isEmpty(vmInit.getRootPassword())))); vmInit.setRootPassword(null); } return all; }
@java.lang.Override protected void executeQueryCommand() { if ((org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getIds())!= null) { org.ovirt.engine.core.bll.GetVmsInitQuery.getQueryReturnValue().setReturnValue(vmHandler.getVmInitByIds(org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getIds())); } }
@java.lang.Override public boolean test(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { return (disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.Disk.DiskStorageType.CINDER_DISK_ID); }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> getCinderDisksToBeRemoved() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> imageDisks = org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllVmCinderDisksCommand.getParameters().cinderDisks; java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = new java.util.ArrayList<>(); if (imageDisks == null) { cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllVmCinderDisksCommand.getParameters().getAllForVm(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllVmCinderDisksCommand.getVmId())); } else { for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : imageDisks) { cinderDisks.add(((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (diskImage))); } } return cinderDisks; }
@java.lang.Override protected void init() { super.init(); org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVmDao().get(getVmIdFromSnapshot()); org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(vm); boolean isCinderDisksExist =!(org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(vm.getDiskList()).isEmpty()); org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getParameters().setUseCinderCommandCallback(isCinderDisksExist); }
public boolean validateCinder() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVmId())); if (!(cinderDisks.isEmpty())) { org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator cinderDisksValidator = getCinderDisksValidator(cinderDisks); return validate(cinderDisksValidator.validateCinderDiskLimits()); } return true; }
public boolean validateCinder() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVmId())); if (!(cinderDisks.isEmpty())) { org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator cinderDisksValidator = getCinderDisksValidator(cinderDisks); return validate(cinderDisksValidator.validateCinderDiskSnapshotsLimits()); } return true; }
private void addRedundantCinderSnapshots(org.ovirt.engine.core.compat.Guid previewedSnapshotId, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesFromActiveSnapshot) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderImagesForPreviewedSnapshot = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getDiskImageDao().getAllSnapshotsForVmSnapshot(previewedSnapshotId)); java.util.Set<org.ovirt.engine.core.compat.Guid> criticalSnapshotsChain = getCriticalSnapshotsChain(imagesFromActiveSnapshot, cinderImagesForPreviewedSnapshot); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : cinderImagesForPreviewedSnapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> redundantSnapshotIdsToDelete = org.ovirt.engine.core.bll.storage.connection.CINDERStorageHelper.getRedundentitiesToDeleteAfterCommitSnapshot(image.getId(), criticalSnapshotsChain); snapshotsToRemove.addAll( redundantSnapshotIdsToDelete.stream().filter((snapshotIdToDelete) -> isSnapshotEligibleToBeDeleted(getSnapshotDao().get(snapshotDao().get(snapshotDao().get(snapshotDao().get(snapshotDao().get(snapshotDao().get(snapshotDao().get(snapshotDao().get(snapshotDao().get(snapshotDao().get(snapshotDao().get(snapshotDao().get(snapshotDao().get(snapshotDao().get(snapshotDao().get(snapshotDao().get(snapshotDao().get(snapshotDao().get(snapshotDao().get(snapshotDao().get(snapshotDao().
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getImagesToPreview() { if ((imagesToPreview) == null) { imagesToPreview = ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks())!= null)? org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks() : org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks())); java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> CinderImagesToPreview = org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getDbFacade().getDiskImageDao().getAllSnapshotsForVmSnapshot(getDstSnapshot().getId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> CinderImagesToPreview = org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getDbFacade().getDiskImageDao().getAllSnapshotsForVmSnapshot(getDstSnapshot().getId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderImagesToPreview = org.ovirt.engine.core.bll.snapshots.ImagesHandler.filterImageDisks(imagesToPreview); imagesToPreview = org.ovirt.engine.core.bll.snapshots.snapshots.OnlyVmCommand.getParameters().getSnapshotDao().getAllSnapshotsForVmSnapshot(org.ovirt.engine.core.bll.snapshots.snapshots.OnlyVmCommand.getParameters().getSnapshotId()); imagesToPreview.addAll(CinderImagesToPreview); } return imagesToPreview; }
@org.junit.Test public void testImportVMFromConfigurationXMLCouldNotGetParsed() { org.ovirt.engine.core.common.businessentities.OvfEntityData ovfEntity = getOvfEntityData(); ovfEntity.setOvfData("This is not a valid XML"); initCommand(ovfEntity); java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> ovfEntityDataList = new java.util.ArrayList<>(); ovfEntityDataList.add(ovfEntity); when(unregisteredOVFDataDao.getByEntityIdAndStorageDomain(vmId, org.ovirt.engine.core.bll.export.ImportVMFromConfigurationCommandTest.storageDomainId)).thenReturn(ovfEntityDataList); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), anyListOf(org.ovirt.engine.core.common.businessentities.OvfEntityData.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyList()); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_OVF_CONFIGURATION_NOT_SUPPORTED); }
protected boolean setAndValidateDiskProfiles() { if ((org.ovirt.engine.core.bll.ExportVmCommand.getParameters().getVm().getDiskMap())!= null) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> map = new java.util.HashMap<>(); java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = org.ovirt.engine.core.bll.export.ImportVmCommand.getParameters().getVm().getDiskMap().values(); if (org.ovirt.engine.core.bll.ExportVmCommand.getParameters().getAllowPartialImport()) { disks = disks.stream().filter((disk) -> getImages().stream().anyMatch((image) -> image.getId().equals(disk.getId()))).collect(java.util.Collections.toList()); } for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); map.put(diskImage, imageToDestinationDomainMap.get(diskImage.getId())); } } return validate(diskProfileHelper.setAndValidateDiskProfiles(map, org.ovirt.engine.core.bll.ExportVmCommand.getCurrentUser())); } return true; }
@org.junit.Test public void testImportVMFromConfigurationWhenStorageDomainIsInactive() { initCommand(getOvfEntityData()); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = createStorageDomain(); storageDomain.setStatus(StorageDomainStatus.Inactive); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyList())).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2)); }
@java.lang.Override protected boolean validate() { if (org.ovirt.engine.core.bll.ExportVmFromConfigurationCommand.isImagesAlreadyOnTarget()) { if (!(validateExternalVnicProfileMapping())) { return false; } if (!(validateMacs(vmFromConfiguration))) { return false; } org.ovirt.engine.core.bll.validator.ImportValidator importValidator = org.ovirt.engine.core.bll.ExportVmFromConfigurationCommand.getImportValidator(); if (!(validate(importValidator.validateUnregisteredEntity(vmFromConfiguration, ovfEntityData, org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getImages(), org.ovirt.engine.core.bll.ExportVmFromConfigurationCommand.getParameters().getAllowPartialImport(), imageToDestinationDomainMap)))) { return false; } setImagesWithStoragePoolId(org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.ExportVmFromConfigurationCommand.getVm().getImages()); } return super.validate(); }
@org.junit.Test public void testImportVMFromConfigurationWhenStorageDomainIsInMaintenance() { initCommand(getOvfEntityData()); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = createStorageDomain(); storageDomain.setStatus(StorageDomainStatus.Maintenance); doReturn(storageDomain).when(cmd).getStorageDomain(); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.StorageDomainStatus.class), anyListOf(org.ovirt.engine.core.common.businessentities.StorageDomainStatus.class), anyListOf(org.ovirt.engine.core.common.businessentities.StorageDomainStatus.class), anyListOf(org.ovirt.engine.core.common.businessentities.StorageDomainStatus.class), anyListOf(org.ovirt.
@org.junit.Test public void testPositiveImportVmFromConfiguration() { initCommand(getOvfEntityData()); doReturn(storagePool).when(cmd).getStoragePool(); doReturn(java.lang.Boolean.TRUE).when(cmd).validateAfterCloneVm(anyMapOf(org.ovirt.engine.core.compat.Guid.class, org.ovirt.engine.core.common.businessentities.StorageDomain.class)); doReturn(java.lang.Boolean.TRUE).when(cmd).validateBeforeCloneVm(anyMapOf(org.ovirt.engine.core.compat.Guid.class, org.ovirt.engine.core.common.businessentities.StorageDomain.class)); final org.ovirt.engine.core.common.businessentities.VM expectedVm = cmd.getVm(); when(externalVmMacsFinder.findExternalMacAddresses(eq(expectedVm), any(org.ovirt.engine.core.bll.context.CommandContext.class))).thenReturn(java.util.Collections.emptySet()); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(java.lang.Boolean.class), anyList()))).thenReturn(ValidationResult.VALID); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(cmd); }
public void performPendingOperations() { java.util.Queue<java.util.concurrent.Future<?>> operations = pendingOperations; pendingOperations = new java.util.concurrent.ConcurrentLinkedQueue<>(); while (!(operations.isEmpty()))) { ((java.util.concurrent.FutureTask) (operations.polledQueue.get(0))).run(); } }
@org.junit.Test public void testUpdate() { dao.save(vnicProfile); vnicProfile.setPortMirroring(true); vnicProfile.setPassthrough(true); vnicProfile.setMigratable(true); dao.update(vnicProfile); org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get(vnicProfile.getId()); assertNotNull(result); assertEquals(vnicProfile.getId(), result.getId()); assertTrue(result.isPassthrough()); assertTrue(result.isPassthrough()); }
@org.junit.Test public void testSave() { dao.save(vnicProfile); org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get(vnicProfile.getId()); assertNotNull(result); assertEquals(vnicProfile.getId(), result.getId()); assertFalse(result.isPortMirroring()); assertFalse(result.isPassthrough()); assertTrue(result.isMigratable()); }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((name) == null? 0 : name.hashCode()); result = (prime * result) + ((name) == null? 0 : name.hashCode()); result = (prime * result) + ((name) == null? 0 : description.hashCode()); result = (prime * result) + ((name) == null? 0 : description.hashCode()); result = (prime * result) + ((name) == null? 0 : description.hashCode()); result = (prime * result) + ((name) == null? 0 : description.hashCode()); result = (prime * result) + ((name) == null? 0 : description.hashCode()); result = (prime * result) + ((name) == null? 0 : description.hashCode()); result = (prime * result) + ((name) == null? 0 : description.hashCode()); result = (prime * result) + ((name) == null? 0 : description.hashCode()); result = (prime * result) + ((name) == null? 0 : description.hashCode()); result = (prime * result) + ((name) + ((name) == null? 0 : description.hashCode()); result) + ((name) + ((name) == null? 0 : description.hashCode()); result) + ((name) + ((name) + ((name) == null? 0 : description.getName()) == null? 0 : description.hashCode()); result.hashCode()); result = (prime * result) + ((name) + ((name) + ((name) + ((name) == null? 0 : description) + ((name) + ((name) == null? 0 : description) + ((name) + ((name) + ((name) + ((name) + ((name) == null? 0 : description) + ((name) + ((name) + ((name) + ((name) == null? 0 : description) + ((name) + (description) + ((name) + ((name) + ((description) + (description) + ((description) + ((description) + (description) + ((description) + (description) + (description) + (description) + (description) + ((description) + (description) + (description) + (description) + (description) +
@org.junit.Test public void testGetWithPassthrough() { org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get(FixturesTool.VM_NETWORK_INTERFACE_PASSTHROUGH_PROFILE); assertNotNull(result); assertEquals(FixturesTool.VM_NETWORK_INTERFACE_PASSTHROUGH_PROFILE, result.getId()); assertTrue(result.isPassthrough()); }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("id", getId()).append("networkId", networkId=").append(getNetworkId()).append(", networkQosId=").append(getNetworkQosId()).append(", portMirroring=").append(isPortMirroring()).append(", portMirroring=").append(isPassthrough()).append(", customProperties=").append(getCustomProperties()).append(", customProperties=").append(getCustomProperties()).append(", description=").build(); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.network.VnicProfile)) { return false; } org.ovirt.engine.core.common.businessentities.network.VnicProfile other = ((org.ovirt.engine.core.common.businessentities.network.VnicProfile) (obj)); return (((((((java.util.Objects.equals(customProperties, other.customProperties)) && (java.util.Objects.equals(id, other.id))) && (java.util.Objects.equals(name, other.name))) && (java.util.Objects.equals(networkId, other.networkId))) && (java.util.Objects.equals(networkQosId, other.networkQosId))) && ((migration) == (other.portMirroring))) && ((migratable) == (other.passthrough))) && ((migratable) == (other.migration))) && ((migratable) == (other.migration))) && ((migratable) == (other.migration))) && (java.util.Objects.equals(description, other.description)); }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getVnicProfileDao(); vnicProfile = new org.ovirt.engine.core.common.businessentities.network.VnicProfile(); vnicProfile.setId(org.ovirt.engine.core.compat.Guid.newGuid()); vnicProfile.setName("new_profile"); vnicProfile.setNetworkId(FixturesTool.NETWORK_ENGINE); vnicProfile.setNetworkQosId(FixturesTool.NETWORK_QOS); vnicProfile.setPortMirroring(false); vnicProfile.setPassthrough(false); vnicProfile.setMigratable(true); }
private org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface mockVnic(boolean passthrough, boolean migrate) { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = mock(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface.class); org.ovirt.engine.core.compat.Guid vnicId = org.ovirt.engine.core.compat.Guid.newGuid(); when(vnic.getId()).thenReturn(vnicId); when(vnic.isPassthrough()).thenReturn(passthrough); org.ovirt.engine.core.common.businessentities.network.VnicProfile profile = mock(org.ovirt.engine.core.common.businessentities.network.VnicProfile.class); when(vnicProfileDao.get(vnicId)).thenReturn(migratable); when(profile.isMigratable()).thenReturn(migratable); return vnic; }
@org.junit.Test public void allPassthroughVnicsMigratableNoPassthroughVnics() { allPassthroughVnicsMigratableCommon(vm.getId(), 2); assertThat(true); }
public org.ovirt.engine.core.bll.ValidationResult allPassthroughVnicsMigratable() { for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics = getDbFacade().getVmNetworkInterfaceDao().getAllForVm(vm.getId()); java.util.List<java.lang.String> nonMigratablePassthroughVnicNames = vnics.stream().filter(isVnicMigratable(vm).unlessVnicMigratable(vmNic::getName).collect(vmNic::getName).collect(java.util.stream.Collectors.toList()); if (!(nonMigratablePassthroughVnicNames.isEmpty())) { java.util.Collection<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.replaceWith("interfaces", nonMigratablePassthroughVnicNames); replacements.add(java.lang.String.format("$%s %s", vm.getName())); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_MIGRATION_OF_NON_MIGRATABLE_PASSTHROUGH_VNICS_IS_NOT_SUPPORTED, replacements); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> isVnicMigratable(org.ovirt.engine.core.common.businessentities.VM vm) { return (vnic) ->!(vnic.isPassthrough())) || ((org.ovirt.engine.core.common.FeatureSupported.sriovirt.engine.core.common.businessentities.VmNetworkInterfaceSupported.getVnicCompatibilityVersion())) && (getVnicProfile(vnic.getVnicProfile().isMigratable())); }
@org.junit.Test public void notAllPassthroughVnicsMigratable() { vmNotHavingPassthroughVnicsCommon(vm.getId(), 2, 3); assertThat(validator.allPassthroughVnicsMigratable(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_MIGRATION_OF_NON_MIGRATABLE_PASSTHROUGH_VNICS_IS_NOT_SUPPORTED)); }
@org.junit.Test public void allPassthroughVnicsMigratableMigratableMigratableMigratableMigratableMigratableMigratableMigratableMigratableMigratableMigratableMigratableMigratableMigratableMigratableMigratableMigratableMigratableMigratableMigratableMigratableMigratableMigratable() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = initValidatorWithMultipleVms(3); allPassthroughVnicsMigratableCommon(vmList.get(0).getId(), 0, 1, 8); allPassthroughVnicsMigratableCommon(vmList.get(2).getId(), 4); assertThat(validator.allPassthroughVnicsMigratable(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_MIGRATION_OF_NON_MIGRATABLE_PASSTHROUGH_VNICS_IS_NOT_SUPPORTED)); }
@org.junit.Test public void allPassthroughVnicsMigratableMigratableMigratableMigratableMigratableMigratableMigratableMigratableMigratableMigratableMigratableMigratableMigratable() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = initValidatorWithMultipleVms(2); allPassthroughVnicsMigratableCommon(vmList.get(0).getId(), 8); assertThat(validator.allPassthroughVnicsMigratable(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
@org.junit.Test public void allPassthroughVnicsMigratable() { vmNotHavingPassthroughVnicsCommon(vm.getId(), 2, 3); assertThatAllPassthroughVnicsMigratable(true); }
@org.junit.Test public void allPassthroughVnics() { allPassthroughVnicsMigratableCommon(vm.getId(), 0); assertThatAllPassthroughVnicsMigratable(true); }
private void populateInventoryCache() throws org.ovirt.engine.ui.frontend.server.Tabboard.DailyTimeException { long startTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.gwt.Tabboard.logger.info(org.ovirt.engine.ui.frontend.server.Tabboard.Severity.INVALID, org.ovirt.engine.ui.frontend.server.Servlet.INVALID, org.ovirt.engine.ui.frontend.server.gwt.log.info.info.info.Constants.inject.InvokeCache.put(org.ovirt.engine.ui.frontend.server.server.TabTokenServlet.INVALID, info, 15, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.ui.frontend.server.Tabboard.Scheduler.log.debug("Invent msg", e); }
@java.lang.Override public void run() { runInventoryCache(); }
@javax.annotation.PreDestroy private void stopScheduledTasks() { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = org.ovirt.engine.core.common.businessentities.VDS.getVm().get(org.ovirt.engine.core.common.businessentities.VDSGroup.getVm().getId()); org.ovirt.engine.core.common.businessentities.VDS vr = ((org.ovirt.engine.core.common.businessentities.VmRngDevice) (getVm().getId())); disk.getVm().get(0); disk.getVm().setEntity(vf.getId()); org.ovirt.engine.core.common.businessentities.VmDynamic vm = ((org.ovirt.engine.core.common.businessentities.VmDynamic) (getVm().getId())); disk.setVm(id); disk.setVmId(id); disk.getVmId()); org.ovirt.engine.core.common.businessentities.VmDynamic.setVmId(new org.ovirt.engine.core.common.businessentities.VmDynamicData(vm.getId()); disk.setVmId(true); disk.getVmId()); }
private void populateDashboardCache() throws org.ovirt.engine.ui.frontend.server.gwt.core.backend.TabDiskDataException { long startTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.Tabboard dashboard = getDashboard(); long endTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.gwt.logger.warn("The value - start time - start time", java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.ui.frontend.server.logger.warn("Finished event: {}", (endTime - startTime)); }
private org.ovirt.engine.ui.frontend.server.dbbroker.DbFacade getDashboardFromCache() throws org.ovirt.engine.ui.frontend.server.gwt.core.backend.server.TabKeyException { org.ovirt.engine.ui.frontend.server.Tabboard.logger.error("The hash:Lock"); org.ovirt.engine.ui.frontend.server.inject.Invoke invoker = org.ovirt.engine.ui.frontend.server.analyze.TraceCache.get(org.ovirt.engine.ui.frontend.server.feedbackend.DashboardDataServlet.UTILIZATION_KEY); if (snapshot == null) { org.ovirt.engine.ui.frontend.server.TabKeyServlet.log.debug("The value is empty, comparying data directly"); } else if (org.ovirt.engine.ui.frontend.server.dataprovider.Dashboard.in.inject.get(org.ovirt.engine.ui.frontend.server.gwt.branding.AAA_KEY_KEY_KEY)) { if (org.ovirt.engine.ui.frontend.server.gwt.branding.TabKeyVmockCache.get(org.ovirt.engine.ui.frontend.server.server.DashboardDataServlet.INITORY_KEY)) { if (org.ovirt.engine.ui.frontend.server.gwt.header.MaintenanceCache.get(org.ovirt.engine.ui.frontend.server.server.DashboardDataServlet.INITORY_KEY); } } else { org.ovirt.engine.ui.frontend.server.dataprovider.AsyncDataServlet.log.debug("Inventory cache is empty, query"); } }
@java.lang.Override public void run() { log.debug("Attempting to update the Status cache"); try { populateDashboardCache(); } catch (org.ovirt.engine.ui.frontend.server.gwt.logger.error("Error while e) { log.error("Could not update the dashboard cache: {}", e.getMessage(), e.getMessage(), e.getMessage(), e.getMessage(), e.getMessage()); e.setMessage(e.getMessage()); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { updateSysprepVisibility(object); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { updateCloudInitVisibility(object); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getParentCommand()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand((org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().isCreateImage()? org.ovirt.engine.core.common.vdscommands.VDSCommandType.CreateImage : org.ovirt.engine.core.common.vdscommands.VDSCommandType.CreateSnapshot), getCreateVDSCommandParameters()); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().setVdsmTaskIds(new java.util.ArrayList()); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().setVdsmTaskIds(new java.util.ArrayList()); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getVdsmTaskIds().add(createTask(taskId, vdsReturnValue.getCreationInfo(), org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getParentCommand(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainer.getParameters().getStorageDomainIds().get(0)); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getTaskIdList().add(org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getVdsmTaskIds().get(0)); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.setSucceeded(true); } }
@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { return (org.ovirt.engine.core.bll.AddVmFromTemplateCommand.getParameters().isUseCinderCommandCallback()) || (org.ovirt.engine.core.common.FeatureSupported.dataOperationsByHSM(org.ovirt.engine.core.bll.AddVmFromTemplateCommand.getStoragePool().getCompatibilityVersion()))? new org.ovirt.engine.core.bll.ConcurrentChildCommandsExecutionCallback() : null; }
@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { if (org.ovirt.engine.core.bll.CreateCloneOfTemplateCommand.isDataOperationsByHSM()) { return new org.ovirt.engine.core.bll.ConcurrentChildCommandsExecutionCallback(); } return null; }
private void updateVmStatistics() { statistics = getVmManager().getStatistics(); java.lang.Integer reportedMigrationProgress = vdsmVm.getStatistics().getMigrationProgressPercent(); boolean updateMigrationProgress = (reportedMigrationProgress == null) || (getVmManager().getVmCompatibilityVersion().getNumOfCpus(), updateMigrationProgress); }
@java.lang.Override public void onNext(java.util.Map<java.lang.String, java.lang.Object> map) { try { java.util.Map<java.lang.String, java.lang.Object> properties = ((java.util.Map<java.lang.String,?>) (vmInfo)).getValue())); java.util.Map<java.lang.String, java.lang.Object> properties = ((java.util.Map<?,?>) (vmInfo.getValue())); java.util.Map<java.lang.String, java.lang.Object> properties = ((java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Object>) (vmIds.getValue())); java.util.Map<java.lang.String, java.lang.Object> properties = ((java.util.Map<org.ovirt.engine.core.common.businessentities.VmStatistics>) (returnValue)); java.util.Map<org.ovirt.engine.core.common.businessentities.VmStatistics, java.util.List<org.ovirt.engine.core.common.businessentities.VmStatistics> list = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmStatistics>(); for (org.ovirt.engine.core.common.businessentities.VmStatistics vmStatistics : list) { org.ovirt.engine.core.common.businessentities.VmStatistics vmStatistics = ((java.util.List<org.ovirt.engine.core.common.businessentities.VmList<org.ovirt.engine.core.common.businessentities.VmStatistics>) (returnValue.getValue())); java.util.List<org.ovirt.engine.core.common.businessentities.VmStatistics> list = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmStatistics>(); for (org.ovirt.engine.core.common.businessentities.VmStatistics vmStatistics : map.values()) { list.entrySet().next().next().next().iterator().next(); } } }); } }
private void updateStaticFields(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { name = vmStatic.getName(); origin = vmStatic.getOrigin(); autoStart = vmStatic.isAutoStartup(); memSizeMb = vmStatic.getMemSizeMb(); minAllocatedMem = vmStatic.getMinAllocatedMem(); minAllocatedMem = vmStatic.getMinAllocatedMem(); numOfCpus = vmStatic.getNumOfCpus(); }
public org.ovirt.engine.core.compat.Version getVmCompatibilityVersion() { return clusterDao.get(clusterId).getId(); }
@java.lang.Override public void onBrowserEvent(com.google.gwt.cell.client.Cell.Context context, com.google.gwt.dom.client.Element parent, java.lang.Boolean value, com.google.gwt.safehtml.shared.SafeHtml tooltipHtml, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<java.lang.Boolean> valueUpdater) { java.lang.String tooltip; if (tooltipHtml == null) { tooltip = getTooltip(value); } else { tooltip = tooltipHtml.asString(); } org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltip, parent, value, event, event, value, valueUpdater); }
@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { if (tooltipContent == null) { tooltipContent = getTooltip(value); } if (BrowserEvents.MOUSEOVER.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltipContent.asString(), parent); } }
public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, com.google.gwt.safehtml.shared.SafeHtml tooltipHtml, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { java.lang.String tooltip; if (tooltipHtml == null) { tooltip = tooltipHtml.asString(); } else { tooltip = tooltipHtml.addTooltip(tooltip, parent); } org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltip, parent); if (BrowserEvents.MOUSEOVER.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltip, parent); } super.onBrowserEvent(context, parent, value, event, valueUpdater); }
private void updateKeyTitle(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel object) { java.lang.String selectedKey = ((java.lang.String) (object.getKeys().getSelectedItem())); if (selectedKey!= null) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(selectedKey, keyField.getElement()); } }
void attachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().add(alertPanel); com.google.gwt.dom.client.Element messageDivElement = alertPanel.getMessageAt(0).getElement(); if (org.ovirt.engine.ui.common.utils.ElementUtils.detectOverflowUsingScrollWidth(messageDivElement)) { com.google.gwt.safehtml.shared.SafeHtml tooltipContent = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(messageDivElement.getInnerText()); org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltipContent, alertPanel.asString(), alertPanel.getElement()); } }
protected void disableElement(com.google.gwt.dom.client.Element element) { element.getStyle().setProperty("disabled", "true"); element.getStyle().setColor("#9999"); if ((getNodeDisabled())!= null) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(getNodeDisabledTooltip(), element); } }
@java.lang.Override public void setTooltip(java.lang.String tooltip) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltip, getElement()); }
protected void updateInputTitle(java.util.ArrayList<java.lang.String> grayOutReasons, com.google.gwt.dom.client.Element input) { java.lang.StringBuilder title = new java.lang.StringBuilder(org.ovirt.engine.ui.common.widget.uicommon.storage.AbstractSanStorageList.constants.empty()); for (java.lang.String reason : grayOutReasons) { title.append(reason).append(org.ovirt.engine.ui.common.widget.uicommon.storage.AbstractSanStorageList.constants.space()); } org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(title.toString(), input); }
public void setContentWidgetContainerTooltip(java.lang.String tooltipText) { contentWidgetContainerConfiguredTooltip = tooltipText; contentWidgetContainer.setTitle(tooltipText); }
public void setText(java.lang.String text) { this.setTitle(text); }
public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { java.lang.String tooltip = ""; if (tooltipContent == null) { tooltipContent = getTooltip(value); } if (tooltipContent!= null) { tooltipContent = tooltipContent.asString(); } org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltip, parent, parent, value, event, event, valueUpdater); }
public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, java.lang.String value, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<java.lang.String> valueUpdater) { if ((tooltipContent == null) || (tooltipContent.asString().isEmpty())) { java.lang.String renderedTooltip = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(org.ovirt.engine.ui.webadmin.widget.table.column.AbstractEvent.constants.externalPanel()); } super.onBrowserEvent(context, parent, value, tooltipContent, event, valueUpdater); }
public void validate(java.util.List<java.lang.String> errors) { int rowCount = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowCount(); assert (errors!= null) && ((errors.size()) == rowCount) : ""; }
public static boolean hasHostsAvailableForHE(final org.ovirt.engine.core.dao.VdsDao vdsDao, final org.ovirt.engine.core.common.businessentities.VDS vds, final java.lang.Iterable<org.ovirt.engine.core.compat.Guid> vdDeserialInBatch) { java.util.Set<org.ovirt.engine.core.compat.Guid> vdsIds = new java.util.HashSet<>(); vdsIds = new java.util.HashSet<>(); vdsIds.add(vdsIds); return vdsDao.getAllForClusterWithStatus(vds.getId(), VDSStatus.Up).stream().filter((vds.getId())!= (vds.getId().equals(vds.getId()))).filter(vdsIds); }
@org.ovirt.engine.ui.webadmin.Source("images/host_ha_configured.png") com.google.gwt.resources.client.ImageResource haConfigured();
java.lang.String LdapConfiguredTooltip();
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepSession(java.lang.String jobId, java.lang.Object> imgInfo, java.util.Map<java.lang.String, java.lang.Object> volAttr) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.amend_volume").withParameter("jobId", jobId).withParameter("image_info", imgInfo).withParameter("vol_attributes", volAttr).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DiskFormat.class, to = java.lang.String.class) public static org.ovirt.engine.core.common.businessentities.storage.QowCompat map(org.ovirt.engine.api.model.QowVersion qowVersion, org.ovirt.engine.core.common.businessentities.storage.QowCompat template) { switch (qowVersion) { case QCOW2_V2 : return org.ovirt.engine.core.common.businessentities.storage.QowCompat.Qow2_V2_V2; case QCOW2_V3 : return org.ovirt.engine.core.common.businessentities.storage.QowCompat.Qow2_V3_2_2; case QCOW2_V3 : return org.ovirt.engine.core.common.businessentities.storage.QowCompat.QOW2_V3_2_2; default : return org.ovirt.engine.core.common.businessentities.storage.QowCompat.QOS; } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.QowVersion.class, to = java.lang.String.class) public static org.ovirt.engine.api.model.QowVersion map(org.ovirt.engine.core.common.businessentities.storage.QowCompat qowCompat, org.ovirt.engine.api.model.QowVersion template) { switch (qowCompat) { case QCOW2_V2 : return org.ovirt.engine.api.model.QowVersion.Qow2_V2_V2; case QCOW2_V3 : return org.ovirt.engine.api.model.QowVersion.QosSupported.QOSow2_V3; case QOS : return org.ovirt.engine.api.model.QowVersion.QOW2_V3_2_2; case QOS : return org.ovirt.engine.api.model.QoSModel.QosVersion.QOS; case QOS : return org.ovirt.engine.api.model.QowVersion.QosVersion.getQos().getV4V3_V3_2_2; default : return org.ovirt.engine.api.model.QosVersion.QosVersion.getQos().getVmQos().getV4V4V3_V3; default : return org.ovirt.engine.api.model.QosVersion.QosVersion.QosVersion.getQos().getV4V3_V3_V3_2; } }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepConfig(java.lang.String volumeName, java.lang.Object> imgInfo, java.util.Map<java.lang.String, java.lang.Object> volName, java.lang.Object[] volName);
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guid.get(2), isPostZero(), false)); }
protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue mergeSnapshots(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid storageDomainId) { org.ovirt.engine.core.common.vdscommands.MergeSnapshotsVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.MergeSnapshotsVDSCommandParameters(storagePoolId, storageDomainId, org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getVmId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDiskImage().getId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDiskImage().getImageId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDestinationDiskImage().getImageId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDestinationDiskImage().isWipeAfterDelete()); return runVdsCommand(VDSCommandType.MergeSnapshots, org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(params)); }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.class).fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guid.get(2), isPostZero(), false)); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(VdcActionType.RemoveVmTemplate); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.DeleteImageGroup, org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getWipeAfterDelete(), false))); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getReturnValue().getInternalVdsmTaskIdList().add(createTask(taskId, vdsReturnValue.getCreationInfo(), VdcActionType.RemoveVmTemplate, VdcObjectType.Storage, org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.setSucceeded(true); } }
private org.ovirt.engine.core.common.vdscommands.VDSParametersBase createVDSParameters() { return org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DestroyImageVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getImageGroupId(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getImageList(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().isPostZero(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().isForce())); }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryConfParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.class).fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guid.get(4), isPostZero(), false)); }
protected static <T extends org.ovirt.engine.core.common.vdscommands.StorageDomainIdParametersBase & org.ovirt.engine.core.common.vdscommands.ActionAfterDelete(T parameters, boolean isFileDomain) { if (isFileDomain) { parameters.setPostZero(false); } return parameters; }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryConfParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(4), isPostZero(), false)); }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue performImageVdsmOperation() { if (org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getParameters().isShouldLockImage()) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateAllDiskImageSnapshotsStatusWithCompensation(org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getRelevantDiskImage().getId(), ImageStatus.LOCKED, ImageStatus.ILLEGAL, org.ovirt.engine.core.bll.storage.disk.image.RemoveImageGroupCommand.getCompensationContext()); } return runVdsCommand(VDSCommandType.DeleteImageGroup, org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getDiskImage().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getDiskImage().isWipeAfterDelete(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getDiskImage().isWipeAfterDelete(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getDiskImage().isWipeAfterDelete()))); }
public static <T extends org.ovirt.engine.core.common.vdscommands.StorageDomainIdParametersBase & org.ovirt.engine.core.common.vdscommands.ActionAfterDelete> T fixParameters(T parameters) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainStaticDao().get(parameters.getStorageDomainId()); return org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(parameters, storageDomainStatic.getStorageType().isFileDomain()); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> imagesToText = getSafeHtmlStringMap(vm); if (!(imagesToText.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getTooltip(imagesToText); } return null; }
private java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> getSafeHtmlStringMap(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> res = new java.util.LinkedHashMap<>(); if ((vm.getVmPoolId()) == null) { org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig config = org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig.from(vm.getVmType(), vm.isStateless(), vm.isNextRunConfigurationExists()); res.put(getImageSafeHtml(config.getImageResource()), config.getTooltip()); } else { com.google.gwt.resources.client.ImageResource img = org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.from(vm.getVmType(), vm.getImageResource()), org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.resources.vmTypeColumn.constants.vm_type(), vm.getVmType())); } if (vm.isHostedEngine()) { res.put(getImageSafeHtml(org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.resources.mgmtNetwork()), org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.constants.mgmtNetwork()), org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.constants.mgmtNetwork())); } return res; }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getValue(org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData object) { return new org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn().getValue(object.getVm()); }
private com.google.gwt.safehtml.shared.SafeHtml getImageSafeHtml(com.google.gwt.safehtml.shared.SafeHtml safeHtml) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(imageResource).getHTML()); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getValue(java.lang.Object object) { return new org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn().getValue(((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData) (object)).getVm()); }
java.lang.String getVmHostedEngineTooltip();
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getValue(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.List<com.google.gwt.safehtml.shared.SafeHtml> imagesHtml = new java.util.ArrayList(getSafeHtmlStringMap(vm).keySet()); if (!(imagesHtml.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getValue(imagesHtml); } return null; }
public static java.util.Map<java.lang.String, java.lang.Object> authenticate(javax.servlet.http.HttpServletRequest req, java.lang.String scope) { org.apache.commons.client.methods.HttpPost request; try { request = org.ovirt.engine.core.aaa.SsooauthServiceUtils.createPostRequest(request); org.ovirt.engine.core.aaa.SsooauthServiceUtils.setClientIdSecretBasicAuthHeader(request); org.ovirt.engine.core.aaa.SsooauthServiceUtils.setClientIdSecret(org.apache.commons.http.Base.getUserCredentialsFromHeader(req)); form.add(new org.apache.commons.http.BaseNameValuePair(org.apache.commons.http.codec.Base.getUserCredentialsFromHeader(req)); form.add(new org.apache.commons.http.client.BasicNameValuePair(org.apache.commons.http.Base.class)); form.add(new org.ovirt.engine.core.aaa.SsooauthServiceUtils.getUserCredentialsFromHeader(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValuePair(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValuePair(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValuePair(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValuePair(form)); return org.ovirt.engine.core.aaa.SsoAuthzEncodedFormEntity(request); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsooauthServiceUtils.getResponse(request); } } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsooauthServiceUtils.getResponse(request); } }
private static org.ovirt.engine.core.common.businessentities.VmStatic createPostCreate(java.lang.String path) throws java.lang.Exception { org.ovirt.engine.core.common.config.Config config = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance(); java.lang.String base = config.getProperty("ENGINE_SSO_SERVICE_URL"); org.apache.commons.http.client.methods.HttpPost request = new org.apache.commons.http.client.method(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getConstants().getPath(), org.ovirt.engine.core.utils.servlet.HttpHeaders.httpHeaders.H_SERVICE_URL); request.setURI(new java.net.URI((base + path))); request.setHeader("Accept", "application/json"); request.setHeader("Content-X-www-www-urlencoded"); return request; }
private static java.util.Map<java.lang.String, java.lang.Object> search(java.lang.String token, java.util.Map<java.lang.String, java.lang.Object> params, java.lang.String queryType, java.lang.String queryType, java.lang.String queryType, java.lang.String scope) { org.apache.commons.http.client.methods.HttpHeaders.setClientIdSecret(4); org.apache.commons.http.client.BasicNameValuePair<org.ovirt.engine.core.aaa.SESSION_token.KeyValuePair> form = new java.util.ArrayList<>(4); form.add(new org.apache.commons.http.BasicNameValuePair(response); form.add(new org.apache.commons.http.MessageUtils.isNotEmpty(token))); form.add(new org.apache.commons.http.MessageUtils.isNotEmpty(token))); }
public static java.util.Map<java.lang.String, java.lang.Object> getTokenInfo(java.lang.String token, java.lang.String scope) { java.util.List<org.ovirt.engine.core.aaa.SsooauthServiceUtils.createPostParams(request); org.ovirt.engine.core.aaa.SsooauthServiceUtils.setClientIdSecretBasicAuthHeader(org.apache.commons.http.Message.Message.http.Base.class); java.util.List<org.ovirt.engine.core.aaa.SsoAuthUrlUtils.setTokenValuePair(2); java.util.List<org.ovirt.engine.core.aaa.SESSION_KEY, java.lang.String> form = new java.util.ArrayList<>(); org.ovirt.engine.core.aaa.entity.http.EntityUtils.setHeader(2); form.add(new org.apache.commons.http.entity.BasicNameValuePair(org.ovirt.engine.core.aaa.SessionUtils.getRequest(request)); java.util.Map<java.lang.String, java.lang.Object> jsonData = org.ovirt.engine.core.aaa.SsoAuthUrlUtils.getResponse(request); java.util.Map<java.lang.String, java.lang.Object> jsonData = org.ovirt.engine.core.aaa.SsooauthServiceUtils.getResponse(request); java.util.Map<java.lang.String, java.lang.Object> ovirtData = ((java.util.Collection<org.ovirt.engine.core.aaa.ProfileEntry>) (jsonData.get("group_ids"))); if (ovirt.engine.api.extensions.ExtMap.get(authData.get("ovirt")) { org.ovirt.engine.api.extensions.ExtMap.extensionsResourceUtils.get(group_ids, null)); } return null; }
public static java.util.Map<java.lang.String, java.lang.Object> getToken(java.lang.String grantType, java.lang.String code, java.lang.String redirectUri) { try { org.apache.commons.client.methods.HttpPost request = org.ovirt.engine.core.aaa.SsooauthServiceUtils.createPostRequest("/oauth/token"); org.ovirt.engine.core.aaa.SsoAuthUrlUtils.setClientIdSecret(4); org.ovirt.engine.core.aaa.SsoAuthUrlUtils.setClientIdSecret(4); form.add(new org.apache.commons.http.MessageParameters(response); return org.apache.commons.http.client.BasicNameValuePair(org.apache.commons.http.Message.Base.class, "provider_type", "); } catch (java.http.HttpNameValuePair(org.apache.commons.http.entity.HttpNameValuePair<org.ovirt.engine.core.aaa.entity.entity.AuthenticationMethod> form, org.ovirt.engine.core.aaa.AuthenticationMethodUtils.getRequest(formType(form)); return org.ovirt.engine.core.aaa.SsoAuthzEncodedFormEntity(request); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsooauthServiceUtils.getResponse(request); } }
private static java.util.Map<java.lang.String, java.lang.Object> loginWithPasswordImpl(java.lang.String username, java.lang.String password, java.lang.String scope, org.ovirt.engine.api.extensions.ExtMap authRecord) { try { org.ovirt.engine.core.aaa.SsoAuthUrlUtils.httpSessionUtils.setClientId(5); org.ovirt.engine.core.aaa.SsoAuthUrlUtils.setClientIdSecret(5); } catch (java.http.HttpSessionException ex) { org.apache.commons.http.MessageUtils.setHttpName(5); form.add(new org.apache.commons.http.BasicNameValuePair(5); form.add(new org.apache.commons.http.BasicNameValuePair(auth_type, "password"), password)); form.add(new org.apache.commons.http.BasicNameValuePair(auth_auth_record)); } request.add(new org.apache.commons.http.http.HttpNamePair(auth_record, new org.ovirt.engine.core.utils.serialization.JsonObjectSerializer().serialize(auth_record)); return org.ovirt.engine.core.aaa.SsoAuthzEncodedFormEntity(request); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsooauthServiceUtils.getResponse(request); } }
private static org.apache.commons.http.client.methods.HttpPost createPostCreate(java.lang.String url) throws java.lang.Exception { org.apache.commons.http.client.methods.HttpPost request = new org.apache.commons.http.client.methods.HttpPostRequest(); request.setURI(new java.net.HttpHeaders(url)); request.setHeader("Accept", "application/json"); request.setHeader("Content-url"); request.setHeader("Content-http-urlencoded"); return request; }
public static java.util.Map<java.lang.String, java.lang.Object> isSsoDeployed() { org.ovirt.engine.core.common.businessentities.status.HttpGetRequest request = org.ovirt.engine.core.aaa.SsooaOntoreGetRequestUtils.createGetRequest(request); return org.ovirt.engine.core.aaa.SsooauthServiceUtils.getResponse(request); }
private static void notifyClientOfLogoutEvent(org.ovirt.engine.core.utils.SsoContext ssoContext, java.lang.String clientId, java.lang.String token) throws java.lang.Exception { org.ovirt.engine.core.utils.Utils.ClientInfo clientInfo = ssoContext.getCloneInfo(clientId); java.lang.String url = clientInfo.getClientNotificationCallback(); if (org.apache.commons.lang.StringUtils.isNotEmpty(url)) { org.apache.commons.http.client.methods.HttpPost request = org.ovirt.engine.core.utils.MessageUtils.createPost(url); java.util.List<org.ovirt.engine.core.common.businessentities.aaa.BasicNameValuePair> form = new java.util.ArrayList<>(3); form.add(new org.apache.commons.http.MessageUtils.createPost(url); form.add(new org.apache.commons.http.client.BasicNameValuePair(3); form.add(new org.apache.commons.http.client.BasicNameValuePair(form)); org.ovirt.engine.core.utils.Serialization.execute(request, ssoContext, clientId); } }
private static java.util.Map<java.lang.String, java.lang.Object> getResponse(org.apache.commons.http.client.Methods.HttpUriRequest request) throws java.lang.Exception { try (org.apache.commons.http.client.Methods.CloseableHttpResponse response = org.ovirt.engine.core.aaa.SsooauthServiceUtils.execute(request)) { if ((response.getStatusLine().getStatusCode()) == (org.apache.commons.http.HttpStatus.SC_NOT_FOUND)) { throw new java.io.FileNotFoundException(); } try (java.io.ByteArrayOutputStream os = response.getEntity().getContent()) { try (java.io.ByteArrayOutputStream input = response.getEntity().getContent()) { org.ovirt.engine.core.aaa.filters.FiltersHelper.copy(input, os); } java.lang.ClassLoader loader = java.io.ByteArrayOutputStream.getContextClassLoader(); java.lang.Thread.currentThread().deserialize(new java.nio.charset.StandardCharsets.UTF_8.name()), java.util.HashMap.class); try { return new org.ovirt.engine.core.utils.Serialization.json.JsonObjectDeserializer().deserialize(new java.lang.String(os.toByteArray(), java.nio.charset.StandardCharsets.name()), java.util.HashMap.class); } finally { java.lang.String.currentThread().setContextClassLoader(loader); } } } }
public static java.util.Map<java.lang.String, java.lang.Object> revoke(java.lang.String token, java.lang.String scope) { try { org.apache.commons.client.methods.HttpPost request = org.ovirt.engine.core.aaa.SsooauthServiceUtils.createPostRequest("/oauth/novoke"); org.ovirt.engine.core.aaa.SsoAuthUrlUtils.setClientIdSecretBasicAuthHeader(org.apache.commons.http.Base.class); form.add(new org.apache.commons.http.BaseNameValuePair(2); return org.apache.commons.http.Base.getUrl(new org.apache.commons.http.BaseNameValuePair(base)); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsooauthServiceUtils.getResponse(request); } } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsooauthServiceUtils.buildMapWithError("server_error", ex); } }
@java.lang.Override public void rerun() { org.ovirt.engine.core.bll.RunVmCommand.upVmCommand.upDup(); setFlow(null); super.rerun(); }
protected void cleanupPassthroughVnics() { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> vnicToVfMap = getVnicToVfMap(); if (vnicToVfMap!= null) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> vnicToVfMap = org.ovirt.engine.core.bll.RunVmCommandBase.getVmId(); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> vfToVfMap = org.ovirt.engine.core.bll.RunVmCommandBase.getVmIdsHandler().getVmIdsForVfMap(org.ovirt.engine.core.bll.RunVmCommandBase.getVmId(), null, new java.util.HashSet(vnicToVfMap.values())); vfScheduler.cleanVmData(org.ovirt.engine.core.bll.RunVmCommandBase.getVmId()); } }
@java.lang.Override protected void runningFailed() { org.ovirt.engine.core.bll.RunVmCommand.upVmCommand.upDcachedVnics(); if (memoryFromSnapshotUsed) { removeMemoryFromActiveSnapshot(); } super.runningFailed(); }
@org.junit.Test public void shouldNotTryToMigrateWhenNotSchedulable() { when(schedulingManager.canSchedule(eq(cluster), any(org.ovirt.engine.core.common.businessentities.VM.class), anyList(), anyList(), any(org.ovirt.engine.core.common.businessentities.VM.class), anyList(), anyList(), anyList())).thenReturn(false); java.util.List<org.ovirt.engine.core.common.businessentities.VM> list = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM>(); for (org.ovirt.engine.core.common.businessentities.VM vm : cluster.getCluster())).thenReturn(cluster.getCluster().getSelectedCluster(cluster)).getCluster(cluster)).thenReturn(false); assertThat(enforcer.chooseNextVmToMigrate(cluster)).isNull(); }
@org.junit.Test public void shouldSelectFirstSchedulableFromCandidatePool() { affinityGroups.add(createAffinityGroup(cluster, true, vm1, vm2, vm6)); when(schedulingManager.canSchedule(eq(cluster), any(org.ovirt.engine.core.common.businessentities.VM.class), anyList(), any(org.ovirt.engine.core.common.businessentities.VM.class), anyList(), anyList(), any(org.ovirt.engine.core.common.businessentities.VM.class), anyList(), anyList(), any(org.ovirt.engine.core.common.businessentities.VM.class), anyList(), anyList(), anyList(), anyList(), anyList(), anyList(), anyList(), anyList(), anyList(), anyList()); verify(schedulingManager).canSchedule(eq(cluster), eq(vm5), anyList(), anyList(), anyList(), anyList()); }
protected void initParametersForPassthroughVnics() { org.ovirt.engine.core.bll.RunVmCommand.getVm().setPassthroughVnicToVfMap(org.ovirt.engine.core.bll.RunVmCommand.getVmId()); vfScheduler.cleanVmData(org.ovirt.engine.core.bll.RunVmCommand.getVmId()); }
protected java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> getVnicToVfMap() { org.ovirt.engine.core.compat.Guid hostId = org.ovirt.engine.core.bll.RunVmCommandBase.getVdsId(); if ((org.ovirt.engine.core.bll.RunVmCommandBase.getVmId()) == null) { return null; } return vfScheduler.getVnicToVfMap(org.ovirt.engine.core.bll.RunVmCommandBase.getVmId(), hostId); }
private void updateMetadataDevice() { org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().setMetadataDevice(metadataDevice); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().setMetadataDevice(metadataDevice); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.updateStaticDataDefaults(); metadataDevice = org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getMetadataDevice(); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().setMetadataDevice(null); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().setMetadataDevice(null); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.updateStorageDomainDynamicFromIrs(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = getLUNsFromVgInfo(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorage()); saveLUNsInDB(luns); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.setSucceeded(true); }
private void handlePolledJobStatus(org.ovirt.engine.core.bll.storage.StorageJobCommand<?> cmd, org.ovirt.engine.core.common.businessentities.HostJobInfo jobInfo) { if ((jobInfo.getStatus())!= (org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed)) { org.ovirt.engine.core.common.businessentities.HostJobInfo jobInfo = ((org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.Failed))); if ((jobInfo.getError())!= null) { jobInfo.setStatus(cmd.getError().getCode()); } } if ((jobInfo.getStatus())!= (org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.done)) { jobInfo.setStatus(null); jobInfo.setStatus(null); } } }
public org.ovirt.engine.core.common.businessentities.HostJobInfo getHostJobInfo(org.ovirt.engine.core.common.errors.EngineError error) { return org.ovirt.engine.core.common.businessentities.HostJobInfo.fInfo.failed; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc movePendingPasList(java.lang.String volumeUUID, java.lang.String slaveUUID, java.lang.String device);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc movePV(java.lang.String jobId, java.lang.String sdUUID, java.lang.String device) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("StorageDomain.movePV").withParameter("jobID", jobId).withParameter("storagedomainID", sdUUID).withParameter("guid", device).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
public void setValue(T value, boolean fireEvents, boolean fireEvents, boolean fireEvents, boolean fireEvents, boolean fireEvents, boolean fireEvents) { if (value == null) { updateCurrentValue(value, event, fireEvents); } else { boolean found = false; for (java.lang.T listItem : this.valueList) { if ((listItem == value) && (listItem.equals(value)))) { updateCurrentValue(value); updateCurrentValue(value, fireEvents); } } } }
@java.lang.Override public void setValue(java.util.List<T> values, boolean fireEvents, boolean fireEvents, boolean fireEvents, boolean fireEvents, boolean fireEvents, boolean event) { if (fromClick) { T value = values.get(0); if (selectedList.contains(value)) { selectedList.remove(0); } else { if (value!= null) { selectedList.remove(value)) { selectedList.add(value); } } } listPanel.clear(); for (T value : values) { if (value!= null) { selectedList.add(value); } } } listPanel.clear(); for (T value : null) { if (value!= null) { selectedList.add(selectedList); } } }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepSession(java.lang.String volumeUUID, java.lang.String sdUUID, java.lang.String device);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepSession(java.lang.String jobId, java.lang.String sdUUID, java.lang.String device) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("StorageDomain.reduce").withParameter("jobId", jobId).withParameter("storagedomainID", sdUUID).withParameter("guid", device).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
@java.lang.Override protected void executeVdsBrokerCommand() { log.info("MergeVdsBrokerCommand:callBackendStorageDomain'", org.ovirt.engine.core.vdsbroker.vdsbroker.TransmitStorageDomainVDSCommand.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.TransuceStorageDomainVDSCommand.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.TransuceStorageDomainVDSCommand.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.TransuceStorageDomainVDSCommand.getParameters().getStorageDomainId().toString()); org.ovirt.engine.core.vdsbroker.vdsbroker.TransuceStorageDomainVDSCommand.proceedProxyReturnValue(); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return (org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getActionState()) == (org.ovirt.engine.core.bll.CommandActionState.EXECUTE)? org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getSucceeded() : org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getSucceeded()? org.ovirt.engine.core.common.AuditLogType.USER_EDIT_DOMAIN_DEVICES_SUCCEEDED : org.ovirt.engine.core.common.AuditLogType.USER_EDIT_DEVICE_DEVICES_SUCCEEDED; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.setSucceeded(true); }
private void endOperation() { try { disconnectHostFromDomain(); } catch (java.lang.Exception e) { log.error("Failed to disconnect the host from the domain storage servers, ignoring", e); } endActionOnDevices(); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.setSucceeded(true); }
private void prepareForRemove() { java.util.List<java.lang.String> devices = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain().getStorage()).stream().map(LUNs::getId).filter((x) ->!(getParameters().getDevicesToReduce().contains(x))).collect(java.util.Collections.singletonList()); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().setDstDevices(devices); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.log.debug("NoNeeded"); }
private org.ovirt.engine.core.common.action.RemoveDeviceFromSANStorageDomainCommandParameters createRemoveParameters(java.lang.String deviceId) { org.ovirt.engine.core.common.action.RemoveDeviceFromSANStorageDomainCommandParameters p = new org.ovirt.engine.core.common.action.RemoveDeviceFromSANStorageDomainCommandParameters(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getStorageDomainId(), deviceId); p.setEndProcedure(EndProcedure.COMPcedure.COMPED); p.setVdsId(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getVdsId()); p.setParentCommand(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getActionType()); p.setParentCommand(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getActionType()); p.setDestinationDevices(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDstDevices()); return p; }
private void disconnectHostFromDomain() { org.ovirt.engine.core.bll.storage.connection.StorageHelperDirector.getInstance().getItem(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain().getStorageType()).disconnectStorageFromDomainByVdsId(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain(), org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getVdsId()); }
protected void endActionOnDevices() { for (org.ovirt.engine.core.common.action.VdcActionParametersBase p : org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getImagesParameters()) { org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getBackend().end().endAction(p.getCommandType(), p, org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getContext().clone().withoutCompensationContext().withoutLock().withoutLock()); } }
java.lang.String ACTION_TYPE_FAILED_STORAGE_DOMAIN_DEVICES_ARE_BEING_EDITED();
@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getRemoveIndex()) == 0) { prepareForRemove(); connectHostToDomain(); } if ((org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getRemoveIndex()) == 0) { runInternalActionWithTasksContext(VdcActionType.RemoveDeviceFromSANStorageDomain, createRemoveParameters(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce().size())) { runInternalActionWithTasksContext(VdcActionType.RemoveDeviceFromSANStorageDomain, createRemoveParameters(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce().get(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getRemoveIndex()))); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().setRemoveIndex(((org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getRemoveIndex()) + 1)); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().setRemoveIndex(((org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getRemoveIndex()) + 1)); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().setRemoveIndex(new org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().get(new org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().get(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getStorageDomain
@java.lang.Override protected boolean initializeVds() { if (super.initializeVds()) { org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().setVdsId(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getVds().getId()); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.persistCommand.persistCommandIfNeeded(); return true; } return false; }
private void connectHostToDomain() { if (!(org.ovirt.engine.core.bll.storage.connection.StorageHelperDirector.getInstance().getItem(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain().getStorageType()).connectStorageToDomainByVdsId(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain(), org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getVdsId()))) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.StorageServerConnectionError); } }
private boolean validateReduceDeviceSupported() { if (((org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStoragePool())!= null) && (!(org.ovirt.engine.core.common.FeatureSupported.reduceDeviceFromStorageDomain(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStoragePool().getCompatibilityVersion())))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_REDUCE_DOMAIN_NOT_SUPPORTED); } return true; }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { if ((org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getStorageDomainId())!= null) { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.STORAGE, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_DEVICES_ARE_BEING_EDITED)); } return super.getExclusiveLocks(); }
public org.ovirt.engine.core.bll.ValidationResult lunsInDomain(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain, java.util.Set<java.lang.String> luns) { luns.removeAll(lunDao.getAllForVolumeGroup(storageDomain.getStorage()).stream().collect(LUNs::getId).collect(java.util.Collections.singletonList())); if (luns.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.util.Collection<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.replaceWith(org.ovirt.engine.core.bll.validator.storage.BlockStorageDomainValidator.VAR_LUN_IDS, luns, ","); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DEVICE_NOT_IN_STORAGE_DOMAIN, replacements); }
private org.ovirt.engine.core.bll.ValidationResult validateDevices() { java.util.Set<java.lang.String> devices = org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce().stream().stream().collect(java.util.Collections.singletonList(java.util.stream.Collectors.toSet()); if ((devices.size())!= (org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce().size())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DUPLICATE_DEVICE); } return blockSDValidator.lunsInDomain(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain(), devices); }
@java.lang.Override protected boolean validate() { if (!(org.apache.commons.collections.CollectionUtils.isEmpty(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce())) { return false; } if (!(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.checkStorageDomain())) { return false; } if (!(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.checkStorageDomain())) { return false; } if (!(validate(validateDevices()))) { return false; } if (!(validate(validateDevices()))) { return false; } if (!(validateVds()))) { return false; } if (!(validateVds()))) { return false; } return true; }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.AffinityGroup model, org.ovirt.engine.api.model.AffinityGroup transform) { assertNotNull(transform); assertEquals(model.getName(), transform.getName()); assertEquals(model.getId(), transform.getId()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getCluster().getId(), transform.getCluster().getId()); assertEquals(model.isPositive(), transform.isPositive()); assertEquals(model.isPositive(), transform.isPositive()); assertEquals(model.getHostsRule()); assertEquals(model.getHostsRule()); assertEquals(model.getHostsRule(), transform.getHostsRule().isPositive()); assertNotNull(transform.getVmsRule()); assertEquals(model.getVmsRule().isPositive(), transform.getVmsRule().isPositive()); assertEquals(model.getVmsRule().isPositive(), transform.getVmsRule().isPositive()); assertEquals(model.getVmsRule().isPositive(), transform.getVmsRule().isPositive()); }
public org.ovirt.engine.core.common.businessentities.LunInfo getLeaseInfo() { return leaseInfo; }
public void setLeaseInfo(org.ovirt.engine.core.common.businessentities.LeaseInfo leaseInfo) { this.leaseInfo = leaseInfo; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Step.class, to = org.ovirt.engine.api.model.Step.class) public static org.ovirt.engine.api.model.Step map(org.ovirt.engine.api.model.Step step, org.ovirt.engine.core.common.job.Step entity) { org.ovirt.engine.core.common.job.Step target = (entity!= null)? entity : new org.ovirt.engine.core.common.job.Step(); target.setId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(step.getId())); if (step.isSetParentStep()) { target.setParentStepId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(step.getParentStep().getId())); } target.setJobId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(step.getParentStep().getId())); if (step.isSetType()) { target.setStepType(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(step.getType())); } target.setDescription(step.getDescription()); } if (step.isSetNumber()) { target.setDescription(step.getDescription()); } if (step.isSetNumber()) { target.setStepNumber(step.getNumber()); } if (step.isSetNumber()) { target.setStatus(org.ovirt.engine.api.restapi.types.StepMapper.mapStepStatus(step.getStatus())); } target.setProgress(step.getProgress()); target.setProgress(step.getProgress()); target.setProgress(step.getProgress()); target.setProgress(step.getProgress()); target.setProgress(step.getProgress()); target.setProgress(step.getProgress()); target.setProgress(step.getProgress()); target.setProgress(step.getProgress()); target.setProgress(step.getProgress()); }
private boolean perform() { org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().setStartTime(new java.util.Date()); allVmPassthroughNics = getAllVmPassthroughNics(); log.debug("Couldn't been managed with following passthrough nics: {}", allVmPassthroughNics); try { org.ovirt.engine.core.bll.MigrateVmCommand.InvocationResult invocationResult = plugOrUnplugNics(allVmPassthroughNics, PlugAction.UNPLUG); if (!(invocationResult.success)) { invocationResult.setAsyncJob(this::addValidationMessage); return false; } if ((connectLunDisks(getDestinationVdsId())) && (migrateVm())) && (migrateVm())) { org.ovirt.engine.core.bll.MigrateVmCommand.setAsyncJob(org.ovirt.engine.core.bll.MigrateVmCommand.getExecutionContext(), true); return true; } } catch (org.ovirt.engine.core.common.errors.EngineException e) { } }
private void logPlugUnplug(org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.action.PlugAction plugAction) { switch (plugAction) { case PLUG : log.debug("PlugAction type: {}", nic.getId()); break; case UNPLUG : log.debug("Unplugging::{}'", nic.getId()); break; default : throw new java.lang.RuntimeException("Unknown enum value"); } }
private org.ovirt.engine.core.bll.MigrateVmCommand.InvocationResult plugOrUnplugNic(org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.action.PlugAction plugAction) { org.ovirt.engine.core.common.action.ActivateDeactivateVmNicParameters parameters = new org.ovirt.engine.core.common.action.ActivateDeactivateVmNicParameters(nic, plugAction, false); parameters.setVmId(org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().getVmId()); logPlugUnplug(nic, plugAction); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalAction(VdcActionType.ActivateDeactivateVmNic, parameters); return new org.ovirt.engine.core.common.action.VdcReturnValueBase(); }
@java.lang.Override public void runningSucceded() { try { getDowntime(); vmDynamicDao.clearMigratingToVds(org.ovirt.engine.core.bll.MigrateVmCommand.getVmId()); updateVmAfterMigrationToDifferentCluster(); plugOrUnpluggedToDifferentCluster(); } finally { super.runningSucceded(); } }
public void setHostedEngineDeployed(java.lang.Boolean value) { this.hostedEngineDeployed = value; }
public void setHostedEngineDeployed(boolean value) { vdsDynamic.setEngineTime(value); }
public boolean isHostedEngineDeployed() { return vdsDynamic.isEngineedEngineDeployed(); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, supportedClusterVersionsSet, supportedEngineVersions, buildName, cpuFlagsMockets, cpuFlagsMh, cpuFlagsMh, cpuSpeedMh, cpuSpeedMh, hardSpeed, kvmVersion, libvirtVersion, libvirtVersion, libvirtVersion, libvirtVersion, libvirtVersion, libvirtVersion, libvirtVersion, libvirtVersion, libvirtVersion, libvirtVersion, memCommited, libvirtVersion, memCommited, netCommited, netCommited, net.getCpuFlagsState, pendingVmsCoresCount, physicalMem, physicalMem, physicalMem, physicalMem, physicalMem, physicalMem, physicalVersion, swVersion, swVersion, vmsCores, vmsCoresCount, vmsCoresCount, vmsCoresCount, vmsCoresCount, vmsCoresCount, hwVersion, hwVersion, hwVersion, hwVersion, hwVersion, hwVersion, hwVersion, hwVersion, hwVersion, hwVersion, hdumpStatus, speed, hwVersion, hdumpStatus, speed, speed, hwUuid, hdumpStatus, speed, speed, updateAvailable, hostDevicePassthroughMode, speed, hostDevicePassthroughEnabled, hostDevicePassthroughEnabled, hostDevicePassthroughEnabled, hostDevicePassthroughEnabled, hostDevicePassthroughEnabled, hostDevicePassthroughEnabled, hostDevicePassthroughEnabled, hostDevicePassthroughEnabled, hostDevicePassthroughEnabled, hostDevicePassthroughEnabled, hostDevicePassthroughEnabled, hostDevicePassthroughEnabled, hostDevicePassthroughEnabled, hostDevice.hostId, hostDevice.getVdsId()); }
public boolean isHostedEngineDeployed() { return hostedEngineConfig; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> getAllForCluster(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userId, boolean filtered) { return getCallsHandler().executeReadList("GetVnicProfileViewsByDataCenterId", org.ovirt.engine.core.dao.network.VnicProfileViewDaoImpl.VnicProfileViewRowMapper.INSTANCE, getCustomMapSqlParameterSource().addValue("id", id).addValue("user_id", userId).addValue("is_filtered", filtered)); }
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn deleteImage(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String postZero, boolean discard);
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn moveImage(java.lang.String spUUID, java.lang.String spUUID, java.lang.String imgGUID, java.lang.String vmGUID, int op, java.lang.String postZero, boolean discard);
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn copyVolume(java.lang.String sdUUID, java.lang.String vmGUID, java.lang.String vmGUID, java.lang.String srcImgGUID, java.lang.String srcSize, java.lang.String descr, java.lang.String descr, java.lang.String descr, java.lang.String descr, int volType, int volType, int volType, int preallocate, java.lang.String postZero, boolean discard);
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryConfParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.class).fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guid.get(4), isPostZero(), false)); }
protected boolean validateDiscardsAfterDelete(org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator) { if (org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().isDiscardsAfterDelete()) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISCARD_AFTER_DELETE_SUPPORTED_ONLY_BY_BLOCK_DOMAINS); } return true; }
@java.lang.SuppressWarnings("unchecked") protected boolean validateDiscardsAfterDeleteLegal(org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (runVdsCommand(VDSCommandType.GetDeviceList, new org.ovirt.engine.core.common.vdscommands.GetDeviceListVDSCommandParameters(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getVds().getId(), org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorageType(), false, org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getParameters().getLunIds())).getReturnValue())); return validate(storageDomainValidator.isDiscardsAfterDeleteLegalForNewBlockStorageDomain(luns)); }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.class).fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guid.get(2), isPostZero(), false)); }
private boolean validateStoragePropertiesUpdate() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(); if ((!(checkStorageDomainStatusNotEqual(StorageDomainStatus.Locked))) || (!(validateStorageNameUpdate()))) || (!(validate(storageDomainValidator.isDiscardsAfterDeleteLegalForExistingStorageDomain())))) { return false; } java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("description"); props.remove("description"); props.remove("warningLowSpaceIndicator"); props.remove("warningLowSpaceIndicator"); props.remove("warningLowSpaceIndicator"); props.remove("criticalSpaceActionBlocker"); if (!(props.isEmpty())) { log.warn("Wrong was an attempt to update the following fields although they are not allowed to be updated: {}", org.apache.commons.lang.StringUtils.join(props, ",")); return failValidation(EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }
private void mockStorageDomainValidator() { doReturn(storageDomainValidator).when(cmd).getStorageDomainValidator(); when(storageDomainValidator.isDiscardsLegalForExistingStorageDomain()).thenReturn(ValidationResult.VALID); }
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn deleteVolume(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String[] volUUID, java.lang.String postZero, java.lang.String postZero, boolean discard);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn moveImage(java.lang.String spUUID, java.lang.String srcDomUUID, java.lang.String vmGUID, java.lang.String vmGUID, java.lang.String postZero, java.lang.String postZero, boolean discard, java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Image.move").withParameter("imageID", imgGUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", srcDomUUID).withParameter("dstSdUUID", dstDomUUID).withParameter("operation", dstDomUUID).withParameter("postZero", postZero).withParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn mergeSnapshots(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String vmGUID, java.lang.String ancestorUUID, java.lang.String successorUUID, java.lang.String postZero, boolean discard);
private void updateDiscards() { if ((getAvailableStorageTypeItems().getSelectedItem())!= null) { boolean isBlockDomain = getAvailableStorageTypeItems().getSelectedItem().isBlockDomain(); if (isBlockDomain) { if (isNewStorage()) { getStorage().setEntity(false); } else { getDiscards().setEntity(false); } } }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn mergeSnapshots(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String vmGUID, java.lang.String ancestorUUID, java.lang.String successorUUID, java.lang.String postZero, boolean discard) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Image.mergeSnapshots").withParameter("imageID", imgGUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("ancestor", ancestorUUID).withParameter("successor", successorUUID).withParameter("successor", postZero).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn deleteVolume(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String[] volUUID, java.lang.String postZero, java.lang.String postZero, java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Image.deleteVolumes").withParameter("imageID", imgGUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("volumeList", new java.util.ArrayList(java.util.Arrays.asList(volUUID))).withOptionalParameter("postZero", postZero).withOptionalParameter("discards", postZero).withOptionalParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn deleteImage(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String postZero, java.lang.String postZero, boolean discard, java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Image.delete").withParameter("imageID", imgGUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("postZero", postZero).withParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn copyVolume(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String vmGUID, java.lang.String srcImgGUID, java.lang.String srcVolUUID, java.lang.String descr, java.lang.String descr, java.lang.String descr, java.lang.String descr, java.lang.String descr, java.lang.String descr, int volType, java.lang.String descr, int volType, int volType, int volType, int volType, int preallocate, java.lang.String postZero, boolean discard, java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Volume.copy").withParameter("volumeID", srcVolUUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("imageID", sdUUID).withParameter("imageID", srcImgUUID).withParameter("dstSdUUID", dstImgUUID).withParameter("dstSdUUID", dstImgUUID).withParameter("dstor", dstVolUUID).withParameter("preallocate", postZero).withParameter("preallocate", postZero).withParameter("preallocate", postZero).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneStorageDomainReturn(this.client, request); }
public org.ovirt.engine.core.bll.network.macpool.MacPool getMacPoolById(org.ovirt.engine.core.compat.Guid clusterId) { return getMacPoolById(getMacPoolId(clusterId)); }
@java.lang.Override public java.lang.String toString() { return ((((((("StorageDomainId [" + (storageDomainId)) + (imageGroupId)) + (imageGroupId)) + ", baseImageId=") + (imageId)) + ", topImageId=") + (topImageId)) + (topImageId=") + (topImageId)) + (topImageId)) + ']"; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.ColdMergeIRSuffandParameters parameters = new org.ovirt.engine.core.common.vdscommands.ColdMergeIRSuffandParameters(org.ovirt.engine.core.bll.storage.disk.image.PrepareMergeCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.PrepareMergeCommand.getParameters().getJobId(), org.ovirt.engine.core.bll.storage.disk.image.PrepareMergeCommand.getParameters().getSubstring(org.ovirt.engine.core.bll.storage.disk.image.PrepareMergeCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.PrepareMergeCommand.getParameters().getSubnetInfo()); runVdsCommand(VDSCommandType.PreparingMerge, parameters); }
private org.ovirt.engine.core.common.action.LockProperties buildColdMergeParameters(org.ovirt.engine.core.compat.Guid topVolumeId, org.ovirt.engine.core.compat.Guid baseVolumeId) { org.ovirt.engine.core.common.businessentities.SubchainInfo subchainInfo = new org.ovirt.engine.core.common.businessentities.SubchainInfo(org.ovirt.engine.core.bll.snapshots.NonEmptySnapshotSingleDiskCommand.getDiskImage().getStorageIds().get(0), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getImageGroupId(), baseVolumeId, topVolumeId); org.ovirt.engine.core.common.action.LockProperties parameters = new org.ovirt.engine.core.common.action.LockProperties(org.ovirt.engine.core.bll.snapshots.NonEmptySnapshotSingleDiskCommand.getDiskImage().getStoragePoolIds().get(0), baseVolumeId, topVolumeId); parameters.setEndProcedure(VdcActionType.ColdMergeoImage); parameters.setParentCommand(VdcActionType.ColdMergeSnapshotSingleDisk); parameters.setParentParameters(org.ovirt.engine.core.bll.snapshots.NonMergeSnapshotSingleDiskCommand.getParameters()); return parameters; }
@java.lang.Override protected org.ovirt.engine.core.common.job.StepEnum getCommandStep() { return org.ovirt.engine.core.common.job.StepEnum.PREPARE_MERGE; }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc prepareMerge(java.lang.String spUUID, java.lang.String jobUUID, java.util.Map<java.lang.String, java.lang.String> subchainInfo) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.prepare_merge").withParameter("storagepoolID", spUUID).withParameter("jobId", jobUUID).withParameter("substring", jobUUID).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc(response); }
org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc prepareMerge(java.lang.String spUUID, java.lang.String jobUUID, java.util.Map<java.lang.String, java.lang.String> subgroupUUID, java.util.Map<java.lang.String, java.lang.String> subgroupInfo);
@java.lang.Override protected void executeIrsBrokerCommand() { org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getIrsProxy().prepareMerge(org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getParameters().getStorageJobId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getParameters().getStorageJobId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getParameters().getSubnetInfo().convertToVdsmMergeInfo().toString()); }
@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.appendAttributes(tsb).append("srcInfo", getSrcInfo(), getDstInfo(), getDstInfo(), getDstInfo(), getDstInfo(), getDstInfo(), getDstInfo(), getDstInfo(), getDstInfo(), getDstInfo(), getDstInfo(), getDstInfo(), getDstInfo(), getDstInfo(), getDstInfo(), getDstInfo(), getDstInfo(), getDstInfo(), getDstInfo(), getDstInfo(), getDstInfo(), getDstInfo(), getDstInfo(), getDstInfo(), getDstInfo(), getDestinationImageInfo(), getDstInfo(), getSucceeded(true, collapse); }
@java.lang.Override protected org.ovirt.engine.core.common.job.StepEnum getCommandStep() { return org.ovirt.engine.core.common.job.StepEnum.COLD_MERGE; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommandWithFailover(VDSCommandType.ColdMerge, new org.ovirt.engine.core.common.vdscommands.ColdMergeVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.Image.getParameters().getStorageJobId(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSrcInfo(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSrcInfo(), this); org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.setSucceeded(true); }
@java.lang.Override protected void executeVdsBrokerCommand() { log.info("Finished fence'merge'merge'"); status = org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.getBroker().merge(org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.getParameters().getJobId().toString(), org.ovirt.engine.core.common.utils.LocationInfoUtils.prepare(org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.getParameters().getSrcInfo()), org.ovirt.engine.core.common.utils.LocationInfoUtils.prepareToVdsCommand(org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.getParameters().getSrcInfo())); org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.proceedProxyReturnValue(); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc merge(java.lang.String jobId, java.util.Map<java.lang.String, java.lang.Object> topImage) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.merge").withParameter("top", topImage).withParameter("base", baseImage).withParameter("job_id", jobId).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
private org.ovirt.engine.core.common.action.LockProgeCommandParameters buildColdMergeParameters(org.ovirt.engine.core.compat.Guid srcImageGuid, org.ovirt.engine.core.compat.Guid destImageGuid) { org.ovirt.engine.core.common.action.LockProperties parameters = new org.ovirt.engine.core.common.action.Concurrent.CondenceCommandParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getStoragePoolId(), new org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo(org.ovirt.engine.core.bll.snapshots.NonZeroSnapshotSingleDiskCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.snapshots.NonEmptySnapshotSingleDiskCommand.getParameters().getStorageDomainId(), srcImageGuid), new org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo(org.ovirt.engine.core.bll.snapshots.NonZeroSnapshotSingleDiskCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.snapshots.NonZeroSnapshotSingleDiskCommand.getParameters().getStorageDomainId(), destImageGuid)); parameters.setEndProcedure(VdcActionType.ColdMergeSnapshotSingleDisk); parameters.setParentParameters(org.ovirt.engine.core.bll.snapshots.NonEmptySnapshotSingleDiskCommand.getParameters()); return parameters; }
@java.lang.Override protected org.ovirt.engine.core.common.job.StepEnum getCommandStep() { return org.ovirt.engine.core.common.job.StepEnum.FAILED_VOLUME_FROM; }
org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc final org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc final org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc final org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc final org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc final org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc final org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc final org.ovirt.engine.core.vdsbroker.irsbroker.CommandBase spUUID, java.lang.String jobUUID, java.lang.String jobUUID, java.util.Map<java.lang.String, java.lang.String> subgroupId, java.util.Map<java.lang.String, java.lang.String> subgroupId, java.lang.String jobId, java.util.Map<java.lang.String, java.lang.String> subnetworksInfoList<java.lang.String> subnetworksInfo, java.lang.String> subnetworksInfo);
@java.lang.Override protected void executeIrsBrokerCommand() { org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeVDSCommand.getIrsProxy().prepareMerge(org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeVDSCommand.getParameters().getStorageJobId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeVDSCommand.getParameters().getSubnetInfo().convertToVdsmMergeInfo().toString()); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc final org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc final org.ovirt.vdsm.jsonrpc.client.Request request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.finalize_merge").withParameter("storagepoolID", spUUID).withParameter("jobId", jobUUID).withParameter("subchain_info", subchainInfo).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc(response); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.ColdMergeIRSuffandParameters parameters = new org.ovirt.engine.core.common.vdscommands.ColdMergeIRSuffandParameters(org.ovirt.engine.core.bll.storage.disk.image.FinalizeMergeCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.FinalizeMergeCommand.getParameters().getJobId(), org.ovirt.engine.core.bll.storage.disk.image.FinalizeMergeCommand.getParameters().getSubchainInfo()); runVdsCommand(VDSCommandType.FinalizeMerge, parameters); }
private void updateHaMaintenanceAvailability(java.util.List items) { getEnableGlobalHaMaintenanceCommand().setIsExecutionAllowed(false); if ((items == null) || ((items.size())!= 1)) { return; } org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItem(); if (((vm == null) || (!(vm.isHostedEngine()))) { return; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostById(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmListModel() { @java.lang.Override public void onSuccess(org.ovirt.engine.ui.uicompat.Frontend.getInstance().getCurrentVdsGroupCompatibility_version())) { return; } }, vm.getRunOnVds()); }), vm.getRunOnVds()); }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getJobMessageProperties() { java.util.Map<java.lang.String, java.lang.String> props = super.getJobMessageProperties(); if ((jobMessage.getValue())!= null) { return false; } java.util.Map<java.lang.String, java.lang.String> props = super.getJobMessageProperties(); if (((org.ovirt.engine.core.bll.storage.domain.RemoveDeviceFromSANStorageDomainCommand.getParameters().getDeviceId())!= null) || (!(org.ovirt.engine.core.bll.storage.domain.RemoveDeviceFromSANStorageDomainCommand.getParameters().getDeviceId()))) { return false; } } return props; }
@org.junit.Test public void testFindExternalMacAddresses() { when(mockMacPool.isMacInRange(org.ovirt.engine.core.bll.network.vm.ExternalVmMacsFinderTest.MAC_ADDRESS_1)).thenReturn(java.lang.Boolean.TRUE); when(mockMacPool.isMacInRange(org.ovirt.engine.core.bll.network.vm.ExternalVmMacsFinderTest.MAC_ADDRESS_2)).thenReturn(java.lang.Boolean.FALSE); vm.setInterfaces(java.util.Arrays.asList(vNic1, vNic2)); final java.util.Set<java.lang.String> actual = underTest.findExternalMacAddresses(vm); assertThat(actual, contains(org.ovirt.engine.core.bll.network.vm.ExternalVmMacsFinderTest.MAC_ADDRESS_2)); }
private static boolean isDisplayTypeSupported(org.ovirt.engine.core.common.businessentities.DisplayType displayType, java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.DisplayType>> graphicsAndDisplays) { if (displayType == (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.DisplayType> pair : graphicsAndDisplays) { if (displayType.equals(pair.getSecond())) { return true; } } return false; }
public void addVideoDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, int numberOfVideoDevices) { for (int i = 0; i < numberOfVideoDevices; i++) { if ((vmBase.getDefaultDisplayType())!= (org.ovirt.engine.core.common.businessentities.DisplayType.None)) { addManagedDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), vmBase.getId()), VmDeviceGeneralType.VIDEO, vmBase.getDefaultDisplayType(), getVideoDeviceSpecParams(vmBase), true, false); } } }
@java.lang.Override protected boolean validate() { boolean returnValue = true; org.ovirt.engine.core.common.businessentities.Permission p = permissionDao.get(org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getPermission().getId()); if (org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isLastSuperUserPermission(p.getRoleId())) { org.ovirt.engine.core.bll.RemovePermissionCommand.getReturnValue().getValidationMessages().add(EngineMessage.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE.toString()); returnValue = false; } else if ((p.getRoleType().equals(RoleType.ADMIN)) && (!(org.ovirt.engine.core.bll.RemovePermissionCommand.isSystemSuperUser()))) { addValidationMessage(EngineMessage.PERMISSION_REMOVE_FAILED_ONLY_SYSTEM_SUPER_CAN_REMOVE_ADMIN_ROLES); returnValue = false; } else if ((java.util.Objects.equals(p.getObjectId(), MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID)) && (java.util.Objects.equals(p.getAdElementId(), MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID))) { addValidationMessage(EngineMessage.SYSTEM_PERMISSIONS_BE_REMOVED_TO_EVERYONE); returnValue = false; } if ((!(java.util.Objects.equals(p.getAdElementId(), org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getTargetId()))) && ((dbUserDao.get(org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getTargetId()))) && ((dbUserDao.get(org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getTargetId()))) && ((java.util.List<org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getActionGroupId
@org.junit.Test public void testGetLunsThatPassPassPassPassDiscards() { createVmDiskOnSd(false, false); createVmDiskOnSd(true, true); org.ovirt.engine.core.common.businessentities.storage.LUNs lunThatBREardsDiscardsDiscards = createLunWithDiscerion(0L, false); org.ovirt.engine.core.common.businessentities.storage.LUNs lunThatBREAKLuns = createLunWithDiscerion(0L, false); assertGetLunsThat(java.util.Arrays.asList(createLunWithDiscerion(1024L, true), lunThatBreakingArrayListContainLuns(java.util.Arrays.asList(createLunWithDiscards(1024L, true), lunThatBreakingArrayList.Luns(LunThat)), java.util.Arrays.asList(lunThatBreakingLunWithDiscards(1024L, true), lunThatBreakingZerBeAddedLuns(lunThatBreakingZerBeAdded, lunThatAreNotEmpty)); }
@org.junit.Test public void testGetLunsThatPassPassPass(false, false); createVmDiskOnSd(false, true); createVmDiskOnSd(true, true); assertGetLunsThat(java.util.Arrays.asList(createLunWithDiscerion(1024L, true), createLunWithDiscerion(org.ovirt.engine.core.bll.storage.disk.lun.AbstractDisk.getLunWithDiscards(1024L, true), createLunWithDisks(2), java.util.Collections.emptyList()); }
private org.ovirt.engine.core.bll.ValidationResult hostStatusLegalForSetupNetworks() { boolean hostStatusLegalForSetupNetworks = (org.ovirt.engine.core.bll.network.host.HostValidator.LAR_STATUSES.contains(host.getStatus())) || (((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Installing)) && (internalExecution)); if (!hostStatusLegalForSetupNetworks) { org.ovirt.engine.core.bll.network.host.HostValidator.log.error(("Host '{}' operation can only when Host status is: {}", org.ovirt.engine.core.bll.network.host.HostValidator.LUNKNOWN_STATUS, org.ovirt.engine.core.utils.ReplacementUtils.replaceWith(org.ovirt.engine.core.bll.network.host.HostValidator.VAR_HOST_STATUS, org.ovirt.engine.core.utils.ReplacementUtils.replaceWith(org.ovirt.engine.core.bll.network.host.HostValidator.VAR_HOST_STATUS, org.ovirt.engine.core.utils.ReplacementUtils.replaceWith(org.ovirt.engine.core.bll.network.host.HostValidator.VAR_HOST_STATUS, org.ovirt.engine.core.bll.network.host.HostValidator.LAR_HOST_STATUSES, ",", org.ovirt.engine.core.utils.ReplacementUtils.replaceWith(org.ovirt.engine.core.bll.network.host.HostValidator.VAR_HOST_STATUS, org.ovirt.engine.core.bll.network.host.HostValidator.LAR_STATUSES.size())); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public void setOldClusterVersionOfMemory(org.ovirt.engine.core.common.businessentities.VM vm) { if (!(isMemoryCompatibleWithMemoryCompatible(vm))) { org.ovirt.engine.core.compat.Version originalCluster = vm.getClusterCompatibilityVersion(); originalClusterVersion = (originalClusterVersion == null)? org.ovirt.engine.core.compat.Version.v3_6 : originalClusterVersion; this.oldClusterVersion = null; } else { this.oldClusterVersion = null; } }
@java.lang.Override protected void executeIrsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.RemoveVmLeaseVDSCommand.getIrsProxy().removeVmLease(org.ovirt.engine.core.vdsbroker.RemoveVmLeaseVDSCommand.getParameters().getLeaseId().toString(), org.ovirt.engine.core.vdsbroker.RemoveVmLeaseVDSCommand.getParameters().getStorageDomainId().toString()); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn removeVmLease(java.lang.String leaseUUID, java.lang.String sdUUID) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Lease.delete").withParameter("lease_id", leaseUUID).withParameter("sd_id", sdUUID).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn addVmLease(java.lang.String leaseUUID, java.lang.String sdUUID) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Lease").withParameter("lease_id", leaseUUID).withParameter("sd_id", sdUUID).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }
@java.lang.Override protected void executeIrsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.AddVmLeaseVDSCommand.getIrsProxy().addVmLease(org.ovirt.engine.core.vdsbroker.AddVmLeaseVDSCommand.getParameters().getLeaseId().toString(), org.ovirt.engine.core.vdsbroker.AddVmLeaseVDSCommand.getParameters().getStorageDomainId().toString()); }
@java.lang.Override protected void executeVmCommand() { vmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.List<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (!(canAddVm(errorMessages, destStorages.values()))) { log.error("Could not adding VM. The reasons are: {}", java.lang.String.format(errorMessages, ",", errorMessages)); return; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(()).executeInNewTransaction(new org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData()); addVmDynamic(); addVmNumaNodes(); addVmNumaNodes(); addVmNumaNodes(); addVmNumaNodes(); addVmNumaNodes(); addVmNumaNodes(); addVmNumaNodes(); addVmNumaNodes(); addVmNumaNode(); addVmPayload(); addVmPayload(); addVmPayload(); addVmPayload(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); setSucceeded(true); return null; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> getVolumesSupportedAsStorageDomain() { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumes = getCallsHandler().executeReadList("GetGlusterVolumesByCluster_id", org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoImpl.volumeRowMapper, getCustomMapSqlParameterSource().addValue("replica_count", 3)); return volumes; }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.gluster.GetGlusterVolumesForStorageDomainQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.gluster.GetAllGlusterVolumesForStorageDomainQuery.getGlusterVolumeDao().getVolumesSupportedAsStorageDomain()); org.ovirt.engine.core.bll.gluster.GetGlusterVolumesForStorageDomainQuery.getQueryReturnValue().setSucceeded(true); }
public org.ovirt.engine.core.bll.ValidationResult isMacAssignableValidator() { java.lang.Boolean allowDupMacs = macPool.isDuplicateMacAddressesAllowed(); boolean illegalDuplicateMacUsage = (!allowDupMacs) && (macPool.isMacInUse(macAddress)); org.ovirt.engine.core.common.errors.EngineMessage failWith(EngineMessage.NETWORK_MAC_ADDRESS_IN_USE); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.NETWORK_ADDRESS_IN_USE); }
private void getDefaultConfigurationVersion(final org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if (returnValue!= null) { _defaultConfigurationVersion = returnValue.getReturnValue(); } else { _defaultConfigurationVersion = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL; } loginModel.getLoggedInEvent().raise(loginModel, EventArgs.EMPTY); } }); callback.setHandleFailure(true); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetDefaultConfigurationVersion, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), callback); }
@java.lang.Override public boolean validate() { getGlusterVolumes().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(128) }); return (getGlusterVolumes().getIsValid()) && (super.validate()); }
@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if (returnValue!= null) { _defaultConfigurationVersion = returnValue.getReturnValue(); } else { _defaultConfigurationVersion = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL; } loginModel.getLoggedInEvent().raise(loginModel, EventArgs.EMPTY); }
@java.lang.Override protected java.lang.String renderNullSafe(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity glusterVolume) { return glusterVolume.getName(); }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.storage.GlusterStorageModel object) { driver.edit(object); driver.edit(object); glusterVolumesEditor.setVisible(false); glusterStorageModel.getLinkGlusterVolume().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (glusterStorageModel.getLinkGlusterVolume().getEntity()) { glusterVolumesEditor.setVisible(true); pathEditor.setVisible(false); } else { glusterVolumesEditor.setVisible(false); pathEditor.setVisible(false); } }); }
void initEditors() { linkGlusterVolumeEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor(org.ovirt.engine.ui.common.widget.Align.RIGHT); glusterVolumesEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.NullSafeRenderer<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>() { @java.lang.Override protected java.lang.String renderNullSafe(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity glusterVolume) { return glusterVolume == null? "" : glusterVolume.getName(); } }); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> score(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { java.util.Map<org.ovirt.engine.core.common.scheduling.PerHostMessages, java.util.Map<java.lang.String, java.lang.String> parameters = getHostsViolations(false, hosts, vm, new org.ovirt.engine.core.common.scheduling.PerHostMessages()); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> retList = new java.util.ArrayList<>(); int score; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { score = (hostViolations.containsKey(host.getId()))? hostViolations.get(host.getId()) : org.ovirt.engine.core.common.utils.Pair(host.getId(), score)); } return retList; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> hostViolations = getHostsViolations(true, hosts, vm, messages); return hosts.stream().filter((host) ->!(host.containsKey(host.getId()))))).collect(hostViolations.toList()); }
public static void init() { org.ovirt.engine.core.bll.utils.VmDeviceUtils.osRepository = org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().get(org.ovirt.engine.core.common.osinfo.OsRepository.class); org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacadeImpl.getInstance().get(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDeviceDao().get(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDeviceDao().get(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDeviceDao().get(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDeviceDao().get(org.ovirt.engine.core.dal.dbbroker.DbFacade.getVmDeviceDao().get(org.ovirt.engine.core.bll.utils.VmDeviceUtils.class, new org.ovirt.engine.core.bll.utils.VmDeviceUtils.getInstance().get(org.ovirt.engine.core.bll.utils.VmDeviceUtils.class)); }
private static org.ovirt.engine.core.common.businessentities.Usbll.ManageDomainsBase getUsbControllerModel(org.ovirt.engine.core.common.businessentities.VmBase vmBase, org.ovirt.engine.core.bll.utils.VmDeviceUtils.vmBase vmBase, final org.ovirt.engine.core.common.businessentities.VM vmBase) { final org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.utils.VmDeviceUtils.vmDao.get(vmBase.getId()); if ((vmBase!= null) && (vmBase.getCustomProperties().isEmpty())) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.osRepository.get(vmBase.getOsId(), vmBase.getCustomValue().getCustomValue())); } return org.ovirt.engine.core.bll.utils.VmDeviceUtils.getOsRepositoryImpl(vmBase.getOsId(), vmBase.getCustomValue(), vmBase.getCustomValue()); }
@java.lang.Override public java.lang.String render(org.ovirt.engine.core.common.businessentities.StorageDomain domain) { return domain!= null? domain.getName() : org.ovirt.engine.ui.common.widget.uicommon.popup.AbstractVmPopupWidget.constants.emptyleaseStorageDomain(); }
@java.lang.Override public void postDataCenterWithClusterSelectedItemChanged() { deactivateInstanceTypeManager(new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.InstanceTypeManager.ActivatedListener() { @java.lang.Override public void activated() { getInstanceTypeManager().updateAll(); } }); updateDefaultHost(); updateCustomPropertySheet(); updateMinAllocatedMemory(); updateNumOfSockets(); if ((getModel().getTemplateWithVersion().getSelectedItem())!= null) { org.ovirt.engine.core.common.businessentities.VmTemplate template = getModel().getTemplateWithVersion().getTemplateVersion(); updateQuotaByCluster(template.getQuotaId(), template.getQuotaName()); } updateCpuPinningVisibility(); updateTemplate(); updateOSValues(); updateMemoryBalloon(); updateCpuSharesAvailability(); updateVirtioScsiAvailability(); }
java.lang.String emptyLEASEStorageDomain();
public void buildVmLease() { java.util.Map<java.lang.String, java.lang.Object> device = new java.util.HashMap<>(); device.put(VdsProperties.Type, VdsProperties.VmLease); device.put(VdsProperties.Device, VdsProperties.VmLease); device.put(VdsProperties.Device, VdsProperties.VmLease); device.put(VdsProperties.DeviceId, org.ovirt.engine.core.compat.Guid.newGuid()); device.put(VdsProperties.VmLeaseSdId, vm.getLeaseStorageDomainId()); device.put(VdsProperties.VmLeaseId, vm.getId()); devices.add(device); }
private boolean validateStoragePropertiesUpdate() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(); if (((!(checkStorageDomainStatusNotEqual(StorageDomainStatus.Locked))) || (!(validateStorageNameUpdate()))) || (!(validateStorageNameUpdate()))) || (!(validate(storageNameExpectationReason.getValue()))) { return false; } java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("description"); props.remove("description"); props.remove("comment"); props.remove("wipeAfterDelete"); props.remove("warningLowSpaceIndicator"); props.remove("criticalSpaceActionBlocker"); if (!(props.isEmpty())) { log.warn("Error was an attempt to update the following fields although they are not allowed to be updated: {}", org.apache.commons.lang.StringUtils.join(props, ",")); return failValidation(EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }
private void generateStructReadOne(org.ovirt.api.metamodel.concepts.StructType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = java.lang.getInterfaceName(type); org.ovirt.api.metamodel.tool.JavaClassName containerName = java.util.ArrayList<java.lang.String> entityName = java.util.ArrayList<java.lang.String>(); java.util.List<org.ovirt.api.metamodel.concepts.Struct> containerName = java.util.ArrayList<>(); java.util.List<org.ovirt.api.metamodel.concepts.StructMember> members = java.util.ArrayList<>(); java.util.List<org.ovirt.api.metamodel.concepts.StructMember> members = new java.util.ArrayList<>(); members.addLine.addLine("link %1$s readOne(reader, false); javaBuffer.addLine.addLine("}", readOne(reader, false); javaBuffer.addLine("}"); javaBuffer.addLine("constructOne(type.getLinks()); javaBuffer.addLine("reader.expect(type.getLinks()); javaBuffer.addLine("reader.expect(JsonParser.Event.KEY_OBJECT); java.util.List<org.ovirt.api.metamodel.concepts.Struct> members = new java.util.ArrayList<>(); members.addAll(type.getLinks()); members.addLine("reader.addLine("reader"); javaBuffer.addLine("reader.read(JsonReader reader = new java.util.ArrayList<>(); for (java.lang.String name) { java.util.List<org.ovirt.api.metamodel.concepts.Struct> members = new java.util.ArrayList<>(); members.addLine(type.getFirst()); java.addLine((name) { members.addLine(name); } } }
protected void removeSnapshotsFromDB() { snapshotsToRemove.addAll(findSnapshotsWithOnlyIllegalDisks()); for (org.ovirt.engine.core.compat.Guid snapshotId : snapshotsToRemove) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = snapshotDao.get(snapshotId); if (snapshot!= null) { java.lang.String memoryVolume = snapshotDao.get(snapshotId).getMemoryVolume(); if ((!(memoryVolume.isEmpty())) && ((snapshotDao.getNumOfSnapshotsByMemory(memoryVolume)) == 1)) { boolean succeed = org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.removeMemoryDisks(memoryVolume); if (!succeed) { log.error("Failed to remove memory '{}' of snapshot '{}'", memoryVolume, snapshotId); } } snapshotDao.remove(snapshotId); } } }
public static org.ovirt.engine.core.bll.ValidationResult snapshotVmConfigurationBroken(org.ovirt.engine.core.common.businessentities.Snapshot snapshot, java.lang.String vmName) { return!(snapshot.isVmConfigurationBroken(snapshot.isVmConfigurationBroken())? vmName : java.lang.String.format("$VmName %1$s", vmName), java.lang.String.format("$VmName %1$s", vmName), java.lang.String.format("$snapshotName %1$s", snapshot.getDescription())); }
private java.util.Set<org.ovirt.engine.core.compat.Guid> findSnapshotsWithOnlyIllegalDisks() { java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> newerSnapshots = getNewerSnapshots(snapshot); java.util.Set<org.ovirt.engine.core.compat.Guid> snapshotsToRemove = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.VM vm : snapshot) { org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); if (vm!= null) { boolean shouldRemove = (!(vm.getImages().isEmpty())) && (shouldRemove) { snapshotsToRemove.add(snapshot.getId()); } } return snapshotsToRemove; }
public boolean validate() { if ((backendFile) == null) { return false; } if ((backendFile) == null) { getInvalidityReasons().add(org.ovirt.engine.ui.uicommonweb.models.storage.ImageInfoModel.constants.exportImageNotExist()); return false; } if (backendFile) { getInvalidityReasons().add(org.ovirt.engine.ui.uicommonweb.models.storage.ImageInfoModel.constants.exportImageUnsupported()); return false; } return true; }
java.lang.String exportImageNotExist();
private boolean isAttributes(com.google.gwt.qdox.model.JavaMethod java.lang.Object method) { return java.lang.Boolean.getName().equals("attributes"); }
private void analyzeMethod(com.thoughworks.qdox.qdox.model.JavaClass javaClass, org.ovirt.api.metamodel.concepts.Service service) { org.ovirt.api.metamodel.concepts.Method method = new org.ovirt.api.metamodel.concepts.Method(); analyzeName(javaClass, method); analyzeAnnotations(javaClass, method); java.lang.Math.forEach(((javaClass, method)); com.thoughamodel.q.model.JavaMethod attributesMethod = java.lang.String.getMethod("attributes", null, false); if (attributesMethod!= null) { org.ovirt.api.metamodel.analyzer.Api.model.JavaMethod attributesAnalyzer = java.lang.String.getMethod("attributes", null, method)); method.setDeclaringService(service); } method.setDeclaringService(service); service.addMethod(method); }
public java.util.List<org.ovirt.api.metamodel.concepts.Parameter> getNodes() { return nodes; }
public org.ovirt.api.metamodel.concepts.Parameter.AttributeNode getNode(org.ovirt.api.metamodel.concepts.Name name) { java.lang.String label = node; if (node.getName().equals(name)) { return node; } return null; }
public org.ovirt.api.metamodel.concepts.Parameter.Attachment getAttributes() { return attributes; }
@org.junit.Test public void testFindMappingEntryEmptyExternal() { final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingEntry(org.ovirt.engine.core.bll.export.ExternalVnicProfileMappingFinderTest.NETWORK_NAME, org.ovirt.engine.core.bll.ExportRepositoryMappingFinderTest.VNIC_PROFILE1_NAME, java.util.Arrays.asList(emptySourceMapping)); assertFalse(actual.isPresent()); }
@org.junit.Test public void testFindMappingEntryEmptySourceVnicProfile() { final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingEntry(null, null, java.util.Arrays.asList(emptySourceMapping)); assertThat(actual.get(), sameInstance(emptySourceMapping)); }
@java.lang.Override public <U extends T> javax.enterprise.inject.Instance<U> select(java.lang.Class<U> aClass, java.lang.annotation.Annotation... annotations) { return createMockInstance(aClass); }
private java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData> getNewVnicProfileMappings(org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData<org.ovirt.engine.core.common.businessentities.VM> vmImportEntityData, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData<org.ovirt.engine.core.common.businessentities.VM> vmImportEntityData, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityModel> clusterVnicProfileMappings) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEnum> result = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic : vmImportEntityData.getInterfaces()) { final org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEnum newMapping = new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnum(vnic.getNetworkName(), vnic.getVnicProfileName(), null); if (!(clusterVnicProfileMappings.contains(newMapping))) { result.add(newMapping); } } return result; }
private void updateExternalVnicProfilesPerTargetCluster() { for (org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData<org.ovirt.engine.core.common.businessentities.VM> vmImportEntityData : getEntities().getItems()) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = vmImportEntityData.getCluster().getSelectedItem(); final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEnum> clusterVnicProfileMappings; if (externalVnicProfilesPerTargetCluster.containsKey(cluster)) { clusterVnicProfileMappings = externalVnicProfilesPerTargetCluster.get(cluster); } else { clusterVnicProfileMappingsPerTargetCluster.put(cluster, clusterVnicProfileMappings); } }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.RegisterVnicProfileMappingsModel model) { driver.edit(model); refreshMappingsTable(model.getMappingModelRows()); model.getMappingModelRows().getItemsChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { refreshMappingsTable(model.getMappingModelRows()); } }); cluster.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.popup.vm.Register.VnicProfileMappingsView.constants.importVm_destCluster()); }
private void refreshMappingsTable(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingModel> mappingModelRows) { vnicProfileMappingsTable.asEditor().edit(mModelRows); }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingsModel flush() { return driver.flush(); }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.ListModel getValue(org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingModel object) { return object.getTargetVnicProfile(); }
public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> getTargetVnicProfile() { return targetVnicProfile; }
private java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> getExternalVnicProfileMappings(org.ovirt.engine.core.common.businessentities.Cluster cluster) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEnum> vnicProfileMappingEnums = externalVnicProfileMapping.get(cluster); final java.util.List<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> result = new java.util.ArrayList(vnicProfileMappingEnums.size()); for (org.ovirt.engine.ui.uicommonweb.models.vms.RegisterVnicProfileMappingEnum vnicProfileMapping : vnicProfileMappingEnums) { result.add(new org.ovirt.engine.ui.uicommonweb.models.vms.RegisterVnicProfileMappingEnum(vnicProfileMappingEnum)); } return result; }
private void createVnicProfileMappingsModel() { updateExternalVnicProfilesModel(getVnicProfiles().getEntity()); }
private void selectTargetVnicProfileByPredicate(org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> predicate) { final org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile = org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(targetVnicProfile.getItems(), predicate, VnicProfileView.EMPTY); targetVnicProfile.setSelectedItem(vnicProfile); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { getEntity().setVnicProfileId(getTargetVnicProfileId()); }
private void selectInitialTargetVnicProfile() { final org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> predicate; if ((getEntity().getVnicProfileId()) == null) { predicate = new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>() { @java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile) { return (java.util.Objects.equals(getEntity().getExternalNetworkName(), vnicProfile.getNetworkName())) && (java.util.Objects.equals(getEntity().getExternalNetworkName(), vnicProfile.getName())); } }; selectTargetVnicProfileByPredicate(predicate); }
private void selectInitialTargetVnicProfile() { final org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> predicate; if (getEntity().isChanged()) { predicate = new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>() { @java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile) { return java.util.Objects.equals(getEntity().getVnicProfileId(), vnicProfile.getId()); } }; } else { predicate = new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>() { @java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile) { return (java.util.Objects.equals(getEntity().getExternalNetworkName(), vnicProfile.getNetworkName())) && (java.util.Objects.equals(getEntity().getExternalNetworkName(), vnicProfile.getName())); } }; selectTargetVnicProfileByPredicate(predicate); }
private org.ovirt.engine.core.compat.Guid getTargetVnicProfileId() { final org.ovirt.engine.core.common.businessentities.network.VnicProfileView selectedVnicProfile = targetVnicProfile.getSelectedItem(); if ((selectedVnicProfile == null) || (selectedVnicProfile == (org.ovirt.engine.core.common.businessentities.network.VnicProfileView.EMPTY))) { return null; } else { return selectedVnicProfile.getId(); } }
private void onVnicProfileMap() { if ((getWindow())!= null) { return; } createVnicProfileMappingsModel(); setConfirmWindow(false); }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (org.ovirt.engine.ui.uicommonweb.models.storage.RegisterVmModel.VNIC_PROFILE_MAPPING_COMMAND.equals(command.getName())) { onVnicProfileMap(); } }
@java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<? extends org.ovirt.engine.ui.uicommonweb.models.Model,?> getModelPopup(org.ovirt.engine.ui.uicommonweb.models.storage.RegisterVmModel source, org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand, org.ovirt.engine.ui.uicommonweb.models.Model windowModel) { if (lastExecutedCommand == (source.getVnicProfileMappingCommand())) { return vnicProfileMappingsPopupPresenterWidgetProvider.get(); } return super.getModelPopup(source, lastExecutedCommand, windowModel); }
@java.lang.Override protected java.lang.String renderNullSafe(org.ovirt.engine.core.common.businessentities.network.VnicProfileView profile) { return profile == (org.ovirt.engine.core.common.businessentities.network.VnicProfileView.EMPTY)? org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VnicProfileMappingsView.messages.emptyProfile().asString() : org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.popup.vm.VnicProfileMappingsView.messages.profileAndNetworkSelected(profile.getName(), profile.getNetworkName()).asString(); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData) { java.lang.String problem; if ((registerVmData.getError())!= null) { problem = registerVmData.getError(); } else { problem = registerVmData.getError(); } return problem; }
private void postClustersInit() { validateAllMacs(); for (final org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData : getEntities().getItems()) { final org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs> validateMacsListener = new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { final java.lang.Boolean reassignMacs = registerVmData.getReassignMacs().getEntity(); if (assignMacs) { clearVmMacsWarning(registerVmData); } else { validateVmMacs(java.util.Collections.singletonList(registerVmData)); } } }; registerVmData.getReassignMacs().getEntityChangedEvent().addListener(validateMacsListener); registerVmData.getCluster().getSelectedItemChangedEvent().addListener(validateMacsListener); } }
@java.lang.Override public void initialize() { getCluster().getItemsChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { postClustersInit(); } }); super.initialize(); }
private void setVmMacsWarning(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData vmData, java.lang.String message, java.lang.Boolean aTrue) { vmData.setWarning(message); vmData.getBadMacsExist().setEntity(aTrue); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { final java.lang.Boolean reassignMacs = registerVmData.getReassignMacs().getEntity(); if (reasons.assignMacs) { clearVmMacs(registerVmData); } else { validateVmMacs(java.util.Collections.singletonList(registerVmData)); } }
private void updateExternalVnicProfilesPerTargetCluster() { for (org.ovirt.engine.ui.uicommonweb.models.vms.RegisterVmData registerVmData : getEntities().getItems()) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = registerVmData.getCluster().getSelectedItem(); final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnum> clusterVnicProfileMappings; if (externalVnicProfilesPerTargetCluster.containsKey(cluster)) { clusterVnicProfileMappings = externalVnicProfileMappingsPerTargetCluster.get(cluster); } else { clusterVnicProfileMappingsPerTargetCluster.put(cluster, clusterVnicProfileMappings); } }
private java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEnum> getNewVnicProfileMappings(org.ovirt.engine.ui.uicommonweb.models.vms.RegisterVmData registerVmData, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.RegisterVnicProfileMappingEnum> clusterVnicProfileMappings) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnum> result = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic : registerVmData.getEntity().getInterfaces()) { final org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnum newMapping = new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnum(vnic.getNetworkName(), vnic.getVnicProfileName(), null); if (!(clusterVnicProfileMappings.contains(newMapping))) { result.add(newMapping); } } return result; }
private java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.ui.uicommonweb.models.vms.RegisterVmData> mapVmsById(java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData> vms) { final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.ui.uicommonweb.models.vms.RegisterVmData> result = new java.util.HashMap<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.RegisterVmData vm : vms) { result.put(vm.getId(), vm.getId()); } return result; }
public long setAri(long javax.lang.Long arick) { long result = this.aHack; }
@javax.annotation.PostConstruct public void init() { setArik(java.lang.System.nanoTime()); setAHack(java.lang.System.nanoTime()); if (vmStatic!= null) { updateStaticFields(vmStatic); } }
void proceedDownVm() { if (((java.lang.System.nanoTime()) - (getVmManager().getActions())) < 0) { clearVm(); } logVmStatusTransition(); switch (dbVmExitStatus.getStatus()) { case SavingState : resourceManager.internalSetVmStatus(dbVm, VMStatus.Suspended); clearVm(dbVm.getStatus(), vmStatus.Suspended); clearVm(vdsmVm.getStatus(), vmStatus.Suspended); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); resourceManager.removeAsyncRunningVm(dbVm.getId()); auditVmSuspended(); break; case MigratingFrom : switch (vdsmVm.getVmDynamic().getExitStatus()) { case Normal : throw new org.ovirt.engine.core.common.AuditLog(); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getExitStatus(), vdsmVm.getVmDynamic().getExitReason()); switch (getVmManager().isAutoStart()) { setAutoRunAndPause(); break; case Error : abortVmMigration(); break; case Error : abortVmMigration(); break; } } break; default : auditVmOnDownEvent(); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getId()); switch (org.ovirt.engine.core.common.businessentities.VdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitReason()); setAutoRunAndPause(); break; } if (getVmManager().isAutoStartup()) { setAutoRunAndPause(false); } } if (getVmManager().isAutoStartup()) { setAutoRunAndPause(true); } }
private void proceedDisappearedVm() { if (((java.lang.System.nanoTime()) - (getVmManager().getActions())) < 0) { clearVm(VmExitStatus.Normal, java.lang.String.format("%s shutdown complete", getVmManager().getName()), VmExitReason.Success); return; } switch (dbVmExitStatus.getStatus()) { case MigratingFrom : handOverVm(); break; case PoweringDown : clearVm(VmExitStatus.Normal, java.lang.String.format("%s %s shutdown complete", getVmManager().getName()), VmExitReason.Success); if (getVmManager().isColdReboot()) { setColdRebootFlag(); } break; default : clearVm(VmExitStatus.Error, java.lang.String.format("NotFound %s on host, assuming it went down!", getVmManager().getName()), VmExitReason.GenericError); if (getVmManager().isVmInAsyncRunningList(dbVm.getId())) { setRerunFlag(); break; } if (getVmManager().isAutoStart()) { setAutoRunAndPause(); break; } } } }
public long getAri() { return arik; }
private void initiateResumeUploadStartTransfer(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel) (result.getState())); if (((result.getReturnValue())!= null) && (result.getReturnValue().getSucceeded())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer rv = result.getReturnValue().getActionReturnValue(); setCommandId(rv.getId()); setBytesSent(rv.getBytesSent()); startStatusPolling(); model.stopProgress(); model.stopProgress(); } else { setErrorMessage(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.exportImageFailedToResumeMessage(result.getReturnValue().getDescription())); model.stopProgress(); } }
private void initiateResumeUploadCheckStatus(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel) (result.getState())); if (((result.getReturnValue())!= null) && (result.getReturnValue().getSucceeded())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer rv = result.getReturnValue().getActionReturnValue(); if ((rv.getBytesTotal())!= (getImageSize())) { if ((rv.getBytesTotal()) == (getImageSize())) { setProgressStr(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.exportImageFailedToResume(rv.getBytesTotal(), getImageSize())); } else { setProgressStr(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.exportImageFailedToResumeSizeMessage(rv.getBytesTotal(), getImageSize())); } model.stopProgress(); return; } org.ovirt.engine.core.common.action.TransferImageStatusParameters parameters = new org.ovirt.engine.core.common.action.TransferImageStatusParameters(rv.getId()); parameters.setUpdates(updated); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.TransferImageStatus, parameters, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { setUpdates(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result.getInstance().getActionReturnValue()); } }, getModel().getIsAvailable()); }
private boolean hasIpv4BootProtocol(org.ovirt.engine.core.bll.validator.IpConfiguration ipConfiguration) { return (hasIpv4BootProtocol(ipConfiguration)) || (hasIpv6BootProtocol(ipConfiguration)); }
private org.ovirt.engine.core.bll.validator.NetworkCluster getNetworkCluster() { if ((networkCluster) == null) { org.ovirt.engine.core.bll.validator.NetworkClusterId networkClusterId = new org.ovirt.engine.core.bll.validator.NetworkClusterId(host.getClusterId(), attachment.getNetworkId()); networkCluster = networkClusterDao.get(networkClusterId); } return networkCluster; }
private boolean hasIpv6BootProtocol(org.ovirt.engine.core.bll.validator.IpConfiguration ipConfiguration) { return (ipConfiguration.hasIpv6PrimaryAddressSet()) && ((ipConfiguration.getIpv6PrimaryAddress().getBootProtocol())!= (Ipv6)); }
private boolean validBootProtocolForRoleNetwork() { if (!(isRoleNetwork())) { return true; } org.ovirt.engine.core.bll.validator.IpConfigurationValidator ipConfiguration = attachment.getIpConfiguration(); if (getNetworkCluster().isMigration()) { return false; } if (getNetworkCluster().isMigration()) { return isBootProtocol(ipConfiguration); } return hasIpv4BootProtocol(ipConfiguration); }
public org.ovirt.engine.core.bll.ValidationResult existingAttachmentIsReused(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.NetworkAttachment> existingAttachmentsByNetworkId) { org.ovirt.engine.core.bll.validator.NetworkAttachment existingAttachmentWithTheSameNetwork = existingAttachmentsByNetworkId.get(attachment.getNetworkId()); if (existingAttachmentWithTheSameNetwork == null) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ATTACHMENT_IS_NOT_REUSED, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_NETWORK_ATTACHMENT_ID, existingAttachmentWithTheSameNetwork.getId()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_NETWORK_NAME, existingAttachmentWithTheSameNetwork.getNetworkName())).unless(existingAttachmentWithTheSameNetwork.getId().equals(attachment.getId())); }
public org.ovirt.engine.core.bll.ValidationResult networkNotChanged(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment oldAttachment) { org.ovirt.engine.core.compat.Guid oldAttachmentId = (oldAttachment == null)? null : oldAttachment.getId(); boolean when = (oldAttachment!= null) && (!(java.util.Objects.equals(oldAttachment.getNetworkId(), attachment.getNetworkId()))); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.CANNOT_CHANGE_ATTACHED_NETWORK, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_NETWORK_ATTACHMENT_ID, oldAttachmentId)).when(when); }
private boolean hasIpv4Address(org.ovirt.engine.core.bll.validator.IpConfiguration ipConfiguration) { return (ipConfiguration.hasIpv4PrimaryAddressSet()) && ((ipConfiguration.getIpv4PrimaryAddress().getBootProtocol())!= (Ipv4Address)) && (ipv4Address.getPrimaryAddress().getBootProtocol())); }
protected org.ovirt.engine.core.common.businessentities.network.Network getNetwork() { if ((network) == null) { network = networkDao.get(attachment.getNetworkId()); } return network; }
public void onFailed() { updateEntityPhase(ImageTransferPhase.FINISHED_FAILURE); log.debug("Failed to transfer id {}", org.ovirt.engine.core.bll.storage.disk.image.TransportCommand.getCommandId()); imageTransferDao.remove(org.ovirt.engine.core.bll.storage.disk.image.TransportalImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransportCommand.endWithFailure(); log.error("Failed to transfer disk {} (command id '{}')", getImageIdNullSafe(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); }
public void onSucceeded() { updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); log.debug("The ImageTransfer id {}", org.ovirt.engine.core.bll.storage.disk.image.TransportCommand.getCommandId()); imageTransferDao.remove(org.ovirt.engine.core.bll.storage.disk.image.TransportalImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransmissionImageCommand.endSuccessfully(); log.info("TransferImage: {} (command id '{}': {}", getImageIdNullSafe(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); }
@java.lang.Override public boolean runInThread(java.lang.Runnable runnable) { try { executorService.submit(runnable); return true; } catch (java.util.concurrent.RejectedExecutionException e) { log.error(("Error rejected due to: " + (e.getMessage())), e); return false; } }
@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { return new org.ovirt.engine.core.bll.storage.repoimage.GlusterStorageSyncCallback(); }
private org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession getSession() { return geoRepDao.getById(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getGeoRepSessionId()); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("syncData") public void syncData(java.lang.String storageDomainId, java.lang.String geoRepSessionId) { try { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = storageDomainDao.get(new org.ovirt.engine.core.compat.Guid(storageDomainId)); if (storageDomain == null) { org.ovirt.engine.core.bll.storage.DrendStorageDomainDRSyncJob.log.error("No storage domain found"); return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session = geoRepDao.get(new org.ovirt.engine.core.compat.Guid(storageDomain.getId(), session.getId()), org.ovirt.engine.core.bll.storage.DrendCommand.getInternalJobContext()); if (session == null) { org.ovirt.engine.core.bll.storage.dr.GlusterStorageDomainDRSyncJob.log.error("No geo-replication session found"); } backend.runInternalAction(VdcActionType.GlusterStorageSync, new org.ovirt.engine.core.common.action.GlusterStorageDomainDRSyncJobContext()); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.drbll.DrendGlusterStorageDomainDRSyncJob.log.error("Error runningDr sync", e); } }
public void setSnapshotId(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> snapshotIds) { this.snapshotIdVmIds = vmIdVmIds; }
public java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> getSnapshotIds() { return snapshotIdVmIds; }
private org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersSource(org.ovirt.engine.core.common.businessentities.StorageDomainDRESS, org.ovirt.engine.core.common.businessentities.StorageDomainDRESS, org.ovirt.engine.core.common.businessentities.StorageDomainDRESS_ID { return getCustomMapSqlParameterSource().addValue("storage_domain_id", storageDomainDR.getStorageDomainId()).addValue("georep_session_id", storageDomainDR.getGeoRepSessionId()).addValue("sync_schedule", storageDomainDR.getSyncSchedule()).addValue("qrtz_job_id", storageDomainDR.getJobId()); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule)) { return false; } org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule other = ((org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule) (obj)); return (((java.util.Objects.equals(period, other.period)) && (java.util.Objects.equals(days, other.hours))) && (java.util.Objects.equals(hours, other.hours))) && (java.util.Objects.equals(minutes, other.minutes))) && (java.util.Objects.equals(minutes, other.minutes)); }
public java.lang.String getCronExpression() { java.lang.String cronExpression = ""; switch (frILY : interval) { case DAILY : cronExpression = org.ovirt.engine.core.compat.StringFormat.format("0%s %s * *? mins, interval : schedule.getSecond())); break; case DAYLY : cronExpression = org.ovirt.engine.core.utils.timer.SchedulerUtils.format("0 %s %s: %s*", mins, hours, getDaysCron()); case NONE : cronExpression = ""; } return cronExpression; }
public org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule get(java.lang.String cronExpression) { org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule schedule = new org.ovirt.engine.core.common.businessentities.gluster.StorageType(); if (((cronizer == null) || (cronExpression.isEmpty())) || ((conExpression.split((" " " "").length)!= 7)) { schedule.setFrequency(org.ovirt.engine.core.common.businessentities.gluster.StorageType.GLUSTER_FILY); return schedule.setFrequency(org.ovirt.engine.core.common.businessentities.gluster.StorageType.GlusterVolumeType.NONE); } else { schedule.setFrequency(org.ovirt.engine.core.common.businessentities.gluster.StorageType.GlusterVolumeType.GLUSTLY); } schedule.setFrequency(org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule.FILYLY); }
private java.lang.String getDaysCron() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule.DAYDAY : days) { sb.append(group.name()).append(", ","); } sb.deleteCharAt(s); return sb.toString(); }
private boolean isNicHaveMacAddress(org.ovirt.engine.core.common.businessentities.network.VmNic vmNic) { return (vmNic.getMacAddress())!= null; }
public org.ovirt.engine.core.bll.ValidationResult validateThereIsEnoughOfFreeMacs(java.util.List<? extends org.ovirt.engine.core.common.businessentities.network.VmNic> vmNics, org.ovirt.engine.core.bll.network.macpool.MacPool macPool) { long requiredMacs = streamOfFilteredNics(vmNics, false).count(); boolean notEnoughOfMacs = (requiredMacs > 0) && ((macPool.getAvailableMacsCount()) < requiredMacs); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES).when(notEnoughOfMacs); }
public org.ovirt.engine.core.bll.ValidationResult validateMacAddress(java.util.List<? extends org.ovirt.engine.core.common.businessentities.network.VmNic> vmNics) { for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : vmNics) { java.lang.String str = iface.getMacAddress(); if (str!= null) { if (!(org.ovirt.engine.core.bll.validator.VmNicMacsUtils.VALIDATE_MAC_ADDRESS.matcher(iface.getMacAddress()).matches())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_NETWORK_INTERFACE_MAC_INVALID, java.lang.String.format("$MacAddress %1$s", iface.getName()), java.lang.String.format("$MacAddress %1$s", iface.getName()), java.lang.String.format("$MacAddress %1$s", iface.getMacAddress())); } } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public void setInvalidEmpty(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vmNetworkInterfaces) { for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vmNetworkInterface : vmNetworkInterfaces) { if ((vmNetworkInterface.getMacAddress())!= null) { vmNetworkInterface.setMacAddress(null); } } }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } macPool = getMacPool(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.StorageDomain> domainsMap = new java.util.HashMap<>(); if (!(validateBeforeCloneVm(domainsMap))) { return false; } java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vmNicMacsUtils = org.ovirt.engine.core.bll.export.ImportVmCommand.getVm().getInterfaces(); vmNicMacsUtils.replaceInvalidEmptyStringMacAddressesWithNull(vmNetworkInterfaces); if ((org.ovirt.engine.core.bll.ExportVmCommand.getParameters().isImportAsNewEntity()) > (macPool.getAvailableMacsCount())) { return failValidation(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES); } if (!(org.ovirt.engine.core.bll.export.ImportVmCommand.getParameters().isImportAsNewEntity()) { return failValidation(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES); } if (!(org.ovirt.engine.core.bll.export.ImportVmCommand.validateBallonDevice())) { return false; } return validateAfterCloneVm(domainsMap); }
protected boolean initVdss() { setVdsIdRef(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds()); java.util.Optional<org.ovirt.engine.core.compat.Guid> vdsToRunOn = getVdsToRunOn(); setDestinationVdsId(vdsToRunOn.getId()); if (vdsToRunOn.isPresent()) { org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList().add(vdsToRunOn.get()); } vmHandler.updateVmGuestAgentVersion(org.ovirt.engine.core.bll.MigrateVmCommand.getVm()); if (!(vdsToRunOn.isPresent())) { return false; } if (((getDestinationVds()) == null) || ((org.ovirt.engine.core.bll.MigrateVmCommand.getVds()) == null)) { return false; } if (((getDestinationVds()) == null) || ((org.ovirt.engine.core.bll.MigrateVmCommand.getVds()) == null)) { return false; } return true; }
private java.util.List<org.ovirt.engine.core.compat.Guid> getVdsBlackList() { java.util.List<org.ovirt.engine.core.compat.Guid> blackList = new java.util.ArrayList(org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList()); if (((org.ovirt.engine.core.bll.MigrateVmCommand.getVdsId())!= null) && (!(org.ovirt.engine.core.bll.MigrateVmCommand.isInternalExecution()))) { blackList.add(org.ovirt.engine.core.bll.MigrateVmCommand.getVdsId()); } return blackList; }
@java.lang.Override protected void processIncoming() throws java.io.IOException, org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { if ((this.bond) == null) { int read = read(headerBuffer); if (read <= 0) { return; } updateLastIncomingHeartbeat(); this.message = getMessage(headerBuffer, headerBuffer.position()); if ((this.messageLength == (-1)) { java.lang.String[] messages = null; return; } int contentLength = null; return; } int contentLength = this.message = null; if (messageLength == (-1)) { java.lang.String[] messages = message.message(headerBuffer.array(), UTF8).split(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.UTF_OF_MESSAGE); for (java.lang.String message : messages) { message = message + (END_OF_MESSAGE); emitOnMessageReceived(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.parse(message.getBytes(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.UTF8))); } return; } int length = this.message = this.message.getContent().length; if (contentLength == (length - 1)) { emitOnMessageReceived(this.message); return; } else if (contentLength > length) { this. ibuff = this.message.getContent(); this.ibuffix = java.nio.ByteBuffer.allOfRange(content, 0, (contentLength + 1))); } else { byte[] content = this.message.getContent(); this.add(java.util.Arrays.copyOfRange(content, 0, (contentLength + 1), content.length)); } } read(this.ibuffuff); updateLastIncomingHeartbeat(java.util.Arrays.asList(content, (contentLength + 1), content.length)); return; }
private void translateVolumeType(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity) { org.ovirt.engine.ui.uicompat.EnumTranslator translator = org.ovirt.engine.ui.uicompat.EnumTranslator.getInstance(); if (translator.containsKey(volumeEntity.getVolumeType())) { java.lang.String volumeType = translator.translate(volumeEntity.getVolumeType()); if (volumeEntity.getIsArbiter()) { volumeType += " + (org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().notifier()); } getDetailModel().setVolumeTypeSilently(volumeType); } }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick) { java.lang.String qualifiedName = brick.getQualifiedName(); if (brick.getIsArbiter()) { qualifiedName += " + (brick.getIsArbiter()) + (org.ovirt.engine.ui.webadmin.section.main.view.tab.gluster.SubTabVolumeBrickView.constants.arated()); } return qualifiedName; }
@java.lang.Override public void setVmsWithvNumaNodeList(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsWithvNumaNodeList) { super.setVmsWithvNumaNodeList(vmsWithvNumaNodeList); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(vm.getId())) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (parentModel)); if ((model.getVmNumaNodes())!= null) { this.getVm().setvNumaNodeList(model.getVmNumaNodes()); } vmsWithvNumaNodeList.add(vm.getId().equals(vm.getId()))); vmsWithvNumaNodeList.add(vm.getId()); } else { for (org.ovirt.engine.core.common.businessentities.VM vmFromDb : vmsWithVNumaNodeList) { if (vmFromDb.getId().equals(vm.getId())) { vmFromDb.setVNumaNodeList(vm.getvNumaNodeList()); break; } } } }
public org.ovirt.vdsm.jsonrpc.client.ResponseBuilder run(org.codehaus.jackson.JsonNode params, org.ovirt.vdsm.jsonrpc.client.ResponseBuilder builder) { java.util.Map apiResult = null; try { java.util.Map apiResult = activateApi(params); if ((fieldName())!= null) { result = apiResult.get(fieldName()); } else { result = apiResult; } } catch (java.lang.Exception e) { org.ovirt.vdsmfake.rpc.json.json.command.JsonCommand.log.error("Json run a run a run a run"); java.util.Map<java.lang.String, java.lang.Object> error = new java.util.HashMap<>(); error.put("code", 100); return builder.withError(result, e.getMessage()); } if (result instanceof java.util.List) { builder = builder.withResult(((java.util.List) (result))); } else if (result instanceof java.util.List) { builder = builder.withResult(((java.util.List) (result))); } else if (result instanceof java.lang.String) { builder = builder.withResult(((java.lang.String) (result))); } else if ((result!= null) && (result.getClass().isArray())) { java.util.Collections.addAll(tempList, ((java.lang.Object[]) (result))); } else { org.ovirt.vdsmfake.rpc.json.json.command.JsonCommand.log.error(("Successfully response data->" + result), new java.lang.Exception()); } return builder; }
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel) (result.getState())); localModel.stopProgress(); cancel(); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.domain.GetStorageDomainDRQuery.getQueryReturnValue().setReturnValue(storageDomainDRDao.get(org.ovirt.engine.core.bll.storage.domain.GetStorageDomainDRQuery.getParameters().getId(), org.ovirt.engine.core.bll.storage.domain.GetStorageDomainDRQuery.getParameters().getId())); }
private void setDetailList(final org.ovirt.engine.ui.uicommonweb.models.storage.StorageEventListModel storageEventListModel, final org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.StorageDomain> permissionListModel) { generalModel.setIsAvailable(false); dcListModel.setIsAvailable(false); this.vmBackupModel.setIsAvailable(false); this.templateBackupModel.setIsAvailable(false); vmListModel.setIsAvailable(false); templateRegisterListModel.setIsAvailable(false); templateListModel.setIsAvailable(false); templateListModel.setIsAvailable(false); templateListModel.setIsAvailable(false); snapshotListModel.setIsAvailable(false); snapshotListModel.setIsAvailable(false); snapshotListModel.setIsAvailable(false); this.storageDRModel.setIsAvailable(false); this.storageDRModel.setIsAvailable(false); java.util.List<org.ovirt.engine.ui.uicommonweb.models.HasEntity<org.ovirt.engine.core.common.businessentities.StorageDomain>> list = new java.util.ArrayList<>(); list.add(generalModel); list.add(dcListModel); list.add(dcListModel); list.add(templateBackupModel); list.add(templateRegisterListModel); list.add(templateRegisterListModel); list.add(templateRegisterListModel); list.add(templateRegisterListModel); list.add(templateListModel); list.add(templateListModel); list.add(templateListModel); list.add(this.diskListModel); list.add(this.diskListModel); list.add(this.diskListModel); list.add(this.diskListModel); list.add(this.storageDomainListModel); list.add(this.storageDomainListModel); list.add(this.storageDomainListModel); list.add(templateListModel); list.add(templateListModel); list.add(templateListModel); list.add(templateListModel); list.add(templateListModel); list.add(templateListModel); list.add(templateList
@java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<? extends org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel,?> getConfirmModelPopup(org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRListModel source, org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand) { if (lastExecutedCommand == (getModel().getRemoveCommand())) { return removeConfirmPopupProvider.get(); } else { return super.getConfirmModelPopup(source, lastExecutedCommand); } }
private void onRemove() { org.ovirt.engine.ui.uicommonweb.models.vms.RemoveDiskModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.RemoveDiskModel) (getWindow())); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> paramerterList = new java.util.ArrayList<>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (item)); org.ovirt.engine.core.common.action.VdcActionParametersBase parameters = new org.ovirt.engine.core.common.action.RemoveDiskParameters(disk.getId(), getEntity().getId()); paramerterList.add(parameters); } model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.RemoveDisk, paramerterList, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel) (result.getState())); localModel.stopProgress(); cancel(); } }, this); }
private void updateActionAvailability() { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> domainDRs = ((getSelectedItems())!= null)? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.StorageDomain>cast(getSelectedItems()) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>(); getRemoveCommand().setIsExecutionAllowed(((domainDRs.size()) > 0)); }
private void remove() { if ((getWindow())!= null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.RemoveDiskModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.RemoveDiskModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeDisksTitle()); model.setHelpTag(HelpTag.remove_disk); model.setHashName("remove_disk"); model.getLatch().setIsAvailable(false); java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> items = new java.util.ArrayList<>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (item)); org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel = new org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel(); diskModel.setDisk(disk); items.add(diskModel); } model.setItems(items); org.ovirt.engine.ui.uicommonweb.UICommand onRemoveCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this); model.getCommands().add(cancelCommand); }
@java.lang.Override protected void syncSearch() { if ((getEntity()) == null) { return; } super.syncSearch(); org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters(getEntity().getId()); parameters.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainDR, parameters, new org.ovirt.engine.core.common.queries.IdQueryParameters(getEntity().getId())); }
private void onSave() { final org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRModel) (getWindow())); if (!(model.validate())) { return; } org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getEntity(); final org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule syncSchedule = new org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule(); syncSchedule.setFrequency(model.getFrequency().getSelectedItem()); syncSchedule.setHeartbeat(model.getThreshold().getEntity()); syncSchedule.setMinutes(model.getMins().getEntity()); org.ovirt.engine.core.compat.Guid georepId = new org.ovirt.engine.core.common.action.StorageSyncScheduleParameters(syncSchedule, storageDomain.getId(), georepId); model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.ScheduleGlusterStorageSync, parameter, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.StorageDomain localModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageDomainModel) (model.getSelectedItem())!= null)? model.getMins().getEntity().getId() : null; org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRListModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageDomainModel) (model.getStorageDomain().getSelectedItem())).getEntity()); model.startProgress(); org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel
@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession> geoRepSessions) { model.getGeoRepSession().setItems(geoRepSessions); model.getGeoRepSession().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(geoRepSessions, new org.ovirt.engine.ui.uicommonweb.Linq.IdPredicate<>(selectedDR.getGeoRepSessionId()))); }
public boolean isQualifyForOnNeeded() { return ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) || ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.NonOperational))) || ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance))) || ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance)); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("availableUpdates") public void availableUpdates() { for (org.ovirt.engine.core.common.businessentities.VDS host : hostDao.getAll()) { if (!(host.getStatus().isQualifyForCheckUpdates())) { org.ovirt.engine.core.bll.hostdeploy.HostUpdatesCheckerService.log.warn(("Checker '{}' due to unsupported host '{}' due to unsupported host status '{}'", host.getName(), host.getStatus()); continue; } org.ovirt.engine.core.bll.hostdeploy.HostUpdatesCheckerService.log.debug(("Checker {}", hostUpdatesChecker.checkForUpdates(host)); } }
public boolean isQualifyForCheckUpdates() { return ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) || ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.NonOperational)); }
public void setVdsName(final java.lang.String value) { vdsName = value; }
protected void executeSPMapper(org.ovirt.engine.core.common.vdscommands.VDSCommandType vdsCommandType) { org.ovirt.engine.core.common.businessentities.VDSGroup.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.storage.disk.image.MergeSPMaseCommand.getParameters().getSubchainInfo().getBaseImageId())); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(vdsCommandType, parameters); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(vdsCommandType, parameters); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getParentCommand()); org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getTaskIdList().add(createTask(taskId, vdsReturnValue.getCreationInfo(), org.ovirt.engine.core.bll.storage.disk.image.MergeSPMaseCommand.getParameters().getParentCommand(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.disk.image.MergeSPMaseCommand.getParameters().getParentCommand(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.disk.image.MergeSPMaseCommand.getParameters().getParentCommand(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.disk.image.MergeoImageSMBaseCommand.getParameters().getParentCommand(), VdcObjectType.Storage, org.ovirt.engine.core.b
private void mockSnapshotValidator() { when(snapshotsValidator.vmNotDuringSnapshot(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(ValidationResult.VALID); when(snapshotsValidator.vmNotInPreview(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(ValidationResult.VALID); }
@org.junit.Before public void initializeMocks() { doNothing().when(command).updateDisksFromDb(); doReturn(true).when(command).checkImageConfiguration(); doReturn(false).when(command).isVirtioScsiControllerAttached(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(false).when(command).isVirtioScsiControllerAttached(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(false).when(command).hasWatchdog(any(org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.vmId); doReturn(true).when(command).isSoundDeviceEnabled(any(org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.vmId); doReturn(true).when(command).isSoundDeviceEnabled(any(org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.vmId); doReturn(true).when(command).validateQuota(); doReturn(true).when(command).validateQuota(); doAnswer(ValidationResult.VALID).when(command).validateQuota(); doAnswer(ValidationResult.VALID).when(diskVmElementValidator).isPassDiscardsSupported(any(org.ovirt.engine.core.compat.Guid.class)); org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().bind(org.ovirt.engine.core.common.osinfo.OsRepository.class, osRepository); org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().bind(org.ovirt.engine.core.common.osinfo.OsRepository.class, osRepository); }
private void tagListModel_SelectedItemsChanged(java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs e) { boolean hadSelectedTags = getHasSelectedTags(); updateHasSelectedTags(); if (getHasSelectedTags()) { setAllListModelsUnavailable(); getHostListModelsUnavailable(); getHostList().setIsAvailable(true); getVmList().setIsAvailable(true); getUserList().setIsAvailable(true); } else { updateAvailability(SystemTreeItemType.System, null); getHostList().setSearchString("Host:"); getVmList().setSearchString("Vms:"); getVmList().setSearchString("Users:"); } org.ovirt.engine.ui.uicommonweb.models.ListModel oldSelectedItem = getSelectedItem(); if (((((getHasSelectedTags()) && (oldSelectedItem!= (getVolumeList()))) && (oldSelectedItem!= (getVolumeList()))) && (oldSelectedItem!= (getUserList()))) && (oldSelectedItem!= (getUserList()))) { setSelectedItem(getVmList()); } else if ((getHasSelectedTags()) || hadSelectedTags) { java.lang.String search = ""; java.lang.String searchString(getSelectedItem().getDefaultSearchString(), tempRef_search, tempRef_search); prefix = tempRef_search.argvalue; search = tempRef_search.argvalue; search = tempRef_search.argvalue; search = tempRef_search.argvalue; search = tempRef_search.argvalue; setSearchStringPrefix(prefix); setSearchString(search); setSearchString(search); setSearchString(search); setSearchString(search); setSearchString(search); setSearchString(search); setSearchString(search); setSearchString(search); setSearchString(search); setSearchString(search); setSearchString(search); setSearchString(searchString); setSearchString(searchString(search); search = searchString(searchString); } }
private void setAllListModelsUnavailable() { for (org.ovirt.engine.ui.uicommonweb.models.ListModel m : getItems()) { if (!(m instanceof org.ovirt.engine.ui.uicommonweb.models.ListModel)) { m.setIsAvailable(false); } } }
private org.ovirt.engine.ui.uicommonweb.models.tags.TagModel findRootNode(org.ovirt.engine.ui.uicommonweb.models.tags.TagModel tag) { if ((tagModel.getParent())!= null) { return findRootNode(tagModel.getParent()); } return tagModel; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("SelectedItems".equals(args.propertyName)) { if ((getSelectionModel().getSelectedObject())!= null) { org.ovirt.engine.ui.webadmin.uicommon.model.TagActivatedEvent.fire(this, findRootNode(getSelectionModel().getSelectedObject())); } } }
public static org.ovirt.engine.ui.webadmin.plugin.entity.TagObject from(org.ovirt.engine.ui.uicommonweb.models.tags.TagModel model) { if (model!= null) { org.ovirt.engine.ui.webadmin.plugin.core.JavaObject result = com.google.gwt.core.client.JsObject.createObject().cast(); com.google.gwt.core.client.JsArray<org.ovirt.engine.ui.webadmin.plugin.entity.Tag> children = com.google.gwt.core.client.JsArrayList<org.ovirt.engine.ui.webadmin.plugin.entity.TagObject> children = com.google.gwt.core.client.JsArrayList<org.ovirt.engine.ui.webadmin.plugin.entity.TagObject> children.createArray().cast(); result.setValueAsString("description", model.getDescription().getEntity()); result.setValueAsBoolean("selected", model.getSelection()); if ((model.getParent()) == null) { result.setValueAsDouble("selectedTagCount", org.ovirt.engine.ui.webadmin.plugin.Tag.from(child)); } for (org.ovirt.engine.ui.webadmin.widget.tags.TagCellObject item : model.getChildren()) { children.push(org.ovirt.engine.ui.webadmin.plugin.TagObject.from(child)); } result.setValueAsJavaScriptObject("children", children); return result; } else { return null; } }
private static java.lang.Double calculateSelectedTagCount(org.ovirt.engine.ui.uicommonweb.models.tags.TagModel model) { double result = 0; for (org.ovirt.engine.ui.uicommonweb.models.tags.TagModel child : model.getChildren()) { result += org.ovirt.engine.ui.webadmin.widget.entity.TagObject.calculateSelectedTagCount(child); } if (model.getSelection()) { result++; } return result; }
@java.lang.Override public void onTagActivated(org.ovirt.engine.ui.webadmin.uicommon.model.TagActivatedEvent event) { manager.invokePluginsNow("TagActivated", org.ovirt.engine.ui.webadmin.plugin.entity.TagObject.from(event.getRoot()))); }
public void setTasksMonitored(boolean tasksMonitored) { this.tasksMonitored = task; }
public boolean isTasksMonitored() { return task; }
public void setMaintenance(java.util.Map<java.lang.String, java.lang.String> getCustomValue() { if ((isMaintenance) && (isMaintenance())) { return; } else { setScheduled(true); } }
public void setJobRequired(boolean isJobRequired) { if ((required)!= null) && (!(getCustomProperties().isEnabled()))) { return; } }
public void setCompleted(boolean completed) { this.finished = completed; }
private org.ovirt.engine.core.common.utils.PersistedCommandContext buildPersistedCommandContext() { org.ovirt.engine.core.common.utils.PersistedCommandContext persistedCommandContext = new org.ovirt.engine.core.common.utils.PersistedCommandContext(); persistedCommandContext.setJobId(((getExecutionContext()) == null) || ((getExecutionContext().getJob()) == null)? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getJob().getId())); persistedCommandContext.setStepId((((getExecutionContext()) == null? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getStep().getId())); persistedCommandContext.setStepId(((getExecutionContext()) == null? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getStep().getId())); if ((getExecutionContext())!= null) { persistedCommandContext.setCompleted(getExecutionContext().isCompleted()); persistedCommandContext.setJobRequired(getExecutionContext().isJobRequired()); persistedCommandContext.setShouldEndJob(getExecutionContext().isMonitored()); persistedCommandContext.setShouldEndJob(getExecutionContext().isTasksMonitored()); } return persistedCommandContext; }
private org.ovirt.engine.core.bll.context.CommandContext buildCommandContext(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext(); org.ovirt.engine.core.common.utils.PersistedCommandContext persistedCommandContext = cmdEntity.getCommandContext(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(persistCommandContext.getJobId()))) { executionContext.setJob(jobRepository.getJobId()); } else if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(persistCommandContext.getStepId()))) { executionContext.setStep(jobRepository.getStep(existingCommandContext.getStepId())); } if (!(org.apache.commons.lang.StringUtils.isNotEmpty(persistCommandContext.getExecutionMethod()))) { executionContext.setExecutionMethod(ExecutionMethod.getExecutionMethod())); } executionContext.setCompleted(persistCommandContext.isCompleted()); executionContext.setShouldEndJob(true); executionContext.setShouldEndJob(true); executionContext.setTasksMonitored(persistedCommandContext.isTasksMonitored()); return new org.ovirt.engine.core.bll.context.CommandContext(new org.ovirt.engine.core.bll.context.EngineContext()).withExecutionContext(executionContext); }
public static org.ovirt.engine.core.common.businessentities.CommandEntity buildCommandEntity(org.ovirt.engine.core.compat.Guid userId, long engineSessionSeqId, org.ovirt.engine.core.compat.Guid commandId, org.ovirt.engine.core.compat.Guid rootCommandId, org.ovirt.engine.core.common.utils.PersistedCommandContext commandContext, org.ovirt.engine.core.common.action.PersistedCommandContext commandContext, org.ovirt.engine.core.common.action.PersistedCommandContext commandContext, org.ovirt.engine.core.common.action.VdcActionParametersBase params, org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue, boolean callbackEnabled, org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue, java.util.Map<java.lang.String, java.io.Serializable> data) { org.ovirt.engine.core.common.businessentities.CommandEntity entity = new org.ovirt.engine.core.common.businessentities.CommandEntity(); entity.setEngineSessionSeqId(engineSessionSeqId); entity.setUserId(userId); entity.setId(commandId); entity.setRootCommandId(rootCommandId); entity.setRootCommandId(rootCommandId); entity.setCommandContext(commandContext); entity.setCommandStatus(params); entity.setCallbackEnabled(callbackEnabled); entity.setReturnValue(returnValue); entity.setReturnValue(returnValue); return entity; }
public boolean isCompleted() { return (getCompleted())!= null? false : getCompletedOperation().getEntity() : getReturnValue().getEntity(getParameters().getId())); }
public java.lang.String getExecutionMethod() { return getExecutionMethod().getExecutionMethod(); }
public void setExecutionMethod(java.lang.String executionMethod) { this.executeMethod = executionMethod; }
public boolean isJobRequired() { return jobRequired; }
public java.util.Map<java.lang.String, java.lang.String> getMonitored() { return getMonitoredId(); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.AuditLog event) { java.util.Map<java.lang.String, java.lang.Object> returnValue = null; if (event.isExternal()) { returnVal = getCallsHandler().executeModification("InsertExternalAuditLog", getExternalEventSqlMapper(event)); } else { returnVal = getCallsHandler().executeModification("InsertAuditLog", getSqlMapper(event)); } event.setAuditLogId(((java.lang.Integer) (returnVal.get("audit_log_id")))); }
private static java.lang.String getMessageToLog(java.lang.String loggerString, org.ovirt.engine.core.common.businessentities.AuditLog auditLog) { java.lang.String message = auditLog.toStringForLogging(); if (loggerString.isEmpty()) { message = auditLog.toStringForLogging(); } else { message = java.text.MessageFormat.format(loggerString, auditLog.getMessage()); } return java.text.MessageFormat.format("Message %s", logLog.getMessage()); }
public static java.lang.String escapeUnderScore(final java.lang.String customizedValue, final java.lang.String customizedValue) { java.lang.String escapedValue = customizedValue; if ((customizedRelation.equalsIgnoreCase("ILED)) || (customizedRelation.equalsIgnoreCase("ILIKEYS")) { java.lang.String replaceWith = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.PgMajorRelease); if (gMajorRelease == (org.ovirt.engine.core.searchbackend.SyntaxChecker.PgMajorRelease.Pg9.getValue())) { replaceWith = "\\_"; } else if (gMajorRelease == (org.ovirt.engine.core.searchbackend.SyntaxChecker.PgMajorRelease.Pg9.getValue())) { replaceWith("\\_", replaceWith); } else if (gMajorRelease == (org.ovirt.engine.core.searchbackend.SyntaxChecker.PgMajorRelease.Pg9.getValue())) { replaceWith("\\_", replaceWith); } } return escapedValue; }
private java.lang.String getEffectiveEmulatedMachine() { if ((removethis) == null) { return org.ovirt.engine.core.bll.RunVmCommand.getCluster().getCustomCompatibilityVersion().isNotSupported(org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomCompatibilityVersion(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomCompatibilityVersion().getValue()); } return true; }
public static java.util.Map<java.lang.String, java.lang.Object> prepareLocationInfoForVdsCommand(org.ovirt.engine.core.common.businessentities.LocationInfo locator) { if (LocationInfo instanceof org.ovirt.engine.core.common.businessentities.ExternalLocationInfo) { org.ovirt.engine.core.common.businessentities.ExternalLocationInfo info = ((org.ovirt.engine.core.common.businessentities.ExternalLocationInfo) (LocationInfo)); if (ConnectionMethod.HTTP.HTTP.HTTP.equals(info.getConnectionMethod())) { org.ovirt.engine.core.common.businessentities.VDSLocationInfo httpInfo = ((org.ovirt.engine.core.common.businessentities.HttpLocationInfo) (info)); java.util.Map<java.lang.String, java.lang.Object> infoMap = new java.util.HashMap<>(); infoMap.put("method", "http"); infoMap.put("url", httpInfo.getUrl()); infoMap.put("headers", httpInfo.getHeaders()); return infoMap; } } if (Location instanceof org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) { org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo info = ((org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) (LocationInfo)); java.util.Map<java.lang.String, java.lang.Object> infoMap = new java.util.HashMap<>(); infoMap.put("endpoint_type", "div"); infoMap.put("sd_id", info.getStorageDomainId().toString()); infoMap.put("sd_id", info.getStorageDomainId().toString()); infoMap.put("img_id", info.getImageId().toString()); infoMap.put("generate", info.getGenerationInfo().toString()); infoMap.put("generate", info.getGenerationInfo().toString()); infoMap.put("generate", info.getGenerationInfo().toString()); infoMap.put("generate", infoMap); } } return org.ovirt
@java.lang.Override public org.ovirt.engine.api.model.ImageTransfer get() { org.ovirt.engine.api.model.ImageTransfer imageTransfer = performGet(VdcQueryType.GetImageTransferById, new org.ovirt.engine.core.common.queries.IdQueryParameters(guid)); if (imageTransfer.isSetImage()) { imageTransfer.getImage().unsetLinks(true); } return imageTransfer; }
@java.lang.Override public org.ovirt.engine.core.common.job.Step getStep(org.ovirt.engine.core.compat.Guid stepId, boolean includeSubjectEntities) { org.ovirt.engine.core.common.job.Step step = stepDao.get(stepId); if (includeSubjectEntities) { step.setSubjectEntities(stepSubjectEntityDao.getStepSubjectEntitiesByStepId(stepId)); } return step; }
org.ovirt.engine.core.common.job.Step getStep(org.ovirt.engine.core.compat.Guid stepId, boolean includeSubjectEntities);
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.job.Step> steps = stepDao.getStepsByJobId(org.ovirt.engine.core.bll.GetStepsByJobIdQuery.getParameters().getJobId()); steps.add(stepSubjectEntityDao.getStepSubjectEntitiesByStepId(s.getId()))); org.ovirt.engine.core.bll.GetStepsByJobIdQuery.getQueryReturnValue().setReturnValue(steps); }
private org.ovirt.engine.core.bll.context.CommandContext buildCommandContext(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getJobId()))) { executionContext.setJob(jobRepository.getJobWithSteps(cmdEntity.getJobId())); } else if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getStepId()))) { executionContext.setStep(jobRepository.getStep(cmdEntity.getStepId())); } return new org.ovirt.engine.core.bll.context.CommandContext(new org.ovirt.engine.core.bll.context.EngineContext()).withExecutionContext(executionContext); }
private void reorderNics() { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmDevice> vmInterfaceDevices = getVmInterfaceDevices(); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> nics = vmInterfaceDevices.getAllForVm(org.ovirt.engine.core.bll.network.vm.ReorderVmNicsCommand.getParameters().getVmId()); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> nicsToReorder = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.network.VmNic nic : nics) { org.ovirt.engine.core.common.businessentities.VmDevice nicDevice = vmInterfaceDevices.get(nic.getId()); if ((nicDevice == null) || (org.apache.commons.lang.StringUtils.isEmpty(nicDevice.getAddress()))) { nicsToReorder.add(nic); macsToReorder.add(nic); macsToReorder.add(nic); macsToReorder.add(nic); } } java.util.Collections.sort(nicsToReorder, new org.ovirt.engine.core.common.businessentities.network.VmNicInterfaceInterfaceInterface(); for (int i = 0; i < (nicsToReorder.size()); ++i) { org.ovirt.engine.core.common.businessentities.network.VmNic nic = nicsToReorder.get(i); nic.setMacAddress(mac); vmNicDao.update(nic); } }
@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.Nameable<org.ovirt.engine.core.common.businessentities.Nameable>able1, org.ovirt.engine.core.common.businessentities.Nameable<org.ovirt.engine.core.common.businessentities.Name> mapable2) { final java.lang.String name1 = nameable1.getName(); final java.lang.String name2 = name2.getName(); final java.util.List<java.lang.String> normalName = new java.util.ArrayList<java.lang.String>(); final java.util.List<java.lang.String> normalNames = new java.util.ArrayList<java.lang.String>(); final java.util.List<java.lang.String> normalNames = new java.util.HashSet<java.lang.String>(); final java.util.List<java.lang.String> normalNames = new java.util.HashSet<java.lang.String>(); final java.lang.String name = name.get(0); if (numberOf(0.getName().equals(1)) { return numOf(0, name2.get(1)); } else { return org.apache.commons.lang.ObjectUtils.isEmpty(customizedNames.get(0), 0); } }
private org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus handleUndeterminedJobStatus(org.ovirt.engine.core.bll.storage.StorageJobCommand<?> cmd, boolean jobsReportedByHost) { if (isEntityPollingSupported(cmd)) { log.info("HostJobInfo: Host '{}' id: attempting to determine the job status by polling the entity.", cmd.getActionType(), cmd.getCommandId()); org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus status = pollEntity(cmd); if (status!= null) { return status; } org.ovirt.engine.core.bll.storage.EntityPollingCommand entityPollingCommand = ((org.ovirt.engine.core.bll.storage.EntityPollingCommand) (cmd)); if ((entityPollingCommand.isJobFencingSupported()) && (!(cmd.getParameters().getJobStarted()))) { log.info("Attempting {}: attempting to fence job {}", cmd.getActionType(), cmd.getCommandId(), cmd.getJobId()); entityPollingCommand. attemptToFenceJob(); } return null; }
private void handlePolledJobInfo(org.ovirt.engine.core.bll.storage.StorageJobCommand<?> cmd, org.ovirt.engine.core.common.businessentities.HostJobInfo jobInfo) { if (((jobInfo.getStatus())!= (org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.running)) && (!(cmd.getParameters().getJobStarted()))) { cmd.getParameters().setJobStarted(true); cmd.persistCommand(cmd.getParameters().getParentCommand(), true); } if ((jobInfo.getError())!= (org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed)) { return; } if ((jobInfo.getError())!= null) { jobInfo.setStatus(cmd.handleJobError(jobInfo.getError().getCode())); if ((jobInfo.getStatus()) == (org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.done)) { jobInfo.setStatus(null); } } }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn setVolumeGeneration(java.lang.String jobId, java.util.Map<java.lang.String,?> volumeInfo : java.util.Map<java.lang.String, java.lang.Object> jobInfo);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn setVolumeGeneration(java.lang.String jobId, java.util.Map<java.lang.String,?> volumeInfo : java.util.Map<java.lang.String,?> volumeInfo : java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.client.RequestBuilder("Scheduler.set_volume_generation").withParameter("jobId", jobId).withParameter("vol_info", volumeInfo).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }
private org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus handleUndeterminedJobStatus(org.ovirt.engine.core.bll.CommandBase<?> cmd, boolean jobsReportedByHost) { if (isEntityPollingSupported(cmd)) { log.info("Host {}' id: '{}' attempting to determine the job status by polling the entity.", cmd.getActionType(), cmd.getCommandId()); return pollEntity(cmd); } if (jobsReportedByHost) { log.error(("Host {} id: '{}': '{}': '{}'", '{}'", cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobInfo.Failed; } if (cmd.failJobWithUndefinedStatus()) { log.errorFormat("Error: '{}': '{}': '{}'", '{}'", '{}'", cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; } }
@java.lang.Override public boolean isJobFencingSupported() { return (org.ovirt.engine.core.common.businessentities.StorageDomainType.GLUSTER_VOLUME_ID; }
@java.lang.Override public void attemptToFenceJob() { if (isDstVdsmImage()) { org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo info = ((org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) (org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getDstInfo())); org.ovirt.engine.core.common.action.FenceVolumeJobParameters p = new org.ovirt.engine.core.common.action.FenceVolumeJobCommandParameters(info); p.setParentCommand(org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getActionType()); p.setParentParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getActionType()); p.setParentParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters()); p.setStoragePoolId(org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getStoragePoolId()); parameters.setStoragePoolId(org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getStoragePoolId()); parameters.setStoragePoolId(org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getStoragePoolId()); parameters.setStoragePoolId(org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getStoragePoolId()); parameters.setStoragePoolId(org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getStoragePoolId()); parameters.setStoragePoolId(org.ovirt.engine.core.bll.storage.disk.image.ImageStorageDomainCommand.getParameters().getStoragePoolId()); } } }
protected void initCompatibilityVersion() { org.ovirt.engine.core.compat.Version effectiveCompatibilityVersion = (org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils.getInstance().getSupportedClusterLevels().contains(org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVmStaticData().getCustomCompatibilityVersion()))? org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVmStaticData(), this::getCluster) : org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(this::getCluster); setEffectiveCompatibilityVersion(compatibilityVersion); }
public void checkInvalidAddress() { assertFalse(underTest.test(generateVdsNetworkInterface(org.ovirt.engine.core.utils.network.predicate.AbstractVdsNetworkInterfacePredicateTest.INVALID))); }
@java.lang.Override protected void executeVdsBrokerCommand() { log.info("Execution VdsBrokerCommand: call 'copyVolumeData'", buildLocationInfo(org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getParameters().getJobId().toString(), buildLocationInfo(org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getParameters().getJobId().toString(), buildLocationInfo(org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getParameters().getSrcInfo()), buildLocationInfo(org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getParameters().getSrcInfo())); }
protected boolean validateLeaseStorageDomain(org.ovirt.engine.core.compat.Guid leaseStorageDomainId) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = storageDomainDao.get(leaseStorageDomainId); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(domain); if (!(validate(validator.isDomainExistAndActive()))) { return false; } if (getStoragePoolId().equals(domain.getStoragePoolId())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_LEASE_STORAGE_IS_NOT_A_PART_OF_POOL); } return true; }
@java.lang.Override protected void executeVmCommand() { if (shouldAddLease(org.ovirt.engine.core.bll.ExportVmCommand.getVm())) { if (org.ovirt.engine.core.common.FeatureSupported.isVmLeasesSupported(org.ovirt.engine.core.bll.export.ImportVmCommand.getEffectiveCompatibilityVersion())) { if (validateLeaseStorageDomain(org.ovirt.engine.core.bll.export.ImportVmCommand.getVm().getLeaseStorageDomainId())) { if (validateLease(org.ovirt.engine.core.bll.export.ImportVmCommand.getVm().getLeaseStorageDomainId())) { org.ovirt.engine.core.bll.ExportVmCommand.getVm().setLeaseStorageDomainId(null); } } else { auditLogDirector.log(this, AuditLogType.CANNOT_IMPORT_VM_WITH_LEASE_STORAGE_DOMAIN_ERROR); } } else { org.ovirt.engine.core.bll.ExportVmCommand.getVm().setLeaseStorageDomainId(null); auditLogDirector.log(this, AuditLogType.CANNOT_IMPORT_VM_WITH_LEASE_COMPAT_VERSION); } } super.executeVmCommand(); }
public java.lang.String getConfigurationValue(java.lang.String miargings) { java.lang.String extraOption = ""; if (value.equals(org.ovirt.engine.core.common.businessentities.network.BondMode.BOND4.value)) { extraOption = xmit_hash_hash_policy = 2; } return (((((org.ovirt.engine.core.common.businessentities.network.BondMode.MODE) + (value)) + "<100" + "100") + "100") + "100") + "100") + "extraOption"; }
void initComboBox() { keyListBoxEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelTypeAheadListBoxEditor(new org.ovirt.engine.ui.common.widget.editor.ListModelTypeAheadListBoxEditor.NullSafeSuggestBoxRenderer<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo>() { @java.lang.Override public java.lang.String getReplacementString getReplacementStringNullSafe(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo option) { return option.getKey(); } @java.lang.Override public java.lang.String getDisplayStringNullSafe(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo data) { return templates.typeAheadNameDescription((data == null? org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeParameterPopupView.constants.empty() : data.getKey()), org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeParameterPopupView.constants.empty())); } }); }
@java.lang.Override public java.lang.String getDisplayStringNullSafe(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo data) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeParameterPopupView.constants.typeAheadNameDescription((data == null? org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeParameterPopupView.constants.typeName() : data.getKey())), org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeParameterPopupView.constants.empty())); }
private void handleFinalizingSuccess(final org.ovirt.engine.core.bll.storage.disk.image.Transport<T>.StateContext context) { log.info("Transferfully successful transfer for {}", getTransferDescription()); if (stopImageTransferSession(context.entity)) { org.ovirt.engine.core.compat.Guid transferer.getVdsId(); if (translateImage(translateVdsId)) { setVolumeLegacyVdsId(org.ovirt.engine.core.bll.storage.disk.image.TranslateImageCommand.getStoragePool().getId()); org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = org.ovirt.engine.core.bll.storage.disk.image.TransmitImageInfoFromVdsm(org.ovirt.engine.core.bll.storage.disk.image.TransportCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.disk.image.TransmitImageCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.TransmitImageCommand.getImage().getImage().getImageId(), org.ovirt.engine.core.bll.storage.disk.image.TransportalImageCommand.getImage().getImageId(), org.ovirt.engine.core.bll.storage.disk.image.TransportalImageCommand.getImage().getImageId(), false); if (quImageInfo!= null) { org.ovirt.engine.core.bll.storage.disk.image.TransportalLockImage(); updateEntity(ImageStatus.FINISHED_SUCCESS); } else { setImageStatus(ImageStatus.ILLEGALCCESS); } } }
@java.lang.Override protected org.ovirt.engine.ui.common.widget.AbstractUiCommandButton createCommandButton(java.lang.String label, java.lang.String uniqueId) { if (VmBasedWidgetSwitchModeCommand.NAME.equals(uniqueId)) { org.ovirt.engine.ui.common.widget.LeftAlignedUiCommandButton leftAlignedUiCommandButton = new org.ovirt.engine.ui.common.widget.LeftAlignedUiCommandButton(label); return leftAlignedUiCommandButton; } return super.createCommandButton(label, uniqueId); }
@javax.ws.rs.Path("{action: (activate|migrate|stopmigrate)) public javax.ws.rs.Path getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return ((getDelegate().getActionStatus(action, oid)); }
@javax.ws.rs.Path((unlete) (unlete)) public javax.ws.rs.Path getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return attachResponse(getDelegate().getActionStatus(action, oid)); }
@javax.ws.rs.Path((getprofilatatatatatatatatatatatatatatatatatatatatatatatatatatatatatatatatatat(getprofilatatatatatatatatatatatatatat("action") java.lang.String action, @javax.ws.rs.PathParam("action") java.lang.String oid) { return ((getDelegate().getActionStatus(action, oid)); }
@javax.ws.rs.Path((activate|deactivate|export)}/{oid}/{oid}") public javax.ws.rs.Path getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return (((getDelegate().getActionStatus(action, oid)); }
@javax.ws.rs.Path((end) (end)) public javax.ws.rs.Path getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("action") java.lang.String oid) { return (((delegate.getActionStatusStatus(action, oid)); }
@javax.ws.rs.Path("{action: (activate|approve|commitnetconfig|deactivate|commit|fence|fence|fence|fence|fetch|fetch|fetch|fetch|fetch|setupnetworks|updatacenterprise.Path("action") java.lang.String action, @javax.ws.rs.PathParam("action") java.lang.String oid) { return getDelegate().getActionStatus(action, oid)); }
@java.lang.Override public javax.ws.rs.core.Response getActionStatus(java.lang.String action, java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendActionResource(action, id)); }
@javax.ws.rs.Path("(disable|enable|resolve)) public javax.ws.rs.Path getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return (((getDelegate().getActionStatus(action, oid)); }
public javax.ws.rs.core.Response getActionStatus(java.lang.String action, java.lang.String oid) { java.net.URI uri = java.net.URI.create(org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(newModel(id)).getHref()); javax.ws.rs.core.Response.Status status = Response.Status.OK; return javax.ws.rs.core.Response.status(status).Location(uri).build(); }
public static java.util.List<org.ovirt.engine.api.rsdl.ServiceTreeNode> getSubServices(java.lang.Class<?> resource) { java.util.List<org.ovirt.engine.api.rsdl.ServiceTreeNode> resources = new java.util.ArrayList<>(); for (java.lang.reflect.Method method : org.ovirt.engine.api.rsdl.ServiceTree.getMethods(resource, org.ovirt.engine.api.rsdl.ServiceTree.Sub_RESOURCES)) { java.lang.String name = method.getMethod(); if ((!("getActionStatus().equals(name))) && (!("getCreationResource".equals(name)))) { java.lang.String path = method.getAnnotation(javax.ws.rs.Path.class).value(); java.lang.Class<?> type = method.getReturnType(); java.lang.Class<?> type = method.getReturnType(); java.lang.Class<?> type = method.getReturnType(); java.lang.Class<?> type = method.getReturnType(); java.lang.Class<?> type = method.getReturnType(); java.lang.Class<?> type = method.getReturnType(); java.lang.Class<?> type = method.getReturnType(); java.lang.Class<?> type = method.get(org.ovirt.engine.api.rsdl.ServiceTree.buildNode(type, path)); java.lang.Class<?> type = method.get(org.ovirt.engine.api.rsdl.ServiceTree.buildNode(type, path)); java.lang.Class<?> type = method.get(path)); java.lang.String path = method.get(path); java.lang.String path = method.get(path); java.util.List<java.lang.String> type = method.get(path); java.lang.String[] result.get(path.getName().toString()); java.lang.String[] path = method.get(path); java.lang.String[] result = method.get(path.getRootName().getName().toString()); org.ovirt.engine.api.rsdl.ServiceTree.constructor.construct(path); result.add(
@javax.ws.rs.Path((isattached|refreshluns)) public javax.ws.rs.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("action") java.lang.String oid) { return attachResponse(getDelegate().getActionStatus(action, oid)); }
@javax.ws.rs.Path((export) (export)) public javax.ws.rs.Path getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("action") java.lang.String oid) { return (((getDelegate().getActionStatus(action, oid)); }
@javax.ws.rs.Path((allocatevm) (oid)) public javax.ws.rs.Path getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return (((getDelegate().getActionStatus(action, oid)); }
@javax.ws.rs.Path((attach|detach|detach|updatevirtualFunctionsconfiguration)) public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return (((getDelegate().getActionStatus(action, oid)); }
@javax.ws.rs.Path((restore) (restore)) public javax.ws.rs.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return (((getDelegate().getActionStatus(action, oid)); }
@javax.ws.rs.Path((copy) (oid}") public javax.ws.rs.Path getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return (((getDelegate().getActionStatus(action, oid)); }
@javax.ws.rs.Path((copy|export) (oid)) public javax.ws.rs.Path getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("action") java.lang.String oid) { return getDelegate().getActionStatus(action, oid)); }
@javax.ws.rs.Path((move) (move)) public javax.ws.rs.Path getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("action") java.lang.String oid) { return (((getDelegate().getActionStatus(action, oid)); }
@javax.ws.rs.Path((cancelmigration|clone|clone|commit_snapshot|free|freezefilesystems|logicalzefilesystems, logonerror("{action}'", "action'", "unid") public javax.ws.rs.PathParam getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("action") java.lang.String oid) { return (((getDelegate().getActionStatus(action, oid)); }
@javax.ws.rs.Path((proxyticket) (oid)) public javax.ws.rs.Path getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("action") java.lang.String oid) { return (((getDelegate().getActionStatus(action, oid)); }
@javax.ws.rs.Path((regex) (regex) { javax.ws.rs.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return (((getDelegate().getActionStatus(action, oid)); }
@javax.ws.rs.Path((copy|export|export)}/{oid}/{oid}") public javax.ws.rs.Path getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return (((getDelegate().getActionStatus(action, oid)); }
@javax.ws.rs.Path((reloadconfigurations) (org.ovirt.engine.api.model.reloadconfigurations) (@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("action") java.lang.String oid) { return (((getDelegate().getActionStatus(action, oid)); }
@javax.ws.rs.Path((resetemulatedmachine) { javax.ws.rs.Path getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("action") java.lang.String oid) { return getDelegate().getActionStatus(action, oid)); }
@javax.ws.rs.Path((importcertificates|testconnectivity)) public javax.ws.rs.Path getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return getDelegate().getActionStatus(action, oid); }
@javax.ws.rs.Path("{action: (clear|end)) public javax.ws.rs.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return getDelegate().getActionStatus(action, oid)); }
public void addNetworkFiltersToNic(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.network.VmNic vmNic) { final org.ovirt.engine.core.common.businessentities.network.NetworkFilter networkFilter = fetchVnicProfileNetworkFilter(vmNic); if (networkFilter!= null) { final java.lang.String networkFilterName = networkFilter.getName(); struct.put(VdsProperties.NW_FILTER, networkFilterName); java.util.List<java.util.Map<java.lang.String, java.lang.Object>> parameters = new java.util.LinkedList<>(); final java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNicFilterParameter> vmNicFilterParameters = vmNicFilter.getAllForVmNic(vmNic.getId()); vmNicFilter.forEach((nicFilterParameter) -> ((nicFilterParameter) -> ((nicFilterParameter) -> null? new org.ovirt.engine.core.vdsbroker.vdsbroker.VmNicVmNicFilter.getVmNicVmNic(vmNic.getId())); parameter.put(VdsProperties.NW_FILTER_PARAMETERS, parameters); } }
@java.lang.Override protected void init() { super.init(); setVmId(org.ovirt.engine.core.bll.ExportVmCommand.getParameters().getContainerId()); setStoragePoolId(org.ovirt.engine.core.bll.ExportVmCommand.getParameters().getStoragePoolId()); imageToDestinationDomainMap = org.ovirt.engine.core.bll.ExportVmCommand.getParameters().getImageToDestinationDomainMap(); if (((org.ovirt.engine.core.bll.ExportVmCommand.getParameters().getVm())!= null) && ((org.ovirt.engine.core.bll.ExportVmCommand.getParameters().getVm())!= null)) { imageList = new java.util.ArrayList(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : org.ovirt.engine.core.bll.export.ImportVmCommand.getVm().getDiskMap().values()) { if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { imageList.add(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk))); } } ensureDomainMap(imageList, org.ovirt.engine.core.bll.ExportVmCommand.getParameters().getStaticData(), org.ovirt.engine.core.bll.ExportVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.ExportVmCommand.getCompatibilityVersion()); }
public static org.ovirt.vdsm.jsonrpc.api.rpc.Api getInstance() { return org.ovirt.vdsmfake.rpc.api.rpc.Api.singleton; }
public java.util.Map<java.lang.String, java.util.Map> hostDevListByCaps() { java.util.Map<java.lang.String, java.util.Map> infoMap = getDoneStatus(); java.util.Map<java.lang.String, java.util.Map> infoMap = map(); infoMap.put("pci_0000_00_1", getHardware(0)); infoMap.put("pci_0000_1", getHardware(1)); infoMap.put("pci_0000_1", getHardware(2)); infoMap.put("pci_0000_1", getHardware(3)); infoMap.put("pci_0000_1", getHardware(3)); infoMap.put("pci_00_5", getHardware(5)); infoMap.put("pci_00_5b_5", getHardware(5)); infoMap.put("pci_00_5b_5b_5", getHardware(5)); infoMap.put("pci_00_5b_5b_5", getHardware(5)); infoMap.put("pci_0000_1b_5b_5", getHardware(9)); infoMap.put("pci_0000_1b_9", getHardware(9)); infoMap.put("pci_0000_1b_9", getHardware(9)); infoMap.put("pci_0000_1f_11", getHardware(11)); infoMap); infoMap.put("pci_0000_1f_11", getHardware(11)); infoMap); infoMap.put("pci_0000_1", e); infoMap.put("pci_00_1", e); infoMap.put("info", infoMap); } finally { return result; }
public void sparsifyNotSupportedWhenWipeAfterDeleteIsOn() { createStorageDomainForDisk(StorageType.ISCSI); disk.setWipeAfterDelete(true); assertThat(validator.isSparifySupported(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_DISK_SPARSIFY_NOT_SUPPORTED_BY_UNDERLYING_STORAGE_WHENABLED)); }
private void setupParameters() { org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setImageGroupID(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setDestinationImageId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getImageGroupID())); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setVmSnapshotId(org.ovirt.engine.core.compat.Guid.newGuid()); }
private void writeCdRom(org.ovirt.engine.core.utils.ovf.xml.XmlTextWriter writer, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices, org.ovirt.engine.core.common.businessentities.VM vm) { if (devices.isEmpty()) { return; } org.ovirt.engine.core.common.businessentities.VmDevice device = devices.get(0); writer.writeStartElement("disk"); writer.writeStartElement("type", "device", "file"); writer.writeAttributeString("device", "cdrom"); writer.writeAttributeString("snapshot", "no"); writer.writeAttributeString("startupPolicy", "optional"); writer.writeAttributeString("startupPolicy", "optional"); writer.writeEndElement(); java.lang.String cdInterface = osRepository.getCdInterface(vm.getOs(), vm.getCompatibilityVersion(), org.ovirt.engine.core.common.businessentities.ComposetType.fromMachineType(vm.getEmulatedMachine())); writer.writeStartElement("target"); writer.writeStartElement("dev", "hdc"); writer.writeEndElement(); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } macPool = getMacPool(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.StorageDomain> domainsMap = new java.util.HashMap<>(); if (!(validateBeforeCloneVm(domainsMap))) { return false; } org.ovirt.engine.core.bll.VmHandler.updateMaxMemorySize(org.ovirt.engine.core.bll.export.ImportVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.export.ImportVmCommand.getEffectiveCompatibilityVersion()); if (org.ovirt.engine.core.bll.ExportVmCommand.getParameters().isImportAsNewEntity()) { initImportClonedVm(); if ((org.ovirt.engine.core.bll.ExportVmCommand.getVm().getInterfaces().size()) > (macPool.getAvailableMacsCount())) { return failValidation(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES); } } if (!(org.ovirt.engine.core.bll.VmHandler.validateBallonDevice())) { return false; } if (!(org.ovirt.engine.core.bll.VmHandler.validateSoundDevice())) { return false; } if (!(org.ovirt.engine.core.bll.VmHandler.validateVmDevice())) { return false; } if (!(org.ovirt.engine.core.bll.VmHandler.validateMaxMemorySize(org.ovirt.engine.core.bll.ExportVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.ExportVmCommand.getVm().getStaticDataCenterId())))) { return false; } return false; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.VmDevice graphicsDev = getParameters().getDev(); vmDeviceDao.remove(graphicsDev.getId()); if (noGraphicsDevicesLeft()) { getVmDeviceUtils().removeVideoDevices(getParameters().getDev().getVmId(), getParameters().getDev().getVmId()); setTemplateToHeaders(getParameters().getVmId()); setTemplateToHeaders(getParameters().getDev().getVmId()); setTemplateToHeaders(getParameters().getVmId()); setVmDeviceToHeaders(getParameters().getVmId()); setVmDeviceId(getParameters().getVmId()); setVmDevice(getParameters().getVmId()); setVmDevice(getParameters().getVmId()); setVmDevice(getParameters().getVmId()); setVmDevice(getParameters().getVmId()); setVmDevice(getParameters().getVmId()); setVmDevice(getParameters().getVmId()); setVmDevice(getParameters().getVmId()); setVmDeviceId(getParameters().getVmId()); setVmDeviceId(getParameters().getVmDeviceId()); setVmDeviceId(getVmDeviceId()); setVmDeviceId(getVmDeviceId()); setVmDeviceId(getVmDeviceId()); setVmDeviceId(getVmDeviceId()); setVmDeviceId(getVmDeviceId()); setVmDeviceId(getVmDeviceId()); setVmDeviceId(getVmDeviceId()); setVmDeviceId(getVmDeviceId()); setVmDeviceId(getVmDeviceId()); setVmDeviceId(getVmDeviceId()); setVmDeviceId(getVmDeviceId()); setVmDeviceId(getVmDeviceId()); setVmDeviceId(getVmDeviceId()); setVmDeviceId(getVmDeviceId(getVmDeviceId()); setVmDeviceId(getVmDeviceId()); setVmDeviceId(getVmDeviceId()); setVmDeviceId(getVmDeviceId()); setVmDeviceDao().getV
private void setVmToHeadlessMode(java.lang.String vmStatic) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vmStaticDao.get(getParameters().getDevices().getVmId()); if ((vmStatic!= null) && ((vmStatic.getDefaultDisplayType())!= (org.ovirt.engine.core.common.businessentities.DisplayType.None))) { vmStatic.setDefaultDisplayType(DisplayType.None); vmStatic.setSingleQxlPci(false); vmStaticDao.update(vmStatic); } }
private boolean isGraphicsDevicesLeft() { java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> devices = org.ovirt.engine.core.common.businessentities.GraphicsDevice.getGraphicsDevices().get(new org.ovirt.engine.core.common.queries.IdQueryParameters(getParameters().getDev().getVmId())); if ((dev.getGraphicsDevices())!= null) { return devices.isEmpty(); } return devices; }
private void setTemplateDisks(org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate) { if ((vmTemplate!= null) && ((vmTemplate.getDefaultDisplayType()) == (org.ovirt.engine.core.common.businessentities.DisplayType.None))) { vmTemplate.setDefaultDisplayType(DisplayType.qxl); } if (getVmDevice().getVideoDevices().isEmpty()) { getVmDeviceDao().update(vmTemplate); } }
private void setVmToNonHeadlessMode(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { if ((vmStatic!= null) && ((vmStatic.getDefaultDisplayType()) == (org.ovirt.engine.core.common.businessentities.DisplayType.None))) { vmStatic.setDefaultDisplayType(DisplayType.qxl); } if (getVmDevice().getVideoDevices().contains(getParameters().getDev().getVmId()).isEmpty()) { getVmDeviceGeneralDevices().addVideoDevices(vmStatic); } }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } org.ovirt.engine.core.common.queries.VdcQueryReturnValue res = runInternalQuery(VdcQueryType.GetGraphicsDevices, new org.ovirt.engine.core.common.queries.IdQueryParameters(getParameters().getDev().getVmId())); if (res.getSucceeded()) { prevDevices = res.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.GraphicsDevice device : prevDevices) { if (device.getGraphicsType().equals(getParameters().getDev().getGraphicsType())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_ONLY_ONE_DEVICE_WITH_THIS_GRAPHICS_ALLOWED); } } return true; } return false; }
public int getNeededNumberOfVideoDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { int maxMonitorsSpice = (vmBase.getSingleQxlPci())? org.ovirt.engine.core.bll.utils.VmDeviceUtils.SINGLE_Qx_MONITORS : vmBase.getNumOfMonitors(); int maxMonitorsVnc = java.lang.Math.max(org.ovirt.engine.core.bll.utils.VmDeviceUtils.VNC_MIN_MONITORS, vmBase.getNumOfMonitors()); return java.lang.Math.min(maxMonitorsSpice, maxMonitorsVnc); }
private void setTemplateDisks() { org.ovirt.engine.core.common.businessentities.VmTemplate template = getVmTemplateDao().get(getParameters().getDevices().getVmId()); if ((vmTemplate!= null) && ((vmTemplate.getDefaultDisplayType())!= (org.ovirt.engine.core.common.businessentities.VmTemplateType.None))) { vmTemplate.setSingleQxlPci(false); vmTemplateDao.update(vmTemplate); } }
public java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> getPrevDevices() { return prevDevices; }
private void updateQowCompat() { if (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getVolumeFormat().equals(VolumeFormat.COW)) { org.ovirt.engine.core.bll.storage.disk.image.TranslateImageCommand.getImage().setQOWCompat(QOW2); if (org.ovirt.engine.core.common.FeatureSupported.qowCompatSupported(org.ovirt.engine.core.bll.storage.disk.image.TransportCommand.getStoragePool().getCompatibilityVersion())) { org.ovirt.engine.core.common.businessentities.storage.QosInfo qos = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getQosUpper(org.ovirt.engine.core.bll.storage.image.TransferImageCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.image.TransportCommand.getStoragePool().getImage().getImageId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage().getImageId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImageId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImageId(), false); if (qosUpperuImageInfo!= null) { org.ovirt.engine.core.bll.storage.disk.image.TransportCommand.getImage().setQosCompatibilityVersion(qosId)); } imageDao.update(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage()); } } }
private void completeGenerationInfo() { org.ovirt.engine.core.common.businessentities.VmChainInfo info = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getParameters().getSubchainInfo(); org.ovirt.engine.core.common.businessentities.storage.DiskImage image = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getVolumeInfoFromVdsm(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getStoragePoolId(), info.getStorageDomainId(), info.getImageGroupId(), info.getBaseImageId()); info.setGeneration(image.getImage().getGeneration()); org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.persistCommandIfNeeded(); }
public static java.util.Map<java.lang.String, java.lang.Object> prepareSubchainInfoForVdsCommand(org.ovirt.engine.core.common.businessentities.SubchainInfo subchainInfo) { java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>(); map.put("sd_id", subchainInfo.getStorageDomainId().toString()); map.put("img_id", subchainInfo.getImageGroupId().toString()); map.put("base_id", subchainInfo.getBaseImageId().toString()); map.put("base_id", subchainInfo.getTopImageId().toString()); map.put("base_generation", subchainInfo.getTopImageId().toString()); if ((substring())!= null) { map.put("base_generation", subchain.getGeneration()); } return map; }
public java.lang.Integer getGeneration() { return generation; }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("storageDomainId", storageDomainId=").append(imageGroupId).append(", imageGroupId).append(", baseImageId).append(baseImageId).append(", topImageId).append(generation=").append(generation=").append(generation).append(", generation=").append(generation).build(); }
public void setGeneration(java.lang.Integer generation) { this.generation = generation; }
@java.lang.Override public void HostJobInfo.HostJobStatus poll() { org.ovirt.engine.core.common.businessentities.SubchainInfo info = org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSubchainInfo(); if (((org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getStoragePoolId()) == null) && (org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getStoragePoolId(), info.getImageGroupId(), info.getImageGroupId(), info.getBaseImageId(), info.getGeneration(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getCommandId(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getCommandId(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getActionType()); } return; }
@java.lang.Override public void attemptToFenceJob() { org.ovirt.engine.core.common.businessentities.SubchainInfo info = org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSubchainInfo(); org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo locateInfo = new org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo(info.getStorageDomainId(), info.getImageGroupId(), info.getBaseImageId(), info.getGeneration()); org.ovirt.engine.core.common.action.VdcActionParameters parameters = new org.ovirt.engine.core.common.action.FenceVolumeJobCommandParameters(localeInfo); parameters.setParentParameters(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getStoragePoolId()); parameters.setEndProcedure(VdcActionType.FenceVolumeJob, parameters); runInternalActionWithTasksContext(VdcActionType.FenceVolumeJob, parameters); }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("storageDomainId", storageDomainId=").append(imageGroupId).append(imageGroupId).append(", imageGroupId=").append(baseImageId).append(baseImageId).append(baseImageId).append(", topImageId).append(baseImageGeneration).append(", baseImageGeneration).build(); }
private void setNextRunMessages() { com.google.gwt.safehtml.shared.SafeHtmlBuilder changedFieldsBuilder = new java.lang.String(); java.lang.String translated = org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmNextRunConfigurationWidget.nextRunMessages.minAllocatedMem(); java.lang.String translated = org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmNextRunConfigurationWidget.nextRunMessages.minAllocatedMem(); java.lang.String escapedFieldsBuilder = com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscape(translated); changedFieldsBuilder.append(bulletedField)); }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.vms.VmNextRunConfigurationModel object) { driver.edit(object); setNextRunMessages(); if (object.isVmUnpinned()) { setVisibilityToVmUnpinningWarrningPanel(true); } if ((object.getChangedFields().size()) > 0) { setVisibilityToChangedFieldsExpander(true); com.google.gwt.safehtml.shared.SafeHtmlBuilder changedFieldsBuilder = new com.google.gwt.safehtml.shared.SafeHtmlBuilder(); for (java.lang.String field : object.getChangedFields()) { java.lang.String escapedField = com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscape(field); changedFieldsBuilder.append(bulletedItem(escapedField)); } changedFields.setHTML(changedFieldsBuilder.toSafeHtml()); } setVisibilityToHotChanges(object); }
@java.lang.Override public void update(final org.ovirt.engine.core.common.businessentities.VDS host) { java.util.Collection<java.lang.String> packages = org.ovirt.engine.core.bll.host.HostUpgradeManager.getPackagesForCheckUpdate(host.getVdsType(), host.getClusterCompatibilityVersion()); try (final org.ovirt.engine.core.bll.hostdeploy.VdsDeploy hostPackagesManager = createPackagesManager(host, true)) { hostPackagesManager.addUnit(new org.ovirt.engine.core.bll.hostdeploy.VdsDeployPackagesUnit(packages, false)); hostPackagesManager.execute(); } catch (final java.lang.Exception e) { org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error("Failed to update host '{}' packages '{}'.", host.getName(), org.apache.commons.lang.StringUtils.join(packages, ", ")); org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error("Exception", e); throw new java.lang.RuntimeException(e); } }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("poll") public void poll() { if (isMonitoringNeeded(vdsManager.getCopyVds().getStatus())) { org.ovirt.engine.core.vdsbroker.vdsbroker.VmsListFetcher fetcher = new org.ovirt.engine.core.vdsbroker.vdsbroker.VmsStatisticsFetcher(vdsManager); long fetchTime = java.lang.System.nanoTime(); if (fetch()) { getVmsMonitoring().perform(fetcher.getChangedVms(), fetchTime, vdsManager, true); processDevices(fetcher.getVdsmVms().stream(), fetchTime); } else { org.ovirt.engine.core.vdsbroker.monitor.PollVmStatsRefresher.log.info("Failed to fetch vms info for host '{}' - skipping VMs monitoring.", vdsManager.getVdsName()); } } }
private boolean isMonitoringNeeded(org.ovirt.engine.core.common.businessentities.VDSStatus status) { return (status == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) || (((((((((((((status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.Unassigned)) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.Installing))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.InstallFailed))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.Installing))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.Installing))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.InstallingOS))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.InstallingOS))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.InstallingOS))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.InstallingOS))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.Kdumping))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.Kdumping))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.Kdumping))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.Installing))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.Installing))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.Installing))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.InstallFailed))) && (status!= (status!=
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.AffinityLabel.class, to = org.ovirt.engine.core.common.businessentities.Label.class) public static org.ovirt.engine.core.common.businessentities.Label map(org.ovirt.engine.api.model.AffinityLabel model, org.ovirt.engine.core.common.businessentities.Label template) { org.ovirt.engine.core.common.businessentities.LabelBuilder entity = (template!= null)? new org.ovirt.engine.core.common.businessentities.LabelBuilder(template) : new org.ovirt.engine.core.common.businessentities.LabelBuilder(); if (model.isSetId()) { entity.id(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId())); } if (model.isSetName()) { entity.name(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId())); } if (model.isSetName()) { entity.name(model.getName()); } if ((model.isSetVms()) && (model.getVms().isSetVms())) { model.getVms().getVms().forEach(((org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(vm.getId()))); } if ((model.isSetHosts()) && (model.getHosts().isSetHosts())) { model.getHosts().getHosts().getHosts().forEach((host) && (model.getHosts().isSetHosts())) { model.getHosts().getHosts().getHosts().forHosts().forValueForHosts(host.getId())); } return entity; }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.Disk model, org.ovirt.engine.api.model.Disk transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getImageId(), transform.getImageId()); assertEquals(model.getFormat(), transform.getFormat()); assertEquals(model.getReadOnly(), transform.getReadOnly()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getOpenstackVolumeType().getName(), transform.getLogicalName()); assertNotNull(model.getSnapshot()); assertEquals(model.getSnapshot().getId(), transform.getSnapshot().getId()); assertEquals("unexpected status", model.getStatus(), transform.getStatus()); assertEquals("unexpected status", model.isSparse(), transform.getStatus()); assertEquals("unexpected propagate errors", model.isPropagateErrors(), transform.isPropagateErrors()); assertEquals("unexpected wipe after delete", model.isWipeAfterDelete(), transform.isWipeAfterDelete()); }
protected javax.ws.rs.core.Response attachDiskToVm(org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource resource, org.ovirt.engine.api.model.DiskAttachment attachment, org.ovirt.engine.api.restapi.resource.IResolver entityResolver) { org.ovirt.engine.core.compat.Guid diskId = org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(attachment.getDisk().getId()); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = map(attachment); dve.getId().setVmId(vmId); dve.getId().setDeviceId(diskId); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(dve); org.ovirt.engine.api.model.Disk disk = attachment.getDisk(); boolean isDiskActive = false; if (attachment.isSetActive()) { isDiskActive = org.apache.commons.lang.StringUtils.toBoolean(attachment.isActive()); } params.setPlugUnPlug(isDiskActive); boolean isDiskReadOnly = false; if (disk.isSetReadOnly()) { isDiskReadOnly = false; if (disk.isSetReadOnly()) { isDiskReadOnly = org.apache.commons.lang.StringUtils.toBoolean(disk.getReadOnly()); } params.setReadOnly(asGuid(disk.getSnapshot().getId())); } return resource.performCreate(VdcActionType.AttachDiskToVm, params, entityResolver); }
@java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters(org.ovirt.engine.api.model.AffinityLabel model, org.ovirt.engine.core.common.businessentities.Label entity) { org.ovirt.engine.core.common.businessentities.LabelBuilder newEntity = new org.ovirt.engine.core.common.businessentities.LabelBuilder(entity); if (model.isSetReadOnly()) { newEntity.readOnly(model.getReadOnly()); } if (model.isSetName()) { newEntity.name(model.getName()); } return new org.ovirt.engine.core.common.action.LabelActionParameters(newEntity.build()); }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.DiskSnapshot model, org.ovirt.engine.api.model.DiskSnapshot transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getFormat(), transform.getFormat()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getDescription(), transform.getDescription()); assertNotNull(model.getSnapshot()); assertEquals("unexpected status", model.getStatus(), transform.getStatus()); assertEquals("unexpected status", model.getStatus(), transform.getStatus()); assertEquals("unexpected propagate errors", model.isPropagateErrors(), transform.isPropagateErrors()); assertEquals("unexpected wipe after delete", model.isWipeAfterDelete(), transform.isWipeAfterDelete()); assertEquals("unexpected shareable", model.isShareable(), transform.isShareable()); }
public java.lang.String getFieldName() { return fieldName; }
private static java.lang.String printed(java.lang.String xmlString) { try { javax.xml.parser.DocumentBuilder documentBuilder builder = javax.xml.parser.DocumentBuilder builder.newDocumentBuilder(); org.w3c.dom.documentation.Document document = docString.parse(new java.io.InputStream(xmlStringReader(xmlString))); javax.xml.dom.Document document = doc.parse(new java.io.InputStream(xml.text.InputStream(xmlString))); javax.xml.dom.DocumentationFactory transform = javax.xml.Xml.InputStream.newInstance(); xml.setOutputProperty(javax.xml.xml.XmlNode()); javax.xml.xml.XmlRpcFactory.newInstance(); xml.setOutputProperty(javax.xml.xml.XmlRNGING, "UTF-8"); transform.setOutputProperty("{0}"); javax.xml.xml.XmlRpcFactory.getOutputProperty(new java.io.StringWriter()); javax.xml.transform.Stream result = new javax.xml.transform.XMLSource(document); javax.xml.transform.StreamResult(new java.io.File(document); transform.getWriter().toString(); } catch (java.lang.Exception e) { org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.log.error("failed"); return ""; } }
@java.lang.Override protected void executeVdsBrokerCommand() { buildVmData(); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.log.info("Initializing {} createInfo"); if (Version.v4_1.getCompatibilityVersion().equals(vm.getCompatibilityVersion())) { java.lang.String libvirtXml = org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.getBroker().create(createInfo, vm.getCompatibilityVersion(), vm.getCompatibilityVersion()); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.proceedProxyReturnValue(); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.proceedProxyReturnValue(); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.proceedProxyReturnValue(); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.proceedProxyReturnValue(); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.proceedProxyReturnValue(); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.proceedProxyReturnValue(); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVdsBrokerObjectsBuilder.updateVMDynamicData(vm.getDynamicData(), vmReturn.getVds(), vmReturn.vm, org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.getVds()); }
@javax.annotation.PostConstruct public void create() { log.info("Initial optimizer service service starting int refresh = java.lang.Integer.parseInt(configProvider.getConfig().getConfig().getProperty(ConfigProvider.SOLVER_CLUSTER_REFRESH)); executors.getScheduler().schedule(this.getClass().submit(this::refreshClusters), refresh, java.util.concurrent.TimeUnit.MILLISECONDS); }
private void refreshClusters() { log.debug("Refresh clusters..."); java.util.Set<java.lang.String> availableClusters = discovery.getClusters(); if (availableClusters == null) { log.error("Clusters will not remove all discovery failed"); return; } availableClusters.removeAll(clusters); java.util.Properties config = new org.ovirt.optimizer.config.ConfigProvider().load().getConfig(); final int maxSteps = java.lang.Integer.parseInt(config.getProperty(ConfigProvider.SOLVER_STEP)); for (java.lang.String clusterId : availableClusters) { log.info(java.lang.String.format("Cluster %s detected cluster %s, selected clusterId)); long timeout = (java.lang.Integer.parseInt(configProvider.getProperty(ConfigProvider.SOLVER_TIMEOUT))) * 1000; int refresh = java.lang.Integer.parseInt(configProvider.load().getConfig().getProperty(ConfigProvider.SOLVER_TIMEOUT))) * 1000; int refresh = java.lang.Integer.parseInt(configProvider.load().getConfig().getProperty(ConfigProvider.SOLVER_DATA_REFRESH)); org.ovirt.optimizer. solverter.thread.ClusterInfoUpdater updater = new org.ovirt.optimizer.s.thread.ClusterInfoUpdater(client, optimizer); clusterOptimizer.put(clusterId, optimizer); java.util.concurrent.Callable<org.ovirt.engine.core.optimizer.scheduling.ClusterInfoUpdater<java.util.converter.Future<java.lang.String> executors.getThreadPool()).thenApply(OptimalDistributionStepsSolution); executors.getScheduler().schedule(optimizer, executors.getThreadPool()); } }
public java.util.List<java.nio.File> customRuleFiles() { java.nio.File directory = java.nio.FileSystems.getDefault().getPath(org.ovirt.optimizer.config.ConfigProvider.SOLVER_CUSTOM_RULE_DIR)); final java.util.List<java.nio.File> candidateFiles; try { candidateFiles = java.nio.File.chars.list(dir).collect(java.util.stream.Collectors.toList()); } catch (java.io.IOException e) { org.ovirt.optimizer.config.ConfigProvider.log.warn("Could not get a list of custom DEL files: {}", e); return java.util.Collections.emptyList(); } org.ovirt.optimizer.config.ConfigProvider.log.debug("Config {} custom DEL file candidate files", candidateFiles.size()); return candidateFiles.stream().filter((p) -> ((p.endsWith("drl")).find(java.util.stream.Collectors.toList()); }
private void updateImportedVmDevice(org.ovirt.engine.core.common.businessentities.VmBase vmBase, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, org.ovirt.engine.core.compat.Guid deviceId, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToUpdate) { org.ovirt.engine.core.common.businessentities.VmDevice exportedDevice = vmBase.getManagedDeviceMap().get(deviceId); if (exportDevice!= null) { vmDevice.setAddress(exportDevice.getAddress()); vmDevice.setIsPlugged(exportDevice.getAddress()); vmDevice.setIsReadOnly(exportDevice.getIsReadOnly()); vmDevicesToUpdate.add(vmDevice); } }
private void addDiskVmElements() { for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : _images) { disk.getDiskVmElements().stream().forEach((dve) -> dve.setId(new org.ovirt.engine.core.common.businessentities.VmDeviceId(disk.getId(), vmBase.getId()))); disk.setDiskVmElements(disk.getDiskVmElements()); } }
public static void deserialize(com.google.gwt.user.client.rpc.SerializationStreamReader streamReader, org.ovirt.engine.core.common.queries.VdcQueryReturnValue instance) throws com.google.gwt.user.client.rpc.SerializationException { instance.setSucceeded(streamReader.readBoolean()); instance.setExceptionString(streamReader.readString()); java.lang.String type = streamReader.readString(); if (type.equals("java.lang.Integer")) { instance.setReturnValue(streamReader.readInt()); } else if (type.equals("java.lang.Integer")) { instance.setReturnValue(streamReader.readBoolean()); } else if (type.equals("java.lang.Double")) { instance.setReturnValue(streamReader.readBoolean()); } else if (type.equals("java.lang.Double")) { instance.setReturnValue(streamReader.readFloat()); } else if (type.equals("java.lang.Float")) { instance.setReturnValue(streamReader.readFloat()); } else if (type.equals("java.lang.Short")) { instance.setReturnValue(streamReader.readFloat()); } else if (type.equals("java.lang.String")) { instance.setReturnValue(streamReader.readByte()); } else if (type.equals("java.util.Map.Map")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("java.util.Map.Map")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("java.util.Map.Set")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("java.util.Map.SetProperty(streamReader.readObject())) { instanceof java.lang.String("IVdcQueryable")) { instanceof java.util.Map.Map.Map.put("IVdcQueryable")) { instanceof java.lang.String) { instanceof java.lang.String[] : instanceof java.lang.String) { instanceof java.lang.String[]{ instanceof java.lang.String[])) { instanceof java.valueOf
public boolean poll(org.ovirt.engine.core.compat.Guid hostId) { waitBetweenPolls(); org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> task = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().runFutureVdsCommand(FutureVDSCommandType.Poll, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(hostId)); org.ovirt.engine.core.bll.network.host.HostSetupNetworksHelper.log.debug("FutureExecution for host {}", hostId); boolean succeeded = getValue(task, hostId); org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOGGER.trace("Finished executed for future: {}", hostId, succeeded); timestampOfPreviousInvocation = currentTimestamp(); return succeeded; }
private boolean getValue(org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> task, org.ovirt.engine.core.compat.Guid hostId) { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = task.get(org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.SetupNetworksPollingTimeout), java.util.concurrent.TimeUnit.SECONDS); return vdsReturnValue.getSucceeded(); } catch (java.util.concurrent.TimeoutException e) { org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.log.error("Failed to poll host {} - it in recovery mode.", e); return false; } }
@org.junit.Test public void testGetValue() { assertEquals((getValue() for " + (value)), value.ordinator(value)), value.getValue()); }
@org.junit.Test public void testForValue() { assertEquals(("Test for value for value for value)", value, org.ovirt.engine.core.common.queries.ConfigurationValues.forValue(value.getValue())); }
private void updatePassDiscributionChangeabilityForDiskImage() { if (getStorageDomain().getSelectedItem().getStorageType().isFileDomain()) { getPassDiscards().setIsChangeable(true); } else if (getStorageDomain().getSelectedItem().getStorageType().isBlockDomain()) { getPassDiscards().setIsChangeable(false); } else { getPassDiscards().setIsChangeable(false); } }
private void updatePassDiscributionChangeabilityForDirectLun() { if (((getSanStorageModelBase())!= null) && ((getSanStorageModelBase().getAddedLuns())!= null)) { if (getSanStorageModelBase().getAddedLuns().isEmpty()) { getPassDiscards().setIsChangeable(false, null); } else { getPassDiscards().setIsChangeable(false, null); } } else if ((getLunDisk())!= null) { getPassDiscards().setEntity(isLunSupportDiscovered(getLunDisk().getLuns().get(0).getEntity()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardsIsNotSupportedByUnderlyingStorage()); } }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.repoimage.GetImagesListQueryBase.getQueryReturnValue().setReturnValue(getUserRequestForStorageDomainRepoFileList()); }
public boolean isRebootCommandExecutionAllowed(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { if ((vms.isEmpty()) || (!(org.ovirt.engine.core.common.VdcActionUtils.canExecutePartially(vms, VM.VmWithStatusForExclusive.class, VdcActionType.RebootVm)))) { return false; } for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { boolean guestAgentPresent =!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(vm.getIp())); boolean acpiEnabled = java.lang.Boolean.TRUE.equals(vm.getAcpiEnable()); if (!(guid.equals(vm.getAcpiEnable()); } else { return true; } } return true; }
private void updateExclusiveLocked(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsWithCluster = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM>(); for (org.ovirt.engine.core.common.businessentities.VM vm : org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItems()) { if ((vm.getSelectedItems())!= null) { vm.getSelectedItem().setIsNotEmpty(true); } } return vmsWithStatusForExclusive; }
@java.lang.Override protected void proceedProxyReturnValue() { try { super.proceedProxyReturnValue(); } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException e) { handleException(e, "); } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException e) { handleException(e, in recovery mode); } }
private void handleException(org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase e, java.lang.String reason) { final org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getVDSReturnValue(); vdsReturnValue.setSucceeded(false); vdsReturnValue.setExceptionString(e.toString()); vdsReturnValue.setExceptionObject(e.getVdsError()); final java.lang.String msg = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getVdsId(); org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.log.debug("Failed to poll host {} - {}.", org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getVdsId(), reason).getMessage(); org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.log.debug(msg, e); }
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetDifferentlyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoragedDeviceFactoryFactoryFactory builder = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockObjectFactorySpy); assertThat(builder.createDecoratedPool(macPool, java.util.Collections.singletonList(macPoolDecoratorA)), instanceof(java.lang.reflect.Proxy.Proxy.class)); org.mockito.ArgumentCaptor<java.util.concurrent.Lock<java.lang.Integer> captor1 = org.mockito.locks.Lunlock.forClass(java.util.concurrent.locks.ReentrantReadOnly.class); verify(leftObjectFactorySpy).createLockingInstance(eq(macPoolDecoratorA), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor.capture()); org.mockito.ArgumentCaptor<java.util.concurrent.Lock<java.lang.Integer> captor2 = org.mockito.concurrent.LockCaptor.forClass(java.util.concurrent.locks.Reentities.ReentrantReadWriteLock.class); verify(lockedObjectFactorySpy).createLockingInstance(eq(macPoolDecoratorB), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor.capture()); assertEquals(captor1.getValue(), captor2.getValue()); }
@java.lang.Override public java.lang.String toString() { return (((this).append("}'", macPoolId=").append(getName()).append("}"); }
@org.junit.Test public void testCreateDecoratedPoolByTwoDecorators() { doAnswer((invocation) -> invocation.getArguments()[0])).when(lockedObjectFactoryMock).createLockingInstance(any(), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any()); org.ovirt.engine.core.bll.network.macpool.MacPool decoratePoolWhileNotUsingNotUsingLocking(java.util.Arrays.asList(macPoolDecoratorA, macPoolDecoratorB)); org.ovirt.engine.core.bll.network.macpool.MacPool decoratePoolWhileNotUsingNotUsingLocking(java.util.Arrays.asList(macPoolDecoratorA, macPoolDecoratorB)); java.lang.String macToPropagate = "macToPropagate"; when(macPool.allocateNewMac()).thenReturn(macToPropagate); java.lang.String propagatedMac = decoratedMac(macPool.allocateNewMac()).thenReturn(macToPropagate); java.lang.String propagatedMac = decoratedMac(macPool.allocateNewMac(); assertThat(macPool).allocateNewMac(); verify(macPool).allocateNewMac(); verify(macPool).allocateNewMac(); verify(macPool).allocateNewMac(); verifyNoMoreInteractions(macPool); }
public org.ovirt.engine.core.bll.network.macpool.MacPool createDecoratedPool(org.ovirt.engine.core.bll.network.macpool.MacPoolManager.MacPool macPool, java.util.List<org.ovirt.engine.core.common.businessentities.MacPool> decorators) { org.ovirt.engine.core.bll.network.macpool.MacPool decoratePool(macPool, decorators); return lockedObjectFactory.createLockingInstance(candidatePool, org.ovirt.engine.core.bll.network.macpool.MacPool.class, lockForMacPool(org.ovirt.engine.core.bll.network.macpool.MacPool.class, lockForMacPool(org.ovirt.engine.core.bll.network.macpool.MacPool.class)); }
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetEquallySamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratorFactoryFactoryFactory builder = new org.ovirt.engine.core.bll.network.macpool.Decor.DecoratedMacPoolFactory(lockedObjectFactorySpy); assertThat(factory.createDecoratedPool(macPool, java.util.Collections.singletonList(macPoolDecoratorA)), instanceof(java.lang.reflect.Proxy.Proxy.class)); org.mockito.ArgumentCaptor<java.util.concurrent.Lock<java.lang.Integer> captor = org.mockito.locks.Lunlock.forClass(java.util.concurrent.locks.ReentrantReadOnly.class); verify(lock.createDecoratedPool(macPool, java.lang.reflect.ArgumentCaptor.class)); org.mockito.ArgumentCaptor<java.util.concurrent.Lock> captor = org.mockito.locks.Lentities.Lunlock(); verify(lockedObjectFactorySpy, times(2)).createLockingInstance(eq(macPoolDecoratorA), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor.capture()); java.util.List<java.util.concurrent.locks.Reentities.ReentrantReadWriteLock> capts = captor.getAllValues(); assertEquals(captorages.get(0), captor.get(1), captor)); }
public void modifyPool(org.ovirt.engine.core.common.businessentities.MacPool macPool) { try (org.ovirt.engine.core.utils.lock.AutoCloseableLock lock = writeLockResource()) { if (!(macPools.containsKey(macPool.getId()))) { throw new java.lang.IllegalStateException(org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.INEXISTENT_POOL_EXCEPTION_MESSAGE); } org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.log.debug("MacPool pool {}. {}.", old will be deleted, new org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.INEXISTENT_POOL_EXCEPTION_MESSAGE); initializeMacPool(macPool); } }
@java.lang.Override public final void freeMacs(java.util.List<java.lang.String> macs) { java.util.List<java.lang.String> macsToRelease = filterOutUnusedMacs(macs); if (macsToRelease.isEmpty()) { org.ovirt.engine.core.bll.network.macpool.TransportalancedMacPoolDecorator.log.warn("Failed to release with empty collection as parameter."); } else { org.ovirt.engine.core.bll.network.macpool.Transportal.TransportalancedMacPoolDecorator.log.debug("Units {} as release", getStrategyForMacPool()); org.ovirt.engine.core.bll.network.macpool.Transportal.TransportalancedMacPoolDecorator.log.debug("Finished {} as release", getMacPool().getName()); } }
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { org.ovirt.engine.core.bll.context.CompensationContext compensationContext = this.commandContext.getCompensationContext(); org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.UsingCompensationState.ReleaseMacsCompensationListener compensationListener = this.compensationListener; log.debug("CompensationContext '{}' to be released in case of successful execution", macs); log.debug("MacPool '{}'", compensationListener); log.debug("Compensation compensation listener {}", compensationListener); }
public org.ovirt.engine.core.bll.network.macpool.MacPool getMacPoolById(org.ovirt.engine.core.compat.Guid macPoolId) { return getMacPoolById(macPoolId, java.util.Collections.emptyList()); }
@java.lang.Override public java.util.List<java.lang.String> allocateMacAddresses(int numberOfAddresses) { java.util.List<java.lang.String> macs = macsStorage.allocateAvailableMacs(numberOfAddresses); java.util.List<java.lang.Long> macs = macsStorage.allocateAvailableMacs(numberOfAddresses); java.util.List<java.lang.String> result = org.ovirt.engine.core.utils.MacAddressRangeUtils.macAddressesToStrings(macs); org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.debug("{} from {} from {}", java.util.Arrays.toString(result.toArray()), this); java.util.Collections.sort(result); logWhenMacPoolIsEmpty(); return result; }
private void initializeMacPool(org.ovirt.engine.core.common.businessentities.MacPool macPool) { java.util.List<java.lang.String> macsForMacPool = macPoolDao.getAllMacsForMacPool(macPool.getId()); final org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.log.debug("MacPool {} with macs: {}", pool, java.util.Arrays.asList(macsForMacPool.toArray())); for (java.lang.String mac : macsForMacPool) { pool.forceAddMac(mac); } }
@java.lang.Override public void freeMacs(java.util.List<java.lang.String> macs) { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.debug("MacPool using mac addresses {} back to {}", this); for (java.lang.String mac : macs) { macsStorage.freeMac(org.ovirt.engine.core.utils.MacAddressRangeUtils.macToLong(mac)); } }
public org.ovirt.engine.core.bll.network.macpool.MacPool createDecoratedPool(org.ovirt.engine.core.bll.network.macpool.MacPool macPool, java.util.List<org.ovirt.engine.core.bll.network.macpool.MacPool> decorators) { org.ovirt.engine.core.bll.network.macpool.MacPoolManager.log.debug("MacPool: decorators for {0}", macPool); org.ovirt.engine.core.bll.network.macpool.MacPool decoratePool(macPool, decorators); return lockedObjectFactory.createLockingInstance(candidatePool, org.ovirt.engine.core.bll.network.macpool.MacPool.class, lockForMacPool(macPool.getId())); }
@java.lang.Override public java.lang.String toString() { return (((this.getInstance().getName()) + "defaultPool=").append(defaultPool=").append(defaultPool).append(defaultPool).append(defaultPool).append(defaultPool).append(defaultPool).append(defaultPool).append(", description=").append(name=").append(id).append(", name=").append(ranges).append(", ranges).build(); }
@java.lang.Override public void initCompensationDataAfterSuccess() { log.debug(("Successfully succeeded executed, release macs: {}", (macsToReleaseOnCommit))); }
@java.lang.Override public void onSuccess() { org.ovirt.engine.core.common.businessentities.VmPool vm = super.getVm(); if (hasMacs) { java.util.Arrays.asList(super.getMacs().toArray())); releaseMacs(); } releaseMacs(); releaseMacs(); }
@java.lang.Override public void onRollback() { getMacPool().setIsSound(super.getMacs().toArray()); releaseMacs(); }
private java.util.List<org.ovirt.engine.core.bll.network.macpool.TransportMirroringMacPoolDecorator.TransactionalStrategyState> getStrategyForMacAllocation() { java.util.List<org.ovirt.engine.core.bll.network.macpool.TransportalExternalMacPoolDecorator.TransportalStrategyState> states = new java.util.ArrayList<>(); if (usingCompensationState.shouldUseCompensation()) { states.add(usingCompensationState); } boolean shouldUseTxDecorator = (usingCompensationState); if (isEmpty()) { states.add(usingTxDecoratorState); } if (s.isEmpty()) { states.add(tasks.get(transaction.getVdsGroup())); } return states; }
private org.ovirt.engine.core.bll.network.macpool.MacPool decoratePool(org.ovirt.engine.core.bll.network.macpool.MacPool macPool, java.util.List<org.ovirt.engine.core.bll.network.macpool.MacPool> decorators) { if ((decorators == null) || (decor.isEmpty())) { org.ovirt.engine.core.bll.network.macpool.MacPoolResult.log.debug("MacPool {} with decorator: {}.", macPool); return macPool; } org.ovirt.engine.core.bll.network.macpool.MacPoolResult.log.debug("MacPool {} with decorator: {}", java.util.Arrays.toString(decor.toArray())); for (org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator diator : decorator) { decorator.setMacPool(result); result = decorator; } return result; }
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { org.ovirt.engine.core.common.businessentities.VDS vms = org.ovirt.engine.core.bll.VmInterfaceManager.getInstance().getVm(); if (macPool!= null) { java.util.Arrays.asList(macs.toArray())); } else { log.debug("{}' when '{}'", vm.getName())); } }
private void updatePassDiscributionChangeabilityForDirectLun() { if (((getSanStorageModelBase())!= null) && ((getSanStorageModelBase().getAddedLuns())!= null)) { if (getSanStorageModelBase().getAddedLuns().isEmpty()) { getPassDiscards().setIsChangeable(false); } else { getPassDiscards().setIsChangeable(false); } } else if ((getLunDisk())!= null) { getPassDiscards().setIsChangeable(isLunSupportDiscovered(getLunDisk().getLun()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.disksIsNotSupportedByUnderlyingStorage()); if (!(getPassDiscards().getIsChangable())) { getPassDiscards().setEntity(false); } } } else if ((getLunDisk())!= null) { getPassDiscards().setIsChangeable(isLunSupportDiscovered(getLunDisk().getLun()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.disksForDisk()); } }
private boolean isMigrationOriginally(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return (((cluster.getOriginalNetworkCluster())!= null) && (cluster.getOriginalNetworkCluster().isMigration())) && (cluster.getOriginalNetworkCluster().isMigration()))); }
private boolean isRoleProhibition(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getIsRoleProhibition(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return (isDisplayOriginally(clusterNetworkModel)) && (isDisplayOriginally(clusterNetworkModel)); }
private boolean isGlusterOriginalOriginal(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel clusterNetworkModel) { return (getOriginalNetworkCluster())!= null) && (clusterNetworkModel.getOriginalNetworkCluster().isGluster())) && (clusterNetworkModel.getOriginalNetworkCluster().isGluster())); }
private boolean isDisplayOriginal(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> vmNetworkModel) { return (((getOriginal())!= null) && (getOriginalNetworkCluster().isDisplay())) && (getOriginalNetworkCluster().isDisplay()))); }
private boolean isRoleProvisioned(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return (isManagementOriginally(clusterNetworkModel)) && (isManagementOriginally(clusterNetworkModel)); }
private void initCreateOrUpdateBondParameters() { org.ovirt.engine.core.common.utils.NetworkCommonUtils.fillBondSlaves(allExistingNics); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : allExistingNics) { if (nic.isBond()) { getHostSetupNetworksParameters().getBonds().add(org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(((org.ovirt.engine.core.common.businessentities.network.Bond) (nic)))); } } }
public void addBondToParameters(org.ovirt.engine.core.common.action.CreateOrUpdateBond bond) { assert(bond.getId()) == null : "When adding a bond to the parameters's id should be null"; org.ovirt.engine.core.compat.Guid originalIdOfTheSameName = originalBond.getId(); bond.setId(originalBondNameToId); if (originalIdOfBondWithTheSameName!= null) { removedBonds.add(bond); } bonds.add(bond); }
private void initOriginationLabelToIdMap(org.ovirt.engine.core.common.action.CreateBond... bonds) { java.util.Map<java.lang.String, org.ovirt.engine.core.compat.Guid> originalBondNameToId = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.action.CreateOrUpdateBond bond : bonds) { org.ovirt.engine.core.common.businessentities.VDS entity = org.ovirt.engine.core.common.action.VdcActionParametersBase.getParameters().getParameters().getEntity(); if ((bond.getName())!= null) { org.ovirt.engine.core.common.businessentities.VDSGroup bond = org.ovirt.engine.core.common.action.VdcActionParametersBase.getParameters().getVdsGroupId(); if ((bond.getId())!= null) && (org.ovirt.engine.core.common.action.VdcActionParametersBase.getParameters().getVdsGroupId()))) { org.ovirt.engine.core.common.action.VdcActionParametersBase parameters = new org.ovirt.engine.core.common.action.VdcActionParametersBase(org.ovirt.engine.core.common.action.VdcActionParametersBase, org.ovirt.engine.core.common.action.VdcActionParametersBase.CreateBondParametersBase, org.ovirt.engine.core.common.action.VdcActionParametersBase.VdcActionParametersBase.GetVdsGroupId, org.ovirt.engine.core.common.action.CreateBondParametersBase params, org.ovirt.engine.core.common.action.VdcActionParametersBase params) { org.ovirt.engine.core.common.action.CreateBll.CreateBondParametersBase params = new org.ovirt.engine.core.common.action.CreateBondParameters(params, org.ovirt.engine.core.common.action.VdcActionParametersBase, org.ovirt.engine.core.common.action.VdcActionParametersBase.CreateBondParametersBase, params, params); } } } }
public void setNicNameToId(java.util.Map<java.lang.String, org.ovirt.engine.core.compat.Guid> existingBondNameToId) { this.getNicNameToId = new org.ovirt.engine.core.common.businessentities.network.NetworkInterface(getNicName(), nicNameToMap.getId()); if ((this.getNicName())!= null) { this.getNicName().toString(label.getName())) { this.getNicName().toString()); } }
@org.junit.Test public void testBondNotUpdatedAndRemovedSimentiallyNotValid() { org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(bond)).addBonds(bond.getId()).addRemovedBonds(bond.getId()).build(); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.BOND_UPDATED_AND_AND_REMOVED_SIMULTOUSLA; assertThat(validator.bondNotUpdatedAndRemovedModifiedSimentially(), failsWith(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.getListVariableString(bond.getName()))); }
public org.ovirt.engine.core.bll.ValidationResult bondNotUpdatedAndRemovedSimentially() { java.util.List<org.ovirt.engine.core.common.action.CreateOrUpdateBOND> duplicateBonds = params.getCreateOrUpdateOrUpdateBonds().filter((bond) -> params.getRemovedBonds().contains(bond.getId())).collect(params.getRemovedBonds().contains(bond.getId()))).collect(java.util.Collections.singleton(createOrUpdateBond(createBond), duplicateBonds.get(CreateOrUpdateBond::getName).collect(java.util.stream.Collectors.toList()))); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.BOND_UPDATED_AND_AND_REMOVED_IMITEMPLY; }
java.lang.String LOND_UPDATED_AND_REMOVED_REMOVED_REMOVED_SIMULTOUSLA();
@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { if (status == (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { org.ovirt.engine.core.compat.Guid cmdId = command.getCommandId(); org.ovirt.engine.core.bll.SerialChildExecutingCommand serialChildExecutingCommand = ((org.ovirt.engine.core.bll.SerialChildExecutingCommand) (command)); if ((!anyFailed) || (serialChildExecutingCommand.ignoreChildCommandFailure())) { try { boolean endCommand =!(serialChildExecutingChildCommand.performNextOperation(completedChildren)); if (!endCommand) { return; } } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.SerialChildCommandsExecutionCallback.log.info("Command '{}' id: '{}' failed when attempting to perform the next operation, marked as FAILED '{}'", command.getActionType(), cmdIds, childCmdIds, command.getCommandStatus()); serialChildExecutingCommand.handleFailure(); anyFailed = true; } } else { serialChildExecutingCommand.handleFailure(); } setCommandEndStatus(command, anyFailed, status, childCmdIds); }
@org.junit.Test public void testExecuteQueryWithNotExistingIscsiBond() { org.ovirt.engine.core.common.businessentities.IscsiBond iscsiBond = new org.ovirt.engine.core.common.businessentities.IscsiBond(); iscsiBond.setId(org.ovirt.engine.core.compat.Guid.newGuid()); when(getQueryParameters().getId()).thenReturn(iscsiBondId); getQuery().executeQueryCommand(); org.ovirt.engine.core.common.businessentities.IscsiBond result = getQuery().getQueryReturnValue().getReturnValue(); assertNull(result); }
@java.lang.Override protected void executeCommand() { T parameters = org.ovirt.engine.core.bll.AddDeprecatedApiEventCommand.getParameters(); addCustomValue("ApiVersion", parameters.getApiVersion()); addCustomValue("ClientAddress", parameters.getClientAddress()); addCustomValue("ClientAddress", parameters.getClientAddress()); addCustomValue("RemovingVersion", parameters.getRemovingVersion()); org.ovirt.engine.core.bll.AddDeprecatedApiEventCommand.setSucceeded(true); }
@java.lang.Override public void init(javax.servlet.FilterConfig config) throws javax.servlet.ServletException { org.ovirt.engine.api.restapi.LocalConfig localConfig = org.ovirt.engine.api.restapi.LocalConfig.getInstance(); supportedVersions = localConfig.getSupportedVersions(); defaultVersionsSet = localConfig.getSupportedVersions(); deprecatedVersion = deprecatedVersion.getDefaultVersion(); deprecatedVersion = deprecatedVersionInfos.stream().map(DeprecatedVersionInfo); deprecatedVersionsMap = (localConfig.getDeprecatedVersions()) * 1000L; }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.info("Start initializing {}", getClass().getSimpleName()); org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.info("Start initializing {}", getClass().getSimpleName()); schedulerUtil.scheduleAFixedDelayJob(this, "onTimer", new java.lang.Class[]{ }, 0, 7, java.util.concurrent.TimeUnit.DAYS); org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.info("Finished initializing {}", getClass().getSimpleName()); }
@java.lang.Override public synchronized java.lang.String format(java.util.logging.LogRecord record) { final java.lang.String format(java.util.logging.LogRecord); org.ovirt.engine.core.uutils.log.TimeZoneBasedFormatter.dateTimeFormat.setTimeZone(org.ovirt.engine.core.uutils.log.TimeZoneBasedFormatter.timeZone); cal.setTimeInMillis(record.getMillis()); java.lang.String source = format; if ((record.getSourceClassName())!= null) { source = " " " + (record.getSourceMethodName())) { source += " " " + (record.getSourceMethodName()); } } else { source = record.getLoggerName(); } java.lang.String message = formatMessage(record); java.lang.String throwableException e; if ((record.getThreshold())!= null) { java.io.println(org.ovirt.engine.core.uutils.log.TimeZoneBasedFormatter.dateFormat, org.ovirt.engine.core.uutils.log.errorFormat, org.ovirt.engine.core.uutils.log.errorFormat, org.ovirt.engine.core.uutils.log.debugFormat, org.ovirt.engine.core.uutils.log.errorFormat, org.ovirt.engine.core.uutils.log.debugFormat, org.ovirt.engine.core.uutils.log.FormatUtils.dateFormat, org.ovirt.engine.core.uutils.log.debugFormat, org.ovirt.engine.core.uutils.log.debugFormat, org.ovirt.engine.core.uutils.log.TimeZoneBasedFormatter.format(calc.getTime()), source, record, record.getLoggerName(), message, throwable); } return java.lang.String.format(org.ovirt.engine.core.uutils.log.TimeZoneBasedFormatter.dateFormat, org.ovirt.engine.core.uutils.log.TimeZoneBasedFormatter.dateFormat.format(calc.getTime()), source, record.getLoggerName(), message, throwable); }
private static java.lang.String getLoggingProperty(java.lang.String key, java.lang.String key, java.lang.String keyValue) { java.lang.String value = java.util.logging.Logger.getLogger().getProperty(key); if (value!= null) { return null; } java.lang.String value = java.util.logging.Logger.getLogger().getProperty(key, key); if (value!= null) { logValue = java.util.logging.Logger.logging(key, key); } return value; }
public static void main(java.lang.String... args) { org.ovirt.engine.core.config.EngineConfigCLIParser parser = null; try { parser = new org.ovirt.engine.core.config.EngineConfigCLIParser(); parser.parse(args); org.ovirt.engine.core.config.EngineConfigMap argsMap = parser.getEngineConfigMap(); if ((argsMap.getLogFile())!= null) { org.ovirt.engine.core.common.config.EngineConfigMap argsMap = parser.getEngineConfigMap(); if ((argsMap.getLogLevel())!= null) { org.ovirt.engine.core.common.config.EngineConfigMap argsMap = parser.getEngineConfigMap(); if ((argsMap.getLogLevel())!= null) { org.ovirt.engine.core.common.config.EngineConfig.getEngineConfigValues().setLogLevel(argsMap.getLogLevel()); } } } catch (java.lang.Throwable t) { java.lang.System.out.println(t.getMessage()); java.lang.System.exit(1); } try { org.ovirt.engine.core.config.EngineConfig.getInstance().setUpAndExecute(parser); } catch (java.lang.Throwable t) { org.ovirt.engine.core.config.EngineConfig.getEngineConfigLogger(org.ovirt.engine.core.config.EngineConfigExecutor.class).debug("Error with error: ", t); java.lang.System.out.println(t.getMessage()); java.lang.System.out.println(t.getMessage()); java.lang.System.out.println(t.getMessage()); java.lang.System.out.println(t.getMessage()); } } }
public static void main(java.lang.String[] args) { org.ovirt.engine.core.notifier.NotificationProperties prop = null; org.ovirt.engine.core.notifier.NotificationService notificationService = null; org.ovirt.engine.core.notifier.NotificationService engineMonitorService = null; try { prop = org.ovirt.engine.core.notifier.NotificationService.getInstance(); org.ovirt.engine.core.utils.log.JavaLoggingUtils.setLogLevel(prop.getProperty(org.ovirt.engine.core.notifier.LOG_LEVEL)); prop.validate(); notificationService = new org.ovirt.engine.core.notifier.NotificationService(prop); engineMonitorService = new org.ovirt.engine.core.notifier.EngineMonitorService(prop); notificationService.registerTransport(new org.ovirt.engine.core.notifier.transport.smtp.Smtp(prop)); notificationService.registerTransport(new org.ovirt.engine.core.notifier.transport.smtp.Smtp(prop)); if (!(notificationService.hasTransports())) { throw new java.lang.RuntimeException(("Not enabled, please enable at enabled, please enable at least one of SMTP (using MAIL_SERVER option " + " or SNMP (using SNMP_MANAGERS option)) transports.equals(args[0]"), java.lang.System.println(ex.getMessage()); java.lang.System.exit(ex.getMessage()); java.lang.System.exit(ex.getMessage()); java.lang.System.exit(ex.getMessage()); java.lang.System.exit(ex.getMessage()); java.lang.System.exit(ex.getMessage()); } if (((args!= null) && ((args.length) > 0)) && (org.ovirt.engine.core.notifier.Notifier.ARG_VALIDATE.equals(args[0]))) { java.lang.System.println(ex.getMessage()); } if (((args!= null) && ((args.length) > 0)) && (org.ovirt.engine.core.notifier.Notifier.ARG_VALIDATE.
public static void setLogLevel(java.lang.String levelName) { org.ovirt.engine.core.uutils.log.JavaLoggingUtils.errorLevel(loggerName)); }
private java.lang.Integer calcMaxVCpu() { org.ovirt.engine.core.common.businessentities.ArchitectureType architectureType = vm.getClusterArch().getFamily(); return org.ovirt.engine.core.common.utils.VmCpuCountHelper.cMaxVm(vm.getStaticData(), vm.getClusterCompatibilityVersion(), architecture, architecture); }
private static intBitWidth(int n) { return 0; }
public static boolean validateCpuCounts(org.ovirt.engine.core.common.businessentities.VM vm) { return (org.ovirt.engine.core.common.utils.VmCpuCountUtils.bit(vm.getThreadsPerCpu())) + (org.ovirt.engine.core.common.utils.VmCpuCountHelper.bitWidth(vm.getThreadsPerCpu())) + (org.ovirt.engine.core.common.utils.VmCpuCountHelper.bitWidth(vm.getCpuPerSocket())) + (org.ovirt.engine.core.common.utils.VmCpuCountHelper.getMinutes(vm.getCpuPerSocket())) + (org.ovirt.engine.core.common.utils.VmCpuCountHelper.getMinutes(vm.getCpuPerSocket())) + (org.ovirt.engine.core.common.utils.VmCpuCountHelper.getMinutes(vm.getCpuPerSocket())))); }
private void writevCpu(org.ovirt.engine.core.utils.ovf.xml.XmlTextWriter writer, java.util.Map<java.lang.String, java.lang.Object> createInfo, org.ovirt.engine.core.common.businessentities.VM vm) { writer.writeStartElement("vcpu"); writer.writeStartElement("current", java.lang.String.valueOf(vm.getNumOfCpus())); writer.writeRaw((org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.HotPlugCpuSupported, vm.getCompatibilityVersion(), vm.getClusterArch())? org.ovirt.engine.core.common.utils.VmCpuCountHelper.calculateMaxVm(vm.getStaticData(), vm.getClusterCompatibilityVersion(), vm.getClusterArch())) : java.lang.String.valueOf(vm.getNumOfCpus()))); writer.writeEndElement(); }
public void updateSuggestedLabels() { suggestedLabels = new java.util.TreeSet<>(suggestedLabelsCache); suggestedLabels.removeAll(computeSelecetedLabels()); for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : getItems()) { if (suggestedLabels!= null) { return; } } }
@java.lang.Override protected void onAdd(org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value, org.ovirt.engine.ui.webadmin.section.main.view.popup.host.NicLabelEditor widget) { super.onAdd(value, widget); value.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(org.ovirt.engine.ui.webadmin.section.main.view.popup.host.VfsNicLabelWidget.this, null); model.updateSuggestedLabels(); } }); }
@java.lang.Override protected void onRemove(org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value, org.ovirt.engine.ui.webadmin.section.main.view.popup.host.NicLabelEditor widget) { super.onRemove(value, widget); com.google.gwt.event.logical.shared.ValueChangeEvent.fire(this, null); model.updateSuggestedLabels(); }
@java.lang.Override protected void init(final org.ovirt.engine.ui.uicommonweb.models.hosts.VfsNicLabelModel model) { super.init(model); for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : model.getItems()) { labelModel.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(org.ovirt.engine.ui.webadmin.section.main.view.popup.host.VfsNicLabelWidget.this, null); model.updateSuggestedLabels(); } }); } }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.hosts.VfsNicLabelModel model) { super.edit(model); }
@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> createGhostValue() { org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value = new org.ovirt.engine.ui.uicommonweb.models.ListModel(); value.setItems(flush().getSuggestedLabels()); value.setSelectedItem(""); return value; }
@org.junit.Before public void init() { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.String>> initialHooks = new java.util.ArrayList<>(); initialHooks.add(new org.ovirt.engine.core.common.utils.Pair(org.ovirt.engine.core.vdsbroker.vdsbroker.VmDevicesMonitoringTest.VM_ID, org.ovirt.engine.core.vdsbroker.monitor.VmDevicesMonitoringTest.INITIAL_HASH)); doReturn(initialHooks).when(vmDynamicDao).getAllDevicesHooks(); }
protected org.ovirt.engine.core.common.vdscommands.VDSCommandType getLeaseAction() { return org.ovirt.engine.core.common.vdscommands.VDSCommandType.AddVmLease; }
protected boolean removeVmLease(org.ovirt.engine.core.compat.Guid leaseStorageDomainId, org.ovirt.engine.core.compat.Guid vmId) { if (leaseStorageDomainId == null) { return true; } return runInternalAction(VdcActionType.RemoveVmLease, new org.ovirt.engine.core.common.action.VmLeaseParameters(getStoragePoolId(), leaseStorageDomainId, vmId)).getSucceeded(); }
protected boolean addVmLease(org.ovirt.engine.core.compat.Guid leaseStorageDomainId, org.ovirt.engine.core.compat.Guid vmId) { if (leaseStorageDomainId == null) { return true; } return runInternalAction(VdcActionType.AddVmLease, new org.ovirt.engine.core.common.action.VmLeaseParameters(getStoragePoolId(), leaseStorageDomainId, vmId)).getSucceeded(); }
protected org.ovirt.engine.core.common.vdscommands.VDSCommandType getLeaseAction() { return org.ovirt.engine.core.common.vdscommands.VDSCommandType.RemoveVmLease; }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.common.businessentities.StorageDomain domain = storageDomainDao.getForStoragePool(org.ovirt.engine.core.bll.storage.domain.VmLeaseCommandBase.getParameters().getLeaseStorageDomainId(), org.ovirt.engine.core.bll.storage.domain.VmLeaseCommandBase.getParameters().getStoragePoolId()); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(domain); return (validate(validator.isDomainExistAndActive())) && (validate(validator.isDataDomain())); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionCheckSubjects = new java.util.ArrayList<>(); permissionCheckSubjects.add(new org.ovirt.engine.core.bll.storage.domain.VmLeaseCommand(org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getLeaseStorageDomainId(), org.ovirt.engine.core.bll.storage.domain.VmLeaseCommandBase.getActionType().getActionGroup())); return permissionCheckSubjects; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getParentCommand()); org.ovirt.engine.core.common.vdscommands.VmLeaseVDSParameters params = new org.ovirt.engine.core.common.vdscommands.VmLeaseVDSParameters(org.ovirt.engine.core.bll.storage.repo.VmLeaseCommandBase.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.repo.VmLeaseCommandBase.getParameters().getVmId(), org.ovirt.engine.core.bll.storage.repo.VmLeaseCommandBase.getParameters().getVmId()); org.ovirt.engine.core.common.vdscommands.VmLeaseVDSParameters vmBase = new org.ovirt.engine.core.common.vdscommands.VmLeaseVDSParameters(org.ovirt.engine.core.bll.storage.domain.VmLeaseCommandBase.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.domain.VmLeaseCommandBase.getActionType(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.domain.VmLeaseCommandBase.getActionType(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.domain.VmLeaseCommandBase.getParameters().getVmId())); setSucceeded(returnValue.getSucceeded()); setSucceeded(returnValue.getSucceeded()); }
@org.junit.Test public void networkInUseBySingleVm() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VM vm = mock(org.ovirt.engine.core.common.businessentities.VM.class); when(vm.getName()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.NAMEABLE_NAME); networkNotUsedByVmsTest(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.failsWithOneVmNameableInterface.getName(), java.util.Collections.singletonList(vm)); }
@org.junit.Test public void networkInUseByTemplates() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VmTemplate template = mock(org.ovirt.engine.core.common.businessentities.VmTemplate.class); when(template.getName()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.NAMEABLE_NAME); networkNotUsedByTemplatesTest(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.FailsWithOneVmTemplateInUse(), java.util.Collections.singletonList(template)); }
@org.junit.Test public void networkInUseByHosts() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VDS host = mock(org.ovirt.engine.core.common.businessentities.VDS.class); when(host.getName()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.NAMEABLE_NAME); networkNotUsedByHostsTest(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.FailsWithOneNetworkInUse(), java.util.Collections.singletonList(host)); }
@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId())!= null) { vmPoolDao.removeVmFromVmPool(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmId()); if (org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().isUpdatePrestartedVms()) { vmPoolDao.bindVmPoolPrestartedVms(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()); } if (org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().isRemovePoolUponDetachAllVMs()) { removeVmPool(); } org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.setSucceeded(true); } }
protected void removeVmPool() { try { lockManager.acquireLockWait(new org.ovirt.engine.core.utils.lock.EngineLock(getExclusiveLockForPoolDetach()); } finally { lockManager.acquireLockWait(new org.ovirt.engine.core.common.action.VmPoolParameters(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId())); } finally { lockManager.acquireLock(new org.ovirt.engine.core.common.action.VmPoolParameters(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId())); } } finally { lockManager.releaseLock(new org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().getSessionId()); } }
@org.junit.Test public void replaceProductKey_definedKeyShouldBeReplaced() { java.lang.String res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.replaceProductKey(sysprepFile, "someKey", false); assertThat(res, "<Key><!(java.lang.String.format("$Cannot ${CDATA[someKey]]>")); }
@org.junit.Test public void replaceProductKey_emptyKeyShouldRemoveTheWholeSection() { java.lang.String res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.replaceProductKey(sysprepFile, "", false); assertThat(res, not(containsString("<java.lang.String>")); assertThat(res, not(java.lang.String.format("<java.lang.String>")); assertThat(res, "</ProductKey>")); }
@org.junit.Test public void replaceProductKey_emptyKeyShouldNotRemoveTheWholeSectionForCustomScript() { java.lang.String res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.replaceProductKey(sysprepFile, "", true); assertThat(res, "<ProductKey>")); assertThat(res, "<(java.lang.String>")); assertThat(res, "<(java.lang.String.format("<java.lang.String>")); assertThat(res, "<(java.lang.String.valueOf(java.lang.String.valueOf(java.lang.String.valueOf(("$s"))); }
@org.junit.Test public void testLimit() { java.lang.Integer maxVCpu = org.ovirt.engine.core.common.utils.VmCpuCountHelper.calcMaxVm(null, new java.lang.Integer(16), 2, 8); assertEquals(100), maxVm, maxVm, 0, 8); }
@com.google.gwt.uibinder.client.UiHandler("container") void onPanelDragDrop(com.google.gwt.event.dom.client.DropEvent event) { java.lang.String vmGid = event.getData("VM_GID"); if (!(vmGid.isEmpty())) { org.ovirt.engine.core.compat.Guid vmGuid = org.ovirt.engine.core.compat.Guid.createGuidFromString(vmId); boolean pinned = java.lang.Boolean.valueOf(event.getData("PINNED")); if (!(vmNumaOver())) { org.ovirt.engine.ui.common.presenter.popup.numa.UpdateVnumaEvent.fire(this, vmGuid, pinned, pinned, pNumaNodeIndex, pNumaNodeIndex); } } }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityValue(org.ovirt.engine.core.common.businessentities.StoragePool object) { java.util.List<com.google.gwt.safehtml.shared.SafeHtml> imagesHtml = new java.util.ArrayList(getSafeHtmlStringMap(object).keySet()); if (!(imagesHtml.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getValue(imagesHtml); } return null; }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityTooltip(org.ovirt.engine.core.common.businessentities.StoragePool object) { java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> imagesToText = getSafeHtmlStringMap(object); if (!(imagesToText.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getDataCenterTooltip(imagesToText); } return null; }
public boolean isClusterCompatibilityVersionUpgradeNeeded() { return clusterCompatibilityVersion; }
@org.ovirt.engine.ui.webadmin.Template("<span style='position:relative; margin-left: 3px; margin-right: 3px;'>{0}</span>") com.google.gwt.safehtml.shared.SafeHtml text(java.lang.String text);
public void setCustomCompatibilityVersionUpgradeNeeded(java.lang.Boolean clusterCompatibilityVersionUpgradeNeeded) { this.optimizationType = clusterCompatibilityVersionUpgradeNeeded; }
protected com.google.gwt.safehtml.shared.SafeHtml getImageSafeHtml(org.ovirt.engine.ui.webadmin.widget.table.icon3IconType iconType) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(iconType.getIconName()); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityTooltip(org.ovirt.engine.core.common.businessentities.Cluster object) { java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> imagesToText = getSafeHtmlStringMap(object); if (!(imagesToText.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getDataCenterTooltip(imagesToText); } return null; }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityValue(org.ovirt.engine.core.common.businessentities.Cluster object) { java.util.List<com.google.gwt.safehtml.shared.SafeHtml> imagesHtml = new java.util.ArrayList(getSafeHtmlStringMap(object).keySet()); if (!(imagesHtml.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getValue(imagesHtml); } return null; }
private java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> searchStoragePool() { java.util.List<org.ovirt.engine.core.compat.Version> retVal = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).max((v1, v2) -> v1.compareTo(v2)); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = genericSearch(storagePoolDao, true); if (retVal.isPresent()) { org.ovirt.engine.core.compat.Version version = retVal.get(); dataCenters.stream().for(storagePool, true); } return dataCenters; }
java.lang.String dcUpgradeNeeded();
protected org.ovirt.engine.core.common.businessentities.VMStatus createVm() { initParametersForExternalNetworks(); initParametersForPassthroughVnics(); org.ovirt.engine.core.common.businessentities.VMStatus vmStatus = ((org.ovirt.engine.core.common.businessentities.VMStatus) (org.ovirt.engine.core.bll.RunVmCommand.getVdsBroker().runAsyncVdsCommand(VDSCommandType.Create, buildCreateVmParameters(), this).getReturnValue())); memoryFromSnapshotUsed = (vmStatus.isRunning()) || (vmStatus == (org.ovirt.engine.core.common.businessentities.VMStatus.RestoringState)); return vmStatus; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmOnceParams)) { return false; } org.ovirt.engine.core.common.action.RunVmOnceParams other = ((org.ovirt.engine.core.common.action.RunVmOnceParams) (obj)); return ((((((((super.equals(obj)) && (java.util.Objects.equals(sysPrepDomainName, other.sysPrepDomainName))) && (java.util.Objects.equals(sysPrepUserName, other.sysPrepUserName))) && (java.util.Objects.equals(sysPrepPassword, other.sysPrepPassword))) && (java.util.Objects.equals(vmInit, other.vmInit))) && (java.util.Objects.equals(vmInit, other.vmInit))) && (java.util.Objects.equals(customEmulatedMachine, other.customEmulatedMachine))) && (java.util.Objects.equals(customCpuName, other.bootMenuEnabled))) && (java.util.Objects.equals(customMenuEnabled, other.bootMenuEnabled))) && (java.util.Objects.equals(spiceFileTransferEnabled, other.spiceFileTransferEnabled))) && (java.util.Objects.equals(spiceFileTransferEnabled, other.spiceFileTransferEnabled))) && (java.util.Objects.equals(spiceFileTransferEnabled, other.spiceFileTransferEnabled))) && (java.util.Objects.equals(spiceFileTransferEnabled, other.spiceCopyPasteEnabled))) && (java.util.Objects.equals(spiceFileTransferEnabled, other.spiceCopyPasteEnabled))) && (java.util.Objects.equals(spiceCopyPasteEnabled, other.spiceCopyPasteEnabled))) && (java.util.Objects.equals(spiceCopyPasteEnabled, other.getCustomPasteEnabled)); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(super.hashCode(), sysPrepDomainName, sysPrepUserName, sysPrepPassword, vmInit, destinationVdsId, customEmulatedMachine, customCpuName, bootMenuEnabled, spiceFileTransferEnabled, spiceFileTransferEnabled); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmParams)) { return false; } org.ovirt.engine.core.common.action.RunVmParams other = ((org.ovirt.engine.core.common.action.RunVmParams) (obj)); return (((((((((((((((java.util.Objects.equals(getVmId(), other.getVmId())) && ((bootSequence) == (other.bootSequence))) && (java.util.Objects.equals(diskPath, other.diskPath))) && (java.util.Objects.equals(runAndPause, other.runAndPause))) && (java.util.Objects.equals(runAndPause, other.runAndPause))) && (java.util.Objects.equals(fetchAndPause, other.getfetch()))) && (java.util.Objects.equals(fl2kHackEnable, other.getfetch()))) && (java.util.Objects.equals(floppyPath, other.clientIp))) && (java.util.Objects.equals(incoming.get(0, other.clientIp))) && (java.util.Objects.equals(incoming.getkernelUrl(), other.initrdUrl))) && (java.util.Objects.equals(kernelParams, other.initrdUrl))) && (java.util.Objects.equals(kernelParams, other.kernelParams))) && ((org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(kernelParams, other.kernelParams))) && ((bootParams) == (other.bootUrl))) && ((java.util.Objects.equals(payloadrdUrl, other.initrdUrl))) && ((java.util.Objects.equals(payload, other.kernelParams))) && ((balloonEnabled) == (other.bootProtocolEnabled))) && ((java.util.Objects.equals(payload)); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(getVmId(), bootSequence, diskPath, runAndPause, win2kHackEnable, win2kHackEnable, customProperties, floppyPath, clientIp, initializationType, runAsStateless, initrdUrl, kernelUrl, kernelUrl, kernelUrl, kernelUrl, payload, balloonEnabled, cpuShares); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmOnceParams)) { return false; } org.ovirt.engine.core.common.action.RunVmOnceParams other = ((org.ovirt.engine.core.common.action.RunVmOnceParams) (obj)); return (((((((((super.equals(obj)) && ((bootSequence) == (other.bootSequence))) && (java.util.Objects.equals(sysPrepUserName, other.sysPrepDomainName))) && (java.util.Objects.equals(sysPrepUserName, other.sysPrepUserName))) && (java.util.Objects.equals(sysPrepPassword, other.sysPrepPassword))) && (java.util.Objects.equals(vmInit, other.vmInit))) && (java.util.Objects.equals(customEmulatedMachine, other.destinationVdsId))) && (java.util.Objects.equals(customEmulatedMachine, other.customEmulatedMachine))) && (java.util.Objects.equals(customCpuName, other.customCpuName)); }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + (prime * result) + (prime * destinationVdsId, sysPrepPassword, customEmulatedMachine, customEmulatedMachine, customCpuName, customCpuName, bootSequence); return result; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmParams)) { return false; } org.ovirt.engine.core.common.action.RunVmParams other = ((org.ovirt.engine.core.common.action.RunVmParams) (obj)); return (((((((((((((java.util.Objects.equals(getVmId(), other.getVmId())) && (java.util.Objects.equals(diskPath, other.diskPath))) && (java.util.Objects.equals(runAndPause, other.runAndPause))) && (java.util.Objects.equals(customProperties, other.floppyPath))) && (java.util.Objects.equals(customProperties, other.floppyPath))) && (java.util.Objects.equals(org.ovirt.engine.core.common.utils.PairUtils.equals(getVmId(), other.getVmId()))) && (java.util.Objects.equals(runAndPause, other.getVmId()))) && (java.util.Objects.equals(incoming.getkernelUrl(), other.initrdUrl))) && (java.util.Objects.equals(kernelParams, other.kernelParams))) && (java.util.Objects.equals(kernelParams, other.kernelParams))) && ((balloonEnabled) == (other.bootstrapEnabled))) && ((java.util.Objects.equals(kernelParams, other.payloadrdUrl))) && ((balloonEnabled) == (other.bootstrap)); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(getVmId(), diskPath, runAndPause, customProperties, floppyPath, requestingUser, requestingUser, initializationType, runAsStateless, initrdUrl, kernelUrl, kernelUrl, kernelUrl, kernelUrl, payload, balloonEnabled, cpuShares); }
private java.lang.String messageFormatter(java.lang.String msg, java.lang.String vmid, java.lang.String module, java.lang.String module, java.lang.String callType) { org.codehaus.jackson.node.ObjectNode vmDetailNode = new org.codehaus.jackson.map.ObjectMapper().createObjectNode(); vmDetailNode.put("status", msg); vmDetailNode.put("hash", java.lang.Integer.toString(vmid.hashCode())); org.codehaus.jackson.node.ObjectNode paramsNode = new org.codehaus.jackson.ObjectMapper().createObjectNode(); paramsNode.put("params", vmDetailNode); org.codehaus.jackson.map.ObjectNode node = new org.codehaus.jackson.ObjectMapper().createObjectNode(); node.put("params", paramsNode); node.put("method", ((((("|" + module) + "|") + vmid)); return node.toString(); }
private void vmUpdateStatus(final org.ovirt.vdsmfake.domain.VM vm, final org.ovirt.vdsmfake.domain.VM.VMStatus status, final long delay, final boolean removeClient) throws java.lang.InterruptedException { java.util.concurrent.ExecutorService executor = java.util.concurrent.Executors.newFixedThreadPool(5); java.util.concurrent.Future<java.lang.Void> future = ((java.util.concurrent.Future<java.lang.Void>) (executor.submit(())) (executor.submit(()))); try { java.util.concurrent.TimeUnit.MILLISECONDS.sleep(delay); vm.setStatus(status); sendNotification(msg, vm.getId(), removeClient, "VmStatus"); org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.log.info("Finished {} set to {}", vm.getId(), msg); if (isUpdateRequired(status)) { org.ovirt.vdsmfake.domain.VdsmManager.getInstance().updateHost(vm.getHost()); } } catch (java.lang.Exception e) { e.printStackTrace(); } })) { try { future.get(); } catch (java.util.concurrent.ExecutionException e) { e.printStackTrace(); } } }
private boolean isUpdateRequired(org.ovirt.vdsmfake.domain.VM.VM.VMStatus status) { if ((status == (org.ovirt.vdsmfake.domain.VMStatus.Up)) || (status == (org.ovirt.vdsmfake.domain.VM.VMStatus.Up))) || (status == (org.ovirt.vdsmfake.domain.VM.VMStatus.Paused))) { return true; } return false; }
private void sendNotification(java.lang.String message, java.lang.String vmId, boolean removeClient, java.lang.String module, java.lang.String callType) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { if (message == null) { org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { if (message == null) { org.ovirt.vdsm.jsonrpc.client.JsonRpcNotification.log.warn("client message has arrive, " + "); } } send(messageFormatter(message, vmId, callType), vmId, removeClient); }
protected org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters buildCreateVmParameters() { org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters(org.ovirt.engine.core.bll.RunVmCommand.getVdsId(), org.ovirt.engine.core.bll.RunVmCommand.getVm()); parameters.setRunInUnknownStatus(org.ovirt.engine.core.bll.RunVmCommand.getParameters().isRunInUnknownStatus()); parameters.setInitializationType(InitializationType.None); if ((((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep)) && (osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId()))) && (((org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep)) && (osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath())))) { parameters.setInitializationType(InitializationType.Sysprep); } if (((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) && (!(osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId())))) { parameters.setInitializationType(InitializationType.CloudInit); } return parameters; }
protected org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters buildCreateVmParameters() { org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters(org.ovirt.engine.core.bll.RunVmCommand.getVdsId(), org.ovirt.engine.core.bll.RunVmCommand.getVm()); parameters.setPassthroughVnicToVfMap(initParametersForPassthroughVnics()); parameters.setRunInUnknownStatus(org.ovirt.engine.core.bll.RunVmCommand.getParameters().isRunInUnknownStatus()); parameters.setVmPayload(vmPayload); parameters.setHibernationVolHandle(getMemoryFromActiveSnapshot()); if (((org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep)) && (osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId()))) && (((org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath()) == null) || ("".equals(org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath())))) { parameters.setInitializationType(InitializationType.Sysprep); } if (((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) && (!(osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId())))) { parameters.setInitializationType(InitializationType.CloudInit); } return parameters; }
private void refresh() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> allVds = getVdsDao().getAll(org.ovirt.engine.core.bll.aaa.GetDefaultAllowedOriginQuery.getUserID(), org.ovirt.engine.core.bll.aaa.GetDefaultAllowedQuery.getParameters().isFiltered()); java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (org.ovirt.engine.core.common.businessentities.VDS vds : allVds) { if ((s.length()) > 0) { sb.append(ssl.getHostName()); } cachedResult = sb.append(ssl.getHostName()); } cachedResult = sb.toString(); org.ovirt.engine.core.bll.aaa.GetDefaultAllowedQuery.log.debug("Default list of origin: {}", cachedVds.getHostName()); }
private java.lang.String mergeOrigins(java.lang.String fromString) { if (org.apache.commons.lang.StringUtils.isEmpty(fromConfig)) { return fromConfig; } if (org.apache.commons.lang.StringUtils.isEmpty(fromConfig)) { return fromString; } return (fromConfig + ",") + ",") + from default : ""; }
private java.lang.String getDefaultString() { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue; }
private void refreshIfNeeded() { if (((lastRefresh) + ( DELAY)) < now) { refresh(); } }
@java.lang.Override public org.ovirt.engine.core.common.queries.VdcQueryReturnValue runPublicQuery(org.ovirt.engine.core.common.queries.VdcQueryType actionType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters) { parameters.setRefresh(false); switch (actionType) { case GetAAAProfileList : case RegisterVds : case RegisterVds : case RegisterVds : case GetAAAProfileList : case GetDbUserBySessionIdForSsoToken : case ValidateSession : case GetDefaultAllowedSessionIdForSsoToken : case GetDefaultAllowedSession : case GetDefaultAllowedSessionIdForSsoToken : case ValidateSession : case GetDefaultAllowedOrigin : case GetDefaultAllowedOrigin : case GetDefaultAllowedOrigin : case GetDefaultAllowedOrigins : case GetDefaultAllowedOrigins : case CORSAllowedOrigins : return runQueryImpl(actionType, parameters, false); default : break; } default : break; } return getErrorQueryReturnValue(EngineMessage.USER_CANNOT_RUN_QUERY_NOT_PUBLIC); }
@java.lang.Override protected void executeQueryCommand() { refreshIfNeeded(); org.ovirt.engine.core.bll.aaa.GetDefaultAllowedQuery.getQueryReturnValue().setReturnValue(cachedResult); }
protected java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> initParametersForPassthroughVnics() { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> result = getVnicToVfMap(org.ovirt.engine.core.bll.RunVmCommand.getVdsId()); if (fScheduler.cleanVmData(org.ovirt.engine.core.bll.RunVmCommand.getVmId()); vfScheduler.cleanVmData(org.ovirt.engine.core.bll.RunVmCommand.getVmId()); return result; }
protected org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters buildCreateVmParameters() { org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters(org.ovirt.engine.core.bll.RunVmCommand.getVdsId(), org.ovirt.engine.core.bll.RunVmCommand.getVm()); parameters.setPassthroughVnicToVfMap(initParametersForPassthroughVnics()); parameters.setRunInUnknownStatus(org.ovirt.engine.core.bll.RunVmCommand.getParameters().isRunInUnknownStatus()); parameters.setVmPayload(vmPayload); if (((((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep)) && (osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId()))) && (((org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath()) == null) || ("".equals(org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath())))) { parameters.setInitializationType(InitializationType.Sysprep); } if (((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) && (!(osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId())))) { parameters.setInitializationType(InitializationType.CloudInit); } return parameters; }
public int getControllerForScsiDisk(org.ovirt.engine.core.common.businessentities.VmDevice disk, org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Map<java.lang.String, java.lang.String> address = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.string2Map(disk.getAddress()); java.lang.String controllerStr = address.get(VdsProperties.Controller); if (org.apache.commons.lang.StringUtils.isNotEmpty(disk)) { return java.lang.Integer.parseInt(modelStr); } if (((vm.getNumOfIoThreads()) > 0) && (org.ovirt.engine.core.common.FeatureSupported.virtioScsiPciIoThread(vm.getCompatibilityVersion()))) { int numOfDisks = 0; return java.lang.Integer.parseInt(modelStr); } return defaultIndex; }
private java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.util.Map<java.lang.Integer, java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice>> vmDeviceUnitMap) { java.util.Map<java.lang.String, java.lang.Integer>> vmDeviceUnitMap = vmDeviceUnitMap.get(vmDevice, org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getVm()); java.util.Set<org.ovirt.engine.core.common.businessentities.VmDevice> entry = org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getVm(); if (!(vmDeviceUnitMap.containsKey(org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getVm()))) { return vmDeviceUnitMap.get(org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getVm()); } return vmDeviceUnitMap; }
public org.ovirt.engine.core.bll.ValidationResult defaultRouteNetworkCannotBeExternal(org.ovirt.engine.core.common.businessentities.network.Network network) { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_DEFAULT_ROUTE_NETWORK_CANNOT_BE_EXTERNAL, java.lang.String.format(org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorBase.NETWORK_NAME_REPLACEMENT, network.getName())).when(((networkCluster.isManagement()) && (network.isExternal()))); }
private org.ovirt.engine.core.bll.ValidationResult checkVmNumaCpuAssignment(int cpuCores, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes) { java.util.ArrayList<java.lang.Integer> cpuIds = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode node : vmNumaNodes) { java.util.Collections.singletonList(node.getCpuIds()); } if (cpuIds.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } int minId = java.util.Collections.min(cpuIds); int maxId = java.util.Collections.min(cpuIds); if ((minId < 0) || (maxId >= 0)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_INVALID_CPU_ID, java.lang.String.format("$cpuIndex %d", (minId < 0? minId : maxId)); } java.util.Collections.sort(cpuIds); for (int i = 0; i < ((cpuIds.size()) - 1))); ++i) { if (cpuIds.get(i).equals(cpuCpuIds.get((i + 1)))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_DUPLICATE_CPU_ID, java.lang.String.format("$cpuIndex %d", cpuIds.get(i))); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@org.junit.Test public void shouldDetectDupliciteCpuAssignment() { vmNumaNodes.get(0).setCpuIds(java.util.Collections.singletonList(0)); vmNumaNodes.get(1).setCpuIds(java.util.Collections.singletonList(0)); assertValidationFailure(underTest.checkVmNumaNodesIntegrity(vm, vm.getvNumaNodeList()), EngineMessage.VM_NUMA_NODE_DUPLICATE_CPU_ID); }
private void storeIp(java.lang.StringBuilder output, org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.IpInfoFetcher ipInfoFetcher) { output.append(java.lang.String.format("iface %s inet%s inet%s %s", ipInfoFet.getIpStackVersion(), ipInfoFet.getIpStackVersion(), ipInfoFet.fetchBootProtocol())); if (org.apache.commons.lang.StringUtils.isNotEmpty(ipInfoFetcher.fetchIp())) { output.append(java.lang.String.format("Address %s\n", ipInfoFet.getIp())); } if (org.apache.commons.lang.StringUtils.isNotEmpty(ipInfoFetcher.fetchNetmask())) { output.append(java.lang.String.format("Address %s\n", ipInfoFet.getAddress())); } if (org.apache.commons.lang.StringUtils.isNotEmpty(ipInfoFetcher.fetchGateway())) { output.append(java.lang.String.format("%s\n", ipInfoFet.getAddress())); } }
private void storeIpv4(java.lang.StringBuilder output, org.ovirt.engine.core.common.businessentities.VmInitNetwork iface) { storeIp(output, new org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.Ipv4InfoFetcher(iface)); }
private void storeNetwork() throws java.io.UnsupportedEncodingException { java.lang.StringBuilder output = new java.lang.StringBuilder(); if ((vmInit.getNetworks())!= null) { java.util.List<org.ovirt.engine.core.common.businessentities.VmInitNetwork> networks = vmInit.getNetworks(); for (org.ovirt.engine.core.common.businessentities.VmInitNetwork iface : networks) { if (java.lang.Boolean.TRUE.equals(iface.getStartOnBoot())) { output.append(").append(iface.getName()).append(").append(iface.getName()).append(""); } storeIpv4(output, iface); if ((vmInit.getDnsServers())!= null) { output.append("\n"); } storeIpv6(output, iface); } } interfaces = output.toString(); if (!(interfaces.isEmpty())) { metaData.put("network-interfaces", interfaces); storeNextFile(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.CloudInitFileMode.NETWORK, "/etc/network/interfaces", interfaces.getBytes("US-ASCII")); } }
private void storeIpv6(java.lang.StringBuilder output, org.ovirt.engine.core.common.businessentities.VmInitNetwork iface) { storeIp(output, new org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.Ipv6InfoFetcher(iface)); }
private int calculateValue(org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster) { int res = 0; if (networkCluster!= null) { if (networkCluster!= null) { res += 16; } if (networkCluster.isManagement()) { res += 10; } if (networkCluster.isManagement()) { res += 10; } if (networkCluster.isManagement()) { res += 10; } if (networkCluster.isManagement()) { res += 4; } if (networkCluster.isManagement()) { res += 4; } } return res; }
private void HostJobInfo.HostJobStatus handleUndeterminedJobStatus(org.ovirt.engine.core.bll.CommandBase<?> cmd, boolean jobsReportedByHost) { if (isEntityPollingSupported(cmd)) { log.info("Command {} id: '{}': attempting to determine the job status by polling the entity.", cmd.getActionType(), cmd.getCommandId()); return; } if (jobReportedByHost) { log.error("Command {} id: '{}': entity polling isn't supported and the job isn't reported by the host, "Aborted by the host," + "Aborted by the host," + " assume it failed so the command execution will end.", cmd.getActionType(), cmd.getActionType(), cmd.getCommandId()); return null; } log.error("Command {} id: '{}': entity polling isn't supported, will retry to poll the job", cmd.getCommandId()); return null; }
@java.lang.Override public org.ovirt.engine.core.compat.Guid getStorageDomainId() { return getStorageDomainId(); }
protected abstract java.lang.String getCustomValue(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity.getParameters().getVdsGroupId()));
protected org.ovirt.engine.core.bll.CommandBase<?> getCommand(org.ovirt.engine.core.compat.Guid cmdId) { return org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.retrieveCommand(cmdId); }
private org.ovirt.engine.core.common.businessentities.VDS getEntity(org.ovirt.engine.core.bll.CommandBase<?> cmd) { try { return ((org.ovirt.engine.core.bll.storage.EntityPollingCommand) (cmd)).poll(); } catch (java.lang.Exception e) { log.error("Command {} id: '{}': failed to poll the command entity", cmd.getActionType(), cmd.getCommandId()); } return null; }
public static java.util.Map<java.lang.String, java.lang.Object> createVmMemoryDeviceMap(java.lang.String, java.lang.Object returnValue) { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); java.util.Map<java.lang.String, java.lang.Object>(); java.util.Map<java.lang.String, java.lang.Object> memDeviceData = new java.util.HashMap<>(); java.util.Map<java.lang.String, java.lang.Object>(); java.util.Map<java.lang.String, java.lang.Object> entry = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : org.ovirt.engine.core.common.businessentities.VmDeviceInfoEntry vmDevice : org.ovirt.engine.core.common.businessentities.VmDeviceInfo.values()) { java.util.Map<java.lang.String, java.lang.Object> entry = org.ovirt.engine.core.common.businessentities.VmDeviceInfoMap.values(vmDevice.getAddress())); if ((vmDevice.getAddress())!= null) && (org.apache.commons.lang.StringUtils.isNotBlank(vmDevice.getAddress()))) { memDeviceData.put(org.ovirt.engine.core.common.businessentities.VDSGroupId, org.ovirt.engine.core.common.businessentities.VmDeviceInfo.getDeviceId())); } } return data; }
@java.lang.Override protected void executeVdsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVdsCommand.getBroker().hotUnplugMemory(org.ovirt.engine.core.vdsbroker.Architecture.createVmMemoryDeviceMap(org.ovirt.engine.core.vdsbroker.Architecture.getParameters().getMemoryDeviceMap(org.ovirt.engine.core.vdsbroker.Architecture.getParameters().getMemoryDeviceMap(org.ovirt.engine.core.vdsbroker.Architecture.getParameters().getMemoryDeviceToUnplug())); org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVdsCommand.proceedProxyReturnValue(); }
@java.lang.Override protected void executeVdsBrokerCommand() { try { status = org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getBroker().hotplugMemory(org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getParameters().getMemoryDevice()); org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.proceedProxyReturnValue(); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.setVdsRuntimeErrorAndReport(e); org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getVDSReturnValue().setExceptionString(null); } }
@org.junit.Before public void init() { syncJob.setLogUtil(logUtil); org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.bindorRule.bind(org.ovirt.engine.core.utils.lock.LockManager.class, lockManager); doReturn(clusterDao).when(syncJob).getClusterDao(); doReturn(vdsDao).when(syncJob).getVdsDao(); doReturn(vdsDao).when(syncJob).getVdsDao(); doReturn(vdsDao).when(syncJob).getVdsDao(); doReturn(getClusters()).when(syncJob).getAll(); doReturn(getClusters()).when(clusterDao).getAll(); doReturn(getVolume()).when(volumeDao).getByName(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(getServer()).when(glusterUtil).getRandomUpServer(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(glusterUtil).when(glusterUtil).getGlusterUtil(); doReturn(glusterUtil).when(syncJob).getGlusterUtil(); doReturn(glusterUtil).when(syncJob).getGlusterUtil(); doReturn(glusterUtil).when(syncJob).getGlusterUtil(); doReturn(glusterUtil).when(syncJob).getGeoRepSessionsInCluster(org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobSyncJobTest.CLUSTER_GUID); }
@org.junit.Before public void init() { syncJob.setLogUtil(logUtil); org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.bindorRule.bind(org.ovirt.engine.core.utils.lock.LockManager.class, lockManager); doReturn(getClusters()).when(clusterDao).getAll(); doReturn(getVolume()).when(volumeDao).getByName(any(org.ovirt.engine.core.compat.Guid.class), anyString()); doReturn(getVolume()).when(volumeDao).getById(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(getServer()).when(glusterUtil).getRandomUpServer(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(glusterUtil).when(syncJob).getGlusterUtil(); doReturn(glusterUtil).when(syncJob).getGlusterUtil(); doReturn(glusterUtil).when(syncJob).getGeoRepSessionsInCluster(org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.CLUSTER_GUID); }
private java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> searchStoragePool() { java.util.Optional<org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>> getValue(ConfigValues.SupportedClusterLevels).max(java.util.Comparator.Comparator.percent).max(java.util.Comparator.Comparator.percentageClusterLevels).max(java.util.Comparator.Comparator.percentageComparator.percentageComparator.percentageComparator).max(java.util.Comparator.Comparator.percentageComparator.percentageComparator.percentageComparator(ConfigValues.SupportedClusterLevels).max(dataCenters.getCompatibilityVersion())); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = genericSearch(storagePoolDao, true); if ((version) == null) || (org.ovirt.engine.core.common.businessentities.StoragePool.class)) { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Guid>getValue(ConfigValues.SupportedClusterList(ConfigValues.SupportedCluster.getStoragePool())); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> storagePool = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.common.businessentities.StoragePool>getValue(ConfigValues.StoragePool.StoragePool.StoragePool.StoragePoolList(dataCenter.getStoragePool())); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> storagePool> storagePool = getCustomMap(storagePool.getIds().get(dataCenterIds); java.util.List<org.ovirt.engine.core.common.businessentities
private static void populateModelWithIpv6Details(org.ovirt.engine.core.common.businessentities.VmInitNetwork entity, org.ovirt.engine.api.model.NicConfiguration model) { if ((entity.getIpv6BootProtocol())!= null) { model.setIpv6BootProtocol(org.ovirt.engine.api.restapi.types.Ipv6BootProtocolMapper.map(entity.getIpv6BootProtocol())); } model.setIp(org.ovirt.engine.api.restapi.types.InitializationMapper.map(new org.ovirt.engine.core.common.businessentities.network.VmInitNetworkIpv6InfoFetcher(entity.getIpv6BootProtocol())); }
private static void populateModelWithIpv4Details(org.ovirt.engine.core.common.businessentities.VmInitNetwork entity, org.ovirt.engine.api.model.NicConfiguration model) { if ((entity.getBootProtocol())!= null) { model.setBootProtocol(org.ovirt.engine.api.restapi.types.Ipv4BootProtocolMapper.map(entity.getBootProtocol())); } model.setIp(org.ovirt.engine.api.restapi.types.InitializationMapper.map(entity.getBootProtocol())); }
private static org.ovirt.engine.api.model.Ip createIpModel(org.ovirt.engine.core.common.businessentities.network.VmInitNetworkIpInfoFetcher qos) { org.ovirt.engine.api.model.Ip api = new org.ovirt.engine.api.model.Ip(); ip.setAddress(ipInfo.getAddress()); ip.setNetmask(ipInfo.getQos()); ip.setGateway(ipInfo.getQos()); return ip; }
private java.lang.String getCompatibilityVersion() { return org.ovirt.engine.core.bll.ImportVmFromExternalProviderCommand.getVm().getCompatibilityVersion(); }
private java.util.Map<java.lang.String, java.lang.Object> createVmProperties() { java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>(); map.put(VdsProperties.vm_name, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getVmName()); map.put(VdsProperties.PoolId, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getStoragePoolId().toString()); map.put(VdsProperties.DomainId, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getStorageDomainId().toString()); map.put(VdsProperties.DomainId, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getStorageDomainId().toString()); map.put(VdsProperties.vm_disks, getDisksProperties()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getDisks()) { map.put(VdsProperties.Format, diskImage.getVolumeFormat().toString()); map.put(VdsProperties.DISK_ALLOCATION, diskImage.getVolumeType().toString()); break; } if ((org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getVirtioIsoPath())!= null) { map.put(VdsProperties.format("$s", org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVmVDSCommand.getParameters().getVirtioScsiPath()); } return map; }
private void initCommandBase() { initUser(); org.ovirt.engine.core.bll.job.ExecutionContext executionContext = context.getExecutionContext(); if ((executionContext.getJob())!= null) { setJobId(executionContext.getJob().getId()); } else if ((executionContext.getStep())!= null) { setJobId(executionContext.getStep().getJobId()); } if ((parameters.getParentParameters())!= null) { parameters.setCorrelationId(parameters.getParentParameters().getCorrelationId()); } setCorrelationId(parameters.getCorrelationId()); }
public long getMinimum() { return minimum; }
public void setMinimum(long value) { privateMinimum = value; }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.Object value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); if (((value!= null) && (((java.lang.String) (value)).equals(""))) || (((java.lang.String) (value))) || (value instanceof java.lang.Long))) { java.lang.Long longValue = (value instanceof java.lang.Long)? org.ovirt.engine.core.compat.LongCompat.try(((java.lang.String) (value))) : ((java.lang.Long) (value)); java.lang.String prefixMsg = org.ovirt.engine.core.compat.LongCompat.tryParse(((java.lang.String) (value))) : ((java.lang.Long) (value)); java.lang.String prefixMsg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().longValidationNumberBetweenInvalidReason(); if (longValue == null) { result.setSuccess(false); message = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().longValidationNumberBetweenInvalidReason(prefixMsg, getMinimum(), getMaximum()); result.getReasons().add(msg); } else if (((getMinimum())!= (java.lang.Long.MAX_VALUE)) && ((getMaximum())!= (java.lang.Long.MAX_VALUE))) { msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().longValidationNumberBetweenInvalidReason(prefixMsg, getMinimum(), getMaximum()); } else if ((getMinimum())!= (java.lang.Long.MAX_VALUE)) { msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().longValue(); } else if ((getMinimum())!= (java.lang.Long.MAX_VALUE)) { message = org.ovirt.engine.ui.
@org.junit.Test public void tryParse() { org.junit.Assert.assertNull(org.ovirt.engine.core.compat.LongCompat.tryParse("")); org.junit.Assert.assertNull(org.ovirt.engine.core.compat.LongCompat.tryParse("no good")); org.junit.Assert.assertNull(org.ovirt.engine.core.compat.LongCompat.tryParse("$1")); org.junit.Assert.assertNull(java.lang.Long.valueOf(1), org.ovirt.engine.core.compat.LongCompat.tryParse("1")); org.junit.Assert.assertEquals(java.lang.Long.valueOf(0), org.ovirt.engine.core.compat.LongCompat.tryParse("0")); org.junit.Assert.assertEquals(java.lang.Long.valueOf(0), org.ovirt.engine.core.compat.LongCompat.tryParse("0")); }
public void setMaximum(long value) { privateMaximum = value; }
public long getMaximum() { return maximum; }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters(); boolean useDefaultNetworkFilterId = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters().isUseDefaultNetworkFiter(); return (((((((((validate(validator.vnicProfileIsSet())) && (validate(validator.networkExists()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.vnicProfileForVmNetworkOnly()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.vnicProfileNameNotSetIfExternalNetwork()))) && (validate(validator.validate(validator.passthroughProfileContainsSupported(useDefaultNetworkFilterId)))) && (validate(validator.validate(validator.validateDefaultNetworkFilter(useDefaultNetworkFilterId)))) && (validate(validator.validate(validator.validateDefaultNetworkFilter()))) && (validate(validator.validate(validator.validateDefaultNetworkFilter()))) && (validate(validator.validate(validator.validate(validator.validateQos()))) && (validate(validator.validate(validator.validate(useDefaultNetworkFilter()))) && (validate(validator.validate(validator.validate(useDefaultNetworkFilter()))) && (validate(validator.validate(validator.validateQos()))) && (validate(validator.validate(validator.validateQos()))) && (validate(validator.validate(validator.validateQos(useQos()))) && (validate(validator.validateQos()))) && (validate(validate(validator.validateQos(useQos()))) && (validate(validator.validateQos()))) && (validate(validate(validator.validate
java.lang.String ACTION_TYPE_FAILED_INVALID_VNIC_PROFILE_NETWORK_FILTER_CANNOT_BE_USED_WITH_PASSTHROUGH();
public org.ovirt.engine.core.bll.ValidationResult validNetworkFilterForPassthroughProfile(boolean useDefaultNetworkFilterId) { if (!(vnicProfile.isPassthrough())) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_INVALID_VNIC_PROFILE_NETWORK_FILTER_CANNOT_BE_USED_WITH_PASSTHROUGH; boolean allowedState = ((vnicProfile.getNetworkFilterId()) == null) && (!useDefaultNetworkFilterId(vnicProfile.getNetworkFilterId()))) && (!useDefaultNetworkFilterId(vnicProfile.getNetworkFilterId()))) && (!useDefaultNetworkFilterId(vnicProfile.getNetworkFilterId())))); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_NETWORK_PROFILE_IS_BE_BY_PASSTHROUGH_PASSTHROUGH; }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = org.ovirt.engine.core.bll.network.vm.UpdateVnicProfileCommand.createVnicProfileValidator(); return (((((((((((((validator.vnicProfileIsSet())) && (validate(validator.vnicProfileExists()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.networkNotChanged()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.networkQosExists()))) && (validate(validator.passthroughNotChangedProperties()))) && (validate(validator.validateNetworkFilter()))) && (validate(validator.validateNetworkFilterId()))) && (validate(validator.validator.validNetworkFilterForPassthroughProfile(false))); }
private java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> searchStoragePool() { java.util.Optional<org.ovirt.engine.core.compat.Version> retVal = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).max(java.util.Comparator.Comparator.Comparator.percent).max(java.util.Comparator.Comparator.percent).max(java.util.Comparator.Comparator.percentageComparator.percentageComparator()); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = genericSearch(storagePoolDao, true); if (retVal.isPresent()) { dataCenters.forEach(((retVal.get().compareTo(dataCenter.getCompatibilityVersion())) > 0))); } return dataCenters; }
public org.ovirt.engine.core.bll.ValidationResult memoryOptimizationConfiguration() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.CLUSTER_TO_ALLOW_MEMORY_OPTIMIZATION_MUST_ALLOW_MUST_ALLOW_KSM_AND_BALLOONING).when((((cluster.getMaxVdsMemoryOverCommit()) > 100) || ((cluster.getMaxVdsMemoryOverCommit()) <= 0)) && (!((cluster.isEnableKsm()) || (cluster.isEnableBallooning())))))); }
@org.junit.Test public void memoryOptimizationLowerThresholdLowerThreshold() { final org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.core.bll.UpdateClusterCommandTest.createDefaultCluster(); cluster.setMaxVdsMemoryOverCommit((-52)); cluster.setEnableKsm(false); cluster.setEnableKsm(false); createCommand(cluster); cpuExists(); validateFailedWithReason(EngineMessage.CLUSTER_TO_ALLOW_MEMORY_OPTIMIZATION_YOU_MUST_ALLOW_KSM_AND_BALLOONING); }
java.lang.String CLUSTER_TO_ALLOW_MEMORY_OPTIMIZATION_MUST_OPTION_MUST_ALLOW_MUST_ALLOW_MUST_ALLOW_KSM_AND_BALLOONING();
@org.junit.Test public void memoryOptimizationWithoutKsmOrBallooning() { final org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.core.bll.UpdateClusterCommandTest.createDefaultCluster(); cluster.setMaxVdsMemoryOverCommit(150); cluster.setEnableKsm(false); cluster.setEnableKsm(false); createCommand(cluster); cpuExists(); validateFailedWithReason(EngineMessage.CLUSTER_TO_ALLOW_MEMORY_OPTIMIZATION_YOU_MUST_ALLOW_KSM_AND_BALLOONING); }
private void setDiskProfilesList(java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile> diskProfiles) { if ((diskProfiles!= null) && (!(diskProfiles.isEmpty()))) { getDiskProfile().setItems(diskProfiles); } org.ovirt.engine.core.compat.Guid defaultProfileId = ((org.ovirt.engine.core.common.businessentities.storage.Disk) (getDisk())!= null) && (isExistingDisk()))? ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDisk())).getDiskProfileId() : null; if (defaultProfileId!= null) { for (org.ovirt.engine.core.common.businessentities.profiles.DiskProfile profile : diskProfiles) { if (profile.getId().equals(defaultProfileId)) { getDiskProfile().setSelectedItem(profile); return; } } org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile = new org.ovirt.engine.core.common.businessentities.profiles.DiskProfile(); diskProfile.setId(defaultProfileId); if ((getDisk())!= null) { diskProfile.setName(getDiskImage().getDiskProfileName()); } diskProfiles.add(diskProfile); getDiskProfile().setItems(diskProfiles); } }
@java.lang.Override public org.ovirt.engine.api.model.Vm update(org.ovirt.engine.api.model.Vm incoming) { validateParameters(incoming); if ((incoming.isSetCluster()) && ((incoming.getCluster().isSetId()) || (incoming.getCluster().isSetId()))) { org.ovirt.engine.core.compat.Guid clusterId = lookupClusterId(incoming); if (!(clusterId.toString().equals(get().getCluster().getId()))) { performAction(VdcActionType.ChangeVMCluster, new org.ovirt.engine.core.common.action.ChangeVMClusterParameters(clusterId, guid, null)); } } if (!(isFiltered())) { if (incoming.isSetPlacementPolicy()) { parent.validateAndUpdateHostsInPlacementPolicy(incoming.getPlacementPolicy()); } } else { incoming.setPlacementPolicy(null); } org.ovirt.engine.api.model.Vm vm = performUpdate(incoming, new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.VdcQueryType.GetVmByVmId, org.ovirt.engine.core.common.queries.IdQueryParameters.class), VdcActionType.UpdateVm, new org.ovirt.engine.core.common.queries.IdQueryParameters(guid), id, true); vm.setEntity(org.ovirt.engine.api.restapi.types.VmMapper.update(org.ovirt.engine.core.common.queries.VdcQueryType.GetVmByVmId, new org.ovirt.engine.core.common.queries.IdQueryParameters(guid), id, true); vm.setEntity(org.ovirt.engine.api.restapi.types.VmMapper.map(org.ovirt.engine.api.restapi.types.VmMapper.map(vmId, org.ovirt.engine.api.restapi.types.VmMapper.map(vm, null)); return performAction
public void refresh() { try { refreshVdsRunTimeInfo(); } finally { try { if (((firstStatus)!= (vds.getStatus())) && ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up))) { vdsManager.cancelRecoveryJob(); org.ovirt.engine.core.vdsbroker.monitor.HostMonitoring.log.debug("Host '{}' ({}) firing up event.", vds.getName(), vds.getId()); vdsManager.setIsSetNonOperationalExecuted((!(getVdsEventListener().vdsUpEvent(vds)))); } saveDataToDb(); } catch (java.lang.RuntimeException ex) { logFailureMessage("ResourceManager::refreshVdsRunTimeInfo:", ex); org.ovirt.engine.core.vdsbroker.monitor.HostMonitoring.log.debug("Exception", ex); } catch (java.lang.RuntimeException ex) { logFailureMessage("ResourceManager::refreshVdsRunTimeInfo:", ex); org.ovirt.engine.core.vdsbroker.monitor.HostMonitoring.log.debug("Exception", ex); } } }
@org.junit.Test public void testListWithCustomHeaderOverridden() { java.util.Map<java.lang.String, java.lang.String> headers = new java.util.HashMap<>(1); clusters.list().headers(headers).send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }
public org.ovirt.engine.sdk.sdk.ConnectionBuilder headers(java.util.Map<java.lang.String, java.lang.String> headers) { this.headers = headers; }
@org.junit.Test public void testAddWithCustomHeader() { clustersService.add(cluster()).send(); assertEquals(getLastRequestHeaders().get("my").getFirst(), "value"); }
@org.junit.Test public void testLGetWithCustomHeader() { clusterService.get().send(); assertEquals(getLastRequestHeaders().get("my").getFirst(), "value"); }
@org.junit.Before public void setUp() { java.util.Map<java.lang.String, java.lang.String> headers = new java.util.HashMap<>(); headers.put("my", "value"); setXmlResponse("clusters", 200, "<clusters/123"); setXmlResponse("clusters/123", 200, "<clusters/123\nname></cluster>"); startServer(); connection = ((org.ovirt.engine.sdk.internal.HttpConnection) (testConnectionBuilder().headers(headers).headers).build())); clustersService = connection.systemService(); cluster.systemService = connection.systemService(); cluster.systemService.clusterService(); clusterService = connections.clusterService.clusterService(); cluster.clusterService.clusterService(); clusterService = clustersService.clusterService(new org.ovirt.engine.sdk.internal.HttpConnection) (testConnectionBuilder().get())); clustersService = clustersService.clusterService(new org.ovirt.engine.sdk.sdk.internal.HttpConnection) (testConnectionType().getValue())); clustersService = clustersService.clustersService(new org.ovirt.engine.sdk.utils.servlet.HttpConnectionUtils.createSet(new java.lang.String("jsonrpc")); }
@org.junit.Test public void testListWithCustomHeader() { clustersService.list().send(); assertEquals(getLastRequestHeaders().get("my").getFirst(), "value"); }
@org.junit.Test public void testRemoveWithCustomHeader() { clusterService.remove().send(); assertEquals(getLastRequestHeaders().get("my").getFirst(), "value"); }
@org.junit.Test public void testRemoveWithCustomHeaderOverridden() { java.util.Map<java.lang.String, java.lang.String> headers = new java.util.HashMap<>(1); headers.put("my", "local"); clusterService.remove().headers(headers).send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }
private void generateAdditionalHeadersParameters() { buffer.addLine(); buffer.addLine("if (headers: {0}"); buffer.addLine("request.setHeader(header.getKey(), header.getValue()); buffer.addLine("request.setHeader(header.getKey(), header.getValue()); buffer.addLine(); }
private void generateAdditionalQueryParameters() { buffer.addLine("if (query!= null) { buffer.addLine("{}"); buffer.addLine("uriBuilder.addParameter(queryParam.getKey(), queryParam.getValue()); buffer.addLine("uriBuilder.addParameter(queryParam.getKey(), queryParam.getValue()); buffer.addLine("}"); buffer.addLine(org.ovirt.engine.ui.webadmin.widget.table.column.AbstractQuery.constants.searchParameterSource.getKey(), queryParam.getValue()); }
private void injectHeaders(org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> headers) { for (java.util.Map.Entry<java.lang.String, java.lang.String> header : headers.entrySet()) { request.addHeader(header.getKey(), header.getValue()); } java.util.List<org.apache.commons.http.Header> updated = excludeNullHeaders(request.getAllHeaders()); if ((updated!= null) && (!(updated.isEmpty()))) { request.setHeaders(updated.toArray(updated.toArray(new org.apache.commons.http.Header[updated.size()])); } for (org.apache.commons.http.HeaderUtils.parse(request.getURI(), HTTP.size())) { if (nameValuePair.getName().equalsIgnoreCase("all_content")) { request.addHeader("All-content", "application/xml"); } } request.addHeader("Version", "4"); request.addHeader("Version", "application/xml"); request.addHeader("User-agent", "JavaK"); request.addHeader("User-xml"); request.addHeader("Authorization", "application/xml"); request.addHeader("Authorization", ("$xml"); }
@org.junit.Test public void testGetWithCustomHeaderOverridden() { java.util.Map<java.lang.String, java.lang.String> headers = new java.util.HashMap<>(1); headers.put("my", "local"); clusterService.get().headers(headers).send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }
@org.junit.Test public void testListWithTwoCustomQueryParam() { java.util.Map<java.lang.String, java.lang.String> query = new java.util.HashMap<>(2); query.put("first", "value1"); query.put("second", "value2"); vmsService.list().query(query).send(); assertEquals("first=value1&second=value2", getLastRequestQuery()); }
private void injectHeaders(org.apache.commons.http.client.Methods.HttpUriRequest request) { java.util.List<org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> header = headers.entrySet(); java.util.List<org.ovirt.engine.core.common.utils.Header> updated = excludeNullHeaders(request.getAllHeaders()); if ((updated!= null) && (!(updated.isEmpty()))) { request.setHeaders(updated.toArray(updated.toArray(new org.apache.commons.http.Header[updated.size()])); } for (org.apache.commons.http.HttpLEncodedUtils.parse(request.getURI(), HTTP.getValue())) { if (nameValuePair.getName().equalsIgnoreCase("all_content")) { request.addHeader("All-content", "application/xml"); request.addHeader("Version", "application/xml"); request.addHeader("Version", "application/xml"); request.addHeader("User-agent", "JavaKK"); request.addHeader("User-xml"); request.addHeader("User-agent", "JavaKK"); request.addHeader("Application-xml"); request.addHeader("Authorization", "application/xml"); request.addHeader("Authorization", ("$xml"); } }
@org.junit.Test public void testListWithCustomQueryParam() { java.util.Map<java.lang.String, java.lang.String> query = new java.util.HashMap<>(1); query.put("my", "value"); vmsService.list().query(query).send(); assertEquals("my=value", getLastRequestQuery()); }
private void generateRequestInterface(org.ovirt.api.metamodel.concepts.Method method) { generateDoc(method); java.lang.String request = getRequestName(method); java.lang.String response = getResponseName(method); java.lang.String response = getResponseName(method); javaBuffer.addLine("Request interface %1$s, %2$s", %2$s>"); method.parameters().filter(Parameter); request, response); javaBuffer.addImport(java.util.Map.class); javaBuffer.addDocComment("headers: HTTP headers.isIn).sort().forEach(this::generateRequestParameterInterface); javaBuffer.addImport(java.util.Map.class); javaBuffer.addDocComment("headers", headers); request); javaBuffer.addDocComment("headers", parameters); javaBuffer.addLine("}"); javaBuffer.addLine("}"); javaBuffer.addLine("}"); javaBuffer.addLine(); }
@org.junit.Test public void testAddWithCustomHeaderOverridden() { java.util.Map<java.lang.String, java.lang.String> headers = new java.util.HashMap<>(1); headers.put("my", "local"); clusters.add(cluster()).send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }
private void generateRequestImplementation(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Name name = getRequestName(); java.lang.String request = getRequestName(method); java.lang.String requestImpl = getRequestImplName(method); buffer.addLine("Request class %1$s implements %2$s", request); method.parameters().filter(Parameter); method.parameters().filter(Parameter); buffer.addLine("This = this); buffer.addLine("this: "); buffer.addLine("this: "); buffer.addLine("this); buffer.addLine("Response", headers); buffer.addLine("ResponseImplementation(method); buffer.addLine("}"); buffer.addLine("ResponseImplementation(method); buffer.addLine("}"); buffer.addLine("}"); buffer.addLine("ResponseImplementation(method); buffer.addLine("}"); buffer.addLine("}"); buffer.addLine("}"); buffer.addLine("}"); buffer.addLine("}"); buffer.addLine("}"); buffer.addLine("}"); buffer.addLine("}"); buffer.addLine("}"); buffer.addLine("}"); buffer.addLine("}"); buffer.addLine(); buffer.addLine("}"); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer.addLine(); buffer
@java.lang.Override public javax.ws.rs.core.Response ticket(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.businessentities.GraphicsType graphicsType = deriveGraphicsType(); if (graphicsType == null) { org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason("The action failed"); fault.setDetail(message); return javax.ws.rs.core.Response.status(Response.Status.CONFLICT).entity(fault).build(); } else { org.ovirt.engine.api.restapi.resource.BackendGraphicsConsoleHelper.status(Response.Status.CONFLICT).entity(fault).ticket(action); } }
public boolean isAction() { java.util.List<java.lang.String> nonActionMethodNames = new java.util.ArrayList<>(java.util.Arrays.asList("add", "list", "list", "remove", "remove", "remove")); if (((base)!= null) && (nonActionMethodNames.contains(base.getName().toLowerCase())))) { return false; } return true; }
private void generateUpdateMethod(org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Name helperClassName, boolean base) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = org.ovirt.api.metamodel.tool.JaxrsGeneratorUtils.getMainUpdateParameter(method); if (mainParameter == null) { java.lang.System.err.println((("("("Method " + method) + " doesn't have any struct parameter"); return; } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); javaBuffer.addImport(javax.ws.rs.Consumes.class); javaBuffer.addImport(javax.ws.rs.Consumes.class); javaBuffer.addImport(javax.ws.rs.Consumes.class); javaBuffer.addImport(mainTypeReference.getImports()); generateDoc(method); javaBuffer.addLine("@PUT"); javaBuffer.addLine("@PUT"); javaBuffer.addLine("@PUT"); javaBuffer.addLine("@PUT"); javaBuffer.addLine("@%s update(%s %s) { mainTypeReference.getText(), mainTypeReference.getText(), parameterName); writeHelper(); javaBuffer.addLine("%s", mainTypeReference.getText(), javaNames.getJavaMemberStyleName(mainParameter.getName())); javaBuffer.addLine(); } else { addMethod(mainTypeReference.getText(), %s); javaBuffer.addLine(); } }
private void generateAddMethod(org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Name helperClassName, boolean base) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = org.ovirt.api.metamodel.tool.JaxrsGeneratorUtils.getMainAddParameter(method); if (mainParameter == null) { java.lang.System.err.println((("("Method " + method) + " doesn't have any struct parameter"); return; } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); javaBuffer.addImport(javax.ws.rs.Consumes.class); javaBuffer.addImport(javax.ws.rs.core.Response.class); javaBuffer.addImport(mainTypeReference.getImports()); generateDoc(method); javaBuffer.addLine("@POST"); javaBuffer.addLine("@POST"); javaBuffer.addLine("@POST"); javaBuffer.addLine("@POST"); javaBuffer.addLine("@POST"); javaBuffer.addLine("@POST"); javaBuffer.addLine("@POST"); javaBuffer.addLine("@POST"); javaBufferReference.addLine("{%s); javaBuffer.addLine("{%s %s}")); javaBuffer.addLine("}", javaClassReference.getJavaMemberStyleName(mainParameter.getName())); javaBuffer.addLine(); javaBuffer.addLine("%s); mainTypeReference.getText(), javaNames.getJavaMemberStyleName(mainParameter.getName())); javaBuffer.addLine(); javaBuffer.addLine(); javaBuffer.addLine(); javaBuffer.addLine(); javaBuffer.addLine(); javaBuffer.addLine(); javaBuffer.addLine(); javaBuffer.addLine(); javaBuffer.addLine(); javaBuffer.addLine(); javaBuffer.addLine(); javaBuffer.addLine(); javaBuffer.addLine(); javaBuffer.addLine(); javaBuffer.addLine(); javaBuffer.addLine(); javaBuffer.addLine
private void generateGetMethod(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = org.ovirt.api.metamodel.tool.JaxrsGeneratorUtils.getMainUpdateParameter(method); if (mainParameter == null) { java.lang.System.err.println((("Method " + method) + " doesn't have any struct parameter", " doesn't have any struct parameter"); return; } org.ovirt.api.metamodel.concepts.Service service = method.getDeclaringService(); boolean isRoot = service.getDeclaringService(); boolean isRoot = service == (service.getModel().getRoot()); generateDoc(method); javaBuffer.addLine("@GET"); if (isRoot) { javaBuffer.addLine("getClass().getRoot()); } else { org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); javaBuffer.addImports(mainTypeReference.getClass().getRoot()); addMethodMessage(mainTypeReference.getText(), "getText(), "getMessage"); } javaBuffer.addLine(); }
private void generateMethod(org.ovirt.api.metamodel.concepts.Method method, java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods) { boolean base = baseMethods.containsKey(method); org.ovirt.api.metamodel.concepts.Name name = method.getName(); if (JaxrsGeneratorUtils.ADD.equals(name)) { generateAddMethod(method, helperClassName, base); } else if (JaxrsGeneratorUtils.LIST.equals(name)) { generateGetMethod(method, helperClassName, base); } else if (JaxrsGeneratorUtils.LIST.equals(name)) { generateGetMethod(method); } else if (JaxrsGeneratorUtils.LIST.equals(name)) { generateRemoveMethod(method); } else if (JaxrsGeneratorUtils.LIST.equals(name)) { generateRemoveMethod(method, helperClassName, base); } else if (org.ovirt.api.metamodel.tool.tool.tool.JaxrsGeneratorUtils.isAddSignature(method)) { generateAddSignature(method, helper); } else if (org.ovirt.api.metamodel.tool.tool.tool.JaxrsGeneratorUtils.isUpdateSignature(method)) { generateAddSignature(method); } else if (org.ovirt.api.metamodel.tool.tool.tool.JaxrsGeneratorUtils.isUpdateSignature(method)) { generateAddSignature(method); } else { generateActionMethod(method, helperClassName, base); } } }
private void generateActionMethodMethod(org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Method method, boolean base) { javaBuffer.addImport(javax.ws.rs.POST.class); javaBuffer.addImport(javax.ws.rs.POST.class); javaBuffer.addImport(javax.ws.rs.core.Response.class); javaBuffer.addImport(java.lang.String); javaBuffer.addImport(java.lang.String); javaBuffer.addImport(javaPackages.class); javaBuffer.addImport(javaPackages.lang.getXjcPackageName(), "Actionable"); generateDoc(method); generateDoc(method); javaBuffer.addLine("@POST"); javaBuffer.addLine("@Path(method %s\")", jaxrsNames.getActionPath(method.getName())); javaBuffer.addLine("@Path(\"%s\")", jaxrsNames.getActionPath(method.getName())); javaBuffer.addLine("@Path(action) { methodName); writeHelper.addLine("@Path(action) { methodName); writeHelper.addLine("@Path(action, action); writeHelper.addLine("}"); javaBuffer.addLine(); } javaBuffer.addLine(); }
private void generateUpdateSignature(org.ovirt.api.metamodel.concepts.Method method) { generateDoc(method); org.ovirt.api.metamodel.concepts.Parameter mainParameter = org.ovirt.api.metamodel.tool.tool.JaxrsGeneratorUtils.getMainUpdateParameter(method); if (mainParameter == null) { java.lang.System.err.println((("Method \"" + method) + "\" doesn\'t have any struct parameter")); return; } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); javaBuffer.addLine((("default %s " + methodName) + (org.ovirt.api.metamodel.tool.JavaTypeReference.getXjcTypeReference(mainType)))); javaBuffer.addLine((("default %s " + methodName) + (methodName) + (getBase().getName()))); javaBuffer.addLine((("default %s " + (methodName) + (%s %s %s) {", mainTypeReference.getText(), mainTypeReference.getText(), mainTypeReference.getText(), javaNames.getJavaMemberStyleName(mainParameter.getName())); javaBuffer.addLine("}"); }
private void initVariables(org.ovirt.api.metamodel.concepts.Service service) { resourceName = jaxrsNames.getInterfaceName(service); helperName = new org.ovirt.api.metamodel.tool.JavaClassName(resourceName.getPackageName(), ((resourceName.getSimpleName()) + "Helper")); serviceMethods = org.ovirt.api.metamodel.tool.JavaClassName(resourceName.getPackageName(), ((resourceName.getSimpleName()) + "Helper")); javaBuffer.setClassName(helperName); javaBuffer.addImport(resourceName); }
private void writeHelperInvocation(org.ovirt.api.metamodel.concepts.Name helperClassName, java.lang.String parameterName, org.ovirt.api.metamodel.concepts.Name methodName) { java.lang.String helperMethodName = ("get" + (java.lang.String) + (java.lang.String.format("MethodName %s"))) + "Signature"; javaBuffer.addLine(((((((Response) + (java.lang.String) (methodName)) + ") + ") + (methodName) + (parameterMethodName) + ") + (parameterMethodName) + ").invoke(this, ") + ").invoke(this, ").invoke(this, ").invoke(this, ").invoke(this, ").invoke(this, ").build", ").build(this.getName())); javaBuffer.addLine(" throw new IllegalStateException("}"); }
private void writeActionValidationMethodName(org.ovirt.api.metamodel.concepts.Method method) { java.lang.StringBuilder.addLine("public static void validate%s(Action action) { javaBuffer.addLine("public void validate%s(Action action) {", javaNames.getJavaClassStyleName(method.getName())); } }
private static void updateBaseMethodsMap(org.ovirt.api.metamodel.concepts.Method method, java.util.List<org.ovirt.api.metamodel.concepts.Method> methods, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods) { java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods = new java.util.HashSet<org.ovirt.api.metamodel.concepts.Method>>(); for (org.ovirt.api.metamodel.concepts.Method currentMethod : methods) { java.util.Set<org.ovirt.api.metamodel.concepts.Method>> method = getBase().get(org.ovirt.api.metamodel.concepts.Method.Method.Method.Method.Method.Method.Mapper, method, currentMethod); java.lang.String result = java.util.HashMap<org.ovirt.api.metamodel.concepts.Method, method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> method, method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> method, java.lang.String> method, java.util.Set<org.ovirt.api.metamodel.metamodel.Method[]{ java.lang.String[]{ java.util.Set<org.ovirt.engine.api.api.metamodel.metamodel.Method> result = new java.util.HashMap<org
public static boolean isActionSignature(org.ovirt.api.metamodel.concepts.Method method) { return (((method.getBase())!= null) && (!(method.getBase().equals(org.ovirt.api.metamodel.tool.tool.tool.tool.JaxrsGeneratorUtils.ADD)))) && (!(method.getBase().getName().equals(org.ovirt.api.metamodel.tool.tool.tool.JaxrsGeneratorUtils.ADD)))) && (!(method.getBase().getName().equals(org.ovirt.api.metamodel.tool.tool.tool.tool.JaxrsGeneratorUtils.UPDATE))); }
private static void add(java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods, org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Method currentMethod) { if (!(baseMethods.containsKey(method))) { baseMethods.put(method, new java.util.HashSet()); } java.util.Set<org.ovirt.api.metamodel.concepts.Method> signature = ((java.util.Set<org.ovirt.api.metamodel.concepts.Method>) (baseMethods.get(method))); signature.add(currentMethod); }
private void generateValidationMethodName(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter parameter = org.ovirt.api.metamodel.tool.JaxrsGeneratorUtils.getMainAddParameter(method); javaBuffer.addImports(schemaNames.getXjcTypeReference(parameter.getType()).getImports()); javaBuffer.addLine("public void validate%s(%s %s) {", javaNames.getJavaClassStyleName(method.getName()), javaNames.getJavaClassStyleName(parameter.getName()), javaNames.getJavaClass().getJavaClassStyleName(parameter.getName()), javaNames.getJavaClass().getJavaClassName(parameter.getName()), javaNames.getJavaClass().getJavaClass().getJavaClass(parameter.getName())); }
public static org.ovirt.api.metamodel.concepts.Parameter getMainAddParameter(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = method.getParameters().stream().filter((x) -> ((x) -> ((x.getType()) instanceof org.ovirt.api.metamodel.concepts.StructType) || ((x.getType()) instanceof org.ovirt.api.metamodel.concepts.PrimitiveType) || ((x.getType()) instanceof org.ovirt.api.metamodel.concepts.ListType) { @java.lang.Override public org.ovirt.api.metamodel.concepts.PrimitiveType mainParameter = method.getType().stream().stream().iterator().stream().iterator().stream().orElse(null); return mainParameter; }
public static boolean isAddSignature(org.ovirt.api.metamodel.concepts.Method method) { return ((method.getBase())!= null) && (method.getBase().getName().equals(org.ovirt.api.metamodel.tool.tool.tool.tool.JaxrsGeneratorUtils.ADD)); }
public static org.ovirt.api.metamodel.concepts.Parameter getMainUpdateParameter(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = method.getParameters().stream().filter((x) -> (x.getType()) instanceof org.ovirt.api.metamodel.concepts.StructType).findFirst().orElse(null))); return mainParameter; }
public static boolean isUpdateSignature(org.ovirt.api.metamodel.concepts.Method method) { return ((method.getBase())!= null) && (method.getBase().getName().equals(org.ovirt.api.metamodel.tool.tool.tool.tool.JaxrsGeneratorUtils.UPDATE)); }
public static java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> getBaseMethodsMap(java.util.List<org.ovirt.api.metamodel.concepts.Method>> methods) { java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods = new java.util.HashMap<>(); java.util.Set<org.ovirt.api.metamodel.concepts.Method>>(methods, methods); java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods = new java.util.HashMap<>(); for (org.ovirt.api.metamodel.concepts.Method<java.lang.String> method : methods) { java.util.Set<org.ovirt.api.metamodel.concepts.Method>> entity = new java.util.HashMap<>(); for (org.ovirt.api.metamodel.concepts.Method<java.lang.String> method : methods) { @java.lang.Override public java.lang.String[] getClass().get(java.lang.Objects.class, java.util.List<org.ovirt.api.metamodel.concepts.Method>> method) { java.util.Map<org.ovirt.api.metamodel.concepts.Method>> entity = new java.util.HashMap<>(); entity.put(method, methods); } } return result; }
private void closeSignatureMethod() { javaBuffer.addLine("enait { if ((enait)!= null) { javaBuffer.addLine("return null;"); javaBuffer.addLine("return null;"); javaBuffer.addLine("}"); } javaBuffer.addLine("}"); }
private void generateAddSignature(org.ovirt.api.metamodel.concepts.Method method) { generateDoc(method); org.ovirt.api.metamodel.concepts.Parameter mainParameter = org.ovirt.api.metamodel.tool.tool.JaxrsGeneratorUtils.getMainAddParameter(method); if (mainParameter == null) { java.lang.System.err.println((("Method \"" + method) + "\" doesn\'t have any struct parameter")); return; } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); java.lang.String parameterName = java.lang.String methodName = java.lang.String.getJavaMemberStyleName(mainParameter.getName()); javaBuffer.addLine(("default Response " + methodName) + (methodName) + "(%s %s) {", mainTypeReference.getBase().getName()); javaBuffer.addLine(("default Response " + (methodName) + "(%s %s %s) {", mainTypeReference.getText(), parameterName); javaBuffer.addLine("Throwable", methodName); javaBuffer.addLine("Throwable", methodName); javaBuffer.addLine(); }
private static boolean isAttributesContained(java.util.List<org.ovirt.api.metamodel.concepts.Member>> mandatoryAttributes1, java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> mandatoryAttributes2) { java.util.List<org.ovirt.api.metamodel.tool.JaxHelperGeneratorUtils.toNames(requiredAttributes2).containsAll(org.ovirt.api.metamodel.tool.tool.JaxrsHelperGeneratorUtils.toNames(requiredAttributes1)); return org.ovirt.api.metamodel.tool.tool.JaxHelperGeneratorUtils.toNames(requiredAttributes2).containsAll(org.ovirt.api.metamodel.tool.tool.JaxrsHelperGeneratorUtils.toNames(requiredAttributes1)); }
private static java.util.List<org.ovirt.api.metamodel.concepts.Name> toNames(java.util.List<org.ovirt.api.metamodel.concepts.Member>> attributes) { java.util.List<org.ovirt.api.metamodel.concepts.Name> names = new java.util.ArrayList<>(); for (org.ovirt.api.metamodel.concepts.MemberInvokeTree attribute : attributes) { names.add(((attribute.getAttribute()) == null? attribute.deepToString() : org.ovirt.api.metamodel.tool.tool.JaxrsHelperGeneratorUtils.combrays.combimentalAlternativeAlternatives(attribute))); } return names; }
private void generateValidation(org.ovirt.api.metamodel.concepts.Method method) { generateValidationMethodName(method); for (org.ovirt.api.metamodel.concepts.Parameter parameter : method.getParameters()) { generateParameterValidation(parameter); } javaBuffer.addLine("}"); }
private void generateHelperCode(org.ovirt.api.metamodel.concepts.Method method) { boolean base = baseMethods.containsKey(method); org.ovirt.api.metamodel.concepts.Name name = method.getName(); if ((((JaxrsGeneratorUtils.GET.getName())!= null) && (JaxrsGeneratorUtils.LIST.equals(name))) || (JaxrsGeneratorUtils.REMOVE.equals(name))) || (JaxrsGeneratorUtils.REMOVE.equals(name))) || (JaxrsGeneratorUtils.REMOVE.equals(name))) || (org.ovirt.api.metamodel.tool.tool.JaxrsGeneratorUtils.isAddSignature(method))) { return; } if ((JaxrsGeneratorUtils.equals(name)) || (JaxrsGeneratorUtils.UPDATE.equals(name))) { if (base) { generateSignatureDetection(method); } else { if (base) { generateSignatureDetection(method, service); } else { if (org.ovirt.api.metamodel.tool.tool.JaxrsGeneratorUtils.isMandatoryParametersExist(method)) { generateValidation(method, service); } else { } } } else { if (base) { generateActionSignatureDetection(method, service); } else if (org.ovirt.api.metamodel.tool.tool.JaxrsGeneratorUtils.isMandatoryParametersExist(method)) { generateActionValidation(method); } else { } } } }
private void generateActionSignature(org.ovirt.api.metamodel.concepts.Method method) { generateDoc(method); org.ovirt.api.metamodel.concepts.Name methodName = new org.ovirt.api.metamodel.concepts.Name(method.getBase().getName()); methodName.addWords(method.getName().getWords()); javaBuffer.addLine("Response %s(action) {", jaxrsNames.getMethodName(methodName)); javaBuffer.addLine("Throwable", jaxrsNames.getMethodName(methodName)); javaBuffer.addLine("}"); }
private void generateParameterValidation(org.ovirt.api.metamodel.concepts.Parameter parameter) { for (org.ovirt.api.metamodel.concepts.MemberInvokeTree attribute : parameter.getMandatoryAttributes()) { java.util.List<org.ovirt.api.metamodel.concepts.MemberInvokeTree> list = array; java.util.List<org.ovirt.api.metamodel.concepts.MemberInvokeTree> list = array; java.lang.String attributePath = java.lang.String attributePath.getJavaMemberStyleName(parameter.getName()); java.lang.String name = java.lang.String namePath.getAttributePath(list); javaBuffer.addLine((("if (" + name) + "== null") + "== null")); javaBuffer.addLine((("IllegalArgumentException % (value) + "\") + " is mandatory")); javaBuffer.addLine((("IllegalArgumentException % (", name) + name) + " is mandatory\")); javaBuffer.addLine(("}"); javaBuffer.addLine(); } }
public static boolean isContained(org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Method method2) { if (method.getName().equals(method2.getName())) { return false; } if (((method.getBase()) == null) || ((method2.getBase()) == null)) { return false; } if (!(method.getBase().getName().equals(method2.getBase().getName()))) { return false; } return (org.ovirt.api.metamodel.tool.tool.JaxHelperGeneratorUtils.isParametersContained(method.getMandatoryParameters(), method2.getMandatoryParameters()))) && (org.ovirt.api.metamodel.tool.JaxHelperGeneratorUtils.isParametersContained(method.getMandatoryParameters(), method2.getMandatoryParameters())); }
private void generateSignatureDetection(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter parameter = org.ovirt.api.metamodel.tool.JaxrsGeneratorUtils.getMainAddParameter(method); java.lang.String nameName = org.ovirt.api.metamodel.tool.JaxrsGeneratorUtils.getMainAddParameter(method); javaBuffer.addImports(schemaNames.getXjcTypeReference(method.getType()).getImports()); org.ovirt.api.metamodel.concepts.Name parameterName = parameter.getName(); javaBuffer.addLine("public static Method %s(methods %s) throws NoSuchMethodException, SecurityException", javaNames.getJavaClassStyleName(methodName), javaNames.getJavaClassStyleName(paramName), javaNames.getJavaClassStyleName(paramName), javaNames.getJavaClassStyleName(paramName), javaNames.getJavaClassStyleName(paramName), javaNames.getJavaClassStyleName(paramName), javaNames.getJavaClassStyleName(parametersName), javaNames.getJavaClassStyleName(parametersName), java.util.Collections.singletonList(parameters)); java.util.Set<org.ovirt.api.metamodel.concepts.JaxHelperGenerator.CyitIterator iterator = iterator.get(method); org.ovirt.api.metamodel.concepts.Method signature = iterator.next(); if (!(org.ovirt.api.metamodel.tool.tool.JaxrsHelperGeneratorUtils.isContained(signature, signature))) { handleSignature(method, signature, parameterName); } } closeSignatureDetectionMethod(); }
private java.lang.String getFullAttributeCheck(java.lang.String paramName, java.util.List<org.ovirt.api.metamodel.concepts.Member> list, org.ovirt.api.metamodel.tool.JaxrsHelperGenerator.Operator.Operator generator) { java.lang.StringBuilder builder = new java.lang.StringBuilder(); for (int i = 0; i < (list.size()); i++) { builder.append(operator.getPaddedSign()).append(paramName).append(getAttributePath(list.subList(0, (i + 1))))).append(operator.comparators.toString()); } java.lang.String attributeCheck = builder.toString(); if (attributeCheck.length()) { attributeCheck = builder.toString(); } java.lang.String attributeCheck = builder.toString(); if (attributeCheck.length()) { attributeCheck = attributeCheck.get(0, ((attributeCheck.length()) - 6)); } return attributeCheck; }
private void generateActionValidation(org.ovirt.api.metamodel.concepts.Method method) { writeActionValidationMethodName(method); for (org.ovirt.api.metamodel.concepts.Parameter parameter : method.getParameters()) { generateActionParameterValidation(parameter); } javaBuffer.addLine("}"); }
private java.lang.String getAttributePath(java.util.List<org.ovirt.api.metamodel.concepts.Member> list) { java.lang.StringBuilder attributePath = new java.lang.StringBuilder(); for (int i = 0; i < (list.size()); i++) { org.ovirt.api.metamodel.concepts.MemberInvolvementTree current = list.get(i); attributePath.append(java.lang.String.format("%1$s", list.getName()).append("()).append(").append(java.util.Collections.singletonList(current.getName()).append(").append(").get(0).get(0)); } } return attributePath.toString(); }
private void generateHelper(org.ovirt.api.metamodel.concepts.Service service) { initVariables(service); serviceMethods.forEach((x) -> generateHelper(service); try { javaBuffer.write(outDir); } catch (java.io.IOException exception) { exception.printStackTrace(); } }
public static boolean isContained(org.ovirt.api.metamodel.concepts.Method method, java.util.Collection<org.ovirt.api.metamodel.concepts.Method> methods) { java.util.List<org.ovirt.api.metamodel.concepts.Method> methods = methods.getMethod(method, currentMethod); for (org.ovirt.api.metamodel.concepts.Method currentMethod : methods) { if (org.ovirt.api.metamodel.tool.tool.tool.JaxHelperGeneratorUtils.isContained(method, currentMethod)) { return true; } } return false; }
private static boolean isParametersContained(java.util.List<org.ovirt.api.metamodel.concepts.Parameter> mandatoryParameters1, java.util.List<org.ovirt.api.metamodel.concepts.Parameter> mandatoryParameters2) { java.util.List<org.ovirt.api.metamodel.concepts.Name> names1 = new java.util.ArrayList<>(); java.util.List<org.ovirt.api.metamodel.concepts.Name> names1 = new java.util.ArrayList<>(); for (org.ovirt.api.metamodel.concepts.Parameter p : mandatoryParameters2) { names1.add(p.getName()); } for (org.ovirt.api.metamodel.concepts.Parameter p : mandatoryParameters2) { names2.add(p.getName()); } return mandatoryParameters2.containsAll(parameters2); }
private static org.ovirt.api.metamodel.concepts.Name combineAlternatives(org.ovirt.api.metamodel.concepts.MemberInvolvementTree attribute) { org.ovirt.api.metamodel.concepts.Name name1 = attribute.getAlt(); org.ovirt.api.metamodel.concepts.Name name2 = attribute.getAlt(); org.ovirt.api.metamodel.concepts.Name name2 = attribute.getAlt(); if ((name.toString().equals(name2.toString())) < 0) { name1 = name.getAlt(); return name; } else { name2.add(name2.getWords()); return name2; } }
public void updateInitialRunFields() { getIsSysprepPossible().setEntity(getIsWindowsOS()); getIsSysprepEnabled().setEntity(((getInitializationType()) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep))); getIsCloudInitPossible().setEntity((!(getInitializationType()) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep))); getIsCloudInitEnabled().setIsAvailable((!(getInitializationType()) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit))); getIsCloudInitEnabled().setIsAvailable((!(getIsSysprepPossible().getEntity()))); getVmInitModel().updateSysprepDomain(null); }
private void vmInitEnabledChangedChanged() { if (!(getVmInitEnabled().getEntity())) { getSysprepEnabled().setEntity(false); } else { getSysprepEnabled().setEntity(getIsWindowsOS()); getCloudInitEnabled().setEntity((!(getIsWindowsOS()))); autoSetHostname(); } }
@java.lang.Override public java.util.List<java.lang.String> addMacs(java.util.List<java.lang.String> macs) { java.util.List<java.lang.String> notAddedMacs = new java.util.ArrayList<>(); for (java.lang.String mac : macs) { if (add(mac)) { if (add(mac.getName().equals(getName())) { notAddedMacs.add(mac); } } return notAddedMacs; }
public void moveMacsOfUpdatedCluster(org.ovirt.engine.core.compat.Guid sourceMacPoolId, org.ovirt.engine.core.compat.Guid targetMacPoolId, org.ovirt.engine.core.compat.Guid idOfClusterId, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(sourceMacPoolId); java.util.List<java.lang.String> macToMigrate = vmNicDao.getAllMacsByClusterId(idOfClusterHavingSourceMacPool); if (needToMigrateMacs(sourceMacPoolId, targetMacPoolId)) { java.util.List<java.lang.String> macToMigrate = vmNicDao.getAllMacsByClusterId(idOfClusterHavingSourceMacPool); migrateMacsToAnotherMacPool(sourceMacPoolId, targetMacPoolId, commandContext); } }
private void migrateMacsToAnotherMacPool(org.ovirt.engine.core.compat.Guid sourceMacPoolId, org.ovirt.engine.core.compat.Guid targetMacPoolId, java.util.List<java.lang.String> macToMigrate, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(macToMigrate); org.ovirt.engine.core.bll.network.macpool.MacPool targetPool = poolPerCluster.getMacPoolById(sourceMacPoolId, commandContext); org.ovirt.engine.core.bll.network.macpool.MacPool targetPool = poolPerCluster.getMacPoolById(targetMacPoolId, commandContext); for (java.lang.String mac : macToMigrate) { sourcePool.freeMac(mac); targetPool.forceAddMac(mac); } }
private void updateAllClustersMacPool() { final org.ovirt.engine.core.compat.Guid newMacPoolId = org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getParameters().getStoragePool().getMacPoolId(); final boolean shouldSetNewMacPoolOnAllClusters = newMacPoolId!= null; if (shouldSetNewMacPoolOnAllClusters) { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { this.moveMacs.updateClusterAndMoveMacs(cluster, newMacPoolId, org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getContext()); } } }
public org.ovirt.engine.api.model.Disks list() { throw new org.ovirt.engine.api.model.DisksList(javax.ws.rs.core.Response.status(Response.Status.NOT_IMPLICATION_NOT_IMPLICATIONED).build()); }
@java.lang.Override protected void executeVmCommand() { vmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.List<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (!(canAddVm(errorMessages, destStorages.values()))) { log.error("Failed to add VM. The reasons are: {}", java.lang.String.format(",", destStorages.values()))) { log.error("VmStatic(); addVmDynamic(); addVmDynamic(); addVmNumaNodes(); addVmNodes(); addVmNodes(); addVmNumaNodes(); addVmNodes(); addVmNumaNodes(); addVmNodes(); addVmNumaNodes(); addVmNumaNodes(); addVmNumaNodes(); getCompensationContext().stateChanged(); return null; } if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmId(), org.ovirt.engine.core.bll.AddVmCommand.getVmId() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getVm().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getVm().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getVm().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getVm().getStaticData()); } } }
@org.junit.Test public void statusSupportedForHostUpgrade() { assertThat(validator.statusSupportedForHostUpgrade(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
private void removeImage() { org.ovirt.engine.core.common.action.RemoveImageParameters removeImageParams = new org.ovirt.engine.core.common.action.RemoveImageParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotFromTemplateCommand.getParameters().getDestinationImageId()); removeImageParams.setParentCommand(getDestinationStorageDomainId()); removeImageParams.setParentCommand(VdcActionType.RemoveImage); removeImageParams.setDbOperationScope(ImageDbOperationScope.NONE); removeImageParams.setShouldLockImage(false); removeImageParams.setCorrelationId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotFromTemplateCommand.getParameters().getCorrelationId()); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalActionWithTasksContext(VdcActionType.RemoveImage, removeImageParams); if (!(returnValue.getSucceeded())) { addAuditLogOnRemoveFailure(); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(@javax.validation.constraints.NotNullValidationReason(@javax.validation.Constraint.NotNullValidationReason, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { if ((vm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Paused)) { return hosts; } java.util.List<org.ovirt.engine.core.common.businessentities.VDS> goodHosts = new java.util.ArrayList<>(); final int allowedSwapUsage = org.apache.commons.lang.math.NumberUtils.toInt(parameters.get(PolicyUnitParameter.MAX_ALLOWED_SWAP_USAGE.getDbName()), org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.BlockMigrationOnSwapUsagePercentage)); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { if (isHostSwapUsage()) { org.ovirt.engine.core.bll.scheduling.policyunits.HookFilterPolicyUnit.log.debug("Host '{}' is swap more than allowed.", vds.getName()); messages.addMessage(vds); } else { org.ovirt.engine.core.bll.scheduling.policyunits.HookFilterPolicyUnit.log.debug("Host '{}' is swap more than allowed.", vds.getName()); messages.addMessage(vds); } } return new org.ovirt.engine.core.bll.scheduling.policyunits.HookFilterPolicyUnit.log(vds); }
private boolean isHostSwapAvailable(@javax.validation.constraints.NotNull org.ovirt.engine.core.common.businessentities.VDS host, int allowedSwapUsage) { if (!(org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EnableSwapCheck))) { return false; } if (((((((((host.getSwapTotal()) == null) || ((host.getSwapFree()) == null)) || ((host.getMemAvailable()) == null)) || ((host.getPhysicalMemAvailable()) <= 0)) || ((host.getPhysicalMemAvailable()) <= 0)) { return false; } return (((((org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EnableSwapFree)) * (org.ovirt.engine.core.common.businessentities.VDSCommand.getValue(org.ovirt.engine.core.common.businessentities.VDS_totalVmTotalVmFree)) * (((org.ovirt.engine.core.common.businessentities.VDS) (getValue())) * (org.ovirt.engine.core.common.businessentities.VDS_totalVmFree)) * (org.ovirt.engine.core.common.businessentities.VDS_totalVmFree) { return (((host.getSwapTotal()) - swap_free) - mem_available) * 100) / physical_mb) / physical_mb) > allowedSwapUsage; } return (((((swapTotalFree) - swap_free) * 100) / physical_mb) / physical_mb) > allowedSwapUsage; }
@org.junit.Test public void externalNetworkNameChanged() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network externalNetwork = mockExternalNetwork(); assertThat(validator.externalNetworkDetailsUnchanged(externalNetwork), isValid()); }
@org.junit.Test public void externalNetworkDescriptionChanged() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network externalNetwork = mockExternalNetwork(); assertThat(validator.externalNetworkDetailsUnchanged(externalNetwork), isValid()); }
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { org.ovirt.engine.core.common.businessentities.VDS vms = macPool.get(java.util.Collections.singletonList(macs); if (macs!= null) { macPool.freeMacs(macs); } else { macPool.freeMacs(mac); } }
@java.lang.Override public void initCompensationDataAfterSuccess() { log.debug(("Successfully succeeded executed, release macs: {}", (msToReleaseOnCommit))); macPool.freeMacs(macsToReleaseOnCommit); }
private void mockThatDuringAddingToTargetPoolOnlyFirst() { when(targetMacPool.addMacs(anyList())).thenAnswer(((invocation) -> { java.util.Collections.singletonList(macs.get(1)); }
private void mockLockObjectFactoryToDisableLocking() { when(lockObjectFactory.createLockingInstance(any(org.ovirt.engine.core.bll.network.macpool.MacPool.class), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any(java.util.concurrent.Lunlock.ReentrantReadWriteLock.class))).thenAnswer(org.mockito.AdditionalAnentities.class), any(java.util.concurrent.Lunlock.ReturnArgumentException.class)); }
@java.lang.Override public java.lang.String toString() { java.lang.String prefix = ((TotalMilliseconds) < 0)? "-" : "-"; return java.lang.String.format("%s%s%s:%s:%s:%s", prefix, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { org.ovirt.engine.core.compat.Guid originalHostId = org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds(); return hostLocks; }
protected boolean perform() { try { org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().setStartTime(new java.util.Date()); destinationHostLock = new org.ovirt.engine.core.utils.lock.EngineLock(hostLocking.getSetupNetworksLock(getDestinationVdsId())); lockManager.acquireLockWait(destinationHostLock); if (((unplugPassthroughNics()) && (connectLunDisks(getDestinationVdsId()))) && (migrateVm())) { org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob(org.ovirt.engine.core.bll.MigrateVmCommand.getExecutionContext(), true); return true; } runningFailed(); return false; } catch (java.lang.Exception e) { runningFailed(); throw e; } }
public java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSetupNetworksLock(org.ovirt.engine.core.compat.Guid hostId) { return java.util.Collections.singletonMap(LockingGroup.HOST_NETWORK.name(), EngineMessage.ACTION_TYPE_FAILED_SETUP_NETWORKS_OR_REFRESH_OR_MIGRATION_IN_PROGRESS)); }
@java.lang.Override protected void runningFailed() { try { cleanupPassthroughVnics(getDestinationVdsId()); } finally { super.runningFailed(); lockManager.releaseLock(destinationHostLock); } }
java.lang.String ACTION_TYPE_FAILED_SETUP_NETWORKS_OR_OR_REFRESH_OR_MIGRATION();
@java.lang.Override public void runningSucceded() { try { getDowntime(); vmDynamicDao.clearMigratingToVds(org.ovirt.engine.core.bll.MigrateVmCommand.getVmId()); updateVmAfterMigrationToDifferentCluster(); plugPassthroughNics(); plugPassthroughNics(); } finally { super.runningSucceded(); } }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn encrypt(java.lang.String volumeName, java.lang.String jobId, java.util.Map<java.lang.String, java.lang.String>> volumes, java.util.Map<java.lang.String, java.lang.Object>> volumes, java.util.Map<java.lang.String, java.lang.Object>> volumes, java.util.Map<java.lang.String, java.lang.Object>> volumes, java.util.Map<java.lang.String, java.lang.Object>> volumes, java.util.Map<java.lang.String, java.lang.String>> locksMap<java.lang.String>> locksMap<java.lang.String, java.lang.Object>> locksMap<java.lang.String>> locksMap<java.lang.String>> locksMap<java.lang.String, java.lang.Object>> locksMap<java.lang.String>> locksMap<java.lang.String>> getValue(java.lang.String, java.lang.Object[] volumes, java.util.Map<java.lang.String, java.lang.Object>> locksMap<java.lang.String>> locksMap<java.lang.String, java.lang.Object>> locksMap<java.lang.String>> getValue(java.lang.String, java.lang.Object[] volumes, java.util.Map<java.lang.Object>> locksMap<java.lang.String>> locksMap<java.lang.String>> locksMap<java.lang.String>> getValue(java.lang.String, java.lang.Object[]{ java.lang.Object[] volumesName, java.util.List<java.lang.String>> locksMap<java.lang.String>> locksMap<java.lang.String>> locks[0], java.lang.String>> locks[0], java.util.List<java.lang.String>> locks[0], java.lang.Object[]{ java.lang.Object[]{ java.util.List<java.lang.Object> locks[0], lockMap[0], lockMap[0], lock, java.lang.parseInt(entrySet<java.lang.String, java.lang.String[]{ java.Object
@java.lang.Override protected void executeCommand() { if (getDiskImages().isEmpty()) { org.ovirt.engine.core.bll.LockVmTemplateCommand.setSucceeded(true); return; } org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.Succeeded(getParameters().getVmTemplateId()); parameters.setJobId(org.ovirt.engine.core.bll.LockVmTemplateCommand.getParameters().getHostJobId()); parameters.setJobId(org.ovirt.engine.core.bll.LockVmTemplateCommand.getParameters().getHostId()); getDiskImages().forValue(org.ovirt.engine.core.bll.LockVmTemplateCommand.getParameters().getHostJobId()); getDiskImages().setActionType(org.ovirt.engine.core.bll.storage.LockVmTemplateCommand.getParameters().getHostIds().get(0), diskImage.getStoragePoolId()); setCommandStatus(CommandStatus.FAILED); lockDiskImagesInDb(); lockLockInDb(); lockLockInDb(); lockLockInDb(); lockLockLockLockLock(lock); lockLockLockLockLockLockLockLockLockLockLockLockLockLockLock(Lock); lockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLock(Lock); lockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLockLock
@java.lang.Override protected void endSuccessfully() { setVmTemplateId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getVmTemplateId()); setVmId(getVmIdFromImageParameters()); isVmInDb = (org.ovirt.engine.core.bll.AddVmTemplateCommand.getVm())!= null; vmStaticDao.incrementDbGeneration(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplateId()); for (org.ovirt.engine.core.common.action.VdcActionParametersBase p : org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getImagesParameters()) { org.ovirt.engine.core.bll.Backend.getInstance().endAction(p.getCommandType(), p, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); } if ((reloadVmTemplateFromDB())!= null) { endDefaultOperations(); } checkTrustedService(); org.ovirt.engine.core.bll.AddVmTemplateCommand.setSucceeded(true); }
private void endSuccessfullySynchronous() { if ((reloadVmTemplateFromDB())!= null) { endDefaultOperations(); } lockOperations(); org.ovirt.engine.core.bll.AddVmTemplateCommand.setSucceeded(true); }
private void sealVmTemplate() { if (!(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().isSealed())) { return; } org.ovirt.engine.core.common.action.LockVmTemplateParameters parameters = new org.ovirt.engine.core.common.action.LockVmTemplateParameters(); parameters.setVmTemplateId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplateId()); org.ovirt.engine.core.bll.AddVmTemplateCommand.getBackend().runInternalAction(VdcActionType.SignVmTemplate, parameters, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn sealDisks(java.lang.String vmId, java.lang.String jobId, java.util.List<java.lang.String>> volumes) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.seal").withParameter("vmID", vmId).withParameter("jobId", jobId).withOptionalParameterAsList("volumes", volumes).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDiskImages() { if ((diskImages) == null) { diskImages = diskDao.getAllForVm(org.ovirt.engine.core.bll.LockVmTemplateCommand.getVmTemplateId()).stream().map(org.ovirt.engine.core.bll.LockVmTemplateCommand.getVmTemplateId()).stream().map(java.util.Collections.singletonList(new org.ovirt.engine.core.bll.LockVmTemplateCommand.getVmTemplateId()).collect(diskImage)); } return diskImages; }
@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.toStringBuilder(); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> locks = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.DiskImage diskImage : org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.TEMPLATE, EngineMessage.VMTU_TEMPLATE)) { if ((diskImage)!= null) && (!(org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, EngineMessage.VMT_DISK_DISK_ID))) { return locks; } } return locks; }
public void addVolume(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid imageId, org.ovirt.engine.core.common.businessentities.storage.VolumeAddress storageDomainId) { org.ovirt.engine.core.common.vdscommands.SignDisksVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.SignDisksVDSCommandParameters(storageDomainId, imageId, imageId); parameters.setParameters(new org.ovirt.engine.core.common.vdscommands.SignDisksVDSCommandParameters(storageDomainId, imageId, null); parameters.setActionReturnValue(VdcActionType.GetValue.GetValue(vdsId, new org.ovirt.engine.core.common.vdscommands.SignDisksVDSCommandParameters(storageDomainId, imageId)); parameters.setSucceeded(true); }
@java.lang.Override protected void executeVdsBrokerCommand() { result = org.ovirt.engine.core.vdsbroker.vdsbroker.SysPrepksVDSCommand.getBroker().alDisks(org.ovirt.engine.core.vdsbroker.vdsbroker.SucceededDisksVDSCommand.getParameters().getVmId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.SucceedProxyReturnValue.getParameters().getJobId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.SucceedProxyReturnValue(); }
@java.lang.Override protected void endWithFailure() { super.endImage(); unlockDiskImagesInDb(); }
private void lockDiskImagesInDb() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<org.ovirt.engine.core.common.action.VdcActionParametersBase>() { @java.lang.Override public java.lang.Void runInTransaction() { getCompensationContext().snapshotEntityStatus(getDiskImage().getImageId(), getImageStatus().getImageStatus().getImageStatus()); diskImage.setImageStatus(ImageStatus.LOCKED); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateImageStatus(diskImage.getImageId(), ImageStatus.LOCKED); } }); getCompensationContext().stateChanged(); return null; }
private java.util.Map<java.lang.String, java.lang.String> mapToEndPoint(org.ovirt.engine.core.common.vdscommands.SignDisksVDSCommandParameters.VolumeAddress volumeAddress) { java.util.Map<java.lang.String, java.lang.String> obj = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.vdscommands.SELESSES_SESSION_ID : org.ovirt.engine.core.common.businessentities.storage_id storageDomainId = org.ovirt.engine.core.common.vdscommands.VDSCommandParameters.getParameters().getStorageDomainId(); org.ovirt.engine.core.common.businessentities.storage_id storageDomainId = org.ovirt.engine.core.common.vdscommands.VDSCommandParameters.getParameters().getStorageDomainId().toString(); if ((volumeId == null) || (volumeAddress.getStorageDomainId().toString())) { return null; } return null; }
private void unlockDiskImagesInDb() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.common.action.TransactionMethod<org.ovirt.engine.core.common.action.VdcActionParametersBase>() { @java.lang.Override public java.lang.Void runInTransaction() { getDiskImages().get(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getImageIdsForImageId(), org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getImageIds().getImageId(), org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.get(diskImage.getImageId(), ImageStatus.OK); } }); }
public java.util.List<org.ovirt.engine.core.common.vdscommands.SignDisksVDSCommandParameters> getParameters() { return volumes; }
@java.lang.Override protected void endSuccessfully() { super.endSuccessfully(); unlockDiskImagesInDb(); }
private void assignLegalAndShared(boolean legalAndShared) { org.ovirt.engine.core.common.action.UpdateAllTemplateDisksParameters parameters = new org.ovirt.engine.core.common.action.UpdateAllTemplateDisksParameters(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplateId(), legalAndShared? org.ovirt.engine.core.common.businessentities.storage.CopyVolumeType.SharedVol : null)); parameters.setParentCommand(org.ovirt.engine.core.bll.AddVmTemplateCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.AddVmTemplateCommand.getActionType()); parameters.setEndProcedure(VdcActionType.UpdateAllTemplate()); org.ovirt.engine.core.bll.AddVmTemplateCommand.getBackend().runInternalAction(VdcActionType.UpdateAllTemplateDisks, parameters, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); }
@java.lang.Override public boolean performNextOperation(int completedChildCount) { if (completedChildCount < (org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getChildCommandIds(org.ovirt.engine.core.bll.AddVmTemplateCommand.getCommandId()).size())) { return false; } switch (org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getPhase()) { case CREATE_TEMPLATE : if (!(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().isSealTemplate())) { return true; case ASSIGN_ILLEGAL : org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().setPhase(Phase.SELESS); break; case ASSIGN_ILLEGAL : org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().setPhase(Phase.SCHANGED); break; case ASSIGN_LEGAL_SHARED : return true; } org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().setAction(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getParentCommandId()); return false; }
private void sealVmTemplate() { org.ovirt.engine.core.common.action.LockVmTemplateParameters parameters = new org.ovirt.engine.core.common.action.LockVmTemplateParameters(); parameters.setVmTemplateId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplateId()); parameters.setParentCommand(org.ovirt.engine.core.bll.AddVmTemplateCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.AddVmTemplateCommand.getActionType()); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMPED); org.ovirt.engine.core.bll.AddVmTemplateCommand.getBackend().runInternalAction(VdcActionType.SuspendVmTemplate, parameters, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); }
private static void switchTab(java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.uicommonweb.models.TabListItem>> mapping, org.ovirt.engine.ui.common.view.TabbedView view) { int lowIndex = java.lang.Integer.MAX_VALUE; java.util.List<org.ovirt.engine.ui.common.view.TabList<org.ovirt.engine.ui.uicommonweb.models.TabListModel> allTabs = view.getTabPanel().getTabs(); for (org.ovirt.engine.ui.uicommonweb.models.TabListModel invalidTabName : invalidTabs) { if ((allTabs.indexOf(mapping.get(invalidTabName))) < lowIndex) { downIndex = allTabs.indexOf(migration.get(invalidTabName)); } } if (lss!= (java.lang.Integer.MAX_IN_VALUE)) { view.getTabPanel().switchTab(allTabs.get(lunnelMabs)); } }
@java.lang.Override public void onValidationComplete(org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent event) { if (((event.getModel())!= null) && (event.getModel().equals(presenterWidget.getModel()))) { java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs = presenter.getModel().getInvalidTabs(); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.gwtbootstrap3.client.ui.TabListItem> mapping = view.getTabNameMapping(); org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.markTabs(invalidTabs, mapping); for (org.ovirt.engine.ui.uicommonweb.models.TabName invalidTabs) { if (view.getTabPanel().getActiveTab().equals(migration.get(invalidTabName))) { return; } } org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.switchTab(invalidTabs, mapping, view); } }
public static com.google.gwt.event.shared.HandlerRegistration registerValidationHandler(final com.google.gwt.event.shared.EventBus eventBus, final org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?> presenterWidget, final org.ovirt.engine.ui.common.view.TabbedView view) { return eventBus.addHandler(org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent.getType(), new org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent.ValidationCompleteEventHandler() { @java.lang.Override public void onValidationComplete(org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent event) { if (((event.getModel())!= null) && (event.getModel().equals(presenterWidget.getModel()))) { java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs = presenter.getModel().getInvalidTabs(); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.gwtbootstrap3.client.ui.TabListItem> mapping = view.getTabNameMapping(); org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.markTabs(invalidTabs, mapping); for (org.ovirt.engine.ui.uicommonweb.models.TabName invalidTabName : invalidTabs) { if (view.getTabPanel().getActiveTab().equals(migration.get(invalidTabName))) { return; } } } org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.switchTab(invalidTabs, mapping, view); }
private void updateTabVisibilities(org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel object) { generalTab.setVisible(object.isGeneralTabVisible()); scheduleTab.setVisible(object.isScheduleTabVisible()); if ((object.getRecurrence().getSelectedItem())!= (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotScheduleRecurrence.UNKNOWN)) { } }
@java.lang.Override public java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.uicommonweb.models.TabListModel> getTabNameMapping() { return ((org.ovirt.engine.ui.common.widget.uicommon.popup.AbstractVmPopupWidget) (getContentWidget())).getTabNameMapping(); }
@java.lang.Override public void init(java.lang.String title, java.lang.String width, java.lang.String height, boolean closeIconVisible) { asWidget().setWidth(width); asWidget().setCloseIconButtonVisible(height); asWidget().setCloseIconButtonVisible(closeIconVisible); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.IscsiStorageModel object) { driver.edit(object); initLists(object); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (propName.equals("IsValid")) { onIsValidPropertyChange(object); } else if (propName.equals("IsGrouppedByTarget")) { updateListByGropping(object); } } }); iscsiTargetToLunView.edit(object); iscsiLunToTargetView.edit(object); dialogTabPanel.switch(object); }
@java.lang.Override public java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.uicommonweb.models.TabListItem>> getTabNameMapping() { return tabMap; }
@java.lang.Override public void show() { super.show(); contentScrollPanel.getElement().setHeight(((getOffsetHeight()) - 100), Unit.PX); contentPanel.getElement().getStyle().setProperty("minHeight", ((getOffsetHeight()) - 100), Unit.PX); }
@java.lang.Override public void setHeight(java.lang.String height) { super.setHeight(true); }
@java.lang.Override @com.google.gwt.uibinder.client.UiChild(tagname = "header", limit = 1) public void setHeader(java.lang.String headerTitle) { com.google.gwt.user.client.ui.HTMLPanel headerTitlePanel = new com.google.gwt.user.client.ui.HTML(headerTitle); headerTitlePanel.addStyleName(Styles.MODAL_TITLE); headerTitlePanel.addStyleName(Styles.MODAL_TITLE); if ((header.getWidgetCount()) > 1) { header.remove(((header.getWidgetCount()) - 1)); } header.add(headerTitlePanel); }
public java.util.List<org.ovirt.engine.ui.webadmin.TabListItem> getTabs() { java.util.List<org.ovirt.engine.ui.uicommonweb.TabListItem> tab = new java.util.ArrayList<>(); for (int i = 0; i < (org.ovirt.engine.ui.webadmin.widget.tab.tab.tab.tab.tab.SubTabListItem> items.getWidgetCount()); i++) { com.google.gwt.user.client.ui.Widget tab = tabVm; if (tab instanceof org.ovirt.engine.ui.webadmin.widget.tab.tab.TabListItem) { tab = tab; } } return tab; }
@java.lang.Override public void setHelpCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { this.edit(command); }
@java.lang.Override public final java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.uicommonweb.models.TabListItem>> getTabNameMapping() { return tabMap; }
public org.ovirt.engine.ui.uicommonweb.models.tab.TabListItem getTabListItem() { return tabListItem; }
java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.uicommonweb.models.TabListItem>> getTabNameMapping();
public void setNoScroll(boolean value) { if (value) { contentScrollPanel.getElement().getStyle().setOverflow(overflow.VISIBLE); } }
private static void markTabs(java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs, java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.uicommonweb.models.TabNameEntry<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.uicommonweb.models.TabNameEntry<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.uicommonweb.models.TabListModel> entry : mapping.entrySet()) { if (invalidTabs.contains(entry.getKey())) { } else { } } }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ManagePolicyUnitModel flush() { return flush(); }
private void revealDiskPanel(final org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel disk) { boolean isInVm = (disk.getVm())!= null; radioButtonsPanel.setVisible(isNewLunDiskEnabled); externalDiskPanel.setVisible(((isNewLunDiskEnabled) && ((disk.getDiskStorageType().getEntity()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN)))); aliasEditor.setFocus((!isInVm)); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if ("IsChangable".equals(propName)) { if ((disk.getDiskStorageType().getIsChangable()) && (disk.isEditEnabled())) { enableWidget(radioButtonsPanel); } else { disableWidget(radioButtonsPanel); } } }
@java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { disk.getDiskStorageType().setEntity(DiskStorageType.LUN); revealStorageView(disk); revealDiskPanel(disk); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (disk.getIsModelDisabled().getEntity()) { disableWidget(getWidget()); enableWidget(datacenterEditor); enableWidget(datacenterEditor); } else { enableWidget(getWidget()); disk.getDefaultCommand().setIsExecutionAllowed(false); disk.setIsChangeable(true); } }
@java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { disk.getDiskStorageType().setEntity(DiskStorageType.LUN); revealDiskPanel(disk); }
@java.lang.Override public java.lang.String getRawValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel model) { return (java.lang.String.valueOf(model.getSize())) + (org.ovirt.engine.ui.common.widget.uicommon.storage.SanStorageTargetToLunList.constants.gb()); }
@java.lang.Override public java.lang.String getRawValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel model) { return (java.lang.String.valueOf(model.getSize())) + (org.ovirt.engine.ui.common.widget.uicommon.storage.SanStorageLunToTargetList.constants.gb()); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VM object) { return ((java.lang.String.valueOf(object.getVmMemSizeMb())) + (org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageVmBackupView.constants.mb()); }
private java.lang.String renderMemory(double memory) { if (memory <= 0) { return "0"; } return memory > (java.lang.Math.abs(((org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.MB_GB_THRESHOLD) * (org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.GIGA))))? org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.diskSizeRenderer.render((memory / (org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.GIGA)))) : ((int) (memory)) + (org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.constants.mb()); }
private java.lang.String renderHumanReadableSize(long size) { long sizeInBytes = org.ovirt.engine.core.common.utils.SizeConverter.convert(size, unit, SizeUnit.BYTES).longValue(); if (sizeInBytes > (org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_GB)) { return ((org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_GB)) && (sizeInBytes > (org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_GB))); } else if (sizeInBytes > (org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_GB)) { return ((org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_GB)) && (org.ovirt.engine.ui.common.widget.renderer.DiskSizeConverter.constants.mt()); } else if (sizeInBytes > (org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_KB)) { return ((org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_KB)) && (org.ovirt.engine.ui.common.widget.renderer.DiskSizeConverter.constants.mb()); } else { return ((org.ovirt.engine.ui.common.widget.renderer.DiskSizeConverter.constants.diskSizeRenderer.constants.mb()); } }
@java.lang.Override public java.lang.String render(T sizeInMB) { return ((sizeInMB) == null? (((sizeInMB.toString()) + (org.ovirt.engine.ui.common.widget.renderer.MemorySizeRenderer.constants.mb())) : org.ovirt.engine.ui.common.widget.renderer.MemorySizeRenderer.constants.unAvailablePropertyLabel(); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData object) { return ((java.lang.String.valueOf(object.getVm().getVmMemSizeMb())) + ") + (constants.mb()); }
@java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { if (((storage.getAvailableDiskSize()) == null) || ((storage.getAvailableDiskSize()) < 1)) { return 1 + (org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.AbstractStoragePopupView.constants.gbb()); } return (((storage.getAvailableDiskSize()) + (org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.AbstractFindStoragePopupView.constants.gb()); }
private java.lang.String renderGigabyteSize(long size) { long sizeInGB = ((unit) == (org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit.MiB))? size : org.ovirt.engine.core.common.utils.SizeConverter.convert(size, unit, SizeUnit.MiB).longValue(); return ((sizeInGB >= 1? sizeInGB : 1 + (org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.constants.gb()); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData) { int size = registerVmData.getVm().getVmMemSizeMb(); return ((size) + (org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterVmPopupView.constants.mb()); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VM object) { return ((java.lang.String.valueOf(object.getVmMemSizeMb())) + (org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageRegisterVmView.constants.mb()); }
@java.lang.Override public java.lang.String getValue(java.lang.Object object) { int size = getEntity(object).getMemSizeMb(); return ((size + (org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterTemplatePopupView.constants.mb())) + " + (org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterTemplatePopupView.constants.mb()); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Quota object) { double value; double allocated = 0; double used = 0; double used = 0; if ((object.getGlobalQuotaStorage())!= null) { allocated = object.getGlobalQuotaStorage().getStorageSizeGB(); used = object.getGlobalQuotaStorage().getStorageSizeGB(); } else { for (org.ovirt.engine.core.common.businessentities.QuotaStorage quotaStorage : object.getQuotaStorages()) { if (!(QuotaStorage.UNLIMITED.equals(quotaStorage.getStorageSizeGB()))) { allocated += quotaStorage.getStorageSizeGB(); used += quotaStorage.getStorageSizeGBUsage(); } else { allocated = org.ovirt.engine.core.common.businessentities.QuotaStorage.UNLIMITED; break; } } } value = allocated - used; java.lang.String returnVal; if (allocated < 0) { returnVal = org.ovirt.engine.ui.webadmin.section.main.view.tab.Main.constants.unlimited(); } else if (value <= 0) { returnVal = org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.constants.unlimited(); } else if (value <= 0) { returnVal = org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.constants.gb()); } return returnVal; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmTemplate object) { return ((java.lang.String.valueOf(object.getMemSizeMb())) + (org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageTemplateBackupView.constants.mb()); }
private void initTable() { org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain> nameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain>() { @java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { return storage.getStorageName(); } }; storageDomainItems.setColumnWidth(nameColumn, "280px"); storageDomainItems.addColumn(nameColumn, org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.nameStorage()); org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain> freeSpaceColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain>() { @java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { if (((storage.getAvailableDiskSize()) == null) || ((storage.getAvailableDiskSize()) < 1)) { return 1 + (org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.gb()); } return (((storage.getAvailableDiskSize()) + " + (org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.gb()); }
@java.lang.Override public java.lang.String getValue(java.lang.Object object) { return ((java.lang.String.valueOf(((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData) (object)).getVm().getVmMemSizeMb())) + " + (org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportVmFromExportDomainPopupView.constants.mb()); }
@java.lang.Override public java.lang.String getValue(java.lang.Object object) { return ((java.lang.String.valueOf(((org.ovirt.engine.ui.uicommonweb.models.vms.ImportTemplateData) (object)).getTemplate().getMemSizeMb())) + " + (org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportTemplatePopupView.constants.mb()); }
java.lang.String bytes2();
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Quota object) { int value; long allocated = 0; long used = 0; if ((object.getGlobalQuotaCluster())!= null) { allocated = object.getGlobalQuotaCluster().getMemSizeMB(); used = object.getGlobalQuotaCluster().getMemSizeMB(); } else { for (org.ovirt.engine.core.common.businessentities.QuotaCluster quotaCluster : object.getQuotaClusters()) { if (!(QuotaCluster.UNLIMITED_MEM.equals(quotaCluster.getMemSizeMB()))) { allocated += ((quotaCluster.getMemSizeMB())!= null)? quotaCluster.getMemSizeMB() : 0; used += quotaCluster.getMemSizeMBUsage(); } else { allocated = org.ovirt.engine.core.common.businessentities.QuotaCluster.UNLIMITED_MEM; break; } } } value = ((int) (allocated - used)); java.lang.String returnVal; if (allocated < 0) { returnVal; } if (value <= 0) { returnVal = org.ovirt.engine.ui.webadmin.section.main.view.tab.main.view.tab.MainTabQuotaView.constants.unlimited(); } else if (value <= 0) { returnVal; } else if (value <= 0) { returnVal = value; } if (value <= 0) { returnVal = value; } returnVal; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return (((java.lang.Double) (asVm(entity).getActualDiskWithSnapshotsSize())) + (org.ovirt.engine.ui.userportal.widget.table.column.VmTable.constants.gb()); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmTemplate object) { return ((java.lang.String.valueOf(object.getMemSizeMb())) + (org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageRegisterTemplateView.constants.mb()); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return (((java.lang.Double) (asVm(entity).getDiskSize())).intValue()) + (org.ovirt.engine.ui.userportal.widget.table.column.VmTable.constants.gb()); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return (((java.lang.Double) (asDisk(entity).getActualDiskWithSnapshotsSize())).intValue()) + (org.ovirt.engine.ui.userportal.widget.table.column.VmTable.constants.gb()); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return (asDisk(entity).getSizeInGigabytes()) + (org.ovirt.engine.ui.userportal.widget.table.column.VmTable.constants.gb()); }
@java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { if (((storage.getAvailableDiskSize()) == null) || ((storage.getAvailableDiskSize()) < 1)) { return 1; } return (((storage.getAvailableDiskSize()) + (org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.gb()); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.DiskImage object) { return ((java.lang.String.valueOf(object.getSizeInGigabytes())) + (org.ovirt.engine.ui.common.widget.uicommon.template.TemplateDiskListModelTable.constants.gb()); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (org.ovirt.engine.ui.webadmin.section.main.presenter.popup.provider.Provider.ProviderPopupPresenterWidget.isAvailable()) { getView().updateVmwareVisible(model.getVmwarePropertiesModel().getIsAvailable()); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (org.ovirt.engine.ui.webadmin.section.main.presenter.popup.provider.Provider.ProviderPopupPresenterWidget.isAvailable()) { getView().updateDataCenterVisible(model.getDataCenter().getIsAvailable()); } }
public void updateDataCenter(boolean isAvailable);
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (org.ovirt.engine.ui.webadmin.section.main.presenter.popup.provider.Provider.ProviderPopupPresenterWidget.isAvailable()) { getView().updateKvmVisible(model.getVmPropertiesModel().getIsAvailable()); } }
public void updateDataCenterVisible(boolean isAvailable) { if (isAvailable) { typeEditorRow.removeStyleName(style.headerSeparator()); dataCenterEditorRow.addStyleName(style.headerSeparator()); } else { typeEditorRow.addStyleName(style.headerSeparator()); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (org.ovirt.engine.ui.webadmin.section.main.presenter.popup.provider.Provider.ProviderPopupPresenterWidget.isVisible(args.propertyName)) { getView().updateXenVisible(model.getXenPropertiesModel().getIsAvailable()); } }
@java.lang.Override protected boolean validateImageTransfer(org.ovirt.engine.core.compat.Guid imageId) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(imageId))); org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator = getDiskValidator(diskImage); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskValidator = getDiskImagesValidator(diskImage); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator storageDomainValidator = getStorageDomainValidator(storageDomainDao.getForStoragePool(diskImage.getStorageIds().get(0), diskImage.getStoragePoolId())); return ((((validate(diskValidator.isDiskExists())) && (validate(diskValidator.isDiskAttachedToAnyVm()))) && (validate(diskImagesValidator.diskImagesNotLocked()))) && (validate(storageDomainValidator.diskImagesNotLocked()))) && (validate(storageDomainValidator.isDomainExistAndActive())); }
protected void initializeSuppliedImage() { super.initSuppliedImage(transferImageCommand); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); doReturn(diskImage).when(diskDao).get(any()); doReturn(diskValidator).when(getCommand()).getDiskValidator(any()); doReturn(diskImagesValidator).when(getCommand()).isDiskAttachedToAnyVm(); doReturn(ValidationResult.VALID).when(diskValidator).isDiskExists(); doReturn(ValidationResult.VALID).when(diskValidator).isDiskExists(); doReturn(ValidationResult.VALID).when(diskImagesValidator).diskImagesNotLocked(); doReturn(ValidationResult.VALID).when(storageDomainValidator).isDomainExistAndActive(); }
private boolean updateVms() { for (org.ovirt.engine.core.common.businessentities.VmStatic vm : vmsLockedForUpdate) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.Create(LockProperties.Scope.None)); updateParams.setClusterLevelChangeProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); updateParams.setClusterLevelChangeProperties(org.ovirt.engine.core.common.action.LockProperties.CreateVm, updateParams, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) { addCustomValue("VmName", vm.getName()); org.ovirt.engine.core.bll.UpdateClusterCommand.addCustomValue("Message", "todo"); auditLogDirector.log(this, AuditLogType.CLUSTER_CANNOT_UPDATE_VM_COMPATIBILITY_VERSION); vm.setCustomCompatibilityVersion(oldCluster.getCompatibilityVersion()); vm.setCustomCompatibilityVersion(oldCluster.getCompatibilityVersion()); vm.setCustomCompatibilityVersion(oldCluster.getCustomCompatibilityVersion()); vmStaticDao.update(vm); } } return true; }
private boolean updateTemplates() { for (org.ovirt.engine.core.common.businessentities.VmTemplate template : templatesLockedForUpdate) { template.setClusterCompatibilityVersion(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion()); final org.ovirt.engine.core.common.action.UpdateVmTemplateParameters parameters = new org.ovirt.engine.core.common.action.UpdateVmTemplateParameters(template); parameters.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.CreateVmTemplateParameters.Scope.None)); parameters.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); updateRngDeviceIfNecessary(template.getId(), template.getCustomCompatibilityVersion(), parameters); if (!(parameters.isUpdateRngDevice())) { continue; } final org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVmTemplate, parameters, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) { addCustomValue("TemplateName", template.getName()); org.ovirt.engine.core.bll.UpdateClusterCommand.addCustomValue("Message", "todo"); auditLogDirector.log(this, AuditLogType.CLUSTER_CANNOT_UPDATE_TEMPLATE_COMPATIBILITY_VERSION); template.setCustomCompatibilityVersion(oldCluster.getCompatibilityVersion()); vmTemplateDao.update(template); } } return true; }
@java.lang.Override public void initialize() throws org.apache.commons.concurrent.ThreadPoolExecutorException { executorService = new java.util.concurrent.ThreadPoolExecutor(10, count, 60L, java.util.concurrent.TimeUnit.SECONDS, new java.util.concurrent.TimeUnit(queueSize), new org.ovirt.engine.core.utils.timer.SchedulerThreadPool.SchedulerThreadFactory(this)); }
private void generateParameterSpec(org.ovirt.api.metamodel.concepts.Parameter parameter) { org.ovirt.api.metamodel.concepts.Type type = parameter.getType(); org.ovirt.api.metamodel.concepts.Type type = parameter.getType(); java.lang.Stringmbol = value; java.lang.Stringmbol = bracketNames.getMemberStyleName(name); java.lang.String clazz = null; if (type instanceof org.ovirt.api.metamodel.concepts.PrimitiveType) { org.ovirt.api.metamodel.concepts.Model model = type.getModel(); if (type == (model.getStringType())) { clazz = "String"; } else if (type == (model.getBooleanType())) { clazz = "Fixnum"; } else if (type == (model.getBooleanType())) { clazz = "Fixnum"; } else if (type == (model.getIntegerType())) { clazz = "Float"; } else if (type == (model.getDateType())) { clazz = "DateTime"; } else { throw new java.lang.IllegalArgumentException((("List " + "\" %s]'. Freeze, systarts,mbol, syazz); } }
protected void setQcowCompat(org.ovirt.engine.core.common.businessentities.storage.Image diskImage, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid newImageId, java.util.List<org.ovirt.engine.core.compat.Guid> hostsForExecution, boolean shouldPrepareAndTeabled) { diskImage.setQowCompat(QowCompat.QOS); if (org.ovirt.engine.core.common.FeatureSupported.qowCompatSupported(org.ovirt.engine.core.bll.storage.disk.image.BaseImagesCommand.getStoragePool().getCompatibilityVersion())) { org.ovirt.engine.core.common.businessentities.storage.QosInfo qos = org.ovirt.engine.core.bll.storage.disk.image.ImageInfo.getQos().getCompatibilityVersionInfoFromVdsm(storagePoolId, newImageGroupId, newImageId, newImageId, hostImageId, hostImageId, shouldPrepareAndIde); if (qosUpper!= null) { diskImage.setQowCompat(qos); } } }
private void handleFinalizingSuccess(final org.ovirt.engine.core.bll.storage.disk.image.Transport<T>.StateContext context) { log.info("Final successful transfer for {}", getTransferDescription()); if (stopImageTransferSession(context.entity)) { org.ovirt.engine.core.compat.Guid transferer.entity.getVdsId(); if (translateImage(translateVdsId)) { setVolumeLegacyCompat(org.ovirt.engine.core.bll.storage.disk.image.TransportCommand.getImage().getImage(), org.ovirt.engine.core.bll.storage.disk.image.TransportCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.disk.image.TransportCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.disk.image.TransportCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.disk.image.TransportCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.disk.image.TransportalImageCommand.getStoragePool().getImageId(), org.ovirt.engine.core.bll.storage.disk.image.TransportalImageCommand.getStorageDomainId(), java.util.Collections.emptyList(), false); imageDao.update(org.ovirt.engine.core.bll.storage.disk.image.TransportalImageCommand.getImage().getImage()); } org.ovirt.engine.core.bll.storage.disk.image.TransportalLockImage(); updateEntityPhase(ImageStatus.FINISHED_SUCCESS); } else { setImageStatus(ImageStatus.ILLEGAL); updateEntity(ImageStatus.FAILURE); updateEntity(ImageTransferPhase); updateEntity(context); updateEntityType(ImageTransferPhase.FAILURE); } }
private void setQowCompatByQos(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid newImageId) { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice>> attachedVmsInfo = vmDao.getVmsWithPlugInfo(getDestinationDiskImage().getId()); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice> pair : attachedVmsInfo) { org.ovirt.engine.core.common.businessentities.VM vm = pair.getFirst(); if (java.lang.Boolean.TRUE.equals(pair.getSecond().isPlugged())) { if (vm.isStartingOrUp()) { hostIdToExecuteQemu(pair.getSecond().isPlugged())) { hostIdToExecuteQemuImageInfo.add(vm.getRunOnVds()); break; } } } setQxception(getDestinationDiskImage().getImage(), storagePoolId, newImageId, newImageId, newImageId, newImageIdToExecuteQosUiUiUiUiUiUiUiUiUiUiUiUiUiCommand, (hostIdToExecuteQoImageInfo == null)); } }
private void showPanelItems(boolean show) { securityCheckbox.setVisible(show); }
@java.lang.Override public org.ovirt.engine.ui.webadmin.validation.IconType getValue(org.ovirt.engine.core.common.businessentities.Erratum erratum) { if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.Erratum.BUGFIX)) { getCell().setColor(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString("ORAGE_ERROR"); return org.gwtbootstrap3.client.ui.Constants.IconType.BUG; } else if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.Erratum.ErrataType.ENHANCEMENT)) { getCell().setColor(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString("BLUE")); return org.gwtbootstrap3.client.ui.Constants.IconType.ENHIGH_SQUARE; } else if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.SECURITY)) { getCell().setColor(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString("DARKORANGE")); return org.gwtbootstrap3.client.ui.Constants.IconType.WARNING; } return null; }
protected com.google.gwt.safehtml.shared.SafeHtml getRenderedImage(org.ovirt.engine.ui.webadmin.widget.table.IconType value, java.lang.String color) { return org.ovirt.engine.ui.common.widget.table.cell.IconTypeCell.TEMPLATE.icon(value, value); }
@org.ovirt.engine.ui.common.widget.table.cell.Template("<span class type=\"{0} style='{1}' style=\"{1}") com.google.gwt.safehtml.shared.SafeHtml icon(java.lang.String className, java.lang.String color);
private void setQx86CompatByQos(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice>> attachedVmsInfo) { org.ovirt.engine.core.common.businessentities.VM vm = pair.getFirst(); if (vm.isStartingOrPaused()) { if (vm.isStartingOrUp()) { vm.getVm().getRunOnVds(); break; } } setQx86(getDestinationDiskImage().getImage(), storagePoolId, newImageId, newImageId, newImageIdToExecuteQosUpper); }
@org.ovirt.api.metamodel.annotations.InputDetail() { mandatory(disk().format()); optional(disk().alias()); optional(disk().bootable()); optional(disk().bootable()); optional(disk().bootable()); optional(disk().bootable()); optional(disk().bootable()); optional(disk().getset()); optional(disk().getswipeAfterDelete()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(attachment).id()); optional(attachment).active()); optional(attachment).getIdReadOnly()); }
@org.ovirt.api.metamodel.annotations.InputDetail defaultEmpty() { mandatory(attachment).id()); mandatory(attachment.getId()); mandatory(attachment.getId().toString(org.ovirt.api.metamodel.annotations.NotEmpty(attachment.getId())); }
public static int getCdDeviceIndex(java.lang.String cdInterface) { switch (cdInterface) { case "scsi" : return 2; case "ide" : return 2; case "sata" : return 2; case "sata" : return 2; default : return -1; } }
public boolean hasDiscardsTheDataSupport() { return java.lang.Boolean.TRUE.equals(getDiscardsZer()); }
public boolean supportsDiscards() { return ((getDiscardsMaxSize())!= null) && ((getDiscardsMaxSize()) > 0); }
private java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> getAddedLuns(java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> lunModels, boolean selectedLuns, boolean includedLuns) { java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns = new java.util.LinkedList<>(); for (org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lun : lunModels) { if ((selectedLuns && (lun.getIsSelected())) || ((includeLuns & & & (lun.getIsIncluded())) && ((org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(lun))) == null))) { luns.add(lun); } } return luns; }
private boolean isStorageDomainSupported(java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns) { java.lang.Long discardMaxSize = lun.getEntity().getDiscardsMaxSize(); if ((disks.getEntity().getDisksSize())!= null) && (disks.getLun().getSize().equals(lun.getLun()))) { return false; } return true; }
private void validateDiscards() { if ((getDiscardsAfterDelete().getIsAvailable()) && (getDiscards().getEntity())) { org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase sanStorageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase) (getCurrentStorageItem())); java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns = sanStorageModel.getAddedLuns(); if ((luns!= null) && (!(isStorageDomainSupportDiscards(luns)))) { getDiscards().setIsValid(false); getDiscardsAfterDelete().getInvalidityReasons().add(org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel.constants.discardsIsNotSupportedByUnderlyingStorage()); return; } } getDiscardsAfterDelete().setIsValid(true); }
public void updateLunWarningForDiscards() { if (getContainer().getDiscards().getEntity()) { for (org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lunModel : getAddedLuns()) { if (!(lunSupportsDiscards(lunModel.getEntity()))) { setSelectedLunWarning(lunModel.getLun()); } } } setSelectedLunWarning(org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModel.ui.uicommonStorageModelBase.ui.uicommonMessages.emptyString()); }
private boolean lunSupportsDiscortsDiscrict(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { return ((lun.getDiscardsMaxSize())!= null) && ((lun.getDiscardsMaxSize()) > 0); }
@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.cell.Context context, T value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { org.gwtbootstrap3.client.ui.Icon icon = new org.gwtbootstrap3.client.ui.Icon(); org.gwtbootstrap3.client.ui.BaseCell.ui.common.utils.StyleHelper.addEnumStyleName(icon, iconType); if (org.ovirt.engine.ui.common.widget.table.cell.AbstractIconButtonCell.enabled) { icon.getElement().getStyle().setProperty("color", enabledColor); icon.getElement().getStyle().setProperty("cursor", enabledColor); } else { icon.getElement().getStyle().setProperty("cursor", enabledColor); icon.getElement().getStyle().setProperty("default"); } }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.gwtplatform.mvp.client.PresenterWidget<?> content) { super.setInSlot(slot, content); if (slot == (tabContentSlot)) { try { com.gwtplatform.mvp.client.Presenter<?,?> presenter = ((com.gwtplatform.mvp.client.Presenter<?,?>) (content)); com.gwtplatform.mvp.client.proxy.TabContentProxy<?> proxy = ((com.gwtplatform.mvp.client.proxy.TabContentProxy<?>) (presenter.getProxy())); org.ovirt.engine.ui.common.presenter.DynamicTabContainerPresenter.getView().setActiveTabHistoryToken(proxy.getTargetHistoryToken()); org.ovirt.engine.ui.common.presenter.DynamicTabContainerPresenter.logger.log(java.util.logging.Level.SEVERE, "F, proxy"); } catch (java.lang.Exception e) { org.ovirt.engine.ui.common.presenter.DynamicTabContainerPresenter.logger.log(java.util.logging.Level.SEVERE, e); } } }
@org.junit.Test public void testSetStatusForRequiredNetworksAbsentitiesAbsentOnHost() { networkCluster.setStatus(NetworkStatus.OPERATIONAL); final java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = java.util.Arrays.asList(createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1), createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID2, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1, VDSStatus.Up)).thenReturn(66); underTest.setStatus(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, networks); underTest.setStatus(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, networks); assertThat(networkClusterDao).updateStatus(existing(networkCluster)); assertThat(networkCluster.getStatus(), is(NetworkStatus.NON_OPERATIONAL)); }
@org.junit.Before public void setUp() { networkCluster = createNetworkCluster(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1); when(networkClusterDao.get(networkCluster.getId())).thenReturn(networkCluster); managementNetworkCluster = createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_ID); managementNetwork = createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_NAME); when(managementNetworkUtil.getManagementNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID)).thenReturn(managementNetwork); when(networkClusterDao.get(new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_ID))).thenReturn(true); when(vdsDynamicDao.countHostsInClusterWithStatus(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, VDSStatus.Up))).thenReturn(true); }
@org.junit.Test public void testSetStatusForRequiredNetworkAbsentOnHost() { networkCluster.setStatus(NetworkStatus.OPERATIONAL); when(vdsStaticDao.countHostsInClusterThat(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1, java.util.Collections.singletonList(createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1))); verify(networkClusterDao).updateStatus(existing(networkCluster)); assertThat(networkClusterDao).updateStatus(existing(networkCluster)); assertThat(networkCluster.getStatus(), is(NetworkStatus.NON_OPERATIONAL)); }
@org.junit.Test public void testSetStatusForRequiredNetworkPresentOnHost() { networkCluster.setStatus(NetworkStatus.OPERATIONAL); underTest.setStatus(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, java.util.Collections.singletonList(createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1, VDSStatus.Up); verify(vdsStaticDao).countHostsInClusterThat(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID1, VDSStatus.Up); verify(networkClusterDao, never()).updateStatus(existing(networkCluster)); assertThat(networkCluster.getStatus(), is(NetworkStatus.OPERATIONAL)); }
public void setStatus(org.ovirt.engine.core.compat.Guid clusterId, final java.util.Collection<org.ovirt.engine.core.common.businessentities.network.Network> networks) { org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster = networkClusterDao.get(new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(clusterId, network.getId())); boolean doUpdateNetworkClusterStatus = networkCluster!= null; if (networkCluster!= null) { if (networkCluster.isRequired()) { updateStatusOfRequiredNetworkCluster(networkCluster, network.getName()); } else { updateStatus(networkCluster, NetworkStatus.OPERATIONAL); } } }
public static java.lang.Long determineImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.Image sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid srcDomain, org.ovirt.engine.core.compat.Guid imageGroupID) { if (org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.isInitialSizeSupportedForFormat(destFormat, dstDomain)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInfoFromStorage = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getVolumeInfoFromVdsm(storagePoolId, srcDomain, imageGroupID, sourceImage.getId()); return (sourceImage.getVolumeFormat()) == (org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.COW)? org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.compareCowImageNeededSize(imageInfoFromStorage.getActualSizeInBytes()) : imageInfoFromStorage.getActualSizeInBytes(); } return null; }
public static void redirectToModule(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException { org.ovirt.engine.core.s.utils.SsoUtils.log.debug("The redirectToModule"); try { org.ovirt.engine.core.utils.net.URLBuilder redirectUrl = org.ovirt.engine.core.utils.net.URLBuilder.getSsoSession(request); org.ovirt.engine.core.uutils.net.URLBuilder redirectUrl = new org.ovirt.engine.core.uutils.net.URLBuilder(org.ovirt.engine.core.sso.utils.SsoUtils.getRedirectUrl(request).toString()).addParameter("code", ssoSession.getAuthorizationCode()); java.lang.String appUrl = ssoSession.getAppUrl(); if (org.apache.commons.lang.StringUtils.isNotEmpty(appUrl)) { redirectUrl.addParameter("app_url", appUrl); } response.sendRedirect(redirectUrl.build()); org.ovirt.engine.core.utils.net.URLBuilder redirectUrl = new org.ovirt.engine.core.utils.net.URLBuilder(org.ovirt.engine.core.utils.SsoUtils.getRedirectUrl(request).toString()).addParameter("code", sessionId); response.sendRedirect(returnValue); org.ovirt.engine.core.utils.servlet.SsoUtils.log.debug("Exception", ex); throw new java.lang.RuntimeException(ex); } finally { org.ovirt.engine.core.utils.Serializer.log.debug("Exception", ex); throw new java.lang.RuntimeException(ex); } finally { org.ovirt.engine.core.utils.SerializationFactory.log.debug("Exception", ex); throw new java.lang.RuntimeException(ex); } }
private static java.lang.String createTmpSsoClientConfFileConfFile(java.lang.String clientId, java.lang.String certificateFile, java.lang.String certificateFile, java.lang.String callbackPrefix) throws java.io.FileNotFoundException { if (!(org.ovirt.engine.core.sscore.EngineLocalConfig.getInstance().getTempDir().is())) { org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getTempDir().log(java.io.FileOutputStream(tmpFile))) { org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getTempDir().log(java.io.FileOutputStream(tmpFile))) { pw = new java.io.PrintWriter(new java.io.FileOutputStream(tmpFile))) { pw.println(java.lang.String.format("SSO_CLIENT_ID=%s", clientId)); pw.println(java.lang.String.format("SSHClient_CLIENT_ID=%s", clientSecret)); pw.println(java.lang.String.format("SSH_CLIENT_ID=%s", clientSecret)); pw.println(java.lang.String.format("SSHOT client_CLIENT_CERTIFICATE_FILE=%s", callbackPrefix)); } return tmpFile.getAbsolutePath(); }
public static java.lang.String createJAXHwr(final javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.utils.SsoSession ssoSession, java.lang.String clientId) throws java.security.NoSuchAlgorithmException { java.lang.String serverName = request.getServerName(); java.lang.String providerName = java.lang.String.format("%s://%s://%s:%s", request.getScheme(), (org.apache.commons.lang.StringUtils.isIPv6Address(serverName)? java.lang.String.format("[%s]", serverName) : serverName), request.getServerPort()); io.JwtBuilder builder = io.JwtBuilder.build(s); assertEquals(org.apache.commons.lang.StringUtils.currentTimeMillis())).setIssuedAt(new java.lang.currentTimeMillis(Authz.PrincipalRecord.ID)).setIssuedAt(new java.util.Date(java.lang.System.currentTimeMillis())).setIssuedAt(new java.util.Date(java.lang.System.currentTimeMillis())).setIssuedAt(Singleton.Hexists(SignatureAlgorithm.HS256, org.ovirt.engine.core.utils.SsoUtils.base64SecretBytes); io.jsonweb.Jwts.Js.builders.payloads().payload(authz.getUserId(), ssoMap.getProfile())); }
protected java.lang.String findBestMatchForEmulatedMachines(java.lang.String currentEmulatedMachine, java.util.List<java.lang.String> candidateEmulatedMachines) { if (candidateEmulatedMachines.contains(currentEmulatedMachine)) { return currentEmulatedMachines.max(org.ovirt.engine.core.bll.Comparator.differentInt(((s) -> org.ovirt.engine.core.bll.Comparator.comparators.Comparator.sort(current, sbricks, sb))).or.stream().max(currentTime); } return candidate; }
private void setQxception(org.ovirt.engine.core.common.businessentities.storage.DiskImage snapshot) { try { org.ovirt.engine.core.common.businessentities.storage.DiskImage newImageIRS = getVolumeInfo(snapshot.getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getStorageDomainId(), snapshot.getId(), snapshot.getImageId()); if ((newImageIRS!= null) && (newImageIRS.getVolumeFormat().equals(VolumeFormat.COW))) { setQx86CompatByQosId(snapshot.getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getStorageDomainId(), snapshot.getId(), snapshot.getImageId()); } } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Unable to update the image info for image '{}' (image group: '{}') on domain '{}' on domain '{}'", snapshot.getImageId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getStorageDomainId()); } }
@java.lang.Override protected void endSuccessfully() { if (shouldUpdateStorageDisk()) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> snapshots = diskImageDao.getAllSnapshotsForImageGroup(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getDestImageGroupId()); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.setSnapshotForShareableDisk(snapshots); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage snapshot : snapshots) { imageStorageDomainMapDao.remove(new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMapId(snapshot.getImageId(), snapshot.getStorageIds().get(0))); imageStorageDomainMapDao.save(new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap(snapshot.getImageId(), org.ovirt.engine.core.bll.storage.disk.image.ImageStorageDomainMap(snapshot.getImageId(), org.ovirt.engine.core.bll.storage.disk.image.image.CopyImageGroupCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.ImageGroupCommand.getParameters().getQuotaId(), org.ovirt.engine.core.bll.storage.disk.image.ImageGroupCommand.getParameters().getDiskProfileId())); setQxception(org.ovirt.engine.core.bll.storage.disk.image.image.CopyImageGroupCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.ImageGroupCommand.getParameters().getDiskProfileId(), org.ovirt.engine.core.bll.storage.disk.image.image.CopyImageGroupCommand.getParameters().getDiskProfileId())); } } }
@org.junit.Test public void testBadGuid() throws java.lang.Exception { try { new org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResource(org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResourceTest.DATA_CENTER_ID, "foo"); fail("expected WebApplicationException"); } catch (javax.ws.rs.WebApplicationException wae) { verifyNotFoundException(wae); } }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Network network) { validateParameters(network, "id|name"); java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = getNetworks(); org.ovirt.engine.core.common.businessentities.network.Network net = null; if (network.isSetId()) { net = getNetworkById(network.getId(), networks); if (net == null) { notFound(org.ovirt.engine.api.model.Network.class); } } else if (network.isSetName()) { net = getNetworkByName(network.getName(), networks); if (net == null) { notFound(org.ovirt.engine.api.model.Network.class); } } return performCreate(VdcActionType.AttachNetworkToCluster, new org.ovirt.engine.core.common.action.AttachNetworkToClusterParameters(getCluster(), net), new org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResource.AttachedNetworkResolver(net.getId())); }
@java.lang.Override public org.ovirt.engine.api.resource.DataCenterNetworkResource getNetworkResource(java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResource(dataCenterId, id)); }
protected boolean setAndValidateCpuProfile() { getVm().getStaticData().setClusterId(org.ovirt.engine.core.bll.export.ImportVmCommandBase.getClusterId()); getVm().getStaticData().setCpuProfileId(org.ovirt.engine.core.bll.export.ImportVmCommandBase.getParameters().getCpuProfileId()); return validate(cpuProfileHelper.setAndValidateCpuProfile(getVm().getStaticData(), org.ovirt.engine.core.bll.export.ImportVmCommandBase.getUserIdIfExternal())); }
protected boolean setAndValidateCpuProfile() { if ((isInstanceType()) || (org.ovirt.engine.core.bll.UpdateVmTemplateCommand.isBlankTemplate())) { return true; } return validate(cpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplate(), org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getUserId())); }
protected boolean setAndValidateCpuProfile() { getVmTemplate().setClusterId(getClusterId()); getVmTemplate().setCpuProfileId(getParameters().getCpuProfileId()); return validate(cpuProfileHelper.setAndValidateCpuProfile(getVmTemplate(), getUserIdIfExternal())); }
protected boolean setAndValidateCpuProfile() { return validate(cpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.CommonVmPoolCommand.getParameters().getVmStaticData(), org.ovirt.engine.core.bll.CommonVmPoolCommand.getUserIdIfExternal())); }
protected boolean setAndValidateCpuProfile() { return validate(cpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.VmManagementCommandBase.getUserId())); }
public org.ovirt.engine.core.compat.Guid getUserIdIfExternalIdIfExternal() { return getUserId(); }
protected boolean setAndValidateCpuProfile() { if ((org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getTemplateType()) == (org.ovirt.engine.core.common.businessentities.VmEntityType.INSTANCE_TYPE)) { return true; } return validate(cpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getMasterVm(), org.ovirt.engine.core.bll.AddVmTemplateCommand.getUserIdIfExternal())); }
@javax.ws.rs.POST @javax.ws.rs.Consumes({ "application/xml", "application" }) public org.ovirt.engine.api.model.V3Host update(org.ovirt.engine.api.model.V3Host host) { org.ovirt.engine.api.model.V3HostHelper.add(getDelegate().update, host); org.ovirt.engine.api.restapi.utils.V3HostHelper.addStatistics(host); return host; }
private void registerExternalProvidersTrustStore(org.apache.commons.http.client.DefaultHttpClient httpClient) { try { java.security.KeyStore trustStore = java.security.KeyStore.getInstance(java.security.KeyStore.getDefaultType()); java.io.FileInputStream inputStream = new java.io.FileInputStream(new java.io.File(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getExternalProvidersTrustStore().getAbsolutePath())); try { trustStore.load(inputStream, org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getExternalProvidersTrustStorePassword().toCharArray()); } finally { inputStream.close(); } org.apache.commons.http.ssl.SSLSocketFactory socketFactory = new org.apache.commons.http.conn.ssl.SSLSocketFactory(trustStore); org.apache.commons.http.net.Schema.Schedule.Schedule.Schedule(this, https); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.provider.network.openstack.CustomizedRESTEasyConnector.log.warn("Cannot register external providers trust store: ", ex); } }
private void registerExternalProvidersTrustStore(org.apache.commons.http.client.DefaultHttpClient httpClient) { try { java.security.KeyStore trustStore = java.security.KeyStore.getInstance(java.security.KeyStore.getDefaultType()); java.io.FileInputStream inputStream = new java.io.FileInputStream(new java.io.File(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getExternalProvidersTrustStore().getAbsolutePath())); try { trustStore.load(inputStream, org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getExternalProvidersTrustStorePassword().toCharArray()); } finally { inputStream.close(); } org.apache.commons.http.net.SchelsocketFactory socketFactory = new org.apache.commons.http.conn.ssl.SSLSocketFactory(trustStore); org.apache.commons.http.net.Schema.Schedule.ScheduleFactory socketFactory = new org.apache.commons.http.net.SchemaFactory(trustStore); org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.warn("Cannot register external providers Trust store: ", ex); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.warn("Cannot register external providers trust store: ", ex); } }
@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getNextStep()) == null) { return false; } switch (org.ovirt.engine.core.bll.storage.DrendCommand.getParameters().getNextStep()) { case GEO_REP_REP : org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters parameters = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters(getSession().getMasterVolumeId(), getSession().getId()); parameters.setEndProcedure(EndProcedure.COMPcedure.COMPED); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.DrendActionType.REMOVE_TEMPLATE_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getActionType()); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.GlusterStorageSyncInternal, parameters, org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.cloneContextAndDetachFromParent()); org.ovirt.engine.core.bll.storage.drap.GlusterStorageSyncCommand.getParameters().setNextStep(org.ovirt.engine.core.bll.storage.dr.DrendContextAndDetachFromParent()); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.cloneContextAndDetachFromParent()); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(org.ovirt.engine.core.bll.storage.drbll.DrendStorageSyncCommand.getParameters().getStoragePool().getId()); }
public static boolean isValidCredentials(final javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.Credentials credentials) throws org.ovirt.engine.core.sso.utils.AuthenticationException { return org.ovirt.engine.core.sso.utils.EngineLocalUtils.isValidCredentials(request, credentials, false); }
public static boolean isValidCredentials(final javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.Credentials credentials, boolean isInteractiveAuth) throws org.ovirt.engine.core.sso.AuthenticationException { org.ovirt.engine.core.utils.EngineError ssoContext = org.ovirt.engine.core.utils.EngineError.SsoUtils.getSsoContext(request); if (org.apache.commons.lang.StringUtils.isEmpty(cachedAuth, "No user_NAME_IN_CREDENTIALS_INTERACTIVE_INTERACTIVE_AUTHENTIALS, java.util.Collections.singleton(s.getAuthContext())))); } if (!(cachedAuthn.isProfileValid())) { throw new org.ovirt.engine.core.utils.EngineException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_NO_USER_NAME_IN_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE)))); } if (!(org.apache.commons.lang.StringUtils.isEmpty(csoConstants.getProfile()))) { throw new org.ovirt.engine.core.utils.EngineException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_NO_PROT_IN_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE)))); } return true; }
private java.lang.String authenticateUser(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, org.ovirt.engine.core.sso.Credentials userCredentials) throws java.io.IOException, javax.servlet.ServletException, org.ovirt.engine.core.sso.AuthentletException { if ((userCredentials == null) || (!(org.ovirt.engine.core.sso.utils.SsoUtils.isValidCredentials(request, userCredentials))) { throw new org.ovirt.engine.core.sso.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_INVALID_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE)))))); } try { org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_INVALID_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } catch (java.lang.Exception ex) { throw ex; } catch (java.lang.Exception ex) { throw ex; } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.utils.AuthenticationException ex) { throw ex; } }
@java.lang.Override public org.ovirt.engine.core.sso.utils.AuthResult doAuth(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.lang.Exception { org.ovirt.engine.core.sso.utils.NonInteractiveAuth.log.debug("Login Auth"); org.ovirt.engine.core.sso.utils.NonInteractiveAuth.log.debug("Login Auth"); org.ovirt.engine.core.sso.utils.Credentials credentials = new org.ovirt.engine.core.sso.SsoUtils.getUserCredentialsFromHeader(request); org.ovirt.engine.core.sso.utils.AuthResult retVal = new org.ovirt.engine.core.sso.utils.AuthResult(); if ((cached.getAttribute(request, credentials))) { retVal.setStatus(Authn.Authn.AuthResult.CREDENTIALS_INVALID); } else { retVal.setCredentials(caught); org.ovirt.engine.core.utils.AuthenticationUtils.handleCredentials(org.ovirt.engine.core.utils.SsoUtils.getSsoContext(request), request, credentials); retVal.setToken(((java.lang.String) (request.getAttribute(SsoConstants.HTTP_REQ_ATTR_TOKEN)))); if ((retVal.getToken())!= null) { org.ovirt.engine.core.utils.NonInteractiveAuth.log.debug("Authn.debug("Authn. "Credentials failed", "Authn.Authn.AuthResult.SUCCESS); } else { retVal.setStatus(Authn.Authn.AuthResult.SUCCESS); } } return retVal; }
@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { org.ovirt.engine.core.sso.Credentials credentials = org.ovirt.engine.core.utils.SsoUtils.getUserCredentialsFromHeader(request); boolean credentialsValid = false; try { credentialsValid = (cachedCredentials!= null) && (org.ovirt.engine.core.sso.AuthenticationException ex) { org.ovirt.engine.core.sso.AuthenticationException ex = org.ovirt.engine.core.utils.SsoUtils.getUserCredentialsFromHeader(request); boolean credentialsValid = false; try { credentialsValid = (cachedCredentials!= null) && (org.ovirt.engine.core.sso.AuthenticationException ex) { org.ovirt.engine.core.sso.utils.SsoUtils.getSsoUtils().add("The validating credentials: {}", ex.getMessage()); org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSession(request).setTempCredentials(cachedCredentials); response.sendRedirect(((request.getContextPath()) + (org.ovirt.engine.core.utils.SsoConstants.INTERACTIVE_LOGIN_URI))); } catch (java.lang.Exception ex) { org.ovirt.engine.core.utils.sso.SsoUtils.getSsoSession(request).setTempCredentials(caught, "Credentials in url: {}", SsoConstants.INTERFailedMessage); response.sendRedirect(((request.getContextPath()) + (org.ovirt.engine.core.utils.SsoUtils.INTERACTIVE_LOGIN_URI))); } } }
public org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo getQemuquqos(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newStorageDomainID, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, boolean shouldPrepareAndTeARD) { if (vdsId == null) { vdsId = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.getHostForExecution(storagePoolId, java.util.Collections.emptyList()); } org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = null; if (shouldBeareAnd teARD) { prepareImage(storagePoolId, new org.ovirt.engine.core.common.businessentities.storage.QosInfo(vdsId, storagePoolId, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, newImageGroupId, newImageId, newImageId)).getReturnValue())); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log.error("Failed to get qos info from storage domain info from storage domain ID, newImageGroupId, newImageId, newImageId, vdsId, vdsId); } finally { if (shouldPrepareAndBeareAndBeareAndLeafacent) { throw new java.lang.Exception("Exception", e); } } return qos; }
public java.lang.Long determineImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.Image sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid srcDomain, org.ovirt.engine.core.compat.Guid imageGroupID) { if (isInitialSizeSupported(destFormat, dstDomain)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInfoFromStorage = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getVolumeInfoFromVdsm(storagePoolId, srcDomain, imageGroupID, sourceImage.getId()); return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.compareCowImageNeededSize(imageInfoFromStorage.getActualSizeInBytes()); } return null; }
public java.lang.Long determineTotalImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.DiskImage sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid dstDomain) { if (isInitialSizeSupportedForFormat(destFormat, dstDomain)) { double totalSizeForClonedDisk = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getTotalActualSizeOfDisk(sourceImage, storageDomain); return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.compareCowImageNeededSize(java.lang.Double.valueOf(totalSizeForClonedDisk).longValue()); } return null; }
public static java.lang.Long determineTotalImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.DiskImage sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid srcDomain) { if (org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.isInitialSizeSupportedForFormat(destFormat, srcDomain)) { double totalSizeForClonedDisk = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getTotalActualSizeOfDisk(sourceImage, org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().get(sourceImage.getVolumeFormat(), java.lang.Double.valueOf(totalSizeForClonedDisk).longValue()); return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.compareCowImageNeededSize(sourceImage.getVolumeFormat(), java.lang.Double.valueOf(totalSizeForClonedDisk).longValue()); } return null; }
private org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase createEvent() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); event.setVds(host); return event; }
private void verifyAuditLogableBaseF filledProperly(org.ovirt.engine.core.bll.network.NetworkConfigurator underTest, org.ovirt.engine.core.common.AuditLogType auditLogType) { try { underTest.createManagementNetworkIfRequired(); } catch (org.ovirt.engine.core.bll.network.NetworkConfigurator.NetworkConfiguratorException e) { verify(auditLogDirector).log(auditLogableBaseArgumentCaptor.capture(), eq(auditLogType), anyString()); final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase capturedEvent = auditLogableBaseArgumentCaptor.getValue(); assertThat(captureEvent.getVdsName(), is(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.HOST_NAME)); return; } fail("The test should proceed to Network ConfiguratorException"); }
@org.junit.Test public void testCreateManagementNetworkIfRequiredFailsOnDifferentVlanId() { host.setActiveNic(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NIC_NAME); nic.setVlanId(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NIC_NAME); managementNetwork.setVlanId(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.MANAGEMENT_NETWORK_VLAN_ID); managementNetwork.setVlanId(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.MANAGEMENT_NETWORK_VLAN_ID); try { underTest.createManagementNetworkIfRequired(); } catch (org.ovirt.engine.core.bll.network.NetworkConfigurator.NetworkConfiguratorException e) { verify(auditLogDirector).log(auditLogDirector).log(auditLogType.VLAN_ID_MISMATCH_FOR_MANAGEMENT_NETWORK_CONFIGURATION), anyString()); final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase capturedEvent = auditLogableBaseArgumentCaptor.getValue(); assertThat(captureEvent.getVdsName(), is(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.HOST_NAME)); final java.util.Map<java.lang.String, java.lang.String> capturedCustomValues = capturedEvent.getCustomValues(); assertThat(captureCustomValues.vlanid", java.lang.String.valueOf(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NIC_NAME)); assertThat(captureCustomValues.interfaces, hasEntry("vlanid", java.lang.String.valueOf(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.MANAGEMENT_NETWORK_ID))); assertThat(captureCustomValues.interfaces, hasEntry("vlanid", java.lang.String.valueOf(org.ovirt.engine.core.bll.network
public static <T> java.util.List<java.lang.String> validateInputs(java.util.List<java.lang.Class<?>> validationGroupList, T parameters) { java.util.List<java.lang.String> messages = java.util.Collections.emptyList(); java.util.Set<javax.validation.ConstraintViolation<T>> violations = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, validationGroupList.toArray(new java.lang.Class<?>[validationGroupList.toArray(new java.lang.Class<?>[validationGroupList.size()])); if (!(violations.isEmpty())) { messages.add(convertConstraintViolation<T> constraintViolation.getMessage()); for (javax.validation.ConstraintViolation<T> constraintViolation : violations) { messages.add(constraintViolation.getMessage()); javax.validation.MetadataContriptor<?> constraintDescriptor = constraintViolation.getConstraintDescriptor(); if (constraintDescriptor!= null) { java.util.Map<java.lang.String, java.lang.Object> violationDescription = constraintDescriptor.getAttributes(); for (java.util.Map.Entry<T> violationAttribute : violationAttributes.entrySet()) { java.lang.String message = java.lang.String.format("%s %s", violationAttribute.getKey(), violationAttribute.getValue()); messages.add(org.ovirt.engine.core.common.utils.ValidationUtils.createSetVariableString("path", constraint.getPropertyPath())); } } } if ((constraintViolation.getPropertyPath())!= null) { messages.add(org.ovirt.engine.core.common.utils.ValidationUtils.createSetVariableString("validateValue", "validatedValue", constraint.getInvalidValue())); } } return org.ovirt.engine.core.common.utils.ValidationUtils.createSetVariableString("validateValue", "); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { setIsFingerprintVerified(false); if (((getGlusterHostAddress().getEntity()) == null) || ((getGlusterHostAddress().getEntity().trim().trim().length()) == 0)) { getGlusterHostFingerprint().setEntity(""); return; } fetchFingerprint(getGlusterHostAddress().getEntity(), 22); }
@java.lang.Override public void sendMessage(byte[] message) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { try { waitForConnect(); } finally { org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message msg = new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message().send().withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_DESTINATION, this.getRequestQueue()).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_REPLY_TO, getResponseQueue()).withHeader(message); send(addCorrelationId(msg).build()); } }
@java.lang.Override public void sendMessage(byte[] message) { org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message msg = new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message().send().withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_DESTINATION, this.getRequestQueue()).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_REPLY_TO, getResponseQueue()).withHeader(message); send(addCorrelationId(msg).build()); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runInternalQuery(VDSCommandType.HOST_LOG_VAR_VM_NAME, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmName()); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsReturnValue = runInternalQuery(VDSCommandType.HotUnplugMemory, new org.ovirt.engine.core.common.vdscommands.VDSReturnValueVDSCommandParameters(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getRunOnVds(), getDeviceToHotUnplug())); if (!(vdsReturnValue.getSucceeded())) { addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmNextRunOnVds(), new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId())).getVdsError().getMessage()); java.util.List<org.ovirt.engine.core.common.businessentities.VM> getReturnValue = runInternalQuery(VdcQueryType.GetVmNextRunConfiguration, new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId())).getReturnValue()); java.util.Collections.singletonList(nextRunConfigurationStatic.getMemSizeMb()) - (org.ovirt.engine.core.bll.HotPlugUnplugMemoryCommand.getVmId())).<org.ovirt.engine.core.common.businessentities.VM> getReturnValue().getStaticData(); final int finalMemorySize = (nextRunConfigurationStatic.getMemSizeMb()) - (org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getStaticData().getStaticData().getMessage()); final org.ovirt.engine.core
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if ((getDeviceToHotUnplug()) == (org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getStatus())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_NEEDS_TO_BE_UP, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("vmId", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("vmId", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getName()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("currentVmState", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getStatus())); } if ((getDeviceToHotUnplug()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_MEMORY_DEVICE_NOT_FOUND, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("memorySize", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getMemorySizeMb()), org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId())); } return true; }
private void updateVm(org.ovirt.engine.core.common.businessentities.VmStatic nextRunConfigurationStatic, int finalMemorySize) { nextRunConfigurationStatic.setMemSizeMb(finalMemorySize); }
public void setReturnValue(org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValueFailure) { org.ovirt.engine.core.bll.HotUnplugMemoryCommand.setSucceeded(false); final org.ovirt.engine.core.common.errors.EngineFault engineFault = new org.ovirt.engine.core.common.errors.EngineFault(); engineFault.setError(returnValueFailure.getVdsError().getCode()); engineFault.setMessage(returnValueFailure.getVdsError().getMessage()); org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getReturnValue().setFault(engineFault); }
java.lang.String ACTION_TYPE_FAILED_VM_NEEDS_NEED();
java.lang.String ACTION_TYPE_FAILED_VM_MEMORY_NOT_FOUND();
public static java.lang.Integer getSizeOfMemoryDeviceMb(org.ovirt.engine.core.common.businessentities.VmDevice memoryDevice) { if ((memoryDevice.getType())!= (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY)) { throw new java.lang.RuntimeException(java.lang.IllegalArgumentException(java.lang.String.format("$s %s, %s", memoryDevice.getType())); } return ((java.lang.Integer) (memoryDevice.getSpecParams().get(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_SIZE))); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { return java.util.Collections.singletonList(new org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getVmId(), org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getActionType().getActionGroup())); }
protected boolean isDeviceToHotUnplug() { if ((deviceToHotUnplug) == null) { return false; } return true; }
@java.lang.Override protected void init() { super.init(); setVmId(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getVmId()); }
private org.ovirt.engine.core.common.businessentities.VmDevice computeDeviceToHotUnplug() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> memoryDevices = vmDeviceDao.getVmDeviceByVmIdAndType(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId(), VmDeviceGeneralType.MEMORY); final java.util.Collections.reverse(repositionMemoryDevices); return memoryDevices.stream().filter((device) -> java.util.Collections.singleton(getParameters().getMemorySizeMb(), org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getSizeOfMemoryDeviceMb(device))).findFirst().or()); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { final java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> result = new java.util.HashMap(super.getSharedLocks()); result.put(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId().toString(), org.ovirt.engine.core.bll.LockMessage.makeLockingPair(LockingGroup.VM, new org.ovirt.engine.core.common.action.LockMessage(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_BEING_UPDATED).with("vmName", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmName()))); return result; }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getReturnValue().getSucceeded()? org.ovirt.engine.core.common.AuditLogType.REMOVE_HOT_UNPLUGGED : org.ovirt.engine.core.common.AuditLogType.HOT_HOT_UNPLUGGED; }
private void setQosConver(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.common.businessentities.storage.DiskImage newDiskImage) { if (newDiskImage.getVolumeFormat().equals(VolumeFormat.COW)) { newDiskImage.setQOWCompat(QOW2); org.ovirt.engine.core.common.businessentities.StoragePool sp = storagePoolDao.get(storagePoolId); if ((sp!= null) && (org.ovirt.engine.core.common.FeatureSupported.qowCompatSupported(sp.getCompatibilityVersion()))) { org.ovirt.engine.core.common.businessentities.storage.Qos sp = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getQos(storagePoolId, storageDomainId, diskId, null, true); if (qos!= null) { newDiskImage.setQos(qos); } } }
private void setQosCompat(org.ovirt.engine.core.common.businessentities.storage.DiskImage newDiskImage) { if (newDiskImage.getVolumeFormat().equals(VolumeFormat.COW)) { try { setQOTACompatByQos(newDiskImage.getStoragePoolId(), newDiskImage.getId(), newDiskImage.getImageId(), org.ovirt.engine.core.bll.storage.disk.image.image.Image.getParameters().getStorageDomainId(), newDiskImage); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Unable to update the image info for image '{}' (image group: '{}') on domain '{}' on domain '{}'", newDiskImage.getImageId(), org.ovirt.engine.core.bll.storage.disk.image.image.image.RegisterDiskCommand.getParameters().getStorageDomainId(), newDiskImage.getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.image.RegisterDiskCommand.getParameters().getStorageDomainId()); } } }
protected org.ovirt.engine.core.common.businessentities.VM setUpVm(org.ovirt.engine.core.compat.Guid id) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = control.createMock(org.ovirt.engine.core.common.businessentities.VmStatic.class); expect(vmStatic.getId()).andReturn(id).anyTimes(); org.ovirt.engine.core.common.businessentities.VM vm = control.createMock(org.ovirt.engine.core.common.businessentities.VM.class); expect(vm.getId()).andReturn(id).andReturn(id).anyTimes(); return vm; }
private org.ovirt.engine.ui.frontend.server.snapshot.Statum populateUtilizationCache() throws org.ovirt.engine.ui.frontend.server.snapshot.StatizeUtilizationCacheException { long startTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.Tabboard dashboard = getDashboard(); long endTime = java.lang.System.currentTimeMillis(); double endTime = java.lang.System.currentTimeMillis(); dashboardCache.put(org.ovirt.engine.ui.frontend.server.dao.DashboardDataServlet.UTILIZATION_KEY, dashboard, org.ovirt.engine.ui.frontend.server.gwt.tab.Tabboard.Utils.utronize(org.ovirt.engine.ui.frontend.server.main.view.tab.TabboardDataServlet.UTILIZATION_CACES_INTERVAL, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.ui.frontend.server.dialog.Tabboard.SnapshotDataServlet.log.debug("Cannot be {}", endTime(endTime - startTime)); return dashboard; }
private org.ovirt.engine.ui.frontend.server.Blank populateInventoryCache() throws org.ovirt.engine.ui.frontend.server.Analyzer.SYSTEM_KEY_KEY, org.ovirt.engine.ui.frontend.server.DashboardDataException { long startTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dater.Invoke invoker = lookupInventory(); long endTime = java.lang.System.currentTimeMillis(); volName = java.lang.System.currentTimeMillis(); volName.put(org.ovirt.engine.ui.frontend.server.dater.DashboardDataServlet.INVALIDORY_CACHE_UPDATE_INTERVAL, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.ui.frontend.server.gwt.dataprovider.DynamicDataServlet.log.debug("Theventencryptventencrypt", "} ms(endTime - startTime)); return invoke; }
private org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase createAuditLog(final org.ovirt.engine.core.common.businessentities.network.VmNic iface) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.setVmId(iface.getVmId()); logable.addCustomValue("MACAddr", iface.getMacAddress()); logable.addCustomValue("IfaceName", iface.getName()); return logable; }
@java.lang.Override public void init(final T model) { super.init(model); model.getPropertyChangedEvent().addListener((ev, sender, args) -> { org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel model1 = ((org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel) (sender)); java.lang.String propertyName = args.propertyName; if ("Message".equals(propertyName)) { getView().setMessageLabel(model1.getMessage()); } }); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().toggleSubnetVisibility(model.getExport().getEntity()); model.getExport().getEntityChangedEvent().addListener(model.getExport().getEntity()); model.getExport().getEntityChangedEvent().addListener(model.getExport().getEntity()); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().toggleSubnetVisibility(model.getProfiles().getIsAvailable()); model.getProfiles().getPropertyChangedEvent().addListener(model.getAddQosCommand()); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().getQosButton().setCommand(model.getAddQosCommand()); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().getQosButton().setCommand(model.getAddQosCommand()); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().getQosButton().setCommand(model.getAddQosCommand()); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().getQosButton().setCommand(model.getAddQosCommand()); }
public void addMenuItem(final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef) { final com.google.gwt.user.client.ui.MenuItem menuItem = new com.google.gwt.user.client.ui.MenuItem(buttonDef.getText(), ((com.google.gwt.user.client.Command) (event.getText(), ((com.google.gwt.user.client.Command) (event.getCommand()))).getEnabled().hide(); buttonDef.setEnabled(buttonDef.isEnabled(null)); buttonDef.addInitializeHandler((event) -> menuItem.setEnabled(buttonDef.enabled(null))); buttonPanelPopup.getMenuBar().addItem(menuItem); }
public boolean invokeAsString(com.google.gwt.core.client.JsArray<?> args, org.ovirt.engine.ui.webadmin.plugin.JsFunction.ErrorHandler errorHandler) { clearResultInformation(); return function.invoke(args, javax.ws.rs.ResultHandler.RESULT_TYPE_STRING, ((org.ovirt.engine.ui.webadmin.plugin.JsFunction.ResultHandler.result) (result) -> result) (result) { this.resultValue = result; }), errorHandler); }
public boolean invokeAsBoolean(com.google.gwt.core.client.JsArray<?> args, org.ovirt.engine.ui.webadmin.plugin.JsFunction.ErrorHandler errorHandler) { clearResultInformation(); return function.invoke(args, jsFunction.RESULT_TYPE_BOOLEAN, ((org.ovirt.engine.ui.webadmin.plugin.JsFunction.ResultHandler.result) (result) (result) -> result) { this.resultValue = result; }), errorHandler); }
public boolean invokeAsNumber(com.google.gwt.core.client.JsArray<?> args, org.ovirt.engine.ui.webadmin.plugin.JsFunction.ErrorHandler errorHandler) { clearResultInformation(); return function.invoke(args, javax.ws.rs.ResultHandler.RESULT_TYPE_NUMBER, ((org.ovirt.engine.ui.webadmin.plugin.JsFunction.ResultHandler.ResultHandler.RESULT_TYPE_NUMBER) (result) -> (result) { this.resultValue = jsFunction.RESULT_TYPE_NUMBER; }), errorHandler); }
@java.lang.Override protected void fillMenuBar(org.ovirt.engine.ui.common.widget.MenuBar menuBar) { if (used) { menuBar.addValue(Function); } else { menuBar.addItem(Function); } }
private org.ovirt.engine.ui.common.widget.MenuBar menuFor(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> item) { org.ovirt.engine.ui.common.widget.MenuBar menu = rootMenu(item); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> operationMap = item.getSetupModel().commandsFor(item); for (final java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> entry : operationMap.entrySet()) { final java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand> commands = entry.getValue(); if (entry.getKey().isUnary()) { assert (entry.getKey().isUnary()) { assert (entry.getKey().isUnary()) { assert (entry.getKey().isUnary()) { assert (command.getKey().isUnary()) { assertEquals(entry.getKey().getVerb(item), ((com.google.gwt.user.client.Command) (command.getKey(), commands.get(0)))); } } else { java.util.Collections.sort(new org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperationPanel(), new org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperationPanel(); for (final org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperationPanel model : entry.getKey().getSelectedItem()) { org.ovirt.engine.ui.common.widget.MenuBar menu = entry.getValue(); if (entry.getKey().getKey().getKey().getKey
protected void fillMenuBar(org.ovirt.engine.ui.common.widget.MenuBar menuBar) { if (used) { menuBar.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.removeFilter(), ((com.google.gwt.user.client.Command) (()))); } else { menuBar.addItem(policyUnit); } }
protected void addSubMenu(org.ovirt.engine.ui.common.widget.MenuBar menuBar) { org.ovirt.engine.ui.common.widget.MenuBar subMenu = new org.ovirt.engine.ui.common.widget.MenuBar(true); if ((position)!= 0) { subMenu.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.noPositionFilter(), ((com.google.gwt.user.client.Command) (())) { model.addFilter(policyUnit, used, 0); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.scheduling.panels.PolicyUnitPanel.MenuPopup.hide(); } })); }
private com.google.gwt.user.client.ui.PushButton createButton(com.google.gwt.resources.client.ImageResource imageResource) { com.google.gwt.user.client.ui.PushButton result = new com.google.gwt.user.client.ui.PushButton(new com.google.gwt.user.client.ui.Image(imageResource), ((com.google.gwt.event.dom.client.client.ClickHandler) (event.getClickHandler())))); result.setVisible(false); result.addStyleName(style.sllegacyButton()); result.addStyleName(style.tooltipButton()); result.addStyleName("tslv_sliderButton_pfly_fix"); return result; }
@java.lang.Override public void onFocus(com.google.gwt.event.dom.client.FocusEvent event) { eventHandler = com.google.gwt.user.client.Event.addNativePreviewHandler((event1) -> { com.google.gwt.user.client.NativePreviewHandler.addNativePreviewHandler((event1) -> { com.google.gwt.dom.client.NativeEvent.addNativePreviewHandler((event1) -> { com.google.gwt.dom.client.NativeEvent.NativePreviewHandler nativeEvent = event1.getNativeEvent(); if (((((nativeEvent.getKeyCode()) ==KeyCodes.KEY_ENTER) && (((event1.getTypeInt()) == (Event.ONKEYDOWN))) && (!(event1.isCance()))) { nativeEvent.preventDefault(); event1.cancel(); event1.cancel(); event1.cancel(); event1.cancel(); event1.cancel(); event1.cancel(); event1.cancel(); event1.cancel(); event1.cancel(); event1.cancel(); } }); }
private org.ovirt.engine.ui.common.widget.refresh.BaseRefreshRateOptionsMenu getRefreshOptionsMenu() { org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRate refreshOptionsMenu = new org.ovirt.engine.ui.common.widget.refresh.BaseRefreshRateOptionsMenu(true); refreshOptionsMenu.setStyleMenu(style.refreshRateMenu()); com.google.gwt.user.client.ui.MenuItem title = new com.google.gwt.user.client.ui.MenuItem(org.ovirt.engine.ui.common.widget.refresh.BaseRefreshRate, ((com.google.gwt.client.Command) (com.google.gwt.dom.client.Command) ((com.google.gwt.client.Command) (returnValue)).getRefreshRate()))); title.setEnabled(false); title.setStyleName(style.refreshRateTitle()); refreshOptionsMenu.addItem(title); java.util.Set<java.lang.Integer> refreshRates = org.ovirt.engine.ui.common.widget.refresh.AbstractRefreshRateOptionCommand(); org.ovirt.engine.ui.common.widget.refresh.BaseRefreshRateOptionCommand.getRefreshRates(); org.ovirt.engine.ui.common.widget.refresh.BaseRefreshRateOption command = new org.ovirt.engine.ui.common.widget.refresh.BaseRefreshRateOptionCommand(); org.ovirt.engine.ui.common.widget.refresh.BaseRefreshRateOption command = new org.ovirt.engine.ui.common.widget.refresh.BaseRefreshRateOptionCommand(); org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionMenuItem refreshRate = new org.ovirt.engine.ui.common.widget.refresh.BaseRefreshRateOptionMenuItem(refreshRate, command); refreshRateOption.setStyleName(style.refreshRateOption()); command.setMenuItem(refreshRateOption); if (itemIndex!= ((this.getItem()) - (getRefreshRateOption()) - (getRefreshRateOption())) {
@com.google.gwt.uibinder.client.UiHandler("uploadButton") void onUploadIconButton(com.google.gwt.event.dom.client.ClickEvent event) { hiddenPanel.clear(); final com.google.gwt.user.client.ui.FileInput inputFileWidget = new com.google.gwt.user.client.ui.FileUpload(); inputFileWidget.getElement().setAttribute("accept", "image/jpeg, image/png"); inputFileWidget.addChangeHandler(event1) -> readUploadedIconFile(inputFileWidget.getElement())); inputFileWidget.getElement().setTabIndex((-1)); hiddenPanel.add(inputFileWidget); inputFileWidget.add(inputFileWidget); inputFileWidget.add(inputFileWidget); inputFileWidget.click(); }
private void initMenuPopup(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>> actions) { menuPopup = new org.ovirt.engine.ui.common.widget.action.MenuPanelPopup(true); for (final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef : actions) { com.google.gwt.user.client.ui.MenuItem menuItem = new com.google.gwt.user.client.ui.MenuItem(buttonDef.getText(), ((com.google.gwt.user.client.Command) (()).getText(), ((com.google.gwt.user.client.Command) (())); })); menuItem.addStyleName(style.menuItem()); updateMenuItem(style.menuItem()); updateMenuItem(style.menuItem()); items.add(new org.ovirt.engine.core.common.utils.Pair(MenuItem, buttonDef)); }
private void createMenu(final java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> numaNodeList, int indexToSkip) { menuBar = new org.ovirt.engine.ui.common.widget.MenuBar(true); for (final org.ovirt.engine.core.common.businessentities.VdsNumaNode numaNode : numaNodeList) { final int nodeIndex = numaNode.getIndex(); menuBar.addItem(org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.messages.numaNode(nodeIndex), ((com.google.gwt.user.client.Command) (getVm().getId(), true, nodeModel.getIndex(), nodeIndex)); org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.hide(); }))); } if (nodeModel.isPinned()) { menuBar.addSeparator(); menuBar.addSeparator(); menuBar.addItem(org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.constants.unPinNode(), ((com.google.gwt.user.client.Command) (getVm().getId(), false, (-1)); org.ovirt.engine.ui.common.presenter.popup.na.DraggableVirtualNumaPanel.entrySet(); } }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (memoryHotUnplugCommand)) { onMemoryHotUnplug(); } else if (command == (cancelMemoryCommand)) { onMemoryHotUnplugCommand(null); } }
private void onMemoryHotUnplug(java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevice) { if ((vmDevice == null) || ((vmDevice.getType())!= (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY))) { return; } org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getSelectedItem(); if ((vmDevice == null) || ((vmDevice.getType())!= (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY))) { return; } }
@java.lang.Override public void initializeHandlers() { super.initializeHandlers(); getView().getHotUnplugged().addHandler(new org.ovirt.engine.ui.common.widget.CellClickHandler<org.ovirt.engine.core.common.businessentities.VmDevice>() { @java.lang.Override public void onClick(com.google.gwt.dom.client.NativeEvent event) { getModelProvider().getModel().onHotUnplug(vmDevice); } }); }
@org.ovirt.engine.ui.common.widget.uicommon.vm.Template("<button style=\"{0}' id=\"{0}</span>") com.google.gwt.safehtml.shared.SafeHtml button(java.lang.String id, java.lang.String hotUnplugLabel);
java.lang.String remove();
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation(org.ovirt.engine.core.bll.dwh.DwhHeartBeat.DWH_HEART_BEAT_METHOD) public void engineIsRunningNotification() { try { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("Transaction Heart Beat-Start: Start"); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.RequiresNew,()).thenReturn(new java.util.Date()); dwhHistoryTimekeepingDao.save(heartbeatVar); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("Exception", ex); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.error("Exception", ex); } }
@java.lang.Override protected void teawown() { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(()).executeCommand(()).executeCommand(()).executeCommand(VDSCommand.getParameters().getSucceeded())); }
private void setSessionUser(org.ovirt.engine.api.model.Session session) { org.ovirt.engine.api.model.User user = getUserResource().getUserByNameAndDomain(session.getUser().getUserName(), session.getUser().getDomain().getName()); if (user!= null) { session.getUser().setId(user.getId()); session.getUser().setHref(user.getHref()); session.getUser().getDomain().setId(user.getDomain().getId()); session.getUser().getDomain().setHref(user.getDomain().getHref()); } }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceGeneralEntity device) { return device.getAddress(); }
private void addPluggedColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice> pluggedColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice>() { @java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice feEntity object) { return object.isPlugged(); } }; pluggedColumn.makeSortable(); getTable().addColumn(pluggedColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.devicePluggedAlias(), "70px"); }
@java.lang.Override public void initializeHandlers() { super.initializeHandlers(); getView().getHotUnplugColumn().addHandler(new org.ovirt.engine.ui.common.widget.CellClickHandler<org.ovirt.engine.core.common.businessentities.VmDevice>() { @java.lang.Override public void onClick(com.google.gwt.dom.client.NativeEvent event, org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceModel vmDevice) { getModelProvider().getModel().onHotUnplug(vmDevice); } }); }
@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.common.widget.uicommon.vm.Context context, com.google.gwt.dom.client.Element parent, org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice FEEntity device, com.google.gwt.cell.client.ValueUpdater<org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice> valueUpdater) { super.onBrowserEvent(context, parent, device, event, valueUpdater); if (!(BrowserEvents.CLdater.CLUST.equals(event.getType()))) { return; } if (((parent.getFirstChildElement()) == null) || (!(parent.getFirstChildElement().isOrHasChild(com.google.gwt.dom.client.Element.as(event.getEventTarget())))) { return; } for (org.ovirt.engine.ui.common.widget.CellClickHandler<org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice> clickHandler : clickHandlers) { clickHandler.onClick(event, device); } }
@org.ovirt.engine.ui.common.widget.uicommon.vm.Template("<button style=\"{0}\" id=\"{1}</span>") com.google.gwt.safehtml.shared.SafeHtml disabledButton(java.lang.String id, java.lang.String hotUnplugLabel);
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.append(getName()); return getToStringBuilder().toString(); }
public boolean isBeingUnplugged() { return isBeingUnplugged; }
@java.lang.SuppressWarnings("unchecked") protected java.util.Collection<T> convertQueriedData(org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue) { return ((java.util.Collection<T>) (queryReturnValue.getReturnValue())); }
private void onMemoryHotUnplugConfirm() { org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.setConfirmWindow(null); final org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.setConfirmWindow(null); final org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice feEntity = ((org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY) (getType())!= (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY))) { return; } }); if ((vmDevice) == null) || ((vmDevice.getType())!= (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY))) { return; } }); updateItems(); log(("The memoryHotUnplugCommand " + vmDevice)); }
@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder getToStringBuilder() { return ((org.ovirt.engine.core.common.businessentities.VM) (getToBeLogged())) + (isBeingUnplugged()))); }
public void setBeingUnplugged(boolean isBeingPlugged) { this.vm = this.getVmDeviceDictionary.get(vmId); }
@java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceGeneralModel object) { return object.isManaged(); }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { setItems(java.util.Collections.singletonList(returnValue)); }
private void addDeviceTypeColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.VmDevice> deviceTypeColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.VmDevice>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice feEntity) { return device.getDevice(); } }; deviceTypeColumn.makeSortable(); getTable().addColumn(deviceTypeColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceType(), "70px"); }
private void updateItems() { java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice> items = org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getItems(); for (org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice feEntity : items) { vmDevice.setBeingUnplugged(devicesBeingHotUnplugged.contains(vmDevice)); } setItems(items); }
private int toSortingIndex(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceGeneralModel vmDevice) { return (vmDevice == null) || (!(org.ovirt.engine.ui.common.widget.uicommon.vm.HotUnplugCell.isHotUnpluggable(vmDevice)))? 0 : 1; }
@java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceGeneralObject object) { return object.getReadOnly(); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceGeneralEntity device) { return device.getSpecParams().toString(); }
public void onHotUnplug(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice feEntity) { if ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getEntity()) == null) { return; } if ((vmDevice) == null) || ((vmDevice.getType())!= (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY))) { return; } final java.lang.Integer memorySizeMb = ((java.lang.Integer) (vmDevice.getSpecParams().get("size"))); if (memorySizeMb == null) { return; } setSelectedItem(vmDevice); org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); confirmationModel.setTitle(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.constants.memoryHotUnplug()); confirmationModel.setHelpTag(HelpTag.template_not_found_on_export_domain); confirmationModel.setMessage(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.messages.memoryHotUnplugCommand); confirmationModel.getCommands().add(memoryHotUnplugCommand); }
@java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceGeneralModel object) { return object.isPlugged(); }
@java.lang.Override public void itemRemoved(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice item) { updateItems(); }
private void addAddressColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.VmDevice> deviceAddressColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.VmDevice>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice feEntity) { return device.getAddress(); } }; deviceAddressColumn.makeSortable(); getTable().addColumn(deviceAddressColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceAddress(), "555px"); }
private void addManagedColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice> managedColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice>() { @java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice feEntity object) { return object.isManaged(); } }; managedColumn.makeSortable(); getTable().addColumn(managedColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceManagedAlias(), "70px"); }
private void addSpecParamsColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.VmDevice> specParamsColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.VmDevice>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice feEntity) { return device.getSpecParams().toString(); } }; specParamsColumn.makeSortable(); getTable().addColumn(specParamsColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceSpecParamsAlias(), "300px"); }
private void addReadOnlyColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice> readonlyColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice>() { @java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice feEntity object) { return object.getReadOnly(); } }; readonlyColumn.makeSortable(); getTable().addColumn(readonlyColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceReadOnlyAlias(), "70px"); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceGeneralEntity device) { return device.getDevice(); }
private void validateUpdateWipeAfterDelete(org.ovirt.engine.core.common.businessentities.VMStatus status) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = createDiskImage(); disk.setWipeAfterDelete(false); when(diskDao.get(diskImageGuid)).thenReturn(disk); command.getParameters().getDiskInfo().setWipeAfterDelete(true); initializeCommand(createVm(status)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(command); }
private java.lang.String composeObjectId() { return org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseComposer(event, logType).compareObjectId(); }
private void compose(java.lang.StringBuilder builder, java.lang.String key, java.lang.String value) { if ((builder.length()) > 0) { builder.append(key).append(key).append(NAME_SEPARATOR).append(value); } builder.append(key).append(NAME_SEPARATOR).append(value); }
private boolean hasHostExternalStatus() { return ((getEvent().getVdsId())!= null) && ((org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus())!= null); }
@java.lang.Override protected boolean validate() { if (((getEvent()) == null) || (AuditLog.OVIRT_ORIGIN.equalsIgnoreCase(getEvent().getOrigin()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_EXTERNAL_EVENT_ILLEGAL_ORIGIN); } return true; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionList = getPermissionList(getEvent()); if (hasHostExternalStatus()) { permissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(getEvent().getVdsId(), org.ovirt.engine.core.common.VdcObjectType.VDS, org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_HOST_CONFIGURATION)); } if (hasStorageDomainExternalStatus()) { permissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(getEvent().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_STORAGE_DOMAIN_CONFIGURATION)); } return permissionList; }
private boolean hasStorageDomainExternalStatus() { return ((getEvent().getStorageDomainId())!= null) && ((org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus())!= null); }
protected void addStorageDomainInDb() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(()).executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(()).executeInNewTransaction(new org.ovirt.engine.core.common.businessentities.StorageDomainStatic(getStorageDomain().getId(), null)); getReturnValue().setActionReturnValue(getStorageDomain().getId()); storageDomainDynamicDao.save(newStorageDynamic); getCompensationContext().snapshotNewEntity(newStorageDynamic); getCompensationContext().stateChanged(); return null; }
private void doBackupCheck() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase alert = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); org.ovirt.engine.core.common.businessentities.EngineBackupLog lastDbBackup = getLastBackupByScope(org.ovirt.engine.core.bll.EngineBackupAwarenessManager.BackupScope.DB); org.ovirt.engine.core.common.businessentities.EngineBackupLog lastFilesBackup = getLastBackupByScope(org.ovirt.engine.core.bll.EngineBackupAwarenessManager.BackupScope.FILTER); if ((lastDbBackup == null) || (lastFilesBackup == null)) { auditLogDirector.log(alert, AuditLogType.ENGINE_NO_FULL_BACKUP); } else { java.lang.Integer backupAlertPeriodInDays = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.BackupAlertPeriodInDays); java.util.Date lastDbBackupDate = lastDbBackup.getDoneAt(); java.util.Date lastFilesBackupDate = lastDbBackup.getDoneAt(); java.util.Date lastFullBackupDate = ((lastDbBackupDate.compareTo(lastFilesBackupDate)) < 0)? lastDbBackupDate : lastFilesBackupDate; long diffInDays = ((java.util.Calendar.getInstance().getTimeInMillis()) - (lastFullBackupDate.getTime())) / (java.util.concurrent.TimeUnit.DAYS.DAYS.toMillis(1)); if (diffInDays > backupAlertPeriodInDays) { alert.addCustomValue("Date", lastFullBackupDate.toMillis(1)); } } }
private static java.lang.String getMessageOrNull(org.ovirt.engine.core.common.AuditLogType logType) { final java.lang.String key = logType.name(); try { return org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.resourceBundle.getString(key); } catch (java.lang.Exception e) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log.error("Message '{}' is not translated in '{}'", key, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getResourceBundleName()); return null; } }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.AuditLog event) { getCallsHandler().executeModification("InsertAuditLog", getExternalEventSqlParameterSqlParameter(event.isExternal())); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase.injectMembers(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent())); event.setExternal(true); java.lang.String message = truncateMessage(getEvent().getMessage()); switch (getEvent().getSeverity()) { case NORMAL : auditLogDirector.log(event, AuditLogType.EXTERNAL_EVENT_NORMAL, message); break; case ERROR : auditLogDirector.log(event, AuditLogType.EXTERNAL_EVENT_NORMAL, message); break; case ERROR : auditLogDirector.log(event, AuditLogType.EXTERNAL_EVENT_ERROR, message); break; caseALERT : org.ovirt.engine.core.common.businessentities.AuditLog auditLog = auditLogDao.getByOriginAndCustomEventId(getEvent().getOrigin(), getEventId()); if (auditLog!= null) { setActionReturnValue(auditLog.getAuditLogId()); } org.ovirt.engine.core.bll.AddExternalEventCommand.setSucceeded(true); } if (hasHostExternalStatus()) { setActionReturnValue(true); } if (hasHostExternalStatus()) { setActionReturnValue(getAuditLogType().getVdsId(), org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus()); } if (hasHostExternalStatus()) { storageDomainExternalStatus = (org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus())) { addActionReturnValue(true); } } if (hasHostExternalStatus()) { setActionReturnValue(true); } }
private void auditLogFailedToConnect() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); }
public boolean discover() { boolean dbUpdated = false; java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult> discoveryResult = broker.runDiscover(); if (discoveryResult.isPresent()) { updateDB(discoveryResult.get()); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.debug("Failed to get due for external broker."); dbUpdated = true; } else { org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.debug("Failed to to broker. '{}'", null); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn("Failed returned empty result whentalking to broker. Disabling external units"); java.util.List<org.ovirt.engine.core.common.scheduling.PolicyUnit>ailingPolicyUnits = policyUnitDao.getAll().stream().collect(java.util.Collections.Collectors.toList()); markExternalPoliciesAsDisabled(failPolicyUnits); dbUpdated = true; } return dbUpdated; }
private void hotSetMemory(int currentMemoryMb, int newAmountOfMemoryMb) { final int minMemoryDeviceSizeMb = MemorySizeOfMemoryCommand.HOT_MEMORY_SIZE_FACTOR_MB; final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> memoryDevices = org.ovirt.engine.core.bll.UpdateVmCommand.getVmDeviceUtils().getMemoryDevices(getVmId()); final boolean minPartSizeMb = (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSizeOfMemoryDeviceMb(device)) == minMemoryMb; if (minMemoryDevicePresent || (secondPartSizeMb == 0)) { hotPartSizeMb = (newAmountOfMemoryMb -imal(minimalMinutes))); return; } hotPlugMemoryDevice(currentMemoryMb, (minimalHotPlugDeviceSizeMb)); hotPlugMemoryDevice(currentMemoryMb, (minPartOfMemoryMb)); hotPlugMemoryDevice(minimalHotPlugDeviceSizeMb); }
private void hotPlugMemoryDevice(int currentMemoryMb, int newAmountOfMemoryMb) { org.ovirt.engine.core.common.action.HotSetAmountOfMemoryParameters params = new org.ovirt.engine.core.common.action.HotSetAmountOfMemoryParameters(newVmStatic, org.ovirt.engine.core.common.action.PlugActionParameters(newVmStatic, org.ovirt.engine.core.common.action.PlugActionParameters(newVmStatic, org.ovirt.engine.core.common.action.PlugActionParameters(newVmStatic, org.ovirt.engine.core.common.action.PlugActionParameters(newVmStatic, org.ovirt.engine.core.common.action.PlugActionParameters(newVmStatic, org.ovirt.engine.core.common.action.PlugActionParameters(newVmStatic)); if (!(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isHostedEngine())) { newVmStatic.setMemSizeMb((setAmountOfMemoryResult.getSucceeded()? newAmountOfMemoryMb : currentMemoryMb)); } hotSetMemSizeMb((setAmountOfMemoryResult.getSucceeded()? newAmountOfMemoryResult.getSucceeded() : currentMemoryResult.getSucceeded())); }
private void updateDefaultNetworkFilterIfRequired() { if (org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters().isUseDefaultNetworkFilterId()) { if (org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getVnicProfile().isPassthrough()) { org.ovirt.engine.core.common.businessentities.network.NetworkFilter networkFilter = org.ovirt.engine.core.bll.network.cluster.NetworkHelper.resolveVnicProfileDefaultNetworkFilter(networkFilterDao); if (networkFilter!= null) { final org.ovirt.engine.core.compat.Guid networkFilter = org.ovirt.engine.core.bll.network.cluster.NetworkHelper.resolveVnicProfileDefaultNetworkFilter(networkFilterDao); if (networkFilter!= null) { final org.ovirt.engine.core.compat.Guid networkFilter = networkFilter.getId(); setNetworkFilterId(networkFilter.getId()); setNetworkFilterId(networkFilter.getId()); } } } }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters(); boolean useDefaultNetworkFilterId = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters().isUseDefaultNetworkFilterId(); return ((((((((((validator.vnicProfileIsSet())) && (validate(validator.networkExists()))) && (validate(validator.networkQosExists()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.vnicProfileNameNotSetIfExternalNetwork()))) && (validate(validator.portMirroringNotSetIfExternalNetwork()))) && (validate(validator.validateCustomProperties(org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getReturnValue().getValidationMessages()))) && (validate(validator.validate(validator.validateDefaultNetworkFilterFlag(useDefaultNetworkFilterId)))) && (validate(validator.validate(validator.validate(validator.validateDefaultNetworkFilterFlag(useDefaultNetworkFilterId)))) && (validate(validator.validate(validator.validate(validator.validate(validator.validateDefaultNetworkFilter())))) && (validate(validator.validate(validator.validate(validator.validate(validator.validate(validator.validate(validator.validate(validator.validateNetworkFilter())))))); }
public boolean isUseDefaultNetworkFilterId() { return useDefaultNetworkFiterId; }
public java.lang.String getCustomCompatibilityVersion() { return customCompatibilityVersion; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.VdcActionType actionToExecute = org.ovirt.engine.core.bll.RunAsyncActionCommand.getParameters().getAction(); org.ovirt.engine.core.common.action.VdcActionParametersBase actionParameters = org.ovirt.engine.core.bll.RunAsyncActionCommand.getParameters().getActionParameters(); actionParameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMPcedure.COMPED); actionParameters.setParentCommand(VdcActionType.RunAsyncAction); actionParameters.setParentParameters(org.ovirt.engine.core.bll.RunAsyncActionCommand.getParameters()); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(actionToExecute, actionParameters, org.ovirt.engine.core.bll.RunAsyncActionCommand.cloneContextAndDetachFromParent()); org.ovirt.engine.core.bll.RunAsyncActionCommand.setSucceeded(true); }
public boolean isLegal() { if (useTimeout) { java.lang.String keyForCheck = "".equals(timeoutObjectId))? logType.toString() : timeoutObjectId; java.lang.String value = org.ovirt.engine.core.dal.CacheManager.getTimeoutBaseCache().getIfAbsentities(keyForCheck, keyForCheck, endTime, java.util.concurrent.TimeUnit.MILLISECONDS); return value; } return true; }
private boolean validateManagementNetworkAttachment() { final org.ovirt.engine.core.common.businessentities.network.Network managementNetwork; final org.ovirt.engine.core.compat.Guid managementNetworkId = org.ovirt.engine.core.bll.UpdateClusterCommand.getParameters().getManagementNetworkId(); if (managementNetwork == null) { managementNetwork = getDefaultManagementNetworkFinder().findDefaultManagementNetwork(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getStoragePoolId()); if (managementNetwork == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_DEFAULT_MANAGEMENT_NETWORK_NOT_FOUND); return false; } } else { managementNetwork = networkDao.get(managementNetworkId); if (managementNetwork == null) { addValidationMessage(EngineMessage.NETWORK_NOT_EXISTS); return false; } } managementNetworkCluster = createManagementNetworkCluster(managementNetwork); final org.ovirt.engine.core.bll.network.cluster.UpdateClusterNetworkClusterValidator networkClusterValidator = createManagementNetworkClusterValidator(); return validate(networkClusterValidator.managementNetworkChange()); }
private org.ovirt.engine.core.common.action.ColdMergeCommandParameters buildColdMergeParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage baseVolume, org.ovirt.engine.core.common.businessentities.storage.DiskImage topVolume) { org.ovirt.engine.core.common.businessentities.SubchainInfo subchainInfo = new org.ovirt.engine.core.common.businessentities.SubchainInfo(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStorageIds().get(0), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getImageGroupId(), baseVolume, topVolume); org.ovirt.engine.core.common.action.VdcActionParameters parameters = new org.ovirt.engine.core.common.action.ConcurrentLockParameters(org.ovirt.engine.core.bll.snapshots.NonMergeSnapshotSingleDiskCommand.getDiskImage().getStoragePoolIds().get(0), subgroupInfo); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMPcancelProcedure.COMPED); parameters.setParentCommand(org.ovirt.engine.core.bll.snapshots.NonMergeSnapshotSingleDiskCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.snapshots.NonEmptySnapshotSingleDiskCommand.getParameters()); return parameters; }
@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if ((o == null) || ((getClass())!= (o.getClass()))) { return false; } org.ovirt.engine.core.common.businessentities.SubchainInfo that = ((org.ovirt.engine.core.common.businessentities.SubchainInfo) (o)); return ((((java.util.Objects.equals(storageDomainId, that.storageDomainId)) && (java.util.Objects.equals(imageGroupId, that.imageGroupId))) && (java.util.Objects.equals(imageGroupGeneration, that.imageGroupId))) && (java.util.Objects.equals(baseImageGeneration, that.baseImageGeneration))) && (java.util.Objects.equals(baseImage, that.baseImageGeneration))) && (java.util.Objects.equals(baseImage, that.baseImage)); }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((getDomainId()) == null? 0 : storageDomainId.hashCode()); result = (prime * result) + ((imageType) == null? 0 : storageDomainId.hashCode()); result = (prime * result) + ((imageId) == null? 0 : storageDomainId.hashCode()); result = (prime * result) + ((imageId) == null? 0 : rootImageId.hashCode()); result = (prime * result) + ((imageId) == null? 0 : rootImageId.hashCode()); result = (prime * result) + ((storageDomainId) + ((imageId) == null? 0 : storageDomainId.hashCode()); result = (prime * result) + ((storageDomainId) == null? 0 : storageDomainId.hashCode()); result = (prime * result) + ((storageDomainId) + ((imageId) == null? 0 : storageDomainId.hashCode()); result = (prime * result) + ((storageDomainId) + (lastId) + ((imageId) == null? 0 : id.hashCode()); result = (prime * result) + ((imageId) + (lastId) + (lastId) + (lastImageId)) + ((imageId) + (lastImageId) + (lastId) + (lastImageId)) + ((imageId) + (lastId) + (lastId) + (lastImageId)) + ((imageId) + (lastImageId) + (targetImageId))); return result; }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDisksListForStorageAllocations() { return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getSnapshotsDummiesForStorageAllocations(getSourceImages()); }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("storageDomainId", storageDomainId=").append(imageGroupId).append(", imageGroupId=").append(", imageGroupId).append(", topImage=").append(baseImage).append(baseImage).append(", topImageGeneration=").append(baseImageGeneration=").append(", baseImageGeneration).append(", baseImageGeneration).append(", baseImageGeneration).build(); }
private void updateVmDeviceWithDataReturnedFromHost(org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue) { if ((vdsReturnValue.getSucceeded()) && ((org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getAction()) == (org.ovirt.engine.core.common.action.PlugAction.PLUG))) { org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoReturn vmInfoReturn = ((org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoReturnValueReturnValue) (vdsReturnValue.getReturnValue())); if ((vmInfoReturn.getVmInfo())!= null) { java.util.Map<java.lang.String, java.lang.Object> vmInfo = ((java.util.Map<java.lang.String, java.lang.Object>) (vmInfoReturn.getVmInfo())); for (java.lang.Object o : ((java.lang.Object[]) (vmInfoReturn.get(VdsProperties.Devices))); if (vmDevice.getId().getDeviceId().equals(device.getDeviceId())) { vmDevice.setAddress(vdsmDevice.get(VdsProperties.DeviceId, new org.ovirt.engine.core.common.businessentities.network.VmDevice(vmDevice.getVdsProperties()); } } } }
private void updateVmDeviceWithDataReturnedFromHost(org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue) { if ((vdsReturnValue.getSucceeded()) && ((org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getAction()) == (org.ovirt.engine.core.common.action.PlugAction.PLUG))) { org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoReturn vmInfoReturn = ((org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoReturnValue) (vdsReturnValue.getReturnValue())); if ((vmInfoReturn.getVmInfo())!= null) { java.util.Map<java.lang.String, java.lang.Object> vmInfo = ((java.util.Map<java.lang.String, java.lang.Object>) (vmInfoReturn.getVmInfo())); for (java.lang.Object o : ((java.lang.Object[]) (vmInfoReturn.get(VdsProperties.Devices)))); if (vmDevice.getId().getDeviceId().equals(vdsmDevice.getDeviceId())) { vmDevice.setAddress(vdsmDevice.get(VdsProperties.Address).toString()); } } } }
@java.lang.Override protected boolean validateInputManagementNetwork() { if (!(org.ovirt.engine.core.bll.AddClusterCommand.getParameters().isManagementNetwork())) { return false; } final org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorBase networkClusterValidator = createNetworkClusterValidator(); return ((validate(networkClusterValidator.networkBelongsToClusterDataCenter(org.ovirt.engine.core.bll.AddClusterCommand.getCluster(), managementNetwork))) && (validate(networkClusterValidator.managementNetworkNotExternal(managementNetwork)))) && (validate(networkClusterValidator.isManagementNetworkNotExternal(managementNetwork))); }
protected boolean validateSpaceRequirements() { if (isUnregisteredDiskExistsForCopyTemplate()) { return true; } org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = createStorageDomainValidator(); if (validate(storageDomainValidator.isDomainWithinThresholds())) { if ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getVmEntityType()) == (org.ovirt.engine.core.common.businessentities.VmEntityType.TEMPLATE)) { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getSnapshots().add(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage()); } else { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getSnapshots().addAll(diskImageDao.getAllSnapshotsForLeaf(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getImageId())); } return validate(storageDomainValidator.hasSpaceForDiskWithSnapshots(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage())); } return false; }
protected java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice>> getVmsWithVmDeviceInfoForDiskId() { if ((cachedVmsDeviceInfo) == null) { cachedVmsDeviceInfo = vmDao.getVmsWithPlugInfo(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getId()); } return cachedVmsDeviceInfo; }
@java.lang.Override protected void init() { cachedParamsToDisks = org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters().getParametersList().stream().collect(java.util.stream.Function.toMap(java.util.stream.Function.toMap(java.util.stream.Function.toMap(java.util.concurrent.Function.singleton, (p)))); }
private boolean isTemplate() { return!(((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getVmEntityType()) == null) || (!(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getVmEntityType().isTemplateType()))); }
protected boolean checkTemplateInDestStorageDomain() { if (((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move)) && (!(Guid.Empty.equals(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getImageTemplateId())))) { org.ovirt.engine.core.common.businessentities.storage.DiskImage templateImage = diskImageDao.get(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getImageTemplateId()); if (!(templateImage.getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN); } } return true; }
protected boolean isImageExist() { if ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_EXIST); } return true; }
protected org.ovirt.engine.core.bll.validator.storage.MultipleDiskVmElementValidator createMultipleDiskVmElementValidator() { return new org.ovirt.engine.core.bll.validator.storage.MultipleDiskVmElementValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage(), diskVmElementDao.getAllDiskVmElementsByDiskId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getImageGroupID())); }
private java.lang.String getDiskIsBeingMigratedMessage() { if ((cachedDiskIsBeingMigratedMessage) == null) { cachedDiskIsBeingMigratedMessage = new org.ovirt.engine.core.bll.LockMessage(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_IS_BEING_MIGRATED).withOptional("DiskName", ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage())!= null? getDiskAlias() : null)).toString(); } return cachedDiskIsBeingMigratedMessage; }
protected boolean checkOperationIsCorrect() { if ((((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move)) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getVmEntityType())!= null)) && (org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getVmEntityType().isTemplateType())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISK_IS_NOT_VM_DISK, java.lang.String.format("$%1$s %2$s", "diskAliases", org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getDiskAlias())); } return true; }
protected org.ovirt.engine.core.bll.validator.storage.DiskValidator createDiskValidator() { return new org.ovirt.engine.core.bll.validator.storage.DiskValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage()); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage())!= null? org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getId() : org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getId())); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> getQuotaStorageConsumptionParameters() { java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> list = new java.util.ArrayList<>(); list.add(new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter(getDestinationQuotaId(), null, QuotaConsumptionParameter.QuotaAction.CONSUME, org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId(), ((double) (org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getSizeInGigabytes())))); if ((org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move) == (org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation())) { if (((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getQuotaId())!= null) && (!(Guid.Empty.equals(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getQuotaId())))) { list.add(new org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getQuotaId(), null, QuotaConsumptionParameter.QuotaAction.RELEASE, org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getSourceDomainId())); } } return null; }
protected boolean setAndValidateDiskProfiles() { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().setDiskProfileId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getDiskProfileId()); return validate(diskProfileHelper.setAndValidateDiskProfiles(java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getCurrentUser())); }
protected boolean isImageNotLocked() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage(); if ((diskImage.getImageStatus()) == (org.ovirt.engine.core.common.businessentities.storage.ImageStatus.LOCKED)) { if ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED, java.lang.String.format("$%1$s %2$s", "diskAliases", diskImage.getDiskAlias())); } else { return failValidation(EngineMessage.VM_TEMPLATE_IMAGE_IS_LOCKED); } } return true; }
protected boolean validateDestStorage() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain()); if ((!(validate(validator.isDomainExistAndActive()))) || (!(validate(validator.domainIsValidDestination())))) { return false; } boolean moveOrCopy = ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move)) || ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy)); if ((moveOrCopy && (org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().isShareable())) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLUSTERFS))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CANT_MOVE_SHAREABLE_DISK_TO_GLUSTERFS, java.lang.String.format("$%1$s %2$s", "diskAlias", "diskAlias", "diskAlias", org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getDiskAlias())); } return true; }
@java.lang.Override protected void executeCommand() { if (isUnregisteredDiskExistsForCopyTemplate()) { addDiskMapping(); return; } org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters p = prepareChildParameters(); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcRetValue = runInternalActionWithTasksContext(getImagesActionType(), p); if (!(vdcRetValue.getSucceeded())) { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.setSucceeded(false); org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getReturnValue().setFault(vdcRetValue.getFault()); } else { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.setSucceeded(true); if (((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy)) && (!(isTemplate()))) { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getReturnValue().setFault(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage()); } }
protected org.ovirt.engine.core.common.businessentities.VmTemplate getTemplateForImage() { if ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage()) == null) { return null; } java.util.Collection<org.ovirt.engine.core.common.businessentities.VmTemplate> templates = vmTemplateDao.getAllForImage(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getImageId()).values(); return!(templates.isEmpty())? templates.iterator().next() : null; }
protected boolean checkIfNeedToBeOverride() { if ((((isTemplate()) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy))) && (!(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getForceOverride()))) && (!(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getId()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_ALREADY_EXISTS); } return true; }
protected boolean validateSourceStorageDomain() { org.ovirt.engine.core.compat.Guid sourceDomainId = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getSourceDomainId(); if ((sourceDomainId == null) || (Guid.Empty.equals(sourceDomainId))) { sourceDomainId = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getStorageIds().get(0); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(storageDomainDao.getForStoragePool(sourceDomainId, org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getStoragePoolId())); return validate(validator.isDomainExistAndActive()); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { if ((cachedPermsList) == null) { cachedPermsList = new java.util.ArrayList(); org.ovirt.engine.core.common.businessentities.storage.DiskImage image = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage(); org.ovirt.engine.core.compat.Guid diskId = (image == null)? org.ovirt.engine.core.bll.utils.PermissionSubject(diskId, org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.CONFIGURE_DISK_STORAGE)); cachedPermsList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK)); } return cachedPermsList; }
protected boolean isUnregisteredDiskExistsForCopyTemplate() { if ((isTemplate()) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy))) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk> unregisteredDisks = unregisteredDisksDao.getByDiskIdAndStorageDomainId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()); if (!(unregisteredDisks.isEmpty())) { return true; } } return false; }
private void prepareCopyNotTemplate(org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters parameters) { parameters.setAddImageDomainMapping(false); org.ovirt.engine.core.compat.Guid newImageId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.compat.Guid newId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.storage.DiskImage image = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage(); image.setId(newId); image.setImageId(newImageId); image.setImageId(newImageId); image.setStorageIds(new java.util.ArrayList()); image.getStorageIds().add(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()); image.getStorageIds().add(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()); image.getStorageIds().add(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getQuotaId()); image.setImageStatus(ImageStatus.LOCKED); image.setVmSnapshotId(null); image.setParentId(Guid.Empty); parameters.setDestinationImageTemplateId(newImageId); parameters.setDestinationImageGroupId(newId); parameters.setDestinationImageGroupId(newImageId); parameters.setDestinationImageGroupId(newId); }
private void addStorageDomainMapForCopiedTemplateDisk() { imageStorageDomainMapDao.save(new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getImageId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getQuotaId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getDiskProfileId())); }
protected void log() { final javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); try { auditLogDirector.log(this, org.ovirt.engine.core.bll.CommandBase.getAuditLogTypeValue()); } catch (final java.lang.RuntimeException ex) { log.error("Error during log command: {}", ex.getMessage()); log.debug("Exception", ex); } finally { org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); } }
java.lang.String message() default "BAD_IPV4_OR_IPV6_ADDRESS_FORMAT";
protected static org.ovirt.engine.core.dao.network.IDatabaseConnection getConnection() throws java.lang.Exception { java.sql.Connection con = org.ovirt.engine.core.dao.BaseDaoTestCase.dataSource.getConnection(); org.dbunit.database.IDatype connection = new org.dbunit.database.DatabaseConnection(con); connection.getConfig().setProperty(Configuration.PROPERTY_ALLOW_EMPTY_FIELDS, true); connection.getConfig().setProperty(Configuration.PROPERTY_DATYPE_FACTORY, org.ovirt.engine.core.dao.BaseDaoTestCase.dataFactory); if (org.ovirt.engine.core.dao.BaseDaoTestCase.needInitializationSql) { try (java.sql.Statement stmt = con.createStatement()) { try (java.sql.Statement stmt = con.createStatement()) { try (org.ovirt.engine.core.dao.BaseDaoTestCase.initSql); } } return connection; }
public void setComment(java.lang.String value) { comment = value; }
@java.lang.Override public T mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { T entity = createNetworkEntity(); entity.setId(org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuidDefaultEmpty(rs, "id")); entity.setName(rs.getString("name")); entity.setDescription(rs.getString("name")); entity.setDescription(rs.getString("type"))); entity.setAddr(rs.getString("addr")); entity.setSubnet(rs.getString("addr")); entity.setSubnet(rs.getString("subnet")); entity.setSubnet(rs.getString("subnet")); entity.setVlanId(((java.lang.Integer) (rs.getObject("vlan_id")))); entity.setStp(rs.getBoolean("stp")); entity.setDataCenterId(org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuidDefaultEmpty(rs, "storage_pool_id")); entity.setMtu(rs.getBoolean("mtu")); entity.setMtu(rs.getBoolean("mtu")); entity.setVmNetwork(rs.getBoolean("vm_network")); org.ovirt.engine.core.compat.Guid providerId = org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuid(rs, "provider_network_external_id"); if (providerId!= null) { entity.setProvidedBy(new org.ovirt.engine.core.common.businessentities.network.ProviderNetwork(providerId, rs.getString("provider_network_external_id"))); } entity.setQosId(org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuid(rs, "provider_network_external_id")); entity.setQosId(org.ovirt.engine.core.dao.network.NetworkDaoImpl.
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource mapper = createIdParameterMapper(networkAttachment.getId()).addValue("network_id", networkAttachment.getNetworkId()).addValue("nic_id", networkAttachment.getNicId()).addValue("custom_properties", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(networkAttachment.getProperties())); mapIpConfiguration(networkAttachment, mapper); return mapper; }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.Network network) { return getCustomMapSqlParameterSource().addValue("addr", network.getAddr()).addValue("description", network.getDescription()).addValue("free_text_comment", network.getComment()).addValue("id", network.getName()).addValue("name", network.getName()).addValue("type", network.getType()).addValue("type", network.getType()).addValue("type", network.getType()).addValue("vlan_id", network.getType()).addValue("stp", network.getStp()).addValue("stp", network.getStp()).addValue("mtu", network.getStp()).addValue("vm_network", network.isVmNetwork()).addValue("vm_network", network.isVmNetwork()).addValue("provider_network_external_id", ((network.getProvidedBy()) == null? null : network.getProvidedBy().getExternalId()).addValue("provider_network_external_id", ((network.getProvidedBy()) == null? null : network.getProvidedBy().getExternalId()).addValue("qos_id", network.getQosId()).addValue("label", network.getLabel()).addValue("label", network.getLabel()).addValue("label", network.getLabel()).addValue("name_servers", new org.ovirt.engine.core.dao.DnsResolverConfigurationMapper(network.getDnsResolverConfiguration())); }
org.ovirt.engine.core.vdsbroker.vdsbroker.VmDevicesListReturn listVmDevicesList(java.util.List<java.lang.String> vmIds);
@java.lang.Override protected void executeVdsBrokerCommand() { vmDevicesListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.ListVmDevicesVDSCommand.getBroker().listVmDevices(org.ovirt.engine.core.vdsbroker.vdsbroker.ListVmDevicesVDSCommand.getParameters().getVmIds()); org.ovirt.engine.core.vdsbroker.vdsbroker.ListVmDevicesListVDSCommand.proceedProxyReturnValue(); setReturnValue(vmDevicesListReturn.getDevicesList()); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.VmDevicesListReturn listVmDevices(java.util.List<java.lang.String> vmIds) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.getVMDevices").withOptionalParameterAsList("vmList", vmIds).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("vmDevices").withResponseType(java.lang.Object[].class); return new org.ovirt.engine.core.vdsbroker.vdsbroker.VmDevicesListReturn(response); }
org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.VmStatic, org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel> getSubTabStorageLeaseModelProvider();
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmStatic getValue(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { return vmStatic; }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.VmStatic, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStorageLeasePresenter.constants.storageLeaseSubTabLabel(), 8, modelProvider); }
void initTable(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { if (storageDomain == null) { return; } getTable().ensureColumnResizing(); getTable().ensureColumnVisible(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.typeColumn, "", true, "30px"); getTable().ensureColumnVisible(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.aliasColumn, org.ovirt.engine.ui.webadmin.section.main.view.view.tab.storage.SubTabStorageLeaseView.constants.aliasDisk(), true, "120px"); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { return ((org.ovirt.engine.ui.webadmin.section.main.view.popup.cluster.ClusterPolicyPopupView.constants.vmStatic) (vmStatic)) && (getClusterId().equals(org.ovirt.engine.ui.webadmin.section.main.view.popup.cluster.ClusterPolicyPopupView.constants.vm_snapshotPopupView.constants.vm_snapshotPopupView.getValue())); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { return vmStatic.getName(); }
void initTableColumns() { getTable().enableColumnResizing(); org.ovirt.engine.ui.common.widget.table.column.AbstractColumn<org.ovirt.engine.core.common.businessentities.VmStatic, org.ovirt.engine.core.common.businessentities.VmStatic>(new org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.VmTypeCell()) { @java.lang.Override public org.ovirt.engine.core.common.businessentities.VmStatic getValue(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { return vmStatic; } }; org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.aliasColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.VmStatic>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { return vmStatic.getName(); } }; org.ovirt.engine.ui.webadmin.section.main.view.tab.tab.storage.SubTabStorageLeaseView.aliasColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.VmStatic>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { return vmStatic.getName(); } }; }
@java.lang.Override public void render(org.ovirt.engine.ui.webadmin.section.main.view.tab.Context context, org.ovirt.engine.core.common.businessentities.VmStatic vm, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { com.google.gwt.resources.client.ImageResource image = (Guid.Empty.equals(vm.getVmtGuid()))? org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.resources.templates.vmImage() : org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.resources.templatesImage(); sb.append(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(image).getHTML())); }
@java.lang.Override protected void syncSearch() { if ((getEntity()) == null) { setItems(null); return; } super.syncSearch(); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getEntity(); org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel storageDomain = ((org.ovirt.engine.ui.uicommonweb.models.storage.SetItemsModel) (getEntity())); org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel.getInstance().runQuery(VdcQueryType.GetVmsWithLeaseByStorageId, new org.ovirt.engine.core.common.queries.IdQueryParameters(storageDomain.getId()), new org.ovirt.engine.ui.uicommonweb.models.storage.SetItemsAsyncQuery()); }
private boolean isManagementNetworkChanged(org.ovirt.engine.core.common.businessentities.network.Network managementNetwork, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networksToConfigure) { java.lang.String mgmtNetworkName = managementNetwork.getName(); for (org.ovirt.engine.core.common.businessentities.network.Network network : networksToConfigure) { if (mgmtNetworkName.equals(network.getNetworkName())) { return true; } } for (org.ovirt.engine.core.common.action.CreateOrUpdateBond createOrUpdateBond : org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getCreateOrUpdateBonds()) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bondNic = getExistingNicsBusinessEntityMap().get(createOrUpdateBond.getId()); if ((bondNic!= null) && (mgmtNetworkName.equals(bondNic.getNetworkName()))) { return true; } } return false; }
private org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters createSetupNetworksParameters(int timeout) { org.ovirt.engine.core.common.vdscommands.HostSetupNetworksCommandParameters clusterSwitchType = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getCluster().getRequiredSwitchTypeForCluster(); java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networksToConfigure = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds().getClusterId(); java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networksToConfigure = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds().getClusterId(); java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networksToConfigure = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds().getVdsId(); if ((org.ovirt.engine.core.common.businessentities.network.NetworkInterface) (org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds().getClusterId())) { org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters hostCmdParams = new org.ovirt.engine.core.common.vdscommands.HostSetupNetworksParameters(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds(), net); hostCmdParams.setManagementNetworkChanged(managementNetworkChanged); hostCmdParams.setSucceeded(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getCreateBonds(), getRemovedBondName()); hostCmdParams.setSucceeded(true); return hostCmdParams; }
private void testFillReportedConfiguration(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, org.ovirt.engine.core.common.businessentities.network.HostNetworkQos networkQos) { nic.setNetworkName(network.getName()); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); networkAttachment.setNicId(baseNic, vlanNic)); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); networkAttachment.setNicId(baseNic.getId()); networkAttachment.setNicName(baseNic.getName()); networkAttachment.setNetworkId(network.getId()); networkAttachment.setNetworkId(network.getId()); when(eq(eq(clusterId))).thenReturn(networkQos); fillReportedConfiguration(networkAttachment, hostId); verify(filler).createNetworkInSyncWithVdsNetworkInterface(nic, nic, network, vds, vds, cluster); }
java.lang.String setDnsConfigurationLabel();
private void initValues() { if ((networkAttachment) == null) { return; } boolean newAttachment = (networkAttachment.getId()) == null) { return; } boolean newAttachment = (networkAttachment.getId()) == null; boolean attachmentNotReportedByTheEngine = (networkAttachment.getReportedConfigurations()) == null; boolean syncNetwork = attachmentNotReportedByTheEngine || (networkAttachment.getReportedConfigurations().isNetworkInSync()); boolean syncRequestedByUser = (getIsToSync().isNetworkInSync()); boolean syncRequestedByUser = (getIsToSync().isNetworkInSync()); if ((newAttachment || syncRequested) || syncRequestedByUser) { syncWith(new org.ovirt.engine.ui.uicommonweb.models.hosts.InterfacePropertiesAccessor.FromModel(networkAttachment, networkQos, nic)); } else { syncWith(new org.ovirt.engine.ui.uicommonweb.models.hosts.InterfaceProperties()); } this.getDnsResolver().setEntity(new org.ovirt.engine.ui.uicommonweb.models.hosts.InterfaceProperties()); }
@java.lang.Override public void edit(T model) { profilesEditor.edit(model.getProfiles()); subnetWidget.edit(model.getSubnetModel()); subnetWidget.edit(model.getSubnetModel().getNameServerModel(), list); }
@java.lang.Override public T flush() { profilesEditor.flush(); subnetWidget.flush(); subnetWidget.flush(); nameServerWidget.flush(); return null; }
@java.lang.Override protected void populateTabMap() { getTabNameMapping().put(TabName.IPV4_TAB, this.ipv4Tab); getTabNameMapping().put(TabName.IPV6_TAB, this.ipv6Tab); getTabNameMapping().put(TabName.QOS_TAB, this.qosTab); getTabNameMapping().put(TabName.CUSTOM_PROPERTIES_TAB, this.customPropertiesTab); getTabNameMapping().put(TabName.NAMES_CONFIGURATION_TAB, this.dnsConfigurationTab); }
public void init() { listenToSetDnsConfigurationCheckboxChanges(); setDnsConfiguration(shouldSetDnsConfiguration); java.util.List<org.ovirt.engine.ui.uicommonweb.models.configure.Configure.getInstance().getConstants().add(org.ovirt.engine.ui.uicommonweb.models.configure.Configuration.getValueListModel().getNameListModel().getEntityListModel().getEntity()).setEntity(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().getConstants().notSupported())); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel object) { driver.edit(object); qosWidget.edit(object); qosWidget.edit(object.getQosModel()); enableDisableByBootProtocol(object); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel model = ((org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel) (sender)); java.lang.String propertyName = args.propertyName; if ("BootProtocolsAvailable".equals(propertyName)) { enableDisableByBootProtocol(model); } } }); if (object.getIsToSync().getIsChangable()) { isToSyncInfo.setVisible(true); } customPropertiesTab.setVisible(object.getCustomPropertiesModel().getIsAvailable()); customPropertiesWidget.setEnabled(object.getCustomPropertiesModel().getIsChangable()); customPropertiesWidget.setEnabled(object.getCustomPropertiesModel().getIsChangable()); dnsConfigurationWidget.setEnabled(object.getCustomPropertiesModel().getIsChangable()); dnsConfigurationWidget.setEnabled(object.getCustomPropertiesModel().getIsChangable()); dnsConfigurationWidget.setEnabled(object.getCustomPropertiesModel().getIsChangable()); dnsConfigurationWidget.setVisible(true); dnsConfigurationWidget.setCustomPropertiesWidget(object.getCustomPropertiesModel()); }
private void listenToSetDnsConfigurationCheckboxChanges() { org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { setEventListener(setDnsConfiguration.getEntity()); }
public boolean validate() { if (!(getName().getEntity())) { return false; } java.util.List<org.ovirt.engine.core.common.businessentities.VDS> name = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.configure.NameServerModel name : this.getItems()) { if (!(nameServerModel.validate())) { return false; } } setIsValid(true); return isValid; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("IsChangable".equals(args.propertyName)) { boolean value = getIsChangable(); setDnsConfiguration.setIsChangeable(value); } }
public org.ovirt.engine.core.common.businessentities.network.DnsResolver flush() { java.lang.Boolean shouldSetDnsConfiguration = this.setDnsConfiguration(getName()); if (!shouldSetDnsConfiguration) { return null; } org.ovirt.engine.core.common.businessentities.network.DnsResolver<org.ovirt.engine.core.common.businessentities.network.Name> nameServers = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.datapconfigure.NameServerModel<org.ovirt.engine.core.common.businessentities.network.Name> serverModel : this.getItems()) { this.setName(nameServers); for (org.ovirt.engine.ui.uicommonweb.models.config.Config.<java.lang.String>getValue(nameServerModel.getItems()) { this.setName(name.getName()); } return dnsResolver; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { init(); }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getCustomValue() { return setDnsConfiguration; }
public boolean validate() { nameServerEntity.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.Ipv4OrIpv6AddressValidation() }); setIsValid(nameServerEntity.getIsValid()); return getIsValid(); }
public org.ovirt.engine.core.common.businessentities.network.NameServer flush() { return new org.ovirt.engine.core.common.businessentities.network.NameServer(this.nameServerEntity.getEntity()); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (((org.ovirt.engine.ui.uicompat.EventArgs) (getEntity()))!= null) { nameServerModel.setIsChangeable(setDnsConfiguration.getEntity()); } }
void initTable(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { if (storageDomain == null) { return; } getTable().ensureColumnResizing(); getTable().ensureColumnVisible(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.empty(), true, "30px"); getTable().ensureColumnVisible(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.empty(), true, "30px"); }
void initTableColumns() { getTable().enableColumnResizing(); org.ovirt.engine.ui.common.widget.table.column.AbstractColumn<org.ovirt.engine.core.common.businessentities.VmBase, org.ovirt.engine.core.common.businessentities.VmBase> getValue(new org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.VmTypeCell()) { @java.lang.Override public org.ovirt.engine.core.common.businessentities.VmBase getValue(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return vmBase; } }; org.ovirt.engine.ui.webadmin.section.main.view.tab.tab.storage.SubTabStorageSubTabStoragePool.constants.vmBaseTemplate(); }
public org.ovirt.engine.core.bll.ValidationResult validateUsbDevices(org.ovirt.engine.core.common.businessentities.VmBase vm) { if ((vm.getUsbPolicy()) == (org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_UNMANAGED_DEV_DEV_EXCEEDED_LIMIT, java.util.Collections.singletonMap(vm.getId())); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private void setVmLeasesAvailability() { TModel model = getModel(); org.ovirt.engine.core.compat.Version propVersion = model.getSelectedCluster().getCompatibilityVersion(); if ((model.getCustomCompatibilityVersion().getSelectedItem())!= null) { com.google.gwt.core.client.Version prop = model.getCustomCompatibilityVersion().getSelectedItem(); if (!(vmLeasesSupported)) { model.getLeases().setIsChangeable(false, constants.vmLeasesSupported()); } } else { model.getLease().setIsChangeable(false, constants.vmLeasesSupported()); } }
protected void commonInitialize() { priorityUtil = new org.ovirt.engine.ui.uicommonweb.models.vms.PriorityUtil(getModel()); virtioScsiUtil = new org.ovirt.engine.ui.uicommonweb.models.vms.VirtioScsiUtil(getModel()); getModel().getVmId().setIsAvailable(false); getModel().getLease().setIsChangeable(false); getModel().getIsHighlyAvailable().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean ha = getModel().getIsHighlyAvailable().getEntity(); getModel().getLease().setIsChangeable(((vmLeasesSupported) && ha)); if (!ha) { getModel().getLease().setSelectedItem(null); } } }); getModel().getMigrationPolicies().setItems(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getMigrationPolicies(org.ovirt.engine.core.compat.Version.getLast())); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean ha = getModel().getIsHighlyAvailable().getEntity(); getModel().getLease().setIsChangeable(((vmLeasesSupported) && ha)); if (!ha) { getModel().getLease().setSelectedItem(null); } }
private org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters createParameters() { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(diskId, vmId); dve.setReadOnly(true); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters parameters = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(); return parameters; }
@org.junit.Test public void testInactiveDomainInList() { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(StorageDomainStatus.Inactive); domainsList.add(tempStorageDomains); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.getMonitoredOrLocked(domainsList); assertFalse(listReturned.isEmpty()); }
private void testBusyAndActiveDomainInList(org.ovirt.engine.core.common.businessentities.StorageDomainStatus status) { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(status); domainsList.add(tempStorageDomains); tempStorageDomains.setStatus(StorageDomainStatus.Active); domainsList.add(tempStorageDomains); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.getMonitoredOrLockedDomainList(domainsList); assertEquals(2, listReturned.size()); }
@org.junit.Test public void testActiveDomainInList() { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(StorageDomainStatus.Active); domainsList.add(tempStorageDomains); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.getMonitoredOrLocked(domainsList); assertTrue((!(listReturned.isEmpty()))); }
protected boolean checkStorageDomainStatus(final org.ovirt.engine.core.common.businessentities.StorageDomainStatus... statuses) { return checkStorageDomainStatus(java.util.Collections.singleton(statuses)); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> getMonitoredOrLockedDomainList(java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList) { return domainsList.stream().filter((d) -> (org.ovirt.engine.core.bll.AddVmCommand.getParameters().getStatus())) || (d.getStatus().isStorageDomainInProcess())).collect(java.util.stream.Collectors.toList()); }
@org.junit.Test public void testEmptyDomainList() { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>(); listReturned = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>(); listReturned = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>(); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>(); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool>(); assertTrue(domainsList.getStorageDomainList(
private void testBusyDomainInList(org.ovirt.engine.core.common.businessentities.StorageDomainStatus status) { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(status); domainsList.add(tempStorageDomains); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.getMonitoredOrLockedDomainList(domainsList); assertTrue((!(listReturned.isEmpty()))); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDisksList() { if ((cachedSelectedActiveDisks) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesAndCinderForVm = getDiskImagesForVm(); if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDisks()) == null) { cachedSelectedActiveDisks = imagesAndCinderForVm; } else { cachedSelectedActiveDisks = getDiskImagesForVm().filter(d).filter(d).getDisks(); } } return cachedSelectedActiveDisks; }
@org.junit.Test public void testImagesDoesNotExist() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage1 = org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getNewDiskImage(); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage2 = org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getNewDiskImage(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImagesFromParams = new java.util.ArrayList<>(); diskImagesFromParams.addAll(java.util.Arrays.asList(diskImage1, diskImage2)); cmd.getParameters().setDisks(guidsForDiskImages); cmd.getParameters().setDisks(GuidsForDiskImages); cmd.getParameters().setDisks(guidsForDiskImages); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_DISKS_NOT_EXIST)).when(diskImagesValidator).diskImagesNotExist(guidsForDiskImages); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_DISKS_NOT_EXIST); }
protected org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters getCreateSnapshotParameters(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Set<org.ovirt.engine.core.compat.Guid> diskIds = vm.getDiskList().stream().stream().map(BaseDisk::getId().toString()); org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters params = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(vm.getId(), (((vm.getName()) + (org.ovirt.engine.core.bll.storage.DrendStorageSyncCommand.getStorageDomain().getName())) + (org.ovirt.engine.core.bll.storage.DrendCommand.getActionType()); params.setSnapshotType(SnapshotType.REGULAR); params.setParentParameters(org.ovirt.engine.core.bll.storage.DrendCommand.getActionType()); params.setSnapshotType(SnapshotType.REGULAR); params.setNeedsLocking(false); params.setNeeded(false); params.setEndProcedure(false); params.setEndProcedure(false); return params; }
private void fastForwardDisksToActiveSnapshot() { if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDisks())!= null) { getDiskImagesForVm().stream().filter((d) ->!(getParameters().getDisks().contains(d.getId()))))).forEach((d) -> org.ovirt.engine.core.bll.snapshots.image.SnapshotDao.updateImageVmSnapshotId(d.getImageId(), newActiveSnapshotId)); } }
private boolean isSpecifiedDisksExist(java.util.Set<org.ovirt.engine.core.compat.Guid> disks) { if ((disks == null) || (disks.isEmpty())) { return true; } org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = createDiskImageValidator(new org.ovirt.engine.core.bll.validator.DiskValidator(diskImagesValidator)); if (!(validate(diskImagesValidator.diskImagesNotExist(disks)))) { return false; } return true; }
@org.junit.Test public void validProviderType() { when(provider.getType()).thenReturn(ProviderType.OPENSTACK_NETWORK); assertThat(validator.providerTypeIsOpenstack(), isValid()); }
private void logBrickStatusChange(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick, final org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus fetchedStatus) { org.ovirt.engine.core.bll.gluster.GlusterSyncJob.log.debug("GlusterStatus fetcheduling status of brick '{}' changed from '{}' changed from '{}' to '{}' to '{}'", brick.getQualifiedName(), brick.getStatus(), brick.getStatus(), fetchedStatus); java.util.Map<java.lang.String, java.lang.String> customValues = new java.util.HashMap<>(); customValues.put(GlusterConstants.BRICK_PATH, brick.getQualifiedName()); customValues.put(GlusterConstants.OPTION_OLD_VALUE, brick.getStatus().toString()); customValues.put(GlusterConstants.OPTION_NEW_VALUE, fetchedStatus.toString()); logUtil.logAuditMessage(volume.getClusterId(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_CHANGED, customValues); if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.DOWN)) { logUtil.logAuditMessage(volume.getClusterId(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_DOWN, brick.getId(), brick.getQualifiedName()); } else if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.removeAlertsByBrickIdLogType(brick.getId(), AuditLogType.GLUSTER_BRICK_STATUS_DOWN, brick.getId(), brick.getQualifiedName()); } else if (fetchedStatus == (org.ovirt.engine.core.common.business
public void logServerMessage(final org.ovirt.engine.core.common.businessentities.VDS server, final org.ovirt.engine.core.common.AuditLogType logType) { logAuditMessage((server == null? org.ovirt.engine.core.compat.Guid.Empty : server.getClusterId()), (server == null? null : server.getClusterName()), null, server, logType, java.util.Collections.emptyMap()); }
public void logAuditMessage(final org.ovirt.engine.core.compat.Guid clusterId, final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.AuditLogType logType, final org.ovirt.engine.core.common.AuditLogType logType, final org.ovirt.engine.core.common.AuditLogType logType, final java.lang.String brickPath) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = createEvent(volume, server, server, clusterId, server.getClusterName()); logable.setBrickId(brickId); logable.setBrickPath(brickPath); logable.setBrickPath(brickPath); auditLogDirector.log(logable, logType); }
public void logAuditMessage(final org.ovirt.engine.core.compat.Guid clusterId, java.lang.String clusterName, final org.ovirt.engine.core.common.businessentities.VDS server, final org.ovirt.engine.core.common.businessentities.VDS server, final org.ovirt.engine.core.common.AuditLogType logType, final java.util.Map<java.lang.String, java.lang.String> customValues) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = createEvent(volume, server, cluster, clusterId); if (customValues!= null) { for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : customValues) { logable.addCustomValue(entry.getKey(), entry.getValue()); } } auditLogDirector.log(logable, logType); }
private java.util.Map<org.ovirt.engine.core.common.businessentities.storage.SyncLunsInfoForBlockStorageDomainCommand, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateHandler(org.ovirt.engine.core.compat.Guid lunFromVgLunId, org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateInDb(org.ovirt.engine.core.compat.Guid lunFromVgLunId, org.ovirt.engine.core.compat.Guid lunFromVgLunId) { setLunsIds(lunFromVgLunId, lunFromDbLunId, lunFromVgId, lunFromVgId, lunFromDbPvId); return getLunsToUpdateInDb(); }
private java.util.Map<org.ovirt.engine.core.common.businessentities.storage.SyncLunsInfoForBlockStorageDomainCommand.LunsInfo, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateHandler(java.util.Collections.singletonList(lunFromVg)); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = java.util.Collections.singletonList(lunFromDb); return command.getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb); }
@java.lang.Override protected void executeCommand() { final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = getLunsFromVgInfo(); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); java.util.Map<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.SyncLuns>> lunsToUpdateHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.SyncLuns>> lunsToUpdateHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.SyncLuns>> getLunsToUpdateHandler() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.SyncLunsInfo> lunsToUpdateHandler.lunUpdateHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.SyncLunsInfo> storageDomains>> getLunsFromVgInfoForVgInfo(lunsFromVgInfo, lunsFromDb); org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.setSucceeded(true); }
protected java.util.Map<org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsToUpdateHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDbMap = lunsFromDb.stream().collect(java.util.stream.Collectors.toMap(LUNs::getLUNId(), java.util.concurrent.Function.identification())); return lunsFromVgInfo.stream().collect(java.util.stream.Collectors.group(lunFromVgInfo.getLUNId(), java.util.stream.Function.identification())); }
protected void updateLunsInDb(java.util.Map<org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateInDbMap) { lunsToUpdateInDbMap.entrySet().forEach((entry) -> entry.getKey().accept(entry.getValue())); if (lunsToUpdateInDbMap.keySet().contains(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.Luns)) { java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsToUpdateInDb = lunsToUpdateInDbMap.entrySet().filter((entry) -> entry.getKey().stream().stream().stream().stream().stream(entry.getKey().filter(entry.getValue()).map(java.util.Map.Entry.Entry.entry.getValue().stream().filter(java.util.List.Entry.stream.toList()); } }
@org.junit.Test public void testGetLunsToUpdateInDbLunExistsInDbButNoInVgInfo() { org.ovirt.engine.core.compat.Guid lunFromDbId = org.ovirt.engine.core.compat.Guid.newGuid(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsToRemoveFromDb = getLunsToUpdateInDb(org.ovirt.engine.core.compat.Guid.newGuid(), lunFromDbId, org.ovirt.engine.core.compat.Guid.newGuid()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsToRemoveFromDb = getLunsToUpdateInDb(org.ovirt.engine.core.compat.Guid.newGuid()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsToRemoveFromDb = getLunsToRemoveFromDb(lunFromDbId); assertEquals(lunsToRemoveFromDb, lunFromDbId); }
@java.lang.Override protected void executeCommand() { final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = getLunsFromVgInfo(); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); java.util.Map<org.ovirt.engine.core.common.businessentities.storage.SyncLunsInfo> lunsToUpdateHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.SyncLuns>> lunsToUpdateHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.SyncLuns>> lunsToUpdateHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.SyncLuns>> lunsToUpdateHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.SyncLuns>> lunsToUpdateHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.SyncLuns>> lunsToUpdateHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.SyncLunsInfo> list) { updateLunsInDb(lunsToUpdateInDb); refreshLunsToUpdate.add(lunsFromVgInfo); return null; } }); org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.setSucceeded(true); }
@org.junit.Test public void testGetLunsToRemoveFromDb() { lunFromVg.setLUNId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); lunFromDb.setLUNId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); org.ovirt.engine.core.common.businessentities.storage.LUNs dummyLun = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); dummyLun.setId(((org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.DUMMY_LUN_ID_PREFIX) + (org.ovirt.engine.core.compat.Guid.newGuid().toString()))); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = java.util.Collections.singletonList(lunFromDb, dummyLun); assertTrue(command.getLunsToRemoveFromDb(lunsFromVgInfo, lunsFromDb), java.util.Collections.singletonList(lunFromDb))); }
public org.ovirt.engine.core.bll.ValidationResult allDomainsHaveSpaceForMerge(java.util.List<org.ovirt.engine.core.common.businessentities.SubchainInfo> snapshots) { final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.SubchainInfo> storageToSnapshots = getDomainsToSnapshotsMap(snapshots); return validator(entry.getKey()); }
public org.ovirt.engine.core.bll.ValidationResult hasSpaceForMerge(org.ovirt.engine.core.common.businessentities.SubchainInfo subchain, org.ovirt.engine.core.common.action.VdcActionType snapshotActionType) { if (storageDomain.getStorageType().isCinderDomain()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.lang.Long availableSize = storageDomain.getAvailableDiskSizeInBytes(); double totalSizeForDisks = getRequiredSizeForMerge(subchain, snapshotActionType); return validateRequiredSpace(availableSize, totalSizeForDisks); }
private double getRequiredSizeForMerge(org.ovirt.engine.core.common.businessentities.SubchainInfo subchain, org.ovirt.engine.core.common.action.VdcActionType snapshotActionType) { org.ovirt.engine.core.common.businessentities.storage.DiskImage baseSnapshot = subchain.getBaseImage(); org.ovirt.engine.core.common.businessentities.storage.DiskImage topSnapshot = subchain.getTopImage(); if (snapshotActionType == (topSnapshot.getActualSizeInBytes()) { return (java.lang.Math.min(((baseSnapshot.getActualSizeInBytes()) + (topSnapshot.getActualSizeInBytes()))), baseSnapshot.getSize()))); } org.ovirt.engine.core.common.businessentities.storage.VolumeType volumeType = (snapshotActionType == (org.ovirt.engine.core.common.action.VdcActionType.RemoveSnapshotSingleDisk))? baseSnapshot.getVolumeType() : topSnapshot.getVolumeType(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(baseSnapshot.getParentId())) { if ((baseSnapshot.getVolumeFormat()) == (org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.RAW)) { return 0.0; } return java.lang.Math.min(((topSnapshot.getActualSizeInBytes()) / (org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.RAW))? ((baseSnapshot.getActualSizeInBytes()) - (org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.QOS_OVERHEAD_FACTORAGE_FACTOR), ((baseSnapshot.getActualSizeInBytes()) - (baseSnapshot.getActualSizeInBytes()))); } }
private java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.SubchainInfo> getDomainsToSnapshotsMap(java.util.List<org.ovirt.engine.core.common.businessentities.SubchainInfo> snapshots) { return snapshots.stream().collect(java.util.stream.Collectors.toMap(Subnet.getStorageDomainId(), java.util.concurrent.Function.injector.identity())); }
protected javax.ws.rs.core.Response doAction(final org.ovirt.engine.core.common.action.VdcActionType task, final org.ovirt.engine.core.common.action.VdcActionParametersBase params, final org.ovirt.engine.api.model.Action action, org.ovirt.engine.api.restapi.resource.AbstractBackendResource.PollingType pollingType) { awaitGrace(action); try { org.ovirt.engine.core.common.action.VdcReturnValueBase actionResult = doAction(task, params); if ((actionResult.getJobId())!= null) { setJobLink(action, actionResult); } if ((actionResult.getHasAsyncTasks()) || ((actionResult.getJobId())!= null)) { if (expectBlocking(action)) { org.ovirt.engine.api.model.CreationStatus status = awaitCompletion(actionResult, pollingType); return actionStatus(status, action, addLinks(newModel(id))); } else { return actionAsync(actionResult, action); } } else { return actionSuccess(action, addLinks(newModel(id))); } } catch (java.lang.Exception e) { return handleError(e, action); } }
private void cancel() { org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel windowModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel) (getWindow())); setWindow(null); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> currentModels = windowModel.getCurrentProxies(); java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> items = currentModels.getItems(); items.remove(this); currentModels.setItems(null); currentModels.setItems(items); currentModels.setItems(items); }
private void onOk() { org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel windowModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel) (getWindow())); setWindow(null); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> currentModels = windowModel.getCurrentProxies(); org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel selectedModel = windowModel.getAvailableProxies().getSelectedItem(); setEntity(selectedModel.getEntity()); java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> items = currentModels.getItems(); currentModels.setItems(null); currentModels.setItems(items); currentModels.setItems(items); }
public boolean checkDomainMetadataDevices(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable, org.ovirt.engine.core.common.businessentities.StorageDomain domain) { if (((domain.getVgMetadataDevice()) == null) || ((domain.getFirstMetadataDevice()) == null)) { return false; } return true; }
public void fillMetadataDevicesInfo(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic, org.ovirt.engine.core.compat.Guid vdsId) { try { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.core.common.businessentities.StorageDomainStatic domainFromIrs = ((org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.StorageDomainStatic, org.ovirt.engine.core.compat.Guid>) (resourceManager.runVdsCommand(VDSCommandType.HSMGetStorageDomainInfo, new org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters(vdsId, storageDomainStatic.getId())).getReturnValue())).getFirst(); storageDomainStatic.setFirst(); storageDomainStatic.setVgMetadataDevice(domainFromIrs.getFirstMetadataDevice()); } catch (java.lang.Exception e) { storageDomainStatic.setFirstMetadataDevice(null); org.ovirt.engine.core.bll.storage.domain.BlockStorageDomainHelper.log.info("Failed to get the domain info", null); org.ovirt.engine.core.bll.storage.domain.BlockStorageDomainHelper.log.info("Failed to get the domain info", null); org.ovirt.engine.core.bll.storage.domain.BlockStorageDomainHelper.log.info("Failed to get the domain info", null); org.ovirt.engine.core.bll.storage.domain.BlockStorageDomainHelper.log.info("Failed to get the domain info, ignoring the domain info, ignoring"); org.ovirt.engine.core.bll.storage.domain.BlockStorageDomainHelper.log.info("Failed to get the domain info", null); org.ovirt.engine.core.bll.storage.domain.BlockStorageDomainHelper.log.info("Failed to get the domain info", null); org.ovirt.engine.core.bll.storage.domain.BlockStorageDomainHelper.log.info("Failed to get the domain info", storage
private void validateRetrievedMetadataDevices() { if (!(blockStorageDomainHelper.checkDomainMetadataDevices(this, org.ovirt.engine.core.bll.storage.domain.TransportalSANStorageDomainDevicesCommand.getStorageDomain()))) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.GeneralException, "The domain metadata devices"); } }
private void refreshMetadataDevicesInfo() { java.lang.String oldVgMetadataDevice = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice(); java.lang.String oldFirstMetadataDevice = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice(); if ((!(java.util.Objects.equals(oldVgMetadataDevice, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId()))) { storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); } blockStorageDomainHelper.checkDomainMetadataDevices(this, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain()); }
@java.lang.Override protected void executeCommand() { final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = getLunsFromVgInfo(); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); java.util.Map<java.lang.Function<java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateInDb = getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb); boolean dbShouldBeUpdated = (lunsToUpdateInDb.containsKey(updateExistingLuns)) || (lunsToUpdateInDb.containsKey(saveNewLuns)); if (dbShouldBeUpdated) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.common.businessentities.storage.LUNs>>() { @java.lang.Override public void executeInNewTransaction(org.ovirt.engine.core.common.businessentities.storage.LUNs luns) { updateLunsInDb(lunsToUpdateInDb); refreshLunsFromDb(lunsFromVgInfo); cleanupLunsFromDb(lunsFromVgInfo, lunsFromDb); return null; } }); } refreshMetadataDevicesInfo(); org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.setSucceeded(true); }
public boolean checkDomainMetadataDevices(org.ovirt.engine.core.common.businessentities.StorageDomain domain) { if (((domain.getVgMetadataDevice()) == null) || ((domain.getFirstMetadataDevice()) == null)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(domain.getName()); logable.setStorageDomainName(domain.getName()); auditLogDirector.log(logable, AuditLogType.FAILED_DETERMINE_STORAGE_DOMAIN_STATUS_DEVICES_DEVICES); return false; } return true; }
@javax.validation.constraints.NotNull private static org.ovirt.engine.api.model.IpVersion getIpVersion(java.lang.String address) { if (address == null) { throw new java.lang.IllegalArgumentException(("Unsupported out ip version for address: " + address)); } return address.contains((":") + (address)); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DnsResolver.class, to = org.ovirt.engine.api.model.DnsResolver.class) public static org.ovirt.engine.api.model.DnsResolver<org.ovirt.engine.core.common.businessentities.network.DnsResolver<org.ovirt.engine.core.common.businessentities.network.DnsResolver> map(org.ovirt.engine.api.model.DnsResolver<org.ovirt.engine.api.model.DnsResolver<org.ovirt.engine.core.common.businessentities.network.DnsResolver<org.ovirt.engine.core.common.businessentities.network.DnsResolver<org.ovirt.engine.core.common.businessentities.VmStatic> template) { org.ovirt.engine.api.model.DomainStatic domain = new org.ovirt.engine.core.common.businessentities.network.Name(); if (model.getName().getNameServers()) { org.ovirt.engine.api.model.Name template = model.getNameToSet().getNameServers(); if (model.getName().equals(org.ovirt.engine.api.restapi.types.DnsResolverMapper.toList())) { java.util.List<java.lang.String> name = name.getNameToMap(org.ovirt.engine.api.restapi.types.DnsResolver.DnsResolver.mapNameServer).map(org.ovirt.engine.api.restapi.types.DnsResolverMapper.toList())); } } return target; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DnsResolver.class, to = org.ovirt.engine.api.model.DnsResolver.class) public static org.ovirt.engine.api.model.DnsResolver<org.ovirt.engine.core.common.businessentities.network.DnsResolver<org.ovirt.engine.core.common.businessentities.network.DnsResolver<org.ovirt.engine.core.common.businessentities.network.DnsResolver<org.ovirt.engine.core.common.businessentities.network.DnsResolver<org.ovirt.engine.core.common.businessentities.network.Name, org.ovirt.engine.api.model.DomainType> template) { if (entity == null) { return null; } java.util.List<org.ovirt.engine.core.common.businessentities.network.Name> nameServers = new org.ovirt.engine.api.model.DnsResolver<org.ovirt.engine.core.common.businessentities.network.Name>(); if (entity == null) { return null; } java.util.List<java.lang.String> nameServers = new org.ovirt.engine.api.model.DnsResolver<org.ovirt.engine.core.common.businessentities.network.Name>(); dnsResolver.setName(nameServers); org.ovirt.engine.api.model.DnsResolver<org.ovirt.engine.api.model.DnsResolver<org.ovirt.engine.api.model.DnsResolver<org.ovirt.engine.core.common.businessentities.network.DnsResolver> map = new org.ovirt.engine.api.model.DnsResolver<org.ovirt.engine.api.model.DnsResolver<org.ovirt.engine.api.model.DomainType>(); dns.setName(name(nameServers); return dnsResolver.getName(); }
private static org.ovirt.engine.core.common.businessentities.network.NameServer mapNameServer(java.lang.String address) { switch (org.ovirt.engine.api.restapi.types.DnsResolverConfigurationMapper.getIpVersion(address)) { case V4 : return new org.ovirt.engine.core.common.businessentities.network.Name(address); case V6 : return new org.ovirt.engine.core.common.businessentities.network.Name(address); default : throw new java.lang.RuntimeException("Coding error, this should be unreachable."); } }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.ImageTransfer filteredGet(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userId, boolean isFiltered) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = createIdParameterMapper(id, org.ovirt.engine.core.compat.Guid userId, boolean isFiltered) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = createIdParameterMapper(id, userId, null); return getCallsHandler().executeRead("GetImageUploadsByCommandId", org.ovirt.engine.core.dao.ImageDao.getImageRowMapper(), getEntityRowMapper(), new org.ovirt.engine.core.common.businessentities.storage.ImageRowMapper(), getEntityRowMapper(), getEntityRowMapper(), sqlParams); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.disk.GetImageTransferByIdQuery.getQueryReturnValue().setReturnValue(imageTransferDao.filteredGet(org.ovirt.engine.core.bll.storage.disk.GetImageTransferByIdQuery.getParameters().getId(), org.ovirt.engine.core.bll.storage.disk.GetImageTransferByIdQuery.getUserID(), org.ovirt.engine.core.bll.storage.disk.GetImageTransferByIdQuery.getParameters().isFiltered())); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.ImageTransfer get(org.ovirt.engine.core.compat.Guid id) { return filteredGet(id, null, false); }
org.ovirt.engine.core.common.businessentities.storage.ImageTransfer filteredGet(org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid userId, boolean isFiltered);
@org.junit.Test public void testDefaultRouteWhenOutOfSync() { iface.setIpv4DefaultRoute(false); network.setDnsResolver(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); when(anyDnsResolver.get(0)).thenReturn(true); assertThat(createTested(true, mockDnsResolver).isNetworkInSync(), is(true)); }
private void addDnsConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations result) { boolean dnsResolverConfigurationSupported = org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.DnsResolverConfigurationSupported, this.cluster.getCompatibilityVersion()); if ((!(isDefaultRouteNetwork)) || (!dnsResolverConfigurationSupported)) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.network.Name> nameServersOfNetworkAttachment = getNameServers(networkAttachment.getDnsResolver(networkAttachment.getDnsResolver()); java.util.List<org.ovirt.engine.core.common.businessentities.network.Name> nameServersOfNetwork = getNameServers(reportedDnsResolver.getDnsResolver(network.getDnsResolver()); java.util.List<org.ovirt.engine.core.common.businessentities.network.Name> nameServersOfNetwork = getNameServers(reportedDnsResolver); boolean shouldSetDefaultRoute = new org.ovirt.engine.core.bll.network.host.ShouldSetDefaultRouteFlagAndDnsData().test(true, networkAttachment); boolean engineDefineDnsConfiguration = shouldSetDefaultRoute && ((nameServersOfNetworkAttachment!= null) || (nameServersOfNetwork!= null)); java.util.List<org.ovirt.engine.core.common.businessentities.network.Name> expectedNameServers = (nameServersOfNetworkAttachment!= null)? name.getName(nameServersOfHost), (engineDefineDns)? namesAsString(expectedNameServers) : ""), java.util.Collections.singletonList(nameServersOfHost, expectedNameServers)))); }
@java.lang.Override protected boolean isGhost(org.ovirt.engine.ui.uicommonweb.models.configure.NameServerModel value) { return (!(isGhost())) && (org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(value.getEntity())); }
private boolean canVmNumaPinnedToVds(java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes, org.ovirt.engine.core.common.businessentities.VDS vds) { java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> pNodes = vdsNumaNodeDao.getAllVdsNumaNodeByVdsId(vds.getId()); if ((pNodes == null) || (pNodes.isEmpty())) { return false; } java.util.Map<java.lang.Integer, org.ovirt.engine.core.common.businessentities.VdsNumaNode> indexMap = toMap(pNodes); for (org.ovirt.engine.core.common.businessentities.VmNumaNode vNode : nodes) { for (org.ovirt.engine.core.common.businessentities.VmNumaNode vNode : nodes) { for (java.lang.Integer pinnedIndex : vNode.getVdsNumaNodeList()) { if ((vNode.getMemTotal()) > (indexMap.get(pinnedIndex).getNumaNodeStatistics().getMemFree())) { return false; } } } return true; }
public <T extends org.ovirt.engine.core.bll.scheduling.pending.PendingResource> java.lang.Iterable<T> pendingResources(java.lang.Class<T> type) { java.util.List<T> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.bll.scheduling.pending.PendingResource resource : pendingResources.values()) { if (resource.getClass().equals(type)) { list.add(((T) (resource))); } } return list; }
public <T extends org.ovirt.engine.core.bll.scheduling.pending.PendingResource> java.lang.Iterable<T> pendingHostResources(org.ovirt.engine.core.compat.Guid host, java.lang.Class<T> type) { if (!(resourcesByHost.containsKey(host))) { return java.util.Collections.emptyList(); } java.util.List<T> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.bll.scheduling.pending.PendingResource resource : resourcesByHost.get(host)) { if (resource.getClass().equals(type)) { list.add(((T) (resource))); } } return list; }
public <T extends org.ovirt.engine.core.bll.scheduling.pending.PendingResource> java.lang.Iterable<T> pendingVmResources(org.ovirt.engine.core.compat.Guid vm, java.lang.Class<T> type) { if (!(resourcesByVm.containsKey(vm))) { return java.util.Collections.emptyList(); } java.util.List<T> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.bll.scheduling.pending.PendingResource resource : resourcesByVm.get(vm)) { if (resource.getClass().equals(type)) { list.add(((T) (resource))); } } return list; }
@java.lang.Override public void delay(java.util.List<org.ovirt.engine.core.compat.Guid> vdsIds) { if (vdsIds.isEmpty()) { return; } org.ovirt.engine.core.bll.RunVmCommandBase.log.debug("Try to wait for the engine update the engine update the engine update the engine memory and cpu stats"); long maxUpdateElapsed = vdsIds.stream().mapToLong((vdsId) -> (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.Threshold, java.util.concurrent.TimeUnit.SECONDS.toMillis(org.ovirt.engine.core.bll.VdsRefreshRate))), org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ThresholdMaxWaitForVdsUpdateInMillis)); long maxWaitTime = java.lang.Math.min(java.lang.Math.max(maxUpdateElapsed, java.util.concurrent.TimeUnit.SECONDS.toMillis(org.ovirt.engine.core.bll.VdsRefreshRate))), org.ovirt.engine.core.bll.RunVdsCommandBase.getSucceeded()), java.lang.System.currentTimeMillis()); }
@org.junit.Test public void testNoAffinityGroups() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2); assertThat(policyUnit.filter(cluster, hosts, newVm, null, new org.ovirt.engine.core.common.scheduling.PerHostMessages())).containsWithin(hosts); }
private boolean isVmMigratable(org.ovirt.engine.core.common.businessentities.VM vm) { return ((vm.getMigrationSupport()) == (org.ovirt.engine.core.common.businessentities.MigrationSupport.MIGRATABLE)) && (!(vm.isHostedEngine())); }
@org.junit.Test public void testFirstVm() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2); org.ovirt.engine.core.common.businessentities.VM vm1 = createVMDown(cluster); org.ovirt.engine.core.common.businessentities.VM vm2 = createVMDown(cluster); affinityGroups.add(createAffinityGroup(cluster, entityAffinityRule.POSITIVE, true, vm2, newVm)); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, entities); org.ovirt.engine.core.common.businessentities.VM vm2 = createVMDown(cluster); affinityGroups.add(createAffinityGroup(cluster, entityAffinityRule.POSITIVE, false)); assertEquals(((java.lang.Integer) (1)).get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)).get(host1.getId())); }
@org.junit.Test public void testPositiveAffinity() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2); org.ovirt.engine.core.common.businessentities.VM vm1 = createVmRunning(host2); org.ovirt.engine.core.common.businessentities.VM vm2 = createVmRunning(host2); affinityGroups.add(createAffinityGroup(cluster, entityAffinityRule.POSITIVE, true, vm2, newVm)); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, entities, newVm, newVm, null)); assertEquals(((java.lang.Integer) (1)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host1.getId())); }
@org.junit.Test public void testNoAffinityGroups() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); }
@org.junit.Test public void testNegativeAffinity() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2, host3, host3); org.ovirt.engine.core.common.businessentities.VM vm1 = createVmRunning(host1); org.ovirt.engine.core.common.businessentities.VM vm2 = createVmRunning(host3); affinityGroups.add(createAffinityGroup(cluster, entityAffinityRule.NEGATIVE, true, vm2, newVm)); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, entities, newVm, newVm, null)); assertEquals(((java.lang.Integer) (1)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host3.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host3.getId())); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.NetworkFilterParameter parameter) { validateParameters(parameters, "value"); org.ovirt.engine.core.common.businessentities.network.VmNicFilterParameter vmNicFilterParameter = map(parameter, "value"); vmNicFilterParameter.setVmInterfaceId(nicId); return performCreate(VdcActionType.AddVmNicFilterParameter, new org.ovirt.engine.core.common.action.VmNicFilterParameters(vmId, vmNicFilterParameter), new org.ovirt.engine.api.restapi.resource.BackendVmNicFilterParameters(vmId, parameter.getName())); }
@java.lang.Override public org.ovirt.engine.api.resource.NetworkFilterParameter getParameter(java.lang.String parameterId) { return inject(new org.ovirt.engine.api.restapi.resource.BackendVmNicFilterParameter(vmId, nicId, parameterId)); }
private java.util.Collection<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> getDirectoryUser(org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser) { java.util.Map<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> groups = new java.util.ArrayList<>(); java.util.Map<java.lang.String, java.lang.Object> response = org.ovirt.engine.core.aaa.SsoAuthzUtils.findPrincipalsByIds(org.ovirt.engine.core.bll.GetAuthzGroupsByUserIdQuery.getSessionDataContainer().getSsoAccessToken(org.ovirt.engine.core.bll.GetAuthzGroupsByUserIdQuery.getParameters().getSessionId()), dbUser.getDomain(), dbUser.getDomain(), java.util.Arrays.asList(dbUser.getExternalId()), true, true); java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> principalRecords = java.util.Collections.emptyList(); if (response.containsKey("result")) { principalRecords = ((java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>) (response.get("result"))); } if (!(principalRecords.isEmpty())) { org.ovirt.engine.api.extensions.ExtMap principalRecord = principalRecords.iterator().next(); directoryUtils.flatGroups(principalRecord); for (org.ovirt.engine.api.extensions.ExtMap group : principalRecord.<java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>>get(PrincipalRecord.GROUPS, java.util.Collections.<org.ovirt.engine.api.extensions.ExtMap>emptyList())) { groups.add(new org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup(dbUserRecord.GROUPS, java.util.Collections.<org.ovirt.engine.api.extensions.ExtMap>emptyList()))); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().getId(); java.util.List<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> authzGroups = returnValue.getReturnValue(); java.util.List<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> authzGroups = returnValue.getReturnValue(); java.util.List<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> groups = org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().map(org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().getId(), org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().getId(), groupsIds, org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().isFiltered())); org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getQueryReturnValue().setReturnValue(permissionsDao.getAllForAdElementAndGroups(org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().getId(), groupsIds, org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().isFiltered())); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllForAdElementAndGroups(org.ovirt.engine.core.compat.Guid id, java.util.Collection<org.ovirt.engine.core.compat.Guid> groupIds, boolean isFiltered) { int appMode = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ApplicationMode); org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("ad_element_id", id).addValue("user_groups", groupIds).addValue("is_filtered", isFiltered).addValue("app_mode", appMode); return getCallsHandler().executeReadList("GetPermissionsByAdElementIdAndGroupIds", org.ovirt.engine.core.dao.PermissionDaoImpl.permissionRowMapper, parameterSource); }
@org.junit.Test public void testDeallocateIfExternalThrowException() { nic.setName(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_NAME); nic.setId(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_ID); provider.setName(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_NAME); doThrow(new org.ovirt.engine.core.common.errors.EngineException()).when(networkProviderProxy).deallocate(nic); underTest.deallocateIfExternal(); verify(auditLogDirector).log(auditLogDirector).log(auditLogableCaptor.capture(), same(AuditLogType.REMOVE_PORT_FROM_EXTERNAL_PROVIDER_FAILED)); final java.util.Map<java.lang.String, java.lang.String> capturedCustomValues = auditLogableCaptor.getValue().getCustomValues(); assertThat(captureCustomValues, hasEntry("nicname", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_NAME)); assertThat(captureCustomValues, hasEntry("nicid", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_ID.toString())); assertThat(captureCustomValues, hasEntry("nicid", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_ID.toString())); }
@java.lang.Override protected void endSuccessfully() { freeVmSnapshotsWithWait(); vmDeviceDao.remove(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.getParameters().getRemovedVolume().getId(), null)); baseDiskDao.remove(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.getParameters().getRemovedVolume().getId()); if (org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.getParameters().getShouldBeLogged()) { org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.setSucceeded(true); } org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.setSucceeded(true); }
private void auditLogFailedToConnect() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class).log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); }
private void updateAuditLog(org.ovirt.engine.core.bll.storage.disk.cinder.ExtendCinderDiskCommand command, org.ovirt.engine.core.common.AuditLogType auditLogType, java.lang.Long imageSizeInGigabytes) { command.addCustomValue("DiskAlias", getDisk(command).getDiskAlias()); command.addCustomValue("NewSize", java.lang.String.valueOf(imageSizeInGigabytes)); org.ovirt.engine.core.di.Injector.log.debug(command, auditLogType); }
public boolean discover() { boolean dbUpdated; java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult> discoveryResult = broker.runDiscover(); if (discoveryResult.isPresent()) { updateDB(discoveryResult.get()); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.debug("Could not update for external broker."); dbUpdated = true; } else { org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.debug("Could not update for external broker."); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn("Failed returned empty result whentalking to broker. Disabling external units"); java.util.List<org.ovirt.engine.core.common.scheduling.PolicyUnit>ailingPolicyUnits = policyUnitDao.getAll().stream().collect(java.util.Collectors.toList()); markExternalPoliciesAsDisabled(failurePolicyUnits); dbUpdated = true; } return dbUpdated; }
private void processSingleClusterChanges(org.ovirt.engine.core.common.action.ManageNetworkClustersParameters param) { final java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> setupNetworksParams = new java.util.ArrayList(createNetworkClustersToSetupNetworksParametersTransformParametersTransformer().transform(param.getAttachments(), param.getDetachments())); org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); runInternalMultipleActions(VdcActionType.PersistentHostSetupNetworks, setupNetworksParams); }
private java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.action.ManageNetworkClustersParameters> mapParametersByClusterId() { final org.ovirt.engine.core.common.action.ManageNetworkClustersParameters parameters = getParameters(); final java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster>> attachmentByClusterId = groupByClusterId(parameters.getAttachments()); final java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster>> attachmentsByClusterId = groupByClusterId(parameters.getDetachments()); final java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster>> updatesByClusterId = groupByClusterId(parameters.getUpdates()); final java.util.Set<org.ovirt.engine.core.compat.Guid> clusterIds = java.util.stream.of(attachmentByClusterId, attachment.getUpdates()); return clusterIds.stream().collect(java.util.stream.Collectors.toMap(java.util.stream.Function.toSet()); return clusterIds.stream().collect(java.util.stream.Collectors.toMap(java.util.stream.Function.toMap(java.util.stream.Function.toString(), (clusterId))); }
private void updateRngDeviceIfNecessary(org.ovirt.engine.core.compat.Guid vmBaseId, org.ovirt.engine.core.compat.Version customCompatibilityLevel, org.ovirt.engine.core.common.action.HasRngDevice updateParameters) { final org.ovirt.engine.core.compat.Version oldEffectiveCompatibilityVersion = org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(customCompatibilityVersion, newCluster.getCompatibilityVersion()); final org.ovirt.engine.core.compat.Version newEffectiveCompatibilityVersion = org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(customCompatibilityVersion, newEffectiveVersion, newEffectiveVersion, vmBaseId, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); updateParameters(getCluster().getCompatibilityVersion()); updateParameters(getVds().getId()); updateParameters(getVds().getId()); updateParameters(new org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContext(), updateParameters); }
private boolean updateVm(org.ovirt.engine.core.common.businessentities.VmStatic vm, org.ovirt.engine.core.compat.Version oldClusterVersion, boolean disableLock) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.setClusterLevelChangeFromVersion(oldClusterVersion); return updateVm(updateParams, disableLock); }
private boolean updateClusterCompatibilityVersionToOldCluster(boolean disableLock) { org.ovirt.engine.core.compat.Version oldClusterVersion = org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getClusterCompatibilityVersion(); org.ovirt.engine.core.common.businessentities.VmStatic vmFromDb = vmStaticDao.get(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVmId()); if (((isRestoreMemory()) && ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getCustomCompatibilityVersion()) == null)) && (oldClusterVersion.getSucceeded(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getCustomCompatibilityVersion()))) { return updateVm(vmFromDb, oldClusterVersion, disableLock); } else if ((!(isRestoreMemory())) && ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getCustomCompatibilityVersion()) == null)) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vmFromDb); boolean requiresRngUpdate = vmUpdateRngDevices(oldClusterVersion, org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getCompatibilityVersion(), org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getCompatibilityVersion(), org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getCompatibilityVersion(), org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getCompatibilityVersion()); }
private boolean updateVms() { for (org.ovirt.engine.core.common.businessentities.VmStatic vm : vmsLockedForUpdate) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.Create(LockProperties.Scope.None)); updateParams.setClusterLevelChangeProperties(org.ovirt.engine.core.common.action.LockProperties.CreateVm, new org.ovirt.engine.core.common.action.LockProperties.createLockProperties(LockProperties.Scope.Scope.None)); updateParams.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); updateRngDeviceIfNecessary(vm.getCustomCompatibilityVersion(), updateParams); org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVm, updateParams, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) { java.util.List<java.lang.String> params = new java.util.ArrayList<>(); params.add("VdcActionType.UpdateVm, updateParams, org.ovirt.engine.core.bll.UpdateClusterCommand.getParameters().getVmName()); if (!(result.getSucceeded())) { java.util.List<java.lang.String> messages = org.ovirt.engine.core.bll.UpdateClusterCommand.getInstance().getErrorsTranslator().translateErrorText(params); failedUpgradeEntities.put(vm.getName(), getFailedMessage(messages)); } } return true; }
@java.lang.Override protected void executeQueryCommand() { if (org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isAdminUser(org.ovirt.engine.core.bll.GetVmPayloadQuery.getUser())) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> disks = dao.getVmDeviceByVmIdAndType(org.ovirt.engine.core.bll.GetVmPayloadQuery.getParameters().getId(), VmDeviceGeneralType.DISK); for (org.ovirt.engine.core.common.businessentities.VmDevice disk : disks) { if ((disk.isManaged()) && (org.ovirt.engine.core.common.businessentities.VmPayload.isPayload(disk.getSpecParams()))) { org.ovirt.engine.core.common.businessentities.VmPayload payload = new org.ovirt.engine.core.common.businessentities.VmPayload(disk); for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : payload.getFiles().entrySet()) { entry.setValue(new java.lang.String(org.apache.commons.codec.binary.Base64.decodeBase64(entry.getValue()))); } org.ovirt.engine.core.bll.GetVmPayloadQuery.getQueryReturnValue().setReturnValue(payload); } } } }
@org.junit.runners.Parameter[] comparator[] comparator[] comparator() { return new java.lang.Object[]{ new java.lang.Object[]{ "", false }, new java.lang.Object[]{ "http://", false }, new java.lang.Object[]{ "http://www.com.google.gwt.runners.Parameter[]{ "200.com.lang.Object[]{ "192.168.0.0.1.1.1.1", false }, new java.lang.Object[]{ "ftp://www.com.google.g.dom.client.Data.com.google.gwt.event.client.Event[]{ "200.com.google.j.core.client.SearchStringFalse("the:2:3:5.4:5.4:5.1", false }, new java.lang.Object[]{ "http://www.com:/%1:5:5:5:5:5:5:5:7:8:8:8}:", true }, new java.lang.Object[]{ "http://[1:3:3:5:5:5:5:5:5:5:5:5:8}:666", true }, new java.lang.Object[]{ "http://[1:2:3:5:5:5:5:5:5:5:5:5:5:5:8]:), true }, new java.lang.Object[]{ "http://www.redhat.com:/www.com/main/main/index.html", true }, new java.lang.Object[]{ "http://www.com:/main/main/main/index.html", true }, new java.lang.Object[]{ "http://www.com:/main/main/main/main/main/index.html", true }, new java.lang.Object[]{ "http://www.com:/export.com/main/main/main/index.html", true }, new java.lang.Object[]{ "http://www.com:/export.com:/export/main/main/index.html", true }, new java.lang.Object[]{ "http://www.com:/www.com:/www.com:/export.com:/www.com:80/www.com:80:80:80
@org.junit.Test public void testToBigPort() { final org.ovirt.engine.ui.uicommonweb.UriAuthority underTest = new org.ovirt.engine.ui.uicommonweb.UriAuthority(((((org.ovirt.engine.ui.uicommonweb.UriAuthorityTest.IPV6_ADDRESS) + (org.ovirt.engine.ui.uicommonweb.UriAuthorityTest.COLON)) + (org.ovirt.engine.ui.uicommonweb.UriAuthorityTest.COLON))); assertThat(underTest.isValid(), is(false)); }
@org.junit.Test public void validateDiskIsOvfStore() { initializeCommand(new org.ovirt.engine.core.common.businessentities.storage.DiskImage()); initVmDiskImage(false); command.getImage().setContentType(DiskContentType.OVF_STORE); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_DISK_CONTENT_TYPE_NOT_SUPPORTED_FOR_OPERATION); }
@org.junit.Test public void testMoveOrCopyMemoryDiskFails() { initializeCommand(new org.ovirt.engine.core.common.businessentities.storage.DiskImage()); initVmDiskImage(false); command.getImage().setContentType(DiskContentType.MUMP_DUMP_VOLUME); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_DISK_CONTENT_TYPE_NOT_SUPPORTED_FOR_OPERATION); }
private static boolean isExternalVM(java.lang.String ovfData) { org.ovirt.engine.core.common.businessentities.OriginType vm = org.ovf.ovf.engine.core.utils.OvfUtils.getVmStatic(ovfData); if (origin == (org.ovirt.engine.core.common.businessentities.VM vm : org.ovirt.engine.core.common.businessentities.VM.class) { return vm; } return false; }
public org.ovirt.engine.core.common.businessentities.VDS getVdsGroup() { return cachedVds; }
private void setQosCompatForQowImage() { if (((getDiskImage().getImage().getImageId()) == (DiskStorageType.IMAGE)) && (getDiskImage().getVolumeFormat().equals(VolumeFormat.COW))) { setQos(image); } }
@java.lang.Override public void endSuccessfully() { endSuccessfully(); if (org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getImportAsTemplate()) { org.ovirt.engine.core.compat.Guid newTemplateId = createTemplate(); if (newTemplateId!= null) { attachDiskToTemplate(newTemplateId); } } updateDiskStatus(ImageStatus.OK); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.setSucceeded(true); }
@org.junit.Before public void setUp() { nic = new org.ovirt.engine.core.common.businessentities.network.VmNic(); network = createNetwork(); underTest = spy(new org.ovirt.engine.core.bll.network.ExternalNetworkManager(nic, network)); injectorRule.bind(org.ovirt.engine.core.dao.provider.ProviderDao.class, providerDao); injectorRule.bind(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class, auditLogDirector); provider = new org.ovirt.engine.core.common.businessentities.Provider(); when(providerDao.get(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_ID)).thenReturn(provider); when(providerDao.get(provider)).thenReturn(networkProviderProxy); }
public static org.ovirt.engine.core.bll.provider.storage.OpenStackVolumeProviderProxy getFromStorageDomainId(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getDbFacade().getStorageDomainDao().get(storageDomainId, userID, isFiltered); if (storageDomain!= null) { org.ovirt.engine.core.common.businessentities.Provider provider = getDbFacade().getProviderDao().get(new org.ovirt.engine.core.compat.Guid(storageDomain.getStorage())); return org.ovirt.engine.core.bll.provider.storage.OpenStackVolumeProviderProxy.providerProxyFactory.providerProxyFactory.create(provider); } return null; }
public static org.ovirt.engine.core.bll.provider.storage.OpenStackImageProviderProxy getFromStorageDomainId(org.ovirt.engine.core.compat.Guid storageDomainId) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic = getDbFacade().getStorageDomainStaticDao().get(storageDomainId); if (storageDomainStatic!= null) { org.ovirt.engine.core.common.businessentities.Provider<?> provider = getDbFacade().getProviderDao().get(new org.ovirt.engine.core.compat.Guid(storageDomainStatic.getStorage())); return org.ovirt.engine.core.bll.provider.storage.OpenStackImageProviderProxy.providerProxyFactory.create(provider); } return null; }
private static org.ovirt.engine.core.bll.provider.storage.OpenStackVolumeProviderProxy getProviderFromStorageDomainStatic(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic) { org.ovirt.engine.core.common.businessentities.Provider provider = getDbFacade().getProviderDao().get(new org.ovirt.engine.core.compat.Guid(storageDomainStatic.getStorage())); return org.ovirt.engine.core.bll.provider.storage.OpenStackVolumeProviderProxy.providerProxyFactory.create(provider); }
public void deallocateIfExternal() { if (((getNetwork())!= null) && (getNetwork().isExternal())) { org.ovirt.engine.core.common.businessentities.Provider<?> provider = getProviderDao().get(getNetwork().getProvidedBy().getProviderId()); org.ovirt.engine.core.bll.provider.network.NetworkProviderProxy providerProxy = providerProxyFactory.create(getNetwork().getProvidedBy().getProviderId()); org.ovirt.engine.core.bll.provider.network.NetworkProviderProxy providerProxy = new org.ovirt.engine.core.bll.provider.network.NetworkProviderProxy(); removePortFailureEvent.addCustomValue("NicName", nic.getName()); removePortFailureEvent.addCustomValue("NicId", nic.getId().toString()); removePortFailureEvent.addCustomValue("ProviderName", nic.getId().toString()); removePortFailureEvent.addCustomValue("ProviderName", provider.getName()); getAuditLogDirector().log(removePortFailureEvent, AuditLogType.REMOVE_PORT_FROM_EXTERNAL_PROVIDER_FAILED); } }
@java.lang.Override protected void updateStorageDomainDiscardsWithDelete(org.ovirt.engine.core.compat.Version compatibilityVersion) { if ((org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommon.getStorageDomain().getDescription()) == null) { org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommon.getStorageDomain().setDiscards(false); } }
@java.lang.Override protected void updateStorageDomainDiscardsWithDelete(org.ovirt.engine.core.compat.Version compatibilityVersion) { if ((org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getDiscardsAfterDelete()) == null) { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setDiscards(org.ovirt.engine.core.common.FeatureSupported.disks(compatibilityVersion)); } }
@java.lang.Override public void init() { super.init(); updateStorageDomainDiscardsAfterDelete(getTargetStoragePool().getCompatibilityVersion()); }
protected abstract void updateStorageDomainDiscards(org.ovirt.engine.core.compat.Version compatibilityVersion);
protected boolean validateDirectLuns() { if ((org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getParameters().getAttachedDirectLunsAttachedToVmsInPool()) == null) { return true; } java.util.Set<java.lang.String> idsOfDirectLunsAttachedToVmsInPool = getIdsOfDirectLunsAttachedToVmsInPool(); java.util.Collection<java.lang.String> directLunsNotAttachedToVmsInPool = org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getParameters().getAttachedDirectLunsIds().filter((lunId) ->!(idsOfDirectLunsAttachedToVmsInPool.contains(lunId))).collect(java.util.Collections.singletonList()); return (directLunsNotAttachedToVmInPool.isEmpty()) || (failValidation(EngineMessage.ACTION_TYPE_FAILED_CANNOT_SYNC_DIRECT_LUNS_NOT_ATTACHED_TO_VM_IN_POOL, java.lang.String.format("$lunIds %s %s", directLunsNotAttachedToVmInPool.stream().sort(java.util.stream.Collectors.joining(java.util.stream.Collectors.Collectors.joining(","))), java.lang.String.format("$storagePoolId %s %s", org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getParameters().getStoragePoolId()))); }
private void mockDirectLunsAttachedToVmsInPool(java.lang.String... LunsIds) { doReturn(new java.util.HashSet(java.lang.String...LunsIds))).when(command).getIdsOfDirectLunsAttachedToVmsInPool(); }
@org.junit.Test public void testGetLunsToUpdateInDb() { command.getParameters().setDeviceList(java.util.Arrays.asList(lun1, lun2)); mockDirectLunsAttachedToVmsInPool("lun1", "lun2"); assertEquals(java.util.Arrays.asList(lun1, lun2), command.getLunsToUpdateInDb()); }
protected java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsToUpdateInDb() { java.util.Set<java.lang.String> idsOfDirectLunsAttachedToVmsInPool = getIdsOfDirectLunsAttachedToVmsInPool(); java.util.List<java.lang.String> lunsIds = java.util.Collections.emptyMap(org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getParameters().getAttachedDirectLunsIds()).map(java.util.Collections.singletonList(lunsIds).map(java.util.Collections.singletonList(lunsIds).toString()).toLowerCase(""); return org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getDeviceList(lunsIds).stream().filter(lun).filter(lun).stream().toString()); }
@org.junit.Test public void validateAttachedDirectLunsWithLunsThatAreNotAttachedToVmInPool() { command.getParameters().setAttachedDirectLunsIds(java.util.Arrays.asList("lun1", "lun3")); mockDirectLunsAttachedToVmsInPool("lun2", "lun3"); assertFalse(command.validateAttachedDirectLuns()); org.ovirt.engine.core.bll.ValidateTestUtils.assertValidationMessages("lun2 is not attached to a vm in the datacenter.", command, EngineMessage.ACTION_TYPE_FAILED_CANNOT_SYNC_DIRECT_LUNS_NOT_ATTACHED_TO_VM_IN_POOL); }
public java.util.Set<java.lang.String> getAttachedDirectLunsIds() { return attachedDirectLunsIds; }
public void setAttachedDirectLunsIds(java.util.Collection<java.lang.String> attachedDirectLunsIds) { this.attachment = attachDirectLunsIds; }
java.lang.String ACTION_TYPE_FAILED_CANNOT_SYNC_DIRECT_LUNS_NOT_ATTACHED_TO_VM();
protected java.util.Set<java.lang.String> getIdsOfDirectLunsAttachedToVmsInPool() { if ((idsOfDirectLunsAttachedToVmsInPool) == null) { idsOfDirectLunsAttachedToVmsInPool = diskLunsAttachedToVmsInPool.getDiskLunMapsForVmsInPool(org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getParameters().getStoragePoolId()).stream().map(DiskLunMap.getLunId()).collect(java.util.Collections.singletonMap(diskLunMap.getLunId()).collect(java.util.Collections.singletonList(diskLunMap.getLunId()).collect(java.util.Collections.singletonList(diskLunMap.getLunMap()).collect(java.util.Collections.singletonList(diskLuns, diskLunsInPool)); } return idsOfDirectLunsAttachedToVmsInPool; }
@org.junit.Test public void validateAttachedDirectLunsAllLunsAttachedToVmInPool() { command.getParameters().setAttachedDirectLunsIds(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(0), "lun1", "lun2", "lun2", "lun3"); assertTrue(command.validateAttachedDirectLuns()).contains(command.getParameters().getStorageDomain())); }
@org.junit.Before public void setUp() { lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setId("lun1"); lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setId("lun2"); lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setId("lun2"); lun3.setId("lun3"); lun3 = org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun3.setId("lun3"); lun3.setId("lun3"); lun3.setLun3(lun3"); lun3.setLun3(lun3); lun3.setEntity("lun3"); lun3.setLun3(lun3"); lun3.setLun3(lun3); lun3.setLun3(lun3); lun3.setLun3(lun3); lun3.setEntity("lun3"); lun3.setLun3(lun3); lun3.setLun3(lun3); lun3.setLun2(lun1); lun3.setLun3(lun2); lun3.setLun2(lun2); lun3.setLun2(lun2); lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(lun2); lun2.setLun2(lun2); lun2.setLun2(lun2); lun2.setLun2(lun2); lun2.setLun2(lun2); lun2.setLun2(lun2); lun2.setLun2(lun2); lun2.setLun2); lun2 = new org.ovirt.engine.core.common.businessentities.storage.Lun2.LUNs(lun2); lun2.setLun2.setLun2(lun2); lun2); lun2.setLun2(lun2);
@java.lang.SuppressWarnings("unchecked") private java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsFromVgInfo() { if (((SyncLunsInfoForBlockStorageDomainCommand.getParameters().getLunsFromVgInfo())!= null) { return syncLunsInfoForBlockStorageDomainCommand.getParameters().getLunsFromVgInfo(); } org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters(SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId(), SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); if (((SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId()) == null) { return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommandWithoutFailover(VDSCommandType.GetVGInfo, params, SyncLunsInfoForBlockStorageDomainCommand.getStoragePoolId(), null).getReturnValue())); } return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (runVdsCommand(VDSCommandType.GetVGInfo, params).getReturnValue())); }
public java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsFromVgInfo() { return lunsFromVgInfo; }
@java.lang.Override protected void executeCommand() { lunDao.updateAll(getLunsToUpdateInDb()); org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.setSucceeded(true); }
public static int getSizeOfMemoryDeviceMb(org.ovirt.engine.core.common.businessentities.VmDevice memoryDevice) { if ((memoryDevice.getType())!= (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY)) { throw new java.lang.RuntimeException(((("The device expected but device " + memoryDevice) + (memoryDevice.getType()))); } final java.lang.String sizeText = ((java.lang.String) (memoryDevice.getSpecParams().get(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_SIZE))); return java.lang.Integer.parseInt(sizeText); }
private void addImportedOtherDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDeviceToAdd) { boolean hasCd = false; for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmBase.getManagedDeviceMap().values()) { switch (vmDevice.getType()) { case DISK : if (VmDeviceType.CDROM.getName().equals(vmBase.getDevice())) { hasCd = true; } else { continue; case VIDEO : vmDevice.setSpecParams(getVideoDeviceSpecParams(vmBase)); break; case HOSTDEV : continue; case HOSTDEV : continue; } vmDevice.setManaged(true); vmDeviceToAdd.add(vmDevice); } if (!hasCd) { addCdDevice(vmBase.getId()); } final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> unmanagedDevicesToAdd = vmBase.getUnmanagedDeviceList().filter(org.ovirt.engine.core.bll.utils.VmDeviceUtils.removeMalformedMemoryDevices).collect(java.util.stream.Collectors.toList()); vmDeviceToAdd.add(vmBase.getId()); } }
private static boolean removeMalformedMemoryDevices(java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> entry) { if ((((vmDevice.getType()) == (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY)) && (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY.getDevice().equals(vmDevice.getDevice()))) && (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY.getDevice().equals(vmDeviceGeneralType.getDevice()))) { return false; } return true; }
@java.lang.Override public javax.ws.rs.core.Response updateOvfStore(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters params = new org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters(); params.setStorageDomainId(guid); params.setProcessOvfUpdateForStoragePool(true); return performAction(VdcActionType.ProcessOvfUpdateForStorageDomain, params); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = loadStoragePoolIsoMap(); changeDomainStatusWithCompensation(map, StorageDomainStatus.Unknown, StorageDomainStatus.Locked, org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCompensationContext()); if (shouldPerformOvfUpdate()) { org.ovirt.engine.core.common.action.ProcessOvfUpdateForStoragePoolParameters parameters = new org.ovirt.engine.core.common.action.ProcessOvfUpdateForStoragePoolParameters(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getStoragePoolId()); runInternalAction(VdcActionType.ProcessOvfUpdateForStoragePool, parameters, null); runInternalActionWithTasksContext(VdcActionType.ProcessOvfUpdateForStorageDomain, createProcessOvfUpdateForDomainParams(), null); } if (org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.noAsyncOperations()) { executeDeactivateCommand(); } org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(true); }
@java.lang.Override protected void executeCommand() { if (org.ovirt.engine.core.bll.storage.ofStoreOvfUpdateForStorageDomainCommand.getParameters().isProcessOvfUpdateForStoragePool()) { syncOvfForStoragePool(); } int missingDiskCount = getMissingDiskCount(); if (missingDiskCount == 0) { setOvfUpdateStep(OvfUpdateStep.OvfUpdateStep.OvfUpdateForStorageDomainCommand.getParameters().isProcessOvfUpdateForStoragePool()); updateOvfStoreContent(); } else { setOvfUpdateStep(OvfUpdateStep.OvfUpdateForStorageDomainCommand.getParameters().getStoragePoolId()); } org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.setSucceeded(true); }
private org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils mockVmPropertiesUtils() throws org.ovirt.engine.core.common.utils.exceptions.InitializationException { org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils utils = spy(new org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils()); doReturn(("sap_agent=^(true|false)$;sndbuf=^[0-9]+$;" + (("vhost=^(([a-zA-Z0-9_]*):(true))(, (([a-zA-Z0-9_]*):(true))).when(utils).getPredefinedVMProperties(any(org.ovirt.engine.core.compat.Version.class)); doReturn(new java.util.HashSet(java.util.Arrays.asList(Version.v3_6, Version.v4_0))).when(utils).getPredefinedVMProperties(any(org.ovirt.engine.core.compat.Version.class)); doReturn(new java.util.HashSet(java.util.Arrays.asList(Version.v3_6, Version.v4_0))).when(utils).getSupportedClusterLevels(); doReturn(utils).when(runVmValidator).getVmPropertiesUtils(); utils.init(); return utils; }
public void setSingleSelectionOnly() { setSingleSelectionOnly(true); }
public com.google.gwt.view.client.SelectionModel<T> getSelectionModel() { if ((selectionModel) == null) { if (singleSelectionOnly) { if (singleSelectionOnly) { return new com.google.gwt.view.client.SingleSelectionModel(new org.ovirt.engine.ui.uicommonweb.models.QueryableEntityKeyProvider()); } else { selectionModel = new org.ovirt.engine.ui.uicommonweb.models.OrderedMultiSelectionModel(new org.ovirt.engine.ui.uicommonweb.models.QueryableEntityKeyProvider()); } } return selectionModel; }
protected com.google.gwt.view.client.AsyncDataProvider<T> getDataProvider() { if ((dataProvider)!= null) { dataProvider = new com.google.gwt.view.client.AsyncDataProvider<T>(org.ovirt.engine.ui.common.uicommon.model.DataBoundTabModelProvider.getModel().getSelectionModel(), null, false); } return dataProvider; }
@java.lang.Override public java.util.List<T> getSelectedItems() { com.google.gwt.view.client.SelectionModel<T> selectionModel = org.ovirt.engine.ui.common.widget.action.SimpleActionPanel.getDataProvider().getModel().getSelectionModel(); if (selectionModel instanceof org.ovirt.engine.ui.uicommonweb.models.OrderedMultiSelectionModel) { return ((org.ovirt.engine.ui.uicommonweb.models.OrderedMultiSelectionModel<T>) (selectionModel)).getSelectedList(); } else if (selectionModel instanceof com.google.gwt.view.client.SingleSelectionModel) { return java.util.Collections.emptyList(((com.google.gwt.view.client.SingleSelectionModel<T>) (selectionModel)).getSelectedObject())); } return java.util.Collections.EMPTY_LIST; }
@java.lang.Override protected void initializeModelHandlers(org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel model) { super.initializeModelHandlers(model); model.getItemSavedEvent().addListener((ev, sender, args) -> clearSelection(); getModel().getSelectionModel().addSelectionChangeHandler(((this.model<org.ovirt.engine.core.common.businessentities.Bookmark>) (getModel().getSelectionModel())).getSelectedObject())); }
@java.lang.Override public java.util.List<T> getSelectedItems() { if (org.ovirt.engine.ui.common.widget.action.SimpleActionPanel.getDataProvider().isSingleSelectionOnly()) { return ((java.util.List<T>) (java.util.Collections.singletonList(((com.google.gwt.view.client.SingleActionPanel.getDataProvider().getSelectionModel())).getSelectedObject()))); } else { return ((org.ovirt.engine.ui.uicommonweb.models.OrderedMultiSelectionModel.getInstance().getModel().getSelectionModel())).getSelectedList(); } }
private org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils mockVmPropertiesUtils() throws org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils.InitializationException { org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils utils = spy(new org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils()); doReturn(("sap_agent=^(true|false)$;sndbuf=^[0-9]+$;" + ((([a-zA-Z0-9_]*):(true))(, (([a-zA-Z0-9_]*):(true))).when(utils).getPredefinedVMProperties(none|writeback|writeback|writethrough)$;"))).when(utils).getPredefinedVMProperties(any(org.ovirt.engine.core.compat.Version.class)); doReturn(new java.util.HashSet(java.util.Arrays.asList(Version.v3_6, Version.v4_0))).when(utils).getSupportedClusterLevels(); doReturn(utils).when(runVmValidator).getSupportedClusterLevels(); utils.init(); utils.init(); return utils; }
public void setHeaderTitle(java.lang.String title) { this.title = title; this.title = title; }
public void setDataToggleInfo(org.ovirt.engine.ui.uicompat.Constants constants) { this.toggle = toggle; }
public void addNotificationListWidget(org.ovirt.engine.ui.webadmin.widget.alert.NotificationListWidget widget) { widget.setDataToggleInfo(toggle.COLLSE, org.ovirt.engine.ui.webadmin.widget.alert.EventsListPopup.EVENT_ACCORDION); contentPanel.add(widget.content); }
private boolean checkIfCollapsed() { boolean result = false; if ((titleAnchor)!= null) { java.lang.String styleString = titleAnchor.getStyleName(); if (style.equals(style.getStyleName())) { java.lang.String[] style = style.split(style.getStyleName()); if (style.equals(style.getPattern())) { result = true; } } else { result = startCollapsed; } } return result; }
private void updatePermissionPanel() { final org.ovirt.engine.core.common.businessentities.profiles.CpuProfile cpuProfile = getModel().getSelectedItem(); final org.ovirt.engine.ui.common.widget.table.SimpleActionTable<org.ovirt.engine.core.common.businessentities.profiles.CpuProfile> table = getTable(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(getContainer()); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(getContainer()); permissionPanel.clear(); tableContainer.add(getContainer()); permissionPanelVisible = false; }
public java.util.List<java.lang.String> getSearchString(java.lang.String prefix) { java.lang.String result = null; if (searchString!= null) { result = searchStringMap.get(prefix); } return result; }
@java.lang.Override public void setSearchPanel(com.google.gwt.user.client.ui.IsWidget searchPanel) { actionPanel.setSearchPanel(searchPanel); if (searchPanel!= null) { actionPanel.setVisible(true); } }
@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getTable().getSelectionModel().addSelectionChangeHandler((event) -> { org.ovirt.engine.ui.webadmin.section.main.presenter.model.AbstractVm().setSelectedItems(getSelectedItems()); fireTableSelectionChangeEvent(); if (!(isVisible())) { handlePlaceTransition(); } })); registerHandler(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getEventBus().addHandler(org.ovirt.engine.ui.uicommonweb.models.ApplySearchStringEvent.getType(), (event) -> { applySearchString(event.getSearchString()); })); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getView().setDetailPlaceTransitionHandler(this); this.breadCannotateActivePrefix(modelProvider.getModel().getSelectionModel()); searchStringCollector.markActivePrefix(modelProvider.getModel().getDefaultSearchString()); java.lang.String searchString = searchString.getSearchString(modelProvider.getModel().getSearchString()); if (searchString!= null) { applySearchString(searchString); } }
@org.junit.Test public void testCommandClassExists() { org.ovirt.engine.core.bll.CommandEnumTestUtils.testCommandsExist(org.ovirt.engine.core.common.action.ActionType.class, (vat.getValue())); }
@org.junit.Test public void testAuditLogTypeValueUnification() { java.util.Set<java.lang.Integer> bondset = new java.util.BitSet(org.ovirt.engine.core.bll.ActionTypeTest.bitSetSizeSize); java.util.Set<java.lang.Integer> nonUniqueValues = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.action.ActionType vat : org.ovirt.engine.core.common.action.ActionType.values()) { if (matches.get(vat.getValue())) { nonUniqueValues.add(vat.getValue()); } else { if (!(matches.getValue())) { nonUniqueValues.set(vat.getValue()); } } assertTrue(("ActionType contains the following non unique values: " + nonUniqueValues), nonUniqueValues.isEmpty()); }
private java.util.Map<java.lang.String, java.lang.Object> parseBalloon(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter((dev) -> (dev.getType()) == VmDeviceGeneralType.BALLOON).findFirst(); if (!(db.isPresent())) { return java.util.Collections.emptyMap(); } org.ovirt.engine.core.common.businessentities.VmDevice device = db.get(); org.ovirt.engine.core.utils.ovf.xml.XmlNode node = selectSingleNode("//*/*/*/*/*/memballoon"); java.util.Map<java.lang.String, java.lang.Object> result = new java.util.HashMap<>(); result.put(VdsProperties.Device, "memballoon"); result.put(VdsProperties.DeviceId, device.getId().getDeviceId().toString()); result.put(VdsProperties.Address, device.getId().getDeviceId().toString()); result.put(VdsProperties.Address, parseAddress(node)); return result; }
private java.util.Map<java.lang.String, java.lang.Object> parseWatchdog(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter((dev) -> (dev.getType()) == VmDeviceGeneralType.WATCHDOG).findFirst(); if (!(db.isPresent())) { return java.util.Collections.emptyMap(); } org.ovirt.engine.core.common.businessentities.VmDevice device = db.get(); org.ovirt.engine.core.utils.ovf.xml.XmlNode node = selectSingleNode("//*/*/*/watchdog"); java.util.Map<java.lang.String, java.lang.Object> result = new java.util.HashMap<>(); result.put(VdsProperties.Device, "watchdog"); result.put(VdsProperties.DeviceId, device.getId().getDeviceId().toString()); result.put(VdsProperties.Address, parseAddress(node)); result.put(VdsProperties.Address, parseAddress(node)); return result; }
private java.util.List<java.util.Map<java.lang.String, java.lang.Object>> parseVisible(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter((d) -> (d.getType()) == VmDeviceGeneralType.VIDEOType.VIDEO).collect(java.util.Collections.singletonList()); if (db.isEmpty()) { return java.util.Collections.emptyList(); } java.util.List<java.util.Map<java.lang.String, java.lang.Object>> result = new java.util.HashMap<>(); for (org.ovirt.engine.core.utils.ovf.xml.XmlNode node : document.getType()) { java.util.Map<java.lang.String, java.lang.Object>> dev = new java.util.HashMap<>(); dev.put(VdsProperties.Device, "video"); dev.put(VdsProperties.Address, "video"); dev.put(VdsProperties.Address, parseAddress(node)); java.lang.String alias = parseAlias(node); dev.put(VdsProperties.Address, alias); java.util.Collections.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> dbDev = db.stream().filter((d) -> d.getAlias().equals(alias)).getDeviceId().toString(); if (dbDev.isPresent()) { dev.put(VdsProperties.DeviceId, dbDev.getId().getDeviceId().toString()); } else { dbDev = dbDev.get().setAlias(alias); } } }
public java.util.Map<java.lang.String, java.lang.Object> convert(java.lang.String xml) { java.util.Map<java.lang.String, java.lang.Object> result = new java.util.HashMap<>(); result.put(VdsProperties.vm_guid, vmId); result.put(VdsProperties.vm_guid, vmDeviceDao.get(vmId))); result.put(VdsProperties.Devices, parseDevices(xml, vmDeviceDao.get(vmId))); return result; }
private java.lang.String parseMacAddress(XmlNode node) { XmlNode aliasNode = selectSingleNode(node, "mac"); return aliasNode.attributes.get("address").getValue(); }
private java.util.List<java.util.Map<java.lang.String, java.lang.Object>> parseInterfaces(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter((d) -> (d.getType()) == VmDeviceGeneralType.INTERFACE).collect(VmDeviceGeneralType.INTERFACE).collect(java.util.stream.Collectors.toList()); if (db.isEmpty()) { return java.util.Collections.emptyList(); } java.util.List<java.util.Map<java.lang.String, java.lang.Object>> result = new java.util.HashMap<>(); for (org.ovirt.engine.core.utils.ovf.xml.XmlNode node : document.getValue()) { java.util.Map<java.lang.String, java.lang.Object>> dev = new java.util.HashMap<>(); dev.put(VdsProperties.Device, "interface"); java.util.Map<java.lang.String, java.lang.Object> dev = new java.util.HashMap<>(); dev.put(VdsProperties.Address, "interface"); java.lang.String mac = parseMacAddress(node); java.lang.String mac = parseMacAddress(node); java.lang.String alias = parseAlias(node); java.util.Collections.emptyMap(db.getAlias().equals(alias)).getDeviceId().getDeviceId().toString()); if (dbDev.isPresent()) { dev.put(VdsProperties.getAlias().getId().getDeviceId().getDeviceId().toString()); } else { dbDev = dbDevices.put(VdsProperties.Address, dbDev.getId().getId().getDeviceId().getDeviceId().toString()); if (dbDev.getIsAvailable()) { dev.put(VdsProperties.Address, dbDev.getId().getDeviceId().getDeviceId().getDeviceId().
private java.util.List<java.util.Map<java.lang.String, java.lang.Object>> parseChannels(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter((d) -> (d.getType()) == VmDeviceGeneralType.CHANNEL).collect(VmDeviceGeneralType.CHANNEL).collect(java.util.stream.Collectors.toList()); if (db.isEmpty()) { return java.util.Collections.emptyList(); } java.util.List<java.util.Map<java.lang.String, java.lang.Object>> result = new java.util.HashMap<>(); for (org.ovirt.engine.core.utils.ovf.xml.XmlNode node : document.getValue()) { java.util.Map<java.lang.String, java.lang.Object>> dev = new java.util.HashMap<>(); dev.put(VdsProperties.Device, "channel"); dev.put(VdsProperties.Address, "channel"); dev.put(VdsProperties.Address, parseAddress(node)); java.lang.String alias = parseAlias(node); dev.put(VdsProperties.Address, alias); java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice> dbDev = db.stream().filter((d) -> d.getAlias().equals(alias)).getDeviceId().toString()); if (dbDev.isPresent()) { dev.put(VdsProperties.get().getId().getId().getDeviceId().toString()); } else { dbDev = dbDev.put(Vds.getAlias().getId().getId().getDeviceId().getDeviceId().toString()); } } return dbDev; }
private java.util.Map<java.lang.String, java.lang.Object>[] getVmInfo(org.ovirt.engine.core.compat.Guid vdsId, java.util.List<org.ovirt.engine.core.compat.Guid> vms) { if ((vdsId == null) || (vms.isEmpty())) { return null; } java.util.Map<java.lang.String, java.lang.Object>[] result = new java.util.Map[0]; java.util.List<java.lang.String>[] result = vms.stream().map(Guid::toString).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = getResourceManager().runVdsCommand(VDSCommandType.List, new org.ovirt.engine.core.common.vdscommands.VDSCommandParameters(vdsId, vmIds)); if (vdsReturnValue.getSucceeded()) { result = ((java.util.Map<java.lang.String, java.lang.Object>) (vdsReturnValue.getReturnValue())); } return result; }
private java.util.Map<java.lang.String, java.lang.Object>[] parseDevices(java.lang.String xml, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { org.ovirt.engine.core.utils.ovf.xml.XmlDocument document = new org.ovirt.engine.core.utils.ovf.xml.XmlDocument(xml); }
private java.util.Map<java.lang.String, java.lang.Object> parseRng(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter((dev) -> (dev.getType()) == VmDeviceGeneralType.RNG).findFirst(); if (!(db.isPresent())) { return java.util.Collections.emptyMap(); } org.ovirt.engine.core.common.businessentities.VmDevice device = db.get(); org.ovirt.engine.core.utils.ovf.xml.XmlNode node = selectSingleNode("//*/*/rng"); java.util.Map<java.lang.String, java.lang.Object> result = new java.util.HashMap<>(); result.put(VdsProperties.Device, "rng"); result.put(VdsProperties.DeviceId, device.getId().getDeviceId().toString()); result.put(VdsProperties.Address, parseAddress(node)); result.put(VdsProperties.Address, parseAddress(node)); return result; }
private boolean updateVmLease() { if (java.util.Objects.equals(oldVm.getLeaseStorageDomainId(), newVmStatic.getLeaseStorageDomainId())) { return true; } if (org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isDown()) { if (!(addVmLease(newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()))) { return false; } org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isDown(); if ((oldVm.getLeaseStorageDomainId())!= null) { runVdsCommand(VDSCommandType.HotUnplugLease, new org.ovirt.engine.core.common.vdscommands.LeaseVDSParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds(), oldVm.getId(), oldVm.getId())); removeVmLease(oldVm.getLeaseStorageDomainId(), oldVm.getId()); } else { org.ovirt.engine.core.common.action.VmLeaseParameters params = new org.ovirt.engine.core.common.action.VmLeaseParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getStoragePoolId(), newVmStatic.getRunOnVds()); return runInternalAction(VdcActionType.HotPlugLease, params).getSucceeded(); } } return true; }
public boolean isFieldUpdatable(java.lang.Enum<?> status, java.lang.String name, java.lang.Object fieldContainer, boolean hotsetEnabled) { boolean returnValue = true; if (!(isFieldUpdatable(name))) { if (((fieldContainer!= null) && ((container)!= null)) && (!(container.canUpdateField(fieldContainer, name, status)))) { returnValue = false; } else { java.util.Set<java.lang.String> values = dictionary.get(status); returnValue = (values!= null)? values.contains(name) : false; if ((!returnValue) && hotsetEnabled) { returnValue = isHotSetField(name); } } if (!returnValue) { org.ovirt.engine.core.utils.ObjectIdentityChecker.log.warn("Host '{}' can not be updated when status is '{}'", name, status); } } return returnValue; }
private boolean updateVmLease() { if (java.util.Objects.equals(oldVm.getLeaseStorageDomainId(), newVmStatic.getLeaseStorageDomainId())) { return true; } if (org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isNotRunning()) { if (!(addVmLease(newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()))) { return false; } else { if ((oldVm.getLeaseStorageDomainId()) == null) { org.ovirt.engine.core.common.action.VmLeaseParameters params = new org.ovirt.engine.core.common.action.VmLeaseParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getStoragePoolId(), newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()); params.setVdsId(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds()); params.setHotPlugged(true); return runInternalAction(ActionType.AddVmLease, params).getSucceeded(); } boolean hotUnplugSucceeded = false; try { hotUnplugSucceeded = false; try { hotUnplugSucceeded = false; try { hotUnplugSucceeded = false; try { hotUnplugSucceeded = false; try { hotUnplugSucceeded = runVdsCommand(VDSCommandType.HotUnplugged, new org.ovirt.engine.core.common.vdscommands.LeaseVDSParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds(), oldVm.getId(), oldVm.getId(), oldVm.getLeaseStorageDomainId())).getSucceeded(); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Error in hot unplugging a lease a lease to VM {}", oldVm.getId(), e.getMessage()); } } } } }
@java.lang.Override public void endWithFailure() { org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.setSucceeded(true); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateAllDiskImagesSnapshotsStatusInTransaction(getMovedDiskIds(), ImageStatus.OK, org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getCompensationContext()); }
private void addAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getAffinityGroups(); for (org.ovirt.engine.core.common.businessentities.Label label : affinityLabels) { if (affinityGroup.getId().equals(org.ovirt.engine.core.bll.AddVmCommand.getVm())) { return; } } }
private void updateAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> selectedLabels = org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getParameters().getAffinityLabels(); java.util.List<org.ovirt.engine.core.common.businessentities.Label> labelsToAdd = new java.util.HashSet(selectedLabels); labelsToAdd.removeAll(selectedLabels); for (org.ovirt.engine.core.common.businessentities.Label label : labelsToAdd) { labelToAdd.add(org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getVds()); label.add(org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getVds()); labelToRemove.remove(org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getVds()); labelToRemove.remove(org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getVds()); labelToRemove.remove(org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getVds()); labelToRemove.setSucceeded(true); } }
@java.lang.Override protected void executeCommand() { if ((isGlusterEnabled()) && ((upServer)!= null)) { glusterHostRemove(); if (!(org.ovirt.engine.core.bll.RemoveVdsCommand.getSucceeded())) { return; } } if (!(clusterHasMultipleHosts())) { removeGlusterVolumesFromDb(); removeGlusterHooksFromDb(); removeGlusterHooksFromDb(); removeGlusterHooksFromDb(); removeGlusterHooksFromDb(); removeGlusterHooksFromDb(); removeVdsDynamicFromDb(); removeVdsStaticFromDb(); removeVdsStaticFromDb(); removeVdsStaticFromDb(); org.ovirt.engine.core.bll.RemoveVdsCommand.setSucceeded(true); }
private void addAffinityLabelsToDb() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getParameters().getAffinityGroupDao(); for (org.ovirt.engine.core.common.businessentities.Label label : affinityLabels) { if (labeled.getSucceeded()) { addCustomValue(org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getVds()); } } }
private void updateAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> selectedLabels = org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getAffinityLabels(); java.util.List<org.ovirt.engine.core.common.businessentities.Label> labelsToAdd = new java.util.HashSet(selectedLabels); labelsToAdd.removeAll(preventLabel.getVmId()); for (org.ovirt.engine.core.common.businessentities.Label label : labelsToAdd) { label.add(org.ovirt.engine.core.bll.UpdateVmCommand.getVm()); label.add(org.ovirt.engine.core.bll.UpdateVmCommand.getVm()); labelDao.update(org.ovirt.engine.core.bll.UpdateVmCommand.getVm()); labelDao.update(org.ovirt.engine.core.bll.UpdateVmCommand.getVm()); labelDao.update(org.ovirt.engine.core.bll.UpdateVmCommand.getVm()); labelDao.update(org.ovirt.engine.core.bll.UpdateVmCommand.getVm()); labelDao.update(label); } }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel createNewLineModel(java.lang.String key) { org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel keyValueLineModel = super.createNewLineModel(key); keyValueLineModel.getValue().setIsAvailable(false); keyValueLineModel.getValue().setIsAvailable(false); return keyValueLineModel; }
public void init() { startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmListByClusterName(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.VM>>() { @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList) { java.util.List<org.ovirt.engine.core.compat.Guid> vmIds = getAffinityGroup().getVmIds(); getVmsSelectionModel().init(vmList, (vmIds!= null? vmIds : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); stopProgress(); }), clusterName); }), clusterName); }
void onSave() { if (!(validate())) { return; } if ((getProgress())!= null) { return; } org.ovirt.engine.core.common.scheduling.AffinityGroup group = getAffinityGroup(); group.setName(getName().getEntity()); group.setDescription(getDescription().getEntity()); group.setClusterId(clusterId); group.setVmAffinityGroup(getEnforcing().getEntity()); group.setVmAffinityRule(getVmAffinityGroup()); group.setVmIds(getVmsSelectedItem()); group.setVdsEnforcing(getVmsSelectedItem()); group.setVdsEnforcing(getHostAffinityGroup().getSelectedItem()); group.setVdsIds(getHostAffinityGroup().getSelectedItem()); startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(saveActionType, new org.ovirt.engine.core.common.scheduling.parameters.AffinityGroupCRUDParameters(group.getId(), group), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { stopProgress(); if (((result!= null) && ((result.getReturnValue())!= null)) && (result.getReturnValue().getSucceeded())) { cancel(); } } }, this); }
@java.lang.Override protected void setValueByKey(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel lineModel, java.lang.String key) { if (value!= null) { throw new java.lang.IllegalArgumentException("KeyValue lineModel", key); } }
@java.lang.Override protected void initLineModel(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel keyValueLineModel, java.lang.String keyValueLineModel, java.lang.String keyValueLineModel, java.lang.String keyValueLineModel, java.lang.String keyValueLineModel, java.lang.String keyValueLineModel, java.lang.String keyValueLineModel, java.lang.String keyValueLineModel, java.lang.String keyValueLineModel, java.lang.String keyValueLineModel, java.lang.String keyValueLineModel, java.lang.String keyValueLineModel, java.lang.String keyValueLineModel, java.lang.String keyValueLineModel, java.lang.String keyValueLineModel, java.lang.String keyValueLineModel, java.lang.String keyValueLineModel, java.lang.String keyValueLineModel, java.lang.String keyValueLineModel, java.lang.String keyValueLineModel, java.lang.String keyValueLineModel, java.lang.String keyValueLineNameEntry.valueLineModel, keyValueLineModel, keyValueLineModel, keyValueLineModel, keyValueLineModel, keyValueLineModel, keyValueLineModel, keyValueLineModel, keyValueLineModel, keyValueLineModel, keyValueLineModel, keyValueLineModel); }
@java.lang.Override protected boolean isGhost(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel value) { return!(model.isKeyValid(value.getKeys().getSelectedItem())); }
public java.util.List<org.ovirt.engine.core.compat.Guid> getSelectedVmIds() { java.util.List<org.ovirt.engine.core.compat.Guid> list = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel keyModel : getItems()) { java.lang.String selectedItem = keyModel.getKeys().getSelectedItem(); if (isKeyValid(selectedItem)) { list.add(allVmNamesMap.get(selectedItem).getId()); } } return list; }
@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel createGhostValue() { return model.createNewLineModel(); }
public void init(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms, java.util.List<org.ovirt.engine.core.compat.Guid> usedVms) { if ((vms == null) || (usedVms == null)) { return; } allVmNamesMap = new java.util.HashMap(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { allVmNamesMap.put(vm.getName(), vm); vmsMap.put(vm.getId(), vm); } java.util.Set<java.lang.String> usedVmNames = usedVms.stream().map(vm.getId(), vm); org.ovirt.engine.core.compat.Guid vmId = usedVmNamesMap.put(vm.getId(), usedVmNames); }
@java.lang.Override public T flush() { super.flush(); for (org.ovirt.engine.ui.common.widget.form.key.KeyValue.KeyLineWidget lineWidget : widgets) { lineWidget.flush(); } return model; }
java.lang.String hostNameLabel();
public java.util.List<org.ovirt.engine.core.compat.Guid> getSelectedHostIds() { java.util.List<org.ovirt.engine.core.compat.Guid> list = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel keyModel : getItems()) { java.lang.String selectedItem = keyModel.getKeys().getSelectedItem(); if (isKeyValid(selectedItem)) { list.add(allHostNamesMap.get(selectedItem).getId()); } } return list; }
java.lang.String getValue("succeeded") java.lang.String vmsAffinityGroupSelectionLabel();
public void setUsePatternFly(boolean usePatternFly) { valueField.setUsePatternFly(use); valuesField.setUsePatternFly(use); valuesField.setUsePatternFly(use); }
@java.lang.Override protected void toggleGhost(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel value, org.ovirt.engine.ui.common.widget.form.key_value.KeyValueLineWidget widget, boolean becomingGhost) { if (!(widget.isEnabled())) { return; } super.toggleGhost(value, widget, becomingGhost); }
@java.lang.Override protected void onRemove(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel value, org.ovirt.engine.ui.common.widget.form.key_value.KeyValueLineWidget widget) { super.onRemove(value, widget); model.updateKeys(); }
@java.lang.Override protected org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget createWidget(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel value) { org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget keyLineWidget = new org.ovirt.engine.ui.common.widget.form.key_value.KeyValueLineWidget(); keyLineModel.edit(value); keyLineWidget.setUsePatternFly(usePatternFly); return keyLineWidget; }
protected void init() { initWidget(org.ovirt.engine.ui.common.widget.form.key.key_value.KeyValue.KeyWidget.WiBinder.createAndBindUi(this)); hideLabels(); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel object) { updateKeyTitle(object); object.getKeys().getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(org.ovirt.engine.ui.common.widget.form.key_value.KeyValue.KeyLineWidget.this, object); updateKeyTitle(object); } }); driver.edit(object); }
java.lang.String selectedAffinityGroupLabel();
private org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel getModel() { return model; }
public void showActiveLabels() { activeLabelList.addStyleName(style.Styles.LIST_INLINE); activeLabelPanel.addStyleName(style.list); activeLabelList.clear(); java.util.Collections.sort(label, (l1, l1) -> (org.ovirt.engine.ui.uicommonweb.models.EntityModel.getModel().getLabelList().getSelectedItems())); for (org.ovirt.engine.core.common.businessentities.Label label : labels) { activeLabelList.add(createActiveLabelItem(label)); } }
@java.lang.Override protected void init() { initWidget(org.ovirt.engine.ui.common.widget.form.key.KeyValueLineWidget.WiBinder.createAndBindUi(this)); driver.initialize(this); hideLabels(); }
public void init(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, java.util.List<org.ovirt.engine.core.compat.Guid> usedHosts) { if ((hostId == null) || (usedHosts == null)) { return; } allHostNamesMap = new java.util.HashMap(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { allHostNamesMap.put(host.getName(), host); } java.util.Set<java.lang.String> usedHostNames = usedHosts.get(host.getId()); if (usedHosts.contains(host.getId())) { usedHostNames = usedHosts.get(id); } }
@java.lang.Override protected void updateDetailsAvailability() { super.updateDetailsAvailability(); org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel.getSelectedItem(); getClusterVmListModel().setIsAvailable(((cluster!= null) && (cluster.supportsVirtService()))); getClusterServiceModel().setIsAvailable(((cluster!= null) && (cluster.supportsGlusterService()))); getClusterHookListModel().setIsAvailable(((cluster!= null) && (cluster.supportsGlusterService()))); getAffinityGroupListModel().setIsAvailable((cluster!= null) && (cluster.supportsVirtService()))); getAffinityGroupListModel().setIsAvailable((cluster!= null) && (cluster.supportsVirtService()))); getAffinityGroupListModel().setIsAvailable((cluster!= null? cluster.supportsVirtService() : cluster.supportsVirtService())); }
public void init() { initProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmListByClusterName(new org.ovirt.engine.ui.uicommonweb.models.configure.configure.ConfigValues((vmList) -> { setAffinityGroupName(vmList, (vmIds!= null? new org.ovirt.engine.ui.uicommonweb.models.configure.configure.LabelModel.class : new org.ovirt.engine.ui.uicommonweb.models.configure.configure.LabelModel(getAffinityLabel().getEntity())); stopProgress(); }), clusterName); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label object) { java.lang.String join = getVmNames(object); if (join.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return join; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label object) { return object.getName(); }
protected java.lang.String join(java.util.List<java.lang.String> strings) { java.lang.StringBuilder result = new java.lang.StringBuilder(); if (strings == null) { return result.toString(); } for (java.lang.String s : strings) { if ((result.length())!= 0) { result.append(separator); } result.append(separator); } return result.toString(); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label object) { java.lang.String join = join(getHostNames(object), ", "); if (join.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return join; }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.configure.EntityModel flush() { return driver.flush(); }
protected java.util.List<java.lang.String> getVmNames(org.ovirt.engine.core.common.businessentities.Label label) { return label; }
protected java.util.List<java.lang.String> getHostNames(org.ovirt.engine.core.common.businessentities.Label label) { return ((label.getHostNames())!= null? null : label.getHostNames().toString())); }
private void updateActionAvailability() { getNewCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed(true); getRemoveCommand().setIsExecutionAllowed((hasSelectedItems && ((org.ovirt.engine.ui.uicommonweb.models.configure.entity.list.AffinityLabelListModel.getSelectedItems().size()) == 1))); getRemoveCommand().setIsExecutionAllowed((hasSelectedItems && ((org.ovirt.engine.ui.uicommonweb.models.configure.configure.scheduling.list.AffinityLabelListModel.getSelectedItems().size()) == 1))); getRemoveCommand().setIsExecutionAllowed((!hasSelectedItems) && ((org.ovirt.engine.ui.uicommonweb.models.configure.configure.scheduling.permissions.AffinityLabelListModel.getSelectedItems().size()) == 1))); }
protected void addCommands() { org.ovirt.engine.ui.uicommonweb.UICommand command = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnSave", this); getCommands().add(command); getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this)); }
@java.lang.Override protected void onEntityChanged() { super.onEntityChanged(); org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.AffinityLabelListModel.getSearchCommand().execute(); }
private void onRemove() { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (org.ovirt.engine.ui.uicommonweb.models.configure.configure.list.AffinityLabelListModel.getConfirmWindow())); if ((model.getProgress())!= null) { return; } java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Label affinityLabel : org.ovirt.engine.ui.uicommonweb.models.configure.label.list.AffinityLabelListModel.getSelectedItems()) { parameters.add(new org.ovirt.engine.ui.uicommonweb.models.configure.LabelModel(affinityLabel)); } model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.RemoveLabel, parameters, (result) -> { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (result.getState())); localModel.stopProgress(); cancel(); cancel(); } }, model); }
private void remove() { if ((org.ovirt.engine.ui.uicommonweb.models.configure.list.list.AffinityLabelListModel.getWindow())!= null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeAffinityLabelsTitle()); model.setHelpTag(HelpTag.remove_affinity_groups); model.setHashName("remove_affinity_labels"); java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Label affinityLabel : org.ovirt.engine.ui.uicommonweb.models.configure.configure.ListModel.getSelectedItems()) { list.add(affinityLabel.getName()); } model.setItems(list); org.ovirt.engine.ui.uicommonweb.UICommand command = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnRemove", this); model.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this)); model.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this)); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.VirtualMachineSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.AuditLog, org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<java.lang.Void>, org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.SubTabVirtualMachineEventPresenter.constants.virtualMachineEventSubTabLabel(), 11, modelProvider, org.ovirt.engine.ui.common.widget.Align.RIGHT); }
public void activateDetailModel() { getMainModel().addActiveDetailModel(org.ovirt.engine.ui.common.uicommon.model.DetailTabModelProvider.getModel()); }
private void activeDetailModelChanging(org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> newValue, boolean stopRefresh) { for (org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> oldValue : activeDetailModels) { if ((oldValue!= null) && (getValue().getEntity())) { oldValue.setEntity(null); if (oldValue instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { ((org.ovirt.engine.ui.uicommonweb.models.HasEntityModel) (oldValue)).getSelectedItem())); } } } if (newValue!= null) { newValue.setEntity(provideDetailModelEntity(org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.getSelectedItem())); } }
public void setActiveDetailModel(org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> value) { if (!(activeDetailModels.contains(value))) { activeDetailModelChanging(value, true); activeDetailModels.add(value); activeDetailModels.add(value); activeDetailModelChanged(); onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs(org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.ACTIVE_DETAIL_MODEL_MODEL)); } }
public void addActiveDetailModel(org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> value) { if (!(activeDetailModels.contains(value))) { activeDetailModelChanging(value, false); activeDetailModels.add(value); activeDetailModels.add(value); activeDetailModelChanged(); onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs(org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.ACTIVE_DETAIL_MODEL_MODEL)); } }
@org.ovirt.api.metamodel.annotations.Injects("In") java.lang.Boolean hot_();
public static java.lang.String encrypt(javax.servlet.ServletContext ctx, java.lang.String rawText) throws java.lang.Exception { org.ovirt.engine.core.sso.utils.SsoUtils.getSsoContext(config.getPKIEngineContext().getAbsoluteFile())); try (java.io.InputStream in = new java.io.FileInputStream(config.getPKIEngineContext().getAbsoluteFile())) { return org.ovirt.engine.core.uutils.crypt.EnvelopeEncryptDecrypt.encrypt(org.ovirt.engine.core.utils.s.SsoUtils.getInstance().getAbsoluteFile())); } catch (java.io.InputStream in = new java.io.FileInputStream(org.ovirt.engine.core.utils.transaction.Scheduler.Scheduler.Scheduler.SanePath())) { return org.ovirt.engine.core.uutils.crypt.EnvelopeEncryptDecryptDecrypt.encrypt(org.ovirt.engine.core.utils.charset.StandardCharsets.UTF_8)); } }
protected java.util.Map<java.lang.String, java.lang.Object> buildResponse(final javax.servlet.http.HttpServletRequest request, java.lang.String clientId, java.lang.String clientId, java.lang.String clientToken) throws java.lang.Exception { java.util.Map<java.lang.String, java.lang.Object> payload = buildResponse(ssoMap); payload.put("id_token", org.ovirt.engine.core.utils.SerializationFactory.getToken().getToken(request, request.getToken(), clientToken)); return payload; }
public static java.lang.String createJAXMessage(final javax.servlet.http.HttpServletRequest request, java.lang.String clientId, java.lang.String clientPassword) throws com.nimizationException, java.security.NoSuchAlgorithmException { com.nimization.NoSuchAlgorithmException { com.nimization.NoSuchAlgorithmException { com.nimization.NoSuchAlgorithmException { com.nimization.SESSION_KEY = new com.n.google.gwt.core.utils.Sso.Scheduler(new com.nio.Json.Json(com.jose.JAXAlgorithm.HS256), org.ovirt.engine.core.utils.SsoUtils.createJson(com.junit.JAXAlgorithm.HS256), org.ovirt.engine.core.utils.sso.SsoUtils.createJson(request, request, clientId)); signedJwt.serialize(); return signedJwt.serialize(); }
public static void sendJsonData(final javax.servlet.http.HttpServletResponse response, java.lang.String jsonPayload) throws java.io.IOException { try (java.io.OutputStream os = response.getOutputStream()) { response.setContentType("application/json"); jsonPayloadBytes = jsonPayload.getBytes(java.nio.charset.StandardCharsets.UTF_8.name()); response.setContentLength(jsonPayload); org.ovirt.engine.core.sso.utils.SsoUtils.log.debug("Sending json data {}", jsonPayload); } }
@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { try { org.ovirt.engine.core.sso.servlet.ServletException { try { org.ovirt.engine.core.sso.servlet.Servlet.log.debug("RequestAuthorization RequestString: {}", request.getQueryString(), org.ovirt.engine.core.sso.so.so.soUtils.getRequestParameters(request)); java.lang.String responseType = org.ovirt.engine.core.sso.utils.SsoUtils.getRequestParameter(request)); java.lang.String responseType = org.ovirt.engine.core.sso.utils.SsoUtils.getRequestParameter(request, SsoConstants.JSON_RESPONSE_TYPE); if (!(responseType.equals("code")) { throw new org.ovirt.engine.core.utils.EngineException(org.ovirt.engine.core.sso.utils.SsoUtils.ERR_CODE_INVALID_REQUEST, java.lang.String.format(ssoContext.getLocalizationUtils().localize(SsoConstants.LOCALE))))); } login(request, response, buildSsoMap(request)); } catch (java.lang.Exception ex) { org.ovirt.engine.core.utils.SsoMethod ssoMap = org.ovirt.engine.core.utils.sso.SsoUtils.getSsoMethod(request, true); if ((ssoMap.isOpenIdScope()) || (org.ovirt.engine.core.utils.sso.SsoMethodUtils.getSsoMap(request, true))) { org.ovirt.engine.core.utils.SsoUtils.SsoMethod ssoMap = org.ovirt.engine.core.utils.SsoUtils.getSsoMethod(request, true); if ((ssoMap.isOpenId()) || (requestType.equals(java.lang.String.format("Cannot registerSsoName %s
private java.util.Map<java.lang.String, java.lang.Object> buildResponse(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.SsoSession ssoSession, java.lang.String clientId, java.lang.String clientSecret) throws java.lang.Exception { java.util.Map<java.lang.String, java.lang.Object> payload = buildResponse(ssoSession); if (org.ovirt.engine.core.utils.s.utils.SsoUtils.scopeAsList(ssoMap.getScope()).contains(SsoConstants.OPENID_SCOPE)) { payload.put("id_token", org.ovirt.engine.core.utils.SerializationFactory.createJson(request, ssoMap.getScope()).contains(SsoConstants.OPENID_SCOPE))); } return payload; }
private java.lang.String getTokenFromHeader(java.lang.String request) { java.lang.String headerValue = null; java.lang.String headerValue = null; java.lang.String headerValue = request.getHeader(SsoConstants.HEADER_AUTHORIZATION); if ((headerValue!= null) && (headerValue.startsWith(org.ovirt.engine.core.utils.servlet.OpenIdUserInfoServlet.BEARER))) { token = headerValue.substring("Token", "Token.length()); } return token; }
@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { try { org.ovirt.engine.core.sso.servlet.OpenIdUserInfoServlet.log.debug("Entered OpenIdUserInfoServlet Query String: {}", request.getQueryString(), org.ovirt.engine.core.sso.so.so.so.EngineMessage.ER_REQUER_ATTR_TOKEN); if (token == null) { token = getTokenFromHeader(request); } if (token == null) { throw new org.ovirt.engine.core.utils.EngineException(org.ovirt.engine.core.sso.SsoConstants.ERROR_CODE, org.ovirt.engine.core.utils.SsoUtils.ERR_REQUERY_INVALID_REQUEST); } org.ovirt.engine.core.utils.transaction.SsoMethod ssoData = org.ovirt.engine.core.utils.s.SsoUtils.getSsoMethod(response, "SESSION_INVALID_REQUEST); org.ovirt.engine.core.utils.transaction.SsoMethod ex) { org.ovirt.engine.core.utils.sso.SsoUtils.sendJsonData(response, ex); } catch (org.ovirt.engine.core.utils.sso.AuthenticationException ex) { org.ovirt.engine.core.utils.sso.SsoUtils.sendJsonData(response, ex); } catch (org.ovirt.engine.core.utils.AuthenticationException ex) { org.ovirt.engine.core.utils.sso.AuthenticationException ex) { org.ovirt.engine.core.utils.sso.SsoUtils.sendJsonData(response, ex); } }
private java.lang.String buildResponse(final javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.utils.SsoMethod ssoSession) throws java.lang.Exception { java.lang.Exception { throw new java.lang.Exception(((java.lang.String) (java.lang.String.format(request, " + (org.ovirt.engine.core.so.utils.SsoMethod.SsoMethod.getToken()))).toString(); }
protected org.ovirt.engine.core.utils.SsoSession handleIsset() { org.ovirt.engine.core.utils.SsoMethod handleTokenForAuthCode(java.lang.String clientId, java.lang.String clientId, java.lang.String scope) throws java.lang.Exception { org.ovirt.engine.core.sdso.servlet.OAuthTokenServlet.log.debug("Entered issue tokenForAuthCode"); java.lang.String authCode = org.ovirt.engine.core.utils.SsoUtils.getRequestParameter(request, SsoConstants.HTTP_PARAM_AUTHORIZATION_CODE, SESSION_CODE); java.lang.String accessToken = getTokenForAuthCode(authCode); if (org.apache.commons.lang.StringUtils.isEmpty(accessToken)) { throw new org.ovirt.engine.core.utils.EngineMessage.SsoUtils.validateRequestScope(request, accessToken, org.ovirt.engine.core.utils.SsoUtils.ERR_CODE_INVALID_GRANT_C); } org.ovirt.engine.core.utils.EngineLock lock = org.ovirt.engine.core.utils.SsoUtils.getSsoMethod(request, clientId, accessToken, org.ovirt.engine.core.utils.SsoUtils.getSsoMethod(request, clientId, request); validateClientAcceptHeader(ssoMap); return ssoSession; }
@java.lang.Override protected void initializeModelHandlers(org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel model) { super.initializeModelHandlers(model); model.getItemSavedEvent().addListener((ev, sender, args) -> clearSelection()); getModel().getSelectionModel().addSelectionChangeHandler((event) -> { this.getModel().setSelectedItem(getModel().getSelectedObjects().get(0)); } }); }
private static void extractInterfaceStatistics(java.util.Map<java.lang.String, java.lang.Object> dict, org.ovirt.engine.core.common.businessentities.network.NetworkStatistics<?> iface) { org.ovirt.engine.core.common.businessentities.network.NetworkStatistics stats = iface.getStatistics(); stats.setReceiveDropRate(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignDoubleValueWithNullProtection(dict, VdsProperties.rx_dropped)); stats.setReceivedBytes(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignDoubleValueWithNullProtection(dict, VdsProperties.rx_dropped)); stats.setTransmittedBytes(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignDoubleValueWithNullProtection(dict, VdsProperties.tx_total)); stats.setTransmittedBytes(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignDoubleValueWithNullProtection(dict, VdsProperties.tx_total)); stats.setSpeed(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignDoubleValue(dict, VdsProperties.sample_time)); if (dict.containsKey(VdsProperties.INTERFACE_SPEED)) { if (org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignDoubleValue(dict, VdsProperties.INTERFACE_SPEED)); } }
private void writeVmMetadata() { writer.setPrefix(org.ovirt.engine.core.vdsbroker.vdsbroker.LibvirtVmXmlBuilder.OVIRT_VM_PREFIX, org.ovirt.engine.core.vdsbroker.vdsbroker.LibvirtVmXmlBuilder.OVIRT_VM_URI, "vm"); writer.writeStartElement(org.ovirt.engine.core.vdsbroker.vdsbroker.BuildInfo.LibvirtVmXmlBuilder.OVIRT_VM_URI, "vm"); writer.writeStartElement(org.ovirt.engine.core.vdsbroker.vminInfo.LibvirtVmXmlBuilder.OVIRT_VM_URI, "vm"); if (vm.isRunOnce()) { writer.writeStartElement(org.ovirt.engine.core.vdsbroker.vminInfo.LibvirtVmXmlBuilder.OVIRT_VM_URI, "destroy_on_reboot"); writer.writeRaw("type", "bool"); writer.writeRaw("true"); writer.writeRaw("true"); writer.writeRaw("true"); } }
java.lang.String LUNSUPPORTED_HOST_IN_MAINTENANCE();
@java.lang.Override public void setHasSelectedTags(boolean hasSelectedTags) { if ((getSelectedTags)!= null) { getEntity(getSelectedTags); } else { setHasSelectedTags(true); } }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override protected void showSuggestions(final com.google.gwt.user.client.ui.SuggestBox suggestBox, java.util.Collection<? extends com.google.gwt.user.client.ui.Suggestion.Suggestion> suggestions, boolean isDisplayStringHTML, boolean isDisplayStringHTML, boolean isAutoSelectEnabled, org.ovirt.engine.ui.webadmin.widget.autocomplete.SuggestionCallback callback) { boolean anySuggestions = (suggested == null) && ((suggesteds.size()) > 0); if (!anySuggestions) { hideSuggestions(); return; } if ((suggested) == null) { suggestPopup.isAttached()) { suggestPopup = createPopup(); } if (suggested.isAttached()) { suggestedPopup.removeAutoHidePartner(suggestBox.getElement()); } else if (suggestedSuggestions!= null) { suggestPopup.removeAutoHidePartner(suggestBox.getElement()); } suggestionsTable = getSuggestionCellList(((java.util.Collection<org.ovirt.engine.ui.webadmin.widget.autocomplete.SearchSuggestion>) (suggestion))); suggestPopup.showAutoHidePartner(suggestedBox); } else { suggestPopup.showRelativeTo(suggestBox); } }
private java.lang.String[] getSearchObjectFilter() { java.util.List<java.lang.String> filter = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?> list : commonModel.getItems()) { if ((list!= null) && (!(list.getIsAvailable()))) { java.lang.String[] searchObjects = list.getSearchObjects(); if (searchObjects!= null) { filter.addAll(java.util.Arrays.asList(searchObjects)); } } } return filter.toArray(new java.lang.String[0]); }
private void syncDirectLunsAttachedToVmsInPool(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> deviceList) { org.ovirt.engine.core.common.action.SyncDirectLunsParameters parameters = new org.ovirt.engine.core.common.action.SyncDirectLunsParameters(org.ovirt.engine.core.bll.storage.pool.SyncAllStoragePoolCommand.getParameters().getStoragePoolId()); parameters.setDeviceList(deviceList); runInternalAction(VdcActionType.SyncDirectLuns, parameters); }
@java.lang.Override protected boolean validate() { return org.ovirt.engine.core.bll.storage.pool.AbstractSyncLunsCommand.checkStoragePool(); }
private void validateRemove() { if (((org.ovirt.engine.core.bll.storage.domain.TransportsCommand.getStorageDomain().getVgMetadataDevice()) == null) || ((org.ovirt.engine.core.bll.storage.domain.TranslateSANStorageDomainDevicesCommand.getStorageDomain().getFirstMetadataDevice()) == null)) { blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.Translator.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.TransportalSANStorageDomainDevicesCommand.getVds().getStoragePoolId()); validateRetrievedMetadataDevices(); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.TransportalSANStorageDomainDevicesCommand.getStorageDomain(), org.ovirt.engine.core.bll.storage.domain.TransportalSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce()); if (!(metadataDevices.isEmpty())) { org.ovirt.engine.core.bll.storage.domain.TransportalSANStorageDomainDevicesCommand.setCustomCommaSeparatedValues("deviceIds", metadataDevices); auditLogDirector.log(this, AuditLogType.USER_REDUCE_DOMAIN_DEVICES_FAILED_METADATA_DEVICES); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.GeneralException, "UserDeferred", "UserName "userIds", metadataDevices); } } validateFreeSpace(); }
public void fillMetadataDevicesInfo(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic, org.ovirt.engine.core.compat.Guid storagePoolId) { try { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.core.common.businessentities.StorageDomainStatic domainFromIrs = ((org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.StorageDomainStatic, org.ovirt.engine.core.compat.Guid>) (org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommandWithoutFailover(VDSCommandType.HSMGetStorageDomainInfo, new org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters(null, storageDomainStatic.getId()), storagePoolId, null).getReturnValue())).getFirst(); storageDomainStatic.setFirst(); storageDomainStatic.setVgMetadataDevice(domainFromIrs.getVgMetadataDevice()); } catch (java.lang.Exception e) { storageDomainStatic.setFirstMetadataDevice(null); storageDomainStatic.setVgMetadataDevice(null); org.ovirt.engine.core.bll.storage.domain.BlockStorageDomainHelper.log.info("Failed to get the domain info"); } }
protected void updateMetadataDevices() { if (((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice()) == null) || ((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice()) == null)) { blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getVds().getStorageStaticData()); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); } }
private void refreshMetadataDevicesInfoIfNeeded() { java.lang.String oldVgMetadataDevice = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice(); java.lang.String oldFirstMetadataDevice = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice(); if ((!(java.util.Objects.equals(oldVgMetadataDevice, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice()))) { storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); } blockStorageDomainHelper.checkDomainMetadataDevices(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.initializeStorageDomain(); java.lang.String storage = ((org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage())!= null)? org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage() : ""; org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setStorage(""); org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setStorage(""); if ((org.apache.commons.lang.StringUtils.isNotEmpty(storage)) && (org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage())) && (org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.addStorageDomainInIrs())) { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.updateStorageDomainDynamicFromIrs(); proceedVGLunsInDb(); blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getVds().getStoragePoolId()); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStoragePoolId()); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStoragePoolId()); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStoragePoolId()); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getDeviceList(java.util.Set<java.lang.String> lunsIds) { if ((AbstractSyncLunsCommand.getParameters().getDeviceList()) == null) { return runGetDeviceList(lunsIds); } if (lunsIds == null) { return AbstractSyncLunsCommand.getParameters().getDeviceList(); } java.util.Set<java.lang.String> lunsIdsSet = new java.util.HashSet<>(lunsIds); return AbstractSyncLunsCommand.getParameters().getDeviceList().filter((lun) -> lunsIdsSet.contains(lun.getId())).collect(lunsIds)); }
private org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters createParameters(org.ovirt.engine.core.compat.Guid storageDomainId, java.util.List<org.ovirt.engine.api.model.LogicalUnit> newLuns, boolean force) { org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters params = new org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters(); params.setStorageDomainId(storageDomainId); java.util.Set<java.lang.String> lunIds = new java.util.HashSet<>(); params.setLuns(logicalUnit::getId).collect(java.util.HashSet.toCollection(java.util.Collections.singletonList(java.util.Collections.singletonSet(java.util.Collections.singletonSet.toCollection(java.util.Collections.singletonList(java.util.Collections.singletonList(java.util.Collections.singletonList(java.util.Collections.singletonList(java.util.Collections.singletonList(java.util.Collections.singletonList(java.util.Collections.singletonList(java.util.Collections.singletonList(java.util.Collections.singletonList(java.util.Collections.singletonList(java.util.Collections.singletonList(java.util.Collections.singletonList(java.util.Collections.singletonList(java.lang.singletonList.toCollection(java.util.Collections.singletonList<org.ovirt.engine.core.common.businessentities.storage.LunsupportedLuns, java.util.Collections.Collections.singletonList(storageDomainList)); return params; }
@java.lang.Override protected void writeGeneralData() { super.writeGeneralData(); _writer.writeElement(OvfProperties.TEMPLATE_ID, _vmTemplate.getId().toString()); org.ovirt.engine.core.common.businessentities.OriginType originType = _vmTemplate.getOrigin(); _writer.writeElement(OvfProperties.Origin); _writer.writeElement(OvfProperties.Origin); _writer.writeElement(OvfProperties.Origin, (oProperties.getDefaultDisplayType().getValue()))); _writer.writeElement(OvfProperties.TEMPLATE_DEFAULT_DISPLAY_TYPE, java.lang.String.valueOf(_vmTemplate.getDefaultDisplayType().getValue())); _writer.writeElement(OvfProperties.TEMPLATE_TYPE, _vmTemplate.getTemplateType().name()); _writer.writeElement(OvfProperties.TEMPLATE_TYPE, _vmTemplate.getTemplateType().name()); _writer.writeElement(OvfProperties.TEMPLATE_ID, _vmTemplate.getBaseTemplateId().toString()); _writer.writeElement(OvfProperties.TEMPLATE_ID, _vmTemplate.getBaseTemplateId().toString()); _writer.writeElement(OvfProperties.TEMPLATE_VERSION_NUMBER, java.lang.String.valueOf(_vmTemplate.getTemplateVersionNumber())); _writer.writeEndElement(); }
private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getSelectedItem(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((getSelectedItems())!= null)? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (getSelectedItems())) : null; boolean shouldAllowEdit = true; if (disk!= null) { shouldAllowEdit =!(disk.isOvfStore())) && (!(isDiskLocked(disk))); } getNewCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed((((disks!= null) && (disks.size()) == 1)) && ((disks.size()) == 1)) && ((disks.size()) == 1)) && (isRemoveCommandAvailable()))); getScanAlignmentCommand().setIsExecutionAllowed((((disks!= null) && ((disks.size()) > 0)) && (isRemoveCommandAvailable()))); getScanAlignmentCommand().setIsExecutionAllowed(isExportCommandAvailable()); updateCopyAndMoveCommandAvailability(disks); org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel.updateChangeQuotaActionAvailability(((getItems())!= null? getItems() : null), ((getItems())!= null? getSelectedItems() : null), getChangeQuotaCommand()); getPauseCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isCancelAllowed(disks)); getPauseCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.ExportImageModel.isCancelAllowed(disks)); getPauseCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.ExportModel.getItems().isCancelAllowed(disks)); getPauseCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.
protected void updateDefaultHost() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getModel().getSelectedCluster(); final org.ovirt.engine.ui.uicompat.UIConstants constants = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants(); if (cluster == null) { getModel().getDefaultHost().setItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); getModel().getDefaultHost().setItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); return; } getHostListByCluster(clusters, asyncQuery((hosts) -> ((hosts) -> ((hosts.getSelectedItem())!= null)) && (!(oldDefaultHosts.isEmpty()))) { setModel(getModel().getDefaultHost().setItems(hosts); if ((oldDefaultHosts!= null) && (!(oldDefaultHosts.isEmpty()))) { setVm(getDefaultHost().getSelectedItem().setItems(hosts); oldDefaultHosts = new org.ovirt.engine.ui.uicommonweb.models.vms.ArrayListModel(oldDefaultHosts); } }
private void updateActionAvailability() { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> items = ((getSelectedItems())!= null)? getSelectedItems() : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>(); org.ovirt.engine.core.common.businessentities.StorageDomain item = getSelectedItem(); org.ovirt.engine.core.common.businessentities.StorageDomain item = getSelectedItem(); getNewDomainCommand().setIsAvailable(true); getEditCommand().setIsAvailable(true); getEditCommand().setIsExecutionAllowed((((items.size()) == 1) && (isEditAvailable(item)))); getRemoveCommand().setIsExecutionAllowed((((items.size()) == 1) && (!(items.get(0).getStorageType().isOpenStackDomain()))) && ((items.get(0).getStorageDomainSharedStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Unattached)))); getDestroyCommand().setIsExecutionAllowed((((((item!= null) && ((items.size()) == 1)) && (!(items.get(0).getStorageType().isOpenStackDomain()))) && ((item.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active))) && (item.getStorageDomainType().isDataDomain()))) && ((item.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active))) && (item.getStorageDomainType().isDataDomain()))); getUpdateOvfsCommand().setIsExecutionAllowed((((item!= null) && ((items.size()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active))) && (item.getStorageDomainType().isDataDomain()))) && ((item.getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active))) && (item.getStorageDomainType().isDataDomain()))); getUpdateOvfsCommand().setIsExecutionAllowed
private void updateActionAvailability() { getCopyCommand().setIsExecutionAllowed((((getSelectedItems())!= null) && ((getSelectedItems().size()) > 0)) && (isCopyCommandAvailable()))); org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel.updateChangeQuotaActionAvailability(((getItems())!= null? getItems() : null), getSelectedItems())); }
private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getSelectedItem(); getNewCommand().setIsExecutionAllowed(true); getAttachCommand().setIsExecutionAllowed(true); getAttachCommand().setIsExecutionAllowed(true); getAttachCommand().setIsExecutionAllowed(true); getAttachCommand().setIsExecutionAllowed(((((disk!= null) && (isSingleDiskSelected())) && (!(isDiskLocked(disk)))) && (((isVmDown()) || (isRemoveCommandAvailable())))); getRemoveCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && (isRemoveCommandAvailable()))); getRemoveCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && (isRemoveCommandAvailable()))); getMoveCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && ((isMoveCommandAvailable()) || (isLiveMoveCommandAvailable())))); updateScanAlignmentCommandAvailability(); getPlugCommand().setIsExecutionAllowed(isPlugCommandAvailable(true)); updateScanAlignmentCommandAvailability(); getPlugCommand().setIsExecutionAllowed(isPlugCommandAvailable(false)); }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.MainSectionPresenter.TYPE_SetHeader)) { setPanelContent(headerPanel, content); } else if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.MainSectionPresenter.TYPE_SetMainContent)) { setPanelContent(header); } setPanelContent(mainContentPanel, content); } else { super.setInSlot(slot, content); } }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLogicalUnits() { boolean reportStatus = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendHostStorageResource.REPUS, true, true); org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters params = new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters(asGuid(hostId), org.ovirt.engine.core.common.businessentities.storage.StorageType.UNKNOWN, reportStatus, null); params.setValidHostStatus(true); return getBackendCollection(VdcQueryType.GetDeviceList, params); }
private void getMenuLayout(org.ovirt.engine.ui.webadmin.widget.tab.PrimaryMenuItem[] items, org.ovirt.engine.ui.webadmin.widget.tab.PrimaryItem layout) { layoutMap.clear(); for (org.ovirt.engine.ui.webadmin.widget.tab.PrimaryMenuItem layout : items) { if ((layout.getHref())!= null) { org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuItem layout = new org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuItem(); details.setPrimaryPriority(layout.getIndex()); details.setSecondaryTitle(layout.getTitle()); details.setIcon(layout.getIcon()); layoutMap.put(layout.getHref(), details); } } for (org.ovirt.engine.ui.webadmin.widget.tab.MenuItem subMenu : secondaryItems) { org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuDetails details = new org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuDetails(); details.setPrimaryPriority(subMenu.getHref(), details); details.setTitle(subMenu.getHref(), details); layoutMap.put(org.ovirt.engine.ui.webadmin.widget.tab.MenuItemSubTabDetailsPopupView.constants.getHref(), details); } }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, final java.util.Comparator<? super T> comparator) { if ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getEntity()) == null) { return; } org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getEntity().getId()); parameters.setRefresh(org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, parameters, new org.ovirt.engine.ui.uicommonweb.models.storage.SetSortedItemsAsyncQuery(compatator)); }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase, org.ovirt.engine.ui.uicommonweb.models.vms.VmModel asyncCallback) { vdcQueryParametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, vdcQueryParametersBase, asyncCallback); setIsQueryFirstTime(false); }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase) { syncSearch(vdcQueryType, vdcQueryParametersBase, newSetItemsAsyncQueryAsyncQuery()); }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, org.ovirt.engine.core.common.queries.QueryParametersBase queryParametersBase, org.ovirt.engine.ui.uicommonweb.models.vms.VmModel<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncCallback) { queryParametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, queryParametersBase, asyncCallback); setIsQueryFirstTime(false); }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, org.ovirt.engine.core.common.queries.QueryParametersBase queryParametersBase) { syncSearch(vdcQueryType, queryParametersBase, newSetItemsAsyncQuery()); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLogicalUnits() { boolean reportStatus = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendHostStorageResource.REPORT_STATUS, true, true); return getBackendCollection(QueryType.GetDeviceList, new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters(asGuid(hostId), org.ovirt.engine.core.common.businessentities.storage.StorageType.UNKNOWN, reportStatus, null)); }
java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> runMultipleQueries(java.util.ArrayList<org.ovirt.engine.core.common.queries.QueryType> vdcQueryTypeList, java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryParametersBase> paramsList);
protected org.ovirt.engine.core.vdsbroker.vdsbroker.IVdsServer initializeVdsBroker(org.ovirt.engine.core.compat.Guid vdsId) { org.ovirt.engine.core.vdsbroker.VdsManager vdsmanager = org.ovirt.engine.core.vdsbroker.vdsbroker.Injector.get(org.ovirt.engine.core.vdsbroker.ResourceManager.class).getVdsManager(vdsId); if (vdsmanager == null) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.RESOURCE_MANAGER_VDS_NOT_FOUND, java.lang.String.format("$s with id: %1$s was not found", vdsId)); } setVdsAndVdsStatic(vdsmanager.getCopyVds()); return vdsmanager.getVdsProxy(); }
@java.lang.Override protected void initializeModelHandlers(org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel model) { super.initializeModelHandlers(model); model.getItemSavedEvent().addListener((ev, sender, args) -> clearSelection()); getModel().getSelectionModel().addSelectionChangeHandler((event) -> { this.setSelectedItems(getModel().getSelectedObjects()); }
private void writeHostDevice(org.ovirt.engine.core.common.businessentities.VmHostDevice device) { if ((device.getDevice()) == null) { return; } java.lang.String deviceName = device.getDevice(); if (type!= null) { switch (type) { case "pci" : writePciHostDevice(device); break; break; } }
private void writePciHostDevice(org.ovirt.engine.core.common.businessentities.VmHostDevice device) { if (device.isIommuPlaceholder()) { return; } writer.writeStartElement("hostdev"); writer.writeStartElement("hostdev"); writer.writeAttributeString("mode", "subsystem"); writer.writeAttributeString("type", "pci"); java.lang.String[] nameElements = device.getDevice().split("_"); writer.writeStartElement("address"); writer.writeStartElement("address"); writer.writeStartElement("address"); writer.writeAttributeString("address"); writer.writeAttributeString("address"); writer.writeAttributeString("slot", java.lang.String.format("0x%s", nameElements[2])); writer.writeAttributeString("function", java.lang.String.format("0x%s", nameElements[4])); writer.writeEndElement(); writeAddress(device); writer.writeEndElement(); }
private void initStorageDomainDiscards() { if ((org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().getDiscards()) == null) { org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().setDiscards(getDefaultDiscards().getId()); } }
protected boolean validateVmNotDuringSnapshot() { java.util.Set<org.ovirt.engine.core.compat.Guid> mergedSnapshotDisks = getSnapshotDisks(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getParameters().getSnapshotId()); java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> vmLockedSnapshots = getAllVmLockedSnapshots(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVmId()); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : vmLockedSnapshots) { java.util.Set<org.ovirt.engine.core.compat.Guid> snapshotDisks = getSnapshotDisks(snapshot.getId()); if (snapshot.stream().anyMatch(mergedSnapshotDisks)) { return validate(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IS_DURING_SNAPSHOT)); } } return validate(org.ovirt.engine.core.bll.ValidationResult.VALID); }
private static boolean isRestApiScope(final javax.servlet.http.HttpServletRequest request) { return (org.ovirt.engine.core.utils.servlet.OAuthException ex) { }
private void convertCustomPropertiesStrToMaps(org.ovirt.engine.core.compat.Version version, java.lang.String propertiesValue, java.util.Map<java.lang.String, java.lang.String> predefinedPropertiesMap, java.util.Map<java.lang.String, java.lang.String> userDefinedPropertiesMap) { java.util.Map<java.lang.String, java.lang.String> propertiesMap = convertProperties(propertiesValue, allVmProperties.get(version)); java.util.Set<java.lang.String> propertiesEntries = propertiesMap.entrySet(); java.util.Set<java.lang.String, java.lang.String>> propertiesMap = propertiesMap.entrySet(); java.util.Set<java.lang.String> predefinedPropertiesKeys = predefinedProperties.get(version).keySet(); java.util.Set<java.lang.String> predefinedPropertiesKeys = userdefinedProperties.get(version).keySet(); for (java.util.Map.Entry<java.lang.String, java.lang.String> propertiesEntry : propertiesEntry : propertiesEntries) { java.lang.String propertyKey = propertiesEntry.getKey(); java.util.Collections.emptyMap(propertiesEntry.getValue()).put(""); if (predefinedPropertiesKeys.contains(propertyKey)) { predefinedPropertiesMap.put(propertyKey, propertyValue); } if (userDefinedPropertiesKeys.contains(propertyKey)) { userDefinedPropertiesMap.put(propertyKey, propertyValue); } } }
public boolean syntaxErrorInProperties(java.util.Map<java.lang.String, java.lang.String> properties) { boolean error = false; if ((properties!= null) && (!(properties.isEmpty()))) { for (java.util.Map.Entry<java.lang.String, java.lang.String> e : properties.entrySet()) { java.lang.String key = e.getKey(); if ((key == null) || (!(key.matches(org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils.KEY_REGEX)))) { error = true; break; } if (!(java.util.Collections.empty(e.getValue()).thenReturnValue())) { error = true; break; } } } return error; }
public java.lang.String convertProperties(java.util.Map<java.lang.String, java.lang.String> properties) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); if ((properties!= null) && (!(properties.isEmpty()))) { for (java.util.Map.Entry<java.lang.String, java.lang.String> e : properties.entrySet()) { sb.append(e.getKey()); sb.append(e.getKey()); sb.append(e.getValue()); sb.append(e.getValue()); } sb.deleteCharAt(((sb.length()) - 1)); } return sb.toString(); }
public void validateWithDirectLunIdAndInvalidVds() { command.getParameters().setDirectLunId(org.ovirt.engine.core.compat.Guid.newGuid()); doReturn(false).when(command).validateVds(); assertFalse(command.validate()); }
public boolean validatePMAAgentPort() { java.lang.Integer port = getParameters().getAgent().getPort(); java.lang.String portStr = null; if (getParameters().getAgent().getOptionsMap().containsKey(PORT)) { return portStr; } else { return true; } }
@java.lang.Override protected void createItems() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> selectedLabels = getModel().getSelectedItems(); boolean noLabelsSelected = (selectedLabels == null) || (selectedLabels.isEmpty()); if (noLabelsSelected) { addNoLabelsMessage(); return; } itemList.clear(); java.util.Collections.sort(selectedLabels, new org.ovirt.engine.ui.common.widget.item.com.com.google.gwt.event.dom.client.Comparator()); for (org.ovirt.engine.core.common.businessentities.Label label : selectedLabels) { final org.ovirt.engine.ui.common.widget.item.ItemListModel selectedLabel = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (label)); final org.ovirt.engine.ui.common.widget.item.LabelListModel.getModel().getSelectedItems().remove(selectedLabel); org.ovirt.engine.ui.common.widget.renderer.AffinityLabelListWidget.this.refreshItems(); } }); itemList.add(labelListModel); }
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { this.getModel().getSelectedItems().remove(selectedLabel); this.refreshItemsChanged(); }
private void addAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getAffinityGroups(); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> label = affinityLabels.stream().map(Label::getId).collect(java.util.Collections.singletonList()); if (org.ovirt.engine.core.bll.AddVmCommand.getParameters().isEmpty()) { return affinityLabels.add(org.ovirt.engine.core.bll.AddVmCommand.getVmId(), labelIds); } }
java.lang.String affinityLabelsSubTabDeleteButton();
@java.lang.Override protected void initTable() { super.initTable(); getTable().addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.core.common.businessentities.Label>(constants.affinityLabelsSubTabDeleteButton()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getRemoveCommand(); } }); }
@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList) { java.util.Set<org.ovirt.engine.core.compat.Guid> hostIds = this.getAffinityLabel().getHosts(); java.util.Collections.sort(hostList, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); this.getAffinityGroup().init(hostList, (hostIds!= null? new java.util.ArrayList(hostIds) : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); this.getHostsSelectionModel().init(hostList, (hostIds!= null? new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>() : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); this.stopProgressOnVmsAndHostsInit(); }
public void loadEntitiesNameMap() { org.ovirt.engine.ui.uicommonweb.models.configure.EntityModel entityModel = new org.ovirt.engine.ui.uicommonweb.models.configure.EntityModel(new org.ovirt.engine.ui.frontend.AsyncCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Object model) { if (entityModel!= null) { entities.getEntity().clear(); } } })); }
@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList) { this.getAffinityGroup().init(hostList, (hostIds!= null? hostIds : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); this.getHostsSelectionModel().init(hostList, (hostIds!= null? hostIds : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); this.stopProgressOnVmsAndHostsInit(); }
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { this.stopProgress(); if (((result!= null) && ((result.getReturnValue())!= null)) && (result.getReturnValue().getSucceeded())) { this.cancel(); } }
@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList) { this.getAffinityGroup().init(vmList, (vmIds!= null? new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>() : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); this.getVmsSelectionModel().init(vmIds); }
private void addAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getParameters().getAffinityGroup(); java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> label = affinityLabels.stream().map(label); java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> label = affinityLabels.stream().map(label); org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.log.debug("Failed to remove the cluster {0}", affinityLabel.getId(), label.getLabel()); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.VirtualMachineSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.AuditLog, org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<java.lang.Void>, org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.SubTabVirtualMachineEventPresenter.constants.virtualMachineEventSubTabLabel(), 11, modelProvider); }
void onSave() { if ((!(validate())) || ((getProgress())!= null)) { return; } org.ovirt.engine.core.common.businessentities.Label label = getAffinityLabel(); label.setName(getName().getEntity()); label.setVms(new java.util.HashSet(getVmsSelectionModel().getSelectedVmIds())); label.setHosts(new java.util.HashSet(getHostsSelectionModel().getSelectedVmIds())); startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(saveActionType, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.configure.LabelModel.this.cancel(); } }, this); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = runInternalAction(ActionType.CreateAllSnapshotsFromVm, getCreateSnapshotParameters(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getCompensationContext()); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = runInternalAction(ActionType.CreateAllSnapshotsFromVm, getCreateSnapshotParameters(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getContext())); org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().setAutoGeneratedSnapshotId(vdcReturnValue.getActionReturnValue()); persistCommand(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getParentCommand(), ((getCallback())!= null)); org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.setSucceeded(true); }
protected boolean checkCanBeMoveInVm() { return validate(new org.ovirt.engine.core.bll.validator.storage.DiskValidator(getImage()).isDiskPluggedToAnyVm(false)); }
protected void initializeCommand(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { when(diskDao.get(any())).thenReturn(disk); org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setStatus(VMStatus.Down); when(vmDao.get(any())).thenReturn(vm); doReturn(storageDomainValidator).when(command).createMultipleDiskVmElementValidator(); doReturn(multipleDiskVmElementValidator).when(command).createMultipleDiskVmElementValidator(); doReturn(true).when(command).createDiskValidator(disk); doReturn(true).when(command).setAndValidateDiskProfiles(); doReturn(true).when(command).getImageGroupId(); doReturn(ActionType.MoveOrCopyDisk).when(command).getActionType(); }
@java.lang.Override protected void executeVmCommand() { this.setVmName(vmStaticDao.get(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getParameters().getVmId()).getName()); org.ovirt.engine.core.common.businessentities.network.VmNic iface = vmNicDao.get(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getParameters().getInterfaceId()); if (iface!= null) { interfaceName = iface.getName(); java.lang.String interType = org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(iface.getType()).getDescription(); if (interType!= null) { org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.addCustomValue("InterfaceType", interType); } org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getMacPool().freeMac(iface.getMacAddress()); org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getMacPool().freeMac(getParameters().getMacAddress()); org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getMacPool().freeMac(getParameters().getMacAddress()); org.ovirt.engine.core.bll.network.vm.vm.RemoveVmInterfaceCommand.getMacPool().freeMac(getParameters().getInterfaceId()); org.ovirt.engine.core.bll.network.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.Ids.remove(org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.getInterface())); org.ovirt.engine.core.bll.network.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.Ids.remove(vmStatic.getInterface()); org.ovirt.engine.core.bll.network.vm.vm.
private void removeNetworks() { final java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = networkDao.getAllForDataCenter(org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.network.Network network : networks) { if (network.isExternal()) { for (org.ovirt.engine.core.common.businessentities.network.VmNic nic : vmNicDao.getAllForNetwork(network.getId())) { org.ovirt.engine.core.bll.network.ExternalNetworkManager.create(nic, network).deallocateIfExternal(); } } } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(()).executeInNewTransaction(new org.ovirt.engine.core.bll.storage.pool.pool.vnicProfileDao.getAllForNetwork(net.getId())); for (final org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile : profiles) { getCompensationContext().snapshotEntity(vnicProfile); org.ovirt.engine.core.bll.storage.pool.vnicProfileDao.remove(vnicProfile.getId()); } getCompensationContext().snapshotEntity(net); org.ovirt.engine.core.bll.storage.pool.pool.network.vnicProfileDao.remove(net.getId()); }
private void unplugFromExternalNetwork() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vmNetwork = org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVmNetwork(); if ((org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVmNetwork())).deallocateIfExternal(); }
protected void removeFromExternalNetworks(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces) { javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces) { org.ovirt.engine.core.bll.network.ExternalNetworkManager.create(iface).deallocateIfExternal(); } org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); }
@org.junit.Before public void setUp() { injectorRule.bind(org.ovirt.engine.core.dao.provider.ProviderDao.class, providerDao); injectorRule.bind(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class, auditLogDirector); provider = new org.ovirt.engine.core.common.businessentities.Provider(); when(providerDao.get(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_ID)).thenReturn(provider); doReturn(providerProxyFactory).when(underTest).getProviderProxyFactory(); when(providerProxyFactory.create(provider)).thenReturn(networkProviderProxy); }
public org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo getQemuum(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newStorageDomainID, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid vdsId, boolean shouldPrepareAndTeak) { if (vdsId == null) { vdsId = vdsCommandsHelper.getHostForExecution(storagePoolId, java.util.Collections.emptyList()); } org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qos = null; if (shouldPrepareAndTeARD) { prepareImage(storagePoolId, new org.ovirt.engine.core.common.businessentities.storage.QosInfo(vdsId, storagePoolId, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, newImageGroupId, newImageId, newImageId)); } org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log.error("Failed to get qos info from storage domain info from storage domain ID, newImageId, newImageId, vdsId); } return qos; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(()).executeInNewTransaction(new org.ovirt.engine.core.compat.Guid())); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().getId()); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().getId()); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().getId()); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.setSucceeded(true); }
private void chooseHostForExecution(org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase parametersBase, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.bll.CommandBase<?> cmd, java.util.Collection<org.ovirt.engine.core.compat.Guid> executedHosts) { org.ovirt.engine.core.compat.Guid vdsForExecution = getHostForExecution(storagePoolId, executedHosts); parametersBase.setVdsId(vdsForExecution); if (cmd!= null) { if (((cmd.getCommandStep())!= null) && ((cmd.getExecutionContext().getStep())!= null)) { org.ovirt.engine.core.compat.Guid stepId = cmd.getExecutionContext().getStep().getId(); if ((cmd.getCommandStep())!= null) && ((cmd.getExecutionContext().getStep())!= null)) { org.ovirt.engine.core.compat.Guid stepId = cmd.getExecutionContext().getStep().getId(); if ((cmd.getParameters().getVdsRunningOn())!= null) { stepSubjectEntity(cmd.getParameters().getVdsRunningOn(), stepId); } } } cmd.getParameters().setVdsRunningOn(vdsForExecution); cmd.persistCommand(cmd.getParameters().getParentCommand(), ((cmd.getCallback())!= null)); } }
private void removeNetworkFromHosts(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.bll.context.CommandContext context, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics) { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = removeNetworkParametersBuilder.buildParameters(network, nics); if (!(parameters.isEmpty())) { org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(parameters); backend.runInternalMultipleActions(VdcActionType.PersistentHostSetupNetworks, parameters, context); } }
@java.lang.SuppressWarnings("unchecked") private java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsFromVgInfo() { org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId(), org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); if ((org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId()) == null) { return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (vdsCommandsHelper.runVdsCommandWithoutFailover(VDSCommandType.GetVGInfo, params, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStoragePoolId(), null).getReturnValue())); } return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (runVdsCommand(VDSCommandType.GetVGInfo, params).getReturnValue())); }
public void deallocateIfExternal() { if (((getNetwork())!= null) && (getNetwork().isExternal())) { org.ovirt.engine.core.common.businessentities.Provider<?> provider = providerDao.get(getNetwork().getProvidedBy().getProviderId()); org.ovirt.engine.core.bll.provider.network.NetworkProviderProxy providerProxy = getProviderProxyFactory().create(getNetwork().getProvidedBy().getProviderId()); org.ovirt.engine.core.bll.provider.network.NetworkProviderProxy providerProxy = getProviderProxyFactory().create(getProvider()); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase removePortFailureEvent = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); removePortFailureEvent.addCustomValue("NicName", nic.getName()); removePortFailureEvent.addCustomValue("NicId", nic.getId().toString()); removePortFailureEvent.addCustomValue("ProviderName", provider.getName()); auditLogDirector.log(removePortFailureEvent, AuditLogType.REMOVE_PORT_FROM_EXTERNAL_PROVIDER_FAILED); } } }
protected boolean validatePMAAgentPort() { java.lang.Integer port = getParameters().getAgent().getPort(); if (port == null) { java.util.HashMap<java.lang.String, java.lang.String> optionsMap = getParameters().getAgent().getOptionsMap(); if ((optionsMap!= null) && (optionsMap.containsKey(org.ovirt.engine.core.bll.FenceAgentCommandBase.PORT))) { java.lang.String portStr = getParameters().getAgent().getOptionsMap().get(org.ovirt.engine.core.bll.FenceAgentCommandBase.PORT); if (org.apache.commons.lang.StringUtils.isNumeric(portStr)) { port = java.lang.Integer.valueOf(portStr); } else { return false; } } } return true; }
private void addDnsConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations result) { boolean dnsResolverConfigurationSupported = org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.DnsResolverConfigurationSupported, this.cluster.getCompatibilityVersion()); if (!dnsResolverConfigurationSupported) { return; } java.util.List<org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.DnsResolver, this.cluster.getCompatibilityVersion()); if (!dnsResolverConfigurationSupported) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.network.Name> nameServersOfNetworkAttachment = getNameServers(network.getDnsResolver(network.getDnsResolver()); java.util.List<org.ovirt.engine.core.common.businessentities.network.Name> nameServersOfNetworkAttachment = getNameServers(reportedDnsResolver.get(reportedDnsResolver.getName())); boolean engineDefineDnsConfiguration = (nameServersOfNetworkAttachment!= null)? engineDefineDnsConfiguration = (reportedDnsResolver!= null)? java.util.Collections.singleton(nameServersOfHost), (engineDefineDnsToString(nameServersOfHost), (engineDefinedDns)? namesAsString(expectedNameServers) : ""), java.util.Collections.singletonMap(nameServersOfHost, expectedNameServers)))); boolean inSync = (isDefaultRouteNetwork)? java.lang.Boolean.toString(isDefaultRouteNetwork) : ""; result.add(org.ovirt.engine.core.utils.NetworkUtils.getDefaultString(nameServersOfHost, expectedName)); java.lang.String expected = (isDefaultRouteNetwork)? java.lang.Boolean.toString(isDefaultRouteNetwork) : ""; result.add(org.ovirt.engine.core.utils.NetworkUtils.getName(name, name, false); }
private void processSingleClusterChanges(org.ovirt.engine.core.common.action.ManageNetworkClustersParameters param) { final java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> setupNetworksParams = new java.util.ArrayList(createNetworkClustersToSetupNetworksParametersTransformer().transform(param.getAttachments(), param.getDetachments(), param.getUpdates())); org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); runInternalMultipleActions(VdcActionType.PersistentHostSetupNetworks, setupNetworksParams); }
org.ovirt.engine.core.common.action.PersistentHostSetupNetworksParameters buildParameters(org.ovirt.engine.core.compat.Guid vdsId, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> labeledNetworksToBeAdded, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> labeledNetworksToBeAdded, java.util.Map<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface, org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface, org.ovirt.engine.core.common.businessentities.network.Network>> updatedNetworks);
@java.lang.Override @org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getUserProfileDao(); existingProfile = dao.get(new org.ovirt.engine.core.compat.Guid("38cb5663-96bc-96bc-485c-834a-cbbc03acc820")); deletableProfile = dao.get(new org.ovirt.engine.core.compat.Guid("38cb5663-96bc-485c-485c-834a-cbbc03acc821")); newProfile = new org.ovirt.engine.core.common.businessentities.UserProfile(); newProfile.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newProfile.setUserId(new org.ovirt.engine.core.compat.Guid("81940459-2ec4-4-4afa-bbaa-e9624br")); newProfile.setSshPublicKeyId(new org.ovirt.engine.core.compat.Guid("64404840bc5484-2ec4eb-4eba-8b6b6a-e9624b")); newProfile.setSshPublicKey("key3"); newProfile.setLoginName("user4@testportal.redhat.redhat.com.com.google.gwt.core.client.Guid("Auth4e4e4e4e")); }
@org.junit.Test public void testUpdateLastAdminCheckStatus() { org.ovirt.engine.core.common.businessentities.aaa.DbUser nonAdminUser = dbFacade.getDbUserDao().getByUsernameAndDomain("user2@testportal.com"); assertNotNull(nonAdminUser); assertFalse(nonAdminUser.isAdmin()); dao.updateLastAdminCheckStatus(nonAdminUser.getId()); assertFalse(nonAdminUser.isAdmin()); org.ovirt.engine.core.common.businessentities.Permission perms = new org.ovirt.engine.core.common.businessentities.Permission(); perms.setRoleType(RoleType.ADMIN); perms.setRoleId(org.ovirt.engine.core.dao.DbUserDaoTest.ADMIN_ROLE_TYPE_FROM_FIXTURE_ID); perms.setAdElementId(nonAdminUser.getId()); perms.setObjectId(org.ovirt.engine.core.dao.DbUserDaoTest.SYSTEM_ROLE_TYPE_FROM_FIXTURE_ID); perms.setObjectId(org.ovirt.engine.core.dao.DbUserDaoTest.SYSTEM_OBJECT_ID); perms.setObjectType(VdcObjectType.System); dbFacade.getPermissionDao().save(perms); assertNotNull(dbFacade.getPermissionDao().get(perms.getId()); assertTrue(nonAdminUser.isAdmin()); }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { javax.servlet.http.HttpServletRequest req = ((javax.servlet.http.HttpServletRequest) (request)); javax.servlet.http.HttpServletResponse res = ((javax.servlet.http.HttpServletResponse) (response)); if (org.ovirt.engine.core.aaa.filters.FiltersHelper.isAuthenticated(req)) { chain.doFilter(request, response); } else { @java.lang.SuppressWarnings("unchecked") java.util.List<java.lang.String> schemes = ((java.util.List<java.lang.String>) (req.getAttribute(FiltersHelper.REQUEST_SCHEMES_KEY))); if (scheme == null) { schemes = java.util.Collections.emptyList(); } java.util.Set<java.lang.String> allSchemes = new java.util.HashSet<>( schemes); if ((additionalSchemes)!= null) { allSchemes.addAll(additionalSchemes); } for (java.lang.String scheme : allSchemes) { res.setHeader(Filters); } for (java.lang.String scheme : allSchemes) { res.setHeader(FiltersHelper.getAttribute(java.lang.String.format(ERROR_URL_FORMAT, defaultVersion, req.getAttribute(SessionConstants.SSH_AUTHENTICATION_ERR_MSG))).foremanify(req, res); } else { res.sendError(HttpServletResponse.SC_UNAUTHORIZED); } } }
@java.lang.Override public void init(javax.servlet.FilterConfig filterConfig) throws javax.servlet.ServletException { for (java.lang.String paramName : java.util.Collections.list(filterConfig.getInitParameterNames())) { if (paramName.startsWith("schedule")) { additionalSchemes.add(filterConfig.getInitParameter(paramName)); } }
public static boolean isBackedByHugepages(org.ovirt.engine.core.common.businessentities.VmBase vm) { if (((vm.getCustomProperties()) == null) || (vm.getCustomProperties().isEmpty())) { return false; } java.lang.StringhugePage = org.ovirt.engine.core.common.utils.HugePagesUtils.getHugePagesSize(vm); if (hugePage == null) { return false; } java.lang.Integer.parseInt(hugePage); return true; }
public static java.util.Map<java.lang.Integer, java.lang.Integer> getHugePages(org.ovirt.engine.core.common.businessentities.VmBase vm) { if (!(org.ovirt.engine.core.common.utils.HugePagesUtils.isBackedByHugepages(vm))) { return java.util.Collections.emptyMap(); } int totalPages = java.lang.Integer.parseInt(org.ovirt.engine.core.common.utils.HugePagesUtils.getHugePagesSize(vm)); int fullPages = (vm.getMemSizeMb()) /hugePageSize; int lastPage = java.lang.Math.min(1, ((vm.getMemSizeMb()) %hugePageSize)); return java.util.Collections.singletonMap(hugePages + (fullPages + (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VmBase, org.ovirt.engine.core.common.utils.Pair<java.lang.Integer, java.lang.Integer, java.lang.Integer>(fullPages + (((vm.getMemSizeMb()) %hugePageSize)); }
@org.junit.Test public void getHugeMemoryFitsIntoOneHugePage() { org.ovirt.engine.core.common.businessentities.VmBase base = new org.ovirt.engine.core.common.businessentities.VmBase(); base.setCustomProperties("hugepages=1024"); base.setMemSizeMb(1024); assertThat(org.ovirt.engine.core.common.utils.HugePagesUtils.getHugePages(base).size(), is(1)); }
@org.junit.Test public void getHugePagesNoHugePagesDefined() { org.ovirt.engine.core.common.businessentities.VmBase base = new org.ovirt.engine.core.common.businessentities.VmBase(); base.setMemSizeMb(1025); assertThat(org.ovirt.engine.core.common.utils.HugePagesUtils.getHugePages(base).size(), is(0)); }
@org.junit.Test public void getHugePagesMemoryDoesNotFitIntoOne() { org.ovirt.engine.core.common.businessentities.VmBase base = new org.ovirt.engine.core.common.businessentities.VmBase(); base.setCustomProperties("hugepages=1024"); base.setMemSizeMb(1025); assertThat(org.ovirt.engine.core.common.utils.HugePagesUtils.getHugePages(base).size(), is(1)); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.VolumeSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.volumes.VolumeListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.SubTabVolumePermissionPresenter.constants.volumePermissionSubTabLabel(), 3); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.disk.DiskSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.disks.DiskListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.storage.Disk>> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.disk.SubTabDiskPermissionPresenter.constants.diskPermissionSubTabLabel(), 4); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.errataSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.DetailTabModelProvider<org.ovirt.engine.core.common.businessentities.ErrataListModel, org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.Erratum>> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.errataDetailsPresenter.constants.errataDetailsSubTabLabel(), 1); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.pool.PoolSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.pool.PoolListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.VmPool>> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.SubTabPoolPermissionPresenter.constants.poolPermissionSubTabLabel(), 2); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.VolumeSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession, org.ovirt.engine.ui.uicommonweb.models.volumes.VolumeListModel, org.ovirt.engine.ui.uicommonweb.models.volumes.VolumeListModel> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.SubTabVolumeGeoRepListModel>()), new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.SubTabVolumeGeoRepListModel.constants.volumeGeoRepList(), 4); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.VmTemplate, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStorageRegisterTemplatePresenter.constants.storageTemplateBackupSubTabLabel(), 3); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.StorageDomain>> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStoragePermissionPresenter.constants.storagePermissionSubTabLabel(), 13); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.StorageDomain>, org.ovirt.engine.ui.uicommonweb.models.storage.StorageDomainModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRListModel> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStorageDRPresenter.constants.storageDRSubTabLabel(), 12); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.datacenter.DataCenterSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterListModel, org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterListModel<org.ovirt.engine.core.common.businessentities.StoragePool>> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.SubTabDataCenterPermissionPresenter.constants.dataCenterPermissionSubTabLabel(), 5); }
java.lang.String getPrefixKey(java.lang.String key) { return ((org.ovirt.engine.ui.common.system.ClientStorageImpl.CLUSTER_STORAGE_KEY_PREFIX) + key; }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.template.TemplateSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.VmTemplate>> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.template.SubTabTemplatePermissionPresenter.constants.templatePermissionSubTabLabel(), 5); }
private java.util.Map<java.lang.Integer, java.lang.Integer> subractMaps(java.util.Map<java.lang.Integer, java.util.Map<java.lang.Integer, java.lang.Integer> amount) { java.util.Map<java.lang.Integer, java.lang.Integer> result = new java.util.HashMap<>(from); for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> subs : amount.entrySet()) { result.put(subs.getKey(), (key, val) -> (subscriber.getValue())); } return java.util.Collections.unmodifiableMap(result); }
public static java.util.Map<java.lang.Integer, java.lang.Integer> collectForHost(org.ovirt.engine.core.bll.scheduling.pending.PendingResourceManager manager, org.ovirt.engine.core.compat.Guid host) { java.util.Map<java.lang.Integer, java.lang.Integer> pageCount = new java.util.HashMap<>(); for (org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages resource : manager.pendingHostResources(host, org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages.class)) { java.util.Map<java.lang.Integer, java.lang.Integer> pageCount = new java.util.HashMap<>(); for (org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages resource : manager.getPendingHostResources(host, org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages.class)) { java.util.Map<java.lang.Integer, java.lang.Integer> list = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.PendingVDSGroup : getItems()) { org.ovirt.engine.core.common.businessentities.PendingVDSGroup : getEntity(host, org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages.class)); } } return java.util.Collections.unmodifiableMap(resource.getPageSize(), (hpsize, count, null? 0 : resource.getCount())); }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((getHost()) == null? 0 : getHost().getEntity(getHost(), pageSize); result = (prime * result) + ((getHost()) == null? 0 : pageSize.hashCode()); result = (prime * result) + ((getHost()) == null? 0 : getHost().getEntity()); result = (prime * result) + ((getHost()) == null? 0 : getHost().getEntity()); result = (prime * result) + ((getHost()) == null? 0 : getEntity().getEntity().getEntity().hashCode()); result = (prime * result) + ((getReturnValue()) == null? 0 : getReturnValue().getReturnValue().getReturnValue().getEntity(0); result = (prime * result) + ((getReturnValue) + ((getReturnValue()) == null? 0 : getReturnValue().getReturnValue().getReturnValue())); return result; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { if (!(org.ovirt.engine.core.common.utils.HugePagesUtils.isBackedByHugepages(vm.getStaticData()))) { return new java.util.ArrayList(hosts); } java.util.Map<java.lang.Integer, java.lang.Integer> requiredPages = org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VDS> hosts.size()); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> newHosts = new java.util.ArrayList(host.size()); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { java.util.Map<org.ovirt.engine.core.common.businessentities.VDS> newHosts = new java.util.ArrayList(host.size()); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> availableHosts = new java.util.ArrayList(host.size()); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { java.util.Map<java.lang.Integer, java.lang.Integer> availablePages = subnetworks.get(pendingHugePages); if (!(requiredPages.contains(p).getOrDefault(p).getOrDefault(p).getValue()))) { org.ovirt.engine.core.bll.scheduling.policyunits.HugePagesFilterPolicyUnit.log.debug("Host {} does
@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if ((o == null) || ((getClass())!= (o.getClass()))) { return false; } org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages that = ((org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages) (o)); return ((pageSize) == (that.pageSize)) && (org.ovirt.engine.core.bll.scheduling.pending.PendingHugePagesThatThatThat(this, that.pageSize)) && (java.util.Objects.equals(getHost(), that.getHost())); }
private org.ovirt.engine.ui.common.view.Ancestor.client.ui.AnnotationListItem createSelectionDropDown(com.google.gwt.safehtml.shared.SafeHtml currentName) { org.ovirt.engine.core.common.view.OvirtBrickOptions exchangeButton = new org.ovirt.engine.ui.common.view.OvirtBrickProperties(); switchButton.setIcon(IconType.EXCHANGE); case OPENDOWN : org.ovirt.engine.ui.common.view.ButtonANGEButton.constants.EXCHANGE); org.gwtbootstrap3.client.ui.Button exchangeButton = new org.ovirt.engine.ui.common.view.Button(); switchButton.setIcon(IconType.EXCHANGE); org.ovirt.engine.ui.common.view.Errors.client.ui.Button anchor = dropDown.getAnchor(); anchor.setText(currentName.asString()); anchor.getElement().getStyle().setWidth(28, Unit.PX); anchor.addClickHandler((e) -> popover.getVisible()) { if (popoverover.isVisible()) { popover.hide(); } else { popover.add(expand.getName()); } } }); anchor.add(expandener); createPopover(candidate); return dropDown; }
public void setCurrentSelectedName(com.google.gwt.safehtml.shared.SafeHtml name) { currentSelectedItemWidget = createSelectionDropDown(name); }
void setCurrentSelectedName(com.google.gwt.safehtml.shared.SafeHtml name);
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getName(T item) { java.lang.String result = ""; if (item instanceof org.ovirt.engine.core.common.businessentities.Nameable) { result = ((org.ovirt.engine.core.common.businessentities.Nameable) (item)).getName(); } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(result); }
private java.util.List<T> getItemsAsList(M searchableListModel) { return items; }
public void previousEntity() { M searchableListModel = listModelProvider.getModel(); T entity = ((T) (searchableListModel.getSelectedItem())); java.util.List<T> itemsAsList = getItemsAsList(selectedItem); int currentIndex = itemsAsList.indexOf(entity); int newIndex = currentIndex - 1; if (newIndex < 0) { if (((searchableListModel.getSearchPreviousPageCommand().getIsExecutionAllowed()) && (searchableListModel.getIsExecutionAllowed())) { updateToLastRow = true; } } else { selectionModel.setSelected(itemsAsList.get(newIndex), true); } }
public void nextEntity() { M searchableListModel = listModelProvider.getModel(); T entity = ((T) (searchableListModel.getSelectedItem())); java.util.List<T> itemsAsList = getItemsAsList(selectedItem); int currentIndex = itemsAsList.indexOf(entity); int newIndex = currentIndex + 1; if (newIndex >= (itemsAsList.size())) { if (((itemsAsList.size()) && (itemsAsList.size())) { if (((itemsAsList.size()) && (itemsAsList.size())) && (searchableListModel.get(newIndex), true))) { if (((itemsAsList.get(newIndex), true)) && (itemsAsList.size())) { updateToFirstRow = true; } } } else { selectionModel.setSelected(itemsAsList.get(newIndex), true); } }
@java.lang.Override public void modelSelected(T model) { org.ovirt.engine.ui.common.presenter.OvirtBrickPresenterWidget.getView().hidePopup(); selectionModel.setSelected(model, true); }
private void updateSelectedRows() { if (updateToFirstRow) { updateToLastRow = false; java.util.Collection<T> items = listModelProvider.getModel().getItems(); if (items instanceof java.util.List) { final java.util.List<T> items = ((java.util.List<T>) (items)); if (!(itemsAsList.isEmpty())) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(this.get(0).get(0)); } } } else if (updateToLastRow) { updateToLastRow = false; java.util.List<T> itemsAsList = ((java.util.List<T>) (items)); if (!(items instanceof java.util.List) { final java.util.List<T> itemsAsList = ((java.util.List<T>) (items)); if (!(itemsAsList.isEmpty())) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(itemsAsList.get(((itemsAsList.size()) - 1)); } } } }
@java.lang.Override protected void onBind() { super.onBind(); M listModel = listModelProvider.getModel(); listModel.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.ListModel>() { @java.lang.Override public void onBind(); }
private void createPopup(org.ovirt.engine.ui.common.widget.tooltip.Anchor anchor) { popover = new org.ovirt.engine.ui.common.widget.tooltip.OvirtLatch(or); popover.setTrigger(Trigger.MANUAL); popover.setPlacement(Placement.BOND); popover.setContainer(org.ovirt.engine.ui.common.widget.tooltip.OvirtNodeItemTooltip.BOND_BOND); }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetSearchPanel)) { if (content!= null) { actionPanel.setSearchPanel(content); actionPanel.setVisible(true); } } else if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetBrickStatusPresenter.TYPE_SetBrick)) { if (content!= null) {breadCpu.clear(); } } else { super.setInSlot(slot, content); } }
@java.lang.Override public void onLoad() { super.onLoad(); keyHandler = com.google.gwt.user.client.Event.addNativePreviewHandler((event) -> { com.google.gwt.dom.client.Event.addNativePreviewHandler((event) -> { com.google.gwt.dom.client.NativeEvent.addNativePreviewHandler((event) -> { com.google.gwt.dom.client.NativeEvent.getNativeEvent().addNativePreviewHandler(((event) -> { com.google.gwt.dom.client.NativeEvent nativeEvent = event.getNativeEvent(); if (((nativeEvent.getCharCode()) == (Event.getKeyCode())) || ((nativeEvent.getKeyCode()) == (KeyCodes.KEY_S)) { if ((nativeEvent.getCtrlKey()) == (nativeEvent.getAltKeyCode()) && (nativeEvent.getAltKey())) { if ((nativeEvent.getCtrlKey()) == (KeyCodes.getKeyCode()) ==KeyCodes.KEY_DOWN)) { nativeEvent.preventDefault(); } } else if ((!(this. breadCrumbs.getView().isSearchVisible())) && ((nativeEvent.getKeyCode()) ==KeyCodes.KEY_UP)) { nativeEvent.preventDefault(); } else if ((!(this.readCpuThreads.getView().isSearchVisible())) && ((nativeEvent.getKeyCode()) == 0)) { nativeEvent.stopPropagation(); } else if (((org.ovirt.engine.ui.webadmin.widget.table.column.Cell.AbstractPreviewHandler.getWidget().isSearchVisible())) && ((nativeEvent.getKeyCode()) == 0) { nativeEvent.stopPropagation(); } } } }); if (((model.getWidgetCount()) == 0) { if ((oldEvent.getWidgetCount()) == 0) { preventCpuCount(); } } }
public void buildCrum(java.lang.String modelTitle, java.lang.String modelHref) { buildCursor(new org.ovirt.engine.ui.common.widget.ubootstrap3.Abstractor.Item("")); java.lang.String primaryLabel = menuLayout.getPrimaryGroupTitle(modelTitle); if (primaryLabel!= null) { breadCpubs.add(new org.gwtbootstrap3.client.ui.ListItem(primaryLabel)); } org.gwtbootstrap3.client.ui.Anchor.getInstance().setHref(modelTitle); mainModelAnchor.add(mainModelAnchor); }
public boolean hasActionPanelPresenterWidget() { return (getActionPanel())!= null; }
@java.lang.Override protected void onReveal() { super.onReveal(); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.setSubTabPanelVisible(false); getBreadCpu().clear(); getTable().resetScrollPosition(); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getView().setBrick(getBrick()); }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetSearchPanel)) { if (content!= null) { if ((actionPanel) == null) { searchPanel = content; } else { actionPanel.setSearchPanel(((com.gwtplatform.mvp.client.PresenterWidget<?>) (content))); } } } else if (slot == null) { actionSearchPanel = ((org.ovirt.engine.ui.common.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetActionPanel))); if (content!= null) { actionSearchPanel = ((org.ovirt.engine.ui.common.presenter.ActionPanelPresenterWidget<?>) (content)); if ((searchPanel)!= null) { actionPanel.setSearchPanel(((com.gwtplatform.mvp.client.PresenterWidget<?>) (searchPanel))); } addResultPanel(actionPanel); } } else { super.setInSlot(slot, content); } }
private void addPluginActionButtons(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>> pluginActionButtonList) { pluginActionButtonList.addPluginActionButtons(pluginActionButtonList); }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.MainTabPresenter.TYPE_SetMainTabPanelContent)) { actionPanelContainer.add(content); } else if (slot == (org.ovirt.engine.ui.common.presenter.AbstractSubTabPresenter.TYPE_SetActionPanel)) { actionPanelContainer.add(content); } }
@java.lang.Override protected void onBind() { super.onBind(); org.ovirt.engine.ui.uicommonweb.models.OrderedMultiSelectionModel<?> tableSelectionModel = ((getTable())!= null)? getTable().getSelectionModel() : null; if (tableSelectionModel!= null) { registerHandler(tableSelectionModel.addSelectionChangeHandler((event) -> { updateDetailModel(event) -> { updateDetailModelSelection(); })); } initializeHandlers(); getSelectedMainItems().registerListener(this); itemChanged(getSelectedMainItems().getSelectedItem()); setInSlot(org.ovirt.engine.ui.common.presenter.AbstractSubTabPresenter.TYPE_SetActionPanel, actionPanelPresenterWidget); }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractSubTabPresenter.TYPE_SetMainTabPanelContent)) { container.insert(content, 0); } else if (slot == (org.ovirt.engine.ui.common.presenter.AbstractSubTabPresenter.TYPE_SetActionPanel)) { if (content!= null) { container.insert(content, 0); } } else { super.setInSlot(slot, content); } }
@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getTable().getSelectionModel().addSelectionChangeHandler((event) -> { org.ovirt.engine.ui.webadmin.section.main.presenter.model.AbstractMainTabWithDetailsPresenter.getSelectedItems()); fireTableSelectionChangeEvent(); if (!(isVisible())) { handlePlaceTransition(); } } registerHandler(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getType(), (event.getSearchString()); })); registerHandler(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getType(), (event.getSearchString()); java.lang.String searchString = searchStringCollection(event.getSearchString()); if (searchString!= null) { applySearchString(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetSearchStringPrefix(modelProvider.getModel().getSearchString()); if (searchString!= null) { applySearchString(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetActionPanel, searchPanelPresenterWidget); } if (hasActionPanelPresenterWidget()) { setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetActionPanel, actionPanel); } }
@java.lang.Override protected void initializeButtons() { org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.addActionButton(new org.ovirt.engine.ui.common.widget.action.UiCommandButtonDefinition<org.ovirt.engine.core.common.businessentities.Permission>(org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.getSharedEventBus(), org.ovirt.engine.ui.common.widget.action.UiCommandButtonDefinition<org.ovirt.engine.core.common.businessentities.Permission>(org.ovirt.engine.ui.common.widget.action.UiCommandButtonDefinition<org.ovirt.engine.core.common.businessentities.Permission>(org.ovirt.engine.ui.common.widget.action.PermissionActionButtonDefinition<org.ovirt.engine.core.common.businessentities.Permission>(org.ovirt.engine.ui.common.widget.action.PermissionActionButtonDefinition<org.ovirt.engine.core.common.businessentities.Permission>(org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.getSharedEventBus(), org.ovirt.engine.ui.common.widget.uicommon.PermissionActionPanelPresenter.constants.removePermission()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getModel().getRemoveCommand(); } }); }
@org.junit.Test public void testUpdate() { existingDomain.setStorageName("UpdatedName"); existingDomain.setWipeAfterDelete(true); existingDomain.setCriticalSpaceActionBlocker(4); existingDomain.setCriticalSpaceActionBlocker(8); existingDomain.setVgMetadataDevice(FixturesTool.LUN_ID1); existingDomain.setUseForBackup(true); dao.update(existingDomain); org.ovirt.engine.core.common.businessentities.StorageDomainStatic after = dao.get(existingDomain.getId()); assertEquals(after, existingDomain); }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getStorageDomainStaticDao(); diskImageDao = dbFacade.getStorageDomainDynamicDao(); diskImageDao = dbFacade.getDiskImageDao(); imageDao = dbFacade.get(new org.ovirt.engine.core.compat.Guid("72ea666-89e1-400e1-a7c9c9ab")); newStaticDomain = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic(); newStatic.setStorageName("NewStorageDomain"); newStatic.setStorage("fDMzhE-wx3s-zo3q-Qc-Qc-Qc-QvVePlan-QvVePl")); newStaticDomain.setStorageFormat(StorageFormatType.V1); newStaticDomain.setWipeAfterDelete(true); newStaticDomain.setCriticalSpaceActionBlocker(9); newStatic.setCriticalSpaceActionBlocker(9); newStatic.setVgMetadataDevice(FixturesTool.LUN_ID2); newStatic.setVgMetadataDevice(FixturesTool.CONFIG_FOR_BACKUP_FLAG); newStatic.setVgMetadataDevice(FixturesTool.USE_FOR_BACKUP_FLAG); }
public void setUseForBackup(boolean useForBackup) { this.getStorageStaticData().setUse(useForBackup); }
public boolean getUseForBackup() { return getStorageStaticData().getUseForBackup(); }
private static org.ovirt.engine.core.common.businessentities.StorageDomainStatic cloneStorageDomainStatic(org.ovirt.engine.core.common.businessentities.StorageDomainStatic instance) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic obj = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic(); obj.setConnection(instance.getConnection()); obj.setId(instance.getStorage()); obj.setStorageDomainType(instance.getStorageDomainType()); obj.setStorageType(instance.getStorageType()); obj.setStorageName(instance.getStorageType()); obj.setStorageName(instance.getStorageName()); obj.setVgMetadataDevice(instance.getFirstMetadataDevice()); obj.setVgMetadataDevice(instance.getVgMetadataDevice()); obj.setDescription(instance.getDescription()); obj.setDescription(instance.getDescription()); obj.setWipeAfterDelete(instance.isDiscardsAfterDelete()); obj.setWarningLowSpaceIndicator(instance.isDiscards()); obj.setCriticalSpaceActionBlocker(instance.getCriticalSpaceActionBlocker()); obj.setUseForBackup(instance.getUsageer()); return obj; }
private void assertGetResult(org.ovirt.engine.core.common.businessentities.StorageDomain result) { assertNotNull(result); assertEquals("existingDomain, result); assertEquals("existing domain size 8, result.getCommittedDiskSize()); assertEquals("Actual disk size 4, result.getActualImagesSize()); assertEquals("Actual status", FixturesTool.LUN_ID_OF_DOMAIN_METADATA, result.getVgMetadataDevice()); assertEquals("Wrong status", StorageDomainSharedStatus.Active, result.getStorageDomainSharedStatus()); assertEquals("Wrong backup status", FixturesTool.USE_FOR_BACKUP_FLAG, result.getUseForBackup()); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.StorageDomainStatic domain) { return getCustomMapSqlParameterSource().addValue("id", domain.getId()).addValue("storage", domain.getId()).addValue("storage_name", domain.getStorageName()).addValue("storage_description", domain.getDescription()).addValue("storage_type", domain.getComment()).addValue("storage_domain_type", domain.getStorageType()).addValue("storage_domain_type", domain.getStorageType()).addValue("storage_domain_format_type", domain.getStorageDomainType()).addValue("last_time_used_as_master", domain.getLastTimeUsedAsMaster()).addValue("wipe_delete", domain.getWipeAfterDelete()).addValue("wipe_after_delete", domain.isDiscardsAfterDelete()).addValue("warning_metadata", domain.getVgMetadataDevice()).addValue("warning_metadata", domain.getVgMetadataDevice()).addValue("warning_type", domain.getVgMetadataDevice()).addValue("warning_check_backend", domain.getVgMetadataDisk()).addValue("use_backend", domain.getVgMetadataDisk()).addValue("use_backend", domain.getVgwt_version()).addValue("use_backend_backend", domain.getVirtio.engine.core.utils.SerializationTypeColumnStringUtils.addValue("use_backend", domain.getVgwt_version()).addValue("use_backend", domain.getVirtioScsi()); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, autoRecoverable, connection, name, storageFormat, storageFormat, storageFormat, storageType, storageType, description, sanState, warnAfterDelete, firstMetadataDevice, vgMetadataDevice, warningLowSpaceActionBlocker, useForBackup); }
public void setUseForBackup(boolean useForBackup) { this.useForBackup = useForBackup; }
public boolean getUseForBackup() { return useForBackup; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.StorageDomainStatic)) { return false; } org.ovirt.engine.core.common.businessentities.StorageDomainStatic other = ((org.ovirt.engine.core.common.businessentities.StorageDomainStatic) (obj)); return (((((((((((java.util.Objects.equals(id, other.id)) && ((autoRecoverable) == (other.autoRecoverable))) && (java.util.Objects.equals(connection, other.connection))) && (java.util.Objects.equals(name, other.name))) && (java.util.Objects.equals(name, other.storageFormat))) && (java.util.Objects.equals(name, other.storageFormat))) && ((storageFormat) == (other.storageType))) && ((storageType) == (other.storageType))) && ((sanState) == (other.sanState))) && ((sanState) == (other.sanState))) && ((sanState) == (other.sanState))) && (java.util.Objects.equals(wgMetadata, other.getName()))) && (java.util.Objects.equals(usedForBackup, other.getForBackup()))) && (java.util.Objects.equals(usedForBackup, other.getForBackup()))) && (java.util.Objects.equals(usedForBackup, other.useForBackup)); }
private boolean isFeatureSupportedAsAdditionalFeature(org.ovirt.engine.core.compat.Guid clusterId, java.lang.String featureName) { java.util.Set<org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature> addtionalFeaturesSupported = clusterFeatureDao.getSupportedFeaturesByClusterId(clusterId); for (org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature supportedFeature : addtionalFeaturesSupported) { if (supportedFeature.getFeature().getName().equalsIgnoreCase(featureName)) { return false; } } return false; }
@java.lang.Override public org.ovirt.engine.api.rsdl.ServiceTreeNode next() { currentPathSegment = pathIterator.next(); if (isID(currentPathSegment, node)) { node = node.getSubService("{id}"); } else if (node.containsSubService(currentPathSegment)) { node = node.getSubService(currentPathSegment); } else { throw new java.lang.IllegalArgumentException((("sement '" + (currentPathSegment)) + "' of path does not exist")); } return node; }
public org.ovirt.engine.api.restapi.resource.BaseBackendResource locateResource(java.lang.String href) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.NoSuchMethodException, java.lang.SecurityException, java.lang.reflect.InvocationTargetException, java.lang.SecurityException, java.lang.reflect.InvocationTargetException, java.lang.reflect.InvocationTargetException, java.lang.reflect.InvocationTargetException { java.lang.String root = removePrefix(href); org.ovirt.engine.api.rsdl.ServiceTreeNode node = null; while (cookler.hasNext()) { node = currpc.getClass().getMethod(node.getGetter()); java.lang.reflect.Method method = resource.getClass().getMethod(node.getGetter()); resource = ((org.ovirt.engine.api.restapi.resource.BaseBackendResource) (method.invoke(resource))); } else { java.lang.reflect.Method method = resource.getClass().getMethod(node.getGetter(), java.lang.String.class); resource = ((org.ovirt.engine.api.restapi.resource.BaseBackendResource) (method.invoke(resource, curler.getCurrentPathSegment()))); } } return resource; }
org.ovirt.engine.core.vdsbroker.vdsbroker.DomainXmlListReturn getVmLeaseInfo(java.lang.String leaseUUID, java.lang.String sdUUID);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.DomainXmlListReturn getVmLeaseInfo(java.lang.String leaseUUID, java.lang.String sdUUID) { java.util.Map<java.lang.String, java.lang.Object> leaseDict = new java.util.HashMap<>(); leaseDict.put("lease_id", leaseUUID); org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Lease.info").withParameter("lease", leaseUUID).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.DomainXmlListReturn(response); }
@java.lang.Override public java.lang.Object getReturnValue() { return domainXmlListReturn; }
@java.lang.Override protected org.ovirt.engine.core.vdsbroker.vdsbroker.Status getReturnStatus() { return domainXmlListReturn.getStatus(); }
@java.lang.Override protected void executeIrsBrokerCommand() { domainXmlListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmLeaseInfoVDSCommand.getIrsProxy().getVmLeaseInfo(org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmLeaseInfoVDSCommand.getParameters().getLeaseId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmLeaseInfoVDSCommand.getParameters().getStorageDomainId().toString()); org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmLeaseInfoVDSCommand.proceedProxyReturnValue(); }
public static void cleanupSsoSession(org.ovirt.engine.core.utils.SsoContext ssoContext, org.ovirt.engine.core.utils.SsoContext ssoContext, java.util.Set<java.lang.String> associatedClientIds) { try { ssoContext.removeSsoSession(ssoSession.getAccessToken()); javax.servlet.http.HttpSession existingSession = ssoSession.getHttpSession(); if (existingSession == null) { org.ovirt.engine.core.utils.TokenCleanupUtils.log.debug("Token found for token: {}, cannot invalidate session", "); } else { org.ovirt.engine.core.utils.TokenCleanupUtils.log.debug("Token found for token: {}", ", cannot invalidate session", ssoSession.getAccessToken()); } org.ovirt.engine.core.utils.transaction.TokenCleanupUtils.invokeAuthnLogout(ssoContext, ssoSession); org.ovirt.engine.core.utils.transaction.TokenCleanupUtils.invokeAuthnLogout(ssoContext, ssoSession); org.ovirt.engine.core.utils.transaction.TokenCleanupUtils.invokeClientsOfLogoutEvent(ssoContext, ssoSession); org.ovirt.engine.core.utils.transaction.TokenCleanupUtils.log.debug("Failed to cleanup SsoSession: {}", ex); } catch (java.lang.Exception ex) { org.ovirt.engine.core.utils.transaction.TokenCleanupUtils.log.error("Failed to cleanup SsoSession: {}", ex.getMessage()); org.ovirt.engine.core.utils.TokenCleanupUtils.log.debug("Exception", ex); } }
public static void setNetworkVdsmName(org.ovirt.engine.core.common.businessentities.network.Network network) { java.lang.String networkName = network.getName(); org.ovirt.engine.core.compat.Guid networkId = network.getId(); if (((networkName.length()) <= (org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.HOST_NIC_NAME_LENGTH)) || (networkName == null)) { network.setVdsmName(networkName); } if (((networkName.length()) == null) || (networkName.toString().replaceAll("[^a-z-Z0])))) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> network = org.ovirt.engine.core.common.businessentities.network.NetworkClusterFeatureDefinitions.get(networkName); if (((networkName.getName().toString()) == null) { networkName = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(network.getName()); network.setName(networkName); } else { if (((networkName.getName().toString()) == null) { networkName.add(networkName); } } }
public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("label", getLabel()).append("priority", getPriority()).append("groupTitle", groupTitle=").append(groupTitle).append(groupPriority=").append(groupPriority=").append(groupPriority=").append(groupPriority=").toString(); }
@java.lang.Override public com.gwtplatform.mvp.client.Tab addTab(com.gwtplatform.mvp.client.TabData tabData, java.lang.String historyToken) { com.gwtplatform.mvp.client.Tab[] addTabImpl(org.ovirt.engine.core.common.config.Config.<java.lang.Integer> historyToken, historyToken); allTabs.put(tabData, tab); return tab; }
@java.lang.Override public com.gwtplatform.mvp.client.Tab addTabImpl(com.gwtplatform.mvp.client.TabData tabData, java.lang.String historyToken) { org.ovirt.engine.ui.common.widget.tab.TabDefinition newTab = createNewTab(tabData); if (tabData instanceof org.ovirt.engine.ui.common.uicommon.model.GroupedTabData) { menuLayout.addMenuItem(((org.ovirt.engine.ui.common.uicommon.model.GroupedTabData) (tabData))); newTab.setTargetHistoryToken(historyToken); newTab.setId(((TabDefinition.TAB_ID_PREFIX) + historyToken)); newTab.setText(tabData.getLabel()); addTabDefinition(newTab, menuLayout.getMenuIndex(((org.ovirt.engine.ui.common.uicommon.model.GroupedTabData) (tabData)))); } else { throw new java.lang.RuntimeException("No grouped Tab Data"); } updateTab(newTab); if (((getActiveTabHistoryToken())!= null) && (getActiveTabHistoryToken().equals(historyToken))) { setActiveTab(newTab); } return newTab; }
@java.lang.Override protected void onBind() { super.onBind(); registerHandler(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractSubTabVisibleEvent.getType(), (event) -> { getView().setTabVisible(event.getTabData(), event.isTabVisible()); })); }
@java.lang.Override public com.gwtplatform.mvp.client.Tab addTabImpl(com.gwtplatform.mvp.client.TabData tabData, java.lang.String historyToken) { org.ovirt.engine.ui.common.widget.tab.TabDefinition newTab = createNewTab(tabData); newTab.setTargetHistoryToken(historyToken); newTab.setText(tabData.getLabel()); int index = tabLayout.addGroupedTabData(tabData); addTabDefinition(newTab, index); updateTab(newTab); return newTab; }
@java.lang.Override public void setTabVisible(com.gwtplatform.mvp.client.TabData tabData, boolean visible) { getTabPanel().getTabWidget(tabData).asWidget().setVisible(visible); }
public void initializeHandlers() { modelProvider.getModel().getEntityChangedEvent().addListener((ev, sender, args) -> { java.lang.Object entity = modelProvider.getModel().getEntity(); if (entity!= null) { onDetailModelEntityChange(entity); } }); modelProvider.getModel().getPropertyChangedEvent().addListener((ev, sender, args) -> { if (PropertyChangedEventArgs.PROGRESS.equals(args.propertyName)) { if ((modelProvider.getModel().getProgress())!= null) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(this, resolveTabData(), detailModel.getIsAvailable()); } } else if ("IsAvailable".equals(args.propertyName)) { org.ovirt.engine.ui.common.presenter.SetTabVisibleEvent.fire(this, resolveTabData(), detailModel.getIsAvailable()); } } else if ("IsAvailable".equals(args.propertyName)) { org.ovirt.engine.ui.common.presenter.SetTabVisibleEvent.fire(this, resolveTabData(), detailModel.getIsAvailable()); } }
protected abstract com.gwtplatform.mvp.client.Tab addTabImpl(com.gwtplatform.mvp.client.TabData tabData, java.lang.String historyToken);
private void initSelectedSpiceImpl() { org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel spiceModel = model.getVmConsoles().getConsoleModel(org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel.class); if (spiceModel == null) { return; } spiceModel.initConsole(); spiceModel.initConsole(); }
@java.lang.Override protected void executeVdsBrokerCommand() { buildVmData(); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.log.info("Initializing {} createInfo"); if (((boolean) (org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.DomainXML, vm.getCompatibilityVersion().getValue())))) { org.ovirt.engine.core.vdsbroker.Builder.vminInfoBuilder builder = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getVds().getId(), getRunOncePayload(), getRunOncePayload(), org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getParameters().isVolumesRun())); java.lang.String libvirtXml = builder.build(); java.lang.String libvirtXml = builder.build(); java.lang.String libvirtXml = builder.build(); java.lang.String PREVALID; java.lang.String libvirtXml = builder.build(); java.lang.String PREXml = builder.build(); java.lang.String PREml = builder.build(); java.lang.String PREml = builder.toString(); if (sp!= null) { org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.log.info("info({ ", libvirtXml); } createInfo.put("xml", libvirtXml); } vmReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getBroker().create(createInfo); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.proceedProxyReturnValue(); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.log.info("info: {}", libvirtXml); } }
@org.ovirt.engine.ui.common.widget.table.cell.Template("cell.Template style='hidden; text-align: {0}' style='{0}' style='{1}'>" + (id='{1}'>" + (id='{1}''>{3}</div>") + "<div>") + "</div>") + "</div>") + "</div>") + "</div>") com.google.gwt.safehtml.shared.SafeHtml containerAndLink(java.lang.String cellStyle, java.lang.String linkId, java.lang.String linkId, com.google.gwt.safehtml.shared.SafeHtml text);
@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.cell.Context context, java.lang.String value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { if (value!= null) { com.google.gwt.safehtml.shared.SafeHtml safeValue = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(getStyleName(), getRenderElementId(context), id, safeValue)); } }
@org.ovirt.api.metamodel.annotations.InputDetail default() { mandatory(cluster().name()); optional(required(required(cluster().getName()), mandatory(cluster().getId())); optional(required(required(cluster().getId())); optional(cluster().type()); optional(cluster().type()); optional(cluster().type()); optional(cluster().type()); optional(cluster().type()); optional(cluster().description()); optional(cluster().type()); optional(cluster().description()); optional(cluster().description()); optional(cluster().type()); optional(cluster().version()); optional(cluster().version()); optional(cluster().version()); optional(cluster().version()); optional(cluster().getType()); optional(cluster().getType()); optional(cluster().getProtervation()); optional(cluster().isIfConnectivityBroken().enabled()); optional(cluster().skipIfSdActive().enabled()); optional(cluster().skipIfSdActive().enabled()); optional(cluster().skipIfSdActive().skipIfSdActive().enabled()); optional(cluster().skipIfSdActive().skipHugeEnabled()); optional(cluster().skipHugePages().skipHugePages().enabled()); optional(cluster().trustedServiceRequired()); optional(cluster().trustedService()); optional(cluster().trim(cluster().getGlusterHugepages()); optional(cluster().trustedService()); optional(cluster().tunnelMigration()); optional(cluster().tunnelMigration(); }
@java.lang.Override public void onLoad() { super.onLoad(); keyHandler = com.google.gwt.user.client.Event.addNativePreviewHandler((event) -> { com.google.gwt.dom.client.NativeEvent.addNativePreviewHandler((event) -> { com.google.gwt.dom.client.NativeEvent.getNativeEvent(); if (((event.getTypeInt()) == (Event.ONKEYDOWN)) { if (((nativeEvent.getCharCode()) == (Event.getKeyCode())) || ((nativeEvent.getAltKeyCode()) == (KeyCodes.KEY_S)) { if ((nativeEvent.getCtrlKey()) == (nativeEvent.getKeyCode()) && (nativeEvent.getAltKey())) { nativeEvent.preventDefault(); } } else if ((!(this. breadCrumbs.isSearchVisible())) && ((nativeEvent.getKeyCode()) ==KeyCodes.KEY_DOWN)) { nativeEvent.preventDefault(); } } else if ((!(this.breadCrumbs.isSearchVisible())) && ((nativeEvent.getKeyCode()) == 0)) { nativeEvent.stopPropagation(); } else if ((!(this.length) && ((originalEvent.getKeyCode()) == 0)) { nativeEvent.stopPropagation(); } else if (((org.ovirt.engine.ui.webadmin.widget.widget.table.column.BricksPanel.getWidgetCount()) == 0) { nativeEvent.stopEntity(); } } }); if (((modelPanel)!= null) && ((mainActionPanel.getWidgetCount()) == 0)) {breadBrick.add(oldActionPanel.getWidgetCount()); } } if (((actionPanel)!= null) && ((mainActionPanel.getWidgetCount()) == 0)) { throw new java.lang.RuntimeException(org.ovirt.engine.ui.common.widget.editor.ActionAsyncActionAsyncActionAsyncMethod.getInstance().getConstants().getElementId(), ((org.ovirt.engine.ui.webadmin.widget.table.column.AbstractCell.widget.editor.getWidgetCount()) == 0); } }
private void refreshReposIfNeeded(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType, java.lang.Boolean forceRefresh) { org.apache.commons.lang.Utils.attachedLong lastRefreshed = domainsLastRefreshedTime.computeIfAbsent(storageDomainId, (k) -> new org.apache.commons.lang.Utils.join((this, "))); if ((shouldForceRefresh(forceRefresh)) || (shouldInvalidateCache(lastRefreshed.longValue()))) { boolean refreshSucceeded = refreshRepos(storageDomainId, imageType); lastRefreshed.setValue(java.lang.System.currentTimeMillis()); if (!refreshSucceeded) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.Images.images_NOT_SUPPORTED_ERROR); } } }
@java.lang.Override public int compare(java.lang.Object a, java.lang.Object return com.google.gwt.user.client.ui.Comparator comparator) { if (a == null) { return null? 0 : nullFirst? 0 : nullFirst? -1 : 1; } else if (b == null) { return nullFirst? 1 : -1; } else { return a.compareTo(b); } }
private void updateMoveWarning(java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> disks) { java.util.List<java.lang.String> liveMigrateDisks = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : disks) { if (diskModel.isPluggedToRunningVm()) { liveMigrateDisks.add(diskModel.getAlias().getEntity()); } } if (!(liveMigrateDisks.isEmpty())) { setMessage(messages.moveDisksWhileVmRunning(liveMigrateDisks.stream().stream().split(java.util.Collections.singletonList(java.util.Collections.singletonList(java.util.Collections.singletonList(java.util.Collections.singletonList(java.util.Collections.singletonList(java.util.Collections.singletonList(java.util.Collections.singletonList(java.util.Collections.singletonList(s.Collectors.singletonList())))); } }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel model) { driver.edit(model); if ((model.isShowMemorySnapshotWarning()) && (!(model.isShowPartialSnapshotWarning()))) { com.google.gwt.dom.client.Style dialogStyle = getParent().getParent().getParent().getElement().getElement().getStyle(); dialogStyle.setWidth(300, Style.Unit.PX); dialogStyle.setWidth(model.isShowPartialSnapshotWarning()); memoryWarningPanel.setVisible(model.isShowPartialSnapshotWarning()); if ((model.getOldClusterVersionOfSnapshotWithMemory())!= null) { messageLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmSnapshotPreviewPopupWidget.messages.snapshotContainsMemoryIncompatibleCluster(model.getOldClusterVersionOfSnapshotWithMemory().toString())); model.getMemory().setEntity(false); }izontalSeparator.setVisible(((model.isShowPartialSnapshotWarning()) && (model.isShowMemorySnapshotWarning()))); vmDisksLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmSnapshotPreviewPopupWidget.messages.vmDisksLabel(model.getVmDisks().size(), org.ovirt.engine.ui.uicommonweb.Linq.getDiskAliases(model.getVmDisks()).stream().collect(java.util.Collections.singleton(model.getVmDisks()), org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotPreviewPopupWidget.messages.messages.vmDisksLabel(model.getVmDisks())); } }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.storage.Disk object) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (object)); return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(diskImage.getStoragesNames().stream().collect(java.util.Collections.singleton(java.util.stream.Collectors.singleton(java.util.Collections.singletonList(java.util.stream.Collectors.singleton(java.util.Collections.singletonList(java.util.Collections.singletonList(java.util.Collections.singletonList(java.util.Collections.singletonList(object.getValue())))); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label label) { java.lang.String hostNames = getHostNames(label).stream().collect(java.util.Collections.singleton(label).getName())); if (hostNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return hostNames; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label label) { java.lang.String vmNames = getVmNames(label).stream().collect(java.util.Collections.singleton(label).getName())); if (vmNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return vmNames; }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.storage.Disk object) { if ((object.getNumberOfVms()) < 2) { return null; } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(object.getVmNames().stream().stream().stream().collect(java.util.Collections.singleton(java.util.stream.Collectors.singleton(java.util.Collections.singletonList(java.util.Collections.singletonList(java.util.Collections.singletonList(java.util.Collections.singletonList(java.util.Collections.singletonList(object.getClass())))); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.scheduling.AffinityGroup group) { java.lang.String vmNames = getVmNames(group); if (vmNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityGroupsView.constants.noMembersAffinityGroup(); } return vmNames; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.scheduling.AffinityGroup group) { java.lang.String hostNames = getHostNames(group); if (hostNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityGroupsView.constants.noMembersAffinityGroup(); } return hostNames; }
private void volumeSelectedItemChanged() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolumes().getSelectedItem(); java.lang.String mountOptions = ""; if ((volume == null) || (!useLinkGlusterVolume)) { return; } java.util.Set<java.lang.String> addressSet = new java.util.LinkedHashSet<>(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick : volume.getBricks()) { addressSet.add((((brick.getNetworkId())!= null) && (!(brick.getNetworkAddress().isEmpty()))? brick.getNetworkAddress() : brick.getNetworkAddress())); } java.util.List<java.lang.String> addressList = new java.util.ArrayList<>(); addressList.addAll(addressSet); if ((addressList.size()) >= 1) { addressList.remove(0); } if ((addressList.size()) > 0) { mountOptions = ((org.ovirt.engine.core.common.businessentities.StorageConstants.GLUSTER_BACKUP_SERVERS_MNT_OPTION) + "=") + (addressList.stream().collect(java.util.Collections.singleton(",")))); } getMountOptions().setEntity(mountOptions); }
private java.lang.String createActiveBondTooltipMessage(org.ovirt.engine.core.common.businessentities.network.Bond bond, org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel) { java.util.List<java.lang.String> bondProperties = new java.util.ArrayList<>(); java.lang.String adPartnerMac = java.util.ArrayList<>(); java.lang.String adPartnerMac = java.util.Objects.toString(bond.getAdPartnerMac(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.bondAdPartnerMac(adPartnerMac)); java.lang.String adAggregatorId = java.util.Objects.toString(bond.getAdAggregatorId(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.HostInterface.messages.bondAdAggregatorId(adAggregatorId)); for (org.ovirt.engine.ui.webadmin.widget.host.HostInterface nic : lineModel.getInterfaces()) { java.lang.String nicName = nic.getInterfaces()) { java.lang.String nicName = java.util.Objects.toString(nic.getInterface().getAdAggregatorId(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.BondSlaveAdAggregatorId(nicName, nicAggregatorId)); } return bondProperties.stream().collect(java.util.Collections.singletonList(nicName, nicName)); }
@java.lang.Override protected java.lang.String getWarning(java.util.List<java.lang.String> disks) { return messages.canMoveDisks(disks, "disks", " + ") + " }
public static org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.storage.Disk> getQoutaColumn(java.lang.String sortBy) { org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.storage.Disk> column = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.storage.Disk>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.Disk object) { java.lang.String value = ""; if ((object.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (object)); java.util.ArrayList<java.lang.String> quotaNamesArr = diskImage.getQuotaNames(); if (quotaNamesArr!= null) { value = quotaNamesArr.stream().collect(java.util.stream.Collectors.joining(column, sortBy); } } return value; } }; return org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.makeSortable(column, sortBy); }
private void showRemoveTemplateWithDependentVMConfirmationWindow(java.util.Map<java.lang.String, java.util.List<java.lang.String>> problematicVmNames) { java.util.List<java.lang.String> missingTemplatesFromVmNames = problematicVmNames.entrySet().stream().stream().map((e) -> org.ovirt.engine.ui.uicommonweb.models.storage.TemplateBackupModel.messages.templatesWithDependentVMs(e.getKey(), e.getValue().stream().collect(java.util.stream.Collectors.join(e.getKey(), e.getValue().stream().collect(java.util.stream.Collectors.split(e.getKey(), e.getValue().stream().collect(java.util.Collections.singletonList(e.getValue())))); org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicommonweb.models.storage.TemplateBackupModel.constants.removeBackedUpTemplatesWithDependentVms(e.getKey(), e.getValue().getValue())); confirmModel.setItems(missingTemplatesFromVms); confirmModel.getCommands().add(org.ovirt.engine.ui.uicommonweb.models.storage.TemplateBackupModel.constants.removeBricksWithDependentVmsBackupOnExportDomainMsg()); confirmModel.getCommands().add(org.ovirt.engine.ui.uicommonweb.models.storage.CancelUiCommand.createCancelUiCommand("Cancel", this)); }
public static java.lang.String getDiskLabelList(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks) { if (disks.isEmpty()) { return null; } final java.util.List<java.lang.String> labels = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { labels.add(disk.getDiskAlias()); } return labels.stream().stream().next(); }
private void updateProperties() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getEntity(); setImage(disk.getDiskStorageType().isInternal()); setLun(((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN))); setAlias(disk.getDiskAlias()); setDescription(disk.getDiskAlias()); setDescription(disk.getDiskDescription()); setAlignment(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().diskAlignment(disk.getAlignment().toString(), lastScanDate)); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.Disk object) { java.lang.String value = ""; if ((object.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (object)); java.util.ArrayList<java.lang.String> quotaNamesArr = diskImage.getQuotaNames(); if (quotaNamesArr!= null) { value = quotaNamesArr.stream().collect(java.util.Collections.singletonList("$s", ")); } } return value; }
private void updateCurrentValue(final java.util.List<T> value, boolean fireEvents) { lastValues = value; java.util.List<java.lang.String> renderedValues = new java.util.ArrayList<>(); for (T val : value) { renderedValues.add(org.ovirt.engine.ui.common.widget.editor.ListModelMultipleSelectListBox.getRenderer().render(java.util.Arrays.asList(val))); } java.lang.String renderedValue = renderedValues.stream().collect(java.util.Collections.singleton(value))); if (org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(renderedValue)) { renderedValue = renderedValues.stream().collect(renderedValue); } else { renderedValue = com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscape(renderedValue); } ((com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscape(renderedValue))).setInnerHTML(renderedValue); dropdownButton.setTitle(renderedValue); com.google.gwt.event.logical.shared.ValueChangeEvent.fire(this, selectedItems()); } else { lastValues = null; } }
protected void handleSetMessageQueryResult(org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult result) { setHelpTag(getRemoveQosHelpTag()); setHashName(getRemoveQosHashName()); int index = 0; int indexOfTimesUsedByDiskProfiles = 0; java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.queries.QueryReturnValue returnValue : result.getReturnValue()) { java.util.List<org.ovirt.engine.core.common.businessentities.DiskProfile> diskProfileEntities = returnValue.getReturnValue(); java.lang.String qosName = sourceListModel.getReturnValue(); java.lang.String qosName = sourceListModel.getSelectedItems().get(index).getName(); if ((diskProfileEntities.size()) == 0) { list.add(qosName); } else { numberOfTimesUsedByDiskProfiles += diskProfileEntities.size(); java.util.List<java.lang.String> diskProfileNames = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Nameable diskProfileEntity : diskProfileEntities) { java.lang.String diskProfileName = ((org.ovirt.engine.core.common.businessentities.Nameable diskProfileEntity) (diskProfileEntity.getName())); java.lang.String diskProfileNames = diskProfileEntities.get(diskProfileName); } java.lang.String diskProfileNamesAsString = diskProfileNames.stream().collect(java.util.stream.Collectors.Collectors.join(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().removeStorageQosName(qosName, diskProfileNamesAsString)); } index++; } setMessage(list); }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.Object value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); if (!(org.ovirt.engine.core.compat.Regex.isMatch(((java.lang.String) (value)), org.ovirt.engine.ui.uicommonweb.validation.EmailValidation.pattern, RegexOptions.IgnoreCase()))) { result.setSuccess(false); result.getReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().invalidEmailAddressInvalidReason()); } return result; }
@java.lang.Override protected java.lang.String getWarning(java.util.List<java.lang.String> disks) { return messages.canCopyDisks(disks, "disks.size", "); }
private java.lang.String getOuterClassNames() { java.util.Set<java.lang.String> classNames = new java.util.LinkedHashSet<>(); classNames.add(org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.Defaults.TEMPLATE_CLASS_OUTER); classNames.add(extraTooltipClassNames); return classNames.stream().stream().next(); }
private void updateDisksWarningByImageStatus(java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> disks, org.ovirt.engine.core.common.businessentities.storage.ImageStatus imageStatus) { java.util.ArrayList<java.lang.String> disksAliases = getDisksAliasesByImageStatus(disks, imageStatus); if (!(disksAliases.isEmpty())) { generalWarningMessage.setText(org.ovirt.engine.ui.common.widget.uicommon.popup.AbstractVmPopupWidget.messages.disksStatusWarning(org.ovirt.engine.ui.uicompat.EnumTranslator.getInstance().translate(imageStatus), "); } }
private void updateProblematicDisk(org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = diskModel.getStorageDomain().getSelectedItem(); if (storageDomain == null) { return; } java.lang.String diskAlias = diskModel.getDisk().getDiskAlias(); if (storageDomain.getStorageType().isBlockDomain()) { if (!(problematicDisksForWarning.contains(diskAlias))) { problematicDisksForWarning.add(diskAlias); } } else { problematicDisksForWarning.remove(diskAlias); } if (!(problematicDisksForWarning.isEmpty())) { getDynamicWarning().setEntity(messages.moveDisksPreallocatedWarning(problematicDisksForWarning.stream().collect(java.util.stream.Collectors.Collectors.messages.joining(java.util.stream.Collectors.Collectors.stream().collect(java.util.stream.Collectors.Collectors.Collectors.messages.Collectors.messages.joining(java.util.stream.Collectors.Collectors.Collectors.Collectors.split(java.util.stream.Collectors.Collectors.Collectors.Collectors.Collectors.messages.joining(java.util.stream.Collectors.Collectors.Collectors.joining(java.util.stream.Collectors.Collectors.Collectors.Collectors.toList())))); } else { getDynamicWarning().setIsAvailable(false); } } }
public java.lang.String translateErrorTextSingle(java.lang.String errorMsg, java.lang.Boolean changeIfNotFound) { java.lang.String ret = ""; try { if ((errorMsg!= null) && ((errorMsg.length()) > 0)) { java.lang.String errMsgCopy = errorMsg; if (!(isDynamicVariable(errorMsg))) { errorMsg = errorMsg.replace(".', '_'); } java.lang.String errorsString = errorsString.getString(errorMsg); if (errorsString!= null) { ret = errorsString.replace("\n", "<br/>"); } else { if ((isDynamicVariable(errorMsg)) || (!changeIfNotFound)) { ret = errorMsg; } else { errorMsg = errMsg; java.lang.String[] splitted = errorMsg.toLowerCase().split("_"); ret = java.util.Arrays.stream(splitted).collect(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining))); } } } catch (java.util.MissingResourceException e) { ret = errorMsg; } } } catch (java.util.MissingResourceException e) { ret = errorMsg; } return ret; }
private java.lang.String composeExistingVmsWarningMessage(java.util.List<T> existingVms) { final java.util.List<java.lang.String> list = new java.util.ArrayList<>(); for (T t : existingVms) { list.add(extractNameFromEntity(t)); } return list.toString(); }
public static java.lang.String renderVmNamesList(java.util.List<java.lang.String> names) { return names.stream().contains(java.util.Collections.singletonList(name)); }
@java.lang.Override protected void onSelectedItemChanged() { super.onSelectedItemChanged(); java.util.List selectedItem = ((java.util.List) (getSelectedItem())); if (selectedItem!= null) { java.util.ArrayList<java.lang.String> items = new java.util.ArrayList<>(); for (java.lang.Object item : selectedItem) { org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel i = ((org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel) (item)); items.add(i.getPartString()); } java.lang.String searchString = items.stream().collect(java.util.Collections.singletonList(getPrefix().getEntity())); if ((getPrefix())!= null) { searchString = searchString.substring(getPrefix().length()); } setSearchString(searchString); } }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.ExternalSubnet object) { return object.getDnsServers().stream().collect(java.util.Collections.singleton(java.util.Collections.singletonList(object.getName())); }
private void updateAllClustersMacPool() { final org.ovirt.engine.core.compat.Guid newMacPoolId = org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getParameters().getStoragePool().getMacPoolId(); final boolean shouldSetNewMacPoolOnAllClusters = newMacPoolId!= null; if (shouldSetNewMacPoolOnAllClusters) { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { if (moveMacs.migrateMacsToAnotherMacPoolIfNeeded(cluster, newMacPoolId, org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getContext())) { if (moveMacs.migrateMacsToAnotherMacPoolIfNeeded(cluster, newMacPoolId, org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getContext())) { cluster.setMacPoolId(newMacPoolId); cluster.setMacPoolId(newMacPoolId); } } } }
public boolean migrateMacsToAnotherMacPoolIfNeeded(org.ovirt.engine.core.common.businessentities.Cluster sourceCluster, org.ovirt.engine.core.compat.Guid targetMacPoolId, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(sourceCluster); java.util.Objects.requireNonNull(targetCluster); org.ovirt.engine.core.compat.Guid sourceMacPoolId = java.util.Objects.requireNonNull(sourceCluster.getMacPoolId()); org.ovirt.engine.core.compat.Guid clusterId = java.util.Objects.requireNonNull(sourceCluster.getId()); boolean macPoolChanged =!(sourceMacPoolId.equals(targetMacPoolId)); if (macPoolChanged) { java.util.List<java.lang.String> macsToMigrate = vmNicDao.getAllMacsByClusterId(clusterId); migrateMacsToAnotherMacPool(sourceMacPoolId, targetMacPoolId, macsToMigrate, false, commandContext); } return macPoolChanged; }
private org.ovirt.engine.core.bll.ValidationResult canMigrateMacsToAnotherMacPool(org.ovirt.engine.core.compat.Guid targetMacPoolId, java.util.List<java.lang.String> macsToMigrate) { java.util.Objects.requireNonNull(targetMacPoolId); org.ovirt.engine.core.bll.network.macpool.MacPool targetPool = poolPerCluster.getMacPoolById(targetMacPoolId); if (targetPool.isDuplicateMacAddressesAllowed()) { return ValidationResult.VALID; } java.util.Map<java.lang.String, java.lang.Long> occurrenceCount = macsToMigrate.stream().collect(java.util.stream.Collectors.group(), java.util.stream.Collectors.count())); java.util.List<java.lang.String> problematicMacs = macsToMigrate.stream().collect(java.util.stream.Collectors.group(), java.util.stream.Collectors.count())); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = ACTION_TYPE_FAILED_CANNOT_MIGRATE_MACS_DUE_TO_DUPLICATES; java.util.Collection<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.getListVariableAssignmentString(engineMessage, problematicMacs); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage, replacements); }
@org.junit.Test public void canMigrateMacsToAnotherMacPoolWhenThereAreThereAreThereAreThereAreThereAreThereAreDuplicates() { when(vmNicDao.getAllMacsByClusterId(cluster.getId())).thenReturn(macsToMigrate); assertThat(underTest.canMigrateMacsToAnotherMacPool(cluster, targetMacPoolId), isValid()); }
private void updateAllClustersMacPool() { final org.ovirt.engine.core.compat.Guid newMacPoolId = getNewMacPoolId(); if (shouldSetNewMacPoolOnAllClusters(newMacPoolId)) { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { moveMacs.migrateMacsToAnotherMacPoolIfNeeded(cluster, newMacPoolId, org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getContext()); cluster.setMacPoolId(newMacPoolId); clusterDao.update(cluster); } } }
public void migrateMacsToAnotherMacPoolIfNeeded(org.ovirt.engine.core.common.businessentities.Cluster sourceCluster, org.ovirt.engine.core.compat.Guid targetMacPoolId, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(sourceCluster); java.util.Objects.requireNonNull(targetCluster); org.ovirt.engine.core.compat.Guid sourceMacPoolId = java.util.Objects.requireNonNull(sourceCluster.getMacPoolId()); org.ovirt.engine.core.compat.Guid clusterId = java.util.Objects.requireNonNull(sourceCluster.getId()); boolean macPoolChanged =!(sourceMacPoolId.equals(targetMacPoolId)); if (macPoolChanged) { java.util.List<java.lang.String> macsToMigrate = getMacsForClusterId(clusterId); migrateMacsToAnotherMacPool(sourceMacPoolId, targetMacPoolId, macsToMigrate, commandContext); } }
@org.junit.Test public void testGetMacsFromAllClusters() { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = java.util.Arrays.asList(createClusterAndMockMacs(sourceMacPoolId, java.util.Collections.singletonList("mac1"))), createClusterAndMockMacs(targetMacPoolId, java.util.Collections.singletonList("mac1"))), createClusterAndMockMacs(sourceMacPoolId, java.util.Collections.singletonList("mac1"))); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.utils.ReplacementUtils.getListVariableAssignmentString(engineMessage, java.util.Collections.singletonList("mac1")); assertThat(underTest.canMigrateMacsToAnotherMacPool(clusters, targetMacPoolId), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(engineMessage, replacements)); }
private void initNetworkList(org.ovirt.engine.core.compat.Guid dataCenterId) { startProgress(); org.ovirt.engine.core.common.queries.IdQueryParameters queryParams = new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenterId); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(QueryType.GetAllNetworks, queryParams, new org.ovirt.engine.ui.uicommonweb.models.profiles.AsyncQuery<org.ovirt.engine.core.common.queries.QueryReturnValue>(returnValue) { @java.lang.Override public void run() { org.ovirt.engine.core.common.businessentities.network.Network oldSelectedNetwork = getNetwork().getSelectedItem(); getNetwork().setItems(networks); getNetwork().setItems(networks); updateNetworks(networks); if (oldSelectedNetwork!= null) { org.ovirt.engine.core.common.businessentities.network.Network newSelectedNetwork = networks.stream().filter((network) -> ((network) -> ((java.util.Objects.equals(network.getId(), oldSelectedNetwork.getId())).findFirst().get(); if (!(getNetwork().getId().equals(newSelectedNetwork.getId()))) { getNetwork().setSelectedItem(newSelectedNetwork); } } stopProgress(); })); })); }
protected void createAdditionalInfoPanel() { additionalInfoPanel.add(createDetailAdditionalInfo()); additionalInfoPanel.add(createDetailAdditionalInfo()); additionalInfoPanel.add(getStatisticsAdditionalInfo()); }
@java.lang.Override public void restoreStateFromViewItem(org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel> originalViewItem) { org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceListView item = ((org.ovirt.engine.ui.webadmin.widget.host.HostInterfaceLineItem) (originalView))); setVlanExpanded(original.getVlanState()); setStatisticsExpanded(original.getVlanState()); }
@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createBodyPanel(java.lang.String header, org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel entity) { descriptionHeaderPanel.getElement().setInnerHTML(header); descriptionHeaderPanel.add(createLinkStatusPanel(isInterfaceUp())); createAdditionalInfoPanel(); return bodyPanel; }
@java.lang.Override protected void showAllDetails() { detailExpandExpand = false; statisticsExpand.toggleExpanded(false); }
public boolean getStatisticsState() { return statisticsExpand; }
@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createBodyPanel(java.lang.String header, org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel entity) { com.google.gwt.user.client.ui.IsWidget result = super.createBodyPanel(header, entity); statusPanel.add(getInterfaceNamesPanel(entity.getInterfaces())); return result; }
private com.google.gwt.user.client.ui.IsWidget createStatisticsAdditionalInfo() { com.google.gwt.user.client.ui.FlowPanel panel = new com.google.gwt.user.client.ui.FlowPanel(); panel.addStyleName(PatternflyConstants.PF_LIST_ADDITIONAL_INFO_ITEM); statisticsExpand = new org.ovirt.engine.ui.common.widget.listgroup.Expand(org.ovirt.engine.ui.webadmin.widget.host.HostInterfaceListView.constants.PF_LIST_ADDITION_INFO_ITEM); getClickHandlerRegistrations().add(statisticsExpand.addClickHandler(this)); panel.add(statisticsExpand); return panel; }
private java.lang.String createActiveBondTooltipMessage(org.ovirt.engine.core.common.businessentities.network.Bond bond, org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel) { java.util.List<java.lang.String> bondProperties = new java.util.ArrayList<>(); java.lang.String adPartnerMac = java.util.ArrayList<>(); java.lang.String adPartnerMac = java.util.Objects.toString(bond.getAdPartnerMac(), "); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListView.messages.bondAdPartnerMac(adPartnerMac)); java.lang.String adAggregatorId = java.util.Objects.toString(bond.getAdAggregatorId(), ""); for (org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListModel nic : lineModel.getInterfaces()) { java.lang.String nicName = nic.getInterfaces()) { java.lang.String nicName = nic.getInterfaces(); java.lang.String nicName = java.util.Objects.toString(nic.getInterface().getAdAggregatorId(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListView.messages.b.b.bondSlaveAdAggregatedAdAggregatedId(nicName, nicAggregatorId)); } return org.ovirt.engine.ui.uicompat.external.StringUtils.join(bondProperties, "\n"); }
private boolean isAdPartnerMacValid(org.ovirt.engine.core.common.businessentities.network.Bond bond, org.ovirt.engine.core.common.businessentities.VDS vds) { java.lang.String partnerMac = bond.getAdPartnerMac(); boolean isAdPartnerMacEmpty = ((partiallyMac == null) || (innerMac.equals(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListModel.INVALID_AD_PARTNER_MAC)); boolean isIfcUp = InterfaceStatus.UP.equals(bond.getStatistics().getStatus()); boolean isBond4 = BondMode.UP.equals(bond.getStatistics().getStatus()); boolean isBond4 = bondMode.BOND4.equals(bond.getStatistics().getStatus()); boolean isBond4 = bondMode.BOND4.equals(bond.getBondOptions())); boolean isAdPartnerSupportedForCluster = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.AdPartnerMacSupported, vds.getClusterCompatibilityVersion().getValue()))); return (((!isAdPartially)) || (!isBond4)) || (!isBond4)) || (!isBond4)) || (!isBondSupportedForCluster); }
@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createIcon() { org.ovirt.engine.core.common.businessentities.network.InterfaceStatus interfaceStatus = getEntity().getInterface().getStatistics().getStatus(); com.google.gwt.safehtml.shared.SafeHtml bondPropertiesMessage = createBondTooltip(getEntity(), interfaceStatus); com.google.gwt.safehtml.shared.SafeHtml bondMessage = org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListView.templates.italicText(getEntity(), interfaceStatus); com.google.gwt.safehtml.shared.SafeHtml bondMessage = org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListView.templates.italicTextWithBoldTitle(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkLabel.constants.bondProperties(), bondPropertiesMessage); iconTooltip.setHtml(bondMessage); iconTooltip.add(iconTooltip); return iconPanel; }
protected org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModelSize calculateColSize(int itemCount) { if ((itemCount %4) == 3) { return org.ovirt.engine.ui.uicommonweb.models.vms.UnitSize.MD_2.m2; } return org.ovirt.engine.ui.uicommonweb.models.vms.constants.ColumnSize.MD_2; }
void initTable() { pfActionPanel.addButtonToActionGroup(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel>(org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.setupHostNetworksInterface()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getSetupNetworksCommand(); } })); pfActionPanel.addButtonToActionGroup(table.addActionButton(new org.ovirt.engine.ui.webadmin.section.main.view.host.SubTabHostInterfaceView.constants.saveNetConfigInterface()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getSaveNetworkConfigCommand(); })); pfActionPanel.addButtonToActionGroup(table.addActionButton(new org.ovirt.engine.ui.webadmin.section.main.view.presenter.host.SubTabHostSubTabHostInterfaceView.constants.syncAllHostNetworks()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getSyncAllHostNetworksCommand(); } })); }
@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createBodyPanel(java.lang.String header, org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface networkInterface) { descriptionHeaderPanel.getElement().setInnerHTML(header); statusPanel.add(createLinkStatusPanel((networkInterface!= null? networkInterface.isLinked() : false))); statusPanel.add(createCardPluggedStatusPanel((networkInterface!= null? networkInterface.isLinked() : false))); createAdditionalInfoPanel(); return bodyPanel; }
private void updateInfoPanel() { if ((getModel().getItems()) instanceof java.util.List) { clearClickHandlers(); selectionModel.clear(); org.ovirt.engine.ui.common.widget.listgroup.PatternflyListView.clear(); int i = 0; java.util.List<org.ovirt.engine.ui.common.widget.listgroup.PatternflyList<T>> new java.util.ArrayList<>(); for (T item : getModel().getItems()) { org.ovirt.engine.ui.common.widget.listgroup.PatternflyListView.widget.PatternflyListView.add(item); handlerRegistrations.add(newItem); handlerRegistrations.add(newItem); } newCurrentState.add(newItem); add(newItem); add(newItem); add(newItem); } newCurrentState.add(newItem); }
public void setStatisticsExpanded(boolean value) { statisticsExpandExpanded(value); toggleExpanded(); }
private boolean isInSync(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vmNetworkInterface = ((org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface) (getNetworkImplementationDetails())); if (networkImplementationDetails!= null) { managed = networkImplementationDetails.get(networkImplementationDetails.getNetworkImplementationDetails()); } return managed && (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterfaceType.NetworkInterface.getNetworkType().isInSync(networkImplementationDetails, networkImplementationDetails)) && (vmNetworkImplementationDetails.getNetworkQos().get(0))); }
public boolean getVlanState() { return detailExpand.isActive(); }
protected com.google.gwt.user.client.ui.IsWidget createLinkStatusPanel(boolean isLinked) { return new org.ovirt.engine.ui.common.widget.uicommon.vm.LinkStatusPanel(isLinked); }
private com.google.gwt.user.client.ui.IsWidget createDetailAdditionalInfo() { com.google.gwt.user.client.ui.FlowPanel panel = new com.google.gwt.user.client.ui.FlowPanel(); panel.addStyleName(PatternflyConstants.PF_LIST_ADDITIONAL_INFO_ITEM); detailExpandExpand = new org.ovirt.engine.ui.common.widget.listgroup.ExpanderContentView(org.ovirt.engine.ui.webadmin.widget.host.HostInterfaceListView.constants.PF_LIST_ADDITION_INFO_ITEM); getClickHandlerRegistrations().add(detailExpandExpandExpand(this)); panel.add(detailExpandExpandExpandExpand(this)); panel.add(detailExpandExpandExpand(this)); panel.add(detailExpandExpandExpand(this)); panel.add(detailExpandExpand(detailExpandExpandExpand(this)); return panel; }
private void setIcon(java.lang.String iconCss) { if (!(iconCss.isEmpty(iconCss))) { iconPanel.addStyleName(iconCss); } else { org.ovirt.engine.ui.uicommonweb.html.html.shared.SpiceWrapper iconPanel = new org.ovirt.engine.ui.uicompat.HTML(java.lang.StringUtils.isEmpty(iconCss)); iconPanel.addStyleName(iconCss); iconPanel.addStyleName(iconCss); add(iconPanel); } }
public void setVlanExpanded(boolean value) { detailExpand.toggleExpanded(value); toggleExpanded(); }
private com.google.gwt.user.client.ui.IsWidget createLinkStatusPanel(boolean isLinked) { return new org.ovirt.engine.ui.common.widget.uicommon.vm.LinkStatusPanel(isLinked); }
private com.google.gwt.user.client.ui.IsWidget getInterfaceNamesPanel() { com.google.gwt.user.client.ui.FlowPanel interfaceNamesPanel = new com.google.gwt.user.client.ui.FlowPanel(); interfaceNamesPanel.addStyleName(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface hostInterfaceName, bondInterfaces) { com.google.gwt.user.client.ui.FlowPanel hostInterfacePanel = new com.google.gwt.user.client.ui.FlowPanel(); interfaceNamesPanel.addStyleName(BondName); for (org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface hostInterface : bondInterfaces) { com.google.gwt.user.client.ui.FlowPanel hostInterfacePanel = new com.google.gwt.user.client.ui.FlowPanel(); hostInterfacePanel.getElement().setInnerSafeHtml(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(hostInterface.getName())); interfaceNamesPanel.add(createLinkStatusPanel(((hostInterface.getStatus()) == (org.ovirt.engine.core.common.businessentities.network.InterfaceStatus.UP)))); interfaceNamesPanel.add(hostInterface); } return interfaceNamesPanel; }
private void updateProperties() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getEntity(); setImage(disk.getDiskStorageType().isInternal()); setLun(((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN))); setAlias(disk.getDiskAlias()); setDescription(disk.getDiskDescription()); setDescription(disk.getDiskDescription()); setAlignment(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().diskAlignment(disk.getAlignment().toString(), lastScanDate)); }
@java.lang.Override public java.util.Map<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.Model> getWindowProperties() { java.util.Map<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel> map = super.getWindowProperties(); if (((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.DISK_Window())!= null) && ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.DISK_Window())!= null)) { return map; } return map; }
private void registerHandlers() { model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if ((Model.getWindow()) == null) && ((model.getWindow()) == null)) { if (model.getSpecificClusterQuota().getEntity()) { quotaClusterTable.asEditor().edit(model.getAllDataCenterClusters()); } else { quotaClusterTable.asEditor().edit(model.getQuotaClusters()); } if (model.getSpecificStorageQuota().getEntity()) { quotaStorageTable.asEditor().edit(model.getAllDataCenterStorages()); } else { quotaStorageTable.asEditor().edit(model.getAllDataCenterStorages()); } } }); model.getSpecificClusterQuota().getEntityChangedEvent().addListener(clusterListener); model.getSpecificStorageQuota().getEntityChangedEvent().addListener(storageListener); } } }); model.getSpecificClusterQuota().getEntityChangedEvent().addListener(storageListener); }
@java.lang.Override public void setWindowProperty(java.lang.String propName, org.ovirt.engine.ui.uicommonweb.models.Model value) { if (org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.DISK_Window()) { setWindow(value); } else { super.setWindowProperty(value); } }
public void addDialogModelListener(final M model) { init(model); model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (windowPropertyNames.contains(propName)) { handleWindowModelChange(model, propName, windowPopupInstances.get(propName), false); } else if (confirmWindowPropertyNames.contains(propName)) { handleWindowModelChange(model, propName, confirmWindowPopupInstances.get(propName), true); } } }); }
@java.lang.Override protected void onReveal() { org.ovirt.engine.ui.uicompat.Event<org.ovirt.engine.ui.uicompat.EventArgs> entityChangedEvent = getModel().getDiskViewType().getEntityChangedEvent(); if (!(entityChangedEvent.getListeners().contains(getView().getDiskTypeChangedEventListener()))) { entityChangedEvent.addListener(getView().getDiskContentTypeChangedEventListener()); } org.ovirt.engine.ui.uicompat.EventArgs args = getModel().getDiskContentType().getEntityChangedEvent(); if (!(diskContentTypeEntityChangedEvent.getListeners().contains(getView().getDiskTypeChangedEventListener()))) { diskContentTypeEntityChangedEvent.addListener(getView().getDiskContentTypeChangedEventListener()); } super.onReveal(); getView().handleQuotaColumnVisibility(); }
void initTableOverhead() { disksViewRadioGroup = new org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewRadioGroup(); disksViewRadioGroup.setClickHandler(clickHandler); disksContentTypeRadioGroup = new org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup(); disksContentTypeRadioGroup.setClickHandler(disksContentTypeRadioGroup.getDiskContentType()); }
public void setClickHandler(com.google.gwt.event.dom.client.ClickHandler clickHandler) { if (((com.google.gwt.event.dom.client.ClickButton button) == null) { button.addClickHandler(clickHandler); } }
private com.google.gwt.user.client.ui.Widget getRadioGroupPanel() { buttonToType = new java.util.LinkedHashMap(); com.google.gwt.user.client.ui.RadioButton allButton = new com.google.gwt.user.client.ui.RadioButton("diskContent"); buttonToType.put(allButton, null); allButton.setText(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.constants.allDisksLabel()); for (org.ovirt.engine.core.common.businessentities.storage.DiskContentType contentType : org.ovirt.engine.core.common.businessentities.storage.DiskContentType.values()) { com.google.gwt.user.client.ui.RadioButton button = new com.google.gwt.user.client.ui.RadioButton(); buttonsPanel.getElement().getStyle().setProperty("marginLeft", "auto"); buttonsPanel.getElement().getStyle().setProperty("marginRight", "auto"); for (com.google.gwt.user.client.ui.RadioButton button : buttonToType.keySet()) { button.getElement().getStyle().setProperty("marginRight", "auto"); buttonsPanel.add(null); localize(); } setDiskContentType(null); localize(); return buttonsPanel; }
private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getSelectedItem(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((getSelectedItems())!= null)? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (getSelectedItems())) : null; boolean shouldAllowEdit = true; if (disk!= null) { shouldAllowEdit =!(disk.isOvfStore())) && (!(isDiskLocked(disk))); } getNewCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed((((disks!= null) && (disks.size()) == 1)) && ((disks.size()) == 1)) && (isRemoveCommandAvailable()))); getScanAlignmentCommand().setIsExecutionAllowed((((disks!= null) && ((disks.size()) > 0)) && (isRemoveCommandAvailable()))); getScanAlignmentCommand().setIsExecutionAllowed(isExportCommandAvailable()); updateCopyAndMoveAndMoveCommandAvailability(disks); getExportCommand().setIsExecutionAllowed(isExportCommandAvailable()); updateCopyAndMoveAndMoveCommandAvailability(disks); getExportCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.ExportImageModel.isPauseAllowed(disks)); getResumeUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.ExportImageModel.isPauseAllowed(disks)); getResumeUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.ExportImageModel.isCancel(disks)); getExportCommand().setIsExecutionAllowed(true); getExportCommand().setIsExecutionAllowed(isVmInitCommandAvailable(disks); getExportCommand().setIsExecutionAllowed(true); getExportCommand().setIsExecutionAllowed(isVmInit); }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getNewCommand())) { newEntity(); } else if (command == (getEditCommand())) { edit(); } else if (command == (getRemoveCommand())) { remove(); } else if (command == (getMoveCommand())) { move(); } else if (command == (getExportCommand())) { copy(); } else if (command == (getExportCommand())) { export(); } else if (command == (getExportCommand())) { export(); } else if ("CancelConfirm".equals(command.getName())) { cancelConfirm(); } else if ("CancelConfirm".equals(command.getName())) { cancelConfirm(); } else if ("CancelConfirm".equals(command.getName())) { cancelConfirm(); } else if ("CancelConfirm".equals(command.getName())) { cancelConfirm(); } else if ("CancelConfirm".equals(command.getName())) { cancelConfirm(); } else if ("OnCancelConfirm".equals(command.getName())) { cancelConfirm(); } else if ("OnCancelUpload".equals(command.getName())) { cancelUpload(); } else if ("OnCancelUpload".equals(command.getName())) { cancelUpload(); } else if (command == (getResumeUploadCommand())) { cancelUpload(); } else if (command == (getResumeUploadCommand())) { cancelUpload(); } else if (command == (getResumeUploadCommand())) { cancelUpload(); } else if (command == (getResumeUploadCommand())) { cancelUpload(); } }
private void import() { if (((getSelectedItem()) == null) || (!((getSelectedItem()) instanceof org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getSelectedItem())) { return; } org.ovirt.engine.ui.uicommonweb.models.storage.ImportImageModel model = new org.ovirt.engine.ui.uicommonweb.models.storage.ImportImageModel(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getSelectedItem()))); model.start(); }
@java.lang.Override public javax.ws.rs.core.Response remove() { org.ovirt.engine.core.common.businessentities.Provider provider = org.ovirt.engine.api.restapi.resource.BackendExternalProviderHelper.getProvider(this, id); org.ovirt.engine.core.common.action.ProviderParameters parameters = new org.ovirt.engine.core.common.action.ProviderParameters(provider); parameters.setForce(isForce()); return performAction(ActionType.RemoveProvider, parameters); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> getBricks(org.ovirt.engine.core.compat.Guid volumeId) { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricks = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick1 = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); brick1.setVolumeId(volumeId); brick1.setId(FixturesTool.GLUSTER_BRICK_UUID1); brick1.setBrickDirectory("/test-vol0"); brick1.setServerId(servers); brick1.setServerId(servers); brick1.setServerId(servers); brick1.setServerId(servers); brick1.setServerId(servers); brick2.setStatus(GlusterStatus.UP); brick2.setStatus(GlusterStatus.UP); brick2.setStatus(GlusterStatus.UP); bricks.add(brick2); return bricks; }
private void onRemove(boolean force) { java.util.List<org.ovirt.engine.core.common.action.ActionParametersBase> parameterList = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.Provider provider : providers) { org.ovirt.engine.core.common.action.ProviderParameters providerParameters = new org.ovirt.engine.core.common.action.ProviderParameters(provider); providerParameters.setForce(force); parameterList.add(providerParameters); } sourceListModel.selectNextItem(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleActions(ActionType.RemoveProvider, parameterList, (result) -> sourceListModel.getSearchCommand().execute()); cancel(); }
private void updateActionAvailability() { java.util.Collection<org.ovirt.engine.core.common.businessentities.Provider> tempVar = getSelectedItems(); java.util.Collection<org.ovirt.engine.core.common.businessentities.Provider> selectedItems = (tempVar!= null)? tempVar : new java.util.ArrayList(); getEditCommand().setIsExecutionAllowed(((selectedItems.size()) == 1)); getRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) > 0)); getRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) > 0)); getRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) > 0)); getRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) > 0)); getRemoveCommand().setIsAvailable(isSelectedProvidersOfType(selectedItems)); getRemoveCommand().setIsAvailable(isSelectedProvidersOfType(selectedItems); getRemoveCommand().setIsAvailable(isSelectedProvidersOfType(selectedItems); getRemoveCommand().setIsAvailable(isSelectedItems(isSelectedItemsOfType(Available)); }
private boolean isSelectedItemsOfType(org.ovirt.engine.core.common.businessentities.ProviderType providerType) { return ((getSelectedItems())!= null) && (getSelectedItems().allocateItems().allocate(provider))); }
@java.lang.Override protected void executeCommand() { setStoragePoolId(getNetwork().getDataCenterId()); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(()).executeInNewTransaction(()).executeInNewTransaction(getNetwork(), getNetwork()); setCompensationContext(getNetwork().isExternal()); getCompensationContext().stateChanged(); return null; }
private void setVdsmNameInVdsInterfaces(org.ovirt.engine.core.common.businessentities.network.Network network, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfaces) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfacesToUpdate = new java.util.LinkedList<>(); interfaces.stream().filter((iface) -> java.util.Objects.equals(iface.getNetworkName(), network.getName())).forEach((iface) -> (iface) -> { iface.setNetworkName(network.getVdsmName()); } java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfacesToUpdate = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : interfaces) { iface.getName().equals(iface.getName(), network.getName()); } } return interfaceDao.massUpdateInterfacesForVds(iface); }
public void setVdsmNameInVdsInterfaces(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.compat.Guid clusterId) { org.ovirt.engine.core.common.businessentities.network.Network network = network.getClusterId(); if (interfaceDao.getAllInterfacesByClusterId(clusterId)) { return; } }
public void setVdsmNameInVdsInterfaces(org.ovirt.engine.core.common.businessentities.network.Network network) { setVdsmNameInVdsInterfaces(network.getName()); }
private java.util.List<org.ovirt.engine.core.common.businessentities.VM> getVmsOnlyOnStorageDomain() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> allVmsRelatedToSD = vmDao.getAllForStorageDomain(getStorageDomainId()); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsWithDisks = vmDao.getAllForVmsWithDisksOnOtherStorageDomain(getStorageDomainId()); allVmsRelatedToSD = vmDao.getAllVMsWithDisksOnMultipleStorageDomain(getStorageDomainId()); return allVmsRelatedToSD; }
private java.util.Set<org.ovirt.engine.core.compat.Guid> findNonResponsiveHosts(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts) { final java.util.Set<org.ovirt.engine.core.compat.Guid> nonResponsiveHosts = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if ((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.NonResponsive)) { nonResponsiveHosts.add(host.getId()); } if ((((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Down)) || ((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Reboot))) && (host.isInFenceFlow())) { host.setStatus(VDSStatus.NonResponsive); } } return nonResponsiveHosts; }
public void setInFenceFlow(boolean isInFenceFlow) { this.isInFence = isInFence; }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, supportedClusterVersionsSet, supportedEngineVersions, buildName, cpuFlagsMockets, cpuFlagsMh, cpuFlagsMh, cpuSpeedMh, cpuSpeedMh, hardSpeed, int kvmVersion, kvmVersion, libvirtVersion, libvirtVersion, libvirtVersion, libvirtVersion, libvirtVersion, libvirtVersion, libvirtVersion, memCommited, libvirtVersion, memCommited, netCommited, netCommited, netCommited, netCommited, netCommited, netCommited, net.getCoresCount, physicalVersion, vmsCoresCount, vmsCores, vmsCoresCount, vmsCoresCount, vmsCoresCount, vmsCoresCount, vmsCoresCount, vmsCoresCount, vmsCoresCount, hwVersion, hwVersion, hwVersion, hwVersion, hwVersion, hwVersion, hwVersion, hwVersion, hwVersion, hdumpStatus, hwUuid, hdumpStatus, hdumpStatus, speed, hwUuid, hdumpStatus, speed, speed, updateAvailable, hostDevicePassthroughMode, speed, reason); }
public boolean isInFenceFlow() { return isInFenceFlow; }
private void setInFenceFlow(org.ovirt.engine.core.compat.Guid hostId, boolean isInFenceFlow) { org.ovirt.engine.core.common.businessentities.VDS vdsDynamic = org.ovirt.engine.core.common.businessentities.VDSCommandType.getVds().get(hostId); if (vdsDynamic!= null) { org.ovirt.engine.core.common.businessentities.VDS vdsDynamic = org.ovirt.engine.core.common.businessentities.VDSCommand.getVds().get(hostId); org.ovirt.engine.core.common.businessentities.VDS vdsDynamic = org.ovirt.engine.core.common.businessentities.VDSCommandEntity.getVds().get(org.ovirt.engine.core.common.businessentities.VDSCommand.getVdsId()); if (vmDynamic!= null) { org.ovirt.engine.core.common.businessentities.VDS vdsDynamic = vdsDynamic.get(vdsId); org.ovirt.engine.core.common.businessentities.VDS vdsDynamic = vdsDynamic.get(vdsId); if (vmDynamic!= null) { org.ovirt.engine.core.common.businessentities.VDS vdsDynamic = vdsDynamic.get(vdsId); vdsDynamic.setInFence(vdsId); org.ovirt.engine.core.common.businessentities.VDS vdsDynamic = vdsDynamic.get(vdsId); vdsDynamic.setInFence(vdsId); vdsDynamic.setId(id); vdsId(vdsId); vdsDynamic.setEntity(vdsId); vdsId(vdsId); } } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.AuditLog auditLog = getAuditLog(); auditLogDao.remove(org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters().getAuditLogId()); setAuditLogDetails(auditLog); auditLog.setUserId(Guid.Empty); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logableToClear = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(auditLog)); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logableToClear = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(logableToClear, auditLog.getLogType()); eventFloodRegulator.add(new org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getSucceeded(), true); }
public static org.ovirt.engine.core.common.action.VdcActionType getFirewallType(org.ovirt.engine.core.compat.Version clusterCompatibilityVersion) { return fireFirewall; }
public static org.ovirt.engine.core.common.action.VdcActionType valueOf(int value) { return org.ovirt.engine.core.common.action.VdcActionType.fire(value); }
@org.ovirt.api.metamodel.annotations.Link types.DiskSnapshot();
@org.ovirt.api.metamodel.annotations.InputDetail defaultMessage() { mandatory(imageFormat.diskSnapshot().id()); }
protected boolean checkDisksNotInBackupStorage() { for (org.ovirt.engine.core.common.businessentities.Disk disk : org.ovirt.engine.core.bll.RunVmCommand.getVm().getDiskMap().values()) { if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic destDomain = storageDomainStaticDao.get(diskImage); if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.Disk.DiskImage)) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic destDomain = storageDomainStaticDao.get(diskImage.getStorageIds().get(0)); if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.Disk.DiskImage)) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic destDomain = storageDomain.getStorageDomain().get(diskImage.getStorageIds().get(0)); if ((disk.getStorageType()) == (org.ovirt.engine.core.common.businessentities.DiskImage) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic destDomain = storageDomain.getStorageDomainMap().values().values().values().values(); if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.DiskImage) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic destDomain = storageDomain.getStorageDomainIds().get(diskImage.getStorageIds().get(0)); } } } } return true; } }
protected void updateStaticDataDefaults() { updateStorageDomainWipeAfterDelete(); updateStorageDomain(); }
private void warnIfNotAllDisksPermitSnapshots() { for (org.ovirt.engine.core.bll.RunVmCommand.getVm().getDiskMap().values()) { if (!(disk.isAllowSnapshot())) { auditLogDirector.log(this, AuditLogType.USER_RUN_VM_AS_STATELESS_WITH_DISKS_NOT_ALLOWING_SNAPSHOT); break; } } }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.AuditLog)) { return false; } org.ovirt.engine.core.common.businessentities.AuditLog other = (((((((((((((((((((org.ovirt.engine.core.common.businessentities.AuditLog) (obj)); return (((((((((((((((org.ovirt.engine.core.common.businessentities.AuditLog) (obj)); return (((((((((((((((org.ovirt.engine.core.common.businessentities.AuditLog) (obj))) && (java.util.Objects.equals(logTime, other.getLogId))) && ((logType) == (other.logType))) && ((logType) == (other.logType))) && (java.util.Objects.equals(message, other.message))) && (java.util.Objects.equals(message, other.vdsId))) && (java.util.Objects.equals(vdsId, other.vdsId))) && (java.util.Objects.equals(vdsId, other.vdsId))) && (java.util.Objects.equals(vmTemplateId, other.vmTemplateId))) && (java.util.Objects.equals(vmTemplateId, other.vmTemplateId))) && (java.util.Objects.equals(vmTemplateId, other.vmTemplateId))) && (java.util.Objects.equals(correlationId, other.vmTemplateId))) && (java.util.Objects.equals(correlationId, other.correlationId))) && (java.util.Objects.equals(jobId, other.correlationId))) && ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntityId) (other.getOriginId()))) && ((org.ovirt.engine.core.common.businessentities.glusterId) (org.ovirt.engine.core.common.businessentities.AuditLogType.gluster
@java.lang.Override public org.ovirt.engine.api.resource.HostNicBelongResource getNicsResource() { return inject(new org.ovirt.engine.api.restapi.resource.BackendHostNicResolveResource(guid, parent.getHostId())); }
@org.junit.Before public void setupEnvironment() { org.ovirt.engine.core.utils.CorrelationIdTracker.clean(); org.ovirt.engine.core.common.businessentities.aaa.DbUser user = mock(org.ovirt.engine.core.common.businessentities.aaa.DbUser.class); when(engineSessionDao.remove(anyLong())).thenReturn(1); org.ovirt.engine.core.bll.CommandBaseTest.mcr.mcr.mockConfigValue(ConfigValues.UserSessionTimeOutInterval, 30); sessionDataContainer.setUser(session, user); }
@org.junit.Test public void testBlockUseHostCpuWithPPCArch() { when(cpuFlagsManagerHandler.getCpuId(anyString(), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(org.ovirt.engine.core.bll.CPU_ID); when(osRepository.isCpuSupported(anyInt(), any(org.ovirt.engine.core.compat.Version.class), anyString())).thenReturn(true); doNothing().when(cmd).initTemplateDisks(); setupCanAddPpcTest(); setupCanAddPpcTest(); doReturn(true).when(cmd).isVmNameValidLength(any(org.ovirt.engine.core.common.businessentities.VM.class)); when(osRepository.getArchitectureFromOS(anyInt())).thenReturn(ArchitectureType.ppc64); cmd.getParameters().getVm().setClusterArch(ArchitectureType.ppc64); cmd.setVmName(ArchitectureType.ppc64); cmd.getParameters().getVm().setUseHostCpuFlags(true); cmd.getParameters().getVm().setMigrationSupport(MigrationSupport.PINNED_TO_HOST); cmd.getParameters().getVm().setVmOs(org.ovirt.engine.core.common.businessentities.VM.class)); org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setVm(vm.getArchitectureFromOS(ArchitectureType.OTHER); cmd.setVmOs(ArchitectureType.Other.other.other.other.oImage()); cmd.getParameters().getVm().setVmOs(osType.other.other.oImage()); cmd.getVm().setVm().setVmOs(cluster.getId()); cmd.getParameters().getVm().setVm().setVmOs(osType.Other.Other.other.x86); cmd.init(); java.util.Map<java.lang.String, java.lang.String> migrationMap = new java.util.
@java.lang.Override public void setUp() { super.setUp(); generateStorageToDisksMap(); initDestSDs(); mcr.mockConfigValue(ConfigValues.MaxIoThreadsPerVm, 126); mcr.mockConfigValue(ConfigValues.MaxVmNameLength, 64); mcr.mockConfigValue(ConfigValues.SupportedClusterLevels, new java.util.HashSet(java.util.Arrays.asList(new org.ovirt.engine.core.compat.Version(2, 2), new org.ovirt.engine.core.compat.Version(3, 0))); mcr.mockConfigValue(ConfigValues.ValidNumOfMonitors, java.util.Arrays.asList(new org.ovirt.engine.core.compat.Version(3, 2), new org.ovirt.engine.core.compat.Version(3, 0))); }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); mcr.mockConfigValue(ConfigValues.ConsoleToggleFullScreenKeys, "shift+f11"); mcr.mockConfigValue(ConfigValues.ConsoleReleaseCursorKeys, "shift+f12"); mcr.mockConfigValue(ConfigValues.RemapCtrlAltDelDefault, true); mcr.mockConfigValue(ConfigValues.ResetSpiceCtrlAltDelDefault, true); mcr.mockConfigValue(ConfigValues.EnableSpiceRootCertificateValidation, true); }
@org.junit.Test public void testNameNotChanged() { prepareVmToPassValidate(); vm.setName("vm1"); mockSameNameQuery(true); mockVmValidator(); command.initEffectiveCompatibilityVersion(); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mcr.mockConfigValue(ConfigValues.MaxNumOfCpuPerSocket, command.getEffectiveCompatibilityVersion(), migrationMap); org.ovirt.engine.core.bll.UpdateVmcr.mcr.mcr.mcr.mockConfigValue(ConfigValues.MaxNumOfCpuPerSocket, command.getEffectiveCompatibilityVersion(), 16); org.ovirt.engine.core.bll.UpdateVmcr.mcr.mcr.mcr.mCmCommandTest.mcr.mcr.mockConfigValue(ConfigValues.MaxNumOfCpuPerSocket, command.getEffectiveCompatibilityVersion(), 16); org.ovirt.engine.core.bll.UpdateVmcr.mcr.mcr.mcr.mCmCpuConfigValue(ConfigValues.MaxNumOfCpus, command.getEffectiveCompatibilityVersion(), 16); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mcr.mcr.mcr.mockConfigValue(ConfigValues.MaxNumOfVmCpus, command.getEffectiveCompatibilityVersion(), 16); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mcr.mockConfigValue(ConfigValues.MaxNumOfVmSockets, command.getEffectiveCompatibilityVersion(), 20)); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mcr.mockConfigValue(ConfigValues.VM32BitMaxMemorySizeInMB, command.getEffectiveCompatibilityVersion(), 4); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.VM64BitMaxMemorySizeInMB, command.getEffectiveCompatibilityVersion(), 4); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.VM64
@org.junit.Before public void setUp() { when(vmDao.get(vm.getId())).thenReturn(vm); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); cluster.setCpuName("Converter Conroe Family"); cluster.setArchitecture(ArchitectureType.x86_64); cluster.setId(vm.getClusterId()); cluster.setCompatibilityVersion(org.ovirt.engine.core.compat.Version.getLast()); when(clusterDao.get(vm.getClusterId())).thenReturn(cluster); mockOsRepository(); doNothing().when(cmd).separateCustomProperties(any(org.ovirt.engine.core.common.businessentities.VmStatic.class)); doReturn(getDisksList(vm.getStoragePoolId())).when(cmd).getVmDisksFromDB(); doReturn(vmDeviceUtils).when(cmd).getVmDeviceUtils(); org.ovirt.engine.core.bll.AddVmTemplateCommandTest.mockConfigValue(ConfigValues.VmPriorityMaxValue, 100); cmd.init(); }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); mcr.mockConfigValue(ConfigValues.OvirtInitialSupportedIsoVersion, "5.8"); mcr.mockConfigValue(ConfigValues.OvirtIsoPrefix, "rhevh"); mcr.mockConfigValue(ConfigValues.OvirtNodeOS, "^ovirt-engine/ui-frontend/run/ovirt-engine"); mcr.mcr.mockConfigValue(ConfigValues.DataDir, "^ovirt-engine/ui-frontend/vm-engine"); mcr.mockConfigValue(ConfigValues.DataDir, "/usr/share/ovirt-engine"); }
private java.lang.String render(java.lang.String renderPortMirroring(boolean portMirroring) { return org.ovirt.engine.ui.common.widget.uicommon.models.vm.VmInterfaceListModel.constants.yes(); }
@java.lang.Override public void setEnabled(boolean enabled) { this.enabled = enabled; nameEditor.setEnabled(enabled); valueEditor.setEnabled(enabled); }
@java.lang.Override protected void init() { setNetworkFilterParameterWidgetVisible(true); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getNicTypeList(getVm().getOsId(), getClusterCompatibilityVersion(), new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(((returnValue) -> ((returnValue) -> ((java.lang.Boolean) (returnValue)))); postNicInit(); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel iface) { driver.edit(iface); networkFilterParameterWidget.edit(iface.getNetworkFilterParameterListModel()); networkFilterParameterWidget.setEnabled(iface.isNetworkFilterParameterWidgetVisible()); networkFilterParameterWidget.setVisible(iface.isNetworkFilterParameterWidgetVisible()); hideMacWhenNotEnabled(iface); iface.getMAC().getPropertyChangedEvent().addListener(args.propertyName)) { if ("IsAvailable".equals(args.propertyName)) { hideMacWhenNotEnabled(iface); } } }); }
protected void postOnSave() { if (saveSuceeded) { cancel(); } }
protected void onSave() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic = createBaseNic(); if ((getProgress())!= null) { return; } if (!(validate())) { return; } nic.setName(getName().getEntity()); org.ovirt.engine.core.common.businessentities.network.VnicProfileView profile = getProfile().getSelectedItem(); nic.setVnicProfileId(profile.getId()); nic.setNetworkName(profile.getNetworkName()); nic.setLinked(getLinked().getEntity()); if ((getNicType().getSelectedItem()) == null) { nic.setType(null); } else { nic.setType(getNicType().getSelectedItem().getValue()); } onSaveMAC(nic); nic.setPlugged(getPlugged().getEntity()); startProgress(); saveSuceeded = false; org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(getActionType(), createVdcActionParameters(nic), (result) -> ((java.lang.String) (result) (returnValue)).getSucceeded())) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result.getReturnValue(); if ((returnValue!= null) && (returnValue.getSucceeded())) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result.getReturnValue(); if ((returnValue!= null) && (returnValue.getSucceeded())) { java.lang.Object actionReturnValue = returnValue.getActionReturnValue(); saveSuceeded = true; if ((actionReturnValue!= null) && (actionReturnValue instanceof org.ovirt.engine.core.compat.Guid)) { saveNicFilterParameters(((org.ovirt.engine.core.compat.Guid) (actionReturnValue))); } else { postOnSave(); } } }, this); }
@java.lang.Override protected void init() { setNetworkFilterParameterWidgetVisible(true); super.init(); }
private void postNicInit() { getName().setEntity(getNic().getName()); initLinked(); initLinked(); initNetworkFilterParameters(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(((returnValue) -> ((java.lang.Object) (returnValue))); getNetworkFilterParameters().setItems(returnValue); })); initProfiles(); getPlugged().setEntity(getNic().isPlugged()); if (!(allowPlug())) { getPlugged().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().nicHotPlugNotSupported(getClusterCompatibilityVersion().toString())); } getPlugged().setIsChangeable(allowPlug()); initCommands(); }
public org.ovirt.engine.core.common.businessentities.network.VmNicFilterParameter flush() { getEntity().setName(name.getEntity()); getEntity().setValue(value.getEntity()); return getEntity(); }
protected java.util.Map<java.lang.String, java.lang.String> createPortAllocationRuntimeProperties(com.woorea.openstack.quantum.model.Port port) { java.util.Map<java.lang.String, java.lang.String> runtimeProperties = new java.util.HashMap<>(); runtimeProperties.put("vnic_id", port.getId()); java.lang.String providerType = getProvider().getType().name(); runtimeProperties.put("provider_type", providerType); if (((port.getSecurityGroups())!= null) && (!(port.getSecurityGroups().isEmpty()))) { runtimeProperties.put("security_groups", org.apache.commons.lang.StringUtils.join(port.getSecurityGroups(), ',')); } java.lang.String pluginType = getProvider().getAdditionalProperties().getPluginType(); if (pluginType == null) { pluginType = ""; } runtimeProperties.put("plugin_type", pluginType); return runtimeProperties; }
@java.lang.Override public javax.ws.rs.core.Response remove() { org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.api.restapi.resource.BackendClusterFeatureHelper.getClusterFeatureDisabled(this, clusterId, guid); org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters param = new org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters(cluster); return performAction(ActionType.UpdateCluster, param); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.ClusterFeature feature) { validateParameters(feature, null); org.ovirt.engine.core.common.businessentities.AdditionalFeature featureEntity = map(feature, null); org.ovirt.engine.core.common.businessentities.AdditionalCluster cluster = org.ovirt.engine.api.restapi.resource.BackendClusterFeatureHelper.getClusterEntity(this, clusterId); org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature supportedFeature = new org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature(); supportedFeature.setFeature(featureEntity); supportedFeature.setEnabled(true); supportedFeature.setClusterId(clusterId); cluster.getAddtionalFeaturesSupported().add(supportedFeature); org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters param = new org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters(cluster); return performCreate(ActionType.UpdateCluster, param, new org.ovirt.engine.api.restapi.resource.BackendClusterEnabledFeaturesResource.ClusterFeatureIdResolver(clusterId, featureEntity.getId())); }
@java.lang.Override public org.ovirt.engine.api.model.ClusterFeatures list() { org.ovirt.engine.api.model.ClusterFeatures features = new org.ovirt.engine.api.model.ClusterFeatures(); java.util.Set<org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature> addlFeatures = getOptionalEntity(java.util.Set.class, QueryType.GetClusterFeaturesByClusterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), clusterId.toString(), false); if (addlFeatures!= null) { for (org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature entity : addlFeatures) { if (entity.isEnabled()) { features.getClusterFeatures().add(addLinks(map(entity.getFeature(), null))); } } } return features; }
public static org.ovirt.engine.api.model.Cluster getClusterEntity(org.ovirt.engine.api.restapi.resource.BackendResource resource, org.ovirt.engine.core.compat.Guid clusterId) { org.ovirt.engine.core.common.businessentities.Cluster cluster = resource.getEntity(org.ovirt.engine.api.restapi.resource.BackendResource.class, queryType.GetClusterById, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), null, true); return cluster; }
public static org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature getEnabledFeature(org.ovirt.engine.api.restapi.resource.BackendResource resource, org.ovirt.engine.core.compat.Guid clusterId, org.ovirt.engine.core.compat.Guid id) { java.util.Set<org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature> addlFeatures = resource.getOptionalEntity(java.util.Set.class, QueryType.GetClusterFeaturesByClusterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), clusterId.toString(), false); org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature feature = addlFeatures.stream().filter((f) -> (f.getFeature().getId().equals(id)) && (f.isEnabled()))).findFirst().orElse(null); return feature; }
public static java.util.Set<org.ovirt.engine.core.common.businessentities.AdditionalFeature> getClusterFeatures(org.ovirt.engine.api.restapi.resource.BackendResource resource, java.lang.String version) { java.util.Set<org.ovirt.engine.core.common.businessentities.AdditionalFeature> addlFeatures = new java.util.HashSet<>(); addlFeatures(java.util.Set.class, org.ovirt.engine.core.compat.Version(version), resource.getCurrent().getApplicationMode()), ("features for version: " + version)); return addlFeatures; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.ImageFileType.class, to = org.ovirt.engine.api.model.ImageFileType.class) public static org.ovirt.engine.api.model.ImageFileType map(org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageFileType, org.ovirt.engine.api.model.ImageFileType template) { switch (imageType) { case Unknown : return org.ovirt.engine.api.model.ImageFileType.UNKNOWN; case ISO : return org.ovirt.engine.api.model.ImageFileType.DISK; case Disk : return org.ovirt.engine.api.model.ImageFileType.FLOPPY; case Disk : return org.ovirt.engine.api.model.ImageFileType.DISK; case All : return org.ovirt.engine.api.model.ImageFileType.DISK; case All : return org.ovirt.engine.api.model.ImageFileType.DISK; default : return null; } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.storage.RepoImage.class, to = org.ovirt.engine.api.model.Image.class) public static org.ovirt.engine.api.model.Image map(org.ovirt.engine.core.common.businessentities.storage.RepoImage entity, org.ovirt.engine.api.model.Image template) { org.ovirt.engine.api.model.Image model = (template!= null)? template : new org.ovirt.engine.api.model.Image(); model.setId(entity.getRepoImageId()); model.setName(entity.getRepoImageName()); if ((entity.getSize())!= null) { model.setSize(entity.getSize().intValue()); } if ((entity.getSize())!= null) { model.setSize(org.ovirt.engine.api.restapi.types.ImageMapper.map(entity.getFileType(), null)); } return model; }
@java.lang.Override protected boolean validateImageTransfer() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskValidator = getDiskImage(); org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator = getDiskValidator(diskImage); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = getDiskImagesValidator(diskImage); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator storageDomainValidator = getStorageDomainValidator(storageDomainDao.getForStoragePool(diskImage.getStorageIds().get(0), diskImage.getStoragePoolId())); return ((((validate(diskValidator.isDiskExists())) && (validate(diskValidator.isDiskPluggedToAnyNonDownVm(false)))) && (validate(diskValidator.diskImagesNotIllegal()))) && (validate(storageDomainValidator.diskImagesNotLocked()))) && (validate(storageDomainValidator.diskImagesNotLocked()))) && (validate(storageDomainValidator.diskImagesNotLocked())); }
protected org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImage() { if ((org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransportCommand.getParameters().getImageId()))) { return super.getVm().get(org.ovirt.engine.core.bll.storage.disk.image.TransportCommand.getParameters().getImageId()); } return ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(org.ovirt.engine.core.bll.storage.disk.image.TransportCommand.getParameters().getImageGroupID()))); }
@java.lang.Override public void init() { super.init(); setImageId(org.ovirt.engine.core.bll.storage.disk.image.TransportalImageCommand.getParameters().getImageId()); setImageId(org.ovirt.engine.core.bll.storage.disk.image.Transportal.getParameters().getImageId()); setImageId(org.ovirt.engine.core.bll.storage.disk.image.Transportal.getParameters().getImageId()); setImageGroupId(org.ovirt.engine.core.bll.storage.disk.image.Transportal.ImportImageCommand.getParameters().getImageId()); setImageGroupId(org.ovirt.engine.core.bll.storage.disk.image.Transportal.ImportImageCommand.getParameters().getImageId()); setImageId(org.ovirt.engine.core.bll.storage.disk.image.TransmissionCommand.getParameters().getImageId()); setImageId(org.ovirt.engine.core.bll.storage.disk.image.Transportal.TransmissionCommand.getParameters().getImageId()); setImageId(org.ovirt.engine.core.bll.storage.disk.image.TransparentCommand.getParameters().getImageId()); setImageId(org.ovirt.engine.core.bll.storage.disk.image.TransparentCommand.getParameters().getImageId()); setImageId(org.ovirt.engine.core.bll.storage.disk.image.Transparent.TransferImageCommand.getImageId()); setImageId(org.ovirt.engine.core.bll.storage.disk.image.ImportImageCommand.getStorageDomainId()); setImageId(storageDomainId); }
public void proceedCommandExecution(org.ovirt.engine.core.compat.Guid childCmdId) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = imageTransferDao.get(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); if ((entity == null) || ((entity.getPhase()) == null)) { log.error(("The transfer status entity corrupt or missing from database "{}'", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); setCommandStatus(CommandStatus.FAILED); return; } if ((entity.getDiskId())!= null) { setImageId(entity.getDiskId()); } long ts = (java.lang.System.currentTimeMillis()) / 1000; if (pauseTransferIfNecessary(entity, ts)) { return; } executeStateHandler(entity, ts, childCmdId); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> listPermissionSubjects = new java.util.ArrayList<>(); if (org.ovirt.engine.core.bll.storage.disk.image.TransmissionSubjects.isImageProvided()) { listPermissionSubjects.add(new org.ovirt.engine.core.bll.storage.disk.image.TransmissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransportalDiskImageCommand.getImageGroupId(), org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_DISK_PROPERTIES)); } else { listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransmissionSubjectCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK)); } return listPermissionSubjects; }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> locks = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> entry : org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> locks) { if (((org.ovirt.engine.core.bll.storage.disk.image.Transportal.TransferDiskImageCommand.getParameters().getImageId())!= null) && (!(org.ovirt.engine.core.bll.storage.disk.image.TransportMirroringDiskImage.getImageId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, EngineMessage.ACTION_TYPE_FAILED_VM_IS_LOCKED))); } return locks; }
@java.lang.Override public javax.ws.rs.core.Response addForSnapshot(org.ovirt.engine.api.model.ImageTransfer imageTransfer) { org.ovirt.engine.core.common.action.TransferDiskImageParameters params = new org.ovirt.engine.core.common.action.TransferDiskImageParameters(); params.setImageId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(imageTransfer.getDiskSnapshot().getId())); return performCreate(imageTransfer, params); }
@java.lang.Override public javax.ws.rs.core.Response toResponse(org.ovirt.engine.api.restapi.utils.MalformedIdException exception) { org.ovirt.engine.api.restapi.resource.validation.MalformedIdExceptionMapper.log.error("Malformed id detected while processing request for path request for path", request.getMethod(), uriInfo.getPath()); org.ovirt.engine.api.restapi.resource.validation.MalformedIdExceptionMapper.log.error("Exception", exception); final org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason("Exception", exception); fault.setDetail(exception.getCause().getMessage()); return javax.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(fault).build(); }
private void disableAnyUsb(org.ovirt.engine.core.common.businessentities.VmBase oldVm, org.ovirt.engine.core.common.businessentities.VmBase newVm) { final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> usbControllers; if (((((org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED) == (oldVm.getUsbPolicy())) && ((org.ovirt.engine.core.common.businessentities.VmType.HighLevel) == (oldVm.getVmType()))) && ((org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED) == (oldVm.getUsbPolicy()))) && ((usbControllers.size()) == 1)) && ((usbControllers.size()) == 1)) && (UsbControllerModel.NONE.libvirtName.equals(getUsbPolicy()))) { return; } if ((org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED) == (oldVm.getUsbPolicy())) { disableNormalUsb(newVm.getId()); } else if ((org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED) == (oldVm.getUsbPolicy())) { disableNormalUsb(newVm.getId()); } else if ((org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED) == (oldVm.getUsbPolicy())) { disableNormalUsb(newVm.getId()); } addManagedDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), newVm.getId()), Vm.getId(), null)); }
public org.ovirt.engine.core.common.businessentities.VmDevice getVmDevice() { java.util.Map<java.lang.String, java.lang.Object> specParams = new java.util.HashMap<>(); specParams.put("action", actionType.getName()); specParams.put("model", actionType.getName()); specParams.put("model", model.name()); return new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(id), VmDeviceGeneralType.WATCHDOG, VmDeviceType.WATCHDOG.getName(), "", specParams, true, true, true, false, false, "", null, "", null); }
public void vmTypeChanged(org.ovirt.engine.core.common.businessentities.VmType vmType) { if (basedOnCustomInstanceType()) { getModel().getIsSoundcardEnabled().setEntity((vmType == (org.ovirt.engine.core.common.businessentities.VmType.Desktop))); } getModel().getAllowConsoleReconnect().setEntity((vmType == (org.ovirt.engine.core.common.businessentities.VmType.Server))); if (vmType == (org.ovirt.engine.core.common.businessentities.VmType.HighLevel)) { getModel().getIsHeadlessModeEnabled().setEntity(true); getModel().getIsConsoleDeviceEnabled().setEntity(true); getModel().getUsbPolicy().setSelectedItem(null); getModel().getWatchdogAction().setSelectedItem(null); getModel().getWatchdogAction().setSelectedItem(getModel().getWatchdogAction().iterator().next()); getModel().getIsHighlyAvailable().setEntity(false); } }
private void onDestroy() { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); if ((model.getProgress())!= null) { return; } if (!(model.validate())) { return; } org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getSelectedItem(); model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.ForceRemoveStorageDomain, new java.util.ArrayList(java.util.Arrays.asList(new org.ovirt.engine.core.common.action.ActionParametersBase[]{ new org.ovirt.engine.core.common.action.ForceRemoveStorageDomainParameters(storageDomain.getId()) }), (result) -> { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (result.getState())); localModel.stopProgress(); cancel(); } }, model); }
@org.junit.Test public void testRemoveWithDestroy() throws java.lang.Exception { setUpGetEntityExpectations(); javax.ws.rs.core.UriInfo uriInfo = setUpActionExpectations(ActionType.ForceRemoveStorageDomain, org.ovirt.engine.core.common.action.ForceRemoveStorageDomainParameters.class, new java.lang.String[]{ "StorageDomainId", "VdsId" }, new java.lang.Object[]{ GUIDS[0], GUIDS[1] }, true, true); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(BackendStorageDomainResource.HOST, GUIDS[1].toString()); parameters.put(BackendStorageDomainResource.DESTROY, java.lang.Boolean.TROY, java.lang.Boolean.TROY, java.lang.Boolean.TRUE.toString()); uriInfo = addMatrixParameterExpectations(uriInfo, parameters); setUriInfo(uriInfo); verifyRemove(resource.remove()); }
@java.lang.Override protected boolean validate() { boolean returnValue = ((super.validate()) && (org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.checkStorageDomain())) && (((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainSharedStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Unattached)) || (checkStorageDomainStatusNotEqual(StorageDomainStatus.Active))); if ((returnValue && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master))) && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStoragePool())!= null)) { if ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.electNewMaster()) == null) && (!(org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getParameters().isForceRemoveLastMaster()))) { returnValue = false; addValidationMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN); } else if ((!(org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.initializeVds())) && (!(org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getParameters().isForceRemoveLastMaster()))) { returnValue = false; addValidationMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN_DOMAIN); } else if (!(org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getParameters().isForceRemoveLastMaster()))) { return false; } return false; }
@java.lang.Override public javax.ws.rs.core.Response remove() { java.lang.String host = org.ovirt.engine.api.restapi.util.ParametersHelper.getParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.HOST); if (host == null) { org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason("Fault parameter is missing missing missing"); } get(); org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason("Fault parameter is missing"); throw new javax.ws.rs.WebApplicationException(javax.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(fInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.DESTROY, true, false); boolean format = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.FORMAT, true, false); boolean format = org.ovirt.engine.core.common.action.RemoveStorageDomainParameters(guid); parameters.setVdsId(hostId); return performAction(ActionType.ForceRemoveStorageDomain, parameters); }
protected boolean isDetachAllowed() { if ((getStoragePoolIsoMap()) == null) { return failValidation(EngineMessage.STORAGE_DOMAIN_NOT_ATTACHED_TO_STORAGE_POOL); } java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomains = storageDomainDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBase.getStoragePool().getId()); if (((storageDomains.size()) > 1) && (isMaster())) { return failValidation(EngineMessage.ERROR_CANNOT_DETACH_LAST_STORAGE_DOMAIN); } return true; }
private void detachStorageDomain(org.ovirt.engine.core.compat.Guid storageDomainId) { log.info("Attached '{}' is already attached to a different storage pool, clean the storage domain", org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getVds().getId()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue ret = runVdsCommand(VDSCommandType.CleanStorageDomainMetaData, params); if (ret.getSucceeded()) { log.warn("Failed to clean metadata for storage domain '{}'.", storage domain '{}'", storageDomainId); } else { log.warn("Failed to clean metadata for storage domain '{}'", storageDomainId); } }
private void cleanDirtyMetaDataIfNeeded() { if ((org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getStoragePool().getStatus()) == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Maintenance)) { for (org.ovirt.engine.core.compat.Guid storageDomainId : org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getParameters().getStorages()) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = storageDomainDao.get(storageDomainId); if ((domain.getStorageDomainType().isDataDomain()) && (isStorageDomainAttachedToStoragePool(domain))) { detachStorageDomain(storageDomainId); } } } }
@java.lang.Override public javax.ws.rs.core.Response remove() { boolean destroy = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.DESTROY, true, false); if (destroy) { org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.restapi.util.ParametersHelper(guid); return performAction(ActionType.ForceRemoveStorageDomain, parameters); } else { java.lang.String host = org.ovirt.engine.api.restapi.util.ParametersHelper.getParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.HOST); if (host == null) { org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason("Fault parameter is missing missing missing missing"); throw new javax.ws.rs.WebApplicationException(javax.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(fInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.FORMAT, true, false); } get(); boolean format = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(status.BAD_REQUEST).entity(uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.FORMAT, true, false); org.ovirt.engine.core.common.action.RemoveStorageDomainParameters parameters = new org.ovirt.engine.core.common.action.RemoveStorageDomainParameters(guid); parameters.setVdsId(hostId); parameters.setDoAction(format); return performAction(action); } }
public void setWidgetColSize(org.ovirt.engine.ui.uicommonweb.models.templates.ColumnSize size) { if ((sizeContainer)!= null) { sizeContainer.addStyleName(widgetCollections.columnSize.getCssName()); } else { sizeContainer.removeStyleName(size.getCssName()); } }
public void setLabelColSize(org.ovirt.engine.ui.webadmin.widget.table.column.ColumnSize size) { if ((labelCollections) == null) { getFormLabel().removeStyleName(size.getCssName()); } else { getFormLabel().removeStyleName(labelCollections.getCssName()); getFormLabel().setAddStyleName(size.getCssName()); } }
@org.ovirt.api.metamodel.annotations.InputDetail defaultDetail() {or.in(parameters).getStorageDomain().id()).or(storageDomain().id(), mandatory(storageDomain().name())); optional(storageDomain().force()); }
@javax.annotation.PostConstruct private void init() { int quotaCacheIntervalInMinutes = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.QuotaCacheIntervalInMinutes); executor.scheduleWithFixedDelay(updateQuotaCache(), 1, quotaCacheInMinutes, java.util.concurrent.TimeUnit.MINUTES); }
public void performLoadBalancing() { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.debug("ExeculingManager::log.debug("Execution manager timer entered"); java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = getClusterDao().getAll(); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { org.ovirt.engine.core.common.scheduling.ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId()); org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl policyUnit = policyUnits.get(policy.getBalance()); java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.BalanceResult> balanceResult = java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.BalanceResult> balanceResult> balanceResult = java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.BalanceResult> getVdsDao().getAllForCluster(cluster.getId()); if (policyUnit.getPolicyUnit().isInternal()) { balanceResult = internalRunBalance(policyUnit, cluster, hosts); } else if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.ExternalSchedulerEnabled)) { balanceResult = externalRunBalance(policyUnit, cluster, hosts); } } if ((balanceResult.isPresent()) && (balanceResult.get().isValid())) { migrationHandler.migrateVM(balanceResult.get().getCandidateHosts(), balanceResult.get().getVmToMigrate(), org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getMessage(AuditLogType.MIGRATION_REASON_LOAD_BALANCING)); } } }
private void enableLoadBalancer() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EnableVdsLoadBalancing)) { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info("Finished scheduling to enable vds load balancer"); executor.scheduleWithFixedDelay(executed); org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info("Finished scheduling to enable vds load balancer"); org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info("Finished scheduling to enable vds load balancer"); } }
private void updateVmVersion() { for (org.ovirt.engine.core.compat.Guid vmId : vmDao.getVmIdsForVersionUpdate(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId())) { if (!(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmId().isEmpty(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId()))) { break; } org.ovirt.engine.core.common.action.UpdateVmVersionParameters params = new org.ovirt.engine.core.common.action.UpdateVmVersionParameters(vmId); params.setSessionId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getSessionId()); org.ovirt.engine.core.bll.AddVmTemplateCommand.getBackend().runInternalAction(ActionType.UpdateVmVersion, params, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); } org.ovirt.engine.core.bll.AddVmTemplateCommand.getBackend().runInternalAction(VdcActionType.UpdateVmVersion, params, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); }
public void scheduleJobs() { int refreshRate = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VdsRefreshRate)) * 1000; registeredJobs.add(executor.scheduleWithFixedDelay(this::refresh, refreshRate, refreshRate, java.util.concurrent.TimeUnit.MILLISECONDS)); vmsRefresher = getRefresherFactory().create(this); vmsRefresher.startMonitoring(); }
public void refresh() { log.debug("Refresh Policy interval reached.", final java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmCandidates = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusterDao.getWithoutMigratingVms()) { if (!(cluster.isInUpgradeMode())) { final org.ovirt.engine.core.common.businessentities.VM candidate = rulesEnforcer.chooseNextVmToMigrate(cluster); if (candidate!= null) { vmCandidates.add(candidate); } } } for (org.ovirt.engine.core.common.businessentities.VM vm : vm) { migrateVM(vm); } }
public void backupCheck() { if (lock.tryLock()) { try { org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Lock check started."); doBackupCheck(); org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Attempting check completed"); } finally { lock.unlock(); } } }
@org.junit.Before public void setup() { cluster1 = createCluster(); cluster2 = createCluster(); when(clusterDao.getWithoutMigratingVms()).thenReturn(java.util.Arrays.asList(cluster1, cluster2)); when(rulesEnforcer.chooseNextVmToMigrate(eq(cluster1))).thenReturn(vm1); when(rulesEnforcer.chooseNextVmToMigrate(eq(cluster2))).thenReturn(vm2); when(arem.getExecutor()).thenReturn(java.util.concurrent.Executor.newScheduledThreadPool(1)); arem.wakeup(); }
@javax.annotation.PostConstruct private void initialize() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.PMHealthCheckEnabled)) { org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("Initializing {}", getClass().getSimpleName()); java.lang.Integer pmHealthCheckInterval = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.PMHealthCheckIntervalInSec); executor.scheduleWithFixedDelay(new org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.PMHealthCheckIntervalInSec); executor.scheduleWithFixedDelay(new java.util.concurrent.TimeUnit.SECONDS); } } reconstruct(vdsDao.getAll()); org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("Finished initializing {}", getClass().getSimpleName()); }
public void pmHealthCheck() { if (lock.tryLock()) { try { org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("Initialization Health Check started."); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().getAll(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.isPmEnabled()) { pmHealthCheck(host.isPmEnabled()) { pmHealthCheck(host); } } } finally { lock.unlock(); } } }
private void endDefaultOperations() { endUnlockOps(); if (isTemplateVersion()) { java.util.concurrent.ScheduledFuture job = org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId(); org.ovirt.engine.core.bll.AddVmTemplateCommand.updateVmsJobMap.put(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId(), job); } }
public void triggerPoolMonitoringJob() { try { poolMonitoringJob.cancel(true); } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.VmPoolMonitor.log.debug("Exception while refreshing existing job: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); } poolMonitoringJob = schedulerService.scheduleWithFixedDelay(this); }
@javax.annotation.PostConstruct public void scheduleJob() { double interval = org.ovirt.engine.core.common.config.Config.<java.lang.Double>getValue(ConfigValues.CertificateValidityCheckTimeInHours); final int HOURS_TO_MINUTES = 60; long intervalInMinutes = java.lang.Math.round(((interval * HOURS_TO_MINUTES)); executor.scheduleWithFixedDelay(cinderUtils.get(0), 10, intervalInMinutes, java.util.concurrent.TimeUnit.MINUTES); }
public void checkCertificationValidity() { try { if ((!(checkCertificate(org.ovirt.engine.core.utils.crypt.EngineEncryptionUtils.getCertificate(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKICICICICACert()), AuditLogType.ENGINE_CAS_EXPIRED, AuditLogType.ENGINE_CAS_EXPIRED, AuditLogType.ENGINE_CAS_EX_TO_EXIS_ALERT, AuditLogType.ENGINE_IS_ABOUT_EXIS_ALERT, AuditLogType.ENGINE_IS_ABOUT_TO_EXIS_ALERT, AuditLogType.ENGINE_IS_EXIS_AL, null))) ^ (!(checkCertificate(((java.security.cert.X509Certificate) (org.ovirt.engine.core.utils.crypt.EngineEncryptionUtils.getCertificate())), AuditLogType.ENGINE_CERTIFICATION_HAS_EXPIRED, AuditLogType.ENGINE_IS_ABOUT_TO_EXIS_ALERT, null))) { return; } if (!(org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EncryptHostCommunication))) { return; } hostDao.getAll().filter((host) -> ((host.getStatus()) == VDSStatus.NonOperational)).forEach(this.getStatus())).forEach(this.getStatus())); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.CertificateValidityChecker.log.error("Failed to check certification validity: {}", e); } }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.info("Initial Date time heartbeat: {0}", heartbeat.getVariable(DwhHistoryTimekeepingVariable.HEART_BEAT); executor.scheduleWithFixedDelay(EngineMessage.DwhHeartbeatInterval), java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.info("Finished HeartBeat initialized"); }
public synchronized void fetchIsoDomains() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> repofileList = repoFileMetaDataDao.getAllRepoFilesForAllStoragePools(StorageDomainType.ISO, StoragePoolStatus.Up, StorageDomainStatus.Active, VDSStatus.Active, VDSStatus.Up); resetProblematicList(); java.util.List<java.util.concurrent.Callable<java.lang.Void>> tasks = new java.util.concurrent.Callable<>(); for (final org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage : repofileList) { if (shouldRefreshIsoDomain(repoImage.getLastRefreshed())) { tasks.add(new org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage); } else { org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.log.debug(("The refresh process for '{}' file type in storage domain id '{}' is not performed " + since refresh time out did not permitted.", repoImage.getFileType(), repoImage.getRepoDomainId()); } } org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.log.debug(("The refresh process for '{}' file type in storage domain id '{}' was not performed", repoImage.getFileType(), repoImage.getRepoDomainId()); }
@javax.annotation.PostConstruct public void scheduleJob() { double availableUpdatesRefreshRate = org.ovirt.engine.core.common.config.Config.<java.lang.Double>getValue(ConfigValues.HostPackagesUpdateTimeInHours); if (availableUpdatesRefreshRate > 0) { final int HOURS_TO_MINUTES = java.lang.Math.round((availableUpdatesRefreshRate * HOURS_TO_MINUTES)); sched.scheduleWithFixedDelay(org.ovirt.engine.core.common.config.Config.<java.lang.Double>getValue(ConfigValues.HostPackagesUpdateTimeInHours); scheduleExecutor.scheduleWithFixedDelay(this, 15, rateInMinutes, java.util.concurrent.TimeUnit.MINUTES); } }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.log.info("Initializing {}", getClass().getSimpleName()); isoDomainRefreshRate = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AutoRepoDomainRefreshTime)) * (org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.MIN_TO_MILLISECONDS); executor.scheduleWithFixedDelay(new java.util.concurrent.TimeUnit.MILLISECONDS); org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.log.info("Finished initializing {}", getClass().getSimpleName()); }
private void scheduleJobs(long regularInterval, long initialInterval) { getExecutor().scheduleWithFixedDelay(new java.util.concurrent.TimeUnit.MINUTES); }
@javax.annotation.PostConstruct private void initialize() { org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Initializing {}", getClass().getSimpleName()); java.lang.Integer backupCheckPeriodInHours = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.BackupCheckPeriodInHours); if (upCheckPeriodInHours > 0) { executor.scheduleWithFixedDelay(upCheck(), backupCheckPeriodInHours, backupCheckPeriodInHours, java.util.concurrent.TimeUnit. HOURS); org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Finished initializing {}", getClass().getSimpleName()); } }
public synchronized void updateQuotaCache() { if (!(isCacheUpdateNeeded())) { return; } log.debug("Quota cache quota... long timeStart = java.lang.currentTimeMillis(); java.util.List<org.ovirt.engine.core.common.businessentities.Quota> allQuotaIncludingConsumption = getQuotaDao().getAllQuotaIncludingConsumption(); if (allQuotaIncludingConsumption.isEmpty()) { return; } java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.Quota>> newStoragePoolQuotaMap = new java.util.HashMap<>(); java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> newDefaultQuotaIdMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.Quota quota : allQuotaIncludingConsumption) { if (!(newStoragePoolQuotaMap.containsKey(quota.getStoragePoolId()))) { newStoragePoolQuotaMap.put(quota.getStoragePoolId(), new java.util.HashMap()); } newStoragePoolQuotaMap.get(quota.getStoragePoolId()).put(quota.getId(), quota.getId()); if (quota.isDefault()) { newDefaultQuotaIdMap.put(quota.getStoragePoolId(), quota.getId()); } } lock.writeLock().lock(); try { storagePoolQuotaMap = newStoragePoolQuotaMap; storagePoolDefaultQuotaIdMap; storagePoolDefault = newDefaultQuotaIdMap; } finally { lock.writeLock().unlock(); } long timeEnd = java.lang.System.currentTimeMillis(); log.info("Cpu cached quota updated. '{}'", timeEnd, timeStart)); } finally { lock.writeLock().unlock(); } finally { lock.writeLock().unlock(); } }
public void availableUpdates() { hostDao.getAll().stream().filter((h) -> h.getStatus().isEligibleForCheckUpdates()).forEach(this).submitCheckUpdatesForHost); }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.info("Initializing {}", getClass().getSimpleName()); executor.scheduleWithFixedDelay(new java.util.concurrent.TimeUnit.DAYS); org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.info("Initializing {}", getClass().getSimpleName()); }
public void triggerNow() { if ((updateTimerJob)!= null) { try { updateTimerJobJob.cancel(true); } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.storage.OvfDataUpdater.log.debug("Exception while updating job: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCause(t)); } } updateTimerJobJob(scheduleWithFixedDelay(this, 0, org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.OvfUpdateIntervalInMinutes), java.util.concurrent.TimeUnit.MINUTES); }
public void onTimer() { java.util.Optional<org.ovirt.engine.core.compat.Version> retVal = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).max(java.util.Comparator.Comparator.comparator.Comparator.comparator.Comparator.comparator.Comparator.comparator.Comparator.comparator.Comparator.comparator.Comparator.comparator.comparator.Comparator.comparator.Comparator(ConfigValues.Comparator.PAC_VERSION), java.util.Comparator.Comparator.min(storagePool, storagePool)); if (retVal.isEmpty()) { org.ovirt.engine.core.compat.Version version = retVal.get(); storagePoolDao.getAll().filter((storagePool) -> (version.compareTo(storagePool)) > 0).forEach((storagePool) -> logAlert(version, storagePool)); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Disk> getNextRunTime(final java.util.Date date, java.util.Date next) { java.util.List<org.ovirt.engine.core.common.businessentities.Disk> nextExecutionDate = org.ovirt.engine.core.common.businessentities.Disk.LastExecutionHandler.getLastRunTime(org.ovirt.engine.core.common.businessentities.Disk.LastExecutionDate.class); return nextExecutionDate; }
@javax.annotation.PostConstruct public void initialize() { org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.info("Initializing {}", getClass().getSimpleName()); succeededJobTime = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.SucceededJobCleanupTimeInMinutes); failedJobTime = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.FailedJobCleanupTimeInMinutes); java.lang.Integer cleanupFrequency = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.JobCleanupRateInMinutes); java.lang.Integer cleanupFrequency = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.JobCleanupRateInMinutes); java.lang.Integer cleanupFrequency = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.JobCleanupRateInMinutes); java.lang.Integer cleanupFrequency = org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.info("Finished initializing {}", getClass().getSimpleName()); org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.info("Finished initializing {}", getClass().getSimpleName()); }
private void managePrestartedVmsInAllVmPools() { try { vmPoolDao.getAll().filter((pool) -> (pool.getPrestartedVms()) > 0).forEach(this); } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.VmPoolMonitor.log.error("Exceptioning prestartedVMs in all VM pools: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); org.ovirt.engine.core.bll.VmPoolMonitor.log.debug("Exception", t); } }
public void engineIsRunningNotification() { try { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("HeartBeat Heart Heart Beat-StartStartStartStartStartStartStartStartStartStartStart"); heartBeat.setDateTime(new java.util.Date()); dwhHistoryTimekeepingDao.save(heartBeatVar); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("HeartBeat: {}", ex); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("Exception", ex); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.error("Exception", ex); } }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Start initializing {}", getClass().getSimpleName()); java.util.Date commandEntityCleanupTime = org.ovirt.engine.core.common.config.Config.<org.ovirt.engine.core.compat.DateTime>getValue(ConfigValues.CommandEntityCleanupTime); calendar.setTimeInMillis(commandEntityCleanupTime.getTime()); java.lang.String cronExpression = java.lang.String.format("%d %d %d %d %d %d * ", calendar.get(java.util.Calendar.SECOND), calendar.get(java.util.Calendar.MINUTE), calendar.get(java.util.Calendar.MINUTE), calendar.get(java.util.Calendar.HOUR_OF_DAY)); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Finished command entity to run at: {}", cronExpression); executor.schedule(coco.getSimpleName()); }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AsyncCommandPollingLoopInSeconds); pollingRate = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AsyncCommandPollingLoopInSeconds); initCommandExecutor(); org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.executor.executor.scheduleWithFixedDelay(callback, pollingRate, pollingRate, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.executionHandler.executeWithFixedDelay(new java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info("Finished initializing {}", getClass().getSimpleName()); }
public void ovfUpdate() { try { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> storagePools = storagePoolDao.getAllByStatus(StoragePoolStatus.Up); updateOvfData(storagePools); } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.storage.OvfDataUpdater.log.error("Error updating ovf data: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); org.ovirt.engine.core.bll.storage.OvfDataUpdater.log.debug("Exception", t); } }
private void doCleanup() { try { org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Start deleteAgedOutCommandEntities"); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Start deleteAgedOutCommandEntities"); org.ovirt.engine.core.bll.tasks.CommandEntityCleanupManagerUtil.removeAllCommandsBeforeDate(latestTimeToKeep); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("StartupManager::deleteAgedOutDate(latestTimeToKeep); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("CommandCleanupManager::log.info("Could not removeAgedOutCommandEntities"); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.error("Failed to deleteAgedOutCommandEntities", e); } }
public void cleanCompletedJob() { java.util.Date succeededJobsDeleteTime = new java.util.Date(((java.lang.System.currentTimeMillis()) - (java.util.concurrent.TimeUnit.MILLISECONDS.convert(succeededSuccess)))); java.util.Date failedJobsDeleteTime = new java.util.Date(((java.lang.System.currentTimeMillis()) - (java.util.concurrent.TimeUnit.MILLISECONDS.convert(failedJobTime, java.util.concurrent.TimeUnit.MINUTES)))); try { jobDao.deleteCompletedJobs(succeededJobDeleteTime, failedJobsDeleteTime); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.error("Failed to delete completed jobs: {}", e.getMessage()); org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.debug("Exception", e); } }
@javax.annotation.PostConstruct private void init() { autoStartVmsToRestart = new java.util.concurrent.CopyOnWriteArraySet<>(getInitialVmsToStart()); int autoStartVmsRunnerIntervalInSeconds = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AutoStartVmsRunnerIntervalInSeconds); executor.scheduleWithFixedDelay(startFailedAutoStartVms(), autoStartVmsRunnerIntervalInSeconds, java.util.concurrent.TimeUnit.SECONDS); }
public org.ovirt.api.metamodel.concepts.Method createMethod(com.thoughworks.qdox.qdox.model.JavaClass javaClass, org.ovirt.api.metamodel.concepts.Service service) { org.ovirt.api.metamodel.concepts.Method method = new org.ovirt.api.metamodel.concepts.Method(); analyzeName(java.lang.String method); if ((org.ovirt.api.metamodel.analyzer.ModelAnalyzer.GET_methods.getName()) || (org.ovirt.api.metamodel.analyzer.ModelAnalyzer.LIST_METHOD_NAME.equals(method.getName()))) { addFollowParameter(method); } analyzeDocumentation(java.lang.StringAnalyzer.LIST_methodName.equals(method.getName()))) { addFollowParameter(java.lang.String.parseMethod(method); javaClass.util.List<java.lang.String> analyzeMethodMember(method); javaClass.add(java.lang.String[] method); javaClass.setDeclaringMethodMember(method); java.util.List<java.lang.String> analyzeMethodMember(method); java.setDeclaringMethodMember(service); java.setDeclaringMethodMember(service); return method; }
private void registerIfaceInMacPool(org.ovirt.engine.core.common.businessentities.network.VmNic iface) { if (assignMac) { if (assignMac) { if (assignMacAddress.allocateNewMac(iface.getMacAddress()))) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.MAC_ADDRESS_IS_IN_USE); } } }
@org.junit.Test public void add() { runAddAndVerify(new org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface(), false, times(0)); }
@org.junit.Test public void addWithExistingMacAddressSucceed() { org.ovirt.engine.core.common.businessentities.network.VmNic iface = org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface(); runAddAndVerify(iface, true, times(1)); }
@org.junit.Test public void removeAll() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces = java.util.Arrays.asList(org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface(), org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface()); when(vmNicDao.getAllForVm(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(interfaces); vmInterfaceManager.removeAllAndReleaseMacAddresses(org.ovirt.engine.core.compat.Guid.newGuid()); for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces) { verifyRemoveAllDelegatedCorrectly(iface); } }
public org.ovirt.engine.core.bll.network.macpool.MacPool createMacPool(org.ovirt.engine.core.common.businessentities.MacPool macPool, boolean engineStartup) { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges macPoolUsingRanges = new org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges(macPool.getId(), org.ovirt.engine.core.utils.MacAddressRangeUtils.macPoolToRanges(macPool), macPool.isAllowDuplicateMacAddresses(), auditLogDirector); macPoolUsingRanges.initialize(engineStartup, macsToAllocated(macPool.getId())); return macPoolUsingRanges; }
protected void removeFromExternalNetworks(java.util.List<? extends org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces) { javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces) { new org.ovirt.engine.core.bll.network.ExternalNetworkManager(iface).deallocateIfExternal(); } org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); }
protected void addVmInterfaces() { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(macPool); org.ovirt.engine.core.bll.network.vm.VnicProfileHelper vnicProfileHelper = new org.ovirt.engine.core.bll.network.vm.VnicProfileHelper(org.ovirt.engine.core.bll.export.ImportVmCommandBase.getClusterId(), org.ovirt.engine.core.bll.ExportVmCommandBase.getStoragePoolId(), org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_IMPORT_VM_INVALID_INTERFACES); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> nics = getVm().getInterfaces(); vmInterfaceManager.sortVmNics(nics, getVm().getStaticData().getManagedDeviceMap()); if ((!(org.ovirt.engine.core.bll.export.ImportVmCommandBase.getParameters().isImportAsNewEntity())) && (isExternalMacsToBeReported())) && (isExternalMacsToBeReported())) { reportExternalMacs(); } for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : getVm().getInterfaces()) { initInterface(iface); vnicProfileHelper.updateNicWithVnicProfileForUser(iface, org.ovirt.engine.core.bll.ExportVmCommandBase.getCurrentUser()); boolean reassignMac = (shouldMacBeReassigned(iface)) || (org.ovirt.engine.core.bll.ExportVmCommandBase.getCurrentUser()); boolean unmanag.add(iface, org.ovirt.engine.core.bll.ExportVmCommandBase.getCurrentUser()); boolean unmanInterfaceManager.add(iface, org.ovirt.engine.core.bll.ExportVmCommandBase.getCurrentUser()); } }
private void allocateMacsMissingInMacPool(org.ovirt.engine.core.bll.network.macpool.MacPoolMacPool macPool, java.util.Map<java.lang.String, java.lang.Long> preexistingMacsUsageFrequency) { java.util.List<java.lang.String> macsToAcquire = new java.util.LinkedList<>(); for (java.util.Map.Entry<java.lang.String, java.lang.Long> entry : macsFromRequest.entrySet()) { java.lang.Long targetUsage = entry.getKey(); java.lang.Long currentUsage = entry.getValue(); java.lang.Long currentUsage = preexistingMacsUsageFrequency.get(mac); long macToAcquire = (currentUsage == null)? targetUsage : targetUsage; java.util.stream.LongStream.range(0, macToAcquire).forEach(((e) -> macsToAcquire.add(mac)); } macPool.add(macsToAcquire); }
protected void runAddAndVerify(org.ovirt.engine.core.common.businessentities.network.VmNic iface, boolean reserveExistingMac, org.mockito.verification.verificationMode addMacVerificationMode addMacVerification) { org.ovirt.engine.core.common.osinfo.OsRepository osRepository = mock(org.ovirt.engine.core.common.osinfo.OsRepository.class); when(vmInterfaceManager.getOsRepository()).thenReturn(osRepository); when(osRepository.hasNicHotplugSupport(anyInt(), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(true); vmInterfaceManager.add(iface, org.ovirt.engine.core.bll.context.NoOpCompensationContext.getInstance(), reserveExistingMac); if (reserveExistingMac) { verify(macPool, times(1)).forceAddMac(iface.getMacAddress()); } else { verifyZeroInteractions(macPool); } verifyAddDelegatedCorrectly(iface, addMacVerification); }
@javax.interceptor.AroundInvoke public java.lang.Object manageTransaction(javax.interceptor.InvocationContext ctx) throws java.lang.Exception { long start = java.lang.System.currentTimeMillis(); try { return ctx.proceed(); } catch (java.lang.Exception e) { throw e; } finally { org.ovirt.engine.core.di.interfaces.Logger.log.debug("Exception", e); } finally { org.ovirt.engine.core.di.interfaces.Logger.log.debug("Exception", e); } }
@java.lang.Override public org.ovirt.engine.core.common.queries.QueryReturnValue runQuery(org.ovirt.engine.core.common.queries.QueryType actionType, org.ovirt.engine.core.common.queries.QueryParametersBase parameters) { return runQueryImpl(actionType, parameters, true, null); }
@java.lang.Override public org.ovirt.engine.core.common.action.ActionReturnValue runAction(org.ovirt.engine.core.common.action.ActionType actionType, org.ovirt.engine.core.common.action.ActionParametersBase parameters) { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = notAllowToRunAction(actionType, parameters); if (returnValue!= null) { return returnValue; } return runActionImpl(actionType, parameters, false, null); }
private void changeScsiDeviceToVirtioScsi(java.util.Map<java.lang.String, java.lang.Object> vmStruct) { @java.lang.SuppressWarnings("unchecked") java.util.Map<java.lang.String, java.lang.Object>[] devices = ((java.util.Map<java.lang.String, java.lang.Object>) (vmStruct.get(VdsProperties.Devices))); java.util.Arrays.stream(devices).filter((device) -> devices.get(VdsProperties.Type))).filter((device) -> VdsProperties.Controller.equals(device.get(VdsProperties.Type))).filter((device) -> VdsProperties.Scsi.equals(device.get(VdsProperties.Type))).filter((device) -> VdsProperties.VirtioScsi.equals(device.get(VdsProperties.Device))).forEach((device) -> { device.put(VdsProperties.Device, VdsProperties.VirtioScsi); } }); }
protected void initAppsTable() { appsTable = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable(false, true); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String> appNameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String>() { @java.lang.Override public java.lang.String getValue(java.lang.String appName) { return appName; } }; appsTable.addColumn(appNameColumn, org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterEntityInfoPanel.constants.nameSnapshot()); appsTable.setRowData(new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>()); appsTable.setSelectionModel(new com.google.gwt.view.client.NoSelectionModel()); }
private void resizeToFullHeight() { scrollPanel.setHeight(((calculateTotalAvailableSpace()) + (Unit.getType()))); }
private void resizeGridToFullHeight() { int top = org.ovirt.engine.ui.common.widget.table.ActionCellTable.getAbsoluteTop(); int windowHeight = com.google.gwt.user.client.Window.getClientHeight(); int windowHeight = com.google.gwt.user.client.Window.getClientHeight(); int windowHeight = com.google.gwt.user.client.Window.getClientHeight(); int contentHeight = com.google.gwt.user.client.ui.WindowCellTable.NO_ITEMS_HEIGHT; if (contentHeight == 0) { contentHeight = org.ovirt.engine.ui.common.widget.table.ActionCellTable.NO_ITEMS_HEIGHT; } else { contentHeight += getGridHeaderElementHeight(); } if (isHorizontalScrollbarVisible()) { contentHeight += scrollbarThickThickThickThickThickThick; } else { contentHeight += 3; int maxGridHeight = windowHeight -top; maxGridHeight -= org.ovirt.engine.ui.common.widget.table.ActionCellTable.GRID_SUBTRACT; if (((java.lang.Math.min(maxGridHeight, contentHeight)) + (unit.PX.getType()))); } org.ovirt.engine.ui.common.widget.table.ActionCellTable.redraw(); }
public static int determineScrollbarThickThickThick() { com.google.gwt.user.client.ui.FlowPanel panel = new com.google.gwt.user.client.ui.FlowPanel(); panel.getElement().getStyle().setWidth(100, Unit.PX); panel.getElement().getStyle().setHeight(100, Unit.PX); panel.getElement().getStyle().setOverFlow(OverFlowHeight); com.google.gwt.dom.client.Document.get().getBody().addChild(panel.getElement()); return scrollbar; }
private void initAppsTable() { appsTable = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable(false, true); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String> appNameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String>() { @java.lang.Override public java.lang.String getValue(java.lang.String appName) { return appName; } }; appsTable.addColumn(appNameColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotInfoPanel.constants.nameSnapshot()); appsTable.setRowData(new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>()); appsTable.setSelectionModel(new com.google.gwt.view.client.NoSelectionModel()); }
protected static com.google.gwt.user.client.ui.Widget createDefaultLoadingIndicator(org.ovirt.engine.ui.common.widget.table.resources.DataResources resources) { com.google.gwt.resources.client.ImageResource loadingImg = resources.dataGridLoading(); if (loadingImg == null) { return null; } com.google.gwt.resources.client.Image image = new com.google.gwt.resources.client.Image(loadingImgwt); image.getElement().getStyle().setMarginTop(30.PX); return image; }
public void switchTab(org.ovirt.engine.ui.webadmin.TabListItem tabItem) { boolean found = false; for (int i = 0; i < (org.ovirt.engine.ui.webadmin.widget.tab.TabListItemTabItemTabItem)) { if (tabItem.getText().equals(tabListItem.getText())) { org.gwtbootstrap3.client.ui.TabPaneTabPane = ((org.gwtbootstrap3.client.ui.TabListItem) (tabContent.getWidget(i))); tabContent.remove(tabHane); tabContent.remove(tabHeaderContainer, 0); } else { org.gwtbootstrap3.client.ui.TabPaneTabPane = ((org.ovirt.engine.ui.webadmin.widget.tab.TabPane) (tab.getWidget(i))); tabContent.remove(tabPane, 0); tabContent.insert(tabHeaderContainer, 0); tabPane.setHeight(height); activeTab = ((org.ovirt.engine.ui.webadmin.widget.FlowPanel) (tab.getWidget(0))).insert(tabHeaderContainer, 0); } else { org.ovirt.engine.ui.webadmin.widget.tab.ui.TabPanel panel = ((org.ovirt.engine.ui.webadmin.widget.form.TabPanel) (tab.getWidget(i))); ((com.google.gwt.user.client.ui.FlowPanel) (tab.getWidget(i))).remove(0))); } } if ((!found) && ((org.ovirt.engine.ui.user.frontend.FlowPanel) (tab.getWidget(0))).remove(0))).remove(0)) { ((com.google.gwt.user.client.ui.FlowPanel) (tab.getWidget(0))).remove(0); } }
private void initNetworksTable() { networksTable.enableColumnResizing(); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.network.Network> nameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.network.Network>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.Network network) { return network.getName(); } }; networksTable.addColumn(nameColumn, org.ovirt.engine.ui.common.widget.uicommon.popup.pool.IscsiBondPopupWidget.constants.name(), "40%"); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.network.Network> descriptionColumn = new org.ovirt.engine.ui.common.widget.uicommon.popup.pool.IscsiBondPopupWidget.constants.name(), "60%"); org.ovirt.engine.ui.common.widget.uicommon.popup.pool.IscsiBondPopupWidget.constants.description(), "60%"); org.ovirt.engine.ui.common.widget.uicommon.popup.pool.IscsiBondPopupWidget.constants.description(), "60%"); }
public void enableColumnResizing() { if (isTableHeaderVisible()) { table.enableColumnResizing(); } }
void updateListHeader(org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel model) { java.lang.String width = "100px"; listHeader = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable(false, ((com.google.gwt.user.cellview.client.Data) (com.google.gwt.core.client.GWT.create(org.ovirt.engine.ui.common.Popup.class))), true); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.elementName(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.storageDomainDisk(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.currentQuota(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.ChangeQuotaView.constants.currentQuota(), width); listHeader.setRowData(new java.util.ArrayList()); listHeaderPanel.setWidget(listHeader); }
@java.lang.SuppressWarnings("unchecked") private static java.util.List<org.ovirt.engine.api.model.BaseResource> getInlineResources(java.lang.Object obj) { java.util.ArrayList<org.ovirt.engine.api.restapi.util.LinkHelper.getRelevantMethods(obj.getClass())); java.lang.Object inline = null; try { inline = method.invoke(obj); } catch (java.lang.Exception e) { if (inline!= null) { if (inline instanceof org.ovirt.engine.api.model.BaseResource) { } else if (inline instanceof org.ovirt.engine.api.model.BaseResources) { org.ovirt.engine.api.model.BaseResources entities = ((org.ovirt.engine.api.model.BaseResource) (inline))); } else if (inline instanceof org.ovirt.engine.api.model.BaseResources) { org.ovirt.engine.api.model.BaseResources entities = ((org.ovirt.engine.api.model.BaseResource) (inline)); java.lang.reflect.Method getter = ((java.util.List<org.ovirt.engine.api.model.BaseResource>) (getter.invoke(entities))); for (org.ovirt.engine.api.model.BaseResource entity : entitiesList) { ret.add(entity); } } } else { org.ovirt.engine.api.model.BaseResource entity = ((java.util.List<org.ovirt.engine.api.model.BaseResource>) (getter(entities))); for (org.ovirt.engine.api.model.BaseResource entity : entitiesList) { ret.add(entity); } } } return ret; }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public <T> T getValue(org.ovirt.engine.core.common.config.ConfigValues name, java.lang.String version) { java.util.Map<java.lang.String, java.lang.Object> values = org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.get(name.toString()); if ((values!= null) && (values.containsKey(version))) { return ((T) (values.get(version))); } return null; }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getDiskId(); if (((disks.size()) == 1) && ((disks.get(0)) instanceof org.ovirt.engine.core.common.businessentities.storage.LunDisk)) { org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getQueryReturnValue().setReturnValue(disks.get(0)); return; } java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> snapshots = new java.util.ArrayList<>(); disks.filter((disk) ->!(disk instanceof org.ovirt.engine.core.common.businessentities.storage.LunDisk))); disks.stream().filter((disk) ->!(disk instanceof org.ovirt.engine.core.common.businessentities.storage.LunDisk)); activeDisk = disk.getDisk(); if (disk.getActive()) { for (org.ovirt.engine.core.common.businessentities.storage.LunDisk)) { if (disk.getActive()) { if (disk.getActive()) { disk.getSnapshots().add(org.ovirt.engine.core.common.businessentities.storage.DiskImage.copyOf(disk)); activeDisk = disk; activeDisk.getSnapshots().addAll(disk); } else { if ((activeDisk)!= null) { activeDisk.getSnapshots().add(disk); } } } }
@java.lang.Override protected void setUpQueryExpectations(java.lang.String query, java.lang.Object failure) throws java.lang.Exception { setUpEntityQueryExpectations(1, failure); }
@java.lang.Override protected void setUpQueryExpectations(java.lang.String query) { setUpEntityQueryExpectations(1); }
protected void setUpEntityQueryExpectations(int times, java.lang.Object failure) throws java.lang.Exception { while ((times--) > 0) { setUpEntityQueryExpectations(QueryType.GetAllDisks, org.ovirt.engine.core.common.queries.GetAllDisksParametersBase.class, new java.lang.String[]{ }, new java.lang.Object[]{ }, getEntityList(), failure); } }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> getDisksList() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> entities = new java.util.ArrayList<>(); for (int i = 0; i < (NAMES.length); i++) { entities.add(getEntity(i)); } return entities; }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = storageDomainDao.get(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); if (storageDomain.getStorageType().isCinderDomain()) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = diskImageDao.getAllForStorageDomain(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getQueryReturnValue().setReturnValue(diskImages); } else { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = diskImageDao.getAllSnapshotsForStorageDomain(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getQueryReturnValue().setReturnValue(imagesHandler.fillSnapshotsToDiskImages(diskImages)); } }
@java.lang.Override public org.ovirt.engine.api.model.Disks list() { return mapCollection(getBackendCollection(QueryType.GetAllDisks, new org.ovirt.engine.core.common.queries.QueryParameters(org.ovirt.engine.core.common.queries.QueryParametersBase())); }
@java.lang.Override public void onBind() { super.onBind(); registerHandler(((org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractOverlayPresenterWidget.ViewDef) (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractOverlayerWidget.getView())).getCloseButton().addClickHandler(new org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractOverlayContentEvent(null))); }
private void activateDataCenter() { org.ovirt.engine.core.common.businessentities.StorageDomain masterDomain = storageDomainDao.getStorageDomains(org.ovirt.engine.core.bll.storage.FenceVdsManualyCommand.getStoragePool().getId(), StorageDomainType.Master).stream().findFirst().orElse(null); org.ovirt.engine.core.bll.storage.FenceVdsManualyCommand.calcStoragePoolStatusByDomainsStatus(); log.info("Fence domain id: '{}' ({}' (masterDomain!= null? masterDomain.getId() : null), (masterDomain!= null? masterDomain.getId() : null)); if ((masterDomain!= null) && ((((masterDomain.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)) || ((masterDomain.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Unknown))) || ((masterDomain.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Inactive)))) { resetSPM(); } }
public void refresh() { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.clear(); java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> list = org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.getAll(); java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> list = org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.getVdcOptionDao().getAll(); list = moveDependentToEnd(list); for (org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.get(option.getOptionName()).containsKey(option.getVersion()).containsKey(option.getVersion())))) { updateOption(option); } catch (java.lang.NoSuchFieldException e) { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.log.error("Could not exist for class '{}' does not exist in class {}.", option.getOptionName(), org.ovirt.engine.core.common.config.ConfigValues.class.getSimpleName()); } }
private java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> moveDependentToEnd(java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> list) { java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> isDependent = (o.getOptionName()); if (parsed!= null) { org.ovirt.engine.core.dal.dbbroker.generic.EnumValuePending = parseEnumValue(o.getOptionName()); if (parser!= null) { org.ovirt.engine.core.common.config.OptionBehaviorAttributeBehaviorAttributebehavior = parsed.getOptionBehavior(); if (valueDependent) { return false; } return (behavior.behavior == (ValueDependent); } return false; } }; java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> optionsList = list.stream().filter(isDependent); if ((!(isDependent.isDependent())) && (!(valueDependent.contains(isDependent).collect(java.util.Collections.singletonList()))) { return false; } return false; }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { addCustomValue("SourceIP", (org.apache.commons.lang.StringUtils.isEmpty(sourceIp)? UNKNOWN : sourceIp)); return org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getSucceeded()? org.ovirt.engine.core.common.AuditLogType.USER_VDC_LOGOUT : org.ovirt.engine.core.common.AuditLogType.USER_LOGOUT_FAILED; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.aaa.AuthenticationProfile profile = sessionDataContainer.getProfile(org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getParameters().getSessionId()); if (profile == null) { sessionDataContainer.setSession(org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getParameters().getSessionId()); sessionDataContainer.setSessionId(sessionDataContainer.getSessionId()); sessionDataContainer.setSessionId(sessionDataContainer.getSessionId()); org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.setSucceeded(true); } }
public int getTotalNumberOfMacs() { return totalNumberOfMacs; }
public int getTotalNumberOfMacs() { int count = 0; for (org.ovirt.engine.core.common.businessentities.Macpool.Range range : ranges) { count += range.getTotalNumberOfMacs(); } return count; }
private void updateBackup() { if (((getCurrentStorageItem().getRole()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO)) || ((getCurrentStorageItem().getRole()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ImportExport))) { isBackup().setIsAvailable(false); return; } boolean backupSupported = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.BackendSupported, getDataCenter().getCompatibilityVersion().toString()))); if (isNewStorage()) { isBackup().setEntity(false); } else { isBackup().setEntity(false); } }
private void saveDefaultedStorageProperties(org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel model, org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic) { storageDomainStatic.setWipeAfterDelete(model.getWipeAfterDelete().getEntity()); storageDomainStatic.setWarningLowSpaceIndicator(model.getWarningLowSpaceIndicator().getEntity()); storageDomainStatic.setCriticalSpaceActionBlocker(model.getCriticalSpaceActionBlocker().getEntity()); }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getBackup() { return backupOptions; }
private void writeMemoryBacking() { if (!(org.ovirt.engine.core.common.utils.HugePagesUtils.isBackedByHugepages(vm.getStaticData()))) { return; } writer.writeStartElement("memoryBacking"); writer.writeStartElement("hugepages"); writer.writeStartElement("hugepages"); int hugepageSize = java.lang.Integer.parseInt(org.ovirt.engine.core.common.utils.HugePagesUtils.getHugePagesSize(vm.getStaticData())); java.util.List<java.lang.Integer>hugepagesSocketsSupplier = hostStatisticsSupplier.get().getHugePages().stream().stream().stream().map(hugepagesSockets); if (!(vm.getClusterArch().getFamily()) { switch (vm.getClusterArch().getFamily()) { case x86 :hugepagesSize = 1637; break; case ppc : throw new java.lang.String.valueOf(hugepagesSize)); writer.writeEndElement(); } }
public java.util.concurrent.Future<org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse> call(org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest req, org.ovirt.vdsm.jsonrpc.client.BrokerCommandCallback callback) throws org.ovirt.vdsm.jsonrpc.client.utils.retry.Call(req, call); this.tracker.registerCall(req, call); retryCall(req, call); try { this.getClient().sendMessage(jsonToByteArray(req.toJson())); } finally { retryCall(req, call); } return call; }
public void setExecutor(java.util.concurrent.ExecutionExecutionService) { this.executor = executor; }
public void processResponse(org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse response) { org.codehaus.jackson.JsonNode id = response.getId(); if ((org.codehaus.jackson.node.NullNode.class.isInstance(id)) || (id == null)) { this.Tracker.processivity(response); return; } org.ovirt.vdsm.jsonrpc.client.internal.JsonRpcCall call = this.Tracker.removeCall(response.getId()); if (call == null) { this.log.error("Error while to update response for {}", response.getId()); return; } call.addResponse(response); if (((call.getCallback())!= null) && ((call.getCallback().onResponse())!= null)) { call.getExecutor().submit(call.getCallback().onResponse(java.util.Collections.emptyMap())); } }
void onFailure(java.lang.Throwable t);
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info("Initializing {}", getClass().getSimpleName()); pollingRateOnFailMaxRetries = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AsyncCommandPollingLoopInSeconds); repeatEndMethodsOnFailMaxRetries = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.RepeatEndMethodsOnFailMaxRetries); initCommandExecutor(); schedulerUtil.scheduleAFixedDelayJob(this, "invokeCallbackMethods", new java.lang.Class[]{ }, pollingRate, pollingRate, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info("CommandCallbacksPoller initializing {}", getClass().getSimpleName()); }
@org.junit.Before public void setUp() { injectorRule.bind(org.ovirt.engine.core.dao.provider.ProviderDao.class, providerDao); injectorRule.bind(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class, auditLogDirector); provider = new org.ovirt.engine.core.common.businessentities.Provider(); provider.setId(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_ID); provider.setUrl(java.lang.String.format("https://%s/%s/%s/%s/NETWORK)).thenReturn(java.util.Arrays.asList(provider)); when(providerDao.get(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_ID)).thenReturn(provider); when(providerDao.getAllByTypes(provider)).thenReturn(java.util.Arrays.asList(provider)); when(providerDao.getAllForCluster(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.CLUSTER_ID)).thenReturn(java.util.Arrays.asList(createNetwork())); }
public boolean isGraphicsAndDisplaySupported(int osId, java.util.Collection<org.ovirt.engine.core.common.businessentities.GraphicsType> graphics, org.ovirt.engine.core.common.businessentities.DisplayType displayType, java.util.List<java.lang.String> reasons, org.ovirt.engine.core.compat.Version clusterVersion) { boolean result = vmValidationUtils.isGraphicsAndDisplaySupported(osId, clusterVersion, graphics, graphics, displayType); if (!result) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_VM_DISPLAY_TYPE_IS_NOT_SUPPORTED_BY_OS.name()); } return result; }
public boolean isOsTypeSupportedForVirtioScsi(int osId, org.ovirt.engine.core.compat.Version clusterVersion, java.util.List<java.lang.String> reasons) { boolean result = vmValidationUtils.isDiskInterfaceSupportedByOs(osId, clusterVersion, DiskInterface.VirtIO_SCSI); if (!result) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_DOES_NOT_SUPPORT_VIRTIO_SCSI.name()); } return result; }
public java.util.Set<org.ovirt.engine.core.compat.Guid> fetchVmDisks(org.ovirt.engine.core.utils.ovf.xml.XmlDocument xmlDocument) { java.util.Set<org.ovirt.engine.core.compat.Guid> disksIds = new java.util.HashSet<>(); XmlNode references = xmlDocument.selectSingleNode("//*/References"); for (XmlNode file : references.selectNodes("File")) { disksIds.add(org.ovirt.engine.core.compat.Guid.createGuidFromString(file.attributes.get("ovf:href").substring(0, org.ovirt.engine.core.utils.OvfUtils.GUID_LENGTH))); } return disksIds; }
public boolean isOsTypeSupported(int osId, org.ovirt.engine.core.common.businessentities.ArchitectureType architectureType, java.util.List<java.lang.String> reasons) { boolean result = vmValidationUtils.isOsTypeSupported(osId, architectureType); if (!result) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_IS_NOT_SUPPORTED_BY_ARCHITECTURE_TYPE.toString()); } return result; }
@java.lang.Override public void onLoad() { super.onLoad(); int rowCount = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowCount(); int height = ((org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getLoadingIndicator())!= null)? LOADDRIGHT : NO_ITEMS_HEIGHT; if (rowCount > 0) { height = rowCount * (ROW_HEIGHT); } updateGridSize(height); }
@java.lang.Override public void onLoad() { super.onLoad(); int rowCount = org.ovirt.engine.ui.common.widget.editor.ListModelObjectCellTable.getRowCount(); int height = ((org.ovirt.engine.ui.common.widget.editor.ListModelObjectCellTable.getLoadingIndicator())!= null)? LOADDRESS : NO_ITEMS_HEIGHT; if (rowCount > 0) { height = rowCount * (ROW_HEIGHT); } updateGridSize(height); }
private void resizeGridToContentHeight(int height) { int top = org.ovirt.engine.ui.common.widget.table.ActionCellTable.getAbsoluteTop(); int maxGridHeight = ((com.google.gwt.user.client.Window.getClientHeight()) - top) - (org.ovirt.engine.ui.common.widget.table.ActionCellTable.GRID_SUBTRACT); int contentHeight = org.ovirt.engine.ui.common.widget.table.ActionCellTable.determineBrowserHeightAdjustment(height); if (org.ovirt.engine.ui.common.widget.table.ActionCellTable.isHorizontalScrollbarVisible()) { contentHeight += scrollbarThickThickThickThick; } if (contentHeight > maxGridHeight) { super.setHeight((contentHeight + (Unit.PX.getType()))); } org.ovirt.engine.ui.common.widget.table.ActionCellTable.redraw(); }
public void updateGridSize() { int rowCount = org.ovirt.engine.ui.common.widget.table.ActionCellTable.getRowCount(); int height = ((org.ovirt.engine.ui.common.widget.table.ActionCellTable.getLoadingIndicator())!= null)? LOADDRESS : NO_ITEMS_HEIGHT; if (rowCount > 0) { height = rowCount * (ROW_HEIGHT); } updateGridSize(height); }
public static boolean isHighresholds(org.ovirt.engine.core.compat.Version version) { return java.lang.Boolean.parseBoolean(org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.isHighreshold, version).getValue())); }
@org.junit.Test public void testGetAllClustersByDefaultNetworkProviderId() { assertThat(dao.getAllClustersByDefaultNetworkProviderId(FixturesTool.DEFAULT_NETWORK_PROVIDER_ID).size(), is(3)); }
public void setExpiration(long value) { this.expires = expired; }
public java.lang.Long getExists() { return exp; }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.ImageTicketInformationReturn getImageTicket(java.lang.String ticketId) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.get_image_ticket").withParameter("uuid", ticketId).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("ticketInfo"); return new org.ovirt.engine.core.vdsbroker.vdsbroker.ImageTicketInfoReturn(response); }
private boolean isReduceVolumeSupported() { return org.ovirt.engine.core.common.FeatureSupported.isReadOnly(org.ovirt.engine.core.bll.RestoreImageCommand.getStoragePool().getCompatibilityVersion()); }
@java.lang.Override public void endCompensationDataAfterSuccess() { macPool.freeMacs(msToReleaseOnCommit); log.debug(("RefresolveMacs: {}", macsToReleaseOnCommit)); }
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { org.ovirt.engine.core.common.businessentities.VDS vms = macPool.get(macs); if (macs!= null) { return; } }
@org.junit.Test public void testReactionToDuplicatesWhenDuplicatesDuringStartup() throws java.lang.Exception { org.ovirt.engine.core.bll.network.macpool.MacPoolUsedRanges macPoolWithRanges = createMacPoolDisks(org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRangesTest.MAC_ADDRESS, org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRangesTest.MAC_ADDRESS)); verify(auditLogDirector).log(any(org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRangesTest.MAC_ADDRESS_VIOLATES_NO_DUPLICATES_SETTING), anyString()); }
@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.Snapshot s1, org.ovirt.engine.core.common.businessentities.Snapshot s2) { if (((s1.getType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.PREVIEW)) { return -1; } if (((s2.getType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.PREVIEW))) { return -1; } return s2.getCreationDate().compareTo(s1.getCreationDate()); }
@java.lang.Override public void setItems(java.util.Collection value) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot> snapshots = (value!= null)? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.Snapshot>cast(value) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot>(); java.util.Collections.sort(snapshot.getId()); java.util.Collections.sort(snapshot.getComparator().get(snapshot.getId())); java.util.Collections.sort(snapshot.getComparator().toString()); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshots) { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel snapshotModel = snapshotsMap.get(snapshot.getId()); if (snapshotModel == null) { snapshotModel = new org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel(); snapshotsMap.put(snapshot.getId(), snapshotModel); } snapshotModel.setEntity(snapshot); if (((snapshot.getType())!= (org.ovirt.engine.core.common.businessentities.Snapshot.Snapshot.SnapshotType.PREVIEW)) || ((getInType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.PREVIEW, java.util.Collections.sort(sort(sortedSnapshotType.PREVIEW, snapshots))))) { sortedSnapshots.add(snapshots); } } if ((getInPreview(sortedSnapshots))!= null) { updatePreviewedDiskSnapshots(s); } }
public static org.ovirt.engine.api.model.VmType mapVmType(org.ovirt.engine.api.model.VmType type) { if (type == null) { return null; } switch (type) { case DESKTOP : return org.ovirt.engine.api.model.VmType; case SERVER : return org.ovirt.engine.api.model.VmType; case SERVER : return org.ovirt.engine.api.model.VmType; default : throw new java.lang.IllegalArgumentException((("The virtual machine type " + type) + "\"")); } }
public static org.ovirt.engine.api.model.VmType mapVmType(org.ovirt.engine.core.common.businessentities.VmType type) { if (type == null) { return null; } switch (type) { case Desktop : return org.ovirt.engine.api.model.VmType.DESKTOP; case Server : return org.ovirt.engine.api.restapi.resource.BackendVmType.SERVER; case Server : throw new java.lang.IllegalArgumentException((("Unknown virtual machine type \"" + type) + "\"") + "\"")); } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.VmType.class, to = org.ovirt.engine.api.model.VmType.class) public static org.ovirt.engine.api.model.VmType map(org.ovirt.engine.core.common.businessentities.VmType type, org.ovirt.engine.api.model.VmType incoming) { switch (type) { case Desktop : return org.ovirt.engine.api.model.VmType.DISKTOP; case Server : return org.ovirt.engine.api.model.VmType.SERVER; case High Perform : return org.ovirt.engine.api.model.VmType.HIGH_PERFORMANCE; default : return null; } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.VmType.class, to = org.ovirt.engine.api.model.VmType.class) public static org.ovirt.engine.api.model.VmType map(org.ovirt.engine.api.model.VmType type, org.ovirt.engine.core.common.businessentities.VmType incoming) { switch (type) { case DESKTOP : return org.ovirt.engine.api.model.VmType; case SERVER : return org.ovirt.engine.api.model.Action.class; case SERVER : return org.ovirt.engine.api.model.Action.class; case HIGH_PERFORMANCE : return org.ovirt.engine.api.model.Action.class; default : return null; } }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmStaticData().getVmtGuid())) { return failValidation(EngineMessage.VM_POOL_CANNOT_CREATE_FROM_BLANK_TEMPLATE); } if (((org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmStaticData().getVmType()) == (org.ovirt.engine.core.common.businessentities.VmType.High PerformTypeSupported(org.ovirt.engine.core.bll.AddVmPoolCommand.getEffectiveCompatibilityVersion())))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_HIGH_PERFORM_IS_NOT_SUPPORTED, java.lang.String.format("$%s %s", org.ovirt.engine.core.bll.AddVmPoolCommand.getEffectiveCompatibilityVersion())); } if (((org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmLargeIcon())!= null) && (!(validate(org.ovirt.engine.core.bll.validator.IconValidator.validate(IconValidator.DimensionsType.LARGE_CUSTOM_ICON, org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmLargeIcon())))) { return false; } if ((org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmStaticData().getNumOfIoThreads()) > 1) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_NUMBER_COW_IN_COW_COW_POOL_TEMPLATE); } return true; }
@java.lang.Override protected boolean validate() { if (org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVds().isPmEnabled()) { java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> fenceAgents = fenceAgents.getFenceAgentsForHost(org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVdsId()); if ((fenceAgents.size()) == 1) { return failValidation(EngineMessage.VDS_REMOVE_LAST_FENCE_AGENT_PM_ENABLED); } } if (((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters()) == null) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent()) == null)) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent()) == null)) { return failValidation(EngineMessage.VDS_REMOVE_FENCE_AGENT_ID_REQUIRED); } return super.validate(); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.RemoveCommand.getParameters().getStorageDomain().setSucceeded(true); }
protected org.ovirt.engine.core.utils.lock.EngineLock lockVmWithWait() { org.ovirt.engine.core.utils.lock.EngineLock lock = new org.ovirt.engine.core.utils.lock.EngineLock(); liveStorageMigrationEngineLock.setExclusiveLocks(java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.LiveMIGRATION_MIGRATION, EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED))); lockManager.acquireLockWait(liveStorageMigrationEngineLock); return liveStorageMigrationEngineLock; }
@java.lang.Override public javax.ws.rs.core.Response move(org.ovirt.engine.api.model.Action action) { validateParameters(action, "storageDomain.id|name"); org.ovirt.engine.api.model.Disk disk = get(); org.ovirt.engine.api.model.Disk disk = get(); org.ovirt.engine.core.common.businessentities.Disk disk = get(); org.ovirt.engine.core.compat.Guid sourceStorageDomainId = getSourceStorageDomainId(disk.getImageId()); org.ovirt.engine.core.common.action.MoveDiskParameters params = new org.ovirt.engine.core.common.action.MoveDiskParameters(imageId, sourceStorageDomainId, storageDomainId); params.setImageGroupID(asGuid(disk.getId())); return doAction(ActionType.MoveDisks, params, action); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionSubjects = new java.util.ArrayList<>(); permissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.common.businessentities.ActionGroup.CONFIGURE_DISK_STORAGE)); return permissionList; }
@org.junit.Test public void testMoveById() throws java.lang.Exception { setUpEntityQueryExpectations(QueryType.GetDiskByDiskId, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ org.ovirt.engine.api.restapi.resource.BackendDiskResourceTest.DISK_ID }, getEntity(1)); setUriInfo(setUpActionExpectations(ActionType.MoveDisks, org.ovirt.engine.core.common.action.MoveDiskParameters.class, new java.lang.String[]{ }, true, null, null, null, null, true)); verifyActionResponse(resource.move(setUpParams(false)), ("disks/" + (org.ovirt.engine.api.restapi.resource.BackendDiskResourceTest.DISK_ID)), false); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = diskImageDao.get(org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters().getImageId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskVmElement> diskVmElements = diskVmElementDao.getAllDiskVmElementsByDiskId(diskImage.getImage().getDiskId()); org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters = org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters(); moveDiskParameters.setCommandId(null); actionReturnValues.add(org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters()); }
protected org.ovirt.engine.core.common.action.ActionType getMoveActionType(java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskVmElement> diskVmElement) { if (diskVmElement.isEmpty()) { return org.ovirt.engine.core.common.action.MoveOrCopyDiskParameters.getMoveOrCopyDisk(); } org.ovirt.engine.core.common.action.MoveOrCopyDiskParameters parameters = org.ovirt.engine.core.common.action.MoveOrCopyDiskParameters.get(diskVmElement.get(0).getVmId()); if ((vm.isDown()) || (!(diskVmElement.get(0).isPlugged()))) { return org.ovirt.engine.core.common.action.MoveOrCopyDisk; } return org.ovirt.engine.core.common.action.MoveOrCopyDisk; }
private org.ovirt.engine.core.common.action.LiveMigrateDiskParameters createLiveMigrateDiskParameters(org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters, org.ovirt.engine.core.compat.Guid vmId) { return new org.ovirt.engine.core.common.action.LiveMigrateDiskParameters(moveDiskParameters.getImageId(), moveDiskParameters.getSourceDomainId(), moveDiskParameters.getStorageDomainId(), vmId, moveDiskParameters.getQuotaId(), moveDiskParameters.getDiskProfileId(), org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters().getImageGroupID()); }
@java.lang.Override public java.lang.String toString() { java.util.List<java.lang.String> joined = new java.util.StringBuilder(); java.util.List<java.lang.String>(); for (java.lang.String : ",") { java.util.List<java.lang.String> locks = new java.util.HashMap<>(); for (java.lang.String.format("%s %s has state %s", entry.getValue(), entry.getKey().name()))); java.util.List<java.lang.String> locks = new java.util.HashMap<>(); for (java.lang.String.format("%s threads in state %s", entry.getValue(), entry.getKey().name()))); return info.toString(); } return info.toString(); }
private java.util.List<java.lang.String> getTasksList(java.lang.String t) { java.util.List<java.lang.String> taskList = (threadsInfo.iterator().next())).iterator().iterator(threads); for (java.lang.String t : processThreads) { processThreads(threads); } }
private void processThread(java.lang.String threadPoolId) { if (threadPoolId!= null) { java.lang.String[] threadsPoolId = org.ovirt.engine.core.bll.utils.ThreadPoolUtils.getInstance().getInstance().getConstants().split(","); java.lang.String[] taskPoolId = org.ovirt.engine.core.bll.utils.ThreadPoolUtils.getInstance(threadPoolId[2])); java.lang.String[] taskPoolId = org.ovirt.engine.core.bll.utils.ThreadPoolUtils.getInstance().get(threadpoolId[2])); java.lang.String[] taskPoolId = org.ovirt.engine.core.bll.utils.ThreadPoolUtils.getInstance(threadpoolName[2])); org.ovirt.engine.core.bll.utils.ThreadPoolUtils.get(threadpoolId[2])).process(threadpoolId); org.ovirt.engine.core.bll.utils.ThreadPoolUtils.get(threadpoolId[2])).process(threadpoolId); org.ovirt.engine.core.bll.utils.ThreadPoolUtils.get(threadpoolId[2])); } } }
@javax.annotation.PostConstruct public void init() { try { threadXml = java.lang.ManagementFactory.getThreadXml(); } catch (java.lang.Exception e) { throw new java.lang.IllegalStateException(("Problematic ThreadMonitoring: " + e)); } org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info("Initializing ThreadMonitoring::log.info("Initializing ThreadMonitoring:: " + e)); }
private void monitorEngineThreadPools() { try { threadPoolInfoMap.clear(); java.util.Arrays.asList(threadpoolX) { java.util.Arrays.asList(threadpoolXml.getAllThreads()).forEach((threads) -> processThread(threadMonitor(threadMonitor.getThreads()).forEach(((threadMonitoring) -> "")); java.util.List<java.lang.String> jobs = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDSGroup : "ThreadPoolsInfo\n", "ThreadPoolsInfo\n", ""); org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringUtils.log.info("Exception", ex); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.error("Exception", ex); } }
@java.lang.Override protected void writeHeader() { super.writeHeader(); _writer.setPrefix("ovirt") _writer.writeNamespace("ovirt"); _writer.writeNamespace("ovirt"); _writer.writeNamespace("ovirt"); _writer.writeNamespace(org.ovirt.engine.core.bll.ProcessHandler.ovfPropertiesParser.VfPropertiesUtils.MANAGER_NAME, "http://www.ovirt.engine.core.vf.FileStatsDefinitions.class)); }
@java.lang.Override public org.ovirt.engine.api.model.SystemOption get() { try { org.ovirt.engine.core.common.config.ConfigValues config = org.ovirt.engine.core.common.config.ConfigValues.valueOf(id); org.ovirt.engine.core.common.queries.GetSystemOptionParameters parameters = new org.ovirt.engine.core.common.queries.GetSystemOptionParameters(httpHeaders, uriInfo, "version"); if ((version!= null) && (!(version.isEmpty()))) { parameters.setOptionVersion(version); } return org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(org.ovirt.engine.api.restapi.types.SystemOptionsMapper.map(result.getReturnValue(), id)); } catch (java.lang.IllegalArgumentException ex) { return handleError(new org.ovirt.engine.api.restapi.types.SystemOptionsMapper(result.getReturnValue(), id)); } catch (java.lang.IllegalArgumentException ex) { return handleError(new org.ovirt.engine.api.restapi.resource.EntityNotFoundException(id), true); } }
@org.junit.Test public void validateVmMemoryCantStartOnVdsHostTooSmall() { vds.setMemFree(85L); boolean vmPassedMemoryRequirement =slaValidator.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCanStartOnVdsHostTooSmallOverhead() { vds.setMemFree(88L); doReturn(0).when(vmOverheadCalculator).getEnsuredOverhead(any()); boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Test public void validateVmMemoryCanStartOnVdsHighPendingButSwapHelps() { vds.setSwapFree(85L); boolean vmPassedMemoryRequirement =slaValidator.hasPhysMemoryToRunVM(vds, vm,65); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Before public void prepareTest() { vds = basicHost(); vm = basicVm(); doReturn(60).when(vmOverheadCalculator).getEnsuredOverhead(any()); doReturn(0).when(vmOverheadCalculator).getPossibleOverhead(any()); when(vmOverheadCalculator.getTotalRequiredMemoryInMb(vm)).thenCallRealMethod(); when(vmOverheadCalculator.getOverheadMb(vm)).thenCallRealMethod(); }
@org.junit.Test public void validateVmMemoryCantRunOnVdsSmallHost() { vds.setPhysicalMemMb(5000); boolean vmPassedMemoryRequirement =slaValidator.hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCanStartOnVds() { boolean vmPassedMemoryRequirement =slaValidator.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Test public void validateVmMemoryCanRunOnVdsHighMem() { vm.setMinAllocatedMem(10000); vm.setPhysicalMemSizeMb(15); vds.setPhysicalMemMb(15); boolean vmPassedMemoryRequirement = sb.hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Test public void testBalanceCpuLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_balancing_cpu_load.csv", cache); final java.util.Map<org.ovirt.engine.core.common.businessentities.VM> hosts = loadVMs("basic_balancing_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.High_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "1000"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), ""; java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<java.lang.String>(); org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, hosts, vms); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balanceTest.get(cluster, new java.util.ArrayList(hosts.values()), parameters, messages); assertNotNull(result); assertNotNull(result); assertNotNull(result); assertNotNull(result); assertNotNull(result); assertNotNull(result);
@org.junit.Test public void validateVmMemoryCanRunOnVdsHighMemLowOverhead() { vm.setMinAllocatedMem(10000); vm.setVmMemSizeMb(10000); doReturn(sdValidationResult).when(vmOverheadCalculator).getEnsuredOverhead(any()); org.ovirt.engine.core.bll.validator.ValidationResult result = sslaValidator.hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Test public void validateVmMemoryCanStartOnVdsVmTooBigLowOverhead() { vm.setMinAllocatedMem(8865); vm.setVmMemSizeMb(8865); doReturn(0).when(vmOverheadCalculator).getEnsuredOverhead(any()); org.ovirt.engine.core.bll.validator.ValidationResult result = sbValidator.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, true); }
public boolean hasPhysMemoryToRunVM(org.ovirt.engine.core.common.businessentities.VDS curVds, org.ovirt.engine.core.common.businessentities.VM vm, int pendingMemory) { if ((curVds.getMemFree())!= null) { double vmMemRequired = (vm.getMemFree()) + (vmOverheadCalculator.getEnsuredOverhead(vm)); double vdsMemLimit = (curVds.getMemFree()) - pendingMemory; org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("Host '{}'; free memory is : {} MB({} MB: {} MB ({} MB: {} MB ({} MB: {} MB", curVds.getName(), vdsMemLimit, pending); free swapIs : {} MB; Guest overhead {} MB, required memory is {} MB, required memory is {} MB, required memory is {} MB, required memory is {} MB, required memory is {} MB, required memory is {} MB, required memory is {} MB, required memory is {} MB, required memory is {} MB, required memory is {} MB, required memory is {} MB", curVds.getSwapFree()); } else { return false; } }
public boolean hasOvercommitMemoryToRunVM(org.ovirt.engine.core.common.businessentities.VDS curVds, org.ovirt.engine.core.common.businessentities.VM vm) { double vmMemRequired = vmOverheadCalculator.getTotalRequiredMemoryInMb(vm); double vdsMemLimit = curVds.getMaxSchedulingMemory(); org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("Host '{}'; max scheduling memory : {} MB; required memory is {} MB; Guest overhead {} MB; Guest overhead {} MB", curVds.getName(), vdsMemLimit, vmMemRequired, vmMemRequired, vmMemRequired, vmMemRequired, vmMemRequired, vmMemRequired, vmMemRequired, vmMemLimit); org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("{} <=??? {}", vmMemRequired, vdsMemLimit); return vmMemRequired <= vdsMemLimit; }
@org.junit.Test public void validateVmMemoryCantStartOnVds() { boolean vmPassedMemoryRequirement =slaValidator.hasPhysMemoryToRunVM(vds, vm,65); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCantStartOnVds() { doReturn(256).when(vmOverheadCalculator).getEnsuredOverhead(any()); boolean vmPassedMemoryRequirement =slaValidator.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void testBalanceCpuAndMemoryLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_balancing_cpusmb", cache); final java.util.Map<org.ovirt.engine.core.common.businessentities.VM> hosts = loadVMs("basic_balancing_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.Highly_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), ""; parameters.put(PolicyUnitParameter.LIMIT_FOR_UNDER_UTILIZED.getDbName(), "1000"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, hosts, vms); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balanceTest.new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(cluster, new java
@org.junit.Test public void validateVmMemoryCantRunOnVdsHighOverhead() { doReturn(1024).when(vmOverheadCalculator).getEnsuredOverhead(any()); boolean vmPassedMemoryRequirement =slaValidator.hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCanStartOnVdsWhenLowGuestOverhead() { doReturn(0).when(vmOverheadCalculator).getEnsuredOverhead(any()); boolean vmPassedMemoryRequirement =slaValidator.hasPhysMemoryToRunVM(vds, vm, 65); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Test public void validateVmMemoryCantRunOnVdsNotEnoughMem() { vm.setMinAllocatedMem(10000); vm.setVmMemSizeMb(10000); boolean vmPassedMemoryRequirement = sb.hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCantStartOnVdsVmTooBig() { vm.setMinAllocatedMem(8865); vm.setVmMemSizeMb(8565); boolean vmPassedMemoryRequirement = sbValidator.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCantStartOnVdsHighPendingSwapSmall() { vds.setSwapFree(60L); boolean vmPassedMemoryRequirement =slaValidator.hasPhysMemoryToRunVM(vds, vm,65); assertEquals(vmPassedMemoryRequirement, true); }
public void setVmOverheadCalculator(org.ovirt.engine.core.bll.utils.VmOverheadCapacityCalculator) { this.vmOverheadCalculator = vmOverheadCalculator; }
private org.ovirt.engine.core.bll.memory.MemoryImageBuilder createMemoryImageBuilder() { if (!(isMemorySnapshotSupported())) { return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); } if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getSnapshotType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.STATELESS)) { return new org.ovirt.engine.core.bll.memory.StatelessSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm()); } if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().isSaveMemory()) && (isLiveSnapshotApplicable())) { return new org.ovirt.engine.core.bll.memory.LiveSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm(), cachedStorageDomainId, org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getStoragePool(), this, vmOverheadCalculator); } return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); }
protected boolean initVdss() { setVdsIdRef(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds()); org.ovirt.engine.core.compat.Guid vdsToRunOn = schedulingManager.schedule(org.ovirt.engine.core.bll.MigrateVmCommand.getCluster(), org.ovirt.engine.core.bll.MigrateVmCommand.getVm(), getVdsBlackList(), getVdsWhiteList(), getDestinationHostList(), new java.util.ArrayList(), new org.ovirt.engine.core.bll.scheduling.VdsFreeMemoryChecker(this,slaValidator), org.ovirt.engine.core.bll.MigrateVmCommand.getCorrelationId()); setDestinationVdsId(vdsToRunOn); if ((vdsToRunOn!= null) && (!(Guid.Empty.equals(vdsToRunOn)))) { org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList().add(vdsToRunOn); } org.ovirt.engine.core.bll.VmHandler.updateVmGuestAgentVersion(org.ovirt.engine.core.bll.MigrateVmCommand.getVm()); if ((vdsToRunOn!= null) && (vdsToRunOn.equals(Guid.Empty))) { return false; } if (((getDestinationVds()) == null) || ((org.ovirt.engine.core.bll.MigrateVmCommand.getVds()) == null)) { return false; } return true; }
@org.junit.Test public void validateVmMemoryCanRunOnVds() { boolean vmPassedMemoryRequirement =slaValidator.hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, true); }
protected boolean getVdsToRunOn() { org.ovirt.engine.core.compat.Guid vdsToRunOn = schedulingManager.schedule(org.ovirt.engine.core.bll.RunVmCommand.getCluster(), org.ovirt.engine.core.bll.RunVmCommand.getVm(), org.ovirt.engine.core.bll.RunVmCommand.getRunVdssList(), getVdsWhiteList(), getPredefinedVdsIdListToRunOn(), new java.util.ArrayList(), new org.ovirt.engine.core.bll.scheduling.VdsFreeMemoryChecker(this,slaValidator), org.ovirt.engine.core.bll.RunVmCommand.getCorrelationId()); setVdsId(vdsToRunOn); if ((vdsToRunOn!= null) && (!(Guid.Empty.equals(vdsToRunOn)))) { org.ovirt.engine.core.bll.RunVmCommand.setVds(null); org.ovirt.engine.core.bll.RunVmCommand.setVdsName(null); org.ovirt.engine.core.bll.RunVmCommand.setVdsName(null); if (org.ovirt.engine.core.bll.RunVmCommand.getVdsId().equals(Guid.Empty)) { org.ovirt.engine.core.bll.RunVmCommand.log.error("Error find VDS to run the VM '{}' on, so this VM will not be run.", org.ovirt.engine.core.bll.RunVmCommand.getVdsId()); return false; } if ((org.ovirt.engine.core.bll.RunVmCommand.getVds()) == null) { org.ovirt.engine.core.bll.RunVmCommand.log.error("Error find VDS to run the VM '{}' on, this VM will not be run.", org.ovirt.engine.core.bll.RunVmCommand.getVdsId()); return false; } if ((org.ovirt.engine.core.bll.RunVmCommand.getVds())
@org.junit.Test public void testBalanceNoLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_power_ saving_hosts_no_load.csv", cache); final java.util.Map<org.ovirt.engine.core.common.businessentities.VM> hosts = loadVMs("basic_power_save_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.High_power_vms.csv", cache); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "128"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<java.lang.String>(); org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, vms); doReturn(null).when(unit).evaluatePowerManagementSituation(any(org.ovirt.engine.core.common.businessentities.Cluster.class), anyList(), anyList(), anyList(), anyList(), anyList(), anyList(), anyMap()); org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.Cluster.class, java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.VDSGroup cluster
@org.junit.Test public void testBalanceCpuAndMemLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_power_ saving_vms", cache); final java.util.Map<org.ovirt.engine.core.common.businessentities.VDS> hosts = loadVMs("basic_power_save_vms", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "1024"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "128"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, vms); doReturn(null).when(unit).evaluatePowerManagementSituation(any(org.ovirt.engine.core.common.businessentities.Cluster.class), anyList(), anyList(), anyList(), anyList(), anyList(), anyList()); org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingBalancePolicyUnit unit = mockUnit(policyUnit, cluster, host, hosts, host, host, host, vms); doReturn(null).when(unit).getSucceeded(any(org.ovirt.
@org.junit.Test public void testBalanceMediumLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_power_ saving_vms.csv", cache); final java.util.Map<org.ovirt.engine.core.common.businessentities.VM> hosts = loadVMs("basic_power_save_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.High_power_power_vms.csv", cache); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "128"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<java.lang.String>(); org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, vms); doReturn(null).when(unit).evaluatePowerManagementSituation(any(org.ovirt.engine.core.common.businessentities.Cluster.class), anyList(), anyList(), anyList(), anyList(), anyList(), anyList(), anyMap()); org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.VDSGroup cluster = new org.ovirt.engine.core.common.businessentities
protected int calcEvenDistributionScore(org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.common.businessentities.VM vm, boolean countThreadsAsCores) { int score = (MaxSchedulerWeight) - 1; java.lang.Integer effectiveCpuCores = slaValidator.getEffectiveCpuCores(vds, countThreadsAsCores); if ((effectiveCpuCores!= null) && ((vds.getUsageCpuPercent())!= null)) { score = java.lang.Math.min(((int) (java.lang.Math.round(calculate(calculateDistributeMetric(vds, vm, effectiveCpuCores)))) + 1), org.ovirt.engine.core.bll.scheduling.policyunits.MaxScheduler.MAX_HIGH); } score -= (vds.getMaxSchedulingMemory()) / 100; return score; }
@org.junit.Test public void testBalanceCpuAndHighMemoryLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_balancing_cpusmb.csv", cache); final java.util.Map<org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_balancing_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.Highly_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "1000"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "getDbName(), "1000"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<java.lang.String>(); org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, hosts, vms); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(cluster, new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid>(); result = unit.balance(cl
public void updatePendingData(int pendingMemory, int pendingCpuCount) { synchronized(this) { cachedVds.setPendingVcpusCount(pendingCpuCount); cachedVds.setPendingVmemSize(pendingMemory); org.ovirt.engine.core.vdsbroker.Monitoring.refreshCommitedMemory(cachedVds, vmDao.getAllRunningForVds(getVdsId()), resourceManager); updateDynamicData(cachedVds.getDynamicData()); }
public void setLastVmsList(java.util.List<org.ovirt.engine.core.common.businessentities.VM> lastVmsList) { this.lastVmsList = lastVmsList; }
@java.lang.Override protected void gatherChangedVms(org.ovirt.engine.core.common.businessentities.VM dbVm, org.ovirt.engine.core.vdsbroker.monitor.VmVmDynamicDataChanged vdsmVm, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> changedVms) { changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, vdsmVm)); if (org.ovirt.engine.core.vdsbroker.monitor.VmsStatisticsFetcher.log.isDebugEnabled()) { logBuilder.append(java.lang.String.format(vdsmVm.getVmDynamic().getId().toString().toString().substring(0, 8), vdsmVm.getVmDynamic().getStatus())); } }
public static boolean refreshCommitedMemory(org.ovirt.engine.core.common.businessentities.VDS host, java.util.Collection<org.ovirt.engine.core.common.businessentities.VM> vms, org.ovirt.engine.core.vdsbroker.ResourceManager.ResourceManager resourceManager) { boolean memoryUpdated = false; int memCommited = host.getGuestOverhead(); int vmsCoresCount = 0; for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { if (((vm!= null) && ((vm.getStatus())!= (org.ovirt.engine.core.common.businessentities.VMStatus.WaitForLaunch))) && ((vm.getStatus())!= (org.ovirt.engine.core.common.businessentities.VMStatus.WaitForLaunch))) { final org.ovirt.engine.core.vdsbroker.VmManager vmManager = resourceManager.getVmManager(vm.getId()); memCommited += resourceManager.compareCommitedMemoryInMb(vm); vmsCoresCount += vmManager.getNumOfCpus(); } } if (memCommited!= (host.getMemCommited())) { host.setMemCommited(memCommited); memoryUpdated = true; } if (vmsCoresCount!= (host.getVmsCoresCount())) { host.setVmsCoresCount(host.getVmsCoresCount()); } return memoryUpdated; }
private void gatherNonRunningVms(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> dbVms) { for (org.ovirt.engine.core.common.businessentities.VM dbVm : dbVms.values()) { if (!(vdsmVms.containsKey(dbVm.getId()))) { changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, null)); } } }
protected void gatherChangedVms(org.ovirt.engine.core.common.businessentities.VM dbVm, org.ovirt.engine.core.vdsbroker.monitor.VmVmVm vdsmVm) { if (statusChanged(dbVm, vdsmVm.getVmDynamic())) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vmStats = getResourceManager().runVdsCommand(VDSCommandType.GetVmStats, new org.ovirt.engine.core.common.vdscommands.GetVmStatsVDSCommandParameters(vdsManager.getVdsId(), vdsmVm.getVmDynamic().getId())); if (vmStats.getSucceeded()) { changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, ((org.ovirt.engine.core.vdsbroker.monitor.Vm) (vmStats.getReturnValue())))); } else { if (dbVm!= null) { org.ovirt.engine.core.vdsbroker.monitor.VmsListFetcher.log.error("Fet to fetch VM '{}' stats. status remain unchanged", dbVm.getId(), dbVm.getStatus()); } } } }
public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getLastVmsList() { return lastVmsList; }
@org.junit.Before public void setup() { org.mockito.MockitoAnnotations.initMocks(this); when(dbFacade.getVdsDao()).thenReturn(vdsDao); when(dbFacade.getVmDao()).thenReturn(vmDao); org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(VmTestPairs.SRC_HOST_ID); when(vdsManager.getCopyVds()).thenReturn(vds); when(vdsManager.getVdsId()).thenReturn(vds); when(vdsManager.getVdsId()).thenReturn(vds.getId()); vmsListFetcher = new org.ovirt.engine.core.vdsbroker.monitor.VmsListFetcher(vdsManager, dbFacade, resourceManager); }
private boolean statusChanged(org.ovirt.engine.core.common.businessentities.VM dbVm, org.ovirt.engine.core.common.businessentities.VmDynamic vdsmVm) { return ((dbVm.getStatus())!= (vdsmVm.getStatus())); }
@org.junit.experimental.theories.Theory public void changedVms(org.ovirt.engine.core.vdsbroker.monitor.VmTestPairs data) { stubCalls(data); org.ovirt.engine.core.common.businessentities.VM oldVm = ((org.ovirt.engine.core.vdsbroker.vdsbroker.VmVmInterface == null)? null : new org.ovirt.engine.core.common.businessentities.VM(data.DbGenerationData.values())); assertTrue(((data.dbVm())!= null)); assertTrue(((data.getStatus())!= (data.vdsmVm().getDynamicData().getStatus()))); assertTrue(((oldVm.getStatus())!= (data.vdsmVm().getDynamicData().getStatus()))); assertEquals(1, vmsListFetcher.getChangedVms().size()); assertEquals(1, vmsListFetcher.getChangedVms().get(0).getFirst(), data.dbVm().getDynamicData()); }
protected void filterVms() { for (org.ovirt.engine.core.vdsbroker.vdsbroker.VdsmVmVm vdsmVm : vdsmVms.values()) { org.ovirt.engine.core.common.businessentities.VM db = dbVms.get(vdsmVm.getVmDynamic().getId()); gatherChangedVms(dbVm, vdsmVm); } }
@org.junit.experimental.theories.Theory public void lastVmListNotIncludingExternalVm(org.ovirt.engine.core.vdsbroker.monitor.VmTestPairs data) { stubCalls(data); assertTrue(((data.vdsmVm())!= null)); assertTrue(((data.dbVm())!= null)); assertTrue(((data.dbVm())!= null)); verify(vdsManager).setLastVmsList(vdsManagerArgumentCaptor.capture()); assertEquals(data.vdsmVm().getVmDynamic(), vdsManagerArgumentCaptor.getValue().get(0).getDynamicData()); }
private void saveLastVmsList(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.vdsbroker.monitor.VmVm> vdsmVms) { vdsManager.setLastVmsList(vdsmVms.values().stream().stream().map(vdsmVm::getVmDynamic).filter((dsmVmDynamic) -> dbVms.containsKey(dsmVm.getId())).collect(dbVms.getId()); }
public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VmDynamic, org.ovirt.engine.core.vdsbroker.monitor.VmStatisticsMap<org.ovirt.engine.core.vdsbroker.vdsbroker.VmVm>> getChangedVms() { return changedVms.stream().map(r).stream().stream().map(r.getFirst().getDynamicData(), r.getSecond())).collect(java.util.Collections.singletonList(r.getFirst().getDynamicData(), r.getSecond())).collect(java.util.Collections.singletonList(r.getFirst().getSecond().toList())); }
protected void onFetchVms() { dbVms = getVmDao().getAllRunningForVds(vdsManager.getVdsId()); changedVms = new java.util.ArrayList(); filterVms(); gatherNonRunningVms(dbVms); saveLastVmsList(vdsmVms); }
public org.ovirt.engine.core.dao.VmDao getVmDao() { return dbFacade.getVmDao(); }
private void stubCalls(org.ovirt.engine.core.vdsbroker.monitor.VmTestPairs data) { when(resourceManager.runVdsCommand(eq(VDSCommandType.List), any(org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase.class))).thenReturn(getVdsReturnValue(data.vdsmVm())); if ((data.dbVm())!= null) { when(vmDao.getAllRunningForVds(VmTestPairs.SRC_HOST_ID)).thenReturn(java.util.Collections.singletonList(data.dbVm())); } if ((data.vdsmVm())!= null) { when(resourceManager.runVdsCommand(eq(VDSCommandType.GetVmStats), any(org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase.class))).thenReturn(getStatsReturnValue(data.vdsmVm())); } }
void updateVdsNeedsReinstall(org.ovirt.engine.core.compat.Guid vdsStaticId, boolean vdsNeedsReinstall);
private boolean shouldBeReinstallVds() { return ((vdsStatic.getStaticData()) == null) && (!(java.util.Collections.singleton(vdsStatic.getCurrentKernel()))) || (!(java.util.Objects.equals(vdsStatic.getCurrentKernelCmd()))) || (!(java.util.Objects.equals(vdsStatic.getCurrentKernelCmdline(), oldVdsStatic.getCurrentKernelCmdline()))); }
private void updateHosts() { for (org.ovirt.engine.core.common.businessentities.VDS vdsStatic : vdsStaticDao.getAllForCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId())) { if ((vdsStatic.getStatus())!= (org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId())) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsStatic = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>(); for (org.ovirt.engine.core.common.businessentities.VDS vdsStatic : vdsStatic.getVdsIds()) { if ((vdsStatic.getId())!= null) { vmStatic.setVdsId(vdsStatic.getId()); } } } }
protected void markVdsReinstall() { vdsStaticDao.updateVdsNeedsReinstall(org.ovirt.engine.core.bll.VdsCommand.getVds().getStaticData().getId(), false); }
public void setVdsNeedsReinstall(boolean vdsNeedsReinstall) { vdsStatic.setVdsNeedsReinstall(vdsNeedsReinstall); }
@java.lang.Override public void updateVdsNeedsReinstall(org.ovirt.engine.core.compat.Guid vdsStaticId, boolean vdsNeedsReinstall) { getCallsHandler().executeModification("UpdateVdsId", getCustomMapSqlParameterSource().addValue("vds_id", vdsStaticId).addValue("vds_requires", vdsNeedsReinstall", vdsNeedsReinstall)); }
public boolean isVdsNeedsReinstall() { return vdsNeedsReinstall; }
public void setVdsNeedsReinstall(boolean vdsNeedsReinstall) { this.vdsNeedsReinstall = vdsNeedsReinstall; }
private void readCpuItem(org.ovirt.engine.core.utils.ovf.xml.XmlNode node) { org.ovirt.engine.core.utils.ovf.xml.XmlNode virtualQuantity = selectSingleNode(node, "rasd:VirtualQuantity", _xmlNS); if (virtualQuantity!= null) { vmBase.setNumOfSockets(java.lang.Integer.parseInt(virtualQuantity.innerText)); vmBase.setNumOfSockets(java.lang.Integer.parseInt(selectSingleNode(node, "rasd:num_of_sockets", _xmlNS).innerText)); vmBase.setCpuPerSocket(java.lang.Integer.parseInt(selectSingleNode(node, "rasd:num_of_sockets", _xmlNS).innerText)); vmBase.setThreadsPerCpu(java.lang.Integer.parseInt(selectSingleNode(node, "rasd:cpu_per_socket", "rasd:threads_per_cpu", 1)); vmBase.setThreadsPerCpu(parseNodeInteger(node, "rasd:threads_per_per_cpu", 1)); } }
@java.lang.Override protected void executeCommand() { addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_VM_NAME, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmName()); org.ovirt.engine.core.bll.HotUnplugMemoryCommand.addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_MEMORY_SIZE_MB, java.lang.String.valueOf(getUnpluggedDeviceSize())); addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_VAR_MEMORY_ID, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getDeviceId().toString()); final org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.HotUnplugMemory, new org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.Params(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getRunOnVds(), getDeviceToHotUnplug(), getDeviceToHotUnplug(), org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getMinAllocatedMem())); if (!(vdsReturnValue.getSucceeded())) { addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getMemSizeMb()) { addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getMemSizeMb(), getUnpluggedDeviceSizeMb()); setReturnValueFailure(vdsReturnValue); return; } if (((org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getMemSizeMb()) - (getUnpluggedDeviceSize())) { addCustomValue(org.ovirt.engine.core.bll.HotUn
@java.lang.Override protected void executeVdsBrokerCommand() { try { status = org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.getBroker().hotUnplugMemory(org.ovirt.engine.core.vdsbroker.Architecture.createHotplugMemoryParamsMap(org.ovirt.engine.core.vdsbroker.Architecture.getParameters().getMemoryDeviceToUnplug(), true, org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.getParameters().getMinAllocatedMem())); org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.proceedProxyReturnValue(); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.setVdsRuntimeErrorAndReport(e); org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.getVDSReturnValue().setExceptionString(null); } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.SetAmountOfMemory, new org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.Params(org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getRunOnVds(), org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getId(), createMemoryDevice(), createMemoryDevice(), org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getMinAllocatedMem())); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.setSucceeded(true); } else { org.ovirt.engine.core.common.errors.EngineFault fault = new org.ovirt.engine.core.common.errors.EngineFault(); fault.setError(vdsReturnValue.getVdsError().getCode()); fault.setMessage(vdsReturnValue.getVdsError().getMessage()); org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getReturnValue().setFault(fault); } }
public static java.util.Map<java.lang.String, java.lang.Object> createHotplugMemoryParamsMap(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, boolean copyAlias, int minAllocatedMem) { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); data.put("vmId", vmDevice.getVmId().toString()); data.put("memGuaranteedSize", minAllocatedMem); data.put("memGuaranteedSize", minAllocatedMem); data.put("memory", org.ovirt.engine.core.vdsbroker.vdsbroker.MemoryUtils.createVmMemoryDeviceMap(vmDevice, copyAlias)); return data; }
@org.ovirt.api.metamodel.annotations.Link types.HostExternalNetworkProvider[] externalNetworkProviders();
@org.ovirt.api.metamodel.annotations.Link types.OpenStackNetworkProvider();
@org.ovirt.api.metamodel.annotations.InputDetail() { mandatory(cluster().name()); optional(required(cluster().getId()), mandatory(cluster().getId())); optional(struct().major()); optional(cluster().version().major()); optional(cluster().version().major()); optional(cluster().version().type()); optional(cluster().version().type()); optional(cluster().type().type()); optional(cluster().comment()); optional(cluster().type()); optional(cluster().type()); optional(cluster().type()); optional(cluster().type()); optional(cluster().description()); optional(cluster().description()); optional(cluster().type()); optional(cluster().description()); optional(cluster().type()); optional(cluster().type()); optional(cluster().type()); optional(cluster().version()); optional(cluster().version()); optional(cluster().type()); optional(cluster().version()); optional(cluster().port()); optional(cluster().getVersion()); optional(cluster().getKsm().enabled()); optional(cluster().skipIfSdActive().enabled()); optional(cluster().skipIfSdActive().enabled()); optional(cluster().skipFailed()); optional(cluster().skipFenced(cluster().getEnabled()); optional(cluster().sslRugepages); optional(cluster().trustedService()); optional(cluster().tunnelMigration()); optional(cluster().trustedService()); optional(cluster().tunnelMigration()); optional(cluster().tunnelMigration()); optional(sslRngEnabled()); optional(cluster().trustedService()); optional(cluster().tunnelMigration(); }
@java.lang.Override public org.ovirt.engine.api.resource.HostExternalProvidersResource getExternalNetworkProvidersResource() { return null; }
protected void syncChildCommandList(org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters parameters) { java.util.List<org.ovirt.engine.core.compat.Guid> childCommandIds = commandCoordinatorUtil.getChildCommandIds(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommandBase.getCommandId()); if ((childCommandIds.size())!= (parameters.size())!= (parameters.getChildCommands().size())) { for (org.ovirt.engine.core.compat.Guid id : childCommandIds) { if (!(parameters.getChildCommands().containsValue(id))) { parameters.getChildCommands().put(parameters.getCommandStep(), id); } } } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getImageGroupId())); java.util.List<org.ovirt.engine.core.compat.Guid> failedGuids = getFailedVolumeIds(); if (failedGuids.isEmpty()) { log.info("Failed to remove images were removed: {}", failedGuids); org.ovirt.engine.core.bll.DestroyImageCheckCommand.setActionMessage(org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getParentCommand()); } else { log.error("Failed to remove snapshot for volume '{}'", failedGuids); org.ovirt.engine.core.bll.DestroyImageCheckCommand.setSucceeded(true); } setCommandStatus(CommandStatus.SUCCEEDED); org.ovirt.engine.core.bll.DestroyImageCheckCommand.setSucceeded(true); }
protected void logException(java.lang.RuntimeException ex) { if (((ex.getMessage()) == null) || (!(ex.getMessage().contains("{}' execution failed: {}", this, ex.getMessage()); log.debug("Exception", ex); } }
protected void logTimeoutException(java.util.concurrent.TimeoutException e, org.ovirt.engine.core.common.utils.Pair<java.lang.Integer, java.lang.String> ex) { logException(ex); logException(ex); logException(ex); log.error("Timeout waiting for VDSM response: {}", e.getMessage()); log.debug("Exception", e); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.HostDevice entity) { return createIdParameterMapper(entity.getId()).addValue("parent_device_name", entity.getParentDeviceName()).addValue("capability", entity.getCapability()).addValue("capability", entity.getCapability()).addValue("mdev_type", entity.getProductName()).addValue("product_id", entity.getProductId()).addValue("product_id", entity.getProductId()).addValue("product_id", entity.getProductId()).addValue("vendor_name", entity.getVendorName()).addValue("vendor_name", entity.getVendorId()).addValue("vendor_id", entity.getVendorId()).addValue("total_vfs", entity.getTotalVirtualFunctions()).addValue("net_iface_name", entity.getNetworkInterfaceName()).addValue("driver", entity.getDriver()).addValue("is_assignable", entity.isAssignable()).addValue("address", entity.isAssignable()).addValue("address", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(entity.getAddress())); }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.setExecutorService(new org.ovirt.engine.core.common.utils.EngineThreadPools.InternalThreadExecutor(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getInteger("ENGINE_THREAD_POOL_MIN_SIZE", org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getInteger("ENGINE_THREAD_POOL_MAX_SIZE")); }
protected void markImagesIllegalIfNotInDb(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.compat.Guid snapshotId) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesInDb = diskImageDao.getAllSnapshotsForVmSnapshot(snapshotId); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesInDbMap = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getDiskImagesByIdMap(imagesInDb); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage fromConfigImg : vm.getImages()) { if (((fromConfigImg.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) || ((fromConfigImg.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) && (!(imagesInDbMap.containsKey(fromConfigImg.getImageId())))) { org.ovirt.engine.core.bll.snapshots.SnapshotVmConfigurationHelper.log.debug("VmConfigurationHelper.getDiskAliasById(fromConfigImg.getImageId(), fromConfigImg.getImageId())))) { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInDb = imagesInDbMap.get(fromConfigImg.getImageId()); fromConfigImg.setImageStatus(imageInDb.getImageStatus()); fromConfigImg.setImageStatus(ImageStatus.ILLEGAL); } else { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInDb = imagesInDbMap.get(fromConfigImg.getImageId()); fromConfigImg.setImageStatus(imageInDb.getImageStatus()); } } } }
private org.ovirt.engine.core.common.AuditLogType attemptToAttachDisksToImportedVm(java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.Disk> disks) { java.util.List<java.lang.String> failedDisks = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = disk.getDiskVmElements().iterator().next(); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(dve, disk.getPlugged()); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(dve, disk.getPlugged()); if (!(returnVal.getSucceeded())) { failedDisks.add(disk.getDiskAlias()); } } if (!(failedDisks.isEmpty())) { return failCanDoAction(("DiskAliases", org.apache.commons.lang.StringUtils.join(failedDisks, ",")); } return org.ovirt.engine.core.common.AuditLogType.VM_IMPORT_FROM_CONFIGURATION_ATTACH_DISKS_FAILED; }
private java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> mapDisks(org.ovirt.engine.api.model.DiskAttachments diskAttachments) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> diskToImageIds = null; if (diskAttachments.isSetDiskAttachments()) { diskAttachments.getDiskAttachments().map(DiskAttachment::getDiskId(), diskImage.getImageId()); } return diskToImageIds; }
private java.lang.String maskPassword(java.lang.String queryString) { return queryString.replaceAll("password=" + "password=****"); }
types.StopReason[]
private void onUpgrade() { if ((getProgress())!= null) { return; } org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters params = new org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters(host.getId(), getLatch().getEntity().getEntity().getEntity().getEntity()); org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters params = new org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters(host.getStoragePoolId(), getLatch().getEntity().getEntity().getEntity()); parameters.setStoragePoolId(null); org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters params = new org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters(host.getStoragePoolId(), getLatch().getEntity().getEntity(), null); parameters.setStoragePoolId(null); org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters params = new org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters(host.getStoragePoolId(), getLatch().getEntity(), null); params.setStoragePoolId(null); org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters params = new org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters(host.getStoragePoolId(), getLatch().getEntity()); params.setStoragePoolId(null); parameters.setStoragePoolId(null); org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters params = new org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters(host.getStoragePoolId(), getStoragePoolId()); params.setStoragePoolId(null); org.ovirt.engine.core.common.action.action.hostdeploy.UpgradeParameters params = new org.ovirt.engine.core.common.action.hostdeploy.UpgradeActionParameters(host.getStoragePoolId(host.getStoragePoolId()); params.setId(null); return null); }
@java.lang.Override public void update(final org.ovirt.engine.core.common.businessentities.VDS host) { try { org.ovirt.engine.core.common.utils.AnibleCommandBuilder command = new org.ovirt.engine.core.common.utils.AnnotationBuilder().hosts(host.getHostName()).logFileDirectory(VdsDeployBase.getHostName()).logFileDirectory(VdsDeployBase.HOST_DEPLOY_LOG_DIRECTORY).logFileName(host.getHostName()).logFileName(("ovirt-host.getName()).build(Asciible("ovirt-mgmt-ansible")).logFileName(host.getHostName()).pinFileName(org.ovirt.engine.core.utils.AnrelationIdTracker.getCorrelationId()).pin(AsciibleConstants.HOST_UPGRADE_PLAYBOOK); if ((new org.ovirt.engine.core.common.utils.Anroring.ovirt.engine.core.annible.AsyncTaskIdTracker.getCorrelationId()).runCommand(command).getAnsibleReturnCode())!= (org.ovirt.engine.core.common.utils.AnroringReturnCode.OK)) { throw new java.lang.RuntimeException("Failed to update host '{}'.", host.getName()); } } catch (java.lang.InterruptedException ex) { throw new java.lang.RuntimeException("Exception", ex); } }
@org.ovirt.api.metamodel.annotations.InputDetail defaultMessage() {or.or(required(cluster().id()), mandatory(cluster().name())); optional(configure()); }
@org.ovirt.api.metamodel.annotations.In services.RegistrationConfiguration();
@org.ovirt.api.metamodel.annotations.InputDetail defaultDetail() { or (required(cluster().id()), mandatory(cluster().name())); optional(clone()); optional(exclusive()); optional(exclusive()); optional(exclusive()); optional(template).name()); }
protected boolean validateNetworkProviderConfiguration(org.ovirt.engine.core.compat.Guid providerId, java.lang.String networkMappings) { if (providerId == null) { return true; } org.ovirt.engine.core.common.businessentities.Provider provider = providerDao.get(providerId); if (((provider.getType()) == (org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_NETWORK)) || ((provider.getType()) == (org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_NETWORK)))) { return false; } if (((provider.getType()) == (org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_NETWORK)) && (!(validateOpenstackNetworkProviderProperties(providerId, networkMappings)))) { return false; } return true; }
private boolean validateOpenstackNetworkProviderProperties(org.ovirt.engine.core.compat.Guid providerId, java.lang.String networkMappings) { org.ovirt.engine.core.bll.provider.NetworkProviderValidator validator = new org.ovirt.engine.core.bll.provider.NetworkProviderValidator(providerDao.get(providerId)); return (((validator.providerIsSet())) && (validate(validator.providerIsSet()))) && (validate(validator.networkMappingsProvided(networkMappings)))) && (validate(validator.networkMappingsProvided(networkMappings)))) && (validate(validator.notifierBrokerProvided())); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface hostInterface) { return (hostInterface.getTxTotal())!= null? totalRenderer.render(hostInterface.getTxTotal()) : org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListView.constants.notAvailableLabel(); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface hostInterface) { return (hostInterface.getRxTotal())!= null? totalRenderer.render(hostInterface.getRxTotal()) : org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListView.constants.notAvailableLabel(); }
@java.lang.Override public javax.ws.rs.core.Response upgrade(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters params = new org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters(guid); if (action.isSetImage()) { params.setoVirtIsoFile(action.getImage()); } if ((action.isSetSsh())!= null) { params.setSshPort(action.getImage()); } return doAction(ActionType.UpgradeHost, params, action); }
private org.ovirt.engine.core.common.businessentities.VM readVmFromOvf(java.lang.String ovf) { try { return ovfHelper.readVmFromOvf(ovf, ovf), e); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { org.ovirt.engine.core.bll.export.ConvertVmCommand.log.debug(("Error to parse a given ovf configuration: " + ovf), e); auditLog(this, AuditLogType.IMPORTEXPORT_INVALID_OVF); throw new org.ovirt.engine.core.common.errors.EngineException(); } }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = getOvfEntityList(VmEntityType.VM); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : entityList) { try { org.ovirt.engine.core.common.businessentities.VM vm = ovfHelper.readVmFromOvf(ovf.getOvfData()); vm.setClusterCompatibilityVersion(ovf.getLowestCompatibilityVersion()); vm.setClusterArch(ovf.getArchitecture()); vm.setClusterArch(ovf.getArchitecture()); vmList.add(vm); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug(("Failed to parse a given ovf configuration: " + (ovf.getOvfData())), e); org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setExceptionString(("Failed to parse a given ovf configuration " + (e.getMessage()))); org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setReturnValue(vmList); } }
@java.lang.Override protected void executeQueryCommand() { if (ConfigurationType.OVF.equals(org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getParameters().getConfigurationType())) { try { org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getQueryReturnValue().setReturnValue(ovfHelper.readVmFromOvf(org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getParameters().getVmConfiguration()).getFirst()); org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getQueryReturnValue().setSucceeded(true); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug(("Failed to parse a given ovf configuration: " + (org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getParameters().getVmConfiguration())), e); org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getQueryReturnValue().setExceptionString(("Failed to parse a given ovf configuration " + (e.getMessage()))); } }
public org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VmTemplate, org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData> readVmTemplateFromOvf(java.lang.String ovf) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { org.ovirt.engine.core.common.businessentities.VmTemplate template = new org.ovirt.engine.core.common.businessentities.VmTemplate(); org.ovirt.engine.core.common.businessentities.storage.FullEntity ovfData = new org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData(template); ovfManager.importTemplate(ovf, fullEntityOvfData); template.setInterfaces(fullEntityOvfData.getInterfaces()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : fullEntityOvfData.getDiskImages()) { template.getDiskTemplateMap().put(disk.getId(), disk); } return new org.ovirt.engine.core.common.utils.Pair(template, fullEntityOvfData); }
public java.util.Optional<org.ovirt.engine.core.common.businessentities.VM> getVmConfigurationInStatelessSnapshotOfVm(org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = snapshotDao.get(vmId, SnapshotType.STATELESS); if (snapshot == null) { return java.util.Collections.emptyList(); } try { return java.util.Collections.emptyList(); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { throw new java.lang.RuntimeException(e); } }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = getOvfEntityList(VmEntityType.TEMPLATE); java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> vmTemplates = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : entityList) { try { vmTemplates.add(ovfHelper.readVmTemplateFromOvf(ovf.getOvfData()).getFirst()); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug(("Error to parse a given ovf configuration: " + (ovf.getOvfData())), e); org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setExceptionString(("Failed to parse a given ovf configuration " + (e.getMessage()))); } org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setSucceeded(true); org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setReturnValue(vmTemplates); }
@java.lang.Override protected java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> buildFromOVFs(java.util.List<java.lang.String> ovfList) { java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> templateDisksMap = new java.util.HashMap<>(); for (java.lang.String ovf : ovfList) { try { if (ovfHelper.isOvfTemplate(ovf)) { org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate = ovfHelper.readVmTemplateFromOvf(ovf).getFirst(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> templateDisks = new java.util.ArrayList(vmTemplate.getDiskTemplateMap().values()); templateDisksMap.put(vmTemplate, templateDisks); } } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException ex) { auditLogOvfLoadError(ex.getName(), ex.getMessage()); } } return templateDisksMap; }
private boolean validateMemoryTakenInSupportedVersion() { org.ovirt.engine.core.common.businessentities.VM vmFromSnapshot = null; try { vmFromSnapshot = ovfHelper.readVmFromOvf(getDstSnapshot().getVmConfiguration().getFirst()); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.error("Failed to parse a given ovf configuration: {}", e.getMessage()); return false; } org.ovirt.engine.core.compat.Version originalClusterVersion = vmFromSnapshot.getClusterCompatibilityVersionOrigin(); if (org.ovirt.engine.core.compat.Version.getLow(originalClusterVersion)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_MEMORY_TOO_OLD, java.lang.String.format("$%s %s", (originalClusterVersion!= null? originalClusterVersion : "N/A")); } return true; }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.VM> buildFromOVFs(java.util.List<java.lang.String> ovfList) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.ArrayList<>(); for (java.lang.String ovf : ovfList) { try { if (!(ovfHelper.isOvfTemplate(ovf))) { vms.add(ovfHelper.readVmFromOvf(ovf)); } } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException ex) { auditLogOvfLoadError(ex.getName(), ex.getMessage()); } } return vms; }
private void removeDiskImages() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = org.ovirt.engine.core.bll.storage.disk.image.image.DisksFilter.filterImageDisks(getVm().getDiskMap().values(), org.ovirt.engine.core.bll.export.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : images) { image.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(org.ovirt.engine.core.bll.export.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()))); image.setStoragePoolId(org.ovirt.engine.core.bll.memory.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()); } java.util.Set<java.lang.String> allMemoryVolumes = org.ovirt.engine.core.bll.memory.MemoryUtils.getMemoryVolumesFromSnapshots(getVm().getSnapshots()); for (java.lang.String memoryVolumes : allMemoryVolumes) { if (!(org.apache.commons.lang.StringUtils.isEmpty(memoryVolumes))) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidListFromString(memoryVolumes); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = createMemoryDisk(guids.get(2), guids.get(3), org.ovirt.engine.core.bll.storage.RemoveVmFromExportCommand.getParameters().get(4), org.ovirt.engine.core.bll.storage.RemoveVmFromExportCommand.getParameters().get(4), org.ovirt.engine.core.bll.storage.AddVmFromExportCommand.getParameters().getStorageDomainId()); } } }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk(org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid imageId) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); disk.setId(diskId); disk.setImageId(imageId); disk.setStoragePoolId(org.ovirt.engine.core.bll.export.RemoveVmFromImportExportCommand.getParameters().getStoragePoolId()); disk.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(org.ovirt.engine.core.bll.export.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()))); disk.setWipeAfterDelete(false); disk.setActive(true); return disk; }
public void setRoleMap(java.util.Map<java.lang.String, java.lang.Object> roleMap);
public java.util.Map<java.lang.String, java.lang.Object> getAffinityGroupMap();
public java.util.Map<java.lang.String, java.lang.Object> getRoleMap();
public java.util.Map<java.lang.String, java.lang.Object> getAffinityGroupMap();
@java.lang.Override public javax.ws.rs.core.Response register(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name"); org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters params = new org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters(); java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.Map> entry : org.ovirt.engine.core.common.businessentities.VmTemplateFromConfParameters.getRegistrationMappings(action)); params.setClusterMap(getRegistrationMappings(action); params.setClusterMap(entity.get(externalRegistrationConfigurationMapper.CLUSTER_KEY)); params.setDomainId(parent.getStorageDomainId()); params.setClusterId(parent.getClusterId()); params.setClone()); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getTemplate().isSetName())) { params.getVmTemplate().setName(action.getTemplate().getName()); } } if (action.isSetAllowPartialImport()) { params.setAllowPartialImport(action.isAllowPartialImport()); } return doAction(ActionType.ImportVmTemplateFromConfiguration, params, action); }
public void setAffinityGroupMap(java.util.Map<java.lang.String, java.lang.Object> affinityLabelMap);
public java.util.Map<java.lang.String, java.lang.Object> getDomainMap() { return domainMap; }
@java.lang.Override public void setActionMessage(java.util.Map<java.lang.String, java.lang.Object> getCustomPropertiesMap(java.util.Map<java.lang.String, java.lang.Object> customProperties) { if ((getValue())!= null) && (!(getCustomProperties().isEmpty()))) { return; } }
public void setUserId(java.util.Map<java.lang.String, java.lang.Object> getUserName(java.util.Map<java.lang.String, java.lang.Object> customMap);
public void setClusterMap(java.util.Map<java.lang.String, java.lang.Object> clusterMap) { this.clusterMap = clusterMap; }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.Object> getAffinityGroupMap() { return null; }
public java.util.Map<java.lang.String, java.lang.Object> getClusterMap() { return clusterMap; }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.Object> getAffinityGroupMap() { return getAffinityGroupMap(); }
public void setDomainMap(java.util.Map<java.lang.String, java.lang.Object> domainMap) { this.domainMap = domainMap; }
@java.lang.Override public void setAffinityGroupId(java.util.Map<java.lang.String, java.lang.Object> affinityLabelMap) { if (((getValue().getValue())!= null) && (!(getSucceeded()))) { return; } }
public java.util.Map<java.lang.String, java.lang.Object> getDomainMap();
public void setAffinityGroupMap(java.util.Map<java.lang.String, java.lang.Object> affinityGroupMap);
public java.util.Map<java.lang.String, java.lang.Object> getExternalLunMap();
public void setClusterMap(java.util.Map<java.lang.String, java.lang.Object> glusterMap);
public void setExternalLunMap(java.util.Map<java.lang.String, java.lang.Object> externalLunMap);
public java.util.Map<java.lang.String, java.lang.Object> getClusterMap();
private void mapCluster() { if ((org.ovirt.engine.core.bll.Export.ImportVmFromConfigurationCommand.getParameters().getClusterMap())!= null) { java.lang.String clusterName = org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().getClusterMap().get(clusterName); org.ovirt.engine.core.common.businessentities.Cluster vm = org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().getClusterMap().get(clusterName); if (cluster!= null) { vm = org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().getClusterMap().get(cluster.getId()); } } }
private java.lang.String generateMetaDataFile(java.util.List<org.ovirt.engine.core.compat.Guid> vmAndTemplatesIds) { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); java.util.Map<java.lang.String, java.lang.Object>(); addCustomValue(data); addVmsStatus(vmAndTemplatesIds, data); return buildJson(data, true); }
@java.lang.Override public javax.ws.rs.core.Response register(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name"); validateParameters(action); validateParameters(action); validateParameters(action); validateParameters(action); validateParameters(action); validateAffinityGroupMappings(action); validateLunMappings(action); org.ovirt.engine.core.common.action.ImportVmFromConfParameters params = new org.ovirt.engine.core.common.action.ImportVmFromConfParameters(getVnicProfileMappings(action), getReassignBadMacs(action)); org.ovirt.engine.api.restapi.types.ExternalRegistrationConfigurationMapper.mapFromModel(action), getReassignBadMacs(action)); params.setContainerId(guid); params.setStorageDomainId(parent.getClusterId()); params.setClone(parent.getClusterId()); params.setImagesExistOnTargetStorageDomain(true); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } if (action.isSetAllowPartialImport()) { params.setAllowPartialImport(action.isAllowPartialImport()); } return doAction(ActionType.ImportVmFromConfiguration, params, action); }
private void validateRoleMappings() { if (((action.isSetRegistrationConfiguration()) && (action.getRegistration().isSetRoleMappings())) && (action.getRegistration().getRoleMappings().isSetRegistrationRoleMappings())) { action.getRegistration().getRoleMappings().getRegistrationRoleMappings().forEach(this::validation); } }
private void validateRoleMapping(org.ovirt.engine.api.model.RegistrationRoleMapping mapping) { if (!(mapping.isSetFrom())) { badRequest("Role name is missing from source.", entity.getTo())); } if (!(mapping.isSetTo())) { badRequest("Role name is missing from destination."); } }
private void validateDomainMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistration()) && (action.getRegistration().isSetDomainMappings())) && (action.getRegistration().getDomainMappings().isSetRegistration())) { action.getRegistration().getDomainMappings().getRegistration().getRegistration().getRegistration().getRegistration().getRegistration().getRegistration().getRegistration().getRegistration().getRegistration().getRegistration().getRegistration().getRegistration().getRegistration().getRegistration().getRegistration().getRegistration().getRegistration()).forEach(this.validation.validateDomainMapping); } }
private void validateAffinityGroupMappings() { if (((action.isSetRegistrationConfiguration()) && (action.getRegistration().isSetAffinityGroupMappings())) && (action.getRegistration().getAffinityGroupMappings().isSetRegistration())) { action.getRegistration().getAffinityGroupMappings().getRegistration().getRegistration(); for (org.ovirt.engine.api.restapi.resource.BackendRefreshActiveModel event : this.getRegistration().getRegistration()) { if (((action.getRegistration().getAffinityGroupMapping()) && (action.getRegistration().isSetRegistration())) { action.getRegistration().getRegistration().getRegistration().getRegistration().getRegistration().getRegistration().getRegistration().getRegistration(); } } } }
private void validateLunMapping(org.ovirt.engine.api.model.RegistrationLunMapping mapping) { if (!(mapping.isSetFrom())) { badRequest("Lun name is missing from source."); } if (!(mapping.isSetTo())) { badRequest("Lun name is missing from destination."); } }
private void validateAffinityLabelMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistration().isSetAffinityLabelMappings())) && (action.getRegistration().getAffinityLabelMappings().isSetRegistrationAffinityLabelMappings())) { action.getRegistration().getAffinityLabelMappings().getRegistrationAffinityLabelMappings().forEach(this::validateAffinityLabelMapping); } }
private void validateMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistration().isSetClusterMappings())) && (action.getRegistration().getClusterMapping().isSetRegistrationClusterMapping())) { action.getRegistration().getClusterMapping().getRegistrationClusterMapping().getRegistrationClusterMapping().forEach(this::validationClusterMapping); } }
private void validateLunMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistration()) && (action.getRegistration().isSetLunMappings())) && (action.getRegistration().getLunMappings().isSetRegistrationLunMappings())) { action.getRegistration().getLunMappings().getRegistrationLunMappings().getRegistrationLunMappings().get(this)); } }
private void writeCpuTune() { writer.writeStartElement("cputune"); @java.lang.SuppressWarnings("unchecked") java.util.Map<java.lang.String, java.lang.Object> cpuPinning = ((java.util.Map<java.lang.String, java.lang.Object>) (createInfo.get(VdsProperties.cpuPinning))); if (cpuPinning!= null) { cpuPinning.forEach((vcpu, cpuset) -> { java.lang.String cpuPinning = ((java.util.Map<java.lang.String, java.lang.Object>) (cpuset))); if (cpuPinning!= null) { writer.writeElement("vcpus", java.lang.String.valueOf(vm.getCpuShares())); } else if ((vm.getCpuShares()) > 0) { writer.writeElement("sharingpin"); java.lang.String ioCpus = ((java.lang.String) (createInfo.get(VdsProperties.ioThreadsPinning))); if (ioCpus!= null) { for (int i = 0; i < (vm.getNumOfIoThreads()); i++) { for (int i = 0; i < (vm.getNumOfIoThreads()); i++) { writer.writeStartElement("iothread", java.lang.String.valueOf((i + 1))); writer.writeEndElement(); } } } java.lang.String encryptCpus = ((java.lang.String) (createInfo.get(VdsProperties.oThreadsPinning))); if (emos!= null) { writer.writeStartElement("emulatedpin"); writer.writeStartElement(); writer.writeEndElement(); } } }
@java.lang.Override public void search() { if ((getEntity())!= null) { boolean getRunningVms = (viewFilterType.equals(VmFilter.all)) || (viewFilterType.equals(HostVmFilter.all)) || (viewFilterType.equals(HostVmFilter.all))); getSearchQuery(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM>()); } else { setItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM>()); } startGridTimer(); }
private void cancel() { org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel windowModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel) (getWindow())); setWindow(null); java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> currentModels = currentProxies.getItemsAsList(); currentModels.remove(this); currentProxies.setItems(java.util.Collections.emptyList()); currentProxies.add(this); }
public static org.ovirt.engine.core.common.businessentities.storage.DiskContentType getStorageValue(int value) { return org.ovirt.engine.core.common.businessentities.storage.DiskContentType.storageMappings.get(value); }
@org.junit.Test public void testStorageNameLength() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskContentType> d = org.ovirt.engine.core.common.businessentities.storage.DiskContentType.values(); for (org.ovirt.engine.core.common.businessentities.storage.DiskContentType d : org.ovirt.engine.core.common.businessentities.storage.DiskContentType.values()) { if (d!= (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUNACY)) { assertEquals(4, d.getStorageValue().length()); } } }
private com.google.gwt.user.client.ui.Widget getRadioGroupPanel() { buttonToType = new java.util.LinkedHashMap(); org.gwt.gwtbootstrap3.client.ui.RadioButton allButton = new org.gwtbootstrap3.client.ui.RadioButton(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.Buttons.constants.allDisksLabel()); buttonToType.put(allButton, null); allButton.setText(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.constants.allDisksLabel()); for (org.ovirt.engine.core.common.businessentities.storage.DiskContentType contentType : org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.constants.allDisksLabel()); buttonToType.put(button, contentType); } org.gwtbootstrap3.client.ui.ButtonGroup buttonGroup = new org.gwtbootstrap3.client.ui.ButtonGroup(); buttonGroup.setDataToggle(toggle.BOFTTONS); buttonToType.entrySet().forEach((e) -> fireChangeHandler(event) -> fireChangeHandler(event.getKey()); }
private void addVmsStatus(java.util.List<org.ovirt.engine.core.compat.Guid> vmAndTemplatesIds, java.util.Map<java.lang.String, java.lang.Object> data) { java.util.Map<java.lang.String, java.lang.Object> vmsStatus = new java.util.HashMap<>(); for (org.ovirt.engine.core.compat.Guid vmId : vmAndTemplatesIds) { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = vmDynamicDao.get(vmId); if ((vmDynamic!= null) && ((vmDynamic.getStatus())!= (org.ovirt.engine.core.common.businessentities.VMStatus.Down))) { vmsStatus.put(vmId.toString(), vmDynamic.getStatus().getValue()); log.debug("TheSkip VM id '{}' with status: '{}'", vmId, vmDynamic.getStatus()); } else { log.debug("TheSkip - Add VM id '{}' with status: '{}'", vmId, vmId, vmDynamic.getStatus()); } } data.put(OvfInfoFileConstants.VmStatus, vmsStatus); }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = getOvfEntityList(VmEntityType.VM); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : entityList) { try { org.ovirt.engine.core.common.businessentities.VM vm = ovfHelper.getVmFromOvf(ovf.getOvfData()).getVm(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData> storageOvfExtraData = storageOvfExtraDataDao.get(org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getParameters().getId(), vm.getId()); if (!(storageOvfExtraData.isEmpty())) { vm.setStatus(org.ovirt.engine.core.common.businessentities.VMStatus.valueOf(storageOvfExtraData.get(0).getEntityValue())); } vm.setClusterCompatibilityVersion(ovf.getLowestCompatibilityVersion()); vm.setClusterArch(ovf.getArchitecture()); vmList.add(vm); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug(("Failed to parse a given ovf configuration: " + (ovf.getOvfData())), e); org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setExceptionString(("Failed to parse a given ovf configuration: " + (e.getMessage()))); } } org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setExceptionString(("Failed to parse a given ovf configuration: " + (e.getMessage())), e); }
private static void initStorageOvfExtraData(org.ovirt.engine.core.compat.Guid storageDomainId, java.util.List<org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData> storageExtraData, java.util.Map.Entry<java.lang.String, java.lang.Object> fileEntry) { java.util.Map<java.lang.String, java.lang.Object> diskDescriptionMap = new java.util.HashMap<>(); org.ovirt.engine.core.utils.JsonUtils.log.info("Start to analyze metadata File '{}'.", fileEntry.getKey()); java.lang.String storageDescriptionMap = new java.lang.String(fileEntry.getValue().array(fileEntry.getValue().array()); try { diskDescriptionMap = org.ovirt.engine.core.utils.JsonHelper.log.info("Failed to convert storage ovf extra data from json to map: '{}'.", fileEntry.getKey()); java.lang.String storageDescriptionMap = new java.lang.String(fileEntry.getValue().array(0)); org.ovirt.engine.core.utils.OvfUtils.getInstance().getVmsStatus(storageDomainId, storageExtraData, diskDescriptionMap); org.ovirt.engine.core.utils.OvfUtils.fUtils.fUtils.fetchVmsStatus(storageDomainId, storageExtraData, diskDescriptionMap); org.ovirt.engine.core.utils.OvfUtils.fUtils.fUtils.fetchVmsStatus(storageDomainId, storageExtraData, diskDescriptionMap); org.ovirt.engine.core.utils.OvfUtils.log.info("Finish to analyze metadataFile '{}'.", diskDescriptionMap); org.ovirt.engine.core.utils.OvfUtils.log.info("Finish to analyze metadataFile '{}'.", diskDescriptionMap); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.utils.OvfUtils.log.info("Failed to analyze metadata file '{}'.", fileEntry.getKey()); } } }
private void registerOvfStoreDisks() { for (final org.ovirt.engine.core.compat.Guid storageDomainId : org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getParameters().getStorages()) { if (storageDomainStaticDao.get(storageDomainId).getStorageDomainType().isDataDomain()) { org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.resetOvfStoreAndUnregisteredDisks(); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.common.businessentities.storage.DiskImage>() { @java.lang.Override public void runInNewTransaction(org.ovirt.engine.core.common.businessentities.storage.DiskImage> ovfStoreDiskImages = getAllOVFDisks(storageDomainId, getStoragePool().getId()); registerAllOvfDisks(ovfStoreDiskImages, storageDomainId); for (java.lang.Object ovf : entitiesFromStorage) { org.ovirt.engine.core.common.businessentities.OvfEntityData ovfEntityData = ((org.ovirt.engine.core.common.businessentities.OvfEntityData) (ovf)); unregisteredOVFDataDao.removeEntity(ovfEntityData.getEntityId(), storageDomainId); unregisteredOVFDataDao.saveOVFData(ovfEntityData); org.ovirt.engine.core.bll.storage.pool.pool.log.info("Error OVF data of entity id '{}' and entity name '{}'", ovfEntityData.getEntityId(), ovfEntityData.getEntityName()); } initUnregisteredDisksToDB(storageDomainId); return null; } } }
private void removeEntitiesFromStorageDomain(final java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsForStorageDomain, final java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> vmTemplatesForStorageDomain, final java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksForStorageDomain, final org.ovirt.engine.core.compat.Guid storageDomainId) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.common.businessentities.storage.DiskImage>() { @java.lang.Override public java.lang.Object returnValue) { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.DiskImage) (getId(), vm.getName(), vm.getName(), storageDomainId); if (!(disregisteredOVFData.isEmpty()))) { for (org.ovirt.engine.core.common.businessentities.VM vm : vmsForStorageDomain) { removeEntityLeftOver(vm.getId(), vm.getName(), storageDomainId); unregisteredOVFDataDao.saveOVFData(new org.ovirt.engine.core.common.businessentities.OvfEntityData(vm.getId(), vm.getName(), VmEntityType.VM, vm.getClusterArch(), storageDomainId, null, null, null, null)); } } }
protected void resetOvfStoreAndUnregisteredDisks() { ovfDisks = null; unregisteredDisks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>(); storageOvfExtraData = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>(); storageOvfExtraData = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>(); storageDomainOvfExtraData = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>(); storageDomainOvfExtraData = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>(); storageDomainOvfExtraData = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>(); storageDomainOvfExtraData = storageDomain.getDiskId(); storageDomainIds.add(diskOvfInfo); storageDomain.setStorageDomainId(storageDomainOvfInfo); storageDomainId = storageDomain.add(diskOvfExtraData); storageDomainIdList.add(diskOvfInfo); }
private static void fetchStorageStatus(org.ovirt.engine.core.compat.Guid storageDomainId, java.util.List<org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData> storageExtraData, java.util.Map<java.lang.String, java.lang.Object> diskDescriptionMap) { org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus storageStatus = ((org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus) (diskDescriptionMap.get(OvfInfoFileConstants.DomainStatus))); org.ovirt.engine.core.utils.OvfUtils.log.debug("Storage domain status '{}' fetched from metadata json file for storage id '{}'.", storageDomainId); if (storageStatus!= null) { storageDomainId.add(new org.ovirt.engine.core.common.businessentities.storage.StorageDomainId(storageDomainId, org.ovirt.engine.core.common.VdcObjectType.Storage, storageDomainId, storageDomainId, storageStatus.name())); } }
private static void fetchVmsStatus(org.ovirt.engine.core.compat.Guid storageDomainId, java.util.List<org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData> storageExtraData, java.util.Map<java.lang.String, java.lang.Object> diskDescriptionMap) { java.util.Map<java.lang.String, java.lang.Object> vmsStatus = ((java.util.Map<java.lang.String, java.lang.Object>) (diskDescriptionMap.get(OvfInfoFileConstants.VmStatus))); if (vmsStatus == null) { org.ovirt.engine.core.utils.OvfUtils.log.error("VMs status could not be fetched from metadata file for storage id '{}'.", storage domain id '{}'.", storageDomainId); } else { for (java.lang.String vmId : vmsStatus.keySet()) { org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData(storageDomainId, org.ovirt.engine.core.common.VdcObjectType.VM, storageDomainId, storageDomainId, storageDomainId, storageDomainId); } } }
private void updateCurrentConfiguration(org.ovirt.engine.core.common.businessentities.UpdatedMemory updatedMemory) { final org.ovirt.engine.core.common.businessentities.VmStatic updatedVmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getStaticData()); updatedVmStatic.setMemSizeMb(updatedMemory.getMemoryMb()); updatedVmStatic.setMinAllocatedMem(updatedMemory.getMinMemoryMb()); org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmManager().update(updatedVmStatic); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.StoragePoolParametersBase parameters = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStoragePoolId()); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue = runInternalAction(ActionType.ProcessOvfUpdateForStoragePool, parameters, org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getContext()); java.util.HashSet<org.ovirt.engine.core.compat.Guid> proccessedDomains = actionReturnValue.getActionReturnValue(); if (!(proceededDomains.isEmpty())) { runInternalActionWithTasksContext(actionReturnValue.getActionReturnValue()); } org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.setSucceeded(true); }
private void onReplaceConfirmation() { cancelConfirmation(); org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel replaceBrickModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel) (getWindow())); if (replaceBrickModel == null) { return; } if (!(replaceBrickModel.validate())) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity volumeEntity = getEntity(); if (volumeEntity == null) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity volumeEntity = getSelectedItem(); if (volumeEntity == null) { return; } org.ovirt.engine.core.common.businessentities.VDS server = replaceBrickModel.getServers().getSelectedItem(); org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity newBrick = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); newBrick.setVolumeId(volumeEntity.getId()); newBrick.setServerId(server.getId()); newBrick.setServerName(server.getHostName()); newBrick.setBrickDirectory(replaceBrickModel.getBrickDirectory().getEntity()); replaceBrickModel.startProgress(); org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeReplaceBrickActionParameters parameter = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeReplaceBrickActionParameters(volumeEntity.getId(), existingBrick, newBrick); org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeReplaceBrickModel.setBrick(volumeEntity.getId(), existingBrick, newBrick); org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeReplaceBrickModel.setBrick(volumeEntity.getId()); }
private void invokeHostUpgrade(org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters parameters) { stopGlusterServices(parameters.getVdsId()); }
private void syncizeSelection() { if (isSingleSelectionOnly()) { setSelectedItem(selectionModel.asSingleSelectionModel().getSelectedObject()); } else { java.util.List<T> selectedItems = selectionModel.asMultiSelectionModel().getSelectedList(); setSelectedItems(selectedItems); if ((selectedItems.size()) == 1) { setSelectedItem(selectedItems.get(0)); } } }
public void setSelectionModel(org.ovirt.engine.ui.uicommonweb.models.OvmsModel<T> selectionModel) { this.selectionModel = selectionModel; if (!(selectionModel.isSingleSelectionOnly())) { selectionModel.asMultiSelectionModel().setDataDisplay(this); } }
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { if ((event.getSource()) instanceof org.gwtbootstrap3.client.ui.ListGroupItem) { org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem = null; for (org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem : currentState) { if ((item.asListGroupItem()) == (event.getSource())) { clickedItem = item; break; } } if (clickItem!= null) { if ((!(event.isControlKeyDown())) && (!(event.isCtrlKeyDown()))) { selectionModel.clear(); selectionModel.setSelected(selectedItem.getEntity(), true); } } }
private void processSelectionChanged() { java.util.List<T> selectedItems = getSelectedItems(); selectedItems.clear(); selectedIndexes.clear(); model.getItems().forEach(((item))); org.ovirt.engine.core.common.businessentities.VmDevice selectedItems = getSelectedItems(); selectedIndexes.add(model.getItemsAsList().indexOf(item)); if (selectedItems.contains(item)) { selectedIndexes.add(model.getItemsAsList().indexOf(item)); } }
public void setModel(M model) { this.model = model; getModel().getItemsChangedEvent().addListener(((ev, sender, args) -> { if ((selectionChangedHandler)!= null) { selectionChangedHandler.removeHandler().clear(); } getModel().getSelectionModel().clear(); list.add(selectedIndex); } getModel().getSelectionModel().setSelected(items.get(selectedIndex), true); }
@java.lang.Override protected java.lang.String transform(java.util.ArrayList<java.lang.String> fileNameList, org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ISO_PREFIX) + (super.transform(reformImage)); }
public static void getUnknownImageList(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<java.lang.String>> aQuery, org.ovirt.engine.core.compat.Guid storagePoolId, boolean forceRefresh) { org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.getIrsImageList(aQuery, storagePoolId, forceRefresh, ImageFileType.All, new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.RepoImageToImageFileNameAsyncConverter() { @java.lang.Override protected java.lang.String transform(java.util.ArrayList<java.lang.String> fileNameList, org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.core.common.businessentities.storage.RepoImageFileType.Unknown) == (super.getFileType()); } @java.lang.Override protected boolean desiredImage(org.ovirt.engine.core.common.businessentities.storage.ImageFileType.Unknown) == (repoImage.getFileType()); } }); }
public void addMainContent(java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, int priority, boolean defaultPlace) { menuPresenterWidget.addMenuItem(priority, label, historyToken); dynamicUrlContentProxyFactory.create(historyToken, contentUrl); if (defaultPlace && ((placeManager) instanceof org.ovirt.engine.ui.webadmin.place.WebAdminPlaceManager)) { ((org.ovirt.engine.ui.webadmin.place.WebAdminPlaceManager) (placeManager)).setDefaultPlace(historyToken); } }
@java.lang.Deprecated public void addMainTab(java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, org.ovirt.engine.ui.webadmin.plugin.api.api.api.api.api.api.api.resource.TabOptions options) { addTab(label, historyToken, contentUrl, options.getPriority().intValue(), options.getPriority().booleanValue()); }
@java.lang.Override public void onUserLoginChange(org.ovirt.engine.ui.common.auth.UserLoginChangeEvent event) { final com.gwtplatform.mvp.shared.proxy.PlaceRequest request = getPlaceFromFragment(); if (frasjectRequest!= null) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(this).getDefaultMainSection()); } else { revealPlace(getDefaultMainSectionPlace()); } }
public boolean getIsDefaultPlace() { return getIsBoolean("isDefaultPlace", false); }
private boolean isColdReboot() { booleanColdReboot = ((org.ovirt.engine.core.bll.RebootVmCommand.getVm())!= null) && (!(org.ovirt.engine.core.bll.RebootVmCommand.getVm().isRunOnce()))) || (org.ovirt.engine.core.bll.RebootVmCommand.getVm().isRunOnce()))) || (org.ovirt.engine.core.bll.RebootVmCommand.getVm().isRunOnce(), org.ovirt.engine.core.bll.RebootVmCommand.getVm().isRunOnce(), org.ovirt.engine.core.bll.RebootVmCommand.getVm().isRunConfigurationExists()); return (ll.getVm().isRunOnce()) && (llRebootCommand.getVm().isFinished())) && (freeReboot; }
private java.lang.Integer getQosBandwidth(org.ovirt.engine.core.compat.Guid clusterId) { final org.ovirt.engine.core.common.businessentities.network.HostNetworkQos migrationHostNetworkQos = dbFacade.getHostNetworkQosDao().getHostNetworkQosOfMigrationNetworkByClusterId(clusterId); if (migrationHostNetworkQos == null) { return null; } if ((migrationHostNetworkQos.getOutAverageRealtime())!= null) { return migrationHostNetworkQos.getOutAverageRealtime(); } return migrationHostNetworkQos.getOutAverageUpperlimit(); }
protected org.ovirt.engine.api.model.Disk addLinks(org.ovirt.engine.api.model.Disk model, java.lang.Class<? extends org.ovirt.engine.api.model.BaseResource> suggestedParent, java.lang.String... subCollectionMembersToExclude) { if ((model.isSetQuota()) && (model.getQuota().isSetId())) { org.ovirt.engine.core.common.businessentities.Quota quota = getEntity(org.ovirt.engine.core.common.businessentities.Quota.class, queryType.GetQuotaByQuotaId, new org.ovirt.engine.core.common.queries.IdQueryParameters(asGuid(model.getQuota().getId())), "quota"); model.getQuota().setDataCenter(new org.ovirt.engine.api.model.DataCenter()); model.getQuota().getDataCenter().setId(quota.getStoragePoolId().toString()); } org.ovirt.engine.api.model.Disk disk = super.getQuota().getDataCenter().getDataCenter().setId(quota.getStoragePoolId().toString()); model.getQuota().setId(quota.getStorageDomains().getStorageDomains()); if (disk.isSetStorageDomains()) { disk.getStorageDomains().setStorageDomains(new org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(storageDomain, null, false)); } return disk; }
protected org.ovirt.engine.api.model.Disks mapCollection(java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> entities) { org.ovirt.engine.api.model.Disks collection = new org.ovirt.engine.api.model.Disks(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : entities) { org.ovirt.engine.api.model.Disk model = populate(map(disk), disk); if ((model.isSetQuota()) && (disk instanceof org.ovirt.engine.core.common.businessentities.storage.DiskImage)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); model.getQuota().setDataCenter(new org.ovirt.engine.api.model.DataCenter()); model.getQuota().getDataCenter().setId(image.getStoragePoolId().toString()); } collection.getDisks().add(addLinks(model)); } return collection; }
private void selectRow(int shift) { if ((selectedSet.isEmpty()) || ((dataDisplay) == null)) { return; } int shiftSelectedRow = (lastSelectedRow) + ((dataDisplay) == null)) { return; } int shiftSelectedRow = (lastSelectedRow > 0)? shiftSelectedRow : shift; int nextRow = (shift > 0)? shift.getRowCount()); if (disabledRows.contains(nextRow)) { selectRow((shift > 0? shift + 1 : shift -1)); return; } setSelected(visibleItemsAsList().get(nextRow), true); }
public org.ovirt.engine.core.bll.ValidationResult networkNameNotUsedAsVdsmName() { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> mergedNetworks = getDbFacade().getNetworkDao().getAllForDataCenter(network.getDataCenterId()); if (conflictNetworks.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.util.Collection<java.lang.String> nameReplacements = org.ovirt.engine.core.utils.ReplacementUtils.replaceWith("ConflictNetworks", conflictNetworks); if (conflictNetworks.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.util.Collection<java.lang.String> nameReplacements = org.ovirt.engine.core.utils.ReplacementUtils.replaceWith("ConflictNetworks", conflictNetworks); nameReplacements.add(getNetworkNameReplacement()); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_NAME_USED_AS_INTERFACE_NAME, nameReplacements); }
@org.junit.Test public void networkNameTakenByVdsmName() { org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network(); network.setVdsmName("vdsm-name"); org.ovirt.engine.core.common.businessentities.network.Network network2 = new org.ovirt.engine.core.common.businessentities.network.Network(); network2.setVdsmName("vdsm-name"); network2.setId(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.OTHER_GUID); when(networkDao.getAllForDataCenter(any())).thenReturn(java.util.Arrays.asList(network, network2)); assertThat(validator.networkNameNotUsedAsVdsmName(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.NETWORK_NAME_USED_AS_INTERFACE_NAME)); }
@java.lang.Override protected java.lang.String getColorByProgress(int progress) { return org.ovirt.engine.ui.common.widget.table.column.TransferDiskImageProgressColumn.asCode(); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid storageDomainId = org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStorageDomainId(); org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters parameters = new org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters(org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStoragePoolId(), org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStorageDomainId()); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue = runInternalAction(ActionType.ProcessOvfUpdateForStoragePool, parameters, org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getContext()); java.util.Set<org.ovirt.engine.core.compat.Guid> proccessedDomains = actionReturnValue.getActionReturnValue(); if (((actionReturnValue.getSucceeded()) && (proccessedDomains!= null)) && (proccessedDomains.contains(storageDomainId))) { runInternalActionWithTasksContext(ActionType.ProcessOvfUpdateForDomain, createProcessOvfUpdateForDomainParams()); } else { log.info("Process update was ignored - nothing to update for storage domain '{}'", storageDomainId); } org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.setSucceeded(true); }
protected void proccessDomainsForOvfUpdate(org.ovirt.engine.core.common.businessentities.StoragePool pool) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsInPool = storageDomainDao.getAllForStoragePool(pool.getId()); for (org.ovirt.engine.core.common.businessentities.StorageDomain domain : domainsInPool) { if ((!(domain.getStorageDomainType().isDataDomain())) || (((domain.getStatus())!= (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)) && (!(domain.getStatus().equals(org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStoragePoolCommand.getParameters().getStorageDomainId())))) { continue; } activeDataDomainsIds.add(domain.getId()); java.lang.Integer ovfStoresCountForDomain = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.StorageDomainOvfStoreCount); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo> storageDomainOvfInfos = storageDomainOvfInfoDao.getAllForDomain(domain.getId()); if ((storageDomainOvfInfos.size()) < ovfStoresCountForDomain) { proccessedDomains.add(domain.getId()); continue; } for (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo storageDomainOvfInfo : storageDomainOvfInfos) { if ((storageDomainOvfInfos.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfoStatus.OUTDATED)) { proccessedDomains.add(domain.getStatus()); continue; } } for (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo storageDomainOvfInfo : storageDomainOvfInfos) { if ((storageDomainOvfInfos.getStatus()) == (org
public static org.ovirt.engine.api.model.ResumeBehavior mapResume(org.ovirt.engine.api.model.ResumeBehavior resumeBehavior) { if (resumeBehavior) { return null; } switch (volumeBehavior) { case AUTO_RESUME : return org.ovirt.engine.api.model.RestartBehavior; case LEAVE_PAUSED : return org.ovirt.engine.api.model.ActionType.restapi.resource.BackendActionType; case K_VOLUME : return org.ovirt.engine.api.model.ActionType.restapi.resource.BackendActionFailure(org.ovirt.engine.api.restapi.resource.Backend.class, (org.ovirt.engine.api.restapi.resource.BackendActionParametersBase.class))); } }
public static org.ovirt.engine.api.model.ResumeBehavior mapResume(org.ovirt.engine.core.common.businessentities.ResumeBehavior resumeBehavior) { if (resumeBehavior == null) { return null; } switch (resumeBehavior) { case AUTO_RESUME : return org.ovirt.engine.api.model.ResumeBehavior.AUTO_RESUME; case LEAVE_PAUSED : return org.ovirt.engine.api.model.ResumeBehavior.K_RESUSED; case K_KEY : return org.ovirt.engine.api.model.ResumeBehavior.K_KEY; default : throw new java.lang.IllegalArgumentException((("Unknown resume behavior \"" + "\"")); } }
private void logNoDeviceToHotUnplug(java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmMemoryDevices) { final org.ovirt.engine.core.common.AuditLogType message = (vmMemoryDevices.isEmpty())? org.ovirt.engine.core.common.AuditLogType.NO_MEMORY_DEVICE_TO_HOT_UNPLUG : org.ovirt.engine.core.common.AuditLogType.NO_MEMORY_DEVICE_TO_HOT_UNPLUG; if (!(vmMemoryDevices.isEmpty())) { final int originalMemoryMb = org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getMemSizeMb(); org.ovirt.engine.core.bll.UpdateVmCommand.addCustomValue(org.ovirt.engine.core.bll.UpdateVmCommand.AUDIT_LOG_OLD_MEMORY_SIZE); java.util.List<org.ovirt.engine.core.common.businessentities.AuditLog> unplugOptions = org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getMemSizeMb(); org.ovirt.engine.core.bll.UpdateVmCommand.addCustomValue(org.ovirt.engine.core.bll.UpdateVmCommand.AUDIT_LOG_OLD_MEMORY_MB, java.lang.String.valueOf(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVm().getMemSizeMb())); final java.lang.String unplugOptions = vmMemoryDevices.stream().filter(vmDeviceCommonUtils.get(deviceSizeMb, deviceSize); if ((deviceAfterHotUnplug(deviceAfterHotUnplug(originalMemoryMb, deviceSize)) && memoryAfterHotUnplug(originalMemoryMb, deviceSize)))) { java.lang.String unplugOptions = vmMemoryDevices.get(deviceSize); } } }
public static boolean isMemoryDeviceHotUnpluggable(org.ovirt.engine.core.common.businessentities.VmDevice memoryDevice) { if (!(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isMemory(memoryDevice))) { throw new java.lang.RuntimeException((("Memory device expected but device " + memoryDevice) + "emp.")); } return (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSpecParamsIntValue(memoryDevice, org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_SIZE).isPresent()) && (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSpecParamsIntValue(memoryDevice, org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_NODE).isPresent()); }
private void hotUnplugMemory(org.ovirt.engine.core.common.businessentities.VM newVm) { final org.ovirt.engine.core.common.businessentities.VM vmFromDb = org.ovirt.engine.core.bll.UpdateVmCommand.getVm(); final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDeviceToHotUnplug = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(getVmId(), VmDeviceGeneralType.MEMORY, VmDeviceGeneralType.MEMORY, VmDeviceGeneralType.MEMORY); final org.ovirt.engine.core.common.action.VmDeviceGeneralParameters parameters = getVmDeviceToHotUnplug(vmMemoryDevices); final int oldMemory.setMemSizeMb(vmFromDb.getMinAllocatedMem()); if (memoryDeviceToUnplug == null) { logNoDeviceToHotUnplug(vmMemoryDevices); newVmStatic.setMemSizeMb(oldVm.getMinAllocatedMem()); if (memoryDeviceToUnplug == null) { logNoDeviceToHotUnplug(vmMemoryDevices); newVmStatic.setMemSizeMb(oldVm.getMinAllocatedMem()).getMem()); } final org.ovirt.engine.core.common.action.VmDeviceCommonUtils.getSizeOfVmUpdateParameters(memoryDeviceToUnplug).get(); org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSizeOfParent()); if (!(vmFromDb.isHostedEngineMessage(memoryDeviceMb.getMinAllocatedMem())) { final int memoryAfterHotUnplugMb = oldMemoryMb.get(memoryDeviceToRemove); newVmStatic.setMemSizeMb(oldVm.getMinAllocatedMem())); } final int memoryAfterHotUnplugMb = oldMemorySizeMb; org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSizeOfVmUpdateParameters(memoryDeviceToRemove); if (!(vmFromDb.getMemSizeMb.getMem())) { log.errorFormat
@java.lang.Override public void runForSql(org.ovirt.engine.core.common.businessentities.Disk disk) { diskIndex = 0; }
@java.lang.Override public void runForSql(org.ovirt.engine.core.bll.VmCommand.MAX_VIRTIO_CCW_DISKS) { hasMaximum = (org.ovirt.engine.core.bll.VmCommand.MAX_VIRTIO_CCW_DISKS) == (countDisks(DiskInterface.VirtIO)); }
void runForSuspended();
@java.lang.Override public org.ovirt.engine.core.common.businessentities.ArchitectureType getArchitecture() { return org.ovirt.engine.core.bll.validator.ArchitectureType.ppc64; }
@java.lang.Override public java.lang.String T run(T c) { c.run(VdcBllMessages.VAR__HOST_ID, new org.ovirt.engine.core.bll.storage.CpuFlagsManagerHandler(Ticket, new org.ovirt.engine.core.bll.validator.CpuFlagsManagerHandler().getArchitecture(), new org.ovirt.engine.core.bll.validator.DiskValidator(org.ovirt.engine.core.bll.storage.disk.CpuFlagsManager.getVersion().getVersion(), new org.ovirt.engine.core.bll.validator.DiskValidator(org.ovirt.engine.core.bll.storage.disk.CpuFlagsManager.getVersion())); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.HostDeviceView object) { return (object.getMdevTypes()) == null? " : java.lang.String.format(object.getMdevTypes().getVdsGroupCompatibilityVersion().toList())); }
public static java.lang.Double percent2bytes(java.lang.Integer speedValueInMegaBits, java.lang.Double rxTxValueInPrecent) { if ((speedValueInMegaBits == null) || (rxTxValueInPrecent == null)) { return 0.0; } return (speedValueInMegaBits * rxTxValueInPrecent) / 100; }
@org.junit.Test public void testDefaultRouteWhenOutOfSyncOnOlderCluster() { cluster.setCompatibilityVersion(Version.v4_1); network.setDnsResolver(new org.ovirt.engine.core.common.businessentities.VDS(true, mockDnsResolver); assertThat(createMestedInstance(true, mockDnsResolver).isNetworkInSync(), is(false)); }
public static boolean defaultRouteSupported(org.ovirt.engine.core.compat.Version version) { return Version.v4_2.getVersion(version); }
@java.lang.Override protected boolean canEdit(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { org.ovirt.engine.core.compat.Version clusterVersion = clusterNetworkModel.getCluster().getCompatibilityVersion(); boolean defaultRouteSupported = Version.v4_2.getAttached()? null : version.v4_2.getAttached())); return (defaultRouteSupported && (clusterNetworkModel.isExternal())) && (((!(isMultiple()))) || (!(clusterNetworkModel.isManagement()))) || (!(clusterNetworkModel.isManagement())) || (!(clusterNetworkModel.isDefaultRoute()))); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (obj == null) { return false; } if ((getClass())!= (obj.getClass())) { return false; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer other = ((org.ovirt.engine.core.common.businessentities.storage.ImageTransfer) (obj)); return (((((((((java.util.Objects.equals(commandId, other.commandId)) && (java.util.Objects.equals(commandId)) && (java.util.Objects.equals(message, other.message))) && ((type) == (other.type))) && (java.util.Objects.equals(message, other.message))) && (java.util.Objects.equals(message, other.vdsId))) && (java.util.Objects.equals(vdsId, other.vdsId))) && (java.util.Objects.equals(imageUri, other.imageUri))) && (java.util.Objects.equals(spagedTicket, other.imageUri))) && (java.util.Objects.equals(spy, other.spy, other.getBytes()))) && (java.util.Objects.equals(sortedTicket, other.bytesTotal)); }
private void pollImportStatus(org.ovirt.engine.core.bll.storage.disk.image.TransportalImageCommand<T> parameters) { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = runInternalAction(ActionType.TransferImageStatus, new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId())); if ((returnValue!= null) && (returnValue.getSucceeded())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer imageTransfer = returnValue.getActionReturnValue(); if ((((imageTransfer.getBytesTotal())!= null) && (imageTransfer.getBytesTotal().equals(imageTransfer.getBytesSent()))) && (!(imageTransfer.getEntity().equals(imageTransfer.getBytesTotal().getEntity()))) && (!(image.getActive()))) { if (!(context.entity.getActive())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer imageTransfer = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); update.setActionReturnValue(ImageTransferStatus.FINISHING_SUCCESS); org.ovirt.engine.core.common.action.TransferImageStatusParameters parameters = new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); parameters.setUpdates(new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); parameters.setUpdates(up); runInternalAction(ActionType.TransferImageStatus, parameters); } } } }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (obj == null) { return false; } if ((getClass())!= (obj.getClass())) { return false; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer other = ((org.ovirt.engine.core.common.businessentities.storage.ImageTransfer) (obj)); return (((((((((java.util.Objects.equals(commandId, other.commandId)) && (java.util.Objects.equals(peak.commandId)) && (java.util.Objects.equals(commandId, other.p))) && ((type) == (other.type))) && (java.util.Objects.equals(lastUpdated, other.active))) && (java.util.Objects.equals(lastUpdated, other.lastUpdated))) && (java.util.Objects.equals(vdsId, other.vdsId))) && (java.util.Objects.equals(vdsId, other.vdsId))) && (java.util.Objects.equals(vmId, other.vdsId))) && (java.util.Objects.equals(spagedTicket, other.imageUri))) && (java.util.Objects.equals(spy, other.spy, other.bytes))) && (java.util.Objects.equals(sortedTicket, other.bytesTotal)); }
private void handleTransferring(final org.ovirt.engine.core.bll.storage.disk.image.Transport<T>.StateContext context) { if ((context.iterationTimestamp) >= ((org.ovirt.engine.core.bll.storage.disk.image.TransparentCommand.getParameters().getSessionExpiration()) - (getHostTicketRefreshAllowance()))) { log.info("Failed to renewing tunnel ticket for {}", getTransferDescription()); boolean extendSucceeded = extendEntityTransferSession(context.entity); if (org.ovirt.engine.core.bll.storage.disk.image.TransportalTransferImageCommand.getParameters().isExtendTicketFailed()) { updateEntityTransferSession(context.entity); } org.ovirt.engine.core.bll.storage.disk.image.TransportalencingImageCommand.getParameters().setExtendTicketFailed(false); } else { log.debug("Failed to renewing transfer ticket for {}", getTransferDescription()); } resetPeriodTime(0); }
public boolean isExtendTicketFailed() { return extendTicketFailed; }
public void setExtendTicketFailed(boolean extendTicketFailed) { this.extendTicketFailed = extendTicketFailed; }
private static org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> executeAndNone() { org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); java.lang.String expectedOutput = new org.ovirt.engine.core.common.businessentities.VM(); java.lang.String expectedOutput = new org.ovirt.engine.core.common.businessentities.VM(); expectedOutput.set(expectedOutputStream.get(0).when(vmInit).get(0).getVmInit().get(0).thenReturn(vmInit); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutputStream.get(0).when(vmInit).getSucceeded(); }
private void storeNetwork() throws java.io.UnsupportedEncodingException { if (sourceProtocol.equals(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.NetConfigSourceProtocol.OPENSTACK_METADATA)) { networkData = new org.ovirt.engine.core.vdsbroker.vdsbroker.VmInitToOpenStackMetadata(vmInit); } else { storeNetworkAsEni(); } }
private static org.ovirt.engine.core.common.utils.Pair dhcpIPv6() { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.getInstance().getName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolProtocolProtocolProtocolProtocolTest.HOST_NAME); underTest.setIpv6BootProtocol(Ipv6BootProtocol.DHCP); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest.name(), "); underTest.add(new org.ovirt.engine.core.common.businessentities.VmInitNetwork()); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest.toList(underTest)); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInitParameters(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.getInstance().getVmInitHandler().get(underTest.getId(), new org.ovirt.engine.core.common.businessentities.VmInitParameters(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.createParameters(vmInit, new org.ovirt
private static org.ovirt.engine.core.common.utils.Pair static org.ovirt.engine.core.common.businessentities.VmInitNetwork prepareIPv6() { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolProtocolTest.IFACE_NAME); underTest.setIpv6BootProtocol(Ipv6BootProtocol.STATIC_IP); underTest.setIpv6Address(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocol.IPV6_PREFIX); underTest.setIpv6Prefix(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocol); underTest.setIpv6Prefix(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocol); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = "builders.add(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = ","); for (org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataMetadataProtocolTest.IPV6_PREFIX); } return result; }
private static org.ovirt.engine.core.common.utils.Pair staticIPv6AddressOnly() { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocol.STATIC_IP); underTest.setIpv6Address(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocol.IPV6_ADDRESS); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = "builders.setNetworks(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = ","; for (org.ovirt.engine.core.common.businessentities.VmInit vmInit : org.ovirt.engine.core.common.businessentities.VmInit.Entities.class) { vmInit.setNetworks(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = new org.ovirt.engine.core.common.businessentities.VmInitParameters(org.ovirt.engine.core.vdscommands.VmInitHandlerMetadata); vmInit.setNetworks(new org.ovirt.engine.core.common.businessentities.VmInitParameters(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataMetadata(vmInit, expected, expectedBootProtocol.getId()); org.ovirt.engine.core.common.businessentities.VmInitParameters parameters = new org.ovirt.engine.core.common.businessentities.V
@org.junit.Test public void test() throws java.io.IOException { org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler underTest = new org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler(vmInit, org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.NetConfigSourceProtocol.OPENSTACK_METADATA); final java.util.Map<java.lang.String, java.lang.Object> actualNetworkData = parseResult(actual); java.util.Map<java.lang.String, java.lang.Object> actualNetworkData = parseResult(actual); java.util.Map<java.lang.String, java.lang.Object> expectedNetworkData = org.ovirt.engine.core.utils.JsonHelper.jsonToMap(expected); assertEquals(expectedNetworkData, actualNetworkData); }
private static org.ovirt.engine.core.common.utils.Pair dhcpIPv4() { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.getInstance().getName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolProtocolProtocolProtocolProtocolProtocolTest.HOSTNAME); underTest.setBootProtocol(Ipv4BootProtocol.DHCP); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = "builders.setNetworks(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = "builders.add(new org.ovirt.engine.core.common.businessentities.VmInit()); underTest.setNetworks(java.util.Arrays.asList(underTest.get(underTest)); org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VmInit, expectedOutputStream, expectedOutputStream, org.ovirt.engine.core.common.businessentities.VmInitParametersBase> expectedOutputStream = new org.ovirt.engine.core.common.businessentities.VmInitParameters(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.createParameters(vmInit, expectedOutputStream); org.ovirt.engine.core.common.businessentities.VmInitParameters parameters = new org.ovirt.engine.core.common.businessentities.VmInitParameters(vmInit, expectedOutput); if (org.ovirt.engine.core.common.businessentities.VmInit.VmInit.get(vmBoot
private static org.ovirt.engine.core.common.utils.Pair staticIPv4() { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IFACE_NAME); underTest.setBootProtocol(Ipv4BootProtocol.STATIC_ADDRESS); underTest.setIp(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocol.IP); underTest.setNetmask(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocol); underTest.setGateway(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocolProtocol); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = "builders.add(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = "builders.add(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = "builders.add(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest.toList(underTest)); java.lang.String expectedOutput = new org.ovirt.engine.core.common.businessentities.VmInit();
private static org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> getExistingServers() { java.lang.String expectedOutput = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setDnsSearch("search1"); vmInit.setDnsServers("nameserver1"); java.util.Map<java.lang.String, java.lang.Object> expectedOutput = new java.util.HashMap<java.lang.String, java.lang.Object>(); for (org.ovirt.engine.core.common.businessentities.VmInit vmInit : new org.ovirt.engine.core.common.businessentities.VmInit vmInit) { vmInit.setDns((((((((((((((((((((((("{" + (((("{")) + "nameserver1", "name", "d.getName())) + ",") + ",") + "nd") + ",") + ",") + ",").when(nameserver3", config3); java.util.Map<java.lang.String, java.lang.String> expectedOutput = new java.util.HashMap<java.lang.String, java.lang.Object>(); if ((((((((((((((((((((((("ConfigValues.length) == null) || (vds.getName())) + "d"))) + ",") + "dns-nameserver3") + "nd") + "nd") + ",") + "nd")); java.util.Map<org.ovirt.engine.core.common.businessentities.VmInitParameters> expectedOutput = new org.ovirt.engine.core.common.businessentities.VmInitParameters(vmInit, expectedOutputStream); vmInit.setDns(properties); vmInit.setDnsServers(dataFromParams); return result; } }
protected void addUserToVm() { mapDbUsers().remove(dbUser); }
protected void readUserDomainsSection(@java.lang.SuppressWarnings("unused") java.lang.String baseName) { if (org.ovirt.engine.core.utils.xml.XmlNodeUtils.isLunused) { org.ovirt.engine.core.utils.xml.XmlNode node = org.ovf.XmlNode node.get(org.ovirt.engine.core.utils.xml.XmlNode node); if (org.ovirt.engine.core.utils.xml.XmlNode node = new org.ovirt.engine.core.utils.xml.XmlNodeNode(node); } else { if (org.ovirt.engine.core.utils.xml.XmlNode node) { xmlNode = org.ovirt.engine.core.utils.xml.XmlNodeUtils.getElementId(org.ovirt.engine.core.utils.xml.XmlNodeUtils.getElementId(org.ovirt.engine.core.utils.xml.XmlNodeNode node.class); } } }
protected java.util.List<org.ovirt.engine.core.common.businessentities.aaa.DbUser> mapDbUsers() { java.util.List<org.ovirt.engine.core.common.businessentities.aaa.DbUser> dbUsers = org.ovirt.engine.core.bll.ExportRepositoryCommand.getParameters().getDomainMap(); org.ovirt.engine.core.common.businessentities.aaa.DbUser originalDbUser = dbUser.getParameters().getDomainMap(); if (user!= null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser originalDbUser = dbUser.getParameters().getDbUsers().get(org.ovirt.engine.core.bll.ExportRepositoryCommand.getParameters().getDomainMap()); if (user!= null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser originalDbUser = dbUser.get(dbUser.getId(), org.ovirt.engine.core.bll.ExportRepositoryCommand.getParameters().getDomainId(), org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().getDomain().getDomainId(), org.ovirt.engine.core.bll.ExportDomainCommand.getParameters().getDomain().getStorageDomain().getId(), org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().getDomain().getDomain(), org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().getStorageDomain().getDomain().getDomainId(), org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().getStorageDomain().getStorageDomain().getDomain().getId()); } } return result; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData)) { return false; } org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData other = ((org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData) (obj)); return (((((super.equals(obj)) && (java.util.Objects.equals(diskImages, other.diskImages))) && (java.util.Objects.equals(interfaces, other.lunDisks))) && (java.util.Objects.equals(vmBase, other.vmBase))) && (java.util.Objects.equals(vmBase, other.vmBase))) && (java.util.Objects.equals(clusters, other.affinityGroups))) && (java.util.Objects.equals(affinityGroups, other.affinityGroups))) && (java.util.Objects.equals(affinityGroups, other.affinityGroups))) && (java.util.Objects.equals(affinityGroups, other.affinityGroups))) && (java.util.Objects.equals(dbUsers, other.getDbUsers()); }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((getReturnValue()) == null? 0 : vmImages, lunDisks, interfaces, interfaces, clusterName, affinityGroups, clusterName, affinityGroups); result = (prime * result) + (prime * result) + (prime * result) + (prime * result) + (prime * result) + (prime * result) + ((userId) == null? 0 : userId.hashCode()); result = (prime * result) + ((userName) == null? 0 : userName.hashCode()); result = (prime * result) + ((userName) == null? 0 : dbUser.hashCode()); result = (prime * result) + ((userName) == null? 0 : dbUser.hashCode()); result = (prime * result) + (prime * result) + (prime * result)? 0 : userName.hashCode()); result = (prime * result) + (prime * result) + (prime * result) + (prime * result) + (prime * result) + (prime * result)? 0 : userName.hashCode()); result = (prime * result) + (prime * result) + (prime * result) + (prime * result) + (prime * result) + (prime * result) + (prime * result) + (prime * result)? 0 : userName); return result; }
@java.lang.Override protected void executeCommand() { affinityGroupDao.update(getParameters().getAffinityGroup()); setSucceeded(true); }
@java.lang.Override public void addVmToAffinityLabels() { super.addVmToAffinityLabels().forEach(getParameters().getVm().getId()); }
@java.lang.Override public void buildVirtualSystem() { org.ovirt.engine.core.utils.ovf.xml.XmlNode virtualSystem = selectSingleNode(_document, "//*/Content"); consumeReadProperty(virtualSystem, org.ovirt.engine.core.utils.ovf.NAME, (val) -> fullEntityOvfData.getVmBase().setName(val)); fullEntityOvfData.getVmBase().setOvfVersion(getVersion()); org.ovirt.engine.core.utils.ovf.xml.XmlNodeList list = selectNodes(virtualSystem, "Section"); if (list!= null) { org.ovirt.engine.core.utils.ovf.xml.XmlNode node = getNode(list, "section", "section", "section", "ovf:OperatingSystemSection"); if (node!= null) { readOsSection(node); if ((!(osRepository.isLinux(fullEntityOvfData.getOsId()))) || ((fullEntityOvfData.getDefaultDisplayType())!= (org.ovirt.engine.core.common.businessentities.DisplayType.qxl))) { fullEntityOvfData.getVmBase().setSingleQxlPci(false); } } node = getNode(list, "xsi: VirtualHardwareSection_Type"); if (node!= null) { readHardwareSection(list, "ovf: Vf:Type"); } node = getNode(list, "ovf: affinitySection_Type"); if (node!= null) { readAffinityGroupsSection(node); if (node!= null) { readAffinityGroupsSection(node); } node = getNode(list, "ovf: affinityGroupsSectionSectionSectionSectionSectionSectionSection"); if (node!= null) { readAffinityGroupsSection(node); } node = getNode(list, "ovf: affinityLabelSectionSectionSectionSectionSectionSectionSectionSectionSection); if (node!= null) { readAffinityGroupsSection(node); } } }
@java.lang.Override protected void executeCommand() { labelDao.update(getParameters().getLabel()); vmStaticDao.update(new java.util.ArrayList(getParameters().getLabel().getVms())); setActionReturnValue(getParameters().getLabel()); setSucceeded(true); }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.Label> mapAffinityGroups() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = new java.util.ArrayList<>(); java.util.Map<java.lang.String, java.lang.String> affinityLabelMap = org.ovirt.engine.core.bll.Export.ImportVmFromConfigurationCommand.getParameters().getAffinityLabelMap(); org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().getAffinityGroup().getAffinityLabelMap().forEach(((affinityLabel) -> (org.ovirt.engine.core.bll.ExportRepoImageCommand.getParameters().getAffinityGroupName()))); org.ovirt.engine.core.common.businessentities.Label originalAffinityLabel = labelDao.get(affinityLabel); if (affinityLabelMap!= null) { org.ovirt.engine.core.common.businessentities.Label originalAffinityLabel = labelDao.get(label); addCustomEntityToList(affinityLabel, destAffinityLabel, originalAffinityLabel, originalAffinityLabel); } else { addCustomEntityToList(affinityLabel, originalAffinityLabel, null); } } return affinityLabels; }
@java.lang.Override protected void initDbUsers() { org.ovirt.engine.core.bll.ExportRepoRepositoryCommand.getParameters().getDomainMap(); org.ovirt.engine.core.common.businessentities.DbUser originalDbUser = org.ovirt.engine.core.bll.ExportRepositoryCommand.getParameters().getParameters().getDomainMap(); org.ovirt.engine.core.common.businessentities.DbUser originalDbUser = dbUser.getParameters().getDbUsers().get(org.ovirt.engine.core.bll.ExportRepositoryCommand.getParameters().getUserId(), org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getParameters().getUser().getUser(), org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getParameters().getUser().getUser().getUserName()); if (userDomainsMap!= null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser originalDbUser = dbUser.getByUser(dbUser.getLoginName(), org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getParameters().getUser(), org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getParameters().getUserName(), org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getParameters().getUserName()); newDbGeneration(org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getParameters().getUserName(), org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getParameters().getUser(), new org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getParameters().getUser(), new org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getParameters().getUser(), new org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getParameters().getUser(), new org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getParameters().getUserID(), new org.ovirt.engine.core.
private void writeAffinityLabels() { java.util.List<java.lang.String> affinityLabelsNames = fullEntityOvfData.getAffinityLabels(); if ((affinityLabelsNames == null) || (affinityLabelsNames.isEmpty())) { return; } _writer.writeStartElement("Section"); _writer.writeStartElement("Section"); _writer.writeStartElement(OvfProperties.AFFINITY_GROUP); _writer.writeStartElement(OvfProperties.AFFINITY_GROUP); _writer.writeEndElement(); }
public void enableSelectionElements(boolean enableElements) { selectHostAutomaticallyEditor.setEnabled(enabled); }
public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> canSchedule(org.ovirt.engine.core.common.businessentities.Cluster cluster, org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.compat.Guid> vdsBlackList, java.util.List<org.ovirt.engine.core.compat.Guid> vdsWhiteList, java.util.List<java.lang.String> messages) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = vdsDao.getAllForClusterWithStatus(cluster.getId(), VDSStatus.Up); vdsList = removeBlacklists(vdsList, vdsBlackList); vdsList = removeBlacklists(vdsList, vdsWhiteList); vdsList = keepOnlyWaitingHosts(vdsList, vdsWhiteList); refreshCachedPendingValues(vdsList); org.ovirt.engine.core.common.scheduling.ClusterPolicy policy = policyMap.get(cluster); java.util.Map<java.lang.String, java.lang.String> parameters = createClusterPolicyParameters(cluster); vdsList = runFilters(policy.getFilters(), cluster, vdsList, vdsList, vm, parameters, policy.getFilterPositionMap(), messages, noWaitingVmDelayer, false, null); return vdsList; }
void localize() { selectHostAutomaticallyEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.constants.vmMigratePopupSelectHostAutomaticallyLabel()); selectDestinationHostEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.constants.vmMigratePopupSelectDestinationHostLabel()); hostsListEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.constants.hostClusterVmPopupHostsListLabel()); clustersEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.constants.hostClusterVmPopup()); message1.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.messages.mMigrateHostDisabledVMsInServerClusters()); message2.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.messages.mMigrateNoVmsAlreadyRunningOnHost()); message2.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.messages.mMigrateNoAvailableHost()); message4.setText(org.ovirt.engine.ui.webadmin.section.main.view.view.popup.vm.VmMigratePopupView.messages.mMigrateNoAvailableHost()); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.MigrateModel object) { driver.edit(object); updateMessages(object); enableSelectionElements(object); enableSelectionElements(object.getEnableSelectionElements()); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { updateMessages(object); enableElements(object.getEnableSelectionElements()); } }); }
private void updateMessages(org.ovirt.engine.ui.uicommonweb.models.vms.MigrateModel object) { message1.setVisible((!(object.getVmsOnSameCluster()))); message2.setVisible(object.getIsSameVdsMessageVisible()); message3.setVisible(object.getNoSelectedItemVisible()); message4.setVisible(object.getNoSelectedItem()); }
private void removeUnselectableHosts(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.compat.Guid run_on_on_vds, boolean allRunOnSameVds, boolean allRunOnSameVds) { if ((getVmsOnSameCluster()) && allRunOnSameVds) { org.ovirt.engine.core.common.businessentities.VDS runOnSameVDS = null; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.getId().equals(run_on_vds)) { runOnSameVDS = host; } } hosts.remove(runOnSameVDS); } hosts.removeAll(host); }
@java.lang.Override protected void onReveal() { super.onReveal(); setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.TYPE_SetSearchPanel, searchPanelPresenterWidget); setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.TYPE_SetBrickPanel,breadCpubs, breadCpubsPresenterWidget); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.getView().resolveOptions(); }
@java.lang.Override protected boolean validate() { boolean returnValue = (((super.validate()) && (validate(org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.createStoragePoolValidator().existsAndUp()))) && (org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.initializeVds())) && (checkStorageDomainsInPool()); return returnValue; }
public static boolean isVmLeaseBeHotplugged(org.ovirt.engine.core.common.businessentities.VM source, org.ovirt.engine.core.common.businessentities.VM destination) { return!(java.util.Objects.equals(source.getLeaseStorageDomainId(), destination.getLeaseStorageDomainId())); }
private void setAuthenticatedUser(org.ovirt.engine.api.model.Api api) { org.ovirt.engine.core.common.queries.QueryReturnValue returnValue = runQuery(QueryType.GetUserBySessionId, new org.ovirt.engine.core.common.queries.QueryParametersBase()); org.ovirt.engine.core.common.queries.QueryReturnValue returnValue = runQuery(QueryType.GetUserBySessionId, new org.ovirt.engine.core.common.queries.QueryParametersBase()); org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(user); user.setAuthenticatedUser(user); org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(user); api.setAuthentication(user); }
@java.lang.Override protected boolean validate() { if ((((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters()) == null) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent()) == null)) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent()) == null)) { return failValidation(EngineMessage.VDS_REMOVE_FENCE_AGENT_ID_REQUIRED); } org.ovirt.engine.core.common.businessentities.VDS host = org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVds(); if (host == null) { return failValidation(EngineMessage.VDS_INVALID_SERVER_ID); } if (host.isPmEnabled()) { java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> fenceAgents = fenceAgents.getFenceAgentsForHost(org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVdsId()); if ((fenceAgents.size()) == 1) { return failValidation(EngineMessage.VDS_REMOVE_LAST_FENCE_AGENT_PM_ENABLED); } } return super.validate(); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(dataCenter().id()); }
void localize() { applicationTitle.setText(dynamicTitle()); copyrightNotice.setText(dsmTitleAboutNotice()); versionLabel.setText(dsmVersionAbout()); userNameLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.view.popup.AboutPopupView.constants.userNameAboutLabel()); userNameLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.view.popup.AboutPopupView.constants.userNameAboutLabel()); }
void localize() { applicationTitle.setText(dynamicMessages.applicationTitle()); copyrightNotice.setText(dynamicMessages.copyRightNotice()); versionLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.view.AboutPopupView.constants.versionAboutLabel()); userNameLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.view.popup.AboutPopupView.constants.userNameAboutLabel()); }
public java.lang.Boolean getHotUnplugMemory() { return hotUnplugMemory; }
public void setHotUnplugMemory(java.lang.Boolean hotUnplugMemory) { this.hotUnplugMemory = hotplugMemory; }
void localize() { applicationTitle.setText(dynamicTitle()); copyrightNotice.setText(determineCorrectLabel()); versionLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.view.popup.AboutPopupView.constants.versionAboutLabel()); userNameLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.view.popup.AboutPopupView.constants.userNameAboutLabel()); versionLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.view.popup.AboutPopupView.constants.userNameAboutLabel()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(path()); org.ovirt.api.metamodel.annotations.InputDetail new org.ovirt.api.metamodel.annotations.InputDetail(); org.ovirt.api.metamodel.annotations.InputDetail new org.ovirt.api.metamodel.annotations.InputDetailBuilder(); provider.setPath(path()); principal.setPath(host().name()); principal.setName(host().name()); principal.setName(host().name()); principal.setName(host().name()); principal.getName(host().name()); org.ovirt.api.metamodel.Annotation.add(host().getName()); org.ovirt.engine.api.metamodel.Annotation.setPath(host().getName()); principal.setParent(host().getName()); principal.setEntity(host().getName()); principal.setEntity(host().getName()); principal.setEntity(host().getName()); principal.setEntity(host().getName()); principal.setEntity(host().getName()); principal.setEntity(host().getName()); principal.setEntity(host().getName()); principal.setEntity(host().getName()); principal.setEntity(host().getName()); principal.setEntity(host().getName()); principal.setEntity(host().getName()); principal.setEntity(host().getName()); principal.setEntity(host().getName()); principal.setEntity(host().getName()); principal.setEntity(host().getName()); principal.setEntity(host().getName()); principal.setEntity(host().getName()); principal.setEntity(host().getName()); principal.setEntity(host().getName()); principal.getName(host().name()); principal.setEntity(host().getName()); principal.setEntity(host().getName()); principal.getName(host().name()); principal.getName(host().name()); principal.setEntity(host().getName()); principal.setEntity(host().getName()); principal.setEntity(host().name()); principal.getName(host().name()); principal.setEntity(host().getName(host().name()); principal.name()); principal
@org.ovirt.api.metamodel.annotations.In("In") java.lang.String path();
@org.ovirt.api.metamodel.annotations.InputDetail() { optional(network().description()); optional(network().description()); optional(network().description()); optional(network().display()); optional(network().port()); optional(network().ip().address()); optional(network().ip().gateway()); optional(network().ip().netmask()); optional(network().mtu()); optional(network().mtu()); optional(network().mtu()); optional(network().mtu()); }
@org.ovirt.api.metamodel.annotations.InputDetail default() { or (required(network().id()), mandatory(network().name())); optional(network().description()); optional(network().description()); optional(network().description()); optional(network().ip().address()); optional(network().ip().gateway()); optional(network().ip().gateway()); optional(network().mtu()); optional(network().mtu()); optional(network().mtu()); optional(network().mtu()); optional(network().mtu()); optional(network().mtu()); optional(network().vlanId); org.ovirt.engine.api.model.NetworkProvider<org.ovirt.engine.core.common.businessentities.network.VlanProvider> principal = org.ovirt.engine.api.restapi.types.NetworkProviderProxyProviderProxy.class[COLORAGE]); optional(network().getUsername().id()); optional(network().getprovider().id()); optional(network().getExternalProvider().id()); org.ovirt.engine.core.common.businessentities.network.ProviderType lunProviderType = new org.ovirt.engine.core.common.businessentities.network.Provider(); lunNetworkProvider.setId(nicProfileId); lunNetworkProvider.setId(null); lunNetworkProvider.setId(network().id()); lunNetworkProvider.setId(networkProviderType); }
@org.ovirt.api.metamodel.annotations.Link types.Network[] network();
public void setClientIp(java.lang.String clientIp) { this.clientIp = clientIp; }
@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { org.ovirt.engine.core.aaa.servlet.SsoLoginServlet.log.debug("The oovirt-app-extension servlet"); java.lang.String redirectUri = java.lang.String.format("%s://%s:%s", request.getScheme(), org.ovirt.engine.core.aaa.filters.FiltersHelper.getRedirectUriServerName(request.getServerName()), request.getServerPort(), postActionUrl); org.ovirt.engine.core.uutils.net.URLBuilder urlBuilder = new org.ovirt.engine.core.common.utils.EngineLocalConfig.getInstance().getProperty(authSequencePriorityPropertyName(request.getServerName()), request.getServerPort(), postActionUrl); org.ovirt.engine.core.uutils.net.URLBuilder urlBuilder = new org.ovirt.engine.core.uutils.net.URLBuilder(org.ovirt.engine.core.aaa.filters.FiltersHelper.getEngineSsoUrl(request), "/oauth/authorize").addParameter("client_id", org.ovirt.engine.core.utils.EngineLocalConfig.getEngineSsoUrl(request)).addParameter("response_auth/auth/url", org.ovirt.engine.core.utils.EngineLocalConfig.getEngineSsoUrl(request)).addParameter("response_auth_url", org.ovirt.engine.core.aaa.filters.FiltersHelper.getEngineUrl(request)).addParameter("redirect_uri", redirectUri).addParameter("scope", request.getRemoteAddr()); if (org.apache.commons.lang.StringUtils.join(request)).addParameter("engine_url", redirectUri, redirectUri).addParameter("scope", request.getRemoteAddr()); } if (org.apache.commons.lang.StringUtils.join(request.getEngineUrl(request)).addParameter("request", request.getRemote
private static java.lang.String mapPluginType(java.lang.String entity, org.ovirt.engine.api.model.OpenStackNetworkProviderType type) { if ((type == (org.ovirt.engine.api.model.OpenStackNetworkProviderType.EXTERNAL)) || (OpenstackNetworkPluginType.OPEN_VSWITCH.name().equalsIgnoreCase(entity))) { return entity; } throw new java.lang.IllegalArgumentException((("("Network plugin type " + entity) + "\"")); }
@java.lang.Override protected org.ovirt.engine.api.model.OpenStackNetworkProvider postPopulate(org.ovirt.engine.api.model.OpenStackNetworkProvider model) { model.setType(OpenStackNetworkProviderType.NEUTRON); model.setPluginType(OpenstackNetworkPluginType.OPEN_VSWITCH.toString()); org.ovirt.engine.api.model.AgentConfiguration agentConfiguration = model.getAgentConfiguration(); agentConfiguration.setBrokerType(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.MessageBrokerType.class)); return model; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.ArchitectureType.class, to = org.ovirt.engine.api.model.Architecture.class) public static org.ovirt.engine.api.model.Architecture.class) public static org.ovirt.engine.api.model.Architecture.class map(org.ovirt.engine.core.common.businessentities.ArchitectureType model, java.lang.String template) { switch (model) { case 0 : return org.ovirt.engine.api.model.Architecture.class; case x86_64 : return org.ovirt.engine.api.model.Architecture.X86_64; case ppc64 : return org.ovirt.engine.api.model.Architecture.SUB64; case ssl64 : return org.ovirt.engine.api.model.Architecture.SINK; case SSTOR : return org.ovirt.engine.api.model.Architecture.SREAM; case SUB64 : return org.ovirt.engine.api.model.Architecture.SINK; default : return null; } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Architecture.class, to = org.ovirt.engine.core.common.businessentities.ArchitectureType.class) public static org.ovirt.engine.core.common.businessentities.ArchitectureType map(org.ovirt.engine.api.model.Architecture model, org.ovirt.engine.core.common.businessentities.ArchitectureType template) { if (model!= null) { switch (model) { case UNDEFINED : return org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined; case X86_64 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.x86_64; case PPC64 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.starts; case SSRPC64 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.Suspend; default : return null; } } return null; }
@java.lang.Override protected void onHide() { getTable().hideContextMenu(); }
protected void popuplutedList() { java.lang.String swapColumnKey = getSwappedColumnListKey(); if (swapColumnKey!= null) { java.lang.String swapColumns = getSwappedColumnListKey(); if (swapColumns!= null) { java.lang.String[] split = swapColumns.split(","); if (swapColumns!= null) { java.lang.String[] split = swapColumns.split(","); for (int i = 0; i < (split.length); i++) { java.lang.String[] tup = split[i].split("="); if ((t.length) == 2) { realToSwappedIndexes.put(java.lang.Integer.valueOf(tup[1])); } } } } }
private java.lang.String parseVolumeIdFromPath(java.lang.String path) { if (org.apache.commons.lang.StringUtils.isEmpty(path)) { return ""; } return path.substring(((path + "\"") + (-1)); }
private boolean isDomainXmlEnabledForVds() { return ((org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.DomainXML, vmDao.get(org.ovirt.engine.core.bll.MergeStatusCommand.getParameters().getVmId()).getCompatibilityVersion().toString()))); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.ImageTransfer.class, to = org.ovirt.engine.api.model.ImageTransfer.class) public static org.ovirt.engine.api.model.ImageTransfer map(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, org.ovirt.engine.api.model.ImageTransfer template) { org.ovirt.engine.api.model.ImageTransfer model = (template!= null)? template : new org.ovirt.engine.api.model.ImageTransfer(); if ((entity.getId())!= null) { model.setId(entity.getId().toString()); } if ((entity.getVdsId())!= null) { model.setHost(new org.ovirt.engine.api.model.Host()); model.getHost().setId(entity.getVdsId().toString()); } if ((entity.getDiskId())!= null) { model.setImage(new org.ovirt.engine.api.model.Image()); model.getImage().setId(entity.getDiskId().toString()); } if ((entity.getProxyUri())!= null) && ((entity.getImagedTicketId())!= null)) { model.setProxyUrl(entity.getClientURLForTransfer()); } if ((entity.getSignedTicket())!= null) { model.setSignedTicket(entity.getSignedTicket()); } if ((entity.getSigned())!= null) { model.setSigned(org.ovirt.engine.api.restapi.types.ImageTransferMapper.mapPhase(entity.getPhase())); } if ((entity.getActive())!= null) { model.setActive(entity.getActive()); } if ((entity.getType())!= null) { model.setActive(org.ovirt.engine.api.restapi.types.ImageTransferMapper.map(entity.getPhase())); } if ((entity.getType())!= null) { model.setSigned(org.ovirt.engine.api.restapi.types.ImageTransferMapper.map(entity.getType())); } return model; }
private static org.ovirt.engine.api.model.ImageTransferDowntime mapType(org.ovirt.engine.core.common.businessentities.storage.TransferType type) { switch (type) { case Download : return org.ovirt.engine.api.model.ImageTransferDowntime.DOWNLOAD; case Upload : return org.ovirt.engine.api.model.ImageTransferDowntime.get(type).map(type); case Upload : return org.ovirt.engine.api.model.ImageTransferDowntime.UNDER; default : return null; } }
private void storeSwappedIndexMap() { java.lang.String value = ""; int i = 0; for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> entry : realToSwappedIndexes.entrySet()) { if (item > 0) { value += ","; } i++; value += ((entry.getValue()) + "=") + (entry.getKey()); } if (!("".equals(value))) { java.lang.String swapColumnKey = getSwappedColumnListKey(); if (swapColumnKey!= null) { clientStorage.setLocalItem(swapColumnKey); } } }
protected void cluster_SelectedItemChanged() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster().getSelectedItem(); if (cluster == null) { return; } getFencingEnabled().setEntity(cluster.getFencingPolicy().isFencingEnabled()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getPmTypeList(new org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncQuery((pmTypes) -> updatePmTypeList(pmTypes)), cluster.getCompatibilityVersion()); if (((getDataCenter())!= null) && ((getDataCenter().getItems())!= null)) { for (org.ovirt.engine.core.common.businessentities.StoragePool datacenter : getDataCenter().getItems()) { if (datacenter.getId().equals(cluster.getStoragePoolId())) { getDataCenter().setSelectedItem(datacenter, false); break; } } } final org.ovirt.engine.core.common.utils.CpuVendor newCpuVmDevice(getCurrentCpuVendor()); if ((newCpuVendor!= null) && (!(newCpuVendor.equals(lastNonNullCpu)))) { lastNonNullCpuVendorChanged(); } getHostedEngineWarning().setIsAvailable(cluster.getCompatibilityVersion().get(Version.v4_0)); getNetworkProviderModel().setIsAvailable(cluster.getCompatibilityVersion().getcompatibilityVersion().less(Version.v4_0)); getNetworkProviderModel().setDefaultProviderById(cluster.getDefaultNetworkProviderId()); }
public void setDefaultProviderById(org.ovirt.engine.core.compat.Guid defaultProviderId) { org.ovirt.engine.core.common.businessentities.Provider updatedDefaultProvider = getNetworkProviders().getItems().filter((provider) -> provider!= null).filter((provider) -> provider.getId().equals(defaultProviderId)).findFirst().orElse(null); if (((defaultProvider) == null) || (defaultProvider.equals(getNetworkProviders().getSelectedItem()))) { getNetworkProviders().setSelectedItem(updatedDefault); } }
@org.ovirt.api.metamodel.annotations.InputDetail defaultMessage() { optional(cluster()); optional(register()); }
@org.ovirt.api.metamodel.annotations.InputDetail default() { optional(cluster()); optional(clone()); optional(exclusive()); optional(exclusive()); optional(template().name()); optional(template().name()); optional(template().name()); optional(template().name()).id"); optional(vm().diskAttachments()).id"); }
@org.ovirt.api.metamodel.annotations.InputDetail default() { optional(cluster()); optional(exclusive()); optional(exclusive()); optional(exclusive()); optional(exclusive()); optional(vm().name()); optional(optional(storageDomain().id()), optional(storageDomain().name())); optional(vm().diskAttachments().diskImage.diskImageTemplate().format()); optional(vm().diskAttachments.diskAttachments().disk().getIds(disk.getId())); }
@org.ovirt.api.metamodel.annotations.InputDetail defaultDetail() { optional(cluster()); optional(clone()); optional(exclusive()); optional(exclusive()); optional(template().name()); optional(template.name()); }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMetadataDisk(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidFromStringFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, guids.get(0), guids.get(4), guids.get(4), guids.get(5), guids.get(5), guids.get(5), guids.get(5)); if ((sd == null) || (disk!= null)) { return null; } org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMetadataDisk(org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(guids.get(4)); memoryDisk.setImageIds(guids.get(5)); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setCreationDate(new java.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setActive(true); memoryDisk.setActive(true); memoryDisk.setActive(vm.getDiskList().stream().any(d.getDiskList().stream().any(d.getDiskList())); return memoryDisk; }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidFromStringFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, guids.get(0), guids.get(2), guids.get(2), guids.get(2), guids.get(3)); org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMemoryDisk(vm, sd.getStorageType(), vmOverheadCalculator, org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(guids.get(3)); memoryDisk.setImageIds(guids.get(3)); memoryDisk.setActive(true); memoryDisk.setActive(true); memoryDisk.setActive(true); memoryDisk.setActive(true); memoryDisk.setMemoryVolumeId(snapshot.getDiskList().stream().stream().stream().stream().stream(new java.util.ArrayList(java.util.Collections.singletonList(vm.get(0)))); memoryDisk.setStoragePoolId(guid)); memoryDisk.setDisk(guid); memoryDisk.setDisk(new java.util.ArrayList<org.ovirt.engine.core
private org.ovirt.engine.core.bll.memory.MemoryImageBuilder createMemoryImageBuilder() { if (!(isMemorySnapshotSupported())) { return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); } if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getSnapshotType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.STATELESS)) { return new org.ovirt.engine.core.bll.memory.StatelessSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm()); } if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().isSaveMemory()) && (isLiveSnapshotApplicable())) { boolean wipeAfterDelete = getDisksList().stream().anyMatch((d) -> d.isWipeAfterDelete()); return new org.ovirt.engine.core.bll.memory.LiveSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm(), cachedStorageDomainId, org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getStoragePool(), this, vmOverheadCalculator, org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDescription(), wipeAfterDelete); } return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); }
private java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> getLuns(boolean selectedLuns, boolean includedLuns) { java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns = new java.util.ArrayList<>(); if ((getItems())!= null) { if (getIsGrouppedByTarget()) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel> items = ((java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel>) (getItems())); for (org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel item : items) { aggregateAddedLuns(item.getLuns(), selectedLuns, includedLuns, luns); } } else { java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> items = ((java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>) (getItems())); aggregatedAddedLuns(items, selectedLuns, includedLuns); } } return luns; }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMetadaaDisk(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.utils.GuidUtils.getGuidListFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, guids.get(0), guids.get(4), guids.get(4), guids.get(5), guids.get(5), guids.get(5)); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createMetadataDisk(); memoryDisk.setId(guids.get(4)); memoryDisk.setImageId(guids.get(5)); memoryDisk.setStorageIds(guids.get(5)); memoryDisk.setCreationDate(new java.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setStoragePoolId(guids.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().anyWipeAfterDelete)); return memoryDisk; }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { switch (org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getActionState()) { case UNFAILURE : case UNFAILURE : return org.ovirt.engine.core.common.AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_FAILED; default : return org.ovirt.engine.core.common.AuditLogType.UNASSIGNED; } }
private void onMaintenance() { final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); java.util.ArrayList<org.ovirt.engine.core.common.action.ActionParametersBase> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StorageDomain item : getSelectedItems()) { org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters parameters = new org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters(); parameters.setStorageDomainId(getEntity().getId()); parameters.setForceMaintenance(confirmModel.getForce().getEntity()); if ((item.getStoragePoolId())!= null) { parameters.setStoragePoolId(item.getStoragePoolId()); } list.add(parameters); } final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); confirmationModel.startProgress(); org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); confirmationModel.startProgress(); org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); confirmationModel.stopProgress(); org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); confirmationModel.stopProgress(); setWindow(null); }
@java.lang.Override public javax.ws.rs.core.Response deactivate(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters(guid, dataCenterId, forceMaintenance), action); }
@java.lang.Override protected void endWithFailure() { if ((commandCoordinatorUtil.getCommandExecutionStatus(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCommandId()))!= (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { changeStorageDomainStatusInTransaction(loadStoragePoolIsoMap(), StorageDomainStatus.Unknown); auditLogDirector.log(this, AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_OVF_UPDATE_INCOMPLETE); } else { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = loadStoragePoolIsoMap(); map = loadStoragePoolIsoMap(); } org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(true); }
@java.lang.Override protected void endWithFailure() { if ((commandCoordinatorUtil.getCommandExecutionStatus(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCommandId()))!= (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { changeStorageDomainStatusInTransaction(loadStoragePoolIsoMap(), StorageDomainStatus.Unknown); auditLogDirector.log(this, AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_OVF_UPDATE_INCOMPLETE); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getReturnValue().setEndActionTryAgain(false); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getReturnValue().setEndActionTryAgain(false); } else { org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(true); } }
private void onMaintenance() { java.util.ArrayList<org.ovirt.engine.core.common.action.ActionParametersBase> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StorageDomain item : getSelectedItems()) { org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters parameters = new org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters(); parameters.setStorageDomainId(getEntity().getId()); parameters.setForceMaintenance(false); if ((item.getStoragePoolId())!= null) { parameters.setStoragePoolId(item.getStoragePoolId()); } list.add(parameters); } final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); confirmationModel.startProgress(); org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); confirmationModel.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.DeactivateStorageDomainWithOvfUpdate, list, (result) -> { confirmationModel.stopProgress(); setWindow(null); } }, null); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { switch (org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getActionState()) { case END_FAILURE : return org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getSucceeded()? org.ovirt.engine.core.common.AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_FAILED; default : return org.ovirt.engine.core.common.AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_FAILED; } }
private void handlePaused(final org.ovirt.engine.core.bll.storage.disk.image.TransparentT>.StateContext context) { final org.ovirt.engine.core.bll.storage.disk.image.TransparentImageCommand<T>.StateContext context = context.iterTimestamp; if ((context.getImageType())!= null) { extendTicketIfNecessary(context); } }
private void pollTransferStatus(final org.ovirt.engine.core.bll.storage.disk.image.TransportalImageCommand<T>.StateContext context) { if ((((context.entity.getVdsId()) == null) || ((context.getImagedTicketId()) == null)) || (!(org.ovirt.engine.core.common.FeatureSupported.getImageTicketSupported(vdsDao.get(context.getVdsId()).getClusterCompatibilityVersion())))) { return; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer upToDate imageTransfer = updateTransferStatusWithImageTicket(context.get(context.entity.getVdsId()).getClusterCompatibilityVersion())); if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Import)) { final org.ovirt.engine.core.common.businessentities.storage.ImageTransferImageTransfer = getImageTicket(transaction); if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Import)) { final org.ovirt.engine.core.common.businessentities.storage.ImageTransferImageTransferType imageTransfer = updateTransferStatusWithImageTicket(context); if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Import)) { final org.ovirt.engine.core.common.businessentities.storage.ImageTransferType storageType = new org.ovirt.engine.core.common.businessentities.storage.ImageTransferImage(); if (((disk.getImageType()) == null) || (((org.ovirt.engine.core.common.businessentities.storage.TransferType.ExportType.getTransferType()) == null)) { return; } } } }
private org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateTransferStatusWithImageTicket(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer oldImageTransfer) { org.ovirt.engine.core.common.businessentities.storage.ImageTicketInfo ticketInfo = ((org.ovirt.engine.core.common.businessentities.storage.ImageTicketInfo) (runVdsCommand(VDSCommandType.GetImageTicket, new org.ovirt.engine.core.common.vdscommands.GetImageTicketVDSCommandParameters(oldImageTransfer.getVdsId(), oldImageTransfer.getImageId())).getReturnValue())); if ((!(java.util.Objects.equals(oldImageTransfer.getActive(), ticketInfo.isActive()))) && (!(java.util.Objects.equals(oldImageTransfer.getTransferred(), ticketInfo.isActive())))) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updated = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); updatesFromTicket.setBytesSent(ticketInfo.getTransferred()); updatesFromTicket.setActive(ticketInfo.isActive()); org.ovirt.engine.core.common.action.VdcReturnValue returnValue = runInternalAction(ActionType.TransferImageStatus, new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId(), updatesFromTicket)); if ((returnValue == null) || (!(returnValue.getSucceeded()))) { log.debug("Failed to update transfer status.", oldImageTransfer; } return oldImageTransfer; } return oldImageTransfer; }
java.lang.String ACTION_TYPE_FAILED_PROVIDER_USED_IN_CLUSTER_MULTIPLE_TIMES();
java.lang.String ACTIONType LIMPORTED_IN_CLUSTER_IS_ONCE();
public org.ovirt.engine.core.bll.ValidationResult providerIsNoDefaultProvider() { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllClustersByDefaultNetworkProviderId(provider.getId()); return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private org.ovirt.engine.api.model.IscsiDetails mapLogicalUnitToIscsiDetails(org.ovirt.engine.api.model.LogicalUnit logicalUnit) { org.ovirt.engine.api.model.IscsiDetails iscsiDetails = new org.ovirt.engine.api.model.IscsiDetails(); iscsiDetails.setAddress(logicalUnit.getAddress()); iscsiDetails.setPort(logicalUnit.getAddress()); iscsiDetails.setTarget(logicalUnit.getTarget()); return iscsiDetails; }
private javax.ws.rs.core.Response performCreate(org.ovirt.engine.api.model.ImageTransfer imageTransfer, org.ovirt.engine.core.common.action.TransferDiskImageParameters params) { org.ovirt.engine.core.common.action.TransferDiskImageParameters params = new org.ovirt.engine.core.common.action.TransferDiskImageParameters(imageTransfer, params); if (imageTransfer.isSetHost()) { params.setVdsId(org.ovirt.engine.core.compat.Guid.createGuidFromString(imageTransfer.getHost().getId())); } return performCreate(ActionType.TransferDiskImage, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetImageTransferById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskForVolumeInfo(org.ovirt.engine.core.common.businessentities.storage.DiskImage disk) { return diskImageDao.getAncestor(disk.getImageId()); }
@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = getDisks(); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = getDisks(); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getDiskDao().get(diskImage.getId()); org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBase.setSucceeded(true); if ((org.ovirt.engine.core.bll.storage.domain.CinderCommandBase.getParameters().getStorageDomainId())!= null) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = getDiskImageDao().get(diskImage.getId()); } else { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = getDiskImageDao().get(diskImage.getId()); if ((disk!= null) && ((disk.getId().getId().equals(disk.getId())) && ((disk.getStorageDomainId().getId().getId())!= null)) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = getDiskImageDao().get(diskImage.getId()); if ((diskImage!= null) && ((diskImage.getId().getId().getId())!= null)) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImage = getDiskImageDao().get(diskImageId); org.ovirt.engine.core.bll.storage.StorageHandler.updateImageDao.getStorageDomainId(diskImage.getStorageDomainId(), getStorageDomainId(), diskImage.getStorageDomainId()); } } } }
@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.column.Context context, org.ovirt.engine.ui.uicommonweb.models.storage.LunModel value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { int additionalAvailableSizeSizeSizeSizeSize = value.getAdditionalAvailableSize(); java.lang.String additionalAvailableSizeSizeString = org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.messages.addSanStorage()); java.lang.String additionalAvailableSizeString = org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.messages.addSanStorage()); }
java.lang.String addOrExtendSanStorage();
@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskVmElement> diskVmElements = diskVmElementDao.getAllDiskVmElementsByDiskId(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters().getImageGroupID()); org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters = org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters(); moveDiskParameters.setCommandId(null); actionReturnValue = runInternalAction(actionType, moveDiskParameters, org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters().getVmId()); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Cluster cluster) { validateParameters(cluster, getMandatoryParameters()); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = getDataCenter(cluster); org.ovirt.engine.api.restapi.resource.ExternalProviderIdCompleter externalProviderIdCompleter = new org.ovirt.engine.api.restapi.resource.ExternalProviderIdCompleter(this); externalProviderIdCompleter.complete(cluster, dataCenter), new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetClusterById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); return performCreate(ActionType.AddCluster, createAddCommandParams(cluster, dataCenter), new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetClusterById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Host host) { validateParameters(host, "name", "address"); org.ovirt.engine.core.common.businessentities.VdsStatic staticHost = getMapper(org.ovirt.engine.api.model.Host.class, org.ovirt.engine.core.common.businessentities.VdsStatic.class).map(host, null); staticHost.setClusterId(getClusterId(host)); org.ovirt.engine.core.common.action.hostdeploy.AddVdsActionParameters addParams = new org.ovirt.engine.core.common.action.hostdeploy.AddVdsActionParameters(staticHost, host.getRootPassword()); if (host.isSetOverrideIptables()) { addParams.setOverrideFirewall(host.getExternalNetworkProvider()); } addParams.setHostedEngineDeployConfiguration(org.ovirt.engine.api.restapi.resource.HostResourceManager.getHostedEngineSessionIdUtil.getHostedEngineConfigurations(this)); addParams.setOverrideFirewall(org.ovirt.engine.api.restapi.resource.HostResourceActionParametersUtil.getHostedEngineDeployConfiguration(this)); addParams = ((org.ovirt.engine.core.common.action.hostdeploy.AddVdsActionParameters) (getMapper(org.ovirt.engine.api.restapi.resource.HostResourceActionParameters.class)); addParams.setHostedEngineDeployConfiguration(host, addParams, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcActionParametersBase, org.ovirt.engine.core.common.action.VdcActionParametersBase.class).map(host, org.ovirt.engine.core.compat.Guid.class).map(host, addParams, new org.ovirt.engine.core.common.action.HostParameters(host.getHostId(), org.ovirt.engine.core.
@java.lang.Override public org.ovirt.engine.api.model.Host update(org.ovirt.engine.api.model.Host incoming) { org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid> hostResolver = new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.QueryType.GetVdsByVdsId, org.ovirt.engine.core.common.queries.IdQueryParameters.class); org.ovirt.engine.core.common.businessentities.VDS entity = getEntity(hostResolver, true); org.ovirt.engine.api.restapi.resource.ExternalNetworkProviderConfigurationIdCompleter externalNetworkProviderConfigurationIdCompleter = new org.ovirt.engine.api.restapi.resource.ExternalNetworkProviderConfigurationIdCompleter(this); externalNetworkProviderConfigurationIdCompleter.complete(incoming.getExternalNetworkProviderConfigurations()); if ((incoming.getAgents()) == null) { entity.setFenceAgents(null); } if ((incoming.getCluster()) == null) { entity.setFenceAgents(null); } if ((incoming.isSetCluster()) && ((incoming.getCluster().isSetId()) || (incoming.getCluster().isSetName()))) { org.ovirt.engine.core.compat.Guid clusterId = lookupClusterId(clusterId, true); if (!(clusterId.equals(entity.getClusterId()))) { entity = getEntity(hostResolver, true); } } org.ovirt.engine.api.model.Host host = performUpdate(incoming, entity, map(entity), hostResolver, true); return host; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.Cluster update(org.ovirt.engine.api.model.Cluster incoming) { org.ovirt.engine.api.restapi.resource.ExternalProviderIdCompleter externalProviderIdCompleter = new org.ovirt.engine.api.restapi.resource.QueryIdResolver(this); externalProviderIdCompleter.complete(incoming.getExternalNetworkProviders()); return performUpdate(incoming, new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.QueryType.GetClusterById, org.ovirt.engine.core.common.queries.IdQueryParameters.class), ActionType.UpdateCluster, newUpdateParametersProvider()); }
@java.lang.Override public javax.ws.rs.core.Response exportToPathOnHost(org.ovirt.engine.api.model.Action action) { validateParameters(action, "host.id|name", "path"); org.ovirt.engine.core.common.action.ExportOvaParameters params = new org.ovirt.engine.core.common.action.ExportOvaParameters(); params.setEntityType(VmEntityType.VM); params.setEntityId(getHostId(action)); params.setProxyHostId(getHostId(action)); params.setPath(action.getPath()); return doAction(ActionType.ExportOva, params, action); }
protected void exportOva() { if ((oRepo)!= null) { throw new java.lang.Exception("Exception"); } }
@java.lang.Override protected void exportOva() { super.exportOva(); org.ovirt.engine.core.common.businessentities.VM selectedEntity = org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItem(); if ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getWindow())!= null) { return; } org.ovirt.engine.core.common.action.ExportOvaParameters parameters = new org.ovirt.engine.core.common.action.ExportOvaParameters(); parameters.setEntityType(VmEntityType.VM); parameters.setEntityId(selectedEntity.getId()); org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.setEntity(null); parameters.setEntity(null); org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getWindow().setEntity(null); org.ovirt.engine.ui.uicommonweb.models.vms.VmModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel(); parameters.setEntity(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().getConstants().cancel()); parameters.setEntity(null); model.setEntity(null); org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getWindow().setEntity(null); parameters.setEntity(null); org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getWindow().setEntity(null); model.setEntity(null); org.ovirt.engine.ui.uicommonweb.models.vms.VmModel.getWindow().setEntity(null); }
public boolean isUsingDistinct(java.lang.String obj) { if ((org.ovirt.engine.core.searchbackend.SearchObjectAutoCompleter.getEntitySearchInfo(obj))!= null) { return org.ovirt.engine.core.searchbackend.SearchObjectAutoCompleter.getEntitySearchInfo(obj); } return false; }
@org.ovirt.engine.ui.common.Source("images/prepare_maintenance.png") com.google.gwt.resources.client.ImageResource prepareToMaintenance();
public boolean isFieldUpdatable(java.lang.Enum<?> status, java.lang.String name, java.lang.Object fieldContainer, boolean hotsetEnabled) { boolean returnValue = true; if (!(isFieldUpdatable(name))) { if (((fieldContainer!= null) && ((container)!= null)) && (!(container.canUpdateField(fieldContainer, name, status)))) { returnValue = false; } else { java.util.Set<java.lang.String> values = dictionary.get(status); returnValue = (values!= null)? values.contains(name) : false; if (((!returnValue) && hotsetEnabled) && (status == (org.ovirt.engine.core.common.businessentities.VMStatus.Up))) { returnValue = isHotSetField(name); } } if (!returnValue) { org.ovirt.engine.core.utils.ObjectIdentityChecker.log.warn("Checker '{}' can not be updated when status is '{}'", name, status); } } return return returnValue; }
public boolean createOvfStoreDisks(int missingDiskCount) { boolean allOvfStoreDisksCreated = true; for (int i = 0; i < missingDiskCount; i++) { org.ovirt.engine.core.common.action.CreateOvfVolumeForStorageDomainCommandParameters parameters = createCreateOvfVolumeForStorageDomainParams(); org.ovirt.engine.core.common.action.CreateOvfVolumeForStorageDomainCommandParameters parameters = createCreateOvfVolumeForStorageDomain(parameters, org.ovirt.engine.core.bll.storage.disk.ProcessOvfUpdateForStorageDomainCommand.getContext().clone().withoutLock()); if (!(returnValue.getSucceeded())) { allOvfStoreDisksCreated = false; } } return AllOvfStore; }
@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.compat.Guid clusterId = null; if (action.isSetCluster()) { clusterId = getClusterId(action); } org.ovirt.engine.core.common.action.ImportVmTemplateParameters params = new org.ovirt.engine.core.common.action.ImportVmTemplateParameters(parent.getDataCenterId(destStorageDomainId), parent.getStorageDomainId(), destStorageDomainId, clusterId, getEntity()); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive()? action.isExclusive() : false)); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetTemplate()) && (action.getTemplate().isSetName())) { params.getVmTemplate().setName(action.getTemplate().getName()); } } return doAction(ActionType.ImportVmTemplate, params, action); }
@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.compat.Guid clusterId = null; if (action.isSetCluster()) { clusterId = getClusterId(action); } org.ovirt.engine.core.common.action.ImportVmParameters params = new org.ovirt.engine.core.common.action.ImportVmParameters(getEntity(), parent.getStorageDomainId(), destStorageDomainId, parent.getDataCenterId(destStorageDomainId), clusterId); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive()? action.isExclusive() : false)); boolean collapseSnapshots = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainVmResource.COLLAPSHOTS, true, false); if (collapseSnapshots) { params.setCopyCollapse(collapseSnapshots); } setVolumesTypeFormat(action); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } return doAction(ActionType.ImportVm, params, action); }
public void updateVDSInterfaceList(java.util.Collection<org.ovirt.engine.core.common.utils.PairQueryable<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface, org.ovirt.engine.core.common.businessentities.VDS>> pairCollection, java.lang.Runnable callback) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = pair.stream().map(pair) -> null; java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = pair.getSecond(); if ((pair.getSecond())!= null) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = pair.getSecond(); for (org.ovirt.engine.core.common.businessentities.VDS vds : pair.getSecond()) { if ((pair.getSecond())!= null) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> pair = pair.getSecond().getSecond(); if ((vdsList.getSecond())!= null) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = pair.getSecond().getSecond()); if ((vdsList!= null) && ((oldVds.getSecond())!= null)) { result.add(vdsList.getSecond().getSecond()); } } } } return null; }
public void updateVDSInterfaceList(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList, java.lang.Runnable callback) { java.util.List<org.ovirt.engine.core.common.queries.QueryType> types = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.queries.QueryParametersBase> ids = new java.util.ArrayList<>(); if (!(vdsList.isEmpty())) { java.util.List<org.ovirt.engine.core.common.queries.QueryParametersBase> ids = new java.util.ArrayList<>(); if (!(vdsList.isEmpty())) { java.util.List<org.ovirt.engine.core.common.queries.QueryParametersBase> ids = new java.util.ArrayList<>(); for (int i = 0; i < (result) { types.add(QueryType.GetVdsInterfacesByVdsId); i++) { java.util.List<org.ovirt.engine.core.common.queries.QueryReturnValue> values = result.getReturnValues(); if ((vdsList.size())!= null) { vdsList.get(i).getInterfaces().addAll(interfaceQueryValue.getReturnValue()); } } } }); } else { callback.run(); } }
private java.util.Optional<org.ovirt.engine.core.common.businessentities.storage.DiskImage> traceConfigurationDisk(org.ovirt.engine.core.compat.Guid spId, org.ovirt.engine.core.compat.Guid sdId, java.util.List<org.ovirt.engine.core.compat.Guid> diskIds) { if (diskIds == null) { return java.util.Optional.empty(); } return diskIds.stream().map((diskId) -> new org.ovirt.engine.core.bll.host.Pair<>(diskId, (((list<org.ovirt.engine.core.compat.Guid>) (resourceManager.runVdsCommand(VDSCommandType.GetVolumesList, new org.ovirt.engine.core.common.vdscommands.StoragePoolDomainAndGroupIdBaseVDSCommandParameters(spId, sdId, diskId)).getReturnValue()))).flatMap((diskToVolumes) -> diskToVolumes.getSecond().stream().map((volumeId) -> getImageInfo(spId, sdId, diskToVolumes.getFirst(), volumeId)))); }
private boolean isHostedEngineConfigVolume(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage) { final java.lang.String strConfigVolumeName = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.HostedEngineConfigurationVolumeGuid); final org.ovirt.engine.core.compat.Guid configImageId = (strConfigImageId.isEmpty())? null : org.ovirt.engine.core.compat.Guid.createGuidFromString(strConfigImageId); if (configImageId!= null) { return diskImage.getImageId().equals(configImageId); } return org.ovirt.engine.core.bll.host.HostedEngineConfigFetcher.HOSTED_ENGINE_CONFIGURATION_IMAGE.equals(diskImage.getDescription()); }
private void addImportedDevices(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vm.getStaticData(); vmStatic.setImages(new java.util.ArrayList()); vmStatic.setInterfaces(new java.util.ArrayList()); importUtils.updateGraphicsDevices(vmStatic, ConvertVmCommand.getStoragePool().getCompatibilityVersion()); ConvertVmCommand.getVmDeviceUtils().addImportedDevices(vmStatic, false, null); saveDiskVmElements(vm); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(this) { initImportClonedTemplateDisks(); addVmTemplateToDb(); mapDbUsers(); updateOriginalTemplateNameOnDerivedVms(); addVmInterfaces(); getCompensationContext().stateChanged(); org.ovirt.engine.core.bll.export.vmHandler.addVmInitToDB(getVmTemplate().getVmInit()); return null; }
public void attempToRestoreVmConfigurationFromSnapshot(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot, org.ovirt.engine.core.compat.Guid activeSnapshotId, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images, org.ovirt.engine.core.bll.context.CompensationContext compensationContext, org.ovirt.engine.core.common.businessentities.aaa.DbUser user, boolean withMemory) { boolean vmUpdatedFromConfiguration = false; if ((snapshot.getVmConfiguration())!= null) { vmUpdatedFromConfiguration = false; if ((snapshot.getVmConfiguration())!= null) { vmUpdatedFromConfiguration = updateVmFromConfiguration(vm, snapshot.getVmConfiguration()); if (images!= null) { vmUpdatedFromConfiguration &=updateImagesByConfiguration(vm, images); } } if (!vmUpdatedFromConfiguration) { if (images == null) { images = diskImageDao.getAllSnapshotsForVmSnapshot(snapshot.getId()); } vm.setImages(new java.util.ArrayList(images)); } vm.setAppList(snapshot.getAppList()); vmDynamicDao.update(vm.getDynamicData()); synchronizeDisksFromSnapshot(vm.getDynamicData()); synchronizeDisks(vm.getStaticData()); boolean macsInSnapshotAreExpectedToBeAddedToBeAllocated = SnapshotType.STATELESS.equals(snapshot.getType()); syncSizeInSnapshotAreExpectedToBeAddedToBeAllocated); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDeviceDao.getVmDeviceByVmId(vm.getId())) { if (vmInterfaceManager.getStaticData().getVmDeviceByVmId(vm.getId())) { if (vmInterfaceManager.getVmDeviceByVmId(vm.getId())) { vmDeviceDao.update(vmDevice); } } } }
private void processImages(final boolean useCopyImages) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(()).executeInNewTransaction(()).executeInNewTransaction(()).executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(()).executeInNewTransaction(()).executeInNewTransaction()), getParameters().isImportAsNewEntity(), false, null); if (getParameters().isImportAsNewEntity()) { getParameters().setVm(getVm().getStaticData(), getParameters().getVm().getId()); } return null; }
public void addImportedDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, boolean isImportAsNewEntity, boolean withMemory, java.util.List<org.ovirt.engine.core.compat.Guid> diskIdsToImport) { if (isImportAsNewEntity) { setNewIdInImportedCollections(vmBase); } java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToAdd = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToAdd = new java.util.ArrayList<>(); addImportedDiskDevicesToUpdate = new java.util.ArrayList<>(); addImportedDiskDevices(vmBase, vmDevicesToUpdate); addImportedInterfaces(vmBase, vmDevicesToUpdate); addImportedOtherDevices(vmDevicesToAdd); addImportedOtherDevices(vmDevicesToAdd); vmDeviceDao.saveAll(vmDevicesToAdd); }
private void addImportedDiskDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToUpdate, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToUpdate) { final org.ovirt.engine.core.compat.Guid vmId = vmBase.getId(); for (org.ovirt.engine.core.common.businessentities.storage.BaseDisk disk : getDisks(vmBase.getImages())) { org.ovirt.engine.core.compat.Guid deviceId = disk.getId(); if ((diskIdsToImport!= null) && (!(diskIdsToImport.contains(deviceId)))) { continue; } org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = addDiskDevice(vmId, deviceId, getVmDeviceAddress(vmBase, vmId)); updateImportedVmDevice(vmDevice, deviceId, deviceId, vmDevicesToUpdate); } }
@java.lang.Override public javax.ws.rs.core.Response register(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name"); validateVnicMappings(action); org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters params = new org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters(); org.ovirt.engine.api.restapi.types.ExternalRegistrationConfigurationMapper.mapFromModel(action.getRegistration(), params); params.setContainerId(guid); params.setStorageDomainId(parent.getStorageDomainId()); params.setClusterId(parent.getClusterId()); params.setClone()); params.setImagesExistOnTargetStorageDomain(true); params.setExternalVnicProfileMappings(org.ovirt.engine.api.restapi.types.ExternalVnicProfileMapper.mapFromModel(action.getVnicProfileMappings())); if ((action.isSetVm()) && (action.getTemplate().isSetName())) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getTemplate().isSetName())) { params.getVmTemplate().setName(action.getTemplate().getName()); } } if (action.isSetAllowPartialImport()) { params.setAllowPartial(action.isAllowPartialImport()); } return doAction(ActionType.ImportVmTemplateFromConfiguration, params, action); }
private void init() { leftBound.setEntity(((macRange.getMacFrom()) == null? "" : macRange.getMacFrom())); rightBound.setEntity(((macRange.getMacTo()) == null? "" : macRange.getMacTo())); rightBound.getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.MacPool>(new org.ovirt.engine.core.common.businessentities.MacPool>(new org.ovirt.engine.core.common.businessentities.MacPool.MacPoolEntity>(sender, sender, args) { @java.lang.Override public void onMacs(org.ovirt.engine.ui.uicommonweb.models.EntityModel.MacPoolModel model, org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel> model) { if (model.getMacs().getMac().getMac()) { macRange.setEntity(mac); } else { rightBound.getEntityChangedEvent().add(new org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel>()); } }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.macpool.MacRangeModel model) { driver.edit(model); }
private static org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable createAuditLogableForHost(org.ovirt.engine.core.common.businessentities.VDS vds) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.setVdsId(vds.getId()); logable.setVdsName(vds.getName()); logable.setVdsName(vds.getName()); logable.setVdsName(vds.getName()); return logable; }
private static void createAuditLog(java.util.List<java.lang.String> guids, org.ovirt.engine.core.common.AuditLogType type, org.ovirt.engine.core.common.businessentities.VDS vds) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = org.ovirt.engine.core.vdsbroker.vdsbroker.MultipathHealthHandler.createAuditLogableForHost(vds); if (guids.isEmpty()) { return; } org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = org.ovirt.engine.core.vdsbroker.vdsbroker.Multipath.createAuditLogableForHost(vds); org.ovirt.engine.core.vdsbroker.vdsbroker.Multipath.log.debug("Exception", type); logable.addCustomValue("MpathGuids", guid); org.ovirt.engine.core.vdsbroker.vdsbroker.Multipath.log(logable, type); }
private void processHeartbeat() { int incoming = (this.policy.getIncomingHeartbeat()) / 2; if (((this.isInInit()) && ((getHeartbeatTime()) > incoming)) && (this.half)) && (this.half)) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.info(((("Heartbeat from " + (getHostname())) + " for ": incoming) + " milliseconds...").getIncomingHeartbeat())) && (this.policy.isIncomingHeartbeatExeeded())) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.info(((("Timeout exceeded for " + (getHostname())) + " last message was ") + (this.policy.isIncomingHeartbeatExeeded())) + " milliseconds..."); this.disconnect("unexpected", e); } }
private void processHeartbeat() { if (((this.isInInit())) && (this.policy.isIncomingHeartbeat())) && (this.isIncomingHeartbeatExeeded())) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.info(("Heartbeat exceeded for " + (getHostname())) + " last response was ") + (getHeartbeatTime())) + " milliseconds."); this.disconnect("Retuned", exceeded()); this.disconnect("Timeout", exceeded); } }
@java.lang.Override protected void executeCommand() { java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = org.ovirt.engine.core.bll.CreateOvaCommand.getParameters().getDisks(); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> diskIdToPath = prepareImages(disks); fillDiskAppliedSize(disks); org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.CreateOvaCommand.getParameters().getVm(); vmHandler.updateNetworkInterfacesFromDb(vm); vmHandler.updateNetworkInterfacesFromDb(vm); vmHandler.updateVmInitFromDB(vm); org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData fullEntityOvfData = new org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData(vm); fullEntityOvfData.setDiskImages(new java.util.ArrayList(disks)); fullEntityOvfData.setInterfaces(vm.getInterfaces()); log.debug("Error OVF: {}", ovf); boolean succeeded = runAnsiblePackOvaRead(vm.getName(), ovf, disks, diskIdToPath); org.ovirt.engine.core.bll.CreateOvaCommand.setSucceeded(succeeded); }
@java.lang.Override protected void writeOS() { _writer.writeStartElement("OperatingSystemSection"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.Ovf_PREFIX, "id", java.lang.Integer.toString(vmBase.getOsId()))); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.Ovf.Ovf_PREFIX, "required", "false"); _writer.writeElement("Info", org.ovirt.engine.core.utils.ovf.Ovf_PREFIX, "required", "false"); _writer.writeElement("Description", osRepository.getUniqueOsNames().get(vmBase.getOsId())); _writer.writeEndElement(); }
private java.lang.String runAnsibleQueryOvaInfoLoadbook() { org.ovirt.engine.core.common.utils.AnibleCommandBuilder command = new org.ovirt.engine.core.common.utils.AnibleCommandBuilder().hostnames(vdsStaticDao.get(org.ovirt.engine.core.bll.GetVmFromOvaQuery.getParameters().getVdsId()).buildLogging(new org.ovirt.engine.core.bll.GetVmFromOvaQuery.getParameters().getPath())).buildLogging(new org.ovirt.engine.core.common.utils.Pair("ovirt_query_query_path", org.ovirt.engine.core.bll.GetVmFromOvaQuery.getParameters().getPath())).enableLogging(new org.ovirt.engine.core.common.utils.Pair(("ovirt_query_query_ova_path", org.ovirt.engine.core.bll.GetVmFromOvaQuery.getParameters().getPath())).enableLogging(org.ovirt.engine.core.common.utils.AncestibleReturnValue.OK); } catch (java.io.IOException | java.lang.InterruptedException e) { log.error("Failed to query OVA info", e); return null; } return s; }
private org.ovirt.engine.core.common.businessentities.VM readVmFromOva(java.lang.String ovf) { if (ovf == null) { return null; } try { return ovfHelper.readVmFromOva(ovf); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.error("failed to parse a given ovf configuration: \n" + ovf), e); org.ovirt.engine.core.bll.GetVmFromOvaQuery.getQueryReturnValue().setExceptionString(("failed to parse a given ovf configuration " + (e.getMessage()))); return null; } }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.VM vm = getOvaInfoUsingAnsible(); setReturnValue(vm); org.ovirt.engine.core.bll.GetVmFromOvaQuery.getQueryReturnValue().setSucceeded(((vm!= null? vm.getParameters().getSucceeded() : null)); }
private java.lang.String parseOvfFromStdout(java.lang.String stdout) { if (org.apache.commons.lang.StringUtils.isEmpty(java.lang.String.valueOf(stdout)) { return null; } java.util.regex.Matcher m = org.ovirt.engine.core.bll.GetVmFromOvaQuery.OvaQuery.OvfWithP_PATTERN.matcher(stdout); if ((m.matches()) && ((m.groupCount()) > 0)) { java.lang.String ovf = m.group(1); ovf = ovf.replaceAll("\\\\\"", "\""); return ovf; } log.error("Failed to parse OVF from:\n{}", "\"", "\""); return ovf; }
private void setCookie(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response, final java.util.Locale userLocale) { javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(org.ovirt.engine.core.utils.servlet.LocaleFilter.LOCALE, userLocale.toString()); cookie.setSecure("https".equals(request.getScheme())); cookie.setPath(org.ovirt.engine.core.utils.servlet.LocaleFilter.ROOT_PATH); cookie.setMaxAge(java.lang.Integer.MAX_VALUE); cookie.setHttpOnly(true); response.addCookie(cookie); }
private java.lang.String authenticateUser(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, org.ovirt.engine.core.sso.utils.Credentials userCredentials) throws java.io.IOException, javax.servlet.ServletException, org.ovirt.engine.core.sso.utils.AuthenticationException { if ((userCredentials == null) || (!(org.ovirt.engine.core.sso.utils.SsoUtils.areCredentialsValid(request, userCredentials, true)))) { throw new org.ovirt.engine.core.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_INVALID_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } try { org.ovirt.engine.core.utils.servlet.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.LOCALE_INVALID_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } catch (java.lang.Exception ex) { throw ex; } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.utils.AuthenticationUtils.handleCredentials(ssoContext, request, request, userCredentials); return (request.getContextPath()) + (org.ovirt.engine.core.utils.AuthenticationException ex) { throw ex; } catch (java.lang.Exception ex) { org.ovirt.engine.core.utils.AuthenticationException ex) { throw ex; } } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.utils.AuthenticationException ex) { throw ex; } }
private void setLangPageShown(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response, boolean value) { javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(org.ovirt.engine.core.utils.servlet.DocsServlet.LANG_PAGE_SHOWN, java.lang.Boolean.toString(value)); cookie.setSecure("https".equals(request.getScheme())); cookie.setPath(getServletContext().getContextPath()); cookie.setHttpOnly(true); response.addCookie(cookie); }
@org.junit.Test public void networkNameNotTakenByVdsmName() { org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network(); network.setVdsmName("vm_name"); org.ovirt.engine.core.common.businessentities.network.Network network2 = new org.ovirt.engine.core.common.businessentities.network.Network(); network2.setVdsmName("vdsm-name"); network2.setId(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.OTHER_GUID); network2.setId(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.OTHER_GUID); when(networkDao.getAllForDataCenter(any())).thenReturn(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); assertThat(validator.networkNameNotUsedAsVdsmName(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
@org.junit.Test public void networkNameTakenByVdsmName() { org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network(); network.setVdsmName("vdsm-name"); org.ovirt.engine.core.common.businessentities.network.Network network2 = new org.ovirt.engine.core.common.businessentities.network.Network(); network2.setVdsmName("vdsm-name"); network2.setName("vdsm-name"); network2.setId(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.OTHER_GUID); when(networkDao.getAllForDataCenter(any())).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.OTHER_GUID); assertThat(validator.networkNameNotUsedAsVdsmName(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.NETWORK_NAME_USED_AS_VDSM_NETWORK_NAME)); }
public org.ovirt.engine.core.common.utils.ansible.SibleReturnValue runCommand(org.ovirt.engine.core.common.utils.Anible.SaneCommandBuilder command, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>... envVars) throws java.io.IOException, java.lang.InterruptedException { return runCommand(command, org.ovirt.engine.core.common.utils.ansible.Anter.ANSIBLE_PLAYBOOK_TIMEOUT, envVAR__NAME, envVAR); }
@java.lang.Override public javax.ws.rs.core.Response iscsiLogin(org.ovirt.engine.api.model.Action action) { validateParameters(action, "iscsi.address", "iscsi.target"); org.ovirt.engine.core.common.businessentities.StorageServerConnections cnx = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); org.ovirt.engine.api.model.IscsiDetails iscsiDetails = action.getIscsi(); cnx.setConnection(iscsiDetails.getAddress()); cnx.setIqn(iscsiDetails.getTarget()); cnx.setStorageType(iscsiDetails.getPort().toString()); if (iscsiDetails.isSetPort()) { cnx.setPort(iscsiDetails.getPortal().toString()); } else { cnx.setPort(org.ovirt.engine.api.restapi.resource.BackendHostResource.DEFAULT_ISCSI_PORT); } if (iscsiDetails.isSetPortal()) { cnx.setPortal(iscsiDetails.getPortal().toString()); } if (iscsiDetails.isSetUsername()) { cnx.setUserName(iscsiDetails.getUsername()); } org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase connectionPars = new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase(cnx, guid, false); return doAction(ActionType.ConnectStorageToVds, connectionPars, action); }
private void handleFinalizingFailure(final org.ovirt.engine.core.bll.storage.disk.image.Transport mirrorImageCommand<T>.StateContext context) { log.error("Failed failed transfer. {}", getTransferDescription()); stopImageTransferSession(context); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageGroupID()))) { setImageStatus(((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Upload)? org.ovirt.engine.core.common.businessentities.storage.ImageStatus.OK : org.ovirt.engine.core.common.businessentities.storage.ImageStatus.OK)); } if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Import)) { tearDownImage(context.entity.getVdsId()); } updateEntity(context.entity.getVdsId()); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterWebhookAdd(java.lang.String url, java.lang.String username, java.lang.String authToken) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webadminEvent.webadminAdd").build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }
java.lang.String GlusterUpdateWebhookException();
@java.lang.Override protected void executeVdsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.gluster.AddGlusterWebhookVDSCommand.getBroker().glusterWebhookAdd(org.ovirt.engine.core.vdsbroker.gluster.AddGlusterWebhookVDSCommand.getParameters().getWebhookUrl(), null); status = org.ovirt.engine.core.vdsbroker.gluster.AddGlusterWebhookVDSCommand.proceedProxyReturnValue(); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterWebhookDelete(java.lang.String url) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webhookDelete").build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }
java.lang.String GlusterSyncWebhookException();
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterWebhookSync() { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webhookSync").build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }
java.lang.String GlusterAddWebhookException();
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterWebhookUpdate(java.lang.String url, java.lang.String username, java.lang.String authToken) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webadminEvent.webadmin.webadmin.jsonrpcRequestBuilder("GlusterEvent.webclient", request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }
java.lang.String GlusterDeleteWebhookException();
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (!(validate())) { return false; } if (!(validate(importValidator.validateUnregisteredEntity(vmFromConfiguration, ovfEntityData)))) { return false; } org.ovirt.engine.core.bll.validator.ImportValidator importValidator = org.ovirt.engine.core.bll.ExportVmFromConfigurationCommand.getImportValidator(); if (!(validate(importValidator.validateUnregisteredEntity(vmFromConfiguration, ovfEntityData)))) { return false; } if (!(validate(importValidator.validateStorageExistForUnregisteredEntity(org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getImages(), org.ovirt.engine.core.bll.ExportVmFromConfigurationCommand.getParameters().isAllowPartialImport(), imageToDestinationDomainMap, failedDisksToImportForAuditLog)))) { return false; } if (!(validate(importValidator.validateStorageExistsForMemoryDisks(org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getVm().getSnapshots(), org.ovirt.engine.core.bll.ExportVmFromConfigurationCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getVm().getImages()); } return true; }
types.VnicProfileMapping[] vnicProfileMappings();
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.Network network) { return getCustomMapSqlParameterSource().addValue("addr", network.getAddr()).addValue("description", network.getDescription()).addValue("free_text_comment", network.getComment()).addValue("id", network.getName()).addValue("name", network.getName()).addValue("name", network.getName()).addValue("type", network.getType()).addValue("type", network.getType()).addValue("type", network.getType()).addValue("type", network.getType()).addValue("vlan_id", network.getVlanId()).addValue("stp", network.getStp()).addValue("vm_pool_id", network.getDataCenterId()).addValue("mtu", network.isVmNetwork()).addValue("vm_network", network.isVmNetwork()).addValue("provider_network_external_id", ((network.getProvidedBy()) == null? null : network.isVmNetwork()).addValue("provider_network_external_id", ((network.getProvidedBy()) == null? null : network.getProvidedBy().getExternalId()).addValue("qos_id", network.getProvidedBy().getExternalId())); }
@java.lang.Override protected void executeCommand() { if (org.ovirt.engine.core.bll.provider.network.AddNetworkProviderCommand.getNetwork().isSetProviderPhysicalNetworkId()) { loadPhysicalNetworkProviderParameters(org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork()); } org.ovirt.engine.core.bll.provider.network.NetworkProviderProxy proxy = providerProxyFactory.create(getProvider()); org.ovirt.engine.core.bll.provider.network.AddNetworkProviderCommand.getNetwork().getProvidedBy().setExternalId(proxy.add(org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork())); org.ovirt.engine.core.bll.provider.network.AddNetworkProviderCommand.getNetwork().setVlanId(null); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() { super.executeCommand(); getReturnValue().setActionReturnValue(getNetwork().getId()); return null; }
private void loadPhysicalNetworkProviderParameters(org.ovirt.engine.core.common.businessentities.network.Network network) { org.ovirt.engine.core.common.businessentities.network.Network physicalProviderNetwork = networkDao.get(network.getProviderPhysicalNetworkId()); network.setVlanId(physicalProviderNetwork.getVlanId()); network.setLabel(physicalProviderNetwork.getVlanName()); }
private java.lang.String getAlertTooltipText(org.ovirt.engine.core.common.businessentities.VDS vds) { return "TODOBILITY tooltip tooltip tooltip tooltip"); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VDS vds, com.google.gwt.dom.client.Element parent, com.google.gwt.dom.client.NativeEvent event) { com.google.gwt.dom.client.Element target = event.getEventTarget().cast(); if (ImageElement.TAG.TAG.equals(target.getTagName())) { switch (org.ovirt.engine.ui.common.utils.JqueryUtils.index(target)) { case 0 : return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.webadmin.widget.table.column.StatusColumn.constants.statusText(vds.getStatus())); case 1 : return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.webadmin.widget.table.column.AlertColumn.constants.constants.statusText(vds)); } } return null; }
@java.lang.SuppressWarnings("unchecked") public void initModelSortHandler(org.ovirt.engine.ui.uicommonweb.models.SortedListModel<T> sortedModel) { org.ovirt.engine.ui.common.widget.table.ColumnResizeCellTable.addColumnSortHandler(event, sortedModel)); }
@org.junit.Test public void testDiscardsNotSupported() { testDiscardsFieldParsing(Version.v4_0, null); }
@org.junit.Test public void discardFieldIsParsed() { testDiscardsFieldParsing(Version.v4_1, 1024L); }
@org.junit.Test public void sparsifyNotSupportedWipeAfterDeleteIsOn() { createStorageDomainForDisk(StorageType.ISCSI); disk.setWipeAfterDelete(true); assertThat(validator.isSparsifySupported(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_DISK_SPARSIFY_NOT_SUPPORTED_BY_UNDERLYING_STORAGE_WHENABLED)); }
public void applySearchString(java.lang.String searchString) { if ((modelProvider.getModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { @java.lang.SuppressWarnings("unchecked") java.lang.SuppressWarnings("unchecked") org.ovirt.engine.ui.uicommonweb.models.EntityModel<?>> listModel = modelProvider.getModel(); if ((org.ovirt.engine.core.compat.StringHelper.isNotNullOrEmpty(searchString)) && (searchString.startsWith(listModel.getDefaultSearchString()))) { listModel.setSearchString(searchString); listModel.getSearchCommand().execute(); org.ovirt.engine.ui.uicommonweb.models.EntityModelSelectionChangeEvent.fire(((com.google.gwt.event.shared.HasHandlers) (org.ovirt.engine.core.common.utils.HasHandlers) (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.getEventBus()))), listModel); } } }
private boolean isBookmarkForCurrentPlace(org.ovirt.engine.core.common.businessentities.Bookmark bookmark, org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter<?,?> currentPlacePresenter) { java.lang.String searchString = bookmark.getValue(); if (searchString!= null) { java.lang.String[] split = searchString.split(":"); java.lang.String defaultSearchString = split[0]; result = search[0]; result.placeMatch(result); } if ((currentPlacePresenter!= null) && (currentPlacePresenter.placeMatches(result))) { return true; } } return false; }
private java.lang.String getBrandingString(java.lang.String searchString) { java.lang.String[] split = searchString.split(":"); java.lang.String[] split = searchString.split(":"); if ((split.length) > 0) { java.lang.String defaultSearchString = split[0]; result = search[0]; search="; search="; search="; search="; search="; search = searchQuery.replaceAll("%3D", "\\\\2"); result += searchQuery; } return result; }
@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.column.Context context, org.ovirt.engine.ui.uicommonweb.models.storage.LunModel value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { int availableSizeToAdd = value.getAdditionalAvailableSize(); java.lang.String availableSizeToAddString = org.ovirt.engine.ui.common.widget.table.column.AbstractLunAvailableSizeInGB(availableSizeToAdd); boolean isGrayedOut = value.getIsGrayedOut(); java.lang.String inputId = id + "_input"; com.google.gwt.safehtml.shared.SafeHtml input; if ((!isGrayedOut) && (!(value.getIsSelected()))) { input = templates.tooggledDown(inputId, org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn.constants.addSanStorage()); } else if (!isGrayedOut) { input = templates.toggledDown(inputId, org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn.constants.addSanStorage()); } else if (!(value.getIsIncluded())) { input = templates.noButton(inputId, org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn.constants.notAvailableLabel(), "color:gray", inputId); } else if (availableSizeToAdd == 0) { input = templates.noButton(org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn.constants.notAvailableLabel(), "color:gray", inputId); } else if (availableSizeToAdd == 0) { input = templates.noButton(org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn.constants.cannotExtendSanStorage(), "color:gray", inputId); } }
private boolean validateStoragePropertiesUpdate() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(); if ((((!(checkStorageDomainStatusNotEqual(StorageDomainStatus.Locked))) || (!(validateStorageNameUpdate()))) || (!(validateStorageNameUpdate()))) || (!(validate(validate(storageDomainValidator.storageDomainValidator.LOW_LOW_STORAGE_Locked))) { return false; } java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("description"); props.remove("description"); props.remove("comment"); props.remove("warningLowSpaceIndicator"); props.remove("warningLowSpaceIndicator"); props.remove("warningLowSpaceIndicator"); props.remove("backup"); if (!(props.isEmpty())) { log.warn("Error was an attempt to update the following fields although they are not allowed to be updated: {}", org.apache.commons.lang.StringUtils.join(props, ",")); return failValidation(EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }
private boolean validate(java.lang.Boolean vm) { return validate(new org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator(org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getVm().getStoragePoolId(), java.util.Collections.stream.convert(org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getVm().getDiskMap().values().values().stream().stream().filter(DisksFilter.Only_IMAGES).map(org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getVm().getLockedStorageDomainId()).map(java.util.Collections.singletonMap(java.util.Collections.singletonMap(java.util.Collections.singletonMap(java.util.Objects.singletonMap(java.util.Objects.class), java.util.Collections.singletonList(java.lang.Objects.class), java.util.Collections.singletonList())); }
java.lang.String storageIscsiYouCanPerformActionsLabel();
java.lang.String storageIscsiYouCanRemoveLUNsLabel();
@java.lang.Override public final com.google.gwt.safehtml.shared.SafeHtml getValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel object) { org.ovirt.engine.ui.common.widget.table.cell.ScrollableTextCell.Cell.CellTemplate template = com.google.gwt.core.client.GWT.create(ScrollableTextCell.class); java.lang.String color = ""; if ((!(object.getIsIncluded())) && ((!(object.getIsIncluded())) || (object.getIsSelected()))) { color = "gray"; } else if ((!(object.getIsAccessible())) && (!(object.getIsAccessible()))) { color = "gray"; } else if ((!(object.getIsAccessible())) && (!(object.getIsGrayed()))) { color = "white"; } else { color = "black"; } } return template.input(getRawValue(object), ("color: " + color), com.google.gwt.user.client.DOM.createUniqueId()); }
private void addAbstractLunAddOrExtendColumn(org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable<org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>> table, java.lang.String headerString) { org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn addOrExtendColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn() { @java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.storage.LunModel getValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel object) { return object; } }; addOrExtendColumn(addOrExtendColumn, headerString, "95px"); }
private void addAbstractLunAddOrExtendColumn(org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable<org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>> table, java.lang.String headerString) { table.addColumn(new org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn() { @java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.storage.LunModel getValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel object) { return object; } }, headerString, "85px"); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.IscsiStorageModel object) { driver.edit(object); initLists(object); object.getPropertyChangedEvent().addListener((ev, sender, sender, args) -> { java.lang.String propName = args.propertyName; if (propName.equals("IsValid")) { onIsValidPropertyChange(object); } else if (propName.equals("IsGrouppedByTarget")) { updateListByGropping(object); } } iscsiLunTargetToLunTab.edit(object); iscsiLunTab.edit(object); targetsToLunTab.addClickHandler((event) -> { iscsiLunToTargetView.disableItemsUpdate(); object.setIsGrouppedByTarget(true); } }); iscsiTargetToTargetsTab.addClickHandler((event) -> { iscsiTargetToLun(); object.setIsGrouppedByTarget(true); }
private java.net.HttpURLConnection getProxyConnection(java.lang.String url) { org.ovirt.engine.core.uutils.net.HttpURLConnectionBuilder builder; java.net.HttpURLConnection connection; try { builder = new org.ovirt.engine.core.uutils.net.HttpURLConnectionBuilder().setURL(url); builder.setTrustStore(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKITrustStore().getAbsolutePath()).setTrustStorePassword(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKITrustStorePassword()).setTrustStorePassword(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKITrustStorePassword()).setHttpsProtocol(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKITrustStorePassword()).setHttpsProtocol(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKITrustStoreType()).setHttpsProtocol(org.ovirt.engine.core.utils.linq.EngineLocalConfig.getInstance().getPKITrustStoreType()).setHttpsProtocol(org.ovirt.engine.core.utils.linq.EngineLocalConfig.getInstance().getKey(), ex.getMessage())); } catch (java.lang.Exception ex) { throw new java.lang.RuntimeException(java.lang.String.format("Failed to communicate with ovirt-proxy: %s", ex.getMessage())); } }
private java.util.Map<java.lang.String, java.lang.Object> createDiskUuidMap(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage) { java.util.Map<java.lang.String, java.lang.Object> diskUuid = new java.util.HashMap<>(); diskUuid.put("poolID", diskImage.getStorageIds().get(0)); diskUuid.put("domainID", diskImage.getStorageIds().get(0)); diskUuid.put("imageID", diskImage.getIds().get(0)); diskUuid.put("volumeID", diskUuid.getId()); return diskUuid; }
@java.lang.Override protected boolean validate() { if (org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.shouldSkipCommandExecutionCached()) { return true; } if ((org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if (!(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.canRunActionOnNonManagedVm())) { return false; } if (!(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().isRunningOrPaused())) { return org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.failVmStatusIllegal(); } if (((isoDomainListSynchronizer.findActiveISODomain(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getStoragePoolId())) == null) && (!(org.apache.commons.lang.StringUtils.isEmpty(cdImagePath)))) { return failValidation(EngineMessage.VM_CANNOT_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO); } if ((org.apache.commons.lang.StringUtils.isNotEmpty(cdImagePath)) && (!(org.apache.commons.lang.StringUtils.endsWithIgnoreCase(cdImagePath, ValidationUtils.ISO_SUFFIX))) || (ValidationUtils.GUIDS[1)))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_INVALID_CDROM_DISK_FORMAT); } return true; }
private void setup(org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdTest.ExpectedError expectedError) { org.ovirt.engine.core.compat.Guid validator = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); validVds.setId(validateGuid); if (expectedError == (org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdTest.ExpectedError.NOT_SUPPORTED)) { validVds.setClusterCompatibilityVersion(Version.v4_2); } else { validVds.setClusterCompatibilityVersion(Version.v4_2); } org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); knics.setName(vdsInterfacesNames[0]); when(getQueryParameters().getId()).thenReturn(validateGuid(validGuid))).thenReturn(validVds); when(vdsDao.getAllInterfacesForVds(eq(validGuid))).thenReturn(java.util.Arrays.asList(eth0,eth1)); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); returnValue.setName(eth0); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); if ((org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface) (vdsNetworkInterface.getId())) { vds.setId(java.util.Arrays.asList(vds.getId())); } }
private java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.LldapInfo> createEmptyResponse() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ifaces = new java.util.HashMap<>(); java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.LldapNetworkInterface> result = new java.util.HashMap<>(); if ((ifaces!= null) && (!(ifaces.isEmpty()))) { ifaces.put(ifaces, null)); } return result; }
@org.junit.Test public void testExecuteQueryNotSupported() { setup(org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdTest.ExpectedError.NOT_SUPPORTED); getQuery().executeQueryCommand(); java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.LldInfo> returnValue = getQuery().getQueryReturnValue().getReturnValue(); assertTrue(checkEmptyValues(returnValue)); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.getParameters().getId(); org.ovirt.engine.core.common.vdscommands.GetLdVDSCommandParameters cmd = runVdsCommand(VDSCommandType.GetLllPlvInfoQuery.getVldp, new org.ovirt.engine.core.common.vdscommands.GetLldpVDSCommandParameters(vdsId, name); org.ovirt.engine.core.common.vdscommands.GetLldpVDSCommandParameters cmd = runVdsCommand(VDSCommandType.GetLldp, lldpVDSCommandParameters); org.ovirt.engine.core.common.vdscommands.GetLldpVDSCommandParameters cmd = runVdsCommand(VDSCommandType.GetLldp, lldpVDSCommandParameters); org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.getQueryReturnValue().setReturnValue(command.getReturnValue()); org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.getQueryReturnValue().setReturnValue(createEmptyResponse()); }
private void addGlusterWebhook(org.ovirt.engine.core.common.businessentities.VDS vds) { try { backend.runInternalAction(VdcActionType.AddGlusterHookInternal, new org.ovirt.engine.core.common.action.gluster.GlusterClusterParameters(vds.getClusterId())); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Could not refresh storage devices from gluster host '{}'", vds.getName()); } }
public boolean initGlusterHost(org.ovirt.engine.core.common.businessentities.VDS vds) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetGlusterHostUUID, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(vds.getId())); if ((returnValue.getSucceeded()) && ((returnValue.getReturnValue())!= null)) { org.ovirt.engine.core.compat.Guid addedServerUuid = org.ovirt.engine.core.compat.Guid.createGuidFromString(((java.lang.String) (returnValue.getReturnValue()))); if (hostUuidExists(vds, addedServerUuid)) { setNonOperational(vds, NonOperationalReason.GLUSTER_HOST_UUID_ALREADY_EXISTS, null); return false; } saveGlusterHostUuid(vds, addedServerUuid); } else { setNonOperational(vds); boolean ret = initGlusterPeerProcess(vds); glusterServerDao.updatePeerStatus(vds); glusterServerDao.updatePeerStatus(vds); } return ret; }
private void logBrickStatusChange(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick, final org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus fetchedStatus) { log.debug("Gluster status of brick '{}' changed from brick '{}' changed from '{}' to '{}'", brick.getQualifiedName(), volume.getName(), brick.getStatus(), fetchedStatus); logUtil.logAuditMessage(volume.getClusterId(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_CHANGED, new java.util.HashMap<java.lang.String, java.lang.String>() { { put(GlusterConstants.BRICK_PATH, brick.getQualifiedName()); put(GlusterConstants.OPTION_OLD_VALUE, brick.getStatus().toString()); put(GlusterConstants.OPTION_NEW_VALUE, fetchedStatus.toString()); put(GlusterConstants.OPTION_NEW_VALUE, fetchedStatus.toString()); put("source", "cli"); } }); if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.DOWN)) { logUtil.logAuditMessage(volume.getClusterId(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_DOWN, brick.getId(), brick.getQualifiedName()); } else if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.removeAlertsByBrickIdLogType(brick.getId(), AuditLogType.GLUSTER_BRICK_STATUS_DOWN); } }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession getGeoRepSession(org.ovirt.engine.core.compat.Guid volumeId, java.lang.String slaveHostName, java.lang.String slaveVolumeName) { return getCallsHandler().executeRead("GetGlusterGeoRepSessionBySlaveHostAndVolume", org.ovirt.engine.core.dao.gluster.GlusterGeoRepDaoImpl.georepSessionRowMapper, getCustomMapSqlParameterSource().addValue("master_volume_id", slaveHostName).addValue("slave_host_name", slaveHostName).addValue("slave_name", slaveHostName).addValue("slave_name", slaveVolumeName)); }
private void logBrickStatusChange(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity vol, org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus status, org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick) { logUtil.logAuditMessage(vol.getClusterId(), vol, null, AuditLogType.GLUSTER_BRICK_STATUS_CHANGED, new java.util.HashMap<java.lang.String, java.lang.String>() { put(GlusterConstants.BRICK_PATH, brick.getQualifiedName()); put(GlusterConstants.OPTION_OLD_VALUE, brick.getStatus().toString()); put(GlusterConstants.OPTION_NEW_VALUE, status.toString()); put(GlusterConstants.OPTION_NEW_VALUE, status.toString()); put(GlusterConstants.OPTION_NEW_VALUE, status.toString()); } }); }
public boolean isDummyProvider() { return ((type) == (org.ovirt.engine.core.common.businessentities.ProviderType.EXTERNAL_NETWORK)) && (((url) == null) || (url.isEmpty())); }
public org.ovirt.engine.core.bll.ValidationResult cpuTypeSupportsVirtService() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_CPU_NOT_FOUND).when(((cluster.supportsVirtService()) && ((cluster.getCpuName())!= null)) && (!(cpuExists())))); }
@java.lang.Override protected void executeCommand() { int missingDiskCount = getMissingDiskCount(); if (missingDiskCount <= 0) { setOvfUpdateStep(OvfUpdateStep.OvfUpdateStep.O_UPLOAD); updateOvfStoreContent(); setSucceeded(failedOvfDisks.isEmpty()); } else { setOvfUpdateStep(OvfUpdateStep.OvfUpdateDisks(getMissingDiskCount())); } }
protected abstract void selectPhysicalDatacentersToVmNetwork() { if ((getVm().getVmInterface())!= null) { return; } }
private void onPhysicalRadioButtonChange(java.lang.Object sender) { if (sender == (getPhysicalNetworkDatacentreRB())) { getNeutronPhysicalNetwork().setIsChangeable(false); getNeutronPhysicalNetwork().setIsChangeable(true); getPhysicalNetworkDatacentre().setIsChangeable(true); } else if (sender == (getPhysicalNetworkCustomRB())) { getNeutronPhysicalNetwork().setIsChangeable(true); getPhysicalNetworkDatacentre().setIsChangeable(false); } else if (sender == (getPhysicalNetworkCustomRB())) { boolean datacentre = getPhysicalNetworkDatacentre().getEntity(); getPhysicalNetworkCustomRB().setEntity(true); getPhysicalNetworkCustomRB().setEntity(false); getPhysicalNetworkDatacentre().setEntity(datacentre, false); } }
public void setPhysicalNetworkDatacenters(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> physicalNetworkDatacenters) { this.physicalNetworkQos = physicalNetworkDatacenters; }
private boolean isConnectedToPhysicalNetwork() { final org.ovirt.engine.core.common.businessentities.network.Network network = getNetwork(); return ((getNetwork())!= null) && ((getNetwork().getNetwork().getId()) == null)) && ((getNetwork().getId())!= null)) && (getNetwork().getId().equals(getNetwork().getId())); }
@java.lang.Override public void updateVisibility() { messageLabel.setVisible(false); externalLabel.setVisible(org.ovirt.engine.ui.uicommonweb.models.ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly)); onPhysicalNetworkChange(); }
@java.lang.Override protected void selectPhysicalDatacenters() { final org.ovirt.engine.core.common.businessentities.network.Network network = getNetwork(); if ((getNetwork())!= null) { final org.ovirt.engine.core.common.businessentities.network.Network network = getNetwork(); network.setNetworkQos(getNetwork()); } }
public void setPhysicalNetworkCustomRB(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> physicalNetworkCustomRB) { this.hwCustomRB = physicalNetworkCustomRB; }
@java.lang.Override protected void selectPhysicalDatacenters(java.lang.String getDatacenters())); getDatacenters().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(getDatacenters())); }
@java.lang.Override protected void executeSave() { final org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters parameters = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(getSelectedDc().getId(), getNetwork()); parameters.setVnicProfileRequired(false); if (getExternal().getEntity()) { org.ovirt.engine.core.common.businessentities.network.Provider<?> externalProvider = getExternalProviders().getSelectedItem(); org.ovirt.engine.core.common.businessentities.network.ProviderNetwork providerNetwork = new org.ovirt.engine.core.common.businessentities.network.Provider(); providerNetwork.setProviderId(externalProvider.getId()); getNetwork().setProvidedBy(providerNetwork); if (getPhysicalNetwork().getEntity()) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.AddNetwork, parameters, addNetworkCallback(), null); } else { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.AddNetwork, parameters, addNetworkCallback(), null); } }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getVmNetwork() { return physicalNetwork; }
@java.lang.Override protected void onExportChanged() { super.onExportChanged(); if (getExternal().getEntity()) { getHasVLanTag().setIsChangeable(false); getIsVmNetwork().setIsChangeable(false); getNetworkLabel().setIsChangeable(false); getNeutronPhysicalNetwork().setIsChangeable(false); } }
public void setPhysicalNetwork(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> logicalNetwork) { this.physicalNetwork = physicalNetwork; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getPhysicalNetworkCustomRB() { return physicalNetworkCustomRB; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getPhysicalNetwork() { return physicalNetworkDatacenters; }
public void flush() { network.setDataCenterId(getSelectedDc().getId()); network.setName(getName().getEntity()); network.setDescription(getIsStpEnabled().getEntity()); network.setDescription(getDescription().getEntity()); network.setComment(getComment().getEntity()); network.setVmNetwork(getIsVmNetwork().getEntity()); java.lang.String label = getNetworkLabel().getSelectedItem(); if ((getExternal().getEntity()) && (getPhysicalNetwork().getEntity())) { label = (!(getNeutronPhysicalNetwork().getEntity()))) { label = (!(getNeutronPhysicalNetwork().getEntity())); } network.setLabel(((label == null) || (!(label.isEmpty()))? label : null)); network.setMtu(0); if (getMtu().getIsChangable()) { network.setMtu(java.lang.Integer.parseInt(getMtu().getEntity().toString())); } network.setDnsResolverConfiguration(getDnsConfigurationModel().flush()); network.setVlanId(null); if (getHasVLanTag().getEntity()) { network.setVlanId(java.lang.Integer.parseInt(getVLanTag().getEntity().getEntity().toString())); } for (org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel profileModel : getProfiles().getSelectedItem()) { profileModel.flush(); } if (getQos().getIsChangable()) { network.setVlanId(java.lang.Integer.parseInt(getVLanTag().getEntity().getEntity().toString())); } for (org.ovirt.engine.ui.uicommonweb.models.profiles.NetworkQosModel profileModel : getQos().getSelectedItem()) { network.setVlanId(getQos().getEntity().getEntity().getEntity().getEntity().getEntity()); } } }
protected void onExportChanged() { boolean externalNetwork = getExternal().getEntity(); getNetworkLabel().setIsChangeable((!externalNetwork)); getNeutronPhysicalNetwork().setIsChangeable((!externalNetwork)); getAddQosCommand().setIsChangeable((!externalNetwork)); getAddQosCommand().setIsChangeable(externalNetwork); getPhysicalNetworkCustomProperties().setIsChangeable(externalNetwork); getPhysicalNetworkCustomProhibition(); }
private void updateAvailability() { if (!(org.ovirt.engine.ui.uicommonweb.models.ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly))) { getExternalProviders().setIsAvailable(false); getNeutronPhysicalNetwork().setIsAvailable(false); getCreateSubnet().setIsAvailable(false); getVLanTag().setIsAvailable(false); getHasVLanTag().setIsAvailable(false); getExternal().setIsAvailable(false); getExternal().setIsAvailable(false); getExternal().setIsAvailable(false); getExternal().setIsAvailable(false); getExternal().setIsAvailable(false); getExternal().setIsAvailable(false); getExternal().setIsAvailable(false); getExternal().setIsAvailable(false); getExternal().setEntity(getVm().getEntity().getEntity().getIsAvailable()); getExternal().setIsAvailable(false); getExternal().setIsAvailable(false); getExternal().setEntity(getEntity().getEntity().getEntity().getVm().getVirt().getVirt().getIsAvailable(VdcActionType.VdcBllMessages.VmType.VirtIO_SCSI_NOT_SUPPORTED_FOR_Virt.getVirt_VdcBllMessages.VdcActionType.VNC_Virt.getVm().setIsAvailable(getVm().getVmDevice().getVirtioScsi().getVdsGroup().getVdsGroup().getVlanId())); } }
private void initPhysicalNetworkList() { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(QueryType.GetAllNetworks, new org.ovirt.engine.core.common.queries.IdQueryParameters(getSelectedDc().getId()), new org.ovirt.engine.ui.uicommonweb.models.datacenters.AsyncQuery<org.ovirt.engine.core.common.queries.QueryReturnValue>(result) { @java.lang.Override public void init() { getDatacenters().setItems(result.getReturnValue()); selectPhysicalNetwork(); } }); }
public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.network.Network> getNetwork() { return datacenters; }
public void setPhysicalNetworkDatacenters(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> physicalNetworkDatacenters) { this.physicalNetworkDatacenters = physicalNetworkDatacenters; }
public void setDatacenters(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.network.Network> datacenters) { this.datacenters = datacenters; }
private void init() { setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editLogicalNetworkTitle()); setHelpTag(HelpTag.edit_logical_network); setHashName("edit_logical_network"); getName().setEntity(getNetwork().getName()); getName().setEntity(getNetwork().getDescription()); getComment().setEntity(getNetwork().getComment()); getIsStpEnabled().setEntity(getNetwork().getStp()); getHasVLanTag().setEntity(((getNetwork().getVlanId())!= null)); getVLanTag().setEntity(getNetwork().getVlanId()); initMtu(); initIsVm(); initIsVm(); initIsVm(); initIsVm(); initIsVm(); initIsVm(); initIsVm(); initIsVm(); initMtu(); initIsVm(); initIsVm(); initIsVm(); initIsVm(); initIsVm(); initIsVm(); initPhysicalNetworkCustomProperties(); initPhysicalNetworkDatacenters(); initPhysicalNetworkDatacenters(); initPhysicalNetworkDatacenters(); initPhysicalNetworkCustomPropertiesModel(getNetwork().isExternal()); getNetworkCustomProperties().setIsChangeable(false); getNetworkCustomProperties().setIsChangeable(false); getNeutronPhysicalNetwork().setIsChangeable(false); if ((getNetwork().isExternal()) && (isConnectedToPhysicalNetwork())) { getNeutronPhysicalNetwork().setEntity(getNetwork().getLabel()); } else { getNetworkLabel().setSelectedItem(getNetwork().getLabel()); } }
java.lang.String physicalNetworkDatacentreLabel();
private void setQuotaStorage(org.ovirt.engine.core.common.businessentities.Quota quota) { if (quota.isEmptyStorageQuota()) { quota.setGlobalQuotaStorage(new org.ovirt.engine.core.bll.quota.QuotaStorage(org.ovirt.engine.core.compat.Guid.newGuid(), quota.getId(), null, (-1L), (-1.0)); return; } if ((quota.getGlobalQuotaStorage())!= null) { quota.getGlobalQuotaStorage().setQuotaId(quota.getId()); quota.getGlobalQuotaStorage().setQuotaId(quota.getId()); quota.getGlobalQuotaStorage().setQuotaStorageId(org.ovirt.engine.core.compat.Guid.newGuid()); } if ((quota.getQuotaStorages())!= null) { for (org.ovirt.engine.core.common.businessentities.QuotaStorage quotaStorage : quota.getQuotaStorages()) { quotaStorage.setQuotaId(quota.getId()); quotaStorage.setQuotaStorageId(quota.getId()); quotaStorage.setQuotaStorageId(quota.getQuotaStorages()); quotaStorage.setQuotaStorageId(quota.getQuotaStorages()); quotaStorage.setQuotaStorageId(quota.getQuotaStorages()); quotaStorage.setQuotaStorageId(quota.getQuotaStorages()); quotaStorage.setQuotaStorage(quota.getQuotaStorages()); quotaStorage.setQuotaStorage(quota.getQuotaStorages()); quotaStorage.setQuotaStorage(quota.getQuotaStorages()); quotaStorage.setQuotaStorage(quotaStorage); quotaStorage.setQuotaStorage(quotaStorage); } } }
private void finalizeDownloadIfNecessary(final org.ovirt.engine.core.bll.storage.disk.image.TransportalImageCommand<T>.StateContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContextContext, org.ovirt.engine.core.common.businessentities.storage.ImageTransfer upToDateImageTransfer) { if ((((org.ovirt.engine.core.bll.storage.disk.image.TransportCommand.getParameters().getTransferSize())!= 0) && ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()) == (upToDateImageTransfer.getBytesSent()))) && (!(upToDateImageTransfer.getActive()))) { if (!(context.entity.getActive())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer statusUpdate = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); statusUpdate.setPhase(ImageTransferStatus.FULLIZING_SUCCESS); runInternalAction(ActionType.TransferImageStatus, new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId(), statusUpdate)); } } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DiskContentType.class, to = org.ovirt.engine.api.model.DiskContentType.class) public static org.ovirt.engine.api.model.DiskContentType map(org.ovirt.engine.api.model.DiskContentType contentType) { if (contentType == null) { return null; } switch (contentType) { case DATA : return org.ovirt.engine.api.model.DiskContentType; case ISO : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.DiskContentType; case ISO : return org.ovirt.engine.api.model.DiskContentType; case ISO : return org.ovirt.engine.api.model.businessentities.storage.DiskContentType; case ISO : return org.ovirt.engine.api.model.businessentities.storage.DiskContentType; case OVF_STORE : return org.ovirt.engine.api.model.StorageDomainContentType; case OVF_STORE : return org.ovirt.engine.api.model.StorageDomainContentType; default : throw new java.lang.IllegalArgumentException((("Unknown disk content type \"" + contentType) + "\"")); } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DiskContentType.class, to = org.ovirt.engine.api.model.DiskContentType.class) public static org.ovirt.engine.api.model.DiskContentType map(org.ovirt.engine.core.common.businessentities.storage.DiskContentType contentType) { switch (contentType) { case DATA : return org.ovirt.engine.api.model.DiskContentType.DATA; case ISO : return org.ovirt.engine.api.model.DiskContentType.DATA; case ISO : return org.ovirt.engine.api.model.DiskContentType.MEMORY_DUMP_VOLUME; case MEMORY_METADATA_VOLUME : return org.ovirt.engine.api.model.DiskContentType.MEMORY_DUMP_VOLUME; case OVF_STORE : return org.ovirt.engine.api.model.DiskContentType.M_STORE; default : return null; } }
protected void updateExternalVnicProfilesPerTargetCluster() { final java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEntity>> result = new java.util.HashMap<>(); getEntities().getItems().stream().stream().forEach((importTemplateData) -> ((importTemplateData)!= null? new java.util.HashMap<>() : new java.util.HashMap<>(); getEntities().getItems().iterator().next().next(((importTemplateData.getEntity().getInterfaces(), importTemplateData.getSelectedItem())!= null)); setExternalVnicProfilesPerTargetCluster(result); }
protected void updateExternalVnicProfilesPerTargetCluster() { final java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity>> result = new java.util.HashMap<>(); getEntities().getItems().stream().iterator().next((registerVmData) -> updateVmDataCenter(registerVmData.getEntity().getInterfaces(), registerVmData.getSelectedItem(), result)); setExternalVnicProfilesPerTargetCluster(result); }
protected java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEntity>> updateExternalVnicProfilesPerTargetCluster(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> interfaces, org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEntityModel> result) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEntity> clusterVnicProfileMappings; if (result.containsKey(cluster)) { clusterVnicProfileMappings = result.get(cluster); } else { clusterVnicProfileMappings = new java.util.HashSet(); result.put(cluster, clusterVnicProfileMappings); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEntity> previousClusterVnicProfileMappings = new java.util.HashSet(); result.put(cluster, previousCluster.get(cluster); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEntity> previousClusterVnicProfileMappings = getNewVnicProfileMappings(interfaces, previousCluster); clusterVnicProfileMappings.addAll(vmVnicProfileMappings); return result; }
public java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> cloneExternalVnicProfiles(org.ovirt.engine.core.common.businessentities.Cluster cluster) { if (((cluster.getCluster()) == null) || ((vnicProfilesPerTargetCluster.get(cluster)) == null)) { return new java.util.ArrayList(org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping.get(cluster).size()); } final java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> result = new java.util.ArrayList(externalVnicProfile.get(cluster).size()); if ((cluster!= null) && ((vnicProfileMappingEntity.getExternalVnicProfileMapping())) && ((vnicProfileMappingEntity.getExternalVnicProfileMapping()))!= null)) { return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping>(); } return result; }
private java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEntity> getNewVnicProfileMappings(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> interfaces, java.util.Set<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> interfaces) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEntity> result = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic : interfaces) { final org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEntity newMapping = new org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEntity(vnic.getNetworkName(), vnic.getVnicProfileName(), null); final org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEntity new org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEntityModel().filter((x) (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic.getNetworkName()))); final org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEntity mapping = previousClusterVnicProfileMappings.stream().filter((x)!= null? x.equals(newMapping)).getVnicProfileName() : new org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEntityMapping().filter(((org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface) (getVm().getVnicProfileName()))).getVnicProfileMappings().get(newMapping); result.add(new org.ovirt.engine.ui.uicommonweb.
protected void addVnicProfileMappingCommand() { final org.ovirt.engine.ui.uicommonweb.UICommand vnicProfileMappingCommand = createVnicProfileMappingCommand(); org.ovirt.engine.ui.uicommonweb.models.storage.RegisterEntityModel.getVnicProfileMapping().setEntity(org.ovirt.engine.ui.uicommonweb.models.storage.RegisterEntityModel.getVnicProfileMappingCommand()); }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if ("OnSave".equals(command.getName())) { onSave(); } if ((command == (getVnicProfileMappingCommand())) && ((org.ovirt.engine.ui.uicommonweb.models.storage.RegisterEntityModel.getWindow()) == null)) { updateExternalVnicProfilesPerTargetCluster(); vnicProfileMappingModel = new org.ovirt.engine.ui.uicommonweb.models.vms.RegisterEntityModel(this, externalVnicProfilesPerTargetCluster); vnicProfileMappingModel.initialize(); setWindow(vnicProfileMappingModel); } }
protected abstract void updateExternalVnicProfilesPerTargetCluster();
public org.ovirt.engine.core.common.action.ActionType getCommandType() { return commandType; }
protected org.ovirt.engine.core.bll.context.DefaultCompensationContext createDefaultCompensationContext() { org.ovirt.engine.core.bll.context.DefaultCompensationContext defaultContext = new org.ovirt.engine.core.bll.context.DefaultCompensationContext(); defaultContext.setCommandId(commandId); defaultContext.setCommandType(getActionType()); defaultContext.setBusinessEntitySnapshotDao(getActionType()); defaultContext.setSnapshotSerializer(org.ovirt.engine.core.utils.SerializationFactory.getSerializer()); return defaultContext; }
@java.lang.Override public java.util.List<org.apache.commons.collections.KeyValue> getAllCommands() { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource(); return getCallsHandler().executeReadList("get_all_commands", (rs, rowNum) -> { org.apache.commons.collections.collections.keyvalue.DefaultKeyValue(); result.setKey(getGuidDefaultEmpty(rs, "command_id")); result.setValue(org.ovirt.engine.core.common.action.ActionType.valueOf(rs.getString("command_type"))); return result; }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot entitySnapshot) { org.ovirt.engine.core.compat.Guid id = entitySnapshot.getId(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(id)) { id = org.ovirt.engine.core.compat.Guid.newGuid(); entitySnapshot.setId(id); } org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", entitySnapshot.getId()).addValue("command_id", entitySnapshot.getCommandId()).addValue("command_id", entitySnapshot.getCommandType().name()).addValue("entity_id", entitySnapshot.getEntityId()).addValue("entity_type", entitySnapshot.getEntityType()).addValue("entity_type", entitySnapshot.getEntityType()).addValue("snapshot", entitySnapshot.getEntitySnapshotClass()).addValue("snapshot_class", entitySnapshot.getSnapshotClass()).addValue("insertion_order", entitySnapshot.getInsertionOrder()); getCallsHandler().executeModification("insert_entity_snapshot", parameterSource); }
@org.junit.Test public void testInsertSnapshot() { org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot snapshot = new org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot(); org.ovirt.engine.core.compat.Guid commandId = org.ovirt.engine.core.compat.Guid.newGuid(); snapshot.setCommandId(commandId); snapshot.setCommandType(ActionType.UpdateVds); snapshot.setEntityId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); snapshot.setEntityType("org.ovirt.engine.core.common.businessentities.VdsStatic"); snapshot.setEntitySnapshot("something"); snapshot.setSnapshotClass("someClass"); dao.save(snapshot); java.util.List<org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot> snapshotsFromDb = dao.getAllForCommandId(commandId); assertNotNull(snapshot); assertEquals(1, snapshotsFromDb.size()); assertEquals(snapshot, snapshotsFromDb.get(0)); }
boolean validateCluster() { if ((org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getCluster()) == null) { return failValidation(EngineMessage.VDS_CLUSTER_IS_NOT_VALID); } return true; }
public void compensate() { java.util.List<org.apache.commons.collections.KeyValue> commandSnapshots = businessEntitySnapshotDao.getAllCommands(); for (org.ovirt.engine.core.compat.Guid commandSnapshot : commandSnapshots) { try { compensate((org.ovirt.engine.core.compat.Guid) (commandSnapshot.getKey()))); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.OnStartupCompensation.log.error("Failed to run on start on start on start on start on Start for Command '{}': {}", commandSnapshot.getValue(), commandSnapshot.getKey(), e.getMessage()); org.ovirt.engine.core.bll.OnStartupCompensation.log.debug("Exception", e); } org.ovirt.engine.core.bll.OnStartupCompensation.log.debug("Running on start on start on start on start on start on start for Command '{}': {}", commandSnapshot.getValue(), e.getMessage()); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot> getAllForCommandId(org.ovirt.engine.core.compat.Guid commandID) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("command_id", commandID); return getCallsHandler().executeReadList("get_entity_snapshot_by_command_id", (rs, rowNum) -> { org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot result = new org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot(); result.setId(getGuidDefaultEmpty(rs, "id")); result.setCommandId(getGuidDefaultEmpty(rs, "command_id")); result.setCommandType(getGuidDefaultEmpty(rs, "command_id")); result.setCommandType(org.ovirt.engine.core.common.action.ActionType.valueOf(rs.getString("command_type"))); result.setEntityId(rs.getString("entity_type")); result.setEntityType(rs.getString("entity_type")); result.setSnapshotClass(rs.getString("snapshot_class")); result.setSnapshotClass(rs.getString("snapshot_class")); result.setSnapshotClass(rs.getInt("insertion")); return result; }
private void initDefaultNetworkProvider() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getAllProvidersByType(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery((result) (result)); providers.add(0, getNoDefaultNetworkProvider()); getDefaultNetworkProvider().setItems(provider); org.ovirt.engine.core.common.businessentities.Cluster cluster = getEntity(); if (cluster!= null) { org.ovirt.engine.core.common.businessentities.Cluster cluster = getEntity(); if (cluster!= null) { org.ovirt.engine.core.common.businessentities.Cluster cluster = getEntity(); if (cluster!= null) { org.ovirt.engine.core.common.businessentities.Cluster cluster = getEntity(); if (cluster!= null) { org.ovirt.engine.core.common.businessentities.Cluster cluster = providers.stream().filter((provider) -> ((provider) -> ((cluster.getId())!= null) && (defaultNetworkProvider.getDefaultNetworkProvider().getSelectedItem())).findFirst().getSelectedItem())).findFirst().orElse(null); } } }), ProviderType.OPENSTACK_NETWORK, ProviderType.EXTERNAL_NETWORK); }
public void selectProviderById(org.ovirt.engine.core.compat.Guid providerId) { if ((getNetworkProviders().getItems())!= null) { org.ovirt.engine.core.common.businessentities.Provider provider = getNetworkProviders().getItems().getItems().stream().filter((candidate) -> ((candidate) -> ((candidate) == null? providerId : providerId)).findFirst().orElse(null); getNetworkProviders().setSelectedItem(provider); } }
protected boolean canDiskBeMoved() { return validate(getDiskValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getDiskImage().getQos())); }
@java.lang.Override protected boolean validate() { return ((((((((((((((super.validate())) && (canDiskBeMoved())) && (isImageExist())) && (checkOperationIsCorrect())) && (checkOperationAllowed())) && (checkOperationAllowed())) && (checkOperationAllowedOnDiskContentType())) && (validateSourceStorageDomain())) && (validateSourceStorageDomain())) && (validateTemplateInDestStorageDomain())) && (validateSpaceRequirements())) && (validateSpaceRequirements())) && (validateSpaceRequirements())) && (validateSpaceRequirements())) && (checkIfNeedToBeOverride())) && (setAndValidateDiskProfiles())) && (setAndValidateDiskProfiles())) && (setAndValidateDiskProfiles())) && (setAndValidateDiskProfiles())) && (setAndValidateDiskProfiles())); }
public org.ovirt.engine.core.bll.ValidationResult diskCanBeCopied(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage, org.ovirt.engine.core.common.businessentities.storage.QowCompat compat) { if (QowCompat.QowCompat.QOS2_V2.equals(compatibilityVersion.getcompatibilityVersion()))) { if (!(Guid.Empty.equals(diskImage.getParentId()))) { org.ovirt.engine.core.common.businessentities.storage.Image parent = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getImageDao().get(diskImage.getParentId()); if ((parent.getSize()) < (diskImage.getSize())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.CANNOT_MOVE_DISK); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override public void update(final org.ovirt.engine.core.common.businessentities.VDS host) { try { org.ovirt.engine.core.common.utils.AnibleCommandBuilder command = new org.ovirt.engine.core.common.utils.AnnotationBuilder().hostnames(host.getHostName()).logFileDirectory(VdsDeployBase.getHostName()).logFileDirectory(VdsDeployBase.HOST_DEPLOY_LOG_DIRECTORY).logFileName(host.getHostName()).logFileName(host.getHostName()).logFileName(host.getHostName()).logFileName(("ovirt-host.getCorrelationId()).pin(AsSESSION_UPGRADE_PLAYBOOK); if ((asibleExecutor.runCommand(command, org.ovirt.engine.core.bll.host.HostUpgradeManager.UPDATE_PACKAGES_TIMEOUT).getAnsibleReturnCode())!= (org.ovirt.engine.core.bll.host.HostUpgradeManager.UPDATE_PACKAGES_TIMEOUT)) { java.lang.String error = java.lang.String.format("Failed to update host '%1$s'", host.getHostName()); org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error(error); throw new java.lang.RuntimeException(ex); } } catch (java.lang.InterruptedException | java.io.IOException ex) { throw new java.lang.RuntimeException(ex); } }
@java.lang.Override protected void endSuccessfully() { if (org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getImage().getActive()) { updateRelevantVms(); } else if (org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getImage().hasRawBlock()) { refreshVolume(); } org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getImage().getSize(); if ((diskImage!= null) && ((org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getImage().getSize())!= (diskImage.getSize()))) { org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getReturnValue().setActionReturnValue(diskImage.getSize()); imageDao.updateImageSize(diskImage.getImageId(), diskImage.getSize()); updateAuditLog(AuditLogType.USER_EXTEND_DISK_SIZE, diskImage.getSizeInGigabytes()); } org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.setSucceeded(true); }
protected java.util.List<java.lang.String> getDbUsers() { return java.util.Collections.singletonList(getValue(), getUserName(), getUserName(), getUserName(), getUserName(), getUserName(), getUserName(), getCustomValue().getValue("$s", getUserName())); }
private void addPermissions(org.ovirt.engine.core.bll.storage.disk.DrMappingHelper.PermissionsParamObject permissions, java.util.List<org.ovirt.engine.core.common.businessentities.Permission> permissionsToAdd) { java.util.Map<java.lang.String, java.util.Set<java.lang.String>> userToRoles = permissionsParams.userToRoles; userToRoles.getOrDefault(permissionsParams.dbUser.getLoginName(), java.util.Collections.emptySet()).forEach((roleName) -> { org.ovirt.engine.core.common.businessentities.Permission permission = null; org.ovirt.engine.core.common.businessentities.Permission permission = null; org.ovirt.engine.core.common.businessentities.Role originalRole = roleDao.getByName(roleName); if (permissionsParams.roleMap!= null) { org.ovirt.engine.core.common.businessentities.Role originalRole = roleDao.getByName(roleName); if (destRoleName!= null) { org.ovirt.engine.core.common.businessentities.Permission(permissionsParams.roleMap.get(roleName))); permission = ((org.ovirt.engine.core.common.businessentities.Permission(permissionsParams.roleMap.get(roleName))); permission = new org.ovirt.engine.core.common.businessentities.Permission(permissionsParams.dbUser.getId(), destRole.getId(), permissionsParams.objectId, permissionsParams.objectType); } else if (originalRole!= null) { permission = new org.ovirt.engine.core.common.businessentities.Permission(permissionsParams.getId(), originalRole.getId(), permissionsParams.objectType); } } else if (originalRole!= null) { permission = new org.ovirt.engine.core.common.businessentities.Permission(permissionsParams.getId(), originalRole.getId(), permissionsParams.getId(), permissionsParams.objectType); } }
protected void addDbUsers() { dao.mapDbUsers(org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getDomainMap(), org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getDbUsers(), org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getUserToRoles(), org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getVmId(), VdcObjectType.VM, org.ovirt.engine.core.bll.ExportVmFromConfigurationCommand.getParameters().getRoleMap()); }
@java.lang.Override protected void executeVmCommand() { try { addVmToDb(); addVmToDb(); addVmToAffinityGroups(); processImages(); processImages(); vmHandler.addVmInitToDB(getVm().getStaticData().getVmInit()); discardHelper.logIfDisksWithIllegalExist(getVmId()); } catch (java.lang.RuntimeException e) { macPool.freeMacs(macsAdded); throw e; } org.ovirt.engine.core.bll.ExportVmCommandBase.setSucceeded(true); org.ovirt.engine.core.bll.ExportVmCommandBase.getReturnValue().setActionReturnValue(getVm()); }
@java.lang.Override protected void executeCommand() { if (shouldSkipCommandExecutionCached()) { org.ovirt.engine.core.bll.VmCommand.setSucceeded(true); } org.ovirt.engine.core.bll.VmCommand.setSucceeded(true); }
private void registerHEOvfUpdate() { if (!(shouldUpdateHostedEngineOvf())) { return; } org.ovirt.engine.core.bll.VmCommand.getVm().getCompatibilityVersion().compareTo(org.ovirt.engine.core.utils.transaction.TransactionSupport.TransactionSupport.executeInTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<org.ovirt.engine.core.utils.transaction.TransactionSupport.TransactionMethod<org.ovirt.engine.core.utils.transaction.TransactionSupport.TransactionSupport>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.VDSGroup cluster) { org.ovirt.engine.core.bll.VmCommand.getVm().getCompensationContext().snapshotIdsForUpdate(org.ovirt.engine.core.utils.transaction.TransactionSupport.TransactionMethod<org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public void run() { org.ovirt.engine.core.common.businessentities.VDSGroup vfData = org.ovirt.engine.core.bll.VmCommandBase.getVmTemplate().getCompatibility_version(); if (org.ovirt.engine.core.common.businessentities.VmTemplate.VmTemplateType.getSelectedItem()) { vmDataUpdater.log(this, AuditLogType.USER_ID); } } }); } }); }
private java.util.List<org.ovirt.engine.core.common.businessentities.network.Name> getNameServers(org.ovirt.engine.core.common.businessentities.network.DnsResolver<org.ovirt.engine.core.common.businessentities.network.DnsResolver<org.ovirt.engine.core.common.businessentities.network.DnsResolver<org.ovirt.engine.core.common.businessentities.network.VdsNetwork> vdsResolver) { if (dnsResolver.getNameServers(org.ovirt.engine.core.common.businessentities.network.NameServer.class)) { return dnsResolver; } java.util.Collections.emptyList(); }
private void dataCenter_SelectedItemChanged() { if ((getCurrentStorageItem()) instanceof org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase) { org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase sanStorageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase) (getCurrentStorageItem())); sanStorageModel.updateRemovableLuns(getDataCenter().getSelectedItem().getCompatibilityVersion()); sanStorageModel.getRequiringTableAlert(); } updateItemsAvailability(); behavior.updateDataCenterAlert(); }
public void updateRemovableLuns(org.ovirt.engine.core.compat.Version dcCompatibilityVersion) { setReduceDeviceSupported((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigValues.ReconDestinationDeviceFromStorageDomain, dcCompatibilityVersion.toString())))); int numOfIncludedLuns = getIncludedLuns().size(); java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> lunModels = getLuns(false, true); lunModel.setIsLunRemovable(((isReduceDeviceSupported()) && ((numOfIncludedLuns!= 1) && (!(getMetadataDevices().contains(lunModel.getLunId())))))); }
@org.junit.Test public void testReadBooleanList() { java.util.List<java.lang.Boolean> expected = java.util.Arrays.asList(true, false); org.ovirt.api.metamodel.xml.XmlReader reader = openReader(true, false); org.ovirt.api.metamodel.xml.XmlReader reader = openReader(true, false); org.ovirt.api.metamodel.xml.XmlReader reader = reader.readBoolean(); assertEquals(expected, BOoleans); }
@org.junit.Test public void testReadBooleanListEndElement() { org.ovirt.api.metamodel.xml.XmlReader reader = openReader(xml).getXmlNode(); org.ovirt.api.metamodel.xml.XmlReader reader = openReader(xml).getXmlNode(); assertEquals(javax.xml.stream.XML_ELEMENT, reader.getEventType()); assertEquals("values", reader.getLocalName()); }
@org.junit.Test public void testReadStringListEndElement() { org.ovirt.api.metamodel.xml.XmlReader reader = openReader( "<value><value><value><value>1<value>"); reader.readStrings(); assertEquals(javax.xml.stream.XMLStreamConstants.END_ELEMENT, reader.getEventType()); assertEquals(javax.xml.stream.XMLStreamConstants.END_ELEMENT, reader.getLocalName()); }
public java.util.List<java.lang.String> readStrings() { java.util.List<java.lang.String> values = new java.util.ArrayList<>(); java.lang.String startingLocalName = reader.getLocalName(); java.lang.String currentLocalName = startingLocalName; while (stream.getLocalName()) { currentLocalName = reader.getLocalName(); if (currentLocalName.equals(startingLocalName)) { skip(); } else { values.add(readString()); } } return values; }
@org.junit.Test public void testReadStringList() { java.util.List<java.lang.String> expected = java.util.Arrays.asList("1", "2"); org.ovirt.api.metamodel.metamodel.xml.XmlReader reader = openReader(xml); org.ovirt.api.metamodel.xml.XmlReader reader = openReader(xml); org.ovirt.api.metamodel.xml.XmlReader reader = reader.readStrings(); assertEquals(expected, strings); }
private static java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> mapVnicProfilesMapping(org.ovirt.engine.api.model.RegistrationVnicProfileMappings model) { java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> result = new java.util.ArrayList(model.getRegistrationVnicProfileMappings().size()); model.getRegistrationVnicProfileMappings().forEach((regMapping) -> { result.add(new org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping(regMapping.getFrom().getNetwork().getName(), org.ovirt.engine.core.compat.Guid.createGuid(regMapping.getTo().getId())))); } return result; }
public static void validateRegistrationVnicMappings(org.ovirt.engine.api.restapi.resource.BackendResource bs, org.ovirt.engine.api.model.Action action) { if (!(action.isSetRegistration())) { return; } org.ovirt.engine.api.model.RegistrationVnicProfileMappings mappings = action.getRegistration().getVnicProfileMappings(); if (!(action.getRegistration().isSetVnicProfileMappings())) { return; } org.ovirt.engine.api.model.RegistrationVnicProfileMappings mappings = action.getRegistration().getVnicProfileMappings(); if ((mappings.getFrom().getName()) == null) { return; } org.ovirt.engine.api.model.RegistrationVnicProfileMappings mappings = action.getRegistration().getVnicProfileMappings(); if ((mappings.getFrom().getName()) == null) { org.ovirt.engine.api.model.RegistrationVnicProfileMapping.getRegistration().getVnicProfileMappings().map(mappings, "from"); } if ((mappings.getFrom().getName()) == null) { bs.validateParameters(mappings, "from.network.name"); } if ((mapping.getFrom().getName()) == null) { org.ovirt.engine.api.model.NetworkQosType mappings = mapping.getInstance().getVnicProfileMappings(); if ((mappings.getFrom().getName()) == null) { org.ovirt.engine.api.model.NetworkQosType mappings = new org.ovirt.engine.api.model.NetworkQosParameters(mappings); if ((mappings.getFrom().getName()) == null) { org.ovirt.engine.api.model.NetworkQosMapper.map(mappings, "from.getName()); } } } }
@java.lang.Deprecated public static void validateVnicMappings(org.ovirt.engine.api.restapi.resource.BackendResource br, org.ovirt.engine.api.model.Action action) { if (action.isSetVnicProfileMappings()) { br.validateParameters(action.getVnicProfileMappings(), "vnicProfileMappings"); for (org.ovirt.engine.api.model.VnicProfileMapping mapping : action.getVnicProfileMappings().getVnicProfileMappings()) { if ((mapping.getSourceNetworkName()) == null) { br.validateParameters(mapping, "sourceNetworkName"); } if ((mapping.getSourceNetworkName()) == null) { br.validateParameters(mapping, "sourceNetworkProfileName"); } if ((mapping.getSourceNetworkName()) == null) { br.setSourceNetworkName(null); } if ("".equalsIgnoreCase(mapping.getSourceNetworkName())) { mapping.setSourceNetworkName(null); } if ((mapping.isSetTargetVnicProfile()) && (mapping.getTargetVnicProfile().isSetId())) { asGuid(mapping.getTargetVnicProfile().getId()); } } }
private java.lang.String formatKernelFeatures(java.util.Map<java.lang.String, java.lang.Object> kernelFeatures) { if (kernelFeatures == null) { return null; } final java.lang.String concatenatedPairs = kernelFeatures.entrySet().filter((pair) -> ((pair.getValue()) instanceof java.lang.Integer) (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(vdsmNotAvailable, pair.getValue()))); if (convert(pair) { return java.lang.String.format("%s: %s", pair.getKey(), pair.getValue())).collect(java.util.Collections.singleton(", ")); } return concatenatedPairs; }
protected java.lang.String getBookContentPath(java.lang.String bookPath, java.util.Locale locale) { return ((((("/" + (locale.toString())) + "/") + "/") + contentPath; }
public java.lang.String getDocsSectionTemplate(java.util.Locale locale) { java.lang.String result = ""; try { java.lang.String docsSectionTemplatePath = getDocsSectionTemplateTemplateTemplate(filePath, locale); java.io.File file = new java.io.File(docsSectionTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate); if (((result.isEmpty()) && (file.canRead())) { result = readTemplateFile(docsSectionTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate); } if ((result.isEmpty()) && (!(DEFAULT_US_LOCALE.equals(locale)))) { return readTemplateFile(docsSectionTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate); } } catch (java.io.IOException ioe) { org.ovirt.engine.core.branding.BrandingTheme.log.error("Exception loading docs template", ioe); } if (result.isEmpty()) { org.ovirt.engine.core.branding.BrandingTheme.log.error("Exception loading docs template", ioe); } if (result.isEmpty()) { org.ovirt.engine.core.branding.BrandingTheme.log.warn("Exception loading documentation problem for any locale or fallback"); } return result; }
protected java.lang.String getBookPdfPath(java.lang.String bookPath, java.util.Locale locale) { return ((((("/" + (locale.toString())) + "/") + ") + ".")); }
protected java.io.File getBookContentFile(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, java.lang.String contentPath, java.util.Locale locale) { java.io.File file = null; file = org.ovirt.engine.core.utils.servlet.ServletUtils.makeFileFromSanePath(getBookContentPath(bookPath, contentPath, locale), base); if (!(org.ovirt.engine.core.utils.servlet.ServletUtils.makeFileFromSanePath(file))) { if (!(DEFAULT_US_LOCALE.equals(locale))) { file = org.ovirt.engine.core.utils.servlet.ServletUtils.makeFile(file))) { file = null; } } } return file; }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { java.lang.String url = request.getPathInfo(); java.util.Locale locale = getLocaleFromRequest(request); java.io.File file = null; java.util.regex.Matcher m = org.ovirt.engine.docs.utils.servlet.DocsServlet.bookHtmlContentPattern.matcher(url); if (m.matches()) { java.util.regex.Matcher m = org.ovirt.engine.docs.utils.servlet.DocsServlet.bookHtmlContentPattern.matcher(url); if (m.matches()) { java.lang.String bookPath = m.group(1); file = getBookIndexFile(request, response, bookPath, locale); } else { m = org.ovirt.engine.core.utils.servlet.DocsServlet.bookPdfContentPattern.matcher(url); if (m.matches()) { java.lang.String bookPath = m.group(1); file = getBookContentFile(request, response, bookPath, contentPath, locale); } else { m = org.ovirt.engine.core.utils.servlet.DocsServlet.bookPdfPattern.matcher(url); if (m.matches()) { java.lang.String bookPath = m.group(1); file = getBookPdfFile(request, response, file, fileName, locale); } } } if (file == null) { response.sendError(HttpServletResponse.SC_NOT_FOUND); } else { org.ovirt.engine.core.utils.servlet.ServletUtils.sendFile(request, response, file, type); } }
protected java.lang.String getBookIndex(java.lang.String bookPath, java.util.Locale locale) { return ((("/" + (locale.toString())) + "/") + "/index.html"); }
@java.lang.Override protected void executeVdsBrokerCommand() { if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getPollTimestamp().equals(org.ovirt.engine.core.vdsbroker.vdsbroker.POLL)) { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().poll(); } else if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().pollTooltip(2, java.util.concurrent.TimeUnit.SECONDS); } else if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().timeBoundPoll2(2, java.util.concurrent.TimeUnit.SECONDS); }
private org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> invokeSetupNetworksCommand(int timeout) { final org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters parameters = createSetupNetworksParameters(timeout); org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> setupNetworksTask = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVdsBroker().runFutureVdsCommand(FutureVDSCommandType.HostSetupNetworks, parameters); if (parameters.isRollbackOnFailure()) { org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters.PollTESTARTPT_CONNECTIVITY : POLL; org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters.PollVDSCommandParameters.PollP_CONNECTIVITY : POLL; org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getNewVdsIdsCommand(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVdsId(), pt)); while (!(setupNetworksTask.isDone())) { poller.poller.poll(); } } return setupNetworksTask; }
public boolean check(final org.ovirt.engine.core.common.businessentities.VDS host) { org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters.PollTooltip pt = (org.ovirt.engine.core.common.FeatureSupported.isPingPointSupportedByVdsm(host.getClusterCompatibilityVersion()))? POLL : POLL; org.ovirt.engine.core.bll.network.host.HostPoller poller = new org.ovirt.engine.core.bll.network.host.HostPoller(new org.ovirt.engine.core.common.vdscommands.TimeBoundPoller(host.getId(), pt)); final long startTime = java.lang.System.nanoTime(); while (((java.lang.System.nanoTime()) - startTime) < (org.ovirt.engine.core.bll.host.HostConnectivityChecker.VDSM_RESPONSIVENESS_PERIOD_IN_NANOS)) { if (poller.poller.poll())) { org.ovirt.engine.core.bll.host.HostConnectivityChecker.log.info("Failed managed to communicate with VDSM agent on host '{}' with address '{}' (host.getName(), host.getName(), host.getHostName(), host.getId()); return true; } } return false; }
private static org.ovirt.engine.core.common.businessentities.storage.DiskVmElement buildDiskVmElementWithDiskInterfaceFromExternalProvider(java.util.Map<java.lang.String, java.lang.Object> map, org.ovirt.engine.core.common.businessentities.storage.DiskImage image, org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(image.getId(), vmId); java.lang.String diskDevName = ((java.lang.String) (map.get(VdsProperties.DISK_TARGET_NAME))); diskDevName = ((java.lang.String) (map.get(VdsProperties.DISK_TARGET_DEV_NAME))); diskDevName = ((java.lang.String) (map.get(VdsProperties.VirtIO_SCSI))); java.lang.String diskDevName = ((java.lang.String) (map.get(VdsProperties.VirtIO_SCSI))); java.lang.String diskDevName = ((java.lang.String) (map.get(org.ovirt.engine.core.common.businessentities.storage.DiskImage()))); java.lang.String diskDevName = ((java.lang.String) (map.get(org.ovirt.engine.core.common.businessentities.storage.DiskImageType.VirtIO_SCSI); java.lang.String diskDevName = ((java.lang.String) (map.get(org.ovirt.engine.core.common.businessentities.storage.DiskImageType.VirtIO_TARGET_DEV))); java.lang.String diskDevName = ((java.lang.String) (map.get(org.ovirt.engine.core.common.businessentities.storage.DiskInterfaceType) (map.get(diskInterface())); java.lang.String diskDevName = ((java.lang.String) (map.get(VdsProperties.VirtIO_SCSI); break; default
public java.lang.String generateEngineXml(org.ovirt.engine.core.common.businessentities.VM vm, java.lang.String cpuId, java.lang.String emulatedMachine) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmInfoBuilder = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM>(); vm.setVmId(vmInfoBuilder.getVmId()); return vm.getName().build(vmInfoBuilder.buildCreateVm()); }
private long getTransferSize(org.ovirt.engine.core.common.businessentities.storage.DiskImage image, org.ovirt.engine.core.compat.Guid domainId) { if ((TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInfoFromVdsm = imagesHandler.getVolumeInfoFromVdsm(image.getStoragePoolId(), domainId, image.getId(), image.getImageId()); return imageInfoFromVdsm.getAppointSizeInBytes(); } else { if ((TransferImageCommand.getParameters().getTransferSize())!= 0) { return imageInfoFromVdsm.getTransferSizeInBytes(); } else { if ((TransferImageCommand.getParameters().getTransferSize())!= 0) { return imageInfo.getTransferSizeInBytes(); } else { boolean isOnBlock = transferImageCommand.getDiskImage().getStorageTypes().get(0).isBlockDomain(); return isOnBlock? org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.TransferType) (disk.getStorageType().getStorageType())).isBlockSizeInBytes()? ((org.ovirt.engine.core.common.businessentities.storage.TransferType.Disk) (disk)).getDiskImage().getStorageType())!= 0 : org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage.getDiskImage().getStorageType())); if ((!(transport.getDiskImage().getSize())!= null) && ((diskImage.getDiskImage().getSize())!= null)) { return diskImage().getDiskImage().getSizeInBytes(); } } } }
@java.lang.Override protected void addVmToDb() { super.addVmToDb(); if ((org.ovirt.engine.core.bll.Export.ImportVmFromExternalProviderCommand.getVm().getOrigin()) == (org.ovirt.engine.core.common.businessentities.OriginType.KVM)) { importUtils.updateGraphicsDevices(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getStoragePool().getCompatibilityVersion()); if (org.ovirt.engine.core.bll.ExportVmFromExternalProviderCommand.getParameters().isImportAsNewEntity()) { for (org.ovirt.engine.core.common.businessentities.VmDevice device : org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVm().getStaticData().getManagedDeviceMap().values()) { device.getId().setVmId(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVmId()); } } vmDeviceDao.saveAll(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVmId()); if (!(vmDeviceUtils.hasCdDevice(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVmId()))) { vmDeviceDao.add(org.ovirt.engine.core.bll.ExportVmFromExternalProviderCommand.getVmId(), org.ovirt.engine.core.bll.ExportVmFromExternalProviderCommand.getParameters().getVirtioScsiName()); } vmDeviceDao.addCdDevice(org.ovirt.engine.core.bll.ExportVmFromExternalProviderCommand.getVmId(), org.ovirt.engine.core.bll.ExportVmFromExternalProviderCommand.getParameters().getVirtioScsiName()); } }
public org.ovirt.engine.core.bll.ValidationResult providerTypeIsNetwork() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_TYPE_NOT_NETWORK).when((!(isNetworks()))); }
@org.junit.Test public void openstackIsValidNetworkProviderType() { when(provider.getType()).thenReturn(ProviderType.OPENSTACK_NETWORK); assertThat(validator.providerTypeIsNetwork(), isValid()); }
@org.junit.Test public void invalidNetworkProviderType() { when(provider.getType()).thenReturn(org.ovirt.engine.core.bll.provider.NetworkProviderValidatorTest.NON_NETWORK_PROVIDER_TYPE); assertThat(validator.providerTypeIsNetwork(), failsWith(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_TYPE_NOT_NETWORK)); }
java.lang.String ACTIONType ACTIONType();
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { if ((org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.isInternalExecution()) && (org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.isInternalExecution())) { return null; } return networkLocking.getProviderProxy(); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.InternalImportExternalNetworkParameters parameters = new org.ovirt.engine.core.common.action.InternalImportExternalNetworkParameters(getProvider().getName(), getNetwork(), org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.getParameters().getDataCenterId(), org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.getParameters().isPublicUse(), org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.getParameters().isAttachToAllClusters()); org.ovirt.engine.core.common.action.ActionReturnValue returnValue = runInternalAction(ActionType.InternalImportExternalNetwork, parameters); if (!(returnValue.getSucceeded())) { propagateFailure(returnValue.getSucceeded())); propagateFailure(returnValue); } org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.setSucceeded(true); }
public void setRefmentParameters(java.util.Map<java.lang.String, java.lang.String> params, boolean newEntityParams) { currentEntityParams.clear(); currentEntityParams.putAll(params); java.util.Set<org.ovirt.engine.ui.common.presenter.BrandingParams> paramNames = new java.util.HashSet<>(); paramNames.addAll(org.ovirt.engine.ui.common.presenter.BrandingParams.getParams(currentEntityParams.keySet())); com.gwtplatform.mvp.client.PlaceRequest request = new com.google.gwt.mvp.shared.proxy.PlaceRequestBuilder().build(); paramNames.add(buildHistoryToken(request), false); com.google.gwt.user.client.History.replaceItem(buildHistoryToken(request), false); }
@java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.String> event) { if (!(event.getValue().contains(WebAdminApplicationPlaces.SubTab_TABASE))) { currentEntityParams.clear(); } super.onValueChange(event); if (clientAgentType.isFirefox()) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(this) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(this.getParentNode().getEntity()); if (com.google.gwt.dom.client.Node parent = com.google.gwt.user.client.DOM.getElementById("id-favax.client.getElementById("id-favax"); if (com.google.gwt.dom.client.Node parent = com.google.gwt.user.client.DOM.getElementById("id-favax.core.client.ElementId(org.ovirt.engine.ui.webadmin.widget.dom.client.DOM.getElementId()).getElement(); favicon.removeFromParent(); parent.append(org.ovirt.engine.ui.webadmin.widget.table.node.Element parent = com.google.gwt.dom.client.ElementParentElement.getElement(); parent.removeFromParent(); parent.removeFromParent(); parent.append(org.ovirt.engine.ui.webadmin.widget.table.node.Element parent = com.google.gwt.dom.client.Element parentElement.getElement(); if (org.ovirt.engine.ui.webadmin.widget.plugin.Node parentElement parentElement.getElement().getElement().getElement().getElement().getElement().getElement().getElement().getElement().getElement().equals(org.ovirt.engine.ui.webadmin.widget.dom.client.Element.getElementId(element.getRootPassword().getElement().getElement())) { com.google.gwt.dom.client.Element parentElement parentElement parentElement = newEntity(this); if (getElement().getElement().getElement().getElement().getElement().
protected java.util.Map<java.lang.String, java.lang.String> getGlusterParamsFromEntity(T item) { java.util.Map<java.lang.String, java.lang.String> result = new java.util.HashMap<>(); result.put(GlusterParams.NAME.getName(), ((item)).getName()); return result; }
public void applySearchString(java.lang.String searchString) { if ((modelProvider.getModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<? extends org.ovirt.engine.ui.uicommonweb.models.EntityModel<?>> listModel = modelProvider.getModel(); if ((org.ovirt.engine.core.compat.StringHelper.isNotNullOrEmpty(searchString)) && (searchString.startsWith(listModel.getDefaultSearchString()))) { placeManager.setSearchString(getStage()); listModel.getSearchCommand().execute(); } } }
private java.util.Map<java.lang.String, java.lang.String> getBrandingParams(java.lang.String searchString) { java.util.Map<java.lang.String, java.lang.String> result = new java.util.HashMap<>(); if (searchString.startsWith(modelProvider.getModel().getDefaultSearchString())) { result.put(Model.getModel().getDefaultSearchString().length()); } result.put(agmentParams.SEARCH.getName(), searchString); return result; }
private static boolean canExecute(org.ovirt.engine.core.common.businessentities.BusinessEntityWithStatus<?,?> entity, java.lang.Class type, org.ovirt.engine.core.common.action.ActionType action) { java.util.Set<org.ovirt.engine.core.common.action.ActionType> actions = org.ovirt.engine.core.common.action.ActionUtils._matrix.get(type).get(entity.getStatus()); if ((action!= null) && (action.contains(action))) { return false; } return true; }
@java.lang.Override public void onRollback() { if (((getRollback()) == null) || ((getReturnValue())!= null)) { return; } }
public void onSuccess() { if (((this) == null) || (!(org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>emptyList()))) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> list = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServer>(org.ovirt.engine.core.common.businessentities.StorageDomainStatus.class); for (org.ovirt.engine.core.common.businessentities.StorageDomain a : new org.ovirt.engine.core.common.businessentities.StorageDomainListModel(org.ovirt.engine.core.common.businessentities.StorageDomainStatus.class)) { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { if (((result.getReturnValue())!= null) && ((getReturnValue().getReturnValue())!= null)) { return; } } } }); }
@org.ovirt.api.metamodel.annotations.In") java.lang.Boolean restoreLease();
@org.ovirt.api.metamodel.annotations.InputDetail defaultDetail() { mandatory(snapshot().id()); optional(snapshot().id()); optional(restoreMemory()); optional(disks()).id()); optional(disks()).imageId()); optional(disks()).snapshot().id(Collections.<org.ovirt.engine.api.metamodel.EntityModel>emptyMap()); }
public void persistCommand(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity, org.ovirt.engine.core.bll.context.CommandContext cmdContext) { initChildHierarchy(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getId())) { return; } persistCommand(cmdEntity); if (cmdContext!= null) { contextsCache.get().put(cmdEntity.getId(), cmdContext); } }
public boolean hasCommandEntitiesWithRootCommandId(org.ovirt.engine.core.compat.Guid rootCommandId) { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity; for (org.ovirt.engine.core.compat.Guid cmdId : commandsCache.get().keySet()) { cmdEntity = commandsCache.get().get(cmdId); if ((((cmdEntity!= null) && (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getRootCommandId())))) && (!(cmdEntity.getRootCommandId().equals(cmdId)))) && (cmdEntity.getRootCommandId().equals(cmdId)))) { return true; } } return false; }
public void removeCommand(org.ovirt.engine.core.compat.Guid commandId) { commandsCache.get().remove(commandId); contextsCache.get().remove(commandId); updateCmdHierarchy(commandId); }
public java.util.List<org.ovirt.engine.core.common.businessentities.CommandAssociatedEntity> getCommandAssociatedEntities(org.ovirt.engine.core.compat.Guid cmdId) { return commandsCache.get().getCommandAssociatedEntities(cmdId); }
public java.util.List<org.ovirt.engine.core.common.businessentities.CommandEntity> getCommands(boolean onlyWithCallbackEnabled) { java.util.List<org.ovirt.engine.core.common.businessentities.CommandEntity> cmdEntities = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity; for (org.ovirt.engine.core.compat.Guid cmdId : commandsCache.get().keySet()) { cmdEntity = commandsCache.get().get(cmdId); if ((!onlyWithCallbackEnabled) || (commons.get().get(cmdId).isCallbackEnabled())) { cmdEntities.add(cmdEntity); } } return cmdEntities; }
public java.util.List<org.ovirt.engine.core.common.businessentities.CommandEntity> getChildCmdsByParentCmdId(org.ovirt.engine.core.compat.Guid cmdId) { return commandsCache.get().getChildCmdsByParentCmdId(cmdId); }
public void updateCommandExecuted(org.ovirt.engine.core.compat.Guid commandId) { commandsCache.get().updateCommandExecuted(commandId); }
public java.util.List<org.ovirt.engine.core.compat.Guid> getCommandIdsByEntityId(org.ovirt.engine.core.compat.Guid entityId) { return commandsCache.get().getCommandIdsByEntityId(entityId); }
public void updateCallbackNotified(final org.ovirt.engine.core.compat.Guid commandId) { commandsCache.updateCallbackNotified(commandId); }
public void persistCommand(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity) { if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getId())) { return; } org.ovirt.engine.core.common.businessentities.CommandEntity existingCmdEntity = commandsCache.get(cmdEntity.getId()); if (existingCmdEntity!= null) { cmdEntity.setExecuted(existingCmdEntity.isExecuted()); cmdEntity.setCallbackNotified(existingCmdEntity.isCallbackNotified()); } commandsCache.get().put(cmdEntity); if ((cmdEntity.isCallbackEnabled()) || (((!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getParentCommandId()))) && ((!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getParentCommandId()))) && ((!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getParentCommandId()))) && ((!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getParentCommandId()))) && ((!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getParentCommandId()))) && ((!(cmdEntity.getParentCommandId())))!= null)) && (commandsCache.get(cmdEntity.getParentCommandId()))) { buildCmdHierarchy(cmdEntity); } } }
public org.ovirt.engine.core.bll.CommandBase<?> retrieveCommand(org.ovirt.engine.core.compat.Guid commandId) { return retrieveCommand(commandsCache.get(commandId), retrieveCommandContext(commandId)); }
public void persistCommandAssociatedEntities(java.util.Collection<org.ovirt.engine.core.common.businessentities.CommandAssociatedEntity> cmdAssociatedEntities) { commandsCache.get().persistCommandAssociatedEntities(cmdAssociatedEntities); }
public org.ovirt.engine.core.bll.context.CommandContext retrieveCommandContext(org.ovirt.engine.core.compat.Guid cmdId) { return contextsCache.get(cmdId); }
public void updateCommandData(org.ovirt.engine.core.compat.Guid commandId, java.util.Map<java.lang.String, java.io.Serializable> data) { commandsCache.get().updateCommandData(commandId, data); }
public org.ovirt.engine.core.common.businessentities.CommandEntity getCommandEntity(org.ovirt.engine.core.compat.Guid commandId) { return org.ovirt.engine.core.compat.Guid.isNullOrEmpty(commandId)? null : commandsCache.get(commandId); }
public java.util.List<org.ovirt.engine.core.compat.Guid> getCommandIdsBySessionSeqId(long engineSessionSeqId) { java.util.List<org.ovirt.engine.core.compat.Guid> cmdIds = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity; for (org.ovirt.engine.core.compat.Guid cmdId : commandsCache.get().keySet()) { cmdEntity = commandsCache.get(cmdId); if (((cmdEntity!= null) && ((cmdEntity.getEngineSessionSeqId())!= (org.ovirt.engine.core.bll.aaa.SsoSessionUtils.EMPTY_SESSION_SEQ_ID))) && ((cmdEntity.getEngineSessionSeqId()) == engineSessionSeqId)) { cmdIds.add(cmdId); } } return cmdIds; }
public void handleUnmanagedCommands() { java.util.List<org.ovirt.engine.core.common.businessentities.AsyncTask> asyncTasks = asyncTaskDao.getAll(); java.util.Set<org.ovirt.engine.core.compat.Guid> asyncTaskManager = asyncTaskDao.stream().filter((x) -> (x.getVdsmTaskId())!= null).map((x) -> x.getRootCommandId()).collect(java.util.stream.Collectors.toSet()); asyncTaskManager.addAll(asyncTasks.stream().filter((x) -> (x.getVdsmTaskId())!= null).map((x) -> x.getCommandId()).collect(java.util.stream.Collectors.toSet()); getCommands(false).stream().filter((x) ->!(x.isCallbackEnabled()))).filter((x) -> (x.getCommandStatus()) == (java.util.stream.Collectors.toSet())); getCommands(false).stream().filter((x) -> ((x) -> ((x) -> ((x) -> cmd.getCommandStatus()) == (CommandStatus.ACTIVE).filter((x)?!(asyncTaskManager.contains(x.getId()))).forEach(cmdManagedCommands.contains(x.getId()))).forEach(cmd.getId()))).filter(java.util.Objects.concurrent.concurrent.contains(x.getId()))).forEach(cmdManagedCommands.contains(x.getId()))).forEach(CommandBase::reacquireLocks); }
public void removeAllCommandsBeforeDate(final org.ovirt.engine.core.compat.DateTime cutoff) { commandsCache.get().removeAllCommandsBeforeDate( cutoff); }
public org.ovirt.engine.core.compat.CommandStatus getCommandStatus(final org.ovirt.engine.core.compat.Guid commandId) { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = commandsCache.get(commandId); if (cmdEntity!= null) { return cmdEntity.getCommandStatus(); } return org.ovirt.engine.core.compat.CommandStatus.UNKNOWN; }
public void updateCommandStatus(final org.ovirt.engine.core.compat.Guid commandId, final org.ovirt.engine.core.compat.CommandStatus status) { commandsCache.get().updateCommandStatus(commandId, status); }
private java.lang.String renderGibbleSize(long size) { long sizeInGB = ((unit) == (org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit.MiB))? size : org.ovirt.engine.core.common.utils.SizeConverter.convert(size, unit, SizeUnit.MiB).longValue(); return org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.messages.messages.messages.messages.GB(sizeInGB) : 1; }
protected boolean isLunsAlreadyInUse(java.util.Set<java.lang.String> lunIds) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAll(); java.lang.StringBuilder lunsUsedBySDs = new java.lang.StringBuilder(); java.lang.StringBuilder lunsUsedBySDs = new java.lang.StringBuilder(); lunsFromDb.stream().filter((lun) -> lunIds.contains(lun.getLUNId())).forEach((lun.getLUNId())).forEach((lun) -> { if ((lun.getStorageDomainId())!= null) { addFormattedLunId(lun).getStorageDomainId()); } if ((lun.getDiskId())!= null) { addFormattedLunId(lunsUsedBySDs, lun, org.ovirt.engine.core.common.businessentities.storage.LUNs::getDiskAlias); } } if ((lunsUsedBySDs.length())!= 0) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_LUNS_ALREADY_PART_OF_STORAGE_DOMAINS); org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBase.addValidationMessageVariable("lunIds", lunsUsedBySDs.toString()); } if ((lunsUsedByDisks.length())!= 0) { addValidationMessageVariable("lunIds", lunsUsedBySDs.toString()); } return true; }
protected void addFormattedLunId(java.lang.StringBuilder sb, org.ovirt.engine.core.common.businessentities.storage.LUNs lun, java.util.function.Function<org.ovirt.engine.core.common.businessentities.storage.LUNs, java.lang.String> nameGetter) { if ((s.length())!= 0) { sb.append(java.lang.String.format(("$%1$s)", lun.getLUNId(), nameGetter.apply(lun)); } }
@org.junit.Test public void validateVmShareableDisk() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = initDiskImage(diskImageGroupId, diskImageId); diskImage.setShareable(true); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.storage.lsm.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_SHAREABLE_DISK_NOT_SUPPORTED); }
@org.junit.Test public void validateInvalidDestinationDomain() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain(dstStorageId); dstStorageDomain.setStorageDomainType(StorageDomainType.ISO); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); }
@org.junit.Test public void validateVmHavingDeviceSnapshotsPluggedToOtherVmsThatAreNotDown() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN)).when(diskValidator).isDiskPluggedToAnyNonDownVm(anyBoolean()); org.ovirt.engine.core.bll.storage.lsm.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN); }
@java.lang.Override protected boolean validate() { boolean validate = (super.validate())) && (validate(new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getStorageDomain()).isNotBackupDomain())); if (!validate) { auditLogDirector.log(this, AuditLogType.USER_MOVED_DISK_FINISHED_FAILURE); return false; } if (!(getVm().isRunningAndQualifyForDisksMigration())) { return failValidation(EngineMessage.CANNOT_LIVE_MIGRATE_VM_SHOULD_BE_IN_PAUSED_OR_UP_STATUS); } setStoragePoolId(getVm().getStoragePoolId()); if (!(validateDestDomainsSpaceRequirements())) { return false; } org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getReturnValue().setValid(((isDiskNotShareable(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageId())) && (isDiskSnapshotNotPluggedToOtherVmsThatAreNotDown(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageId())))); if (!(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getReturnValue().isValid())) { return false; } return (validateCreateAllSnapshotsFromVmCommand()) && validate; }
@org.junit.Test public void validateCantLiveMigrateToBackupDomain() { org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain(srcStorageId); dstStorageDomain.setBackup(true); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_VM_DISKS_ON_BACKUP_STORAGE); }
@org.junit.Test public void validateInvalidDestinationDomain() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain(dstStorageId); dstStorageDomain.setStatus(StorageDomainStatus.Active); dstStorageDomain.setStorageDomainType(StorageDomainType.ISO); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.storage.lsm.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); }
@org.junit.Test public void validateVmShareableDisk() { initStorageDomain(srcStorageId); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = initDiskImage(diskImageGroupId, diskImageId); diskImage.setShareable(true); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_SHAREABLE_DISK_NOT_SUPPORTED); }
@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.vdsbroker.vdsbroker.GetStatsAsyncVDSCommand.getBroker().getVdsStats(new org.ovirt.engine.core.vdsbroker.GetStatsAsyncVDSCommandCallback() { @java.lang.Override public void execute() { org.ovirt.engine.core.vdsbroker.vdsbroker.GetStatsAsyncVDSCommand.getBroker().getVdsStats(new org.ovirt.engine.core.vdsbroker.GetStatsAsyncVDSCommandCallback() { @java.lang.Override public void execute() { org.ovirt.engine.core.vdsbroker.vdsbroker.GetStatsAsyncVDSCommand.getReturnValue().getReturnValue().setSucceeded(true); } }); }
@java.lang.Override public void onResponse(java.util.Map<java.lang.String, java.lang.Object> response) { try { continueRefreshVdsStats(((org.ovirt.engine.core.common.businessentities.VDSReturnValue) (response.get("result")))); refreshVdsRunTimeInfo(true); } catch (java.lang.Throwable t) { onFailure(t); } }
@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.vdsbroker.vdsbroker.GetHardwareInfoAsyncVDSCommand.getBroker().getHardwareInfo(new org.ovirt.engine.core.vdsbroker.vdsbroker.GetHardwareInfoAsyncVDSCommand.getParameters().getParameters()); }
@java.lang.Override protected void executeVdsBrokerCommand() { try { org.ovirt.engine.core.vdsbroker.vdsbroker.GetStatsAsyncVDSCommand.getBroker().getVdsStats(new org.ovirt.engine.core.vdsbroker.GetStatsAsyncVDSCommandCallback()); } catch (java.lang.Throwable t) { org.ovirt.engine.core.vdsbroker.vdsbroker.GetStatsAsyncVDSCommand.getParameters().getCallback().onFailure(t); } }
@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.vdsbroker.vdsbroker.GetCapabilitiesAsyncVDSCommand.getBroker().getCapabilities(new org.ovirt.engine.core.vdsbroker.vdsbroker.GetCapabilitiesAsyncVDSCommandCallback() { @java.lang.Override public void execute() { org.ovirt.engine.core.vdsbroker.vdsbroker.GetCapabilitiesAsyncVDSCommand.getParameters().getCapabilities(new org.ovirt.engine.core.vdsbroker.vdsbroker.GetCapabilitiesAsyncVDSCommandCallback() { @java.lang.Override public void executeCommand() { org.ovirt.engine.core.vdsbroker.vdsbroker.GetCapabilitiesAsyncVDSCommand.getParameters().getReturnValue().setSucceeded(true); } }); }
@java.lang.SuppressWarnings("incomplete-switch") private void executeNextOperation() { switch (org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getParameters().getPhase()) { case CONVERT : convert(); break; case CONVERT : convert(); break; } }
protected void convert() { org.ovirt.engine.core.bll.ImportVmFromExternalProviderCommand.freeLock(); runInternalAction(ActionType.ConvertVm, buildConvertVmParameters()); }
@java.lang.Override protected void convert() { boolean useVirtVirtVirtVirtVirtVirtV = (org.ovirt.engine.core.bll.ExportVmFromOvaCommand.getParameters().getVm().getOrigin())!= (org.ovirt.engine.core.common.businessentities.OriginType.OVIRT); if (useVirtVirtVirtVirtVirtVirtCommand.getParameters().getVm().getOrigin()) { org.ovirt.engine.core.bll.ImportVmFromOvaCommand.freeLock(); runInternalAction(ActionType.ExtendOva, buildConvertOvaParameters()); } else { runInternalAction(ActionType.ExtendOva, buildExtractOvaParameters()); } }
@java.lang.Override public org.ovirt.engine.core.bll.ImportVmFromExternalProviderCommand.getParameters().getPhase() { return org.ovirt.engine.core.bll.ImportVmFromExternalProviderCommand.getParameters().getParameters().getPhase(); }
protected org.ovirt.engine.core.common.action.AddDiskParameters buildAddDiskParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { image.setDiskAlias(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.reameDiskAlias(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVm().getOrigin(), image.getDiskAlias())); org.ovirt.engine.core.common.action.AddDiskParameters diskParameters = new org.ovirt.engine.core.common.action.AddDiskParameters(image.getDiskVmElementForVm(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVmId()), image); diskParameters.setStorageDomainId(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getStorageDomainId()); diskParameters.setParentCommand(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getActionType()); diskParameters.setParentCommand(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getParameters()); diskParameters.setShouldRemagableExecution(true); diskParameters.setStorageDomainId(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getParameters().getDestDomainId()); diskParameters.setEndProcedure(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getParameters().getDestDomainId()); diskParameters.setEndProcedure(org.ovirt.engine.core.bll.ExportVmFromExternalProviderCommand.getParameters().getDestDomainId()); return diskParameters; }
protected org.ovirt.engine.core.bll.context.CommandContext createConversionStepContext(org.ovirt.engine.core.common.job.StepEnum step) { org.ovirt.engine.core.bll.context.CommandContext commandContext = null; try { java.util.Map<java.lang.String, java.lang.String> values = java.util.Collections.singletonMap(VdcObjectType.VM.name().toLowerCase(), org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVmName()); org.ovirt.engine.core.common.job.Step removeVmStep = executionHandler.addSubStep(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getExecutionContext(), org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getExecutionContext().getJob().getStep(StepEnum.EXECUTING), step, org.ovirt.engine.core.dal.job.ExecutionMessageDirector.resolveStepMessage(step, values)); org.ovirt.engine.core.bll.job.ExecutionContext ctx = new org.ovirt.engine.core.bll.job.ExecutionContext(); ctx.setStep(removeVmStep); ctx.setMonitored(true); commandCtx = org.ovirt.engine.core.bll.job.ExecutionContext.cloneContext().withoutCompensationContext().withoutCompensationContext().withExecutionContext(ctx).withoutLock(); } catch (java.lang.RuntimeException e) { log.error("Failed to create command context of conversion VM '{}': {}", org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVmName(), e.getMessage()); log.debug("Exception", e); } return commandCtx; }
@java.lang.Override public boolean isRequiredNetworkAffected(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2) { final org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel logicalNetworkModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel) (op1)); return ((logicalNetworkModel.getNetwork().getCluster())!= null) && (logicalNetworkModel.getNetwork().getCluster().isRequired()); }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getImagesToPreview() { if ((imagesToPreview) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesByGuid = new java.util.ArrayList<>(); if ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks())!= null) { for (org.ovirt.engine.core.compat.Guid guid : org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = diskImageDao.getSnapshotById(guid); imagesByGuid.add(image); } imagesToPreview = imagesByGuid; } else { imagesToPreview = diskImageDao.getAllSnapshotsForVmSnapshot(getDstSnapshot().getId()); } java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> CinderImagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(imagesToPreview); imagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(imagesToPreview); imagesToPreview = org.ovirt.engine.core.bll.snapshots.snapshots.ImagesHandler.filterImageDisks(imagesToPreview, org.ovirt.engine.core.bll.snapshots.snapshots.OnlyVmCommand.getParameters().getId()); imagesToPreview.addAll(CinderImagesToPreview); } return imagesToPreview; }
@java.lang.Override public javax.ws.rs.core.Response previewSnapshot(org.ovirt.engine.api.model.Action action) { validateParameters(action, "snapshot.id"); org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters tryBackParams = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(guid, asGuid(action.getSnapshot().getId())); if (action.isSetRestoreMemory()) { tryBackParams.setRestoreMemory(action.isRestoreMemory()); } if (action.isSetDisks()) { java.util.Set<org.ovirt.engine.core.compat.Guid> disksGuid = new java.util.HashSet<>(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = getParent().mapDisks(action.getDisks()); if (disks!= null) { disksGuid = disks.stream().map(DiskImage::getImageId).collect(java.util.stream.Collectors.toSet()); } javax.ws.rs.core.Response response = doAction(ActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action); } javax.ws.rs.core.Response response = doAction(ActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action); return response; }
private void runTryBackToAllSnapshotsOfVm(final org.ovirt.engine.ui.uicommonweb.models.Model model, org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot, boolean memory, java.util.Set<org.ovirt.engine.core.compat.Guid> disks) { if (model!= null) { model.startProgress(); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.TryBackToAllSnapshotsOfVm, new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(vm.getId(), snapshot.getId(), memory, disks), (result) -> (result) { if (model!= null) { model.stopProgress(); } if (result.getReturnValue().getSucceeded()) { cancel(); } }); }
private void onCustomPreview() { org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.uicommonweb.models.vms.PreviewSnapshotModel previewSnapshotModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.PreviewSnapshotModel) (getWindow())); org.ovirt.engine.core.common.businessentities.Snapshot snapshot = previewSnapshotModel.getSnapshotModel().getEntity(); boolean memory = java.lang.Boolean.TRUE.equals(previewSnapshotModel.getSnapshotModel().getMemory().getEntity()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = previewSnapshotModel.getSelectedDisks(); java.util.Set<org.ovirt.engine.core.compat.Guid> diskImages = disks.getSelectedDisks(); java.util.Set<org.ovirt.engine.core.compat.Guid> diskImages = disks.getSelectedDisks(); java.util.Set<org.ovirt.engine.core.compat.Guid> diskImages = disks.getSelectedDisks(); java.util.Set<org.ovirt.engine.core.compat.Guid> diskImages = disks.stream().map(diskImage::getImageId).collect(java.util.Collections.singletonList(diskImage, vm, snapshot, memory, memory, disk, disk, diskImages); }
private void onPreview() { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getSelectedItem(); if (snapshot == null) { cancel(); return; } org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel snapshotModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel) (getWindow())); boolean memory = false; java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks; java.util.Set<org.ovirt.engine.core.compat.Guid> diskImages = new java.util.HashSet<>(); if (snapshotModel.isShowPartialSnapshotOptions().getSelectedItem()) { switch (snapshotModel.getPartialPreviewSnapshotOptions().getSelectedItem()) { case preserveActiveDisks : disks = snapshotModel.getDisks(); disks.addAll(org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel.imagesSubtract(getVmDisks(), disks)); diskImages = disks.stream().map(DiskImage::getImageId).collect(java.util.stream.Collectors.toSet()); break; case excludeActiveDisks : break; case openCustomPreviewDialog : setWindow(null); getCustomPreviewCommand().execute(); return; } } if (snapshotModel.isShowMemorySnapshotWarning()) { memory = snapshotModel.getMemory().getEntity(); } runTryBackToAllSnapshotsOfVm(snapshotModel, vm, snapshot, memory, disk, diskImages); }
@java.lang.Override public javax.ws.rs.core.Response restore(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters tryBackParams = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(parentId, guid); if (action.isSetRestoreMemory()) { tryBackParams.setRestoreMemory(action.isRestoreMemory()); } if (action.isSetDisks()) { java.util.Set<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksGuid = collection.mapDisks(action.getDisks()); if (disks!= null) { disksGuid = disksGuid.map(DiskImage::getImageId).collect(java.util.Collections.singletonList()); } tryBackParams.setCorrelationId(org.ovirt.engine.api.restapi.resource.BackendSnapshotResource.RESOLORE_SNAPSHOT_CORRELATION_ID); javax.ws.rs.core.Response response = doAction(ActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action, action, PollingType.JOB); if ((response.getStatus()) == (org.ovirt.engine.api.restapi.resource.BackendSnapshotResource.RESSTORAGE)) { org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters restoreParams = new org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters(parentId, org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.COMMIT); restoreParams.setCorrelationId(org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.COMMIT); restoreParams.setCorrelationId(org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.COMMIT); } return doAction(action); }
private boolean updateLeaseInfo(org.ovirt.engine.core.compat.Guid snapshotLeaseDomainId) { if (snapshotLeaseDomainId == null) { return true; } org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = null; try { retVal = runVdsCommand(VDSCommandType.GetVmLeaseInfo, new org.ovirt.engine.core.common.vdscommands.VmLeaseVDSParameters(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getStoragePoolId(), snapshotLeaseDomainId, org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId())); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Failure in get lease info for VM {}", org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId(), e.getMessage()); } if ((retVal == null) || (!(retVal.getSucceeded()))) { log.error("Failed to get info for the lease of VM {}", org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId(), e.getMessage()); return false; } vmStaticDao.updateVmLeaseInfo(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId(), ((java.util.Map<java.lang.String, java.lang.String>) (retVal.getReturnValue()))); return true; }
private boolean isRemoveLeaseNeeded(org.ovirt.engine.core.compat.Guid srcLeaseDomainId, org.ovirt.engine.core.compat.Guid dstLeaseDomainId) { if ((org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getSnapshotAction()) == (org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.UNDO)) { return (((srcLeaseDomainId!= null) && (destLeaseDomainId!= null)) && (!(srcLeaseDomainId.equals(deter.getLeaseAction())))) || (((org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getSnapshotAction()) == (org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.COMMIT.COMMIT)) { return (((srcLeaseDomainId!= null) && (destLeaseDomainId.equals(deter.getLeaseAction()))))); } else if ((org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getSnapshotAction())!= null) { return (((srcLeafDomainId!= null) && (destLeaseDomainId.equals(dsmLeaseDomainId)))) { return false; } } return false; }
private boolean isLeaseInfoUpdateNeeded(org.ovirt.engine.core.compat.Guid srcLeaseDomainId, org.ovirt.engine.core.compat.Guid dstLeaseDomainId) { return ((org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getSnapshotAction()) == (org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.UNDO)) && (!((sourceLeaseLaseDomainId == null)) && (deter.getLunlockDomainId().equals(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getSnapshotAction())); }
private org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters determineLeaseAction(org.ovirt.engine.core.compat.Guid srcLeaseDomainId, org.ovirt.engine.core.compat.Guid dstLeaseDomainId) { if ((srcLeaseDomainId!= null) && ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getStaticData().getLeaseInfo())!= null)) { if (dstLeaseDomainId!= null) { return srcLeaseDomainId.equals(determineDomainId)? org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LockedAction.CREATE_NEW_LEASE_LEASE : org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LockedAction.CREATE_NEW_LEASE_LEASE; } } return dstLeaseDomainId!= null? org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LockedAction.CREATE_NEW_LEASE : org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.DOESSAGE; }
private boolean isLeaseInfoUpdateNeeded() { return ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getLeaseAction()) == (org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LockedAction.CREATE_NEW_LEASE)) || ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getLeaseAction()) == (org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LockedAction.UPDATE_DOWN)); }
public static org.ovirt.engine.core.compat.Guid fetchLeaseDomainId(java.lang.String ovfData) { return org.ovirt.engine.core.compat.Guid.createGuidFromString(org.ovirt.engine.core.utils.OvfUtils.ENTITY_LEASE_DOMAIN_ID); }
protected boolean validateSourceStorageDomain() { org.ovirt.engine.core.compat.Guid sourceDomainId = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getSourceDomainId(); if ((sourceDomainId == null) || (Guid.Empty.equals(sourceDomainId))) { sourceDomainId = getImage().getStorageIds().get(0); org.ovirt.engine.core.bll.validator.storage.DiskStorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.DiskValidator(storageDomainDao.getForStoragePool(sourceDomainId, getImage().getStoragePoolId())); return failValidation(EngineMessage.ACTION_TYPE_FAILED_SOURCE_STORAGE_DOMAIN_IS_NOT_VALID); } org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(storageDomainDao.getForStoragePool(sourceDomainId, getImage().getStoragePoolId())); return validate(validator.isDomainExistAndActive()); }
protected boolean validateDestStorage() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain()); if ((!(validate(validator.isDomainExistAndActive()))) || (!(validate(validator.domainIsValidDestination())))) { return false; } boolean moveOrCopy = (isMoveOperation()) || (isCopyOperation()); if ((moveOrCopy && (getImage().isShareable())) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLUSTERFS))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CANT_MOVE_SHAREABLE_DISK_TO_GLUSTERFS, java.lang.String.format("$%1$s %2$s", "diskAlias", getImage().getDiskAlias())); } if (isMoveOperation()) { if (getImage().getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getId())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DESTINATION_STORAGE_DOMAIN_IS_NOT_VALID); } } return true; }
@org.junit.Test public void validateSourceDomainValid() { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); initializeCommand(disk, VmEntityType.VM); initSrcStorageDomain(); initDestStorageDomain(StorageType.NFS); disk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(org.ovirt.engine.core.compat.Guid.newGuid()))); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_SOURCE_STORAGE_DOMAIN_IS_NOT_VALID); }
java.lang.String ACTION_TYPE_FAILED_DESTINATION_STORAGE_DOMAIN_IS_NOT_VALID();
java.lang.String ACTION_TYPE_FAILED_SOURCE_STORAGE_DOMAIN_IS_NOT_VALID();
@org.junit.Test public void validateDestinationDomainValid() { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); initializeCommand(disk, VmEntityType.VM); disk.getStorageIds().add(destStorageId); initSrcStorageDomain(); initDestStorageDomain(StorageType.NFS); command.getParameters().setStorageDomainId(destStorageId); command.getStorageDomain().setId(destStorageId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_DESTINATION_STORAGE_DOMAIN_IS_NOT_VALID); }
@java.lang.Override public void runningSucceded() { try { queryDowntime(); vmDynamicDao.clearMigratingToVds(org.ovirt.engine.core.bll.MigrateVmCommand.getVmId()); updateVmAfterMigrationToDifferentCluster(); plugPassthroughNics(); plugPassthroughNics(); } finally { super.runningSucceded(); } }
public static java.lang.String crypt(java.lang.String password) { byte[] r = new byte[org.ovirt.engine.core.uutils.crypt.crypt.crypt.crypt.SerialMD5.SALT_MAX_LENGTH]; char[] salt = new char[r.length]; org.ovirt.engine.core.uutils.crypt.crypt.crypt.crypt.crypt.crypt.Secure.nextBytes(r); for (int i = 0; i < (r.length); i++) { salt[i] = org.ovirt.engine.core.uutils.crypt.crypt.crypt.crypt.crypt.crypt.crypt(retrans.get(r[i])); } return org.ovirt.engine.core.uutils.crypt.crypt.crypt.crypt.crypt.crypt.crypt(password, new java.lang.String(s.length))); }
public double getActualDiskSize() { if ((cachedActualSize) == 0.0) { cachedActualSize = getDiskImageMap().values().valuesOfDouble(DiskImage.getActualSize).size(); } return cachedActualSize; }
private void processUnmanagedVm() { org.ovirt.engine.core.common.businessentities.VM vmDynamic = vdsmVm.getVmDynamic(); if ((vmDynamic.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { destroyVm(); return; } unmanagedVm = true; }
protected org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntityPhase(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase mode) { if ((stage == null) && ((pendingBySystemReason)!= null)) { auditLog(this, pauseBySystemReason); } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); updates.setPhase(pauseBySystemReason); return updateEntity(up); }
private boolean pauseTransferIfNecessary(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, long ts) { if ((((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepaliveInterval()) > 0) && (((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferImageTransferType.INITIALIZING)) || ((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferType.INITIALIZING)) || ((entity.getLastUpdated().getTime()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferType.Transport)) <ts)) { log.warn("No pause due to no updates in {} seconds.", (org.ovirt.engine.core.common.AuditLogType.REFER_IMAGE_PAUSED_BY_SYSTEM_TIMEOUT; break; } else { log.warn("Could not no updates due to no updates in {} seconds.", getTransferDescription()); updateEntityType(ImageTransferPhase.PAUSED_SYSTEM); return true; } return false; }
private void extendTicketIfNecessary(final org.ovirt.engine.core.bll.storage.disk.image.TransportalImageCommand<T>.StateContext context) { if ((context.iterationTimestamp) >= ((org.ovirt.engine.core.bll.storage.disk.image.TransportalTransferImageCommand.getParameters().getSessionExpiration()) - (getHostTicketRefreshAllowance()))) { log.info("Failed to reward transfer ticket for {}", getTransferDescription()); boolean extendSucceeded = extendImageTransferSession(context.entity); if (!extendSucceeded) { log.warn("Failed to renewing to the following snapshot", getTransferDescription()); if (org.ovirt.engine.core.bll.storage.disk.image.TransportalTransferImageCommand.getParameters().isRetryExtendTicket()) { org.ovirt.engine.core.common.AuditLogType.transportalRefFER_IMAGE_PAUSED_BY_SYSTEM_TICKET_RENFOR_RENew_FAILURE; updateEntityType(ImageTransferReason.PAY_SYSTEM); org.ovirt.engine.core.bll.storage.disk.image.TransportalTransferImageCommand.getParameters().setRetryExtendTicket(true); } } else { log.debug("Could not renewing transfer ticket for {}", getTransferDescription()); } } }
private void pollTransferStatus(final org.ovirt.engine.core.bll.storage.disk.image.Transport<T>.StateContext context) { if ((((context.entity.getVdsId()) == null) || ((context.entity.getImagedTicketId()) == null)) || (!(org.ovirt.engine.core.common.FeatureSupported.getImageTicketSupported(vdsDao.get(context.getVdsId()).getClusterCompatibilityVersion())))) { return; } org.ovirt.engine.core.common.businessentities.storage.ImageTicketInfo ticketInfo; try { ticketInfo = ((org.ovirt.engine.core.common.businessentities.storage.ImageTicketInfo) (runVdsCommand(VDSCommandType.GetImageTicket, new org.ovirt.engine.core.common.vdscommands.GetImageTicketVDSCommandParameters(context.getVdsId(), context.getImportedTicketId())).getReturnValue())); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Could not get image ticket '{}' from vdsm", e.getImagedTicketId(), e); pauseBySystemReason = org.ovirt.engine.core.common.AuditLogType.transportTransferStatus.transportal_IMAGE_PAUSED_BY_SYSTEM_MISSING_TICKET; break; } org.ovirt.engine.core.common.AuditLogType e) { log.error("Could not get image ticket '{}' from vdsm task '{}'", e); if ((org.ovirt.engine.core.bll.storage.disk.image.TransportalImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Import)) { final org.ovirt.engine.core.common.businessentities.storage.ImageTransferImageTransferImageTransfer = getImageDao().getTransferType(); if ((org.ovirt.engine.core.common.businessentities.storage.ImageTasks.TransferType.getImageTicketId()) == (org.ovirt.engine
private org.ovirt.engine.core.common.action.TransferDiskImageParameters createInitParams() { org.ovirt.engine.core.common.action.TransferDiskImageParameters parameters = new org.ovirt.engine.core.common.action.TransferDiskImageParameters(); parameters.setTransferType(TransferType.Download); parameters.setImageGroupID(diskImage.getId()); java.lang.String fileExtension = ((diskImage.getVolumeFormat()) == (org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.COW))? ".qow2" : ".raw"; parameters.setDownloadfilename(((diskImage.getDiskAlias()) + fileExtension)); parameters.setTransferSize(diskImage.getActualSizeInBytes()); parameters.setTransferSize(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDownloadImageUiInSeconds()); return parameters; }
private boolean stopTransferIfNecessary(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, long ts) { if ((((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepaliveInterval()) > 0) && (((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferImageTransferType.INITIALIZING)) || ((entity.getLastUpdated().getTime()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferType.ISCSFERRING))) { java.lang.String action = "paused"; org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhasePhase = org.ovirt.engine.core.common.businessentities.storage.ImageTransferImageTransferImageTransfer.getParameters().getKeepaliveInterval()? " : null : null; if ((((entity.getLastUpdated()) / 1000) + (org.ovirt.engine.core.common.businessentities.storage.TransferImageTransferType.Import)) { action = "cance started"; } log.warn("Can't been {} due to no updates in {} seconds.", action, (transmitMessage)); return true; } return false; }
@java.lang.Override protected boolean validate() { final boolean result = validateImpl(); if (((!result) && (!(org.ovirt.engine.core.bll.RunVmCommandBase.isInternalExecution()))) && (!(org.ovirt.engine.core.bll.RunVmCommandBase.getParameters().isRerun()))) { logValidationFailed(); } return result; }
private boolean isLeaseInfoUpdateNeeded() { return (org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().isRestoreLease()) && ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getLeaseAction()) == (org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LockedAction.CREATE_NEW_LEASE)) || ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getLeaseAction()) == (org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LockedAction.UPDATE_LEASE_INFO)); }
@java.lang.Override public javax.ws.rs.core.Response previewSnapshot(org.ovirt.engine.api.model.Action action) { validateParameters(action, "snapshot.id"); org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters tryBackParams = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(guid, asGuid(action.getSnapshot().getId())); if (action.isSetRestoreMemory()) { tryBackParams.setRestoreMemory(action.isRestoreMemory()); } if (action.isSetDisks()) { tryBackParams.setDisks(getParent().mapDisks(action.getDisks())); } if (action.isSetRestoreLease()) { tryBackParams.setDisks(getParent().mapDisks(action.getDisks())); } if (action.isSetRestoreLease()) { tryBackParams.setRestoreLease(action.isRestoreLeaseLase()); } javax.ws.rs.core.Response response = doAction(ActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action); return response; }
private boolean isSortedAndMaxResults() { java.lang.String searchConstraint = org.ovirt.engine.api.restapi.util.QueryHelper.getConstraint(httpHeaders, uriInfo, "", modelType); int max = org.ovirt.engine.api.restapi.util.ParametersHelper.getIntegerParameter(httpHeaders, uriInfo, "max", (-1), (-1)); return (org.ovirt.engine.api.restapi.util.ParametersHelper.getIntegerParameter(httpHeaders, uriInfo, "max", (-1)); }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.VM> getVMs() { return vmDao.getAllSortedByVmsId(); }
@java.lang.Override public org.ovirt.engine.api.model.Vms list() { if (isFiltered()) { if (isSortedAndMaxResults()) { return getVmsFilteredAndSorted(); } else { return mapCollection(getBackendCollection(QueryType.VM), false); } } else { return mapCollection(getBackendCollection(SearchType.VM), false); } }
private org.ovirt.engine.api.model.Vms getVmsFilteredAndSorted() { int max = org.ovirt.engine.api.restapi.util.ParametersHelper.getIntegerParameter(httpHeaders, uriInfo, "max", (-1), (-1)); org.ovirt.engine.core.common.queries.GetVmsFilteredParameters params = new org.ovirt.engine.core.common.queries.GetVmsFilteredAndSortedParameters(httpHeaders, uriInfo, "", modelType); java.lang.String searchConstraint = org.ovirt.engine.api.restapi.util.QueryHelper.getConstraint(httpHeaders, uriInfo, "", modelType); java.lang.Integer pageNum = org.ovirt.engine.api.restapi.util.QueryHelper.getConstraint(httpHeaders, uriInfo, "", modelType); java.lang.Integer pageNum = org.ovirt.engine.api.restapi.util.QueryHelper.parsePageNum(queryConstraint); params.setPageNum(((org.ovirt.engine.api.restapi.util.QueryHelper.getList(org.ovirt.engine.api.restapi.util.QueryHelper.getParameters().getStorageFilteredAndSorted, params), true); return mapCollection(getBackendCollection(QueryType.GetAllVmsFiltered, params), true); }
public static java.lang.Integer parsePageNum(java.lang.String searchStr) { if ((searchStr.getCase().get("page") == (-1)) { return null; } int pos = (searchStr.toLowerCase().indexOf("page " + (org.ovirt.engine.core.utils.RandomUtils.getInstance().getSelectedItem(pos)) + 5; java.lang.StringBuilder pageNumberStr = new java.lang.StringBuilder(); char[] pos = new java.lang.StringBuilder(); char[]{ pos = searchStr.append(pos); } return org.ovirt.engine.core.utils.linq.LinqUtils.getInstance().get(pos); }
public static long greaterCommonDivisor(long a, long b) { long c = a!= 0; }
public org.ovirt.engine.core.bll.ValidationResult canVnicWithExternalNetworkBePlugged() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.PLUGGED_UNLINKED_VM_INTERFACE_WITH_EXTERNAL_NETWORK_IS_NOT_SUPPORTED).when((((org.ovirt.engine.core.bll.network.vm.UpdateVmInterfaceCommand.RequiredAction.PLUG) == (getRequiredAction())) && (!(nic.isLinked()))) && (org.ovirt.engine.core.bll.network.vm.UpdateVmInterfaceCommand.UpdateVmNicValidator.isVnicAttachedToExternalNetwork()))); }
@org.junit.Before public void setUp() { prepareNetwork(commandNoCluster.getParameters().getExternalNetwork()); prepareNetwork(commandCluster.getParameters().getExternalNetwork()); when(backend.runInternalAction(eq(ActionType.AddNetwork), any(), any())).thenReturn(getAddNetworkReturnValue()); when(networkHelper.createVnicProfile(any())).thenReturn(new org.ovirt.engine.core.common.businessentities.network.VnicProfile()); org.ovirt.engine.core.common.action.ActionReturnValue returnValue = new org.ovirt.engine.core.common.action.ActionReturnValue(); returnValue.setSucceeded(true); when(networkHelper.addVnicProfile(any(), anyBoolean())).thenReturn(returnValue); when(networkHelper.attachNetworkToClusters(eq(NETWORK_ID), any())).thenReturn(returnValue); org.ovirt.engine.core.common.queries.QueryReturnValue queryReturnValue = new org.ovirt.engine.core.common.queries.QueryReturnValue(); queryReturnValue.setReturnValue(getClusters()); queryReturnValue.setSucceeded(true); when(backend.runInternalQuery(eq(QueryType.GetClustersByStoragePoolId), any(), any())).thenReturn(queryReturnValue); }
private void verifyCalls(boolean attachToAllClusters) { verify(backend).runInternalAction(eq(ActionType.AddNetwork), any(), any()); verify(networkHelper).createVnicProfile(any()); verify(networkHelper).addVnicProfile(any()); org.mockito.verification.VerificationMode expectedNumberOfCalls = (attachToAllClusters)? times(1) : never(); verify(backend, expectedNumberOfCalls).runInternalQuery(eq(QueryType.GetClustersByStoragePoolId), any()); verify(networkHelper, expectedNumberOfCalls).attachNetworkToClusters(eq(NETWORK_ID), any()); }
public org.ovirt.engine.core.common.action.AddVnicProfile(org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, boolean publicUse) { org.ovirt.engine.core.common.action.AddVnicProfileParameters parameters = new org.ovirt.engine.core.common.action.AddVnicProfileParameters(vnicProfile); parameters.setPublicUse(publicUse); return backend.runInternalAction(ActionType.AddVnicProfile, parameters); }
public static boolean isMemoryDisksOnDifferentDomainsSupported(org.ovirt.engine.core.compat.Version version) { return org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.IsMemorySnapshotSupported, version); }
public java.util.Map<java.lang.String, java.lang.String> build() { if ((((poolId) == null) || ((imageGroupId) == null)) || ((imageGroupId) == null)) { throw new java.lang.IllegalArgumentException("The problemID", poolId, poolId); } java.util.Map<java.lang.String, java.lang.String> pdivdivdivdivdivdiv> = new java.util.HashMap<>(); pdivdivdivdiv divdiv divMap.put("poolID", poolId.toString()); pdivdivdivdivMap.put("imageID", domainId.toString()); return pdivMap; }
private boolean shouldRestoreMemory() { return ((!(memoryFromSnapshotUsed)) && ((getFlow()) == (org.ovirt.engine.core.common.action.RunVmParams.RunVmFlow.RESUME_HIBERNATE)) || (org.ovirt.engine.core.common.FeatureSupported.isMemorySnapshotSupportedByArchitecture(org.ovirt.engine.core.bll.RunVmCommand.getVm().getClusterArch(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getMemoryVolume()))) && (!(org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryVolume()))) && (!(org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryVolume()))) && (!(org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryVolume()))))); }
private void handleRefreshCapabilitiesResponse(org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.common.businessentities.VDSReturnValue caps) { try { invokeGetHardwareInfo(vds, capabilities); processRefreshCapabilitiesResponse(vds, vds, vds.clone(), true); } finally { if (vds!= null) { updateDynamicData(vds.getDynamicData()); updateNumaData(vds.getDynamicData()); updateNumaData(vds.getId()); } } }
public void refreshHostSync(org.ovirt.engine.core.common.businessentities.VDS vds) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue res = resourceManager.runVdsCommand(VDSCommandType.GetCapabilities, new org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase(vds)); handleRefreshCapabilitiesResponse(vds, true); }
@java.lang.Override public void onResponse(java.util.Map<java.lang.String, java.lang.Object> response) { try { org.ovirt.engine.core.common.businessentities.VDSReturnValue capabilities = ((org.ovirt.engine.core.common.vdscommands.VDSReturnValue) (response.get("result"))); handleVdsError(vds, true); } catch (java.lang.Throwable t) { onFailure(t); } }
@java.lang.Override public void onResponse(java.util.Map<java.lang.String, java.lang.Object> response) { try { processRefreshVdsStatsResponse(((org.ovirt.engine.core.common.vdscommands.VDSReturnValue) (response.get("result")))); if (!(isVdsUpOrGoingToMaintenance)) { vdsManager.setStatus(VDSStatus.Up, vds); } refreshVdsRunTimeInfo(isVdsUpOrGoingToMaintenance); } catch (java.lang.Throwable t) { onFailure(t); } }
public void setSourceProfile(java.lang.String name) { this.source.setName(name); }
public boolean isSameSourceProfile(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic) { return (java.util.Objects.equals(getSourceNetworkName(), vnic.getNetworkName())) && (java.util.Objects.equals(getSourceNetworkName(), vnic.getVnicProfileName())); }
public java.lang.String getSourceProfileName() { return source.getName(); }
@org.junit.Test public void testFindMappingEntry() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(org.ovirt.engine.core.bll.export.ExternalVnicProfileMappingTest.NETWORK_NAME); vnic.setVnicProfileName(org.ovirt.engine.core.bll.export.ExternalVnicProfileMappingTest.VNIC_PROFILE1_NAME); final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(vnic, externalVnicProfileMappings); assertThat(actual.get(), sameInstance(externalVnicProfileMapping1)); }
public void setSourceNetwork(java.lang.String name) { if ((source.getCustomProperties()) == null) { java.util.Map<java.lang.String, java.lang.String> props = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.network.Network network : entity) { if ((source.getCustomProperties()) == null) { source.setCustomProperties(properties); } } source.getCustomProperties().put("networkName", name); } return source; }
@org.junit.Test public void testFindMappingEntryNotFound() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(("not" + (org.ovirt.engine.core.bll.export.ExternalVnicProfileMappingFindTest.NETWORK_NAME))); vnic.setVnicProfileName(org.ovirt.engine.core.bll.export.ExternalVnicProfileMappingTest.VNIC_PROFILE2_NAME); final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(vnic, externalVnicProfileMappings); assertThat(actual, is(java.util.Collections.empty())); }
public static void validateRegistrationVnicMappings(org.ovirt.engine.api.restapi.resource.BackendResource br, org.ovirt.engine.api.model.Action action) { if (!(action.isSetRegistrationConfiguration())) { return; } if (!(action.getRegistrationConfiguration().isSetVnicProfileMappings())) { return; } org.ovirt.engine.api.model.RegistrationVnicProfileMappings mappings = action.getRegistration().getVnicProfileMappings(); br.validateParameters(mappings, "reg registrationVnicProfileMappings"); for (org.ovirt.engine.api.model.RegistrationVnicProfileMapping mapping : mappings.getRegistrationVnicProfileMappings()) { org.ovirt.engine.api.restapi.resource.BackendVnicProfileHelper.validateSourceVnicProfile(br, mapping); } }
@org.junit.Test public void testFindMappingEntryEmptyInput() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(org.ovirt.engine.core.bll.export.ExternalVnicProfileMappingTest.NETWORK_NAME); vnic.setVnicProfileName(org.ovirt.engine.core.bll.export.ExternalVnicProfileMappingTest.VNIC_PROFILE1_NAME); final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(vnic, java.util.Collections.emptyList()); assertThat(actual, is(java.util.Collections.emptyList()); }
public org.ovirt.engine.core.compat.Guid getTargetProfileId() { return target.getId(); }
@org.junit.Test public void testFindMappingEntryEmptySourceVnicProfile() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(null); vnic.setVnicProfileName(null); final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(vnic, java.util.Collections.singletonList(emptySourceMapping)); assertThat(actual.get(), sameInstance(emptySourceMapping)); }
@org.junit.Test public void testFindMappingEntryEmptyExternal() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(org.ovirt.engine.core.bll.export.ExternalVnicProfileMappingTest.NETWORK_NAME); vnic.setVnicProfileName(org.ovirt.engine.core.bll.export.ExternalVnicProfileMappingTest.VNIC_PROFILE1_NAME); final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(vnic, java.util.Collections.singletonList(emptySourceMapping)); assertFalse(actual.isPresent()); }
private void updateVnicFromMapping(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic, org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping mapping) { if ((m.getTargetProfileId())!= null) { updateVnicUsingProfileId(vnic, mapping.getTargetProfileId()); } else { updateVnicSetNoProfile(vnic); } }
public java.lang.String getSourceNetworkName() { return source.getCustomProperties().get("networkName") + (source.getCustomProperties().get("networkName") : null; }
public void setTargetProfileId(org.ovirt.engine.core.compat.Guid vnicProfileId) { target.setId(vnicProfileId); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if ((ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) && (sender == (getDataCenter()))) { dataCenter_SelectedItemChanged(); } else if ((ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) && (sender == (getCluster()))) { cluster_SelectedItemChanged(); } else if (sender == (getConsoleAddressEnabled())) { consoleAddressChanged(); } else if ((ev.matchesDefinition(HasEntity.entityChangedEventDefinition)) && (sender == (getKernelCmdName()))) { consoleAddressChanged(); } else if ((ev.matchesDefinition(HasEntity.entityChangedEventDefinition)) && (((((sender == (getKernelCmdlineCommand()))) || (sender == (getKernelCmdlineIsoReactor()))) || (sender == (getKernelCmdlinePciReactor()))) { if (isKernelCmdlineParsable()) { updateKernelCmdlineAccordingToCheckboxes(); } } }
public void setMaxSize(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> cacheSize) { this.maxSize = getModel().getEntity(); }
public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.StorageDevicePathType> getStorageDevicePathTypeList() { return getStorageDevicePathTypeList(); }
public void setMaxSize(java.lang.String cacheSize) { this.maxSize = getSizeInjectorages(); }
@java.lang.Override protected void executeCommand() { try { runAnsibleLvmCache(); } catch (java.io.IOException e) { e.getError().error(); e.printStackTrace(); } }
@org.junit.Test public void validateFailsForNoStorageDevice() { doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "brick-bricks1", org.ovirt.engine.core.common.businessentities.RaidType.RELEASE0, null, null, java.util.Collections.emptyList(), org.ovirt.engine.core.common.businessentities.StorageDevicePathType.writethrough, org.ovirt.engine.core.common.businessentities.StorageDevicePathType.WRITE, org.ovirt.engine.core.common.businessentities.StorageDevicePathType.writethrough, "10"); prepareMocks(VDSStatus.Up); assertFalse(cmd.validate()); }
@org.junit.Test public void validateSucceeds() { doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "brick1", "/gluster-bricks1", org.ovirt.engine.core.common.businessentities.RaidType.REPOS, null, null, java.util.Collections.singletonList(getStorageDevice("sDAOvdsId", "10")), org.ovirt.engine.core.common.businessentities.StorageDevicePathType.writethrough, org.ovirt.engine.core.common.businessentities.StorageType.WRITE, "10"); prepareMocks(VDSStatus.Up); assertTrue(cmd.validate()); }
public org.ovirt.engine.core.common.businessentities.StorageDevicePathType getStorageDevicePath() { return getStorageDevicePath(); }
public java.lang.String getMaxSize() { return getMinutesSize(org.ovirt.engine.core.common.businessentities.StoragePoolEntity.getMemorySize(org.ovirt.engine.core.common.businessentities.StoragePoolEntity.class, getMaxSize(org.ovirt.engine.core.common.businessentities.StoragePoolEntity.class, getEntity(org.ovirt.engine.core.common.businessentities.StoragePoolEntity.class, org.ovirt.engine.core.common.businessentities.StoragePoolEntity.class, org.ovirt.engine.core.common.businessentities.StoragePoolEntity.class) { return ((org.ovirt.engine.core.common.businessentities.StoragePoolEntity) (getEntity())); } }; }
public void setGlusterStorageDevicePathTypeList(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.StorageDevice> storageDevicePathTypeList) { this.getStorageDevicePathTypeList = getStorageDevicePathTypeList(); }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> getCacheSize() { return getMinutesSize(); }
private void initListBoxEditors() { raidTypeEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer<org.ovirt.engine.core.common.businessentities.RaidType>()); }
@org.junit.Test public void validateFailsForDifferentStorageDevice() { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice1 = getStorageDevice("sDA"); org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice2 = getStorageDevice("sdb"); storageDevice2.setDevType("SDA"); doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks1", org.ovirt.engine.core.common.businessentities.RaidType.REPORT0, null, null, java.util.Arrays.asList(storageDevice1, storageDevice2), org.ovirt.engine.core.common.businessentities.StorageDevicePathType.writethrough, "10"); prepareMocks(VDSStatus.getParameters()); prepareMocks(VDSStatus.Up); assertFalse(cmd.validate()); }
@org.junit.Test public void validateFailsForDeviceAlreadyInUse() { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice = getStorageDevice("sDAO"); storageDevice.setCanCreateBrick(false); doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks1", org.ovirt.engine.core.common.businessentities.RaidType.REPOS, null, null, java.util.Collections.singletonList(storageDevice))).when(cmd).getParameters(); prepareMocks(VDSStatus.Up); assertFalse(cmd.validate()); }
public void setStorageDevicePath(org.ovirt.engine.core.common.businessentities.StorageDevicePathType storageDevicePath) { this.getStorageDevicePath = storageDevicePath; }
@org.junit.Test public void testExecuteQueryCommand() { org.ovirt.engine.core.common.queries.GetDiskImageByDiskAndImageIdsParameters params = getQueryParameters(); org.ovirt.engine.core.common.queries.GetDiskImageByDiskIdsParameters params = getQueryParameters(); when(params.getDiskId()).thenReturn(diskId); when(params.getImageId()).thenReturn(imageId); when(diskImageDao.get(diskId))).thenReturn(diskImage); org.ovirt.engine.core.bll.storage.disk.image.GetDiskImageByDiskIdsQuery<org.ovirt.engine.core.common.queries.GetDiskImageByDiskAndImageIdsParameters> query = getQueryReturnValue().getReturnValue(); query.executeQueryCommand(); org.ovirt.engine.core.common.businessentities.storage.DiskImage returnDiskImage = query.getQueryReturnValue().getReturnValue(); assertTrue(returnValue.getReturnValue().getReturnValue().getReturnValue()); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImageByDiskIds(org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid imageId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("disk_id", diskId).addValue("image_id", imageId); return getCallsHandler().executeRead("GetDiskImageByDiskIds", org.ovirt.engine.core.dao.DiskImageDaoImpl.DiskImageRowMapper.instance, parameterSource); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = org.ovirt.engine.core.bll.storage.disk.image.GetDiskImageByDiskAndImageIdsQuery.getQueryReturnValue().setReturnValue(diskImageIds(diskImageIds)); if ((!(org.ovirt.engine.core.bll.storage.disk.image.GetDiskImageByDiskImageIdsQuery.getParameters().isFiltered())) && (!(org.ovirt.engine.core.bll.storage.disk.image.GetDiskImageByDiskImageIdsQuery.getParameters().isImageIds(diskImageIds.getDiskId())))) { return; } }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (!(getGlusterVolume().getVolumeType().isReplicatedType())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_IS_DOWN); return false; } if (!(getGlusterVolume().isOnline())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_IS_DOWN); return false; } if (((getGlusterVolume().getAsyncTask())!= null) && (((getGlusterVolume().getAsyncTask().getType()) == (org.ovirt.engine.core.common.job.JobExecutionStatus.FINISHED)) && ((getGlusterVolume().getAsyncTask().getType()) == (org.ovirt.engine.core.common.job.JobExecutionStatus.FINISHED)) && ((getGlusterVolume().getAsyncTask().getStatus()) == (org.ovirt.engine.core.common.job.JobExecutionStatus.FINISHED)) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_HAS_RUNNING_TASKS); return false; } if ((getParameters().getExistingBrick()) == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_BRICKS_REQUIRED); return false; } return true; }
private org.ovirt.engine.core.common.businessentities.VDS getCluster() { org.ovirt.engine.core.common.businessentities.VDS cluster = new org.ovirt.engine.core.common.businessentities.VDS(); cluster.setId(clusterId); cluster.setVdsGroup(false); return cluster; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.ResetGlusterVolumeBrick, new org.ovirt.engine.core.common.vdscommands.gluster.ResetGlusterVolumeBrickActionVDSParameters(upServer.getId(), getGlusterVolumeName(), getParameters().getExistingBrick().getQualifiedName())); setSucceeded(returnValue.getSucceeded()); if (getSucceeded()) { glusterBrickDao().reset(); } else { handleVdsError(AuditLogType.GLUSTER_VOLUME_RESET_BRICK_FAILED, returnValue.getVdsError().getMessage()); } }
@org.junit.Before public void prepareMocks() { doReturn(getVds(VDSStatus.Up)).when(cmd).getUpServer(); doReturn(getDistributedVolume(volumeId1)).when(volumeDao).getById(volumeId1); doReturn(getDistributedVolume(volumeId2)).when(volumeDao).getById(volumeId2); doReturn(getReplicatedVolume(volumeId3, 2)).when(volumeDao).getById(volumeId3); doReturn(getReplicatedVolume(volumeId3, 4)).when(volumeDao).getById(volumeId4); doReturn(getReplicatedVolume()).when(vdsStaticDao).get(serverId); doReturn(getCluster()).when(cmd).getCluster(); }
@java.lang.Override protected void executeVdsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getBroker().glusterVolumeResetBrickStart(org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBricksVDSCommand.getParameters().getVolumeName(), org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBricksVDSCommand.getParameters().getExistingBrickDir()); status = org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getBroker().glusterVolumeResetBrickCommitForce(org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBricksVDSCommand.getParameters().getVolumeName(), org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBricksVDSCommand.getParameters().getExistingBrickDir()); org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBricksVDSCommand.proceedProxyReturnValue(); }
@java.lang.Override public void testConnection() { try { getClient().execute(new com.woorea.openstack.base.client.OpenStackRequest(getClient(), com.woorea.openstack.base.client.HttpMethod.GET, "", null, org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.ApiRootResponse.class)); } catch (com.woorea.openstack.base.client.OpenStackResponseException e) { org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.error("("OpenStack response error code: {})", e.getMessage(), e.getStatus()); org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.debug("Exception", e); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.provider.network.openstack.BaseProviderProxy.log.error("Exception", e); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@org.junit.Test public void canCopyDiskFails() { org.ovirt.engine.core.common.businessentities.StorageDomain domain = createStorageDomainForDisk(StorageType.ISCSI); domain.setStorageFormat(StorageFormatType.V3); disk.setSize(1000); org.ovirt.engine.core.common.businessentities.storage.DiskImage child = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskImage(); child.setSize(1000); child.setStorageIds(java.util.Collections.singletonList(domain.getId())); org.ovirt.engine.core.common.businessentities.storage.DiskImage parent = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskImage(); parent.setId(500); parent.setStorageIds(java.util.Collections.singletonList(domain.getId())); child.setParentIds(java.util.Collections.singletonList(domain.getId())); child.setParentId(parent.getParentId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = new java.util.ArrayList<>(2); diskImages.add(parent); diskImages.add(child); when(validator.getDiskImageDao().getAllSnapshotsForImageGroup(disk.getId())).thenReturn(diskImages); assertThat(validator.childDiskWasExtended(domain), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.CANNOT_MOVE_DISK_SNAPSHOTS)); }
private boolean diskContainsPreExtendSnapshots() { return validate(createDiskValidator(getImage()).childDiskWasExtended(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain())); }
@java.lang.Override public void addMenuItem(int index, java.lang.String label, java.lang.String label, java.lang.String primaryMenuId, java.lang.String iconCssName) { if (primaryMenuId!= null) { addSecondaryMenuItem(index, label, label, primaryMenuId); } else { org.gwtbootstrap3.client.ui.ListGroupItem newMenuItem = new org.gwtbootstrap3.client.ui.ListGroupItem(); org.gwtbootstrap3.client.ui.Anchor<org.ovirt.engine.ui.webadmin.widget.branding.BrandingTheme>(); org.gwtbootstrap3.client.ui.Element sb.getInstance().getStyleName(tooltip)); if (index < 0) { index = 0; } org.gwtbootstrap3.client.ui.span3.append(org.ovirt.engine.ui.webadmin.widget.table.column.AbstractElementList<org.ovirt.engine.ui.common.widget.tool.Html> link = new org.gwtbootstrap3.client.ui.html.shared.ListElement(); if (iconCssName!= null) { iconSpan.addStyleName(tooltipCssIconBase(iconCssName)); newMenuItem.addStyleName(style); } menuAnchor.add(icon); org.gwtbootstrap3.client.ui.span3.span.setText(label); org.ovirt.engine.ui.webadmin.widget.html.span.span.span.panels.ListModel labelSpan = new org.ovirt.engine.ui.webadmin.widget.html.span.panels.Html(); labelSpan.setText(label); labelSpanToGroupLabelMap.put(label); if (index > (org.ovirt.engine.ui.webadmin.widget.table.column.AbstractItem.templates.listElementList(label)) { labelSpan.add(newMenuItem); } } }
public java.util.List<java.lang.String> getCustomMenuIds() { return selectedMenuIds; }
private void addSecondaryMenuItem(int index, java.lang.String label, java.lang.String primaryMenuId) { int primaryMenuIndex = primaryMenuIds.indexOf(primaryMenuId); if ((primaryMenuIndex > (-1)) && (primaryMenuIndex < (org.ovirt.engine.ui.webadmin.widget.table.ListGroupItem) (menuListGroup.getWidget(primaryMenuIndex))))) { org.gwtbootstrap3.client.ui.FlowPanel secondaryMenuPanel = null; if ((primaryMenuItem.getWidgetCount()) > 2) { com.google.gwt.user.client.ui.FlowPanel secondaryMenuPanel = null; if ((primaryMenuItem.getWidgetCount()) > 2) { com.google.gwt.user.client.ui.FlowPanel.ui.isWidget(button, widget)); } } else { secondaryMenuPanel = createSecondaryMenuHeader(primaryMenuItem); primaryMenuItem.addStyleName(PatternflyStyles.SECONDARY_NAV_ITEM); for (int i = 0; i < (org.ovirt.engine.ui.webadmin.widget.table.column.ui.FlowPanel) { org.ovirt.engine.ui.webadmin.widget.table.column.ui.AbstractPanel.AbstractMenuPanel.getWidget(i); } } }
void addMenuItem(int index, java.lang.String label, java.lang.String primaryMenuId, java.lang.String primaryMenuId, java.lang.String iconCssName);
public void addContent(java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, java.lang.String contentUrl, java.lang.String iconCssName, java.lang.String iconCssName, int priority, boolean defaultPlace) { menuPresenterWidget.addMenuItem(priority, historyToken, primaryMenuId, iconCssName); dynamicUrlContentProxyFactory.setDefaultPlace(historyToken); }
java.util.Set<java.lang.String> getDefaultMenuIds();
public void addSecondaryMenu(java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, java.lang.String contentUrl, org.ovirt.engine.ui.webadmin.plugin.api.api.TabOptions options) { addContent(label, historyToken, contentUrl, options.getIcon(), options.getIcon(), options.getIcon(), options.getPriority().intValue(), options.getDefaultPlacePair().intValue(), options.getDefaultPlacePair().booleanValue()); }
public void addPrimaryMenu(java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, org.ovirt.engine.ui.webadmin.plugin.api.api.api.TabOptions options) { addContent(label, historyToken, contentUrl, null, options.getIcon(), options.getPriority().intValue(), options.getDefaultPlace().booleanValue()); }
public java.lang.String[] listMenuIds() { if ((getSelectedItem()) == null) { return null; } else { return getSelectedItem(new org.ovirt.engine.core.bll.RemoveVmCommand.getVm(), getModel().getSelectedItem())); } }
public java.util.List<java.lang.String> getViews() { return getView().getDefaultMenuIds(); }
public void addMenuItem(int index, java.lang.String label, java.lang.String historyToken, java.lang.String primaryMenuId, java.lang.String iconCssName) { getView().addMenuItem(index, label, historyToken, primaryMenuId, iconCssName); }
@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.network.DnsResolver<org.ovirt.engine.core.common.businessentities.network.DnsResolver<org.ovirt.engine.core.common.businessentities.network.DnsResolver>() { super.update(entity); removeNameServersByDnsResolverConfigurationId(entity.getId()); saveNameServersByDnsResolverConfigurationId(entity.getId(), entity.getNameServers()); return null; }
@java.lang.Override public void remove(org.ovirt.engine.core.compat.Guid id) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionMethod<org.ovirt.engine.core.compat.Guid>() { @java.lang.Override public void execute() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, getParameters().getId())); } }); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.network.DnsResolver<org.ovirt.engine.core.compat.Guid> entity) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionMethod<org.ovirt.engine.core.compat.Guid>() { @java.lang.Override public void execute() { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity = org.ovirt.engine.core.common.businessentities.network.DnsServerConnections.get(org.ovirt.engine.core.compat.Guid.newGuid()); super.setId(org.ovirt.engine.core.common.businessentities.network.DnsServerId(entity.getId(), entity.getId(), entity.getNameServers()); return null; } }); if ((org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface)!= null) { entity.setId(org.ovirt.engine.core.compat.Guid.newGuid()); } } return null; }
@java.lang.Override protected void writeFileForLunDisk(org.ovirt.engine.core.common.businessentities.storage.LunDisk lun) { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.Ovf_OVIRT_URI, "id", lun.getId().toString()); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OvfParser.createLunFile(lun)); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OvfParser.createLunFile(lun)); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OvfParser.createLunFile(lun)); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OvfParser.createLunFile(lun)); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.Ovf.OvfParser.createLunFile(lun)); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.Ovf.OvfParser.createLunFile(lun)); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.Ovf.OvfProperties.OvfFile(lun)); _writer.writeLunFile(lun); }
@java.lang.Override protected void writeHeader() { super.writeHeader(); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.Ovf_OVIRT_URI, "version", org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdcVersion)); }
protected void writeHeader() { _instanceId = 0; _writer.writeStartDocument(false); _writer.writeStartDocument(false); _writer.setPrefix(org.ovirt.engine.core.utils.ovf.RASD_PREFIX, org.ovirt.engine.core.utils.ovf.RASD_PREFIX, org.ovirt.engine.core.utils.ovf.XmlR_URI); _writer.setPrefix(org.ovirt.engine.core.utils.ovf.XSID_PREFIX, org.ovirt.engine.core.utils.ovf.XSI_URI); writeHeaderWithEnvelope(); }
protected void writeHeaderWithEnvelope() { _writer.setPrefix(org.ovirt.engine.core.utils.ovf.OvfUt_PREFIX, org.ovirt.engine.core.utils.ovf.OvfUt_URI); _writer.writeStartElement(org.ovirt.engine.core.utils.ovf.Ovf.OvfData, "Envelope"); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.Ovf.RASD_PREFIX, org.ovirt.engine.core.utils.ovf.RASD_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.RASD_PREFIX, org.ovirt.engine.core.utils.ovf.XmlR_PREFIX, org.engine.core.utils.ovf.XmlR_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.XmlR_PREFIX, org.ovirt.engine.core.utils.ovf.XSI_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.XSI_PREFIX, org.ovirt.engine.core.utils.ovf.XSI_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.XmlRASD_PREFIX, org.ovirt.engine.core.utils.ovf.XSI_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.XmlRASD_PREFIX, org.ovirt.engine.core.utils.ovf.XmlRPM_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.XmlRASD_PREFIX, org.ovirt.engine.core.utils.ovf.XmlRpc.XmlR_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.utils.Ovf.XmlRpc.XmlR_URI); _writer
@java.lang.Override protected void startVirtualSystem() { _writer.writeStartElement("Content"); _writer.writeStartElement("Content"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "id", "out"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.XSI_URI, "type", ((OvF_PREFIX) + ":VirtualSystem_Type")); }
@java.lang.Override protected void writeFile(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OvfParser.createImageFile(image)); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OvfParser.createImageFile(image)); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OvfParser.createImageFile(image)); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.Ovf.OVF_URI, "id", image.getActualSizeInBytes().toString()); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.Ovf_OVIRT_URI, "description", java.lang.String.valueOf(image.getActualSizeInBytes())); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.Ovf.OVF_URI, "disk_type", org.apache.commons.lang.StringUtils.defaultString(image.getDescription())); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.Ovf.OVF_URI, "cinder_volume_type", org.apache.commons.lang.StringUtils.defaultString(image.getCinderVolumeType())); }
@java.lang.Override protected void writeOS() { _writer.writeStartElement("Section"); _writer.writeStartElement("Section"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "id", vmBase.getId().toString()); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "required", "false"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.XSI_URI, "type", ((OvF_PREFIX) + ":OperatingSystemSection_Type")); _writer.writeElement("Info", osRepository.getUniqueOsNames().get(vmBase.getOsId())); _writer.writeEndElement(); }
@java.lang.Override protected void writeHeaderWithEnvelope() { _writer.setPrefix(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.Ovf_OVIRT_URI); _writer.writeStartElement(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "Envelope"); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.OVf.OvfR_PREFIX, org.ovirt.engine.core.utils.ovf.RASD_PREFIX, org.ovirt.engine.core.utils.ovf.RASD_PREFIX, org.ovirt.engine.core.utils.ovf.X_PREFIX, org.ovirt.engine.core.utils.ovf.XmlR_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.XmlR_PREFIX, org.ovirt.engine.core.utils.ovf.XmlR_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.XmlRASD_PREFIX, org.engine.core.utils.ovf.XSI_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.XSI_PREFIX, org.ovirt.engine.core.utils.ovf.XSI_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.XmlRASD_PREFIX, org.ovirt.engine.core.utils.ovf.XmlRpc.XmlR_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.XmlRpc.XmlRpcStruct); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.XmlRpc.XmlRpcStruct); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.XmlRASD_PREF
private void writeDiskParentRef(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { if (image.getParentId().equals(Guid.Empty)) { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.Ovf_OVIRT_URI, "parentRef", ""); } else { int i = 0; while (_images.get(i).getImageId().equals(image.getParentId())) { i++) { i++) { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OvfUt_OVIRT_URI, "parentRef", org.ovirt.engine.core.utils.ovf.OvfParser.createImageFile(res.get(0))); } else { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OvfParser.createImageFile(res.get(0))); } } }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { if (isCopyOperation()) { if (!(Guid.Empty.equals(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getVmTemplateId()))) { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getVmTemplateId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.TEMPLATE, getDiskIsBeingMigratedMessage())); } } else { if ((getImage().getContentType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskContentType.ISO)) { java.util.List<org.ovirt.engine.core.compat.Guid> vmIds = vmStaticDao.getAllIdsWithSpecificIsoAttached(getImage().getId()); if (!(vmIds.isEmpty())) { return vmIds.stream().collect(java.util.stream.Collectors.toMap((p) -> ((p) -> ((p) -> ((p) -> org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, getDiskIsBeingMigratedMessage())))); } } else { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice>> vmsForDisk = getVmsWithDiskId(); if (!(vmsForDisk.isEmpty())) { return vmIds.get(vmIds); } } } return vmIds; }
public org.ovirt.engine.core.bll.ValidationResult isIsoDiskAttachedToAnyVm() { java.util.List<java.lang.String> vmNames = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmStaticDao().getAllRunningNamesWithSpecificIsoAttached(disk.getId()); if (!(vmNames.isEmpty())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ERROR_ISO_DISK_ATTACHED_TO_RUNNING_VMS, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.storage.DiskValidator.DISK_NAME_VARIABLE, disk.getDiskAlias()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.storage.DiskValidator.VM_NAME, vmNames)); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.aaa.GetAnyDbUserByUserIdQuery.getQueryReturnValue().setReturnValue(dbUserId); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.queries.QueryReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance().runInternalQuery(QueryType.GetAuthzGroupsByUserId, org.ovirt.engine.core.bll.GetPermissionsOnBehalfByUserIdQuery.getParameters()); java.util.Collection<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> authzGroups = returnValue.getReturnValue(); java.util.List<org.ovirt.engine.core.compat.Guid> groupsIds = authzGroups.stream().map((g) -> dbGroupDao.getByExternalId(g.getAuthz(), g.getId())).filter(java.util.Objects.toList()); org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getQueryReturnValue().setReturnValue(permissionDao.getAllForAdElementAndGroups(org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().getId(), org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getUserID(), groupsIds, org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().isFiltered())); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllForAdElementAndGroups(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid currentUserId, java.util.Collection<org.ovirt.engine.core.compat.Guid> groupIds, boolean isFiltered) { int appMode = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ApplicationMode); org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("ad_element_id", id).addValue("user_id", currentUserId).addValue("user_groups", createArrayOf("uuid", groupIds.toArray())).addValue("is_filtered", isFiltered).addValue("app_mode", appMode); return getCallsHandler().executeReadList("GetPermissionsByAdElementIdAndGroupIds", org.ovirt.engine.core.dao.PermissionDaoImpl.permissionRowMapper, parameterSource); }
java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllForAdElementAndGroups(org.ovirt.engine.core.compat.Guid id, java.util.Collection<org.ovirt.engine.core.compat.Guid> groupIds, boolean isFiltered);
@java.lang.Override public void deallocate(org.ovirt.engine.core.common.businessentities.network.VmNic nic) { try { com.woorea.openstack.quantum.model.Port port = locatePort(nic); if (port!= null) { getClient().ports().delete(port.getId()).execute(); } } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> allocate(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.businessentities.VDS host, boolean ignoreSecurityGroupsOnUpdate) { try { com.woorea.openstack.quantum.model.Port port = locatePort(nic); java.util.List<java.lang.String> securityGroups = getSecurityGroups(vnicProfile); java.lang.String hostId = getHostId(host); if (port == null) { com.woorea.openstack.quantum.model.Network externalNetwork = getExternalNetwork(network.getProvidedBy()); com.woorea.openstack.quantum.model.Port portForCreate = createNewPortForAllocate(nic, securityGroups, hostId, externalNetwork); port = getClient().ports().create(portForCreate).execute(); } else { boolean securityGroupsChanged = (!ignoreSecurityGroupsOnUpdate) && (securityGroupsChanged(port.getSecurityGroups(), securityGroups)); boolean hostChanged = hostChanged(port, hostId); updatePort(port, securityGroupsChanged, hostId); updatePort(port, securityGroupsChanged, hostId, nic); } java.util.Map<java.lang.String, java.lang.String> runtimeProperties = createPortAllocationRuntimeProperties(port); return runtimeProperties; } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override protected void executeCommand() { if ((getParameters().getRefresh()) || (getSessionDataContainer().isSsoOvirtAppAvirtAppApiScope(getParameters().getSessionId()))) { getSessionDataContainer().updateSessionLastActiveTime(getParameters().getSessionId()); } if (validateInputs()) { long start = java.lang.System.currentTimeMillis(); try { if (validateInputs()) { long start = java.lang.System.currentTimeMillis(); try { returnValue.setSucceeded(false); executeQueryCommand(); } catch (java.lang.RuntimeException ex) { returnValue.setSucceeded(false); java.lang.Throwable th = (ex instanceof org.ovirt.engine.core.common.errors.EngineException)? ex : ex.getError(); if (th instanceof org.apache.commons.lang.ExceptionUtils.getRootCause()) { org.ovirt.engine.core.common.errors.EngineException vdcExc = ((org.ovirt.engine.core.common.errors.EngineException) (th)); if (((vdcExc.getErrorCode())!= null) && (!(vdcExc.getErrorCode().toString()))) { returnValue.setExceptionString(vdcExc.getErrorCode().toString()); } else { returnValue.setExceptionString((vdcExc.getErrorCode())!= null? org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(vdcExc) : vdcExc.getErrorMessage())); } log.error("Command '{}' failed: {}", getClass().getSimpleName(), (vdcExc.getMessage()? org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(vdcExc) : vdcExc.getErrorMessage())); } log.error("Error '{}' failed: {}", getClass().getMessage()); } } }
@java.lang.Override public void addSubnet(org.ovirt.engine.core.common.businessentities.network.ExternalSubnet subnet) { com.woorea.openstack.quantum.model.Network externalNetwork = getExternalNetwork(subnet.getExternalNetwork()); com.woorea.openstack.quantum.model.Subnet subnetForCreate = createNewSubnetEntity(subnet, externalNetwork); try { getClient().subnets().create(subnetForCreate).execute(); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override public void remove(java.lang.String id) { try { getClient().networks().delete(id).execute(); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override public void removeSubnet(java.lang.String id) { try { getClient().subnets().delete(id).execute(); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override public java.lang.String add(org.ovirt.engine.core.common.businessentities.network.Network network) { com.woorea.openstack.quantum.model.Network networkForCreate = createNewNetworkEntity(network); try { com.woorea.openstack.quantum.model.Network createdNetwork = getClient().networks().create(networkForCreate).execute(); return createdNetwork.getId(); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override public void testConnection() { try { getClient().execute(new com.woorea.openstack.base.client.OpenStackRequest(getClient(), com.woorea.openstack.base.client.HttpMethod.GET, "", null, org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.ApiRootResponse.class)); } catch (com.woorea.openstack.base.client.OpenStackResponseException e) { org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.error(("OpenStack response error code: {})", e.getMessage(), e.getMessage(), e.getStatus()); org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.debug("Exception", e); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> getAll() { try { com.woorea.openstack.quantum.model.Networks networks = getClient().networks().list().execute(); return map(networks.getList()); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
private void removeMemoryFromActiveSnapshot() { if (!(org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().contains(org.ovirt.engine.core.bll.RunVmCommand.getVmId()))) { return; } snapshotDao.removeMemoryFromActiveSnapshot(org.ovirt.engine.core.bll.RunVmCommand.getVmId()); if ((snapshotDao.getNumOfSnapshotsByDisks(org.ovirt.engine.core.bll.RunVmCommand.getVmId())) == 0) { removeMemoryDisks(org.ovirt.engine.core.bll.RunVmCommand.getVmId()); } }
private java.util.Collection<org.ovirt.engine.core.common.businessentities.Snapshot> getSnapshotsToBeExportedWithMemory() { if (org.ovirt.engine.core.bll.ExportVmCommand.getParameters().getCopyCollapse()) { org.ovirt.engine.core.common.businessentities.Snapshot activeSnapshot = snapshotDao.get(org.ovirt.engine.core.bll.export.ExportVmCommand.getVmId(), SnapshotType.ACTIVE); return activeSnapshot.containsMemory()? java.util.Collections.singleton(activeSnapshot) : java.util.Collections.emptyList(); } else { return snapshotDao.getAll(org.ovirt.engine.core.bll.ExportVmCommand.getVmId()).stream().filter((s) -> ((s.containsMemory())? java.util.Collections.singletonList(s.containsMemory() : java.util.Collections.singletonList(s.contains(s)).collect(java.util.Collections.singletonList(s.toList()); } }
private void copyAllMemoryImages(org.ovirt.engine.core.compat.Guid containerID) { for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshotsWithMemory) { org.ovirt.engine.core.common.businessentities.storage.DiskImage dumpImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(snapshot.getMetadataDiskId()))); org.ovirt.engine.core.common.action.ActionReturnValue vdcRetValue = runInternalActionWithTasksContext(ActionType.CopyImageGroup, buildMoveOrCopyImageGroupParametersForMemoryDumpImage(containerID, dumpImage)); if (!(vdcRetValue.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(vdcRetValue.getFault().getError(), "CopyImageGroup", buildMoveOrCopyImageGroupParametersForMemoryDumpImage(containerID, diskID, false)); } org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(snapshot.getMetadataDiskIdList()); vdcRetValue = runInternalActionWithTasksContext(ActionType.CopyImageGroup, buildMoveOrCopyImageGroupParameters(containerID, confImage)); if (!(vdcRetValue.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(vdcRetValue.getFault().getError(), e); } } }
private void restoreConfiguration(org.ovirt.engine.core.common.businessentities.Snapshot targetSnapshot) { removedSnapshot = snapshotDao.get(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVmId(), SnapshotType.ACTIVE); snapshotsToRemove.add(removedSnapshot.getId()); org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getSnapshotsManager().removeAllIllegalDisks(removedSnapshot.getId(), org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVmId()); org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getSnapshotsManager().attempToRestoreVmConfigurationFromSnapshot(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVm(), targetSnapshot, targetSnapshot.getId(), null, org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getCurrentUser(), new org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getCurrentUser(), new org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getCurrentUser(), new org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getCurrentUser(), new org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getCurrentUser(), new org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVm(), SnapshotStatus.LOCKED, null, org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getCompensationContext()); }
@java.lang.Override public int getNumOfSnapshotsByDisks(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("memory_disk_ids", java.util.Arrays.asList(snapshot.getMemoryDiskId(), snapshot.getMetadataDiskId())); return getCallsHandler().executeRead("GetNumOfSnapshotsByMemoryVolume", org.springframework.jdbc.core.SingleColumnRowMapper.newInstance(java.lang.Integer.class), parameterSource); }
@java.lang.Override protected void executeCommand() { if (isMemoryRemovable()) { org.ovirt.engine.core.common.action.RemoveDiskParameters removeMemoryParameters = new org.ovirt.engine.core.common.action.RemoveDiskParameters(org.ovirt.engine.core.bll.RemoveMemoryVolumesCommand.getParameters().getSnapshot().getMemoryDiskId()); removeMemoryVolumeParameters.setShouldBeLogged(false); runInternalAction(ActionType.RemoveDisk, removeMemoryDumpDiskParameters); org.ovirt.engine.core.common.action.RemoveDiskParameters removeMemoryMetadataDiskParameters = new org.ovirt.engine.core.common.action.RemoveDiskParameters(org.ovirt.engine.core.bll.RemoveMemoryVolumesCommand.getParameters().getSnapshot().getSnapshotId())); removeMemoryMetadataDiskParameters.setShouldBeLogged(false); runInternalAction(ActionType.RemoveDisk, removeMemoryMetadataDiskParameters); } org.ovirt.engine.core.bll.RemoveMemoryVolumesCommand.setSucceeded(true); }
private void removeDiskImages() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = org.ovirt.engine.core.bll.storage.disk.image.image.DisksFilter.filterImageDisks(getVm().getDiskMap().values(), org.ovirt.engine.core.bll.export.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()); boolean shouldWipe = false; for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : images) { image.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(org.ovirt.engine.core.bll.export.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()))); image.setStoragePoolId(org.ovirt.engine.core.bll.export.RemoveVmFromImportExportCommand.getParameters().getStoragePoolId()); shouldWipe |=image.isWipeAfterDelete(); } java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allMemoryDisks = org.ovirt.engine.core.bll.memory.MemoryUtils.getMemoryDiskIdsFromSnapshots(getVm().getSnapshots()); for (org.ovirt.engine.core.compat.Guid memoryDiskId : allMemoryDisks) { org.ovirt.engine.core.common.businessentities.storage.DiskImage metadataDisk = createMemoryDisk(memoryDisk); images.add(metadataDisk); } removeVmImages(images); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Snapshot.class, to = org.ovirt.engine.api.model.Snapshot.class) public static org.ovirt.engine.api.model.Snapshot map(org.ovirt.engine.core.common.businessentities.Snapshot entity, org.ovirt.engine.api.model.Snapshot template) { org.ovirt.engine.api.model.Snapshot model = (template!= null)? template : new org.ovirt.engine.api.model.Snapshot(); model.setId(entity.getId().toString()); if ((entity.getDescription())!= null) { model.setDescription(entity.getDescription()); } if ((entity.getCreationDate())!= null) { model.setDate(org.ovirt.engine.api.restapi.types.DateMapper.map(entity.getCreationDate(), null)); } if ((entity.getCreationDate())!= null) { model.setDate(org.ovirt.engine.api.restapi.types.DateMapper.map(entity.getCreationDate(), null)); } if ((entity.getType())!= null) { model.setSnapshotType(org.ovirt.engine.api.restapi.types.SnapshotMapper.map(entity.getType(), null)); } if ((entity.getType())!= null) { model.setSnapshotType(org.ovirt.engine.api.restapi.types.SnapshotMapper.map(entity.getType(), null)); } return model; }
private void writeSnapshotsSection() { java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> snapshots = vm.getSnapshots(); if ((snapshots == null) || (snapshots.isEmpty())) { return; } _writer.writeStartElement("Section"); _writer.writeStartElement("Section"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.XSI_URI, "type", "ovf:SnapshotsSection_Type"); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshots) { _writer.writeStartElement("Snapshot"); _writer.writeStartElement("Snapshot"); _writer.writeElement("Snapshot"); _writer.writeElement("Type", snapshot.getType().name()); _writer.writeElement("Description", snapshot.getDescription()); _writer.writeElement("CreationDate", org.ovirt.engine.core.utils.ovf.OvfParser.localDateToUtcDateString(snapshot.getCreationDate())); if (snapshot.containsMemory()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDump = memoryDisks.get(snapshot.getMetadataDiskId()); java.lang.String memoryVolume = java.lang.String.format("%1$s, %2$s, %4$s, %5$s", memoryDump.getStoragePoolId(), memoryDump.getStoragePoolId(), memoryDump.getStoragePoolId(), memoryDump.getStoragePoolId(), memoryDump.getStoragePoolId(), memoryConf.getImageId(), memoryConf.getImageId(), memoryConf.getImageId(), memoryConf.getImageId(), memoryConf.getImageId(), memoryConf.getImageId()); } }
@java.lang.Override protected final void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.StorageDomain storage = getStorage(); T returnValue = getAllFromStorage(storage); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> imagesList = ((java.util.List<org.ovirt.engine.core.compat.Guid>) (runVdsCommand(VDSCommandType.GetImagesList, new org.ovirt.engine.core.common.vdscommands.GetImagesListVDSCommandParameters(storage.getStoragePoolId(), storage.getStoragePoolId(), image)); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> luns = new java.util.HashMap<>(); for (org.ovirt.engine.core.compat.Guid image : imagesList) { org.ovirt.engine.core.common.vdscommands.StoragePoolDomainAndGroupIdBaseVDSCommandParameters getVolumesParameters().get(storageDomainType.GetImagesList, getVolumesParameters().getStoragePoolId())); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> volumesList = ((java.util.List<org.ovirt.engine.core.compat.Guid>) (runVdsCommand(VDSCommandType.GetImagesList, getVolumesParameters().getStoragePoolId()))); if (!(image.getImages().getReturnValue())) { org.ovirt.engine.core.bll.Export.GetAllFromExportDomainQuery.getQueryReturnValue().setReturnValue(returnValue); } } org.ovirt.engine.core.bll.Export.GetAllFromExportDomainQuery.getQueryReturnValue().setReturnValue(returnValue); }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, memoryDiskDomainMap.get(snapshot.getMemoryDiskId())); org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getMemoryDiskId()); if ((sd == null) || (disk!= null)) { return null; } org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getMemoryDiskId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMemoryDisk(vm, sd.getVmConfiguration(), vmOverheadCalculator, org.ovirt.engine.core.bll.memory.ImportVmCommand.getStoragePoolId()); memoryDisk.setId(snapshot.getMemoryDiskId()); memoryDisk.setImageId(org.ovirt.engine.core.bll.export.ImportVmCommand.getStoragePoolId()); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(sd.getId()))); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().stream().stream().stream().stream(vm.getDiskList().stream().stream().stream().stream().stream().stream.toString(vm.getDiskList().stream().stream.toString())); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().stream().stream().stream().stream().add(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>()); memoryDisk.setDisk(snapshot.getDiskList().getDiskId());
private org.ovirt.engine.core.compat.Guid getMemoryDiskImageId(org.ovirt.engine.core.compat.Guid imageGroupId) { org.ovirt.engine.core.common.vdscommands.StoragePoolDomainAndGroupIdBaseVDSCommandParameters getVolumesParameters().getVolumesParameters().getVmId()); return org.ovirt.engine.core.bll.ExportVmCommand.getParameters().getVdsCommand(org.ovirt.engine.core.bll.export.ImportVmCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.export.ImportVmCommand.getParameters().getStorageDomainId(), imageGroupId); }
private void addMemoryImages() { org.ovirt.engine.core.bll.Export.ImportVmCommand.getVm().getSnapshots().filter((snapshot) -> snapshot.contains(snapshot.getSnapshotName()).forEach((snapshot) -> { addDisk(createMemoryDisk(snapshot)); addDisk(createMetadataDisk(getVm(), snapshot)); }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMetadataDisk(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, memoryDiskDomainMap.get(snapshot.getMetadataDiskId())); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMetadataDisk(org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(snapshot.getMetadataDiskId()); if ((sd == null) || (disk!= null)) { return null; } org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMetadataDisk(org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(snapshot.getMetadataDiskId()); memoryDisk.setImageId(org.ovirt.engine.core.bll.export.ImportVmCommand.getStoragePoolId()); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().any(DiskImage.getDiskList().stream().any(DiskImage.getDiskList()))); memoryDisk.setWipeAfterDelete(vm.getDiskList().any(DiskImage.getDiskList().stream().any(DiskImage.getDiskList()))); memoryDisk.setActive(true); memoryDisk.setVm(true); memoryDisk.setVm(true); memoryDisk.setVm(true); memoryDisk.setVm(true); memoryDisk.setVm(true); memoryDisk.setVm(true); memoryDisk.
public static java.util.List<org.ovirt.engine.core.compat.Guid> getMemoryDiskIdsFromSnapshots(java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> snapshots) { java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> memoryDiskIds = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshots) { if (snapshot.containsMemory()) { memoryDiskIds.add(snapshot.getMemoryDiskId()); } } return memoryDiskIds; }
protected boolean shouldRestoreMemory() { return ((!(memoryFromSnapshotUsed)) && (((getFlow()) == (org.ovirt.engine.core.common.action.RunVmParams.RunVmFlow.RESUME_HIBERNATE)) || (org.ovirt.engine.core.common.FeatureSupported.isMemorySnapshotSupportedByArchitecture(org.ovirt.engine.core.bll.RunVmCommand.getVm().getClusterArch(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getCompatibilityVersion())))) && ((org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryDiskId())!= null)) && ((org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryDiskId())!= null)) && ((org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryDiskId())!= null)) && ((org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryDiskId())!= null)) && ((org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryDiskId())!= null))); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, supportedClusterVersionsSet, supportedEngineVersions, buildName, cpuFlagsMockets, cpuFlagsMh, cpuSpeedMh, cpuSpeed, kvmEnabled, kvmEnabled, kvmVersion, libvirtVersion, libvirtVersion, libvirtVersion, libvirtVersion, libvirtVersion, libvirtVersion, libvirtVersion, libvirtVersion, libvirtVersion, libvirtVersion, memCommited, netCommited, netCommited, netCommited, netCommited, netCommited, net.getCpuPagesState, pendingVmsCoresCount, physicalMem, physicalMem, physicalMem, physicalMem, swVersion, swVersion, glusterVersion, status, supportedClusterLevel, supportedRngSources, vmsCores, vmsCoresCount, vmsCoresCount, vmsCoresCount, hwVersion, hwVersion, hwVersion, hwVersion, hwVersion, hwVersion, hwVersion, hwVersion, hwVersion, hwVersion, hwVersion, hwVersion, hdumpStatus, speed, highaVersion, speed, heartbeat, heartbeat, new java.lang.String(hostDeviceAddress, hdumpStatus, highaSupport, kdumpStatus, speed, heartbeat); }
public int getAvailableUnitForScsiDisk(java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.lang.Integer> vmDeviceUnitMap, boolean reserveFirstTwoLuns, boolean reserveForScsiCd) { int cdPayloadUnitIndex = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getCdPayloadDeviceIndex("scsi"); int cdUnitIndex = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getCdDeviceIndex("scsi"); int unit = (reserveFirstTwoLuns)? ((resolveFirstTwoLuns)? (java.lang.Math.max(cdPayloadUnitIndex, cdUnitIndex)) + 1 : 2; if (vmDeviceUnitMap == null) { return unit; } while (((reserveForScsiCd && (unit == cdPayloadUnitIndex)) || (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getCdDeviceIndex(cdPayloadUnitIndex, cdPayloadUnitIndex))) { unit = unit; } return unit; }
public org.ovirt.engine.core.bll.ValidationResult externalNetworkDetailsUnchanged(org.ovirt.engine.core.common.businessentities.network.Network newNetwork) { return (((((java.util.Objects.equals(network.getVlanId(), newNetwork.getVlanId())) && ((network.getName()) == (newNetwork.getName()))) && ((network.getMtu()) == (newNetwork.getMtu()))) && ((network.getStp()) == (newNetwork.getStp()))) && ((network.isVmNetwork()) == (newNetwork.isVmNetwork()))) && (java.util.Objects.equals(network.getProvidedBy(), newNetwork.getProvidedBy()))? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_DETAILS_CANNOT_BE_EDITED); }
protected void setDefaultSwitchTypeIfNeeded() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster(); if (cluster.hasRequired()) { org.ovirt.engine.core.common.businessentities.NetworkCluster network = getCluster(); cluster.setRequired(org.ovirt.engine.core.common.businessentities.VDSGroup.getCompatibilityVersion()); cluster.setRequired(defaultSwitchType); } }
private org.ovirt.engine.core.common.action.ActionReturnValue addNetwork(org.ovirt.engine.core.compat.Guid dataCenterId, org.ovirt.engine.core.common.businessentities.network.Network network, boolean attachToAllClusters) { org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters params = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(dataCenterId, network); params.setVnicProfileRequired(false); if (attachToAllClusters) { org.ovirt.engine.core.common.queries.QueryReturnValue queryReturnValue = runInternalQuery(QueryType.GetClustersByStoragePoolId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenterId)); java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = queryReturnValue.getReturnValue(); java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = queryReturnValue.getReturnValue(); java.util.List<org.ovirt.engine.core.compat.Guid> clusterIds = clusters.stream().map(clusterIds); if (attachments!= null) { org.ovirt.engine.core.common.businessentities.network.NetworkCluster network = queryReturnValue.getReturnValue(); java.util.List<org.ovirt.engine.core.compat.Guid> clusterIds = clusters.get(clusterIds); params.setNetworkClusters(clusterIds); } } return runInternalAction(ActionType.AddNetwork, params); }
public void updateHostStatusAfterSuccessfulUpgrade() { org.ovirt.engine.core.common.businessentities.VdsDynamic dynamicHostData = vdsDynamicDao.get(org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVdsId()); dynamicHostData.setUpdateAvailable(false); vdsDynamicDao.update(dynamicHostData); if (((org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds().getVdsType()) == (org.ovirt.engine.core.common.businessentities.VDSType.VDS)) && (!(org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds().getInitialStatus()))) { if ((org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds().getInitialStatus()) == (org.ovirt.engine.core.common.businessentities.VDSType.Maintenance)) { setVdsStatus(VDSStatus.Maintenance); } else { if (org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds().getHighlyAvailableIsConfigured()) { haMaintenanceFailed =!(hostEngineHelper.updateHaLocalMaintenanceMode(org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds(), false)); } setVdsStatus(VDSStatus.Initializing); } } }
public static boolean isStatusOk(java.util.Map<java.lang.String, java.lang.Object> response) { if ((response.getStatus())!= null) { java.lang.String errorCode = ((response.get("error_code")) == null)? ((java.lang.String) (response.get("error_code")) : ((java.lang.String) (response.get("error_code"))); java.lang.String errorDescription = ((response.get("error_description")); throw new java.lang.RuntimeException(java.lang.String.format("Error %s", errorCode, errorDescription)); } return true; }
private void createVnicProfile() { org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile = org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().getVnicProfile(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork()); if (org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().isExternal()) { vnicProfile.setNetworkFilterId(null); } vnicProfile.setNetworkFilterId(null); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.utils.NetworkUtils.setNetworkVdsmName(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork()); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.String>() { @java.lang.Override public java.lang.Object returnValue) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.common.businessentities.network.Network() { @java.lang.Override public java.lang.Object returnValue) { org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().getId()); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().getId()); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.setSucceeded(true); } }); runClusterAttachment(); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.setSucceeded(true); }
private org.ovirt.engine.core.common.action.ActionReturnValue addNetwork(org.ovirt.engine.core.compat.Guid dataCenterId, org.ovirt.engine.core.common.businessentities.network.Network network, boolean attachToAllClusters) { org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters params = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(dataCenterId, network); if (attachToAllClusters) { params.setNetworkClusterList(networkHelper.createNetworkClusters(getAllClusterIdsInDataCenter(dataCenterId))); } return runInternalAction(ActionType.AddNetwork, params); }
void initialize(boolean engineStartup, java.util.List<java.lang.String> macsForMacPool) { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.info("MacPool using macs: {}", this); this.macsStorage = createMacsStorage(this.resolveMacs); org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.debug("MacPool {} with macs: {}", this, macsForMacPool); java.util.List<java.lang.String> notAddedMacs = addMacs(macsForMacPool); if (!(notAddedMacs.isEmpty())) { if (engineStartup) { java.lang.String auditLogMessage = "Macs violates duplicates.isEmpty())) { if (engineStartup) { java.lang.String auditLogMessage = "Macs violates duplicates.isEmpty())) { if (engineStartup) { java.lang.String auditLogMessage = "Macs"; } else { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.MAC_POOL_INITIALIZATION_FAILED, org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.UNABLE_TO_INITIALIZE_MAC_POOL_DUE_TO_EXISTING_DUPLICATES_DUPLICATES); } } } org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolUsingRanges.log.info("MacPool using MACs in pool: {}", this, macsStorage.getAvailableMacsCount()); } org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.info("Available initializing {}.", this, macsStorage.getAvailableMacsCount()); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } oldMacPool = macPoolDao.get(getMacPoolId()); return (((validate(new org.ovirt.engine.core.bll.MacPoolValidator(oldMacPool).macPoolExists())) && (validate(new org.ovirt.engine.core.bll.MacPoolValidator(getMacPoolEntity()).hasUniqueName()))) && (validate(org.ovirt.engine.core.bll.UpdateMacPoolCommand.validateDefaultFlagIsNotChanged(oldMacPool, getMacPoolEntity())))) && (validate(validateDuplicatesConfiguration())); }
@java.lang.Override protected void executeCommand() { registerRollbackHandler(((org.ovirt.engine.core.utils.transaction.TransactionRollbackListener) (transactionMethod<java.lang.Void>) (((TransactionMethod<java.lang.Void>) (()))); macPoolPerCluster.update(getMacPoolEntity()); macPoolPerCluster.modifyPool(getMacPoolEntity()); setSucceeded(true); getReturnValue().setActionReturnValue(getMacPoolId()); }
public void testCreateMacPool(org.ovirt.engine.core.common.businessentities.MacPool macPool) { org.ovirt.engine.core.common.businessentities.MacPool macPool = getMacPoolEntity(org.ovirt.engine.core.bll.AddVmCommandTest.getMacPoolEntity()); doReturn(new org.ovirt.engine.core.common.businessentities.MacPoolEntity(org.ovirt.engine.core.bll.AddVmCommandTest.CpuFlagsManager, new org.ovirt.engine.core.common.action.VdcActionParametersBase(), new org.ovirt.engine.core.common.action.VdcActionParametersBase(), new org.ovirt.engine.core.bll.AddVmCommandBase() { @java.lang.Override public void run() { org.ovirt.engine.core.common.businessentities.MacPool vm = getMacPoolEntity(org.ovirt.engine.core.bll.CommandTest.CommandTest.getMacPool().getMacPoolEntity()); if (org.ovirt.engine.core.common.businessentities.VDSGroup!= null) { vmPoolEntity.setEntity(new org.ovirt.engine.core.bll.AddVmCommandTest.getInstance().getVmId()); } else { vmPoolId = new org.ovirt.engine.core.common.action.VdcActionParametersBase(); } } }
private org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters buildChildCommandParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage cinderDisk) { org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters createParams = new org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters(org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (diskDao.get(cinderDisk.getId()))).getImageId()); createParams.setVmSnapshotId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getNewActiveSnapshotId()); createParams.setStorageDomainId(cinderDisk.getStorageIds().get(0)); createParams.setDescription(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getNewActiveSnapshotId()); createParams.setStorageDomainId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getSnapshotType()); createParams.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getSnapshotType()); createParams.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getActionType()); return createParams; }
public org.ovirt.engine.core.common.action.VdcActionType getCreateAllSnapshotsFromVmParameters(org.ovirt.engine.core.common.action.VdcActionType.CreateAllVmParameters.CreateSnapshotParameters.getParameters()));
public void setCreateSnapshots(org.ovirt.engine.core.common.action.VdcActionType actionType) { this.createSnapshotsFromVmParameters = createSnapshotType(org.ovirt.engine.core.common.action.VdcActionType.CreateAllSnapshotsFromVmParameters.CreateSnapshotStage, createSnapshotParameters(org.ovirt.engine.core.common.action.VdcActionType.CreateAllSnapshotsFromVmParameters.class)); }
@java.lang.Override public void init() { org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().setUseCinderCommandCallback(org.ovirt.engine.core.common.asynctasks.EntityInfo.VM, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVmId())); setSnapshotName(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription()); setSucceeded(false); }
public void onSave() { if (((getProgress())!= null) || (!(validate()))) { return; } startProgress(); org.ovirt.engine.core.common.businessentities.VM vm = getVm(); java.util.Set<org.ovirt.engine.core.common.action.ActionParametersBase> params = new java.util.ArrayList<>(); java.util.Set<org.ovirt.engine.core.compat.Guid> snapshotDisksIds = null; if ((getSnapshotDisks().getSelectedItems())!= null) { snapshotDisksIds = getSnapshotDisks().getSelectedItems().stream().map(BaseDisk::getId).collect(java.util.stream.Collectors.toSet()); } org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters param = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(vm.getId(), getDescription().getEntity(), getMemory().getEntity(), snapshotDisksIds); param.setQuotaId(vm.getQuotaId()); params.add(param); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.CreateSnapshotForVm, params, (result) -> { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel) (result.getState())); localModel.stopProgress(); getCancelCommand().execute(); } }, this); }
private void createSnapshotsForDisks() { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); org.ovirt.engine.core.common.action.VdcReturnValueBase parameters = new org.ovirt.engine.core.common.action.VdcActionParametersBase(); parameters.setDiskIdsToIgnoreInChecks(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskIds()); parameters.setNewActiveSnapshotId(newActiveSnapshotId); parameters.setSnapshotType(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType()); parameters.setVmIds(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType()); parameters.setVmId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType()); parameters.setVmId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType()); parameters.setVmId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType()); parameters.setVmId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskIds()); parameters.setVmId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotIds()); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue = runInternalAction(ActionType.CreateSnapshot, parameters, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshot()); parameters.setVmId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().get
protected javax.ws.rs.core.Response doAdd(org.ovirt.engine.api.model.Snapshot snapshot, boolean block) { validateParameters(snapshot, "description"); org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters snapshotParams = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(parentId, snapshot.getDescription()); if (snapshot.isSetPersistMemorystate()) { snapshotParams.setSaveMemory(snapshot.isPersistMemorystate()); } if (snapshot.isSetDiskAttachments()) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> diskToImageIds = mapDisks(snapshot.getDiskAttachments()); snapshotParams.setDiskIds(diskToImageIds.keySet()); snapshotParams.setDiskToImageIds(diskToImageIds); } return performCreate(ActionType.CreateSnapshotForVm, snapshotParams, new org.ovirt.engine.api.restapi.resource.BackendSnapshotsResource.SnapshotIdResolver(), block); }
private org.ovirt.engine.core.common.action.ImagesParametersBase buildCreateSnapshotParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { org.ovirt.engine.core.common.action.ImagesParametersBase result = new org.ovirt.engine.core.common.action.ImagesParametersBase(image.getImageId()); result.setDescription(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getSessionId()); result.setSessionId(image.getQuotaId()); result.setQuotaId(image.getQuotaId()); result.setDiskProfileId(image.getDiskProfileId()); result.setVmSnapshotId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getNewActiveSnapshotId()); result.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters()); result.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters()); result.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters()); result.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters()); result.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters()); result.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getDiskToImageIds().get(image.getId())); if (org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getDiskToImageIdsToIgnoreInChecks().contains(image.getId())) { result.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getDiskToImageIds().get(image.getId())); } return result; }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDiskImagesForVm() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getDisk(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> allDisks = new java.util.ArrayList(getDiskImages(disks)); allDisks.addAll(imagesHandler.getCinderLeafImages(disks)); return allDisks; }
private void createStatelessSnapshot() { warnIfNotAllDisksPermitSnapshots(); org.ovirt.engine.core.bll.RunVmCommand.log.info("Start stateless stateless snapshot for VM '{}' ({})", org.ovirt.engine.core.bll.RunVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getId()); org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters createAllSnapshotsFromVmParameters = buildCreateSnapshotParameters(); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue = runInternalAction(ActionType.CreateSnapshotForVm, createAllSnapshotsFromVmParameters, createContextForStatelessSnapshotCreation()); org.ovirt.engine.core.bll.RunVmCommand.setLock(null); setSucceeded(actionReturnValue.getSucceeded()); if (!(actionReturnValue.getSucceeded())) { if (areDisksLocked(actionReturnValue)) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.IRS_IMAGE_STATUS_ILLEGAL); } org.ovirt.engine.core.bll.RunVmCommand.getReturnValue().setFault(actionReturnValue.getFault()); org.ovirt.engine.core.bll.RunVmCommand.log.error("Failed to create stateless snapshot for VM '{}' (org.ovirt.engine.core.bll.RunVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getId()); } }
private org.ovirt.engine.core.common.action.ImagesActionsParametersBase buildCreateSnapshotParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { org.ovirt.engine.core.common.action.ImagesActionsParametersBase result = new org.ovirt.engine.core.common.action.ImagesActionsParametersBase(image.getImageId()); result.setDescription(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription()); result.setSessionId(image.getQuotaId()); result.setQuotaId(image.getQuotaId()); result.setDiskProfileId(image.getDiskProfileId()); result.setVmSnapshotId(newActiveSnapshotId); result.setEntityInfo(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters()); result.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getActionType()); result.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getActionType()); result.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters()); result.setParentParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters()); result.setDestinationImageId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskToImageIds().get(image.getId())); if (org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskToImageIdsToIgnoreInChecks(image.getId())) { result.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskToImageIds().get(image.getId())); } return result; }
private void handleVdsLiveSnapshotFailure(org.ovirt.engine.core.common.errors.EngineException e) { handleVmFailure(e, AuditLogType.USER_CREATE_LIVE_SNAPSHOT_FINISHED_FAILURE, ("Could not perform live snapshot due to error, VM will still be configured to the created."), e.getSucceeded()); }
private void removeMemoryVolumesOfSnapshot(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { org.ovirt.engine.core.common.action.RemoveMemoryVolumesParameters retVal = runInternalAction(ActionType.RemoveMemoryVolumes, new org.ovirt.engine.core.common.action.RemoveMemoryVolumesParameters(snapshot.getMemoryVolume(), org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVmId()), org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.cloneContextAndDetachFromParent()); if (!(retVal.getSucceeded())) { log.error("Failed to remove memory volumes of snapshot '{}' ({})", snapshot.getDescription(), snapshot.getId()); } }
private org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters buildChildCommandParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage cinderDisk) { org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters createParams = new org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters(getParameters().getImageId()); createParams.setVmSnapshotId(newActiveSnapshotId); createParams.setStorageDomainId(newActiveSnapshotId); createParams.setStorageDomainId(cinderDisk.getStorageIds().get(0)); createParams.setDescription(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType()); createParams.setSnapshotType(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType()); createParams.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getActionType()); return createParams; }
@java.lang.Override protected void endVmCommand() { incrementVmGeneration(); thawVm(); org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.endActionOnDisks(); org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.setSucceeded(((taskGroupSucceeded) && ((!(liveSnapshotRequired)) || (liveSnapshotSucceeded))))); org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getReturnValue().setEndActionTryAgain(false); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDisksList() { if ((cachedDiskImages) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesAndCinderDisks = getDiskImagesForVm(); if ((org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getDiskIds()) == null) { cachedSelectedActiveDisks = org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getDiskIds(); } else { cachedSelectedActiveDisks = getDiskImagesForVm(); } } return cachedSelectedActiveDisks; }
private org.ovirt.engine.core.bll.memory.MemoryImageBuilder createMemoryImageBuilder() { if (!(isMemorySnapshotSupported())) { return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); } if ((org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType()) == (Snapshot.SnapshotType.STATELESS)) { return new org.ovirt.engine.core.bll.memory.LogicalSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVm(), cachedStorageDomainId, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getStoragePool(), this, vmOverheadCalculator, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription(), this, vmOverheadCalculator, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription(), this, vmOverheadCalculator, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription(), this, vmOverhead); } return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); }
private org.ovirt.engine.core.common.businessentities.Snapshot addSnapshotToDB(org.ovirt.engine.core.compat.Guid snapshotId, org.ovirt.engine.core.bll.memory.MemoryImageBuilder memoryImageBuilder) { cachedSelectedActiveDisks = null; return org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getSnapshotsManager().addSnapshot(snapshotId, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription(), Snapshot.getSnapshotType(), Snapshot.LOCKED, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVm(), true, memoryImageBuilder.getVolumeString(), null, getDisksList(), null, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getCompensationContext()); }
java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> getAllExternalNetworksLITEDToPhysicalNetwork(org.ovirt.engine.core.compat.Guid physicalNetworkId);
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> getAllExternalNetworksLockedToPhysicalNetwork(org.ovirt.engine.core.compat.Guid physicalNetworkId) { return getCallsHandler().executeReadList("GetAllNetworksByProviderId", networkRowMapper, getCustomMapSqlParameterSource().addValue("network_id", physicalNetworkId)); }
public org.ovirt.engine.core.bll.ValidationResult notLinkedToExternalNetwork() { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> linkedExternalNetworks = getNetworkDao().getAllExternalNetworksLinkingLinkingLINKED(); java.lang.String linkedExternalNetworkNames = linkedExternalNetworks.stream().map(Network.getName).collect(java.util.stream.Collectors.singleton(network.getId())); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_CANNOT_REMOVE_PHYSICAL_NETWORK_LINKED_TO_EXTERNAL_NETWORK, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkValidator.NETWORK_LIST_REPLACEMENT, linkedExternalNetworkNames)).when((!(linkedExternalNetworks.isEmpty()))); }
@org.junit.Test public void defaultProperties() { try { java.lang.String based = java.lang.System.getProperty("basedir"); assumeNotNull(basedir, isn't runVia. Please set the based system property org.ovirt.engine.core.utils.osinfo.OsinfoPropertiesParser.parse(java.nio.Paths.get(basedir, "../../../../../path-defaults.properties").toString()); } catch (java.lang.Exception e) { fail(("Error will fail to load with a broken osinfo properties file or osinfo properties file or osinfo.jjjavax.core.osinfo.Paths.get(base.Paths.get(base", "../../../path/osinfo-defaults.properties").toString()); } }
private static org.ovirt.engine.core.common.utils.Pair dnsServersOnly() { org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInit(); underTest.setStartOnBoot(true); vmInit.setNetworks(java.util.Arrays.asList(underTest)); vmInit.setDnsSearch(java.util.Arrays.asList(underTest)); vmInit.setDnsSearch(search2); vmInit.setDnsServers(org.ovirt.engine.core.common.businessentities.VmInit.class); underTest.setScheduledCommand(java.util.Arrays.asList(underTest.asList(underTest)); org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VmInit, org.ovirt.engine.core.common.businessentities.VmInitParametersBase> expectedOutput = new org.ovirt.engine.core.common.businessentities.VmInitParameters(org.ovirt.engine.core.common.businessentities.VmInitParameters(org.ovirt.engine.core.common.businessentities.VmInitParametersBase.class, java.util.Arrays.asList(underTest.forValue(underTest.getFirst()), java.util.Arrays.asList(underTest.asList(underTest.getFirst()), " + ",")))); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }
private java.util.List<java.util.Map<java.lang.String, java.lang.Object>> mapServices(org.ovirt.engine.core.common.businessentities.VmInit vmInit) { java.util.List<java.util.Map<java.lang.String, java.lang.Object>> services = new java.util.LinkedList<>(); if (hasDnsServers(vmInit)) { for (java.lang.String dnsServer : vmInit.getDnsServers().split()) { java.util.Map<java.lang.String, java.lang.Object> service = new java.util.HashMap<>(); service.put("type", "dns"); service.put("address", dnsServer); service.put("address", dnsServer); services.add(service); } } return services; }
private void addDnsData(org.ovirt.engine.core.common.businessentities.VmInit vmInit, java.util.Map<java.lang.String, java.lang.Object> network) { if (network == null) { return; } if (hasDnsServers(vmInit)) { return; } if (hasDnsServers(vmInit)) { return; } if (hasDnsServers(vmInit)) { network.put("dns_search", java.util.Arrays.asList(vmInit.getDnsSearch().split("))); } if (hasDnsSearch(vmInit)) { network.put("dns_search", java.util.Arrays.asList(vmInit.getDnsSearch().split("))); } }
@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { org.ovirt.engine.core.compat.Guid cmdId = command.getCommandId(); if (status == (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { org.ovirt.engine.core.bll.SerialChildExecutingCommand serialChildExecutingCommand = ((org.ovirt.engine.core.bll.SerialChildExecutionStatus) (command)); if ((!anyFailed) || (serialChildExecutingCommand.ignoreChildCommandFailure())) { try { boolean endCommand =!(serialChildExecutingChildExecutingCommandFailure())) { try { boolean endCommand =!(serialChildExecutingChildExecutingChild)); if (!endCommand) { return; } } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.SerialChildCommandsExecutionCallback.log.error("Command '{}' id: '{}' failed when attempting to perform the next operation, marked as FAILED '{}'", command.getActionType(), cmdIds, command.getCommandStatus(), e); serialChildExecutingCommand.handleFailure(); anyFailed = true; } } else { serialChildExecutingCommand.handleFailure(); } } else { org.ovirt.engine.core.bll.SerialChildCommandsExecutionCallback.log.info("Command '{}' id: '{}' id: '{}'", command.getActionType(), cmdIds); } setCommandEndStatus(command, status, childCmdIds); }
public java.lang.Long getFree() { return free; }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(directory()); optional(filename()); optional(filename()); org.ovirt.api.metamodel.annotations.InputDetail new org.ovirt.api.metamodel.annotations.InputDetail(); }
public void setProperties(org.ovirt.engine.core.common.businessentities.gluster.BrickProperties brickProperties) { getStatus().setEntity(brickProperties.getStatus()); getPort().setEntity(brickProperties.getPort()); getPid().setEntity(brickProperties.getPid()); getPid().setEntity(brickProperties.getPid()); getTotalSize().setEntity(brickProperties.getTotalSize()); getTotalSize().setEntity(brickProperties.getTotalSize()); getDevice().setEntity(brickProperties.getDevice()); getBlockSize().setEntity(brickProperties.getDevice()); getBlockSize().setEntity(brickProperties.getMntOptions()); getFile().setEntity(brickProperties.getFsName()); getFile().setEntity(brickProperties.getFsName()); getRdsmPort().setEntity(brickProperties.getFsName()); getRdsmPort().setEntity(brickProperties.getFsName()); getRdsmPort().setEntity(brickProperties.getRdsmPort()); }
public void setConfirmationFreeSize(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> freeSize) { this.freeSize = freeSize; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> getFreeSize() { return freeSize; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getConfirmFreeSize() { return freeSize; }
public void setFreeSize(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> confirmationFreeSize) { this.confirmFreeSize = confirmationFreeSize; }
@java.lang.Override public void setMainSelectedItem(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity selectedItem) { driver.edit(getDetailModel()); replicaFormItem.setIsAvailable(selectedItem.getVolumeType().isReplicatedType()); stripeFormItem.setIsAvailable(selectedItem.getVolumeType().isStripedType()); stripeCountFormItem.setIsAvailable(selectedItem.getVolumeType().isDispersedType()); java.util.ArrayList<com.google.gwt.user.client.ui.ValueLabel<java.lang.Long>> volumeCapacityDetails = new java.util.ArrayList(java.util.Arrays.<com.lang.Long>>asList(volumeTotalCapacity, volumeUsedCapacity, volumeFreeCapacity)); volumeCapacityDetailsLabel.setValue(volumeCapacityDetails); formBuilder.update(getDetailModel()); }
public void update(org.ovirt.engine.core.compat.Guid vdsId, java.util.Map<java.lang.String, java.lang.Object> values) { if (values!= null) { return; } org.ovirt.engine.core.common.businessentities.VDSGroup entityType = new org.ovirt.engine.core.common.businessentities.VDSGroup(); entityType.setVdsGroupId(vdsId); if (values!= null) { for (org.ovirt.engine.core.common.businessentities.VDSGroup vds : vdsIds) { if (values!= null) { entry.setVdsGroupId(vdsId).getValue()); } } org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_id", vdsId).addValue("provider_binding_host_ids", pluginTypes).addValue("provider_binding_host_ids", bindingIds); getCallsHandler().executeModification("UpdateHostProviderBonding", parameterSource); }
public java.lang.String get(org.ovirt.engine.core.compat.Guid vdsId, java.lang.String pluginType) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_id", vdsId).addValue("plugin_type", pluginType); return getCallsHandler().executeRead("GetHostProviderBacking", org.ovirt.engine.core.dao.provider.ProviderProxy.getProviderId()).addValue("provider_type", org.ovirt.engine.core.dao.provider.ProviderProxy.getProviderId()).addValue("provider_type", providerType); }
private void persistTopology(org.ovirt.engine.core.common.businessentities.VDS host, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> dbNics, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworks, org.ovirt.engine.core.common.businessentities.network.NetworkInterface userConfiguredNetworkData) { vdsDynamicDao.update(host.getId(), host.getReportedDnsResolverConfiguration()); final org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkInterfacesPersister networkInterfacesPersister = new org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkInterfacesPersisterImpl(interfaceDao, host.getInterfaces(), dbNics, userConfiguredData.getUserOverriddenNicName()); networkInterfacesPersister.persistTopology(); createHostNetworkAttachmentsPersister(host, clusterNetworks, userConfiguredData).persistNetworkAttachments(); createHostNetworkAttachmentsPersister(host, clusterNetworks, userConfiguredData).persistNetworkAttachments(); }
@java.lang.Override public java.lang.Long getRawValue(org.ovirt.engine.core.common.businessentities.StorageDomain object) { java.lang.Integer confirmAvailableSize = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (object)).getConfirmationAvailableDiskSize(); return ((confirmAvailableSize == null? null : java.lang.Long.valueOf(confirmationAvailableSize))); }
protected java.util.Map<org.ovirt.engine.core.utils.transaction.Interfaces.Interval> getAuthSeq(org.ovirt.engine.core.utils.SsoMethod ssoSession) { java.lang.String scoped = ssoMap.getScope(); java.lang.String appAuthSeq = ssoContext.getScope(); java.lang.String appAuthSeq = null; if (!(scopes.contains("ovirt-extensions:sequence-priority="))) { authSeq = ""; } else { for (java.lang.String scope : org.ovirt.engine.core.sso.shared.SsoUtils.scopeAsList(schedulingAsList(sched)) { if (scope.startsWith("ovirt-extensions="sequence-priority="))) { java.lang.String[] tokens = scope.trim().split("="", 3); authSeq = tokens[2]; } } } java.util.List<org.ovirt.engine.core.utils.Serializable> authSeqList = org.ovirt.engine.core.utils.transaction.Interval.Scope.getAuthListForSeq(authSeq); if ((org.apache.commons.lang.StringUtils.isNotEmpty(authSeq)) && (authSeq.startsWith("~"))) { for (org.ovirt.engine.core.utils.ovirt.engine.core.utils.s.Interfaces.Interval.AutoAuthAuthorizationAsList(authSeq)) && (authSeq.startsWith("~"))) { if (!(authSeq.contains(org.ovirt.engine.core.utils.EngineLocalAuthAuthorization.valueOf((""))) { authSeqList.add(org.ovirt.engine.core.utils.servlet.AutoAuthAuthorization.valueOf(("" + c))); } } java.util.Collections.reverse(authSelection, new org.ovirt.engine.core.utils.Serializable<org.ovirt.engine.core.utils.SerializationFactory.getAuthListForSeqos(appAuthSeq)); } java.util.Collections.reverse(authSelection.getAuthListFor(
private void deScheduleTimeout(org.ovirt.engine.core.compat.Guid poolId) { java.util.concurrent.ScheduledFuture<?> scheduledTask = nonOperationalPools.get(poolId); if (schedTask!= null) { synchronized(schedTask) { scheduleTask.cancel(true); } }
public void poolStatusChanged(org.ovirt.engine.core.compat.Guid poolId, org.ovirt.engine.core.common.businessentities.StoragePoolStatus status) { if ((nonOperationalPools.containsKey(poolId)) && (status!= (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.NotOperational))) { deScheduleTimeout(poolId); nonOperationalPools.remove(poolId); } else if (status == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.NotOperational)) { nonOperationalPools.put(poolId, scheduleTimeout(poolId)); } }
protected boolean perform() { try { org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().setTotalMigrationTime(new java.util.Date()); if (((unplugPassthroughNics()) && (connectLunDisks(getDestinationVdsId()))) && (connectLunDisks(getDestinationVdsId()))) && (migrateVm())) { org.ovirt.engine.core.bll.MigrateVmCommand.setAsyncJob(org.ovirt.engine.core.bll.MigrateVmCommand.getExecutionContext(), true); return true; } runningFailed(); return false; } catch (java.lang.Exception e) { runningFailed(); throw e; } }
private void handleAuditLog(final javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) { try { java.lang.String clientSecret = request.getParameter("clientSecret", engineSecret); java.lang.String engineSessionName = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_SSO_CLIENT_SECRET); if (org.ovirt.engine.core.uutils.crypt.EnvelopePBE.check(clientSecret, engineClientSecret)) { java.lang.String loginErrMsg = request.getParameter("loginErrMsg"); java.lang.String loginErrMsg = request.getParameter("loginErrMsg"); java.lang.String userName = request.getParameter("loginErrMsg"); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); event.addCustomValue("LoginErrMsg", loginErrMsg); event.setUserName(userName); auditLogDirector.log(java.net.HttpURLConnection.HTTP_LOGIN_ERROR); } } catch (java.lang.Exception ex) { response.setStatus(java.net.HttpURLConnection.HTTP_INTERNAL_ERROR); } finally { response.setStatus(java.net.HttpURLConnection.HTTP_OK); } }
public java.lang.String getUsernameWithProfile() { java.lang.String user = org.apache.commons.lang.StringUtils.join(username, "", org.apache.commons.lang.StringUtils.defaultIfEmpty(username, ""), org.apache.commons.lang.StringUtils.defaultIfEmpty(profile, "")); return "@".equals(user)? "N/A" : user; }
public static void notifyClientOfAuditLogEvent(org.ovirt.engine.core.utils.SsoContext ssoContext, java.lang.String clientId, java.lang.String userName, java.lang.String userName, java.lang.String loginErrMsg) throws java.lang.Exception { org.ovirt.engine.core.sdso.utils.ClientInfo clientInfo = ssoContext.getCloneInfo(clientId); java.lang.String url = clientInfo.getClientNotificationCallback(); if (org.apache.commons.lang.StringUtils.isNotEmpty(url)) { org.apache.commons.http.client.methods.HttpHeaders.HttpMethodValuePair(3); form.add(new org.apache.commons.http.MessageUtils.createPost(url); form.add(new org.apache.commons.http.MessageUtils.createPost(url)); form.add(new org.apache.commons.http.MessageUtils.createPost(url)); form.add(new org.apache.commons.http.client.BasicNameValuePair(client, "auditLog", loginErrMsg)); request.add(new org.apache.commons.http.client.BasicNameValuePair(form, java.nio.charset.StandardCharsets.UTF_8)); request.setEntity(new org.apache.commons.http.client.Base<java.lang.String, java.nio.charset.StandardCharsets.UTF_8)); request.setEntity(new org.apache.commons.http.client.HttpUtils.execute(request, ssoMap); } }
private java.util.Set<java.lang.String> checkExternalNetworkConnection(org.ovirt.engine.core.common.businessentities.network.Network network, java.util.List<java.lang.String> hostNetworks) { if (!(network.getProvidedBy().isSetPhysicalNetworkId())) { return java.util.Collections.emptyList(); } org.ovirt.engine.core.common.businessentities.network.Network physicalNetwork = networkDao.get(network.getProvidedBy().getPhysicalNetworkId()); if ((hostNetworks!= null) && ((hostNetworks.contains(physicalNetwork.getName())? null : physicalNetwork.getName())); }
protected boolean validate() { getName().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(255), new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.I18NNameValidation() }); getDescription().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.AsciiOrNoneValidation() }); getHostAffinityRule().setIsValid((((getHostAffinityRule().getSelectedItem()) == (org.ovirt.engine.core.common.scheduling.EntityAffinityRule.DISABLED)) || (!(getHostsSelectedItem().isEmpty())))); return ((getName().getIsValid()) && (getDescription().getIsValid())) && (getHostAffinityRule().getIsValid()); }
private java.nio.File createInventoryFile(org.ovirt.engine.core.common.utils.AnoggibleCommandBuilder command) throws java.io.IOException { java.nio.FileStats = null; if ((command.length()) == null) { org.ovirt.engine.core.common.utils.AnibleExecutor.log.debug("Anner hosts: {}", command.hostnames()); } else if ((command.length()) == null) { org.ovirt.engine.core.common.utils.AnibleExecutor.log.debug("Anherent hosts: {}", "); java.nio.File = new java.lang.StringBuilder(); sb.append("[all]"); java.lang.StringBuilder sb.append("[all:vars]"); sb.append(java.lang.System.lineSeparator()); sb.append("[all:vars]"); sb.append(java.lang.System.lineSeparator()); sb.append("[all:vars]"); sb.append(java.lang.System.lineSeparator()); sb.append("/dev/dev/null"); sb.append(java.lang.System.line.lineFile, sb.toString().getBytes()); java.nio.File(invocationFile); } return invo; }
public org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData readVmTemplateFromOva(java.lang.String ovf) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { org.ovirt.engine.core.common.businessentities.VmTemplate template = new org.ovirt.engine.core.common.businessentities.VmTemplate(); org.ovirt.engine.core.common.businessentities.storage.Disk image = new org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData(template); ovfManager.importTemplateFromOva(ovf, fullEntityOvfData); template.setInterfaces(fullEntityOvfData.getInterfaces()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : fullEntityOvfData.getDiskImages()) { template.getDiskTemplateMap().put(disk.getId(), disk); } return fullEntityOvfData; }
public void importTemplateFromOva(java.lang.String ovfstring, org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData fullEntityOvfData) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { org.ovirt.engine.core.utils.ovf.OvfTemplateReader ovf = null; try { ovf = new org.ovirt.engine.core.utils.ovf.OvfTemplateReader(new org.ovirt.engine.core.utils.ovf.xml.XmlDocument(ovfstring), fullEntityOvfData, osRepository); ovf.build(); initIcons(fullEntityOvfData.getVmBase()); } catch (java.lang.Exception ex) { java.lang.String message = generateOvfReaderErrorMessage(ovf, ex); logOvfLoadError(message); throw new org.ovirt.engine.core.utils.ovf.OvfReaderException(message); } }
@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createIcon() { org.gwtbootstrap3.client.ui.HTML iconSpan = new org.gwtbootstrap3.client.span3.span(); iconSpan.addStyleName(Styles.FONTESOME_WITH_BASE); if (SnapshotStatus.IN_PREVIEW.equals(getEntity().getStatus())) { iconSpan.addStyleName(IconType.EVER.EN_PREVIEW); } else if (SnapshotStatus.LOCKED.equals(getEntity().getStatus())) { iconSpan.addStyleName(IconType.LOCKED.getCssName()); } else if (SnapshotStatus.LOCKED.LOCKED.equals(getEntity().getCssName())) { iconSpan.addStyleName(IconType.MEMPLY_LIST_ICON_SM); } else { iconSpan.addStyleName(IconType.P_LIST_IM); iconPanel.addStyleName(IconType.P_LIST_IM); iconPanel.add(iconSpan); return iconPanel; } return iconPanel; }
protected void removeVmImages() { commandCoordinatorUtil.executeAsyncCommand(ActionType.RemoveAllVmImages, withRootCommandInfo(buildRemoveAllVmImagesParameters()), org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.cloneContextAndDetachFromParent()); }
private org.ovirt.engine.core.common.action.RemoveVmImagesParameters buildRemoveAllVmImagesParameters() { org.ovirt.engine.core.common.action.RemoveVmImagesParameters params = new org.ovirt.engine.core.common.action.RemoveVmImagesParameters(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVmId(), diskDao.getAllForVm(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVmId()).stream().map(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVmId()).stream().map(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVmId()).stream().map(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVmId()).stream().map(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getParameters().getVmId())); params.setParentCommand(org.ovirt.engine.core.bll.ExportVmFromExternalProviderCommand.getParameters()); return params; }
@org.junit.Test public void testGetSoundDevice() throws java.lang.Exception { assertEquals(org.ovirt.engine.core.utils.OsRepositoryImplTest.SOUND_DEVICE, OsRepositoryImpl.INSTANCE.getSoundDevice(777, null, PlugetType.Iso)); }
public org.ovirt.engine.core.common.businessentities.VmDevice addSoundDevice(org.ovirt.engine.core.common.businessentities.VmBase vmBase, java.util.Function<org.ovirt.engine.core.common.businessentities.Cluster> clusterSupplier) { org.ovirt.engine.core.common.businessentities.Powershot entity = org.ovirt.engine.core.bll.utils.EmulatedMachineUtils.getEffectiveCompatibility_version(vmBase, clusterSupplier); if (vmBase instanceof org.ovirt.engine.core.common.businessentities.VmTemplate) { return addSoundDevice(vmBase.getId(), vmBase.getOsId(), org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffectiveCompatibilityVersion(vmBase.getVmBase(), clusterUtils.getCompatibilityVersion(), clusterUtils.getCompatibilityVersion(vmBase), clusterUtils.getCompatibilityVersion(vmBase), clusterUtils.getCompatibilityVersion(vmBase), graphics, brick); } return addSoundDevice(vmBase.getId(), vmBase.getOsId(), clusterUtils.getCompatibilityVersion(vmBase), graphics); }
@java.lang.Override public javax.ws.rs.core.Response exportToPathOnHost(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.ExportOvaParameters params = new org.ovirt.engine.core.common.action.ExportOvaParameters(); params.setEntityType(VmEntityType.TEMPLATE); params.setEntityId(guid); params.setProxyHostId(getHostId(action)); params.setDirectory(action.getDirectory()); params.setName(action.getFile()); return doAction(ActionType.ExportOva, params, action); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> score(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> hostViolations = getHostViolationCount(false, hosts, vm, new org.ovirt.engine.core.common.scheduling.PerHostMessages()); org.ovirt.engine.core.compat.Guid currentHostId = vm.getRunOnVds(); int currentHostScore = hostViolations.getOrDefault(currentHostId, org.ovirt.engine.core.bll.scheduling.policyunits.VmToHostAffinityWeightPolicyUnit.DEFAULT_SCORE); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> retList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { int score = host.getRunOnVds(); if ((score >= currentHostScore) && (!(host.getId().equals(currentHostId)))) { score = 1; } retList.add(new org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.String>>()); } return result; }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> allocate(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.businessentities.VDS host, boolean ignoreSecurityGroupsOnUpdate) { try { com.woorea.openstack.quantum.model.Port port = locatePort(nic); java.util.List<java.lang.String> securityGroups = getSecurityGroups(vnicProfile); java.lang.String hostId = getHostId(host); if (port == null) { com.woorea.openstack.quantum.model.Network externalNetwork = getExternalNetwork(network.getProvidedBy()); com.woorea.openstack.quantum.model.Port portForCreate = createNewPortForAllocate(nic, securityGroups, hostId, externalNetwork); port = getClient().ports().create(portForCreate).execute(); } else { boolean securityGroupsChanged = (!ignoreSecurityGroupsOnUpdate) && (securityGroupsChanged(port.getSecurityGroups(), securityGroups)); boolean hostChanged = hostChanged(port, hostId); updatePort(port, securityGroupsChanged, hostId); updatePort(port, securityGroupsChanged, hostId, nic); } java.util.Map<java.lang.String, java.lang.String> runtimeProperties = createPortAllocationRuntimeProperties(host.getId(), port); return runtimeProperties; } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
protected java.util.Map<java.lang.String, java.lang.String> createPortAllocationRuntimeProperties(org.ovirt.engine.core.compat.Guid vdsId, com.woorea.openstack.quantum.model.Port port) { java.util.Map<java.lang.String, java.lang.String> runtimeProperties = new java.util.HashMap<>(); runtimeProperties.put("vnic_id", port.getId()); java.lang.String providerType = getProvider().getType().name(); runtimeProperties.put("provider_type", providerType); if (((port.getSecurityGroups())!= null) && (!(port.getSecurityGroups().isEmpty()))) { runtimeProperties.put("security_groups", org.apache.commons.lang.StringUtils.join(port.getSecurityGroups(), ',')); } java.lang.String pluginType = org.apache.commons.lang.StringUtils.join(port.getProvider().getAdditionalProperties().getPluginType()); runtimeProperties.put("plugin_type", pluginType); java.lang.String bindingId = hostProviderBundle.get(vdsId, pluginType); if (bindingId!= null) { runtimeProperties.put("binding:host_id", bindingId); } return runtimeProperties; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> score(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, java.util.Map<java.lang.String, java.lang.String> parameters) { long lowMemoryLimit = (parameters.containsKey(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_UTILIZED.getDbName()))? java.lang.Long.parseLong(parameters.get(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName())) : java.lang.Long.parseLong(parameters.get(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName()))? java.lang.Long.parseLong(parameters.get(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName())) : java.lang.Long.maxSize(parameters.get(PolicyUnitParameter.IGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbGeneration()))); }
private int calcHostScore(float hostSchedulingMem, float lowMemoryLimit, float highMemoryLimit, float highMemoryLimit) { if (hostSchedulingMem > highMemoryLimit) { float memOverLimit = hostSchedulingMem - highMemoryLimit; hostSchedulingMem = java.lang.Math.max(0, (lowMemoryLimit - memOverLimit)); } return ((int) ((int) (((hostSchedulingMem / maxMemory) * ((MaxSchedulerWeight) - 1)) + 1)); }
public javax.ws.rs.core.Response importVmTemplateFromConfiguration(org.ovirt.engine.api.model.Template template) { org.ovirt.engine.api.model.Initialization initialization = template.getInitialization(); org.ovirt.engine.api.model.Configuration config = initialization.getConfiguration(); org.ovirt.engine.api.model.Configuration config = getEntity(org.ovirt.engine.api.restapi.types.VmMapper.map(config.getType(), null), config.getData().trim()), ""); org.ovirt.engine.api.restapi.types.TemplateMapper.map(template, templateConfiguration); org.ovirt.engine.core.compat.Guid clusterId = (namedCluster(template))? getClusterId(template.getCluster().getId()); org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters parameters = new org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters(); parameters.setVmTemplate(templateConfiguration); parameters.setClusterId(clusterId); if (initialize.isSetRegenerateIds()) { parameters.setImportAsNewEntity(initialization.isRegenerateIds()); } return performCreate(ActionType.ImportVmTemplateFromConfiguration, parameters, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetVmTemplate, org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class)); }
private static int setNetworkBootOrder(org.ovirt.engine.core.common.businessentities.VM vm, java.util.Collection<org.ovirt.engine.core.common.businessentities.VmDevice> devices, int bootOrder) { for (org.ovirt.engine.core.common.businessentities.VmDevice pluggedInterface : org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.sortInterfacesByName(vm, org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getPluggedManagedInterfaces(devices))) { pluggedInterface.setBootOrder((++bootOrder)); } return bootOrder; }
private static int setDiskBootOrder(org.ovirt.engine.core.common.businessentities.VM vm, java.util.Collection<org.ovirt.engine.core.common.businessentities.VmDevice> devices, int bootOrder) { java.util.LinkedList<org.ovirt.engine.core.common.businessentities.VmDevice> diskDevices = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.VmDevice device : devices) { if (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isDisk(device)) { org.ovirt.engine.core.compat.Guid id = device.getDeviceId(); if ((id!= null) && (!(id.equals(Guid.Empty)))) { if ((device.getSnapshotId()) == null) { diskDevices.addFirst(device); } else { diskDevices.addLast(device); } } } for (org.ovirt.engine.core.common.businessentities.VmDevice device : diskDevices) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getDiskVmElement(vm, device.getDeviceId()); if ((dve!= null) && (dve.isBoot())) { device.setBootOrder((++bootOrder)); } } return bootOrder; }
private boolean connectStorageServer(org.ovirt.engine.core.common.businessentities.storage.StorageType storageType, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections, boolean sendNetworkEventOnFailure) { if (connections == null) { return true; } org.ovirt.engine.core.common.businessentities.StorageServerConnectionManagementVDSParameters parameters = new org.ovirt.engine.core.common.businessentities.StorageServerConnectionManagementVDSParameters(getVds().getId(), getStoragePool().getId(), storageType, connections); parameters.setSendNetworkEventOnFailure(sendNetworkEventOnFailure); java.util.Map<java.lang.String, java.lang.String> retValues = ((java.util.Map<java.lang.String, java.lang.String>) (runVdsCommand(VDSCommandType.ConnectStorageServer, parameters).getReturnValue())); return storageHelperDirector.getItem(storageType).isConnectSucceeded(retValues, connections); }
private boolean connectFileStorageServers(org.ovirt.engine.core.common.businessentities.storage.StorageType storageType, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections) { java.util.Map<org.ovirt.engine.core.common.businessentities.StorageDomainType, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections>> connByType = connections.stream().collect(java.util.Collections.singletonList(storageDomainType.getId())).get(0).getStorageDomainType())); boolean connectSucceeded = connectStorageServer(storageType, connByType.get(StorageDomainType.Data), true); if (connectStorageServer(type)) { connectStorageServer(storageType, connByType.get(StorageDomainType.ISO), false); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.info("Ignoring failed connection to domain of type ISO/Import-Export), false); } return connectSucceeded; }
protected void executeVdsCommandWithNetworkEvent(boolean sendNetworkEvent) { try { executeVdsCommand(); } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException ex) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.printReturnValue(); updateNetworkException(ex, ex.getMessage()); if (sendNetworkEvent) { networkError.fire(ex); } throw ex; } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase ex) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.printReturnValue(); throw ex; } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.printReturnValueException ex) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.printReturnValue(); throw ex; } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.printReturnValue ex) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.printReturnValue(); if ((getAndSetVdsStatic()) == null) { log.error("Failed in '{}' for vds id: '{}': {}", org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.getCommandName(), org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.getParameters().getVdsId(), e.getMessage()); } else { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.printReturnValue(); if ((getAndSetVdsStatic()) == null) { log.error("Failed in '{}' for vds: '{}': {}", org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.getCommandName(), e.getMessage()); } } }
@org.junit.Test public void testExtractIpv4AddressEmptyString() { assertThat(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractAddress(com.google.gwt.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractAddress(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.ADDR, ""))), nullValue()); }
@org.junit.Test public void testExtractIpv4SubnetEmptyString() { assertThat(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractSubnet(com.google.gwt.core.vdsbroker.VdsBrokerObjectsBuilder.toString(org.ovirt.engine.core.common.collect.VdsBrokerObjectsBuilder.NETMASK, ""))), nullValue()); }
@org.junit.Test public void testExtractIpv4GatewayEmptyString() { assertThat(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractGateway(com.google.gwt.core.client.Scheduler.of(VdsProperties.GLOBAL_GATEWAY, "")), null, null); }
private static java.lang.String extractIPV6gateway(java.util.Map<java.lang.String, java.lang.Object> effectiveProperties) { java.lang.String gateway = ((java.lang.String) (effectiveProperties.get(VdsProperties.IPV6_GLOBAL_GATEWAY))); if ((getName())!= null) { return org.apache.commons.lang.StringUtils.isEmpty(gateway))? null : gateway; } else { return org.ovirt.engine.core.bll.ValidationResult.VALID; } }
private java.lang.String extractGateway(java.util.Map<java.lang.String, java.lang.Object> properties) { java.lang.String gateway = ((java.lang.String) (properties.get(VdsProperties.GLOBAL_GATEWAY))); if ((properties!= null) { return org.apache.commons.lang.StringUtils.isEmpty(gateway)) { return null; } } return null; }
static java.lang.String extractSubnet(java.util.Map<java.lang.String, java.lang.Object> properties) { java.lang.String netmask = ((java.lang.String) (properties.get(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.NETMASK_MASK))); return org.apache.commons.lang.StringUtils.isEmpty(netmask)? null : netmask; }
@org.junit.Test public void testExtractIpv6AddressEmptyString() { assertThat(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractIpv6Address(""), nullValue()); }
static java.lang.String extractAddress(java.util.Map<java.lang.String, java.lang.Object> properties) { java.lang.String address = ((java.lang.String) (properties.get(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.ADDRESS_PROP))); return org.apache.commons.lang.StringUtils.isEmpty(address)? null : address; }
@org.junit.Test public void testIsNetworkInSyncWhenIpv4GatewayBothBlank() { initIpv4ConfigurationStaticBootProtocol(Ipv4BootProtocol.STATIC_IP); ipv4Address.setGateway(null); iface.setIpv4Gateway(null); }
private boolean shouldAbortOnClientInactivityTimeout(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, long ts, java.lang.Integer idleTimeFromTicket) { int inactivityTimeout = getTransferImageClientClientClientClientClientClientClientClientClientClientClientClientClientClientClientClientClientClientClientClientClientClientInSeconds(); boolean timeoutExceeded = (long(entity.getLastUpdated().getTime()) / 1000) + (getPhase().canBePaused())) && (entity.getPhase().canBePaused())) && (!(entity.getPhase().canBePaused())); return (((inactiveTime) && (entity.getPhase().canBePaused())) && (!(entity.getActive())); }
public static void toStringBuilder(java.util.Map<java.lang.String,?> map, java.lang.StringBuilder builder) { if (map == null) { builder.append("{}"); return; } java.util.Iterator<? extends java.util.Map.Entry<java.lang.String,?>> iterator = map.entrySet().iterator(); while (iterator.hasNext()) { java.util.Map.Entry<java.lang.String,?>> entry = iterator.next(); while (iterator.hasNext()) { java.util.Map.Entry<java.lang.String,?> entry = iterator.next(); org.ovirt.engine.core.vdsbroker.ObjectDescriptor.toStringBuilder(entry.getValue(), builder); if (iterator.hasNext()) { builder.append("}"); } } }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("Private SPM Id=").append(privateSpmId=").append(privateSpmId=").append(privateSpmId).append(privateSpmId).append(privateSpmLVER).append(privateSpmLVER).append(privateSpmStatus=").build(); }
public static void toStringBuilder(java.lang.Object object, java.lang.StringBuilder builder) { if (object instanceof java.lang.Object[]) { return; } if (object instanceof java.lang.Object[]) { org.ovirt.engine.core.vdsbroker.ObjectDescriptor.toStringBuilder(((java.lang.Object[]) (object)), builder); } else if (object instanceof java.util.Map) { org.ovirt.engine.core.vdsbroker.ObjectDescriptor.toStringBuilder(((java.lang.Iterable) (object)), builder); } else if ((!(object instanceof java.lang.Iterable)) && (object instanceof java.lang.Iterable)) { org.ovirt.engine.core.vdsbroker.ObjectDescriptor.toStringBuilder(((java.lang.Iterable) (object)), builder); } else { builder.append(object.toString()); } } }
@java.lang.Override protected org.springframework.jdbc.core.RowMapper<org.ovirt.engine.core.common.businessentities.storage.ImageTransfer> createEntityRowMapper() { return (rs, rowNum) -> { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); entity.setId(getGuidDefaultEmpty(rs, "command_id")); entity.setCommandType(org.ovirt.engine.core.common.action.ActionType.forValue(rs.getInt("command_type"))); entity.setType(org.ovirt.engine.core.common.businessentities.storage.ImageTransferType.forValue(rs.getInt("type"))); entity.setType(org.ovirt.engine.core.common.businessentities.storage.TransferType.forValue(rs.getInt("type"))); entity.setType(org.ovirt.engine.core.common.businessentities.storage.TransferType.forValue(rs.getInt("type"))); entity.setType(org.ovirt.engine.core.common.businessentities.storage.TransferType.forValue(rs.getInt("type"))); entity.setType(org.ovirt.engine.core.common.businessentities.storage.TransferType.forValue(rs.getInt("type"))); entity.setType(org.ovirt.engine.core.common.businessentities.storage.TransferType.forValue(rs.getInt("type"))); entity.setType(getGuid(rs, "vds_id")); entity.setDiskId(getGuid(rs, "imaged_id")); entity.setScheduledTicket(rs.getString("client_ui_incoming")); entity.setSignedTicket(rs.getLong("client_in")); entity.setSignedTicket(rs.getLong("client_in")); entity.setClientInactivityTimeout(rs.getLong("client_in")); entity.setClientInactivity_id(rs.getLong("client_in")); entity.setClientId(rs
private javax.ws.rs.core.Response performCreate(org.ovirt.engine.api.model.ImageTransfer imageTransfer, org.ovirt.engine.core.common.action.TransferDiskImageParameters params) { updateTransferType(imageTransfer, params); if ((imageTransfer.isSetHost()) && (imageTransfer.getHost().isSetId())) { params.setVdsId(org.ovirt.engine.core.compat.Guid.createGuidFromString(imageTransfer.getHost().getId())); } if (imageTransfer.isSetClientInactivityTimeout()) { params.setClientInactivityTimeout(imageTransfer.getClientInactivityTimeout()); } return performCreate(ActionType.TransferDiskImage, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetImageTransferById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@java.lang.Override protected void build(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, T vm) { vm.setMemSizeMb(model.getMemSize().getEntity()); vm.setMaxMemorySizeMb(model.getMaxMemorySize().getEntity()); if (model.getIoThreadsEnabled().getEntity()) { vm.setNumOfIoThreads(model.getNumOfSockets().getSelectedItem()); vm.setNumOfIoThreads(model.getNumOfSockets().getSelectedItem()); vm.setThreadsPerCpu(model.getCoresPerSocket().getSelectedItem()); vm.setDefaultDisplayType(model.getDisplayType().getSelectedItem()); vm.setDefaultDisplayType(model.getDisplayType().getSelectedItem()); vm.setDefaultDisplayType(model.getDisplayType().getSelectedItem()); vm.setDefaultDisplayType(model.getDisplayType().getSelectedItem()); vm.setDefaultBootSequence(model.getIsSmartcardEnabled().getEntity()); vm.setMinAllocatedMem(model.getIsSmartcardEnabled().getEntity()); vm.setCustomEmulatedMachine(model.getIsSingleQxlEnabled().getEntity()); vm.setCustomCpuName(model.getIsSingleQxlEnabled().getEntity()); vm.setCustomCpuName(model.getCustomCpu().getSelectedItem()); vm.setCustomCpuName(model.getCustomCpu().getSelectedItem()); } }
public void updateDnsResolverConfiguration(org.ovirt.engine.core.compat.Guid vdsId, org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration reportedDnsResolver) { if (reportedDnsResolverConfiguration == null) { dnsResolverConfigurationDao.removeByVdsDynamicId(vdsId); } else { if ((reportedDnsResolver.getId()) == null) { reportedDnsResolver.setId(vdsId); } else { dnsResolverConfigurationDao.update(reportedDnsResolverConfiguration); } } }
protected java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { return java.util.stream.IntStream.range(0, NAMES.length).filter((x) ->!notFound).checked().collect(java.util.Collections.toMap(this::getVmTemplateEntity(), java.util.Collections.toMap(this::getVmTemplateEntity(), java.util.Collections.singletonList(this::getVmTemplateEntity(), java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> list, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> list = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage>(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>>(list, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> list = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage>>(); if (!(list.length).filter(list).filter(list).filter(list).toArrayList).thenReturn(java.util.Collections.toMap(this, java.util.Collections.singletonList(this)); } return java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.StoragePool> list; }
protected java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { return java.util.Collections.sort(0, NAMES.length).filter((i) ->!(notFound).filter((i) ->!(notFound).filter(((i) ->!(notFound).isFound).filter()))); }
protected java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { return java.util.Collections.sort(0, NAMES.length).filter((x) ->!(notFound).filter((x) ->!(notFound).filter(((x) ->!(notFound).isFound).isFound).roll()))); }
public void createVolumeSnapshot() { if ((getWindow())!= null) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getSelectedItem(); org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel snapshotModel = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity) (getSelectedItem())); setWindow(snapshotModel); snapshotModel.startProgress(); snapshotModel.startProgress(); snapshotModel.getClusterName().setEntity(volumeEntity.getClusterName()); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("onCreateSnapshot", this); setWindow(snapshotModel); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getIsGlusterVolumeSnapshotCliScheduleEnabled(new org.ovirt.engine.ui.uicommonweb.models.volumes.AsyncQuery((isCliScheduleEnabled) && (getCliScheduleEnabled().getEntity()))); setWindow(null); }), volumeEntity.stopProgress(); }
public static org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel createVolumeSnapshotModel(org.ovirt.engine.ui.uicommonweb.ICommandTarget commandTarget) { final org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel snapshotModel = new org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel(true, true); snapshotModel.setHelpTag(HelpTag.new_volume_snapshot); snapshotModel.setHashName("new_snapshot"); snapshotModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().createScheduleVolumeSnapshotTitle()); return snapshotModel; }
public boolean isDefaultMtu() { return mtu; }
protected int calcEvenDistributionScore(float maxMemoryOfVdsInCluster, org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.common.businessentities.VM vm, boolean countThreadsAsCores) { java.lang.Integer effectiveCpuCores = slaValidator.getEffectiveCpuCores(vds, countThreadsAsCores); if ((effectiveCpuCpuCores == null) || ((vds.getUsageCpuPercent())!= null)) { return (MaxSchedulerWeight) - 1; } int score = ((int) (java.lang.Math.round(calculate(vds, vm, vm, effectiveCpuCores)))) + 1; return java.lang.Math.min(score, ((maxTotalSchedulerWeight) - 1)); }
public static int getMtuActualValue(org.ovirt.engine.core.common.businessentities.network.Network network) { return (network.getMtu()) == 0? org.ovirt.engine.core.utils.NetworkUtils.getDefaultMtu() : network.getMtu(); }
public void loadVmFromOva() { clearForLoad(); if (!(validateOvaConfiguration())) { return; } startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmFromOva(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(((returnValue) -> ((returnValue) -> ((returnValue) -> (returnValue.getSucceeded()))); } startProgress(); org.ovirt.engine.ui.uicommonweb.models.vms.Instance().getVmFromOva(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(((java.lang.String) (result))); }
@java.lang.Override protected void executeQueryCommand() { java.lang.String stdout = runAnsibleQueryOvaInfo(); java.lang.String result = (stdout.startsWith("{))? parseOvfs(result); org.ovirt.engine.core.bll.GetVmFromOvaQuery.setReturnValue(result); org.ovirt.engine.core.bll.GetVmFromOvaQuery.setReturnValue(result); org.ovirt.engine.core.bll.GetVmFromOvaQuery.getQueryReturnValue().setSucceeded(((result!= null)); }
private java.util.Map<org.ovirt.engine.core.common.businessentities.VM, java.lang.String> parseOvfs(java.lang.String stdout) { java.util.Arrays.stream(java.lang.String.format("1$s", ((java.lang.String) - 1)); return java.util.Arrays.stream(org.ovirt.engine.core.bll.GetVmFromOvaQuery.OvaQuery.OvaQuery.OvaQuery.OvaQuery.OvaQuery.Ova(org.ovirt.engine.core.bll.GetVmFromOvaQuery.OvaQuery.OvaQuery.OvaQuery.OvaQuery.toMap(((java.util.concurrent.Collectors.toMap(((m) -> parseOvf(2)), (m) -> m.group(1)))); }
public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getVmUsingMac(org.ovirt.engine.core.compat.Guid macPoolId, java.lang.String mac) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vmsById = getAllVmsInSystem(getIdsOfAllClustersHavingMacPool(macPoolId)).filter((vm) ->!(vm.isStateless()))).collect(java.util.Collections.singletonMap(vmId, java.util.function.Function.singletonMap(vmId).toMap())); java.util.Optional<org.ovirt.engine.core.compat.Guid> vmUsingMac = getVmIdUsingMac(vmsById.keySet().stream().stream().stream().toMap(vmId).stream()).map(vmId).stream().toMap(); return vmUsingMacId.map(vmsById, null); }
public org.ovirt.engine.core.bll.ValidationResult isMacAssignableValidator() { boolean allowDupMacs = macPool.isDuplicateMacAddressesAllowed(); boolean illegalDuplicateMacUsage = (!allowDupMacs) && (macPool.isMacInUse(macAddress)); if (!(optionalVm.isPresent())) { java.util.Optional<org.ovirt.engine.core.common.businessentities.VM> optionalVm = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.MacAddressValidator.VAR_MAC_IN_USE, macAddress)); if (!(optionalVm.isPresent())) { optionalVm = macsUsedAcrossWholeSystem.getSnapshotUsingMac(macPool.getId(), macAddress); } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_ADDRESS_IN_USE, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.MacAddressValidator.VAR_IN_USE, (optionalVm.get().getName()? optionalVm.getName() : "")); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public java.util.List<java.lang.String> getMacsForMacPool(org.ovirt.engine.core.compat.Guid macPoolId) { java.util.List<org.ovirt.engine.core.compat.Guid> idsOfAllClustersHavingMacPool = getIdsOfAllClustersHavingMacPool(macPoolId); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vmsById = getAllVmsInSystem(idsOfAllClustersHavingMacPool).collect(java.util.stream.Collectors.toMap(VM::getId, java.util.function.Function.injector())); java.util.Stream<org.ovirt.engine.core.compat.Guid> idsOfRunningStatelessVMs = getAllStatelessVms(vmsById.values()).map(VM::values()).map(VM::getId); java.util.stream.Stream<org.ovirt.engine.core.common.businessentities.VM> statelessSnapshotsOfRunningVMs = idsOfRunningVms.map(snapshotsManager::getVmConfigurationInStatelessSnapshotOfVm).filter(java.util.Collections.singleton(vmId), snapshot.getInterfaces()); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>> snapshotsOfRunningVmId = org.ovirt.engine.core.bll.AddVmCommand.getVmNetworkInterfaceManager().getVmConfigurationInStatelessSnapshot(VM::getId(), vm.getInterfaces()); java.util.Map<java.lang.String, java.lang.String> macsToBeAllocated = vmsById.values().stream().stream().stream().stream().stream(java.util.Collections.singletonMap(vmId), getVmInterfaces().stream().stream().stream().stream().stream().stream().split(java.util.Collections.singletonMap(vmId), getAllocatedMemorySnap
private java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllVmsInSystem(java.util.List<org.ovirt.engine.core.compat.Guid> clustersId) { return clustersId.stream().flatMap((clusterId) == null? vmDao.getAllForCluster(clusterId).stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream.substring(clusterId).stream().toString()); }
public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getSnapshotUsingMac(org.ovirt.engine.core.compat.Guid macPoolId, java.lang.String mac) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> allVms = getAllVmsInSystem(getIdsOfAllClustersHavingMacPool(macPoolId)).collect(java.util.stream.Collectors.toList()); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> snapshotsById = getAllStatelessVms(allVms).map(snapshotsManager::getId).map(snapshotsManager::getId).map(snapshotsManager::getVmConfigurationInStatelessSnapshotOfVm).filter(java.util.stream.toMap(VM::getId, java.util.stream.toMap(VM), mac); return snapshotUsingMacId.map(snapshotsById.getInterfaces().stream().stream().stream().toString(java.util.stream.Collections.singleton(vm)), mac); }
protected org.ovirt.engine.core.bll.ValidationResult macAvailable() { org.ovirt.engine.core.common.businessentities.network.VmNic nic = org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic(); if (new org.ovirt.engine.core.bll.network.VmInterfaceManager().tooManyPluggedInterfaceWithSameMac(nic, org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getMacPool())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getMacPool()))); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
protected com.google.gwt.user.client.ui.IsWidget createMacColumn(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface networkInterface) { org.gwtbootstrap3.client.ui.Column column = new org.gwtbootstrap3.client.Column(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.SM_4); column.addStyleName(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.VM_NIC_OVERFLOW); com.google.gwt.dom.client.DListElement dl = com.google.gwt.dom.client.Document.get().createDLEelement(); com.google.gwt.safehtml.shared.SafeHtml mac = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(networkInterface.getMacAddress()); addBoldReverseDetailItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.macVmGuestAgent()), mac, dl); column.getElement().appendChild(dl); org.ovirt.engine.ui.common.widget.tooltip.WITHOUT_CLUSTER = new org.ovirt.engine.ui.common.widget.tooltip.WtmlUtils.fromSafeHtml(column); tooltip.setHtml(mac); return tooltip; }
protected com.google.gwt.user.client.IsWidget createIpv6Column(org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface guestAgentInterface) { org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterface column = new org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterface(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.VM_NIC_OVERFLOW); column.addStyleName(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.VM_NIC_OVERFLOW); com.google.gwt.dom.client.DListElement dl = com.google.gwt.dom.client.Document.get().createDLEelement(); java.lang.StringJoiner ipv6AddressJoiner = new java.util.HashName(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.COMMA_DELIMITER); if ((guestAgentInterface.getIpv6Addresses())!= null) { ipv6AddressPanel.add(java.lang.String.join(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.COMMA_DELIMITER, guestAgentInterface.getIpv6Addresses())); } java.lang.String ipv6Address = ipv6Address; if (ipv6Address.isEmpty()) { ipv6Address = org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.notAvailableLabel(); } com.google.gwt.safehtml.shared.SafeHtml ipv6 = com.google.gwt.dom.client.ui.ElementList<org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListModel>(); if (nicV6AddressEqual(null)) { ipv6AddressPanel.add(java.lang.String.format("
protected com.google.gwt.user.client.IsWidget createIpv4Column(org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface guestAgentInterface) { org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterface column = new org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterface(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.VM_NIC_OVERFLOW); column.addStyleName(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.VM_NIC_OVERFLOW); com.google.gwt.dom.client.DListElement dl = com.google.gwt.dom.client.Document.get().createDLEelement(); java.lang.StringJoiner ipv4AddressJoiner = new java.util.HashMap<org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroup>(); java.lang.StringJoiner ipv4AddressJoiner = new java.util.String>(java.lang.String.join(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.COMMA_DELIMITER, guestAgentInterface.getIpv4Addresses())); if ((guidv4Address.isEmpty()) && (ipv4Address.isEmpty())) { ipv4Address = org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.notAvailableLabel(); } com.google.gwt.safehtml.shared.SafeHtml ipv4 = com.google.gwt.safehtml.shared.SafeHtmlUtils.create(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.notAvailableLabel()); if (ipv4Address!= null) { ipv4Address = org.ovirt.engine.ui.common.widget.uicommon.vm.vm
private void applyVmInterfaceSpecificStyles() { mainInfoPanel.getElement().getStyle().setPaddingTop(0, Style.Unit.PX); detailedInfoContainer.getElement().getStyle().setMarginLeft(0, Style.Unit.PX); descriptionPanel.getElement().getStyle().setWidth(100, Style.Unit.PCT); descriptionPanel.getElement().getStyle().setWidth(20, Style.Unit.PCT_VIEW_DESCRIPTION); descriptionPanel.removeStyleName(PatternflyConstants.P_LIST_VIEW_DESCRIPTION); descriptionPanel.removeStyleName(PatternflyConstants.P_LIST_VIEW_DESCRIPTION); descriptionPanel.removeStyleName(PatternflyConstants.P_LIST_VIEW_DESCRIPTION); descriptionPanel.removeStyleName(PatternflyConstants.P_LIST_VIEW_DESCRIPTION); descriptionPanel.removeStyleName(PatternflyConstants.P_LIST_VIEW_DESCRIPTION); descriptionPanel.removeStyleName(PatternflyConstants.P_LIST_VIEW_DESCRIPTION); descriptionPanel.removeStyleName(Pattern); descriptionPanel.removeStyleName(Pattern); descriptionPanel.removeStyleName(Pattern); descriptionPanel.removeStyleName(Pattern); descriptionPanel.addStyleName(Pattern); descriptionPanel.removeStyleName(style.p_list_list, style.getStyle().setWidth(style.PxlPxlPxlPx); }
protected com.google.gwt.user.client.ui.IsWidget createNetworkNameColumn(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface networkInterface) { org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceColumn column = new org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterface(org.ovirt.engine.ui.uicommonweb.models.vm.VmInterfaceListModel.SM_3); column.addStyleName(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.VM_NIC_OVERFLOW); com.google.gwt.dom.client.DListElement dl = com.google.gwt.dom.client.Document.get().createDLEelement(); com.google.gwt.safehtml.shared.SafeHtml name = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(((networkInterface.getNetworkName())!= null? networkInterface.getNetworkName() : org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListModel.constants.unAvailablePropertyLabel())); addBoldReverseDetailItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.networkNameInterface()), name, dl); column.getElement().appendChild(dl); return null; }
private void updateNics(java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel> nics) { nicList.clear(); java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.panels.NetworkInterfaceModel> groups = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic : nics) { groups.add(new org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkPanel(nic, eventBus, style)); } nicList.addAll(groups, (!(render))); nicGroups = groups; }
private org.ovirt.engine.ui.common.widget.MenuBar menuFor(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> item) { org.ovirt.engine.ui.common.widget.MenuBar menu = rootMenu(item); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> operationMap = item.getSetupModel().commandsFor(item); for (final java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> entry : operationMap.entrySet()) { final java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand> commands = entry.getValue(); if (entry.getKey().isUnary()) { assert (entry.getKey().isUnary()) { assert (entry.getKey().isUnary()) { assert (entry.getKey().isUnary()) { assert (entry.getKey().isUnary()) { assertEquals(entry.getKey().getVerb(item), commands.getKey(), commands.get(0))); } } menu.addItem(entry.getKey().getVerb(item), command.getKey(), command))); } menu.addItem(new com.google.gwt.user.client.ui.MenuItem(command.getName(), button)); }
@org.junit.Test public void testAdd() { javax.ws.rs.core.UriInfo uriInfo = mockUri("hosts", "0000-0001-000000000011", "nics"); javax.ws.rs.core.Request request = mockRequest("POST"); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("POST correct usage, fault.http:http:http:http:http:http:", fault.getDetail()); }
@org.junit.Test public void testUpdateWithNonGuidId() { try { javax.ws.rs.core.UriInfo uriInfo = mockUri("hosts", "0000-0001-000000000011", "nics", "rx-0000", "16" }, javax.ws.rs.core.Request request = mockRequest("PUT"); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("wrong correct usage, See: http:http:http:http:", fault.getDetail()); } catch (java.lang.ClassNotFoundException e) { fail(); } }
@org.junit.Test public void testAction() { try { javax.ws.rs.core.UriInfo uriInfo = mockUri("vms", "0000-0001-0001-000000000011", "freezefilesystems"); javax.ws.rs.core.Response request = org.ovirt.engine.api.model.Fault faultFinder.getUsageMessage(uriInfo, request); assertEquals("POST correct usage, fault.getDetail()); } catch (java.lang.ClassNotFoundException e) { fail(); } }
protected org.ovirt.engine.core.common.businessentities.VM getVmFromConfiguration() { org.ovirt.engine.core.common.queries.IdQueryReturnValue queryReturnValue = runInternalQuery(VdcQueryType.GetVmConfigurationBySnapshot, new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.storage.disk.CreateAllTemplateDisksFromSnapshotCommand.getParameters().getSnapshotId())); return queryReturnValue.getSucceeded()? org.ovirt.engine.core.common.queries.IdQueryParameters.getParameters().getSnapshotId() : null; }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getVmDisksFromDb() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> disksFromDb = getVmFromConfiguration(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksFromDb = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(vmFromConfiguration.getDiskMap().values(), org.ovirt.engine.core.bll.storage.disk.CreateAllTemplateDisksFromSnapshotCommand.getVm().getDiskMap().values(), org.ovirt.engine.core.bll.storage.disk.CreateAllTemplateDisksFromSnapshotCommand.getVm().getDiskMap().values(), org.ovirt.engine.core.bll.storage.disk.CreateAllTemplateDisksFromSnapshotCommand.getVm().getDiskMap().values(), org.ovirt.engine.core.bll.storage.disk.CreateAllTemplateDisksFromSnapshotCommand.getVm().getDiskMap().values(), org.ovirt.engine.core.bll.storage.disk.CreateAllTemplateDisksFromSnapshotCommand.getVm().getDiskMap().values(), org.ovirt.engine.core.bll.storage.disk.CreateAllTemplateDisksFromSnapshotCommand.getVm().getDiskMap().values(), org.ovirt.engine.core.bll.storage.disk.image.OnlyVmTemplateDisksFromSnapshotCommand.getParameters().values(), org.ovirt.engine.core.bll.storage.disk.image.CreateAllTemplateDisksFromSnapshotCommand.getVm().getDiskMap().values(), org.ovirt.engine.core.bll.storage.disk.image.ImageDisksFilter.filterImageDisks(org.ovirt.engine.core.bll.storage.disk.disk.image.CreateAllTemplateDisksFromSnapshotCommand.getDiskMap().values(), org.ovirt.engine.core.bll.storage.disk.
public void loadVmFromOva() { clearForLoad(); if (!(validateOvaConfiguration())) { return; } startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmFromOva(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(((returnValue) -> ((returnValue) -> (returnValue.getSucceeded())), java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.vms.Collectors.toMap(((e) -> (returnValue.getKey().getName())))); updateVms(vmToOva.keySet().stream().collect(org.ovirt.engine.ui.uicommonweb.models.vms.Collectors.toMap((e) -> e.getKey().getName(), java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.vms.Collectors.toMap((e) -> e.getKey().getName())); } stopProgress(); }), getHosts().getSelectedItem().getId(), getOvaPath().getEntity()); }
private void updateVmDynamicData() { if ((vdsmVm.getVmDynamic().getGuestAgentNicsHash())!= (dbVm.getGuestAgentNicsHash())) { vmGuestAgentNics = vdsmVm.getVmGuestAgentInterfaces(); dbVm.setIp(extractVmIpsFromGuestAgentInterfaces(vmGuestAgentNics)); } java.util.List<java.lang.String> changedFields = getChangedFields(dbVm, vdsmVm.getVmDynamic()); changedFields.removeAll(org.ovirt.engine.core.vdsbroker.monitor.VmAnalyzer.UNCHANGEABLE_FIELDS_BY_VDSM); if ((vdsmVm.getVmDynamic().getStatus())!= (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) { changedFields.remove(VmDynamic.APPLICATIONS_LIST_FIELD_NAME); vdsmVm.getVmDynamic().setAppList(dbVm.getAppList()); } if (!(changedFields.isEmpty())) { dbVm.updateRuntimeData(vdsmVm.getVmDynamic(), vdsManager.getVdsId()); saveDynamicData(dbVm); } }
private java.util.List<org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface> filterGuestAgentInterfaces(java.util.List<org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface> nics) { nics = removeLoopbacks(nics); nics.forEach(this::filterIpv4Addresses); nics.forEach(this::filterIpv6Addresses); return nics; }
private void filterIpv6Addresses(org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface nic) { if ((nic.getIpv6Addresses().size()) > 0) { nic.setIpv6Addresses(nic.getIpv6Addresses().map(this::stripIpv6ZoneIndex).filter(ValidationUtils.toList())); } }
protected void destroyVm() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue actionReturnValue = runVdsCommand(VDSCommandType.DestroyVm, buildDestroyVmVmVDSCommandParameters(org.ovirt.engine.core.bll.StopVmCommandBase.getVdsId())); if (((org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom)) && ((org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getMigratingToVds())!= null)) { runVdsCommand(VDSCommandType.DestroyVm, buildDestroyVmVmVmVDSCommandParameters(org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getMigratingToVds())); } setActionReturnValue(actionReturnValue); }
private void initButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, org.ovirt.engine.ui.common.widget.action.ActionButton button, int order) { button.setText(buttonDef.getText()); java.lang.String buttonId = buttonDef.getUniqueId(); if (button == null) { button.asWidget().getElement().getElement().setId(org.ovirt.engine.ui.common.utils.ElementIdUtils.createElementId(getElementId(), buttonId)); } actionFormGroup.remove(actionKebabab); if (order < (actionFormGroup.getWidgetCount())) { java.util.List<com.google.gwt.user.client.ui.Widget> currentButtons = new java.util.ArrayList<>(); for (int i = 0; i < (actionFormGroup.getWidget(i)); } actionFormGroup.clear(); currentButtons.add(order, button.asWidget()); currentButtons.add(actionKebab); } else { actionFormGroup.add(button); actionFormGroup.add(actionKebabab); } actionItemMap.put(button); }
public org.ovirt.engine.ui.common.widget.action.ActionButton addDropdownComboolean addDropdownComboolean(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>> subActions, org.ovirt.engine.ui.common.widget.action.DropdownActionButton.SelectedItemsProvider<T>> selectedItemsProvider) { org.ovirt.engine.ui.common.widget.action.DropdownActionButton<T> dropdownActionButton; if ((buttonDef.getIcon()) instanceof org.ovirt.engine.ui.common.widget.action.DropdownActionButtonType) { dropdownActionButton = new org.ovirt.engine.ui.common.widget.action.DropdownActionButton(subActions, selectedItemsProvider, true, ((org.gwtbootstrap3.client.ui.constants.IconType) (buttonDef.getIcon()))); } else { dropdownActionButton = new org.ovirt.engine.ui.common.widget.action.DropdownActionButton(subActions, selectedItemsProvider, true, null); } initButton(buttonDef, dropdownActionButton, java.lang.Integer.MAX_VALUE); return dropdownActionButton; }
@java.lang.Override public org.ovirt.engine.ui.common.widget.action.ActionButton addMenuListItem(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> menuItemDef, int order) { org.ovirt.engine.ui.common.widget.action.ActionAnchorListItem menuItem = new org.ovirt.engine.ui.common.widget.action.ActionAnchorListItem(menuItemDef.getText()); java.lang.String menuItemId = menuItemDef.getUniqueId(); if (menuItem!= null) { menuItem.asWidget().getElement().setId(org.ovirt.engine.ui.common.utils.ElementIdUtils.createElementId(getElementId(), menuItemId)); } actionItemMap.put(menuItemDef, menuItem); actionKebab.addMenuItem(menuItem, order); return menuItem; }
public org.ovirt.engine.ui.common.widget.action.ActionButton addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, int order) { org.ovirt.engine.ui.common.widget.action.SimpleActionButton newActionButton = createNewActionButton(buttonDef); initButton(buttonDef, newActionButton, order); return newActionButton; }
public void addMenuItem(org.ovirt.engine.ui.common.widget.action.ActionButton actionButton, int order) { if (order > (order > (ebabababMenu.getWidgetCount())) { key = (e.getWidgetCount().getWidgetCount()); } else { kbFacade.insert(actionButton.asWidget(), order); } }
org.ovirt.engine.ui.common.widget.action.ActionButton addMenuListItem(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> menuItemDef, int order);
public void addDetailPlaceActionButton(org.ovirt.engine.ui.webadmin.plugin.entity.EntityType mainTabEntityType, org.ovirt.engine.ui.webadmin.plugin.entity.EntityType subTabEntityType, java.lang.String label, org.ovirt.engine.ui.webadmin.plugin.api.api.ActionButtonInterface actionButtonInterface) { java.lang.String historyToken = mainTabEntityType.getSubTabHistoryToken(subTabEntityType); if (historyToken!= null) { org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> actionButton = createButtonDefinition(label, actionButtonInterface); actionButton.setPriority(actionButtonInterface.getPriority()); org.ovirt.engine.ui.common.presenter.AddActionButtonEvent.fire(this, historyToken, actionButton); } }
public org.ovirt.engine.ui.common.widget.action.ActionButton addDropdownActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>> subActions, org.ovirt.engine.ui.common.widget.action.DropdownActionButton.selectedItemsProvider<T>> selectedItemsProvider) { org.ovirt.engine.ui.common.widget.action.DropdownActionButton<T> dropdownActionButton = new org.ovirt.engine.ui.common.widget.action.DropdownActionButton(subActions, selectedItemsProvider); initButton(buttonDef, dropdownActionButton, java.lang.Integer.MAX_VALUE); return dropdownActionButton; }
public void addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef) { addActionButton(buttonDef, buttonDef); }
private void addPluginActionButtons(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>> pluginActionButtonList) { if ((getActionPanelPresenterWidget())!= null) { for (org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> buttonDef : pluginActionButtonList) { if ((buttonDef.getPriority()) > 0) { order = 0; } getActionPanelPresenterWidget().addActionButton(((org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition) (buttonDef))); } } }
public java.lang.Double getPriority() { return getValueAsDouble("priority", getPriority(org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity.MIN_VALUE); }
private void addPluginActionButtons(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>> pluginActionButtonList) { if (hasActionPanelPresenterWidget()) { for (org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> buttonDef : pluginActionButtonList) { org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.getActionPanelPresenterWidget().addActionButton(((org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>>) (buttonDef))); } } }
void getPriority();
public void addMenuPlaceActionButton(org.ovirt.engine.ui.webadmin.plugin.entity.EntityType entityType, java.lang.String label, org.ovirt.engine.ui.webadmin.plugin.api.ActionButtonInterface actionButtonInterface) { java.lang.String historyToken = entityType.getMainHistoryToken(); if (historyToken!= null) { org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> actionButton = createButtonDefinition(label, actionButtonInterface); actionButton.setPriority(actionButtonInterface.getPriority()); org.ovirt.engine.ui.common.presenter.AddActionButtonEvent.fire(this, historyToken, actionButton); } }
public void addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButton actionButton) { notificationKebab.addMenuItem(actionButton, java.lang.Integer.MAX_VALUE); notificationKeb.setVisible(((notificationKeb.getWidgetCount()) > 0)); }
public void addMenuListItem(final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> menuItemDef) { addMenuListItem( menuItemDef); }
org.ovirt.engine.ui.common.widget.action.ActionButton addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, int order);
@org.junit.Before public void setUp() throws java.lang.Exception { vm = createVm(); validator = new org.ovirt.engine.core.bll.validator.VmValidator(vm); mockVmPropertiesUtils(); when(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDao()).thenReturn(vmNetworkInterfaceDao); when(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVnicProfileDao()).thenReturn(vnicProfileDao); }
public void setLabel(java.lang.String label) { this.label = label; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = new org.ovirt.engine.core.common.action.ActionReturnValue(); final org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.pm.RestartVdsCommand.getVdsId(); final java.lang.String sessionId = org.ovirt.engine.core.bll.pm.RestartVdsCommand.getParameters().getSessionId(); returnValue = executeVdsFenceAction(vdsId, sessionId, actionType); if ((org.ovirt.engine.core.bll.pm.RestartVdsCommand.getParameters().getParentCommand()) == (org.ovirt.engine.core.common.action.ActionType.VdsNotRespondingTreatment)) { updateHostInFenceAction(vdsId, true); } if (wasSkippedDueToPolicy(returnValue)) { org.ovirt.engine.core.bll.pm.RestartVdsCommand.getParameters().getParentCommand().getParentCommand().getParentCommand()); returnValue = executeCommand(vdsId, sessionId); setActionReturnValue(returnValue); org.ovirt.engine.core.bll.pm.RestartVdsCommand.setSucceeded(false); setActionReturnValue(returnValue); setSucceeded(returnValue.getSucceeded()); setSucceeded(returnValue.getSucceeded()); } else if (returnValue.getSucceeded()) { executeFenceVdsFenceAction(vdsId, sessionId, actionType.StartVds); setSucceeded(returnValue.getSucceeded()); } else { org.ovirt.engine.core.bll.pm.RestartVdsCommand.setSucceeded(true); setActionReturnValue(returnValue); } }
private void alertActionSkippedAlreadyInStatus(org.ovirt.engine.core.common.businessentities.pm.FenceActionType fenceActionType, org.ovirt.engine.core.common.businessentities.pm.PowerStatus powerStatus) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable auditLogable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); auditLogable.addCustomValue("PowerStatus", fencedHost.getName()); auditLogable.addCustomValue("AgentStatus", powerStatus.name()); auditLogDirector.log(auditLogable, AuditLogType.VDS_ALREADY_IN_REQUESTED_STATUS); }
protected org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult fence(org.ovirt.engine.core.common.businessentities.pm.FenceActionType fenceAction, java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> fenceAgents) { org.ovirt.engine.core.bll.pm.PowerManagementHelper.AgentResult result = createFenceAgentsIterator(fenceAgents); org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult result = null; while (iterator.hasNext()) { java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> agents = iterator.next(); if (iterator.hasNext()) { java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> agents = iterator.next(); if (iterator.hasNext()) { continue; } if (((result.getStatus()) == (org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.STATUS)) && (iterator.hasNext())) { continue; } if (((result.getStatus()) == (org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.SUCCESS)) && ((result.getPowerStatus()) == (getRequestedPowerStatus(fenceAction)))) { continue; } } result = createFenceActionExecutor(agents).fence(fenceAction); if ((result.getStatus()) == (org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.SUCCESS)) { break; } } return result; }
public static java.util.Map<java.lang.String, java.lang.Long> ioTuneMapFrom(org.ovirt.engine.core.common.businessentities.qos.StorageQos storageQos) { java.util.Map<java.lang.String, java.lang.Long> ioTuneMap = new java.util.LinkedHashMap<>(); ioTuneMap.put(VdsProperties.ReadBytesSec, org.ovirt.engine.core.vdsbroker.vdsbroker.CommununeUtils.convertTasks(storageQos.getMaxReadThroughput())); ioTuneMap.put(VdsProperties.ReadBytesSec, org.ovirt.engine.core.vdsbroker.vdsbroker.Broker.entities.storageQos.getMaxReadIops())); ioTuneMap.put(VdsProperties.ReadBytesSec, org.ovirt.engine.core.vdsbroker.vdsbroker.Broker.entities.storageQosInfoUtils.convert(storageQos.getMaxReadThroughput())); ioTuneMap.put(VdsProperties.TotalBytesSec, org.ovirt.engine.core.vdsbroker.vdsbroker.Broker.entities.StorageQos.getMaxIops())); ioTuneMap.put(VdsProperties.WriteBytesSec, org.ovirt.engine.core.vdsbroker.vdsbroker.Broker.entities.StorageDeviceuneUtils.convert(storageQos.getMaxWriteThroughput())); ioTuneMap.put(VdsProperties.WriteIopsSec, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VdsBroker.auditUtils.convertIops(storageQos.getMaxWriteThroughput())); return ioTuneMap; }
java.lang.String ACTION_TYPE_FAILED_TEMPLATE_IMAGE_ALREADY_EXISTS();
protected boolean checkIfNeedToBeOverride() { if ((((isTemplate()) && (isCopyOperation())) && (!(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getForceOverride()))) && (getImage().getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getId()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_IMAGE_ALREADY_EXISTS); } return true; }
public java.lang.Boolean call() throws java.lang.Exception { _deploy.getParser().cliEnvironmentSet(VdsmEnv.ENGINE_HOST_VERSION, clusterVersion.getValue()); return true; }
public boolean isSearchUsingTags() { return ((origText.contains("tag")) || (getCrossRefRefObjList().contains(SearchObjects.Vdc_STORAGE_POOL_NAME))) || (getCrossRefObjList().contains(SearchObjects.Vdc_STORAGE_DOMAIN_OBJ_NAME)); }
public java.lang.String getCpuNameByCpuId(java.lang.String name, org.ovirt.engine.core.compat.Version ver) { final org.ovirt.engine.core.bll.CpuFlagsManagerHandler.CpuFlagsManager cpuFlagsManager = org.ovirt.engine.core.bll.CpuFlagsManagerHandler.ManageDictionary.get(ver); if (org.apache.commons.lang.StringUtils.isNotEmpty(cpuName)) { return cpuFlagsManager.getCpuNameByCpuId(name); } return cpuFlagsManager!= null? org.ovirt.engine.core.bll.CpuFlagsManagerHandler.getCpuFlagsManager().getCpuNameByCpuId(name + ", " + " + "spec-ctrl")) : null; }
private java.lang.String generateDomainXml() { org.ovirt.engine.core.common.businessentities.network.VmNic nic = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getNic(); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getVmDevice(); org.ovirt.engine.core.vdsbroker.vdsbroker.vdsbroker.HotPlugOrUnplugNicVmBuilder builder = new org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand(org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getVm(), org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getVds().getId(), nic, vmDevice, vmDevice, vmInfoBuildUtils, (nic.isPassthrough()? org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getVds().getId(), vmDevice.getHostDevice()) : org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugVmCommand.getVds().getId(), vmDevice.getHostDevice())).build(); java.lang.String libvirtXml = builder.buildHotplugNic(); java.lang.String libvirtXml = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVmCommand.getParameters().getVds().getId(), vmDevice.getHostDevice()); if (spyLibvirtXml!= null) { log.info("LibvirtXml: {}", prejectLibvirtXml); } return libvirtXml; }
@org.junit.Test public void searchUsingTags() { java.lang.String[] searchTexts = new java.lang.String[]{ "type = user.id = " + "\" and vm.id=123-1234-1234-1234-123-123123123", "foo", "foo", org.ovirt.engine.core.searchbackend.SyntaxChecker().analyzeSyntaxState(searchText, false).isSearchUsingTags()); }
@org.junit.Test public void searchNotUsingTags() { java.lang.String[] searchTexts = new java.lang.String[]{ "Users: ", "Hosts:", "Vms:", "Datacenters:", "Datacenters:", "Clusters:", "Clusters:", "Clusters:", "Clusters: "Clusters:"); }
private java.lang.Integer deserializeValue(java.util.Map<java.lang.String, java.lang.Object> entry, java.lang.String curveKey, long value) { java.util.Map<java.lang.String, java.lang.Long> parameters = ((java.util.Map<java.lang.String, java.lang.Long>) (entry.get( curveKey))); if (parameters == null) { return null; } java.lang.Object average = parameters.get(VdsProperties.HOST_QOS_AVERAGE); java.lang.Long average = (average))? ((java.lang.Long) (average)) : java.lang.Long.valueOf(average))); return average == null? null : ((int) (average / conversionPercent)); }
public java.lang.String buildHotplugDisk() { writer.writeStartDocument(false); writer.writeStartElement("hotplug"); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = disk.getDiskVmElementForVm(vm.getId()); java.lang.String dev = vmInfoBuildUtils.makeDiskName(dve.getDiskInterface().getName(), 0); writeDisk(device, disk, dve, 0); writer.writeStartElement("metadata"); writer.writeStartElement("metadata"); writer.writeStartElement("metadata"); writer.writeStartElement(org.ovirt.engine.core.vdsbroker.vminInfo.LibvirtVmXmlBuilder.OVIRT_VM_PREFIX, org.ovirt.engine.core.vdsbroker.vdsbroker.Builder.LibvirtVmXmlBuilder.OVIRT_VM_URI, org.ovirt.engine.core.vdsbroker.vdsbroker.Builder.LibvirtVmXmlBuilder.OVIRT_VM_URI, "vm"); writeDiskMetadata(); writer.writeStartElement(org.ovirt.engine.core.vdsbroker.vdsbroker.vminInfo.LibvirtVmXmlBuilder.OVIRT_VM_URI, "vm"); writeDiskMetadata(); writer.writeStartElement(); writer.writeEndElement(); writer.writeEndElement(); return writer.getStringXML(); }
java.lang.String hideVfLabel();
public void toggleView() { if (isDefault) { setText(secondText); } else { setText(secondText); }
@java.lang.Override public void setIcon(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel icon) { if (icon!= null) { super.setIconId(icon); } }
public abstract void handleVmClick(com.google.gwt.event.dom.client.ClickEvent event) { if (((event.getClickEvent().getSelectedItem())!= null) && ((getDefaultIcon().getEntity())!= null)) { return; } }
private int getWarningLowConfirmationValue() { if (isNewStorage()) { return ((java.lang.Integer) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigValues.WarningLowSpaceIndicator))); } return getStorage().getStorageStaticData().getWarningLowConfirmation(); }
@java.lang.Override protected java.lang.String generateDomainXmlRpc() { org.ovirt.engine.core.common.businessentities.network.VmNic nic = org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.getParameters().getNic(); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.getParameters().getVmDevice(); org.ovirt.engine.core.vdsbroker.vdsbroker.VmXmlBuilder builder = new org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVmBuilder(org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.getParameters().getVm(), org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.getVds().getId(), nic, vmDevice, vmDevice, vmInfoBuildUtils, java.util.Collections.emptyMap()); java.lang.String libvirtXml = builder.buildHotunplugNic(); java.lang.String libvirtXml = org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVmXmlBuilder.pciBuilder builder.prepare(libvirtXml); if (prepLibvirtXml!= null) { log.infoFormat("NIC hot-unplug: {}", formattedLibvirtXml); } return libvirtXml; }
@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getNextStep()) == null) { return false; } switch (org.ovirt.engine.core.bll.storage.DrendCommand.getParameters().getNextStep()) { case GEO_REP_REP : org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters parameters = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters(getSession().getMasterVolumeId(), getSession().getId()); parameters.setEndProcedure(EndProcedure.COMPcedure.COMPED); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.DrendCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.storage.DrendStorageSyncCommand.getActionType()); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(DRESSType.REMOVE_TEM_SNAPSHOTS); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(RESTART_SNAPSHOTS); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(null); if (!(vdcRetValue.getSucceeded())) { endWithFailure(); } org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(null); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(null); org.ovirt.engine.core.bll.storage.drbll.DrendCommand.getParameters().setNextStep(null); }
